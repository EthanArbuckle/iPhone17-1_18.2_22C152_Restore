void std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(void *)(a1 + 8);
  v2 = *(void *)(v1 + 248);
  v3 = *(void *)(v2 + 40);
  if (v3 != *(void *)(v2 + 48))
  {
    v4 = *(void *)(v2 + 48);
    do
    {
      if (*(void *)v3)
      {
        v5 = *(void *)(*(void *)v3 + 328);
        if (v5) {
          *(unsigned char *)(v5 + 282) = 0;
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  v6 = **(void **)(*(void *)(*(void *)(v1 + 32) + 8) + 88);
  if (v6)
  {
    v7 = 7;
    md::MapEngine::setNeedsTick(v6, &v7);
  }
}

uint64_t std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D440;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57D440;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0,std::allocator<altitude::CompleteGlobeTileSetLoader::CompleteGlobeTileSetLoader(std::string const&,altitude::Context *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__value_func<void ()(double,double,double)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    v4 = (void *)result[3];
    v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1A1ED6158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1ED6454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1A1ED66D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_1A1ED6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  v10 = v9;

  a9.super_class = (Class)ReachabilityCallbacker;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<ReachabilityCallbacker * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559A18;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<ReachabilityCallbacker * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559A18;

  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::VSCommon::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::VSCommon::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::VSCommon::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void non-virtual thunk to'ggl::VSCommon::Mesh::~Mesh(ggl::VSCommon::Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::VSCommon::Mesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::VSCommon::Mesh *)((char *)this - 16));
}

void ggl::VSCommon::Mesh::~Mesh(ggl::VSCommon::Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::VSCommon::Vertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::VSCommon::Vertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VSCommon::Mesh::Mesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
    v15 = a3;
    uint64_t v22 = a2;
    a2 = v22;
    a3 = v15;
    if (v16)
    {
      {
        ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::VSCommon::vertexReflection;
      }
      ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VSCommon::Vertex>::attributesReflection(void)::r;
      *(void *)algn_1E957EFF0 = 1;
      a3 = v15;
      a2 = v22;
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = &ggl::MeshTyped<ggl::VSCommon::Vertex>::typedReflection(void)::r;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    v20 = a3;
    a3 = v20;
    uint64_t v6 = a1 + 64;
    if (v17) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 120) = 0;
  uint64_t v8 = a1 + 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v7;
  {
    v21 = a3;
    uint64_t v23 = v6;
    uint64_t v8 = a1 + 120;
    a3 = v21;
    int v19 = v18;
    uint64_t v6 = v23;
    if (v19) {
      operator new();
    }
  }
  *(void *)(a1 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = v8;
  *(void *)a1 = &unk_1EF562C20;
  *(void *)(a1 + 16) = &unk_1EF562C40;
  uint64_t v9 = a3[1];
  uint64_t v24 = *a3;
  v25 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v6, &v24, &v26, 1uLL);
  v10 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_1EF561A20;
  *(void *)(a1 + 16) = &unk_1EF561A40;
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::GlobeAtmosphere::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::GlobeAtmosphere::AtmosphereMesh::~AtmosphereMesh(ggl::GlobeAtmosphere::AtmosphereMesh *this)
{
  ggl::Mesh::~Mesh((ggl::GlobeAtmosphere::AtmosphereMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::GlobeAtmosphere::AtmosphereMesh *)((char *)this - 16));
}

void ggl::GlobeAtmosphere::AtmosphereMesh::~AtmosphereMesh(ggl::GlobeAtmosphere::AtmosphereMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::GlobeAtmosphere::BasePipelineState::~BasePipelineState(ggl::GlobeAtmosphere::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::GlobeAtmosphere::BasePipelineSetup::textureIsEnabled(ggl::GlobeAtmosphere::BasePipelineSetup *this)
{
  return 0;
}

void ggl::GlobeAtmosphere::BasePipelineSetup::~BasePipelineSetup(ggl::GlobeAtmosphere::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A1ED7A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1ED7ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1ED7B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float md::TextIconLabelPart::styleBrightness(md::TextIconLabelPart *this, const md::LabelStyle *a2)
{
  return *((float *)a2 + 27);
}

uint64_t md::ImageLabelPart::publicName(md::ImageLabelPart *this)
{
  return 0;
}

uint64_t md::ImageLabelPart::setLayerOffset(uint64_t this, char a2)
{
  *(unsigned char *)(this + 633) = a2;
  return this;
}

uint64_t md::TextIconLabelPart::debugString@<X0>(md::TextIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"TextIcon(", 9);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 80) + 32))(*((void *)this + 80));
  if (v4) {
    v5 = (const char *)v4;
  }
  else {
    v5 = "";
  }
  size_t v6 = strlen(v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
  if ((v22 & 0x10) != 0)
  {
    unint64_t v8 = v21;
    if (v21 < v18)
    {
      unint64_t v21 = v18;
      unint64_t v8 = v18;
    }
    uint64_t v9 = (const void **)&v17;
  }
  else
  {
    if ((v22 & 8) == 0)
    {
      size_t v7 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    uint64_t v9 = (const void **)v16;
    unint64_t v8 = v16[2];
  }
  v10 = *v9;
  size_t v7 = v8 - (void)*v9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v12 | 0x8000000000000000;
    *(void *)a2 = v13;
    a2 = v13;
    goto LABEL_18;
  }
  a2[23] = v7;
  if (v7) {
LABEL_18:
  }
    memmove(a2, v10, v7);
LABEL_19:
  a2[v7] = 0;
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v23);
}

void sub_1A1ED7DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::IconLabelPart::partType(md::IconLabelPart *this)
{
  return 6;
}

uint64_t md::IconLabelPart::modelMatrix(md::IconLabelPart *this)
{
  return *((void *)this + 91);
}

uint64_t md::IconLabelPart::stagingModelMatrix(md::IconLabelPart *this)
{
  return *((void *)this + 92);
}

void md::TextIconLabelPart::~TextIconLabelPart(md::TextIconLabelPart *this)
{
  md::IconLabelPart::~IconLabelPart(this);
  v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

void karo::media::DigitalTerrainModel::~DigitalTerrainModel(karo::media::DigitalTerrainModel *this)
{
  *(void *)this = &unk_1EF568030;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::media::Image::~Image((karo::media::DigitalTerrainModel *)((char *)this + 8));
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EF568030;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::media::Image::~Image((karo::media::DigitalTerrainModel *)((char *)this + 8));
}

uint64_t std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  size_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    size_t v7 = v6;
    size_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 3) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  *size_t v7 = v10;
  *a3 = 0;
  --a2[5];
  *(void *)result = a3;
  *(void *)(result + 8) = a2 + 4;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[5];
      v2[5] = 0;
      if (v3) {
        std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::allocate_shared[abi:nn180100]<md::StandardLabelMapTile,std::allocator<md::StandardLabelMapTile>,geo::QuadTile const&,void>(md::LabelMapTile **a1, const QuadTile *a2)
{
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x220uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581130;
  uint8x8_t v5 = md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v4[1], a2);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF53ED68;
  LODWORD(v4[21].__shared_weak_owners_) = 0;
  v4[22].__shared_owners_ = 0;
  v4[22].__vftable = 0;
  *a1 = v5;
  a1[1] = (md::LabelMapTile *)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v5;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v5;
    v4[4].__shared_owners_ = (uint64_t)v4;
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t std::optional<std::shared_ptr<md::StandardLabelMapTile>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 32);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 72);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::StandardGlobeLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::StandardGlobeLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StandardGlobeLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::FlyoverLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::FlyoverLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::FlyoverLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::StandardLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::StandardLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StandardLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF572108;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF572108;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5720C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5720C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::LabelRenderLayer::~LabelRenderLayer(md::LabelRenderLayer *this)
{
  md::LabelRenderLayer::~LabelRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *v14;

  *(void *)this = &unk_1EF5363A0;
  uint64_t v2 = (void *)*((void *)this + 40);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint8x8_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  size_t v6 = (void *)*((void *)this + 30);
  if (v6)
  {
    do
    {
      unint64_t v9 = (void *)*v6;
      uint64_t v10 = v6[5];
      v6[5] = 0;
      if (v10) {
        std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v10);
      }
      operator delete(v6);
      size_t v6 = v9;
    }
    while (v9);
  }
  size_t v7 = (void *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 24);
  while (v8)
  {
    unint64_t v11 = v8;
    unint64_t v8 = (void *)*v8;
    uint64_t v12 = (std::__shared_weak_count *)v11[3];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    (*(void (**)(void, void *, uint64_t))(**((void **)this + 25) + 40))(*((void *)this + 25), v11, 32);
  }
  v13 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v13) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v13, 8 * *((void *)this + 22));
  }
  md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::~LabelCachingStore((uint64_t *)this + 7);
  *(void *)this = &unk_1EF530C60;
  v14 = (void *)*((void *)this + 1);
  if (v14)
  {
    *((void *)this + 2) = v14;
    operator delete(v14);
  }
}

uint64_t *md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::~LabelCachingStore(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    do
    {
      size_t v7 = (void *)*v2;
      unint64_t v8 = (std::__shared_weak_count *)v2[6];
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[8] + 40))(a1[8], v2, 72);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[6] + 40))(a1[6], v3, 8 * a1[5]);
  }
  if (a1[2])
  {
    uint64_t v4 = *a1;
    uint8x8_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(*a1 + 8);
    **(void **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != a1)
    {
      do
      {
        unint64_t v9 = (uint64_t *)v5[1];
        uint64_t v10 = (std::__shared_weak_count *)v5[6];
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1[3] + 40))(a1[3], v5, 56);
        uint8x8_t v5 = v9;
      }
      while (v9 != a1);
    }
  }
  return a1;
}

uint64_t non-virtual thunk to'md::ContourLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  return md::LineLabelFeature::styleIndexForAttributes(a1 - 440, (uint64_t *)(a2 + 32));
}

uint64_t non-virtual thunk to'md::ContourLineLabelFeature::textIndexForFeature()
{
  return 0;
}

uint64_t md::ContourLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  return md::LineLabelFeature::styleIndexForAttributes(a1, (uint64_t *)(a2 + 32));
}

uint64_t md::ContourLineLabelFeature::textIndexForFeature()
{
  return 0;
}

uint64_t md::ContourLineLabelFeature::debugString@<X0>(md::LineLabelFeature *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, unsigned char *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v28);
  uint64_t v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v10 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v22) {
      operator new();
    }
  }
  uint64_t v25 = *((void *)v10 + 91);
  HIBYTE(v24) = 11;
  strcpy((char *)v23, "ContourLine");
  md::LineLabelFeature::debugRoadString(__p, a1, a2, a3, a4, (uint64_t)v23);
  if ((v27 & 0x80u) == 0) {
    unint64_t v11 = __p;
  }
  else {
    unint64_t v11 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v12 = v27;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v11, v12);
  if (((char)v27 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_14:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v25 + 40))(v25, v23[0], v24 & 0x7FFFFFFFFFFFFFFFLL);
    char v13 = v35;
    if ((v35 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_15:
    unint64_t v15 = v34;
    if (v34 < v31)
    {
      unint64_t v34 = v31;
      unint64_t v15 = v31;
    }
    int v16 = (const void **)&v30;
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0) {
    goto LABEL_14;
  }
LABEL_10:
  char v13 = v35;
  if ((v35 & 0x10) != 0) {
    goto LABEL_15;
  }
LABEL_11:
  if ((v13 & 8) == 0)
  {
    size_t v14 = 0;
    a5[23] = 0;
    goto LABEL_27;
  }
  int v16 = (const void **)v29;
  unint64_t v15 = v29[2];
LABEL_19:
  uint64_t v17 = *v16;
  size_t v14 = v15 - (void)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v14 >= 0x17)
  {
    uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v18 = v14 | 7;
    }
    uint64_t v19 = v18 + 1;
    char v20 = operator new(v18 + 1);
    *((void *)a5 + 1) = v14;
    *((void *)a5 + 2) = v19 | 0x8000000000000000;
    *(void *)a5 = v20;
    a5 = v20;
    goto LABEL_26;
  }
  a5[23] = v14;
  if (v14) {
LABEL_26:
  }
    memmove(a5, v17, v14);
LABEL_27:
  a5[v14] = 0;
  v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v28[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete(v32);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v36);
}

void sub_1A1ED91FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a11) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t md::ContourLineLabelFeature::labelFeatureType(md::ContourLineLabelFeature *this)
{
  return 4;
}

void md::ContourLineLabelFeature::updateText(md::ContourLineLabelFeature *this, const void *a2)
{
  uint64_t v3 = *((void *)this + 48);
  for (uint64_t i = *((void *)this + 49); i != v3; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), *(void *)(i - 32), *(void *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(i - 40) + 40))(*(void *)(i - 40), *(void *)(i - 64), *(void *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((void *)this + 49) = v3;
  long long __dst = 0uLL;
  uint64_t v30 = 0;
  {
    operator new();
  }
  uint64_t v31 = mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  uint64_t v5 = mdm::Allocator::instance(void)::alloc;
  md::LabelValueFormatter::LabelValueFormatter((md::LabelValueFormatter *)v25);
  md::LabelValueFormatter::formatElevation(__src, v25, 1u, 0x100000000, 0, *((float *)this + 113));
  int v6 = SHIBYTE(v20);
  size_t v7 = __src[0];
  if (v20 >= 0) {
    size_t v8 = HIBYTE(v20);
  }
  else {
    size_t v8 = (size_t)__src[1];
  }
  if (v20 >= 0) {
    unint64_t v9 = __src;
  }
  else {
    unint64_t v9 = (void **)__src[0];
  }
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&__dst, v9, v8);
  if (v6 < 0) {
    operator delete(v7);
  }
  uint64_t v21 = v31;
  if (SHIBYTE(v30) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)__src, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__src = __dst;
    uint64_t v20 = v30;
  }
  uint64_t v23 = 0;
  uint64_t v24 = v5;
  long long v22 = 0uLL;
  uint64_t v10 = (void *)HIBYTE(v20);
  int v11 = SHIBYTE(v20);
  uint64_t v12 = __src[1];
  if (v20 < 0) {
    uint64_t v10 = __src[1];
  }
  if (!v10)
  {
    unsigned __int8 v15 = -1;
    goto LABEL_32;
  }
  size_t v14 = (unsigned __int8 *)*((void *)this + 48);
  unint64_t v13 = *((void *)this + 49);
  if (v14 == (unsigned __int8 *)v13)
  {
    unsigned __int8 v15 = 0;
LABEL_38:
    if (v13 >= *((void *)this + 50))
    {
      uint64_t v17 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)this + 48, (long long *)__src);
    }
    else
    {
      if (v13)
      {
        *(void *)(v13 + 24) = v21;
        if (v11 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v13, __src[0], (unint64_t)v12);
        }
        else
        {
          long long v16 = *(_OWORD *)__src;
          *(void *)(v13 + 16) = v20;
          *(_OWORD *)unint64_t v13 = v16;
        }
        uint64_t v18 = v23;
        *(_OWORD *)(v13 + 32) = v22;
        *(void *)(v13 + 48) = v18;
        *(void *)(v13 + 56) = v5;
      }
      uint64_t v17 = v13 + 64;
      *((void *)this + 49) = v13 + 64;
    }
    *((void *)this + 49) = v17;
    *((unsigned char *)this + 448) = v15;
    if (v11 < 0) {
      goto LABEL_33;
    }
  }
  else
  {
    unsigned __int8 v15 = 0;
    while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v14, (unsigned __int8 *)__src) & 1) == 0)
    {
      ++v15;
      v14 += 64;
      if (v14 == (unsigned __int8 *)v13)
      {
        if (v15 <= 0x64u) {
          goto LABEL_38;
        }
        *((unsigned char *)this + 448) = -1;
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
LABEL_32:
    *((unsigned char *)this + 448) = v15;
    if (v11 < 0) {
LABEL_33:
    }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v21 + 40))(v21, __src[0], v20 & 0x7FFFFFFFFFFFFFFFLL);
  }
LABEL_34:

  uint64_t v26 = &unk_1EF559EF8;
  if (SHIBYTE(v30) < 0) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v31 + 40))(v31, __dst, v30 & 0x7FFFFFFFFFFFFFFFLL);
  }
}

void sub_1A1ED963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  *(void *)(v18 + 392) = v19;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)&a9);
  md::LabelValueFormatter::~LabelValueFormatter(&a18);
  if (*(char *)(v20 - 73) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v20 - 72) + 40))(*(void *)(v20 - 72), *(void *)(v20 - 96), *(void *)(v20 - 80) & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume(a1);
}

uint64_t md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_5:
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(void *)a1, *(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_5;
  }
  return a1;
}

void md::LabelValueFormatter::~LabelValueFormatter(id *this)
{
  this[1] = &unk_1EF559EF8;
}

uint64_t md::ContourLineLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v5 = *((void *)a1 + 29);
  if (!v5) {
    goto LABEL_12;
  }
  unsigned int v11 = *(_DWORD *)(a3 + 48);
  uint64_t v12 = (void *)((char *)a1 + 232);
  do
  {
    unsigned int v13 = *(_DWORD *)(v5 + 32);
    BOOL v14 = v13 >= v11;
    if (v13 >= v11) {
      unsigned __int8 v15 = (uint64_t *)v5;
    }
    else {
      unsigned __int8 v15 = (uint64_t *)(v5 + 8);
    }
    if (v14) {
      uint64_t v12 = (void *)v5;
    }
    uint64_t v5 = *v15;
  }
  while (*v15);
  if (v12 == (void *)((char *)a1 + 232) || v11 < *((_DWORD *)v12 + 8))
  {
LABEL_12:
    uint64_t v16 = 0;
    uint64_t v54 = 0;
    v55 = 0;
    return v16;
  }
  uint64_t v18 = v12[5];
  uint64_t v19 = (std::__shared_weak_count *)v12[6];
  uint64_t v54 = v18;
  v55 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v18 || *(float *)(a4 + 236) == 0.0 || *((void *)a1 + 48) == *((void *)a1 + 49))
  {
    uint64_t v16 = 0;
    if (!v19) {
      return v16;
    }
    goto LABEL_70;
  }
  unsigned int v20 = *(unsigned __int8 *)(a3 + 404);
  int v21 = *((unsigned __int8 *)a1 + 448);
  uint64_t v22 = *(void *)(a4 + 280);
  if (v22)
  {
    if (vabds_f32(*(float *)(v22 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)a4, v22, 0);
      uint64_t v22 = *(void *)(a4 + 280);
    }
  }
  else
  {
    uint64_t v22 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(void *)(a4 + 280) = v22;
  }
  uint64_t v23 = *(void *)v22;
  unint64_t v24 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 488))(a1);
  uint64_t v25 = (unsigned __int8 *)*((void *)a1 + 20);
  uint64_t v26 = (unsigned __int8 *)*((void *)a1 + 21);
  if (v24 > 0x6DB6DB6DB6DB6DB7 * ((v26 - v25) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    uint64_t v25 = (unsigned __int8 *)*((void *)a1 + 20);
    uint64_t v26 = (unsigned __int8 *)*((void *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v52, v25, v26, v21, v23 + 72);
  uint64_t v27 = v52;
  if (v52)
  {
    id v28 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v28->__shared_owners_ = 0;
    v28->__shared_weak_owners_ = 0;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v29 = md::LabelText::LabelText((uint64_t)&v28[1], v27, (uint64_t)v53, v20);
    uint64_t v50 = v29;
    v51 = v28;
    uint64_t v30 = *((void *)a1 + 24);
    if (v20 >= 0x17) {
      uint64_t v31 = 23;
    }
    else {
      uint64_t v31 = v20;
    }
    int v32 = atomic_load((unsigned __int8 *)(v30 + 224 + v31));
    if (v32 == 254)
    {
      if (*(unsigned char *)(v30 + 289)) {
        unsigned int v33 = 24;
      }
      else {
        unsigned int v33 = 5;
      }
      unint64_t v34 = *(unsigned __int8 **)(v30 + 128);
      uint64_t v35 = *(void *)(v30 + 136) - (void)v34;
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = v35 / 112;
        if (v37 <= 1) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v37;
        }
        int v32 = -1;
        float v39 = 1000.0;
        while (1)
        {
          int v40 = *v34;
          v34 += 112;
          int v41 = v31 - v40;
          if (v31 == v40) {
            break;
          }
          if (v41 >= 0) {
            uint64_t v29 = v41;
          }
          else {
            uint64_t v29 = -v41;
          }
          if (v29 <= v33)
          {
            float v42 = (float)v41;
            if (v41 < 0) {
              float v42 = (float)v41 * -0.8;
            }
            if (v42 < v39) {
              int v32 = v36;
            }
            float v39 = fminf(v42, v39);
          }
          if (v38 == ++v36) {
            goto LABEL_55;
          }
        }
        int v32 = v36;
      }
      else
      {
        int v32 = -1;
      }
LABEL_55:
      atomic_store(v32, (unsigned __int8 *)(v30 + 224 + v31));
    }
    else
    {
      int v32 = (char)v32;
    }
    if (v32 < 0 || ((uint64_t v43 = *(void *)(v30 + 128), v50) ? (v44 = v43 == 0) : (v44 = 1), v44))
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v45 = mdm::Allocator::instance((mdm::Allocator *)v29);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45 + 16))(v45, 1488, 8);
      int v46 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 264))(a1);
      md::CurvedTextLabelPart::CurvedTextLabelPart(v16, v46, &v50, a2, a3, a4, &v54, (uint64_t)&v49, 0.0, a5, 0);
    }
    v47 = v51;
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  v48 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  uint64_t v19 = v55;
  if (v55)
  {
LABEL_70:
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v16;
}

void sub_1A1ED9C5C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v5 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v3, 1488);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void std::__shared_ptr_emplace<md::LabelText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::ContourLineLabelFeature::~ContourLineLabelFeature(md::ContourLineLabelFeature *this)
{
  md::LineLabelFeature::~LineLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::RoadLayerDataSource::shouldFilterFeature()
{
  return 0;
}

uint64_t md::RoadLayerDataSource::useOptionalResources(md::RoadLayerDataSource *this)
{
  return *((unsigned __int8 *)this + 801);
}

void md::RoadLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  unsigned int v13 = *(unsigned __int8 **)(a6 + 16);
  BOOL v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

BOOL md::RoadLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, void *a4)
{
  BOOL result = md::TrafficLayerDataSource::updateRequest(a1, a2, a3, a4);
  *(unsigned char *)(a1 + 800) = result;
  return result;
}

void md::RoadLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v315 = *MEMORY[0x1E4F143B8];
  v174 = (const void *)(a1 + 760);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
  std::__sp_mut::lock(sp_mut);
  int v9 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)v212 = *(void *)(a1 + 760);
  v213 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  v173 = (unsigned __int16 *)a2;
  uint64_t v10 = *(int32x2_t **)(a2 + 16);
  __int32 v11 = v10[1].i32[0];
  LOBYTE(v210) = v10[1].i32[1];
  HIBYTE(v210) = v11;
  int32x2_t v211 = vrev64_s32(*v10);
  int v12 = *(unsigned __int16 *)(a1 + 32);
  v207 = 0;
  v208 = 0;
  unint64_t v209 = 0;
  BOOL v14 = (unsigned __int16 *)*a3;
  unsigned int v13 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v13)
  {
    while (*(unsigned __int16 *)(a1 + 584) != *v14)
    {
      v14 += 24;
      if (v14 == v13) {
        goto LABEL_18;
      }
    }
  }
  if (v14 != v13)
  {
    std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v207, *((void *)v14 + 4));
    for (uint64_t i = (void *)*((void *)v14 + 3); i; uint64_t i = (void *)*i)
    {
      std::string::size_type v16 = i[14];
      std::string::size_type v17 = i[15];
      v267.__r_.__value_.__r.__words[0] = v16;
      v267.__r_.__value_.__l.__size_ = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      int v18 = v208;
      if ((unint64_t)v208 < v209)
      {
        void *v208 = v16;
        v18[1] = v17;
        v208 = v18 + 2;
      }
      else
      {
        int v19 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>((char **)&v207, (uint64_t)&v267);
        size = (std::__shared_weak_count *)v267.__r_.__value_.__l.__size_;
        v208 = v19;
        if (v267.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v267.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
  }
LABEL_18:
  id v21 = *(id *)(a1 + 784);
  (*(void (**)(std::string::size_type *__return_ptr))(*(void *)[v21 gglDevice] + 24))(&v206);

  uint64_t v22 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  uint64_t v23 = ggl::BufferData::BufferData((uint64_t)&v22[1], qword_1E9552208, 2, 1, 6, 1);
  v22[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E258;
  uint64_t v204 = v23;
  v205 = v22;
  unint64_t v24 = operator new(0xE8uLL);
  v24[1] = 0;
  v24[2] = 0;
  *unint64_t v24 = &unk_1EF586E28;
  uint64_t v25 = (gss::Allocator *)ggl::BufferData::BufferData((uint64_t)(v24 + 3), qword_1E95523C8, 2, 1, 6, 1);
  v24[28] = ggl::Tile::Transform::reflection(void)::reflection;
  v24[3] = &unk_1EF55E298;
  uint64_t v202 = (uint64_t)v25;
  uint64_t v203 = (uint64_t)v24;
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  uint64_t v196 = 0;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  uint64_t v199 = gss::Allocator::instance(v25);
  long long v193 = 0u;
  long long v194 = 0u;
  float v195 = 1.0;
  memset(v192, 0, sizeof(v192));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v192);
  uint64_t v190 = 0;
  v191 = 0;
  __p = 0;
  v188 = 0;
  v189 = 0;
  if (v12 != 2) {
    goto LABEL_45;
  }
  uint64_t v26 = (std::__shared_weak_count *)*((void *)v207 + 1);
  uint64_t v185 = *(void *)v207;
  v186 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *a3;
  uint64_t v28 = a3[1];
  if (*a3 != v28)
  {
    while (*(_WORD *)v27 != 17)
    {
      v27 += 48;
      if (v27 == v28) {
        goto LABEL_30;
      }
    }
  }
  if (v27 == v28 || *(void *)(v27 + 32) != 1)
  {
LABEL_30:
    std::string::size_type v31 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v29 = *(void *)(v27 + 24);
    uint64_t v30 = *(void *)(v29 + 112);
    std::string::size_type v31 = *(void *)(v29 + 120);
    if (v31)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(std::string::size_type))(*(void *)v31 + 16))(v31);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
      }
    }
  }
  uint64_t v190 = v30;
  v191 = (std::__shared_weak_count *)v31;
  uint64_t v33 = *a3;
  uint64_t v32 = a3[1];
  v172 = a4;
  if (*a3 != v32)
  {
    do
    {
      if (*(_WORD *)v33 == 16) {
        goto LABEL_35;
      }
      v33 += 48;
    }
    while (v33 != v32);
    BOOL v34 = v190 != 0;
    uint64_t v33 = a3[1];
    goto LABEL_40;
  }
LABEL_35:
  BOOL v34 = v190 != 0;
  if (v33 != v32 && v190)
  {
    unint64_t v35 = *(void *)(v33 + 32);
    uint64_t v36 = __p;
    if (v35 > (v189 - (unsigned char *)__p) >> 4)
    {
      if (v35 >> 60) {
        abort();
      }
      unint64_t v37 = (char *)operator new(16 * v35);
      __p = &v37[v188 - (unsigned char *)__p];
      v188 = &v37[v188 - v36];
      v189 = &v37[16 * v35];
    }
    v62 = *(void **)(v33 + 24);
    if (v62)
    {
      while (1)
      {
        std::string::size_type v63 = v62[14];
        std::string::size_type v64 = v62[15];
        v267.__r_.__value_.__r.__words[0] = v63;
        v267.__r_.__value_.__l.__size_ = v64;
        if (v64) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
        }
        v65 = v188;
        if (v188 >= v189) {
          break;
        }
        *(void *)v188 = v63;
        *((void *)v65 + 1) = v64;
        v188 = v65 + 16;
LABEL_129:
        v62 = (void *)*v62;
        if (!v62) {
          goto LABEL_155;
        }
      }
      v66 = (char *)__p;
      uint64_t v67 = (v188 - (unsigned char *)__p) >> 4;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 60) {
        abort();
      }
      if ((v189 - (unsigned char *)__p) >> 3 > v68) {
        unint64_t v68 = (v189 - (unsigned char *)__p) >> 3;
      }
      if ((unint64_t)(v189 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
        std::string::size_type v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        std::string::size_type v31 = v68;
      }
      if (v31 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v69 = (char *)operator new(16 * v31);
      v70 = &v69[16 * v67];
      *(_OWORD *)v70 = *(_OWORD *)&v267.__r_.__value_.__l.__data_;
      v71 = v70 + 16;
      *(_OWORD *)&v267.__r_.__value_.__l.__data_ = 0uLL;
      if (v65 == v66)
      {
        __p = v70;
        v189 = &v69[16 * v31];
        if (!v65) {
          goto LABEL_150;
        }
      }
      else
      {
        v72 = v65;
        do
        {
          long long v73 = *((_OWORD *)v72 - 1);
          v72 -= 16;
          *((_OWORD *)v70 - 1) = v73;
          v70 -= 16;
          *(void *)v72 = 0;
          *((void *)v72 + 1) = 0;
        }
        while (v72 != v66);
        __p = v70;
        v188 = v71;
        v189 = &v69[16 * v31];
        do
        {
          std::string::size_type v31 = *((void *)v65 - 1);
          if (v31 && !atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(std::string::size_type))(*(void *)v31 + 16))(v31);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
          }
          v65 -= 16;
        }
        while (v65 != v66);
        v65 = v66;
        if (!v66) {
          goto LABEL_150;
        }
      }
      operator delete(v65);
LABEL_150:
      v74 = (std::__shared_weak_count *)v267.__r_.__value_.__l.__size_;
      v188 = v71;
      if (v267.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v267.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
      goto LABEL_129;
    }
LABEL_155:
    md::trafficStyleAttributes((uint64_t *)&v267, *(geo::codec::VectorTile **)(v185 + 144));
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(&v196, (uint64_t)v267.__r_.__value_.__l.__data_, (void *)v267.__r_.__value_.__l.__size_, (uint64_t)(v267.__r_.__value_.__l.__size_ - v267.__r_.__value_.__r.__words[0]) >> 3);
    if (v267.__r_.__value_.__r.__words[0])
    {
      v267.__r_.__value_.__l.__size_ = v267.__r_.__value_.__r.__words[0];
      (*(void (**)(__n128 (*)(uint64_t, uint64_t), std::string::size_type, std::string::size_type))(*(void *)v268 + 40))(v268, v267.__r_.__value_.__r.__words[0], v267.__r_.__value_.__r.__words[2] - v267.__r_.__value_.__r.__words[0]);
    }
    unsigned __int8 v75 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)v212 + 16) + 2786));
    if (v75)
    {
      *(std::string::size_type *)((char *)v267.__r_.__value_.__r.__words + 7) = 0;
      v267.__r_.__value_.__r.__words[0] = 0;
      v267.__r_.__value_.__s.__data_[15] = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v183, *(uint64_t *)v212, (gss::FeatureAttributeSet *)&v196, (gss::QueryOverrides *)&v267);
      std::string::size_type v31 = (std::string::size_type)v183;
      if (v183)
      {
        memset_pattern16(&__b, &unk_1A28FFCB0, 0x10uLL);
        v76 = (std::__shared_weak_count *)v184;
        v267.__r_.__value_.__r.__words[0] = v31;
        v267.__r_.__value_.__l.__size_ = v184;
        if (v184) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v184 + 8), 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v180, v31, (uint64_t)v76);
        if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
        std::string::size_type v31 = +[VKDebugSettings sharedSettings];
        int v171 = [(id)v31 loadGreenTraffic];

        int v77 = v181;
        if (v181)
        {
          int v78 = 3;
          md::TrafficMeshStyle::overrideSetup(__b.i32, (uint64_t)v180, v171, 3);
        }
        else
        {
          memset_pattern16(&__b, &unk_1A28FFCC0, 0x10uLL);
          int v78 = 4;
        }
        uint64_t v293 = 0;
        v294 = &v293;
        uint64_t v295 = 0x2020000000;
        uint64_t v296 = 0;
        uint64_t v289 = 0;
        v290 = &v289;
        uint64_t v291 = 0x2020000000;
        uint64_t v292 = 0;
        v79 = std::__get_sp_mut(v174);
        std::__sp_mut::lock(v79);
        v80 = *(std::__shared_weak_count **)(a1 + 768);
        uint64_t v287 = *(void *)(a1 + 760);
        v288 = v80;
        if (v80) {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__sp_mut::unlock(v79);
        v81.i64[0] = 0x500000005;
        v81.i64[1] = 0x500000005;
        if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(__b, v81)))))
        {
          v267.__r_.__value_.__r.__words[0] = 0;
          v267.__r_.__value_.__l.__size_ = (std::string::size_type)&v267;
          v267.__r_.__value_.__r.__words[2] = 0x11812000000;
          v268 = __Block_byref_object_copy__14;
          v269 = __Block_byref_object_dispose__15;
          v270 = "";
          memset(v271, 0, 96);
          v271[96] = 3;
          uint64_t v273 = 0;
          int v272 = 0;
          int v274 = -1054867456;
          uint64_t v275 = 0;
          unint64_t v276 = 0xFFFFFFF6FFFFFFFFLL;
          int v277 = -1054867456;
          long long v278 = 0u;
          long long v279 = 0u;
          uint64_t v280 = 0;
          unint64_t v281 = 0xFFFFFFFF00000000;
          char v285 = 0;
          char v286 = v77 ^ 1;
          std::string::size_type v31 = HIBYTE(v210);
          double v82 = 1.0 / (double)(1 << SHIBYTE(v210));
          long double v83 = exp(v82 * 6.28318531 * ((double)((1 << SHIBYTE(v210)) + ~v211.i32[0]) + 0.5) + -3.14159265);
          long double v84 = atan(v83) * 114.591559 + -90.0;
          long double v85 = cos(v84 * 0.034906585) * -559.82 + 111132.92;
          long double v86 = v85 + cos(v84 * 0.0698131701) * 1.175;
          long double v87 = v86 + cos(v84 * 0.104719755) * -0.0023;
          long double v88 = v84 * 0.00872664626;
          long double v89 = tan(v84 * 0.00872664626 + 0.78103484);
          double v90 = log(v89);
          long double v91 = tan(v88 + 0.789761487);
          double v92 = fabs((log(v91) - v90) * 0.159154943) / (v87 * v82);
          v93 = (gss::Allocator *)__powidf2();
          double v282 = v92;
          double v283 = v92;
          double v284 = v94 * 0.0000000249532021;
          uint64_t v258 = 0;
          v259 = &v258;
          uint64_t v260 = 0x5812000000;
          v261 = __Block_byref_object_copy__16_2806;
          long long v263 = 0u;
          long long v264 = 0u;
          v262 = __Block_byref_object_dispose__17_2807;
          uint64_t v265 = 0;
          int v266 = 1065353216;
          long long v255 = 0u;
          long long v256 = 0u;
          int v257 = 1065353216;
          uint64_t v246 = 0;
          v247 = &v246;
          uint64_t v248 = 0x5812000000;
          v249 = __Block_byref_object_copy__18;
          long long v251 = 0u;
          long long v252 = 0u;
          v250 = __Block_byref_object_dispose__19;
          uint64_t v253 = 0;
          int v254 = 1065353216;
          uint64_t v237 = 0;
          v238 = &v237;
          uint64_t v239 = 0x5812000000;
          v240 = __Block_byref_object_copy__20;
          long long v242 = 0u;
          long long v243 = 0u;
          v241 = __Block_byref_object_dispose__21;
          uint64_t v244 = 0;
          int v245 = 1065353216;
          uint64_t v228 = 0;
          v229 = &v228;
          uint64_t v230 = 0x5812000000;
          v231 = __Block_byref_object_copy__22;
          long long v233 = 0u;
          long long v234 = 0u;
          v232 = __Block_byref_object_dispose__23;
          uint64_t v235 = 0;
          int v236 = 1065353216;
          uint64_t v95 = gss::Allocator::instance(v93);
          v96 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v95 + 16))(v95, 8, 4);
          v97 = v96;
          if (v96) {
            void *v96 = 0xA00000005;
          }
          uint64_t v169 = v95;
          v98 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v95 + 16))(v95, 16, 4);
          v99 = v98;
          if (v98) {
            v98[1] = 65543;
          }
          void *v98 = *v97;
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v95 + 40))(v95, v97, 8);
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 3321888768;
          v300 = ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke;
          v301 = &unk_1EF52E8E0;
          int v314 = v78;
          v307 = 0;
          v308 = 0;
          v309 = 0;
          uint64_t v310 = v95;
          v170 = v99;
          v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v95 + 16))(v95, 16, 4);
          v307 = v100;
          v308 = v100;
          v309 = (char *)(v100 + 2);
          if (v100) {
            void *v100 = *v99;
          }
          v100[1] = v99[1];
          v308 = v100 + 2;
          uint64_t v311 = v287;
          v312 = v288;
          if (v288) {
            atomic_fetch_add_explicit(&v288->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v302 = &v267;
          v303 = &v258;
          v304 = &v228;
          v305 = &v237;
          p_b = &__b;
          v306 = &v246;
          v175 = (void *)MEMORY[0x1A6239EB0](&buf);
          v101 = (int8x8_t **)__p;
          v102 = (int8x8_t **)v188;
          if (__p != v188)
          {
            std::string::size_type v31 = 4 * (*(unsigned char *)(a1 + 802) == 0);
            do
            {
              v104 = *(zilch::TrafficSkeletonTile **)(v190 + 144);
              v103 = *(std::__shared_weak_count **)(v190 + 152);
              if (v103)
              {
                atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
                if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              if (zilch::TrafficSkeletonTile::size(v104)) {
                uint64_t v105 = zilch::TrafficSkeletonTile::operator[]();
              }
              else {
                uint64_t v105 = 0;
              }
              uint64_t v106 = v185;
              uint64_t v107 = v190;
              v108 = *(zilch::TrafficSkeletonTile **)(v190 + 144);
              v109 = *(std::__shared_weak_count **)(v190 + 152);
              v216 = v108;
              uint64_t v217 = (uint64_t)v109;
              if (v109) {
                atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v110 = zilch::TrafficSkeletonTile::size(v108);
              md::buildTrafficMesh(v106, (uint64_t)&__b, v107, v105, 0, v110, *v101, v175, &v287, v171, v31);
              if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
              v101 += 2;
            }
            while (v101 != v102);
          }
          if (v77)
          {
            v111 = v170;
            md::TrafficAccum::flushToRibbonCollection(v267.__r_.__value_.__l.__size_ + 48, (uint64_t)&__b, v229 + 6, v238 + 6, v247 + 6);
          }
          else
          {
            v227[0] = 0;
            v227[24] = 0;
            v226[1] = 0;
            v226[0] = 0;
            LOWORD(v216) = 255;
            LODWORD(v217) = 0;
            HIDWORD(v216) = 0;
            md::TrafficAccum::flushToRibbonCollection(v267.__r_.__value_.__l.__size_ + 48, (uint64_t)(v259 + 6), (uint64_t)v227, v226, (uint64_t)&v216);
            v111 = v170;
          }
          v216 = (zilch::TrafficSkeletonTile *)MEMORY[0x1E4F143A8];
          uint64_t v217 = 3221225472;
          v218 = ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_26;
          v219 = &unk_1E5A8C7D0;
          v220 = &v293;
          v221 = &v258;
          v224 = &v204;
          v225 = &v202;
          v222 = &v289;
          v223 = &v246;
          v298 = 0;
          v297[0] = &unk_1EF56BC58;
          v297[1] = MEMORY[0x1A6239EB0](&v216);
          v298 = v297;
          v215 = 0;
          uint64_t v214 = 0;
          (*(void (**)(std::string::size_type, void *, uint64_t *))(*(void *)v206 + 16))(v206, v297, &v214);
          v112 = v215;
          if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
          if (v298 == v297)
          {
            (*(void (**)(void *))(v297[0] + 32))(v297);
          }
          else if (v298)
          {
            (*(void (**)(void))(*v298 + 40))();
          }

          v113 = v312;
          if (v312 && !atomic_fetch_add(&v312->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
          if (v307)
          {
            v308 = v307;
            (*(void (**)(uint64_t, void *, int64_t))(*(void *)v310 + 40))(v310, v307, v309 - (char *)v307);
          }
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v169 + 40))(v169, v111, 16);
          _Block_object_dispose(&v228, 8);
          v114 = (void *)*((void *)&v234 + 1);
          if (*((void *)&v234 + 1))
          {
            do
            {
              v115 = (void *)*v114;
              std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v114 + 2));
              operator delete(v114);
              v114 = v115;
            }
            while (v115);
          }
          v116 = (void *)*((void *)&v233 + 1);
          *((void *)&v233 + 1) = 0;
          if (v116) {
            operator delete(v116);
          }
          _Block_object_dispose(&v237, 8);
          v117 = (void *)*((void *)&v243 + 1);
          if (*((void *)&v243 + 1))
          {
            do
            {
              v118 = (void *)*v117;
              std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v117 + 2));
              operator delete(v117);
              v117 = v118;
            }
            while (v118);
          }
          v119 = (void *)*((void *)&v242 + 1);
          *((void *)&v242 + 1) = 0;
          if (v119) {
            operator delete(v119);
          }
          _Block_object_dispose(&v246, 8);
          v120 = (void *)*((void *)&v252 + 1);
          if (*((void *)&v252 + 1))
          {
            do
            {
              v121 = (void *)*v120;
              std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v120 + 2));
              operator delete(v120);
              v120 = v121;
            }
            while (v121);
          }
          v122 = (void *)*((void *)&v251 + 1);
          *((void *)&v251 + 1) = 0;
          if (v122) {
            operator delete(v122);
          }
          v123 = (void *)v256;
          if ((void)v256)
          {
            do
            {
              v124 = (void *)*v123;
              std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v123 + 2));
              operator delete(v123);
              v123 = v124;
            }
            while (v124);
          }
          if ((void)v255) {
            operator delete((void *)v255);
          }
          _Block_object_dispose(&v258, 8);
          v125 = (void *)*((void *)&v264 + 1);
          if (*((void *)&v264 + 1))
          {
            do
            {
              v126 = (void *)*v125;
              std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v125 + 2));
              operator delete(v125);
              v125 = v126;
            }
            while (v126);
          }
          v127 = (void *)*((void *)&v263 + 1);
          *((void *)&v263 + 1) = 0;
          if (v127) {
            operator delete(v127);
          }
          _Block_object_dispose(&v267, 8);
          md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)v271);
        }
        uint64_t v128 = v201;
        uint64_t v201 = v294[3];
        if (v128) {
          (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
        }
        uint64_t v129 = v200;
        uint64_t v200 = v290[3];
        if (v129) {
          (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
        }
        v130 = v288;
        if (v288 && !atomic_fetch_add(&v288->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
        _Block_object_dispose(&v289, 8);
        _Block_object_dispose(&v293, 8);
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v180);
      }
      v131 = (std::__shared_weak_count *)v184;
      if (v184 && !atomic_fetch_add((atomic_ullong *volatile)(v184 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    uint64_t v132 = v190;
    if (*((void *)&v194 + 1))
    {
      v133 = (void *)v194;
      if ((void)v194)
      {
        do
        {
          v134 = (void *)*v133;
          operator delete(v133);
          v133 = v134;
        }
        while (v134);
      }
      *(void *)&long long v194 = 0;
      uint64_t v135 = *((void *)&v193 + 1);
      if (*((void *)&v193 + 1))
      {
        uint64_t v136 = 0;
        do
          *(void *)(v193 + 8 * v136++) = 0;
        while (v135 != v136);
      }
      *((void *)&v194 + 1) = 0;
    }
    unint64_t v137 = zilch::TrafficSkeletonTile::size(*(zilch::TrafficSkeletonTile **)(v132 + 144));
    unint64_t prime = vcvtps_u32_f32((float)(v137 >> 1) / v195);
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v139 = *((void *)&v193 + 1);
    if (prime > *((void *)&v193 + 1)) {
      goto LABEL_251;
    }
    if (prime < *((void *)&v193 + 1))
    {
      unint64_t v140 = vcvtps_u32_f32((float)*((unint64_t *)&v194 + 1) / v195);
      if (*((void *)&v193 + 1) < 3uLL
        || (uint8x8_t v141 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v193 + 8)),
            v141.i16[0] = vaddlv_u8(v141),
            v141.u32[0] > 1uLL))
      {
        unint64_t v140 = std::__next_prime(v140);
      }
      else
      {
        uint64_t v142 = 1 << -(char)__clz(v140 - 1);
        if (v140 >= 2) {
          unint64_t v140 = v142;
        }
      }
      if (prime <= v140) {
        unint64_t prime = v140;
      }
      if (prime < v139) {
LABEL_251:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v193, prime);
    }
    for (unint64_t j = 0; ; ++j)
    {
      if (j >= zilch::TrafficSkeletonTile::size(*(zilch::TrafficSkeletonTile **)(v132 + 144))) {
        goto LABEL_41;
      }
      uint64_t v144 = *(void *)zilch::TrafficSkeletonTile::operator[]();
      uint64_t v145 = v144;
      uint64_t v176 = v144;
      int v146 = HIDWORD(v144);
      unint64_t v147 = ((unint64_t)v144 << 6)
           + ((unint64_t)v144 >> 2)
           - 0x61C8864680B583EBLL
           + HIDWORD(v144);
      std::string::size_type v148 = v147 ^ v144;
      unint64_t v149 = *((void *)&v193 + 1);
      if (*((void *)&v193 + 1))
      {
        uint8x8_t v150 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v193 + 8));
        v150.i16[0] = vaddlv_u8(v150);
        if (v150.u32[0] > 1uLL)
        {
          std::string::size_type v31 = v147 ^ v145;
          if (v148 >= *((void *)&v193 + 1)) {
            std::string::size_type v31 = v148 % *((void *)&v193 + 1);
          }
        }
        else
        {
          std::string::size_type v31 = v148 & (*((void *)&v193 + 1) - 1);
        }
        v151 = *(uint64_t ***)(v193 + 8 * v31);
        if (v151)
        {
          v152 = *v151;
          if (v152)
          {
            if (v150.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v156 = v152[1];
                if (v156 == v148)
                {
                  if (*((_DWORD *)v152 + 4) == v145 && *((_DWORD *)v152 + 5) == v146) {
                    goto LABEL_266;
                  }
                }
                else if ((v156 & (*((void *)&v193 + 1) - 1)) != v31)
                {
                  goto LABEL_294;
                }
                v152 = (uint64_t *)*v152;
                if (!v152) {
                  goto LABEL_294;
                }
              }
            }
            do
            {
              unint64_t v154 = v152[1];
              if (v154 == v148)
              {
                if (*((_DWORD *)v152 + 4) == v145 && *((_DWORD *)v152 + 5) == v146) {
                  goto LABEL_266;
                }
              }
              else
              {
                if (v154 >= *((void *)&v193 + 1)) {
                  v154 %= *((void *)&v193 + 1);
                }
                if (v154 != v31) {
                  break;
                }
              }
              v152 = (uint64_t *)*v152;
            }
            while (v152);
          }
        }
      }
LABEL_294:
      v157 = operator new(0x18uLL);
      void *v157 = 0;
      v157[1] = v148;
      v157[2] = v176;
      float v158 = (float)(unint64_t)(*((void *)&v194 + 1) + 1);
      if (!v149 || (float)(v195 * (float)v149) < v158)
      {
        BOOL v159 = (v149 & (v149 - 1)) != 0;
        if (v149 < 3) {
          BOOL v159 = 1;
        }
        unint64_t v160 = v159 | (2 * v149);
        unint64_t v161 = vcvtps_u32_f32(v158 / v195);
        if (v160 <= v161) {
          size_t v162 = v161;
        }
        else {
          size_t v162 = v160;
        }
        if (v162 == 1)
        {
          size_t v162 = 2;
        }
        else if ((v162 & (v162 - 1)) != 0)
        {
          size_t v162 = std::__next_prime(v162);
          unint64_t v149 = *((void *)&v193 + 1);
        }
        if (v162 > v149) {
          goto LABEL_306;
        }
        if (v162 < v149)
        {
          unint64_t v163 = vcvtps_u32_f32((float)*((unint64_t *)&v194 + 1) / v195);
          if (v149 < 3
            || (uint8x8_t v164 = (uint8x8_t)vcnt_s8((int8x8_t)v149), v164.i16[0] = vaddlv_u8(v164), v164.u32[0] > 1uLL))
          {
            unint64_t v163 = std::__next_prime(v163);
          }
          else
          {
            uint64_t v165 = 1 << -(char)__clz(v163 - 1);
            if (v163 >= 2) {
              unint64_t v163 = v165;
            }
          }
          if (v162 <= v163) {
            size_t v162 = v163;
          }
          if (v162 < v149) {
LABEL_306:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v193, v162);
        }
        unint64_t v149 = *((void *)&v193 + 1);
        if ((*((void *)&v193 + 1) & (*((void *)&v193 + 1) - 1)) != 0)
        {
          if (v148 >= *((void *)&v193 + 1)) {
            std::string::size_type v31 = v148 % *((void *)&v193 + 1);
          }
          else {
            std::string::size_type v31 = v148;
          }
        }
        else
        {
          std::string::size_type v31 = (*((void *)&v193 + 1) - 1) & v148;
        }
      }
      uint64_t v166 = v193;
      v167 = *(void **)(v193 + 8 * v31);
      if (v167)
      {
        void *v157 = *v167;
      }
      else
      {
        void *v157 = v194;
        *(void *)&long long v194 = v157;
        *(void *)(v166 + 8 * v31) = &v194;
        if (!*v157) {
          goto LABEL_265;
        }
        unint64_t v168 = *(void *)(*v157 + 8);
        if ((v149 & (v149 - 1)) != 0)
        {
          if (v168 >= v149) {
            v168 %= v149;
          }
        }
        else
        {
          v168 &= v149 - 1;
        }
        v167 = (void *)(v193 + 8 * v168);
      }
      void *v167 = v157;
LABEL_265:
      ++*((void *)&v194 + 1);
LABEL_266:
      ;
    }
  }
LABEL_40:
  if (!*(unsigned char *)(a1 + 801) && *(unsigned char *)(a1 + 800))
  {
    if (!v34)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      v58 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        gdc::LayerDataRequestKey::keysInt32Str(&v267, v173);
        v59 = (v267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v267
            : (std::string *)v267.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v59;
        _os_log_impl(&dword_1A1780000, v58, OS_LOG_TYPE_ERROR, "Failed to find traffic skeleton resources for key: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v267.__r_.__value_.__l.__data_);
        }
      }

      uint64_t v32 = a3[1];
    }
    if (v33 == v32)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      v60 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        gdc::LayerDataRequestKey::keysInt32Str(&v267, v173);
        v61 = (v267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v267
            : (std::string *)v267.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v61;
        _os_log_impl(&dword_1A1780000, v60, OS_LOG_TYPE_ERROR, "Failed to find dynamic traffic resources for key: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v267.__r_.__value_.__l.__data_);
        }
      }
    }
    *a4 = 0;
    a4[1] = 0;
    int v40 = v186;
    if (!v186) {
      goto LABEL_55;
    }
LABEL_53:
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_55;
  }
LABEL_41:
  uint64_t v38 = v186;
  if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  a4 = v172;
LABEL_45:
  uint64_t v178 = v204;
  v179 = v205;
  if (v205) {
    atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v39 = (std::__shared_weak_count *)v203;
  v177[0] = v202;
  v177[1] = v203;
  if (v203) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v203 + 8), 1uLL, memory_order_relaxed);
  }
  md::RoadLayerDataSource::buildRoadTileData(&v267, (void *)a1, (uint64_t)v173, &v206, &v210, (uint64_t **)&v207, &v193, &v201, &v200, (uint64_t)&v196, &v178, v177, &v190, (long long **)&__p, (uint64_t)v192);
  *(_OWORD *)a4 = *(_OWORD *)&v267.__r_.__value_.__l.__data_;
  *(_OWORD *)&v267.__r_.__value_.__l.__data_ = 0uLL;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  int v40 = v179;
  if (v179) {
    goto LABEL_53;
  }
LABEL_55:
  int v41 = (char *)__p;
  if (__p)
  {
    float v42 = v188;
    if (v188 != __p)
    {
      do
      {
        uint64_t v43 = (std::__shared_weak_count *)*((void *)v42 - 1);
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        v42 -= 16;
      }
      while (v42 != v41);
      int v41 = (char *)__p;
    }
    operator delete(v41);
  }
  BOOL v44 = v191;
  if (v191 && !atomic_fetch_add(&v191->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v192[0]) {
    operator delete(v192[0]);
  }
  uint64_t v45 = (void *)v194;
  if ((void)v194)
  {
    do
    {
      int v46 = (void *)*v45;
      operator delete(v45);
      uint64_t v45 = v46;
    }
    while (v46);
  }
  v47 = (void *)v193;
  *(void *)&long long v193 = 0;
  if (v47) {
    operator delete(v47);
  }
  if (v196)
  {
    uint64_t v197 = v196;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v199 + 40))(v199, v196, v198 - v196);
  }
  if (v200) {
    (*(void (**)(uint64_t))(*(void *)v200 + 8))(v200);
  }
  if (v201) {
    (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
  }
  v48 = (std::__shared_weak_count *)v203;
  if (v203 && !atomic_fetch_add((atomic_ullong *volatile)(v203 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  char v49 = v205;
  if (v205 && !atomic_fetch_add(&v205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v206)
  {
    uint64_t v50 = (*(uint64_t (**)(std::string::size_type))(*(void *)v206 + 24))(v206);
    std::string::size_type v51 = v206;
    std::string::size_type v206 = 0;
    v267.__r_.__value_.__r.__words[0] = v51;
    (*(void (**)(uint64_t, std::string *))(*(void *)v50 + 48))(v50, &v267);
    std::string::size_type v52 = v267.__r_.__value_.__r.__words[0];
    v267.__r_.__value_.__r.__words[0] = 0;
    if (v52) {
      (*(void (**)(std::string::size_type))(*(void *)v52 + 8))(v52);
    }
    std::string::size_type v53 = v206;
    std::string::size_type v206 = 0;
    if (v53) {
      (*(void (**)(std::string::size_type))(*(void *)v53 + 8))(v53);
    }
  }
  uint64_t v54 = v207;
  if (v207)
  {
    v55 = v208;
    if (v208 != v207)
    {
      do
      {
        v56 = (std::__shared_weak_count *)*(v55 - 1);
        if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        v55 -= 2;
      }
      while (v55 != v54);
      uint64_t v54 = v207;
    }
    operator delete(v54);
  }
  v57 = v213;
  if (v213)
  {
    if (!atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_1A1EDBE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, md::TrafficAccum *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x278]);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x628]);
  unint64_t v70 = STACK[0x608];
  if (STACK[0x608])
  {
    STACK[0x610] = v70;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)STACK[0x620] + 40))(STACK[0x620], v70, STACK[0x618] - v70);
  }
  if (a21) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a19 + 40))(a19, a21, a17 - a21);
  }
  _Block_object_dispose(&STACK[0x2A8], 8);
  std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x2D8]);
  _Block_object_dispose(&STACK[0x300], 8);
  std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x330]);
  _Block_object_dispose(&STACK[0x358], 8);
  std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x388]);
  std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x3B0]);
  _Block_object_dispose(&STACK[0x3D8], 8);
  std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)&STACK[0x408]);
  _Block_object_dispose(&STACK[0x430], 8);
  md::TrafficAccum::~TrafficAccum(a20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x550]);
  _Block_object_dispose(&STACK[0x560], 8);
  _Block_object_dispose(&STACK[0x580], 8);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a32);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a39);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a41);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a43);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a46);
  if (__p) {
    operator delete(__p);
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a51);
  if (a57)
  {
    a58 = a57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a60 + 40))(a60, a57, a59 - a57);
    uint64_t v71 = a61;
    if (!a61)
    {
LABEL_9:
      uint64_t v72 = a62;
      if (!a62) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v71 = a61;
    if (!a61) {
      goto LABEL_9;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  uint64_t v72 = a62;
  if (!a62)
  {
LABEL_11:
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a63);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a65);
    ggl::Loader::~Loader((ggl::Loader *)&a67);
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a69);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x208]);
    _Unwind_Resume(a1);
  }
LABEL_10:
  (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  goto LABEL_11;
}

void md::RoadLayerDataSource::buildRoadTileData(void *a1, void *a2, uint64_t a3, void *a4, __int16 *a5, uint64_t **a6, void *a7, uint64_t *a8, uint64_t *a9, uint64_t a10, void *a11, uint64_t *a12, uint64_t *a13, long long **a14, uint64_t a15)
{
  uint64_t v552 = *MEMORY[0x1E4F143B8];
  uint64_t v535 = 0;
  v536 = &v535;
  uint64_t v537 = 0x5812000000;
  v538 = __Block_byref_object_copy__2794;
  long long v540 = 0u;
  long long v541 = 0u;
  v539 = __Block_byref_object_dispose__2795;
  uint64_t v542 = 0;
  int v543 = 1065353216;
  uint64_t v526 = 0;
  v527 = &v526;
  uint64_t v528 = 0x5812000000;
  v529 = __Block_byref_object_copy__2794;
  long long v531 = 0u;
  long long v532 = 0u;
  v530 = __Block_byref_object_dispose__2795;
  uint64_t v533 = 0;
  int v534 = 1065353216;
  uint64_t v517 = 0;
  v518 = &v517;
  uint64_t v519 = 0x5812000000;
  v520 = __Block_byref_object_copy__7_2796;
  long long v522 = 0u;
  long long v523 = 0u;
  v521 = __Block_byref_object_dispose__8_2797;
  uint64_t v524 = 0;
  int v525 = 1065353216;
  uint64_t v508 = 0;
  v509 = &v508;
  uint64_t v510 = 0x5812000000;
  v511 = __Block_byref_object_copy__7_2796;
  long long v513 = 0u;
  long long v514 = 0u;
  v512 = __Block_byref_object_dispose__8_2797;
  uint64_t v515 = 0;
  int v516 = 1065353216;
  size_t __n = 0;
  uint64_t v501 = 0;
  {
    operator new();
  }
  uint64_t v503 = mdm::Allocator::instance(void)::alloc;
  v504 = 0;
  {
    operator new();
  }
  uint64_t v505 = mdm::Allocator::instance(void)::alloc;
  uint64_t v506 = 0;
  int v507 = 1065353216;
  std::string::size_type v17 = *a6;
  v431 = a6[1];
  if (*a6 != v431)
  {
    v435 = a2 + 95;
    v437 = a2;
    v438 = a7;
    while (1)
    {
      int v18 = *((unsigned __int16 *)a2 + 16);
      v441 = v17;
      uint64_t v449 = *v17;
      if (v18 == 65)
      {
        int v19 = v536;
        uint64_t v20 = v518;
        uint64_t v21 = *(void *)(*v17 + 144);
        sp_mut = std::__get_sp_mut(v435);
        std::__sp_mut::lock(sp_mut);
        uint64_t v23 = (std::__shared_weak_count *)a2[96];
        v500[0] = a2[95];
        v500[1] = (uint64_t)v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__sp_mut::unlock(sp_mut);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        unint64_t v24 = v536;
        uint64_t v25 = v518;
        uint64_t v26 = *(void *)(v449 + 144);
        uint64_t v27 = std::__get_sp_mut(v435);
        std::__sp_mut::lock(v27);
        uint64_t v28 = (std::__shared_weak_count *)a2[96];
        v499[0] = a2[95];
        v499[1] = (uint64_t)v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__sp_mut::unlock(v27);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        uint64_t v29 = v536;
        uint64_t v30 = v518;
        uint64_t v31 = *(void *)(v449 + 144);
        uint64_t v32 = std::__get_sp_mut(v435);
        std::__sp_mut::lock(v32);
        uint64_t v33 = (std::__shared_weak_count *)a2[96];
        v498[0] = a2[95];
        v498[1] = (uint64_t)v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__sp_mut::unlock(v32);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        BOOL v34 = v536;
        unint64_t v35 = v518;
        uint64_t v36 = *(void *)(v449 + 144);
        unint64_t v37 = std::__get_sp_mut(v435);
        std::__sp_mut::lock(v37);
        uint64_t v38 = (std::__shared_weak_count *)a2[96];
        v497[0] = a2[95];
        v497[1] = (uint64_t)v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__sp_mut::unlock(v37);
        std::string::size_type v17 = v441;
        uint64_t v39 = v449;
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        BOOL v436 = 0;
        int v433 = 0;
      }
      else
      {
        int v433 = v18 == 67;
        BOOL v436 = v18 == 68;
        if ((v18 - 67) <= 1)
        {
          for (unint64_t i = 0; geo::codec::VectorTile::poisCount(*(geo::codec::VectorTile **)(v449 + 144)) > i; ++i)
          {
            uint64_t v41 = geo::codec::VectorTile::pois(*(geo::codec::VectorTile **)(v449 + 144));
            unint64_t v42 = v41 + 224 * i;
            uint64_t v45 = *(void *)(v42 + 24);
            BOOL v44 = (uint64_t *)(v42 + 24);
            uint64_t v43 = v45;
            if (!v45) {
              goto LABEL_30;
            }
            unint64_t v46 = *(unsigned __int8 *)(v43 + 33);
            if (!*(unsigned char *)(v43 + 33)) {
              goto LABEL_30;
            }
            v47 = *(_DWORD **)v43;
            if (*v47 == 6)
            {
              unint64_t v48 = 0;
LABEL_40:
              if (v47[2 * v48 + 1] != 446
                || ((*(uint64_t (**)(void *, uint64_t))(*a2 + 160))(a2, *v441) & 1) != 0)
              {
                goto LABEL_30;
              }
              unint64_t v51 = v41 + 224 * i;
              int v53 = *(_DWORD *)(v51 + 88);
              int v52 = *(_DWORD *)(v51 + 92);
              *(void *)((char *)&__p + 7) = 0;
              *(void *)&long long __p = 0;
              HIBYTE(__p) = 1;
              if (v18 == 68) {
                *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&__p, 0x10002u) = 1;
              }
              uint64_t v54 = std::__get_sp_mut(v435);
              std::__sp_mut::lock(v54);
              uint64_t v55 = a2[95];
              v56 = (std::__shared_weak_count *)a2[96];
              uint64_t v467 = v55;
              v468 = v56;
              if (v56) {
                atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::__sp_mut::unlock(v54);
              md::createFeatureAttributeSet((gss::Allocator *)buf, v44);
              gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v474, v55, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)&__p);
              if (*(void *)buf)
              {
                *(void *)&buf[8] = *(void *)buf;
                v57 = (gss::Allocator *)(*(uint64_t (**)(atomic_ullong *, void, void))(*v548 + 40))(v548, *(void *)buf, *(void *)&buf[16] - *(void *)buf);
              }
              if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
              v58 = (uint64_t *)v474;
              if (__n)
              {
                unint64_t v59 = 0x9DDFEA08EB382D69 * (((8 * v474) + 8) ^ HIDWORD(v474));
                unint64_t v60 = 0x9DDFEA08EB382D69 * (HIDWORD(v474) ^ (v59 >> 47) ^ v59);
                size_t v61 = 0x9DDFEA08EB382D69 * (v60 ^ (v60 >> 47));
                uint8x8_t v62 = (uint8x8_t)vcnt_s8((int8x8_t)__n);
                v62.i16[0] = vaddlv_u8(v62);
                if (v62.u32[0] > 1uLL)
                {
                  size_t v63 = v61;
                  if (v61 >= __n) {
                    size_t v63 = v61 % __n;
                  }
                }
                else
                {
                  size_t v63 = v61 & (__n - 1);
                }
                std::string::size_type v64 = *(void **)(v501 + 8 * v63);
                if (v64)
                {
                  v65 = (void *)*v64;
                  if (*v64)
                  {
                    if (v62.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v67 = v65[1];
                        if (v67 == v61)
                        {
                          if (v65[2] == v474) {
                            goto LABEL_84;
                          }
                        }
                        else if ((v67 & (__n - 1)) != v63)
                        {
                          goto LABEL_71;
                        }
                        v65 = (void *)*v65;
                        if (!v65) {
                          goto LABEL_71;
                        }
                      }
                    }
                    do
                    {
                      size_t v66 = v65[1];
                      if (v66 == v61)
                      {
                        if (v65[2] == v474)
                        {
LABEL_84:
                          unsigned __int8 v75 = (_DWORD *)v65[5];
                          unint64_t v74 = v65[6];
                          if ((unint64_t)v75 >= v74)
                          {
                            int v77 = (_DWORD *)v65[4];
                            unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (v75 - v77) + 1;
                            if (v78 > 0x1555555555555555) {
                              abort();
                            }
                            unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (void)v77) >> 2);
                            if (2 * v79 > v78) {
                              unint64_t v78 = 2 * v79;
                            }
                            if (v79 >= 0xAAAAAAAAAAAAAAALL) {
                              unint64_t v80 = 0x1555555555555555;
                            }
                            else {
                              unint64_t v80 = v78;
                            }
                            if (v80)
                            {
                              if (v80 > 0x1555555555555555) {
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              }
                              v57 = (gss::Allocator *)operator new(12 * v80);
                            }
                            else
                            {
                              v57 = 0;
                            }
                            int32x4_t v81 = (_DWORD *)((char *)v57 + 4 * (v75 - v77));
                            *int32x4_t v81 = v53;
                            v81[1] = v52;
                            v81[2] = 0;
                            double v82 = v81;
                            if (v75 != v77)
                            {
                              do
                              {
                                uint64_t v83 = *(void *)(v75 - 3);
                                v75 -= 3;
                                int v84 = v75[2];
                                *(void *)(v82 - 3) = v83;
                                v82 -= 3;
                                v82[2] = v84;
                              }
                              while (v75 != v77);
                              unsigned __int8 v75 = (_DWORD *)v65[4];
                            }
                            v76 = v81 + 3;
                            v65[4] = v82;
                            v65[5] = v81 + 3;
                            v65[6] = (char *)v57 + 12 * v80;
                            if (v75) {
                              operator delete(v75);
                            }
                          }
                          else
                          {
                            *unsigned __int8 v75 = v53;
                            v75[1] = v52;
                            v76 = v75 + 3;
                            v75[2] = 0;
                          }
                          v65[5] = v76;
                          uint64_t v71 = (std::__shared_weak_count *)v475;
                          if (!v475)
                          {
LABEL_81:
                            if (!BYTE14(__p))
                            {
                              uint64_t v72 = __p;
                              if ((void)__p)
                              {
                                uint64_t v73 = gss::Allocator::instance(v57);
                                (*(void (**)(uint64_t, uint64_t, void))(*(void *)v73 + 40))(v73, v72, WORD6(__p));
                              }
                            }
                            goto LABEL_30;
                          }
LABEL_79:
                          if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                            std::__shared_weak_count::__release_weak(v71);
                          }
                          goto LABEL_81;
                        }
                      }
                      else
                      {
                        if (v66 >= __n) {
                          v66 %= __n;
                        }
                        if (v66 != v63) {
                          break;
                        }
                      }
                      v65 = (void *)*v65;
                    }
                    while (v65);
                  }
                }
              }
LABEL_71:
              unint64_t v68 = operator new(0xCuLL);
              *unint64_t v68 = v53;
              v68[1] = v52;
              v68[2] = 0;
              *(void *)long long buf = v58;
              *(void *)&buf[8] = v475;
              if (v475) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v475 + 1, 1uLL, memory_order_relaxed);
              }
              *(void *)&buf[16] = 0;
              v548 = 0;
              v549 = 0;
              v69 = (char *)operator new(0xCuLL);
              v548 = (atomic_ullong *)(v69 + 12);
              v549 = (uint64_t (*)(uint64_t))(v69 + 12);
              *(void *)v69 = *(void *)v68;
              *((_DWORD *)v69 + 2) = v68[2];
              *(void *)&buf[16] = v69;
              std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>>((unint64_t)&v501, (unint64_t)v58, (uint64_t)buf);
              if (*(void *)&buf[16])
              {
                v548 = *(atomic_ullong **)&buf[16];
                operator delete(*(void **)&buf[16]);
              }
              unint64_t v70 = *(std::__shared_weak_count **)&buf[8];
              if (*(void *)&buf[8]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
              operator delete(v68);
              uint64_t v71 = (std::__shared_weak_count *)v475;
              if (!v475) {
                goto LABEL_81;
              }
              goto LABEL_79;
            }
            unint64_t v48 = 0;
            char v49 = v47 + 2;
            do
            {
              if (v46 - 1 == v48) {
                goto LABEL_30;
              }
              int v50 = *v49;
              v49 += 2;
              ++v48;
            }
            while (v50 != 6);
            if (v48 < v46) {
              goto LABEL_40;
            }
LABEL_30:
            std::string::size_type v17 = v441;
          }
        }
        uint64_t v39 = v449;
      }
      uint64_t v443 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)(v39 + 144));
      unint64_t v442 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)(v39 + 144));
      if (v442) {
        break;
      }
LABEL_5:
      v17 += 2;
      if (v17 == v431) {
        goto LABEL_612;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      uint64_t v457 = v85;
      v455 = (geo::codec *)(v443 + 168 * v85);
      if (((*(uint64_t (**)(void *, uint64_t))(*a2 + 160))(a2, *v17) & 1) == 0)
      {
        v544 = 0;
        long double v87 = geo::codec::multiSectionFeatureCharacteristicPoints((std::__shared_weak_count **)v455, (GeoCodecsRoadFeature *)&v544, v86);
        long double v88 = v87;
        if (v436)
        {
          *(void *)((char *)&__p + 7) = 0;
          *(void *)&long long __p = 0;
          HIBYTE(__p) = 1;
          uint64_t v89 = gss::Allocator::instance(v87);
          uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v89 + 16))(v89, 26, 1);
          *(void *)&long long __p = v90;
          WORD4(__p) = 18;
          *(_DWORD *)((char *)&__p + 10) = 262145;
          *(_DWORD *)uint64_t v90 = 65538;
          HIBYTE(__p) = 0;
          *(_WORD *)(v90 + 18) = 1;
          long double v91 = std::__get_sp_mut(v435);
          std::__sp_mut::lock(v91);
          uint64_t v92 = a2[95];
          v93 = (std::__shared_weak_count *)a2[96];
          uint64_t v467 = v92;
          v468 = v93;
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__sp_mut::unlock(v91);
          md::createFeatureAttributeSet((gss::Allocator *)buf, (uint64_t *)v455 + 3);
          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v474, v92, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)&__p);
          unint64_t v95 = v474;
          v453 = (std::__shared_weak_count *)v475;
          v475 = 0;
          unint64_t v474 = 0;
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            double v94 = (gss::Allocator *)(*(uint64_t (**)(atomic_ullong *, void, void))(*v548 + 40))(v548, *(void *)buf, *(void *)&buf[16] - *(void *)buf);
          }
          if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
          if (!BYTE14(__p))
          {
            uint64_t v96 = __p;
            if ((void)__p)
            {
              uint64_t v97 = gss::Allocator::instance(v94);
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v97 + 40))(v97, v96, WORD6(__p));
            }
          }
          unint64_t v98 = v95;
          goto LABEL_120;
        }
        uint64_t v103 = *((void *)v455 + 3);
        if (v103)
        {
          unint64_t v104 = *(unsigned __int8 *)(v103 + 33);
          if (*(unsigned char *)(v103 + 33))
          {
            uint64_t v105 = *(_DWORD **)v103;
            if (*v105 == 185)
            {
              unint64_t v106 = 0;
              BOOL v107 = 1;
            }
            else
            {
              unint64_t v106 = 0;
              uint64_t v145 = v105 + 2;
              do
              {
                if (v104 - 1 == v106) {
                  goto LABEL_212;
                }
                int v146 = *v145;
                v145 += 2;
                ++v106;
              }
              while (v146 != 185);
              BOOL v107 = v106 < v104;
            }
            int v147 = (v105[2 * v106 + 1] & 0xFFFFFFFD) == 0 && v107;
            if (v433 != v147) {
              goto LABEL_106;
            }
LABEL_213:
            std::string::size_type v148 = std::__get_sp_mut(v435);
            std::__sp_mut::lock(v148);
            uint64_t v149 = a2[95];
            uint8x8_t v150 = (std::__shared_weak_count *)a2[96];
            uint64_t v467 = v149;
            v468 = v150;
            if (v150) {
              atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__sp_mut::unlock(v148);
            md::createFeatureAttributeSet((gss::Allocator *)buf, (uint64_t *)v455 + 3);
            *(void *)((char *)&__p + 7) = 0;
            *(void *)&long long __p = 0;
            HIBYTE(__p) = 1;
            gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v474, v149, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)&__p);
            unint64_t v98 = v474;
            v453 = (std::__shared_weak_count *)v475;
            v475 = 0;
            unint64_t v474 = 0;
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              (*(void (**)(atomic_ullong *, void, void))(*v548 + 40))(v548, *(void *)buf, *(void *)&buf[16] - *(void *)buf);
              uint8x8_t v150 = v468;
            }
            if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
LABEL_120:
            uint64_t v99 = *((void *)v455 + 3);
            unint64_t v100 = *(unsigned __int8 *)(v99 + 33);
            if (*(unsigned char *)(v99 + 33))
            {
              v101 = *(_DWORD **)v99;
              if (**(_DWORD **)v99 == 2)
              {
                BOOL v102 = 1;
              }
              else
              {
                unint64_t v108 = 0;
                v109 = v101 + 2;
                while (v100 - 1 != v108)
                {
                  int v110 = *v109;
                  v109 += 2;
                  ++v108;
                  if (v110 == 2) {
                    goto LABEL_133;
                  }
                }
                unint64_t v108 = v100;
LABEL_133:
                BOOL v102 = v108 < v100;
              }
              int v459 = v102;
            }
            else
            {
              int v459 = 0;
            }
            *(void *)&long long __p = v98;
            *((void *)&__p + 1) = v453;
            if (v453)
            {
              atomic_fetch_add_explicit(&v453->__shared_owners_, 1uLL, memory_order_relaxed);
              *(void *)long long buf = v98;
              *(void *)&buf[8] = *((void *)&__p + 1);
              if (*((void *)&__p + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              *(void *)long long buf = v98;
              *(void *)&buf[8] = 0;
            }
            *(void *)&buf[16] = 0;
            v548 = 0;
            LOBYTE(v549) = 0;
            uint64_t v448 = v98;
            if (v98) {
              int v111 = (*(uint64_t (**)(unint64_t))(*(void *)v98 + 48))(v98);
            }
            else {
              int v111 = 0;
            }
            LOBYTE(v549) = v111;
            v112 = (std::__shared_weak_count *)*((void *)&__p + 1);
            if (*((void *)&__p + 1))
            {
              if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
              int v111 = v549;
            }
            if (!v111)
            {
              int v447 = 0;
              int v135 = 9;
              goto LABEL_374;
            }
            LODWORD(v467) = 0;
            uint64_t v113 = *(void *)(*(void *)buf + 24);
            v114 = *(float **)v113;
            if (*(void *)v113
              && (float v115 = *v114, LODWORD(v114) = *v114 == 1.0, *(unsigned char *)(v113 + 10))
              && (v115 != 0.0 ? (BOOL v116 = v115 == 1.0) : (BOOL v116 = 1), !v116)
              || (v117 = *(unsigned __int8 *)(v113 + v114 + 11), float v115 = 0.0, v117 == 2))
            {
              LODWORD(__p) = 0;
              LODWORD(v474) = 0;
              if (gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*(void *)(v113 + 16), 0x5Eu, (int *)&__p))
              {
                if (*(_WORD *)(v113 + 56))
                {
                  v118 = *(uint64_t **)(v113 + 48);
                  v119 = &v118[*(unsigned __int16 *)(v113 + 56)];
                  while (1)
                  {
                    v120 = *(uint64_t **)(*v118 + 72);
                    if (!v120) {
                      goto LABEL_158;
                    }
                    uint64_t v121 = *v120;
                    unint64_t v122 = *(unsigned __int16 *)(*v120 + 10);
                    if (!v122) {
                      goto LABEL_158;
                    }
                    v123 = *(unsigned __int16 **)v121;
                    if (!*(unsigned char *)(v121 + 15)) {
                      break;
                    }
                    v124 = *(unsigned __int16 **)v121;
                    unint64_t v125 = v122;
                    if (v122 >= 0x1E)
                    {
                      do
                      {
                        unint64_t v128 = v125 >> 1;
                        uint64_t v129 = &v124[v125 >> 1];
                        unsigned int v131 = *v129;
                        v130 = v129 + 1;
                        v125 += ~(v125 >> 1);
                        if (v131 < 0x5E) {
                          v124 = v130;
                        }
                        else {
                          unint64_t v125 = v128;
                        }
                      }
                      while (v125);
                      if (v124 == &v123[v122] || *v124 != 94) {
                        goto LABEL_158;
                      }
LABEL_179:
                      if ((unsigned __int16)((v124 - v123) >> 1) == v122) {
                        goto LABEL_158;
                      }
                      goto LABEL_184;
                    }
                    uint64_t v126 = 0;
                    while (1)
                    {
                      unsigned int v127 = v123[v126];
                      if (v127 >= 0x5E) {
                        break;
                      }
                      if (v122 == ++v126) {
                        goto LABEL_158;
                      }
                    }
                    int v133 = (unsigned __int16)v126;
                    if (v127 != 94) {
                      int v133 = v122;
                    }
                    if (v133 == v122) {
                      goto LABEL_158;
                    }
LABEL_184:
                    if (!gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*v118, 0x5Eu, (int *)&__p)) {
                      goto LABEL_185;
                    }
LABEL_158:
                    if (++v118 == v119) {
                      goto LABEL_188;
                    }
                  }
                  uint64_t v132 = 2 * v122;
                  v124 = *(unsigned __int16 **)v121;
                  while (*v124 != 94)
                  {
                    ++v124;
                    v132 -= 2;
                    if (!v132)
                    {
                      LODWORD(v124) = v123 + 2 * v122;
                      goto LABEL_179;
                    }
                  }
                  goto LABEL_179;
                }
LABEL_188:
                int v134 = 1;
              }
              else
              {
LABEL_185:
                int v134 = 0;
              }
              int IsConstantFor = v134 & gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(v113, 0x5Eu, (int *)&v474, 1u);
              float v137 = 0.0;
              if (IsConstantFor == 1)
              {
                float v137 = *(float *)&__p + (float)((float)(*(float *)&v474 - *(float *)&__p) * v115);
                *(float *)&uint64_t v467 = v137;
              }
            }
            else
            {
              int IsConstantFor = gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(*(void *)(*(void *)buf + 24), 0x5Eu, (int *)&v467, v117);
              float v137 = *(float *)&v467;
            }
            if (IsConstantFor && v137 < 1.0)
            {
              if ((v138 = *(void *)(*(void *)buf + 24), (unint64_t v139 = *(float **)v138) != 0)
                && (float v140 = *v139, LODWORD(v139) = *v139 == 1.0, *(unsigned char *)(v138 + 10))
                && (v140 != 0.0 ? (BOOL v141 = v140 == 1.0) : (BOOL v141 = 1), !v141)
                || (v142 = *(unsigned __int8 *)(v138 + v139 + 11), float v140 = 0.0, v142 == 2))
              {
                LODWORD(__p) = 0;
                LODWORD(v474) = 0;
                BOOL v143 = gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(v138, 0x61u, (int *)&__p, 0);
                int v144 = v143 & gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(v138, 0x61u, (int *)&v474, 1u);
                if (v144 == 1)
                {
                  float v137 = *(float *)&__p + (float)((float)(*(float *)&v474 - *(float *)&__p) * v140);
                  *(float *)&uint64_t v467 = v137;
                }
              }
              else
              {
                int v144 = gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(*(void *)(*(void *)buf + 24), 0x61u, (int *)&v467, v142);
                float v137 = *(float *)&v467;
              }
              if (v144 && v137 < 1.0)
              {
                int v447 = 0;
                int v135 = 9;
                if ((_BYTE)v549) {
                  goto LABEL_373;
                }
                goto LABEL_374;
              }
            }
            uint64_t v152 = *(void *)(*(void *)buf + 24);
            v153 = *(float **)v152;
            if (*(void *)v152)
            {
              float v154 = *v153;
              BOOL v155 = *v153 == 1.0;
              if (*(unsigned char *)(v152 + 10))
              {
                if (v154 != 0.0 && v154 != 1.0)
                {
LABEL_235:
                  uint64_t v158 = *(void *)(v152 + 16);
                  if (!v158) {
                    goto LABEL_290;
                  }
                  BOOL v159 = *(uint64_t **)(v158 + 72);
                  if (!v159) {
                    goto LABEL_263;
                  }
                  uint64_t v160 = *v159;
                  unint64_t v161 = *(unsigned __int16 *)(*v159 + 10);
                  if (!v161) {
                    goto LABEL_263;
                  }
                  size_t v162 = *(unsigned __int16 **)v160;
                  if (*(unsigned char *)(v160 + 15))
                  {
                    unint64_t v163 = *(unsigned __int16 **)v160;
                    unint64_t v164 = v161;
                    if (v161 < 0x1E)
                    {
                      uint64_t v165 = 0;
                      while (1)
                      {
                        unsigned int v166 = v162[v165];
                        if (v166 >= 0x12C) {
                          break;
                        }
                        if (v161 == ++v165) {
                          goto LABEL_263;
                        }
                      }
                      int v172 = (unsigned __int16)v165;
                      if (v166 != 300) {
                        int v172 = v161;
                      }
                      if (v172 == v161) {
                        goto LABEL_263;
                      }
LABEL_358:
                      int v135 = 0;
                      BOOL v227 = 1;
LABEL_372:
                      int v447 = v227;
                      if ((_BYTE)v549) {
LABEL_373:
                      }
                        (*(void (**)(void))(**(void **)buf + 56))(*(void *)buf);
LABEL_374:
                      uint64_t v235 = (std::__shared_weak_count *)v548;
                      if (v548 && !atomic_fetch_add(v548 + 1, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                        std::__shared_weak_count::__release_weak(v235);
                        int v236 = *(std::__shared_weak_count **)&buf[8];
                        if (*(void *)&buf[8]) {
                          goto LABEL_377;
                        }
                      }
                      else
                      {
                        int v236 = *(std::__shared_weak_count **)&buf[8];
                        if (*(void *)&buf[8])
                        {
LABEL_377:
                          if (!atomic_fetch_add(&v236->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                            std::__shared_weak_count::__release_weak(v236);
                          }
                        }
                      }
                      if (v135)
                      {
LABEL_381:
                        std::string::size_type v17 = v441;
                        if (v453 && !atomic_fetch_add(&v453->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                          std::__shared_weak_count::__release_weak(v453);
                        }
                        goto LABEL_106;
                      }
                      uint64_t v237 = *(std::__shared_weak_count **)(v39 + 152);
                      v446 = *(int8x8_t **)(v39 + 144);
                      if (v237) {
                        atomic_fetch_add_explicit(&v237->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v432 = v237;
                      uint64_t v452 = *((unsigned int *)v455 + 25);
                      if (!v452)
                      {
LABEL_609:
                        if (v432 && !atomic_fetch_add(&v432->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                          std::__shared_weak_count::__release_weak(v432);
                        }
                        goto LABEL_381;
                      }
                      unint64_t v238 = 0;
                      unint64_t v451 = ((unint64_t)v457 << 6)
                           - 0x61C8864680B583EBLL
                           + ((unint64_t)v457 >> 2);
                      while (2)
                      {
                        if (a7[3])
                        {
                          int8x8_t v239 = (int8x8_t)a7[1];
                          if (v239)
                          {
                            unint64_t v240 = (v451 + v238) ^ v457;
                            uint8x8_t v241 = (uint8x8_t)vcnt_s8(v239);
                            v241.i16[0] = vaddlv_u8(v241);
                            if (v241.u32[0] > 1uLL)
                            {
                              unint64_t v242 = (v451 + v238) ^ v457;
                              if (v240 >= *(void *)&v239) {
                                unint64_t v242 = v240 % *(void *)&v239;
                              }
                            }
                            else
                            {
                              unint64_t v242 = (*(void *)&v239 - 1) & v240;
                            }
                            long long v243 = *(uint64_t **)(*a7 + 8 * v242);
                            if (v243)
                            {
                              long long v243 = (uint64_t *)*v243;
                              if (v243)
                              {
                                if (v241.u32[0] < 2uLL)
                                {
                                  uint64_t v244 = *(void *)&v239 - 1;
                                  while (1)
                                  {
                                    uint64_t v246 = v243[1];
                                    if (v240 == v246)
                                    {
                                      if (*((_DWORD *)v243 + 4) == v457
                                        && *((_DWORD *)v243 + 5) == v238)
                                      {
                                        goto LABEL_418;
                                      }
                                    }
                                    else if ((v246 & v244) != v242)
                                    {
                                      goto LABEL_417;
                                    }
                                    long long v243 = (uint64_t *)*v243;
                                    if (!v243) {
                                      goto LABEL_418;
                                    }
                                  }
                                }
                                do
                                {
                                  unint64_t v248 = v243[1];
                                  if (v240 == v248)
                                  {
                                    if (*((_DWORD *)v243 + 4) == v457 && *((_DWORD *)v243 + 5) == v238) {
                                      break;
                                    }
                                  }
                                  else
                                  {
                                    if (v248 >= *(void *)&v239) {
                                      v248 %= *(void *)&v239;
                                    }
                                    if (v248 != v242) {
                                      goto LABEL_417;
                                    }
                                  }
                                  long long v243 = (uint64_t *)*v243;
                                }
                                while (v243);
                              }
                            }
                          }
                          else
                          {
LABEL_417:
                            long long v243 = 0;
                          }
LABEL_418:
                          char v454 = v243 != 0;
                        }
                        else
                        {
                          char v454 = 0;
                        }
                        unint64_t v474 = 0;
                        v249 = (float32x2_t *)geo::codec::multiSectionFeaturePoints(v455, v238, &v474);
                        v250 = (uint64_t *)v474;
                        if (v474 < 2) {
                          goto LABEL_388;
                        }
                        long long v251 = v249;
                        if (v544)
                        {
                          if (v238 == *((_DWORD *)v88 + 2))
                          {
                            unint64_t v252 = 0;
                            BOOL v253 = 0;
                          }
                          else
                          {
                            unint64_t v252 = 0;
                            int v254 = (int *)((char *)v88 + 108);
                            while ((void (**)(char **))((char *)v544 - 1) != (void (**)(char **))v252)
                            {
                              int v255 = *v254;
                              v254 += 25;
                              ++v252;
                              if (v238 == v255) {
                                goto LABEL_429;
                              }
                            }
                            unint64_t v252 = (unint64_t)v544;
LABEL_429:
                            BOOL v253 = v252 >= (unint64_t)v544;
                          }
                        }
                        else
                        {
                          unint64_t v252 = 0;
                          BOOL v253 = 1;
                        }
                        unint64_t v256 = v252 + 1;
                        int v257 = (char *)(v252 + 1);
                        if (v252 + 1 < (unint64_t)v544)
                        {
                          uint64_t v258 = (int *)((char *)v88 + 100 * v252 + 108);
                          int v257 = (char *)(v252 + 1);
                          while (1)
                          {
                            int v259 = *v258;
                            v258 += 25;
                            if (v238 != v259) {
                              break;
                            }
                            if (v544 == (void (**)(char **))++v257)
                            {
                              int v257 = (char *)v544;
                              break;
                            }
                          }
                        }
                        int v456 = v459 << 31 >> 31;
                        if ((v459 | v253))
                        {
LABEL_438:
                          if (v256 >= (unint64_t)v257) {
                            goto LABEL_537;
                          }
                        }
                        else
                        {
                          if (*((unsigned char *)v88 + 100 * v252 + 29))
                          {
                            int v456 = *((_DWORD *)v88 + 25 * v252 + 5);
                            goto LABEL_438;
                          }
                          int v456 = 0;
                          if (v256 >= (unint64_t)v257)
                          {
LABEL_537:
                            buf[0] = 0;
                            char v307 = 1;
                            int v306 = v474;
                            char v309 = 1;
                            uint64_t v39 = v449;
                            goto LABEL_538;
                          }
                        }
                        unint64_t v260 = 0;
                        unint64_t v261 = (v451 + v238) ^ v457;
                        uint64_t v439 = (v261 << 6) - 0x61C8864680B583EBLL + (v261 >> 2);
                        unint64_t v440 = v261;
                        unint64_t v445 = v439 ^ v261;
                        char v444 = 1;
                        char v450 = 1;
LABEL_443:
                        long long v263 = (_DWORD *)((char *)v88 + 100 * v256);
                        if (v238 != v263[2])
                        {
                          unint64_t v262 = v260;
                          goto LABEL_533;
                        }
                        if ((v459 & 1) == 0 && *((unsigned char *)v88 + 100 * v256 + 29))
                        {
                          long long v264 = (char *)v88 + 100 * v256;
                          int v266 = *((_DWORD *)v264 + 5);
                          uint64_t v265 = (int *)(v264 + 20);
                          if (v266 == v456)
                          {
                            unint64_t v262 = v260;
                            goto LABEL_442;
                          }
                          unint64_t v262 = v263[3];
                          if (v474 - 1 < v262)
                          {
                            unint64_t v262 = v260;
LABEL_533:
                            int v306 = v474;
                            v250 = (uint64_t *)(v474 - v262);
                            a2 = v437;
                            a7 = v438;
                            uint64_t v39 = v449;
                            if (v474 <= v262) {
                              goto LABEL_388;
                            }
                            v251 += v262;
                            buf[0] = 0;
                            if (v262)
                            {
                              char v307 = 0;
                              float32x2_t v308 = vsub_f32(*v251, v251[-1]);
                              *(float32x2_t *)&buf[4] = vmul_n_f32(v308, 1.0 / sqrtf(vaddv_f32(vmul_f32(v308, v308))));
                              buf[0] = 1;
                              char v309 = v444;
                              goto LABEL_567;
                            }
                            char v309 = v444;
                            char v307 = v450;
LABEL_538:
                            float v310 = 0.0;
                            if (!v446[445].i32[0]) {
                              goto LABEL_564;
                            }
                            int8x8_t v311 = v446[463];
                            if (!*(void *)&v311) {
                              goto LABEL_564;
                            }
                            unint64_t v312 = ((((v451 + v238) ^ v457) << 6)
                                  - 0x61C8864680B583EBLL
                                  + (((v451 + v238) ^ v457) >> 2)) ^ (v451 + v238) ^ v457;
                            uint8x8_t v313 = (uint8x8_t)vcnt_s8(v311);
                            v313.i16[0] = vaddlv_u8(v313);
                            if (v313.u32[0] > 1uLL)
                            {
                              unint64_t v314 = ((((v451 + v238) ^ v457) << 6)
                                    - 0x61C8864680B583EBLL
                                    + (((v451 + v238) ^ v457) >> 2)) ^ (v451 + v238) ^ v457;
                              if (v312 >= *(void *)&v311) {
                                unint64_t v314 = v312 % *(void *)&v311;
                              }
                            }
                            else
                            {
                              unint64_t v314 = (*(void *)&v311 - 1) & v312;
                            }
                            uint64_t v315 = *(uint64_t ***)(*(void *)&v446[462] + 8 * v314);
                            if (!v315 || (v316 = *v315) == 0)
                            {
LABEL_564:
                              float v321 = 0.0;
                              goto LABEL_565;
                            }
                            if (v313.u32[0] < 2uLL)
                            {
                              uint64_t v317 = *(void *)&v311 - 1;
                              while (1)
                              {
                                uint64_t v319 = v316[1];
                                if (v319 == v312)
                                {
                                  if (*((_DWORD *)v316 + 4) == v457
                                    && *((_DWORD *)v316 + 5) == v238
                                    && *((_DWORD *)v316 + 6) == v238)
                                  {
                                    goto LABEL_563;
                                  }
                                }
                                else if ((v319 & v317) != v314)
                                {
                                  goto LABEL_564;
                                }
                                v316 = (uint64_t *)*v316;
                                if (!v316) {
                                  goto LABEL_564;
                                }
                              }
                            }
                            while (2)
                            {
                              unint64_t v318 = v316[1];
                              if (v318 != v312)
                              {
                                if (v318 >= *(void *)&v311) {
                                  v318 %= *(void *)&v311;
                                }
                                if (v318 != v314) {
                                  goto LABEL_564;
                                }
LABEL_549:
                                v316 = (uint64_t *)*v316;
                                if (!v316) {
                                  goto LABEL_564;
                                }
                                continue;
                              }
                              break;
                            }
                            if (*((_DWORD *)v316 + 4) != v457
                              || *((_DWORD *)v316 + 5) != v238
                              || *((_DWORD *)v316 + 6) != v238)
                            {
                              goto LABEL_549;
                            }
LABEL_563:
                            uint64_t v320 = 4 * *((unsigned int *)v316 + 7);
                            float v310 = -(float)*(int *)(*(void *)&v446[455] + v320);
                            float v321 = -(float)*(int *)(*(void *)&v446[458] + v320);
LABEL_565:
                            float v322 = sqrtf((float)(v310 * v310) + (float)(v321 * v321));
                            if (v322 >= 0.0000001)
                            {
                              char v307 = 0;
                              float v323 = 1.0 / v322;
                              *(float *)&buf[4] = v323 * v310;
                              *(float *)&buf[8] = v323 * v321;
                              buf[0] = 1;
                            }
LABEL_567:
                            LOBYTE(__p) = 0;
                            v324 = *(void **)(v39 + 144);
                            int8x8_t v325 = (int8x8_t)v324[463];
                            if (v325)
                            {
                              unint64_t v326 = ((((v451 + v238) ^ v457) << 6)
                                    - 0x61C8864680B583EBLL
                                    + (((v451 + v238) ^ v457) >> 2)
                                    + (v306 - 1)) ^ (v451 + v238) ^ v457;
                              uint8x8_t v327 = (uint8x8_t)vcnt_s8(v325);
                              v327.i16[0] = vaddlv_u8(v327);
                              if (v327.u32[0] > 1uLL)
                              {
                                unint64_t v328 = v326;
                                if (v326 >= *(void *)&v325) {
                                  unint64_t v328 = v326 % *(void *)&v325;
                                }
                              }
                              else
                              {
                                unint64_t v328 = (*(void *)&v325 - 1) & v326;
                              }
                              v329 = *(uint64_t ***)(v324[462] + 8 * v328);
                              if (v329)
                              {
                                v330 = *v329;
                                if (v330)
                                {
                                  if (v327.u32[0] < 2uLL)
                                  {
                                    uint64_t v331 = *(void *)&v325 - 1;
                                    while (1)
                                    {
                                      uint64_t v333 = v330[1];
                                      if (v333 == v326)
                                      {
                                        if (*((_DWORD *)v330 + 4) == v457
                                          && *((_DWORD *)v330 + 5) == v238
                                          && *((_DWORD *)v330 + 6) == v238)
                                        {
                                          goto LABEL_591;
                                        }
                                      }
                                      else if ((v333 & v331) != v328)
                                      {
                                        goto LABEL_593;
                                      }
                                      v330 = (uint64_t *)*v330;
                                      if (!v330) {
                                        goto LABEL_593;
                                      }
                                    }
                                  }
                                  do
                                  {
                                    unint64_t v332 = v330[1];
                                    if (v332 == v326)
                                    {
                                      if (*((_DWORD *)v330 + 4) == v457
                                        && *((_DWORD *)v330 + 5) == v238
                                        && *((_DWORD *)v330 + 6) == v238)
                                      {
LABEL_591:
                                        uint64_t v334 = 4 * *((unsigned int *)v330 + 7);
                                        float v335 = (float)*(int *)(v324[455] + v334);
                                        float v336 = (float)*(int *)(v324[458] + v334);
                                        float v337 = sqrtf((float)(v335 * v335) + (float)(v336 * v336));
                                        if (v337 >= 0.0000001)
                                        {
                                          char v309 = 0;
                                          float v338 = 1.0 / v337;
                                          *((float *)&__p + 1) = v338 * v335;
                                          *((float *)&__p + 2) = v338 * v336;
                                          LOBYTE(__p) = 1;
                                        }
                                        break;
                                      }
                                    }
                                    else
                                    {
                                      if (v332 >= *(void *)&v325) {
                                        v332 %= *(void *)&v325;
                                      }
                                      if (v332 != v328) {
                                        break;
                                      }
                                    }
                                    v330 = (uint64_t *)*v330;
                                  }
                                  while (v330);
                                }
                              }
                            }
LABEL_593:
                            if (v447)
                            {
                              v339 = &v517;
                              if (v459) {
                                v339 = &v508;
                              }
                              uint64_t v340 = v339[1];
                              uint64_t v489 = v448;
                              v490 = v453;
                              if (v453) {
                                atomic_fetch_add_explicit(&v453->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              v341 = v490;
                              if (!v490) {
                                goto LABEL_388;
                              }
LABEL_605:
                              if (!atomic_fetch_add(&v341->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                                std::__shared_weak_count::__release_weak(v341);
                              }
                              goto LABEL_388;
                            }
                            v342 = &v535;
                            if (v459) {
                              v342 = &v526;
                            }
                            uint64_t v343 = v342[1];
                            uint64_t v487 = v448;
                            v488 = v453;
                            if (v453) {
                              atomic_fetch_add_explicit(&v453->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            v341 = v488;
                            if (v488) {
                              goto LABEL_605;
                            }
LABEL_388:
                            if (++v238 == v452) {
                              goto LABEL_609;
                            }
                            continue;
                          }
                          if (v262 > v260)
                          {
                            buf[0] = 0;
                            if (v262 + 1 < v474)
                            {
                              char v444 = 0;
                              float32x2_t v267 = vsub_f32(v251[v262 + 1], v251[v262]);
                              *(float32x2_t *)&buf[4] = vmul_n_f32(v267, 1.0 / sqrtf(vaddv_f32(vmul_f32(v267, v267))));
                              buf[0] = 1;
                              v268 = v446;
                              goto LABEL_489;
                            }
                            v268 = v446;
                            if (v474 - 1 == v262)
                            {
                              float v273 = 0.0;
                              if (!v446[445].i32[0]) {
                                goto LABEL_486;
                              }
                              int8x8_t v274 = v446[463];
                              if (!*(void *)&v274) {
                                goto LABEL_486;
                              }
                              unint64_t v275 = (v439 + v262) ^ v440;
                              uint8x8_t v276 = (uint8x8_t)vcnt_s8(v274);
                              v276.i16[0] = vaddlv_u8(v276);
                              if (v276.u32[0] > 1uLL)
                              {
                                unint64_t v277 = (v439 + v262) ^ v440;
                                if (v275 >= *(void *)&v274) {
                                  unint64_t v277 = v275 % *(void *)&v274;
                                }
                              }
                              else
                              {
                                unint64_t v277 = (*(void *)&v274 - 1) & v275;
                              }
                              long long v278 = *(uint64_t ***)(*(void *)&v446[462] + 8 * v277);
                              if (!v278 || (long long v279 = *v278) == 0)
                              {
LABEL_486:
                                float v284 = 0.0;
                                goto LABEL_487;
                              }
                              if (v276.u32[0] < 2uLL)
                              {
                                uint64_t v280 = *(void *)&v274 - 1;
                                while (1)
                                {
                                  uint64_t v282 = v279[1];
                                  if (v282 == v275)
                                  {
                                    if (*((_DWORD *)v279 + 4) == v457
                                      && *((_DWORD *)v279 + 5) == v238
                                      && *((_DWORD *)v279 + 6) == v238)
                                    {
                                      goto LABEL_485;
                                    }
                                  }
                                  else if ((v282 & v280) != v277)
                                  {
                                    goto LABEL_486;
                                  }
                                  long long v279 = (uint64_t *)*v279;
                                  if (!v279) {
                                    goto LABEL_486;
                                  }
                                }
                              }
                              while (1)
                              {
                                unint64_t v281 = v279[1];
                                if (v281 == v275)
                                {
                                  if (*((_DWORD *)v279 + 4) == v457
                                    && *((_DWORD *)v279 + 5) == v238
                                    && *((_DWORD *)v279 + 6) == v238)
                                  {
LABEL_485:
                                    uint64_t v283 = 4 * *((unsigned int *)v279 + 7);
                                    float v273 = (float)*(int *)(*(void *)&v446[455] + v283);
                                    float v284 = (float)*(int *)(*(void *)&v446[458] + v283);
LABEL_487:
                                    float v285 = sqrtf((float)(v273 * v273) + (float)(v284 * v284));
                                    if (v285 >= 0.0000001)
                                    {
                                      char v444 = 0;
                                      float v286 = 1.0 / v285;
                                      *(float *)&buf[4] = v286 * v273;
                                      *(float *)&buf[8] = v286 * v284;
                                      buf[0] = 1;
                                    }
                                    break;
                                  }
                                }
                                else
                                {
                                  if (v281 >= *(void *)&v274) {
                                    v281 %= *(void *)&v274;
                                  }
                                  if (v281 != v277) {
                                    goto LABEL_486;
                                  }
                                }
                                long long v279 = (uint64_t *)*v279;
                                if (!v279) {
                                  goto LABEL_486;
                                }
                              }
                            }
LABEL_489:
                            LOBYTE(__p) = 0;
                            if (v260)
                            {
                              char v450 = 0;
                              float32x2_t v287 = vsub_f32(v251[v260], v251[v260 - 1]);
                              *(float32x2_t *)((char *)&__p + 4) = vmul_n_f32(v287, 1.0 / sqrtf(vaddv_f32(vmul_f32(v287, v287))));
                              goto LABEL_520;
                            }
                            float v288 = 0.0;
                            if (v268[445].i32[0])
                            {
                              int8x8_t v289 = v268[463];
                              if (v289)
                              {
                                uint8x8_t v290 = (uint8x8_t)vcnt_s8(v289);
                                v290.i16[0] = vaddlv_u8(v290);
                                if (v290.u32[0] > 1uLL)
                                {
                                  unint64_t v291 = v445;
                                  if (v445 >= *(void *)&v289) {
                                    unint64_t v291 = v445 % *(void *)&v289;
                                  }
                                }
                                else
                                {
                                  unint64_t v291 = (*(void *)&v289 - 1) & v445;
                                }
                                uint64_t v292 = *(uint64_t ***)(*(void *)&v268[462] + 8 * v291);
                                if (v292)
                                {
                                  uint64_t v293 = *v292;
                                  if (v293)
                                  {
                                    if (v290.u32[0] < 2uLL)
                                    {
                                      uint64_t v294 = *(void *)&v289 - 1;
                                      while (1)
                                      {
                                        uint64_t v296 = v293[1];
                                        if (v296 == v445)
                                        {
                                          if (*((_DWORD *)v293 + 4) == v457
                                            && *((_DWORD *)v293 + 5) == v238
                                            && *((_DWORD *)v293 + 6) == v238)
                                          {
                                            goto LABEL_516;
                                          }
                                        }
                                        else if ((v296 & v294) != v291)
                                        {
                                          goto LABEL_517;
                                        }
                                        uint64_t v293 = (uint64_t *)*v293;
                                        if (!v293) {
                                          goto LABEL_517;
                                        }
                                      }
                                    }
                                    do
                                    {
                                      unint64_t v295 = v293[1];
                                      if (v295 == v445)
                                      {
                                        if (*((_DWORD *)v293 + 4) == v457
                                          && *((_DWORD *)v293 + 5) == v238
                                          && *((_DWORD *)v293 + 6) == v238)
                                        {
LABEL_516:
                                          uint64_t v297 = 4 * *((unsigned int *)v293 + 7);
                                          float v288 = -(float)*(int *)(*(void *)&v268[455] + v297);
                                          float v298 = -(float)*(int *)(*(void *)&v268[458] + v297);
                                          goto LABEL_518;
                                        }
                                      }
                                      else
                                      {
                                        if (v295 >= *(void *)&v289) {
                                          v295 %= *(void *)&v289;
                                        }
                                        if (v295 != v291) {
                                          break;
                                        }
                                      }
                                      uint64_t v293 = (uint64_t *)*v293;
                                    }
                                    while (v293);
                                  }
                                }
                              }
                            }
LABEL_517:
                            float v298 = 0.0;
LABEL_518:
                            float v299 = sqrtf((float)(v288 * v288) + (float)(v298 * v298));
                            if (v299 >= 0.0000001)
                            {
                              char v450 = 0;
                              float v300 = 1.0 / v299;
                              *((float *)&__p + 1) = v300 * v288;
                              *((float *)&__p + 2) = v300 * v298;
LABEL_520:
                              LOBYTE(__p) = 1;
                            }
                            uint64_t v301 = v262 - v260 + 1;
                            unint64_t v302 = (unint64_t)&v251[v260];
                            if (v447)
                            {
                              v303 = v518;
                              uint64_t v493 = v448;
                              v494 = v453;
                              if (v453) {
                                atomic_fetch_add_explicit(&v453->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              v304 = v494;
                              if (!v494) {
                                goto LABEL_531;
                              }
                            }
                            else
                            {
                              v305 = v536;
                              uint64_t v491 = v448;
                              v492 = v453;
                              if (v453) {
                                atomic_fetch_add_explicit(&v453->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              v304 = v492;
                              if (!v492) {
                                goto LABEL_531;
                              }
                            }
                            if (!atomic_fetch_add(&v304->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                              std::__shared_weak_count::__release_weak(v304);
                            }
LABEL_531:
                            char v450 = 0;
                            int v456 = *v265;
LABEL_442:
                            ++v256;
                            unint64_t v260 = v262;
                            if ((char *)v256 == v257) {
                              goto LABEL_533;
                            }
                            goto LABEL_443;
                          }
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                          }
                          v269 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
                          {
                            v495[0] = *a5;
                            uint64_t v496 = *(void *)(a5 + 2);
                            md::debugString<geo::QuadTile>(&__p, (char *)v495);
                            p_p = &__p;
                            if (v482 < 0) {
                              p_p = (long long *)__p;
                            }
                            int v271 = v263[1];
                            int v272 = v263[2];
                            *(_DWORD *)long long buf = 136315650;
                            *(void *)&buf[4] = p_p;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v271;
                            *(_WORD *)&buf[18] = 1024;
                            *(_DWORD *)&buf[20] = v272;
                            _os_log_impl(&dword_1A1780000, v269, OS_LOG_TYPE_ERROR, "buildRoadTileData: Received point characteristic out of order in tile %s, featureIndex %d, sectionIndex %d", buf, 0x18u);
                            if (SHIBYTE(v482) < 0) {
                              operator delete((void *)__p);
                            }
                          }
                        }
                        break;
                      }
                      unint64_t v262 = v260;
                      goto LABEL_442;
                    }
                    do
                    {
                      unint64_t v167 = v164 >> 1;
                      unint64_t v168 = &v163[v164 >> 1];
                      unsigned int v170 = *v168;
                      uint64_t v169 = v168 + 1;
                      v164 += ~(v164 >> 1);
                      if (v170 < 0x12C) {
                        unint64_t v163 = v169;
                      }
                      else {
                        unint64_t v164 = v167;
                      }
                    }
                    while (v164);
                    if (v163 == &v162[v161] || *v163 != 300)
                    {
LABEL_263:
                      if (*(_WORD *)(v152 + 56))
                      {
                        uint64_t v173 = *(void *)(v152 + 48);
                        uint64_t v174 = v173 + 8 * *(unsigned __int16 *)(v152 + 56);
                        do
                        {
                          uint64_t v176 = *(uint64_t **)(*(void *)v173 + 72);
                          if (v176)
                          {
                            uint64_t v177 = *v176;
                            unint64_t v178 = *(unsigned __int16 *)(*v176 + 10);
                            if (!v178)
                            {
                              int v175 = 0;
                              goto LABEL_266;
                            }
                            v179 = *(unsigned __int16 **)v177;
                            if (!*(unsigned char *)(v177 + 15))
                            {
                              uint64_t v188 = 2 * v178;
                              v180 = *(unsigned __int16 **)v177;
                              while (*v180 != 300)
                              {
                                ++v180;
                                v188 -= 2;
                                if (!v188)
                                {
                                  LODWORD(v180) = v179 + 2 * v178;
                                  break;
                                }
                              }
LABEL_287:
                              int v175 = (unsigned __int16)((v180 - v179) >> 1);
LABEL_266:
                              if (v175 != v178) {
                                goto LABEL_358;
                              }
                              goto LABEL_267;
                            }
                            v180 = *(unsigned __int16 **)v177;
                            unint64_t v181 = v178;
                            if (v178 < 0x1E)
                            {
                              uint64_t v182 = 0;
                              while (1)
                              {
                                unsigned int v183 = v179[v182];
                                if (v183 >= 0x12C) {
                                  break;
                                }
                                if (v178 == ++v182) {
                                  goto LABEL_267;
                                }
                              }
                              int v175 = (unsigned __int16)v182;
                              if (v183 != 300) {
                                int v175 = v178;
                              }
                              goto LABEL_266;
                            }
                            do
                            {
                              unint64_t v184 = v181 >> 1;
                              uint64_t v185 = &v180[v181 >> 1];
                              unsigned int v187 = *v185;
                              v186 = v185 + 1;
                              v181 += ~(v181 >> 1);
                              if (v187 < 0x12C) {
                                v180 = v186;
                              }
                              else {
                                unint64_t v181 = v184;
                              }
                            }
                            while (v181);
                            if (v180 != &v179[v178] && *v180 == 300) {
                              goto LABEL_287;
                            }
                          }
LABEL_267:
                          v173 += 8;
                        }
                        while (v173 != v174);
                      }
LABEL_290:
                      unsigned int v157 = 1;
LABEL_291:
                      uint64_t v189 = *(void *)(v152 + 16 * v157 + 16);
                      if (!v189) {
                        goto LABEL_344;
                      }
                      uint64_t v190 = *(uint64_t **)(v189 + 72);
                      if (!v190) {
                        goto LABEL_317;
                      }
                      uint64_t v191 = *v190;
                      unint64_t v192 = *(unsigned __int16 *)(*v190 + 10);
                      if (!v192) {
                        goto LABEL_317;
                      }
                      long long v193 = *(unsigned __int16 **)v191;
                      if (*(unsigned char *)(v191 + 15))
                      {
                        long long v194 = *(unsigned __int16 **)v191;
                        unint64_t v195 = v192;
                        if (v192 < 0x1E)
                        {
                          uint64_t v196 = 0;
                          while (1)
                          {
                            unsigned int v197 = v193[v196];
                            if (v197 >= 0x12C) {
                              break;
                            }
                            if (v192 == ++v196) {
                              goto LABEL_317;
                            }
                          }
                          int v203 = (unsigned __int16)v196;
                          if (v197 != 300) {
                            int v203 = v192;
                          }
                          if (v203 != v192) {
                            goto LABEL_358;
                          }
LABEL_317:
                          uint64_t v204 = v152 + 16 * v157;
                          uint64_t v205 = *(unsigned __int16 *)(v204 + 56);
                          if (*(_WORD *)(v204 + 56))
                          {
                            uint64_t v206 = *(void *)(v204 + 48);
                            uint64_t v207 = v206 + 8 * v205;
                            do
                            {
                              unint64_t v209 = *(uint64_t **)(*(void *)v206 + 72);
                              if (v209)
                              {
                                uint64_t v210 = *v209;
                                unint64_t v211 = *(unsigned __int16 *)(*v209 + 10);
                                if (!v211)
                                {
                                  int v208 = 0;
                                  goto LABEL_320;
                                }
                                v212 = *(unsigned __int16 **)v210;
                                if (!*(unsigned char *)(v210 + 15))
                                {
                                  uint64_t v221 = 2 * v211;
                                  v213 = *(unsigned __int16 **)v210;
                                  while (*v213 != 300)
                                  {
                                    ++v213;
                                    v221 -= 2;
                                    if (!v221)
                                    {
                                      LODWORD(v213) = v212 + 2 * v211;
                                      break;
                                    }
                                  }
LABEL_341:
                                  int v208 = (unsigned __int16)((v213 - v212) >> 1);
LABEL_320:
                                  if (v208 != v211) {
                                    goto LABEL_358;
                                  }
                                  goto LABEL_321;
                                }
                                v213 = *(unsigned __int16 **)v210;
                                unint64_t v214 = v211;
                                if (v211 < 0x1E)
                                {
                                  uint64_t v215 = 0;
                                  while (1)
                                  {
                                    unsigned int v216 = v212[v215];
                                    if (v216 >= 0x12C) {
                                      break;
                                    }
                                    if (v211 == ++v215) {
                                      goto LABEL_321;
                                    }
                                  }
                                  int v208 = (unsigned __int16)v215;
                                  if (v216 != 300) {
                                    int v208 = v211;
                                  }
                                  goto LABEL_320;
                                }
                                do
                                {
                                  unint64_t v217 = v214 >> 1;
                                  v218 = &v213[v214 >> 1];
                                  unsigned int v220 = *v218;
                                  v219 = v218 + 1;
                                  v214 += ~(v214 >> 1);
                                  if (v220 < 0x12C) {
                                    v213 = v219;
                                  }
                                  else {
                                    unint64_t v214 = v217;
                                  }
                                }
                                while (v214);
                                if (v213 != &v212[v211] && *v213 == 300) {
                                  goto LABEL_341;
                                }
                              }
LABEL_321:
                              v206 += 8;
                            }
                            while (v206 != v207);
                          }
LABEL_344:
                          if (v153)
                          {
                            float v222 = *v153;
                            BOOL v223 = *v153 == 1.0;
                            if (*(unsigned char *)(v152 + 10))
                            {
                              if (v222 != 0.0 && v222 != 1.0) {
                                goto LABEL_354;
                              }
                            }
                          }
                          else
                          {
                            BOOL v223 = 0;
                          }
                          unsigned int v225 = *(unsigned __int8 *)(v152 + v223 + 11);
                          if (v225 == 2)
                          {
LABEL_354:
                            char hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)buf + 24), 0x12Du, 0);
                            unsigned int v225 = 1;
                            if (hasValueForKeyAtEnd)
                            {
                              int v447 = 1;
                              int v135 = 0;
                              if ((_BYTE)v549) {
                                goto LABEL_373;
                              }
                              goto LABEL_374;
                            }
                          }
                          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v152, 0x12Du, v225)) {
                            goto LABEL_358;
                          }
                          if (!v153)
                          {
                            BOOL v229 = 0;
                            goto LABEL_365;
                          }
                          float v228 = *v153;
                          BOOL v229 = *v153 == 1.0;
                          if (!*(unsigned char *)(v152 + 10) || v228 == 0.0 || v228 == 1.0)
                          {
LABEL_365:
                            unsigned int v230 = *(unsigned __int8 *)(v152 + v229 + 11);
                            float v228 = 0.0;
                            if (v230 == 2) {
                              goto LABEL_366;
                            }
                            LOBYTE(v234) = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v152, 0x96u, v230, 0);
                          }
                          else
                          {
LABEL_366:
                            LOBYTE(__p) = 1;
                            LOBYTE(v474) = 1;
                            uint64_t v231 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v152, 0x96u, 0, &__p);
                            uint64_t v232 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v152, 0x96u, 1u, &v474);
                            if (v228 >= 1.0) {
                              long long v233 = (int *)v232;
                            }
                            else {
                              long long v233 = (int *)v231;
                            }
                            int v234 = *v233;
                          }
                          int v135 = 0;
                          BOOL v227 = v234 == 1;
                          goto LABEL_372;
                        }
                        do
                        {
                          unint64_t v198 = v195 >> 1;
                          uint64_t v199 = &v194[v195 >> 1];
                          unsigned int v201 = *v199;
                          uint64_t v200 = v199 + 1;
                          v195 += ~(v195 >> 1);
                          if (v201 < 0x12C) {
                            long long v194 = v200;
                          }
                          else {
                            unint64_t v195 = v198;
                          }
                        }
                        while (v195);
                        if (v194 == &v193[v192] || *v194 != 300) {
                          goto LABEL_317;
                        }
                      }
                      else
                      {
                        uint64_t v202 = 2 * v192;
                        long long v194 = *(unsigned __int16 **)v191;
                        while (*v194 != 300)
                        {
                          ++v194;
                          v202 -= 2;
                          if (!v202)
                          {
                            LODWORD(v194) = v193 + 2 * v192;
                            break;
                          }
                        }
                      }
                      if ((unsigned __int16)((v194 - v193) >> 1) != v192) {
                        goto LABEL_358;
                      }
                      goto LABEL_317;
                    }
                  }
                  else
                  {
                    uint64_t v171 = 2 * v161;
                    unint64_t v163 = *(unsigned __int16 **)v160;
                    while (*v163 != 300)
                    {
                      ++v163;
                      v171 -= 2;
                      if (!v171)
                      {
                        LODWORD(v163) = v162 + 2 * v161;
                        break;
                      }
                    }
                  }
                  if ((unsigned __int16)((v163 - v162) >> 1) != v161) {
                    goto LABEL_358;
                  }
                  goto LABEL_263;
                }
              }
            }
            else
            {
              BOOL v155 = 0;
            }
            unsigned int v157 = *(unsigned __int8 *)(v152 + v155 + 11);
            if (v157 == 2) {
              goto LABEL_235;
            }
            goto LABEL_291;
          }
        }
LABEL_212:
        if ((v433 & 1) == 0) {
          goto LABEL_213;
        }
      }
LABEL_106:
      uint64_t v85 = v457 + 1;
      if (v457 + 1 == v442) {
        goto LABEL_5;
      }
    }
  }
LABEL_612:
  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3812000000;
  v548 = (atomic_ullong *)__Block_byref_object_copy__9_2798;
  uint64_t v550 = 0;
  uint64_t v551 = 0;
  v549 = __Block_byref_object_dispose__10_2799;
  *(void *)&long long __p = 0;
  *((void *)&__p + 1) = &__p;
  uint64_t v482 = 0x3812000000;
  v483 = __Block_byref_object_copy__11_2800;
  uint64_t v486 = 0;
  v484 = __Block_byref_object_dispose__12_2801;
  uint64_t v485 = 0;
  unint64_t v474 = 0;
  v475 = &v474;
  uint64_t v476 = 0x3812000000;
  v477 = __Block_byref_object_copy__9_2798;
  uint64_t v480 = 0;
  v478 = __Block_byref_object_dispose__10_2799;
  uint64_t v479 = 0;
  uint64_t v467 = 0;
  v468 = (std::__shared_weak_count *)&v467;
  uint64_t v469 = 0x3812000000;
  v470 = __Block_byref_object_copy__11_2800;
  uint64_t v473 = 0;
  v471 = __Block_byref_object_dispose__12_2801;
  uint64_t v472 = 0;
  if (v518[9] + v536[9] + v527[9] + v509[9])
  {
    v463[0] = MEMORY[0x1E4F143A8];
    v463[1] = 3321888768;
    v463[2] = ___ZNK2md19RoadLayerDataSource17buildRoadTileDataERKN3gdc19LayerDataRequestKeyEPN3ggl6LoaderERKN3geo8QuadTileERKNSt3__16vectorINSC_10shared_ptrINS_21GEOVectorTileResourceEEENSC_9allocatorISG_EEEERKNSC_13unordered_setINS_21RoadFeatureAndSectionENSC_4hashISN_EENSC_8equal_toISN_EENSH_ISN_EEEEONSC_10unique_ptrINS_19DaVinciTrafficLayerENSC_14default_deleteISX_EEEEONSW_INS_17CasedTrafficLayerENSY_IS12_EEEERKN3gss19FeatureAttributeSetENSE_INS5_17ConstantDataTypedINS5_4Tile4ViewEEEEENSE_INS1A_INS1B_9TransformEEEEERKNSE_INS_27TrafficSkeletonTileResourceEEERKNSD_INSE_INS_26TrafficDynamicTileResourceEEENSH_IS1N_EEEEONSD_INS1_8Resource12LoadMetadataENSH_IS1T_EEEE_block_invoke;
    v463[3] = &unk_1EF58DD08;
    v463[4] = &v535;
    v463[5] = buf;
    v344 = (std::__shared_weak_count *)a11[1];
    v463[12] = *a11;
    v464 = v344;
    if (v344) {
      atomic_fetch_add_explicit(&v344->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v345 = (std::__shared_weak_count *)a12[1];
    uint64_t v465 = *a12;
    v466 = v345;
    if (v345) {
      atomic_fetch_add_explicit(&v345->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v463[6] = &v517;
    v463[7] = &__p;
    v463[8] = &v526;
    v463[9] = &v474;
    v463[10] = &v508;
    v463[11] = &v467;
    v546 = 0;
    v544 = (void (**)(char **))&unk_1EF56BC58;
    uint64_t v545 = MEMORY[0x1A6239EB0](v463);
    v546 = (uint64_t *)&v544;
    uint64_t v461 = 0;
    v462 = 0;
    (*(void (**)(void, void (***)(char **), uint64_t *))(*(void *)*a4 + 16))(*a4, &v544, &v461);
    v346 = v462;
    if (v462 && !atomic_fetch_add(&v462->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
    if (v546 == (uint64_t *)&v544)
    {
      v544[4]((char **)&v544);
      v347 = v466;
      if (!v466)
      {
LABEL_628:
        v348 = v464;
        if (v464 && !atomic_fetch_add(&v464->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
          std::__shared_weak_count::__release_weak(v348);
        }
        goto LABEL_631;
      }
    }
    else
    {
      if (v546) {
        (*(void (**)(void))(*v546 + 40))();
      }
      v347 = v466;
      if (!v466) {
        goto LABEL_628;
      }
    }
    if (!atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
    goto LABEL_628;
  }
LABEL_631:
  if (*a6 == a6[1])
  {
    v544 = 0;
    uint64_t v545 = 0;
  }
  else
  {
    uint64_t v349 = **a6;
    v351 = *(void (***)(char **))(v349 + 144);
    uint64_t v350 = *(void *)(v349 + 152);
    v544 = v351;
    uint64_t v545 = v350;
    if (v350) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v350 + 8), 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v352 = *(void *)&buf[8];
  uint64_t v353 = *((void *)&__p + 1);
  v354 = v475;
  v355 = v468;
  v356 = (char *)operator new(0x3B8uLL);
  *((void *)v356 + 1) = 0;
  *((void *)v356 + 2) = 0;
  *(void *)v356 = &unk_1EF57FA00;
  uint64_t v357 = *(void *)(v352 + 48);
  *(void *)(v352 + 48) = 0;
  uint64_t v358 = *(void *)(v353 + 48);
  *(void *)(v353 + 48) = 0;
  unint64_t v359 = v354[6];
  v354[6] = 0;
  v360 = v355[2].__vftable;
  v355[2].__vftable = 0;
  unint64_t prime = (void *)md::MapTileData::MapTileData((uint64_t)(v356 + 24), a3, a15, (uint64_t *)&v544, 1);
  *((void *)v356 + 3) = &unk_1EF531D18;
  unint64_t v362 = (unint64_t)(v356 + 24);
  *((void *)v356 + 82) = &unk_1EF531D58;
  *((void *)v356 + 93) = v357;
  *((void *)v356 + 94) = v358;
  *((void *)v356 + 95) = v359;
  *((void *)v356 + 96) = v360;
  uint64_t v363 = *a8;
  *a8 = 0;
  *((void *)v356 + 97) = v363;
  uint64_t v364 = *a9;
  *a9 = 0;
  *((void *)v356 + 98) = v364;
  v365 = v356 + 792;
  *(_OWORD *)(v356 + 792) = 0u;
  size_t v366 = __n;
  *((void *)v356 + 101) = v503;
  uint64_t v367 = v505;
  *((void *)v356 + 102) = 0;
  *((void *)v356 + 103) = v367;
  *((void *)v356 + 104) = 0;
  *((_DWORD *)v356 + 210) = v507;
  v460 = v356 + 792;
  if (v366 == 1)
  {
    size_t v366 = 2;
LABEL_637:
    unint64_t prime = (void *)std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)(v356 + 792), v366);
    goto LABEL_638;
  }
  if ((v366 & (v366 - 1)) != 0)
  {
    unint64_t prime = (void *)std::__next_prime(v366);
    size_t v366 = (size_t)prime;
    int8x8_t v401 = *(int8x8_t *)(v356 + 800);
    BOOL v402 = (unint64_t)prime >= *(void *)&v401;
    if ((unint64_t)prime > *(void *)&v401) {
      goto LABEL_637;
    }
  }
  else
  {
    int8x8_t v401 = 0;
    BOOL v402 = 1;
    if (v366) {
      goto LABEL_637;
    }
  }
  if (!v402)
  {
    unint64_t prime = (void *)vcvtps_u32_f32((float)*((unint64_t *)v356 + 104) / *((float *)v356 + 210));
    if (*(void *)&v401 < 3uLL || (uint8x8_t v424 = (uint8x8_t)vcnt_s8(v401), v424.i16[0] = vaddlv_u8(v424), v424.u32[0] > 1uLL))
    {
      unint64_t prime = (void *)std::__next_prime((size_t)prime);
    }
    else
    {
      uint64_t v425 = 1 << -(char)__clz((unint64_t)prime - 1);
      if ((unint64_t)prime >= 2) {
        unint64_t prime = (void *)v425;
      }
    }
    if (v366 <= (unint64_t)prime) {
      size_t v366 = (size_t)prime;
    }
    if (v366 < *(void *)&v401) {
      goto LABEL_637;
    }
  }
LABEL_638:
  v368 = v504;
  if (v504)
  {
    v458 = v356 + 816;
    do
    {
      unint64_t v369 = v368[2];
      unint64_t v370 = 0x9DDFEA08EB382D69 * (((8 * v369) + 8) ^ HIDWORD(v369));
      unint64_t v371 = 0x9DDFEA08EB382D69 * (HIDWORD(v369) ^ (v370 >> 47) ^ v370);
      unint64_t v372 = v371 ^ (v371 >> 47);
      unint64_t v373 = 0x9DDFEA08EB382D69 * v372;
      unint64_t v374 = *((void *)v356 + 100);
      if (v374)
      {
        uint8x8_t v375 = (uint8x8_t)vcnt_s8((int8x8_t)v374);
        v375.i16[0] = vaddlv_u8(v375);
        if (v375.u32[0] > 1uLL)
        {
          unint64_t v362 = 0x9DDFEA08EB382D69 * v372;
          if (v373 >= v374) {
            unint64_t v362 = v373 % v374;
          }
        }
        else
        {
          unint64_t v362 = v373 & (v374 - 1);
        }
        v376 = *(void **)(*v365 + 8 * v362);
        if (v376)
        {
          v377 = (void *)*v376;
          if (v377)
          {
            if (v375.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v379 = v377[1];
                if (v379 == v373)
                {
                  if (v377[2] == v369) {
                    goto LABEL_703;
                  }
                }
                else if ((v379 & (v374 - 1)) != v362)
                {
                  goto LABEL_660;
                }
                v377 = (void *)*v377;
                if (!v377) {
                  goto LABEL_660;
                }
              }
            }
            do
            {
              unint64_t v378 = v377[1];
              if (v378 == v373)
              {
                if (v377[2] == v369) {
                  goto LABEL_703;
                }
              }
              else
              {
                if (v378 >= v374) {
                  v378 %= v374;
                }
                if (v378 != v362) {
                  break;
                }
              }
              v377 = (void *)*v377;
            }
            while (v377);
          }
        }
      }
LABEL_660:
      unint64_t prime = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v356 + 103) + 16))(*((void *)v356 + 103), 56, 8);
      v380 = prime;
      *unint64_t prime = 0;
      prime[1] = v373;
      prime[2] = v368[2];
      uint64_t v381 = v368[3];
      prime[3] = v381;
      if (v381) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v381 + 8), 1uLL, memory_order_relaxed);
      }
      prime[4] = 0;
      prime[5] = 0;
      prime[6] = 0;
      v383 = (unsigned char *)v368[4];
      v382 = (unsigned char *)v368[5];
      int64_t v384 = v382 - v383;
      if (v382 != v383)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v384 >> 2) > 0x1555555555555555) {
          abort();
        }
        v385 = (char *)operator new(v384);
        v380[4] = v385;
        v380[5] = v385;
        v380[6] = &v385[4 * (v384 >> 2)];
        size_t v386 = 12 * ((v384 - 12) / 0xCuLL) + 12;
        unint64_t prime = memcpy(v385, v383, v386);
        v380[5] = &v385[v386];
      }
      float v387 = (float)(unint64_t)(*((void *)v356 + 104) + 1);
      float v388 = *((float *)v356 + 210);
      v365 = v356 + 792;
      if (!v374 || (float)(v388 * (float)v374) < v387)
      {
        BOOL v389 = (v374 & (v374 - 1)) != 0;
        if (v374 < 3) {
          BOOL v389 = 1;
        }
        unint64_t v390 = v389 | (2 * v374);
        unint64_t v391 = vcvtps_u32_f32(v387 / v388);
        if (v390 <= v391) {
          size_t v392 = v391;
        }
        else {
          size_t v392 = v390;
        }
        if (v392 == 1)
        {
          size_t v392 = 2;
        }
        else if ((v392 & (v392 - 1)) != 0)
        {
          unint64_t prime = (void *)std::__next_prime(v392);
          size_t v392 = (size_t)prime;
        }
        int8x8_t v393 = *(int8x8_t *)(v356 + 800);
        if (v392 > *(void *)&v393) {
          goto LABEL_677;
        }
        if (v392 < *(void *)&v393)
        {
          unint64_t prime = (void *)vcvtps_u32_f32((float)*((unint64_t *)v356 + 104) / *((float *)v356 + 210));
          if (*(void *)&v393 < 3uLL
            || (uint8x8_t v394 = (uint8x8_t)vcnt_s8(v393), v394.i16[0] = vaddlv_u8(v394), v394.u32[0] > 1uLL))
          {
            unint64_t prime = (void *)std::__next_prime((size_t)prime);
          }
          else
          {
            uint64_t v395 = 1 << -(char)__clz((unint64_t)prime - 1);
            if ((unint64_t)prime >= 2) {
              unint64_t prime = (void *)v395;
            }
          }
          if (v392 <= (unint64_t)prime) {
            size_t v392 = (size_t)prime;
          }
          if (v392 < *(void *)&v393) {
LABEL_677:
          }
            unint64_t prime = (void *)std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>((uint64_t)v460, v392);
        }
        unint64_t v374 = *((void *)v356 + 100);
        if ((v374 & (v374 - 1)) != 0)
        {
          if (v373 >= v374) {
            unint64_t v362 = v373 % v374;
          }
          else {
            unint64_t v362 = v373;
          }
        }
        else
        {
          unint64_t v362 = (v374 - 1) & v373;
        }
      }
      v396 = *(void **)(*v460 + 8 * v362);
      if (v396)
      {
        void *v380 = *v396;
      }
      else
      {
        void *v380 = *v458;
        void *v458 = v380;
        *(void *)(*v460 + 8 * v362) = v458;
        if (!*v380) {
          goto LABEL_702;
        }
        unint64_t v397 = *(void *)(*v380 + 8);
        if ((v374 & (v374 - 1)) != 0)
        {
          if (v397 >= v374) {
            v397 %= v374;
          }
        }
        else
        {
          v397 &= v374 - 1;
        }
        v396 = (void *)(*v460 + 8 * v397);
      }
      void *v396 = v380;
LABEL_702:
      ++*((void *)v356 + 104);
LABEL_703:
      v368 = (void *)*v368;
    }
    while (v368);
  }
  *((void *)v356 + 108) = 0;
  *((_OWORD *)v356 + 53) = 0u;
  *((void *)v356 + 109) = gss::Allocator::instance((gss::Allocator *)prime);
  if (v356 + 848 != (char *)a10) {
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)v356 + 106, *(void *)a10, *(void **)(a10 + 8), (uint64_t)(*(void *)(a10 + 8) - *(void *)a10) >> 3);
  }
  uint64_t v398 = *a13;
  if (*a13)
  {
    *((void *)v356 + 110) = *(void *)(v398 + 144);
    uint64_t v399 = *(void *)(v398 + 152);
    *((void *)v356 + 111) = v399;
    v400 = v356 + 24;
    if (v399) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v399 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *((void *)v356 + 110) = 0;
    *((void *)v356 + 111) = 0;
    v400 = v356 + 24;
  }
  *((void *)v356 + 114) = 0;
  *((_OWORD *)v356 + 56) = 0u;
  uint64_t v403 = a11[1];
  *((void *)v356 + 115) = *a11;
  *((void *)v356 + 116) = v403;
  if (v403) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v403 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v404 = a12[1];
  *((void *)v356 + 117) = *a12;
  *((void *)v356 + 118) = v404;
  if (v404) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v404 + 8), 1uLL, memory_order_relaxed);
  }
  v405 = *a14;
  v406 = a14[1];
  if (*a14 != v406)
  {
    do
      md::DynamicTrafficTileList::addDynamicTile((uint64_t)(v356 + 896), v405++);
    while (v405 != v406);
  }
  v407 = (std::__shared_weak_count *)v545;
  *a1 = v400;
  a1[1] = v356;
  if (v407 && !atomic_fetch_add(&v407->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
    std::__shared_weak_count::__release_weak(v407);
  }
  _Block_object_dispose(&v467, 8);
  uint64_t v408 = v473;
  uint64_t v473 = 0;
  if (v408) {
    (*(void (**)(uint64_t))(*(void *)v408 + 8))(v408);
  }
  _Block_object_dispose(&v474, 8);
  uint64_t v409 = v480;
  uint64_t v480 = 0;
  if (v409) {
    (*(void (**)(uint64_t))(*(void *)v409 + 8))(v409);
  }
  _Block_object_dispose(&__p, 8);
  uint64_t v410 = v486;
  uint64_t v486 = 0;
  if (v410) {
    (*(void (**)(uint64_t))(*(void *)v410 + 8))(v410);
  }
  _Block_object_dispose(buf, 8);
  uint64_t v411 = v551;
  uint64_t v551 = 0;
  if (v411) {
    (*(void (**)(uint64_t))(*(void *)v411 + 8))(v411);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::~__hash_table(&v501);
  _Block_object_dispose(&v508, 8);
  v412 = (void *)*((void *)&v514 + 1);
  if (*((void *)&v514 + 1))
  {
    do
    {
      v413 = (void *)*v412;
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v412 + 2));
      operator delete(v412);
      v412 = v413;
    }
    while (v413);
  }
  v414 = (void *)*((void *)&v513 + 1);
  *((void *)&v513 + 1) = 0;
  if (v414) {
    operator delete(v414);
  }
  _Block_object_dispose(&v517, 8);
  v415 = (void *)*((void *)&v523 + 1);
  if (*((void *)&v523 + 1))
  {
    do
    {
      v416 = (void *)*v415;
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v415 + 2));
      operator delete(v415);
      v415 = v416;
    }
    while (v416);
  }
  v417 = (void *)*((void *)&v522 + 1);
  *((void *)&v522 + 1) = 0;
  if (v417) {
    operator delete(v417);
  }
  _Block_object_dispose(&v526, 8);
  v418 = (void *)*((void *)&v532 + 1);
  if (*((void *)&v532 + 1))
  {
    do
    {
      v419 = (void *)*v418;
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v418 + 2));
      operator delete(v418);
      v418 = v419;
    }
    while (v419);
  }
  v420 = (void *)*((void *)&v531 + 1);
  *((void *)&v531 + 1) = 0;
  if (v420) {
    operator delete(v420);
  }
  _Block_object_dispose(&v535, 8);
  v421 = (void *)*((void *)&v541 + 1);
  if (*((void *)&v541 + 1))
  {
    do
    {
      v422 = (void *)*v421;
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v421 + 2));
      operator delete(v421);
      v421 = v422;
    }
    while (v422);
  }
  v423 = (void *)*((void *)&v540 + 1);
  *((void *)&v540 + 1) = 0;
  if (v423) {
    operator delete(v423);
  }
}

uint64_t __Block_byref_object_copy__2794(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__2795(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__7_2796(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__8_2797(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__9_2798(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__10_2799(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t __Block_byref_object_copy__11_2800(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__12_2801(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void anonymous namespace'::addContourLinesToBatches(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v42 = a3[1];
  if (*a3 != v42)
  {
    uint64_t v6 = a3[4];
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v41 = *(void *)(v6 + 32);
    while (1)
    {
      uint64_t v8 = *a4;
      md::createFeatureAttributeSet((gss::Allocator *)v48, (uint64_t *)(v4 + 32));
      *(void *)&buf[7] = 0;
      *(void *)long long buf = 0;
      buf[15] = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v51, v8, (gss::FeatureAttributeSet *)v48, (gss::QueryOverrides *)buf);
      if (v48[0])
      {
        v48[1] = v48[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v49 + 40))(v49, v48[0], v48[2] - v48[0]);
      }
      long long v9 = v51;
      *(_OWORD *)long long buf = v51;
      if (*((void *)&v51 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v48, v9, *((uint64_t *)&v9 + 1));
      if (*((void *)&v9 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v9 + 1) + 16))(*((void *)&v9 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        if (!v50)
        {
LABEL_20:
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          unint64_t v15 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_DEBUG, "Road Layer Data Source: failed to resolve style for contours (assuming solid)", buf, 2u);
          }

          std::string::size_type v16 = (unsigned int *)(v4 + 20);
          if (!*(_DWORD *)(v4 + 20)) {
            goto LABEL_75;
          }
          std::string::size_type v17 = (uint64_t *)(v41 + 16 * *(unsigned int *)(v4 + 16));
LABEL_68:
          unsigned int v36 = 0;
          do
          {
            uint64_t v37 = *v17;
            uint64_t v38 = (std::__shared_weak_count *)*((void *)&v51 + 1);
            long long v45 = v51;
            if (*((void *)&v51 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v39 = v17[1];
            buf[0] = 0;
            v46[0] = 0;
            if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
            ++v36;
            v17 += 2;
          }
          while (v36 < *v16);
          goto LABEL_75;
        }
      }
      else if (!v50)
      {
        goto LABEL_20;
      }
      uint64_t v10 = *(void *)(v48[0] + 24);
      __int32 v11 = *(float **)v10;
      if (!*(void *)v10) {
        break;
      }
      float v12 = *v11;
      BOOL v13 = *v11 == 1.0;
      if (!*(unsigned char *)(v10 + 10)) {
        goto LABEL_27;
      }
      if (v12 == 0.0 || v12 == 1.0) {
        goto LABEL_27;
      }
LABEL_28:
      char hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v48[0] + 24), 0x12Cu, 0);
      unsigned int v18 = 1;
      if (hasValueForKeyAtEnd) {
        goto LABEL_59;
      }
LABEL_29:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x12Cu, v18)) {
        goto LABEL_42;
      }
      if (!v11)
      {
        BOOL v21 = 0;
LABEL_39:
        unsigned int v18 = *(unsigned __int8 *)(v10 + v21 + 11);
        if (v18 != 2) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      float v20 = *v11;
      BOOL v21 = *v11 == 1.0;
      if (!*(unsigned char *)(v10 + 10)) {
        goto LABEL_39;
      }
      if (v20 == 0.0 || v20 == 1.0) {
        goto LABEL_39;
      }
LABEL_40:
      char v23 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x12Du, 0);
      unsigned int v18 = 1;
      if (v23) {
        goto LABEL_59;
      }
LABEL_41:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x12Du, v18))
      {
LABEL_42:
        unsigned int v18 = 1;
        goto LABEL_59;
      }
      if (v11)
      {
        float v24 = *v11;
        BOOL v25 = *v11 == 1.0;
        if (*(unsigned char *)(v10 + 10))
        {
          if (v24 != 0.0 && v24 != 1.0)
          {
LABEL_53:
            buf[0] = 1;
            v46[0] = 1;
            uint64_t v28 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v10, 0x96u, 0, buf);
            uint64_t v29 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v10, 0x96u, 1u, v46);
            if (v24 >= 1.0) {
              uint64_t v30 = (int *)v29;
            }
            else {
              uint64_t v30 = (int *)v28;
            }
            int v31 = *v30;
            goto LABEL_58;
          }
        }
      }
      else
      {
        BOOL v25 = 0;
      }
      unsigned int v27 = *(unsigned __int8 *)(v10 + v25 + 11);
      float v24 = 0.0;
      if (v27 == 2) {
        goto LABEL_53;
      }
      LOBYTE(v31) = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v10, 0x96u, v27, 0);
LABEL_58:
      unsigned int v18 = v31 == 1;
LABEL_59:
      std::string::size_type v16 = (unsigned int *)(v4 + 20);
      if (*(_DWORD *)(v4 + 20))
      {
        std::string::size_type v17 = (uint64_t *)(v41 + 16 * *(unsigned int *)(v4 + 16));
        if (!v18) {
          goto LABEL_68;
        }
        unsigned int v32 = 0;
        do
        {
          uint64_t v33 = *v17;
          BOOL v34 = (std::__shared_weak_count *)*((void *)&v51 + 1);
          long long v47 = v51;
          if (*((void *)&v51 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v35 = v17[1];
          buf[0] = 0;
          v46[0] = 0;
          if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
          ++v32;
          v17 += 2;
        }
        while (v32 < *v16);
      }
LABEL_75:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v48);
      int v40 = (std::__shared_weak_count *)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v4 += 56;
      if (v4 == v42) {
        return;
      }
    }
    BOOL v13 = 0;
LABEL_27:
    unsigned int v18 = *(unsigned __int8 *)(v10 + v13 + 11);
    if (v18 != 2) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
}

void sub_1A1EE0764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

unint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>>(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(result + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    __int32 v11 = *(void **)(*(void *)result + 8 * v3);
    if (v11)
    {
      float v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return result;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            float v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return result;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          float v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 32) + 16))(*(void *)(result + 32), 56, 8);
  unint64_t v15 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = v8;
  *(void *)(result + 16) = *(void *)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  *(void *)(result + 24) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)(a3 + 16);
  *(void *)(result + 48) = *(void *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  float v17 = (float)(unint64_t)(*(void *)(v5 + 40) + 1);
  float v18 = *(float *)(v5 + 48);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    if (v22 == 1)
    {
      size_t v22 = 2;
    }
    else if ((v22 & (v22 - 1)) != 0)
    {
      uint64_t result = std::__next_prime(v22);
      size_t v22 = result;
    }
    int8x8_t v23 = *(int8x8_t *)(v5 + 8);
    if (v22 > *(void *)&v23) {
      goto LABEL_36;
    }
    if (v22 < *(void *)&v23)
    {
      uint64_t result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        uint64_t result = std::__next_prime(result);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(result - 1);
        if (result >= 2) {
          uint64_t result = v25;
        }
      }
      if (v22 <= result) {
        size_t v22 = result;
      }
      if (v22 < *(void *)&v23) {
LABEL_36:
      }
        uint64_t result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v22);
    }
    unint64_t v9 = *(void *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v26 = *(unint64_t **)(*(void *)v5 + 8 * v3);
  if (v26)
  {
    *(void *)unint64_t v15 = *v26;
LABEL_60:
    *uint64_t v26 = v15;
    goto LABEL_61;
  }
  *(void *)unint64_t v15 = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = v15;
  *(void *)(*(void *)v5 + 8 * v3) = v5 + 24;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (unint64_t *)(*(void *)v5 + 8 * v27);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(v5 + 40);
  return result;
}

void sub_1A1EE0B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<gm::Matrix<float,3,1>>>::~pair(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

BOOL gss::RenderStyle<gss::PropertyID>::styleValueIsConstantForKey<float>(uint64_t a1, unsigned int a2, int *a3, unsigned int a4)
{
  BOOL result = gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*(void *)(a1 + 16 * a4 + 16), a2, a3);
  if (result)
  {
    uint64_t v9 = a1 + 16 * a4;
    if (*(_WORD *)(v9 + 56))
    {
      uint8x8_t v10 = *(uint64_t **)(v9 + 48);
      __int32 v11 = &v10[*(unsigned __int16 *)(v9 + 56)];
      do
      {
        float v12 = *(unsigned __int16 ****)(*v10 + 72);
        if (v12)
        {
          unint64_t v13 = *v12;
          unint64_t v14 = *((unsigned __int16 *)*v12 + 5);
          if (v14)
          {
            unint64_t v15 = *v13;
            if (*((unsigned char *)v13 + 15))
            {
              if (v14 >= 0x1E)
              {
                unint64_t v20 = *v13;
                unint64_t v21 = v14;
                do
                {
                  unint64_t v22 = v21 >> 1;
                  int8x8_t v23 = &v20[v21 >> 1];
                  unsigned int v25 = *v23;
                  uint8x8_t v24 = v23 + 1;
                  v21 += ~(v21 >> 1);
                  if (v25 < a2) {
                    unint64_t v20 = v24;
                  }
                  else {
                    unint64_t v21 = v22;
                  }
                }
                while (v21);
                if (v20 == &v15[v14]
                  || *v20 != a2
                  || v14 == (unsigned __int16)((unint64_t)((char *)v20 - (char *)v15) >> 1))
                {
                  goto LABEL_4;
                }
              }
              else
              {
                uint64_t v16 = 0;
                while (1)
                {
                  unsigned int v17 = v15[v16];
                  if (v17 >= a2) {
                    break;
                  }
                  if (v14 == ++v16) {
                    goto LABEL_4;
                  }
                }
                if (v17 == a2) {
                  unsigned __int16 v26 = v16;
                }
                else {
                  unsigned __int16 v26 = v14;
                }
                if (v14 == v26) {
                  goto LABEL_4;
                }
              }
            }
            else
            {
              uint64_t v18 = 2 * v14;
              BOOL v19 = *v13;
              while (*v19 != a2)
              {
                ++v19;
                v18 -= 2;
                if (!v18)
                {
                  BOOL v19 = &v15[v14];
                  break;
                }
              }
              if (v14 == (unsigned __int16)((unint64_t)((char *)v19 - (char *)v15) >> 1)) {
                goto LABEL_4;
              }
            }
            BOOL result = gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(*v10, a2, a3);
            if (!result) {
              return result;
            }
          }
        }
LABEL_4:
        ++v10;
      }
      while (v10 != v11);
    }
    return 1;
  }
  return result;
}

BOOL gss::CartoStyle<gss::PropertyID>::valueIsConstantForKey<float>(uint64_t a1, unsigned int a2, int *a3)
{
  *a3 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0, 0);
  return *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 1u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 2u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 3u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 4u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 5u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 6u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 7u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 8u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 9u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xAu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xBu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xCu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xDu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xEu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0xFu, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x10u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x11u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x12u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x13u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x14u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x15u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x16u, 0) == *(float *)a3
      && *(float *)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(a1 + 72), a2, 0x17u, 0) == *(float *)a3;
}

void anonymous namespace'::addPatternedRibbonTo(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  {
    operator new();
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 120, 8);
  uint64_t v15 = v14;
  *(_OWORD *)(v14 + 49) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(void *)(v14 + 56) = a4;
  *(void *)uint64_t v14 = &unk_1EF553D90;
  *(void *)(v14 + 80) = 0;
  *(void *)(v14 + 88) = 0;
  *(void *)(v14 + 72) = 0;
  if (a4)
  {
    *(void *)(v14 + 88) = a4;
    {
      operator new();
    }
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 12 * a4, 8);
    *(void *)(v15 + 72) = v16;
    *(unsigned char *)(v15 + 64) = 1;
    unint64_t v17 = *(void *)(v15 + 88);
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
  }
  *(void *)uint64_t v15 = &unk_1EF5351A8;
  *(_WORD *)(v15 + 96) = 0;
  uint64_t v41 = (void (***)(void))v15;
  if (v17)
  {
    if (v17 < 8 || v16 < a5 + 8 * v17 && v16 + 12 * v17 > a5)
    {
      unint64_t v18 = 0;
LABEL_11:
      unint64_t v19 = v17 - v18;
      unint64_t v20 = (_DWORD *)(v16 + 12 * v18 + 8);
      unint64_t v21 = (uint64_t *)(a5 + 8 * v18);
      do
      {
        uint64_t v22 = *v21++;
        *((void *)v20 - 1) = v22;
        _DWORD *v20 = 0;
        v20 += 3;
        --v19;
      }
      while (v19);
      goto LABEL_13;
    }
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v32 = (const float *)(a5 + 32);
    long long v33 = 0uLL;
    BOOL v34 = (float *)v16;
    unint64_t v35 = v17 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      unsigned int v36 = v32 - 8;
      float32x4x2_t v42 = vld2q_f32(v36);
      *(float32x4x2_t *)v43.val[0].f32 = vld2q_f32(v32);
      v43.val[2] = 0uLL;
      uint64_t v37 = v34 + 24;
      vst3q_f32(v34, *(float32x4x3_t *)(&v33 - 2));
      uint64_t v38 = v34 + 12;
      vst3q_f32(v38, v43);
      v32 += 16;
      BOOL v34 = v37;
      v35 -= 8;
    }
    while (v35);
    if (v17 != v18) {
      goto LABEL_11;
    }
  }
LABEL_13:
  int v23 = *a6;
  *(unsigned char *)(v15 + 96) = v23;
  if (v23)
  {
    *(_DWORD *)(v15 + 100) = *((_DWORD *)a6 + 1);
    *(_DWORD *)(v15 + 104) = *((_DWORD *)a6 + 2);
  }
  int v24 = *a7;
  *(unsigned char *)(v15 + 97) = v24;
  if (v24)
  {
    *(_DWORD *)(v15 + 108) = *((_DWORD *)a7 + 1);
    *(_DWORD *)(v15 + 112) = *((_DWORD *)a7 + 2);
  }
  uint64_t v25 = *a2;
  unsigned __int16 v26 = (std::__shared_weak_count *)a2[1];
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v39[0] = v25;
  v39[1] = v26;
  unsigned int v40 = a3;
  unint64_t v27 = std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PatternedBatchKey,std::piecewise_construct_t const&,std::tuple<md::PatternedBatchKey const&>,std::tuple<>>(a1, v25, a3, (uint64_t)v39);
  uint64_t v28 = v27;
  uint64_t v29 = (uint64_t *)v27[6];
  if ((unint64_t)v29 >= v27[7])
  {
    uint64_t v30 = std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>((uint64_t)(v27 + 5), (uint64_t *)&v41);
  }
  else
  {
    if (v29)
    {
      uint64_t v41 = 0;
      *uint64_t v29 = v15;
    }
    uint64_t v30 = v29 + 1;
  }
  v28[6] = v30;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  int v31 = v41;
  uint64_t v41 = 0;
  if (v31)
  {
    (**v31)(v31);
    {
        operator new();
    }
    (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v31, 120);
  }
}

void sub_1A1EE1560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (***a12)(void))
{
}

void anonymous namespace'::addRoadRibbonTo(uint64_t *a1, uint64_t *a2, int a3, unint64_t a4, unint64_t a5, char a6, char a7, char a8, unsigned __int8 *a9, unsigned __int8 *a10)
{
  unint64_t v18 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unint64_t v18 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v45) {
      operator new();
    }
  }
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v18 + 91) + 16))(*((void *)v18 + 91), 120, 8);
  uint64_t v20 = v19;
  *(_OWORD *)(v19 + 49) = 0u;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(void *)(v19 + 56) = a4;
  *(void *)uint64_t v19 = &unk_1EF553D90;
  *(void *)(v19 + 80) = 0;
  *(void *)(v19 + 88) = 0;
  *(void *)(v19 + 72) = 0;
  if (a4)
  {
    *(void *)(v19 + 88) = a4;
    {
      operator new();
    }
    unint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 12 * a4, 8);
    *(void *)(v20 + 72) = v21;
    *(unsigned char *)(v20 + 64) = 1;
  }
  else
  {
    unint64_t v21 = 0;
  }
  *(void *)uint64_t v20 = &unk_1EF530410;
  *(_WORD *)(v20 + 98) = 0;
  uint64_t v49 = (void (***)(void))v20;
  *(unsigned char *)(v20 + 96) = a6;
  *(unsigned char *)(v20 + 97) = a7;
  *(void *)(v20 + 88) = a4;
  if (a4)
  {
    if (a4 <= 0x1B) {
      goto LABEL_8;
    }
    int v23 = 0;
    unint64_t v22 = 0;
    BOOL v36 = !is_mul_ok(a4 - 1, 0xCuLL);
    uint64_t v37 = 12 * (a4 - 1);
    if (v21 + v37 < v21
      || v21 + 8 + v37 < v21 + 8
      || a4 == 0x100000000
      || (a4 - 1) >> 32
      || v21 + 4 + v37 < v21 + 4
      || v36)
    {
      goto LABEL_9;
    }
    if (v21 < a5 + 8 * a4 && v21 + 12 * a4 > a5)
    {
LABEL_8:
      unint64_t v22 = 0;
      int v23 = 0;
    }
    else
    {
      unint64_t v22 = a4 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v38 = (const float *)(a5 + 32);
      long long v39 = 0uLL;
      unsigned int v40 = (float *)v21;
      unint64_t v41 = a4 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4x2_t v42 = v38 - 8;
        float32x4x2_t v50 = vld2q_f32(v42);
        *(float32x4x2_t *)v51.val[0].f32 = vld2q_f32(v38);
        v51.val[2] = 0uLL;
        float32x4x3_t v43 = v40 + 24;
        vst3q_f32(v40, *(float32x4x3_t *)(&v39 - 2));
        BOOL v44 = v40 + 12;
        vst3q_f32(v44, v51);
        v38 += 16;
        unsigned int v40 = v43;
        v41 -= 8;
      }
      while (v41);
      int v23 = a4 & 0xFFFFFFF8;
      if (v22 == a4) {
        goto LABEL_11;
      }
    }
LABEL_9:
    unsigned int v24 = v23 + 1;
    do
    {
      uint64_t v25 = *(void *)(a5 + 8 * v22);
      unint64_t v26 = v21 + 12 * v22;
      *(void *)unint64_t v26 = v25;
      *(_DWORD *)(v26 + 8) = 0;
      unint64_t v22 = v24++;
    }
    while (v22 < a4);
  }
LABEL_11:
  int v27 = *a9;
  *(unsigned char *)(v20 + 98) = v27;
  if (v27)
  {
    *(_DWORD *)(v20 + 100) = *((_DWORD *)a9 + 1);
    *(_DWORD *)(v20 + 104) = *((_DWORD *)a9 + 2);
  }
  int v28 = *a10;
  *(unsigned char *)(v20 + 99) = v28;
  if (v28)
  {
    *(_DWORD *)(v20 + 108) = *((_DWORD *)a10 + 1);
    *(_DWORD *)(v20 + 112) = *((_DWORD *)a10 + 2);
  }
  uint64_t v29 = *a2;
  uint64_t v30 = (std::__shared_weak_count *)a2[1];
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v46[0] = v29;
  v46[1] = (uint64_t)v30;
  int v47 = a3;
  char v48 = a8;
  int v31 = std::__hash_table<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::hash<md::RoadBatchKey>,std::equal_to<md::RoadBatchKey>,true>,std::__unordered_map_equal<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::equal_to<md::RoadBatchKey>,std::hash<md::RoadBatchKey>,true>,std::allocator<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RoadBatchKey,std::piecewise_construct_t const&,std::tuple<md::RoadBatchKey const&>,std::tuple<>>(a1, v46, (uint64_t)v46);
  unsigned int v32 = v31;
  long long v33 = (uint64_t *)v31[6];
  if ((unint64_t)v33 >= v31[7])
  {
    BOOL v34 = std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>>((uint64_t)(v31 + 5), (uint64_t *)&v49);
  }
  else
  {
    if (v33)
    {
      uint64_t v49 = 0;
      *long long v33 = v20;
    }
    BOOL v34 = v33 + 1;
  }
  v32[6] = (uint64_t)v34;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  unint64_t v35 = v49;
  uint64_t v49 = 0;
  if (v35)
  {
    (**v35)(v35);
    {
        operator new();
    }
    (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v35, 120);
  }
}

void sub_1A1EE1A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (***a12)(void))
{
}

void *___ZNK2md19RoadLayerDataSource17buildRoadTileDataERKN3gdc19LayerDataRequestKeyEPN3ggl6LoaderERKN3geo8QuadTileERKNSt3__16vectorINSC_10shared_ptrINS_21GEOVectorTileResourceEEENSC_9allocatorISG_EEEERKNSC_13unordered_setINS_21RoadFeatureAndSectionENSC_4hashISN_EENSC_8equal_toISN_EENSH_ISN_EEEEONSC_10unique_ptrINS_19DaVinciTrafficLayerENSC_14default_deleteISX_EEEEONSW_INS_17CasedTrafficLayerENSY_IS12_EEEERKN3gss19FeatureAttributeSetENSE_INS5_17ConstantDataTypedINS5_4Tile4ViewEEEEENSE_INS1A_INS1B_9TransformEEEEERKNSE_INS_27TrafficSkeletonTileResourceEEERKNSD_INSE_INS_26TrafficDynamicTileResourceEEENSH_IS1N_EEEEONSD_INS1_8Resource12LoadMetadataENSH_IS1T_EEEE_block_invoke(void *result)
{
  if (*(void *)(*(void *)(result[4] + 8) + 72)) {
    operator new();
  }
  if (*(void *)(*(void *)(result[6] + 8) + 72)) {
    operator new();
  }
  if (*(void *)(*(void *)(result[8] + 8) + 72)) {
    operator new();
  }
  if (*(void *)(*(void *)(result[10] + 8) + 72)) {
    operator new();
  }
  return result;
}

void sub_1A1EE1D2C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A1C40520EE663);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  while (v2)
  {
    unint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = (void *)v3[4];
    if (v4)
    {
      v3[5] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v3[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 56);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::RoadTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RoadTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RoadTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void __destroy_helper_block_ea8_96c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE112c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v3) {
      return;
    }
  }
  else
  {
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_ea8_96c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE112c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[13];
  result[12] = a2[12];
  result[13] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[15];
  result[14] = a2[14];
  result[15] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void (****std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(void)))(void)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v5) {
        operator new();
      }
    }
    (*(void (**)(void, void (***)(void), uint64_t))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), v2, 120);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<md::PatternedBatchKey const,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PatternedBatchKey,std::piecewise_construct_t const&,std::tuple<md::PatternedBatchKey const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  __int32 v11 = *(unsigned int **)(a2 + 240);
  uint8x8_t v10 = *(unsigned int **)(a2 + 248);
  for (unint64_t i = ((char *)v10 - (char *)v11) >> 3; v11 != v10; v11 += 2)
  {
    unint64_t v13 = ((i << 6) - 0x61C8864680B583EBLL + (i >> 2) + *v11) ^ i;
    unint64_t i = (*((unsigned __int16 *)v11 + 2) - 0x61C8864680B583EBLL + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  unsigned int v14 = *(unsigned __int16 *)(a2 + 282);
  if (*(_WORD *)(a2 + 282))
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    unsigned int v17 = 0;
    uint64_t v18 = *(void *)(a2 + 272);
    do
    {
      if (v17 < v14)
      {
        unint64_t v16 = (unsigned int *)(v18 + 4 * v17);
        uint64_t v4 = (unsigned __int16 *)(v18 + *(unsigned __int16 *)(a2 + 280) + 2 * v17);
      }
      v15 ^= (*v4
            - 0x61C8864680B583EBLL
            + ((((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15) << 6)
            + ((((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15) >> 2)) ^ ((v15 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v15 >> 2)
                                                                                       + *v16);
      unsigned int v19 = v17 + 1;
      if (v17 + 1 < v14) {
        ++v17;
      }
      else {
        unsigned int v17 = *(unsigned __int16 *)(a2 + 282);
      }
    }
    while (v19 < v14);
  }
  else
  {
    unint64_t v15 = 0;
  }
  unint64_t v20 = v15 ^ i ^ a3;
  unint64_t v21 = a1[1];
  if (v21)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v5 = v15 ^ i ^ a3;
      if (v20 >= v21) {
        unint64_t v5 = v20 % v21;
      }
    }
    else
    {
      unint64_t v5 = (v21 - 1) & v20;
    }
    int v23 = *(void **)(*a1 + 8 * v5);
    if (v23)
    {
      unsigned int v24 = (void *)*v23;
      if (*v23)
      {
        if (v22.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v26 = v24[1];
            if (v26 == v20)
            {
              if (md::PatternedBatchKey::operator==((_DWORD *)v24 + 4, a2, a3)) {
                return v24;
              }
            }
            else if ((v26 & (v21 - 1)) != v5)
            {
              goto LABEL_34;
            }
            unsigned int v24 = (void *)*v24;
            if (!v24) {
              goto LABEL_34;
            }
          }
        }
        do
        {
          unint64_t v25 = v24[1];
          if (v25 == v20)
          {
            if (md::PatternedBatchKey::operator==((_DWORD *)v24 + 4, a2, a3)) {
              return v24;
            }
          }
          else
          {
            if (v25 >= v21) {
              v25 %= v21;
            }
            if (v25 != v5) {
              break;
            }
          }
          unsigned int v24 = (void *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_34:
  int v27 = a1 + 2;
  int v28 = operator new(0x48uLL);
  unsigned int v24 = v28;
  *int v28 = 0;
  v28[1] = v20;
  uint64_t v29 = *(void *)(a4 + 8);
  v28[2] = *(void *)a4;
  void v28[3] = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v28 + 8) = *(_DWORD *)(a4 + 16);
  v28[6] = 0;
  v28[7] = 0;
  v28[5] = 0;
  {
    operator new();
  }
  v24[8] = mdm::Allocator::instance(void)::alloc;
  float v30 = (float)(unint64_t)(a1[3] + 1);
  float v31 = *((float *)a1 + 8);
  if (!v21 || (float)(v31 * (float)v21) < v30)
  {
    BOOL v32 = 1;
    if (v21 >= 3) {
      BOOL v32 = (v21 & (v21 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v21);
    unint64_t v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v21 = a1[1];
    if (prime <= v21)
    {
      if (prime >= v21) {
        goto LABEL_74;
      }
      unint64_t v46 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v21 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (prime <= v46) {
        size_t prime = v46;
      }
      if (prime >= v21)
      {
        unint64_t v21 = a1[1];
LABEL_74:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21) {
            unint64_t v5 = v20 % v21;
          }
          else {
            unint64_t v5 = v20;
          }
        }
        else
        {
          unint64_t v5 = (v21 - 1) & v20;
        }
        goto LABEL_87;
      }
      if (!prime)
      {
        v56 = (void *)*a1;
        *a1 = 0;
        if (v56) {
          operator delete(v56);
        }
        unint64_t v21 = 0;
        a1[1] = 0;
        goto LABEL_74;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v36 = operator new(8 * prime);
    uint64_t v37 = (void *)*a1;
    *a1 = (uint64_t)v36;
    if (v37) {
      operator delete(v37);
    }
    uint64_t v38 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v38++) = 0;
    while (prime != v38);
    long long v39 = (void *)*v27;
    if (!*v27)
    {
LABEL_73:
      unint64_t v21 = prime;
      goto LABEL_74;
    }
    size_t v40 = v39[1];
    size_t v41 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v42 = v40 & v41;
      *(void *)(*a1 + 8 * v42) = v27;
      for (unint64_t j = (void *)*v39; *v39; unint64_t j = (void *)*v39)
      {
        size_t v44 = j[1] & v41;
        if (v44 == v42)
        {
          long long v39 = j;
        }
        else if (*(void *)(*a1 + 8 * v44))
        {
          *long long v39 = *j;
          uint64_t v45 = 8 * v44;
          *unint64_t j = **(void **)(*a1 + v45);
          **(void **)(*a1 + v45) = j;
        }
        else
        {
          *(void *)(*a1 + 8 * v44) = v39;
          long long v39 = j;
          size_t v42 = v44;
        }
      }
      goto LABEL_73;
    }
    if (v40 >= prime) {
      v40 %= prime;
    }
    *(void *)(*a1 + 8 * v40) = v27;
    uint64_t v49 = (void *)*v39;
    if (!*v39) {
      goto LABEL_73;
    }
    while (1)
    {
      size_t v51 = v49[1];
      if (v51 >= prime) {
        v51 %= prime;
      }
      if (v51 != v40)
      {
        if (!*(void *)(*a1 + 8 * v51))
        {
          *(void *)(*a1 + 8 * v51) = v39;
          goto LABEL_78;
        }
        *long long v39 = *v49;
        uint64_t v50 = 8 * v51;
        *uint64_t v49 = **(void **)(*a1 + v50);
        **(void **)(*a1 + v50) = v49;
        uint64_t v49 = v39;
      }
      size_t v51 = v40;
LABEL_78:
      long long v39 = v49;
      uint64_t v49 = (void *)*v49;
      size_t v40 = v51;
      if (!v49) {
        goto LABEL_73;
      }
    }
  }
LABEL_87:
  uint64_t v52 = *a1;
  int v53 = *(void **)(*a1 + 8 * v5);
  if (v53)
  {
    *unsigned int v24 = *v53;
LABEL_95:
    void *v53 = v24;
    goto LABEL_96;
  }
  *unsigned int v24 = *v27;
  *int v27 = v24;
  *(void *)(v52 + 8 * v5) = v27;
  if (*v24)
  {
    unint64_t v54 = *(void *)(*v24 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v54 >= v21) {
        v54 %= v21;
      }
    }
    else
    {
      v54 &= v21 - 1;
    }
    int v53 = (void *)(*a1 + 8 * v54);
    goto LABEL_95;
  }
LABEL_96:
  ++a1[3];
  return v24;
}

void sub_1A1EE2850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::PatternedRibbon::~PatternedRibbon(md::PatternedRibbon *this)
{
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  float *v2;
  int v3;

  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      int v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    (*(void (**)(void, void *, uint64_t))(***(void ***)(a1 + 8) + 40))(**(void **)(a1 + 8), v2, 56);
  }
  return a1;
}

__n128 __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v2 = *(_OWORD *)(a2 + 144);
  long long v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  __n128 result = *(__n128 *)(a2 + 224);
  long long v5 = *(_OWORD *)(a2 + 240);
  long long v6 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v5;
  *(_OWORD *)(a1 + 256) = v6;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__16_2806(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *long long v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__17_2807(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__18(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *long long v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__20(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *long long v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__22(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *long long v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke(uint64_t a1, std::__shared_weak_count **this, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, int a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, char a15, uint64_t a16, char a17)
{
  int v24 = (int)a3;
  unint64_t v77 = 0;
  uint64_t v26 = geo::codec::multiSectionFeatureCharacteristicPoints(this, (GeoCodecsRoadFeature *)&v77, a3);
  int v27 = v26;
  if (!v77)
  {
    unsigned int v30 = 0;
    unint64_t v28 = 0;
LABEL_7:
    if (v28 != v77) {
      goto LABEL_10;
    }
LABEL_8:
    unsigned int v31 = 0;
    unsigned int v30 = 0;
    goto LABEL_13;
  }
  unint64_t v28 = 0;
  unsigned int v29 = 0;
  while (*((_DWORD *)v26 + 25 * v28 + 2) != a4)
  {
    unint64_t v28 = v29 + 1;
    unsigned int v29 = v28;
    unsigned int v30 = v28;
    if (v77 <= v28) {
      goto LABEL_7;
    }
  }
  unsigned int v30 = v29;
  if (v28 == v77) {
    goto LABEL_8;
  }
LABEL_10:
  unsigned int v32 = v30 + 1;
  do
  {
    unsigned int v31 = v32;
    if (v77 <= v32) {
      break;
    }
    int v33 = *((_DWORD *)v26 + 25 * v32++ + 2);
  }
  while (v33 == a4);
LABEL_13:
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  unsigned __int8 v75 = 0;
  v76 = 0;
  if (*(_DWORD *)(a1 + 128) != 4)
  {
LABEL_24:
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3321888768;
    v48[2] = ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_2;
    uint64_t v48[3] = &unk_1EF58DEB8;
    char v63 = a17;
    v48[4] = *(void *)(a1 + 32);
    size_t v51 = this;
    uint64_t v52 = a7;
    char v64 = a8;
    int v57 = a5;
    int v58 = a6;
    int v59 = a4;
    float v60 = a9;
    char v65 = a15;
    int v53 = v35;
    unint64_t v54 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v42 = *(_DWORD *)(a1 + 128);
    uint64_t v43 = *(void *)(a1 + 120);
    long long v49 = *(_OWORD *)(a1 + 40);
    long long v50 = *(_OWORD *)(a1 + 56);
    int v61 = v42;
    int v62 = v24;
    uint64_t v55 = v43;
    uint64_t v56 = a16;
    md::splitRoadSectionByZ(a11, a14, (uint64_t)v27 + 100 * v30, v31 - v30, v48, a9, a10);
    size_t v44 = v54;
    if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    goto LABEL_31;
  }
  int v46 = a5;
  int v36 = a8;
  int v37 = a6;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)(*(void *)a7 + 240), (unsigned int **)(a1 + 72), &v71);
  int v38 = v24;
  uint64_t v39 = *(void *)(a1 + 104);
  memset(v66, 0, sizeof(v66));
  char v67 = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v69, v39, (gss::FeatureAttributeSet *)&v71, (gss::QueryOverrides *)v66);
  size_t v40 = v69;
  size_t v41 = v70;
  unsigned __int8 v75 = v69;
  v76 = v70;
  if (v70) {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v66, (uint64_t)v40, (uint64_t)v41);
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  int v24 = v38;
  a6 = v37;
  a8 = v36;
  a5 = v46;
  if (v68 && md::trafficVisibleAtSpeed((uint64_t)v66, a8, v68))
  {
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v66);
    if (v71)
    {
      uint64_t v72 = v71;
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v74 + 40))(v74, v71, v73 - (void)v71);
    }
    unint64_t v35 = v75;
    unint64_t v34 = v76;
    goto LABEL_24;
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v66);
  if (v71)
  {
    uint64_t v72 = v71;
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v74 + 40))(v74, v71, v73 - (void)v71);
  }
LABEL_31:
  uint64_t v45 = v76;
  if (v76)
  {
    if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1A1EE3394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a30);
  uint64_t v32 = *(void *)(v30 - 160);
  if (v32)
  {
    *(void *)(v30 - 152) = v32;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v30 - 136) + 40))(*(void *)(v30 - 136), v32, *(void *)(v30 - 144) - v32);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v30 - 128);
  _Unwind_Resume(a1);
}

void ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_26()
{
}

void sub_1A1EE3534(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10E1C40B1729FB1);
  _Unwind_Resume(a1);
}

void md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  if (!a3)
  {
    int v74 = a6[24];
    if (a6[24])
    {
      char v6 = a6[1];
      char v75 = *a6;
      uint64_t v8 = *(void *)(a6 + 4);
    }
    else
    {
      char v75 = 0;
    }
    *(void *)a1 = &unk_1EF553B90;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    if (v74)
    {
      *(unsigned char *)(a1 + 80) = v75;
      *(unsigned char *)(a1 + 81) = v6;
      *(void *)(a1 + 84) = v8;
      *(unsigned char *)(a1 + 104) = 1;
    }
    v76 = operator new(0xF8uLL);
    v76[1] = 0;
    v76[2] = 0;
    void *v76 = &unk_1EF584690;
    ggl::BufferData::BufferData((uint64_t)(v76 + 3), 20, 0, 0, 1, 0);
    v76[29] = "BatchType/VData";
    v76[30] = &ggl::TrafficBase::defaultVboReflection;
    v76[3] = &unk_1EF55C248;
    v76[28] = &unk_1EF55C268;
    unint64_t v77 = operator new(0xF8uLL);
    v77[1] = 0;
    v77[2] = 0;
    *unint64_t v77 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v77 + 3), 2, 1, 0, 1, 0);
    *((_DWORD *)v77 + 60) = 0;
    v77[3] = &unk_1EF55B630;
    v77[4] = 2;
    v77[28] = &unk_1EF55B650;
    v77[29] = "BatchType/IData";
    uint64_t v83 = (char *)(v77 + 3);
    int v84 = (long long *)v77;
    operator new();
  }
  unint64_t v79 = 0;
  long long __p = 0;
  {
    operator new();
  }
  long long v80 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  long long v81 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v82) = 1065353216;
  uint8x8_t v10 = *(uint64_t **)(a3 + 48);
  __int32 v11 = *(uint64_t **)(a3 + 56);
  while (1)
  {
    if (v10 == v11) {
      operator new();
    }
    unsigned int v13 = ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(*v10 + 88), *(float **)(*v10 + 72), 0);
    unsigned int v14 = v13;
    unint64_t v15 = v13;
    int8x8_t v16 = (int8x8_t)v79;
    if (v79)
    {
      uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        unint64_t v7 = v13;
        if (v79 <= v13) {
          unint64_t v7 = v13 % v79;
        }
      }
      else
      {
        unint64_t v7 = (v79 - 1) & v13;
      }
      uint64_t v18 = (uint64_t *)*((void *)__p + v7);
      if (v18)
      {
        uint64_t v19 = *v18;
        if (*v18)
        {
          if (v17.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v21 = *(void *)(v19 + 8);
              if (v21 == v13)
              {
                if (*(_DWORD *)(v19 + 16) == v13) {
                  goto LABEL_88;
                }
              }
              else if ((v21 & (v79 - 1)) != v7)
              {
                goto LABEL_28;
              }
              uint64_t v19 = *(void *)v19;
              if (!v19) {
                goto LABEL_28;
              }
            }
          }
          do
          {
            unint64_t v20 = *(void *)(v19 + 8);
            if (v20 == v13)
            {
              if (*(_DWORD *)(v19 + 16) == v13) {
                goto LABEL_88;
              }
            }
            else
            {
              if (v20 >= v79) {
                v20 %= v79;
              }
              if (v20 != v7) {
                break;
              }
            }
            uint64_t v19 = *(void *)v19;
          }
          while (v19);
        }
      }
    }
LABEL_28:
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, 56, 8);
    int v84 = &v81;
    *(void *)uint64_t v19 = 0;
    *(void *)(v19 + 8) = v15;
    *(_DWORD *)(v19 + 16) = v14;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    *(void *)(v19 + 24) = 0;
    {
      operator new();
    }
    *(void *)(v19 + 48) = mdm::Allocator::instance(void)::alloc;
    LOBYTE(v85) = 1;
    float v22 = (float)(unint64_t)(*((void *)&v81 + 1) + 1);
    if (!v79 || (float)(*(float *)&v82 * (float)v79) < v22) {
      break;
    }
LABEL_78:
    uint64_t v43 = (uint64_t *)*((void *)__p + v7);
    if (v43)
    {
      *(void *)uint64_t v19 = *v43;
LABEL_86:
      *uint64_t v43 = v19;
      goto LABEL_87;
    }
    *(void *)uint64_t v19 = *((void *)&v80 + 1);
    *((void *)&v80 + 1) = v19;
    *((void *)__p + v7) = (char *)&v80 + 8;
    if (*(void *)v19)
    {
      unint64_t v44 = *(void *)(*(void *)v19 + 8);
      if ((*(void *)&v16 & (*(void *)&v16 - 1)) != 0)
      {
        if (v44 >= *(void *)&v16) {
          v44 %= *(void *)&v16;
        }
      }
      else
      {
        v44 &= *(void *)&v16 - 1;
      }
      uint64_t v43 = (uint64_t *)((char *)__p + 8 * v44);
      goto LABEL_86;
    }
LABEL_87:
    ++*((void *)&v81 + 1);
LABEL_88:
    uint64_t v45 = *(void **)(v19 + 32);
    unint64_t v46 = *(void *)(v19 + 40);
    if ((unint64_t)v45 < v46)
    {
      if (v45)
      {
        uint64_t v47 = *v10;
        uint64_t *v10 = 0;
        *uint64_t v45 = v47;
      }
      float v12 = v45 + 1;
      goto LABEL_6;
    }
    uint64_t v48 = *(void *)(v19 + 24);
    uint64_t v49 = ((uint64_t)v45 - v48) >> 3;
    unint64_t v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 61) {
      abort();
    }
    uint64_t v51 = v46 - v48;
    if (v51 >> 2 > v50) {
      unint64_t v50 = v51 >> 2;
    }
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v50;
    }
    if (v52)
    {
      uint64_t v53 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v19 + 48) + 16))(*(void *)(v19 + 48), 8 * v52, 8);
      unint64_t v54 = (void *)(v53 + 8 * v49);
      uint64_t v55 = v53 + 8 * v52;
      if (v53)
      {
        uint64_t v56 = *v10;
        uint64_t *v10 = 0;
        *unint64_t v54 = v56;
      }
    }
    else
    {
      uint64_t v55 = 0;
      unint64_t v54 = (void *)(8 * v49);
    }
    float v12 = v54 + 1;
    int v57 = *(void **)(v19 + 24);
    unint64_t v7 = *(void *)(v19 + 32);
    if ((void *)v7 == v57)
    {
      *(void *)(v19 + 24) = v54;
      *(void *)(v19 + 32) = v12;
      uint64_t v63 = *(void *)(v19 + 40);
      *(void *)(v19 + 40) = v55;
      goto LABEL_115;
    }
    unint64_t v58 = v7 - (void)v57 - 8;
    if (v58 <= 0x47
      || (unint64_t v59 = v58 >> 3, v7 - 8 * v59 - 8 < (unint64_t)v54) && (unint64_t)&v54[-v59 - 1] < v7)
    {
      float v60 = *(void **)(v19 + 32);
      do
      {
LABEL_106:
        uint64_t v61 = *--v60;
        void *v60 = 0;
        *--unint64_t v54 = v61;
      }
      while (v60 != v57);
      goto LABEL_107;
    }
    unint64_t v66 = v59 + 1;
    uint64_t v67 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    float v60 = (void *)(v7 - 8 * v67);
    char v68 = v54 - 2;
    v69 = (long long *)(v7 - 32);
    uint64_t v70 = v67;
    do
    {
      long long v72 = *v69;
      long long v71 = v69[1];
      long long *v69 = 0uLL;
      v69[1] = 0uLL;
      v69 -= 2;
      *(v68 - 1) = v72;
      *char v68 = v71;
      v68 -= 2;
      v70 -= 4;
    }
    while (v70);
    v54 -= v67;
    if (v66 != v67) {
      goto LABEL_106;
    }
LABEL_107:
    unint64_t v7 = *(void *)(v19 + 24);
    int v62 = *(void **)(v19 + 32);
    *(void *)(v19 + 24) = v54;
    *(void *)(v19 + 32) = v12;
    uint64_t v63 = *(void *)(v19 + 40);
    *(void *)(v19 + 40) = v55;
    while (v62 != (void *)v7)
    {
      char v65 = (void (***)(void))*--v62;
      char v64 = v65;
      void *v62 = 0;
      if (v65)
      {
        (**v64)(v64);
        {
          operator new();
        }
        (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v64, 104);
      }
    }
LABEL_115:
    if (v7) {
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v19 + 48) + 40))(*(void *)(v19 + 48), v7, v63 - v7);
    }
LABEL_6:
    *(void *)(v19 + 32) = v12;
    ++v10;
  }
  BOOL v23 = (v79 & (v79 - 1)) != 0;
  if (v79 < 3) {
    BOOL v23 = 1;
  }
  unint64_t v24 = v23 | (2 * v79);
  unint64_t v25 = vcvtps_u32_f32(v22 / *(float *)&v82);
  if (v24 <= v25) {
    int8x8_t prime = (int8x8_t)v25;
  }
  else {
    int8x8_t prime = (int8x8_t)v24;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
  }
  int8x8_t v16 = (int8x8_t)v79;
  if (*(void *)&prime <= v79)
  {
    if (*(void *)&prime >= v79) {
      goto LABEL_65;
    }
    unint64_t v37 = vcvtps_u32_f32((float)*((unint64_t *)&v81 + 1) / *(float *)&v82);
    if (v79 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v79), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
    {
      unint64_t v37 = std::__next_prime(v37);
    }
    else
    {
      uint64_t v39 = 1 << -(char)__clz(v37 - 1);
      if (v37 >= 2) {
        unint64_t v37 = v39;
      }
    }
    if (*(void *)&prime <= v37) {
      int8x8_t prime = (int8x8_t)v37;
    }
    if (*(void *)&prime >= v79)
    {
      int8x8_t v16 = (int8x8_t)v79;
LABEL_65:
      if ((*(void *)&v16 & (*(void *)&v16 - 1)) != 0)
      {
        if (*(void *)&v16 <= v15) {
          unint64_t v7 = v15 % *(void *)&v16;
        }
        else {
          unint64_t v7 = v15;
        }
      }
      else
      {
        unint64_t v7 = (v16.i32[0] - 1) & v15;
      }
      goto LABEL_78;
    }
    if (!*(void *)&prime)
    {
      uint64_t v73 = __p;
      long long __p = 0;
      if (v73) {
        (*(void (**)(void, void *, unint64_t))(*(void *)v80 + 40))(v80, v73, 8 * v79);
      }
      int8x8_t v16 = 0;
      unint64_t v79 = 0;
      goto LABEL_65;
    }
  }
  int v27 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v80 + 16))(v80, 8 * *(void *)&prime, 8);
  unint64_t v28 = __p;
  long long __p = v27;
  if (v28) {
    (*(void (**)(void, void *, unint64_t))(*(void *)v80 + 40))(v80, v28, 8 * v79);
  }
  uint64_t v29 = 0;
  unint64_t v79 = (unint64_t)prime;
  do
    *((void *)__p + v29++) = 0;
  while (*(void *)&prime != v29);
  uint64_t v30 = (void **)*((void *)&v80 + 1);
  if (!*((void *)&v80 + 1))
  {
LABEL_64:
    int8x8_t v16 = prime;
    goto LABEL_65;
  }
  unint64_t v31 = *(void *)(*((void *)&v80 + 1) + 8);
  uint64_t v32 = *(void *)&prime - 1;
  if ((*(void *)&prime & (*(void *)&prime - 1)) == 0)
  {
    uint64_t v33 = v31 & v32;
    *((void *)__p + v33) = (char *)&v80 + 8;
    for (unint64_t i = *v30; *v30; unint64_t i = *v30)
    {
      uint64_t v35 = i[1] & v32;
      if (v35 == v33)
      {
        uint64_t v30 = (void **)i;
      }
      else if (*((void *)__p + v35))
      {
        *uint64_t v30 = (void *)*i;
        uint64_t v36 = 8 * v35;
        *unint64_t i = **(void **)((char *)__p + v36);
        **(void **)((char *)__p + v36) = i;
      }
      else
      {
        *((void *)__p + v35) = v30;
        uint64_t v30 = (void **)i;
        uint64_t v33 = v35;
      }
    }
    goto LABEL_64;
  }
  if (v31 >= *(void *)&prime) {
    v31 %= *(void *)&prime;
  }
  *((void *)__p + v31) = (char *)&v80 + 8;
  size_t v40 = *v30;
  if (!*v30) {
    goto LABEL_64;
  }
  while (1)
  {
    unint64_t v42 = v40[1];
    if (v42 >= *(void *)&prime) {
      v42 %= *(void *)&prime;
    }
    if (v42 != v31)
    {
      if (!*((void *)__p + v42))
      {
        *((void *)__p + v42) = v30;
        goto LABEL_69;
      }
      *uint64_t v30 = (void *)*v40;
      uint64_t v41 = 8 * v42;
      *size_t v40 = **(void **)((char *)__p + v41);
      **(void **)((char *)__p + v41) = v40;
      size_t v40 = v30;
    }
    unint64_t v42 = v31;
LABEL_69:
    uint64_t v30 = (void **)v40;
    size_t v40 = (void *)*v40;
    unint64_t v31 = v42;
    if (!v40) {
      goto LABEL_64;
    }
  }
}

void sub_1A1EE78D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  MEMORY[0x1A6239270](v51, 0x1020C4007FF0C4BLL);
  if (v52) {
    operator delete(v52);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a35);
  unint64_t v54 = *a27;
  if (*a27)
  {
    *(void *)(a40 + 40) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *a25;
  if (*a25)
  {
    *(void *)(a40 + 16) = v55;
    operator delete(v55);
    if (!a51) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!a51)
  {
    goto LABEL_8;
  }
  operator delete(a51);
  goto LABEL_8;
}

void md::CasedTrafficLayer::~CasedTrafficLayer(md::CasedTrafficLayer *this)
{
  *(void *)this = &unk_1EF531058;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF531058;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553B90;
  uint64_t v2 = (void *)a1[1];
  long long v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531058;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531058;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = (int8x16_t *)result;
LABEL_2:
  uint64_t v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *uint64_t v160 = v66;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *uint64_t v160 = v69;
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      long long v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          int v74 = (uint64_t *)v7;
          do
          {
            v76 = v71;
            uint64_t v77 = v74[1];
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              unint64_t v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *unint64_t v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              unint64_t v163 = v78;
              for (unint64_t i = v78; ; v79 = *i)
              {
                *unint64_t i = v80;
                unint64_t i = v74;
                uint64_t *v74 = 0;
                if (v79)
                {
                  long long v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    long long v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        uint64_t v85 = (void (***)(void, uint64_t))*--v82;
                        int v84 = v85;
                        *long long v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 104);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                int v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              unint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              v76 = (int8x16_t *)v163;
            }
            long long v71 = (int8x16_t *)&v76->u64[1];
            int v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          uint64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            float v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *float v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            unint64_t v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              *unint64_t j = v142;
              unint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                int v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  uint64_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      std::string::size_type v148 = (void (***)(void, uint64_t))*--v145;
                      int v147 = v148;
                      *uint64_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 104);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              uint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            uint64_t v138 = (int8x16_t *)v164;
          }
          long long v71 = (int8x16_t *)&v138->u64[1];
          uint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    __int32 v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      unsigned int v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      uint64_t *v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      int8x8_t v16 = v7;
      do
      {
        uint8x8_t v17 = v16;
        uint64_t v19 = v16->i64[1];
        int8x8_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      unint64_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        unint64_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        unint64_t v24 = (uint64_t *)v16;
        unint64_t v25 = v20;
        do
        {
          *unint64_t v24 = v23;
          uint64_t *v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          uint8x8_t v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        unint64_t v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          unint64_t v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      uint64_t v45 = a2;
      if (v7 < a2)
      {
        uint64_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          uint64_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            uint64_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        unint64_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        uint64_t v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *uint64_t v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            int v111 = v100;
            uint64_t *v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            unint64_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            uint64_t v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        v120 = (uint64_t *)v6;
        do
        {
          unint64_t v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          uint64_t *v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        unint64_t v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          BOOL v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *unint64_t v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          int v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            uint64_t *v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              uint64_t v136 = v133;
              uint64_t *v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              int v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              unint64_t v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            BOOL v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::CasedTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      int8x8_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  *uint64_t v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

void __destroy_helper_block_ea8_72c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE104c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(void *)(a1 + 72);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (!v3) {
      return;
    }
  }
  *(void *)(a1 + 80) = v3;
  BOOL v4 = *(void (**)(void))(**(void **)(a1 + 96) + 40);
  v4();
}

uint64_t __copy_helper_block_ea8_72c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE104c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(void *a1, void *a2)
{
  a1[9] = 0;
  a1[10] = 0;
  uint64_t result = a2[12];
  a1[11] = 0;
  a1[12] = result;
  uint64_t v5 = (char *)a2[9];
  uint64_t v6 = (char *)a2[10];
  uint64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      abort();
    }
    uint64_t v8 = v7 >> 3;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    a1[9] = result;
    a1[10] = result;
    a1[11] = result + 8 * v8;
    do
    {
      if (result) {
        *(void *)uint64_t result = *(void *)v5;
      }
      v5 += 8;
      result += 8;
    }
    while (v5 != v6);
    a1[10] = result;
  }
  uint64_t v9 = a2[14];
  a1[13] = a2[13];
  a1[14] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZNK2md19RoadLayerDataSource17createTrafficMeshENS_16TrafficMeshStyle5StyleERNSt3__110unique_ptrINS_19DaVinciTrafficLayerENS3_14default_deleteIS5_EEEERNS4_INS_17CasedTrafficLayerENS6_ISA_EEEERKN3geo8QuadTileERKNS3_10shared_ptrINS_21GEOVectorTileResourceEEERKNSI_INS_27TrafficSkeletonTileResourceEEERKNS3_6vectorINSI_INS_26TrafficDynamicTileResourceEEENS3_9allocatorIST_EEEERKS1_PN3ggl6LoaderERKNSI_INS11_17ConstantDataTypedINS11_4Tile4ViewEEEEERKNSI_INS14_INS15_9TransformEEEEEb_block_invoke_2(uint64_t a1, int a2, char *a3, int a4, int a5, float a6, float a7, double a8, int8x16_t a9)
{
  uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(a1 + 144)) {
    goto LABEL_32;
  }
  if (*(unsigned __int8 *)(v16 + 144) != *(unsigned __int8 *)(a1 + 145)) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(v16 + 148) != *(_DWORD *)(a1 + 120)) {
    goto LABEL_32;
  }
  if (*(unsigned __int8 *)(v16 + 272) != *(unsigned __int8 *)(a1 + 146)) {
    goto LABEL_32;
  }
  int v17 = *(_DWORD *)(a1 + 124);
  if (*(_DWORD *)(v16 + 152) != v17) {
    goto LABEL_32;
  }
  float v18 = *(float *)(a1 + 132);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(v16 + 168);
  if (v20)
  {
    if (*(unsigned __int8 *)(v19 + 153) != *(unsigned __int8 *)(v20 + 153)) {
      goto LABEL_32;
    }
  }
  if (*(unsigned char *)(v16 + 273) && **(void **)(a1 + 80) != *(void *)(v16 + 192)
    || *(void *)(a1 + 88) != *(void *)(v16 + 208)
    || *(_DWORD *)(v16 + 244) != a2)
  {
    goto LABEL_32;
  }
  uint64_t v21 = *(void *)(v16 + 56);
  if (*(void *)(v16 + 48) == v21) {
    goto LABEL_44;
  }
  if (v20 != v19 || *(_DWORD *)(v16 + 180) != (unint64_t)*(unsigned int *)(a1 + 128)) {
    goto LABEL_32;
  }
  float v22 = *(float *)(v16 + 184);
  if (v17 < 0)
  {
    if (v22 < v18 || (float)(v22 - v18) > 1.0) {
      goto LABEL_32;
    }
  }
  else if (v22 > v18 || (float)(v18 - v22) > 1.0)
  {
LABEL_32:
    if (*(_DWORD *)(a1 + 136) == 4)
    {
      uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 8);
      v53[0] = 0;
      v53[24] = 0;
      v52[0] = 0;
      v52[1] = 0;
      v49[0] = 255;
      int v50 = 0;
      int v51 = 0;
      md::TrafficAccum::flushToRibbonCollection(v16 + 48, v30 + 48, (uint64_t)v53, v52, (uint64_t)v49);
    }
    else
    {
      md::TrafficAccum::flushToRibbonCollection(v16 + 48, *(void *)(a1 + 104), (uint64_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), (uint64_t *)(*(void *)(*(void *)(a1 + 56) + 8) + 48), (uint64_t *)(*(void *)(*(void *)(a1 + 64) + 8) + 48));
    }
    uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 8) + 48;
    int v32 = *(_DWORD *)(a1 + 140);
    char v33 = *(unsigned char *)(a1 + 145);
    int v34 = *(_DWORD *)(a1 + 120);
    int v35 = *(_DWORD *)(a1 + 124);
    uint64_t v36 = *(void *)(a1 + 72);
    uint64_t v37 = *(uint64_t **)(a1 + 80);
    uint64_t v38 = *v37;
    uint64_t v39 = (std::__shared_weak_count *)v37[1];
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = *(std::__shared_weak_count **)(a1 + 96);
    v48[0] = *(void *)(a1 + 88);
    v48[1] = (uint64_t)v40;
    if (v40)
    {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      md::TrafficAccum::reset(v31, v36, v32, v33, v34, v35, v38, (uint64_t)v39, v48, a2, *(unsigned char *)(a1 + 146));
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    else
    {
      md::TrafficAccum::reset(v31, v36, v32, v33, v34, v35, v38, (uint64_t)v39, v48, a2, *(unsigned char *)(a1 + 146));
    }
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    goto LABEL_44;
  }
  *(float *)&a8 = ceilf(v18);
  float v25 = floorf(v18);
  if (v17 <= 0) {
    *(float *)&a8 = v25;
  }
  *(double *)a9.i64 = vabds_f32(*(float *)&a8, v18);
  uint64_t v26 = *(void *)(v16 + 224);
  if (*(double *)a9.i64 <= 0.01)
  {
    float32x2_t v28 = *(float32x2_t *)(v26 + 8 * (int)*(float *)&a8);
  }
  else
  {
    int v27 = (float32x2_t *)(v26 + 8 * (int)v25);
    a8 = COERCE_DOUBLE(vsub_f32(v27[1], *v27));
    float32x2_t v28 = vmla_n_f32(*v27, *(float32x2_t *)&a8, v18 - v25);
  }
  float32x2_t v29 = vsub_f32(*(float32x2_t *)(v21 - 8), v28);
  if (vaddv_f32(vmul_f32(v29, v29)) >= 0.0001) {
    goto LABEL_32;
  }
LABEL_44:
  uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 8);
  int v42 = *(_DWORD *)(a1 + 140);
  int v43 = *(_DWORD *)(a1 + 128);
  *(void *)(v41 + 168) = *(void *)(a1 + 72);
  *(_DWORD *)(v41 + 176) = v42;
  *(_DWORD *)(v41 + 180) = v43;
  *(float *)(v41 + 184) = a7;
  unint64_t v44 = (float32x2_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  uint64_t v45 = *(float **)(a1 + 112);
  if (a5)
  {
    float v46 = a7;
    float v47 = a6;
  }
  else
  {
    float v46 = a6;
    float v47 = a7;
  }
  md::TrafficAccum::addPoints(v44, a3, 0, 0, a4, v45, v46, v47, a8, a9);
}

void sub_1A1EE99D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_88c68_ZTSNSt3__110shared_ptrIN3gss15StylesheetQueryINS1_10PropertyIDEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 96);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_88c68_ZTSNSt3__110shared_ptrIN3gss15StylesheetQueryINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void md::RoadLayerDataSource::~RoadLayerDataSource(md::RoadLayerDataSource *this)
{
  *(void *)this = &unk_1EF53C148;
  *((void *)this + 97) = &unk_1EF559798;

  *(void *)this = &unk_1EF5426D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53C148;
  *((void *)this + 97) = &unk_1EF559798;

  *(void *)this = &unk_1EF5426D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::AROcclusionGenerationLogic::runBeforeLayout(void *a1, uint64_t a2, void *a3)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*a3 + 64) != 2) {
    return;
  }
  uint64_t v4 = (int8x8_t *)a3[1];
  if (a1[18] == a1[19])
  {
LABEL_22:
    id v13 = *(id *)&v4[5];
    uint64_t v14 = [v13 routeInfo];
    id v81 = [v14 route];

    if (!v81)
    {
      uint64_t v19 = a1[19];
      if (v19 != a1[18])
      {
        unint64_t v20 = 0;
        uint64_t v19 = a1[18];
        do
        {
          gdc::Registry::destroy(a1[21], *(void *)(v19 + 8 * v20++));
          uint64_t v19 = a1[18];
        }
        while (v20 < (a1[19] - v19) >> 3);
      }
      a1[19] = v19;
      a1[16] = a1[15];
      goto LABEL_61;
    }
    [v81 distance];
    unsigned int v16 = (v15 * 0.5);
    int v17 = (void *)a1[15];
    a1[16] = v17;
    if ((void *)a1[17] == v17 && v16)
    {
      float v18 = (char *)operator new(0x18uLL);
      a1[15] = v18;
      a1[16] = v18;
      a1[17] = v18 + 24;
      if (v17) {
        operator delete(v17);
      }
    }
    else if (!v16)
    {
      goto LABEL_56;
    }
    objc_msgSend(v81, "pointWithAltitudeCorrectionAtRouteCoordinate:", objc_msgSend(v81, "coordinateAtOffset:", 0.0));
    double v22 = v21;
    double v24 = v23;
    long double v26 = tan(v25 * 0.00872664626 + 0.785398163);
    double v27 = v22 * 0.00277777778 + 0.5;
    double v28 = log(v26) * 0.159154943 + 0.5;
    double v29 = v24 * 0.0000000249532021;
    uint64_t v31 = (double *)a1[16];
    unint64_t v30 = a1[17];
    if ((unint64_t)v31 >= v30)
    {
      char v33 = (double *)a1[15];
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v31 - v33) + 1;
      if (v34 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)v33) >> 3);
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x555555555555555) {
        unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v37 = (char *)operator new(24 * v36);
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v38 = (double *)&v37[8 * (v31 - v33)];
      *uint64_t v38 = v27;
      v38[1] = v28;
      v38[2] = v29;
      int v32 = v38 + 3;
      if (v31 != v33)
      {
        do
        {
          long long v39 = *(_OWORD *)(v31 - 3);
          *(v38 - 1) = *(v31 - 1);
          *(_OWORD *)(v38 - 3) = v39;
          v38 -= 3;
          v31 -= 3;
        }
        while (v31 != v33);
        uint64_t v31 = (double *)a1[15];
      }
      a1[15] = v38;
      a1[16] = v32;
      a1[17] = &v37[24 * v36];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *uint64_t v31 = v27;
      v31[1] = v28;
      int v32 = v31 + 3;
      v31[2] = v29;
    }
    a1[16] = v32;
    uint64_t v40 = (double *)a1[15];
    if (v40 != v32)
    {
      uint64_t v41 = a1[19];
      if (v41 != a1[18])
      {
        unint64_t v42 = 0;
        uint64_t v41 = a1[18];
        do
        {
          gdc::Registry::destroy(a1[21], *(void *)(v41 + 8 * v42++));
          uint64_t v41 = a1[18];
        }
        while (v42 < (a1[19] - v41) >> 3);
        uint64_t v40 = (double *)a1[15];
        int v32 = (double *)a1[16];
      }
      a1[19] = v41;
      if (0xAAAAAAAAAAAAAAABLL * (v32 - v40) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v43 = v40 + 3;
        double v44 = *(v43 - 3);
        double v45 = *(v43 - 2);
        double v46 = *(v43 - 1);
        double v92 = *v43;
        double v93 = v43[2];
        double v94 = v43[1];
        double v95 = v46 + -0.0000000748596064;
        double v96 = v44 + (*v43 - v44) * 0.5;
        double v97 = v46 + -0.0000000748596064 + (v93 - v46) * 0.5;
        *(_OWORD *)long long buf = xmmword_1A28FCBD0;
        long long v108 = xmmword_1A28FCCC0;
        double v107 = 0.0;
        *(void *)&buf[16] = 0;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v111 = xmmword_1A28FCBD0;
        double v112 = v44 + (v92 - v44) * 0.5;
        double v113 = v45 + (v94 - v45) * 0.5;
        double v114 = v97;
        *(double *)&uint64_t v115 = 1.0;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        memset(v102, 0, 40);
        long long v100 = 0u;
        double v99 = 0.0000000249532021;
        v102[0] = 0x3E5ACB157F7410BCLL;
        uint64_t v105 = 0x3FF0000000000000;
        v102[5] = 0x3E5ACB157F7410BCLL;
        gm::operator*<double,4,4,4>(v98, (double *)buf, &v99);
        gm::Matrix<double,4,4>::inverted<int,void>((double *)buf, v98);
        double v82 = *(double *)&buf[8];
        double v83 = *(double *)buf;
        long long v47 = v108;
        double v90 = v112;
        double v91 = *(double *)&v110;
        double v88 = v113;
        double v89 = *((double *)&v110 + 1);
        double v48 = *(double *)&buf[16];
        double v49 = v107;
        long long v50 = v109;
        double v86 = v114;
        double v87 = *(double *)&v111;
        double v84 = *(double *)&v115;
        double v85 = *((double *)&v111 + 1);
        int v51 = (gdc::Registry *)a1[21];
        double v99 = v96;
        *(double *)&long long v100 = v45 + (v94 - v45) * 0.5;
        *((double *)&v100 + 1) = v97;
        v102[0] = 0;
        long long v101 = 0uLL;
        *(_OWORD *)&v102[1] = xmmword_1A28FD100;
        *(int64x2_t *)&v102[3] = vdupq_n_s64(0x3E5ACB157F7410BCuLL);
        int v52 = (double *)operator new(0xC0uLL);
        double v53 = v85 * v95 + v84;
        double v54 = v85 * (v93 + -0.0000000748596064) + v84;
        double v55 = v87 * v95 + v86;
        double v56 = v87 * (v93 + -0.0000000748596064) + v86;
        double v57 = v49 * v44 + *((double *)&v50 + 1) * v45 + v53;
        double v58 = v49 * v92 + *((double *)&v50 + 1) * (v94 + 0.000000124766011) + v54;
        double v59 = v49 * v92 + *((double *)&v50 + 1) * v94 + v54;
        double v60 = 1.0 / (v49 * v44 + *((double *)&v50 + 1) * (v45 + 0.000000124766011) + v53);
        double v61 = v60 * (v48 * v44 + *(double *)&v50 * (v45 + 0.000000124766011) + v55);
        double v62 = v89 * v95 + v88;
        double v63 = v60 * (v82 * v44 + *((double *)&v47 + 1) * (v45 + 0.000000124766011) + v62);
        double v64 = v91 * v95 + v90;
        double v65 = v60 * (v83 * v44 + *(double *)&v47 * (v45 + 0.000000124766011) + v64);
        double v66 = v89 * (v93 + -0.0000000748596064) + v88;
        double v67 = v91 * (v93 + -0.0000000748596064) + v90;
        double v68 = 1.0 / v58;
        double v69 = v68 * (v48 * v92 + *(double *)&v50 * (v94 + 0.000000124766011) + v56);
        double v70 = v68 * (v82 * v92 + *((double *)&v47 + 1) * (v94 + 0.000000124766011) + v66);
        double v71 = v68 * (v83 * v92 + *(double *)&v47 * (v94 + 0.000000124766011) + v67);
        double v72 = 1.0 / v57;
        double v73 = v72 * (v48 * v44 + *(double *)&v50 * v45 + v55);
        double v74 = 1.0 / v59;
        double v75 = v74 * (v48 * v92 + *(double *)&v50 * v94 + v56);
        double v76 = v74 * (v82 * v92 + *((double *)&v47 + 1) * v94 + v66);
        double v77 = v74 * (v83 * v92 + *(double *)&v47 * v94 + v67);
        v52[11] = v61 + -100.0;
        v52[12] = v77;
        *int v52 = v77;
        v52[1] = v76;
        v52[13] = v76;
        v52[14] = v75;
        double v78 = v72 * (v82 * v44 + *((double *)&v47 + 1) * v45 + v62);
        double v79 = v72 * (v83 * v44 + *(double *)&v47 * v45 + v64);
        uint64_t v52[2] = v75 + -100.0;
        v52[3] = v79;
        v52[15] = v79;
        v52[16] = v78;
        v52[4] = v78;
        v52[5] = v73 + -100.0;
        v52[17] = v73;
        v52[18] = v71;
        v52[6] = v71;
        v52[7] = v70;
        v52[19] = v70;
        v52[20] = v69;
        v52[8] = v69 + -100.0;
        v52[9] = v65;
        v52[21] = v65;
        v52[22] = v63;
        v52[10] = v63;
        v52[23] = v61;
        gdc::Registry::create(v51);
      }
LABEL_61:

      return;
    }
LABEL_56:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v80 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&buf[4] = "false";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/AROcclusionGenerationLogic.mm";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v107) = 46;
      _os_log_impl(&dword_1A1780000, v80, OS_LOG_TYPE_ERROR, "There should always be at least 1 position to build occlusion boxes for: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }

    goto LABEL_61;
  }
  int8x8_t v5 = v4[14];
  if (v5)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v7 = (v5.i8[0] & 1) == 0;
    uint64_t v8 = *(void *)&v5 - 1;
    if (v6.u32[0] >= 2uLL) {
      uint64_t v7 = *(void *)&v5 != 1;
    }
    char v9 = *(uint64_t ***)(*(void *)&v4[13] + 8 * v7);
    if (v9)
    {
      int v10 = *v9;
      if (v10)
      {
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = v10[1];
            if (v11 == 1)
            {
              if (*((_DWORD *)v10 + 4) == 1) {
                goto LABEL_22;
              }
            }
            else if ((v11 & v8) != v7)
            {
              return;
            }
            int v10 = (uint64_t *)*v10;
            if (!v10) {
              return;
            }
          }
        }
        do
        {
          unint64_t v12 = v10[1];
          if (v12 == 1)
          {
            if (*((_DWORD *)v10 + 4) == 1) {
              goto LABEL_22;
            }
          }
          else
          {
            if (v12 >= *(void *)&v5) {
              v12 %= *(void *)&v5;
            }
            if (v12 != v7) {
              return;
            }
          }
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

void sub_1A1EEADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v29 = a2;
  int8x8_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v29);
  if (v6)
  {
    unint64_t v12 = (_OWORD *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      int v17 = (_OWORD *)a1[10];
      unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (v12 - v17) + 1;
      if (v18 > 0x333333333333333) {
        goto LABEL_32;
      }
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (void)v17) >> 4);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x199999999999999) {
        unint64_t v20 = 0x333333333333333;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        if (v20 > 0x333333333333333) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        double v21 = (char *)operator new(80 * v20);
      }
      else
      {
        double v21 = 0;
      }
      double v22 = &v21[16 * (v12 - v17)];
      *((void *)v22 + 2) = *((void *)a3 + 2);
      *(_OWORD *)double v22 = *a3;
      *(_OWORD *)(v22 + 24) = *(long long *)((char *)a3 + 24);
      *((void *)v22 + 5) = *((void *)a3 + 5);
      *((void *)v22 + 6) = *((void *)a3 + 6);
      *(_OWORD *)(v22 + 56) = *(long long *)((char *)a3 + 56);
      *((void *)v22 + 9) = *((void *)a3 + 9);
      unsigned int v16 = v22 + 80;
      if (v12 != v17)
      {
        do
        {
          long long v23 = *(v12 - 5);
          *((void *)v22 - 8) = *((void *)v12 - 8);
          *((_OWORD *)v22 - 5) = v23;
          long long v24 = *(_OWORD *)((char *)v12 - 56);
          *((void *)v22 - 5) = *((void *)v12 - 5);
          *(_OWORD *)(v22 - 56) = v24;
          *((void *)v22 - 4) = *((void *)v12 - 4);
          long long v25 = *(_OWORD *)((char *)v12 - 24);
          *((void *)v22 - 1) = *((void *)v12 - 1);
          *(_OWORD *)(v22 - 24) = v25;
          v22 -= 80;
          v12 -= 5;
        }
        while (v12 != v17);
        unint64_t v12 = (_OWORD *)a1[10];
      }
      a1[10] = v22;
      a1[11] = v16;
      a1[12] = &v21[80 * v20];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v13 = *a3;
      *((void *)v12 + 2) = *((void *)a3 + 2);
      *unint64_t v12 = v13;
      long long v14 = *(long long *)((char *)a3 + 24);
      *((void *)v12 + 5) = *((void *)a3 + 5);
      *(_OWORD *)((char *)v12 + 24) = v14;
      *((void *)v12 + 6) = *((void *)a3 + 6);
      long long v15 = *(long long *)((char *)a3 + 56);
      *((void *)v12 + 9) = *((void *)a3 + 9);
      *(_OWORD *)((char *)v12 + 56) = v15;
      unsigned int v16 = v12 + 5;
    }
    a1[11] = v16;
  }
  else
  {
    uint64_t v7 = (void *)(a1[10] + 80 * (((uint64_t)v5 - a1[7]) >> 3));
    v7[3] = *((void *)a3 + 3);
    v7[4] = *((void *)a3 + 4);
    v7[5] = *((void *)a3 + 5);
    v7[6] = *((void *)a3 + 6);
    *uint64_t v7 = *(void *)a3;
    v7[1] = *((void *)a3 + 1);
    v7[2] = *((void *)a3 + 2);
    v7[7] = *((void *)a3 + 7);
    v7[8] = *((void *)a3 + 8);
    v7[9] = *((void *)a3 + 9);
    if (v7 != (void *)a1[11])
    {
      uint64_t v8 = (void *)a1[16];
      if (v8)
      {
        uint64_t v9 = a1[31];
        while (1)
        {
          uint64_t v31 = &v29;
          uint64_t v32 = 1;
          uint64_t v30 = v9;
          uint64_t v10 = v8[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v30, &v31);
          uint64_t v8 = (void *)*v8;
          if (!v8) {
            return;
          }
        }
LABEL_31:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_32:
        abort();
      }
      return;
    }
  }
  long double v26 = (void *)a1[22];
  if (v26)
  {
    uint64_t v27 = a1[31];
    while (1)
    {
      uint64_t v31 = &v29;
      uint64_t v32 = 1;
      uint64_t v30 = v27;
      uint64_t v28 = v26[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v30, &v31);
      long double v26 = (void *)*v26;
      if (!v26) {
        return;
      }
    }
    goto LABEL_31;
  }
}

uint64_t gdc::Registry::storage<arComponents::CustomBoxCreateDesc>(int8x8_t *a1)
{
  unint64_t v10 = 0x95BAF39EB8C7C7A3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x95BAF39EB8C7C7A3;
    if (*(void *)&v1 <= 0x95BAF39EB8C7C7A3) {
      unint64_t v3 = 0x95BAF39EB8C7C7A3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x95BAF39EB8C7C7A3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x95BAF39EB8C7C7A3)
      {
        if (v5[2] == 0x95BAF39EB8C7C7A3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x95BAF39EB8C7C7A3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x95BAF39EB8C7C7A3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EEB3C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::UseForOcclusionTest>(int8x8_t *a1)
{
  uint64_t v10 = 0x141C685A574F9941;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x141C685A574F9941;
    if (*(void *)&v1 <= 0x141C685A574F9941uLL) {
      uint64_t v3 = 0x141C685A574F9941uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x141C685A574F9941;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x141C685A574F9941)
      {
        if (v5[2] == 0x141C685A574F9941) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x141C685A574F9941) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x141C685A574F9941) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EEB634(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AddToWorldIntersectorPending>(int8x8_t *a1)
{
  unint64_t v10 = 0xD37C9F66680751FBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD37C9F66680751FBLL;
    if (*(void *)&v1 <= 0xD37C9F66680751FBLL) {
      unint64_t v3 = 0xD37C9F66680751FBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD37C9F66680751FBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD37C9F66680751FBLL)
      {
        if (v5[2] == 0xD37C9F66680751FBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD37C9F66680751FBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD37C9F66680751FBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1EEB8A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  long long v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    long long v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AddToWorldIntersectorPending>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  long long v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    long long v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::UseForOcclusionTest>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__split_buffer<arComponents::CustomBoxCreateDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        uint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(a1 + 4, HIDWORD(a2));
  if (!v3) {
    return v3;
  }
  unint64_t v4 = (void *)a1[28];
  if (!v4) {
    return v3;
  }
  uint64_t v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    uint64_t v11 = v5;
    uint64_t v6 = v4[6];
    if (!v6) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v6 + 48))(v6, &v11, v12);
    unint64_t v4 = (void *)*v4;
    if (!v4) {
      return v3;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(v8, v9);
}

uint64_t geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3) {
    return 0;
  }
  uint64_t v3 = *(void *)(*a1 + 8 * v2);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3) {
    return 0;
  }
  unint64_t v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7) {
    return 0;
  }
  uint64_t v11 = a1[6] + 24 * v5;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (void *)v8);
  uint64_t v12 = a1[7];
  if (v11 != v12 - 24)
  {
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>(v11, *(void *)(v12 - 24), *(char **)(v12 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 - 16) - *(void *)(v12 - 24)) >> 3));
    uint64_t v12 = a1[7];
  }
  uint64_t v14 = v12 - 24;
  long long v13 = *(void **)(v12 - 24);
  if (v13)
  {
    *(void *)(v12 - 16) = v13;
    operator delete(v13);
  }
  a1[7] = v14;
  return 1;
}

char *std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v6 = (char *)a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < __sz)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_47;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_47:
    }
      abort();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    uint64_t v14 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v13];
    uint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      uint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    unint64_t v17 = (void *)(a1 + 8);
    goto LABEL_46;
  }
  uint64_t v18 = *(char **)(a1 + 8);
  unint64_t v17 = (void *)(a1 + 8);
  uint64_t v14 = v18;
  int64_t v19 = v18 - result;
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
  if (v20 >= __sz)
  {
    if ((char *)a2 == a3)
    {
      long long v25 = result;
    }
    else
    {
      unint64_t v24 = (unint64_t)&a3[-a2 - 24];
      if (v24 >= 0x108)
      {
        unint64_t v38 = v24 / 0x18;
        uint64_t v39 = 24 * v38 + 24;
        if ((unint64_t)result < a2 + v39 && (unint64_t)&result[v39] > a2)
        {
          long long v25 = result;
        }
        else
        {
          unint64_t v41 = v38 + 1;
          uint64_t v42 = (v38 + 1) & 0x1FFFFFFFFFFFFFFCLL;
          long long v25 = &result[24 * v42];
          int v43 = result;
          double v44 = (_OWORD *)a2;
          uint64_t v45 = v42;
          do
          {
            long long v46 = v44[1];
            long long v48 = v44[4];
            long long v47 = v44[5];
            long long v49 = v44[2];
            long long v50 = v44[3];
            *(_OWORD *)int v43 = *v44;
            *((_OWORD *)v43 + 1) = v46;
            *((_OWORD *)v43 + 2) = v49;
            *((_OWORD *)v43 + 3) = v50;
            v44 += 6;
            *((_OWORD *)v43 + 4) = v48;
            *((_OWORD *)v43 + 5) = v47;
            v43 += 96;
            v45 -= 4;
          }
          while (v45);
          if (v41 == v42) {
            goto LABEL_45;
          }
          uint64_t v6 = (char *)(a2 + 24 * v42);
        }
      }
      else
      {
        long long v25 = result;
      }
      do
      {
        *(void *)long long v25 = *(void *)v6;
        *((void *)v25 + 1) = *((void *)v6 + 1);
        *((void *)v25 + 2) = *((void *)v6 + 2);
        v25 += 24;
        v6 += 24;
      }
      while (v6 != a3);
    }
LABEL_45:
    int64_t v16 = v25 - result;
    uint64_t v14 = result;
    goto LABEL_46;
  }
  double v21 = (char *)(a2 + 24 * v20);
  if (v14 != result)
  {
    unint64_t v22 = v19 - 24;
    if (v22 >= 0x108)
    {
      unint64_t v26 = v22 / 0x18;
      uint64_t v27 = 24 * v26 + 24;
      if ((unint64_t)result < a2 + v27 && (unint64_t)&result[v27] > a2)
      {
        long long v23 = result;
      }
      else
      {
        unint64_t v29 = v26 + 1;
        uint64_t v30 = (v26 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        long long v23 = &result[24 * v30];
        uint64_t v31 = (_OWORD *)a2;
        uint64_t v32 = v30;
        do
        {
          long long v33 = v31[1];
          long long v35 = v31[4];
          long long v34 = v31[5];
          long long v36 = v31[2];
          long long v37 = v31[3];
          *(_OWORD *)uint64_t result = *v31;
          *((_OWORD *)result + 1) = v33;
          *((_OWORD *)result + 2) = v36;
          *((_OWORD *)result + 3) = v37;
          v31 += 6;
          *((_OWORD *)result + 4) = v35;
          *((_OWORD *)result + 5) = v34;
          result += 96;
          v32 -= 4;
        }
        while (v32);
        if (v29 == v30) {
          goto LABEL_40;
        }
        uint64_t v6 = (char *)(a2 + 24 * v30);
      }
    }
    else
    {
      long long v23 = result;
    }
    do
    {
      *(void *)long long v23 = *(void *)v6;
      *((void *)v23 + 1) = *((void *)v6 + 1);
      *((void *)v23 + 2) = *((void *)v6 + 2);
      v6 += 24;
      v23 += 24;
    }
    while (v6 != v21);
  }
LABEL_40:
  for (unint64_t i = v14; v21 != a3; v21 += 24)
  {
    long long v52 = *(_OWORD *)v21;
    *((void *)i + 2) = *((void *)v21 + 2);
    *(_OWORD *)unint64_t i = v52;
    i += 24;
  }
  int64_t v16 = i - v14;
LABEL_46:
  *unint64_t v17 = &v14[v16];
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::CustomBoxCreateDesc>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xA822B3A972ECE7CDLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x37F8C546A65FE3EELL;
    if (a2 <= 0x37F8C546A65FE3EELL) {
      uint64_t v3 = 0x37F8C546A65FE3EELL % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x37F8C546A65FE3EELL;
  }
  unint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x37F8C546A65FE3EELL)
      {
        if (v6[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x1B8B241A8D896A1DLL;
    if (a2 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v11 = 0x1B8B241A8D896A1DLL % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x1B8B241A8D896A1DLL;
  }
  unint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x1B8B241A8D896A1DLL)
      {
        if (v13[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x1B8B241A8D896A1DLL)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x1B8B241A8D896A1DLL) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA822B3A972ECE7CDLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::AROcclusionGenerationLogic,md::AROcclusionGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1EEC7D4(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::AROcclusionGenerationContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::AROcclusionGenerationContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C30;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::AROcclusionGenerationContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C30;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void *md::AROcclusionGenerationLogic::didBecomeInactive(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[19];
  if (v2 != this[18])
  {
    unint64_t v3 = 0;
    uint64_t v2 = this[18];
    do
    {
      this = (void *)gdc::Registry::destroy(v1[21], *(void *)(v2 + 8 * v3++));
      uint64_t v2 = v1[18];
    }
    while (v3 < (v1[19] - v2) >> 3);
  }
  v1[19] = v2;
  v1[16] = v1[15];
  return this;
}

void md::AROcclusionGenerationLogic::~AROcclusionGenerationLogic(md::AROcclusionGenerationLogic *this)
{
  *(void *)this = &unk_1EF5470C0;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EF5470C0;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::RealisticHybridMapEngineMode::~RealisticHybridMapEngineMode(md::RealisticHybridMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

md::RealisticHybridMapEngineMode *md::RealisticHybridMapEngineMode::RealisticHybridMapEngineMode(md::RealisticHybridMapEngineMode *this)
{
  uint64_t v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 9);
  *(void *)uint64_t v2 = &unk_1EF542230;
  *(_WORD *)(v2 + 224) = 257;
  if (!*(unsigned char *)(v2 + 64)) {
    *((unsigned char *)this + 64) = 1;
  }
  *((void *)this + 9) = 0x3FE0C152382D7365;
  *(void *)this = &unk_1EF54A578;
  *((unsigned char *)this + 49) = 0;
  *((_DWORD *)this + 13) = 21;
  LOBYTE(v6) = 0;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v6)+ 17) = 0;
  LOBYTE(v6) = 1;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 1u, &v6)+ 17) = 0;
  LOBYTE(v6) = 4;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 4u, &v6)+ 17) = 0;
  LOBYTE(v6) = 6;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 6u, &v6)+ 17) = 0;
  LOBYTE(v6) = 2;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v6)+ 17) = 0;
  LOBYTE(v6) = 7;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 7u, &v6)+ 17) = 0;
  LOBYTE(v6) = 5;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 5u, &v6)+ 17) = 1;
  LOBYTE(v6) = 3;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v6)+ 17) = 2;
  LODWORD(v6) = 65576;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x28u, &v6)+ 18) = 65538;
  uint64_t v21 = 0x79FE0BD9535D5C4DLL;
  unint64_t v22 = "md::AnchorLogic]";
  v23[0] = 15;
  *(void *)&long long v18 = 0x63B6FE00C0848868;
  *((void *)&v18 + 1) = "md::AnchorContext]";
  uint64_t v19 = 17;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97998;
  long long v8 = unk_1E5A979A8;
  long long v9 = xmmword_1E5A979B8;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A98030;
  uint64_t v17 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v18 = 0x8E629317B3523E63;
  *((void *)&v18 + 1) = "md::CameraLogic]";
  uint64_t v19 = 15;
  *(void *)&long long v15 = 0x1AF456233693CD46;
  *((void *)&v15 + 1) = "md::CameraContext]";
  *(void *)&long long v16 = 17;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A979C8;
  *(void *)&long long v8 = 20;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  uint64_t v21 = 0x17767EADC5B287BLL;
  unint64_t v22 = "md::ElevationLogic]";
  v23[0] = 18;
  *(void *)&long long v18 = 0x8BD499FBD96FBB9ELL;
  *((void *)&v18 + 1) = "md::ElevationContext]";
  uint64_t v19 = 20;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97A70;
  long long v8 = unk_1E5A97A80;
  long long v9 = xmmword_1E5A97A90;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97AA0;
  uint64_t v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  uint64_t v21 = 0x4AC7AB7561675F6;
  unint64_t v22 = "md::GridLogic]";
  v23[0] = 13;
  *(void *)&long long v18 = 0x336A901A15BB7353;
  *((void *)&v18 + 1) = "md::GridContext]";
  uint64_t v19 = 15;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97DD0;
  *(void *)&long long v8 = 21;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97CE0;
  uint64_t v17 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v15 = 0x5CBBA028798243FLL;
  *((void *)&v15 + 1) = "md::RouteOverlayLogic]";
  *(void *)&long long v16 = 21;
  *(void *)&long long v6 = 0x13043386C0978CC2;
  *((void *)&v6 + 1) = "md::RouteOverlayContext]";
  *(void *)&long long v7 = 23;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(void *)&long long v18 = 0xAF46DE79C836B0D8;
  *((void *)&v18 + 1) = "md::TileSelectionLogic]";
  uint64_t v19 = 22;
  *(void *)&long long v15 = 0x64780CBD71DF7CF5;
  *((void *)&v15 + 1) = "md::TileSelectionContext]";
  *(void *)&long long v16 = 24;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 3;
  long long v9 = xmmword_1E5A97CB8;
  long long v10 = unk_1E5A97CC8;
  *(void *)&long long v11 = 21;
  long long v7 = xmmword_1E5A97C98;
  long long v8 = unk_1E5A97CA8;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  uint64_t v3 = 0xCBF29CE484222325;
  uint64_t v4 = 0x26u;
  do
    uint64_t v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_928[v4++]);
  while (v4 != 368);
  uint64_t v21 = v3;
  unint64_t v22 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v23[0] = 330;
  *(void *)&long long v18 = 0x8677AD8BA9352C1DLL;
  *((void *)&v18 + 1) = "md::ResolvedTileSelectionContext]";
  uint64_t v19 = 32;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97CE0;
  *(void *)&long long v8 = 24;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97CF8;
  uint64_t v17 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v18 = 0x87BA2765F9E38E05;
  *((void *)&v18 + 1) = "md::PendingSceneLogic]";
  uint64_t v19 = 21;
  *(void *)&long long v15 = 0x9F2276D081C2CB20;
  *((void *)&v15 + 1) = "md::PendingSceneContext]";
  *(void *)&long long v16 = 23;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 5;
  long long v11 = xmmword_1E5A97D50;
  long long v12 = *(_OWORD *)&off_1E5A97D60;
  long long v13 = xmmword_1E5A97D70;
  uint64_t v14 = 25;
  long long v7 = xmmword_1E5A97D10;
  long long v8 = unk_1E5A97D20;
  long long v9 = xmmword_1E5A97D30;
  long long v10 = unk_1E5A97D40;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  uint64_t v21 = 0x2B7C4502BD3C99C6;
  unint64_t v22 = "md::ResolvedSceneLogic]";
  v23[0] = 22;
  *(void *)&long long v18 = 0x99BED48DEFBBD82BLL;
  *((void *)&v18 + 1) = "md::SceneContext]";
  uint64_t v19 = 16;
  char v20 = 1;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97DB8;
  uint64_t v17 = 23;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97D88;
  long long v8 = unk_1E5A97D98;
  long long v9 = xmmword_1E5A97DA8;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v15, (uint64_t)&v6);
  *(void *)&long long v15 = 0xD2443A61CED86C69;
  *((void *)&v15 + 1) = "md::SettingsLogic]";
  *(void *)&long long v16 = 17;
  *(void *)&long long v6 = 0xC97B9E962ADF4AD4;
  *((void *)&v6 + 1) = "md::SettingsContext]";
  *(void *)&long long v7 = 19;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(void *)&long long v15 = 0x2FED70A4459DFCA1;
  *((void *)&v15 + 1) = "md::StyleLogic]";
  *(void *)&long long v16 = 14;
  *(void *)&long long v6 = 0xE42D19AFCA302E68;
  *((void *)&v6 + 1) = "md::StyleLogicContext]";
  *(void *)&long long v7 = 21;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  uint64_t v21 = 0x20A1ED17D78F322BLL;
  unint64_t v22 = "md::LabelsLogic]";
  v23[0] = 15;
  *(void *)&long long v18 = 0xA588623CD4116DAELL;
  *((void *)&v18 + 1) = "md::LabelsContext]";
  uint64_t v19 = 17;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97DD0;
  *(void *)&long long v8 = 21;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97DE8;
  uint64_t v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v15 = 0x90C2E4CBBB63E301;
  *((void *)&v15 + 1) = "md::LayerDataLogic]";
  *(void *)&long long v16 = 18;
  *(void *)&long long v6 = 0x7851AF310F49C988;
  *((void *)&v6 + 1) = "md::LayerDataLogicContext]";
  *(void *)&long long v7 = 25;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(void *)&long long v18 = 0xBDB8C71631E0AA6CLL;
  *((void *)&v18 + 1) = "md::MapZoomLevelStyleLogic]";
  uint64_t v19 = 26;
  *(void *)&long long v15 = 0xF0AA2DB42EB710AFLL;
  *((void *)&v15 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(void *)&long long v16 = 33;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97A40;
  long long v8 = unk_1E5A97A50;
  long long v9 = xmmword_1E5A97A60;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  *(void *)&long long v18 = 0xEA624BC935BAF297;
  *((void *)&v18 + 1) = "md::mun::MuninLogic]";
  uint64_t v19 = 19;
  *(void *)&long long v15 = 0x8EA84A1BD3791AFALL;
  *((void *)&v15 + 1) = "md::mun::MuninContext]";
  *(void *)&long long v16 = 21;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 3;
  long long v9 = xmmword_1E5A97EB0;
  long long v10 = unk_1E5A97EC0;
  *(void *)&long long v11 = 20;
  long long v7 = xmmword_1E5A97E90;
  long long v8 = unk_1E5A97EA0;
  uint64_t v21 = (uint64_t)v23;
  unint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 1, (uint64_t)&v6, (uint64_t)&v21);
  return this;
}

void sub_1A1EED598(_Unwind_Exception *a1)
{
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::ARAssetOcclusionMeshData::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  gdc::LayerData::createDebugNode((unsigned __int8 *)a1, a2);
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)&v19[0] = v4;
  *(long long *)((char *)v19 + 8) = xmmword_1A28FD110;
  strcpy(v4, "ARAssetOcclusionMeshData");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, v19);
  operator delete(v4);
  BYTE7(v19[1]) = 19;
  strcpy((char *)v19, "UsesOcclusionMeshes");
  uint64_t v6 = *(unsigned __int8 *)(a1 + 200);
  int v18 = 0;
  memset(&v17[4], 0, 24);
  v17[0] = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v17);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3);
  BYTE7(v19[1]) = 18;
  strcpy((char *)v19, "OcclusionMeshCount");
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 1;
  uint64_t v13 = 0;
  unint64_t v12 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v11);
  uint64_t v8 = *(void *)(a1 + 168);
  BYTE7(v19[1]) = 7;
  strcpy((char *)v19, "AssetId");
  int v10 = 1;
  memset(&v9[4], 0, 24);
  v9[1] = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v19, (uint64_t)v9);
}

void sub_1A1EED740(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::ARAssetOcclusionMeshData::~ARAssetOcclusionMeshData(md::ARAssetOcclusionMeshData *this)
{
  *(void *)this = &unk_1EF544818;
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 23);
    uint64_t v4 = (void *)*((void *)this + 22);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 23);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)*((void *)this + 22);
    }
    *((void *)this + 23) = v2;
    operator delete(v4);
  }
  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8 != *((void **)this + 6)) {
    free(v8);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(void *)this = &unk_1EF544818;
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 23);
    uint64_t v4 = (void *)*((void *)this + 22);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 23);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)*((void *)this + 22);
    }
    *((void *)this + 23) = v2;
    operator delete(v4);
  }
  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8 != *((void **)this + 6)) {
    free(v8);
  }
}

char *std::vector<md::OcclusionMesh>::__emplace_back_slow_path<std::vector<gm::Matrix<float,3,1>>>(char **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  long long v9 = &v7[24 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v10 = v8 + 24;
  long long v11 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      uint64_t v13 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v14 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((void *)v13 - 1) = *((void *)v12 + 2);
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
    }
    while (v12 != v11);
    unint64_t v12 = *a1;
    uint64_t v15 = a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 != v12)
    {
      int v16 = v15;
      do
      {
        int v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *((void *)v15 - 2) = v17;
          operator delete(v17);
        }
        uint64_t v15 = v16;
      }
      while (v16 != v12);
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

void geo::DiscreteOrientedPolytope<arComponents::XY26DOPTraits<float>>::extractVertices(uint64_t a1, char **a2, uint64_t a3, float32x4_t a4, double a5, int32x4_t a6)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  a4.i32[0] = *(_DWORD *)(a3 + 12);
  float v9 = *(float *)(a3 + 16);
  a6.i32[0] = *(_DWORD *)(a3 + 20);
  float v10 = *(float *)(a3 + 24);
  float v11 = v9 + v9;
  float v12 = (float)(v9 + v9) * v9;
  float v13 = (float)(*(float *)a6.i32 + *(float *)a6.i32) * *(float *)a6.i32;
  float v14 = (float)(a4.f32[0] + a4.f32[0]) * v9;
  float v15 = (float)(*(float *)a6.i32 + *(float *)a6.i32) * v10;
  float32_t v16 = v14 - v15;
  float v17 = *(float *)a6.i32 * (float)(a4.f32[0] + a4.f32[0]);
  float v18 = v10 * v11;
  float32_t v19 = v15 + v14;
  float v20 = 1.0 - (float)((float)(a4.f32[0] + a4.f32[0]) * a4.f32[0]);
  float v21 = v11 * *(float *)a6.i32;
  float v22 = v10 * (float)(a4.f32[0] + a4.f32[0]);
  v23.i32[1] = 0;
  v23.f32[0] = v17 - (float)(v10 * v11);
  v23.f32[2] = v16;
  v23.f32[3] = v20 - v13;
  a4.i64[0] = *(void *)a3;
  a4.i32[2] = *(_DWORD *)(a3 + 8);
  float32x4_t v166 = a4;
  v24.i32[0] = 0;
  v24.i32[3] = 0;
  long long v25 = (const float *)(a3 + 36);
  a6.i32[0] = *(_DWORD *)(a3 + 28);
  float32x4_t v26 = (float32x4_t)vzip1q_s32(a6, a6);
  v27.i32[3] = 0;
  v27.f32[0] = 1.0 - (float)(v12 + v13);
  v27.f32[1] = v19;
  v27.f32[2] = v22 + v21;
  int8x16_t v179 = (int8x16_t)vmulq_f32(v26, v23);
  float32x4_t v181 = vmulq_f32(v26, v27);
  *(uint64_t *)((char *)v24.i64 + 4) = *(unsigned int *)(a3 + 32);
  float32x4_t v28 = (float32x4_t)vzip1q_s32(v24, v24);
  float32x4_t v175 = vmulq_f32(v28, v27);
  int8x16_t v177 = (int8x16_t)vmulq_f32(v28, v23);
  float32x4_t v29 = vld1q_dup_f32(v25);
  float32x4_t v174 = v29;
  uint64_t v30 = (int *)(a1 + 4);
  do
  {
    long long v218 = xmmword_1A28FCEA0;
    long long v219 = xmmword_1A28FCEA0;
    long long v220 = xmmword_1A28FCFB0;
    long long v221 = xmmword_1A28FCFC0;
    long long v222 = xmmword_1A28FCFD0;
    long long v223 = xmmword_1A28FCFE0;
    long long v224 = xmmword_1A28FCFF0;
    long long v225 = xmmword_1A28FD000;
    long long v226 = xmmword_1A28FD010;
    uint64_t v227 = 0x3E8483EDBF7746EDLL;
    int v228 = 0;
    uint64_t v31 = (char *)&v192 + v7;
    uint64_t v32 = *(void *)((char *)&v218 + v8);
    v33.i32[0] = *(v30 - 1);
    int v34 = *v30;
    *((_DWORD *)v31 + 2) = *(_DWORD *)((char *)&v218 + v8 + 8);
    *(void *)uint64_t v31 = v32;
    long long v218 = xmmword_1A28FCEA0;
    long long v219 = xmmword_1A28FCEA0;
    long long v220 = xmmword_1A28FCFB0;
    long long v221 = xmmword_1A28FCFC0;
    long long v222 = xmmword_1A28FCFD0;
    long long v223 = xmmword_1A28FCFE0;
    long long v224 = xmmword_1A28FCFF0;
    long long v225 = xmmword_1A28FD000;
    long long v226 = xmmword_1A28FD010;
    uint64_t v227 = 0x3E8483EDBF7746EDLL;
    int v228 = 0;
    v33.i32[1] = *(_DWORD *)((char *)&v218 + v8);
    v33.i64[1] = *(void *)((char *)&v218 + v8 + 4);
    *(float32x4_t *)(v31 + 12) = vnegq_f32(v33);
    *((_DWORD *)v31 + 7) = v34;
    v8 += 12;
    v7 += 32;
    v30 += 2;
  }
  while (v8 != 156);
  long long v35 = operator new(3uLL);
  *(_WORD *)long long v35 = 257;
  v35[2] = 1;
  long long v36 = (unsigned __int8 *)operator new(0x1AuLL);
  v37.i32[3] = 0;
  v37.f32[0] = v18 + v17;
  v37.f32[1] = v21 - v22;
  v37.f32[2] = v20 - v12;
  float32x4_t v168 = vaddq_f32(v175, (float32x4_t)vextq_s8(v177, v177, 8uLL));
  float32x4_t v169 = vmulq_f32(v174, v37);
  float32x4_t v167 = vaddq_f32(v181, (float32x4_t)vextq_s8(v179, v179, 8uLL));
  *(void *)(v36 + 3) = 0;
  unint64_t v38 = v36 + 3;
  *(void *)(v36 + 11) = 0;
  uint64_t v39 = v36 + 11;
  *(void *)(v36 + 18) = 0;
  uint64_t v40 = v36 + 18;
  *(_WORD *)long long v36 = 257;
  unint64_t v41 = v36 + 27;
  v36[2] = 1;
  uint64_t v42 = v36 + 2;
  int v43 = v36 + 26;
  operator delete(v35);
  double v44 = v36 + 25;
  uint64_t v45 = v36 + 24;
  long long v46 = v36 + 23;
  long long v47 = v192;
  long long v48 = v193;
  long long v49 = v36 + 22;
  long long v50 = v36 + 21;
  int v51 = v36 + 20;
  long long v52 = v36 + 19;
  long long v178 = v194;
  long long v172 = v195;
  double v53 = v36 + 17;
  double v54 = v36 + 16;
  double v55 = v36 + 15;
  double v56 = v36 + 14;
  long long v170 = v196;
  long long v162 = v197;
  double v57 = v36 + 13;
  double v58 = v36 + 10;
  uint64_t v141 = v36 + 9;
  long long v155 = v198;
  long long v142 = v199;
  BOOL v143 = v36 + 8;
  unsigned int v156 = v36 + 7;
  unint64_t v163 = v36 + 6;
  uint64_t v171 = v36 + 5;
  long long v139 = v201;
  long long v140 = v200;
  uint64_t v173 = v36 + 4;
  v180 = v36 + 1;
  long long v137 = v203;
  long long v138 = v202;
  long long v135 = v205;
  long long v136 = v204;
  long long v133 = v207;
  long long v134 = v206;
  long long v131 = v209;
  long long v132 = v208;
  long long v129 = v211;
  long long v130 = v210;
  long long v127 = v213;
  long long v128 = v212;
  uint64_t v176 = (float *)(a1 + 4);
  double v59 = v36 + 12;
  long long v125 = v215;
  long long v126 = v214;
  long long v123 = v217;
  long long v124 = v216;
  long long v61 = xmmword_1A28FCFB0;
  long long v60 = xmmword_1A28FCEA0;
  long long v63 = xmmword_1A28FCFD0;
  long long v62 = xmmword_1A28FCFC0;
  long long v65 = xmmword_1A28FCFF0;
  long long v64 = xmmword_1A28FCFE0;
  long long v67 = xmmword_1A28FD010;
  long long v66 = xmmword_1A28FD000;
  double v68 = a2;
  int v153 = v36 + 2;
  int v154 = v36 + 25;
  uint64_t v151 = v36 + 23;
  int v152 = v36 + 24;
  long long v159 = v193;
  long long v160 = v192;
  uint64_t v158 = v36 + 14;
  uint64_t v165 = v36 + 13;
  uint64_t v182 = v36 + 10;
  uint64_t v149 = v36 + 21;
  unint64_t v150 = v36 + 22;
  int v147 = v36 + 19;
  std::string::size_type v148 = v36 + 20;
  uint64_t v145 = v36 + 16;
  uint64_t v146 = v36 + 17;
  int v144 = v36 + 15;
  unint64_t v164 = v36 + 12;
  while (1)
  {
    if (*v36)
    {
      long long v183 = v47;
      uint64_t v69 = 1;
    }
    else
    {
      uint64_t v69 = 0;
    }
    if (*v180) {
      *(&v183 + v69++) = v48;
    }
    if (!*v42 || (*(&v183 + v69) = v178, ++v69, v69 != 3))
    {
      if (!*v38 || (*(&v183 + v69) = v172, ++v69, v69 != 3))
      {
        if (!*v173 || (*(&v183 + v69) = v170, ++v69, v69 != 3))
        {
          if (!*v171 || (*(&v183 + v69) = v162, ++v69, v69 != 3))
          {
            if (!*v163 || (*(&v183 + v69) = v155, ++v69, v69 != 3))
            {
              if (!*v156 || (*(&v183 + v69) = v142, ++v69, v69 != 3))
              {
                if (!*v143 || (*(&v183 + v69) = v140, ++v69, v69 != 3))
                {
                  if (!*v141 || (*(&v183 + v69) = v139, ++v69, v69 != 3))
                  {
                    if (!*v58 || (*(&v183 + v69) = v138, ++v69, v69 != 3))
                    {
                      if (!*v39 || (*(&v183 + v69) = v137, ++v69, v69 != 3))
                      {
                        if (!*v59 || (*(&v183 + v69) = v136, ++v69, v69 != 3))
                        {
                          if (!*v57 || (*(&v183 + v69) = v135, ++v69, v69 != 3))
                          {
                            if (!*v56 || (*(&v183 + v69) = v134, ++v69, v69 != 3))
                            {
                              if (!*v55 || (*(&v183 + v69) = v133, ++v69, v69 != 3))
                              {
                                if (!*v54 || (*(&v183 + v69) = v132, ++v69, v69 != 3))
                                {
                                  if (!*v53 || (*(&v183 + v69) = v131, ++v69, v69 != 3))
                                  {
                                    if (!*v40 || (*(&v183 + v69) = v130, ++v69, v69 != 3))
                                    {
                                      if (!*v52 || (*(&v183 + v69) = v129, ++v69, v69 != 3))
                                      {
                                        if (!*v51 || (*(&v183 + v69) = v128, ++v69, v69 != 3))
                                        {
                                          if (!*v50 || (*(&v183 + v69) = v127, ++v69, v69 != 3))
                                          {
                                            if (!*v49 || (*(&v183 + v69) = v126, ++v69, v69 != 3))
                                            {
                                              if (!*v46 || (*(&v183 + v69) = v125, ++v69, v69 != 3))
                                              {
                                                if (!*v45 || (*(&v183 + v69) = v124, ++v69, v69 != 3))
                                                {
                                                  if (*v44) {
                                                    *(&v183 + v69) = v123;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    float v70 = -(float)((float)(v189 * v186) - (float)(v190 * v185));
    float v71 = -(float)((float)(v184 * v190) - (float)(v188 * v186));
    float v72 = -(float)((float)(v188 * v185) - (float)(v184 * v189));
    float v73 = (float)((float)(*(float *)&v183 * v70) + (float)(v71 * *((float *)&v183 + 1)))
        + (float)(*((float *)&v183 + 2) * v72);
    if (fabsf(v73) >= 0.00000011921)
    {
      BOOL v74 = 0;
      unint64_t v75 = 0;
      float v76 = -(float)((float)(v191 * v184) - (float)(v187 * v188));
      float v77 = -(float)((float)(v191 * v185) - (float)(v187 * v189));
      float v78 = -(float)((float)(v191 * v186) - (float)(v187 * v190));
      float v79 = -(float)((float)((float)(*((float *)&v183 + 3) * v72) + (float)(v76 * *((float *)&v183 + 1)))
                   - (float)(v77 * *(float *)&v183));
      float v80 = (float)-(float)((float)((float)(*((float *)&v183 + 3) * v70) + (float)(v77 * *((float *)&v183 + 2)))
                          - (float)(v78 * *((float *)&v183 + 1)))
          * (float)(1.0 / v73);
      float v81 = (float)-(float)((float)((float)(*((float *)&v183 + 3) * v71) + (float)(v78 * *(float *)&v183))
                          - (float)(v76 * *((float *)&v183 + 2)))
          * (float)(1.0 / v73);
      float v82 = v79 * (float)(1.0 / v73);
      double v83 = (float32x2_t *)((char *)&v218 + 4);
      double v84 = v176;
      do
      {
        long long v218 = v60;
        long long v219 = v60;
        long long v220 = v61;
        long long v221 = v62;
        long long v222 = v63;
        long long v223 = v64;
        long long v224 = v65;
        long long v225 = v66;
        long long v226 = v67;
        uint64_t v227 = 0x3E8483EDBF7746EDLL;
        int v228 = 0;
        float32x2_t v85 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v82), LODWORD(v81)), *v83);
        float v86 = (float)(v85.f32[0] + (float)(v80 * v83[-1].f32[1])) + v85.f32[1];
        if ((float)(v86 - *(v84 - 1)) < 0.0) {
          break;
        }
        if ((float)(v86 - *v84) > 0.0) {
          break;
        }
        BOOL v74 = v75 > 0xB;
        v84 += 2;
        double v83 = (float32x2_t *)((char *)v83 + 12);
        ++v75;
      }
      while (v75 != 13);
      if (v74)
      {
        float32x4_t v87 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v166, v167, v80), v168, v81), v169, v82), 1.0/ (float)((float)((float)((float)(v167.f32[3] * v80) + 1.0) + (float)(v168.f32[3] * v81))+ (float)(v169.f32[3] * v82)));
        double v89 = v68[1];
        unint64_t v88 = (unint64_t)v68[2];
        if ((unint64_t)v89 >= v88)
        {
          double v91 = v43;
          double v92 = v41;
          double v93 = v40;
          double v94 = v39;
          double v95 = v38;
          double v96 = v36;
          double v97 = *v68;
          unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((v89 - *v68) >> 2);
          unint64_t v99 = v98 + 1;
          if (v98 + 1 > 0x1555555555555555) {
            abort();
          }
          unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (void)v97) >> 2);
          if (2 * v100 > v99) {
            unint64_t v99 = 2 * v100;
          }
          if (v100 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v101 = 0x1555555555555555;
          }
          else {
            unint64_t v101 = v99;
          }
          if (v101)
          {
            if (v101 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            float32x4_t v157 = v87;
            uint64_t v102 = (char *)operator new(12 * v101);
            long long v61 = xmmword_1A28FCFB0;
            long long v60 = xmmword_1A28FCEA0;
            long long v63 = xmmword_1A28FCFD0;
            long long v62 = xmmword_1A28FCFC0;
            long long v65 = xmmword_1A28FCFF0;
            long long v64 = xmmword_1A28FCFE0;
            long long v67 = xmmword_1A28FD010;
            long long v66 = xmmword_1A28FD000;
            double v68 = a2;
            long long v48 = v159;
            long long v47 = v160;
            double v56 = v158;
            double v58 = v182;
            float32x4_t v87 = v157;
          }
          else
          {
            uint64_t v102 = 0;
          }
          long long v103 = &v102[12 * v98];
          *(void *)long long v103 = v87.i64[0];
          *((_DWORD *)v103 + 2) = v87.i32[2];
          long long v104 = v103;
          long long v36 = v96;
          if (v89 != v97)
          {
            do
            {
              uint64_t v105 = *(void *)(v89 - 12);
              v89 -= 12;
              int v106 = *((_DWORD *)v89 + 2);
              *(void *)(v104 - 12) = v105;
              v104 -= 12;
              *((_DWORD *)v104 + 2) = v106;
            }
            while (v89 != v97);
            double v89 = *v68;
          }
          unint64_t v38 = v95;
          uint64_t v39 = v94;
          double v107 = &v102[12 * v101];
          double v90 = v103 + 12;
          *double v68 = v104;
          v68[1] = v103 + 12;
          v68[2] = v107;
          uint64_t v40 = v93;
          int v43 = v91;
          if (v89)
          {
            operator delete(v89);
            double v58 = v182;
            double v56 = v158;
            long long v48 = v159;
            long long v47 = v160;
            double v68 = a2;
            long long v67 = xmmword_1A28FD010;
            long long v66 = xmmword_1A28FD000;
            long long v65 = xmmword_1A28FCFF0;
            long long v64 = xmmword_1A28FCFE0;
            long long v63 = xmmword_1A28FCFD0;
            long long v62 = xmmword_1A28FCFC0;
            long long v61 = xmmword_1A28FCFB0;
            long long v60 = xmmword_1A28FCEA0;
          }
          unint64_t v41 = v92;
          uint64_t v42 = v153;
          double v44 = v154;
          long long v46 = v151;
          uint64_t v45 = v152;
          long long v50 = v149;
          long long v49 = v150;
          long long v52 = v147;
          int v51 = v148;
          double v54 = v145;
          double v53 = v146;
          double v55 = v144;
        }
        else
        {
          *((_DWORD *)v89 + 2) = v87.i32[2];
          *(void *)double v89 = v87.i64[0];
          double v90 = v89 + 12;
        }
        double v59 = v164;
        v68[1] = v90;
        double v57 = v165;
      }
    }
    unsigned int v108 = *v44;
    unsigned int v109 = *v45;
    if (v108 < v109)
    {
      uint64_t v110 = -1;
      long long v111 = v45;
      unsigned int v112 = *v45;
      goto LABEL_91;
    }
    unsigned int v112 = *v46;
    if (v109 < v112)
    {
      uint64_t v110 = -2;
      long long v111 = v46;
      goto LABEL_91;
    }
    unsigned int v113 = *v49;
    if (v112 < v113)
    {
      uint64_t v110 = -3;
      long long v111 = v49;
LABEL_88:
      unsigned int v112 = v113;
      goto LABEL_91;
    }
    unsigned int v112 = *v50;
    if (v113 < v112)
    {
      uint64_t v110 = -4;
      long long v111 = v50;
      goto LABEL_91;
    }
    unsigned int v113 = *v51;
    if (v112 < v113)
    {
      uint64_t v110 = -5;
      long long v111 = v51;
      goto LABEL_88;
    }
    unsigned int v112 = *v52;
    if (v113 < v112)
    {
      uint64_t v110 = -6;
      long long v111 = v52;
      goto LABEL_91;
    }
    unsigned int v113 = *v40;
    if (v112 < v113)
    {
      uint64_t v110 = -7;
      long long v111 = v40;
      goto LABEL_88;
    }
    unsigned int v112 = *v53;
    if (v113 < v112)
    {
      uint64_t v110 = -8;
      long long v111 = v53;
      goto LABEL_91;
    }
    unsigned int v113 = *v54;
    if (v112 < v113)
    {
      uint64_t v110 = -9;
      long long v111 = v54;
      goto LABEL_88;
    }
    unsigned int v112 = *v55;
    if (v113 < v112)
    {
      uint64_t v110 = -10;
      long long v111 = v55;
      goto LABEL_91;
    }
    unsigned int v113 = *v56;
    if (v112 < v113)
    {
      uint64_t v110 = -11;
      long long v111 = v56;
      goto LABEL_88;
    }
    unsigned int v112 = *v57;
    if (v113 < v112)
    {
      uint64_t v110 = -12;
      long long v111 = v57;
      goto LABEL_91;
    }
    unsigned int v113 = *v59;
    if (v112 < v113)
    {
      uint64_t v110 = -13;
      long long v111 = v59;
      goto LABEL_88;
    }
    unsigned int v112 = *v39;
    if (v113 < v112)
    {
      uint64_t v110 = -14;
      long long v111 = v39;
      goto LABEL_91;
    }
    unsigned int v113 = *v58;
    if (v112 < v113)
    {
      uint64_t v110 = -15;
      long long v111 = v58;
      goto LABEL_88;
    }
    long long v111 = v141;
    unsigned int v112 = *v141;
    if (v113 < v112)
    {
      uint64_t v110 = -16;
      goto LABEL_91;
    }
    long long v111 = v143;
    unsigned int v113 = *v143;
    if (v112 < v113)
    {
      uint64_t v110 = -17;
      goto LABEL_88;
    }
    long long v111 = v156;
    unsigned int v112 = *v156;
    if (v113 < v112)
    {
      uint64_t v110 = -18;
      goto LABEL_91;
    }
    long long v111 = v163;
    unsigned int v113 = *v163;
    if (v112 < v113)
    {
      uint64_t v110 = -19;
      goto LABEL_88;
    }
    long long v111 = v171;
    unsigned int v112 = *v171;
    if (v113 < v112)
    {
      uint64_t v110 = -20;
      goto LABEL_91;
    }
    long long v111 = v173;
    unsigned int v113 = *v173;
    if (v112 < v113)
    {
      uint64_t v110 = -21;
      goto LABEL_88;
    }
    unsigned int v112 = *v38;
    if (v113 < v112)
    {
      uint64_t v110 = -22;
      long long v111 = v38;
      goto LABEL_91;
    }
    unsigned int v113 = *v42;
    if (v112 < v113)
    {
      uint64_t v110 = -23;
      long long v111 = v42;
      goto LABEL_88;
    }
    long long v111 = v180;
    unsigned int v112 = *v180;
    if (v113 >= v112) {
      break;
    }
    uint64_t v110 = -24;
LABEL_91:
    double v114 = v43;
    do
    {
      unsigned int v116 = *--v114;
      unsigned __int8 v115 = v116;
    }
    while (v116 >= v112);
    unsigned __int8 *v111 = v115;
    unsigned __int8 *v114 = v112;
    double v58 = v182;
    if (v108 >= v109)
    {
      unint64_t v117 = (unint64_t)&v41[v110];
      uint64_t v118 = v44;
      do
      {
        unsigned __int8 v119 = *(unsigned char *)(v117 - 1);
        *(unsigned char *)(v117 - 1) = *v118;
        *v118-- = v119;
        BOOL v120 = v117++ >= (unint64_t)v118;
      }
      while (!v120);
    }
  }
  unsigned int v113 = *v36;
  if (v112 < v113)
  {
    uint64_t v110 = -25;
    long long v111 = v36;
    goto LABEL_88;
  }
  uint64_t v121 = v36 + 1;
  do
  {
    unsigned __int8 v122 = *(v121 - 1);
    *(v121 - 1) = *v44;
    *v44-- = v122;
    BOOL v120 = v121++ >= v44;
  }
  while (!v120);
  operator delete(v36);
}

void sub_1A1EEE80C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::LayerData::~LayerData(gdc::LayerData *this)
{
  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2 != *((void **)this + 6)) {
    free(v2);
  }
}

uint64_t std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = (float *)(*(void *)(result + 8) + 4);
  do
  {
    v8[0] = xmmword_1A28FCEA0;
    v8[1] = xmmword_1A28FCEA0;
    v8[2] = xmmword_1A28FCFB0;
    void v8[3] = xmmword_1A28FCFC0;
    v8[4] = xmmword_1A28FCFD0;
    v8[5] = xmmword_1A28FCFE0;
    v8[6] = xmmword_1A28FCFF0;
    v8[7] = xmmword_1A28FD000;
    v8[8] = xmmword_1A28FD010;
    uint64_t v9 = 0x3E8483EDBF7746EDLL;
    int v10 = 0;
    float32x2_t v4 = vmul_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)((char *)v8 + v2 + 4));
    float v5 = (float)(v4.f32[0] + (float)(*(float *)a2 * *(float *)((char *)v8 + v2))) + v4.f32[1];
    float v6 = fminf(v5, *(v3 - 1));
    float v7 = fmaxf(*v3, v5);
    *(v3 - 1) = v6;
    *unint64_t v3 = v7;
    v2 += 12;
    v3 += 2;
  }
  while (v2 != 156);
  return result;
}

uint64_t std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5768C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5768C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_1>,void ()(gm::Matrix<float,3,1> const&)>::~__func()
{
}

void std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(char ***)(a1 + 8);
  float v5 = v3[1];
  unint64_t v4 = (unint64_t)v3[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *v3;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v3) >> 2);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      float v13 = (char *)operator new(12 * v12);
    }
    else
    {
      float v13 = 0;
    }
    float v14 = &v13[12 * v9];
    *(void *)float v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    float v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        uint64_t v15 = *(void *)(v5 - 12);
        v5 -= 12;
        int v16 = *((_DWORD *)v5 + 2);
        *(void *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v5 != v8);
      float v5 = *v3;
    }
    *uint64_t v3 = v14;
    v3[1] = v7;
    v3[2] = &v13[12 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(void *)float v5 = v6;
    float v7 = v5 + 12;
  }
  v3[1] = v7;
}

uint64_t std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576878;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576878;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0,std::allocator<md::ARAssetOcclusionMeshData::ARAssetOcclusionMeshData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,std::shared_ptr<md::DaVinciAssetOcclusionMeshResource> &)::$_0>,void ()(gm::Matrix<float,3,1> const&)>::~__func()
{
}

void *_getConfigStoreStringKeysForStateCapture()
{
  return &unk_1EF5BB478;
}

uint64_t VectorKitConfig_GetUserDefaultStringKeysForWatchSync()
{
  return MEMORY[0x1E4F1CBF0];
}

uint64_t VectorKitConfig_GetConfigStoreStringKeysForWatchSync()
{
  return MEMORY[0x1E4F1CBF0];
}

void ggl::Circle::FillPipelineState::~FillPipelineState(ggl::Circle::FillPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Circle::FillPipelineSetup::textureIsEnabled(ggl::Circle::FillPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Circle::FillPipelineSetup::constantDataIsEnabled(ggl::Circle::FillPipelineSetup *this, unint64_t a2)
{
  if (a2 < 2) {
    return 1;
  }
  if (a2 == 2) {
    return *(unsigned char *)(*((void *)this + 2) + 304) != 0;
  }
  return 0;
}

void ggl::Circle::FillPipelineSetup::~FillPipelineSetup(ggl::Circle::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::Circle::FillPipelineSetup::FillPipelineSetup(ggl::Circle::FillPipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
      unk_1EB32B400 = 1;
    }
    ggl::Circle::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
    unk_1EB323970 = &ggl::Circle::pipelineDataFillPipelineDeviceStructs(void)::ref;
    qword_1EB323978 = 0;
    {
      ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Circle::Style::reflection(void)::reflection;
      *(void *)algn_1EB3239A8 = ggl::Circle::View::reflection(void)::reflection;
      qword_1EB3239B0 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
    }
    qword_1EB323980 = (uint64_t)&ggl::Circle::pipelineDataFillPipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1EB323988 = xmmword_1A28FCD30;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::Circle::FillPipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF560C00;
  return result;
}

__n128 *karo::media::C3mSceneGraph::push_back(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(__n128 **)(a1 + 32);
  if ((unint64_t)v3 >= *(void *)(a1 + 40))
  {
    uint64_t result = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 24, *a2);
  }
  else
  {
    unint64_t v4 = a2->n128_u64[1];
    v3->n128_u64[0] = a2->n128_u64[0];
    v3->n128_u64[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t result = v3 + 1;
  }
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(void *a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (uint64_t (**)(void *))&unk_1EF578F48;
  v216[0] = &unk_1EF578F48;
  v216[1] = a3;
  long long v217 = v216;
  if (a1 == a2) {
    return v4[4](v216);
  }
  float v5 = a1;
  do
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (uint64_t)v217;
    if (!v217) {
      goto LABEL_8;
    }
    if (v217 != v216)
    {
      uint64_t v7 = (*(uint64_t (**)(void *))(*v217 + 16))(v217);
LABEL_8:
      long long v219 = (void *)v7;
      goto LABEL_10;
    }
    long long v219 = v218;
    (*(void (**)(void *, void *))(v216[0] + 24))(v216, v218);
LABEL_10:
    if (!*(unsigned char *)(v6 + 912)) {
      goto LABEL_151;
    }
    uint64_t v8 = *(void *)(v6 + 816);
    uint64_t v9 = *(void *)(v6 + 808);
    if (v8 != v9)
    {
      uint64_t v10 = *(void *)(v6 + 816);
      do
      {
        unint64_t v12 = *(void **)(v10 - 24);
        v10 -= 24;
        unint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v9);
    }
    *(void *)(v6 + 816) = v9;
    *(void *)(v6 + 792) = *(void *)(v6 + 784);
    float v13 = *(void **)(v6 + 864);
    if (v13)
    {
      do
      {
        if (v13[1])
        {
          unint64_t v15 = 0;
          int v16 = v13 + 2;
          float v17 = v13 + 2;
          float v18 = (void (***)(void))(v13 + 2);
          do
          {
            float32_t v19 = (void (**)(void *))*v18;
            v18 += 15;
            (*v19)(v17);
            ++v15;
            v16 += 15;
            float v17 = v18;
          }
          while (v15 < v13[1]);
        }
        v13[1] = 0;
        float v13 = (void *)*v13;
      }
      while (v13);
      uint64_t v14 = *(void *)(v6 + 864);
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(void *)(v6 + 872) = v14;
    uint64_t v20 = (uint64_t)v219;
    long long v205 = v5;
    if (!v219) {
      goto LABEL_27;
    }
    if (v219 != v218)
    {
      uint64_t v20 = (*(uint64_t (**)(void *))(*v219 + 16))(v219);
LABEL_27:
      long long v221 = (void *)v20;
      goto LABEL_29;
    }
    long long v221 = v220;
    (*(void (**)(void *, void *))(v218[0] + 24))(v218, v220);
LABEL_29:
    if (*(unsigned char *)(v6 + 912))
    {
      if (*(unsigned char *)(v6 + 136))
      {
        uint64_t v21 = *(void *)(*(void *)(v6 + 8) + 56);
        *(void *)(v6 + 40) = v21;
        BOOL v22 = *(unsigned __int8 *)(v21 + 58) == 1;
        if (!*(unsigned char *)(v6 + 264)) {
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v22 = 0;
        if (!*(unsigned char *)(v6 + 264)) {
          goto LABEL_34;
        }
      }
      uint64_t v23 = *(void *)(*(void *)(v6 + 8) + 64);
      *(void *)(v6 + 168) = v23;
      if (*(unsigned char *)(v23 + 58) == 1) {
        BOOL v22 = 1;
      }
LABEL_34:
      if (*(unsigned char *)(v6 + 392))
      {
        uint64_t v24 = *(void *)(*(void *)(v6 + 8) + 72);
        *(void *)(v6 + 296) = v24;
        if (*(unsigned char *)(v24 + 58) == 1) {
          BOOL v22 = 1;
        }
      }
      if (*(unsigned char *)(v6 + 520))
      {
        uint64_t v25 = *(void *)(*(void *)(v6 + 8) + 80);
        *(void *)(v6 + 424) = v25;
        if (*(unsigned char *)(v25 + 58) == 1) {
          BOOL v22 = 1;
        }
      }
      if (*(unsigned char *)(v6 + 648))
      {
        uint64_t v26 = *(void *)(*(void *)(v6 + 8) + 88);
        *(void *)(v6 + 552) = v26;
        if (*(unsigned char *)(v26 + 58) == 1) {
          BOOL v22 = 1;
        }
      }
      if (*(unsigned char *)(v6 + 776))
      {
        uint64_t v27 = *(void *)(*(void *)(v6 + 8) + 96);
        *(void *)(v6 + 680) = v27;
        if (*(unsigned char *)(v27 + 58) == 1) {
          BOOL v22 = 1;
        }
      }
      long long v206 = (long long **)(v6 + 784);
      float32x4_t v28 = *(uint64_t **)(v6 + 888);
      float32x4_t v29 = *(uint64_t **)(v6 + 896);
      if (v28 != v29)
      {
        uint64_t v30 = 0;
        while (1)
        {
          uint64_t v31 = *v28;
          if (*(unsigned char *)(*v28 + 48))
          {
            if (*(void *)(v31 + 88) != v30)
            {
              if (v30)
              {
                uint64_t v32 = ggl::Batcher::commit(v206, 0xC8u, a4);
                if (v32[1] != *v32)
                {
                  float32x4_t v33 = v32;
                  if (*(unsigned char *)(v6 + 136))
                  {
                    long long v35 = *(_OWORD *)(v6 + 24);
                    long long v34 = *(_OWORD *)(v6 + 40);
                    long long v36 = *(_OWORD *)(v6 + 56);
                    long long v37 = *(_OWORD *)(v6 + 72);
                    long long v38 = *(_OWORD *)(v6 + 88);
                    long long v39 = *(_OWORD *)(v6 + 120);
                    long long v214 = *(_OWORD *)(v6 + 104);
                    long long v215 = v39;
                    long long v208 = &off_1EF55A458;
                    long long v209 = v35;
                    long long v210 = v34;
                    long long v212 = v37;
                    long long v213 = v38;
                    long long v211 = v36;
                    uint64_t v40 = *(void **)(v6 + 872);
                    uint64_t v41 = v40[1];
                    if (v41 == *(void *)(v6 + 880))
                    {
                      uint64_t v40 = (void *)*v40;
                      if (!v40)
                      {
                        uint64_t v40 = malloc_type_malloc(120 * v41 + 16, 0xB644C221uLL);
                        *uint64_t v40 = 0;
                        v40[1] = 0;
                        **(void **)(v6 + 872) = v40;
                      }
                      *(void *)(v6 + 872) = v40;
                      uint64_t v41 = v40[1];
                    }
                    uint64_t v42 = &v40[15 * v41];
                    v40[1] = v41 + 1;
                    v42[2] = &off_1EF55A458;
                    long long v43 = v214;
                    long long v44 = v215;
                    long long v45 = v213;
                    *(_OWORD *)(v42 + 9) = v212;
                    long long v46 = v209;
                    long long v47 = v210;
                    *(_OWORD *)(v42 + 7) = v211;
                    *(_OWORD *)(v42 + 5) = v47;
                    *(_OWORD *)(v42 + 3) = v46;
                    *(_OWORD *)(v42 + 15) = v44;
                    *(_OWORD *)(v42 + 13) = v43;
                    *(_OWORD *)(v42 + 11) = v45;
                    v42[10] = v30;
                    long long v48 = *v33;
                    v42[13] = *v33;
                    v42[14] = (v33[1] - v48) >> 4;
                    int v207 = 0;
                    long long v208 = (void (**)(ggl::RenderItem *__hidden))(v42 + 2);
                    if (!v221) {
                      goto LABEL_160;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
                  }
                  if (*(unsigned char *)(v6 + 264))
                  {
                    long long v208 = &off_1EF55A458;
                    long long v49 = *(_OWORD *)(v6 + 168);
                    long long v209 = *(_OWORD *)(v6 + 152);
                    long long v210 = v49;
                    long long v50 = *(_OWORD *)(v6 + 248);
                    long long v51 = *(_OWORD *)(v6 + 216);
                    long long v214 = *(_OWORD *)(v6 + 232);
                    long long v215 = v50;
                    long long v52 = *(_OWORD *)(v6 + 200);
                    long long v211 = *(_OWORD *)(v6 + 184);
                    long long v212 = v52;
                    long long v213 = v51;
                    double v53 = *(void **)(v6 + 872);
                    uint64_t v54 = v53[1];
                    if (v54 == *(void *)(v6 + 880))
                    {
                      double v53 = (void *)*v53;
                      if (!v53)
                      {
                        double v53 = malloc_type_malloc(120 * v54 + 16, 0xB644C221uLL);
                        void *v53 = 0;
                        v53[1] = 0;
                        **(void **)(v6 + 872) = v53;
                      }
                      *(void *)(v6 + 872) = v53;
                      uint64_t v54 = v53[1];
                    }
                    double v55 = &v53[15 * v54];
                    v53[1] = v54 + 1;
                    v55[2] = &off_1EF55A458;
                    long long v56 = v214;
                    long long v57 = v215;
                    long long v58 = v213;
                    *(_OWORD *)(v55 + 9) = v212;
                    long long v59 = v209;
                    long long v60 = v210;
                    *(_OWORD *)(v55 + 7) = v211;
                    *(_OWORD *)(v55 + 5) = v60;
                    *(_OWORD *)(v55 + 3) = v59;
                    *(_OWORD *)(v55 + 15) = v57;
                    *(_OWORD *)(v55 + 13) = v56;
                    *(_OWORD *)(v55 + 11) = v58;
                    v55[10] = v30;
                    long long v61 = *v33;
                    v55[13] = *v33;
                    v55[14] = (v33[1] - v61) >> 4;
                    int v207 = 1;
                    long long v208 = (void (**)(ggl::RenderItem *__hidden))(v55 + 2);
                    if (!v221) {
                      goto LABEL_160;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
                  }
                  if (*(unsigned char *)(v6 + 392))
                  {
                    long long v208 = &off_1EF55A458;
                    long long v62 = *(_OWORD *)(v6 + 296);
                    long long v209 = *(_OWORD *)(v6 + 280);
                    long long v210 = v62;
                    long long v63 = *(_OWORD *)(v6 + 376);
                    long long v64 = *(_OWORD *)(v6 + 344);
                    long long v214 = *(_OWORD *)(v6 + 360);
                    long long v215 = v63;
                    long long v65 = *(_OWORD *)(v6 + 328);
                    long long v211 = *(_OWORD *)(v6 + 312);
                    long long v212 = v65;
                    long long v213 = v64;
                    long long v66 = *(void **)(v6 + 872);
                    uint64_t v67 = v66[1];
                    if (v67 == *(void *)(v6 + 880))
                    {
                      long long v66 = (void *)*v66;
                      if (!v66)
                      {
                        long long v66 = malloc_type_malloc(120 * v67 + 16, 0xB644C221uLL);
                        void *v66 = 0;
                        v66[1] = 0;
                        **(void **)(v6 + 872) = v66;
                      }
                      *(void *)(v6 + 872) = v66;
                      uint64_t v67 = v66[1];
                    }
                    double v68 = &v66[15 * v67];
                    v66[1] = v67 + 1;
                    v68[2] = &off_1EF55A458;
                    long long v69 = v214;
                    long long v70 = v215;
                    long long v71 = v213;
                    *(_OWORD *)(v68 + 9) = v212;
                    long long v72 = v209;
                    long long v73 = v210;
                    *(_OWORD *)(v68 + 7) = v211;
                    *(_OWORD *)(v68 + 5) = v73;
                    *(_OWORD *)(v68 + 3) = v72;
                    *(_OWORD *)(v68 + 15) = v70;
                    *(_OWORD *)(v68 + 13) = v69;
                    *(_OWORD *)(v68 + 11) = v71;
                    v68[10] = v30;
                    BOOL v74 = *v33;
                    v68[13] = *v33;
                    v68[14] = (v33[1] - v74) >> 4;
                    int v207 = 2;
                    long long v208 = (void (**)(ggl::RenderItem *__hidden))(v68 + 2);
                    if (!v221) {
                      goto LABEL_160;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
                  }
                  if (*(unsigned char *)(v6 + 520))
                  {
                    long long v208 = &off_1EF55A458;
                    long long v75 = *(_OWORD *)(v6 + 424);
                    long long v209 = *(_OWORD *)(v6 + 408);
                    long long v210 = v75;
                    long long v76 = *(_OWORD *)(v6 + 504);
                    long long v77 = *(_OWORD *)(v6 + 472);
                    long long v214 = *(_OWORD *)(v6 + 488);
                    long long v215 = v76;
                    long long v78 = *(_OWORD *)(v6 + 456);
                    long long v211 = *(_OWORD *)(v6 + 440);
                    long long v212 = v78;
                    long long v213 = v77;
                    float v79 = *(void **)(v6 + 872);
                    uint64_t v80 = v79[1];
                    if (v80 == *(void *)(v6 + 880))
                    {
                      float v79 = (void *)*v79;
                      if (!v79)
                      {
                        float v79 = malloc_type_malloc(120 * v80 + 16, 0xB644C221uLL);
                        void *v79 = 0;
                        v79[1] = 0;
                        **(void **)(v6 + 872) = v79;
                      }
                      *(void *)(v6 + 872) = v79;
                      uint64_t v80 = v79[1];
                    }
                    float v81 = &v79[15 * v80];
                    v79[1] = v80 + 1;
                    v81[2] = &off_1EF55A458;
                    long long v82 = v214;
                    long long v83 = v215;
                    long long v84 = v213;
                    *(_OWORD *)(v81 + 9) = v212;
                    long long v85 = v209;
                    long long v86 = v210;
                    *(_OWORD *)(v81 + 7) = v211;
                    *(_OWORD *)(v81 + 5) = v86;
                    *(_OWORD *)(v81 + 3) = v85;
                    *(_OWORD *)(v81 + 15) = v83;
                    *(_OWORD *)(v81 + 13) = v82;
                    *(_OWORD *)(v81 + 11) = v84;
                    v81[10] = v30;
                    float32x4_t v87 = *v33;
                    v81[13] = *v33;
                    v81[14] = (v33[1] - v87) >> 4;
                    int v207 = 3;
                    long long v208 = (void (**)(ggl::RenderItem *__hidden))(v81 + 2);
                    if (!v221) {
                      goto LABEL_160;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
                  }
                  if (*(unsigned char *)(v6 + 648))
                  {
                    long long v208 = &off_1EF55A458;
                    long long v88 = *(_OWORD *)(v6 + 552);
                    long long v209 = *(_OWORD *)(v6 + 536);
                    long long v210 = v88;
                    long long v89 = *(_OWORD *)(v6 + 632);
                    long long v90 = *(_OWORD *)(v6 + 600);
                    long long v214 = *(_OWORD *)(v6 + 616);
                    long long v215 = v89;
                    long long v91 = *(_OWORD *)(v6 + 584);
                    long long v211 = *(_OWORD *)(v6 + 568);
                    long long v212 = v91;
                    long long v213 = v90;
                    double v92 = *(void **)(v6 + 872);
                    uint64_t v93 = v92[1];
                    if (v93 == *(void *)(v6 + 880))
                    {
                      double v92 = (void *)*v92;
                      if (!v92)
                      {
                        double v92 = malloc_type_malloc(120 * v93 + 16, 0xB644C221uLL);
                        *double v92 = 0;
                        v92[1] = 0;
                        **(void **)(v6 + 872) = v92;
                      }
                      *(void *)(v6 + 872) = v92;
                      uint64_t v93 = v92[1];
                    }
                    double v94 = &v92[15 * v93];
                    v92[1] = v93 + 1;
                    v94[2] = &off_1EF55A458;
                    long long v95 = v214;
                    long long v96 = v215;
                    long long v97 = v213;
                    *(_OWORD *)(v94 + 9) = v212;
                    long long v98 = v209;
                    long long v99 = v210;
                    *(_OWORD *)(v94 + 7) = v211;
                    *(_OWORD *)(v94 + 5) = v99;
                    *(_OWORD *)(v94 + 3) = v98;
                    *(_OWORD *)(v94 + 15) = v96;
                    *(_OWORD *)(v94 + 13) = v95;
                    *(_OWORD *)(v94 + 11) = v97;
                    v94[10] = v30;
                    unint64_t v100 = *v33;
                    v94[13] = *v33;
                    v94[14] = (v33[1] - v100) >> 4;
                    int v207 = 4;
                    long long v208 = (void (**)(ggl::RenderItem *__hidden))(v94 + 2);
                    if (!v221) {
                      goto LABEL_160;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
                  }
                  if (*(unsigned char *)(v6 + 776))
                  {
                    long long v208 = &off_1EF55A458;
                    long long v101 = *(_OWORD *)(v6 + 680);
                    long long v209 = *(_OWORD *)(v6 + 664);
                    long long v210 = v101;
                    long long v102 = *(_OWORD *)(v6 + 760);
                    long long v103 = *(_OWORD *)(v6 + 728);
                    long long v214 = *(_OWORD *)(v6 + 744);
                    long long v215 = v102;
                    long long v104 = *(_OWORD *)(v6 + 712);
                    long long v211 = *(_OWORD *)(v6 + 696);
                    long long v212 = v104;
                    long long v213 = v103;
                    uint64_t v105 = *(void **)(v6 + 872);
                    uint64_t v106 = v105[1];
                    if (v106 == *(void *)(v6 + 880))
                    {
                      uint64_t v105 = (void *)*v105;
                      if (!v105)
                      {
                        uint64_t v105 = malloc_type_malloc(120 * v106 + 16, 0xB644C221uLL);
                        *uint64_t v105 = 0;
                        v105[1] = 0;
                        **(void **)(v6 + 872) = v105;
                      }
                      *(void *)(v6 + 872) = v105;
                      uint64_t v106 = v105[1];
                    }
                    double v107 = &v105[15 * v106];
                    v105[1] = v106 + 1;
                    v107[2] = &off_1EF55A458;
                    long long v108 = v214;
                    long long v109 = v215;
                    long long v110 = v213;
                    *(_OWORD *)(v107 + 9) = v212;
                    long long v111 = v209;
                    long long v112 = v210;
                    *(_OWORD *)(v107 + 7) = v211;
                    *(_OWORD *)(v107 + 5) = v112;
                    *(_OWORD *)(v107 + 3) = v111;
                    *(_OWORD *)(v107 + 15) = v109;
                    *(_OWORD *)(v107 + 13) = v108;
                    *(_OWORD *)(v107 + 11) = v110;
                    v107[10] = v30;
                    unsigned int v113 = *v33;
                    v107[13] = *v33;
                    v107[14] = (v33[1] - v113) >> 4;
                    int v207 = 5;
                    long long v208 = (void (**)(ggl::RenderItem *__hidden))(v107 + 2);
                    if (!v221) {
                      goto LABEL_160;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
                  }
                }
              }
              uint64_t v31 = *v28;
              uint64_t v30 = *(void *)(*v28 + 88);
            }
            uint64_t v114 = 16;
            if (v22)
            {
              uint64_t v114 = 32;
              uint64_t v115 = v31 + 32;
            }
            else
            {
              uint64_t v115 = v31 + 16;
            }
            if (*(void *)(v115 + 8) != *(void *)(v31 + v114)) {
              gm::MultiRange<unsigned long>::push_back((char **)v206, (_OWORD *)v115);
            }
          }
          if (++v28 == v29) {
            goto LABEL_104;
          }
        }
      }
      uint64_t v30 = 0;
LABEL_104:
      unsigned int v116 = ggl::Batcher::commit(v206, 0xC8u, a4);
      if (v116[1] != *v116)
      {
        unint64_t v117 = v116;
        if (*(unsigned char *)(v6 + 136))
        {
          long long v118 = *(_OWORD *)(v6 + 40);
          long long v119 = *(_OWORD *)(v6 + 24);
          long long v120 = *(_OWORD *)(v6 + 56);
          long long v121 = *(_OWORD *)(v6 + 72);
          long long v122 = *(_OWORD *)(v6 + 88);
          long long v123 = *(_OWORD *)(v6 + 120);
          long long v214 = *(_OWORD *)(v6 + 104);
          long long v215 = v123;
          long long v208 = &off_1EF55A458;
          long long v209 = v119;
          long long v210 = v118;
          long long v212 = v121;
          long long v213 = v122;
          long long v211 = v120;
          long long v124 = *(void **)(v6 + 872);
          uint64_t v125 = v124[1];
          if (v125 == *(void *)(v6 + 880))
          {
            long long v124 = (void *)*v124;
            if (!v124)
            {
              long long v124 = malloc_type_malloc(120 * v125 + 16, 0xB644C221uLL);
              void *v124 = 0;
              v124[1] = 0;
              **(void **)(v6 + 872) = v124;
            }
            *(void *)(v6 + 872) = v124;
            uint64_t v125 = v124[1];
          }
          long long v126 = &v124[15 * v125];
          v124[1] = v125 + 1;
          v126[2] = &off_1EF55A458;
          long long v127 = v214;
          long long v128 = v215;
          long long v129 = v213;
          *(_OWORD *)(v126 + 9) = v212;
          long long v130 = v209;
          long long v131 = v210;
          *(_OWORD *)(v126 + 7) = v211;
          *(_OWORD *)(v126 + 5) = v131;
          *(_OWORD *)(v126 + 3) = v130;
          *(_OWORD *)(v126 + 15) = v128;
          *(_OWORD *)(v126 + 13) = v127;
          *(_OWORD *)(v126 + 11) = v129;
          v126[10] = v30;
          long long v132 = *v117;
          v126[13] = *v117;
          v126[14] = (v117[1] - v132) >> 4;
          int v207 = 0;
          long long v208 = (void (**)(ggl::RenderItem *__hidden))(v126 + 2);
          if (!v221)
          {
LABEL_160:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
          (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
        }
        if (*(unsigned char *)(v6 + 264))
        {
          long long v208 = &off_1EF55A458;
          long long v133 = *(_OWORD *)(v6 + 168);
          long long v209 = *(_OWORD *)(v6 + 152);
          long long v210 = v133;
          long long v134 = *(_OWORD *)(v6 + 184);
          long long v135 = *(_OWORD *)(v6 + 248);
          long long v136 = *(_OWORD *)(v6 + 216);
          long long v214 = *(_OWORD *)(v6 + 232);
          long long v215 = v135;
          long long v137 = *(_OWORD *)(v6 + 200);
          long long v211 = v134;
          long long v212 = v137;
          long long v213 = v136;
          long long v138 = *(void **)(v6 + 872);
          uint64_t v139 = v138[1];
          if (v139 == *(void *)(v6 + 880))
          {
            long long v138 = (void *)*v138;
            if (!v138)
            {
              long long v138 = malloc_type_malloc(120 * v139 + 16, 0xB644C221uLL);
              *long long v138 = 0;
              v138[1] = 0;
              **(void **)(v6 + 872) = v138;
            }
            *(void *)(v6 + 872) = v138;
            uint64_t v139 = v138[1];
          }
          long long v140 = &v138[15 * v139];
          v138[1] = v139 + 1;
          v140[2] = &off_1EF55A458;
          long long v141 = v214;
          long long v142 = v215;
          long long v143 = v213;
          *(_OWORD *)(v140 + 9) = v212;
          long long v144 = v209;
          long long v145 = v210;
          *(_OWORD *)(v140 + 7) = v211;
          *(_OWORD *)(v140 + 5) = v145;
          *(_OWORD *)(v140 + 3) = v144;
          *(_OWORD *)(v140 + 15) = v142;
          *(_OWORD *)(v140 + 13) = v141;
          *(_OWORD *)(v140 + 11) = v143;
          v140[10] = v30;
          uint64_t v146 = *v117;
          v140[13] = *v117;
          v140[14] = (v117[1] - v146) >> 4;
          int v207 = 1;
          long long v208 = (void (**)(ggl::RenderItem *__hidden))(v140 + 2);
          if (!v221) {
            goto LABEL_160;
          }
          (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
        }
        if (*(unsigned char *)(v6 + 392))
        {
          long long v208 = &off_1EF55A458;
          long long v147 = *(_OWORD *)(v6 + 296);
          long long v209 = *(_OWORD *)(v6 + 280);
          long long v210 = v147;
          long long v148 = *(_OWORD *)(v6 + 312);
          long long v149 = *(_OWORD *)(v6 + 376);
          long long v150 = *(_OWORD *)(v6 + 344);
          long long v214 = *(_OWORD *)(v6 + 360);
          long long v215 = v149;
          long long v151 = *(_OWORD *)(v6 + 328);
          long long v211 = v148;
          long long v212 = v151;
          long long v213 = v150;
          int v152 = *(void **)(v6 + 872);
          uint64_t v153 = v152[1];
          if (v153 == *(void *)(v6 + 880))
          {
            int v152 = (void *)*v152;
            if (!v152)
            {
              int v152 = malloc_type_malloc(120 * v153 + 16, 0xB644C221uLL);
              void *v152 = 0;
              v152[1] = 0;
              **(void **)(v6 + 872) = v152;
            }
            *(void *)(v6 + 872) = v152;
            uint64_t v153 = v152[1];
          }
          int v154 = &v152[15 * v153];
          v152[1] = v153 + 1;
          v154[2] = &off_1EF55A458;
          long long v155 = v214;
          long long v156 = v215;
          long long v157 = v213;
          *(_OWORD *)(v154 + 9) = v212;
          long long v158 = v209;
          long long v159 = v210;
          *(_OWORD *)(v154 + 7) = v211;
          *(_OWORD *)(v154 + 5) = v159;
          *(_OWORD *)(v154 + 3) = v158;
          *(_OWORD *)(v154 + 15) = v156;
          *(_OWORD *)(v154 + 13) = v155;
          *(_OWORD *)(v154 + 11) = v157;
          v154[10] = v30;
          long long v160 = *v117;
          v154[13] = *v117;
          v154[14] = (v117[1] - v160) >> 4;
          int v207 = 2;
          long long v208 = (void (**)(ggl::RenderItem *__hidden))(v154 + 2);
          if (!v221) {
            goto LABEL_160;
          }
          (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
        }
        if (*(unsigned char *)(v6 + 520))
        {
          long long v208 = &off_1EF55A458;
          long long v161 = *(_OWORD *)(v6 + 424);
          long long v209 = *(_OWORD *)(v6 + 408);
          long long v210 = v161;
          long long v162 = *(_OWORD *)(v6 + 440);
          long long v163 = *(_OWORD *)(v6 + 504);
          long long v164 = *(_OWORD *)(v6 + 472);
          long long v214 = *(_OWORD *)(v6 + 488);
          long long v215 = v163;
          long long v165 = *(_OWORD *)(v6 + 456);
          long long v211 = v162;
          long long v212 = v165;
          long long v213 = v164;
          float32x4_t v166 = *(void **)(v6 + 872);
          uint64_t v167 = v166[1];
          if (v167 == *(void *)(v6 + 880))
          {
            float32x4_t v166 = (void *)*v166;
            if (!v166)
            {
              float32x4_t v166 = malloc_type_malloc(120 * v167 + 16, 0xB644C221uLL);
              *float32x4_t v166 = 0;
              v166[1] = 0;
              **(void **)(v6 + 872) = v166;
            }
            *(void *)(v6 + 872) = v166;
            uint64_t v167 = v166[1];
          }
          float32x4_t v168 = &v166[15 * v167];
          v166[1] = v167 + 1;
          v168[2] = &off_1EF55A458;
          long long v169 = v214;
          long long v170 = v215;
          long long v171 = v213;
          *(_OWORD *)(v168 + 9) = v212;
          long long v172 = v209;
          long long v173 = v210;
          *(_OWORD *)(v168 + 7) = v211;
          *(_OWORD *)(v168 + 5) = v173;
          *(_OWORD *)(v168 + 3) = v172;
          *(_OWORD *)(v168 + 15) = v170;
          *(_OWORD *)(v168 + 13) = v169;
          *(_OWORD *)(v168 + 11) = v171;
          v168[10] = v30;
          float32x4_t v174 = *v117;
          v168[13] = *v117;
          v168[14] = (v117[1] - v174) >> 4;
          int v207 = 3;
          long long v208 = (void (**)(ggl::RenderItem *__hidden))(v168 + 2);
          if (!v221) {
            goto LABEL_160;
          }
          (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
        }
        if (*(unsigned char *)(v6 + 648))
        {
          long long v208 = &off_1EF55A458;
          long long v175 = *(_OWORD *)(v6 + 552);
          long long v209 = *(_OWORD *)(v6 + 536);
          long long v210 = v175;
          long long v176 = *(_OWORD *)(v6 + 568);
          long long v177 = *(_OWORD *)(v6 + 632);
          long long v178 = *(_OWORD *)(v6 + 600);
          long long v214 = *(_OWORD *)(v6 + 616);
          long long v215 = v177;
          long long v179 = *(_OWORD *)(v6 + 584);
          long long v211 = v176;
          long long v212 = v179;
          long long v213 = v178;
          v180 = *(void **)(v6 + 872);
          uint64_t v181 = v180[1];
          if (v181 == *(void *)(v6 + 880))
          {
            v180 = (void *)*v180;
            if (!v180)
            {
              v180 = malloc_type_malloc(120 * v181 + 16, 0xB644C221uLL);
              void *v180 = 0;
              v180[1] = 0;
              **(void **)(v6 + 872) = v180;
            }
            *(void *)(v6 + 872) = v180;
            uint64_t v181 = v180[1];
          }
          uint64_t v182 = &v180[15 * v181];
          v180[1] = v181 + 1;
          v182[2] = &off_1EF55A458;
          long long v183 = v214;
          long long v184 = v215;
          long long v185 = v213;
          *(_OWORD *)(v182 + 9) = v212;
          long long v186 = v209;
          long long v187 = v210;
          *(_OWORD *)(v182 + 7) = v211;
          *(_OWORD *)(v182 + 5) = v187;
          *(_OWORD *)(v182 + 3) = v186;
          *(_OWORD *)(v182 + 15) = v184;
          *(_OWORD *)(v182 + 13) = v183;
          *(_OWORD *)(v182 + 11) = v185;
          v182[10] = v30;
          float v188 = *v117;
          v182[13] = *v117;
          v182[14] = (v117[1] - v188) >> 4;
          int v207 = 4;
          long long v208 = (void (**)(ggl::RenderItem *__hidden))(v182 + 2);
          if (!v221) {
            goto LABEL_160;
          }
          (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
        }
        if (*(unsigned char *)(v6 + 776))
        {
          long long v208 = &off_1EF55A458;
          long long v189 = *(_OWORD *)(v6 + 680);
          long long v209 = *(_OWORD *)(v6 + 664);
          long long v210 = v189;
          long long v190 = *(_OWORD *)(v6 + 696);
          long long v191 = *(_OWORD *)(v6 + 760);
          long long v192 = *(_OWORD *)(v6 + 728);
          long long v214 = *(_OWORD *)(v6 + 744);
          long long v215 = v191;
          long long v193 = *(_OWORD *)(v6 + 712);
          long long v211 = v190;
          long long v212 = v193;
          long long v213 = v192;
          long long v194 = *(void **)(v6 + 872);
          uint64_t v195 = v194[1];
          if (v195 == *(void *)(v6 + 880))
          {
            long long v194 = (void *)*v194;
            if (!v194)
            {
              long long v194 = malloc_type_malloc(120 * v195 + 16, 0xB644C221uLL);
              *long long v194 = 0;
              v194[1] = 0;
              **(void **)(v6 + 872) = v194;
            }
            *(void *)(v6 + 872) = v194;
            uint64_t v195 = v194[1];
          }
          long long v196 = &v194[15 * v195];
          v194[1] = v195 + 1;
          v196[2] = &off_1EF55A458;
          long long v197 = v214;
          long long v198 = v215;
          long long v199 = v213;
          *(_OWORD *)(v196 + 9) = v212;
          long long v200 = v209;
          long long v201 = v210;
          *(_OWORD *)(v196 + 7) = v211;
          *(_OWORD *)(v196 + 5) = v201;
          *(_OWORD *)(v196 + 3) = v200;
          *(_OWORD *)(v196 + 15) = v198;
          *(_OWORD *)(v196 + 13) = v197;
          *(_OWORD *)(v196 + 11) = v199;
          v196[10] = v30;
          long long v202 = *v117;
          v196[13] = *v117;
          v196[14] = (v117[1] - v202) >> 4;
          int v207 = 5;
          long long v208 = (void (**)(ggl::RenderItem *__hidden))(v196 + 2);
          if (!v221) {
            goto LABEL_160;
          }
          (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v221 + 48))(v221, &v207, &v208);
        }
      }
    }
    if (v221 == v220)
    {
      (*(void (**)(void *))(v220[0] + 32))(v220);
      float v5 = v205;
    }
    else
    {
      float v5 = v205;
      if (v221) {
        (*(void (**)(void))(*v221 + 40))();
      }
    }
LABEL_151:
    if (v219 == v218)
    {
      (*(void (**)(void *))(v218[0] + 32))(v218);
    }
    else if (v219)
    {
      (*(void (**)(void))(*v219 + 40))();
    }
    ++v5;
  }
  while (v5 != a2);
  uint64_t result = (uint64_t)v217;
  if (v217 == v216)
  {
    unint64_t v4 = (uint64_t (**)(void *))v216[0];
    return v4[4](v216);
  }
  if (v217) {
    return (*(uint64_t (**)(void))(*v217 + 40))();
  }
  return result;
}

void sub_1A1EF076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::function<void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v31 - 160));
  std::function<void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(&a31);
  _Unwind_Resume(a1);
}

void *std::function<void ()(ggl::RenderItem *,BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::JunctionLayoutContext::~JunctionLayoutContext(md::JunctionLayoutContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::operator()(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = *a2;
  int v6 = *a3;
  *(void *)(v5 + 48) = 0;
  if (v6)
  {
    uint64_t result = *v3;
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  }
  uint64_t result = *v4;
  if (*v4) {
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  }
  return result;
}

__n128 std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576BD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576BD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::~__func()
{
}

void *std::function<void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(a1 + 8), *a3);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578F48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578F48;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void *std::function<void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578F00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

uint64_t std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576B90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576B90;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576B48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576B48;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::DaVinciHikingRenderLayer::~DaVinciHikingRenderLayer(md::DaVinciHikingRenderLayer *this)
{
  *(void *)this = &unk_1EF544EA0;
  uint64_t v2 = (uint64_t *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((void *)v2[15]);
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40455D1DCFLL);
  }
  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF544EA0;
  uint64_t v2 = (uint64_t *)*((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((void *)v2[15]);
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40455D1DCFLL);
  }
  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(this);
}

void md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(md::DaVinciCenterLineRoadsRenderLayer *this)
{
  *(void *)this = &unk_1EF54DC20;
  uint64_t v2 = (void *)*((void *)this + 51);
  if (v2)
  {
    *((void *)this + 52) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v3)
  {
    uint64_t v7 = v3;
    std::vector<md::RoadStyling::Entry>::__destroy_vector::operator()[abi:nn180100](&v7);
    MEMORY[0x1A6239270](v3, 0x20C40960023A9);
  }
  uint64_t v4 = (md::RoadSharedResources *)*((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v4)
  {
    md::RoadSharedResources::~RoadSharedResources(v4);
    MEMORY[0x1A6239270]();
  }
  uint64_t v5 = (md::RoadSharedResources *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v5)
  {
    md::RoadSharedResources::~RoadSharedResources(v5);
    MEMORY[0x1A6239270]();
  }
  int v6 = (md::PatternedSharedResources *)*((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v6)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v6);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(this);
}

{
  uint64_t vars8;

  md::DaVinciCenterLineRoadsRenderLayer::~DaVinciCenterLineRoadsRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

void std::vector<md::RoadStyling::Entry>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    int v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 4);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 4);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 48;
  }
  while (v4 != v2);
  uint64_t v5 = **a1;
LABEL_14:
  v1[1] = v2;
  operator delete(v5);
}

void md::RoadSharedResources::~RoadSharedResources(md::RoadSharedResources *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  md::RoadSharedPipelineStates::~RoadSharedPipelineStates(this);
}

void md::PatternedSharedResources::~PatternedSharedResources(md::PatternedSharedResources *this)
{
  std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::~__hash_table((uint64_t)this + 56);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(v3 + 104));
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x1A6239270](v3, 0x1020C40AD78EA61);
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)this;
  *(void *)this = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
}

void md::RoadSharedPipelineStates::~RoadSharedPipelineStates(md::RoadSharedPipelineStates *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = *(void *)this;
  *(void *)this = 0;
  if (v6)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(v6 + 104));
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 8);
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    MEMORY[0x1A6239270](v6, 0x1020C40AD78EA61);
  }
}

void md::mun::cameraFrameFromStorefront(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 lookAt];
  double v4 = *(double *)v27;
  [v3 lookAt];
  double v5 = *((double *)&v24 + 1);
  [v3 lookAt];
  uint64_t v6 = [v3 imageryInfo];
  uint64_t v7 = v6;
  if (v6)
  {
    [v6 position];
    double v8 = *(double *)&v27[8];
    double v9 = *(double *)v27;
    double v10 = *(double *)&v27[16];
  }
  else
  {
    memset(v27, 0, sizeof(v27));
    double v10 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
  }

  double v11 = 1.0 / sqrt(v9 * v9 + v8 * v8 + v10 * v10);
  double v12 = v11 * v9;
  double v13 = v11 * v8;
  double v14 = v11 * v10;
  double v15 = 1.0 / sqrt((v4 - v9) * (v4 - v9) + (v5 - v8) * (v5 - v8) + (v23 - v10) * (v23 - v10));
  double v16 = -((v4 - v9) * v15);
  double v17 = -((v5 - v8) * v15);
  double v18 = -((v23 - v10) * v15);
  double v19 = -(v17 * v14 - v18 * v13);
  double v20 = -(v18 * v12 - v16 * v14);
  double v21 = -(v16 * v13 - v17 * v12);
  double v22 = 1.0 / sqrt(v19 * v19 + v20 * v20 + v21 * v21);
  *(double *)uint64_t v27 = v22 * v19;
  *(double *)&v27[8] = v22 * v20;
  *(double *)&v27[16] = v22 * v21;
  *(double *)&v27[24] = -(v22 * v20 * v18 - v22 * v21 * v17);
  *(double *)&v27[32] = -(v22 * v21 * v16 - v22 * v19 * v18);
  double v28 = -(v22 * v19 * v17 - v22 * v20 * v16);
  double v29 = v16;
  double v30 = v17;
  double v31 = v18;
  gm::quaternionFromRotationMatrix<double>((double *)&v24, (double *)v27);
  *(double *)uint64_t v27 = v9;
  *(double *)&v27[8] = v8;
  *(double *)&v27[16] = v10;
  *(_OWORD *)&v27[24] = v24;
  double v28 = v25;
  double v29 = v26;
  gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset(a1, (double *)v27);
}

void sub_1A1EF186C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset(uint64_t a1, double *a2)
{
  long long v34 = *(_OWORD *)a2;
  double v35 = a2[2];
  long long v4 = v34;
  long double v5 = v35;
  gdc::CameraFrame<geo::Radians,double>::createLocalEcefFrame((uint64_t)v29, (uint64_t)&v34);
  double v7 = a2[3];
  double v8 = a2[4];
  double v9 = a2[5];
  double v10 = a2[6];
  double v11 = v7 * v33 + v8 * v32 - (v9 * v31 + v10 * v30);
  double v12 = v8 * v33 + v9 * v30 - (v7 * v32 + v10 * v31);
  double v13 = v7 * v31 + v9 * v33 - (v8 * v30 + v10 * v32);
  double v14 = v7 * v30 + v8 * v31 + v9 * v32 + v10 * v33;
  *(double *)v15.i64 = -(v11 * v14 - v13 * v12) * -2.0;
  if (fabs(*(double *)v15.i64) >= 1.0)
  {
    v6.i64[0] = 0x3FF921FB54442D18;
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    *(void *)&double v16 = vbslq_s8((int8x16_t)vnegq_f64(v17), v6, v15).u64[0];
  }
  else
  {
    double v16 = asin(*(long double *)v15.i64);
  }
  double v28 = v16;
  double v27 = atan2(v14 * v13 + v11 * v12 + v14 * v13 + v11 * v12, 1.0 - (v11 * v11 + v13 * v13) * 2.0);
  double v18 = sqrt(*(double *)&v4 * *(double *)&v4 + *((double *)&v4 + 1) * *((double *)&v4 + 1));
  double v19 = atan2(v5, v18 * 0.996647189);
  __double2 v20 = __sincos_stret(v19);
  double v21 = atan2(v5 + v20.__sinval * v20.__sinval * 42841.3115 * v20.__sinval, v18 + v20.__cosval * v20.__cosval * -42697.6727 * v20.__cosval);
  __double2 v22 = __sincos_stret(v21);
  double v23 = v18 / v22.__cosval + -6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
  long double v24 = atan2(*((long double *)&v4 + 1), *(long double *)&v4);
  long double v25 = atan2(v14 * v12 + v11 * v13 + v14 * v12 + v11 * v13, 1.0 - (v11 * v11 + v12 * v12) * 2.0);
  *(double *)a1 = v21;
  *(long double *)(a1 + 8) = v24;
  *(double *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = -v28;
  *(long double *)(a1 + 40) = v25;
  double result = -v27;
  *(double *)(a1 + 48) = -v27;
  return result;
}

void gdc::CameraFrame<geo::Radians,double>::createLocalEcefFrame(uint64_t a1, uint64_t a2)
{
  gdc::CameraFrame<geo::Radians,double>::createLocalEcefBasis(&v22, (double *)a2);
  double v4 = v30 + v26 + v22;
  if (v4 <= 0.0)
  {
    if (v22 <= v26 || v22 <= v30)
    {
      double v11 = sqrt(1.0 - (v26 + v22) + v30);
      double v12 = 1.0 / (v11 + v11);
      double v13 = (v28 + v24) * v12;
      double v14 = (v29 + v27) * v12;
      double v15 = v11 * 0.5;
      double v16 = (v23 - v25) * v12;
      double v17 = sqrt(v26 + 1.0 - (v22 + v30));
      double v18 = 1.0 / (v17 + v17);
      double v7 = v17 * 0.5;
      double v9 = (v28 - v24) * v18;
      if (v26 > v30) {
        double v6 = (v25 + v23) * v18;
      }
      else {
        double v6 = v13;
      }
      if (v26 > v30)
      {
        double v8 = (v29 + v27) * v18;
      }
      else
      {
        double v7 = v14;
        double v8 = v15;
      }
      if (v26 <= v30) {
        double v9 = v16;
      }
    }
    else
    {
      double v19 = sqrt(v22 + 1.0 - (v26 + v30));
      double v20 = v19 + v19;
      double v6 = v19 * 0.5;
      double v21 = 1.0 / v20;
      double v7 = (v25 + v23) * (1.0 / v20);
      double v8 = (v28 + v24) * v21;
      double v9 = (v27 - v29) * v21;
    }
  }
  else
  {
    double v5 = 0.5 / sqrt(v4 + 1.0);
    double v6 = v5 * (v27 - v29);
    double v7 = v5 * (v28 - v24);
    double v8 = v5 * (v23 - v25);
    double v9 = 0.25 / v5;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(double *)(a1 + 24) = v6;
  *(double *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = v8;
  *(double *)(a1 + 48) = v9;
}

long double gdc::CameraFrame<geo::Radians,double>::createLocalEcefBasis(double *a1, double *a2)
{
  long double v3 = *a2;
  long double v4 = a2[1];
  long double v5 = a2[2];
  double v29 = v3 * v3 + v4 * v4;
  double v6 = sqrt(v29);
  double v7 = atan2(v5, v6 * 0.996647189);
  double v8 = atan2(v4, v3);
  __double2 v9 = __sincos_stret(v7);
  double v10 = atan2(v5 + v9.__sinval * v9.__sinval * 42841.3115 * v9.__sinval, v6 + v9.__cosval * v9.__cosval * -42697.6727 * v9.__cosval);
  __double2 v11 = __sincos_stret(v10);
  double v12 = v6 / v11.__cosval;
  __double2 v13 = __sincos_stret(v8 + 0.00001);
  double v14 = 1.0 / sqrt(v29 + v5 * v5);
  long double v15 = v14 * v3;
  long double v16 = v14 * v4;
  long double v17 = v14 * v5;
  a1[4] = v16;
  a1[5] = v17;
  long double v18 = -(v3 - v12 * v11.__cosval * v13.__cosval);
  long double v19 = -(v4 - v12 * v11.__cosval * v13.__sinval);
  long double v20 = -(v5 - (v12 + -42697.6727 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0)) * v11.__sinval);
  double v21 = 1.0 / sqrt(v18 * v18 + v19 * v19 + v20 * v20);
  long double v22 = v21 * v18;
  long double v23 = v21 * v19;
  long double v24 = v21 * v20;
  long double v25 = -(v24 * v16 - v23 * v17);
  long double v26 = -(v22 * v17 - v24 * v15);
  long double v27 = -(v23 * v15 - v22 * v16);
  a1[6] = v25;
  a1[7] = v26;
  a1[8] = v27;
  *a1 = -(v26 * v17 - v27 * v16);
  a1[1] = -(v27 * v15 - v25 * v17);
  long double result = -(v25 * v16 - v26 * v15);
  a1[2] = result;
  a1[3] = v15;
  return result;
}

uint64_t md::RoadPosition::debugString@<X0>(md::RoadPosition *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v18);
  long double v4 = (float *)(*(uint64_t (**)(md::RoadPosition *))(*(void *)this + 56))(this);
  md::LabelPoint::mercatorPoint((md::LabelPoint *)v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
  long double v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  std::ostream::operator<<();
  if (v4[10] != 3.4028e38)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"), ", 3);
  unint64_t v6 = *((unsigned __int8 *)this + 9);
  if (v6 <= 8) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)off_1E5A8D998[v6], qword_1A2900228[v6]);
  }
  unint64_t v7 = *((unsigned __int8 *)this + 45);
  if (v7 <= 2) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)off_1E5A8D9E0[v7], 1);
  }
  if ((*(unsigned int (**)(md::RoadPosition *))(*(void *)this + 80))(this)) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"[Reversed]", 10);
  }
  if ((*(unsigned int (**)(md::RoadPosition *))(*(void *)this + 88))(this)) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"[HasAntn]", 9);
  }
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    if (((unint64_t)*((unsigned int *)this + 3) >> v8))
    {
      if ((v9 & 1) == 0) {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
      }
      std::ostream::operator<<();
      char v9 = 0;
    }
    ++v8;
  }
  while (v8 != 24);
  if ((v25 & 0x10) != 0)
  {
    unint64_t v11 = v24;
    if (v24 < v21)
    {
      unint64_t v24 = v21;
      unint64_t v11 = v21;
    }
    double v12 = (const void **)&v20;
  }
  else
  {
    if ((v25 & 8) == 0)
    {
      size_t v10 = 0;
      a2[23] = 0;
      goto LABEL_32;
    }
    double v12 = (const void **)v19;
    unint64_t v11 = v19[2];
  }
  __double2 v13 = *v12;
  size_t v10 = v11 - (void)*v12;
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    long double v16 = operator new(v14 + 1);
    *((void *)a2 + 1) = v10;
    *((void *)a2 + 2) = v15 | 0x8000000000000000;
    *(void *)a2 = v16;
    a2 = v16;
    goto LABEL_31;
  }
  a2[23] = v10;
  if (v10) {
LABEL_31:
  }
    memmove(a2, v13, v10);
LABEL_32:
  a2[v10] = 0;
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v26);
}

void sub_1A1EF2174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::TrailJunctionsResource::updateWithContext(md::TrailJunctionsResource *this, const md::JunctionLayoutContext *a2, const QuadTile *a3)
{
  long double v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    long long v110 = (float *)((char *)this + 56);
    float32x4_t v111 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      unint64_t v6 = v3[2];
      v114[0] = v3 + 2;
      unint64_t v7 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(v110, v6, v114);
      uint64_t v8 = v3[2];
      char v9 = (std::__shared_weak_count *)v3[3];
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v112 = v8;
        unsigned int v113 = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v112 = v3[2];
        unsigned int v113 = 0;
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v114, v8, (uint64_t)v9);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v115)
      {
        uint64_t v10 = v114[0][3];
        if ((int)*((float *)a2 + 6) >= 0x17) {
          unsigned int v11 = 23;
        }
        else {
          unsigned int v11 = (int)*((float *)a2 + 6);
        }
        double v12 = *(float **)v10;
        if (*(void *)v10
          && (float v13 = *v12, LODWORD(v12) = *v12 == 1.0, *(unsigned char *)(v10 + 10))
          && (v13 != 0.0 ? (BOOL v14 = v13 == 1.0) : (BOOL v14 = 1), !v14)
          || (v15 = *(unsigned __int8 *)(v10 + v12 + 11), float v13 = 0.0, v15 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          char v16 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v10, 0x6Cu, v11, 0, &v112);
          char v17 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v10, 0x6Cu, v11, 1, v116);
          if (v13 < 1.0) {
            char v17 = v16;
          }
        }
        else
        {
          char v17 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v114[0] + 3), 0x6Cu, v11, v15, 0);
        }
        float v19 = *((float *)a2 + 6);
        if (v17)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x5Cu, 2u, fminf(fmaxf(v19, 0.0), 23.0));
        }
        else
        {
          if ((int)v19 >= 0x17) {
            unsigned int v20 = 23;
          }
          else {
            unsigned int v20 = (int)v19;
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x5Cu, v20, 2u, 0);
        }
        *(float32x4_t *)((char *)v7 + 36) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v112)), v111);
        uint64_t v21 = v114[0][3];
        if ((int)*((float *)a2 + 6) >= 0x17) {
          unsigned int v22 = 23;
        }
        else {
          unsigned int v22 = (int)*((float *)a2 + 6);
        }
        char v23 = *(float **)v21;
        if (*(void *)v21
          && (float v24 = *v23, LODWORD(v23) = *v23 == 1.0, *(unsigned char *)(v21 + 10))
          && (v24 != 0.0 ? (BOOL v25 = v24 == 1.0) : (BOOL v25 = 1), !v25)
          || (v26 = *(unsigned __int8 *)(v21 + v23 + 11), float v24 = 0.0, v26 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          char v27 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v21, 0x6Bu, v22, 0, &v112);
          char v28 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v21, 0x6Bu, v22, 1, v116);
          if (v24 < 1.0) {
            char v28 = v27;
          }
        }
        else
        {
          char v28 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v114[0] + 3), 0x6Bu, v22, v26, 0);
        }
        float v29 = *((float *)a2 + 6);
        if (v28)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x5Du, 2u, fminf(fmaxf(v29, 0.0), 23.0));
        }
        else
        {
          if ((int)v29 >= 0x17) {
            unsigned int v30 = 23;
          }
          else {
            unsigned int v30 = (int)v29;
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x5Du, v30, 2u, 0);
        }
        *(float32x4_t *)(v7 + 7) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v112)), v111);
        uint64_t v31 = v114[0][3];
        if ((int)*((float *)a2 + 6) >= 0x17) {
          unsigned int v32 = 23;
        }
        else {
          unsigned int v32 = (int)*((float *)a2 + 6);
        }
        double v33 = *(float **)v31;
        if (*(void *)v31
          && (float v34 = *v33, LODWORD(v33) = *v33 == 1.0, *(unsigned char *)(v31 + 10))
          && v34 != 0.0
          && v34 != 1.0
          || (v35 = *(unsigned __int8 *)(v31 + v33 + 11), float v34 = 0.0, v35 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          char v36 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v31, 0x197u, v32, 0, &v112);
          char v37 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v31, 0x197u, v32, 1, v116);
          if (v34 < 1.0) {
            char v37 = v36;
          }
        }
        else
        {
          char v37 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v114[0] + 3), 0x197u, v32, v35, 0);
        }
        float v38 = *((float *)a2 + 6);
        if (v37)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x193u, 2u, fminf(fmaxf(v38, 0.0), 23.0));
        }
        else
        {
          if ((int)v38 >= 0x17) {
            unsigned int v39 = 23;
          }
          else {
            unsigned int v39 = (int)v38;
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x193u, v39, 2u, 0);
        }
        *(float32x4_t *)((char *)v7 + 76) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v112)), v111);
        uint64_t v40 = v114[0][3];
        if ((int)*((float *)a2 + 6) >= 0x17) {
          unsigned int v41 = 23;
        }
        else {
          unsigned int v41 = (int)*((float *)a2 + 6);
        }
        uint64_t v42 = *(float **)v40;
        if (*(void *)v40
          && (float v43 = *v42, LODWORD(v42) = *v42 == 1.0, *(unsigned char *)(v40 + 10))
          && v43 != 0.0
          && v43 != 1.0
          || (v44 = *(unsigned __int8 *)(v40 + v42 + 11), float v43 = 0.0, v44 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          char v45 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v40, 0x1CFu, v41, 0, &v112);
          char v46 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v40, 0x1CFu, v41, 1, v116);
          if (v43 >= 1.0) {
            char v47 = v46;
          }
          else {
            char v47 = v45;
          }
        }
        else
        {
          char v47 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v114[0] + 3), 0x1CFu, v41, v44, 0);
        }
        float v48 = *((float *)a2 + 6);
        if (v47)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x1CDu, 2u, fminf(fmaxf(v48, 0.0), 23.0));
        }
        else
        {
          if ((int)v48 >= 0x17) {
            unsigned int v49 = 23;
          }
          else {
            unsigned int v49 = (int)v48;
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x1CDu, v49, 2u, 0);
        }
        *((float32x4_t *)v7 + 6) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v112)), v111);
        unint64_t v50 = v114[0][3];
        float v51 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        long long v52 = *(float **)v50;
        if (*(void *)v50
          && (float v53 = *v52, LODWORD(v52) = *v52 == 1.0, *(unsigned char *)(v50 + 10))
          && v53 != 0.0
          && v53 != 1.0
          || (unsigned int v54 = *(unsigned __int8 *)(v50 + v52 + 11), v53 = 0.0, v54 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v50, 0x5Eu, 0, (BOOL *)&v112, v51);
          float v56 = v55;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v50, 0x5Eu, 1u, v116, v51);
          float v58 = v56 + (float)((float)(v57 - v56) * v53);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v114[0][3], 0x5Eu, v54, 0, v51);
        }
        *((float *)v7 + 8) = v58;
        unint64_t v59 = v114[0][3];
        float v60 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        long long v61 = *(float **)v59;
        if (*(void *)v59
          && (float v62 = *v61, LODWORD(v61) = *v61 == 1.0, *(unsigned char *)(v59 + 10))
          && v62 != 0.0
          && v62 != 1.0
          || (unsigned int v63 = *(unsigned __int8 *)(v59 + v61 + 11), v62 = 0.0, v63 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v59, 0x61u, 0, (BOOL *)&v112, v60);
          float v65 = v64;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v59, 0x61u, 1u, v116, v60);
          float v67 = v65 + (float)((float)(v66 - v65) * v62);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v114[0][3], 0x61u, v63, 0, v60);
        }
        *((float *)v7 + 13) = v67;
        unint64_t v68 = v114[0][3];
        float v69 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        long long v70 = *(float **)v68;
        if (*(void *)v68
          && (float v71 = *v70, LODWORD(v70) = *v70 == 1.0, *(unsigned char *)(v68 + 10))
          && v71 != 0.0
          && v71 != 1.0
          || (v72 = *(unsigned __int8 *)(v68 + v70 + 11), float v71 = 0.0, v72 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v68, 0x194u, 0, (BOOL *)&v112, v69);
          float v74 = v73;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v68, 0x194u, 1u, v116, v69);
          float v76 = v74 + (float)((float)(v75 - v74) * v71);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v114[0][3], 0x194u, v72, 0, v69);
        }
        *((float *)v7 + 18) = v76;
        unint64_t v77 = v114[0][3];
        float v78 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        float v79 = *(float **)v77;
        if (*(void *)v77
          && (float v80 = *v79, LODWORD(v79) = *v79 == 1.0, *(unsigned char *)(v77 + 10))
          && v80 != 0.0
          && v80 != 1.0
          || (unsigned int v81 = *(unsigned __int8 *)(v77 + v79 + 11), v80 = 0.0, v81 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v77, 0x1CEu, 0, (BOOL *)&v112, v78);
          float v83 = v82;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v77, 0x1CEu, 1u, v116, v78);
          float v85 = v83 + (float)((float)(v84 - v83) * v80);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v114[0][3], 0x1CEu, v81, 0, v78);
        }
        *((float *)v7 + 23) = v85;
        float v86 = *((float *)a2 + 6);
        if (v47)
        {
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x12Au, 2u, fminf(fmaxf(v86, 0.0), 23.0));
        }
        else
        {
          if ((int)v86 >= 0x17) {
            unsigned int v87 = 23;
          }
          else {
            unsigned int v87 = (int)v86;
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v112, v114[0][3], 0x12Au, v87, 2u, 0);
        }
        *(float32x4_t *)((char *)v7 + 124) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v112)), v111);
        unint64_t v88 = v114[0][3];
        float v89 = fminf(fmaxf(*((float *)a2 + 6), 0.0), 23.0);
        long long v90 = *(float **)v88;
        if (*(void *)v88
          && (float v91 = *v90, LODWORD(v90) = *v90 == 1.0, *(unsigned char *)(v88 + 10))
          && v91 != 0.0
          && v91 != 1.0
          || (v92 = *(unsigned __int8 *)(v88 + v90 + 11), float v91 = 0.0, v92 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v88, 0x129u, 0, (BOOL *)&v112, v89);
          float v94 = v93;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v88, 0x129u, 1u, v116, v89);
          float v96 = v94 + (float)((float)(v95 - v94) * v91);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v114[0][3], 0x129u, v92, 0, v89);
        }
        *((float *)v7 + 30) = v96;
        *((_DWORD *)v7 + 35) = 0;
        *((_DWORD *)v7 + 40) = 0;
        *((_DWORD *)v7 + 45) = 0;
        uint64_t v97 = v114[0][3];
        if ((int)*((float *)a2 + 6) >= 0x17) {
          unsigned int v98 = 23;
        }
        else {
          unsigned int v98 = (int)*((float *)a2 + 6);
        }
        long long v99 = *(float **)v97;
        if (*(void *)v97
          && (float v100 = *v99, LODWORD(v99) = *v99 == 1.0, *(unsigned char *)(v97 + 10))
          && v100 != 0.0
          && v100 != 1.0
          || (v101 = *(unsigned __int8 *)(v97 + v99 + 11), float v100 = 0.0, v101 == 2))
        {
          LOBYTE(v112) = 1;
          v116[0] = 1;
          char v102 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v97, 0x5Bu, v98, 0, &v112);
          char v103 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v97, 0x5Bu, v98, 1, v116);
          if (v100 < 1.0) {
            char v103 = v102;
          }
          if (!v103)
          {
LABEL_145:
            BOOL v18 = 0;
            *((unsigned char *)v7 + 116) = 0;
            int v107 = *((_DWORD *)a2 + 7);
            *((_DWORD *)v7 + 28) = v107;
            *((unsigned char *)v7 + 204) = 0;
            *((_DWORD *)v7 + 50) = v107;
            goto LABEL_146;
          }
        }
        else if (!*(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*((unsigned __int16 **)v114[0] + 3), 0x5Bu, v98, v101, 0))
        {
          goto LABEL_145;
        }
        float v104 = *((float *)v7 + 8);
        BOOL v18 = *((float *)v7 + 30) > 0.0;
        BOOL v105 = v104 <= 0.0;
        *((unsigned char *)v7 + 116) = v104 > 0.0;
        int v106 = *((_DWORD *)a2 + 7);
        *((_DWORD *)v7 + 28) = v106;
        *((unsigned char *)v7 + 204) = v18;
        *((_DWORD *)v7 + 50) = v106;
        if (!v105) {
          BOOL v18 = 1;
        }
      }
      else
      {
        BOOL v18 = 0;
      }
LABEL_146:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v114);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v18)
        {
LABEL_149:
          long long v108 = (uint64_t *)v3[4];
          for (unint64_t i = (uint64_t *)v3[5]; v108 != i; v108 += 2)
          {
            if (*((unsigned char *)v7 + 116)) {
              md::TrailJunctionRenderable::writePass(*v108, 0, (uint64_t)a2, (uint64_t)(v7 + 4), *((void *)this + 14));
            }
            if (*((unsigned char *)v7 + 204)) {
              md::TrailJunctionRenderable::writePass(*v108, 1u, (uint64_t)a2, (uint64_t)(v7 + 15), *((void *)this + 14));
            }
          }
        }
      }
      else if (v18)
      {
        goto LABEL_149;
      }
      long double v3 = (void *)*v3;
    }
    while (v3);
  }
}

void sub_1A1EF2D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(float *a1, unint64_t a2, void **a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      double v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            double v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          double v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 4) + 16))(*((void *)a1 + 4), 208, 8);
  double v12 = (void *)v15;
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = v8;
  char v16 = *a3;
  *(void *)(v15 + 16) = **a3;
  uint64_t v17 = v16[1];
  *(void *)(v15 + 24) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_OWORD *)(v15 + 192) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_DWORD *)(v15 + 48) = 1065353216;
  *(void *)(v15 + 52) = 0;
  *(void *)(v15 + 60) = 0;
  *(_DWORD *)(v15 + 68) = 1065353216;
  *(void *)(v15 + 72) = 0;
  *(void *)(v15 + 80) = 0;
  *(_DWORD *)(v15 + 88) = 1065353216;
  *(void *)(v15 + 100) = 0;
  *(void *)(v15 + 92) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v15 + 108) = _D0;
  *(void *)(v15 + 120) = 0;
  *(void *)(v15 + 128) = 0;
  *(_DWORD *)(v15 + 136) = 1065353216;
  *(void *)(v15 + 148) = 0;
  *(void *)(v15 + 140) = 0;
  *(_DWORD *)(v15 + 156) = 1065353216;
  *(void *)(v15 + 160) = 0;
  *(void *)(v15 + 168) = 0;
  *(_DWORD *)(v15 + 176) = 1065353216;
  *(void *)(v15 + 188) = 0;
  *(void *)(v15 + 180) = 0;
  *(void *)(v15 + 196) = _D0;
  float v23 = (float)(unint64_t)(*((void *)a1 + 5) + 1);
  float v24 = a1[12];
  if (!v9 || (float)(v24 * (float)v9) < v23)
  {
    BOOL v25 = 1;
    if (v9 >= 3) {
      BOOL v25 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v9);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = *((void *)a1 + 1);
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_60;
      }
      unint64_t v40 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v9 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_60:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_73;
      }
      if (!prime)
      {
        uint64_t v49 = *(void *)a1;
        *(void *)a1 = 0;
        if (v49) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v49, 8 * *((void *)a1 + 1));
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_60;
      }
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void *)a1 + 2), 8 * prime, 8);
    uint64_t v30 = *(void *)a1;
    *(void *)a1 = v29;
    if (v30) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v30, 8 * *((void *)a1 + 1));
    }
    uint64_t v31 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v31++) = 0;
    while (prime != v31);
    double v33 = (uint64_t *)(a1 + 6);
    unsigned int v32 = (void *)*((void *)a1 + 3);
    if (!v32)
    {
LABEL_59:
      unint64_t v9 = prime;
      goto LABEL_60;
    }
    size_t v34 = v32[1];
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(*(void *)a1 + 8 * v36) = v33;
      for (unint64_t i = (void *)*v32; *v32; unint64_t i = (void *)*v32)
      {
        size_t v38 = i[1] & v35;
        if (v38 == v36)
        {
          unsigned int v32 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v38))
        {
          void *v32 = *i;
          uint64_t v39 = 8 * v38;
          *unint64_t i = **(void **)(*(void *)a1 + v39);
          **(void **)(*(void *)a1 + v39) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v38) = v32;
          unsigned int v32 = i;
          size_t v36 = v38;
        }
      }
      goto LABEL_59;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v34) = v33;
    float v43 = (void *)*v32;
    if (!*v32) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v45 = v43[1];
      if (v45 >= prime) {
        v45 %= prime;
      }
      if (v45 != v34)
      {
        if (!*(void *)(*(void *)a1 + 8 * v45))
        {
          *(void *)(*(void *)a1 + 8 * v45) = v32;
          goto LABEL_64;
        }
        void *v32 = *v43;
        uint64_t v44 = 8 * v45;
        *float v43 = **(void **)(*(void *)a1 + v44);
        **(void **)(*(void *)a1 + v44) = v43;
        float v43 = v32;
      }
      size_t v45 = v34;
LABEL_64:
      unsigned int v32 = v43;
      float v43 = (void *)*v43;
      size_t v34 = v45;
      if (!v43) {
        goto LABEL_59;
      }
    }
  }
LABEL_73:
  char v46 = *(void **)(*(void *)a1 + 8 * v3);
  if (v46)
  {
    *double v12 = *v46;
LABEL_81:
    *char v46 = v12;
    goto LABEL_82;
  }
  *double v12 = *((void *)a1 + 3);
  *((void *)a1 + 3) = v12;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 6;
  if (*v12)
  {
    unint64_t v47 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v47 >= v9) {
        v47 %= v9;
      }
    }
    else
    {
      v47 &= v9 - 1;
    }
    char v46 = (void *)(*(void *)a1 + 8 * v47);
    goto LABEL_81;
  }
LABEL_82:
  ++*((void *)a1 + 5);
  return v12;
}

void sub_1A1EF338C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 208);
  }
  return a1;
}

void md::TrailJunctionsResource::collectRenderItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    long double v4 = (float *)(a1 + 56);
    do
    {
      unint64_t v5 = v2[2];
      uint64_t v14 = v2 + 2;
      unint64_t v6 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::array<md::TrailJunctionRenderable::PassProperties,2ul>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(v4, v5, &v14);
      uint64_t v7 = v2[4];
      uint64_t v8 = v2[5];
      if (v7 != v8)
      {
        unint64_t v9 = v6;
        do
        {
          if (*((unsigned char *)v9 + 116))
          {
            uint64_t v14 = *(void **)(*(void *)v7 + 112);
            char v13 = 0;
            uint64_t v10 = *(void *)(a2 + 24);
            if (!v10) {
              goto LABEL_14;
            }
            (*(void (**)(uint64_t, void **, char *))(*(void *)v10 + 48))(v10, &v14, &v13);
          }
          if (*((unsigned char *)v9 + 204))
          {
            uint64_t v14 = *(void **)(*(void *)v7 + 120);
            char v13 = 1;
            uint64_t v11 = *(void *)(a2 + 24);
            if (!v11)
            {
LABEL_14:
              std::__throw_bad_function_call[abi:nn180100]();
              altitude::FlyoverBorderRenderable::~FlyoverBorderRenderable(v12);
              return;
            }
            (*(void (**)(uint64_t, void **, char *))(*(void *)v11 + 48))(v11, &v14, &v13);
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

void altitude::FlyoverBorderRenderable::~FlyoverBorderRenderable(altitude::FlyoverBorderRenderable *this)
{
  *(void *)this = &unk_1EF56A7A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A7A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

void altitude::Renderable::~Renderable(altitude::Renderable *this)
{
  *(void *)this = &unk_1EF568478;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    long double v4 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    long double v4 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  uint64_t v5 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)this = &unk_1EF5681C8;
}

{
  uint64_t vars8;

  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverBorderRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  *(void *)this = &unk_1EF56A7A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A7A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverBorder::FlyoverBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverBorder::FlyoverBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverBorder::FlyoverBorderPipelineSetup>,std::allocator<ggl::FlyoverBorder::FlyoverBorderPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::FlyoverBorder::FlyoverBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverBorder::FlyoverBorderPipelineSetup>,std::allocator<ggl::FlyoverBorder::FlyoverBorderPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::FlyoverBorderRenderable::FlyoverBorderRenderable()
{
}

void altitude::FlyoverBorderRenderable::setup(altitude::FlyoverBorderRenderable *this, altitude::View *a2, uint64_t a3, float a4)
{
  if (*((unsigned char *)this + 312))
  {
    uint64_t v8 = (ggl::PipelineSetup *)*((void *)this + 24);
    uint64_t v9 = *((void *)this + 37);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 38);
LABEL_3:
    ggl::Flyover::FlyoverPipelineSetup::setState(v8, v9, v10);
    goto LABEL_4;
  }
  if (a4 < 1.0)
  {
    uint64_t v8 = (ggl::PipelineSetup *)*((void *)this + 24);
    uint64_t v9 = *((void *)this + 37);
    if (*((void *)v8 + 2) != v9)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 38);
      goto LABEL_3;
    }
  }
  if (a4 >= 1.0)
  {
    uint64_t v8 = (ggl::PipelineSetup *)*((void *)this + 24);
    uint64_t v9 = *((void *)this + 35);
    if (*((void *)v8 + 2) != v9)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 36);
      goto LABEL_3;
    }
  }
LABEL_4:
  double v11 = *((double *)a2 + 10);
  double v12 = *((double *)a2 + 11);
  double v13 = *((double *)a2 + 12);
  double v15 = *((double *)a2 + 8);
  double v14 = *((double *)a2 + 9);
  double v17 = *((double *)a2 + 6);
  double v16 = *((double *)a2 + 7);
  double v18 = -(v15 * v11 - v16 * v12) - (v15 * v11 - v16 * v12);
  double v19 = -(v17 * v12 - v15 * v14) - (v17 * v12 - v15 * v14);
  double v20 = -(v16 * v14 - v17 * v11) - (v16 * v14 - v17 * v11);
  double v21 = -(v20 * v14 - (-(v16 - v18 * v12) - v19 * v13));
  double v22 = -(v17 + v18 * v13 + v19 * v12 - v20 * v11);
  double v23 = -(v15 + v18 * v11 + v20 * v13 - v19 * v14);
  double v24 = v11 * -2.0;
  double v25 = -(v11 * (v11 * -2.0));
  double v26 = 1.0 - (v25 - v12 * (v12 * -2.0));
  double v27 = v14 * -2.0;
  double v28 = -(v11 * (v14 * -2.0));
  double v29 = v12 * -2.0 * v13;
  double v30 = v28 - v29;
  double v31 = -(v12 * (v14 * -2.0));
  double v32 = v13 * v24;
  double v33 = v13 * v24 - v12 * (v14 * -2.0);
  double v34 = v29 + v28;
  double v35 = v14 * -2.0 * v14 + 1.0;
  double v36 = v35 - -(v12 * (v12 * -2.0));
  double v37 = -(v12 * v24);
  double v38 = v13 * v27;
  v101.f64[0] = v26;
  v101.f64[1] = v34;
  v103.f64[0] = v30;
  v103.f64[1] = v36;
  v105.f64[0] = v33;
  v105.f64[1] = v37 - v38;
  v102.f64[0] = v31 - v32;
  float64x2_t v104 = (float64x2_t)COERCE_UNSIGNED_INT64(v38 + v37);
  v106.f64[0] = v35 - v25;
  v102.f64[1] = 0.0;
  v106.f64[1] = 0.0;
  v107.f64[0] = v22;
  v107.f64[1] = v21;
  v108.f64[0] = v23;
  v108.f64[1] = 1.0;
  uint64_t v39 = (*(uint64_t (**)(altitude::FlyoverBorderRenderable *))(*(void *)this + 24))(this);
  long long v129 = 0u;
  long long v131 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v130 = 0u;
  long long v128 = 0u;
  long long v127 = 0u;
  uint64_t v134 = 0x3FF0000000000000;
  uint64_t v40 = *((void *)this + 30);
  uint64_t v126 = *((void *)this + 29);
  *(void *)&long long v129 = v40;
  *((void *)&v131 + 1) = *((void *)this + 31);
  double v41 = *(double *)(v39 + 32);
  double v42 = *(double *)(v39 + 40);
  double v43 = *(double *)(v39 + 48);
  double v44 = v41 + v41;
  double v45 = (v41 + v41) * v41;
  double v46 = (v42 + v42) * v42;
  uint64_t v48 = *(void *)(v39 + 16);
  double v47 = *(double *)(v39 + 24);
  double v49 = v47 + v47;
  double v50 = (v47 + v47) * v41;
  double v51 = (v42 + v42) * v43;
  double v52 = v50 - v51;
  double v53 = v42 * (v47 + v47);
  double v54 = v43 * v44;
  double v55 = v51 + v50;
  double v56 = v43 * v44 + v53;
  double v57 = 1.0 - (v47 + v47) * v47;
  double v58 = v44 * v42;
  double v59 = v43 * v49;
  double v111 = 1.0 - (v45 + v46);
  double v112 = v55;
  double v115 = v52;
  double v116 = v57 - v46;
  double v119 = v56;
  double v120 = v58 - v59;
  double v113 = v53 - v54;
  double v117 = v59 + v58;
  double v121 = v57 - v45;
  uint64_t v114 = 0;
  uint64_t v118 = 0;
  uint64_t v122 = 0;
  long long v123 = *(_OWORD *)v39;
  uint64_t v124 = v48;
  uint64_t v125 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v100, &v111, (double *)&v126);
  gm::operator*<double,4,4,4>(v109[0].f64, v101.f64, v100);
  if (*((unsigned char *)this + 312) || a4 < 1.0) {
    *(void *)(*((void *)this + 23) + 48) = (unint64_t)((v110.f64[0] + *((double *)a2 + 118) * -0.1)
  }
                                                                  * 1.84467441e19
                                                                  / (*((double *)a2 + 118)
                                                                   * 1.6)
                                                                  + 1.84467441e19);
  float v60 = *(void **)(*(void *)(*((void *)this + 24) + 64) + 16);
  unint64_t v61 = v60[1];
  if (v61) {
    float v62 = (float32x4_t *)v60[9];
  }
  else {
    float v62 = 0;
  }
  float32x4_t v63 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v109[2]), v109[3]);
  float32x4_t *v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v109[0]), v109[1]);
  v62[1] = v63;
  float32x4_t v64 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v109[6]), v110);
  v62[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v109[4]), v109[5]);
  v62[3] = v64;
  uint64_t v65 = (*(uint64_t (**)(altitude::FlyoverBorderRenderable *))(*(void *)this + 24))(this);
  long long v129 = 0u;
  long long v131 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v130 = 0u;
  long long v128 = 0u;
  long long v127 = 0u;
  uint64_t v134 = 0x3FF0000000000000;
  uint64_t v66 = *((void *)this + 30);
  uint64_t v126 = *((void *)this + 29);
  *(void *)&long long v129 = v66;
  *((void *)&v131 + 1) = *((void *)this + 31);
  double v67 = *(double *)(v65 + 32);
  double v68 = *(double *)(v65 + 40);
  double v69 = *(double *)(v65 + 48);
  double v70 = v67 + v67;
  double v71 = (v67 + v67) * v67;
  double v72 = (v68 + v68) * v68;
  uint64_t v74 = *(void *)(v65 + 16);
  double v73 = *(double *)(v65 + 24);
  double v75 = (v73 + v73) * v67;
  double v76 = (v68 + v68) * v69;
  double v77 = v75 - v76;
  double v78 = v68 * (v73 + v73);
  double v79 = v69 * v70;
  double v80 = v76 + v75;
  double v81 = v69 * v70 + v78;
  double v82 = 1.0 - (v73 + v73) * v73;
  double v83 = v70 * v68;
  double v84 = v69 * (v73 + v73);
  double v111 = 1.0 - (v71 + v72);
  double v112 = v80;
  double v115 = v77;
  double v116 = v82 - v72;
  double v119 = v81;
  double v120 = v83 - v84;
  double v113 = v78 - v79;
  double v117 = v84 + v83;
  double v121 = v82 - v71;
  uint64_t v114 = 0;
  uint64_t v118 = 0;
  uint64_t v122 = 0;
  long long v123 = *(_OWORD *)v65;
  uint64_t v124 = v74;
  uint64_t v125 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v101.f64, &v111, (double *)&v126);
  float32x4_t v85 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v103), v104);
  v62[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101), v102);
  v62[5] = v85;
  float32x4_t v86 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107), v108);
  v62[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v105), v106);
  v62[7] = v86;
  if (v61)
  {
    unint64_t v87 = v60[8];
    if (v87 <= v61) {
      unint64_t v87 = v61;
    }
    v60[7] = 0;
    v60[8] = v87;
  }
  uint64_t v88 = *((void *)this + 24);
  uint64_t v89 = *(void *)(*(void *)(v88 + 64) + 48);
  unint64_t v90 = *(void *)(v89 + 8);
  **(float **)(v89 + 72) = a4;
  if (*(void *)(v89 + 64) > v90) {
    unint64_t v90 = *(void *)(v89 + 64);
  }
  *(void *)(v89 + 56) = 0;
  *(void *)(v89 + 64) = v90;
  float v91 = (char *)*((void *)this + 32);
  unsigned int v92 = (char *)*((void *)this + 33);
  if (v91 != v92)
  {
    unint64_t v93 = v92 - v91 - 8;
    float v94 = (char *)*((void *)this + 32);
    if (v93 < 8) {
      goto LABEL_25;
    }
    uint64_t v95 = (v93 >> 3) + 1;
    float v96 = (uint64_t *)(v91 + 8);
    uint64_t v97 = v95 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v98 = *v96;
      *(void *)(*(v96 - 1) + 88) = a3;
      *(void *)(v98 + 88) = a3;
      v96 += 2;
      v97 -= 2;
    }
    while (v97);
    if (v95 != (v95 & 0x3FFFFFFFFFFFFFFELL))
    {
      float v94 = &v91[8 * (v95 & 0x3FFFFFFFFFFFFFFELL)];
      do
      {
LABEL_25:
        uint64_t v99 = *(void *)v94;
        v94 += 8;
        *(void *)(v99 + 88) = a3;
      }
      while (v94 != v92);
    }
  }
  *(void *)(*(void *)(v88 + 96) + 8) = *(void *)(*(void *)v91 + 16);
  *(void *)(*(void *)(*((void *)this + 24) + 96) + 16) = *(void *)(*(void *)(*((void *)this + 32) + 8)
                                                                             + 16);
  *(void *)(*(void *)(*((void *)this + 24) + 96) + 24) = *(void *)(*(void *)(*((void *)this + 32) + 16)
                                                                             + 16);
}

void md::OverlayContainer::~OverlayContainer(md::OverlayContainer *this)
{
  uint64_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long double v4 = (void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 232));
  uint64_t v5 = (void (***)(void))*((void *)this + 26);
  if (v5)
  {
    unint64_t v6 = (void (***)(void))*((void *)this + 27);
    uint64_t v7 = (void *)*((void *)this + 26);
    if (v6 != v5)
    {
      uint64_t v8 = v6 - 3;
      uint64_t v9 = v6 - 3;
      uint64_t v10 = v6 - 3;
      do
      {
        double v11 = *v10;
        v10 -= 3;
        (*v11)(v9);
        v8 -= 3;
        BOOL v12 = v9 == v5;
        uint64_t v9 = v10;
      }
      while (!v12);
      uint64_t v7 = (void *)*((void *)this + 26);
    }
    *((void *)this + 27) = v5;
    operator delete(v7);
  }
  double v13 = (void (***)(void))*((void *)this + 23);
  if (v13)
  {
    double v14 = (void (***)(void))*((void *)this + 24);
    double v15 = (void *)*((void *)this + 23);
    if (v14 != v13)
    {
      double v16 = v14 - 3;
      double v17 = v14 - 3;
      double v18 = v14 - 3;
      do
      {
        double v19 = *v18;
        v18 -= 3;
        (*v19)(v17);
        v16 -= 3;
        BOOL v12 = v17 == v13;
        double v17 = v18;
      }
      while (!v12);
      double v15 = (void *)*((void *)this + 23);
    }
    *((void *)this + 24) = v13;
    operator delete(v15);
  }
  double v20 = (void (***)(void))*((void *)this + 20);
  if (v20)
  {
    double v21 = (void (***)(void))*((void *)this + 21);
    double v22 = (void *)*((void *)this + 20);
    if (v21 != v20)
    {
      double v23 = v21 - 3;
      double v24 = v21 - 3;
      double v25 = v21 - 3;
      do
      {
        double v26 = *v25;
        v25 -= 3;
        (*v26)(v24);
        v23 -= 3;
        BOOL v12 = v24 == v20;
        double v24 = v25;
      }
      while (!v12);
      double v22 = (void *)*((void *)this + 20);
    }
    *((void *)this + 21) = v20;
    operator delete(v22);
  }
  double v27 = (void *)*((void *)this + 17);
  if (v27)
  {
    double v28 = (void *)*((void *)this + 18);
    double v29 = (void *)*((void *)this + 17);
    if (v28 != v27)
    {
      double v30 = v28 - 4;
      double v31 = v28 - 4;
      do
      {
        double v33 = (void *)v31[3];
        if (v31 == v33)
        {
          (*(void (**)(void *))(*v31 + 32))(v31);
        }
        else if (v33)
        {
          (*(void (**)(void *))(*v33 + 40))(v33);
        }
        double v32 = v31 - 1;
        v31 -= 5;
        v30 -= 5;
      }
      while (v32 != v27);
      double v29 = (void *)*((void *)this + 17);
    }
    *((void *)this + 18) = v27;
    operator delete(v29);
  }
  double v34 = (void *)*((void *)this + 14);
  if (v34)
  {
    double v35 = (void *)*((void *)this + 15);
    double v36 = (void *)*((void *)this + 14);
    if (v35 != v34)
    {
      double v37 = v35 - 4;
      double v38 = v35 - 4;
      do
      {
        uint64_t v40 = (void *)v38[3];
        if (v38 == v40)
        {
          (*(void (**)(void *))(*v38 + 32))(v38);
        }
        else if (v40)
        {
          (*(void (**)(void *))(*v40 + 40))(v40);
        }
        uint64_t v39 = v38 - 1;
        v38 -= 5;
        v37 -= 5;
      }
      while (v39 != v34);
      double v36 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v34;
    operator delete(v36);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
}

void std::default_delete<md::RouteOverlayContainer>::operator()[abi:nn180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 56));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 32));
  uint64_t v2 = *(char **)a1;
  if (*(void *)a1)
  {
    unint64_t v3 = *(char **)(a1 + 8);
    long double v4 = *(char **)a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 24;
      unint64_t v6 = v3 - 24;
      uint64_t v7 = v3 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }
      while (!v9);
      long double v4 = *(char **)a1;
    }
    *(void *)(a1 + 8) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

void gdc::LayerDataStore::~LayerDataStore(gdc::LayerDataStore *this)
{
  uint64_t v2 = (char *)this + 248;
  unint64_t v3 = (char *)*((void *)this + 34);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    long double v4 = (char *)*((void *)this + 28);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    long double v4 = (char *)*((void *)this + 28);
    if (!v4)
    {
LABEL_5:
      uint64_t v5 = (unsigned char *)*((void *)this + 25);
      if (!v5) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
  }
  unint64_t v6 = (char *)*((void *)this + 29);
  uint64_t v7 = v4;
  if (v6 != v4)
  {
    do
    {
      if (*(v6 - 16)) {
        *(v6 - 16) = 0;
      }
      uint64_t v8 = (void *)*((void *)v6 - 12);
      if (v8 != *((void **)v6 - 10)) {
        free(v8);
      }
      v6 -= 112;
    }
    while (v6 != v4);
    uint64_t v7 = (char *)*((void *)this + 28);
  }
  *((void *)this + 29) = v4;
  operator delete(v7);
  uint64_t v5 = (unsigned char *)*((void *)this + 25);
  if (v5)
  {
    do
    {
LABEL_24:
      if (v5[112]) {
        v5[112] = 0;
      }
      BOOL v12 = *(unsigned char **)v5;
      double v13 = (void *)*((void *)v5 + 4);
      if (v13 != *((void **)v5 + 6)) {
        free(v13);
      }
      operator delete(v5);
      uint64_t v5 = v12;
    }
    while (v12);
  }
LABEL_17:
  BOOL v9 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v9) {
    operator delete(v9);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::~__hash_table((uint64_t)this + 144);
  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  uint64_t v10 = (unsigned char *)*((void *)this + 5);
  if (v10)
  {
    do
    {
      if (v10[112]) {
        v10[112] = 0;
      }
      double v14 = *(unsigned char **)v10;
      double v15 = (void *)*((void *)v10 + 4);
      if (v15 != *((void **)v10 + 6)) {
        free(v15);
      }
      operator delete(v10);
      uint64_t v10 = v14;
    }
    while (v14);
  }
  double v11 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v11) {
    operator delete(v11);
  }
  std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(this);
}

gdc::LayerDataStore **std::unique_ptr<gdc::LayerDataStore>::~unique_ptr[abi:nn180100](gdc::LayerDataStore **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::LayerDataStore::~LayerDataStore(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t *std::unique_ptr<md::ElevationRequestUpdater>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    long double v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40509EF904);
  }
  return a1;
}

void *std::function<BOOL ()(md::GEOVectorTileResource const&,GeoCodecsRoadFeature const&,md::MapDataType)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,gdc::Error>>> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<ReachabilityChangedObserver>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    [*(id *)(v2 + 8) clearListener];
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 8) = 0;

      uint64_t v3 = *(void **)(v2 + 8);
    }
    *(void *)uint64_t v2 = &unk_1EF559A18;

    MEMORY[0x1A6239270](v2, 0x80C40B49F1EBBLL);
  }
  return a1;
}

void sub_1A1EF6380(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF559A18;

  _Unwind_Resume(a1);
}

void **geo::linear_map<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>,std::equal_to<md::MapDataType>,std::allocator<std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>>,std::vector<std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long double v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (gdc::LayerDataStore *)*((void *)v3 - 1);
        *((void *)v3 - 1) = 0;
        if (v5)
        {
          gdc::LayerDataStore::~LayerDataStore(v5);
          MEMORY[0x1A6239270]();
        }
        v3 -= 16;
      }
      while (v3 != v2);
      long double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **geo::linear_map<md::MapDataType,std::unique_ptr<gdc::DataKeyRequester>,std::equal_to<md::MapDataType>,std::allocator<std::pair<md::MapDataType,std::unique_ptr<gdc::DataKeyRequester>>>,std::vector<std::pair<md::MapDataType,std::unique_ptr<gdc::DataKeyRequester>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long double v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        *((void *)v3 - 1) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      long double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **geo::linear_map<md::MapDataType,std::unique_ptr<gdc::LayerDataSource>,std::equal_to<md::MapDataType>,std::allocator<std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataSource>>>,std::vector<std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataSource>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long double v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        *((void *)v3 - 1) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      long double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578DE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::~__func()
{
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    gdc::ResourceManager::clearFailedResources(*(gdc::ResourceManager **)(v1 + 56), *(gdc::ResourceManager **)(v1 + 64));
  }
}

void *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578D98;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<md::DaVinciGroundMetaData *,std::shared_ptr<md::DaVinciGroundMetaData>::__shared_ptr_default_delete<md::DaVinciGroundMetaData,md::DaVinciGroundMetaData>,std::allocator<md::DaVinciGroundMetaData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::DaVinciGroundMetaData *,std::shared_ptr<md::DaVinciGroundMetaData>::__shared_ptr_default_delete<md::DaVinciGroundMetaData,md::DaVinciGroundMetaData>,std::allocator<md::DaVinciGroundMetaData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void *_ZNKSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF58F568;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md37DaVinciCenterLineRoadsLayerDataSourceC1ENS2_11MapDataTypeEtPN3gdc14LayerDataStoreERNS5_23ResourceStatusContainerEP17VKSharedResourcesPN3geo9TaskQueueEbONS_10unique_ptrINS2_23ElevationRequestUpdaterENS_14default_deleteISG_EEEENS_8functionIFbRKNS2_21GEOVectorTileResourceERK20GeoCodecsRoadFeatureS4_EEEEd_UlSO_SR_S4_E_NS_9allocatorISU_EESS_ED0Ev()
{
}

uint64_t std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = *(unsigned char **)v2;
      long double v4 = (std::__shared_weak_count *)*((void *)v2 + 17);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (v2[112]) {
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = (void *)*((void *)v2 + 4);
      if (v5 != *((void **)v2 + 6)) {
        free(v5);
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        goto LABEL_12;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v2[112]) {
      goto LABEL_8;
    }
LABEL_7:
    v2[112] = 0;
    goto LABEL_8;
  }
LABEL_12:
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(gdc::LayerDataStore **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    gdc::LayerDataStore::~LayerDataStore(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

md::FlyoverMetaData *std::__shared_ptr_pointer<md::FlyoverMetaData *,std::shared_ptr<md::FlyoverMetaData>::__shared_ptr_default_delete<md::FlyoverMetaData,md::FlyoverMetaData>,std::allocator<md::FlyoverMetaData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(md::FlyoverMetaData **)(a1 + 24);
  if (result)
  {
    md::FlyoverMetaData::~FlyoverMetaData(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::FlyoverMetaData *,std::shared_ptr<md::FlyoverMetaData>::__shared_ptr_default_delete<md::FlyoverMetaData,md::FlyoverMetaData>,std::allocator<md::FlyoverMetaData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t *std::__shared_ptr_emplace<md::FlyoverRegionManager>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<md::FlyoverRegionManager::Internal>::reset[abi:nn180100]((uint64_t *)(a1 + 24), 0);
}

void std::__shared_ptr_emplace<md::FlyoverRegionManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::FlyoverRegionManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578D50;
}

void *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF578D50;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_1,std::allocator<md::RunLoopController *>,std::function>::~__func()
{
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "InitWorld", "", v1, 2u);
  }
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578D08;
}

void *std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF578D08;
  return result;
}

void std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_0,std::allocator<md::RunLoopController *>,std::function>::~__func()
{
}

void geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559AF8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559AF8;

  return a1;
}

md::OverlayContainer *std::__shared_ptr_pointer<md::OverlayContainer *,std::shared_ptr<md::OverlayContainer>::__shared_ptr_default_delete<md::OverlayContainer,md::OverlayContainer>,std::allocator<md::OverlayContainer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(md::OverlayContainer **)(a1 + 24);
  if (result)
  {
    md::OverlayContainer::~OverlayContainer(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::OverlayContainer *,std::shared_ptr<md::OverlayContainer>::__shared_ptr_default_delete<md::OverlayContainer,md::OverlayContainer>,std::allocator<md::OverlayContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::World::~World(md::World *this)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v49 = 134217984;
    double v50 = this;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_INFO, "Destroy World:%p", (uint8_t *)&v49, 0xCu);
  }

  (*(void (**)(void))(**((void **)this + 46) + 48))(*((void *)this + 46));
  uint64_t v3 = (_OWORD *)*((void *)this + 34);
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 8);
  for (uint64_t i = *(void *)(v4 + 16); v5 != i; v5 += 24)
    gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v5 + 8));
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(v4 + 56));
  md::TaskContext::flushTileDecodeQueues(*(md::TaskContext **)this);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v7 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v49) = 0;
    _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_INFO, "~World clear data sources", (uint8_t *)&v49, 2u);
  }

  uint64_t v8 = *((void *)this + 4);
  for (uint64_t j = *((void *)this + 5); j != v8; j -= 16)
  {
    uint64_t v10 = *(void *)(j - 8);
    *(void *)(j - 8) = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  *((void *)this + 5) = v8;
  uint64_t v11 = *((void *)this + 7);
  for (uint64_t k = *((void *)this + 8); k != v11; k -= 16)
  {
    uint64_t v13 = *(void *)(k - 8);
    *(void *)(k - 8) = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  *((void *)this + 8) = v11;
  uint64_t v14 = *((void *)this + 10);
  for (uint64_t m = *((void *)this + 11); m != v14; m -= 16)
  {
    double v16 = *(gdc::LayerDataStore **)(m - 8);
    *(void *)(m - 8) = 0;
    if (v16)
    {
      gdc::LayerDataStore::~LayerDataStore(v16);
      MEMORY[0x1A6239270]();
    }
  }
  *((void *)this + 11) = v14;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  double v17 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    LOWORD(v49) = 0;
    _os_log_impl(&dword_1A1780000, v17, OS_LOG_TYPE_INFO, "~World layerDataManager reset", (uint8_t *)&v49, 2u);
  }

  uint64_t v18 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  double v20 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  double v21 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  double v22 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  *((void *)this + 36) = &unk_1EF559AF8;

  double v23 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v24)
  {
    [*(id *)(v24 + 8) clearListener];
    double v25 = *(void **)(v24 + 8);
    if (v25)
    {
      *(void *)(v24 + 8) = 0;

      double v25 = *(void **)(v24 + 8);
    }
    *(void *)uint64_t v24 = &unk_1EF559A18;

    MEMORY[0x1A6239270](v24, 0x80C40B49F1EBBLL);
  }
  double v26 = (void *)*((void *)this + 29);
  if (v26)
  {
    do
    {
      double v27 = (void *)*v26;
      operator delete(v26);
      double v26 = v27;
    }
    while (v27);
  }
  double v28 = (void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v28) {
    operator delete(v28);
  }
  double v29 = (void *)*((void *)this + 24);
  if (v29)
  {
    *((void *)this + 25) = v29;
    operator delete(v29);
  }
  double v30 = (void *)*((void *)this + 21);
  if (v30)
  {
    *((void *)this + 22) = v30;
    operator delete(v30);
  }
  double v31 = (void *)*((void *)this + 18);
  if (v31)
  {
    do
    {
      double v32 = (void *)*v31;
      operator delete(v31);
      double v31 = v32;
    }
    while (v32);
  }
  double v33 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v34 = *((void *)this + 10);
  if (v34)
  {
    uint64_t v35 = *((void *)this + 11);
    double v36 = (void *)*((void *)this + 10);
    if (v35 != v34)
    {
      do
      {
        double v37 = *(gdc::LayerDataStore **)(v35 - 8);
        *(void *)(v35 - 8) = 0;
        if (v37)
        {
          gdc::LayerDataStore::~LayerDataStore(v37);
          MEMORY[0x1A6239270]();
        }
        v35 -= 16;
      }
      while (v35 != v34);
      double v36 = (void *)*((void *)this + 10);
    }
    *((void *)this + 11) = v34;
    operator delete(v36);
  }
  uint64_t v38 = *((void *)this + 7);
  if (v38)
  {
    uint64_t v39 = *((void *)this + 8);
    uint64_t v40 = (void *)*((void *)this + 7);
    if (v39 != v38)
    {
      do
      {
        uint64_t v41 = *(void *)(v39 - 8);
        *(void *)(v39 - 8) = 0;
        if (v41) {
          (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
        }
        v39 -= 16;
      }
      while (v39 != v38);
      uint64_t v40 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v38;
    operator delete(v40);
  }
  uint64_t v42 = *((void *)this + 4);
  if (v42)
  {
    uint64_t v43 = *((void *)this + 5);
    double v44 = (void *)*((void *)this + 4);
    if (v43 != v42)
    {
      do
      {
        uint64_t v45 = *(void *)(v43 - 8);
        *(void *)(v43 - 8) = 0;
        if (v45) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
        }
        v43 -= 16;
      }
      while (v43 != v42);
      double v44 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v42;
    operator delete(v44);
  }
  uint64_t v46 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v47) {
    std::default_delete<md::RouteOverlayContainer>::operator()[abi:nn180100](v47);
  }
  uint64_t v48 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_1A1EF7308(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  *(void *)uint64_t v2 = &unk_1EF559A18;

  _Unwind_Resume(a1);
}

void md::World::createDebugNode(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v290 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0x646C726F57;
  *(_WORD *)(a1 + 23) = 5;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(unsigned char *)(a1 + 95) = 0;
  if (a2[30])
  {
    uint64_t v4 = (char *)operator new(0x28uLL);
    *(void *)long long __dst = v4;
    *(_OWORD *)&__dst[8] = xmmword_1A28FD150;
    strcpy(v4, "ActiveDataDownloadRangeByTileSize");
    ChildNode = gdc::DebugTreeNode::createChildNode(a1, (long long *)__dst);
    operator delete(v4);
    for (uint64_t i = (uint64_t *)a2[29]; i; uint64_t i = (uint64_t *)*i)
    {
      std::to_string((std::string *)__dst, *((_DWORD *)i + 4));
      BOOL v9 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (long long *)__dst);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      __dst[23] = 3;
      strcpy(__dst, "Min");
      uint64_t v7 = *((unsigned int *)i + 5);
      uint64_t v251 = 0;
      uint64_t v252 = 0;
      uint64_t v250 = 0;
      int v253 = 1;
      uint64_t v249 = v7;
      gdc::DebugTreeNode::addProperty((uint64_t)v9, (uint64_t)__dst, (uint64_t)v248);
      uint64_t v8 = *((unsigned int *)i + 6);
      __dst[23] = 3;
      strcpy(__dst, "Max");
      uint64_t v245 = 0;
      uint64_t v246 = 0;
      uint64_t v244 = 0;
      int v247 = 1;
      uint64_t v243 = v8;
      gdc::DebugTreeNode::addProperty((uint64_t)v9, (uint64_t)__dst, (uint64_t)v242);
    }
  }
  int8x8_t v239 = 0;
  unint64_t v240 = 0;
  uint8x8_t v241 = 0;
  uint64_t v10 = (uint64_t **)a2[18];
  if (v10)
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = *((unsigned __int16 *)v10 + 8);
      uint64_t v13 = "<Invalid>";
      if (v12 <= 0x51) {
        uint64_t v13 = off_1E5A95780[v12];
      }
      memset(&__p, 0, sizeof(__p));
      int v282 = 4;
      std::string::__assign_external(&__p, v13);
      if (v11 >= (void **)v241)
      {
        double v16 = (void **)v239;
        uint64_t v17 = ((char *)v11 - (unsigned char *)v239) >> 6;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 58) {
          abort();
        }
        uint64_t v19 = v241 - (unsigned char *)v239;
        if ((v241 - (unsigned char *)v239) >> 5 > v18) {
          unint64_t v18 = v19 >> 5;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20 >> 58) {
LABEL_478:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        double v21 = (char *)operator new(v20 << 6);
        double v22 = &v21[64 * v17];
        *(_OWORD *)double v22 = *(_OWORD *)__dst;
        *(_OWORD *)(v22 + 9) = *(_OWORD *)&__dst[9];
        *(std::string *)(v22 + 32) = __p;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        *((_DWORD *)v22 + 14) = v282;
        double v23 = v22 + 64;
        __p.__r_.__value_.__r.__words[2] = 0;
        if (v11 == v16)
        {
          int8x8_t v239 = v22;
          unint64_t v240 = (void **)(v22 + 64);
          uint8x8_t v241 = &v21[64 * v20];
        }
        else
        {
          do
          {
            long long v24 = *((_OWORD *)v11 - 4);
            *(_OWORD *)(v22 - 55) = *(_OWORD *)((char *)v11 - 55);
            *((_OWORD *)v22 - 4) = v24;
            long long v25 = *((_OWORD *)v11 - 2);
            *((void *)v22 - 2) = *(v11 - 2);
            *((_OWORD *)v22 - 2) = v25;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            *((_DWORD *)v22 - 2) = *((_DWORD *)v11 - 2);
            v22 -= 64;
            v11 -= 8;
          }
          while (v11 != v16);
          uint64_t v11 = (void **)v239;
          double v26 = v240;
          int8x8_t v239 = v22;
          unint64_t v240 = (void **)v23;
          uint8x8_t v241 = &v21[64 * v20];
          while (v26 != v11)
          {
            if (*((char *)v26 - 9) < 0) {
              operator delete(*(v26 - 4));
            }
            v26 -= 8;
          }
        }
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = (void **)v23;
      }
      else
      {
        long long v14 = *(_OWORD *)__dst;
        *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)&__dst[9];
        *(_OWORD *)uint64_t v11 = v14;
        long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[6] = (void *)__p.__r_.__value_.__r.__words[2];
        *((_OWORD *)v11 + 2) = v15;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v11 + 14) = v282;
        v11 += 8;
      }
      unint64_t v240 = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  strcpy(__dst, "Active Map Data Layers");
  __dst[23] = 22;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)__dst, (uint64_t *)&v239);
  __dst[23] = 6;
  strcpy(__dst, "Layers");
  unsigned int v230 = gdc::DebugTreeNode::createChildNode(a1, (long long *)__dst);
  double v27 = &md::MapDataTypeList;
  do
  {
    unint64_t v28 = (unsigned __int16)*v27;
    double v29 = "<Invalid>";
    if (v28 <= 0x51) {
      double v29 = off_1E5A95780[v28];
    }
    size_t v30 = strlen(v29);
    if (v30 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v31 = v30;
    if (v30 >= 0x17)
    {
      uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v33 = v30 | 7;
      }
      uint64_t v34 = v33 + 1;
      double v32 = operator new(v33 + 1);
      *(void *)&__dst[16] = v34 | 0x8000000000000000;
      *(void *)long long __dst = v32;
      *(void *)&__dst[8] = v31;
LABEL_46:
      memmove(v32, v29, v31);
      goto LABEL_47;
    }
    __dst[23] = v30;
    double v32 = __dst;
    if (v30) {
      goto LABEL_46;
    }
LABEL_47:
    v32[v31] = 0;
    uint64_t v35 = gdc::DebugTreeNode::createChildNode((uint64_t)v230, (long long *)__dst);
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    __dst[23] = 6;
    strcpy(__dst, "Active");
    int8x8_t v36 = (int8x8_t)a2[17];
    if (v36)
    {
      uint8x8_t v37 = (uint8x8_t)vcnt_s8(v36);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        unint64_t v38 = v28;
        if (*(void *)&v36 <= v28) {
          unint64_t v38 = v28 % *(void *)&v36;
        }
      }
      else
      {
        unint64_t v38 = (v36.i32[0] - 1) & v28;
      }
      uint64_t v39 = *(uint64_t ***)(a2[16] + 8 * v38);
      if (v39)
      {
        uint64_t v39 = (uint64_t **)*v39;
        if (v39)
        {
          if (v37.u32[0] < 2uLL)
          {
            uint64_t v40 = *(void *)&v36 - 1;
            while (1)
            {
              uint64_t v42 = v39[1];
              if (v42 == (uint64_t *)v28)
              {
                if (*((unsigned __int16 *)v39 + 8) == v28) {
                  goto LABEL_70;
                }
              }
              else if (((unint64_t)v42 & v40) != v38)
              {
                goto LABEL_69;
              }
              uint64_t v39 = (uint64_t **)*v39;
              if (!v39) {
                goto LABEL_70;
              }
            }
          }
          do
          {
            unint64_t v41 = (unint64_t)v39[1];
            if (v41 == v28)
            {
              if (*((unsigned __int16 *)v39 + 8) == v28) {
                break;
              }
            }
            else
            {
              if (v41 >= *(void *)&v36) {
                v41 %= *(void *)&v36;
              }
              if (v41 != v38) {
                goto LABEL_69;
              }
            }
            uint64_t v39 = (uint64_t **)*v39;
          }
          while (v39);
        }
      }
    }
    else
    {
LABEL_69:
      uint64_t v39 = 0;
    }
LABEL_70:
    memset(&v237[4], 0, 24);
    int v238 = 0;
    v237[0] = v39 != 0;
    gdc::DebugTreeNode::addProperty((uint64_t)v35, (uint64_t)__dst, (uint64_t)v237);
    uint64_t v43 = (unsigned __int16 *)a2[4];
    double v44 = (unsigned __int16 *)a2[5];
    if (v43 != v44)
    {
      while (v28 != *v43)
      {
        v43 += 8;
        if (v43 == v44) {
          goto LABEL_73;
        }
      }
      if (v43 != v44)
      {
        (*(void (**)(unsigned char *__return_ptr))(**((void **)v43 + 1) + 72))(__dst);
        gdc::DebugTreeNode::addChildNode(v35, (long long *)__dst);
        double v58 = (void **)v283;
        if (v283)
        {
          double v59 = v35;
          float v60 = v284;
          unint64_t v61 = v283;
          if (v284 != v283)
          {
            do
            {
              float v62 = (void **)*(v60 - 3);
              if (v62)
              {
                float32x4_t v63 = (void **)*(v60 - 2);
                float32x4_t v64 = *(v60 - 3);
                if (v63 != v62)
                {
                  do
                  {
                    if (*((char *)v63 - 1) < 0) {
                      operator delete(*(v63 - 3));
                    }
                    v63 -= 3;
                  }
                  while (v63 != v62);
                  float32x4_t v64 = *(v60 - 3);
                }
                *(v60 - 2) = v62;
                operator delete(v64);
              }
              uint64_t v65 = (void **)*(v60 - 6);
              if (v65)
              {
                uint64_t v66 = (void **)*(v60 - 5);
                double v67 = *(v60 - 6);
                if (v66 != v65)
                {
                  do
                  {
                    if (*((char *)v66 - 9) < 0) {
                      operator delete(*(v66 - 4));
                    }
                    v66 -= 8;
                  }
                  while (v66 != v65);
                  double v67 = *(v60 - 6);
                }
                *(v60 - 5) = v65;
                operator delete(v67);
              }
              double v68 = v60 - 10;
              if (*((char *)v60 - 57) < 0) {
                operator delete(*v68);
              }
              v60 -= 10;
            }
            while (v68 != v58);
            unint64_t v61 = v283;
          }
          float v284 = v58;
          operator delete(v61);
          uint64_t v35 = v59;
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__s.__data_[15] < 0)
        {
          operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_73;
          }
        }
        else if ((__dst[23] & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete(*(void **)__dst);
      }
    }
LABEL_73:
    uint64_t v45 = (unsigned __int16 *)a2[7];
    uint64_t v46 = (unsigned __int16 *)a2[8];
    if (v45 != v46)
    {
      while (v28 != *v45)
      {
        v45 += 8;
        if (v45 == v46) {
          goto LABEL_127;
        }
      }
    }
    if (v45 != v46)
    {
      (*(void (**)(unsigned char *__return_ptr))(**((void **)v45 + 1) + 56))(__dst);
      gdc::DebugTreeNode::addChildNode(v35, (long long *)__dst);
      uint64_t v47 = (void **)v283;
      if (v283)
      {
        uint64_t v48 = v35;
        int v49 = v284;
        double v50 = v283;
        if (v284 != v283)
        {
          do
          {
            uint64_t v51 = (void **)*(v49 - 3);
            if (v51)
            {
              double v52 = (void **)*(v49 - 2);
              double v53 = *(v49 - 3);
              if (v52 != v51)
              {
                do
                {
                  if (*((char *)v52 - 1) < 0) {
                    operator delete(*(v52 - 3));
                  }
                  v52 -= 3;
                }
                while (v52 != v51);
                double v53 = *(v49 - 3);
              }
              *(v49 - 2) = v51;
              operator delete(v53);
            }
            double v54 = (void **)*(v49 - 6);
            if (v54)
            {
              double v55 = (void **)*(v49 - 5);
              double v56 = *(v49 - 6);
              if (v55 != v54)
              {
                do
                {
                  if (*((char *)v55 - 9) < 0) {
                    operator delete(*(v55 - 4));
                  }
                  v55 -= 8;
                }
                while (v55 != v54);
                double v56 = *(v49 - 6);
              }
              *(v49 - 5) = v54;
              operator delete(v56);
            }
            double v57 = v49 - 10;
            if (*((char *)v49 - 57) < 0) {
              operator delete(*v57);
            }
            v49 -= 10;
          }
          while (v57 != v47);
          double v50 = v283;
        }
        float v284 = v47;
        operator delete(v50);
        uint64_t v35 = v48;
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0) {
          goto LABEL_127;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_127;
      }
      operator delete(*(void **)__dst);
    }
LABEL_127:
    double v69 = (unsigned __int16 *)a2[10];
    double v70 = (unsigned __int16 *)a2[11];
    if (v69 != v70)
    {
      while (v28 != *v69)
      {
        v69 += 8;
        if (v69 == v70) {
          goto LABEL_36;
        }
      }
    }
    if (v69 != v70)
    {
      int v228 = v35;
      uint64_t v71 = *((void *)v69 + 1);
      strcpy(v263, "Layer Data Store");
      *(_WORD *)long long v264 = 16;
      memset(v265, 0, sizeof(v265));
      char v266 = 0;
      __dst[23] = 4;
      strcpy(__dst, "Size");
      std::string::size_type v72 = *(void *)(v71 + 48);
      *(void *)float v288 = 0;
      *(void *)&v288[8] = 0;
      uint64_t v287 = 0;
      *(_DWORD *)&v288[16] = 1;
      v285.__r_.__value_.__l.__size_ = v72;
      gdc::DebugTreeNode::addProperty((uint64_t)v263, (uint64_t)__dst, (uint64_t)&v285);
      __dst[23] = 4;
      strcpy(__dst, "Data");
      double v73 = gdc::DebugTreeNode::createChildNode((uint64_t)v263, (long long *)__dst);
      uint64_t v74 = *(void *)(v71 + 8);
      if (v74 != v71)
      {
        double v75 = v73;
        do
        {
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(v74 + 128) + 24))(__dst);
          gdc::DebugTreeNode::addChildNode(v75, (long long *)__dst);
          double v76 = (void **)v283;
          if (v283)
          {
            double v77 = v284;
            double v78 = v283;
            if (v284 != v283)
            {
              do
              {
                double v79 = (void **)*(v77 - 3);
                if (v79)
                {
                  double v80 = (void **)*(v77 - 2);
                  double v81 = *(v77 - 3);
                  if (v80 != v79)
                  {
                    do
                    {
                      if (*((char *)v80 - 1) < 0) {
                        operator delete(*(v80 - 3));
                      }
                      v80 -= 3;
                    }
                    while (v80 != v79);
                    double v81 = *(v77 - 3);
                  }
                  *(v77 - 2) = v79;
                  operator delete(v81);
                }
                double v82 = (void **)*(v77 - 6);
                if (v82)
                {
                  double v83 = (void **)*(v77 - 5);
                  double v84 = *(v77 - 6);
                  if (v83 != v82)
                  {
                    do
                    {
                      if (*((char *)v83 - 9) < 0) {
                        operator delete(*(v83 - 4));
                      }
                      v83 -= 8;
                    }
                    while (v83 != v82);
                    double v84 = *(v77 - 6);
                  }
                  *(v77 - 5) = v82;
                  operator delete(v84);
                }
                float32x4_t v85 = v77 - 10;
                if (*((char *)v77 - 57) < 0) {
                  operator delete(*v85);
                }
                v77 -= 10;
              }
              while (v85 != v76);
              double v78 = v283;
            }
            float v284 = v76;
            operator delete(v78);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
          if (__p.__r_.__value_.__s.__data_[15] < 0)
          {
            operator delete(*(void **)&__dst[24]);
            if ((__dst[23] & 0x80000000) != 0) {
              goto LABEL_162;
            }
          }
          else if ((__dst[23] & 0x80000000) != 0)
          {
LABEL_162:
            operator delete(*(void **)__dst);
          }
          uint64_t v74 = *(void *)(v74 + 8);
        }
        while (v74 != v71);
      }
      gdc::DebugTreeNode::addChildNode(v228, (long long *)v263);
      float32x4_t v86 = *(void ***)((char *)&v265[1] + 9);
      if (*(void *)((char *)&v265[1] + 9))
      {
        uint64_t v87 = *(void *)((char *)&v265[2] + 1);
        uint64_t v88 = *(void **)((char *)&v265[1] + 9);
        if (*(void *)((char *)&v265[2] + 1) != *(void *)((char *)&v265[1] + 9))
        {
          do
          {
            uint64_t v89 = *(void *)(v87 - 24);
            if (v89)
            {
              uint64_t v90 = *(void *)(v87 - 16);
              float v91 = *(void **)(v87 - 24);
              if (v90 != v89)
              {
                do
                {
                  if (*(char *)(v90 - 1) < 0) {
                    operator delete(*(void **)(v90 - 24));
                  }
                  v90 -= 24;
                }
                while (v90 != v89);
                float v91 = *(void **)(v87 - 24);
              }
              *(void *)(v87 - 16) = v89;
              operator delete(v91);
            }
            uint64_t v92 = *(void *)(v87 - 48);
            if (v92)
            {
              uint64_t v93 = *(void *)(v87 - 40);
              float v94 = *(void **)(v87 - 48);
              if (v93 != v92)
              {
                do
                {
                  if (*(char *)(v93 - 9) < 0) {
                    operator delete(*(void **)(v93 - 32));
                  }
                  v93 -= 64;
                }
                while (v93 != v92);
                float v94 = *(void **)(v87 - 48);
              }
              *(void *)(v87 - 40) = v92;
              operator delete(v94);
            }
            uint64_t v95 = (void **)(v87 - 80);
            if (*(char *)(v87 - 57) < 0) {
              operator delete(*v95);
            }
            v87 -= 80;
          }
          while (v95 != v86);
          uint64_t v88 = *(void **)((char *)&v265[1] + 9);
        }
        *(void *)((char *)&v265[2] + 1) = v86;
        operator delete(v88);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v265 + 1));
      if (SLOBYTE(v265[0]) < 0)
      {
        operator delete(*(void **)&v264[1]);
        if ((v264[0] & 0x80000000) == 0) {
          goto LABEL_36;
        }
      }
      else if ((v264[0] & 0x80000000) == 0)
      {
        goto LABEL_36;
      }
      operator delete(*(void **)v263);
    }
LABEL_36:
    ++v27;
  }
  while (v27 != &md::MapResourceTypeList);
  float v96 = *(void **)(a2[3] + 56);
  strcpy(v234, "Resource Manager");
  v235[0] = 16;
  memset(&v235[12], 0, 48);
  char v236 = 0;
  __dst[23] = 18;
  strcpy(__dst, "RequestsInProgress");
  uint64_t v97 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (long long *)__dst);
  uint64_t v231 = v96;
  uint64_t v98 = (unsigned __int8 *)v96[13];
  if (v98)
  {
    uint64_t v99 = 0;
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v98 + 16);
      gdc::DebugTreeNode::addChildNode(v97, (long long *)__dst);
      float v100 = (void **)v283;
      if (v283)
      {
        float64x2_t v101 = v284;
        float64x2_t v102 = v283;
        if (v284 != v283)
        {
          do
          {
            float64x2_t v103 = (void **)*(v101 - 3);
            if (v103)
            {
              float64x2_t v104 = (void **)*(v101 - 2);
              float64x2_t v105 = *(v101 - 3);
              if (v104 != v103)
              {
                do
                {
                  if (*((char *)v104 - 1) < 0) {
                    operator delete(*(v104 - 3));
                  }
                  v104 -= 3;
                }
                while (v104 != v103);
                float64x2_t v105 = *(v101 - 3);
              }
              *(v101 - 2) = v103;
              operator delete(v105);
            }
            float64x2_t v106 = (void **)*(v101 - 6);
            if (v106)
            {
              float64x2_t v107 = (void **)*(v101 - 5);
              float64x2_t v108 = *(v101 - 6);
              if (v107 != v106)
              {
                do
                {
                  if (*((char *)v107 - 9) < 0) {
                    operator delete(*(v107 - 4));
                  }
                  v107 -= 8;
                }
                while (v107 != v106);
                float64x2_t v108 = *(v101 - 6);
              }
              *(v101 - 5) = v106;
              operator delete(v108);
            }
            long long v109 = v101 - 10;
            if (*((char *)v101 - 57) < 0) {
              operator delete(*v109);
            }
            v101 -= 10;
          }
          while (v109 != v100);
          float64x2_t v102 = v283;
        }
        float v284 = v100;
        operator delete(v102);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_229;
        }
      }
      else if ((__dst[23] & 0x80000000) != 0)
      {
LABEL_229:
        operator delete(*(void **)__dst);
      }
      ++v99;
      uint64_t v98 = *(unsigned __int8 **)v98;
      if (!v98) {
        goto LABEL_231;
      }
    }
  }
  uint64_t v99 = 0;
LABEL_231:
  __dst[23] = 5;
  strcpy(__dst, "Count");
  uint64_t v271 = 0;
  uint64_t v270 = 0;
  int v272 = 1;
  uint64_t v269 = 0;
  uint64_t v268 = v99;
  gdc::DebugTreeNode::addProperty((uint64_t)v97, (uint64_t)__dst, (uint64_t)v267);
  __dst[23] = 14;
  strcpy(__dst, "FailedRequests");
  float64x2_t v110 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (long long *)__dst);
  gdc::DebugTreeNode::DebugTreeNode((std::string *)v263, (const gdc::DebugTreeNode *)v110);
  double v111 = (unsigned __int8 *)v231[18];
  if (v111)
  {
    uint64_t v112 = 0;
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v111 + 16);
      gdc::DebugTreeNode::addChildNode(v263, (long long *)__dst);
      double v113 = (void **)v283;
      if (v283)
      {
        uint64_t v114 = v284;
        double v115 = v283;
        if (v284 != v283)
        {
          do
          {
            double v116 = (void **)*(v114 - 3);
            if (v116)
            {
              double v117 = (void **)*(v114 - 2);
              uint64_t v118 = *(v114 - 3);
              if (v117 != v116)
              {
                do
                {
                  if (*((char *)v117 - 1) < 0) {
                    operator delete(*(v117 - 3));
                  }
                  v117 -= 3;
                }
                while (v117 != v116);
                uint64_t v118 = *(v114 - 3);
              }
              *(v114 - 2) = v116;
              operator delete(v118);
            }
            double v119 = (void **)*(v114 - 6);
            if (v119)
            {
              double v120 = (void **)*(v114 - 5);
              double v121 = *(v114 - 6);
              if (v120 != v119)
              {
                do
                {
                  if (*((char *)v120 - 9) < 0) {
                    operator delete(*(v120 - 4));
                  }
                  v120 -= 8;
                }
                while (v120 != v119);
                double v121 = *(v114 - 6);
              }
              *(v114 - 5) = v119;
              operator delete(v121);
            }
            uint64_t v122 = v114 - 10;
            if (*((char *)v114 - 57) < 0) {
              operator delete(*v122);
            }
            v114 -= 10;
          }
          while (v122 != v113);
          double v115 = v283;
        }
        float v284 = v113;
        operator delete(v115);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_261;
        }
      }
      else if ((__dst[23] & 0x80000000) != 0)
      {
LABEL_261:
        operator delete(*(void **)__dst);
      }
      ++v112;
      double v111 = *(unsigned __int8 **)v111;
      if (!v111) {
        goto LABEL_263;
      }
    }
  }
  uint64_t v112 = 0;
LABEL_263:
  __dst[23] = 5;
  strcpy(__dst, "Count");
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  int v262 = 1;
  uint64_t v259 = 0;
  uint64_t v258 = v112;
  gdc::DebugTreeNode::addProperty((uint64_t)v263, (uint64_t)__dst, (uint64_t)v257);
  long long v123 = (void *)v231[23];
  int v254 = 0;
  int v255 = 0;
  unint64_t v256 = 0;
  if (v123)
  {
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    do
    {
      while (1)
      {
        uint64_t v129 = v123[2];
        v285.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 7) = 0;
        if (v126 >= v125) {
          break;
        }
        uint64_t v127 = *(void *)__dst;
        *((void *)v126 + 1) = v129;
        *((void *)v126 + 2) = v127;
        v126[24] = __dst[8];
        std::string::size_type v128 = v285.__r_.__value_.__r.__words[0];
        *((void *)v126 + 4) = 0;
        *((void *)v126 + 5) = v128;
        *(void *)(v126 + 47) = *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 7);
        v126[55] = 0;
        *((_DWORD *)v126 + 14) = 1;
        v126 += 64;
        long long v123 = (void *)*v123;
        if (!v123) {
          goto LABEL_285;
        }
      }
      uint64_t v130 = (v126 - v124) >> 6;
      unint64_t v131 = v130 + 1;
      if ((unint64_t)(v130 + 1) >> 58)
      {
        int v255 = v126;
        unint64_t v256 = v125;
        int v254 = v124;
        abort();
      }
      if ((v125 - v124) >> 5 > v131) {
        unint64_t v131 = (v125 - v124) >> 5;
      }
      if ((unint64_t)(v125 - v124) >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v132 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v132 = v131;
      }
      if (v132 >> 58) {
        goto LABEL_478;
      }
      long long v133 = (char *)operator new(v132 << 6);
      uint64_t v134 = &v133[64 * v130];
      *((void *)v134 + 1) = v129;
      *((void *)v134 + 5) = 0;
      *((void *)v134 + 6) = 0;
      *((void *)v134 + 4) = 0;
      v285.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 7) = 0;
      *((_DWORD *)v134 + 14) = 1;
      if (v126 == v124)
      {
        long long v136 = v134;
      }
      else
      {
        long long v135 = v126;
        long long v136 = v134;
        do
        {
          long long v137 = *((_OWORD *)v135 - 4);
          *(_OWORD *)(v136 - 55) = *(_OWORD *)(v135 - 55);
          *((_OWORD *)v136 - 4) = v137;
          long long v138 = *((_OWORD *)v135 - 2);
          *((void *)v136 - 2) = *((void *)v135 - 2);
          *((_OWORD *)v136 - 2) = v138;
          *((void *)v135 - 3) = 0;
          *((void *)v135 - 2) = 0;
          *((void *)v135 - 4) = 0;
          *((_DWORD *)v136 - 2) = *((_DWORD *)v135 - 2);
          v136 -= 64;
          v135 -= 64;
        }
        while (v135 != v124);
        do
        {
          if (*(v126 - 9) < 0) {
            operator delete(*((void **)v126 - 4));
          }
          v126 -= 64;
        }
        while (v126 != v124);
      }
      uint64_t v125 = &v133[64 * v132];
      uint64_t v126 = v134 + 64;
      if (v124) {
        operator delete(v124);
      }
      uint64_t v124 = v136;
      long long v123 = (void *)*v123;
    }
    while (v123);
LABEL_285:
    int v255 = v126;
    unint64_t v256 = v125;
    int v254 = v124;
  }
  __dst[23] = 18;
  strcpy(__dst, "Cancelled Requests");
  gdc::DebugTreeNode::addProperty((uint64_t)v234, (uint64_t)__dst, (uint64_t *)&v254);
  __dst[23] = 8;
  strcpy(__dst, "Fetchers");
  uint64_t v139 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (long long *)__dst);
  uint64_t v141 = v231[4];
  uint64_t v140 = v231[5];
  if (v141 != v140)
  {
    long long v142 = v139;
    uint64_t v229 = v231[5];
    do
    {
      uint64_t v143 = *(void *)(v141 + 8);
      LOWORD(v273[0]) = *(_WORD *)v141;
      uint64_t v144 = v231[46];
      if (!v144)
      {
LABEL_479:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v144 + 48))(&v275);
      long long v145 = std::string::insert(&v275, 0, "Fetcher ", 8uLL);
      long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
      v285.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v146;
      v145->__r_.__value_.__l.__size_ = 0;
      v145->__r_.__value_.__r.__words[2] = 0;
      v145->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v143 + 80))(__dst, v143, &v285, a3);
      gdc::DebugTreeNode::addChildNode(v142, (long long *)__dst);
      long long v147 = (void **)v283;
      if (v283)
      {
        long long v148 = v284;
        long long v149 = v283;
        if (v284 != v283)
        {
          long long v150 = v142;
          do
          {
            long long v151 = (void **)*(v148 - 3);
            if (v151)
            {
              int v152 = (void **)*(v148 - 2);
              uint64_t v153 = *(v148 - 3);
              if (v152 != v151)
              {
                do
                {
                  if (*((char *)v152 - 1) < 0) {
                    operator delete(*(v152 - 3));
                  }
                  v152 -= 3;
                }
                while (v152 != v151);
                uint64_t v153 = *(v148 - 3);
              }
              *(v148 - 2) = v151;
              operator delete(v153);
            }
            int v154 = (void **)*(v148 - 6);
            if (v154)
            {
              long long v155 = (void **)*(v148 - 5);
              long long v156 = *(v148 - 6);
              if (v155 != v154)
              {
                do
                {
                  if (*((char *)v155 - 9) < 0) {
                    operator delete(*(v155 - 4));
                  }
                  v155 -= 8;
                }
                while (v155 != v154);
                long long v156 = *(v148 - 6);
              }
              *(v148 - 5) = v154;
              operator delete(v156);
            }
            long long v157 = v148 - 10;
            if (*((char *)v148 - 57) < 0) {
              operator delete(*v157);
            }
            v148 -= 10;
          }
          while (v157 != v147);
          long long v149 = v283;
          long long v142 = v150;
          uint64_t v140 = v229;
        }
        float v284 = v147;
        operator delete(v149);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_317:
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_288;
          }
          goto LABEL_321;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_317;
      }
      operator delete(*(void **)__dst);
      if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_288:
        operator delete(v285.__r_.__value_.__l.__data_);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_322;
        }
        goto LABEL_289;
      }
LABEL_321:
      if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
LABEL_322:
      }
        operator delete(v275.__r_.__value_.__l.__data_);
LABEL_289:
      v141 += 16;
    }
    while (v141 != v140);
  }
  __dst[23] = 14;
  strcpy(__dst, "ResourceStores");
  long long v158 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (long long *)__dst);
  uint64_t v160 = v231[7];
  uint64_t v159 = v231[8];
  if (v160 != v159)
  {
    long long v161 = v158;
    long long v162 = "Store ";
    uint64_t v233 = v231[8];
    do
    {
      uint64_t v163 = *(void *)(v160 + 8);
      LOWORD(v273[0]) = *(_WORD *)v160;
      uint64_t v164 = v231[46];
      if (!v164) {
        goto LABEL_479;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v164 + 48))(&v275);
      long long v165 = std::string::insert(&v275, 0, v162, 6uLL);
      std::string v285 = *v165;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      gdc::ResourceStore::createDebugNode((std::string *)__dst, v163, (uint64_t)&v285);
      gdc::DebugTreeNode::addChildNode(v161, (long long *)__dst);
      float32x4_t v166 = (void **)v283;
      if (v283)
      {
        uint64_t v167 = v284;
        float32x4_t v168 = v283;
        if (v284 != v283)
        {
          long long v169 = v161;
          long long v170 = v162;
          do
          {
            long long v171 = (void **)*(v167 - 3);
            if (v171)
            {
              long long v172 = (void **)*(v167 - 2);
              long long v173 = *(v167 - 3);
              if (v172 != v171)
              {
                do
                {
                  if (*((char *)v172 - 1) < 0) {
                    operator delete(*(v172 - 3));
                  }
                  v172 -= 3;
                }
                while (v172 != v171);
                long long v173 = *(v167 - 3);
              }
              *(v167 - 2) = v171;
              operator delete(v173);
            }
            float32x4_t v174 = (void **)*(v167 - 6);
            if (v174)
            {
              long long v175 = (void **)*(v167 - 5);
              long long v176 = *(v167 - 6);
              if (v175 != v174)
              {
                do
                {
                  if (*((char *)v175 - 9) < 0) {
                    operator delete(*(v175 - 4));
                  }
                  v175 -= 8;
                }
                while (v175 != v174);
                long long v176 = *(v167 - 6);
              }
              *(v167 - 5) = v174;
              operator delete(v176);
            }
            long long v177 = v167 - 10;
            if (*((char *)v167 - 57) < 0) {
              operator delete(*v177);
            }
            v167 -= 10;
          }
          while (v177 != v166);
          float32x4_t v168 = v283;
          long long v162 = v170;
          long long v161 = v169;
          uint64_t v159 = v233;
        }
        float v284 = v166;
        operator delete(v168);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_354:
          if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_325;
          }
          goto LABEL_358;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_354;
      }
      operator delete(*(void **)__dst);
      if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_325:
        operator delete(v285.__r_.__value_.__l.__data_);
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_359;
        }
        goto LABEL_326;
      }
LABEL_358:
      if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
LABEL_359:
      }
        operator delete(v275.__r_.__value_.__l.__data_);
LABEL_326:
      v160 += 24;
    }
    while (v160 != v159);
  }
  long long v178 = (void *)v231[38];
  long long v179 = (char *)operator new(0x20uLL);
  strcpy(v179, "Resource Status Container");
  std::string::__init_copy_ctor_external(&v285, v179, 0x19uLL);
  LOBYTE(v286) = 0;
  memset(&v288[7], 0, 48);
  char v289 = 0;
  operator delete(v179);
  __dst[23] = 18;
  strcpy(__dst, "ActiveResourceKeys");
  v180 = gdc::DebugTreeNode::createChildNode((uint64_t)&v285, (long long *)__dst);
  uint64_t v181 = (unsigned __int8 *)v178[6];
  if (v181 != (unsigned __int8 *)(v178 + 7))
  {
    uint64_t v182 = v180;
    do
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v181 + 32);
      gdc::DebugTreeNode::addChildNode(v182, (long long *)__dst);
      long long v183 = (void **)v283;
      if (v283)
      {
        long long v184 = v284;
        long long v185 = v283;
        if (v284 != v283)
        {
          do
          {
            long long v186 = (void **)*(v184 - 3);
            if (v186)
            {
              long long v187 = (void **)*(v184 - 2);
              float v188 = *(v184 - 3);
              if (v187 != v186)
              {
                do
                {
                  if (*((char *)v187 - 1) < 0) {
                    operator delete(*(v187 - 3));
                  }
                  v187 -= 3;
                }
                while (v187 != v186);
                float v188 = *(v184 - 3);
              }
              *(v184 - 2) = v186;
              operator delete(v188);
            }
            long long v189 = (void **)*(v184 - 6);
            if (v189)
            {
              long long v190 = (void **)*(v184 - 5);
              long long v191 = *(v184 - 6);
              if (v190 != v189)
              {
                do
                {
                  if (*((char *)v190 - 9) < 0) {
                    operator delete(*(v190 - 4));
                  }
                  v190 -= 8;
                }
                while (v190 != v189);
                long long v191 = *(v184 - 6);
              }
              *(v184 - 5) = v189;
              operator delete(v191);
            }
            long long v192 = v184 - 10;
            if (*((char *)v184 - 57) < 0) {
              operator delete(*v192);
            }
            v184 -= 10;
          }
          while (v192 != v183);
          long long v185 = v283;
        }
        float v284 = v183;
        operator delete(v185);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_389:
          long long v193 = (unsigned __int8 *)*((void *)v181 + 1);
          if (v193) {
            goto LABEL_393;
          }
          goto LABEL_395;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_389;
      }
      operator delete(*(void **)__dst);
      long long v193 = (unsigned __int8 *)*((void *)v181 + 1);
      if (v193)
      {
        do
        {
LABEL_393:
          long long v194 = v193;
          long long v193 = *(unsigned __int8 **)v193;
        }
        while (v193);
        goto LABEL_362;
      }
      do
      {
LABEL_395:
        long long v194 = (unsigned __int8 *)*((void *)v181 + 2);
        BOOL v195 = *(void *)v194 == (void)v181;
        uint64_t v181 = v194;
      }
      while (!v195);
LABEL_362:
      uint64_t v181 = v194;
    }
    while (v194 != (unsigned __int8 *)(v178 + 7));
  }
  __dst[23] = 6;
  strcpy(__dst, "Status");
  long long v196 = gdc::DebugTreeNode::createChildNode((uint64_t)&v285, (long long *)__dst);
  long long v197 = (unsigned __int8 *)v178[3];
  if (v197)
  {
    long long v198 = v196;
    long long v199 = "<Invalid>";
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__dst, v197 + 16);
      char v279 = 6;
      strcpy(v278, "Status");
      uint64_t v200 = *((unsigned int *)v197 + 28);
      long long v201 = v199;
      if (v200 <= 4) {
        long long v201 = off_1E5A9A098[v200];
      }
      memset(&v276, 0, sizeof(v276));
      int v277 = 4;
      std::string::__assign_external(&v276, v201);
      gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v278, (uint64_t)&v275);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v276.__r_.__value_.__l.__data_);
      }
      uint64_t v202 = *((void *)v197 + 15);
      char v279 = 8;
      strcpy(v278, "RefCount");
      memset(&v273[4], 0, 24);
      int v274 = 0;
      v273[0] = v202;
      gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v278, (uint64_t)v273);
      gdc::DebugTreeNode::addChildNode(v198, (long long *)__dst);
      long long v203 = (void **)v283;
      if (v283)
      {
        long long v204 = v284;
        long long v205 = v283;
        if (v284 != v283)
        {
          long long v206 = v199;
          do
          {
            int v207 = (void **)*(v204 - 3);
            if (v207)
            {
              long long v208 = (void **)*(v204 - 2);
              long long v209 = *(v204 - 3);
              if (v208 != v207)
              {
                do
                {
                  if (*((char *)v208 - 1) < 0) {
                    operator delete(*(v208 - 3));
                  }
                  v208 -= 3;
                }
                while (v208 != v207);
                long long v209 = *(v204 - 3);
              }
              *(v204 - 2) = v207;
              operator delete(v209);
            }
            long long v210 = (void **)*(v204 - 6);
            if (v210)
            {
              long long v211 = (void **)*(v204 - 5);
              long long v212 = *(v204 - 6);
              if (v211 != v210)
              {
                do
                {
                  if (*((char *)v211 - 9) < 0) {
                    operator delete(*(v211 - 4));
                  }
                  v211 -= 8;
                }
                while (v211 != v210);
                long long v212 = *(v204 - 6);
              }
              *(v204 - 5) = v210;
              operator delete(v212);
            }
            long long v213 = v204 - 10;
            if (*((char *)v204 - 57) < 0) {
              operator delete(*v213);
            }
            v204 -= 10;
          }
          while (v213 != v203);
          long long v205 = v283;
          long long v199 = v206;
        }
        float v284 = v203;
        operator delete(v205);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__p.__r_.__value_.__r.__words[2]);
      if (__p.__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete(*(void **)&__dst[24]);
        if ((__dst[23] & 0x80000000) == 0) {
          goto LABEL_401;
        }
LABEL_432:
        operator delete(*(void **)__dst);
        long long v197 = *(unsigned __int8 **)v197;
        if (!v197) {
          break;
        }
      }
      else
      {
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_432;
        }
LABEL_401:
        long long v197 = *(unsigned __int8 **)v197;
        if (!v197) {
          break;
        }
      }
    }
  }
  gdc::DebugTreeNode::addChildNode(v234, (long long *)&v285);
  uint64_t v214 = *(void *)&v288[32];
  if (*(void *)&v288[32])
  {
    uint64_t v215 = *(void *)&v288[40];
    long long v216 = *(void **)&v288[32];
    if (*(void *)&v288[40] != *(void *)&v288[32])
    {
      do
      {
        v215 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v215);
      }
      while (v215 != v214);
      long long v216 = *(void **)&v288[32];
    }
    *(void *)&v288[40] = v214;
    operator delete(v216);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v288[8]);
  if ((v288[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_440;
    }
LABEL_449:
    operator delete(v285.__r_.__value_.__l.__data_);
    long long v217 = (void **)v254;
    if (!v254) {
      goto LABEL_450;
    }
LABEL_441:
    for (uint64_t j = (void **)v255; j != v217; j -= 8)
    {
      if (*((char *)j - 9) < 0) {
        operator delete(*(j - 4));
      }
    }
    operator delete(v217);
    long long v219 = *(void **)((char *)&v265[1] + 9);
    if (!*(void *)((char *)&v265[1] + 9)) {
      goto LABEL_455;
    }
LABEL_451:
    uint64_t v220 = *(void *)((char *)&v265[2] + 1);
    long long v221 = v219;
    if (*(void **)((char *)&v265[2] + 1) != v219)
    {
      do
      {
        v220 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v220);
      }
      while ((void *)v220 != v219);
      long long v221 = *(void **)((char *)&v265[1] + 9);
    }
    *(void *)((char *)&v265[2] + 1) = v219;
    operator delete(v221);
    goto LABEL_455;
  }
  operator delete(v286);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_449;
  }
LABEL_440:
  long long v217 = (void **)v254;
  if (v254) {
    goto LABEL_441;
  }
LABEL_450:
  long long v219 = *(void **)((char *)&v265[1] + 9);
  if (*(void *)((char *)&v265[1] + 9)) {
    goto LABEL_451;
  }
LABEL_455:
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v265 + 1));
  if (SLOBYTE(v265[0]) < 0)
  {
    operator delete(*(void **)&v264[1]);
    if ((v264[0] & 0x80000000) != 0) {
      goto LABEL_467;
    }
  }
  else
  {
    if ((v264[0] & 0x80000000) == 0) {
      goto LABEL_457;
    }
LABEL_467:
    operator delete(*(void **)v263);
  }
LABEL_457:
  gdc::DebugTreeNode::addChildNode((void *)a1, (long long *)v234);
  uint64_t v222 = *(void *)((char *)&v235[24] + 1);
  if (*(void *)((char *)&v235[24] + 1))
  {
    uint64_t v223 = *(void *)((char *)&v235[28] + 1);
    long long v224 = *(void **)((char *)&v235[24] + 1);
    if (*(void *)((char *)&v235[28] + 1) != *(void *)((char *)&v235[24] + 1))
    {
      do
      {
        v223 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v223);
      }
      while (v223 != v222);
      long long v224 = *(void **)((char *)&v235[24] + 1);
    }
    *(void *)((char *)&v235[28] + 1) = v222;
    operator delete(v224);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v235[12] + 1));
  if (SLOBYTE(v235[12]) < 0)
  {
    operator delete(*(void **)((char *)v235 + 1));
    if (SLOBYTE(v235[0]) < 0) {
      goto LABEL_469;
    }
LABEL_464:
    long long v225 = (void **)v239;
    if (v239)
    {
LABEL_470:
      for (uint64_t k = v240; k != v225; k -= 8)
      {
        if (*((char *)k - 9) < 0) {
          operator delete(*(k - 4));
        }
      }
      operator delete(v225);
    }
  }
  else
  {
    if ((SLOBYTE(v235[0]) & 0x80000000) == 0) {
      goto LABEL_464;
    }
LABEL_469:
    operator delete(*(void **)v234);
    long long v225 = (void **)v239;
    if (v239) {
      goto LABEL_470;
    }
  }
}

void sub_1A1EF94B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, gdc::DebugTreeNode *a9)
{
}

void *std::function<std::shared_ptr<md::LabelManager> ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::World::getDsmTileData(md::World *this, const QuadTile *a2, const QuadTile *a3, int *a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (a2 != a3)
  {
    while (*(_WORD *)&a2->_type != 77)
    {
      a2 = (const QuadTile *)((char *)a2 + 16);
      if (a2 == a3) {
        return;
      }
    }
  }
  if (a2 != a3)
  {
    unint64_t v6 = *(void **)&a2->_xIdx;
    if (v6)
    {
      uint64_t v7 = (void *)v6[1];
      if (v7 != v6)
      {
        unsigned int v8 = 0;
        do
        {
          uint64_t v9 = v7[16];
          uint64_t v10 = (std::__shared_weak_count *)v7[17];
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(unsigned __int8 *)(v9 + 168) != *(unsigned __int8 *)a4) {
            goto LABEL_33;
          }
          unsigned int v11 = *(unsigned __int8 *)(v9 + 169);
          unsigned int v12 = *((unsigned __int8 *)a4 + 1);
          BOOL v13 = v12 >= v11;
          unsigned int v14 = v12 - v11;
          if (v14 != 0 && v13)
          {
            if (*(_DWORD *)(v9 + 172) != a4[1] >> v14 || *(_DWORD *)(v9 + 176) != a4[2] >> v14) {
              goto LABEL_33;
            }
          }
          else if (v14 || *(_DWORD *)(v9 + 172) != a4[1] || *(_DWORD *)(v9 + 176) != a4[2])
          {
            goto LABEL_33;
          }
          uint64_t v15 = *(void *)(v9 + 720);
          if (v15)
          {
            if (v8 < *(unsigned __int8 *)(v15 + 57)) {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v17 = *(void *)(v9 + 736);
            if (v17 && v8 < *(unsigned __int8 *)(v17 + 57))
            {
              uint64_t v15 = *(void *)(v9 + 736);
              if (v15)
              {
LABEL_23:
                unsigned int v8 = *(unsigned __int8 *)(v15 + 57);
                if (v10) {
                  goto LABEL_24;
                }
              }
              else
              {
                unsigned int v8 = 0;
                if (!v10) {
                  goto LABEL_25;
                }
LABEL_24:
                atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
              }
LABEL_25:
              double v16 = (std::__shared_weak_count *)*((void *)this + 1);
              *(void *)this = v9;
              *((void *)this + 1) = v10;
              if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
          }
LABEL_33:
          if (v10)
          {
            if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          uint64_t v7 = (void *)v7[1];
        }
        while (v7 != v6);
      }
    }
  }
}

float md::BezierEase::BezierEase(uint64_t a1, float *a2, float *a3, double a4, double a5, double a6, double a7)
{
  float v7 = *a2;
  *(float *)&a5 = *a3 * 3.0;
  *(float *)&a7 = *a2 * 3.0;
  float v8 = (float)(*(float *)&a7 + 1.0) - *(float *)&a5;
  *(float *)&a5 = *(float *)&a5 - (float)(*a2 * 6.0);
  *(float *)(a1 + 44) = v8;
  *(_DWORD *)(a1 + 48) = LODWORD(a5);
  *(_DWORD *)(a1 + 52) = LODWORD(a7);
  float v9 = a2[1];
  float v10 = a3[1] * 3.0;
  *(float *)(a1 + 56) = (float)((float)(v9 * 3.0) + 1.0) - v10;
  *(float *)(a1 + 60) = v10 - (float)(v9 * 6.0);
  *(float *)(a1 + 64) = v9 * 3.0;
  *(_DWORD *)a1 = 0;
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  float32x4_t v12 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  *(float32x4_t *)(a1 + 4) = vmulq_f32(vmlaq_f32(v12, (float32x4_t)xmmword_1A28FD170, vmlaq_n_f32(v11, (float32x4_t)xmmword_1A28FD170, v8)), (float32x4_t)xmmword_1A28FD170);
  *(float32x4_t *)(a1 + 20) = vmulq_f32(vmlaq_f32(v12, (float32x4_t)xmmword_1A28FD180, vmlaq_n_f32(v11, (float32x4_t)xmmword_1A28FD180, v8)), (float32x4_t)xmmword_1A28FD180);
  float result = (float)(*(float *)&a7 + 1.0) + (float)(v7 * -3.0);
  *(float *)(a1 + 36) = (float)(*(float *)&a7 + (float)((float)(*(float *)&a5 + (float)(v8 * 0.9)) * 0.9)) * 0.9;
  *(float *)(a1 + 40) = result;
  return result;
}

float *md::BezierEase::value(float *this, float a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a2 > 0.0 && a2 < 1.0)
  {
    float v3 = this[1];
    if (v3 >= a2)
    {
      unint64_t v4 = 0;
    }
    else
    {
      float v3 = this[2];
      if (v3 >= a2)
      {
        unint64_t v4 = 1;
      }
      else
      {
        float v3 = this[3];
        if (v3 >= a2)
        {
          unint64_t v4 = 2;
        }
        else
        {
          float v3 = this[4];
          if (v3 >= a2)
          {
            unint64_t v4 = 3;
          }
          else
          {
            float v3 = this[5];
            if (v3 >= a2)
            {
              unint64_t v4 = 4;
            }
            else
            {
              float v3 = this[6];
              if (v3 >= a2)
              {
                unint64_t v4 = 5;
              }
              else
              {
                float v3 = this[7];
                if (v3 >= a2)
                {
                  unint64_t v4 = 6;
                }
                else
                {
                  float v3 = this[8];
                  if (v3 >= a2)
                  {
                    unint64_t v4 = 7;
                  }
                  else
                  {
                    float v3 = this[9];
                    if (v3 >= a2)
                    {
                      unint64_t v4 = 8;
                    }
                    else
                    {
                      float v3 = this[10];
                      if (v3 >= a2)
                      {
                        unint64_t v4 = 9;
                      }
                      else
                      {
                        float v3 = this[11];
                        unint64_t v4 = 10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    float v5 = (float)v4;
    float v6 = (float)((float)(a2 - this[v4]) / (float)(v3 - this[v4])) + (float)v4;
    float v7 = v6 * 0.1;
    v42[0] = &unk_1EF56D128;
    v42[1] = this;
    v42[2] = LODWORD(a2);
    uint64_t v43 = (float *)v42;
    v40[0] = &unk_1EF56D170;
    v40[1] = this;
    unint64_t v41 = v40;
    float v8 = this[11];
    float v9 = this[12];
    float v10 = this[13];
    float v11 = -(float)(a2
                 - (float)((float)(v10 + (float)((float)(v9 + (float)(v8 * (float)(v6 * 0.1))) * (float)(v6 * 0.1)))
                         * (float)(v6 * 0.1)));
    float v12 = v6 * 0.3;
    float v13 = v9 + v9;
    float v14 = v10 + (float)((float)((float)(v9 + v9) + (float)(v12 * v8)) * v7);
    float v15 = fabsf(v14);
    if (fabsf(v11) >= 0.0001 && v15 >= 0.00001)
    {
      float v17 = v5 * 0.1;
      float v18 = (float)(v5 * 0.1) + 0.1;
      float v19 = v7 - (float)(v11 / v14);
      if (v19 <= v17 || v19 >= v18)
      {
        if (v11 > 0.0) {
          float v18 = v7;
        }
        else {
          float v17 = v7;
        }
        float v19 = (float)(v18 + v17) * 0.5;
      }
      float v21 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v19 * v8)) * v19)) * v19));
      float v22 = v10 + (float)((float)(v13 + (float)((float)(v8 * 3.0) * v19)) * v19);
      float v23 = fabsf(v22);
      if (fabsf(v21) >= 0.0001 && v23 >= 0.00001)
      {
        float v25 = v19 - (float)(v21 / v22);
        if (v25 <= v17 || v25 >= v18)
        {
          if (v21 > 0.0) {
            float v18 = v19;
          }
          else {
            float v17 = v19;
          }
          float v25 = (float)(v18 + v17) * 0.5;
        }
        float v27 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v25 * v8)) * v25)) * v25));
        float v28 = v10 + (float)((float)(v13 + (float)((float)(v25 * 3.0) * v8)) * v25);
        float v29 = fabsf(v28);
        if (fabsf(v27) >= 0.0001 && v29 >= 0.00001)
        {
          float v31 = v25 - (float)(v27 / v28);
          if (v31 <= v17 || v31 >= v18)
          {
            if (v27 > 0.0) {
              float v18 = v25;
            }
            else {
              float v17 = v25;
            }
            float v31 = (float)(v18 + v17) * 0.5;
          }
          float v33 = -(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v8 * v31)) * v31)) * v31));
          float v34 = v10 + (float)((float)(v13 + (float)((float)(v31 * 3.0) * v8)) * v31);
          float v35 = fabsf(v34);
          if (fabsf(v33) >= 0.0001 && v35 >= 0.00001)
          {
            float v37 = v31 - (float)(v33 / v34);
            if (v37 <= v17 || v37 >= v18)
            {
              if (v33 > 0.0) {
                float v18 = v31;
              }
              else {
                float v17 = v31;
              }
              float v37 = (float)(v18 + v17) * 0.5;
            }
            if (fabsf(-(float)(a2 - (float)((float)(v10 + (float)((float)(v9 + (float)(v8 * v37)) * v37)) * v37))) >= 0.0001)
            {
              float v39 = v37;
              std::__function::__func<md::BezierEase::findBezierT(float)::$_1,std::allocator<md::BezierEase::findBezierT(float)::$_1>,float ()(float)>::operator()((uint64_t)v40, &v39);
            }
          }
        }
      }
    }
    if (v41 == v40)
    {
      (*(void (**)(void *))(v40[0] + 32))(v40);
    }
    else if (v41)
    {
      (*(void (**)(void))(*v41 + 40))();
    }
    this = v43;
    if (v43 == (float *)v42)
    {
      return (float *)(*(uint64_t (**)(void *))(v42[0] + 32))(v42);
    }
    else if (v43)
    {
      return (float *)(*(uint64_t (**)(void))(*(void *)v43 + 40))();
    }
  }
  return this;
}

float std::__function::__func<md::BezierEase::findBezierT(float)::$_1,std::allocator<md::BezierEase::findBezierT(float)::$_1>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(float *)(*(void *)(a1 + 8) + 52)
       + (float)((float)((float)((float)(*a2 * 3.0) * *(float *)(*(void *)(a1 + 8) + 44))
                       + (float)(*(float *)(*(void *)(a1 + 8) + 48) * 2.0))
               * *a2);
}

float std::__function::__func<md::BezierEase::findBezierT(float)::$_0,std::allocator<md::BezierEase::findBezierT(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return -(float)(*(float *)(a1 + 16)
                - (float)((float)(*(float *)(*(void *)(a1 + 8) + 52)
                                + (float)((float)(*(float *)(*(void *)(a1 + 8) + 48)
                                                + (float)(*(float *)(*(void *)(a1 + 8) + 44) * *a2))
                                        * *a2))
                        * *a2));
}

uint64_t std::__function::__func<md::BezierEase::findBezierT(float)::$_1,std::allocator<md::BezierEase::findBezierT(float)::$_1>,float ()(float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D170;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::BezierEase::findBezierT(float)::$_1,std::allocator<md::BezierEase::findBezierT(float)::$_1>,float ()(float)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF56D170;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::BezierEase::findBezierT(float)::$_1,std::allocator<md::BezierEase::findBezierT(float)::$_1>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<md::BezierEase::findBezierT(float)::$_0,std::allocator<md::BezierEase::findBezierT(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56D128;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BezierEase::findBezierT(float)::$_0,std::allocator<md::BezierEase::findBezierT(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF56D128;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::BezierEase::findBezierT(float)::$_0,std::allocator<md::BezierEase::findBezierT(float)::$_0>,float ()(float)>::~__func()
{
}

uint64_t md::PendingSceneLogic::debugConsoleString@<X0>(md::LayoutContext *a1@<X3>, uint64_t a2@<X0>, md::PendingSceneLogic *a3@<X8>)
{
  return md::PendingSceneLogic::createDebugConsoleString(a3, a1, *(md::SceneContext **)(a2 + 128), a1);
}

uint64_t md::PendingSceneLogic::createDebugConsoleString(md::PendingSceneLogic *this, const md::LayoutContext *a2, md::SceneContext *a3, md::World *a4)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v118);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n=== Tile Selection ===\n", 24);
  float v8 = *(unsigned char **)(*(void *)a2 + 232);
  float v7 = *(unsigned char **)(*(void *)a2 + 240);
  int64_t v9 = v7 - v8;
  double v113 = a2;
  if (v7 == v8)
  {
    std::string __p = 0;
    uint64_t v112 = 0;
    BOOL v13 = 1;
  }
  else
  {
    if (v9 < 0) {
      abort();
    }
    float v10 = (char *)operator new(v7 - v8);
    uint64_t v11 = 2 * (v9 >> 1);
    uint64_t v112 = (unsigned __int16 *)&v10[v11];
    memcpy(v10, v8, v9);
    float v12 = (unsigned __int16 *)v10;
    BOOL v13 = v11 == 0;
    std::string __p = v12;
    if (v11)
    {
      do
      {
        uint64_t v14 = *v12;
        double v16 = *(unsigned __int16 **)(*(void *)a2 + 112);
        for (uint64_t i = *(unsigned __int16 **)(*(void *)a2 + 120); v16 != i; v16 += 56)
        {
          if (*v16 == v14) {
            break;
          }
        }
        float v17 = "<Invalid>";
        if (v14 <= 8) {
          float v17 = off_1E5A95718[v14];
        }
        size_t v18 = strlen(v17);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v17, v18);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)": ", 2);
        float v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
        ++v12;
        a2 = v113;
      }
      while (v12 != v112);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n=== Scene State ===\n", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Required Layers: ", 17);
  unint64_t v20 = *(void **)a2;
  float v21 = *(unsigned __int16 **)(*(void *)a2 + 184);
  float v22 = *(unsigned __int16 **)(*(void *)a2 + 192);
  if (v21 == v22)
  {
LABEL_21:
    double v26 = (unsigned __int16 *)v20[26];
    float v27 = (unsigned __int16 *)v20[27];
    if (v26 == v27) {
      goto LABEL_33;
    }
    float v29 = (unsigned __int16 *)v20[14];
    float v28 = (unsigned __int16 *)v20[15];
    do
    {
      double v32 = v29;
      if (v29 != v28)
      {
        double v32 = v29;
        while (*v32 != *v26)
        {
          v32 += 56;
          if (v32 == v28)
          {
            double v32 = v28;
            break;
          }
        }
      }
      int v30 = *((unsigned __int8 *)v32 + 8);
      ++v26;
      if (v30) {
        BOOL v31 = v26 == v27;
      }
      else {
        BOOL v31 = 1;
      }
    }
    while (!v31);
    if (v30) {
LABEL_33:
    }
      long long v24 = "Y";
    else {
      long long v24 = "N";
    }
  }
  else
  {
    float v23 = (unsigned __int16 *)v20[15];
    long long v24 = "N";
    while (1)
    {
      float v25 = (unsigned __int16 *)v20[14];
      if (v25 != v23)
      {
        float v25 = (unsigned __int16 *)v20[14];
        while (*v25 != *v21)
        {
          v25 += 56;
          if (v25 == v23)
          {
            float v25 = (unsigned __int16 *)v20[15];
            break;
          }
        }
      }
      if (!*((unsigned char *)v25 + 8)) {
        break;
      }
      if (++v21 == v22) {
        goto LABEL_21;
      }
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v24, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"All Layers: ", 12);
  float v33 = *(void **)a2;
  float v34 = *(unsigned __int16 **)(*(void *)a2 + 184);
  float v35 = *(unsigned __int16 **)(*(void *)a2 + 192);
  if (v34 == v35)
  {
LABEL_44:
    float v39 = (unsigned __int16 *)v33[26];
    uint64_t v40 = (unsigned __int16 *)v33[27];
    if (v39 == v40) {
      goto LABEL_56;
    }
    uint64_t v42 = (unsigned __int16 *)v33[14];
    unint64_t v41 = (unsigned __int16 *)v33[15];
    do
    {
      uint64_t v45 = v42;
      if (v42 != v41)
      {
        uint64_t v45 = v42;
        while (*v45 != *v39)
        {
          v45 += 56;
          if (v45 == v41)
          {
            uint64_t v45 = v41;
            break;
          }
        }
      }
      int v43 = *((unsigned __int8 *)v45 + 9);
      ++v39;
      if (v43) {
        BOOL v44 = v39 == v40;
      }
      else {
        BOOL v44 = 1;
      }
    }
    while (!v44);
    if (v43) {
LABEL_56:
    }
      float v37 = "Y";
    else {
      float v37 = "N";
    }
  }
  else
  {
    int8x8_t v36 = (unsigned __int16 *)v33[15];
    float v37 = "N";
    while (1)
    {
      unint64_t v38 = (unsigned __int16 *)v33[14];
      if (v38 != v36)
      {
        unint64_t v38 = (unsigned __int16 *)v33[14];
        while (*v38 != *v34)
        {
          v38 += 56;
          if (v38 == v36)
          {
            unint64_t v38 = (unsigned __int16 *)v33[15];
            break;
          }
        }
      }
      if (!*((unsigned char *)v38 + 9)) {
        break;
      }
      if (++v34 == v35) {
        goto LABEL_44;
      }
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v37, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Failed Tiles: ", 14);
  uint64_t v46 = *(void **)a2;
  uint64_t v47 = *(unsigned __int16 **)(*(void *)a2 + 184);
  uint64_t v48 = *(unsigned __int16 **)(*(void *)a2 + 192);
  if (v47 != v48)
  {
    int v49 = (unsigned __int16 *)v46[15];
    do
    {
      double v50 = (unsigned __int16 *)v46[14];
      if (v50 != v49)
      {
        double v50 = (unsigned __int16 *)v46[14];
        while (*v47 != *v50)
        {
          v50 += 56;
          if (v50 == v49)
          {
            double v50 = (unsigned __int16 *)v46[15];
            break;
          }
        }
      }
      if (*((unsigned char *)v50 + 10)) {
        goto LABEL_79;
      }
      ++v47;
    }
    while (v47 != v48);
  }
  uint64_t v51 = (unsigned __int16 *)v46[26];
  double v52 = (unsigned __int16 *)v46[27];
  if (v51 != v52)
  {
    double v54 = (unsigned __int16 *)v46[14];
    double v53 = (unsigned __int16 *)v46[15];
    do
    {
      double v57 = v54;
      if (v54 != v53)
      {
        double v57 = v54;
        while (*v51 != *v57)
        {
          v57 += 56;
          if (v57 == v53)
          {
            double v57 = v53;
            break;
          }
        }
      }
      int v55 = *((unsigned __int8 *)v57 + 10);
      ++v51;
      if (v55) {
        BOOL v56 = 1;
      }
      else {
        BOOL v56 = v51 == v52;
      }
    }
    while (!v56);
    if (v55)
    {
LABEL_79:
      double v58 = "Y";
      goto LABEL_81;
    }
  }
  double v58 = "N";
LABEL_81:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v58, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Tiles to Render: ", 17);
  double v59 = *(void **)a2;
  float v60 = *(unsigned __int16 **)(*(void *)a2 + 184);
  unint64_t v61 = *(unsigned __int16 **)(*(void *)a2 + 192);
  if (v60 != v61)
  {
    float v62 = (unsigned __int16 *)v59[15];
    do
    {
      float32x4_t v63 = (unsigned __int16 *)v59[14];
      if (v63 != v62)
      {
        float32x4_t v63 = (unsigned __int16 *)v59[14];
        while (*v63 != *v60)
        {
          v63 += 56;
          if (v63 == v62)
          {
            float32x4_t v63 = (unsigned __int16 *)v59[15];
            break;
          }
        }
      }
      if (*((void *)v63 + 5)) {
        goto LABEL_102;
      }
      ++v60;
    }
    while (v60 != v61);
  }
  float32x4_t v64 = (unsigned __int16 *)v59[26];
  uint64_t v65 = (unsigned __int16 *)v59[27];
  if (v64 != v65)
  {
    double v67 = (unsigned __int16 *)v59[14];
    uint64_t v66 = (unsigned __int16 *)v59[15];
    do
    {
      double v70 = v67;
      if (v67 != v66)
      {
        double v70 = v67;
        while (*v70 != *v64)
        {
          v70 += 56;
          if (v70 == v66)
          {
            double v70 = v66;
            break;
          }
        }
      }
      uint64_t v68 = *((void *)v70 + 5);
      ++v64;
      if (v68) {
        BOOL v69 = 1;
      }
      else {
        BOOL v69 = v64 == v65;
      }
    }
    while (!v69);
    if (v68)
    {
LABEL_102:
      uint64_t v71 = "Y";
      goto LABEL_104;
    }
  }
  uint64_t v71 = "N";
LABEL_104:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v71, 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
  float64x2_t v110 = this;
  if (!v13)
  {
    std::string::size_type v72 = __p;
    do
    {
      uint64_t v73 = *v72;
      double v75 = *(unsigned char **)(*(void *)v113 + 112);
      uint64_t v74 = *(unsigned char **)(*(void *)v113 + 120);
      if (v75 != v74)
      {
        while (*(unsigned __int16 *)v75 != v73)
        {
          v75 += 112;
          if (v75 == v74)
          {
            double v75 = *(unsigned char **)(*(void *)v113 + 120);
            break;
          }
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n=== ", 5);
      double v76 = "<Invalid>";
      if (v73 <= 8) {
        double v76 = off_1E5A95718[v73];
      }
      size_t v77 = strlen(v76);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v76, v77);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)" ===\n", 5);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Required Layers: ", 17);
      if (v75[8]) {
        double v78 = "Y";
      }
      else {
        double v78 = "N";
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v78, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"All Layers: ", 12);
      if (v75[9]) {
        double v79 = "Y";
      }
      else {
        double v79 = "N";
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v79, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Failed Tiles: ", 14);
      if (v75[10]) {
        double v80 = "Y";
      }
      else {
        double v80 = "N";
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v80, 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Tiles to Render: ", 17);
      double v81 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)"\n", 1);
      ++v72;
    }
    while (v72 != v112);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n=== Metal Resources ===\n", 25);
  double v82 = +[VKSharedResourcesManager sharedResources];
  double v83 = v110;
  uint64_t v84 = [v82 device];

  uint64_t v85 = *(void *)(v84 + 8);
  if (v85)
  {
    uint64_t v86 = *(void *)(v85 + 80);
    if (v86)
    {
      uint64_t v87 = (uint64_t **)(v86 + 168);
      while (1)
      {
        uint64_t v87 = (uint64_t **)*v87;
        if (!v87) {
          break;
        }
        size_t v88 = strlen((const char *)v87[2]);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v87[2], v88);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)": ", 2);
        uint64_t v89 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)" (", 2);
        uint64_t v90 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)" MB) \n", 6);
      }
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n=== Memory ===\n", 16);
  mach_msg_type_number_t task_info_outCnt = 264;
  if (!task_info(*MEMORY[0x1E4F14960], 0x16u, task_info_out, &task_info_outCnt))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Footprint: ", 11);
    float v91 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)" MB \n", 5);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"Footprint Peak: ", 16);
    uint64_t v92 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)" MB \n", 5);
  }
  uint64_t v115 = 0;
  int v114 = 0;
  malloc_get_all_zones();
  if (a3)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)"\n=== Tile Cache ===\n", 20);
    for (uint64_t j = (uint64_t **)*((void *)a3 + 18); j; uint64_t j = (uint64_t **)*j)
    {
      uint64_t v94 = *((unsigned __int16 *)j + 8);
      uint64_t v95 = (unsigned __int16 *)*((void *)a3 + 10);
      float v96 = (unsigned __int16 *)*((void *)a3 + 11);
      if (v95 != v96)
      {
        while (*v95 != v94)
        {
          v95 += 8;
          if (v95 == v96) {
            goto LABEL_140;
          }
        }
      }
      if (v95 == v96)
      {
LABEL_140:
        if (MEMORY[0x30])
        {
LABEL_141:
          uint64_t v97 = "<Invalid>";
          if (v94 <= 0x51) {
            uint64_t v97 = off_1E5A95780[v94];
          }
          size_t v98 = strlen(v97);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)v97, v98);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)": ", 2);
          uint64_t v99 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)" (estimated ", 12);
          float v100 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" KB)\n", 5);
        }
      }
      else if (*(void *)(*((void *)v95 + 1) + 48))
      {
        goto LABEL_141;
      }
    }
  }
  if ((v125 & 0x10) != 0)
  {
    unint64_t v103 = v124;
    float64x2_t v101 = __p;
    if (v124 < v121)
    {
      unint64_t v124 = v121;
      unint64_t v103 = v121;
    }
    float64x2_t v104 = (const void **)&v120;
  }
  else
  {
    float64x2_t v101 = __p;
    if ((v125 & 8) == 0)
    {
      size_t v102 = 0;
      *((unsigned char *)v110 + 23) = 0;
      goto LABEL_159;
    }
    float64x2_t v104 = (const void **)v119;
    unint64_t v103 = v119[2];
  }
  float64x2_t v105 = *v104;
  size_t v102 = v103 - (void)*v104;
  if (v102 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v102 >= 0x17)
  {
    uint64_t v106 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v102 | 7) != 0x17) {
      uint64_t v106 = v102 | 7;
    }
    uint64_t v107 = v106 + 1;
    float64x2_t v108 = (md::PendingSceneLogic *)operator new(v106 + 1);
    *((void *)v110 + 1) = v102;
    *((void *)v110 + 2) = v107 | 0x8000000000000000;
    *(void *)float64x2_t v110 = v108;
    double v83 = v108;
    float64x2_t v101 = __p;
    goto LABEL_158;
  }
  *((unsigned char *)v110 + 23) = v102;
  if (v102) {
LABEL_158:
  }
    memmove(v83, v105, v102);
LABEL_159:
  *((unsigned char *)v83 + v102) = 0;
  if (v101) {
    operator delete(v101);
  }
  v118[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v118 + *(void *)(v118[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v118[1] = MEMORY[0x1E4FBA470] + 16;
  if (v123 < 0) {
    operator delete(v122);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v126);
}

void sub_1A1EFAD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(unsigned char *)(v2 + 112)) {
        *(unsigned char *)(v2 + 112) = 0;
      }
      uint64_t v3 = *(void **)(v2 + 32);
      if (v3 != *(void **)(v2 + 48)) {
        free(v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 24);
  if (v2)
  {
    do
    {
      if (v2[112]) {
        v2[112] = 0;
      }
      float v5 = *(unsigned char **)v2;
      float v6 = (void *)*((void *)v2 + 4);
      if (v6 != *((void **)v2 + 6)) {
        free(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  if (v2)
  {
    do
    {
      if (v2[112]) {
        v2[112] = 0;
      }
      float v5 = *(unsigned char **)v2;
      float v6 = (void *)*((void *)v2 + 4);
      if (v6 != *((void **)v2 + 6)) {
        free(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    unint64_t v4 = *(unsigned char **)(i - 24);
    if (v4)
    {
      do
      {
        if (v4[112]) {
          v4[112] = 0;
        }
        float v6 = *(unsigned char **)v4;
        float v7 = (void *)*((void *)v4 + 4);
        if (v7 != *((void **)v4 + 6)) {
          free(v7);
        }
        operator delete(v4);
        unint64_t v4 = v6;
      }
      while (v6);
    }
    float v5 = *(void **)(i - 40);
    *(void *)(i - 40) = 0;
    if (v5) {
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void gdc::TileSetSelectionContext::~TileSetSelectionContext(gdc::TileSetSelectionContext *this)
{
  *(void *)this = &unk_1EF555180;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF555180;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

void gdc::SelectionContext::~SelectionContext(gdc::SelectionContext *this)
{
  *(void *)this = &unk_1EF555180;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EF555180;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    operator delete(v4);
  }
}

void **geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        float v5 = (unsigned char *)*((void *)v3 - 3);
        if (v5)
        {
          do
          {
            if (v5[112]) {
              v5[112] = 0;
            }
            float v7 = *(unsigned char **)v5;
            float v8 = (void *)*((void *)v5 + 4);
            if (v8 != *((void **)v5 + 6)) {
              free(v8);
            }
            operator delete(v5);
            float v5 = v7;
          }
          while (v7);
        }
        float v6 = (void *)*((void *)v3 - 5);
        *((void *)v3 - 5) = 0;
        if (v6) {
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5731A0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5731A0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573158;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF573158;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x9F2276D081C2CB20 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::PendingSceneContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::PendingSceneContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5557A8;
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    MEMORY[0x1A6239270](v1, 0x60C40149E097CLL);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::PendingSceneContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5557A8;
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1A6239270](v2, 0x60C40149E097CLL);
  }
  return a1;
}

void md::PendingSceneLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v199 = a2;
  strcpy((char *)a3, "PendingSceneLogic");
  *(_WORD *)(a3 + 23) = 17;
  *(_OWORD *)(a3 + 47) = 0u;
  *(_OWORD *)(a3 + 63) = 0u;
  *(_OWORD *)(a3 + 79) = 0u;
  *(unsigned char *)(a3 + 95) = 0;
  uint64_t v3 = *(void **)(a1 + 120);
  if (!v3) {
    return;
  }
  BOOL v195 = (void *)*v3;
  strcpy((char *)&v218, "Scene Context");
  long long v194 = (char *)&v226 + 7;
  strcpy(v219, "\r");
  long long v203 = &v273;
  memset(&v219[24], 0, 48);
  uint64_t v200 = &v271;
  long long v213 = (std::string *)&v264;
  uint64_t v214 = v268;
  char v220 = 0;
  long long v211 = (void ***)&v248;
  long long v212 = &v253;
  uint64_t v205 = *MEMORY[0x1E4FBA418];
  uint64_t v206 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  int v207 = &v280;
  long long v204 = &v246;
  uint64_t v4 = &md::TileSelectionTileSetTypeList;
  long long v210 = xmmword_1A28FD190;
  qmemcpy(v193, "al TilesVirtual Tile SetScene Ti", sizeof(v193));
  long long v208 = &v270[8];
  do
  {
    uint64_t v6 = (unsigned __int16 *)v195[14];
    float v5 = (unsigned __int16 *)v195[15];
    uint64_t v7 = (unsigned __int16)*v4;
    long long v197 = v4;
    if (v6 != v5)
    {
      while (v7 != *v6)
      {
        v6 += 56;
        if (v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
    }
    *((unsigned char *)&v221.__r_.__value_.__s + 23) = 14;
    v221.__r_.__value_.__r.__words[0] = v193[3];
    *(std::string::size_type *)((char *)v221.__r_.__value_.__r.__words + 6) = v193[2];
    float v8 = "<Invalid>";
    v221.__r_.__value_.__s.__data_[14] = 0;
    if (v7 <= 8) {
      float v8 = off_1E5A95718[v7];
    }
    size_t v9 = strlen(v8);
    float v10 = std::string::append(&v221, v8, v9);
    uint64_t v11 = (void *)v10->__r_.__value_.__r.__words[0];
    std::string::size_type size = v10->__r_.__value_.__l.__size_;
    v222[0] = v10->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v222 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
    int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__r.__words[0] = 0;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    std::string __p = v11;
    int v198 = v13;
    if (v13 < 0)
    {
      std::string::__init_copy_ctor_external(&v223, (const std::string::value_type *)v11, size);
    }
    else
    {
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v223.__r_.__value_.__l.__size_ = size;
      LODWORD(v223.__r_.__value_.__r.__words[2]) = v222[0];
      *(_DWORD *)((char *)&v223.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v222 + 3);
      *((unsigned char *)&v223.__r_.__value_.__s + 23) = v13;
    }
    LOBYTE(v224) = 0;
    *(_OWORD *)long long v194 = 0u;
    *((_OWORD *)v194 + 1) = 0u;
    *((_OWORD *)v194 + 2) = 0u;
    v194[48] = 0;
    v270[23] = 13;
    *(void *)uint64_t v270 = v193[1];
    *(void *)&v270[5] = v193[0];
    v270[13] = 0;
    ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)&v223, (long long *)v270);
    uint64_t v14 = (char **)*((void *)v6 + 13);
    double v16 = *v14;
    float v15 = v14[1];
    long long v217 = *v14;
    if (*v14 != v15)
    {
      int v17 = v16[113];
      int v18 = *((_DWORD *)v16 + 29);
      int v19 = *((_DWORD *)v16 + 30);
      unint64_t v20 = v16 + 144;
      long long v217 = v16;
      int v21 = v16[112];
      while (1)
      {
        if (v20 == v15)
        {
          long long v217 = v15;
          goto LABEL_24;
        }
        if (v20[112] != v21) {
          break;
        }
        v217 += 144;
        if (v20[113] == v17 && *((_DWORD *)v20 + 29) == v18)
        {
          int v22 = *((_DWORD *)v20 + 30);
          v20 += 144;
          if (v22 == v19) {
            continue;
          }
        }
        goto LABEL_24;
      }
      long long v217 = v20;
    }
LABEL_24:
    float v23 = v15;
    long long v216 = (char *)v6;
    long long v201 = v15;
LABEL_27:
    unint64_t v209 = (unint64_t)v270 | 0xD08C000000000000;
    if (v16 != v23)
    {
      std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v270);
      float v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)".", 1);
      double v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)".", 1);
      std::ostream::operator<<();
      if ((v279 & 0x10) != 0)
      {
        unint64_t v29 = v278;
        int v30 = (const void **)v203;
        if (v278 < v274)
        {
          unint64_t v278 = v274;
          unint64_t v29 = v274;
          int v30 = (const void **)v203;
        }
      }
      else
      {
        if ((v279 & 8) == 0)
        {
          size_t v27 = 0;
          __dst[23] = 0;
          float v28 = __dst;
          goto LABEL_43;
        }
        unint64_t v29 = v272;
        int v30 = (const void **)v200;
      }
      BOOL v31 = *v30;
      size_t v27 = v29 - (void)*v30;
      if (v27 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      if (v27 >= 0x17)
      {
        uint64_t v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17) {
          uint64_t v32 = v27 | 7;
        }
        uint64_t v33 = v32 + 1;
        float v28 = operator new(v32 + 1);
        *(void *)&__dst[16] = v33 | 0x8000000000000000;
        *(void *)long long __dst = v28;
        *(void *)&__dst[8] = v27;
      }
      else
      {
        __dst[23] = v29 - *(unsigned char *)v30;
        float v28 = __dst;
        if (!v27) {
          goto LABEL_42;
        }
      }
      memmove(v28, v31, v27);
LABEL_42:
      uint64_t v6 = (unsigned __int16 *)v216;
LABEL_43:
      v28[v27] = 0;
      uint64_t v215 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (long long *)__dst);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      while (1)
      {
        if (v16 == v217)
        {
          *(void *)uint64_t v270 = v205;
          *(void *)&v270[*(void *)(v205 - 24)] = v206;
          *(void *)&v270[8] = MEMORY[0x1E4FBA470] + 16;
          if (v277 < 0) {
            operator delete(v275);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1A62391A0](v207);
          long long v24 = v201;
          if (v201 != v217)
          {
            double v70 = v217 + 144;
            long long v24 = v217;
            while (1)
            {
              if (v70 == v201)
              {
                long long v24 = v201;
                goto LABEL_26;
              }
              if (v70[112] != v217[112]) {
                break;
              }
              v24 += 144;
              if (v70[113] == v217[113] && *((_DWORD *)v70 + 29) == *((_DWORD *)v217 + 29))
              {
                int v71 = *((_DWORD *)v70 + 30);
                v70 += 144;
                if (v71 == *((_DWORD *)v217 + 30)) {
                  continue;
                }
              }
              goto LABEL_26;
            }
            long long v24 = v70;
          }
LABEL_26:
          float v23 = *(char **)(*((void *)v6 + 13) + 8);
          double v16 = v217;
          long long v217 = v24;
          goto LABEL_27;
        }
        unsigned __int16 v34 = *((_WORD *)v16 + 4);
        unint64_t v35 = *((void *)v16 + 17);
        int8x8_t v36 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(*((void *)v6 + 13) + 24), v34);
        if (0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v36 + 1) - *(void *)v36) >> 4) <= v35) {
          goto LABEL_364;
        }
        uint64_t v37 = *(void *)(*(void *)v36 + 144 * v35 + 112);
        unint64_t v38 = *((void *)v16 + 17);
        uint64_t v39 = *((void *)v6 + 13);
        uint64_t v40 = *(unsigned __int16 **)(v39 + 24);
        unint64_t v41 = *(unsigned __int16 **)(v39 + 32);
        uint64_t v42 = v40;
        if (v40 != v41)
        {
          uint64_t v42 = v40;
          while (*v42 != v34)
          {
            v42 += 16;
            if (v42 == v41) {
              goto LABEL_59;
            }
          }
        }
        if (v42 == v41)
        {
LABEL_59:
          unint64_t v45 = 0;
          if (v40 != v41)
          {
LABEL_60:
            while (*v40 != v34)
            {
              v40 += 16;
              if (v40 == v41)
              {
                uint64_t v40 = v41;
                break;
              }
            }
          }
        }
        else
        {
          BOOL v44 = v42 + 4;
          uint64_t v43 = *((void *)v42 + 1);
          if (0x8E38E38E38E38E39 * ((*((void *)v44 + 1) - v43) >> 4) <= v38) {
            goto LABEL_364;
          }
          unint64_t v45 = *(unsigned int *)(v43 + 144 * v38 + 128);
          if (v40 != v41) {
            goto LABEL_60;
          }
        }
        uint64_t v46 = *((void *)v40 + 1);
        if (0x8E38E38E38E38E39 * ((*((void *)v40 + 2) - v46) >> 4) <= v38) {
LABEL_364:
        }
          abort();
        uint64_t v47 = "<Invalid>";
        if (v34 <= 0x51u) {
          uint64_t v47 = off_1E5A95780[v34];
        }
        size_t v48 = strlen(v47);
        if (v48 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v49 = v48;
        if (v48 >= 0x17) {
          break;
        }
        __dst[23] = v48;
        double v50 = __dst;
        if (v48) {
          goto LABEL_73;
        }
LABEL_74:
        v50[v49] = 0;
        double v53 = gdc::DebugTreeNode::createChildNode((uint64_t)v215, (long long *)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        __dst[23] = 8;
        strcpy(__dst, "Has Data");
        *((void *)v214 + 1) = 0;
        *((void *)v214 + 2) = 0;
        *(void *)uint64_t v214 = 0;
        *((_DWORD *)v214 + 6) = 0;
        v267[0] = v37 != 0;
        gdc::DebugTreeNode::addProperty((uint64_t)v53, (uint64_t)__dst, (uint64_t)v267);
        __dst[23] = 6;
        strcpy(__dst, "Status");
        double v54 = "<Invalid>";
        if (v45 <= 3) {
          double v54 = off_1E5A95760[v45];
        }
        v213->__r_.__value_.__r.__words[0] = 0;
        v213->__r_.__value_.__l.__size_ = 0;
        v213->__r_.__value_.__r.__words[2] = 0;
        int v266 = 4;
        std::string::__assign_external(v213, v54);
        gdc::DebugTreeNode::addProperty((uint64_t)v53, (uint64_t)__dst, (uint64_t)v262);
        if (v265 < 0) {
          operator delete(v264);
        }
        __dst[23] = 4;
        strcpy(__dst, "Tile");
        gdc::Tiled::stringFromLayerDataKey((gdc::Tiled *)&__src, (const gdc::LayerDataRequestKey *)v16);
        long long v259 = 0uLL;
        uint64_t v260 = 0;
        int v261 = 4;
        int v55 = SHIBYTE(v257);
        if (SHIBYTE(v257) < 0)
        {
          std::string::__assign_no_alias<true>(&v259, (void *)__src, *((size_t *)&__src + 1));
        }
        else
        {
          long long v259 = __src;
          uint64_t v260 = v257;
        }
        gdc::DebugTreeNode::addProperty((uint64_t)v53, (uint64_t)__dst, (uint64_t)v258);
        if (SHIBYTE(v260) < 0)
        {
          operator delete((void *)v259);
          if ((v55 & 0x80000000) == 0) {
            goto LABEL_85;
          }
        }
        else if ((v55 & 0x80000000) == 0)
        {
          goto LABEL_85;
        }
        operator delete((void *)__src);
LABEL_85:
        BOOL v56 = (char *)operator new(0x20uLL);
        *(void *)long long __dst = v56;
        *(_OWORD *)&__dst[8] = v210;
        strcpy(v56, "External Dependency Bitfield");
        uint64_t v57 = *(void *)(v46 + 144 * v38 + 136);
        unint64_t v58 = 0x3130303030303030;
        if ((v57 & 1) == 0) {
          unint64_t v58 = 0x3030303030303030;
        }
        if ((v57 & 2) != 0) {
          v58 |= 0x31000000000000uLL;
        }
        if ((v57 & 4) != 0) {
          v58 |= 0x310000000000uLL;
        }
        if ((v57 & 8) != 0) {
          v58 |= 0x3100000000uLL;
        }
        if ((v57 & 0x10) != 0) {
          unint64_t v58 = v58 & 0xFFFFFFFF00FFFFFFLL | 0x31000000;
        }
        if ((v57 & 0x20) != 0) {
          unint64_t v58 = v58 & 0xFFFFFFFFFF00FFFFLL | 0x310000;
        }
        if ((v57 & 0x40) != 0) {
          unint64_t v58 = v58 & 0xFFFFFFFFFFFF00FFLL | 0x3100;
        }
        v212[1] = 0;
        int v212[2] = 0;
        unint64_t *v212 = 0;
        int v255 = 4;
        if ((v57 & 0x80) != 0) {
          unint64_t v59 = v58 & 0xFFFFFFFFFFFFFF00 | 0x31;
        }
        else {
          unint64_t v59 = v58;
        }
        unint64_t v253 = v59;
        char v254 = 8;
        gdc::DebugTreeNode::addProperty((uint64_t)v53, (uint64_t)__dst, (uint64_t)v252);
        operator delete(v56);
        gdc::LayerDataRequestKey::createDebugNode((uint64_t)__dst, (unsigned __int8 *)v16);
        gdc::DebugTreeNode::addChildNode(v53, (long long *)__dst);
        float v60 = (void **)v250;
        uint64_t v6 = (unsigned __int16 *)v216;
        if (v250)
        {
          unint64_t v61 = v251;
          float v62 = v250;
          if (v251 != v250)
          {
            do
            {
              float32x4_t v63 = (void **)*(v61 - 3);
              if (v63)
              {
                float32x4_t v64 = (void **)*(v61 - 2);
                uint64_t v65 = *(v61 - 3);
                if (v64 != v63)
                {
                  do
                  {
                    if (*((char *)v64 - 1) < 0) {
                      operator delete(*(v64 - 3));
                    }
                    v64 -= 3;
                  }
                  while (v64 != v63);
                  uint64_t v65 = *(v61 - 3);
                }
                *(v61 - 2) = v63;
                operator delete(v65);
              }
              uint64_t v66 = (void **)*(v61 - 6);
              if (v66)
              {
                double v67 = (void **)*(v61 - 5);
                uint64_t v68 = *(v61 - 6);
                if (v67 != v66)
                {
                  do
                  {
                    if (*((char *)v67 - 9) < 0) {
                      operator delete(*(v67 - 4));
                    }
                    v67 -= 8;
                  }
                  while (v67 != v66);
                  uint64_t v68 = *(v61 - 6);
                }
                *(v61 - 5) = v66;
                operator delete(v68);
              }
              BOOL v69 = v61 - 10;
              if (*((char *)v61 - 57) < 0) {
                operator delete(*v69);
              }
              v61 -= 10;
            }
            while (v69 != v60);
            float v62 = v250;
          }
          uint64_t v251 = v60;
          operator delete(v62);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v211);
        if (SHIBYTE(v247) < 0)
        {
          operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_47;
          }
        }
        else if ((__dst[23] & 0x80000000) == 0)
        {
          goto LABEL_47;
        }
        operator delete(*(void **)__dst);
LABEL_47:
        v16 += 144;
      }
      uint64_t v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17) {
        uint64_t v51 = v48 | 7;
      }
      uint64_t v52 = v51 + 1;
      double v50 = operator new(v51 + 1);
      *(void *)&__dst[16] = v52 | 0x8000000000000000;
      *(void *)long long __dst = v50;
      *(void *)&__dst[8] = v49;
LABEL_73:
      memcpy(v50, v47, v49);
      goto LABEL_74;
    }
    std::string::size_type v72 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v270 = v72;
    *(_OWORD *)&v270[8] = xmmword_1A28FD1A0;
    strcpy(v72, "Finish Loading Required Layers");
    uint64_t v73 = *((unsigned __int8 *)v6 + 8);
    int v244 = 0;
    memset(&v243[4], 0, 24);
    v243[0] = v73;
    gdc::DebugTreeNode::addProperty((uint64_t)&v223, (uint64_t)v270, (uint64_t)v243);
    operator delete(v72);
    uint64_t v74 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v270 = v74;
    *(_OWORD *)&v270[8] = xmmword_1A28FD1B0;
    strcpy(v74, "Finish Loading All Layers");
    uint64_t v75 = *((unsigned __int8 *)v6 + 9);
    int v242 = 0;
    memset(&v241[4], 0, 24);
    v241[0] = v75;
    gdc::DebugTreeNode::addProperty((uint64_t)&v223, (uint64_t)v270, (uint64_t)v241);
    operator delete(v74);
    v270[23] = 16;
    strcpy(v270, "Has Failed Tiles");
    uint64_t v76 = *((unsigned __int8 *)v6 + 10);
    memset(&v239[4], 0, 24);
    int v240 = 0;
    v239[0] = v76;
    gdc::DebugTreeNode::addProperty((uint64_t)&v223, (uint64_t)v270, (uint64_t)v239);
    size_t v77 = (void *)*((void *)v6 + 10);
    long long __src = 0uLL;
    int v257 = 0;
    double v78 = 0;
    if (v77)
    {
      while (1)
      {
        std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v270);
        double v81 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)".", 1);
        double v82 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v82, (uint64_t)".", 1);
        std::ostream::operator<<();
        if ((v279 & 0x10) != 0)
        {
          unint64_t v85 = v278;
          uint64_t v86 = (const void **)v203;
          if (v278 < v274)
          {
            unint64_t v278 = v274;
            unint64_t v85 = v274;
            uint64_t v86 = (const void **)v203;
          }
        }
        else
        {
          if ((v279 & 8) == 0)
          {
            size_t v83 = 0;
            HIBYTE(v238) = 0;
            uint64_t v84 = v237;
            goto LABEL_160;
          }
          unint64_t v85 = v272;
          uint64_t v86 = (const void **)v200;
        }
        uint64_t v87 = *v86;
        size_t v83 = v85 - (void)*v86;
        if (v83 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        if (v83 >= 0x17) {
          break;
        }
        HIBYTE(v238) = v85 - *(unsigned char *)v86;
        uint64_t v84 = v237;
        if (v83) {
          goto LABEL_159;
        }
LABEL_160:
        v84[v83] = 0;
        uint64_t v90 = v204;
        *(void *)long long v204 = 0;
        *((void *)v204 + 1) = 0;
        *((void *)v204 + 2) = 0;
        int v249 = 4;
        int v91 = SHIBYTE(v238);
        if (SHIBYTE(v238) < 0)
        {
          std::string::__assign_no_alias<true>(v90, (void *)v237[0], v237[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v90 = *(_OWORD *)v237;
          v90[2] = v238;
        }
        uint64_t v6 = (unsigned __int16 *)v216;
        uint64_t v92 = (char *)*((void *)&__src + 1);
        if (*((void *)&__src + 1) < (unint64_t)v257)
        {
          long long v93 = *(_OWORD *)__dst;
          *(_OWORD *)(*((void *)&__src + 1) + 9) = *(_OWORD *)&__dst[9];
          *(_OWORD *)uint64_t v92 = v93;
          long long v94 = *(_OWORD *)v204;
          *((void *)v92 + 6) = *((void *)v204 + 2);
          *((_OWORD *)v92 + 2) = v94;
          *((void *)v204 + 1) = 0;
          *((void *)v204 + 2) = 0;
          *(void *)long long v204 = 0;
          *((_DWORD *)v92 + 14) = v249;
          double v78 = (void **)(v92 + 64);
          goto LABEL_181;
        }
        uint64_t v95 = (char *)__src;
        uint64_t v96 = (uint64_t)(*((void *)&__src + 1) - __src) >> 6;
        unint64_t v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 58) {
          abort();
        }
        uint64_t v98 = (uint64_t)&v257[-__src];
        if ((uint64_t)&v257[-__src] >> 5 > v97) {
          unint64_t v97 = v98 >> 5;
        }
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v99 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v97;
        }
        if (v99 >> 58) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float v100 = (char *)operator new(v99 << 6);
        float64x2_t v101 = &v100[64 * v96];
        *(_OWORD *)float64x2_t v101 = *(_OWORD *)__dst;
        *(_OWORD *)(v101 + 9) = *(_OWORD *)&__dst[9];
        *((_OWORD *)v101 + 2) = *(_OWORD *)v204;
        *((void *)v101 + 6) = *((void *)v204 + 2);
        *(void *)long long v204 = 0;
        *((void *)v204 + 1) = 0;
        *((_DWORD *)v101 + 14) = v249;
        double v78 = (void **)(v101 + 64);
        *((void *)v204 + 2) = 0;
        if (v92 == v95)
        {
          *(void *)&long long __src = &v100[64 * v96];
          *((void *)&__src + 1) = v101 + 64;
          int v257 = &v100[64 * v99];
          if (v92) {
            goto LABEL_180;
          }
        }
        else
        {
          size_t v102 = v92;
          do
          {
            long long v103 = *((_OWORD *)v102 - 4);
            *(_OWORD *)(v101 - 55) = *(_OWORD *)(v102 - 55);
            *((_OWORD *)v101 - 4) = v103;
            long long v104 = *((_OWORD *)v102 - 2);
            *((void *)v101 - 2) = *((void *)v102 - 2);
            *((_OWORD *)v101 - 2) = v104;
            *((void *)v102 - 3) = 0;
            *((void *)v102 - 2) = 0;
            *((void *)v102 - 4) = 0;
            *((_DWORD *)v101 - 2) = *((_DWORD *)v102 - 2);
            v101 -= 64;
            v102 -= 64;
          }
          while (v102 != v95);
          *(void *)&long long __src = v101;
          *((void *)&__src + 1) = v78;
          int v257 = &v100[64 * v99];
          do
          {
            if (*(v92 - 9) < 0) {
              operator delete(*((void **)v92 - 4));
            }
            v92 -= 64;
          }
          while (v92 != v95);
          uint64_t v92 = v95;
          if (v95) {
LABEL_180:
          }
            operator delete(v92);
        }
LABEL_181:
        *((void *)&__src + 1) = v78;
        if (SHIBYTE(v248) < 0)
        {
          operator delete(v246);
          if (v91 < 0) {
LABEL_186:
          }
            operator delete((void *)v237[0]);
        }
        else if (v91 < 0)
        {
          goto LABEL_186;
        }
        *(void *)uint64_t v270 = v205;
        *(void *)&v270[*(void *)(v205 - 24)] = v206;
        *(void *)&v270[8] = MEMORY[0x1E4FBA470] + 16;
        if (v277 < 0) {
          operator delete(v275);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A62391A0](v207);
        size_t v77 = (void *)*v77;
        if (!v77) {
          goto LABEL_143;
        }
      }
      uint64_t v88 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v83 | 7) != 0x17) {
        uint64_t v88 = v83 | 7;
      }
      uint64_t v89 = v88 + 1;
      uint64_t v84 = operator new(v88 + 1);
      unint64_t v238 = v89 | 0x8000000000000000;
      v237[0] = (size_t)v84;
      v237[1] = v83;
LABEL_159:
      memmove(v84, v87, v83);
      goto LABEL_160;
    }
LABEL_143:
    v270[23] = 8;
    strcpy(v270, "Tile Set");
    gdc::DebugTreeNode::addProperty((uint64_t)&v223, (uint64_t)v270, (uint64_t *)&__src);
    v270[23] = 19;
    strcpy(v270, "Tile Selection Size");
    uint64_t v79 = *((unsigned int *)v6 + 14);
    uint64_t v234 = 0;
    uint64_t v235 = 0;
    uint64_t v233 = 0;
    int v236 = 1;
    uint64_t v232 = v79;
    gdc::DebugTreeNode::addProperty((uint64_t)&v223, (uint64_t)v270, (uint64_t)v231);
    double v80 = (void **)__src;
    if ((void)__src)
    {
      while (v78 != v80)
      {
        if (*((char *)v78 - 9) < 0) {
          operator delete(*(v78 - 4));
        }
        v78 -= 8;
      }
      operator delete(v80);
    }
    gdc::DebugTreeNode::addChildNode(&v218, (long long *)&v223);
    float64x2_t v105 = (void **)v229;
    if (v229)
    {
      uint64_t v106 = v230;
      uint64_t v107 = v229;
      if (v230 != v229)
      {
        do
        {
          float64x2_t v108 = (void **)*(v106 - 3);
          if (v108)
          {
            long long v109 = (void **)*(v106 - 2);
            float64x2_t v110 = *(v106 - 3);
            if (v109 != v108)
            {
              do
              {
                if (*((char *)v109 - 1) < 0) {
                  operator delete(*(v109 - 3));
                }
                v109 -= 3;
              }
              while (v109 != v108);
              float64x2_t v110 = *(v106 - 3);
            }
            *(v106 - 2) = v108;
            operator delete(v110);
          }
          double v111 = (void **)*(v106 - 6);
          if (v111)
          {
            uint64_t v112 = (void **)*(v106 - 5);
            double v113 = *(v106 - 6);
            if (v112 != v111)
            {
              do
              {
                if (*((char *)v112 - 9) < 0) {
                  operator delete(*(v112 - 4));
                }
                v112 -= 8;
              }
              while (v112 != v111);
              double v113 = *(v106 - 6);
            }
            *(v106 - 5) = v111;
            operator delete(v113);
          }
          int v114 = v106 - 10;
          if (*((char *)v106 - 57) < 0) {
            operator delete(*v114);
          }
          v106 -= 10;
        }
        while (v114 != v105);
        uint64_t v107 = v229;
      }
      unsigned int v230 = v105;
      operator delete(v107);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v227);
    if (SHIBYTE(v226) < 0) {
      operator delete(v224);
    }
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v223.__r_.__value_.__l.__data_);
      if (v198 < 0) {
        goto LABEL_3;
      }
LABEL_224:
      if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_225;
      }
      goto LABEL_4;
    }
    if ((v198 & 0x80000000) == 0) {
      goto LABEL_224;
    }
LABEL_3:
    operator delete(__p);
    if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_225:
    operator delete(v221.__r_.__value_.__l.__data_);
LABEL_4:
    uint64_t v4 = v197 + 1;
  }
  while (v197 + 1 != (__int16 *)&unk_1A29C5302);
  strcpy(v270, "Required Loading Stats");
  v270[23] = 22;
  uint64_t v115 = gdc::DebugTreeNode::createChildNode((uint64_t)&v218, (long long *)v270);
  double v116 = (uint64_t **)v195[51];
  if (v116)
  {
    uint64_t v117 = (uint64_t)v115;
    while (1)
    {
      uint64_t v118 = *((unsigned int *)v116 + 4);
      double v119 = "<Invalid>";
      if (v118 <= 3) {
        double v119 = off_1E5A95760[v118];
      }
      size_t v120 = strlen(v119);
      if (v120 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v121 = v120;
      if (v120 >= 0x17) {
        break;
      }
      v270[23] = v120;
      uint64_t v122 = v270;
      if (v120) {
        goto LABEL_238;
      }
LABEL_239:
      v122[v121] = 0;
      int v125 = gdc::DebugTreeNode::createChildNode(v117, (long long *)v270);
      if ((v270[23] & 0x80000000) == 0)
      {
        uint64_t i = (uint64_t **)v116[5];
        if (i) {
          goto LABEL_245;
        }
        goto LABEL_228;
      }
      operator delete(*(void **)v270);
      for (uint64_t i = (uint64_t **)v116[5]; i; uint64_t i = (uint64_t **)*i)
      {
LABEL_245:
        unint64_t v127 = *((unsigned __int16 *)i + 8);
        std::string::size_type v128 = "<Invalid>";
        if (v127 <= 0x51) {
          std::string::size_type v128 = off_1E5A95780[v127];
        }
        size_t v129 = strlen(v128);
        if (v129 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v130 = v129;
        if (v129 >= 0x17)
        {
          uint64_t v132 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v129 | 7) != 0x17) {
            uint64_t v132 = v129 | 7;
          }
          uint64_t v133 = v132 + 1;
          unint64_t v131 = operator new(v132 + 1);
          *(void *)&v270[16] = v133 | 0x8000000000000000;
          *(void *)uint64_t v270 = v131;
          *(void *)&v270[8] = v130;
        }
        else
        {
          v270[23] = v129;
          unint64_t v131 = v270;
          if (!v129) {
            goto LABEL_255;
          }
        }
        memcpy(v131, v128, v130);
LABEL_255:
        v131[v130] = 0;
        uint64_t v134 = *((int *)i + 6);
        uint64_t v247 = 0;
        uint64_t v248 = 0;
        uint64_t v246 = 0;
        int v249 = 0;
        *(void *)long long __dst = v134;
        gdc::DebugTreeNode::addProperty((uint64_t)v125, (uint64_t)v270, (uint64_t)__dst);
        if ((v270[23] & 0x80000000) != 0) {
          operator delete(*(void **)v270);
        }
      }
LABEL_228:
      double v116 = (uint64_t **)*v116;
      if (!v116) {
        goto LABEL_257;
      }
    }
    uint64_t v123 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v123 = v120 | 7;
    }
    uint64_t v124 = v123 + 1;
    uint64_t v122 = operator new(v123 + 1);
    *(void *)&v270[16] = v124 | 0x8000000000000000;
    *(void *)uint64_t v270 = v122;
    *(void *)&v270[8] = v121;
LABEL_238:
    memcpy(v122, v119, v121);
    goto LABEL_239;
  }
LABEL_257:
  strcpy(v270, "Optional Loading Stats");
  v270[23] = 22;
  long long v135 = gdc::DebugTreeNode::createChildNode((uint64_t)&v218, (long long *)v270);
  long long v136 = (uint64_t **)v195[46];
  if (v136)
  {
    uint64_t v137 = (uint64_t)v135;
    while (1)
    {
      uint64_t v138 = *((unsigned int *)v136 + 4);
      uint64_t v139 = "<Invalid>";
      if (v138 <= 3) {
        uint64_t v139 = off_1E5A95760[v138];
      }
      size_t v140 = strlen(v139);
      if (v140 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v141 = v140;
      if (v140 >= 0x17) {
        break;
      }
      v270[23] = v140;
      long long v142 = v270;
      if (v140) {
        goto LABEL_269;
      }
LABEL_270:
      v142[v141] = 0;
      long long v145 = gdc::DebugTreeNode::createChildNode(v137, (long long *)v270);
      if ((v270[23] & 0x80000000) == 0)
      {
        uint64_t j = (uint64_t **)v136[5];
        if (j) {
          goto LABEL_276;
        }
        goto LABEL_259;
      }
      operator delete(*(void **)v270);
      for (uint64_t j = (uint64_t **)v136[5]; j; uint64_t j = (uint64_t **)*j)
      {
LABEL_276:
        unint64_t v147 = *((unsigned __int16 *)j + 8);
        long long v148 = "<Invalid>";
        if (v147 <= 0x51) {
          long long v148 = off_1E5A95780[v147];
        }
        size_t v149 = strlen(v148);
        if (v149 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v150 = v149;
        if (v149 >= 0x17)
        {
          uint64_t v152 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v149 | 7) != 0x17) {
            uint64_t v152 = v149 | 7;
          }
          uint64_t v153 = v152 + 1;
          long long v151 = operator new(v152 + 1);
          *(void *)&v270[16] = v153 | 0x8000000000000000;
          *(void *)uint64_t v270 = v151;
          *(void *)&v270[8] = v150;
        }
        else
        {
          v270[23] = v149;
          long long v151 = v270;
          if (!v149) {
            goto LABEL_286;
          }
        }
        memcpy(v151, v148, v150);
LABEL_286:
        v151[v150] = 0;
        std::string::size_type v154 = *((int *)j + 6);
        uint64_t v226 = 0;
        uint64_t v227 = 0;
        uint64_t v225 = 0;
        int v228 = 0;
        v223.__r_.__value_.__r.__words[0] = v154;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)v270, (uint64_t)&v223);
        if ((v270[23] & 0x80000000) != 0) {
          operator delete(*(void **)v270);
        }
      }
LABEL_259:
      long long v136 = (uint64_t **)*v136;
      if (!v136) {
        goto LABEL_288;
      }
    }
    uint64_t v143 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v140 | 7) != 0x17) {
      uint64_t v143 = v140 | 7;
    }
    uint64_t v144 = v143 + 1;
    long long v142 = operator new(v143 + 1);
    *(void *)&v270[16] = v144 | 0x8000000000000000;
    *(void *)uint64_t v270 = v142;
    *(void *)&v270[8] = v141;
LABEL_269:
    memcpy(v142, v139, v141);
    goto LABEL_270;
  }
LABEL_288:
  v270[23] = 10;
  strcpy(v270, "Scene Info");
  long long v155 = gdc::DebugTreeNode::createChildNode((uint64_t)&v218, (long long *)v270);
  long long v156 = (char *)v195[6];
  uint64_t v215 = (char *)v195[7];
  long long v216 = v155;
  if (v156 != v215)
  {
    while (1)
    {
      unint64_t v157 = *(unsigned __int16 *)v156;
      long long v158 = "<Invalid>";
      if (v157 <= 0x51) {
        long long v158 = off_1E5A95780[v157];
      }
      size_t v159 = strlen(v158);
      if (v159 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v160 = v159;
      if (v159 >= 0x17) {
        break;
      }
      v270[23] = v159;
      long long v161 = v270;
      if (v159) {
        goto LABEL_300;
      }
LABEL_301:
      v161[v160] = 0;
      long long v165 = gdc::DebugTreeNode::createChildNode((uint64_t)v216, (long long *)v270);
      if ((v270[23] & 0x80000000) != 0) {
        operator delete(*(void **)v270);
      }
      v270[23] = 6;
      strcpy(v270, "inView");
      float32x4_t v166 = gdc::DebugTreeNode::createChildNode((uint64_t)v165, (long long *)v270);
      uint64_t v167 = v156;
      float32x4_t v168 = (char *)*((void *)v156 + 1);
      long long v217 = v167;
      long long v169 = v167 + 16;
      if (v168 != v167 + 16)
      {
        long long v170 = v166;
        while (1)
        {
          (*(void (**)(unsigned char *__return_ptr))(**((void **)v168 + 4) + 24))(v270);
          gdc::Tiled::stringFromLayerDataKey((gdc::Tiled *)v262, (const gdc::LayerDataRequestKey *)(*((void *)v168 + 4) + 16));
          char v171 = HIBYTE(v263);
          if ((v270[23] & 0x80000000) == 0) {
            break;
          }
          long long v172 = (void *)v262[0];
          if (v263 >= 0) {
            long long v173 = v262;
          }
          else {
            long long v173 = (size_t *)v262[0];
          }
          if (v263 >= 0) {
            size_t v174 = HIBYTE(v263);
          }
          else {
            size_t v174 = v262[1];
          }
          std::string::__assign_no_alias<false>((void **)v270, v173, v174);
          if (v171 < 0) {
            goto LABEL_318;
          }
LABEL_319:
          HIBYTE(v263) = 5;
          strcpy((char *)v262, "World");
          uint64_t v175 = v168[48];
          memset(v268, 0, sizeof(v268));
          int v269 = 0;
          v267[0] = v175;
          gdc::DebugTreeNode::addProperty((uint64_t)v270, (uint64_t)v262, (uint64_t)v267);
          gdc::DebugTreeNode::addChildNode(v170, (long long *)v270);
          long long v176 = (void **)v275;
          if (v275)
          {
            long long v177 = v276;
            long long v178 = v275;
            if (v276 != v275)
            {
              do
              {
                long long v179 = (void **)*(v177 - 3);
                if (v179)
                {
                  v180 = (void **)*(v177 - 2);
                  uint64_t v181 = *(v177 - 3);
                  if (v180 != v179)
                  {
                    do
                    {
                      if (*((char *)v180 - 1) < 0) {
                        operator delete(*(v180 - 3));
                      }
                      v180 -= 3;
                    }
                    while (v180 != v179);
                    uint64_t v181 = *(v177 - 3);
                  }
                  *(v177 - 2) = v179;
                  operator delete(v181);
                }
                uint64_t v182 = (void **)*(v177 - 6);
                if (v182)
                {
                  long long v183 = (void **)*(v177 - 5);
                  long long v184 = *(v177 - 6);
                  if (v183 != v182)
                  {
                    do
                    {
                      if (*((char *)v183 - 9) < 0) {
                        operator delete(*(v183 - 4));
                      }
                      v183 -= 8;
                    }
                    while (v183 != v182);
                    long long v184 = *(v177 - 6);
                  }
                  *(v177 - 5) = v182;
                  operator delete(v184);
                }
                long long v185 = v177 - 10;
                if (*((char *)v177 - 57) < 0) {
                  operator delete(*v185);
                }
                v177 -= 10;
              }
              while (v185 != v176);
              long long v178 = v275;
            }
            std::string v276 = v176;
            operator delete(v178);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v273);
          if (SHIBYTE(v272) < 0)
          {
            operator delete(v271);
            if ((v270[23] & 0x80000000) == 0)
            {
LABEL_345:
              long long v186 = (char *)*((void *)v168 + 1);
              if (v186) {
                goto LABEL_349;
              }
              goto LABEL_351;
            }
          }
          else if ((v270[23] & 0x80000000) == 0)
          {
            goto LABEL_345;
          }
          operator delete(*(void **)v270);
          long long v186 = (char *)*((void *)v168 + 1);
          if (v186)
          {
            do
            {
LABEL_349:
              long long v187 = v186;
              long long v186 = *(char **)v186;
            }
            while (v186);
            goto LABEL_305;
          }
          do
          {
LABEL_351:
            long long v187 = (char *)*((void *)v168 + 2);
            BOOL v188 = *(void *)v187 == (void)v168;
            float32x4_t v168 = v187;
          }
          while (!v188);
LABEL_305:
          float32x4_t v168 = v187;
          if (v187 == v169) {
            goto LABEL_290;
          }
        }
        if ((v263 & 0x8000000000000000) == 0)
        {
          *(_OWORD *)uint64_t v270 = *(_OWORD *)v262;
          *(void *)&v270[16] = v263;
          goto LABEL_319;
        }
        long long v172 = (void *)v262[0];
        std::string::__assign_no_alias<true>(v270, (void *)v262[0], v262[1]);
LABEL_318:
        operator delete(v172);
        goto LABEL_319;
      }
LABEL_290:
      long long v156 = v217 + 32;
      if (v217 + 32 == v215) {
        goto LABEL_354;
      }
    }
    long long v162 = v156;
    uint64_t v163 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v159 | 7) != 0x17) {
      uint64_t v163 = v159 | 7;
    }
    uint64_t v164 = v163 + 1;
    long long v161 = operator new(v163 + 1);
    *(void *)&v270[16] = v164 | 0x8000000000000000;
    *(void *)uint64_t v270 = v161;
    *(void *)&v270[8] = v160;
    long long v156 = v162;
LABEL_300:
    memmove(v161, v158, v160);
    goto LABEL_301;
  }
LABEL_354:
  gdc::DebugTreeNode::addChildNode((void *)a3, &v218);
  uint64_t v189 = *(void *)&v219[49];
  if (*(void *)&v219[49])
  {
    uint64_t v190 = *(void *)&v219[57];
    long long v191 = *(void **)&v219[49];
    if (*(void *)&v219[57] != *(void *)&v219[49])
    {
      do
      {
        v190 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v190);
      }
      while (v190 != v189);
      long long v191 = *(void **)&v219[49];
    }
    *(void *)&v219[57] = v189;
    operator delete(v191);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v219[25]);
  if ((v219[24] & 0x80000000) == 0)
  {
    if ((v219[0] & 0x80000000) == 0) {
      return;
    }
LABEL_363:
    operator delete((void *)v218);
    return;
  }
  operator delete(*(void **)&v219[1]);
  if ((v219[0] & 0x80000000) != 0) {
    goto LABEL_363;
  }
}

void sub_1A1EFD050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, gdc::DebugTreeNode *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void **a63)
{
  uint64_t v68 = __p;
  if (__p)
  {
    uint64_t v69 = a67;
    double v70 = __p;
    if ((void *)a67 != __p)
    {
      do
      {
        v69 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v69);
      }
      while ((void *)v69 != v68);
      double v70 = __p;
    }
    a67 = (uint64_t)v68;
    operator delete(v70);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&a63);
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  gdc::DebugTreeNode::~DebugTreeNode(a10);
  _Unwind_Resume(a1);
}

uint64_t md::PendingSceneLogic::didBecomeInactive(uint64_t this)
{
  *(void *)(this + 120) = 0;
  return this;
}

void md::PendingSceneLogic::~PendingSceneLogic(md::PendingSceneLogic *this)
{
  md::PendingSceneLogic::~PendingSceneLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned char *v37;
  void *v38;
  unsigned char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned char *v44;
  void *v45;
  unsigned char *v46;
  void *v47;
  void *v48;

  *(void *)this = &unk_1EF5373A0;
  (*(void (**)(void))(**((void **)this + 33) + 48))(*((void *)this + 33));
  (*(void (**)(void))(**((void **)this + 34) + 48))(*((void *)this + 34));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 46);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  float v5 = (void *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 41);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 42);
    float v8 = (void *)*((void *)this + 41);
    if (v7 != v6)
    {
      do
      {
        if (*(void *)(v7 - 8))
        {
          size_t v9 = *(void *)(v7 - 24);
          float v10 = *(uint64_t **)(v7 - 16);
          uint64_t v11 = *v10;
          *(void *)(v11 + 8) = *(void *)(v9 + 8);
          **(void **)(v9 + 8) = v11;
          *(void *)(v7 - 8) = 0;
          if (v10 != (uint64_t *)(v7 - 24))
          {
            do
            {
              int v13 = (uint64_t *)v10[1];
              float v12 = v10[2];
              v10[2] = 0;
              if (v12) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
              operator delete(v10);
              float v10 = v13;
            }
            while (v13 != (uint64_t *)(v7 - 24));
          }
        }
        v7 -= 32;
      }
      while (v7 != v6);
      float v8 = (void *)*((void *)this + 41);
    }
    *((void *)this + 42) = v6;
    operator delete(v8);
  }
  uint64_t v14 = *((void *)this + 38);
  if (v14)
  {
    float v15 = *((void *)this + 39);
    double v16 = (void *)*((void *)this + 38);
    if (v15 != v14)
    {
      do
      {
        if (*(void *)(v15 - 8))
        {
          int v17 = *(void *)(v15 - 24);
          int v18 = *(uint64_t **)(v15 - 16);
          int v19 = *v18;
          *(void *)(v19 + 8) = *(void *)(v17 + 8);
          **(void **)(v17 + 8) = v19;
          *(void *)(v15 - 8) = 0;
          if (v18 != (uint64_t *)(v15 - 24))
          {
            do
            {
              int v21 = (uint64_t *)v18[1];
              unint64_t v20 = v18[2];
              v18[2] = 0;
              if (v20) {
                (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
              }
              operator delete(v18);
              int v18 = v21;
            }
            while (v21 != (uint64_t *)(v15 - 24));
          }
        }
        v15 -= 32;
      }
      while (v15 != v14);
      double v16 = (void *)*((void *)this + 38);
    }
    *((void *)this + 39) = v14;
    operator delete(v16);
  }
  int v22 = *((void *)this + 35);
  if (v22)
  {
    float v23 = *((void *)this + 36);
    long long v24 = (void *)*((void *)this + 35);
    if (v23 != v22)
    {
      do
      {
        if (*(void *)(v23 - 8))
        {
          float v25 = *(void *)(v23 - 24);
          double v26 = *(uint64_t **)(v23 - 16);
          size_t v27 = *v26;
          *(void *)(v27 + 8) = *(void *)(v25 + 8);
          **(void **)(v25 + 8) = v27;
          *(void *)(v23 - 8) = 0;
          if (v26 != (uint64_t *)(v23 - 24))
          {
            do
            {
              unint64_t v29 = (uint64_t *)v26[1];
              float v28 = v26[2];
              v26[2] = 0;
              if (v28) {
                (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
              }
              operator delete(v26);
              double v26 = v29;
            }
            while (v29 != (uint64_t *)(v23 - 24));
          }
        }
        v23 -= 32;
      }
      while (v23 != v22);
      long long v24 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v22;
    operator delete(v24);
  }
  int v30 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  BOOL v31 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = (void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v32)
  {
    uint64_t v33 = geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::~MarkedLRUCache(v32);
    MEMORY[0x1A6239270](v33, 0x10A0C40F417E19ELL);
  }
  unsigned __int16 v34 = *((void *)this + 24);
  if (v34)
  {
    unint64_t v35 = *((void *)this + 25);
    int8x8_t v36 = (void *)*((void *)this + 24);
    if (v35 != v34)
    {
      do
      {
        uint64_t v37 = *(unsigned char **)(v35 - 24);
        if (v37)
        {
          do
          {
            if (v37[112]) {
              v37[112] = 0;
            }
            uint64_t v39 = *(unsigned char **)v37;
            uint64_t v40 = (void *)*((void *)v37 + 4);
            if (v40 != *((void **)v37 + 6)) {
              free(v40);
            }
            operator delete(v37);
            uint64_t v37 = v39;
          }
          while (v39);
        }
        unint64_t v38 = *(void **)(v35 - 40);
        *(void *)(v35 - 40) = 0;
        if (v38) {
          operator delete(v38);
        }
        v35 -= 48;
      }
      while (v35 != v34);
      int8x8_t v36 = (void *)*((void *)this + 24);
    }
    *((void *)this + 25) = v34;
    operator delete(v36);
  }
  unint64_t v41 = *((void *)this + 21);
  if (v41)
  {
    uint64_t v42 = *((void *)this + 22);
    uint64_t v43 = (void *)*((void *)this + 21);
    if (v42 != v41)
    {
      do
      {
        BOOL v44 = *(unsigned char **)(v42 - 24);
        if (v44)
        {
          do
          {
            if (v44[112]) {
              v44[112] = 0;
            }
            uint64_t v46 = *(unsigned char **)v44;
            uint64_t v47 = (void *)*((void *)v44 + 4);
            if (v47 != *((void **)v44 + 6)) {
              free(v47);
            }
            operator delete(v44);
            BOOL v44 = v46;
          }
          while (v46);
        }
        unint64_t v45 = *(void **)(v42 - 40);
        *(void *)(v42 - 40) = 0;
        if (v45) {
          operator delete(v45);
        }
        v42 -= 48;
      }
      while (v42 != v41);
      uint64_t v43 = (void *)*((void *)this + 21);
    }
    *((void *)this + 22) = v41;
    operator delete(v43);
  }
  size_t v48 = (void *)*((void *)this + 18);
  if (v48)
  {
    *((void *)this + 19) = v48;
    operator delete(v48);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A1EFD930(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 392);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 352);
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map((void **)(v1 + 328));
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map((void **)(v1 + 304));
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map((void **)(v1 + 280));
  uint64_t v3 = *(void *)(v1 + 272);
  *(void *)(v1 + 272) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(v1 + 264);
  *(void *)(v1 + 264) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::unique_ptr<geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>>::~unique_ptr[abi:nn180100]((void **)(v1 + 216));
  geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map((void **)(v1 + 192));
  geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map((void **)(v1 + 168));
  float v5 = *(void **)(v1 + 144);
  if (v5)
  {
    *(void *)(v1 + 152) = v5;
    operator delete(v5);
  }
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void *geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::~MarkedLRUCache(void *a1)
{
  uint64_t v2 = (unsigned char *)a1[5];
  if (v2)
  {
    do
    {
      if (v2[112]) {
        v2[112] = 0;
      }
      float v8 = *(unsigned char **)v2;
      size_t v9 = (void *)*((void *)v2 + 4);
      if (v9 != *((void **)v2 + 6)) {
        free(v9);
      }
      operator delete(v2);
      uint64_t v2 = v8;
    }
    while (v8);
  }
  uint64_t v3 = (void *)a1[3];
  a1[3] = 0;
  if (v3) {
    operator delete(v3);
  }
  if (a1[2])
  {
    uint64_t v4 = *a1;
    float v5 = (unsigned char *)a1[1];
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(*a1 + 8);
    **(void **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != (unsigned char *)a1)
    {
      do
      {
        if (v5[112]) {
          v5[112] = 0;
        }
        float v10 = (unsigned char *)*((void *)v5 + 1);
        uint64_t v11 = (void *)*((void *)v5 + 4);
        if (v11 != *((void **)v5 + 6)) {
          free(v11);
        }
        operator delete(v5);
        float v5 = v10;
      }
      while (v10 != (unsigned char *)a1);
    }
  }
  return a1;
}

void **geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((void *)v3 - 1))
        {
          uint64_t v5 = *((void *)v3 - 3);
          uint64_t v6 = (uint64_t *)*((void *)v3 - 2);
          uint64_t v7 = *v6;
          *(void *)(v7 + 8) = *(void *)(v5 + 8);
          **(void **)(v5 + 8) = v7;
          *((void *)v3 - 1) = 0;
          if (v6 != (uint64_t *)(v3 - 24))
          {
            do
            {
              size_t v9 = (char *)v6[1];
              uint64_t v8 = v6[2];
              v6[2] = 0;
              if (v8) {
                (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
              }
              operator delete(v6);
              uint64_t v6 = (uint64_t *)v9;
            }
            while (v9 != v3 - 24);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::unique_ptr<geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>>::~unique_ptr[abi:nn180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::~MarkedLRUCache(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40F417E19ELL);
  }
  return a1;
}

uint64_t *std::list<std::unique_ptr<gdc::SelectionContext>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void *std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF573230;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5731E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::PendingSceneLogic::PendingSceneLogic(md::World *,md::RunLoopController *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,void ()(void)>::~__func()
{
}

void *std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>::~pair(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = a1 + 1;
    uint64_t v3 = a1[1];
    uint64_t v4 = (uint64_t *)a1[2];
    uint64_t v5 = *v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    a1[3] = 0;
    if (v4 != a1 + 1)
    {
      do
      {
        uint64_t v8 = (uint64_t *)v4[1];
        uint64_t v7 = v4[2];
        v4[2] = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        operator delete(v4);
        uint64_t v4 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<md::SceneStateManager *,std::shared_ptr<md::SceneStateManager>::__shared_ptr_default_delete<md::SceneStateManager,md::SceneStateManager>,std::allocator<md::SceneStateManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::SceneStateManager *,std::shared_ptr<md::SceneStateManager>::__shared_ptr_default_delete<md::SceneStateManager,md::SceneStateManager>,std::allocator<md::SceneStateManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    float v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::allocateContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t altitude::TileComponent::prepareTileSetOperation()
{
  return 1;
}

uint64_t altitude::OverlayTileComponent::collectRenderItems(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 88);
  if (v8)
  {
    char v9 = *(void **)(a3 + 8);
    uint64_t v11 = v9[3];
    uint64_t v10 = v9[4];
    if (v10 == v11) {
      goto LABEL_9;
    }
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *(unsigned __int8 **)(v11 + 8 * v12);
      if (*v13 == *(_WORD *)(*(void *)(a6 + 8) + 28))
      {
        unint64_t v14 = *((void *)v13 + 1);
        uint64_t v15 = v9[15];
        if (v14 < (v9[16] - v15) >> 3) {
          break;
        }
      }
      if (++v12 >= (unint64_t)((v10 - v11) >> 3)) {
        goto LABEL_9;
      }
    }
    uint64_t v16 = *(void *)(v15 + 8 * v14);
    if (!v16) {
LABEL_9:
    }
      uint64_t v17 = 0;
    else {
      uint64_t v17 = *(void *)(*(void *)(v16 + 24) + 8 * HIBYTE(*(unsigned __int16 *)(*(void *)(a6 + 8) + 28)));
    }
    uint64_t v18 = *(void *)(v8 + 48);
    uint64_t v19 = *(void *)(v8 + 56);
    if (v18 != v19)
    {
      while (1)
      {
        if (!*(unsigned char *)(*(void *)v18 + 180)) {
          goto LABEL_14;
        }
        uint64_t v21 = *(void *)(*(void *)v18 + 184);
        int v22 = *(void **)(v17 + 80);
        unint64_t v23 = *(void *)(v17 + 88);
        if ((unint64_t)v22 >= v23) {
          break;
        }
        if (v22) {
          *int v22 = v21;
        }
        unint64_t v20 = v22 + 1;
LABEL_13:
        *(void *)(v17 + 80) = v20;
LABEL_14:
        v18 += 8;
        if (v18 == v19) {
          goto LABEL_41;
        }
      }
      uint64_t v24 = *(void *)(v17 + 72);
      uint64_t v25 = ((uint64_t)v22 - v24) >> 3;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61) {
LABEL_82:
      }
        abort();
      uint64_t v27 = v23 - v24;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v26)
      {
        uint64_t v28 = 8 * v26;
        uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v17 + 96) + 16))(*(void *)(v17 + 96), 8 * v26, 8);
        unint64_t v29 = (void *)(result + 8 * v25);
        unint64_t v26 = result + v28;
        if (result) {
          *unint64_t v29 = v21;
        }
      }
      else
      {
        unint64_t v29 = (void *)(8 * v25);
      }
      uint64_t v31 = *(void *)(v17 + 72);
      uint64_t v30 = *(void *)(v17 + 80);
      uint64_t v32 = v30 - v31;
      if (v30 == v31)
      {
        unsigned __int16 v34 = v29;
        goto LABEL_39;
      }
      unint64_t v33 = v32 - 8;
      if ((unint64_t)(v32 - 8) < 0x38)
      {
        unsigned __int16 v34 = v29;
      }
      else
      {
        unsigned __int16 v34 = v29;
        if ((unint64_t)(v30 - (void)v29) >= 0x20)
        {
          uint64_t v35 = (v33 >> 3) + 1;
          int8x8_t v36 = v29 - 2;
          uint64_t v37 = (long long *)(v30 - 16);
          uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *int8x8_t v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          unsigned __int16 v34 = &v29[-(v35 & 0x3FFFFFFFFFFFFFFCLL)];
          v30 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_38;
          }
        }
      }
      do
      {
        uint64_t v40 = *(void *)(v30 - 8);
        v30 -= 8;
        *--unsigned __int16 v34 = v40;
      }
      while (v30 != v31);
LABEL_38:
      uint64_t v30 = *(void *)(v17 + 72);
LABEL_39:
      unint64_t v20 = v29 + 1;
      *(void *)(v17 + 72) = v34;
      *(void *)(v17 + 80) = v29 + 1;
      uint64_t v41 = *(void *)(v17 + 88);
      *(void *)(v17 + 88) = v26;
      if (v30) {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v17 + 96) + 40))(*(void *)(v17 + 96), v30, v41 - v30);
      }
      goto LABEL_13;
    }
  }
LABEL_41:
  uint64_t v42 = *(void *)(v7 + 104);
  if (v42)
  {
    uint64_t v43 = *(void **)(a3 + 8);
    uint64_t v45 = v43[3];
    uint64_t v44 = v43[4];
    if (v44 == v45) {
      goto LABEL_49;
    }
    uint64_t v46 = 0;
    while (1)
    {
      uint64_t v47 = *(unsigned __int8 **)(v45 + 8 * v46);
      if (*v47 == *(_WORD *)(*(void *)(a6 + 8) + 32))
      {
        unint64_t v48 = *((void *)v47 + 1);
        uint64_t v49 = v43[15];
        if (v48 < (v43[16] - v49) >> 3) {
          break;
        }
      }
      if (++v46 >= (unint64_t)((v44 - v45) >> 3)) {
        goto LABEL_49;
      }
    }
    uint64_t v50 = *(void *)(v49 + 8 * v48);
    if (!v50) {
LABEL_49:
    }
      uint64_t v51 = 0;
    else {
      uint64_t v51 = *(void *)(*(void *)(v50 + 24) + 8 * HIBYTE(*(unsigned __int16 *)(*(void *)(a6 + 8) + 32)));
    }
    uint64_t v52 = *(void *)(v42 + 48);
    uint64_t v53 = *(void *)(v42 + 56);
    if (v52 != v53)
    {
      while (1)
      {
        if (!*(unsigned char *)(*(void *)v52 + 180)) {
          goto LABEL_54;
        }
        uint64_t v55 = *(void *)(*(void *)v52 + 184);
        BOOL v56 = *(void **)(v51 + 80);
        unint64_t v57 = *(void *)(v51 + 88);
        if ((unint64_t)v56 >= v57) {
          break;
        }
        if (v56) {
          void *v56 = v55;
        }
        double v54 = v56 + 1;
LABEL_53:
        *(void *)(v51 + 80) = v54;
LABEL_54:
        v52 += 8;
        if (v52 == v53) {
          return result;
        }
      }
      uint64_t v58 = *(void *)(v51 + 72);
      uint64_t v59 = ((uint64_t)v56 - v58) >> 3;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61) {
        goto LABEL_82;
      }
      uint64_t v61 = v57 - v58;
      if (v61 >> 2 > v60) {
        unint64_t v60 = v61 >> 2;
      }
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v60)
      {
        uint64_t v62 = 8 * v60;
        uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v51 + 96) + 16))(*(void *)(v51 + 96), 8 * v60, 8);
        float32x4_t v63 = (void *)(result + 8 * v59);
        unint64_t v60 = result + v62;
        if (result) {
          *float32x4_t v63 = v55;
        }
      }
      else
      {
        float32x4_t v63 = (void *)(8 * v59);
      }
      uint64_t v65 = *(void *)(v51 + 72);
      uint64_t v64 = *(void *)(v51 + 80);
      uint64_t v66 = v64 - v65;
      if (v64 == v65)
      {
        uint64_t v68 = v63;
        goto LABEL_79;
      }
      unint64_t v67 = v66 - 8;
      if ((unint64_t)(v66 - 8) < 0x38)
      {
        uint64_t v68 = v63;
      }
      else
      {
        uint64_t v68 = v63;
        if ((unint64_t)(v64 - (void)v63) >= 0x20)
        {
          uint64_t v69 = (v67 >> 3) + 1;
          double v70 = v63 - 2;
          int v71 = (long long *)(v64 - 16);
          uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v73 = *v71;
            *(v70 - 1) = *(v71 - 1);
            _OWORD *v70 = v73;
            v70 -= 2;
            v71 -= 2;
            v72 -= 4;
          }
          while (v72);
          uint64_t v68 = &v63[-(v69 & 0x3FFFFFFFFFFFFFFCLL)];
          v64 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_78;
          }
        }
      }
      do
      {
        uint64_t v74 = *(void *)(v64 - 8);
        v64 -= 8;
        *--uint64_t v68 = v74;
      }
      while (v64 != v65);
LABEL_78:
      uint64_t v64 = *(void *)(v51 + 72);
LABEL_79:
      double v54 = v63 + 1;
      *(void *)(v51 + 72) = v68;
      *(void *)(v51 + 80) = v63 + 1;
      uint64_t v75 = *(void *)(v51 + 88);
      *(void *)(v51 + 88) = v60;
      if (v64) {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v51 + 96) + 40))(*(void *)(v51 + 96), v64, v75 - v64);
      }
      goto LABEL_53;
    }
  }
  return result;
}

double *altitude::OverlayTileComponent::willBeDrawn(double *result, uint64_t a2, double *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    double v8 = v4[2 * v5 + 11];
    if (v8 != 0.0)
    {
      char v9 = *(double ***)(*(void *)&v8 + 48);
      uint64_t v10 = *(double ***)(*(void *)&v8 + 56);
      while (v9 != v10)
      {
        uint64_t v11 = *v9;
        uint64_t v12 = *(void **)(*(void *)(*((void *)*v9 + 24) + 64) + 16);
        unint64_t v13 = v12[1];
        if (v13) {
          unint64_t v14 = (_DWORD *)v12[9];
        }
        else {
          unint64_t v14 = 0;
        }
        double v16 = a3[10];
        double v15 = a3[11];
        double v17 = a3[12];
        double v18 = a3[9];
        double v87 = a3[8];
        double v20 = a3[6];
        double v19 = a3[7];
        double v77 = -(v87 * v16 - v19 * v15) - (v87 * v16 - v19 * v15);
        double v78 = -(v20 * v15 - v87 * v18) - (v20 * v15 - v87 * v18);
        double v79 = v20;
        double v80 = -(v19 * v18 - v20 * v16) - (v19 * v18 - v20 * v16);
        double v81 = v19;
        double v21 = -(v16 * (v16 * -2.0));
        double v22 = v15 * -2.0 * v17;
        double v85 = -(v16 * (v18 * -2.0)) - v22;
        double v86 = 1.0 - (v21 - v15 * (v15 * -2.0));
        double v23 = v17 * (v16 * -2.0);
        double v24 = v22 - v16 * (v18 * -2.0);
        double v25 = v18 * -2.0 * v18 + 1.0;
        double v26 = v25 - -(v15 * (v15 * -2.0));
        double v27 = v17 * (v18 * -2.0);
        double v82 = -(v15 * (v16 * -2.0)) - v27;
        double v83 = v23 - v15 * (v18 * -2.0);
        double v28 = -(v15 * (v18 * -2.0)) - v23;
        double v29 = v27 - v15 * (v16 * -2.0);
        double v84 = v25 - v21;
        uint64_t result = (double *)(*(uint64_t (**)(double *))(*(void *)v11 + 24))(v11);
        double v30 = v11[31];
        double v31 = result[4];
        double v32 = result[5];
        double v33 = result[6];
        double v34 = v31 + v31;
        double v35 = (v31 + v31) * v31;
        double v36 = (v32 + v32) * v32;
        double v37 = v35 + v36;
        double v38 = result[2];
        double v39 = result[3];
        double v40 = v39 + v39;
        double v41 = (v39 + v39) * v31;
        double v42 = (v32 + v32) * v33;
        double v43 = v41 - v42;
        double v44 = v42 + v41;
        double v45 = v32 * (v39 + v39);
        double v46 = v34 * v32;
        double v47 = v33 * v34;
        double v48 = 1.0 - (v39 + v39) * v39;
        double v49 = v33 * v40;
        double v50 = v48 - v36;
        double v51 = v48 - v35;
        double v52 = (v47 + v45) * v30;
        double v53 = (v46 - v49) * v30;
        double v54 = v51 * v30;
        double v55 = -(v81 + v78 * v17 + v80 * v18 - v77 * v15);
        double v56 = v11[29];
        double v57 = v11[30];
        double v58 = -(v79 + v77 * v17 + v78 * v15 - v80 * v16);
        double v59 = result[1];
        double v60 = v56 - v37 * v56;
        double v61 = v43 * v57;
        double v62 = v44 * v56;
        double v63 = v50 * v57;
        double v64 = v60 * v86 + v62 * v85;
        double v65 = v61 * v86 + v63 * v85;
        double v66 = v60 * v24 + v62 * v26;
        double v67 = v61 * v24 + v63 * v26;
        double v68 = v61 * v28 + v63 * v29;
        double v69 = v49 + v46;
        double v70 = (v45 - v47) * v56;
        double v71 = v69 * v57;
        double v72 = v58 + *result * v86 + v59 * v85 + v38 * v83;
        double v73 = v55 + *result * v24 + v59 * v26 + v38 * v82;
        double v74 = v60 * v28 + v62 * v29 + v70 * v84;
        double v75 = *result * v28 - (v87 + v77 * v16 + v80 * v17 - v78 * v18) + v59 * v29 + v38 * v84;
        *(float *)&double v62 = v64 + v70 * v83;
        *(float *)&double v70 = v66 + v70 * v82;
        *unint64_t v14 = LODWORD(v62);
        v14[1] = LODWORD(v70);
        *(float *)&double v74 = v74;
        v14[2] = LODWORD(v74);
        *(float *)&double v74 = v65 + v71 * v83;
        *(float *)&double v62 = v67 + v71 * v82;
        v14[4] = LODWORD(v74);
        v14[5] = LODWORD(v62);
        *(float *)&double v74 = v68 + v71 * v84;
        v14[6] = LODWORD(v74);
        *(float *)&double v74 = v54 * v83 + v52 * v86 + v53 * v85;
        *(float *)&double v62 = v54 * v82 + v52 * v24 + v53 * v26;
        v14[8] = LODWORD(v74);
        v14[9] = LODWORD(v62);
        *(float *)&double v74 = v54 * v84 + v52 * v28 + v53 * v29;
        v14[10] = LODWORD(v74);
        *(float *)&double v74 = v72;
        *(float *)&double v54 = v73;
        v14[12] = LODWORD(v74);
        v14[13] = LODWORD(v54);
        *(float *)&double v75 = v75;
        v14[14] = LODWORD(v75);
        v14[3] = 0;
        v14[7] = 0;
        v14[11] = 0;
        v14[15] = 1065353216;
        if (v13)
        {
          unint64_t v76 = v12[8];
          if (v76 <= v13) {
            unint64_t v76 = v13;
          }
          v12[7] = 0;
          v12[8] = v76;
        }
        ++v9;
      }
    }
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t altitude::OverlayTileComponent::needsFallbackData(altitude::OverlayTileComponent *this)
{
  return 0;
}

uint64_t altitude::OverlayTileComponent::hasLoadedFallbackData(altitude::OverlayTileComponent *this)
{
  return 0;
}

uint64_t altitude::OverlayTileComponent::hasLoadedData(altitude::OverlayTileComponent *this)
{
  if (*((unsigned char *)this + 168))
  {
    uint64_t result = *((void *)this + 11) != 0;
    if (!*((unsigned char *)this + 169)) {
      return result;
    }
  }
  else
  {
    uint64_t result = 1;
    if (!*((unsigned char *)this + 169)) {
      return result;
    }
  }
  if (*((void *)this + 13)) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t altitude::TileComponent::renderStamp(altitude::TileComponent *this)
{
  return *((void *)this + 9);
}

uint64_t altitude::TileComponent::setRenderStamp(uint64_t this, uint64_t a2)
{
  *(void *)(this + 72) = a2;
  return this;
}

void altitude::OverlayTileComponent::~OverlayTileComponent(std::__shared_weak_count **this)
{
  altitude::OverlayTileComponent::~OverlayTileComponent(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t shared_owners;

  *this = (std::__shared_weak_count *)&unk_1EF56A490;
  altitude::OverlayTileComponent::destroyOverlayElementsAndData((altitude::OverlayTileComponent *)this);
  uint64_t v2 = this[18];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = this[16];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = this[16];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = this[14];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = this[12];
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = this[12];
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  *this = (std::__shared_weak_count *)&unk_1EF568D88;
  char v6 = this[6];
  char v7 = this[7];
  if (v6 == v7)
  {
    if (v6)
    {
LABEL_15:
      this[7] = v6;
      operator delete(v6);
    }
  }
  else
  {
    do
    {
      shared_owners = v6->__shared_owners_;
      if (shared_owners) {
        (*(void (**)(uint64_t))(*(void *)shared_owners + 8))(shared_owners);
      }
      char v6 = (std::__shared_weak_count *)((char *)v6 + 16);
    }
    while (v6 != v7);
    char v6 = this[6];
    if (v6) {
      goto LABEL_15;
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[4]);
}

BOOL altitude::OverlayTileComponent::destroyOverlayElementsAndData(altitude::OverlayTileComponent *this)
{
  uint64_t v2 = *((void *)this + 11);
  BOOL v3 = v2 != 0;
  if (v2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    altitude::OverlayTileComponent::setOverlayElement((uint64_t)this, 0, &v7);
  }
  if (*((void *)this + 15))
  {
    (*(void (**)(void, void, altitude::OverlayTileComponent *))(**(void **)(*((void *)this + 2)
                                                                                           + 424)
                                                                             + 24))(*(void *)(*((void *)this + 2) + 424), *((void *)this + 2), this);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (*((void *)this + 15)) {
        (*(void (**)(void, void, altitude::OverlayTileComponent *))(**(void **)(*((void *)this + 2)
      }
                                                                                               + 424)
                                                                                 + 16))(*(void *)(*((void *)this + 2) + 424), *((void *)this + 2), this);
    }
    BOOL v3 = 1;
  }
  *((unsigned char *)this + 168) = 1;
  if (*((void *)this + 13))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    BOOL v3 = 1;
    altitude::OverlayTileComponent::setOverlayElement((uint64_t)this, 1u, &v7);
  }
  if (*((void *)this + 17))
  {
    (*(void (**)(void, void, altitude::OverlayTileComponent *))(**(void **)(*((void *)this + 2)
                                                                                           + 424)
                                                                             + 24))(*(void *)(*((void *)this + 2) + 424), *((void *)this + 2), this);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (*((void *)this + 17)) {
        (*(void (**)(void, void, altitude::OverlayTileComponent *))(**(void **)(*((void *)this + 2)
      }
                                                                                               + 424)
                                                                                 + 16))(*(void *)(*((void *)this + 2) + 424), *((void *)this + 2), this);
    }
    BOOL v3 = 1;
  }
  *((unsigned char *)this + 169) = 1;
  return v3;
}

void altitude::OverlayTileComponent::setOverlayElement(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 16 * a2;
  uint64_t v9 = *(void *)(v6 + 88);
  uint64_t v8 = (void *)(v6 + 88);
  uint64_t v7 = v9;
  uint64_t v11 = (std::__shared_weak_count **)(v8 + 1);
  uint64_t v10 = (std::__shared_weak_count *)v8[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 16) + 424) + 24))(*(void *)(*(void *)(a1 + 16) + 424), *(void *)(a1 + 16), a1);
  }
  uint64_t v13 = *a3;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a2;
  *uint64_t v8 = v13;
  double v15 = *v11;
  *uint64_t v11 = v12;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    uint64_t v16 = *a3;
    if (!*a3) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = *a3;
    if (!*a3)
    {
LABEL_15:
      uint64_t v19 = 0;
      goto LABEL_16;
    }
  }
  double v17 = *(uint64_t **)(v16 + 48);
  double v18 = *(uint64_t **)(v16 + 56);
  if (v17 == v18) {
    goto LABEL_15;
  }
  uint64_t v19 = 0;
  do
  {
    uint64_t v20 = *v17++;
    uint64_t v21 = *(void *)(v20 + 216);
    v19 += (*(void *)(**(void **)(v21 + 64) + 48) - *(void *)(**(void **)(v21 + 64) + 40))
         * *(void *)(**(void **)(v21 + 64) + 8)
         + (*(void *)(*(void *)(v21 + 96) + 48) - *(void *)(*(void *)(v21 + 96) + 40))
         * *(void *)(*(void *)(v21 + 96) + 8);
  }
  while (v17 != v18);
LABEL_16:
  *(void *)(a1 + 8 * v14 + 152) = v19;
  if (*v8) {
    (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 16) + 424) + 16))(*(void *)(*(void *)(a1 + 16) + 424), *(void *)(a1 + 16), a1);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t karo::media::ImageLoader::loadFromChunk(int *a1, unsigned __int8 *data, size_t size, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t result = 0;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (data && size)
  {
    if (size >= 0xB
      && *data == 255
      && data[1] == 216
      && data[2] == 255
      && data[3] == 224
      && data[6] == 74
      && data[7] == 70
      && data[8] == 73
      && data[9] == 70
      && !data[10])
    {
      goto LABEL_58;
    }
    uint64_t v11 = *((unsigned __int8 *)a4 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)a4 + 1);
    }
    if (v11 != 3) {
      goto LABEL_39;
    }
    uint64_t v13 = *(unsigned __int16 **)a4;
    if (v12 >= 0) {
      uint64_t v13 = a4;
    }
    BOOL v14 = *v13 == 28778 && *((unsigned char *)v13 + 2) == 103;
    if (v14 || ((v15 = *v13, int v16 = *((unsigned __int8 *)v13 + 2), v15 == 20554) ? (v17 = v16 == 71) : (v17 = 0), v17))
    {
LABEL_58:
      if (karo::media::JpegLoaderFig::loadFromChunk(a1, (pwin_jpg *)data, (unsigned __int8 *)size, a5, (int *)a5)) {
        return 1;
      }
      return karo::media::JpegLoaderPwin::loadFromChunk(a1, (pwin_jpg *)data, (unsigned __int8 *)size, a5, v33);
    }
    else
    {
LABEL_39:
      if (*(_DWORD *)data == 1196314761 && *((_DWORD *)data + 1) == 169478669
        || v11 == 3
        && (v12 >= 0 ? (double v18 = a4) : (double v18 = *(unsigned __int16 **)a4),
            *v18 == 28272 ? (BOOL v19 = *((unsigned char *)v18 + 2) == 103) : (BOOL v19 = 0),
            v19
         || ((v20 = *v18, v21 = *((unsigned __int8 *)v18 + 2), v20 == 20048) ? (BOOL v22 = v21 == 71) : (BOOL v22 = 0), v22)))
      {
        return (uint64_t)karo::media::PngLoader::loadFromChunk(a1, data, size, a5);
      }
      else if (*(_DWORD *)data == 1554098963)
      {
        int v23 = data[4];
        unsigned int v24 = data[5];
        unsigned int v25 = data[6];
        if ((v23 - 13) < 0xFFFFFFF6
          || v24 < 3
          || v24 > 0xC
          || (v25 < 3 ? (BOOL v26 = v25 == 1) : (BOOL v26 = 1), v26 ? (v27 = 0) : (v27 = 1), v25 > 0xC || v27))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v34 = GEOGetVectorKitVKDefaultLog_log;
          uint64_t result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
          if (result)
          {
            int v46 = 67109632;
            int v47 = v23;
            __int16 v48 = 1024;
            unsigned int v49 = v24;
            __int16 v50 = 1024;
            unsigned int v51 = v25;
            double v35 = "Not recognized as ASTC data %d x %d x %d";
            double v36 = v34;
            uint32_t v37 = 20;
LABEL_73:
            _os_log_impl(&dword_1A1780000, v36, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&v46, v37);
            return 0;
          }
        }
        else
        {
          int v28 = *(unsigned __int16 *)(data + 7);
          int v29 = data[9];
          int v30 = *((unsigned __int16 *)data + 5);
          int v31 = data[12];
          if (v23 == 4 && v24 == 4)
          {
            int v32 = 15;
LABEL_115:
            karo::media::Image::setFormat(a5, v32);
            double v38 = *(int **)(a5 + 8);
            if (v38)
            {
              *double v38 = v28 | (v29 << 16);
              v38[1] = v30 | (v31 << 16);
            }
            size_t v39 = size - 16;
            double v40 = (std::__shared_weak_count *)operator new(0x30uLL);
            v40->__shared_owners_ = 0;
            v40->__shared_weak_owners_ = 0;
            v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
            double v41 = ggl::Data::Data((ggl::Data *)&v40[1], data + 16, v39);
            uint64_t v42 = *(void *)(a5 + 8);
            if (v42)
            {
              double v43 = *(ggl::Data ***)(v42 + 16);
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
              double v44 = (std::__shared_weak_count *)v43[1];
              *double v43 = v41;
              v43[1] = (ggl::Data *)v40;
              if (v44)
              {
                if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
            }
            if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
            return 1;
          }
          if (v23 == 5 && v24 == 4)
          {
            int v32 = 16;
            goto LABEL_115;
          }
          if (v23 == 5 && v24 == 5)
          {
            int v32 = 17;
            goto LABEL_115;
          }
          if (v23 == 6 && v24 == 5)
          {
            int v32 = 18;
            goto LABEL_115;
          }
          if (v23 == 6 && v24 == 6)
          {
            int v32 = 19;
            goto LABEL_115;
          }
          if (v23 == 8 && v24 == 5)
          {
            int v32 = 20;
            goto LABEL_115;
          }
          if (v23 == 8 && v24 == 6)
          {
            int v32 = 21;
            goto LABEL_115;
          }
          if (v23 == 8 && v24 == 8)
          {
            int v32 = 22;
            goto LABEL_115;
          }
          if (v23 == 10 && v24 == 5)
          {
            int v32 = 23;
            goto LABEL_115;
          }
          if (v23 == 10 && v24 == 6)
          {
            int v32 = 24;
            goto LABEL_115;
          }
          if (v23 == 10 && v24 == 8)
          {
            int v32 = 25;
            goto LABEL_115;
          }
          if (v23 == 10 && v24 == 10)
          {
            int v32 = 26;
            goto LABEL_115;
          }
          if (v23 == 12 && v24 == 10)
          {
            int v32 = 27;
            goto LABEL_115;
          }
          if (v23 == 12 && v24 == 12)
          {
            int v32 = 28;
            goto LABEL_115;
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v45 = GEOGetVectorKitVKDefaultLog_log;
          uint64_t result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
          if (result)
          {
            int v46 = 67109376;
            int v47 = v23;
            __int16 v48 = 1024;
            unsigned int v49 = v24;
            double v35 = "ASTC, Invalid block size combination %d x %d";
            double v36 = v45;
            uint32_t v37 = 14;
            goto LABEL_73;
          }
        }
      }
      else
      {
        if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a4, "astc")
          || std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a4, "ASTC"))
        {
          return 0;
        }
        uint64_t result = karo::media::ImageIOLoader::supportsFile((karo::media::ImageIOLoader *)data, size);
        if (result)
        {
          return karo::media::ImageIOLoader::loadFromChunk(data, size, a5);
        }
      }
    }
  }
  return result;
}

BOOL karo::media::ImageLoader::supportsFileType(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1 != 4)
  {
    if (v1 != 3) {
      return 0;
    }
    BOOL v3 = v2 >= 0 ? (unsigned __int16 *)a1 : *(unsigned __int16 **)a1;
    if ((*v3 != 28778 || *((unsigned char *)v3 + 2) != 103)
      && (*v3 != 20554 || *((unsigned char *)v3 + 2) != 71)
      && (*v3 != 28272 || *((unsigned char *)v3 + 2) != 103))
    {
      int v7 = *v3;
      int v8 = *((unsigned __int8 *)v3 + 2);
      if (v7 != 20048 || v8 != 71) {
        return 0;
      }
    }
    return 1;
  }
  uint64_t v11 = *(_DWORD **)a1;
  if (v2 >= 0) {
    uint64_t v11 = (_DWORD *)a1;
  }
  if (*v11 == 1668576097 || *v11 == 1129599809) {
    return 1;
  }
  if (v2 >= 0) {
    int v12 = (_DWORD *)a1;
  }
  else {
    int v12 = *(_DWORD **)a1;
  }
  BOOL result = *v12 == 1718183272;
  if (*v12 != 1718183272) {
    return *v12 == 1179206984;
  }
  return result;
}

uint64_t md::EntityDebugHighlightLogic::debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  if (!*(unsigned char *)(result + 272))
  {
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  uint64_t v4 = result;
  unint64_t v157 = *(int8x8_t ***)(a2 + 24);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v160);
  if (!*(unsigned char *)(v4 + 272))
  {
    BOOL result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  uint64_t v5 = *(int8x8_t **)(v4 + 152);
  unint64_t v6 = *(void *)(v4 + 160);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\n=== Components ===\n", 20);
  long long __dst = a3;
  int v7 = (void *)v5[17];
  if (v7)
  {
    unint64_t v8 = v6 >> 39;
    uint64_t v159 = HIDWORD(v6) & 0x7F;
    while (1)
    {
      uint64_t v10 = (void *)v7[3];
      if (!(*(unsigned int (**)(void *, unint64_t))(*v10 + 24))(v10, v6)) {
        goto LABEL_8;
      }
      uint64_t v11 = v10[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, v10[2], v10[3]);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\n", 1);
      if (v11 <= (uint64_t)0xF44C196EC679B51BLL) {
        break;
      }
      if (v11 <= 0x1F5CA557A3AFA83ELL)
      {
        if (v11 == 0xF44C196EC679B51CLL)
        {
          double v80 = (void *)gdc::Registry::storage<md::components::Visibility>(v5);
          uint64_t v81 = v80[4];
          if (v8 >= (v80[5] - v81) >> 3) {
            goto LABEL_8;
          }
          uint64_t v82 = *(void *)(v81 + 8 * v8);
          if (!v82) {
            goto LABEL_8;
          }
          unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * v159);
          uint64_t v85 = v80[7];
          uint64_t v84 = v80[8];
          if (v83 >= (v84 - v85) >> 3) {
            goto LABEL_8;
          }
          uint64_t v86 = v85 + 8 * v83;
          if (v86 == v84 || *(_DWORD *)(v86 + 4) != HIDWORD(v6)) {
            goto LABEL_8;
          }
          uint64_t v88 = v80[10];
          if (!v88 || v88 + v83 == v80[11]) {
            goto LABEL_8;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tIsVisible:", 11);
          uint64_t v9 = (void *)std::ostream::operator<<();
          goto LABEL_7;
        }
        if (v11 != 0x1049843FF67503A0) {
          goto LABEL_8;
        }
        int v12 = (void *)gdc::Registry::storage<md::components::MarketMask>(v5);
        uint64_t v13 = v12[4];
        if (v8 >= (v12[5] - v13) >> 3) {
          goto LABEL_8;
        }
        uint64_t v14 = *(void *)(v13 + 8 * v8);
        if (!v14) {
          goto LABEL_8;
        }
        unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * v159);
        uint64_t v17 = v12[7];
        uint64_t v16 = v12[8];
        if (v15 >= (v16 - v17) >> 3) {
          goto LABEL_8;
        }
        uint64_t v18 = v17 + 8 * v15;
        if (v18 == v16 || *(_DWORD *)(v18 + 4) != HIDWORD(v6)) {
          goto LABEL_8;
        }
        uint64_t v20 = v12[10];
        if (!v20) {
          goto LABEL_8;
        }
        int v21 = (char *)(v20 + v15);
        if (v20 + v15 == v12[11]) {
          goto LABEL_8;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tmask:", 6);
        char v22 = *v21;
        std::ios_base::getloc((const std::ios_base *)((char *)v160 + *(void *)(v160[0] - 24)));
        int v23 = (std::locale::id *)MEMORY[0x1E4FBA258];
        unsigned int v24 = std::locale::use_facet(&v170, MEMORY[0x1E4FBA258]);
        unsigned __int8 v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 48);
        std::ios_base::getloc((const std::ios_base *)((char *)v160 + *(void *)(v160[0] - 24)));
        BOOL v26 = std::locale::use_facet(&v169, v23);
        char v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 49);
        char v173 = 8;
        uint64_t v171 = 0x101010101010101 * v25;
        LOBYTE(v172) = 0;
        if ((v22 & 1) == 0)
        {
          if ((v22 & 2) == 0) {
            goto LABEL_26;
          }
LABEL_133:
          BYTE6(v171) = v27;
          if ((v22 & 4) != 0) {
            goto LABEL_134;
          }
LABEL_27:
          if ((v22 & 8) == 0) {
            goto LABEL_28;
          }
LABEL_135:
          BYTE4(v171) = v27;
          if ((v22 & 0x10) != 0) {
            goto LABEL_136;
          }
LABEL_29:
          if ((v22 & 0x20) == 0) {
            goto LABEL_30;
          }
LABEL_137:
          BYTE2(v171) = v27;
          if ((v22 & 0x40) != 0) {
            goto LABEL_138;
          }
LABEL_31:
          if ((v22 & 0x80) == 0) {
            goto LABEL_32;
          }
LABEL_139:
          LOBYTE(v171) = v27;
          goto LABEL_32;
        }
        HIBYTE(v171) = v27;
        if ((v22 & 2) != 0) {
          goto LABEL_133;
        }
LABEL_26:
        if ((v22 & 4) == 0) {
          goto LABEL_27;
        }
LABEL_134:
        BYTE5(v171) = v27;
        if ((v22 & 8) != 0) {
          goto LABEL_135;
        }
LABEL_28:
        if ((v22 & 0x10) == 0) {
          goto LABEL_29;
        }
LABEL_136:
        BYTE3(v171) = v27;
        if ((v22 & 0x20) != 0) {
          goto LABEL_137;
        }
LABEL_30:
        if ((v22 & 0x40) == 0) {
          goto LABEL_31;
        }
LABEL_138:
        BYTE1(v171) = v27;
        if (v22 < 0) {
          goto LABEL_139;
        }
LABEL_32:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)&v171, 8);
        if (v173 < 0) {
          operator delete((void *)v171);
        }
        std::locale::~locale(&v169);
        std::locale::~locale(&v170);
        uint64_t v9 = v160;
LABEL_7:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
        goto LABEL_8;
      }
      if (v11 == 0x1F5CA557A3AFA83FLL)
      {
        uint64_t v89 = (void *)gdc::Registry::storage<md::components::FlexSelectionInfo>(v5);
        uint64_t v90 = v89[4];
        if (v8 >= (v89[5] - v90) >> 3) {
          goto LABEL_8;
        }
        uint64_t v91 = *(void *)(v90 + 8 * v8);
        if (!v91) {
          goto LABEL_8;
        }
        unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v159);
        uint64_t v94 = v89[7];
        uint64_t v93 = v89[8];
        if (v92 >= (v93 - v94) >> 3) {
          goto LABEL_8;
        }
        uint64_t v95 = v94 + 8 * v92;
        if (v95 == v93 || *(_DWORD *)(v95 + 4) != HIDWORD(v6)) {
          goto LABEL_8;
        }
        uint64_t v97 = v89[10];
        if (!v97 || v97 + 4 * v92 == v89[11]) {
          goto LABEL_8;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tflexDistance:", 14);
        uint64_t v9 = (void *)std::ostream::operator<<();
        goto LABEL_7;
      }
      if (v11 == 0x299DE7A80C80C439)
      {
        uint32_t v37 = (void *)gdc::Registry::storage<md::components::Material>(v5);
        uint64_t v38 = v37[4];
        if (v8 < (v37[5] - v38) >> 3)
        {
          uint64_t v39 = *(void *)(v38 + 8 * v8);
          if (v39)
          {
            unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * v159);
            uint64_t v42 = v37[7];
            uint64_t v41 = v37[8];
            if (v40 < (v41 - v42) >> 3)
            {
              uint64_t v43 = v42 + 8 * v40;
              if (v43 != v41 && *(_DWORD *)(v43 + 4) == HIDWORD(v6))
              {
                uint64_t v45 = v37[10];
                if (v45)
                {
                  int v46 = (unint64_t *)(v45 + 24 * v40);
                  if (v46 != (unint64_t *)v37[11])
                  {
                    gms::MaterialManager<ggl::Texture2D>::getMaterialSheet(&v171, *v157, *v46);
                    uint64_t v47 = v171;
                    if (v171)
                    {
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tSheet:", 7);
                      __int16 v48 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)"\n", 1);
                      uint64_t v49 = v45 + 24 * v40 + 8;
                      if (*(void *)v49)
                      {
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tSource Material:", 17);
                        uint64_t v50 = *(void *)(*(void *)v49 + 16);
                        unsigned int v51 = *(std::__shared_weak_count **)(*(void *)v49 + 24);
                        if (v51) {
                          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v52 = *(void **)(v47 + 48);
                        for (uint64_t i = *(void **)(v47 + 40); i != v52; i += 2)
                        {
                          if (*i == v50) {
                            break;
                          }
                        }
                        double v54 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
                        if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                          std::__shared_weak_count::__release_weak(v51);
                        }
                        double v55 = (void *)v171;
                        uint64_t v56 = *(void *)(*(void *)v49 + 16);
                        double v57 = *(std::__shared_weak_count **)(*(void *)v49 + 24);
                        if (v57) {
                          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v58 = v55[2];
                        if (!v58) {
                          goto LABEL_141;
                        }
                        double v59 = (char *)v55[5];
                        double v60 = (char *)v55[6];
                        double v61 = v59;
                        if (v59 != v60)
                        {
                          while (*(void *)v61 != v56)
                          {
                            v61 += 16;
                            if (v61 == v60)
                            {
                              double v61 = v60;
                              break;
                            }
                          }
                        }
                        if (v61 == v60) {
LABEL_141:
                        }
                          uint64_t v62 = 0;
                        else {
                          uint64_t v62 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v58 + 16))(v58, (unint64_t)(v61 - v59) >> 4);
                        }
                        if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                          std::__shared_weak_count::__release_weak(v57);
                        }
                        uint64_t v154 = v49;
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t\tattrs:[\n", 10);
                        if (v62)
                        {
                          int v155 = *(unsigned __int16 *)(v62 + 10);
                          if (*(_WORD *)(v62 + 10))
                          {
                            long long v109 = 0;
                            unsigned int v110 = 0;
                            LOWORD(v111) = *(_WORD *)(v62 + 10);
                            do
                            {
                              if (v110 < (unsigned __int16)v111)
                              {
                                long long v109 = (int *)(*(void *)v62 + 4 * v110);
                                uint64_t v47 = *(void *)v62 + *(unsigned __int16 *)(v62 + 8) + 2 * v110;
                              }
                              uint64_t v112 = gss::to_string(*v109);
                              double v113 = gss::to_string(*v109, *(_WORD *)v47);
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t\t  ", 4);
                              int v114 = (void *)std::ostream::operator<<();
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v114, (uint64_t)":", 1);
                              std::ostream::operator<<();
                              if (v112 && v113)
                              {
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"(", 1);
                                uint64_t v115 = gss::to_string(*v109);
                                size_t v116 = strlen(v115);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v115, v116);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)":", 1);
                                uint64_t v117 = gss::to_string(*v109, *(_WORD *)v47);
                                size_t v118 = strlen(v117);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v117, v118);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)")", 1);
                              }
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\n", 1);
                              unsigned int v111 = *(unsigned __int16 *)(v62 + 10);
                              if (v110 + 1 < v111) {
                                ++v110;
                              }
                              else {
                                unsigned int v110 = *(unsigned __int16 *)(v62 + 10);
                              }
                            }
                            while (v110 != v155);
                          }
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t\t]\n", 4);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tTarget Material:", 17);
                        uint64_t v119 = v171;
                        uint64_t v120 = *(void *)(*(void *)v154 + 32);
                        size_t v121 = *(std::__shared_weak_count **)(*(void *)v154 + 40);
                        if (v121) {
                          atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v123 = *(void **)(v119 + 40);
                        uint64_t v122 = *(void **)(v119 + 48);
                        for (uint64_t j = v123; j != v122; j += 2)
                        {
                          if (*j == v120) {
                            break;
                          }
                        }
                        int v125 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v125, (uint64_t)"\n", 1);
                        if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                        uint64_t v126 = (void *)v171;
                        uint64_t v127 = *(void *)(*(void *)v154 + 16);
                        std::string::size_type v128 = *(std::__shared_weak_count **)(*(void *)v154 + 24);
                        if (v128) {
                          atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v129 = v126[2];
                        if (!v129) {
                          goto LABEL_174;
                        }
                        size_t v130 = (char *)v126[5];
                        unint64_t v131 = (char *)v126[6];
                        uint64_t v132 = v130;
                        if (v130 != v131)
                        {
                          while (*(void *)v132 != v127)
                          {
                            v132 += 16;
                            if (v132 == v131)
                            {
                              uint64_t v132 = v131;
                              break;
                            }
                          }
                        }
                        if (v132 == v131) {
LABEL_174:
                        }
                          uint64_t v133 = 0;
                        else {
                          uint64_t v133 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v129 + 16))(v129, (unint64_t)(v132 - v130) >> 4);
                        }
                        if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                          std::__shared_weak_count::__release_weak(v128);
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t\tattrs:[\n", 10);
                        if (v133)
                        {
                          int v156 = *(unsigned __int16 *)(v133 + 10);
                          if (*(_WORD *)(v133 + 10))
                          {
                            uint64_t v134 = 0;
                            unsigned int v135 = 0;
                            LOWORD(v136) = *(_WORD *)(v133 + 10);
                            do
                            {
                              if (v135 < (unsigned __int16)v136)
                              {
                                uint64_t v134 = (int *)(*(void *)v133 + 4 * v135);
                                uint64_t v47 = *(void *)v133 + *(unsigned __int16 *)(v133 + 8) + 2 * v135;
                              }
                              uint64_t v137 = gss::to_string(*v134);
                              uint64_t v138 = gss::to_string(*v134, *(_WORD *)v47);
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t\t  ", 4);
                              uint64_t v139 = (void *)std::ostream::operator<<();
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v139, (uint64_t)":", 1);
                              std::ostream::operator<<();
                              if (v137 && v138)
                              {
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"(", 1);
                                size_t v140 = gss::to_string(*v134);
                                size_t v141 = strlen(v140);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v140, v141);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)":", 1);
                                long long v142 = gss::to_string(*v134, *(_WORD *)v47);
                                size_t v143 = strlen(v142);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v142, v143);
                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)")", 1);
                              }
                              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\n", 1);
                              unsigned int v136 = *(unsigned __int16 *)(v133 + 10);
                              if (v135 + 1 < v136) {
                                ++v135;
                              }
                              else {
                                unsigned int v135 = *(unsigned __int16 *)(v133 + 10);
                              }
                            }
                            while (v135 != v156);
                          }
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t\t]\n", 4);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tBlend Factor:", 14);
                        uint64_t v144 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v144, (uint64_t)"\n", 1);
                        goto LABEL_193;
                      }
                      uint64_t v107 = "\tMaterial: NONE\n";
                      uint64_t v108 = 16;
                    }
                    else
                    {
                      uint64_t v107 = "\tSheet: NOT_AVAILABLE\n";
                      uint64_t v108 = 22;
                    }
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v107, v108);
LABEL_193:
                    long long v145 = v172;
                    if (v172 && !atomic_fetch_add(&v172->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_8:
      int v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_196;
      }
    }
    switch(v11)
    {
      case 0xA4F4C87C991FC6E0:
        double v63 = (void *)gdc::Registry::storage<md::components::ClientState>(v5);
        uint64_t v64 = v63[4];
        if (v8 < (v63[5] - v64) >> 3)
        {
          uint64_t v65 = *(void *)(v64 + 8 * v8);
          if (v65)
          {
            unint64_t v66 = *(unsigned __int16 *)(v65 + 2 * v159);
            uint64_t v68 = v63[7];
            uint64_t v67 = v63[8];
            if (v66 < (v67 - v68) >> 3)
            {
              uint64_t v69 = v68 + 8 * v66;
              if (v69 != v67 && *(_DWORD *)(v69 + 4) == HIDWORD(v6))
              {
                uint64_t v71 = v63[10];
                if (v71)
                {
                  uint64_t v72 = v71 + 16 * v66;
                  if (v72 != v63[11])
                  {
                    int v73 = *(unsigned __int16 *)(v72 + 10);
                    if (*(_WORD *)(v72 + 10))
                    {
                      double v74 = 0;
                      unsigned int v75 = 0;
                      LOWORD(v76) = *(_WORD *)(v72 + 10);
                      do
                      {
                        if (v75 < (unsigned __int16)v76) {
                          double v74 = (int *)(*(void *)v72 + 4 * v75);
                        }
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\t(", 2);
                        double v77 = gss::to_string(*v74);
                        size_t v78 = strlen(v77);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v77, v78);
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)",", 1);
                        double v79 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)")\n", 2);
                        unsigned int v76 = *(unsigned __int16 *)(v72 + 10);
                        if (v75 + 1 < v76) {
                          ++v75;
                        }
                        else {
                          unsigned int v75 = *(unsigned __int16 *)(v72 + 10);
                        }
                      }
                      while (v75 != v73);
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_8;
      case 0xAE13B930655B4EC8:
        uint64_t v98 = (void *)gdc::Registry::storage<md::components::Building>(v5);
        uint64_t v99 = v98[4];
        if (v8 >= (v98[5] - v99) >> 3) {
          goto LABEL_8;
        }
        uint64_t v100 = *(void *)(v99 + 8 * v8);
        if (!v100) {
          goto LABEL_8;
        }
        unint64_t v101 = *(unsigned __int16 *)(v100 + 2 * v159);
        uint64_t v103 = v98[7];
        uint64_t v102 = v98[8];
        if (v101 >= (v102 - v103) >> 3) {
          goto LABEL_8;
        }
        uint64_t v104 = v103 + 8 * v101;
        if (v104 == v102 || *(_DWORD *)(v104 + 4) != HIDWORD(v6)) {
          goto LABEL_8;
        }
        uint64_t v106 = v98[10];
        if (!v106 || v106 + 8 * v101 == v98[11]) {
          goto LABEL_8;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tid:", 4);
        break;
      case 0xD7CF92E7713C257ALL:
        int v28 = (void *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(v5);
        uint64_t v29 = v28[4];
        if (v8 >= (v28[5] - v29) >> 3) {
          goto LABEL_8;
        }
        uint64_t v30 = *(void *)(v29 + 8 * v8);
        if (!v30) {
          goto LABEL_8;
        }
        unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * v159);
        uint64_t v33 = v28[7];
        uint64_t v32 = v28[8];
        if (v31 >= (v32 - v33) >> 3) {
          goto LABEL_8;
        }
        uint64_t v34 = v33 + 8 * v31;
        if (v34 == v32 || *(_DWORD *)(v34 + 4) != HIDWORD(v6)) {
          goto LABEL_8;
        }
        uint64_t v36 = v28[10];
        if (!v36 || v36 + 96 * v31 == v28[11]) {
          goto LABEL_8;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)"\tassetId:", 9);
        break;
      default:
        goto LABEL_8;
    }
    uint64_t v9 = (void *)std::ostream::operator<<();
    goto LABEL_7;
  }
LABEL_196:
  if ((v167 & 0x10) != 0)
  {
    unint64_t v148 = v166;
    if (v166 < v163)
    {
      unint64_t v166 = v163;
      unint64_t v148 = v163;
    }
    size_t v149 = (const void **)&v162;
  }
  else
  {
    if ((v167 & 8) == 0)
    {
      size_t v146 = 0;
      unint64_t v147 = __dst;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_211;
    }
    size_t v149 = (const void **)v161;
    unint64_t v148 = v161[2];
  }
  unint64_t v147 = __dst;
  size_t v150 = *v149;
  size_t v146 = v148 - (void)*v149;
  if (v146 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v146 >= 0x17)
  {
    uint64_t v151 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v146 | 7) != 0x17) {
      uint64_t v151 = v146 | 7;
    }
    uint64_t v152 = v151 + 1;
    uint64_t v153 = operator new(v151 + 1);
    __dst[1] = v146;
    __dst[2] = v152 | 0x8000000000000000;
    *long long __dst = v153;
    unint64_t v147 = v153;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v146;
    if (!v146) {
      goto LABEL_211;
    }
  }
  memmove(v147, v150, v146);
LABEL_211:
  *((unsigned char *)v147 + v146) = 0;
  v160[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v160 + *(void *)(v160[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v160[1] = MEMORY[0x1E4FBA470] + 16;
  if (v165 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v168);
}

void sub_1A1F00720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v9 - 104);
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Building>(int8x8_t *a1)
{
  unint64_t v10 = 0xAE13B930655B4EC8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xAE13B930655B4EC8;
    if (*(void *)&v1 <= 0xAE13B930655B4EC8) {
      unint64_t v3 = 0xAE13B930655B4EC8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xAE13B930655B4EC8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xAE13B930655B4EC8)
      {
        if (v5[2] == 0xAE13B930655B4EC8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xAE13B930655B4EC8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xAE13B930655B4EC8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F00A78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::FlexSelectionInfo>(int8x8_t *a1)
{
  uint64_t v10 = 0x1F5CA557A3AFA83FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1F5CA557A3AFA83FLL;
    if (*(void *)&v1 <= 0x1F5CA557A3AFA83FuLL) {
      uint64_t v3 = 0x1F5CA557A3AFA83FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1F5CA557A3AFA83FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1F5CA557A3AFA83FLL)
      {
        if (v5[2] == 0x1F5CA557A3AFA83FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1F5CA557A3AFA83FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1F5CA557A3AFA83FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F00CE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::FlexSelectionInfo>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::Building>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::Building>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::Building>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::Building>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = (void *)(a2 - 40);
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                double v55 = *(double *)v11;
                if (*(double *)v10 < *(double *)v11)
                {
                  uint64_t v56 = *(void *)(v11 + 32);
                  *(void *)unint64_t v11 = *v10;
                  int v57 = *(_DWORD *)(a2 - 32);
                  *(void *)(v11 + 32) = *(void *)(a2 - 8);
                  long long v58 = *(_OWORD *)(v11 + 8);
                  *(_DWORD *)(v11 + 8) = v57;
                  *(_DWORD *)(v11 + 12) = *(_DWORD *)(a2 - 28);
                  *(_DWORD *)(v11 + 16) = *(_DWORD *)(a2 - 24);
                  *(_DWORD *)(v11 + 20) = *(_DWORD *)(a2 - 20);
                  uint64_t v59 = *(void *)(v11 + 24);
                  *(_DWORD *)(v11 + 24) = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(v11 + 28) = *(_DWORD *)(a2 - 12);
                  *(double *)(a2 - 40) = v55;
                  *(_OWORD *)(a2 - 32) = v58;
                  *(void *)(a2 - 16) = v59;
                  *(void *)(a2 - 8) = v56;
                }
                break;
              case 3uLL:
                BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v11, v11 + 40, a2 - 40);
                break;
              case 4uLL:
                BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v11, v11 + 40, v11 + 80, a2 - 40);
                break;
              case 5uLL:
                BOOL result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,0>(v11, v11 + 40, v11 + 80, v11 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 959)
          {
            unint64_t v60 = v11 + 40;
            BOOL v62 = v11 == a2 || v60 == a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = v11;
                do
                {
                  unint64_t v66 = v60;
                  double v67 = *(double *)(v64 + 40);
                  double v68 = *(double *)v64;
                  if (v67 < *(double *)v64)
                  {
                    long long v69 = *(_OWORD *)(v64 + 48);
                    uint64_t v70 = *(void *)(v64 + 64);
                    uint64_t v71 = v63;
                    uint64_t v72 = *(void *)(v64 + 72);
                    do
                    {
                      uint64_t v73 = v11 + v71;
                      *(double *)(v73 + 40) = v68;
                      *(void *)(v73 + 48) = *(void *)(v11 + v71 + 8);
                      *(_DWORD *)(v73 + 56) = *(_DWORD *)(v11 + v71 + 16);
                      *(void *)(v73 + 60) = *(void *)(v11 + v71 + 20);
                      *(_DWORD *)(v73 + 68) = *(_DWORD *)(v11 + v71 + 28);
                      *(void *)(v73 + 72) = *(void *)(v11 + v71 + 32);
                      if (!v71)
                      {
                        uint64_t v65 = v11;
                        goto LABEL_78;
                      }
                      double v68 = *(double *)(v73 - 40);
                      v71 -= 40;
                    }
                    while (v67 < v68);
                    uint64_t v65 = v11 + v71 + 40;
LABEL_78:
                    *(double *)uint64_t v65 = v67;
                    *(_OWORD *)(v65 + 8) = v69;
                    *(void *)(v65 + 24) = v70;
                    *(void *)(v65 + 32) = v72;
                  }
                  unint64_t v60 = v66 + 40;
                  v63 += 40;
                  unint64_t v64 = v66;
                }
                while (v66 + 40 != a2);
              }
            }
            else if (!v62)
            {
              unint64_t v112 = v11 + 16;
              do
              {
                unint64_t v113 = v60;
                double v114 = *(double *)(v9 + 40);
                double v115 = *(double *)v9;
                if (v114 < *(double *)v9)
                {
                  long long v116 = *(_OWORD *)(v9 + 48);
                  uint64_t v117 = *(void *)(v9 + 64);
                  unint64_t v118 = v112;
                  uint64_t v119 = *(void *)(v9 + 72);
                  do
                  {
                    *(double *)(v118 + 24) = v115;
                    *(void *)(v118 + 32) = *(void *)(v118 - 8);
                    *(_DWORD *)(v118 + 40) = *(_DWORD *)v118;
                    *(void *)(v118 + 44) = *(void *)(v118 + 4);
                    *(_DWORD *)(v118 + 52) = *(_DWORD *)(v118 + 12);
                    *(void *)(v118 + 56) = *(void *)(v118 + 16);
                    double v115 = *(double *)(v118 - 56);
                    v118 -= 40;
                  }
                  while (v114 < v115);
                  *(double *)(v118 + 24) = v114;
                  *(_OWORD *)(v118 + 32) = v116;
                  *(void *)(v118 + 48) = v117;
                  *(void *)(v118 + 56) = v119;
                }
                unint64_t v60 = v113 + 40;
                v112 += 40;
                unint64_t v9 = v113;
              }
              while (v113 + 40 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v74 = (v13 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  unint64_t v78 = v11 + 40 * v77;
                  if (2 * v76 + 2 < (uint64_t)v13 && *(double *)v78 < *(double *)(v78 + 40))
                  {
                    v78 += 40;
                    uint64_t v77 = 2 * v76 + 2;
                  }
                  unint64_t v79 = v11 + 40 * v76;
                  double v80 = *(double *)v78;
                  double v81 = *(double *)v79;
                  if (*(double *)v78 >= *(double *)v79)
                  {
                    long long v82 = *(_OWORD *)(v79 + 8);
                    uint64_t v83 = *(void *)(v79 + 24);
                    uint64_t v84 = *(void *)(v79 + 32);
                    do
                    {
                      unint64_t v85 = v79;
                      unint64_t v79 = v78;
                      *(double *)unint64_t v85 = v80;
                      *(_DWORD *)(v85 + 8) = *(_DWORD *)(v78 + 8);
                      *(_DWORD *)(v85 + 12) = *(_DWORD *)(v78 + 12);
                      *(_DWORD *)(v85 + 16) = *(_DWORD *)(v78 + 16);
                      *(_DWORD *)(v85 + 20) = *(_DWORD *)(v78 + 20);
                      *(_DWORD *)(v85 + 24) = *(_DWORD *)(v78 + 24);
                      *(_DWORD *)(v85 + 28) = *(_DWORD *)(v78 + 28);
                      *(void *)(v85 + 32) = *(void *)(v78 + 32);
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v86 = 2 * v77;
                      uint64_t v77 = (2 * v77) | 1;
                      unint64_t v78 = v11 + 40 * v77;
                      uint64_t v87 = v86 + 2;
                      if (v87 < (uint64_t)v13)
                      {
                        BOOL result = v78 + 40;
                        if (*(double *)v78 < *(double *)(v78 + 40))
                        {
                          v78 += 40;
                          uint64_t v77 = v87;
                        }
                      }
                      double v80 = *(double *)v78;
                    }
                    while (*(double *)v78 >= v81);
                    *(double *)unint64_t v79 = v81;
                    *(_OWORD *)(v79 + 8) = v82;
                    *(void *)(v79 + 24) = v83;
                    *(void *)(v79 + 32) = v84;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              int64_t v88 = v12 / 0x28uLL;
              do
              {
                uint64_t v90 = 0;
                double v91 = *(double *)v11;
                int v93 = *(_DWORD *)(v11 + 8);
                int v92 = *(_DWORD *)(v11 + 12);
                int v95 = *(_DWORD *)(v11 + 16);
                int v94 = *(_DWORD *)(v11 + 20);
                int v97 = *(_DWORD *)(v11 + 24);
                int v96 = *(_DWORD *)(v11 + 28);
                unint64_t v98 = v11;
                uint64_t v99 = *(void *)(v11 + 32);
                do
                {
                  unint64_t v100 = v98;
                  v98 += 40 * v90 + 40;
                  uint64_t v101 = 2 * v90;
                  uint64_t v90 = (2 * v90) | 1;
                  int64_t v102 = v101 + 2;
                  if (v102 < v88 && *(double *)v98 < *(double *)(v98 + 40))
                  {
                    v98 += 40;
                    uint64_t v90 = v102;
                  }
                  *(void *)unint64_t v100 = *(void *)v98;
                  *(_DWORD *)(v100 + 8) = *(_DWORD *)(v98 + 8);
                  *(_DWORD *)(v100 + 12) = *(_DWORD *)(v98 + 12);
                  *(_DWORD *)(v100 + 16) = *(_DWORD *)(v98 + 16);
                  *(_DWORD *)(v100 + 20) = *(_DWORD *)(v98 + 20);
                  *(_DWORD *)(v100 + 24) = *(_DWORD *)(v98 + 24);
                  *(_DWORD *)(v100 + 28) = *(_DWORD *)(v98 + 28);
                  *(void *)(v100 + 32) = *(void *)(v98 + 32);
                }
                while (v90 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
                if (v98 == a2 - 40)
                {
                  *(double *)unint64_t v98 = v91;
                  *(_DWORD *)(v98 + 8) = v93;
                  *(_DWORD *)(v98 + 12) = v92;
                  *(_DWORD *)(v98 + 16) = v95;
                  *(_DWORD *)(v98 + 20) = v94;
                  *(_DWORD *)(v98 + 24) = v97;
                  *(_DWORD *)(v98 + 28) = v96;
                  *(void *)(v98 + 32) = v99;
                }
                else
                {
                  *(void *)unint64_t v98 = *(void *)(a2 - 40);
                  *(_DWORD *)(v98 + 8) = *(_DWORD *)(a2 - 32);
                  *(_DWORD *)(v98 + 12) = *(_DWORD *)(a2 - 28);
                  *(_DWORD *)(v98 + 16) = *(_DWORD *)(a2 - 24);
                  *(_DWORD *)(v98 + 20) = *(_DWORD *)(a2 - 20);
                  *(_DWORD *)(v98 + 24) = *(_DWORD *)(a2 - 16);
                  *(_DWORD *)(v98 + 28) = *(_DWORD *)(a2 - 12);
                  *(void *)(v98 + 32) = *(void *)(a2 - 8);
                  *(double *)(a2 - 40) = v91;
                  *(_DWORD *)(a2 - 32) = v93;
                  *(_DWORD *)(a2 - 28) = v92;
                  *(_DWORD *)(a2 - 24) = v95;
                  *(_DWORD *)(a2 - 20) = v94;
                  *(_DWORD *)(a2 - 16) = v97;
                  *(_DWORD *)(a2 - 12) = v96;
                  *(void *)(a2 - 8) = v99;
                  uint64_t v103 = v98 - v11 + 40;
                  if (v103 >= 41)
                  {
                    unint64_t v104 = (v103 / 0x28uLL - 2) >> 1;
                    unint64_t v105 = v11 + 40 * v104;
                    double v106 = *(double *)v105;
                    double v107 = *(double *)v98;
                    if (*(double *)v105 < *(double *)v98)
                    {
                      long long v108 = *(_OWORD *)(v98 + 8);
                      uint64_t v109 = *(void *)(v98 + 24);
                      uint64_t v110 = *(void *)(v98 + 32);
                      do
                      {
                        unint64_t v111 = v98;
                        unint64_t v98 = v105;
                        *(double *)unint64_t v111 = v106;
                        *(_DWORD *)(v111 + 8) = *(_DWORD *)(v105 + 8);
                        *(_DWORD *)(v111 + 12) = *(_DWORD *)(v105 + 12);
                        *(_DWORD *)(v111 + 16) = *(_DWORD *)(v105 + 16);
                        *(_DWORD *)(v111 + 20) = *(_DWORD *)(v105 + 20);
                        *(_DWORD *)(v111 + 24) = *(_DWORD *)(v105 + 24);
                        *(_DWORD *)(v111 + 28) = *(_DWORD *)(v105 + 28);
                        *(void *)(v111 + 32) = *(void *)(v105 + 32);
                        if (!v104) {
                          break;
                        }
                        unint64_t v104 = (v104 - 1) >> 1;
                        unint64_t v105 = v11 + 40 * v104;
                        double v106 = *(double *)v105;
                      }
                      while (*(double *)v105 < v107);
                      *(double *)unint64_t v98 = v107;
                      *(_OWORD *)(v98 + 8) = v108;
                      *(void *)(v98 + 24) = v109;
                      *(void *)(v98 + 32) = v110;
                    }
                  }
                }
                a2 -= 40;
              }
              while (v88-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = (void *)(v11 + 40 * (v13 >> 1));
          if ((unint64_t)v12 >= 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9, v9 + 40 * (v13 >> 1), a2 - 40);
            unint64_t v16 = v9 + 40 * v14;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9 + 40, v16 - 40, a2 - 80);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9 + 80, v9 + 40 + 40 * v14, a2 - 120);
            BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v16 - 40, (uint64_t)v15, v9 + 40 + 40 * v14);
            double v17 = *(double *)v9;
            uint64_t v18 = *(void *)(v9 + 32);
            *(void *)unint64_t v9 = *v15;
            *(void *)(v9 + 32) = *(void *)(v16 + 32);
            *(double *)uint64_t v15 = v17;
            long long v19 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)(v16 + 8);
            *(_OWORD *)(v16 + 8) = v19;
            *(void *)&long long v19 = *(void *)(v9 + 24);
            *(void *)(v9 + 24) = *(void *)(v16 + 24);
            *(void *)(v16 + 24) = v19;
            *(void *)(v16 + 32) = v18;
          }
          else
          {
            BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9 + 40 * (v13 >> 1), v9, a2 - 40);
          }
          --a3;
          double v20 = *(double *)v9;
          if ((a4 & 1) != 0 || *(double *)(v9 - 40) < v20) {
            break;
          }
          if (v20 >= *(double *)v10)
          {
            unint64_t v41 = v9 + 40;
            do
            {
              unint64_t v11 = v41;
              if (v41 >= a2) {
                break;
              }
              v41 += 40;
            }
            while (v20 >= *(double *)v11);
          }
          else
          {
            unint64_t v11 = v9;
            do
            {
              double v40 = *(double *)(v11 + 40);
              v11 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v42 = a2;
          if (v11 < a2)
          {
            unint64_t v42 = a2;
            do
            {
              double v43 = *(double *)(v42 - 40);
              v42 -= 40;
            }
            while (v20 < v43);
          }
          long long v44 = *(_OWORD *)(v9 + 8);
          uint64_t v45 = *(void *)(v9 + 24);
          uint64_t v46 = *(void *)(v9 + 32);
          if (v11 < v42)
          {
            double v47 = *(double *)v11;
            double v48 = *(double *)v42;
            do
            {
              uint64_t v49 = *(void *)(v11 + 32);
              *(double *)unint64_t v11 = v48;
              int v50 = *(_DWORD *)(v42 + 8);
              *(void *)(v11 + 32) = *(void *)(v42 + 32);
              long long v51 = *(_OWORD *)(v11 + 8);
              *(_DWORD *)(v11 + 8) = v50;
              *(_DWORD *)(v11 + 12) = *(_DWORD *)(v42 + 12);
              *(_DWORD *)(v11 + 16) = *(_DWORD *)(v42 + 16);
              *(_DWORD *)(v11 + 20) = *(_DWORD *)(v42 + 20);
              uint64_t v52 = *(void *)(v11 + 24);
              *(_DWORD *)(v11 + 24) = *(_DWORD *)(v42 + 24);
              *(_DWORD *)(v11 + 28) = *(_DWORD *)(v42 + 28);
              *(double *)unint64_t v42 = v47;
              *(_OWORD *)(v42 + 8) = v51;
              *(void *)(v42 + 24) = v52;
              *(void *)(v42 + 32) = v49;
              do
              {
                double v53 = *(double *)(v11 + 40);
                v11 += 40;
                double v47 = v53;
              }
              while (v20 >= v53);
              do
              {
                double v54 = *(double *)(v42 - 40);
                v42 -= 40;
                double v48 = v54;
              }
              while (v20 < v54);
            }
            while (v11 < v42);
          }
          BOOL v4 = v11 - 40 >= v9;
          BOOL v5 = v11 - 40 == v9;
          if (v11 - 40 != v9)
          {
            *(void *)unint64_t v9 = *(void *)(v11 - 40);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 32);
            *(_DWORD *)(v9 + 12) = *(_DWORD *)(v11 - 28);
            *(_DWORD *)(v9 + 16) = *(_DWORD *)(v11 - 24);
            *(_DWORD *)(v9 + 20) = *(_DWORD *)(v11 - 20);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v11 - 16);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v11 - 12);
            *(void *)(v9 + 32) = *(void *)(v11 - 8);
          }
          a4 = 0;
          *(double *)(v11 - 40) = v20;
          *(_OWORD *)(v11 - 32) = v44;
          *(void *)(v11 - 16) = v45;
          *(void *)(v11 - 8) = v46;
        }
        long long v21 = *(_OWORD *)(v9 + 8);
        uint64_t v22 = *(void *)(v9 + 24);
        unint64_t v23 = v9;
        uint64_t v24 = *(void *)(v9 + 32);
        do
        {
          unint64_t v25 = v23;
          double v26 = *(double *)(v23 + 40);
          v23 += 40;
          double v27 = v26;
        }
        while (v26 < v20);
        int v28 = (double *)a2;
        if (v25 == v9)
        {
          int v28 = (double *)a2;
          do
          {
            if (v23 >= (unint64_t)v28) {
              break;
            }
            double v30 = *(v28 - 5);
            v28 -= 5;
          }
          while (v30 >= v20);
        }
        else
        {
          do
          {
            double v29 = *(v28 - 5);
            v28 -= 5;
          }
          while (v29 >= v20);
        }
        if (v23 >= (unint64_t)v28)
        {
          unint64_t v11 = v23;
        }
        else
        {
          double v31 = *v28;
          unint64_t v11 = v23;
          uint64_t v32 = v28;
          do
          {
            uint64_t v33 = *(void *)(v11 + 32);
            *(double *)unint64_t v11 = v31;
            int v34 = *((_DWORD *)v32 + 2);
            *(double *)(v11 + 32) = v32[4];
            long long v35 = *(_OWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = v34;
            *(_DWORD *)(v11 + 12) = *((_DWORD *)v32 + 3);
            *(_DWORD *)(v11 + 16) = *((_DWORD *)v32 + 4);
            *(_DWORD *)(v11 + 20) = *((_DWORD *)v32 + 5);
            uint64_t v36 = *(void *)(v11 + 24);
            *(_DWORD *)(v11 + 24) = *((_DWORD *)v32 + 6);
            *(_DWORD *)(v11 + 28) = *((_DWORD *)v32 + 7);
            double *v32 = v27;
            *(_OWORD *)(v32 + 1) = v35;
            *((void *)v32 + 3) = v36;
            *((void *)v32 + 4) = v33;
            do
            {
              double v37 = *(double *)(v11 + 40);
              v11 += 40;
              double v27 = v37;
            }
            while (v37 < v20);
            do
            {
              double v38 = *(v32 - 5);
              v32 -= 5;
              double v31 = v38;
            }
            while (v38 >= v20);
          }
          while (v11 < (unint64_t)v32);
        }
        if (v11 - 40 != v9)
        {
          *(void *)unint64_t v9 = *(void *)(v11 - 40);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 32);
          *(_DWORD *)(v9 + 12) = *(_DWORD *)(v11 - 28);
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(v11 - 24);
          *(_DWORD *)(v9 + 20) = *(_DWORD *)(v11 - 20);
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v11 - 16);
          *(_DWORD *)(v9 + 28) = *(_DWORD *)(v11 - 12);
          *(void *)(v9 + 32) = *(void *)(v11 - 8);
        }
        *(double *)(v11 - 40) = v20;
        *(_OWORD *)(v11 - 32) = v21;
        *(void *)(v11 - 16) = v22;
        *(void *)(v11 - 8) = v24;
        if (v23 >= (unint64_t)v28) {
          break;
        }
LABEL_33:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,false>(v9, v11 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v9, v11 - 40);
      BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(v11, a2);
      if (result) {
        break;
      }
      if (!v39) {
        goto LABEL_33;
      }
    }
    a2 = v11 - 40;
    if (!v39) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)result;
  double v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v5 < v3)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      *(double *)a2 = v5;
      int v14 = *(_DWORD *)(a3 + 8);
      *(void *)(a2 + 32) = *(void *)(a3 + 32);
      long long v15 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v14;
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      uint64_t v16 = *(void *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(double *)a3 = v3;
      *(_OWORD *)(a3 + 8) = v15;
      *(void *)(a3 + 24) = v16;
      *(void *)(a3 + 32) = v13;
      double v17 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        uint64_t v18 = *(void *)(result + 32);
        *(void *)BOOL result = *(void *)a2;
        int v19 = *(_DWORD *)(a2 + 8);
        *(void *)(result + 32) = *(void *)(a2 + 32);
        long long v20 = *(_OWORD *)(result + 8);
        *(_DWORD *)(result + 8) = v19;
        *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
        uint64_t v21 = *(void *)(result + 24);
        *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
        *(double *)a2 = v17;
        *(_OWORD *)(a2 + 8) = v20;
        *(void *)(a2 + 24) = v21;
        *(void *)(a2 + 32) = v18;
      }
    }
  }
  else
  {
    int v7 = *(_DWORD *)(result + 8);
    int v6 = *(_DWORD *)(result + 12);
    int v9 = *(_DWORD *)(result + 16);
    int v8 = *(_DWORD *)(result + 20);
    int v11 = *(_DWORD *)(result + 24);
    int v10 = *(_DWORD *)(result + 28);
    uint64_t v12 = *(void *)(result + 32);
    if (v5 >= v3)
    {
      *(double *)BOOL result = v3;
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(double *)a2 = v4;
      *(_DWORD *)(a2 + 8) = v7;
      *(_DWORD *)(a2 + 12) = v6;
      *(_DWORD *)(a2 + 16) = v9;
      *(_DWORD *)(a2 + 20) = v8;
      *(_DWORD *)(a2 + 24) = v11;
      *(_DWORD *)(a2 + 28) = v10;
      *(void *)(a2 + 32) = v12;
      if (*(double *)a3 >= v4) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(void *)(a2 + 32) = *(void *)(a3 + 32);
    }
    else
    {
      *(double *)BOOL result = v5;
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(result + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(result + 20) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(result + 28) = *(_DWORD *)(a3 + 28);
      *(void *)(result + 32) = *(void *)(a3 + 32);
    }
    *(double *)a3 = v4;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 16) = v9;
    *(_DWORD *)(a3 + 20) = v8;
    *(_DWORD *)(a3 + 24) = v11;
    *(_DWORD *)(a3 + 28) = v10;
    *(void *)(a3 + 32) = v12;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a2, a3);
  double v9 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    uint64_t v10 = *(void *)(a3 + 32);
    *(void *)a3 = *(void *)a4;
    int v11 = *(_DWORD *)(a4 + 8);
    *(void *)(a3 + 32) = *(void *)(a4 + 32);
    long long v12 = *(_OWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(a4 + 20);
    uint64_t v13 = *(void *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
    *(double *)a4 = v9;
    *(_OWORD *)(a4 + 8) = v12;
    *(void *)(a4 + 24) = v13;
    *(void *)(a4 + 32) = v10;
    double v14 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      uint64_t v15 = *(void *)(a2 + 32);
      *(void *)a2 = *(void *)a3;
      int v16 = *(_DWORD *)(a3 + 8);
      *(void *)(a2 + 32) = *(void *)(a3 + 32);
      long long v17 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v16;
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      uint64_t v18 = *(void *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(double *)a3 = v14;
      *(_OWORD *)(a3 + 8) = v17;
      *(void *)(a3 + 24) = v18;
      *(void *)(a3 + 32) = v15;
      double v19 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(void *)a1 = *(void *)a2;
        int v21 = *(_DWORD *)(a2 + 8);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        long long v22 = *(_OWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v21;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        uint64_t v23 = *(void *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(double *)a2 = v19;
        *(_OWORD *)(a2 + 8) = v22;
        *(void *)(a2 + 24) = v23;
        *(void *)(a2 + 32) = v20;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a2, a3, a4);
  double v11 = *(double *)a4;
  if (*(double *)a5 < *(double *)a4)
  {
    uint64_t v12 = *(void *)(a4 + 32);
    *(void *)a4 = *(void *)a5;
    int v13 = *(_DWORD *)(a5 + 8);
    *(void *)(a4 + 32) = *(void *)(a5 + 32);
    long long v14 = *(_OWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 12) = *(_DWORD *)(a5 + 12);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a5 + 20);
    uint64_t v15 = *(void *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(a5 + 28);
    *(double *)a5 = v11;
    *(_OWORD *)(a5 + 8) = v14;
    *(void *)(a5 + 24) = v15;
    *(void *)(a5 + 32) = v12;
    double v16 = *(double *)a3;
    if (*(double *)a4 < *(double *)a3)
    {
      uint64_t v17 = *(void *)(a3 + 32);
      *(void *)a3 = *(void *)a4;
      int v18 = *(_DWORD *)(a4 + 8);
      *(void *)(a3 + 32) = *(void *)(a4 + 32);
      long long v19 = *(_OWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v18;
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(a4 + 20);
      uint64_t v20 = *(void *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
      *(double *)a4 = v16;
      *(_OWORD *)(a4 + 8) = v19;
      *(void *)(a4 + 24) = v20;
      *(void *)(a4 + 32) = v17;
      double v21 = *(double *)a2;
      if (*(double *)a3 < *(double *)a2)
      {
        uint64_t v22 = *(void *)(a2 + 32);
        *(void *)a2 = *(void *)a3;
        int v23 = *(_DWORD *)(a3 + 8);
        *(void *)(a2 + 32) = *(void *)(a3 + 32);
        long long v24 = *(_OWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v23;
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
        uint64_t v25 = *(void *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
        *(double *)a3 = v21;
        *(_OWORD *)(a3 + 8) = v24;
        *(void *)(a3 + 24) = v25;
        *(void *)(a3 + 32) = v22;
        double v26 = *(double *)a1;
        if (*(double *)a2 < *(double *)a1)
        {
          uint64_t v27 = *(void *)(a1 + 32);
          *(void *)a1 = *(void *)a2;
          int v28 = *(_DWORD *)(a2 + 8);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          long long v29 = *(_OWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v28;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
          uint64_t v30 = *(void *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
          *(double *)a2 = v26;
          *(_OWORD *)(a2 + 8) = v29;
          *(void *)(a2 + 24) = v30;
          *(void *)(a2 + 32) = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double v6 = *(double *)(a2 - 40);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(double *)a1 = v6;
        int v9 = *(_DWORD *)(a2 - 32);
        *(void *)(a1 + 32) = *(void *)(a2 - 8);
        long long v10 = *(_OWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 28);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 - 20);
        uint64_t v11 = *(void *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 12);
        *(double *)(a2 - 40) = v7;
        *(_OWORD *)(a2 - 32) = v10;
        *(void *)(a2 - 16) = v11;
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *,0>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = (double *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::EntityDebugHighlightLogic::findIntersectedRegistries(gm::Ray<double,3> const&,md::CameraContext const&,md::GeometryContext const&,md::EntityDebugHighlightContext &)::$_0 &,md::RegistryIntersection *>(a1, a1 + 40, a1 + 80);
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    double v17 = *(double *)v13;
    double v18 = *v12;
    if (*(double *)v13 < *v12)
    {
      long long v19 = *(_OWORD *)(v13 + 8);
      uint64_t v20 = *(void *)(v13 + 24);
      uint64_t v21 = v14;
      uint64_t v22 = *(void *)(v13 + 32);
      do
      {
        uint64_t v23 = a1 + v21;
        *(double *)(v23 + 120) = v18;
        *(void *)(v23 + 128) = *(void *)(a1 + v21 + 88);
        *(_DWORD *)(v23 + 136) = *(_DWORD *)(a1 + v21 + 96);
        *(void *)(v23 + 140) = *(void *)(a1 + v21 + 100);
        *(_DWORD *)(v23 + 148) = *(_DWORD *)(a1 + v21 + 108);
        *(void *)(v23 + 152) = *(void *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          uint64_t v16 = a1;
          goto LABEL_7;
        }
        double v18 = *(double *)(v23 + 40);
        v21 -= 40;
      }
      while (v17 < v18);
      uint64_t v16 = a1 + v21 + 120;
LABEL_7:
      *(double *)uint64_t v16 = v17;
      *(_OWORD *)(v16 + 8) = v19;
      *(void *)(v16 + 24) = v20;
      *(void *)(v16 + 32) = v22;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    uint64_t v12 = (double *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xE75FAB3171C16149 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::EntityDebugHighlightContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::EntityDebugHighlightContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555B90;
  uint64_t v1 = (md::DebugDrawContext *)a1[4];
  if (v1)
  {
    md::DebugDrawContext::~DebugDrawContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::EntityDebugHighlightContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555B90;
  uint64_t v2 = (md::DebugDrawContext *)a1[4];
  if (v2)
  {
    md::DebugDrawContext::~DebugDrawContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t md::EntityDebugHighlightLogic::didBecomeInactive(uint64_t this)
{
  if (*(unsigned char *)(this + 272)) {
    *(unsigned char *)(this + 272) = 0;
  }
  return this;
}

void md::EntityDebugHighlightLogic::~EntityDebugHighlightLogic(md::EntityDebugHighlightLogic *this)
{
  *(void *)this = &unk_1EF546580;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EF546580;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  double v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    double v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      double v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  double v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    double v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      double v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::DisplayLinkVerificationLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = +[VKDebugSettings sharedSettings];
  int v7 = [v6 layoutContinuously];

  if (v7)
  {
    *(void *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
  }
  else
  {
    uint64_t v8 = *(double **)(a3 + 8);
    if (v8)
    {
      char v9 = v8 + 1;
      double v10 = CACurrentMediaTime();
      uint64_t v11 = (double *)(a1 + 128);
      if (*(double *)(a1 + 160) == v8[5]
        && *(double *)(a1 + 168) == v8[6]
        && *(double *)(a1 + 176) == v8[7]
        && *(double *)(a1 + 152) == v8[4]
        && *v11 == *v9
        && *(double *)(a1 + 136) == v8[2]
        && *(double *)(a1 + 144) == v8[3]
        && (int v12 = *(_DWORD *)(a1 + 192), v12 == *(_DWORD *)(md::LayoutContext::frameState(a2) + 120)))
      {
        double v13 = v10 - *(double *)(a1 + 184);
        if (v13 >= 30.0)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v14 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            int v27 = 134218754;
            *(double *)int v28 = v13;
            *(_WORD *)&v28[8] = 2080;
            long long v29 = "false";
            __int16 v30 = 2080;
            double v31 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/DisplayLinkVerificationLogic.mm";
            __int16 v32 = 1024;
            int v33 = 65;
            _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "DisplayLink has been running for %f seconds with the camera frame moving: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v27, 0x26u);
          }

          int v15 = **(uint64_t ***)(a1 + 120);
          if (v15 != *(uint64_t **)(*(void *)(a1 + 120) + 8) && *v15 != 0x4BCD00F88A8100BELL)
          {
            uint64_t v16 = v15 + 5;
            do
            {
              uint64_t v17 = *v16;
              v16 += 5;
            }
            while (v17 != 0x4BCD00F88A8100BELL);
            int v15 = v16 - 5;
          }
          double v18 = (void (***)(void, uint64_t, const char *))v15[3];
          long long v19 = (std::__shared_weak_count *)v15[4];
          if (v19)
          {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          (**v18)(v18, 1, "");
          *(double *)(a1 + 184) = v10;
        }
      }
      else
      {
        *(double *)(a1 + 184) = v10;
        int v20 = *(_DWORD *)(a1 + 192);
        if (v20 != *(_DWORD *)(md::LayoutContext::frameState(a2) + 120))
        {
          if (GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::onceToken[0] != -1) {
            dispatch_once(GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::onceToken, &__block_literal_global_3272);
          }
          uint64_t v21 = (id)GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::log;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            int v22 = *(_DWORD *)(a1 + 192);
            int v23 = *(_DWORD *)(md::LayoutContext::frameState(a2) + 120);
            int v27 = 67109376;
            *(_DWORD *)int v28 = v22;
            *(_WORD *)&v28[4] = 1024;
            *(_DWORD *)&v28[6] = v23;
            _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_INFO, "DisplayLinkStamp changed %u -> %u", (uint8_t *)&v27, 0xEu);
          }
        }
      }
      *(_DWORD *)(a1 + 192) = *(_DWORD *)(md::LayoutContext::frameState(a2) + 120);
      long long v24 = *(_OWORD *)v9;
      long long v25 = *((_OWORD *)v9 + 1);
      long long v26 = *((_OWORD *)v9 + 2);
      *(double *)(a1 + 176) = v9[6];
      *(_OWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 160) = v26;
      *(_OWORD *)uint64_t v11 = v24;
    }
  }
}

void sub_1A1F02AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL46GEOGetVectorKitDisplayLinkVerificationLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "DisplayLinkVerificationLogic");
  uint64_t v1 = (void *)GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::log;
  GEOGetVectorKitDisplayLinkVerificationLogicLog(void)::log = (uint64_t)v0;
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x1AF456233693CD46;
    if (*(void *)&v5 <= 0x1AF456233693CD46uLL) {
      uint64_t v7 = 0x1AF456233693CD46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  char v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      char v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x1AF456233693CD46) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    char v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(void *)(a3 + 32)) {
    return result;
  }
  double v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(void *)(a3 + 32)) {
    return result;
  }
  double v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(void *)(a3 + 32)) {
    return result;
  }
  double v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x42BE82C40F9A8F80 || !*(void *)(a3 + 32)) {
    return result;
  }
  double v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::DisplayLinkVerificationLogic,md::DisplayLinkVerificationContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<md::CameraContext>>>::_allocateContext()
{
}

void sub_1A1F0336C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::DisplayLinkVerificationContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::DisplayLinkVerificationContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555D48;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::DisplayLinkVerificationContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555D48;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::DisplayLinkVerificationLogic::~DisplayLinkVerificationLogic(md::DisplayLinkVerificationLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)7>>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int v20 = operator new(4 * v19);
      }
      else
      {
        int v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      int v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        long long v25 = &v20[4 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)7>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &off_1EF522A18;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_1EF522A18;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)7> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::InView>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      int v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        long long v25 = &v20[4 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::InView>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::InView>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InView>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::InView>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525F88;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF525F88;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InView>(gdc::Entity,md::ls::InView &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      int v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        long long v25 = &v20[4 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)8>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522A60;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF522A60;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)8> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      int v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        long long v25 = &v20[4 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)1>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5228B0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5228B0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void *std::function<void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::operator()(uint64_t result, uint64_t a2, unsigned __int8 *a3, unint64_t *a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*a6 != 3 && *(unsigned char *)(a5 + 2) != 0)
  {
    int v7 = *a3;
    if (v7 == 3 || v7 == 0)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void ***)(result + 8);
      unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      uint64_t v13 = HIDWORD(*v12);
      uint64_t v14 = (*v12 << 32) | 1;
      uint64_t v20 = (void (**)(void **))&unk_1EF5228F8;
      uint64_t v21 = v14;
      int v22 = v13;
      uint64_t v27 = &v24;
      unint64_t v23 = (void **)&v20;
      uint64_t v24 = &unk_1EF5228F8;
      uint64_t v25 = v14;
      int v26 = v13;
      int v28 = 0;
      ecs2::Runtime::queueCommand(v15, (uint64_t)&v24);
      if (v28 != -1) {
        ((void (*)(char *, void **))off_1EF58F5D8[v28])(&v19, &v24);
      }
      int v28 = -1;
      if (v23 == (void **)&v20)
      {
        v20[4]((void **)&v20);
      }
      else if (v23)
      {
        (*((void (**)(void))*v23 + 5))();
      }
      uint64_t v16 = *v11;
      uint64_t v17 = HIDWORD(*v12);
      uint64_t v18 = (*v12 << 32) | 1;
      uint64_t v20 = (void (**)(void **))&unk_1EF525F88;
      uint64_t v21 = v18;
      int v22 = v17;
      uint64_t v27 = &v24;
      unint64_t v23 = (void **)&v20;
      uint64_t v24 = &unk_1EF525F88;
      uint64_t v25 = v18;
      int v26 = v17;
      int v28 = 0;
      ecs2::Runtime::queueCommand(v16, (uint64_t)&v24);
      if (v28 != -1) {
        ((void (*)(char *, void **))off_1EF58F5D8[v28])(&v19, &v24);
      }
      int v28 = -1;
      if (v23 == (void **)&v20)
      {
        v20[4]((void **)&v20);
      }
      else if (v23)
      {
        (*((void (**)(void))*v23 + 5))();
      }
      return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(void *)(v10 + 16), *a4, *a4);
    }
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)2>>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      int v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        int v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)2>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5228F8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5228F8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF520300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareUnflattenedCulledSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      int v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        int v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ColorCorrectionFactorConstantHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1EF525D00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1EF525D00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorCorrectionFactorConstantHandle>(gdc::Entity,md::ls::ColorCorrectionFactorConstantHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

uint64_t *std::unique_ptr<md::FlyoverRegionManager::Internal>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 96));
    std::__list_imp<std::pair<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>>>::clear((uint64_t *)(v2 + 48));
    uint64_t v3 = *(void **)(v2 + 24);
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = *(void **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v5) {
      operator delete(v5);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__list_imp<std::pair<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (void *)v3[5];
        unint64_t v7 = (void *)v3[6];
        if (v6 != v7)
        {
          do
          {
            uint64_t v8 = (std::__shared_weak_count *)v6[1];
            if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
            v6 += 3;
          }
          while (v6 != v7);
          uint64_t v6 = (void *)v3[5];
        }
        if (v6 != (void *)v3[7]) {
          free(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void anonymous namespace'::Trigger::~Trigger(_anonymous_namespace_::Trigger *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t *md::FlyoverRegionManager::getRegionAreas(md::FlyoverRegionManager *this, const QuadTile *a2)
{
  uint64_t v3 = this;
  uint64_t v117 = (std::mutex *)((char *)this + 96);
  std::mutex::lock((std::mutex *)((char *)this + 96));
  uint64_t v120 = (uint64_t *)((char *)v3 + 48);
  uint64_t v122 = (void *)((char *)v3 + 8);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)v3 + 1, &a2->_type);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v3 + 7);
    uint64_t v6 = (uint64_t *)v4[5];
    if (v5 != v6)
    {
      unint64_t v7 = (uint64_t *)v6[1];
      if (v7 != v5)
      {
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = v7;
        *(void *)v6[1] = v8;
        uint64_t v9 = *v5;
        *(void *)(v9 + 8) = v6;
        *uint64_t v6 = v9;
        uint64_t *v5 = (uint64_t)v6;
        v6[1] = (uint64_t)v5;
        uint64_t v5 = (uint64_t *)*((void *)v3 + 7);
      }
    }
    if (v5 != v120) {
      goto LABEL_177;
    }
  }
  *(void *)&long long v136 = v138;
  *((void *)&v136 + 1) = v138;
  *(void *)&long long v137 = v138;
  *((void *)&v137 + 1) = 2;
  unint64_t v10 = (void *)*((void *)v3 + 9);
  uint64_t v11 = (void *)((char *)v3 + 80);
  if (v10 == (void *)((char *)v3 + 80))
  {
    unint64_t v98 = v131;
    *(void *)&long long v128 = v131;
    *((void *)&v128 + 1) = v131;
    uint64_t v129 = v131;
    uint64_t v130 = 2;
    int v96 = v131;
    goto LABEL_144;
  }
  size_t v121 = v3;
  unint64_t v118 = (char *)v3 + 80;
  uint64_t v119 = a2;
  while (2)
  {
    unsigned int level = a2->_level;
    unsigned int v13 = *((unsigned __int8 *)v10 + 32);
    BOOL v31 = level >= v13;
    LOBYTE(v13) = level - v13;
    if (!v31) {
      goto LABEL_126;
    }
    if (a2->_level)
    {
      unsigned int v13 = v13;
      if (level < v13) {
        unsigned int v13 = a2->_level;
      }
      LOBYTE(level) = level - v13;
      int32x2_t v14 = vshl_s32(*(int32x2_t *)&a2->_yIdx, vneg_s32(vdup_n_s32(v13)));
    }
    else
    {
      int32x2_t v14 = *(int32x2_t *)&a2->_yIdx;
    }
    LOBYTE(v128) = a2->_type;
    BYTE1(v128) = level;
    *(int32x2_t *)((char *)&v128 + 4) = v14;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v122, (unsigned __int8 *)&v128);
    uint64_t v123 = v10;
    if (v15)
    {
      uint64_t v16 = (uint64_t *)*((void *)v3 + 7);
      uint64_t v17 = (uint64_t *)v15[5];
      if (v16 != v17)
      {
        unint64_t v18 = (uint64_t *)v17[1];
        if (v18 != v16)
        {
          uint64_t v19 = *v17;
          *(void *)(v19 + 8) = v18;
          *(void *)v17[1] = v19;
          uint64_t v20 = *v16;
          *(void *)(v20 + 8) = v17;
          *uint64_t v17 = v20;
          *uint64_t v16 = (uint64_t)v17;
          v17[1] = (uint64_t)v16;
          uint64_t v16 = (uint64_t *)*((void *)v3 + 7);
        }
      }
      if (v16 != v120) {
        goto LABEL_102;
      }
    }
    *(void *)&long long v139 = v141;
    *((void *)&v139 + 1) = v141;
    *(void *)&long long v140 = v141;
    *((void *)&v140 + 1) = 2;
    uint64_t v21 = (uint64_t *)v10[7];
    if (!v21)
    {
      uint64_t v133 = v135;
      uint64_t v134 = 2;
      int v22 = v135;
      unint64_t v23 = v135;
      *(void *)&long long v132 = v135;
      *((void *)&v132 + 1) = v135;
      goto LABEL_79;
    }
    do
    {
      int v25 = -1 << *((unsigned char *)v21 + 48);
      unsigned int v26 = ~v25 - DWORD1(v128);
      unsigned int v28 = *((_DWORD *)v21 + 13);
      unsigned int v27 = *((_DWORD *)v21 + 14);
      unsigned int v29 = (*((_DWORD *)v21 + 15) + v28) & ~v25;
      if (v28 <= v29)
      {
        BOOL v31 = v28 <= v26 && v29 >= v26;
        if (!v31) {
          goto LABEL_25;
        }
      }
      else if (v28 < v26 || v29 > v26)
      {
        goto LABEL_25;
      }
      unsigned int v32 = (*((_DWORD *)v21 + 16) + v27) & ~v25;
      if (v27 <= v32)
      {
        if (v27 > DWORD2(v128) || v32 < DWORD2(v128)) {
          goto LABEL_25;
        }
      }
      else if (v27 < DWORD2(v128) || v32 > DWORD2(v128))
      {
        goto LABEL_25;
      }
      uint64_t v33 = (std::__shared_weak_count *)v21[18];
      if (!v33 || (uint64_t v34 = std::__shared_weak_count::lock(v33)) == 0)
      {
        uint64_t v35 = 0;
        int v36 = *((_DWORD *)v21 + 4);
LABEL_48:
        double v37 = (std::__shared_weak_count *)operator new(0x118uLL);
        v37->__shared_owners_ = 0;
        v37->__shared_weak_owners_ = 0;
        v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582EF0;
        v37[1].std::__shared_count = 0u;
        *(_OWORD *)&v37[1].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v37[2].__shared_owners_ = 0u;
        v37[3].std::__shared_count = 0u;
        *(_OWORD *)&v37[3].__shared_weak_owners_ = 0u;
        v37[5].std::__shared_count = 0u;
        *(_OWORD *)&v37[5].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v37[6].__shared_owners_ = 0u;
        v37[7].std::__shared_count = 0u;
        v37[9].std::__shared_count = 0u;
        *(_OWORD *)&v37[9].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v37[10].__shared_owners_ = 0u;
        v37[11].std::__shared_count = 0u;
        *(_OWORD *)&v37[8].__shared_owners_ = 0u;
        *(_OWORD *)&v37[7].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v37[4].__shared_owners_ = 0u;
        LODWORD(v37[1].__shared_owners_) = 1140850688;
        *(_OWORD *)((char *)&v37[1].__shared_owners_ + 4) = 0u;
        *(_OWORD *)((char *)&v37[2].__shared_weak_owners_ + 4) = 0u;
        *(std::__shared_count *)((char *)&v37[2].std::__shared_count + 4) = 0u;
        *(uint64_t *)((char *)&v37[3].__shared_owners_ + 4) = 0x186A000000000;
        v37[4].__shared_owners_ = 0;
        v37[4].__shared_weak_owners_ = 0;
        v37[4].__vftable = (std::__shared_weak_count_vtbl *)&v37[4].__shared_owners_;
        *(std::__shared_weak_count_vtbl **)((char *)&v37[5].__vftable + 4) = 0;
        *(uint64_t *)((char *)&v37[5].__shared_owners_ + 4) = 0;
        v37[6].__vftable = 0;
        v37[6].__shared_owners_ = 0;
        v37[6].__shared_weak_owners_ = 0;
        v37[7].__vftable = (std::__shared_weak_count_vtbl *)-1;
        v37[8].__vftable = 0;
        v37[7].__shared_weak_owners_ = 0;
        uint64_t v127 = &v37[6].__vftable;
        v37[7].__shared_owners_ = (uint64_t)&v37[7].__shared_weak_owners_;
        MEMORY[0x1A6238E70](&v37[8].__shared_owners_);
        v37[11].__vftable = 0;
        v37[11].__shared_owners_ = 0;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
        int v124 = v36;
        atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        double v38 = (std::__shared_weak_count *)v21[18];
        v21[17] = (uint64_t)&v37[1];
        v21[18] = (uint64_t)v37;
        if (v38) {
          std::__shared_weak_count::__release_weak(v38);
        }
        int v125 = v37 + 1;
        double v40 = (unsigned __int8 *)v21[9];
        BOOL v39 = (unsigned __int8 *)v21[10];
        if (v40 != v39)
        {
          int v41 = 0;
          shared_owners = (_DWORD *)v37[6].__shared_owners_;
          uint64_t v126 = (unsigned __int8 *)v21[10];
          do
          {
            int v44 = *v40;
            int v45 = v40[1];
            unint64_t shared_weak_owners = v37[6].__shared_weak_owners_;
            if ((unint64_t)shared_owners < shared_weak_owners)
            {
              _DWORD *shared_owners = v44;
              shared_owners[1] = v41;
              double v43 = shared_owners + 3;
              shared_owners[2] = v45;
            }
            else
            {
              double v47 = (_DWORD *)*v127;
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)shared_owners - *v127) >> 2);
              unint64_t v49 = v48 + 1;
              if (v48 + 1 > 0x1555555555555555) {
                abort();
              }
              unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(shared_weak_owners - (void)v47) >> 2);
              if (2 * v50 > v49) {
                unint64_t v49 = 2 * v50;
              }
              if (v50 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v51 = 0x1555555555555555;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                if (v51 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v52 = (char *)operator new(12 * v51);
              }
              else
              {
                uint64_t v52 = 0;
              }
              double v53 = &v52[12 * v48];
              *(_DWORD *)double v53 = v44;
              *((_DWORD *)v53 + 1) = v41;
              *((_DWORD *)v53 + 2) = v45;
              double v54 = (std::__shared_weak_count_vtbl *)v53;
              if (shared_owners != v47)
              {
                do
                {
                  double v55 = *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(shared_owners - 3);
                  shared_owners -= 3;
                  int v56 = shared_owners[2];
                  *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))((char *)&v54[-1].__get_deleter + 4) = v55;
                  double v54 = (std::__shared_weak_count_vtbl *)((char *)v54 - 12);
                  LODWORD(v54->~__shared_weak_count_0) = v56;
                }
                while (shared_owners != v47);
                shared_owners = (_DWORD *)*v127;
              }
              double v43 = v53 + 12;
              v37[6].__vftable = v54;
              v37[6].__shared_owners_ = (uint64_t)(v53 + 12);
              v37[6].__shared_weak_owners_ = (uint64_t)&v52[12 * v51];
              if (shared_owners) {
                operator delete(shared_owners);
              }
              BOOL v39 = v126;
            }
            v37[6].__shared_owners_ = (uint64_t)v43;
            int v41 = v40[1] + 1;
            v40 += 2;
            shared_owners = v43;
          }
          while (v40 != v39);
        }
        int v36 = v124;
        goto LABEL_75;
      }
      uint64_t v35 = v34;
      int v36 = *((_DWORD *)v21 + 4);
      double v37 = v34;
      int v125 = (std::__shared_weak_count *)v21[17];
      if (!v125) {
        goto LABEL_48;
      }
LABEL_75:
      uint64_t v57 = *((void *)&v139 + 1);
      unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v139 + 1) - v139) >> 3) + 1;
      if (*((void *)&v140 + 1) < v58)
      {
        geo::small_vector_base<md::FlyoverRegionManager::RegionArea>::grow((void **)&v139, v58);
        uint64_t v57 = *((void *)&v139 + 1);
      }
      *(void *)uint64_t v57 = v125;
      *(void *)(v57 + 8) = v37;
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v24 = *((void *)&v139 + 1);
      *(_DWORD *)(v57 + 16) = v36;
      *((void *)&v139 + 1) = v24 + 24;
      if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
LABEL_25:
      uint64_t v21 = (uint64_t *)*v21;
    }
    while (v21);
    *(void *)&long long v132 = v135;
    uint64_t v133 = v135;
    uint64_t v134 = *((void *)&v140 + 1);
    uint64_t v59 = (void *)*((void *)&v139 + 1);
    unint64_t v23 = (unsigned char *)v139;
    if ((void)v139 == (void)v140)
    {
      int v22 = &v135[*((void *)&v139 + 1) - v139];
      *((void *)&v132 + 1) = v22;
      uint64_t v60 = (uint64_t)v121;
      if (*((void *)&v139 + 1) == (void)v139)
      {
        unint64_t v23 = v135;
      }
      else
      {
        uint64_t v93 = 0;
        do
        {
          int v94 = (char *)&v132 + v93;
          int v95 = &v23[v93];
          *((_OWORD *)v94 + 2) = *(_OWORD *)&v23[v93];
          *int v95 = 0;
          v95[1] = 0;
          *((_DWORD *)v94 + 12) = *(_DWORD *)&v23[v93 + 16];
          v93 += 24;
        }
        while (v95 + 3 != v59);
        int v22 = (unsigned char *)*((void *)&v132 + 1);
        unint64_t v23 = (unsigned char *)v132;
      }
    }
    else
    {
      long long v132 = v139;
      int v22 = (unsigned char *)*((void *)&v139 + 1);
      long long v139 = 0u;
      long long v140 = 0u;
LABEL_79:
      uint64_t v60 = (uint64_t)v121;
    }
    geo::Cache<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>,geo::QuadTileHash,geo::LRUPolicy>::insert(v60, (unsigned __int8 *)&v128, (uint64_t)v23, (uint64_t)v22);
    double v61 = (void *)*((void *)&v132 + 1);
    BOOL v62 = (void *)v132;
    if ((void)v132 != *((void *)&v132 + 1))
    {
      do
      {
        uint64_t v63 = (std::__shared_weak_count *)v62[1];
        if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        v62 += 3;
      }
      while (v62 != v61);
      BOOL v62 = (void *)v132;
    }
    if (v62 != (void *)v133) {
      free(v62);
    }
    unint64_t v64 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v122, (unsigned __int8 *)&v128);
    uint64_t v16 = v120;
    if (v64)
    {
      uint64_t v16 = *(uint64_t **)(v60 + 56);
      uint64_t v65 = (uint64_t *)v64[5];
      if (v16 != v65)
      {
        unint64_t v66 = (uint64_t *)v65[1];
        if (v66 != v16)
        {
          uint64_t v67 = *v65;
          *(void *)(v67 + 8) = v66;
          *(void *)v65[1] = v67;
          uint64_t v68 = *v16;
          *(void *)(v68 + 8) = v65;
          uint64_t *v65 = v68;
          *uint64_t v16 = (uint64_t)v65;
          v65[1] = (uint64_t)v16;
          uint64_t v16 = *(uint64_t **)(v60 + 56);
        }
      }
    }
    long long v69 = (void *)*((void *)&v139 + 1);
    uint64_t v70 = (void *)v139;
    if ((void)v139 != *((void *)&v139 + 1))
    {
      do
      {
        uint64_t v71 = (std::__shared_weak_count *)v70[1];
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
        v70 += 3;
      }
      while (v70 != v69);
      uint64_t v70 = (void *)v139;
    }
    if (v70 != (void *)v140) {
      free(v70);
    }
LABEL_102:
    uint64_t v72 = v16[5];
    uint64_t v73 = v16[6];
    if (v72 != v73)
    {
      int64_t v74 = (char *)*((void *)&v136 + 1);
      int64_t v75 = (char *)v136;
      do
      {
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((v74 - v75) >> 3);
        if (*((void *)&v137 + 1) < v76 + 1)
        {
          uint64_t v77 = (char *)v137;
          unint64_t v78 = (1 << -(char)__clz(*((void *)&v137 + 1) + 1));
          if (*((void *)&v137 + 1) >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v78 = 1;
          }
          if (v78 <= v76 + 1) {
            unint64_t v79 = v76 + 1;
          }
          else {
            unint64_t v79 = v78;
          }
          double v80 = (char *)malloc_type_malloc(24 * v79, 0x1020040EDCEB4C7uLL);
          double v81 = v80;
          uint64_t v83 = *((void *)&v136 + 1);
          uint64_t v82 = v136;
          if ((void)v136 != *((void *)&v136 + 1))
          {
            uint64_t v84 = v80;
            do
            {
              *(_OWORD *)uint64_t v84 = *(_OWORD *)v82;
              *(void *)uint64_t v82 = 0;
              *(void *)(v82 + 8) = 0;
              *((_DWORD *)v84 + 4) = *(_DWORD *)(v82 + 16);
              v82 += 24;
              v84 += 24;
            }
            while (v82 != v83);
            uint64_t v86 = *((void *)&v136 + 1);
            for (uint64_t i = v136; i != v86; i += 24)
            {
              uint64_t v87 = *(std::__shared_weak_count **)(i + 8);
              if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          if (v75 != v77) {
            free((void *)v136);
          }
          int64_t v74 = &v81[24 * v76];
          *(void *)&long long v136 = v81;
          *((void *)&v136 + 1) = v74;
          *((void *)&v137 + 1) = v79;
          int64_t v75 = v81;
        }
        *(void *)int64_t v74 = *(void *)v72;
        uint64_t v88 = *(void *)(v72 + 8);
        *((void *)v74 + 1) = v88;
        uint64_t v89 = v74;
        if (v88)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
          uint64_t v89 = (char *)*((void *)&v136 + 1);
        }
        *((_DWORD *)v74 + 4) = *(_DWORD *)(v72 + 16);
        int64_t v74 = v89 + 24;
        *((void *)&v136 + 1) = v89 + 24;
        v72 += 24;
      }
      while (v72 != v73);
    }
    uint64_t v3 = v121;
    uint64_t v11 = v118;
    a2 = v119;
    unint64_t v10 = v123;
LABEL_126:
    uint64_t v90 = (void *)v10[1];
    if (v90)
    {
      do
      {
        double v91 = v90;
        uint64_t v90 = (void *)*v90;
      }
      while (v90);
    }
    else
    {
      do
      {
        double v91 = (void *)v10[2];
        BOOL v92 = *v91 == (void)v10;
        unint64_t v10 = v91;
      }
      while (!v92);
    }
    unint64_t v10 = v91;
    if (v91 != v11) {
      continue;
    }
    break;
  }
  int v96 = v131;
  *(void *)&long long v128 = v131;
  uint64_t v129 = v131;
  uint64_t v130 = *((void *)&v137 + 1);
  long long v97 = v136;
  if ((void)v136 == (void)v137)
  {
    unint64_t v98 = &v131[*((void *)&v136 + 1) - v136];
    *((void *)&v128 + 1) = v98;
    if (*((void *)&v136 + 1) != (void)v136)
    {
      uint64_t v99 = 0;
      do
      {
        unint64_t v100 = (char *)&v128 + v99;
        uint64_t v101 = (void *)(v97 + v99);
        *((_OWORD *)v100 + 2) = *(_OWORD *)(v97 + v99);
        void *v101 = 0;
        v101[1] = 0;
        *((_DWORD *)v100 + 12) = *(_DWORD *)(v97 + v99 + 16);
        v99 += 24;
      }
      while (v101 + 3 != *((void **)&v97 + 1));
      unint64_t v98 = (unsigned char *)*((void *)&v128 + 1);
      int v96 = (unsigned char *)v128;
    }
  }
  else
  {
    long long v128 = v136;
    long long v136 = 0u;
    long long v137 = 0u;
    unint64_t v98 = (unsigned char *)*((void *)&v97 + 1);
    int v96 = (unsigned char *)v97;
  }
LABEL_144:
  geo::Cache<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>,geo::QuadTileHash,geo::LRUPolicy>::insert((uint64_t)v3, &a2->_type, (uint64_t)v96, (uint64_t)v98);
  int64_t v102 = (void *)*((void *)&v128 + 1);
  uint64_t v103 = (void *)v128;
  if ((void)v128 != *((void *)&v128 + 1))
  {
    do
    {
      unint64_t v104 = (std::__shared_weak_count *)v103[1];
      if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
      v103 += 3;
    }
    while (v103 != v102);
    uint64_t v103 = (void *)v128;
  }
  if (v103 != (void *)v129) {
    free(v103);
  }
  unint64_t v105 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v122, &a2->_type);
  if (!v105) {
    goto LABEL_158;
  }
  uint64_t v5 = (uint64_t *)*((void *)v3 + 7);
  double v106 = (uint64_t *)v105[5];
  if (v5 != v106)
  {
    double v107 = (uint64_t *)v106[1];
    if (v107 != v5)
    {
      uint64_t v108 = *v106;
      *(void *)(v108 + 8) = v107;
      *(void *)v106[1] = v108;
      uint64_t v109 = *v5;
      *(void *)(v109 + 8) = v106;
      *double v106 = v109;
      uint64_t *v5 = (uint64_t)v106;
      v106[1] = (uint64_t)v5;
      uint64_t v5 = (uint64_t *)*((void *)v3 + 7);
    }
  }
  if (v5 == v120)
  {
LABEL_158:
    *(void *)&long long v139 = v141;
    *((void *)&v139 + 1) = v141;
    *(void *)&long long v140 = v141;
    *((void *)&v140 + 1) = 2;
    geo::Cache<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>,geo::QuadTileHash,geo::LRUPolicy>::insert((uint64_t)v3, &a2->_type, (uint64_t)v141, (uint64_t)v141);
    uint64_t v110 = (void *)*((void *)&v139 + 1);
    unint64_t v111 = (void *)v139;
    if ((void)v139 != *((void *)&v139 + 1))
    {
      do
      {
        unint64_t v112 = (std::__shared_weak_count *)v111[1];
        if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
        v111 += 3;
      }
      while (v111 != v110);
      unint64_t v111 = (void *)v139;
    }
    if (v111 != (void *)v140) {
      free(v111);
    }
    uint64_t v5 = (uint64_t *)*((void *)v3 + 7);
  }
  double v114 = (void *)*((void *)&v136 + 1);
  unint64_t v113 = (void *)v136;
  if ((void)v136 != *((void *)&v136 + 1))
  {
    do
    {
      double v115 = (std::__shared_weak_count *)v113[1];
      if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
      v113 += 3;
    }
    while (v113 != v114);
    unint64_t v113 = (void *)v136;
  }
  if (v113 != (void *)v137) {
    free(v113);
  }
LABEL_177:
  std::mutex::unlock(v117);
  return v5 + 5;
}

void geo::small_vector_base<md::FlyoverRegionManager::RegionArea>::grow(void **a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  uint64_t v6 = (char *)a1[2];
  unint64_t v5 = (unint64_t)a1[3];
  unint64_t v7 = (1 << -(char)__clz(v5 + 1));
  if (v5 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  unint64_t v10 = (char *)malloc_type_malloc(24 * v9, 0x1020040EDCEB4C7uLL);
  uint64_t v11 = v10;
  unint64_t v12 = (char *)*a1;
  unsigned int v13 = (char *)a1[1];
  if (*a1 != v13)
  {
    int32x2_t v14 = v10;
    do
    {
      *(_OWORD *)int32x2_t v14 = *(_OWORD *)v12;
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((_DWORD *)v14 + 4) = *((_DWORD *)v12 + 4);
      v12 += 24;
      v14 += 24;
    }
    while (v12 != v13);
    uint64_t v15 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (*a1 != v16)
    {
      do
      {
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v15 + 1);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        v15 += 24;
      }
      while (v15 != v16);
    }
  }
  if (v3 != v6) {
    free(*a1);
  }
  *a1 = v11;
  a1[1] = &v11[v4 - v3];
  a1[3] = (void *)v9;
}

void geo::Cache<geo::QuadTile,geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>,geo::QuadTileHash,geo::LRUPolicy>::insert(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  unint64_t v8 = v92;
  uint64_t v88 = v92;
  uint64_t v89 = v92;
  uint64_t v90 = v92;
  uint64_t v91 = 2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 3);
  if (v9 >= 3)
  {
    geo::small_vector_base<md::FlyoverRegionManager::RegionArea>::grow((void **)&v88, 0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 3));
    unint64_t v8 = v89;
  }
  unint64_t v10 = (void **)(a1 + 8);
  if (v5 != a4)
  {
    do
    {
      *(void *)unint64_t v8 = *(void *)v5;
      uint64_t v11 = *(void *)(v5 + 8);
      *((void *)v8 + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v8 + 4) = *(_DWORD *)(v5 + 16);
      v5 += 24;
      v8 += 24;
    }
    while (v5 != a4);
    unint64_t v8 = v89;
  }
  uint64_t v89 = &v8[24 * v9];
  unint64_t v12 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(a1 + 8), a2);
  if (v12)
  {
    unsigned int v13 = v12;
    int32x2_t v14 = (uint64_t *)v12[5];
    uint64_t v15 = *v14;
    *(void *)(v15 + 8) = v14[1];
    *(void *)v14[1] = v15;
    --*(void *)(a1 + 64);
    uint64_t v16 = (void *)v14[5];
    uint64_t v17 = (void *)v14[6];
    if (v16 != v17)
    {
      do
      {
        unint64_t v18 = (std::__shared_weak_count *)v16[1];
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        v16 += 3;
      }
      while (v16 != v17);
      uint64_t v16 = (void *)v14[5];
    }
    if (v16 != (void *)v14[7]) {
      free(v16);
    }
    operator delete(v14);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)(a1 + 8), v13);
    if (*(void *)__p) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v19 = (char *)operator new(0x78uLL);
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  *((_WORD *)v19 + 8) = *(_WORD *)a2;
  uint64_t v20 = *(void *)(a2 + 4);
  uint64_t v21 = v19 + 72;
  *((void *)v19 + 5) = v19 + 72;
  *(void *)(v19 + 20) = v20;
  *((void *)v19 + 6) = v19 + 72;
  *((void *)v19 + 7) = v19 + 72;
  *((void *)v19 + 8) = 2;
  int v22 = v88;
  uint64_t v23 = (uint64_t)v89;
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3);
  if (v24 >= 3)
  {
    geo::small_vector_base<md::FlyoverRegionManager::RegionArea>::grow((void **)v19 + 5, 0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3));
    uint64_t v21 = (char *)*((void *)v19 + 6);
  }
  uint64_t v87 = a1 + 48;
  if (v22 != (void *)v23)
  {
    do
    {
      *(void *)uint64_t v21 = *v22;
      uint64_t v25 = v22[1];
      *((void *)v21 + 1) = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
      v22 += 3;
      v21 += 24;
    }
    while (v22 != (void *)v23);
    uint64_t v21 = (char *)*((void *)v19 + 6);
  }
  *((void *)v19 + 6) = &v21[24 * v24];
  unsigned int v26 = *(void **)(a1 + 56);
  *(void *)uint64_t v19 = v87;
  *((void *)v19 + 1) = v26;
  *unsigned int v26 = v19;
  uint64_t v27 = *(void *)(a1 + 64) + 1;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v27;
  uint64_t v28 = *a2;
  uint64_t v29 = a2[1];
  unint64_t v30 = (v29
       + ((v28 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v28 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v28 - 0x61C8864680B583EBLL);
  uint64_t v31 = *((int *)a2 + 1);
  uint64_t v32 = *((int *)a2 + 2);
  unint64_t v33 = (v31 + (v30 << 6) + (v30 >> 2) - 0x61C8864680B583EBLL) ^ v30;
  unint64_t v34 = (v32 + (v33 << 6) + (v33 >> 2) - 0x61C8864680B583EBLL) ^ v33;
  unint64_t v35 = *(void *)(a1 + 16);
  if (v35)
  {
    uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      uint64_t v23 = (v32 + (v33 << 6) + (v33 >> 2) - 0x61C8864680B583EBLL) ^ v33;
      if (v34 >= v35) {
        uint64_t v23 = v34 % v35;
      }
    }
    else
    {
      uint64_t v23 = v34 & (v35 - 1);
    }
    double v37 = (uint64_t **)*((void *)*v10 + v23);
    if (v37)
    {
      double v38 = *v37;
      if (v38)
      {
        if (v36.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v40 = v38[1];
            if (v40 == v34)
            {
              if (__PAIR64__(*((unsigned __int8 *)v38 + 17), *((unsigned __int8 *)v38 + 16)) == __PAIR64__(v29, v28)
                && *(uint64_t *)((char *)v38 + 20) == __PAIR64__(v32, v31))
              {
                goto LABEL_113;
              }
            }
            else if ((v40 & (v35 - 1)) != v23)
            {
              goto LABEL_53;
            }
            double v38 = (uint64_t *)*v38;
            if (!v38) {
              goto LABEL_53;
            }
          }
        }
        do
        {
          unint64_t v39 = v38[1];
          if (v39 == v34)
          {
            if (__PAIR64__(*((unsigned __int8 *)v38 + 17), *((unsigned __int8 *)v38 + 16)) == __PAIR64__(v29, v28)
              && *(uint64_t *)((char *)v38 + 20) == __PAIR64__(v32, v31))
            {
              goto LABEL_113;
            }
          }
          else
          {
            if (v39 >= v35) {
              v39 %= v35;
            }
            if (v39 != v23) {
              break;
            }
          }
          double v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
    }
  }
LABEL_53:
  int v41 = operator new(0x30uLL);
  *int v41 = 0;
  v41[1] = v34;
  *((unsigned char *)v41 + 16) = v28;
  *((unsigned char *)v41 + 17) = v29;
  *(void *)((char *)v41 + 20) = *(void *)(a2 + 4);
  v41[5] = v19;
  float v42 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v43 = *(float *)(a1 + 40);
  if (!v35 || (float)(v43 * (float)v35) < v42)
  {
    BOOL v44 = 1;
    if (v35 >= 3) {
      BOOL v44 = (v35 & (v35 - 1)) != 0;
    }
    unint64_t v45 = v44 | (2 * v35);
    unint64_t v46 = vcvtps_u32_f32(v42 / v43);
    if (v45 <= v46) {
      size_t prime = v46;
    }
    else {
      size_t prime = v45;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v35 = *(void *)(a1 + 16);
    }
    if (prime <= v35)
    {
      if (prime >= v35) {
        goto LABEL_90;
      }
      unint64_t v59 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v35 < 3 || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
      {
        unint64_t v59 = std::__next_prime(v59);
      }
      else
      {
        uint64_t v61 = 1 << -(char)__clz(v59 - 1);
        if (v59 >= 2) {
          unint64_t v59 = v61;
        }
      }
      if (prime <= v59) {
        size_t prime = v59;
      }
      if (prime >= v35)
      {
        unint64_t v35 = *(void *)(a1 + 16);
LABEL_90:
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35) {
            uint64_t v23 = v34 % v35;
          }
          else {
            uint64_t v23 = v34;
          }
        }
        else
        {
          uint64_t v23 = (v35 - 1) & v34;
        }
        goto LABEL_103;
      }
      if (!prime)
      {
        uint64_t v86 = *v10;
        char *v10 = 0;
        if (v86) {
          operator delete(v86);
        }
        unint64_t v35 = 0;
        *(void *)(a1 + 16) = 0;
        goto LABEL_90;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v48 = operator new(8 * prime);
    unint64_t v49 = *v10;
    char *v10 = v48;
    if (v49) {
      operator delete(v49);
    }
    uint64_t v50 = 0;
    *(void *)(a1 + 16) = prime;
    do
      *((void *)*v10 + v50++) = 0;
    while (prime != v50);
    uint64_t v52 = a1 + 24;
    unint64_t v51 = *(void **)(a1 + 24);
    if (!v51)
    {
LABEL_89:
      unint64_t v35 = prime;
      goto LABEL_90;
    }
    size_t v53 = v51[1];
    size_t v54 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v55 = v53 & v54;
      *((void *)*v10 + v55) = v52;
      for (uint64_t i = (void *)*v51; *v51; uint64_t i = (void *)*v51)
      {
        size_t v57 = i[1] & v54;
        if (v57 == v55)
        {
          unint64_t v51 = i;
        }
        else if (*((void *)*v10 + v57))
        {
          void *v51 = *i;
          uint64_t v58 = 8 * v57;
          *uint64_t i = **(void **)((char *)*v10 + v58);
          **(void **)((char *)*v10 + v58) = i;
        }
        else
        {
          *((void *)*v10 + v57) = v51;
          unint64_t v51 = i;
          size_t v55 = v57;
        }
      }
      goto LABEL_89;
    }
    if (v53 >= prime) {
      v53 %= prime;
    }
    *((void *)*v10 + v53) = v52;
    BOOL v62 = (void *)*v51;
    if (!*v51) {
      goto LABEL_89;
    }
    while (1)
    {
      size_t v64 = v62[1];
      if (v64 >= prime) {
        v64 %= prime;
      }
      if (v64 != v53)
      {
        if (!*((void *)*v10 + v64))
        {
          *((void *)*v10 + v64) = v51;
          goto LABEL_94;
        }
        void *v51 = *v62;
        uint64_t v63 = 8 * v64;
        void *v62 = **(void **)((char *)*v10 + v63);
        **(void **)((char *)*v10 + v63) = v62;
        BOOL v62 = v51;
      }
      size_t v64 = v53;
LABEL_94:
      unint64_t v51 = v62;
      BOOL v62 = (void *)*v62;
      size_t v53 = v64;
      if (!v62) {
        goto LABEL_89;
      }
    }
  }
LABEL_103:
  uint64_t v65 = *v10;
  unint64_t v66 = (void *)*((void *)*v10 + v23);
  if (v66)
  {
    *int v41 = *v66;
LABEL_111:
    void *v66 = v41;
    goto LABEL_112;
  }
  *int v41 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v41;
  v65[v23] = a1 + 24;
  if (*v41)
  {
    unint64_t v67 = *(void *)(*v41 + 8);
    if ((v35 & (v35 - 1)) != 0)
    {
      if (v67 >= v35) {
        v67 %= v35;
      }
    }
    else
    {
      v67 &= v35 - 1;
    }
    unint64_t v66 = (char *)*v10 + 8 * v67;
    goto LABEL_111;
  }
LABEL_112:
  ++*(void *)(a1 + 32);
LABEL_113:
  uint64_t v68 = v88;
  long long v69 = v89;
  if (v88 != v89)
  {
    do
    {
      uint64_t v70 = (std::__shared_weak_count *)v68[1];
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      v68 += 3;
    }
    while (v68 != v69);
    uint64_t v68 = v88;
  }
  if (v68 != (void *)v90) {
    free(v68);
  }
  while (*(void *)(a1 + 64) > *(void *)a1)
  {
    uint64_t v71 = *(void **)v87;
    *(_WORD *)std::string __p = *(_WORD *)(*(void *)v87 + 16);
    *(void *)&__p[4] = *(void *)((char *)v71 + 20);
    int v94 = v98;
    int v95 = v98;
    int v96 = v98;
    uint64_t v97 = 2;
    uint64_t v72 = v71[5];
    uint64_t v73 = v71[6];
    unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 3);
    int64_t v75 = v98;
    if (v74 >= 3)
    {
      geo::small_vector_base<md::FlyoverRegionManager::RegionArea>::grow((void **)&v94, 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 3));
      int64_t v75 = v95;
    }
    if (v72 != v73)
    {
      do
      {
        *(void *)int64_t v75 = *(void *)v72;
        uint64_t v76 = *(void *)(v72 + 8);
        *((void *)v75 + 1) = v76;
        if (v76) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v75 + 4) = *(_DWORD *)(v72 + 16);
        v72 += 24;
        v75 += 24;
      }
      while (v72 != v73);
      int64_t v75 = v95;
    }
    int v95 = &v75[24 * v74];
    uint64_t v77 = *(uint64_t **)(a1 + 48);
    uint64_t v78 = *v77;
    *(void *)(v78 + 8) = v77[1];
    *(void *)v77[1] = v78;
    --*(void *)(a1 + 64);
    unint64_t v79 = (void *)v77[5];
    double v80 = (void *)v77[6];
    if (v79 != v80)
    {
      do
      {
        double v81 = (std::__shared_weak_count *)v79[1];
        if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
        v79 += 3;
      }
      while (v79 != v80);
      unint64_t v79 = (void *)v77[5];
    }
    if (v79 != (void *)v77[7]) {
      free(v79);
    }
    operator delete(v77);
    uint64_t v82 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(a1 + 8), __p);
    if (v82)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v99, (void *)(a1 + 8), v82);
      if (v99) {
        operator delete(v99);
      }
    }
    uint64_t v83 = v94;
    uint64_t v84 = v95;
    if (v94 != v95)
    {
      do
      {
        unint64_t v85 = (std::__shared_weak_count *)v83[1];
        if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
        v83 += 3;
      }
      while (v83 != v84);
      uint64_t v83 = v94;
    }
    if (v83 != (void *)v96) {
      free(v83);
    }
  }
}

void sub_1A1F071E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>::~small_vector((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t geo::small_vector<md::FlyoverRegionManager::RegionArea,2ul>::~small_vector(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    do
    {
      uint64_t v4 = (std::__shared_weak_count *)v2[1];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v2 += 3;
    }
    while (v2 != v3);
    uint64_t v2 = *(void **)a1;
  }
  if (v2 != *(void **)(a1 + 16)) {
    free(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmArea>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 272);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 200));
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*(void **)(a1 + 184));
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(void **)(a1 + 64);
    if (v5 != v4)
    {
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        if (v7)
        {
          *(void *)(v5 - 16) = v7;
          operator delete(v7);
        }
        v5 -= 32;
      }
      while (v5 != v4);
      uint64_t v6 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v4;
    operator delete(v6);
  }
  unint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    *(void *)(a1 + 48) = v8;
    operator delete(v8);
  }
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::FlyoverRegionManager::getArea(md::FlyoverRegionManager *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (std::mutex *)(a2 + 96);
  std::mutex::lock((std::mutex *)(a2 + 96));
  unint64_t v7 = *(void **)(a2 + 72);
  unint64_t v8 = (void *)(a2 + 80);
  if (v7 == (void *)(a2 + 80))
  {
LABEL_30:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    goto LABEL_34;
  }
  while (1)
  {
    unint64_t v9 = v7[6];
    if (v9)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v11 = a3;
        if (v9 <= a3) {
          unint64_t v11 = a3 % v9;
        }
      }
      else
      {
        unint64_t v11 = (v9 - 1) & a3;
      }
      unint64_t v12 = *(uint64_t ***)(v7[5] + 8 * v11);
      if (v12)
      {
        unsigned int v13 = *v12;
        if (*v12) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v17 = (void *)v7[1];
    if (v17)
    {
      do
      {
        unint64_t v18 = v17;
        uint64_t v17 = (void *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        unint64_t v18 = (void *)v7[2];
        BOOL v19 = *v18 == (void)v7;
        unint64_t v7 = v18;
      }
      while (!v19);
    }
    unint64_t v7 = v18;
    if (v18 == v8) {
      goto LABEL_30;
    }
  }
  if (v10.u32[0] < 2uLL)
  {
    unint64_t v14 = v9 - 1;
    while (1)
    {
      uint64_t v16 = v13[1];
      if (v16 == a3)
      {
        if (*((_DWORD *)v13 + 4) == a3) {
          goto LABEL_31;
        }
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_24;
      }
      unsigned int v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v13[1];
    if (v15 == a3) {
      break;
    }
    if (v15 >= v9) {
      v15 %= v9;
    }
    if (v15 != v11) {
      goto LABEL_24;
    }
LABEL_14:
    unsigned int v13 = (uint64_t *)*v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  if (*((_DWORD *)v13 + 4) != a3) {
    goto LABEL_14;
  }
LABEL_31:
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v20 = (std::__shared_weak_count *)v13[18];
  if (v20)
  {
    uint64_t v21 = std::__shared_weak_count::lock(v20);
    *((void *)this + 1) = v21;
    if (v21) {
      *(void *)this = v13[17];
    }
  }
LABEL_34:
  std::mutex::unlock(v6);
}

uint64_t std::__shared_ptr_emplace<md::RegionMetaTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RegionMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RegionMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RegionMetaLayerDataSource::~RegionMetaLayerDataSource(md::RegionMetaLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A1F0785C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F07C68(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A1F07D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F07E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::TransitLineTextLabelPart::textColorForSource@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  if (a2 != 3 && a2)
  {
    uint64_t v6 = *a3;
    if (a2 == 4)
    {
      uint64_t v7 = *(void *)(v6 + 272);
      if (!v7)
      {
        __n128 result = (uint64_t)md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*a3);
        uint64_t v7 = *(void *)result;
        *(void *)(v6 + 272) = *(void *)result;
      }
      uint64_t v5 = (_DWORD *)(v7 + 65);
    }
    else
    {
      BOOL v8 = *(unsigned __int8 *)(result + 864) == 1;
      uint64_t v9 = v6 + 280;
      if (*(unsigned char *)(result + 864) == 1) {
        uint64_t v10 = 6;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void *)(v9 + 8 * (*(unsigned char *)(result + 864) == 1));
      if (v11)
      {
        if (vabds_f32(*(float *)(v11 + 8), *(float *)(v6 + 104)) >= 0.01)
        {
          __n128 result = (uint64_t)md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v6, v11, v10);
          uint64_t v11 = *(void *)(v9 + 8 * v8);
        }
      }
      else
      {
        __n128 result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v6, v10);
        uint64_t v11 = result;
        *(void *)(v9 + 8 * v8) = result;
      }
      uint64_t v5 = (_DWORD *)(*(void *)v11 + 8);
    }
  }
  else
  {
    uint64_t v5 = (_DWORD *)(result + 1504);
  }
  *a4 = *v5;
  return result;
}

uint64_t md::TextLabelPart::publicName(md::TextLabelPart *this)
{
  uint64_t v1 = *((void *)this + 74);
  if (v1) {
    return **(void **)(v1 + 16);
  }
  else {
    return 0;
  }
}

uint64_t md::TransitLineTextLabelPart::needsCrossfade(uint64_t a1, float *a2, int a3, uint64_t a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 1488) + 104));
  if (v4) {
    return md::CurvedTextLabelPart::needsCrossfade(a1, a2, a3, a4);
  }
  else {
    return 1;
  }
}

BOOL md::TextLabelPart::isTextVisible(md::TextLabelPart *this)
{
  return *((float *)this + 138) >= 0.0039062;
}

void md::CurvedTextLabelPart::setPosition(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = a1 + 960;
  if (a2) {
    uint64_t v3 = a1 + 1152;
  }
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 120);
  *(void *)(v3 + 112) = v5;
  *(void *)(v3 + 120) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t md::CurvedTextLabelPart::setUseExternalLayoutOptions(uint64_t result, int a2, char a3)
{
  uint64_t v3 = result + 960;
  if (a2) {
    uint64_t v3 = result + 1152;
  }
  *(unsigned char *)(v3 + 184) = a3;
  return result;
}

uint64_t md::CurvedTextLabelPart::setLayoutInReverse(uint64_t result, int a2, char a3)
{
  uint64_t v3 = result + 960;
  if (a2) {
    uint64_t v3 = result + 1152;
  }
  *(unsigned char *)(v3 + 183) = a3;
  return result;
}

float md::TextLabelPart::animationSize(md::TextLabelPart *this)
{
  return *((float *)this + 157);
}

uint64_t md::CurvedTextLabelPart::partType(md::CurvedTextLabelPart *this)
{
  return 5;
}

uint64_t md::TextLabelPart::stagingModelMatrix(md::TextLabelPart *this)
{
  return *((void *)this + 106);
}

uint64_t *md::TransitLineTextLabelPart::updateWithStyle(md::TransitLineTextLabelPart *this, md::LabelManager *a2)
{
  uint64_t v4 = *((void *)this + 186);
  uint64_t v5 = *((unsigned __int8 *)this + 1508);
  uint64_t v6 = (std::mutex *)(v4 + 40);
  std::mutex::lock((std::mutex *)(v4 + 40));
  BOOL v8 = *(void **)(v4 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 32);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v6);
  if (v8)
  {
    unsigned int v9 = *(_DWORD *)(*v8 + 16 * v5 + 4);
    unsigned int v10 = v9 >> 8;
    LODWORD(v8) = HIWORD(v9);
    unsigned int v11 = HIBYTE(v9);
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    LOBYTE(v10) = 0;
    LOBYTE(v9) = 0;
    LOBYTE(v11) = -1;
    if (!v7) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  *((unsigned char *)this + 1504) = v9;
  *((unsigned char *)this + 1505) = v10;
  *((unsigned char *)this + 1506) = (_BYTE)v8;
  *((unsigned char *)this + 1507) = v11;
  return md::CurvedTextLabelPart::updateWithStyle(this, a2);
}

void md::TransitLineTextLabelPart::~TransitLineTextLabelPart(md::TransitLineTextLabelPart *this)
{
  *(void *)this = &unk_1EF545910;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 187);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF53B460;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 185);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*((unsigned char *)this + 1416)) {
    *((unsigned char *)this + 1416) = 0;
  }
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::TransitLineTextLabelPart *)((char *)this + 1152));
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::TransitLineTextLabelPart *)((char *)this + 960));
  md::TextLabelPart::~TextLabelPart(this);
  {
    operator new();
  }
  uint64_t v4 = *(void (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
  v4();
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF545910;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 187);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF53B460;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 185);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*((unsigned char *)this + 1416)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (*((unsigned char *)this + 1416)) {
LABEL_7:
  }
    *((unsigned char *)this + 1416) = 0;
LABEL_8:
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::TransitLineTextLabelPart *)((char *)this + 1152));
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::TransitLineTextLabelPart *)((char *)this + 960));
  md::TextLabelPart::~TextLabelPart(this);
}

void md::CurvedTextLabelPart::LayoutState::~LayoutState(md::CurvedTextLabelPart::LayoutState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t md::TransitLineTextLabelPart::TransitLineTextLabelPart(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, float a9, unsigned char *a10, uint64_t *a11, unsigned __int8 a12)
{
  unsigned int v13 = (void *)md::CurvedTextLabelPart::CurvedTextLabelPart(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
  void *v13 = &unk_1EF545910;
  uint64_t v15 = *a11;
  uint64_t v14 = a11[1];
  v13[186] = *a11;
  v13[187] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = *(void *)(a1 + 1488);
  }
  *(_DWORD *)(a1 + 1504) = -16776961;
  *(unsigned char *)(a1 + 1508) = a12;
  uint64_t v16 = (std::mutex *)(v15 + 40);
  std::mutex::lock((std::mutex *)(v15 + 40));
  unint64_t v18 = *(void **)(v15 + 24);
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 32);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v16);
  if (v18)
  {
    unsigned int v19 = *(_DWORD *)(*v18 + 16 * a12 + 4);
    unsigned int v20 = v19 >> 8;
    LODWORD(v18) = HIWORD(v19);
    unsigned int v21 = HIBYTE(v19);
    if (!v17) {
      goto LABEL_11;
    }
  }
  else
  {
    LOBYTE(v20) = 0;
    LOBYTE(v19) = 0;
    LOBYTE(v21) = -1;
    if (!v17) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_11:
  *(unsigned char *)(a1 + 1504) = v19;
  *(unsigned char *)(a1 + 1505) = v20;
  *(unsigned char *)(a1 + 1506) = (_BYTE)v18;
  *(unsigned char *)(a1 + 1507) = v21;
  return a1;
}

void sub_1A1F087FC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 1496);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)uint64_t v1 = &unk_1EF53B460;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 1480);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*(unsigned char *)(v1 + 1416)) {
    *(unsigned char *)(v1 + 1416) = 0;
  }
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::CurvedTextLabelPart::LayoutState *)(v1 + 1152));
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::CurvedTextLabelPart::LayoutState *)(v1 + 960));
  md::TextLabelPart::~TextLabelPart((md::TextLabelPart *)v1);
  _Unwind_Resume(a1);
}

void **std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
      abort();
    }
    unint64_t v9 = v7 - 1;
    unsigned int v10 = a1;
    if ((v6 & 0x8000000000000000) != 0) {
      unsigned int v10 = *a1;
    }
    unint64_t v11 = 2 * v9;
    if (__len > 2 * v9) {
      unint64_t v11 = __len;
    }
    uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v12 = v11 | 7;
    }
    if (v11 >= 0x17) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = 23;
    }
    if (v9 <= 0x3FFFFFFFFFFFFFF2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0x7FFFFFFFFFFFFFF7;
    }
    uint64_t v15 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], v14, 1);
    BOOL v8 = v15;
    if (__len) {
      memmove(v15, __src, __len);
    }
    if (v7 != 23) {
      (*(void (**)(void *, void *, uint64_t))(*(void *)a1[3] + 40))(a1[3], v10, v7);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v14 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    BOOL v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

void std::__shared_ptr_emplace<md::LabelImageKey>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelImageKey>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(a1, __s, v4);
}

void md::LabelStyle::pointIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, char a7, int a8, char a9, char a10, char a11, uint64_t a12)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  LOBYTE(v20) = 0;
  char v21 = 0;
  if (a7)
  {
    int v20 = a6;
    char v21 = 1;
  }
  v19[0] = 0;
  v19[24] = 0;
  if (*(char *)(a12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a12, *(void *)(a12 + 8));
  }
  else
  {
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)a12;
    v22.__r_.__value_.__r.__words[2] = *(void *)(a12 + 16);
  }
  uint64_t v18 = *(void *)(a12 + 48);
  if (!v18) {
    goto LABEL_9;
  }
  if (v18 != a12 + 24)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
LABEL_9:
    unint64_t v24 = (void *)v18;
    goto LABEL_11;
  }
  unint64_t v24 = v23;
  (*(void (**)(uint64_t, void *))(*(void *)v18 + 24))(v18, v23);
LABEL_11:
  md::LabelStyle::pointIcon(a1, a2, a3, a4, a5, 0, &v20, a8, (uint64_t)v19, a9, a10, a11, (uint64_t)&v22);
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
  if (v24) {
    (*(void (**)(void))(*v24 + 40))();
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1A1F08D0C(_Unwind_Exception *exception_object)
{
}

void sub_1A1F08D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1F08D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void md::CustomImageData::~CustomImageData(md::CustomImageData *this)
{
  uint64_t v2 = (char *)this + 24;
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(*(void **)this);
    return;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

void md::LabelStyle::createIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, std::__shared_count *a4, uint64_t *a5, void **a6, int a7, __int16 a8, char a9, uint64_t a10, char *a11, const md::CustomImageData *a12)
{
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x148uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB50;
  v15[1].std::__shared_count = 0u;
  *(_OWORD *)&v15[1].__shared_weak_owners_ = 0u;
  v15[2].__shared_owners_ = 0;
  {
    operator new();
  }
  uint64_t v16 = mdm::Allocator::instance(void)::alloc;
  v15[6].__vftable = 0;
  v15[3].__vftable = 0;
  v15[3].__shared_owners_ = 0;
  v15[2].__shared_weak_owners_ = v16;
  LOWORD(v15[3].__shared_weak_owners_) = 0;
  v15[4].__vftable = (std::__shared_weak_count_vtbl *)&v15[5].__shared_owners_;
  v15[4].__shared_owners_ = (uint64_t)&v15[5].__shared_owners_;
  v15[4].__shared_weak_owners_ = (uint64_t)&v15[5].__shared_owners_;
  v15[5].__vftable = (std::__shared_weak_count_vtbl *)2;
  LOBYTE(v15[5].__shared_weak_owners_) = 0;
  *(_DWORD *)((char *)&v15[5].__shared_weak_owners_ + 1) = 16843008;
  BYTE5(v15[5].__shared_weak_owners_) = 0;
  v15[6].__shared_owners_ = 0;
  v15[6].__shared_weak_owners_ = 0;
  {
    operator new();
  }
  v15[7].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
  v15[7].__shared_owners_ = 0;
  *(uint64_t *)((char *)&v15[7].__shared_owners_ + 5) = 0;
  LOBYTE(v15[8].__vftable) = 4;
  *(std::__shared_weak_count_vtbl **)((char *)&v15[8].__vftable + 4) = 0;
  BYTE4(v15[8].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v15[8].__shared_weak_owners_ + 4) = 0xFFFF3F800000;
  WORD2(v15[9].__vftable) = 0;
  LODWORD(v15[9].__shared_owners_) = 1065353216;
  v15[13].__shared_owners_ = 0;
  v15[10].std::__shared_count = 0u;
  *(_OWORD *)&v15[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v15[11].__shared_owners_ = 0u;
  v15[12].__vftable = 0;
  unint64_t v67 = v15 + 1;
  uint64_t v68 = v15;
  LOBYTE(v15[5].__shared_weak_owners_) = 4;
  *(float *)&v15[3].__shared_owners_ = md::LabelStyle::iconContentScale(a2);
  uint64_t v18 = *((void *)a2 + 37);
  if (!v18)
  {
    uint64_t v17 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    uint64_t v18 = *(void *)v17;
    *((void *)a2 + 37) = *(void *)v17;
  }
  unsigned int v19 = a4;
  uint64_t v20 = a3;
  if (*(unsigned char *)(v18 + 88) == 8) {
    int v21 = 4;
  }
  else {
    int v21 = *(unsigned __int8 *)(a3 + 3360);
  }
  uint64_t v22 = 92;
  if (a9) {
    uint64_t v22 = 93;
  }
  unsigned int v23 = *(unsigned __int8 *)(a10 + v22) - 1;
  if (v23 > 8) {
    int v24 = 0;
  }
  else {
    int v24 = dword_1A29003B0[v23];
  }
  uint64_t v25 = (grl *)grl::SizeGroupMin(v17);
  int v26 = (int)v25;
  int v27 = grl::SizeGroupMax(v25);
  int v28 = v24 + v21;
  if (v24 + v21 >= v27) {
    int v28 = v27;
  }
  if (v28 <= v26) {
    LOBYTE(v28) = v26;
  }
  LOBYTE(v15[8].__vftable) = v28;
  v15[1].std::__shared_count = v19[7];
  if (a9)
  {
    uint64_t v29 = *((void *)a2 + 39);
    uint64_t v30 = v20;
    uint64_t v31 = (md::LabelImageKey *)&v15[1];
    if (!v29)
    {
      uint64_t v32 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>((uint64_t)a2);
      uint64_t v29 = *v32;
      *((void *)a2 + 39) = *v32;
      uint64_t v31 = (md::LabelImageKey *)&v15[1];
    }
    unint64_t v33 = (std::__shared_weak_count_vtbl **)(v29 + 24);
    unint64_t v34 = a6;
    unint64_t v35 = a11;
    double v37 = a5;
    uint8x8_t v36 = a12;
  }
  else
  {
    unint64_t v33 = (std::__shared_weak_count_vtbl **)(a10 + 56);
    uint64_t v30 = v20;
    unint64_t v34 = a6;
    unint64_t v35 = a11;
    double v37 = a5;
    uint8x8_t v36 = a12;
    uint64_t v31 = (md::LabelImageKey *)&v15[1];
  }
  *(std::__shared_weak_count_vtbl **)((char *)&v15[8].__vftable + 4) = *v33;
  BYTE4(v15[5].__shared_weak_owners_) = *(unsigned char *)(a10 + 88);
  BYTE4(v15[9].__vftable) = *(unsigned char *)(a10 + 96);
  uint64_t v38 = *v37;
  if (!*v37 || (unint64_t v39 = *(unsigned __int8 *)(v38 + 33), !*(unsigned char *)(v38 + 33)))
  {
LABEL_31:
    int v42 = 0xFFFF;
    goto LABEL_32;
  }
  uint64_t v40 = *(_DWORD **)v38;
  if (*v40 != 4)
  {
    unint64_t v41 = 0;
    float v43 = v40 + 2;
    while (v39 - 1 != v41)
    {
      int v44 = *v43;
      v43 += 2;
      ++v41;
      if (v44 == 4)
      {
        if (v41 < v39) {
          goto LABEL_26;
        }
        goto LABEL_31;
      }
    }
    goto LABEL_31;
  }
  unint64_t v41 = 0;
LABEL_26:
  int v42 = LOWORD(v40[2 * v41 + 1]);
LABEL_32:
  LODWORD(v15[9].__vftable) = v42;
  md::LabelImageKey::setCustomImageData(v31, v36);
  if (a7)
  {
    HIDWORD(v15[3].__shared_owners_) = a7;
    LOWORD(v15[3].__shared_weak_owners_) = a8;
  }
  if (v34)
  {
    char v45 = *((unsigned char *)v34 + 23);
    if (v45 < 0)
    {
      if (!v34[1]) {
        goto LABEL_51;
      }
    }
    else if (!*((unsigned char *)v34 + 23))
    {
      goto LABEL_51;
    }
    p_unint64_t shared_weak_owners = (void **)&v15[1].__shared_weak_owners_;
    if (&v15[1].__shared_weak_owners_ != (uint64_t *)v34)
    {
      if (SHIBYTE(v15[2].__shared_owners_) < 0)
      {
        if (v45 >= 0) {
          double v47 = v34;
        }
        else {
          double v47 = *v34;
        }
        if (v45 >= 0) {
          size_t v48 = *((unsigned __int8 *)v34 + 23);
        }
        else {
          size_t v48 = (size_t)v34[1];
        }
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(p_shared_weak_owners, v47, v48);
      }
      else if ((*((unsigned char *)v34 + 23) & 0x80) != 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)p_shared_weak_owners, *v34, (size_t)v34[1]);
      }
      else
      {
        *(_OWORD *)p_unint64_t shared_weak_owners = *(_OWORD *)v34;
        v15[2].__shared_owners_ = (uint64_t)v34[2];
      }
    }
  }
LABEL_51:
  if (v35[4])
  {
    long long __src = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    {
      operator new();
    }
    uint64_t v49 = mdm::Allocator::instance(void)::alloc;
    *(void *)&v66[5] = 0;
    uint64_t v65 = mdm::Allocator::instance(void)::alloc;
    *(void *)unint64_t v66 = 0;
    char v50 = *v35;
    v66[8] = *v35;
    char v51 = v35[1];
    v66[9] = v51;
    char v52 = v35[2];
    v66[10] = v52;
    char v53 = v35[3];
    v66[11] = v53;
    if (SHIBYTE(v15[6].__shared_weak_owners_) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v15[6].__vftable, &__src, 0);
      int v54 = SHIBYTE(v64);
      v15[7].__shared_owners_ = 0;
      LODWORD(v15[7].__shared_weak_owners_) = *(_DWORD *)&v66[8];
      BYTE4(v15[7].__shared_weak_owners_) = 0;
      if (v54 < 0) {
        (*(void (**)(uint64_t, md::LabelImageKey *, uint64_t))(*(void *)v49 + 40))(v49, __src, v64 & 0x7FFFFFFFFFFFFFFFLL);
      }
    }
    else
    {
      v15[6].__vftable = 0;
      v15[6].__shared_owners_ = 0;
      v15[6].__shared_weak_owners_ = 0;
      v15[7].__shared_owners_ = 0;
      LOBYTE(v15[7].__shared_weak_owners_) = v50;
      BYTE1(v15[7].__shared_weak_owners_) = v51;
      BYTE2(v15[7].__shared_weak_owners_) = v52;
      BYTE3(v15[7].__shared_weak_owners_) = v53;
      BYTE4(v15[7].__shared_weak_owners_) = 0;
    }
  }
  uint64_t v55 = *(void *)(v30 + 264);
  long long __src = v31;
  uint64_t v63 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  md::LabelImageLoader::loadImage(a1, v55, &__src);
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v56 = v68;
    if (!v68) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    int v56 = v68;
    if (!v68) {
      return;
    }
  }
  if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
}

void sub_1A1F0943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (SHIBYTE(a20) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 40))(v20, a18, a20 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v21 - 104);
  _Unwind_Resume(a1);
}

void md::LabelStyle::multiPOIBalloonIcon(void *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  unint64_t v157 = a1;
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (char *)operator new(0x148uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)unint64_t v11 = &unk_1EF57FB50;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((void *)v11 + 7) = 0;
  {
    operator new();
  }
  uint64_t v12 = mdm::Allocator::instance(void)::alloc;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 8) = v12;
  *((_WORD *)v11 + 44) = 0;
  *((void *)v11 + 12) = v11 + 128;
  *((void *)v11 + 13) = v11 + 128;
  *((void *)v11 + 14) = v11 + 128;
  *((void *)v11 + 15) = 2;
  v11[136] = 0;
  *(_DWORD *)(v11 + 137) = 16843008;
  v11[141] = 0;
  *((void *)v11 + 19) = 0;
  *((void *)v11 + 20) = 0;
  *((void *)v11 + 18) = 0;
  {
    operator new();
  }
  *((void *)v11 + 21) = mdm::Allocator::instance(void)::alloc;
  *((void *)v11 + 22) = 0;
  *(void *)(v11 + 181) = 0;
  v11[192] = 4;
  *(void *)(v11 + 196) = 0;
  v11[204] = 0;
  *(void *)(v11 + 212) = 0xFFFF3F800000;
  *((_WORD *)v11 + 110) = 0;
  *((_DWORD *)v11 + 56) = 1065353216;
  *((void *)v11 + 40) = 0;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *((void *)v11 + 36) = 0;
  unint64_t v163 = (std::__shared_weak_count *)v11;
  v11[136] = 4;
  *((float *)v11 + 20) = md::LabelStyle::iconContentScale(a2);
  v11[192] = 8;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a4 + 112);
  uint64_t v14 = *((void *)a2 + 37);
  if (!v14)
  {
    uint64_t v13 = (grl::Allocator *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    uint64_t v14 = *(void *)v13;
    *((void *)a2 + 37) = *(void *)v13;
  }
  *(void *)(v11 + 196) = *(void *)(v14 + 56);
  v11[141] = a5;
  uint64_t v160 = *(void *)(a3 + 264);
  long long v161 = (float *)(v11 + 24);
  uint64_t v162 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  unint64_t v191 = 0;
  v205[0] = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v205[1] = _D8;
  char v206 = 0;
  __int16 v207 = 0;
  char v208 = 0;
  char v209 = 0;
  char v210 = 0;
  char v211 = 0;
  v213[0] = 0;
  v213[1] = grl::Allocator::instance(v13);
  long long v212 = v213;
  v213[2] = 0;
  uint64_t v217 = 0;
  long long v214 = 0u;
  long long v215 = 0u;
  long long v216 = 0u;
  unsigned int v19 = (grl::Allocator *)grl::IconModifiers::setGlyphOnly((uint64_t)v205, 1);
  int v180 = 1065353216;
  char v181 = 4;
  __int16 v183 = -1;
  int v182 = 0;
  char v184 = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  uint64_t v185 = 0;
  uint64_t v188 = grl::Allocator::instance(v19);
  grl::IconRequestOptions::setContentScale((float *)&v180, *((float *)v11 + 20));
  grl::IconRequestOptions::setVariant((uint64_t)&v180, *((_WORD *)v11 + 98));
  grl::IconRequestOptions::setDataVariant((uint64_t)&v180, *((_WORD *)v11 + 100));
  grl::IconRequestOptions::setCountryCode((uint64_t)&v180, *((_WORD *)v11 + 108));
  std::string __p = 0;
  long long v179 = 0uLL;
  uint64_t v20 = *a6;
  uint64_t v21 = a6[1];
  int64_t v22 = v21 - *a6;
  if (v22)
  {
    if (v22 < 0) {
      abort();
    }
    unsigned int v23 = (unsigned int **)operator new(v22);
    int v24 = v23;
    uint64_t v25 = 0;
    std::string __p = v23;
    *((void *)&v179 + 1) = &v23[2 * (v22 >> 4)];
    do
    {
      uint64_t v26 = v20 + v25 * 8;
      int v27 = &v23[v25];
      *int v27 = *(unsigned int **)(v20 + v25 * 8);
      uint64_t v28 = *(void *)(v20 + v25 * 8 + 8);
      v27[1] = (unsigned int *)v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v25 += 2;
    }
    while (v26 + 16 != v21);
    int64_t v22 = (int64_t)&v23[v25];
    *(void *)&long long v179 = &v23[v25];
  }
  else
  {
    int v24 = 0;
  }
  long long v176 = 0;
  long long v177 = 0uLL;
  char v173 = 0;
  {
    operator new();
  }
  unsigned int v159 = 0;
  uint64_t v174 = mdm::Allocator::instance(void)::alloc;
  uint64_t v175 = 0;
  unint64_t v171 = 0;
  long long v172 = &v173;
  std::locale v169 = 0;
  std::locale v170 = 0;
  do
  {
    int64_t v158 = v22;
    if (v24 != (unsigned int **)v22)
    {
      while (1)
      {
        uint64_t v34 = **v24;
        if (!v34) {
          goto LABEL_28;
        }
        uint64_t v35 = (*v24)[1];
        uint8x8_t v36 = v173;
        if (v173) {
          break;
        }
LABEL_31:
        grl::IconRequestOptions::setSizeGroup((uint64_t)&v180, 8);
        grl::IconManager::imageForKeyValue([*(id *)(*(void *)(v160 + 112) + 96) grlIconManager], **v24, (*v24)[1], (const grl::IconModifiers *)v205, (float *)&v180, 0, v168);
        if (v168[0]) {
          goto LABEL_56;
        }
        grl::IconRequestOptions::setSizeGroup((uint64_t)&v180, 7);
        grl::IconManager::imageForKeyValue([*(id *)(*(void *)(v160 + 112) + 96) grlIconManager], **v24, (*v24)[1], (const grl::IconModifiers *)v205, (float *)&v180, 0, &v192);
        long long v37 = v192;
        long long v192 = 0uLL;
        uint64_t v38 = (std::__shared_weak_count *)v168[1];
        *(_OWORD *)uint64_t v168 = v37;
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
          unint64_t v39 = (std::__shared_weak_count *)*((void *)&v192 + 1);
          if (!*((void *)&v192 + 1)) {
            goto LABEL_55;
          }
        }
        else
        {
          unint64_t v39 = (std::__shared_weak_count *)*((void *)&v192 + 1);
          if (!*((void *)&v192 + 1)) {
            goto LABEL_55;
          }
        }
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
LABEL_55:
        if (!v168[0])
        {
          double v81 = (char *)*((void *)*v24 + 1);
          double v80 = (char *)*((void *)*v24 + 2);
          if (v80 - v81 < 1) {
            goto LABEL_161;
          }
          uint64_t v82 = (v80 - v81) >> 4;
          uint64_t v83 = (char *)v177;
          uint64_t v84 = (char *)v176;
          if (v82 > (uint64_t)(*((void *)&v177 + 1) - v177) >> 4)
          {
            unint64_t v85 = v82 + ((uint64_t)(v177 - (void)v176) >> 4);
            if (v85 >> 60) {
              abort();
            }
            uint64_t v86 = *((void *)&v177 + 1) - (void)v176;
            if ((uint64_t)(*((void *)&v177 + 1) - (void)v176) >> 3 > v85) {
              unint64_t v85 = v86 >> 3;
            }
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v87 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v87 = v85;
            }
            if (v87)
            {
              if (v87 >> 60) {
                goto LABEL_264;
              }
              uint64_t v88 = (char *)operator new(16 * v87);
            }
            else
            {
              uint64_t v88 = 0;
            }
            uint64_t v121 = 0;
            uint64_t v122 = &v88[16 * v82];
            do
            {
              uint64_t v123 = &v88[v121];
              *(void *)uint64_t v123 = *(void *)&v81[v121];
              uint64_t v124 = *(void *)&v81[v121 + 8];
              *((void *)v123 + 1) = v124;
              if (v124) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
              }
              v121 += 16;
            }
            while (v123 + 16 != v122);
            if (v83 == v84)
            {
              long long v176 = v88;
              *(void *)&long long v177 = &v88[16 * v82];
              *((void *)&v177 + 1) = &v88[16 * v87];
            }
            else
            {
              do
              {
                *(_OWORD *)uint64_t v122 = *(_OWORD *)v84;
                v122 += 16;
                *(void *)uint64_t v84 = 0;
                *((void *)v84 + 1) = 0;
                v84 += 16;
              }
              while (v84 != v83);
              uint64_t v84 = (char *)v176;
              long long v176 = v88;
              *(void *)&long long v177 = v122;
              *((void *)&v177 + 1) = &v88[16 * v87];
              while (v83 != v84)
              {
                int v125 = (std::__shared_weak_count *)*((void *)v83 - 1);
                if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
                v83 -= 16;
              }
            }
            if (v84) {
              operator delete(v84);
            }
LABEL_161:
            char v113 = 1;
            double v114 = (std::__shared_weak_count *)v168[1];
            if (v168[1]) {
              goto LABEL_164;
            }
            goto LABEL_27;
          }
          uint64_t v115 = v177 - (void)v176;
          uint64_t v116 = (uint64_t)(v177 - (void)v176) >> 4;
          if (v116 >= v82)
          {
            uint64_t v117 = &v81[16 * v82];
            uint64_t v119 = (char *)v177;
          }
          else
          {
            uint64_t v117 = &v81[16 * v116];
            if (v117 == v80)
            {
              uint64_t v119 = (char *)v177;
            }
            else
            {
              unint64_t v118 = &v81[16 * v116];
              uint64_t v119 = (char *)v177;
              do
              {
                *(void *)uint64_t v119 = *(void *)v118;
                uint64_t v120 = *((void *)v118 + 1);
                *((void *)v119 + 1) = v120;
                if (v120) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
                }
                v119 += 16;
                v118 += 16;
              }
              while (v118 != v80);
            }
            *(void *)&long long v177 = v119;
            if (v115 < 1) {
              goto LABEL_161;
            }
          }
          uint64_t v126 = &v119[-16 * v82];
          for (uint64_t i = v119; v126 < v83; v126 += 16)
          {
            *(_OWORD *)uint64_t i = *(_OWORD *)v126;
            i += 16;
            *(void *)uint64_t v126 = 0;
            *((void *)v126 + 1) = 0;
          }
          long long v128 = &v84[16 * v82];
          *(void *)&long long v177 = i;
          if (v119 != v128)
          {
            uint64_t v129 = (std::__shared_weak_count **)(v119 - 8);
            uint64_t v130 = 16 * ((v119 - v128) >> 4);
            unint64_t v131 = v84 - 16;
            do
            {
              long long v132 = &v131[v130];
              long long v133 = *(_OWORD *)&v131[v130];
              *(void *)long long v132 = 0;
              *((void *)v132 + 1) = 0;
              uint64_t v134 = *v129;
              *(_OWORD *)(v129 - 1) = v133;
              if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
              v129 -= 2;
              v130 -= 16;
            }
            while (v130);
          }
          if (v117 == v81)
          {
            int64_t v22 = v158;
          }
          else
          {
            int64_t v22 = v158;
            do
            {
              uint64_t v136 = *(void *)v81;
              uint64_t v135 = *((void *)v81 + 1);
              if (v135) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v135 + 8), 1uLL, memory_order_relaxed);
              }
              long long v137 = (std::__shared_weak_count *)*((void *)v84 + 1);
              *(void *)uint64_t v84 = v136;
              *((void *)v84 + 1) = v135;
              if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
              v81 += 16;
              v84 += 16;
            }
            while (v81 != v117);
          }
          goto LABEL_161;
        }
LABEL_56:
        char v45 = v173;
        unint64_t v46 = &v173;
        double v47 = &v173;
        if (!v173) {
          goto LABEL_75;
        }
        do
        {
          while (1)
          {
            double v47 = (uint64_t **)v45;
            unsigned int v48 = *((_DWORD *)v45 + 7);
            if (v34 == v48) {
              break;
            }
            if (v34 >= v48)
            {
              if (v48 >= v34) {
                char v52 = 1;
              }
              else {
                char v52 = -1;
              }
              if ((v52 & 0x80) == 0) {
                goto LABEL_78;
              }
              goto LABEL_73;
            }
LABEL_58:
            char v45 = *v47;
            unint64_t v46 = v47;
            if (!*v47) {
              goto LABEL_75;
            }
          }
          unsigned int v49 = *((_DWORD *)v47 + 8);
          if (v35 < v49) {
            goto LABEL_58;
          }
          BOOL v50 = v49 == v35;
          if (v49 >= v35) {
            char v51 = 1;
          }
          else {
            char v51 = -1;
          }
          if (v50) {
            char v51 = 0;
          }
          if ((v51 & 0x80) == 0) {
            goto LABEL_78;
          }
LABEL_73:
          char v45 = v47[1];
        }
        while (v45);
        unint64_t v46 = v47 + 1;
LABEL_75:
        char v53 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v174 + 16))(v174, 40, 8);
        *(uint64_t *)((char *)v53 + 28) = v34 | (v35 << 32);
        uint64_t *v53 = 0;
        v53[1] = 0;
        v53[2] = (uint64_t)v47;
        *unint64_t v46 = v53;
        if (*v172)
        {
          long long v172 = (uint64_t **)*v172;
          char v53 = *v46;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v173, v53);
        ++v175;
LABEL_78:
        uint64_t v54 = *(void *)(*(void *)(v160 + 112) + 112);
        uint64_t v55 = *(void **)v54;
        int v56 = *(void **)(v54 + 8);
        if (v55 != v56)
        {
          while (*v55 != 0x6F66BE14E10A8F81)
          {
            v55 += 5;
            if (v55 == v56) {
              goto LABEL_86;
            }
          }
        }
        if (v55 == v56)
        {
LABEL_86:
          uint64_t v57 = 0;
          uint64_t v58 = 0;
        }
        else
        {
          uint64_t v57 = v55[3];
          uint64_t v58 = (std::__shared_weak_count *)v55[4];
          if (v58)
          {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
        unint64_t v59 = [VKImage alloc];
        grl::IconImage::image(v168[0], &v166);
        CFTypeRef v60 = cf;
        float v61 = v161[14];
        uint64_t v164 = v57;
        char v165 = v58;
        if (v58) {
          atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v62 = -[VKImage initWithCGImage:scale:resourceStore:](v59, "initWithCGImage:scale:resourceStore:", v60, &v164, v61, v157);
        *(void *)&long long v192 = &unk_1EF559EB8;
        *((void *)&v192 + 1) = v62;

        if (v165) {
          std::__shared_weak_count::__release_weak(v165);
        }
        unint64_t v166 = &unk_1EF559118;
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v63 = v169;
        uint64_t v64 = v170;
        if (v169 == v170) {
          goto LABEL_96;
        }
        while ([*((id *)&v192 + 1) compareTo:v63[1]])
        {
          v63 += 3;
          if (v63 == v64) {
            goto LABEL_96;
          }
        }
        if (v63 == v64)
        {
LABEL_96:
          uint64_t v65 = v190;
          if ((unint64_t)v190 >= v191)
          {
            uint64_t v68 = (grl::IconImage **)v189;
            uint64_t v69 = ((char *)v190 - (unsigned char *)v189) >> 4;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 60) {
              goto LABEL_263;
            }
            uint64_t v71 = v191 - (void)v189;
            if ((uint64_t)(v191 - (void)v189) >> 3 > v70) {
              unint64_t v70 = v71 >> 3;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v70;
            }
            if (v72 >> 60) {
              goto LABEL_264;
            }
            uint64_t v73 = (char *)operator new(16 * v72);
            unint64_t v74 = (grl::IconImage **)&v73[16 * v69];
            int64_t v75 = v168[1];
            *(_OWORD *)unint64_t v74 = *(_OWORD *)v168;
            if (v75)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v75 + 1, 1uLL, memory_order_relaxed);
              uint64_t v65 = v190;
            }
            uint64_t v76 = &v73[16 * v72];
            unint64_t v67 = v74 + 2;
            if (v65 == v68)
            {
              uint64_t v189 = &v73[16 * v69];
              uint64_t v190 = v74 + 2;
              unint64_t v191 = (unint64_t)v76;
            }
            else
            {
              do
              {
                long long v77 = *((_OWORD *)v65 - 1);
                v65 -= 2;
                *((_OWORD *)v74 - 1) = v77;
                v74 -= 2;
                void *v65 = 0;
                v65[1] = 0;
              }
              while (v65 != v68);
              uint64_t v68 = (grl::IconImage **)v189;
              uint64_t v78 = v190;
              uint64_t v189 = v74;
              uint64_t v190 = v67;
              unint64_t v191 = (unint64_t)v76;
              while (v78 != v68)
              {
                unint64_t v79 = (std::__shared_weak_count *)*(v78 - 1);
                if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
                v78 -= 2;
              }
            }
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            *uint64_t v190 = v168[0];
            unint64_t v66 = v168[1];
            v65[1] = v168[1];
            if (v66) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v66 + 1, 1uLL, memory_order_relaxed);
            }
            unint64_t v67 = v65 + 2;
          }
          uint64_t v190 = v67;
          uint64_t v89 = (void **)v170;
          if ((unint64_t)v170 < v171)
          {
            void *v170 = &unk_1EF559EB8;
            v89[1] = 0;
            id v90 = *((id *)&v192 + 1);
            uint64_t v91 = v89[1];
            v89[1] = v90;

            BOOL v92 = v89 + 3;
            goto LABEL_155;
          }
          uint64_t v93 = (void **)v169;
          unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * (((char *)v170 - (unsigned char *)v169) >> 3);
          unint64_t v95 = v94 + 1;
          if (v94 + 1 <= 0xAAAAAAAAAAAAAAALL)
          {
            if (0x5555555555555556 * ((uint64_t)(v171 - (void)v169) >> 3) > v95) {
              unint64_t v95 = 0x5555555555555556 * ((uint64_t)(v171 - (void)v169) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - (void)v169) >> 3) >= 0x555555555555555) {
              unint64_t v96 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v96 = v95;
            }
            if (!v96)
            {
              uint64_t v97 = 0;
LABEL_146:
              unint64_t v98 = &v97[24 * v94];
              *(void *)unint64_t v98 = &unk_1EF559EB8;
              *((void *)v98 + 1) = 0;
              id v99 = *((id *)&v192 + 1);
              unint64_t v100 = (void *)*((void *)v98 + 1);
              *((void *)v98 + 1) = v99;

              uint64_t v101 = &v97[24 * v96];
              BOOL v92 = v98 + 24;
              if (v89 == v93)
              {
                std::locale v169 = &v97[24 * v94];
                std::locale v170 = v98 + 24;
                unint64_t v171 = (unint64_t)v101;
                if (v89) {
LABEL_154:
                }
                  operator delete(v89);
              }
              else
              {
                uint64_t v102 = (uint64_t)&v97[24 * v94 - 24];
                do
                {
                  *((void *)v98 - 3) = &unk_1EF559EB8;
                  v98 -= 24;
                  *((void *)v98 + 1) = 0;
                  unint64_t v104 = *(v89 - 2);
                  uint64_t v103 = v89 - 2;
                  objc_storeStrong((id *)v98 + 1, v104);
                  unint64_t v105 = *v103;
                  void *v103 = 0;

                  uint64_t v89 = v103 - 1;
                  v102 -= 24;
                }
                while (v89 != v93);
                uint64_t v89 = (void **)v169;
                double v106 = (void **)v170;
                std::locale v169 = v98;
                std::locale v170 = v92;
                unint64_t v171 = (unint64_t)v101;
                if (v106 != v89)
                {
                  double v107 = v106 - 3;
                  uint64_t v108 = v106 - 3;
                  uint64_t v109 = v106 - 3;
                  do
                  {
                    uint64_t v110 = (void (**)(void **))*v109;
                    v109 -= 3;
                    (*v110)(v108);
                    v107 -= 3;
                    _ZF = v108 == v89;
                    uint64_t v108 = v109;
                  }
                  while (!_ZF);
                }
                if (v89) {
                  goto LABEL_154;
                }
              }
LABEL_155:
              std::locale v170 = v92;
              if (!v159) {
                goto LABEL_156;
              }
              goto LABEL_157;
            }
            if (v96 <= 0xAAAAAAAAAAAAAAALL)
            {
              uint64_t v97 = (char *)operator new(24 * v96);
              goto LABEL_146;
            }
LABEL_264:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
LABEL_263:
          abort();
        }
        if (!v159) {
LABEL_156:
        }
          unsigned int v159 = grl::IconManager::identifierForMapKeyValue([*(id *)(*(void *)(v160 + 112) + 96) grlIconManager], **v24, (*v24)[1], 1, v161[14]);
LABEL_157:
        unint64_t v112 = v189;
        unint64_t v111 = v190;
        *(void *)&long long v192 = &unk_1EF559EB8;

        if (v58) {
          std::__shared_weak_count::__release_weak(v58);
        }
        if ((unint64_t)((char *)v111 - v112) < 0x50)
        {
          int64_t v22 = v158;
          goto LABEL_161;
        }
        char v113 = 0;
        int64_t v22 = v158;
        double v114 = (std::__shared_weak_count *)v168[1];
        if (v168[1])
        {
LABEL_164:
          if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
LABEL_27:
        if ((v113 & 1) == 0) {
          goto LABEL_19;
        }
LABEL_28:
        v24 += 2;
        if (v24 == (unsigned int **)v22) {
          goto LABEL_19;
        }
      }
      while (1)
      {
        unsigned int v40 = *((_DWORD *)v36 + 7);
        if (v34 == v40)
        {
          unsigned int v41 = *((_DWORD *)v36 + 8);
          if (v35 < v41) {
            goto LABEL_38;
          }
          _ZF = v41 == v35;
          if (v41 >= v35) {
            char v43 = 1;
          }
          else {
            char v43 = -1;
          }
          if (_ZF) {
            char v43 = 0;
          }
          if ((v43 & 0x80) == 0) {
            goto LABEL_28;
          }
        }
        else
        {
          if (v34 < v40) {
            goto LABEL_38;
          }
          if (v40 >= v34) {
            char v44 = 1;
          }
          else {
            char v44 = -1;
          }
          if ((v44 & 0x80) == 0) {
            goto LABEL_28;
          }
        }
        ++v36;
LABEL_38:
        uint8x8_t v36 = (uint64_t *)*v36;
        if (!v36) {
          goto LABEL_31;
        }
      }
    }
LABEL_19:
    uint64_t v30 = (grl::IconImage **)v189;
    uint64_t v31 = v190;
    if ((unint64_t)((char *)v190 - (unsigned char *)v189) > 0x40) {
      goto LABEL_212;
    }
    uint64_t v29 = (char *)__p;
    if (__p)
    {
      uint64_t v32 = (char *)v179;
      if ((void *)v179 != __p)
      {
        do
        {
          unint64_t v33 = (std::__shared_weak_count *)*((void *)v32 - 1);
          if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          v32 -= 16;
        }
        while (v32 != v29);
        uint64_t v29 = (char *)__p;
      }
      operator delete(v29);
    }
    int v24 = (unsigned int **)v176;
    long long v179 = v177;
    int64_t v22 = v177;
    std::string __p = v176;
    long long v176 = 0;
    long long v177 = 0uLL;
  }
  while (__p != (void *)v22);
  uint64_t v30 = (grl::IconImage **)v189;
  uint64_t v31 = v190;
LABEL_212:
  if (v30 != v31)
  {
    uint64_t v138 = (grl::Allocator *)grl::IconRequestOptions::setSizeGroup((uint64_t)&v180, *((unsigned char *)v161 + 168));
    *(void *)&long long v192 = 0;
    *((void *)&v192 + 1) = _D8;
    char v193 = 0;
    __int16 v194 = 0;
    char v195 = 0;
    char v196 = 0;
    char v197 = 0;
    char v198 = 0;
    v200[0] = 0;
    v200[1] = grl::Allocator::instance(v138);
    v200[2] = 0;
    uint64_t v199 = v200;
    uint64_t v204 = 0;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v203 = 0u;
    grl::IconModifiers::setSelected((uint64_t)&v192, 1);
    grl::IconModifiers::setComponent((uint64_t)&v192, *((unsigned char *)v161 + 117));
    grl::IconManager::multiPOIBalloonContent((grl::Allocator *)[*(id *)(*(void *)(v160 + 112) + 96) grlIconManager], (float ***)&v189, v159, (const grl::IconModifiers *)&v192, (uint64_t)&v180);
  }
  void *v157 = 0;
  v157[1] = 0;
  long long v139 = v169;
  if (v169)
  {
    if (v170 != v169)
    {
      long long v140 = v170 - 3;
      size_t v141 = v170 - 3;
      long long v142 = (void (***)(void))(v170 - 3);
      do
      {
        size_t v143 = (void (**)(void *))*v142;
        v142 -= 3;
        (*v143)(v141);
        v140 -= 3;
        _ZF = v141 == v139;
        size_t v141 = v142;
      }
      while (!_ZF);
      long long v139 = v169;
    }
    operator delete(v139);
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v172, v173);
  uint64_t v144 = (char *)v176;
  if (v176)
  {
    long long v145 = (char *)v177;
    if ((void *)v177 != v176)
    {
      do
      {
        size_t v146 = (std::__shared_weak_count *)*((void *)v145 - 1);
        if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
        v145 -= 16;
      }
      while (v145 != v144);
      uint64_t v144 = (char *)v176;
    }
    operator delete(v144);
  }
  unint64_t v147 = (char *)__p;
  if (__p)
  {
    unint64_t v148 = (char *)v179;
    if ((void *)v179 != __p)
    {
      do
      {
        size_t v149 = (std::__shared_weak_count *)*((void *)v148 - 1);
        if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
        v148 -= 16;
      }
      while (v148 != v147);
      unint64_t v147 = (char *)__p;
    }
    operator delete(v147);
  }
  uint64_t v150 = v185;
  if (v185)
  {
    uint64_t v151 = v186;
    uint64_t v152 = v185;
    if (v186 != v185)
    {
      do
      {
        if (*(char *)(v151 - 1) < 0) {
          operator delete(*(void **)(v151 - 24));
        }
        v151 -= 24;
      }
      while (v151 != v150);
      uint64_t v152 = v185;
    }
    uint64_t v186 = v150;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v188 + 40))(v188, v152, v187 - v152);
  }
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)v205);
  uint64_t v153 = (grl::IconImage **)v189;
  if (v189)
  {
    uint64_t v154 = v190;
    int v155 = v189;
    if (v190 != v189)
    {
      do
      {
        int v156 = (std::__shared_weak_count *)*(v154 - 1);
        if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
        v154 -= 2;
      }
      while (v154 != v153);
      int v155 = v189;
    }
    uint64_t v190 = v153;
    operator delete(v155);
  }
  if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
  if (v163)
  {
    if (!atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
}

void sub_1A1F0AA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,CFTypeRef cf,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v47);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a47);
  std::vector<geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a25);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a28, (void *)a29);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a32);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a35);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)&a38);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&STACK[0x200]);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a44);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ggl::DiffuseLandmark::BuildingPipelineState::~BuildingPipelineState(ggl::DiffuseLandmark::BuildingPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DiffuseLandmark::BuildingPipelineState::BuildingPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    uint64_t v82 = a4;
    uint64_t v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1EB32B758 = 1;
          }
          ggl::DiffuseLandmark::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          unk_1E958E880 = &ggl::DiffuseLandmark::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1E958E888 = 0;
          {
            ggl::DiffuseLandmark::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(void *)algn_1E958EA58 = ggl::Tile::View::reflection(void)::reflection;
            qword_1E958EA60 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1E958EA68 = ggl::Building::Style::reflection(void)::reflection;
            qword_1E958EA70 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1E958EA78 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1E958EA80 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1E958E890 = (uint64_t)&ggl::DiffuseLandmark::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1E958E898 = xmmword_1A28FD020;
        }
      }
      ggl::DiffuseLandmark::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseLandmark::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::DiffuseLandmarkShader::typedReflection(v83);
      qword_1E958E828 = (uint64_t)&ggl::DiffuseLandmarkShader::typedReflection(void)::ref;
      {
        ggl::DiffuseLandmark::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E958E8B8 = 0;
        qword_1E958E8C0 = (uint64_t)"";
        dword_1E958E8C8 = 0;
        qword_1E958E8D0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1E958E8D8 = 3;
      }
      qword_1E958E830 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958E838 = 1;
      qword_1E958E840 = 0;
      unk_1E958E848 = 1;
      qword_1E958E850 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1E958E858 = 0;
      {
        ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E958E8F8 = 0;
        qword_1E958E900 = (uint64_t)"skyfog";
        dword_1E958E908 = 3;
        qword_1E958E910 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1E958E918 = xmmword_1A28FD030;
        qword_1E958E928 = 1;
        unk_1E958E930 = "view";
        dword_1E958E938 = 3;
        qword_1E958E940 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1E958E948 = vdupq_n_s64(2uLL);
        qword_1E958E958 = 2;
        unk_1E958E960 = "scale";
        dword_1E958E968 = 3;
        qword_1E958E970 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1E958E978 = xmmword_1A28FD040;
        qword_1E958E988 = 3;
        unk_1E958E990 = "style";
        dword_1E958E998 = 3;
        qword_1E958E9A0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1E958E9A8 = xmmword_1A28FD050;
        qword_1E958E9B8 = 4;
        unk_1E958E9C0 = "gradient";
        dword_1E958E9C8 = 3;
        qword_1E958E9D0 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1E958E9D8 = xmmword_1A28FCF80;
        qword_1E958E9E8 = 5;
        unk_1E958E9F0 = "lightConfig";
        dword_1E958E9F8 = 3;
        qword_1E958EA00 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1E958EA08 = xmmword_1A28FD060;
        qword_1E958EA18 = 6;
        unk_1E958EA20 = "fade";
        dword_1E958EA28 = 3;
        qword_1E958EA30 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1E958EA38 = 2;
      }
      qword_1E958E860 = (uint64_t)&ggl::DiffuseLandmark::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E958E868 = 7;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  unint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::DiffuseLandmark::BuildingPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF55BA90;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

BOOL ggl::DiffuseLandmark::BuildingPipelineSetup::textureIsEnabled(ggl::DiffuseLandmark::BuildingPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::DiffuseLandmark::BuildingPipelineSetup::constantDataIsEnabled(ggl::DiffuseLandmark::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::DiffuseLandmark::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::DiffuseLandmark::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::operator()(uint64_t a1, uint64_t **a2, unsigned __int8 *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 8);
  size_t v4 = *a2;
  int v5 = *a3;
  long long v7 = (char *)v3[3];
  unint64_t v6 = v3[4];
  char v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    int8x16_t v10 = (char *)v3[2];
    uint64_t v11 = (v7 - v10) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        goto LABEL_66;
      }
      int16x8_t v15 = operator new(8 * v14);
    }
    else
    {
      int16x8_t v15 = 0;
    }
    int32x4_t v16 = (uint64_t **)&v15[8 * v11];
    int8x16_t v17 = &v15[8 * v14];
    *int32x4_t v16 = v4;
    int8x16_t v9 = v16 + 1;
    if (v7 == v10)
    {
      int8x16_t v10 = v7;
    }
    else
    {
      unint64_t v18 = v7 - v10 - 8;
      if (v18 < 0x58) {
        goto LABEL_72;
      }
      if ((unint64_t)(v10 - v15) < 0x20) {
        goto LABEL_72;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      char v8 = &v7[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      int32x4_t v20 = &v15[8 * v11 - 16];
      int8x16_t v21 = v7 - 16;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        do
        {
          int8x16_t v24 = (uint64_t *)*((void *)v8 - 1);
          v8 -= 8;
          *--int32x4_t v16 = v24;
        }
        while (v8 != v10);
        int8x16_t v10 = (char *)v3[2];
      }
    }
    v3[2] = v16;
    v3[3] = v9;
    v3[4] = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)long long v7 = v4;
    int8x16_t v9 = v7 + 8;
  }
  v3[3] = v9;
  std::string __p = 0;
  int32x4_t v72 = 0;
  uint64_t v73 = 0;
  v74[0] = &unk_1EF57D758;
  v74[1] = &__p;
  int8x16_t v75 = v74;
  md::MuninRoadEdge::walkEdgeGeometry(v4, v5 != 0, (uint64_t)v74);
  if (v75 == v74)
  {
    (*(void (**)(void *))(v74[0] + 32))(v74);
  }
  else if (v75)
  {
    (*(void (**)(void))(*v75 + 40))();
  }
  int16x8_t v68 = 0;
  long long v67 = 0uLL;
  int8x16_t v25 = __p;
  uint64_t v26 = v72 - (unsigned char *)__p;
  if (v72 == __p)
  {
    long long v70 = 0u;
    long long v69 = 0u;
    goto LABEL_41;
  }
  if (v26 < 0) {
    abort();
  }
  int8x16_t v27 = (double *)operator new(v72 - (unsigned char *)__p);
  uint64_t v28 = v26 >> 4;
  *(void *)&long long v67 = v27;
  int16x8_t v68 = &v27[2 * (v26 >> 4)];
  size_t v29 = v26 & 0xFFFFFFFFFFFFFFF0;
  memcpy(v27, v25, v29);
  *((void *)&v67 + 1) = (char *)v27 + v29;
  long long v69 = 0u;
  long long v70 = 0u;
  if (v29)
  {
    long double v30 = exp((v27[1] + (*(double *)((char *)v27 + v29 - 8) - v27[1]) * 0.5) * 6.28318531 + -3.14159265);
    long double v31 = atan(v30) * 114.591559 + -90.0;
    double v32 = cos(v31 * 0.034906585);
    double v33 = cos(v31 * 0.0698131701);
    double v34 = cos(v31 * 0.104719755);
    long double v35 = v31 * 0.00872664626;
    long double v36 = tan(v31 * 0.00872664626 + 0.78103484);
    double v37 = log(v36);
    long double v38 = tan(v35 + 0.789761487);
    double v39 = log(v38);
    if (v28 == 1)
    {
      unint64_t v40 = 1;
      if (v29 < 0x11) {
        goto LABEL_41;
      }
    }
    else
    {
      std::vector<double>::__append((uint64_t)&v69, v28 - 1);
      unint64_t v40 = (uint64_t)v29 >> 4;
      if (v29 < 0x11) {
        goto LABEL_41;
      }
    }
    double v41 = fabs((v39 - v37) * 0.159154943);
    float64x2_t v43 = *(float64x2_t *)v27;
    int8x16_t v42 = (float64x2_t *)(v27 + 2);
    float64x2_t v44 = v43;
    int8x16_t v45 = (void *)v69;
    if (v40 <= 2) {
      unint64_t v40 = 2;
    }
    double v46 = *((double *)&v70 + 1);
    unint64_t v47 = v40 - 1;
    do
    {
      float64x2_t v48 = *v42++;
      float64x2_t v49 = vsubq_f64(v48, v44);
      v49.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v49, v49)))
                 * ((v32 * -559.82 + 111132.92 + v33 * 1.175 + v34 * -0.0023)
                  * (1.0
                   / v41));
      *v45++ = *(void *)&v49.f64[0];
      double v46 = v49.f64[0] + v46;
      float64x2_t v44 = v48;
      --v47;
    }
    while (v47);
    *((double *)&v70 + 1) = v46;
  }
LABEL_41:
  if (__p)
  {
    int32x4_t v72 = __p;
    operator delete(__p);
  }
  int8x16_t v51 = (char *)v3[6];
  unint64_t v50 = v3[7];
  if ((unint64_t)v51 < v50)
  {
    *(_OWORD *)int8x16_t v51 = v67;
    *((void *)v51 + 2) = v68;
    *(_OWORD *)(v51 + 24) = v69;
    *(_OWORD *)(v51 + 40) = v70;
    int8x16_t v52 = v51 + 56;
    goto LABEL_65;
  }
  int16x8_t v53 = (char *)v3[5];
  unint64_t v54 = 0x6DB6DB6DB6DB6DB7 * ((v51 - v53) >> 3) + 1;
  if (v54 > 0x492492492492492) {
    abort();
  }
  unint64_t v55 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v50 - (void)v53) >> 3);
  if (2 * v55 > v54) {
    unint64_t v54 = 2 * v55;
  }
  if (v55 >= 0x249249249249249) {
    unint64_t v56 = 0x492492492492492;
  }
  else {
    unint64_t v56 = v54;
  }
  if (v56 > 0x492492492492492) {
LABEL_66:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  int32x4_t v57 = (char *)operator new(56 * v56);
  int8x16_t v58 = &v57[8 * ((v51 - v53) >> 3)];
  int32x4_t v59 = &v57[56 * v56];
  *(_OWORD *)int8x16_t v58 = v67;
  *((void *)v58 + 2) = v68;
  *(_OWORD *)(v58 + 24) = v69;
  *(_OWORD *)(v58 + 40) = v70;
  int8x16_t v52 = v58 + 56;
  if (v51 == v53)
  {
    v3[5] = v58;
    v3[6] = v52;
    v3[7] = v59;
  }
  else
  {
    uint64_t v60 = 0;
    do
    {
      int32x4_t v61 = &v58[v60];
      int8x16_t v62 = &v51[v60];
      *(_OWORD *)(v61 - 56) = *(_OWORD *)&v51[v60 - 56];
      *((void *)v61 - 5) = *(void *)&v51[v60 - 40];
      *((void *)v62 - 7) = 0;
      *((void *)v62 - 6) = 0;
      *((void *)v62 - 5) = 0;
      *((_OWORD *)v61 - 2) = *(_OWORD *)&v51[v60 - 32];
      *((void *)v61 - 2) = *(void *)&v51[v60 - 16];
      *((void *)v62 - 4) = 0;
      *((void *)v62 - 3) = 0;
      *((void *)v62 - 2) = 0;
      *((void *)v61 - 1) = *(void *)&v51[v60 - 8];
      v60 -= 56;
    }
    while (&v51[v60] != v53);
    int8x16_t v51 = (char *)v3[5];
    int8x16_t v63 = (char *)v3[6];
    v3[5] = &v58[v60];
    v3[6] = v52;
    v3[7] = v59;
    while (v63 != v51)
    {
      int8x16_t v64 = (void *)*((void *)v63 - 4);
      if (v64)
      {
        *((void *)v63 - 3) = v64;
        operator delete(v64);
      }
      int8x16_t v65 = (void *)*((void *)v63 - 7);
      if (v65)
      {
        *((void *)v63 - 6) = v65;
        operator delete(v65);
      }
      v63 -= 56;
    }
  }
  if (v51) {
    operator delete(v51);
  }
LABEL_65:
  v3[6] = v52;
  return 1;
}

void sub_1A1F0BD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    int8x16_t v21 = a9;
    if (!a9)
    {
LABEL_3:
      uint64_t v22 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v22);
      goto LABEL_8;
    }
  }
  else
  {
    int8x16_t v21 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575828;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575828;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0,std::allocator<md::ComposedRoadEdgeWalker::ComposedRoadEdgeWalker(md::ComposedRoadEdge const*,BOOL)::$_0>,BOOL ()(md::MuninRoadEdge const*,BOOL)>::~__func()
{
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void non-virtual thunk to'ggl::DaVinci::ElevatedFillMesh::~ElevatedFillMesh(ggl::DaVinci::ElevatedFillMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevatedFillMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevatedFillMesh *)((char *)this - 16));
}

void ggl::DaVinci::ElevatedFillMesh::~ElevatedFillMesh(ggl::DaVinci::ElevatedFillMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::DaVinci::ElevatedFillColorPipelineState::~ElevatedFillColorPipelineState(ggl::DaVinci::ElevatedFillColorPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DaVinci::ElevatedFillColorPipelineSetup::textureIsEnabled(ggl::DaVinci::ElevatedFillColorPipelineSetup *this)
{
  return 0;
}

BOOL ggl::DaVinci::ElevatedFillColorPipelineSetup::constantDataIsEnabled(ggl::DaVinci::ElevatedFillColorPipelineSetup *this, unint64_t a2)
{
  if (a2 < 3) {
    return 1;
  }
  if (a2 == 3) {
    return *(unsigned char *)(*((void *)this + 2) + 336) != 0;
  }
  return 0;
}

void ggl::DaVinci::ElevatedFillColorPipelineSetup::~ElevatedFillColorPipelineSetup(ggl::DaVinci::ElevatedFillColorPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::DaVinci::ElevatedFillColorWithDistancePipelineState::~ElevatedFillColorWithDistancePipelineState(ggl::DaVinci::ElevatedFillColorWithDistancePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::textureIsEnabled(ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup *this)
{
  return 0;
}

void ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::~ElevatedFillColorWithDistancePipelineSetup(ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::CustomTileOverlayResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(int **)(a3 + 8);
  int v5 = v4[2];
  int v6 = *v4;
  int v7 = v4[1];
  LOBYTE(v9) = GEOTileKeyMakeEmpty();
  *(void *)((char *)&v9 + 1) = (v6 << 6) | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | v5 & 0x3F | ((unint64_t)*(float *)(a1 + 8) << 58);
  return v9;
}

void md::CustomTileOverlayResourceFetcher::~CustomTileOverlayResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void md::CustomTileOverlayResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, void *a3@<X8>)
{
  if (*((unsigned char *)a2 + 16) && (v5 = *(void *)a2) != 0 && (id v7 = *(id *)(v5 + 16)) != 0)
  {
    id v11 = v7;
    id v8 = *(id *)(v5 + 16);
    long long v9 = operator new(0xC0uLL);
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = &unk_1EF581C90;
    id v10 = v8;
    gdc::Resource::Resource((uint64_t)(v9 + 3), (uint64_t)a1);
    v9[21] = off_1EF559478;
    v9[22] = v10;
    *a3 = v9 + 3;
    a3[1] = v9;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1A1F0CA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResource>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 168) = off_1EF559478;

  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 != *(void **)(a1 + 48))
  {
    free(v2);
  }
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::CustomTileOverlayResourceDecoder::~CustomTileOverlayResourceDecoder(md::CustomTileOverlayResourceDecoder *this)
{
}

uint64_t std::__shared_ptr_emplace<md::CustomTileOverlayResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5826D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::CustomTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5826D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void geo::_retain_ptr<GEOTileLoader * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559518;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOTileLoader * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559518;

  return a1;
}

void md::TextureResourceDecoder::decode(id *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3) {
    id v7 = *(id *)(*(void *)a3 + 16);
  }
  else {
    id v7 = 0;
  }
  if (![v7 length])
  {
LABEL_19:
    *a4 = 0;
    a4[1] = 0;
LABEL_47:

    return;
  }
  int v19 = 0;
  if (!CMPhotoDecompressionDetectContainerFormat())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    uint64_t v13 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int8x16_t v27 = 0;
      _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - CMPhoto unable to detect container format", v27, 2u);
    }

    goto LABEL_19;
  }
  int8x16_t v24 = (void (**)(void **))&unk_1EF575E10;
  int8x16_t v25 = a2;
  uint64_t v26 = (void **)&v24;
  v22[0] = &unk_1EF575E58;
  v22[1] = a2;
  long long v23 = v22;
  size_t v29 = v27;
  *(void *)int8x16_t v27 = &unk_1EF575E58;
  uint64_t v28 = a2;
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  id v8 = (id)GEOGetVectorKitResourceLoadingLog_log;
  long long v9 = v8;
  id v10 = v25;
  os_signpost_id_t v11 = *((void *)v25 + 10);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    uint64_t v12 = *((void *)v10 + 11);
    int buf = 134217984;
    *(void *)buf_4 = v12;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v11, "DecodeTexture", "parent_signpost=%llu", (uint8_t *)&buf, 0xCu);
  }

  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  if (v26 == (void **)&v24)
  {
    v24[4]((void **)&v24);
  }
  else if (v26)
  {
    (*((void (**)(void))*v26 + 5))();
  }
  if ([this[2] defaultDecompressionSession])
  {
    unint64_t v14 = [MEMORY[0x1E4F1CA60] dictionary];
    [v14 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F562A0]];
    [v14 setObject:&unk_1EF5BB328 forKeyedSubscript:*MEMORY[0x1E4F562B0]];
    CFTypeRef cf = 0;
    if (CMPhotoDecompressionSessionCreateContainer())
    {
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
      }
      int16x8_t v15 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - unable to create decompression container", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      uint64_t v17 = 0;
      CMPhotoDecompressionContainerGetImageCount();
      CFRelease(cf);
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
      }
      int16x8_t v15 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - unable to get image count or 0 image count", (uint8_t *)&buf, 2u);
      }
    }

    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    int32x4_t v16 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - missing decompression session", (uint8_t *)&buf, 2u);
    }

    *a4 = 0;
    a4[1] = 0;
  }
  if (v29)
  {
    (*(void (**)(uint8_t *))(*(void *)v29 + 48))(v29);
    if (v29 == v27)
    {
      (*(void (**)(uint8_t *))(*(void *)v27 + 32))(v27);
    }
    else if (v29)
    {
      (*(void (**)(uint8_t *))(*(void *)v29 + 40))(v29);
    }
    goto LABEL_47;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A1F0D3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v11 - 128));
  _Unwind_Resume(a1);
}

__n128 _ZNSt3__111make_sharedB8nn180100IN3ggl12SamplerStateEJEvEENS_10shared_ptrIT_EEDpOT0_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EF583858;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((_DWORD *)v2 + 14) = 0;
  *((void *)v2 + 3) = &unk_1EF55AE58;
  *((void *)v2 + 4) = 0;
  result.n128_u64[0] = 0x100000001;
  result.n128_u64[1] = 0x100000001;
  *(__n128 *)(v2 + 60) = result;
  *(void *)(v2 + 76) = 0x100000001;
  *((_DWORD *)v2 + 21) = 0;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void std::make_shared[abi:nn180100]<md::TextureResource,gdc::ResourceKey const&,std::shared_ptr<ggl::IOSurfaceTexture> &,void>(void *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  id v8 = operator new(0xB8uLL);
  long long v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *id v8 = &unk_1EF580090;
  id v10 = v8 + 3;
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    gdc::Resource::Resource((uint64_t)(v8 + 3), a2);
    v9[21] = a3;
    v9[22] = a4;
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  else
  {
    gdc::Resource::Resource((uint64_t)(v8 + 3), a2);
    v9[21] = a3;
    v9[22] = 0;
  }
  *a1 = v10;
  a1[1] = v9;
}

void std::__shared_ptr_emplace<md::TextureResource>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[22];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != (void *)a1[6])
  {
    free(v3);
  }
}

void std::__shared_ptr_emplace<md::TextureResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TextureResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v5, "DecodeTexture", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575E58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575E58;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "DecodeTexture", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575E10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575E10;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0,std::allocator<md::TextureResourceDecoder::decode(gdc::ResourceKey const&,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::~__func()
{
}

void md::TextureResourceDecoder::~TextureResourceDecoder(md::TextureResourceDecoder *this)
{
  *(void *)this = &unk_1EF5426B0;
  *((void *)this + 1) = &unk_1EF559798;

  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5426B0;
  *((void *)this + 1) = &unk_1EF559798;
}

double md::ARWalkingManeuverTextLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1A28FD1A0;
  strcpy(v3, "ARWalkingManeuverTextLabelPart");
  return *(double *)"verTextLabelPart";
}

uint64_t md::ARWalkingManeuverTextLabelPart::modelMatrix(md::ARWalkingManeuverTextLabelPart *this)
{
  return *((void *)this + 6);
}

uint64_t md::ARWalkingManeuverTextLabelPart::stagingModelMatrix(md::ARWalkingManeuverTextLabelPart *this)
{
  return *((void *)this + 5);
}

_DWORD *md::ARWalkingManeuverTextLabelPart::pushToRenderModel(uint64_t a1, float a2)
{
  __n128 result = (_DWORD *)(*(uint64_t (**)(void))(***(void ***)(a1 + 576) + 128))(**(void **)(a1 + 576));
  if (*(unsigned char *)(a1 + 631))
  {
    uint64_t v6 = *(void **)(a1 + 576);
    __n128 result = (_DWORD *)v6[1];
    if (result)
    {
      result[196] = *(_DWORD *)(*v6 + 760);
      int v7 = *(uint64_t (**)(__n128))(*(void *)result + 128);
      v5.n128_f32[0] = a2;
      return (_DWORD *)v7(v5);
    }
  }
  return result;
}

uint64_t md::ARWalkingManeuverTextLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 576) + 80))(**(void **)(a1 + 576));
  if (result != 37) {
    return result;
  }
  uint64_t v12 = *(uint64_t **)(a1 + 576);
  uint64_t v13 = (float *)*v12;
  unint64_t v14 = *(float **)(*v12 + 24);
  float v15 = v14[20];
  float v16 = v14[18];
  if (v15 < v16) {
    return 14;
  }
  float v17 = v14[21];
  float v18 = v14[19];
  if (v17 < v18) {
    return 14;
  }
  if (!*(unsigned char *)(a1 + 631)) {
    goto LABEL_11;
  }
  float v19 = v13[250];
  float v20 = v19 * 0.15;
  float v21 = (float)(v17 - v13[251]) + (float)(v19 * 0.15);
  float v22 = (float)(v15 - v16) - fmaxf((float)(v15 - v16) + (float)(v19 * 0.85), v19 * 5.0);
  float v23 = v22 * 0.5;
  BOOL v24 = v22 < 0.0;
  float v25 = 0.0;
  if (v24) {
    float v25 = v23;
  }
  float v26 = (float)(v13[252] + v18) - v20;
  v32[0] = v25 + v16;
  v32[1] = v26;
  v32[2] = v15 - v25;
  v32[3] = v21;
  md::AnimatedTextureLabelPart::setMeshRectForStaging(v12[1], (uint64_t)v32);
  int8x16_t v27 = *(void **)(a1 + 576);
  uint64_t v28 = (float *)v27[1];
  v28[162] = *(float *)(*v27 + 1000) * 3.0;
  uint64_t result = (*(uint64_t (**)(float *, uint64_t, _DWORD *, uint64_t))(*(void *)v28 + 80))(v28, a2, a3, a4);
  if (result == 37)
  {
    uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 576) + 8) + 24);
    LODWORD(v10) = *(_DWORD *)(v29 + 76);
    float v16 = fminf(*(float *)(v29 + 72), v16);
    LODWORD(v11) = *(_DWORD *)(v29 + 84);
    float v15 = fmaxf(v15, *(float *)(v29 + 80));
    float v18 = fminf(*(float *)&v10, v18);
    float v17 = fmaxf(v17, *(float *)&v11);
LABEL_11:
    uint64_t v30 = *(void **)(a1 + 232);
    if (v30)
    {
      free(v30);
      *(void *)(a1 + 232) = 0;
    }
    long double v31 = *(void **)(a1 + 240);
    if (v31)
    {
      free(v31);
      *(void *)(a1 + 240) = 0;
    }
    *(float *)(a1 + 72) = v16;
    *(float *)(a1 + 76) = v18;
    *(float *)(a1 + 80) = v15;
    *(float *)(a1 + 84) = v17;
    *(_DWORD *)(a1 + 280) = *a3;
    *(_DWORD *)(a1 + 284) = a3[1];
    *(_DWORD *)(a1 + 104) = *a3;
    LODWORD(v9) = a3[1];
    *(_DWORD *)(a1 + 108) = LODWORD(v9);
    md::CollisionObject::setupShapeData(a1 + 72, v9, v10, v11);
    *(void *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    return 37;
  }
  return result;
}

void md::ARWalkingManeuverTextLabelPart::~ARWalkingManeuverTextLabelPart(md::ARWalkingManeuverTextLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

uint64_t md::ARWalkingManeuverTextLabelPart::ARWalkingManeuverTextLabelPart(uint64_t a1, void *a2, md::LabelPart *a3, char a4)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1A28FC750;
  *(void *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(a1 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(a1 + 312) = xmmword_1A28FC750;
  *(void *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(void *)a1 = &unk_1EF538820;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 592) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 600) = mdm::Allocator::instance(void)::alloc;
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(void *)a1 = &unk_1EF54BD20;
  *(_DWORD *)(a1 + 628) = 1;
  {
    operator new();
  }
  uint64_t v8 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 1184, 8);
  v10[0] = 0;
  v10[10] = 0;
  md::HorizontalTextLabelPart::HorizontalTextLabelPart((uint64_t)v8, a2, (uint64_t)v10, 0);
  *(void *)uint64_t v8 = &unk_1EF54B980;
  *((unsigned char *)v8 + 1168) = a4;
  md::LabelPart::setRenderOrder((uint64_t)v8, 1);
  md::CompositeLabelPart::addLabelPart(a1, v8);
  if (a3)
  {
    *(unsigned char *)(a1 + 631) = 1;
    (*(void (**)(md::LabelPart *, void))(*(void *)a3 + 824))(a3, 0);
    md::CompositeLabelPart::addLabelPart(a1, a3);
  }
  return a1;
}

void sub_1A1F0E2C8(_Unwind_Exception *a1)
{
  if ((atomic_load_explicit(v4, memory_order_acquire) & 1) == 0)
  {
      operator new();
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 728) + 40))(*(void *)(v3 + 728), v2, 1184);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void ggl::SpecularBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::SpecularBuildingTop::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::SpecularBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::SpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void HillshadeRenderable::~HillshadeRenderable(HillshadeRenderable *this)
{
  *(void *)this = &unk_1EF513628;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513628;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::MapTileDataRenderable<md::HillshadeTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513628;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513628;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

uint64_t md::MuninRoadLabelGenerator::createLabel(md::MuninRoadLabelGenerator *this, md::MuninRoadLabelCreationParams *a2, uint64_t *a3)
{
  {
    operator new();
  }
  uint64_t v6 = mdm::Allocator::instance(void)::alloc;
  int v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  uint64_t v8 = v7;
  if (v7) {
    *int v7 = 0x1000000005;
  }
  uint64_t v9 = *((unsigned __int8 *)a3 + 106);
  double v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 16, 4);
  double v11 = v10;
  if (v10) {
    v10[1] = (v9 << 32) | 0x1004F;
  }
  void *v10 = *v8;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 40))(v6, v8, 8);
  _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v80);
  uint64_t v12 = 0;
  char v13 = 0;
  unint64_t v14 = (uint64_t (**)())v80;
  unsigned __int8 v15 = *(unsigned char *)(v80 + 33);
  while (1)
  {
    size_t v17 = v15;
    float v18 = *v14;
    if (v15) {
      break;
    }
LABEL_7:
    *((void *)v18 + v17) = v11[v12];
    unsigned __int8 v15 = *((unsigned char *)v14 + 33) + 1;
    *((unsigned char *)v14 + 33) = v15;
    char v13 = 1;
    BOOL v16 = v12 == 1;
    uint64_t v12 = 1;
    if (v16)
    {
      float v18 = *v14;
      size_t v17 = v15;
LABEL_25:
      qsort(v18, v17, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
      goto LABEL_26;
    }
  }
  if (v15 > 0x1Fu)
  {
    do
    {
      uint64_t v22 = 0;
      float v23 = v18;
      while (1)
      {
        int v24 = *(_DWORD *)v23;
        float v23 = (uint64_t (*)())((char *)v23 + 8);
        if (v24 == LODWORD(v11[v12])) {
          break;
        }
        if (v17 == ++v22) {
          goto LABEL_19;
        }
      }
      *((_DWORD *)v18 + 2 * v22 + 1) = HIDWORD(v11[v12]);
LABEL_19:
      BOOL v16 = v12 == 1;
      uint64_t v12 = 1;
    }
    while (!v16);
  }
  else
  {
    do
    {
      uint64_t v19 = 0;
      float v20 = v18;
      while (1)
      {
        int v21 = *(_DWORD *)v20;
        float v20 = (uint64_t (*)())((char *)v20 + 8);
        if (v21 == LODWORD(v11[v12])) {
          break;
        }
        if (v17 == ++v19) {
          goto LABEL_7;
        }
      }
      *((_DWORD *)v18 + 2 * v19 + 1) = HIDWORD(v11[v12]);
      BOOL v16 = v12 == 1;
      uint64_t v12 = 1;
    }
    while (!v16);
  }
  if (v13) {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v25 = *(void *)a2;
  float v26 = v81;
  int8x16_t v63 = v14;
  int8x16_t v64 = v81;
  if (v81) {
    atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::LabelManager::styleForFeatureAttributes((uint64_t *)&v78, *(void *)(v25 + 336), (uint64_t *)&v63, (void *)(*a3 + 56));
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (v78) {
      goto LABEL_31;
    }
  }
  else if (v78)
  {
    goto LABEL_31;
  }
  unint64_t v56 = (char *)operator new(0x1E8uLL);
  *((void *)v56 + 1) = 0;
  *((void *)v56 + 2) = 0;
  *(void *)unint64_t v56 = &unk_1EF57F7D0;
  *(_OWORD *)(v56 + 40) = 0u;
  *(_OWORD *)(v56 + 56) = 0u;
  *(_OWORD *)(v56 + 72) = 0u;
  *(_OWORD *)(v56 + 88) = 0u;
  *((void *)v56 + 13) = 0;
  *(_OWORD *)(v56 + 24) = 0u;
  *((_DWORD *)v56 + 28) = 1065353216;
  *((_WORD *)v56 + 58) = 256;
  *(void *)(v56 + 118) = 0x1010000000000;
  v56[126] = 0;
  *((void *)v56 + 16) = 0x3F800000437F0000;
  *((void *)v56 + 17) = 0xFC00FC00FC00FC00;
  *((_WORD *)v56 + 72) = 256;
  *(_DWORD *)(v56 + 146) = 0;
  v56[150] = 0;
  *((void *)v56 + 19) = 0x3FF0000000000000;
  v56[160] = -1;
  *(_OWORD *)(v56 + 164) = 0u;
  *(_OWORD *)(v56 + 180) = 0u;
  *(_OWORD *)(v56 + 196) = 0u;
  *(_OWORD *)(v56 + 212) = 0u;
  *(_OWORD *)(v56 + 228) = 0u;
  *(_OWORD *)(v56 + 244) = 0u;
  *(_OWORD *)(v56 + 260) = 0u;
  *(_OWORD *)(v56 + 271) = 0u;
  *((void *)v56 + 49) = 0;
  v56[400] = 0;
  *(_WORD *)(v56 + 401) = 0;
  *((_OWORD *)v56 + 18) = 0u;
  *((_OWORD *)v56 + 19) = 0u;
  *((_OWORD *)v56 + 20) = 0u;
  *((_OWORD *)v56 + 21) = 0u;
  *((_OWORD *)v56 + 22) = 0u;
  *((_OWORD *)v56 + 23) = 0u;
  *(_DWORD *)(v56 + 383) = 0;
  *(_OWORD *)(v56 + 466) = 0u;
  *(_OWORD *)(v56 + 440) = 0u;
  *(_OWORD *)(v56 + 456) = 0u;
  *(_OWORD *)(v56 + 408) = 0u;
  *(_OWORD *)(v56 + 424) = 0u;
  v56[164] = 1;
  *(_WORD *)(v56 + 265) = 1;
  *((_DWORD *)v56 + 51) = -1;
  v56[274] = 2;
  *((_DWORD *)v56 + 55) = 1065353216;
  *((_DWORD *)v56 + 60) = 2139095039;
  *(void *)(v56 + 252) = 0x4334000000000000;
  *((_DWORD *)v56 + 65) = 1101004800;
  v56[285] = 4;
  v56[480] = 1;
  int32x4_t v57 = v79;
  int8x16_t v78 = (float *)(v56 + 24);
  int8x16_t v79 = (std::__shared_weak_count *)v56;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
LABEL_31:
  int8x16_t v27 = v78;
  md::LabelStyle::setZoom((md::LabelStyle *)v78, 17.0);
  uint64_t v28 = v79;
  if (v79) {
    atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = (std::__shared_weak_count *)a3[3];
  a3[2] = (uint64_t)v27;
  a3[3] = (uint64_t)v28;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  int32x4_t v74 = 0;
  int8x16_t v75 = 0;
  uint64_t v76 = 0;
  {
    operator new();
  }
  uint64_t v77 = mdm::Allocator::instance(void)::alloc;
  std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::basic_ostringstream[abi:nn180100]((uint64_t)&v63);
  if (*((unsigned char *)a3 + 125))
  {
    {
      operator new();
    }
    uint64_t v62 = mdm::Allocator::instance(void)::alloc;
    HIBYTE(v61) = 4;
    LODWORD(__dst) = 548314594;
    BYTE4(__dst) = 0;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v63, (uint64_t)&__dst, 4);
    if (SHIBYTE(v61) < 0) {
      (*(void (**)(uint64_t, void, unint64_t))(*(void *)v62 + 40))(v62, __dst, v61 & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  int v30 = *(char *)(*a3 + 47);
  if (v30 >= 0) {
    uint64_t v31 = *a3 + 24;
  }
  else {
    uint64_t v31 = *(void *)(*a3 + 24);
  }
  if (v30 >= 0) {
    uint64_t v32 = *(unsigned __int8 *)(*a3 + 47);
  }
  else {
    uint64_t v32 = *(void *)(*a3 + 32);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v63, v31, v32);
  if (*((unsigned char *)a3 + 126))
  {
    {
      operator new();
    }
    uint64_t v62 = mdm::Allocator::instance(void)::alloc;
    HIBYTE(v61) = 4;
    LODWORD(__dst) = -1348607456;
    BYTE4(__dst) = 0;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v63, (uint64_t)&__dst, 4);
    if (SHIBYTE(v61) < 0) {
      (*(void (**)(uint64_t, void, unint64_t))(*(void *)v62 + 40))(v62, __dst, v61 & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  if ((v72 & 0x10) != 0)
  {
    unint64_t v35 = v71;
    if (v71 < v67)
    {
      unint64_t v71 = v67;
      unint64_t v35 = v67;
    }
    long double v36 = (const void **)&v66;
  }
  else
  {
    if ((v72 & 8) == 0)
    {
      size_t v33 = 0;
      uint64_t v62 = v70;
      HIBYTE(v61) = 0;
      p_dst = &__dst;
      goto LABEL_66;
    }
    long double v36 = (const void **)v65;
    unint64_t v35 = v65[2];
  }
  double v37 = *v36;
  size_t v33 = v35 - (void)*v36;
  uint64_t v62 = v70;
  if (v33 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v33 >= 0x17)
  {
    uint64_t v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v38 = v33 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_dst = (long long *)(*(uint64_t (**)(void))(*(void *)v70 + 16))();
    *((void *)&__dst + 1) = v33;
    unint64_t v61 = v39 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_65;
  }
  HIBYTE(v61) = v33;
  p_dst = &__dst;
  if (v33) {
LABEL_65:
  }
    memmove(p_dst, v37, v33);
LABEL_66:
  *((unsigned char *)p_dst + v33) = 0;
  int v40 = md::TextDataStore::addString(&v74, &__dst, (long long *)(*a3 + 56), 0xFFFF);
  double v41 = v78;
  uint64_t v42 = *((void *)v78 + 35);
  if (v42)
  {
    if (vabds_f32(*(float *)(v42 + 8), v78[26]) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v78, v42, 0);
      uint64_t v42 = *((void *)v41 + 35);
    }
  }
  else
  {
    uint64_t v42 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>((uint64_t)v78, 0);
    *((void *)v41 + 35) = v42;
  }
  md::TextDataStore::textDataForZoom(&v58, v74, v75, v40, *(void *)v42 + 72);
  uint64_t v43 = v58;
  if (v58)
  {
    float64x2_t v44 = operator new(0xB0uLL);
    v44[1] = 0;
    v44[2] = 0;
    *float64x2_t v44 = &unk_1EF582A90;
    md::LabelText::LabelText((uint64_t)(v44 + 3), v43, (uint64_t)v59, 17);
    int8x16_t v45 = (char *)operator new(0x258uLL);
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = 0;
    *(void *)int8x16_t v45 = &unk_1EF57FCD8;
    *((void *)v45 + 5) = 0;
    *((void *)v45 + 6) = 0;
    *(void *)(v45 + 55) = 0;
    *((void *)v45 + 3) = &unk_1EF534060;
    *((void *)v45 + 4) = 0;
    uint64_t v47 = *a3;
    uint64_t v46 = a3[1];
    *((void *)v45 + 8) = &unk_1EF5340A0;
    *((void *)v45 + 9) = v47;
    *((void *)v45 + 10) = v46;
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v45 + 11) = 0;
    *((void *)v45 + 12) = 0;
    uint64_t v48 = a3[3];
    *((void *)v45 + 13) = a3[2];
    *((void *)v45 + 14) = v48;
    if (v48) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v45 + 15) = 0;
    *((void *)v45 + 16) = 0;
    *((_DWORD *)v45 + 34) = 0;
    *(void *)(v45 + 140) = 1065353216;
    *((_WORD *)v45 + 74) = 256;
    *(_OWORD *)(v45 + 152) = 0u;
    *(_OWORD *)(v45 + 168) = 0u;
    *((_DWORD *)v45 + 46) = 0;
    *(void *)(v45 + 188) = 1065353216;
    *(_DWORD *)(v45 + 195) = 0;
    *((_WORD *)v45 + 100) = 4876;
    *((_OWORD *)v45 + 13) = *((_OWORD *)a3 + 3);
    *((void *)v45 + 28) = a3[8];
    *((void *)v45 + 29) = a3[9];
    v45[276] = 0;
    *((_DWORD *)v45 + 70) = 0;
    *((void *)v45 + 30) = 0;
    *((void *)v45 + 31) = 0;
    v45[264] = 0;
    *((void *)v45 + 32) = 0;
    *((_OWORD *)v45 + 18) = xmmword_1A28FCDA0;
    *((void *)v45 + 38) = EaseLinear;
    *((void *)v45 + 39) = EaseLinear;
    v45[320] = *((unsigned char *)a3 + 124);
    *(void *)(v45 + 321) = 0;
    *(_WORD *)(v45 + 329) = 1;
    operator new();
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  float64x2_t v49 = v59;
  if (!v59 || atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v61) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
  std::__shared_weak_count::__release_weak(v49);
  if (SHIBYTE(v61) < 0) {
LABEL_79:
  }
    (*(void (**)(uint64_t, void, unint64_t))(*(void *)v62 + 40))(v62, __dst, v61 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_80:
  int8x16_t v63 = off_1EF57F578;
  uint64_t v73 = &off_1EF57F5A0;
  int8x16_t v64 = (std::__shared_weak_count *)&unk_1EF57F2D0;
  if (SHIBYTE(v69) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70 + 40))(v70, v68, v69 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&v73);
  unint64_t v50 = v74;
  if (v74)
  {
    int8x16_t v51 = v75;
    int8x16_t v52 = v74;
    if (v75 != v74)
    {
      do
      {
        v51 -= 56;
        geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::destroy((uint64_t)v51);
      }
      while (v51 != v50);
      int8x16_t v52 = v74;
    }
    int8x16_t v75 = v50;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v77 + 40))(v77, v52, v76 - (void)v52);
  }
  int16x8_t v53 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  unint64_t v54 = v81;
  if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 40))(v6, v11, 16);
}

void sub_1A1F0FD90(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3 - 200);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3 - 184);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 40))(v1, v2, 16);
  }
  _Unwind_Resume(a1);
}

_OWORD *_ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EF57F680;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_DWORD *)(v2 + 55) = 0;
  uint64_t result = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((void *)v2 + 3) = result;
  if (result)
  {
    *(void *)&long long v4 = -1;
    *((void *)&v4 + 1) = -1;
    result[14] = v4;
    result[15] = v4;
    result[12] = v4;
    result[13] = v4;
    result[10] = v4;
    result[11] = v4;
    result[8] = v4;
    result[9] = v4;
    result[6] = v4;
    result[7] = v4;
    result[4] = v4;
    result[5] = v4;
    result[2] = v4;
    result[3] = v4;
    _OWORD *result = v4;
    result[1] = v4;
  }
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1A1F1039C(_Unwind_Exception *a1)
{
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  *(void *)a1 = &unk_1EF52F6F0;
  *(void *)(a1 + 120) = &unk_1EF52F718;
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 8));
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(void *)a1 = off_1EF57F578;
  *(void *)(a1 + 120) = &off_1EF57F5A0;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = &unk_1EF57F2D0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  {
    operator new();
  }
  *(void *)(a1 + 96) = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 16;
  return a1;
}

void sub_1A1F10560(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream(uint64_t a1)
{
  *(void *)a1 = off_1EF57F578;
  uint64_t v2 = a1 + 120;
  *(void *)(a1 + 120) = &off_1EF57F5A0;
  *(void *)(a1 + 8) = &unk_1EF57F2D0;
  if (*(char *)(a1 + 95) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), *(void *)(a1 + 72), *(void *)(a1 + 88) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v2);
  return a1;
}

void md::TextDataStore::~TextDataStore(md::TextDataStore *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void *)this;
    if (v3 != v2)
    {
      do
      {
        v3 -= 56;
        geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::destroy(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)this;
    }
    *((void *)this + 1) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v4, *((void *)this + 2) - v4);
  }
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::overflow(uint64_t a1, int a2)
{
  if (a2 == -1) {
    return 0;
  }
  unsigned __int8 v2 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v7 = *(unsigned __int8 **)(a1 + 48);
  uint64_t v6 = *(unsigned __int8 **)(a1 + 56);
  if (v7 == v6)
  {
    if ((*(unsigned char *)(a1 + 104) & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 96);
    uint64_t v12 = (char **)(a1 + 64);
    int v13 = *(char *)(a1 + 87);
    if (v13 < 0)
    {
      uint64_t v15 = *(void *)(a1 + 72);
      uint64_t v16 = *(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL;
      size_t v14 = v16 - 1;
      if (v15 != v16 - 1)
      {
        uint64_t v22 = *v12;
        uint64_t v20 = v15 + 1;
        size_t v14 = *(void *)(a1 + 72);
LABEL_27:
        *(void *)(a1 + 72) = v20;
LABEL_28:
        *(_WORD *)&v22[v14] = 0;
        if (*(char *)(a1 + 87) < 0)
        {
          unint64_t v28 = *(void *)(a1 + 72);
          unint64_t v27 = *(void *)(a1 + 80);
          unint64_t v24 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v28 < v24)
          {
            unint64_t v23 = HIBYTE(v27);
            size_t v26 = v24 - v28;
            if (v24 == v28)
            {
LABEL_65:
              uint64_t v42 = &v7[-v10];
              if (*(char *)(a1 + 87) < 0)
              {
                uint64_t v12 = *(char ***)(a1 + 64);
                uint64_t v43 = *(void *)(a1 + 72);
              }
              else
              {
                uint64_t v43 = *(unsigned __int8 *)(a1 + 87);
              }
              uint64_t v6 = (unsigned __int8 *)v12 + v43;
              int v7 = &v42[(void)v12];
              *(void *)(a1 + 40) = v12;
              *(void *)(a1 + 48) = &v42[(void)v12];
              *(void *)(a1 + 56) = v6;
              unint64_t v8 = (unint64_t)v12 + v11 - v10;
              goto LABEL_69;
            }
            goto LABEL_34;
          }
          uint64_t v32 = *(void *)(a1 + 64);
          *(void *)(a1 + 72) = v24;
        }
        else
        {
          LODWORD(v23) = *(unsigned __int8 *)(a1 + 87);
          unint64_t v24 = 22;
          if (v23 <= 0x15)
          {
            uint64_t v25 = *(unsigned __int8 *)(a1 + 87);
            size_t v26 = 22 - v25;
            if (v25 == 22) {
              goto LABEL_65;
            }
LABEL_34:
            if ((v23 & 0x80) != 0)
            {
              size_t v29 = *(void *)(a1 + 72);
              unint64_t v34 = *(void *)(a1 + 80);
              unint64_t v30 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              unint64_t v31 = HIBYTE(v34);
            }
            else
            {
              size_t v29 = v23;
              unint64_t v30 = 22;
              LOBYTE(v31) = v23;
            }
            uint64_t v50 = v11;
            uint64_t v52 = v10;
            if (v30 - v29 >= v26)
            {
              double v37 = (char *)(a1 + 64);
              if ((v31 & 0x80) != 0) {
                double v37 = *v12;
              }
              goto LABEL_60;
            }
            uint64_t v35 = 0x7FFFFFFFFFFFFFF7;
            if (0x7FFFFFFFFFFFFFF7 - v30 >= v29 + v26 - v30)
            {
              __srca = (char *)(a1 + 64);
              if ((v23 & 0x80) != 0) {
                __srca = *v12;
              }
              if (v30 < 0x3FFFFFFFFFFFFFF3)
              {
                unint64_t v36 = 2 * v30;
                if (v29 + v26 > 2 * v30) {
                  unint64_t v36 = v29 + v26;
                }
                if (v36 >= 0x17)
                {
                  unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                  uint64_t v39 = v36 | 7;
                  if (v39 == 23) {
                    uint64_t v39 = v38;
                  }
                  uint64_t v35 = v39 + 1;
                }
                else
                {
                  uint64_t v35 = 23;
                }
              }
              uint64_t v46 = v35;
              int v40 = (char *)(*(uint64_t (**)(void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88));
              double v37 = v40;
              if (v29) {
                memmove(v40, __srca, v29);
              }
              if (v30 != 22) {
                (*(void (**)(void, char *))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), __srca);
              }
              *(void *)(a1 + 72) = v29;
              *(void *)(a1 + 80) = v46 | 0x8000000000000000;
              *(void *)(a1 + 64) = v37;
LABEL_60:
              bzero(&v37[v29], v26);
              size_t v41 = v29 + v26;
              if (*(char *)(a1 + 87) < 0) {
                *(void *)(a1 + 72) = v41;
              }
              else {
                *(unsigned char *)(a1 + 87) = v41 & 0x7F;
              }
              uint64_t v11 = v50;
              uint64_t v10 = v52;
              size_t v33 = &v37[v41];
              goto LABEL_64;
            }
LABEL_80:
            abort();
          }
          *(unsigned char *)(a1 + 87) = 22;
          uint64_t v32 = a1 + 64;
        }
        size_t v33 = (char *)(v32 + v24);
LABEL_64:
        *size_t v33 = 0;
        goto LABEL_65;
      }
      if (v16 == 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_80;
      }
      long long __src = *v12;
      if (v14 >= 0x3FFFFFFFFFFFFFF3)
      {
        uint64_t v49 = *(void *)(a1 + 96);
        uint64_t v51 = *(void *)(a1 + 40);
        uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
LABEL_21:
        uint64_t v20 = 1;
        int v21 = (char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), v19, 1);
        uint64_t v22 = v21;
        if (!v14 || (memmove(v21, __src, v14), uint64_t v20 = v14 + 1, v14 != 22)) {
          (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), __src, v20);
        }
        uint64_t v11 = v49;
        uint64_t v10 = v51;
        *(void *)(a1 + 64) = v22;
        *(void *)(a1 + 80) = v19 | 0x8000000000000000;
        goto LABEL_27;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 87) != 22)
      {
        size_t v14 = *(unsigned __int8 *)(a1 + 87);
        *(unsigned char *)(a1 + 87) = (v13 + 1) & 0x7F;
        uint64_t v22 = (char *)(a1 + 64);
        goto LABEL_28;
      }
      size_t v14 = 22;
      long long __src = (char *)(a1 + 64);
    }
    uint64_t v49 = *(void *)(a1 + 96);
    uint64_t v51 = *(void *)(a1 + 40);
    if (v14 + 1 > 2 * v14) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = 2 * v14;
    }
    uint64_t v18 = (v17 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v18 = v17 | 7;
    }
    if (v17 >= 0x17) {
      uint64_t v19 = v18 + 1;
    }
    else {
      uint64_t v19 = 23;
    }
    goto LABEL_21;
  }
  unint64_t v8 = *(void *)(a1 + 96);
LABEL_69:
  if ((unint64_t)(v7 + 1) >= v8) {
    unint64_t v8 = (unint64_t)(v7 + 1);
  }
  *(void *)(a1 + 96) = v8;
  if ((*(unsigned char *)(a1 + 104) & 8) != 0)
  {
    float64x2_t v44 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      float64x2_t v44 = (void *)*v44;
    }
    *(void *)(a1 + 16) = v44;
    *(void *)(a1 + 24) = (char *)v44 + v4 - v5;
    *(void *)(a1 + 32) = v8;
  }
  if (v7 == v6)
  {
    int8x16_t v45 = *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 104);
    return v45(a1, v2);
  }
  else
  {
    *(void *)(a1 + 48) = v7 + 1;
    *int v7 = v2;
    return v2;
  }
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 96);
  unint64_t v3 = *(void *)(a1 + 48);
  if (v2 < v3)
  {
    *(void *)(a1 + 96) = v3;
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) >= v4) {
    return 0xFFFFFFFFLL;
  }
  if (a2 != -1)
  {
    if ((*(unsigned char *)(a1 + 104) & 0x10) != 0 || *(unsigned __int8 *)(v4 - 1) == a2)
    {
      *(void *)(a1 + 24) = v4 - 1;
      *(void *)(a1 + 32) = v2;
      *(unsigned char *)(v4 - 1) = a2;
      return a2;
    }
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 24) = v4 - 1;
  *(void *)(a1 + 32) = v2;
  return 0;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::underflow(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  unint64_t v2 = *(void *)(a1 + 48);
  if (v1 < v2)
  {
    *(void *)(a1 + 96) = v2;
    unint64_t v1 = v2;
  }
  if ((*(unsigned char *)(a1 + 104) & 8) == 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 < v1)
  {
    *(void *)(a1 + 32) = v1;
    unint64_t v3 = v1;
  }
  unint64_t v4 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)v4 < v3) {
    return *v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, *(void *)(a2 + 128), 0, a3);
}

double std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 96);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v5 < v6)
  {
    *(void *)(a1 + 96) = v6;
    unint64_t v5 = v6;
  }
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18) {
    goto LABEL_14;
  }
  if (v5)
  {
    int v7 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      int v7 = (void *)*v7;
    }
    uint64_t v8 = v5 - (void)v7;
    if (a3) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v9 = a3;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  if (!a3) {
    goto LABEL_17;
  }
LABEL_10:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0) {
        uint64_t v9 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
      }
      else {
        uint64_t v9 = v6 - *(void *)(a1 + 40);
      }
      goto LABEL_20;
    }
LABEL_14:
    uint64_t v10 = -1;
    goto LABEL_15;
  }
  uint64_t v9 = v8;
LABEL_20:
  uint64_t v10 = -1;
  uint64_t v12 = v9 + a2;
  if (v12 >= 0 && v8 >= v12 && (!v12 || ((a4 & 8) == 0 || *(void *)(a1 + 24)) && ((a4 & 0x10) == 0 || v6)))
  {
    if ((a4 & 8) != 0)
    {
      *(void *)(a1 + 24) = *(void *)(a1 + 16) + v12;
      *(void *)(a1 + 32) = v5;
    }
    if ((a4 & 0x10) != 0) {
      *(void *)(a1 + 48) = *(void *)(a1 + 40) + v12;
    }
    uint64_t v10 = v12;
  }
LABEL_15:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v10;
  return result;
}

void std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringbuf(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57F2D0;
  if (*(char *)(a1 + 87) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), *(void *)(a1 + 64), *(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x1A6239270);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringbuf(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57F2D0;
  if (*(char *)(a1 + 87) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), *(void *)(a1 + 64), *(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL);
  }
  return std::streambuf::~streambuf();
}

void virtual thunk to'std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream(void *a1)
{
  unint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)unint64_t v1 = off_1EF57F578;
  *((void *)v1 + 15) = &off_1EF57F5A0;
  *((void *)v1 + 1) = &unk_1EF57F2D0;
  if (v1[95] < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)v1 + 12) + 40))(*((void *)v1 + 12), *((void *)v1 + 9), *((void *)v1 + 11) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v1 + 120);
  JUMPOUT(0x1A6239270);
}

{
  char *v1;
  uint64_t vars8;

  unint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)unint64_t v1 = off_1EF57F578;
  *((void *)v1 + 15) = &off_1EF57F5A0;
  *((void *)v1 + 1) = &unk_1EF57F2D0;
  if (v1[95] < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)v1 + 12) + 40))(*((void *)v1 + 12), *((void *)v1 + 9), *((void *)v1 + 11) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x1A62391A0);
}

void std::basic_ostringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_ostringstream(uint64_t a1)
{
  *(void *)a1 = off_1EF57F578;
  uint64_t v1 = a1 + 120;
  *(void *)(a1 + 120) = &off_1EF57F5A0;
  *(void *)(a1 + 8) = &unk_1EF57F2D0;
  if (*(char *)(a1 + 95) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), *(void *)(a1 + 72), *(void *)(a1 + 88) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](v1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::MuninRoadLabel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::MuninRoadLabel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FCD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MuninRoadLabel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FCD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelStyle>::__on_zero_shared(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[59];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[57];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[57];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[55];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[53];
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[53];
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = a1[51];
  a1[51] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[49];
  a1[49] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[45];
  if (v8)
  {
    uint64_t v9 = a1[46];
    uint64_t v10 = (void *)a1[45];
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(uint64_t **)(v9 - 8);
        *(void *)(v9 - 8) = 0;
        if (v11)
        {
          uint64_t v12 = *v11;
          *uint64_t v11 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          MEMORY[0x1A6239270](v11, 0x1020C4034E03FFCLL);
        }
        v9 -= 16;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)a1[45];
    }
    a1[46] = v8;
    operator delete(v10);
  }
  int v13 = (std::__shared_weak_count *)a1[44];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    size_t v14 = (char *)a1[11];
    if (!v14) {
      goto LABEL_38;
    }
  }
  else
  {
    size_t v14 = (char *)a1[11];
    if (!v14) {
      goto LABEL_38;
    }
  }
  uint64_t v15 = (char *)a1[12];
  uint64_t v16 = v14;
  if (v15 != v14)
  {
    do
    {
      unint64_t v17 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v15 -= 24;
    }
    while (v15 != v14);
    uint64_t v16 = (char *)a1[11];
  }
  a1[12] = v14;
  operator delete(v16);
LABEL_38:
  uint64_t v18 = (std::__shared_weak_count *)a1[10];
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v19 = (std::__shared_weak_count *)a1[8];
    if (!v19) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v19 = (std::__shared_weak_count *)a1[8];
    if (!v19) {
      goto LABEL_46;
    }
  }
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_46:
  uint64_t v20 = (std::__shared_weak_count *)a1[6];
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    int v21 = (std::__shared_weak_count *)a1[4];
    if (!v21) {
      return;
    }
  }
  else
  {
    int v21 = (std::__shared_weak_count *)a1[4];
    if (!v21) {
      return;
    }
  }
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
}

void std::__shared_ptr_emplace<md::LabelStyle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelStyle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL md::ARMapEngineConfiguration::shouldRebuildCurrentMode(md::ARMapEngineConfiguration *this, md::MapEngine *a2)
{
  uint64_t v2 = *((void *)a2 + 141);
  unint64_t v3 = *(unsigned char **)v2;
  unint64_t v4 = *(unsigned char **)(v2 + 8);
  if (v3 != v4)
  {
    while (*v3 != 27)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_7;
      }
    }
  }
  if (v3 == v4) {
LABEL_7:
  }
    unsigned __int8 v5 = 0;
  else {
    unsigned __int8 v5 = v3[8];
  }
  BOOL v6 = *((unsigned __int8 *)this + 32) != v5;
  *((unsigned char *)this + 32) = v5;
  return v6;
}

void md::ARMapEngineConfiguration::createMode(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 14:
      operator new();
    case 15:
      operator new();
    case 16:
      operator new();
    case 17:
      operator new();
    default:
      md::MapEngineConfiguration::createMode(a1, a2);
      return;
  }
}

void sub_1A1F11A54(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A1C40B51D6698);
  _Unwind_Resume(a1);
}

unint64_t md::ARMapEngineConfiguration::destroyRenderLayers(uint64_t a1, uint64_t a2, uint64_t a3, ggl::TextureCube *a4)
{
  return detachEnvironmentTexture(*(int8x8_t **)(*(void *)(*(void *)a3 + 16) + 440), *(int8x8_t **)(*(void *)(*(void *)a3 + 16) + 440), *(gdc::Registry **)(*(void *)(*(void *)a3 + 16) + 464), a4);
}

void md::ARMapEngineConfiguration::createRenderLayers(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = operator new(0x20uLL);
  a2[1] = v4 + 2;
  a2[2] = v4 + 2;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  *a2 = v4;
  uint64_t v5 = *(void *)(a1 + 1120);
  unint64_t v6 = *(void *)(v5 + 16);
  if ((v6 & (v6 - 1)) != 0)
  {
    unint64_t v8 = 0x3F812BA5755E8568;
    if (v6 <= 0x3F812BA5755E8568) {
      unint64_t v8 = 0x3F812BA5755E8568 % v6;
    }
    uint64_t v7 = *(void **)(*(void *)(v5 + 8) + 8 * v8);
    do
    {
      do
        uint64_t v7 = (void *)*v7;
      while (v7[1] != 0x3F812BA5755E8568);
    }
    while (v7[2] != 0x3F812BA5755E8568);
  }
  else
  {
    uint64_t v7 = *(void **)(*(void *)(v5 + 8) + 8 * ((v6 - 1) & 0x3F812BA5755E8568));
    do
    {
      do
        uint64_t v7 = (void *)*v7;
      while (v7[1] != 0x3F812BA5755E8568);
    }
    while (v7[2] != 0x3F812BA5755E8568);
  }
  *(id *)(v7[5] + 128);
  operator new();
}

void sub_1A1F12E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24)
{
  uint64_t v30 = v28[11];
  if (v30 == v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 32))(v24);
    uint64_t v31 = *v26;
    if (*v26) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v32 = *v28;
    if (!*v28) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
    uint64_t v31 = *v26;
    if (!*v26) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v31 = *v26;
    if (!*v26) {
      goto LABEL_7;
    }
  }
LABEL_3:
  v28[5] = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[7] + 40))(v28[7], v31, v28[6] - v31);
  uint64_t v32 = *v28;
  if (!*v28)
  {
LABEL_9:
    if (a20 == &a17)
    {
      (*(void (**)(uint64_t *))(a17 + 32))(&a17);
    }
    else if (a20)
    {
      (*(void (**)(void))(*a20 + 40))();
    }
    if (a24 == &a21)
    {
      (*(void (**)(uint64_t *))(a21 + 32))(&a21);
    }
    else if (a24)
    {
      (*(void (**)(void))(*a24 + 40))();
    }
    MEMORY[0x1A6239270](v28, 0x10A0C40D234DDC7);
    size_t v33 = (void *)v25[13];
    while (1)
    {
      if (v33[1])
      {
        unint64_t v34 = 0;
        uint64_t v35 = v33 + 2;
        unint64_t v36 = v33 + 2;
        double v37 = (void (***)(void))(v33 + 2);
        do
        {
          unint64_t v38 = (void (**)(void *))*v37;
          v37 += 15;
          (*v38)(v36);
          ++v34;
          v35 += 15;
          unint64_t v36 = v37;
        }
        while (v34 < v33[1]);
      }
      v33[1] = 0;
      size_t v33 = (void *)*v33;
      if (!v33)
      {
        uint64_t v39 = (void **)v25[13];
        v25[14] = v39;
        int v40 = *v39;
        *uint64_t v39 = 0;
        if (v40)
        {
          do
          {
            size_t v41 = (void *)*v40;
            free(v40);
            int v40 = v41;
          }
          while (v41);
          uint64_t v39 = (void **)v25[13];
        }
        free(v39);
        uint64_t v42 = v25[12];
        v25[12] = 0;
        if (v42)
        {
          uint64_t v43 = ggl::FragmentedPool<ggl::ARCameraImagePipelineSetup>::~FragmentedPool(v42);
          MEMORY[0x1A6239270](v43, 0x10A0C40D234DDC7);
        }
        float64x2_t v44 = (std::__shared_weak_count *)v25[11];
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        uint64_t v45 = v25[9];
        v25[9] = 0;
        if (v45) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
        }
        uint64_t v46 = (std::__shared_weak_count *)v25[8];
        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        uint64_t v47 = *v27;
        *unint64_t v27 = 0;
        if (v47) {
          MEMORY[0x1A6239270](v47, 0x1000C4049ECCB0CLL);
        }
        void *v25 = a9;
        uint64_t v48 = (void *)v25[1];
        if (v48)
        {
          v25[2] = v48;
          operator delete(v48);
        }

        MEMORY[0x1A6239270](v25, 0x10A1C406F996460);
        std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](a10);
        _Unwind_Resume(a1);
      }
    }
  }
LABEL_8:
  v28[1] = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[3] + 40))(v28[3], v32, v28[2] - v32);
  goto LABEL_9;
}

void md::ARMapEngineConfiguration::createPassList(md::ARMapEngineConfiguration *this, md::FrameGraphResourceRegistry *a2)
{
}

void sub_1A1F1354C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t md::ARMapEngineConfiguration::supportsAsyncRender(md::ARMapEngineConfiguration *this)
{
  return 0;
}

void md::ARMapEngineConfiguration::~ARMapEngineConfiguration(md::ARMapEngineConfiguration *this)
{
  md::ARMapEngineConfiguration::~ARMapEngineConfiguration(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF5448B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *(void *)this = &unk_1EF5416A8;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void md::MapEngineConfiguration::~MapEngineConfiguration(md::MapEngineConfiguration *this)
{
  *(void *)this = &unk_1EF5416A8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

gdc::Registry *std::__shared_ptr_pointer<gdc::Registry *,std::shared_ptr<gdc::Registry>::__shared_ptr_default_delete<gdc::Registry,gdc::Registry>,std::allocator<gdc::Registry>>::__on_zero_shared(uint64_t a1)
{
  double result = *(gdc::Registry **)(a1 + 24);
  if (result)
  {
    gdc::Registry::~Registry(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<gdc::Registry *,std::shared_ptr<gdc::Registry>::__shared_ptr_default_delete<gdc::Registry,gdc::Registry>,std::allocator<gdc::Registry>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomClimateStyle>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomClimateStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomClimateStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomStyle>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::LowZoomStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Texture2D>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Texture2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Texture2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      __int16 v8 = *a1;
      if (*(_DWORD *)(**a3 + 40 * *(a2 - 1) + 32) < *(_DWORD *)(**a3 + 40 * *a1 + 32))
      {
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      uint64_t v9 = **a3;
      unsigned __int16 v10 = a1[1];
      unsigned __int16 v11 = *a1;
      unsigned int v12 = *(_DWORD *)(v9 + 40 * v10 + 32);
      unsigned int v13 = *(_DWORD *)(v9 + 40 * *a1 + 32);
      unsigned __int16 v14 = *(a2 - 1);
      unsigned int v15 = *(_DWORD *)(v9 + 40 * v14 + 32);
      if (v12 >= v13)
      {
        if (v15 < v12)
        {
          a1[1] = v14;
          *(a2 - 1) = v10;
          unsigned __int16 v36 = *a1;
          if (*(_DWORD *)(v9 + 40 * a1[1] + 32) < *(_DWORD *)(v9 + 40 * *a1 + 32))
          {
            *a1 = a1[1];
            a1[1] = v36;
          }
        }
      }
      else if (v15 >= v12)
      {
        *a1 = v10;
        a1[1] = v11;
        if (*(_DWORD *)(v9 + 40 * *(a2 - 1) + 32) < v13)
        {
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v14;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      size_t v26 = a1 + 1;
      unint64_t v27 = a1 + 2;
      unint64_t v28 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      unsigned __int16 v29 = a1[3];
      uint64_t v30 = **a3;
      if (*(_DWORD *)(v30 + 40 * *(a2 - 1) + 32) < *(_DWORD *)(v30 + 40 * v29 + 32))
      {
        *unint64_t v28 = *(a2 - 1);
        *(a2 - 1) = v29;
        unsigned __int16 v31 = *v28;
        unsigned __int16 v32 = *v27;
        unsigned int v33 = *(_DWORD *)(v30 + 40 * *v28 + 32);
        if (v33 < *(_DWORD *)(v30 + 40 * *v27 + 32))
        {
          *unint64_t v27 = v31;
          *unint64_t v28 = v32;
          unsigned __int16 v34 = *v26;
          if (v33 < *(_DWORD *)(v30 + 40 * *v26 + 32))
          {
            a1[1] = v31;
            a1[2] = v34;
            __int16 v35 = *a1;
            if (v33 < *(_DWORD *)(v30 + 40 * *a1 + 32))
            {
              *a1 = v31;
              a1[1] = v35;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v17 = a1 + 2;
      unsigned __int16 v16 = a1[2];
      unsigned __int16 v18 = a1[1];
      uint64_t v19 = **a3;
      __int16 v20 = *a1;
      unsigned int v21 = *(_DWORD *)(v19 + 40 * v18 + 32);
      unsigned int v22 = *(_DWORD *)(v19 + 40 * *a1 + 32);
      unsigned int v23 = *(_DWORD *)(v19 + 40 * v16 + 32);
      if (v21 >= v22)
      {
        if (v23 >= v21) {
          goto LABEL_23;
        }
        a1[1] = v16;
        *unint64_t v17 = v18;
        uint64_t v24 = a1;
        uint64_t v25 = (__int16 *)(a1 + 1);
      }
      else
      {
        uint64_t v24 = a1;
        uint64_t v25 = (__int16 *)(a1 + 2);
        if (v23 < v21) {
          goto LABEL_22;
        }
        *a1 = v18;
        a1[1] = v20;
        uint64_t v24 = a1 + 1;
        uint64_t v25 = (__int16 *)(a1 + 2);
      }
      if (v23 >= v22) {
        goto LABEL_23;
      }
LABEL_22:
      *uint64_t v24 = v16;
      __int16 *v25 = v20;
LABEL_23:
      double v37 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v38 = 0;
      uint64_t v39 = 6;
      break;
  }
  while (1)
  {
    unsigned __int16 v41 = *v37;
    unsigned int v42 = *v17;
    unsigned int v43 = *(_DWORD *)(v19 + 40 * *v37 + 32);
    if (v43 < *(_DWORD *)(v19 + 40 * v42 + 32))
    {
      uint64_t v44 = v39;
      do
      {
        *(unsigned __int16 *)((char *)a1 + v44) = v42;
        uint64_t v45 = v44 - 2;
        if (v44 == 2)
        {
          int v40 = a1;
          goto LABEL_26;
        }
        LOWORD(v42) = *(unsigned __int16 *)((char *)a1 + v44 - 4);
        v44 -= 2;
      }
      while (v43 < *(_DWORD *)(v19 + 40 * (unsigned __int16)v42 + 32));
      int v40 = (unsigned __int16 *)((char *)a1 + v45);
LABEL_26:
      *int v40 = v41;
      if (++v38 == 8) {
        return v37 + 1 == a2;
      }
    }
    unint64_t v17 = v37;
    v39 += 2;
    if (++v37 == a2) {
      return 1;
    }
  }
}

void ggl::CircleMultiStroke::FillPipelineState::~FillPipelineState(ggl::CircleMultiStroke::FillPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::CircleMultiStroke::FillPipelineSetup::textureIsEnabled(ggl::CircleMultiStroke::FillPipelineSetup *this)
{
  return 0;
}

BOOL ggl::CircleMultiStroke::FillPipelineSetup::constantDataIsEnabled(ggl::CircleMultiStroke::FillPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::CircleMultiStroke::FillPipelineSetup::~FillPipelineSetup(ggl::CircleMultiStroke::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::CircleMultiStroke::FillPipelineSetup::FillPipelineSetup(ggl::CircleMultiStroke::FillPipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
      unk_1EB32B400 = 1;
    }
    ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
    *(void *)algn_1EB317A28 = &ggl::CircleMultiStroke::pipelineDataFillPipelineDeviceStructs(void)::ref;
    qword_1EB317A30 = 0;
    {
      ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::CircleMultiStroke::Style::reflection(void)::reflection;
      unk_1EB317A60 = ggl::Tile::View::reflection(void)::reflection;
      qword_1EB317A68 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
      unk_1EB317A70 = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
    }
    qword_1EB317A38 = (uint64_t)&ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref;
    unk_1EB317A40 = xmmword_1A28FCFA0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF55D5E8;
  return result;
}

void md::AttributesTileData::~AttributesTileData(md::AttributesTileData *this)
{
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

uint64_t karo::graphics::BasicViewNode::computeView(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void karo::graphics::BasicViewNode::~BasicViewNode(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t non-virtual thunk to'md::MapStandardLabeler::isTransitNodeAlongSelectedLine(md::MapStandardLabeler *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 48);
  if (*(unsigned char *)(v2 + 433))
  {
    for (uint64_t i = *(void **)(v2 + 168); i; uint64_t i = (void *)*i)
    {
      unint64_t v4 = i[4];
      if (v4 <= a2)
      {
        if (v4 >= a2) {
          return 1;
        }
        ++i;
      }
    }
  }
  else
  {
    for (uint64_t j = *(void **)(v2 + 136); j; uint64_t j = (void *)*j)
    {
      unint64_t v7 = j[4];
      if (v7 <= a2)
      {
        if (v7 >= a2) {
          return 1;
        }
        ++j;
      }
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'md::MapStandardLabeler::trafficTilePool(md::MapStandardLabeler *this)
{
  return *((void *)this + 52);
}

uint64_t non-virtual thunk to'md::MapStandardLabeler::externalMeshModerator(md::MapStandardLabeler *this)
{
  return *((void *)this + 50);
}

void non-virtual thunk to'md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(uint64_t a1, void *a2)
{
}

void md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(uint64_t a1, void *a2)
{
  v35[3] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = &unk_1EF559E78;
  unint64_t v28 = &unk_1EF559E78;
  id v29 = a2;
  size_t v26 = &unk_1EF559498;
  id v27 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v29, "count"));
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = v29;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        __int16 v8 = objc_msgSend(v7, "uniqueIdentifier", v19);
        if (v8)
        {
          uint64_t v9 = [v7 uniqueIdentifier];
          BOOL v10 = [v9 length] == 0;

          if (!v10)
          {
            id v11 = v27;
            unsigned int v12 = [v7 uniqueIdentifier];
            [v11 addObject:v12];
          }
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v32 count:16];
    }
    while (v4);
  }

  uint64_t v13 = *(void *)(a1 + 48);
  obuint64_t j = v29;
  id v21 = v27;
  unsigned __int16 v31 = 0;
  unsigned __int16 v14 = operator new(0x38uLL);
  *(void *)unsigned __int16 v14 = &unk_1EF573B78;
  *((void *)v14 + 1) = &unk_1EF559E78;
  *((void *)v14 + 2) = 0;
  objc_storeStrong((id *)v14 + 2, obj);

  *((void *)v14 + 5) = 0;
  *((void *)v14 + 4) = &unk_1EF559498;
  objc_storeStrong((id *)v14 + 5, v21);

  unsigned __int16 v31 = v14;
  unsigned int v15 = (void *)(*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
  unint64_t v17 = (void *)(v13 + 640);
  unsigned __int16 v34 = v15;
  if ((void *)(v13 + 640) == v33)
  {
LABEL_18:
    if (v15 != v33) {
      goto LABEL_19;
    }
LABEL_22:
    (*(void (**)(void *))(v33[0] + 32))(v33);
    goto LABEL_23;
  }
  unsigned __int16 v18 = *(void **)(v13 + 664);
  if (v15 == v33)
  {
    if (v18 == v17)
    {
      (*(void (**)(void *, void *))(v16 + 24))(v33, v35);
      (*(void (**)(void *))(*v34 + 32))(v34);
      unsigned __int16 v34 = 0;
      (*(void (**)(void, void *))(**(void **)(v13 + 664) + 24))(*(void *)(v13 + 664), v33);
      (*(void (**)(void))(**(void **)(v13 + 664) + 32))(*(void *)(v13 + 664));
      *(void *)(v13 + 664) = 0;
      unsigned __int16 v34 = v33;
      (*(void (**)(void *, uint64_t))(v35[0] + 24))(v35, v13 + 640);
      (*(void (**)(void *))(v35[0] + 32))(v35);
      *(void *)(v13 + 664) = v17;
      unsigned int v15 = v34;
      if (v34 == v33) {
        goto LABEL_22;
      }
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v16 + 24))(v33, v13 + 640);
    (*(void (**)(void *))(*v34 + 32))(v34);
    unsigned int v15 = *(void **)(v13 + 664);
    unsigned __int16 v34 = v15;
    *(void *)(v13 + 664) = v17;
    goto LABEL_18;
  }
  if (v18 == v17)
  {
    (*(void (**)(uint64_t, void *))(*(void *)(v13 + 640) + 24))(v13 + 640, v33);
    (*(void (**)(void))(**(void **)(v13 + 664) + 32))(*(void *)(v13 + 664));
    *(void *)(v13 + 664) = v34;
    unsigned __int16 v34 = v33;
    goto LABEL_22;
  }
  unsigned __int16 v34 = *(void **)(v13 + 664);
  *(void *)(v13 + 664) = v15;
  unsigned int v15 = v18;
  if (v18 == v33) {
    goto LABEL_22;
  }
LABEL_19:
  if (v15) {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
LABEL_23:
  *(unsigned char *)(v13 + 758) = 1;
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else if (v31)
  {
    (*(void (**)(void))(*v31 + 40))();
  }

  *(unsigned char *)(a1 + 372) = 1;
  size_t v26 = &unk_1EF559498;

  unint64_t v28 = v19;
}

void sub_1A1F14AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,id a30,uint64_t a31,uint64_t a32)
{
  std::function<BOOL ()(VKTrafficIncidentFeature *)>::~function(&a32);
  md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0::~$_0((uint64_t)&a11);
  a26 = a10;

  a29 = a9;
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(VKTrafficIncidentFeature *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0::~$_0(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EF559498;

  *(void *)a1 = &unk_1EF559E78;
  return a1;
}

uint64_t std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = [v2 uniqueIdentifier];
  uint64_t v5 = [v3 containsObject:v4];

  return v5;
}

void sub_1A1F14C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1EF559498;

  *(void *)(a1 + 8) = &unk_1EF559E78;
  operator delete((void *)a1);
}

void std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1EF559498;

  *(void *)(a1 + 8) = &unk_1EF559E78;
  uint64_t v2 = *(void **)(a1 + 16);
}

void *std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF573B78;
  return std::__compressed_pair_elem<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void *std::__compressed_pair_elem<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF559E78;
  a1[1] = 0;
  id v4 = *(id *)(a2 + 8);
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;

  a1[3] = &unk_1EF559498;
  a1[4] = 0;
  id v6 = *(id *)(a2 + 32);
  unint64_t v7 = (void *)a1[4];
  a1[4] = v6;

  return a1;
}

void *std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_1EF573B78;
  std::__compressed_pair_elem<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF573B78;
  *(void *)(a1 + 32) = &unk_1EF559498;

  *(void *)(a1 + 8) = &unk_1EF559E78;
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::MapStandardLabeler::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,BOOL ()(VKTrafficIncidentFeature *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF573B78;
  *(void *)(a1 + 32) = &unk_1EF559498;

  *(void *)(a1 + 8) = &unk_1EF559E78;
  return a1;
}

void geo::_retain_ptr<NSMutableSet<NSString *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559498;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSMutableSet<NSString *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559498;

  return a1;
}

void non-virtual thunk to'md::MapStandardLabeler::mapTypeDidChange(md::MapStandardLabeler *this)
{
  BOOL v1 = *(unsigned char *)(*((void *)this + 48) + 113) != 0;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*((void *)this + 2) + 3391));
  if (v1 != (v2 & 1))
  {
    *((unsigned char *)this + 361) = 1;
    id v3 = (md::LabelTransitSupport *)*((void *)this + 48);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*((void *)this + 2) + 3391));
    md::LabelTransitSupport::setInTransitMode(v3, v4 & 1);
  }
}

void md::MapStandardLabeler::mapTypeDidChange(md::MapStandardLabeler *this)
{
  BOOL v1 = *(unsigned char *)(*((void *)this + 49) + 113) != 0;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*((void *)this + 3) + 3391));
  if (v1 != (v2 & 1))
  {
    *((unsigned char *)this + 369) = 1;
    id v3 = (md::LabelTransitSupport *)*((void *)this + 49);
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*((void *)this + 3) + 3391));
    md::LabelTransitSupport::setInTransitMode(v3, v4 & 1);
  }
}

uint64_t md::MapStandardLabeler::displayStyleDidChange(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 392);
  if (*(void *)(v1 + 408))
  {
    unsigned __int8 v2 = *(void **)(v1 + 392);
    if (v2)
    {
      do
      {
        id v3 = (void *)*v2;
        this = (*(uint64_t (**)(void))(**(void **)(v1 + 400) + 40))(*(void *)(v1 + 400));
        unsigned __int8 v2 = v3;
      }
      while (v3);
    }
    *(void *)(v1 + 392) = 0;
    uint64_t v4 = *(void *)(v1 + 376);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)(v1 + 368) + 8 * i) = 0;
    }
    *(void *)(v1 + 408) = 0;
  }
  return this;
}

uint64_t md::MapStandardLabeler::isTransitNodeAlongSelectedLine(md::MapStandardLabeler *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 50);
  if (*(unsigned char *)(v2 + 433))
  {
    for (uint64_t i = *(void **)(v2 + 168); i; uint64_t i = (void *)*i)
    {
      unint64_t v4 = i[4];
      if (v4 <= a2)
      {
        if (v4 >= a2) {
          return 1;
        }
        ++i;
      }
    }
  }
  else
  {
    for (uint64_t j = *(void **)(v2 + 136); j; uint64_t j = (void *)*j)
    {
      unint64_t v7 = j[4];
      if (v7 <= a2)
      {
        if (v7 >= a2) {
          return 1;
        }
        ++j;
      }
    }
  }
  return 0;
}

uint64_t md::MapStandardLabeler::trafficTilePool(md::MapStandardLabeler *this)
{
  return *((void *)this + 54);
}

uint64_t md::StandardLabeler::customFeatureSupport(md::StandardLabeler *this)
{
  return *((void *)this + 4);
}

uint64_t md::MapStandardLabeler::externalMeshModerator(md::MapStandardLabeler *this)
{
  return *((void *)this + 52);
}

uint64_t md::MapStandardLabeler::externalObjectsModerator(md::MapStandardLabeler *this)
{
  return *((void *)this + 50);
}

uint64_t md::MapStandardLabeler::transitSupport(md::MapStandardLabeler *this)
{
  return *((void *)this + 49);
}

void md::MapStandardLabeler::debugDraw(float **this, NSMutableString *a2, md::DebugConsole *a3)
{
  md::StandardLabeler::debugDraw((md::StandardLabeler *)this, a2, a3);
  if (*((unsigned char *)this + 452) && this[55])
  {
    *((_DWORD *)a3 + 24) = -16776961;
    uint64_t v5 = this[55];
    float v6 = v5[6];
    float v7 = v5[2];
    if (v6 == 1.0)
    {
      float v16 = v5[3];
    }
    else
    {
      float v8 = v5[7];
      float v9 = fabsf(v7 * v6);
      float v10 = fabsf(v8 * v7);
      float v11 = v5[3];
      float v12 = -(float)(v8 * v11);
      float v13 = v11 * v6;
      float v14 = fabsf(v12);
      float v15 = fabsf(v13);
      float v7 = v14 + v9;
      float v16 = v15 + v10;
    }
    float v17 = v5[4];
    float v18 = v5[5];
    float v19 = v17 + v7;
    v21[0] = v17 + v7;
    v21[1] = v18 + v16;
    *((float *)a3 + 2) = v17 - v7;
    *((float *)a3 + 3) = v18 - v16;
    uint64_t v24 = *((void *)a3 + 1);
    uint64_t v20 = v24;
    *((float *)a3 + 2) = v17 + v7;
    *((float *)a3 + 3) = v18 + v16;
    float v22 = *(float *)&v20;
    float v23 = v18 + v16;
    ggl::DebugConsole::drawLine((uint64_t)a3, &v22);
    ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v24);
    float v22 = v19;
    float v23 = *((float *)&v20 + 1);
    ggl::DebugConsole::drawLine((uint64_t)a3, &v22);
    ggl::DebugConsole::drawLine((uint64_t)a3, v21);
  }
}

void md::MapStandardLabeler::updateOcclusionQueries(md::MapStandardLabeler *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(void *)(v2 + 432);
  uint64_t v4 = *(void *)(v3 + 1232);
  if (*(unsigned char *)(v2 + 3348)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || (uint64_t v6 = *(void *)(v4 + 272)) == 0)
  {
    uint64_t v14 = *((void *)this + 9);
    uint64_t v15 = *((void *)this + 10);
    if (v14 != v15)
    {
      char v16 = 0;
      char v17 = 0;
      if (*(float *)(v3 + 424) > 15.0)
      {
        do
        {
          float v18 = *(unsigned char **)v14;
          if (*(unsigned char *)(*(void *)v14 + 482))
          {
            if (v18[1217])
            {
              md::Label::submitOcclusionQuery((uint64_t)v18, *(void *)(*((void *)this + 3) + 360), *(void *)(*((void *)this + 3) + 432), v18[1217]);
              char v17 = 1;
            }
            else
            {
              v18[485] = 2;
              v18[480] = 0;
              v18[482] = 0;
              char v16 = 1;
              v18[1284] = 0;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
      else
      {
        do
        {
          float v19 = *(unsigned char **)v14;
          if (*(unsigned char *)(*(void *)v14 + 482))
          {
            unsigned int v20 = v19[1217];
            if (v20 < 2)
            {
              v19[485] = 2;
              v19[480] = 0;
              v19[482] = 0;
              char v16 = 1;
              v19[1284] = 0;
            }
            else
            {
              md::Label::submitOcclusionQuery((uint64_t)v19, *(void *)(*((void *)this + 3) + 360), *(void *)(*((void *)this + 3) + 432), v20);
              char v17 = 1;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
LABEL_54:
      if ((v16 & 1) != 0 && (v17 & 1) == 0)
      {
        uint64_t v52 = *((void *)this + 3);
        *(unsigned char *)(v52 + 3045) = 1;
        *(unsigned char *)(v52 + 3047) = 1;
        unsigned __int8 v53 = atomic_load((unsigned __int8 *)(v52 + 3048));
        if ((v53 & 1) == 0)
        {
          unsigned __int8 v54 = atomic_load((unsigned __int8 *)(v52 + 3058));
          if (v54)
          {
            uint64_t v55 = *(void *)(v52 + 136);
            if (v55)
            {
              uint64_t v56 = *(void *)(v55 + 56);
              if (v56)
              {
                uint64_t v58 = v52;
                char v57 = 9;
                (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v56 + 48))(v56, &v58, &v57);
              }
            }
          }
        }
      }
    }
    return;
  }
  float v7 = *(char **)(v6 + 64);
  float v8 = *(char **)(v6 + 72);
  if (v7 == v8)
  {
    double v12 = 1.79769313e308;
    double v13 = -1.79769313e308;
    double v10 = 1.79769313e308;
    double v11 = -1.79769313e308;
  }
  else
  {
    unint64_t v9 = v8 - v7 - 16;
    if (v9 >= 0x30)
    {
      uint64_t v21 = (v9 >> 4) + 1;
      float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      float64x2_t v23 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      uint64_t v24 = (const double *)(v7 + 32);
      uint64_t v25 = v21 & 0x1FFFFFFFFFFFFFFCLL;
      float64x2_t v26 = v23;
      float64x2_t v27 = v22;
      float64x2_t v28 = v22;
      float64x2_t v29 = v22;
      float64x2_t v30 = v23;
      float64x2_t v31 = v23;
      do
      {
        unsigned __int16 v32 = v24 - 4;
        float64x2x2_t v59 = vld2q_f64(v32);
        float64x2x2_t v60 = vld2q_f64(v24);
        float64x2_t v22 = vminnmq_f64(v59.val[0], v22);
        float64x2_t v27 = vminnmq_f64(v60.val[0], v27);
        float64x2_t v30 = vmaxnmq_f64(v30, v59.val[0]);
        float64x2_t v31 = vmaxnmq_f64(v31, v60.val[0]);
        float64x2_t v28 = vminnmq_f64(v59.val[1], v28);
        float64x2_t v29 = vminnmq_f64(v60.val[1], v29);
        float64x2_t v23 = vmaxnmq_f64(v23, v59.val[1]);
        float64x2_t v26 = vmaxnmq_f64(v26, v60.val[1]);
        v24 += 8;
        v25 -= 4;
      }
      while (v25);
      double v13 = vmaxnmvq_f64(vmaxnmq_f64(v30, v31));
      double v12 = vminnmvq_f64(vminnmq_f64(v28, v29));
      double v10 = vminnmvq_f64(vminnmq_f64(v22, v27));
      double v11 = vmaxnmvq_f64(vmaxnmq_f64(v23, v26));
      if (v21 == (v21 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_28;
      }
      v7 += 16 * (v21 & 0x1FFFFFFFFFFFFFFCLL);
    }
    else
    {
      double v10 = 1.79769313e308;
      double v11 = -1.79769313e308;
      double v12 = 1.79769313e308;
      double v13 = -1.79769313e308;
    }
    do
    {
      double v33 = *(double *)v7;
      double v34 = *((double *)v7 + 1);
      v7 += 16;
      double v10 = fmin(v33, v10);
      double v13 = fmax(v13, v33);
      double v12 = fmin(v34, v12);
      double v11 = fmax(v11, v34);
    }
    while (v7 != v8);
  }
LABEL_28:
  double v35 = v13 - v10;
  double v36 = v11 - v12;
  if (v35 >= 0.0) {
    double v37 = v35 * 1.20000005;
  }
  else {
    double v37 = 0.0;
  }
  if (v36 >= 0.0) {
    double v38 = v36 * 1.20000005;
  }
  else {
    double v38 = 0.0;
  }
  uint64_t v39 = (uint64_t *)*((void *)this + 9);
  int v40 = (uint64_t *)*((void *)this + 10);
  if (v39 != v40)
  {
    char v16 = 0;
    char v17 = 0;
    double v41 = v10 + (v35 - v37) * 0.5;
    double v42 = v12 + (v36 - v38) * 0.5;
    double v43 = v41 + v37;
    double v44 = v42 + v38;
    float v45 = *(float *)(v3 + 424);
    while (1)
    {
      uint64_t v46 = *v39;
      if (*(unsigned char *)(*v39 + 482))
      {
        int v47 = *(unsigned __int8 *)(v46 + 1217);
        if (*(unsigned char *)(v46 + 1217))
        {
          if (v47 != 1) {
            goto LABEL_45;
          }
          if (*(unsigned __int8 *)(v46 + 1210) - 2 < 8 && (double v48 = *(double *)(v46 + 592), v48 >= v41))
          {
            double v49 = *(double *)(v46 + 600);
            BOOL v50 = v48 < v43;
            if (v49 < v42) {
              BOOL v50 = 0;
            }
            BOOL v51 = v50 && v49 < v44;
            if (v51) {
              LOBYTE(v47) = 2;
            }
            else {
              LOBYTE(v47) = 1;
            }
            if (v51 || v45 > 15.0) {
              goto LABEL_45;
            }
          }
          else if (v45 > 15.0)
          {
            LOBYTE(v47) = 1;
LABEL_45:
            md::Label::submitOcclusionQuery(v46, *(void *)(*((void *)this + 3) + 360), *(void *)(*((void *)this + 3) + 432), v47);
            char v17 = 1;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(v46 + 485) = 2;
        *(unsigned char *)(v46 + 480) = 0;
        *(unsigned char *)(v46 + 482) = 0;
        char v16 = 1;
        *(unsigned char *)(v46 + 1284) = 0;
      }
LABEL_37:
      v39 += 2;
      if (v39 == v40) {
        goto LABEL_54;
      }
    }
  }
}

void md::LabelCollidableItem::orientation(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::LabelCollidableItem::isCollidable(md::LabelCollidableItem *this)
{
  return 1;
}

uint64_t md::LabelCollidableItem::isAlwaysVisible(md::LabelCollidableItem *this)
{
  return 0;
}

uint64_t md::LabelCollidableItem::isHighlighted(md::LabelCollidableItem *this)
{
  return 0;
}

void UserAnnotationCollidableItem::~UserAnnotationCollidableItem(UserAnnotationCollidableItem *this)
{
}

void md::MapStandardLabeler::~MapStandardLabeler(md::MapStandardLabeler *this)
{
  md::MapStandardLabeler::~MapStandardLabeler(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t vars8;

  *(void *)this = &unk_1EF539320;
  *((void *)this + 1) = &unk_1EF539510;
  *((void *)this + 2) = &unk_1EF539558;
  uint64_t v2 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 64);
    if (v4)
    {
      BOOL v5 = *(void *)(v3 + 72);
      uint64_t v6 = *(void *)(v3 + 64);
      if (v5 != v4)
      {
        do
        {
          float v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7) {
            std::__shared_weak_count::__release_weak(v7);
          }
          v5 -= 16;
        }
        while (v5 != v4);
        uint64_t v6 = *(void *)(v3 + 64);
      }
      *(void *)(v3 + 72) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 88) + 40))(*(void *)(v3 + 88), v6, *(void *)(v3 + 80) - v6);
    }
    std::mutex::~mutex((std::mutex *)v3);
    MEMORY[0x1A6239270]();
  }
  float v8 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  unint64_t v9 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v9) {
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v9);
  }
  double v10 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  double v11 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 48))(v11);
  }
  md::StandardLabeler::~StandardLabeler(this);
}

void std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        BOOL v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v2;
    operator delete(v4);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v6, *(void *)(a1 + 24) - v6);
  }
  JUMPOUT(0x1A6239270);
}

md::LabelExternalObjectsModerator *std::__shared_ptr_pointer<md::LabelExternalObjectsModerator *,std::shared_ptr<md::LabelExternalObjectsModerator>::__shared_ptr_default_delete<md::LabelExternalObjectsModerator,md::LabelExternalObjectsModerator>,std::allocator<md::LabelExternalObjectsModerator>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(md::LabelExternalObjectsModerator **)(a1 + 24);
  if (result)
  {
    md::LabelExternalObjectsModerator::~LabelExternalObjectsModerator(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::LabelExternalObjectsModerator *,std::shared_ptr<md::LabelExternalObjectsModerator>::__shared_ptr_default_delete<md::LabelExternalObjectsModerator,md::LabelExternalObjectsModerator>,std::allocator<md::LabelExternalObjectsModerator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void sub_1A1F16208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1A1F1698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak((id *)(v25 - 128));

  _Unwind_Resume(a1);
}

void sub_1A1F16C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F16CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  double result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

void sub_1A1F19198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id a60,char a61)
{
  _Unwind_Resume(a1);
}

void *std::function<float ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(VKFlyoverTourState)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(std::string const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::optional<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  return a1;
}

void sub_1A1F19F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1A6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>>::~optional((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1A1F1A800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZ86__VKMapCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__3clE18VKFlyoverTourState_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(unsigned int *)(a1 + 48));
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v4 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(unsigned int *)(a1 + 48);
        if (v5 > 6) {
          uint64_t v6 = &stru_1EF593218;
        }
        else {
          uint64_t v6 = (__CFString *)*((void *)&off_1E5A8DFB8 + v5);
        }
        int v7 = 138412290;
        float v8 = v6;
        _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Flyover Tour: state change: %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
}

void sub_1A1F1B564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZ86__VKMapCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__2clERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = *(id *)(a1 + 32);
  if (v2 && *(void *)(a1 + 40))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 48);
    if (*((char *)v3 + 23) < 0) {
      uint64_t v3 = (uint64_t *)*v3;
    }
    uint64_t v4 = [NSString stringWithUTF8String:v3];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v5 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      int v7 = v4;
      _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_INFO, "Flyover Tour: label change: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1A1F1B9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::VKFlyoverTour>::__on_zero_shared(void *a1)
{
  id v2 = a1 + 31;
  uint64_t v3 = (void *)a1[34];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[30];
  if (v4 == a1 + 27)
  {
    (*(void (**)(void *))(a1[27] + 32))(a1 + 27);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t result = a1[26];
  if ((void *)result == a1 + 23)
  {
    uint64_t result = (*(uint64_t (**)(void *))(a1[23] + 32))(a1 + 23);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  int v6 = (md::AnimationData **)a1[4];
  a1[4] = 0;
  if (v6)
  {
    int v7 = *v6;
    *int v6 = 0;
    if (v7)
    {
      md::AnimationData::~AnimationData(v7);
      MEMORY[0x1A6239270]();
    }
    uint64_t result = MEMORY[0x1A6239270](v6, 0x1020C40F7B62AD5);
  }
  uint64_t v8 = a1[3];
  a1[3] = 0;
  if (v8)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(void **)(v8 + 8));
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<md::VKFlyoverTour>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::VKFlyoverTour>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A1F1C168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, id a15, uint64_t a16)
{
  std::function<void ()(GEOPDFlyover const*)>::~function(&a16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void *std::function<void ()(GEOPDFlyover const*)>::~function(void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZZ91__VKMapCameraController_startFlyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__1clEPK12GEOPDFlyover_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      [WeakRetained flyoverTourAnimation:v4 animateToStart:*(unsigned __int8 *)(a1 + 64) labelChanged:*(void *)(a1 + 48) stateChange:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 40);
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, 6);
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        int v6 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v7 = 0;
          _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "Flyover Tour: failed to load", v7, 2u);
        }
      }
    }
  }
}

void sub_1A1F1C4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1C9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1CC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_128c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE184c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE240c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE296c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  uint64_t v2 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v2;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  double result = *(double *)(a2 + 344);
  *(double *)(a1 + 344) = result;
  return result;
}

void sub_1A1F1D6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A1F1D970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1DD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1DE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1DF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1E2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1E424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

__n128 __copy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE(__n128 *a1, __n128 *a2)
{
  a1[2].n128_u8[8] = 0;
  if (a2[2].n128_u8[8])
  {
    __n128 result = a2[3];
    a1[4].n128_u64[0] = a2[4].n128_u64[0];
    a1[3] = result;
    a1[2].n128_u8[8] = 1;
  }
  return result;
}

void sub_1A1F1E554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1E8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A1F1EA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1EB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c24_ZTSN2gm10QuaternionIdEE(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  double result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

void sub_1A1F1EC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1EC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1ED3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1F210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1F330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1F488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1F510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1F790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1F880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1FBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F1FFC0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1A1F202F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  _Unwind_Resume(a1);
}

void sub_1A1F2040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1F20494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1F207D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F20920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1F20D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A1F20E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F20F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE96(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    *(unsigned char *)(result + 40) = 0;
  }
  return result;
}

double __copy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE96c24_ZTSN2gm10QuaternionIdEE(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v2 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v2;
    *(unsigned char *)(a1 + 40) = 1;
  }
  long long v3 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v3;
  double result = *(double *)(a2 + 120);
  *(double *)(a1 + 120) = result;
  return result;
}

void sub_1A1F215CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F21634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F21644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F21660()
{
}

void sub_1A1F21668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F21684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A1F2172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1F21834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL15_southKoreaRectv_block_invoke()
{
  _southKoreaRect(void)::koreaRect = 0x3FEB1C71C71C71C7;
  _southKoreaRect(void)::koreaRect = 0x3FE3378DDC9A7115;
  _southKoreaRect(void)::koreaRect = 0x3FEB8E38E38E38E4;
  _southKoreaRect(void)::koreaRect = 0x3FE3BDE17FAB3362;
}

void sub_1A1F21ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  double v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKMapCameraController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Stars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Stars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Stars::StarVertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Stars::StarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Stars::StarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::Stars::StarsMesh::~StarsMesh(ggl::Stars::StarsMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Stars::StarsMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Stars::StarsMesh *)((char *)this - 16));
}

void ggl::Stars::StarsMesh::~StarsMesh(ggl::Stars::StarsMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Stars::StarVertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Stars::StarVertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::Stars::StarsPipelineState::~StarsPipelineState(ggl::Stars::StarsPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Stars::StarsPipelineSetup::textureIsEnabled(ggl::Stars::StarsPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Stars::StarsPipelineSetup::constantDataIsEnabled(ggl::Stars::StarsPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Stars::StarsPipelineSetup::~StarsPipelineSetup(ggl::Stars::StarsPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

md::RoadSharedResources **std::unique_ptr<md::RoadSharedResources>::~unique_ptr[abi:nn180100](md::RoadSharedResources **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::RoadSharedResources::~RoadSharedResources(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

md::PatternedSharedResources **std::unique_ptr<md::PatternedSharedResources>::~unique_ptr[abi:nn180100](md::PatternedSharedResources **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t md::MultiSizeIconLabelPart::partCollidesWithObject(md::MultiSizeIconLabelPart *this, const md::CollisionObject *a2)
{
  unint64_t v2 = *((unsigned __int8 *)this + 937);
  uint64_t v3 = *((void *)this + 109);
  if (0x4EC4EC4EC4EC4EC5 * ((*((void *)this + 110) - v3) >> 4) <= v2) {
    return 1;
  }
  uint64_t v4 = (float *)(v3 + 208 * *((unsigned __int8 *)this + 937));
  if (v4[22] <= *((float *)a2 + 20)
    || v4[20] >= *((float *)a2 + 22)
    || *(float *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 92) <= *((float *)a2 + 21)
    || v4[21] >= *((float *)a2 + 23)
    || !*((void *)a2 + 20) && !*((void *)a2 + 21)
    || (*(unsigned char *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 200) & *((unsigned char *)a2 + 200)) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 168);
  if (*((void *)a2 + 21))
  {
    int v7 = a2;
    a2 = (const md::CollisionObject *)(v3 + 208 * v2);
    if (v6) {
      return md::CollisionObject::circlesCollideWithCircles(v7, a2);
    }
    return md::CollisionObject::circlesCollideWithRects((uint64_t)v7, (uint64_t)a2);
  }
  if (v6)
  {
    int v7 = (md::CollisionObject *)(v3 + 208 * *((unsigned __int8 *)this + 937));
    return md::CollisionObject::circlesCollideWithRects((uint64_t)v7, (uint64_t)a2);
  }
  if (*((unsigned char *)a2 + 196) || *(unsigned char *)(v3 + 208 * *((unsigned __int8 *)this + 937) + 196)) {
    return md::CollisionObject::rectsCollideWithRectsOBB(a2, (const md::CollisionObject *)v4);
  }
  else {
    return md::CollisionObject::rectsCollideWithRects((uint64_t)a2, (uint64_t)v4);
  }
}

uint64_t md::MultiSizeIconLabelPart::debugString@<X0>(md::MultiSizeIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v17);
  md::PointIconLabelPart::debugString(this, __p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v4, v5);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" Alt cnt=", 9);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" idx=", 5);
  std::ostream::operator<<();
  if ((v24 & 0x10) != 0)
  {
    unint64_t v8 = v23;
    if (v23 < v20)
    {
      unint64_t v23 = v20;
      unint64_t v8 = v20;
    }
    uint64_t v9 = (const void **)&v19;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      size_t v7 = 0;
      a2[23] = 0;
      goto LABEL_24;
    }
    uint64_t v9 = (const void **)v18;
    unint64_t v8 = v18[2];
  }
  double v10 = *v9;
  size_t v7 = v8 - (void)*v9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    double v13 = operator new(v11 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v12 | 0x8000000000000000;
    *(void *)a2 = v13;
    a2 = v13;
    goto LABEL_23;
  }
  a2[23] = v7;
  if (v7) {
LABEL_23:
  }
    memmove(a2, v10, v7);
LABEL_24:
  a2[v7] = 0;
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(v21);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v25);
}

void sub_1A1F226E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::MultiSizeIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (*(unsigned char *)(a1 + 938))
  {
    int v5 = *(unsigned __int8 *)(a1 + 937);
    int v6 = *(unsigned __int8 *)(a1 + 936);
    BOOL v8 = v5 == v6;
    BOOL v7 = v5 != v6;
    BOOL v8 = !v8 || a3 == 0;
    if (!v8) {
      goto LABEL_9;
    }
    return v7;
  }
  if (!a3) {
    return 0;
  }
LABEL_9:
  uint64_t v9 = (unsigned __int8 *)(a1 + 768);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(unsigned int *)(v10 + 48);
  LOBYTE(v10) = atomic_load((unsigned __int8 *)(v10 + 1240));
  uint64_t v13 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v11 + 552))(v11, v12, 0, v10 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v9, v13, a4);
}

uint64_t md::MultiSizeIconLabelPart::collidesWithItem(md::MultiSizeIconLabelPart *this, const md::LabelCollidableItem *a2, char a3)
{
  if (a3)
  {
    int v5 = *(uint64_t (**)(const md::LabelCollidableItem *, char *))(*(void *)a2 + 16);
    return v5(a2, (char *)this + 72);
  }
  else
  {
    unint64_t v7 = *((unsigned __int8 *)this + 937);
    uint64_t v8 = *((void *)this + 109);
    if (0x4EC4EC4EC4EC4EC5 * ((*((void *)this + 110) - v8) >> 4) <= v7)
    {
      return 1;
    }
    else
    {
      do
      {
        uint64_t result = (*(uint64_t (**)(const md::LabelCollidableItem *, unint64_t))(*(void *)a2 + 16))(a2, v8 + 208 * v7);
        if (!result) {
          break;
        }
        LOBYTE(v7) = *((unsigned char *)this + 937) + 1;
        *((unsigned char *)this + 937) = v7;
        unint64_t v7 = v7;
        uint64_t v8 = *((void *)this + 109);
      }
      while (0x4EC4EC4EC4EC4EC5 * ((*((void *)this + 110) - v8) >> 4) > (unint64_t)v7);
    }
  }
  return result;
}

uint64_t md::MultiSizeIconLabelPart::setCollisionResult(uint64_t this, char a2)
{
  *(unsigned char *)(this + 938) = a2;
  return this;
}

uint64_t md::MultiSizeIconLabelPart::collisionWillStart(uint64_t this)
{
  *(_WORD *)(this + 937) = 0;
  return this;
}

uint64_t md::MultiSizeIconLabelPart::checkResourcesReady(md::MultiSizeIconLabelPart *this, LabelManager *a2)
{
  uint64_t v2 = *((void *)this + 105);
  uint64_t v3 = *((void *)this + 106);
  if (v2 == v3) {
    return 37;
  }
  while (1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)v2 + 142));
    if ((v4 & 1) == 0) {
      return 15;
    }
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(*(void *)v2 + 143));
    if ((v5 & 1) == 0) {
      break;
    }
    v2 += 16;
    if (v2 == v3) {
      return 37;
    }
  }
  return 16;
}

float md::MultiSizeIconLabelPart::animationSize(md::MultiSizeIconLabelPart *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 105) + 16 * *((unsigned __int8 *)this + 936));
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(v1 + 144));
  if (v2) {
    return *(float *)(v1 + 56) - *(float *)(v1 + 48);
  }
  else {
    return -INFINITY;
  }
}

uint64_t md::MultiSizeIconLabelPart::collisionBoundsForStaging(md::MultiSizeIconLabelPart *this)
{
  return *((void *)this + 109) + 80;
}

uint64_t md::MultiSizeIconLabelPart::setMinAlternateStyleIndex(uint64_t this, char a2)
{
  unsigned int v2 = (a2 + 1);
  if ((((*(_DWORD *)(this + 848) - *(_DWORD *)(this + 840)) >> 4) - 1) < v2) {
    unsigned int v2 = (((*(_DWORD *)(this + 848) - *(_DWORD *)(this + 840)) >> 4) - 1);
  }
  if (*(unsigned __int8 *)(this + 937) > v2) {
    LOBYTE(v2) = *(unsigned char *)(this + 937);
  }
  *(unsigned char *)(this + 937) = v2;
  return this;
}

uint64_t md::MultiSizeIconLabelPart::alternateStyleIndex(md::MultiSizeIconLabelPart *this)
{
  return (*((unsigned char *)this + 937) - 1);
}

float md::MultiSizeIconLabelPart::resolveForDisplay(md::MultiSizeIconLabelPart *this, float result)
{
  if (*((unsigned char *)this + 938))
  {
    unint64_t v3 = *((unsigned __int8 *)this + 937);
    uint64_t v4 = *((void *)this + 105);
    if (v3 < (*((void *)this + 106) - v4) >> 4)
    {
      *((unsigned char *)this + 936) = v3;
      long long v5 = *(_OWORD *)(v4 + 16 * v3);
      uint64_t v6 = *(void *)(v4 + 16 * v3 + 8);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 81);
      *((_OWORD *)this + 40) = v5;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      (*(void (**)(md::MultiSizeIconLabelPart *, uint64_t, char *, char *))(*(void *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
      if (*((unsigned char *)this + 936))
      {
        uint64_t result = *((float *)this + 4 * *((unsigned __int8 *)this + 936) + 224);
        *((float *)this + 144) = result;
      }
    }
  }
  return result;
}

uint64_t md::MultiSizeIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1);
  if (result == 37)
  {
    if (*(void *)(a1 + 872) == *(void *)(a1 + 880))
    {
      uint64_t v15 = *(void *)(a1 + 848) - *(void *)(a1 + 840);
      if (v15)
      {
        std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a1 + 872), v15 >> 4);
        uint64_t v16 = *(void *)(a1 + 840);
        if (*(void *)(a1 + 848) != v16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          unint64_t v19 = 0;
          do
          {
            md::IconLabelPart::prepareCollisionObject(a1, 0, (void *)(v16 + v17), *(void *)(a1 + 872) + v18);
            ++v19;
            uint64_t v16 = *(void *)(a1 + 840);
            v18 += 208;
            v17 += 16;
          }
          while (v19 < (*(void *)(a1 + 848) - v16) >> 4);
        }
      }
    }
    if (*(unsigned char *)(a1 + 628))
    {
      uint64_t v11 = *(uint64_t **)(a1 + 840);
      if (*(uint64_t **)(a1 + 848) != v11)
      {
        uint64_t v12 = *v11;
        unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v12 + 144));
        float v14 = (v13 & 1) != 0 ? *(float *)(v12 + 72) - *(float *)(v12 + 64) : -INFINITY;
        unint64_t v20 = (float32x2_t *)(a1 + 620);
        uint64_t v21 = **(void **)(a1 + 840);
        unsigned __int8 v22 = atomic_load((unsigned __int8 *)(v21 + 144));
        if (v22) {
          *(float *)v9.i32 = *(float *)(v21 + 76) - *(float *)(v21 + 68);
        }
        else {
          v9.i32[0] = -8388608;
        }
        *(float *)v9.i32 = 0.5 - (float)(fminf(*(float *)v9.i32, v14) * 0.5);
        __int8 v23 = *(unsigned char *)(a1 + 631);
        int v24 = *(int32x2_t **)(a1 + 872);
        float32x2_t v10 = *v20;
        int32x2_t v25 = (int32x2_t)vmaxnm_f32(*v20, (float32x2_t)vdup_lane_s32(v9, 0));
        v24[12] = v25;
        v24[24].i8[7] = v23;
        uint64_t v26 = *(void *)(a1 + 840);
        if ((unint64_t)(*(void *)(a1 + 848) - v26) >= 0x11)
        {
          uint64_t v27 = 0;
          unint64_t v28 = 1;
          uint64_t v29 = 407;
          do
          {
            uint64_t v33 = *(void *)(v26 + v27 + 16);
            unsigned __int8 v34 = atomic_load((unsigned __int8 *)(v33 + 144));
            if (v34) {
              *(float *)v25.i32 = *(float *)(v33 + 72) - *(float *)(v33 + 64);
            }
            else {
              v25.i32[0] = -8388608;
            }
            uint64_t v35 = *(void *)(*(void *)(a1 + 840) + v27 + 16);
            unsigned __int8 v36 = atomic_load((unsigned __int8 *)(v35 + 144));
            if (v36) {
              float v30 = *(float *)(v35 + 76) - *(float *)(v35 + 68);
            }
            else {
              float v30 = -INFINITY;
            }
            *(float *)v25.i32 = 0.5 - (float)(fminf(v30, *(float *)v25.i32) * 0.5);
            char v31 = *(unsigned char *)(a1 + v27 + 916);
            unsigned __int16 v32 = (unsigned char *)(*(void *)(a1 + 872) + v29);
            float32x2_t v10 = *(float32x2_t *)(a1 + v27 + 904);
            int32x2_t v25 = (int32x2_t)vmaxnm_f32(v10, (float32x2_t)vdup_lane_s32(v25, 0));
            *(int32x2_t *)(v32 - 103) = v25;
            unsigned char *v32 = v31;
            ++v28;
            uint64_t v26 = *(void *)(a1 + 840);
            v29 += 208;
            v27 += 16;
          }
          while (v28 < (*(void *)(a1 + 848) - v26) >> 4);
        }
      }
    }
    uint64_t v37 = *(void *)(a1 + 872);
    uint64_t v38 = *(void *)(a1 + 880);
    if (v37 != v38)
    {
      float32x2_t v39 = *a3;
      float32x2_t v40 = *a4;
      float32x2_t v41 = vadd_f32(*a4, *a3);
      do
      {
        *(float32x2_t *)(v37 + 32) = v41;
        md::CollisionObject::setupShapeData(v37, *(double *)&v39, *(double *)&v40, *(double *)&v10);
        v37 += 208;
      }
      while (v37 != v38);
    }
    uint64_t v42 = *(void *)(a1 + 832);
    if (v42) {
      (*(void (**)(uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(void *)v42 + 80))(v42, a2, a3, a4);
    }
    return md::IconLabelPart::layoutForStaging(a1, a2, a3, a4);
  }
  return result;
}

uint64_t md::CollisionObject::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    free(*(void **)(a1 + 168));
    free(*(void **)(a1 + 160));
    free(*(void **)(a1 + 184));
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(void *)(a2 + 184) = 0;
    *(_DWORD *)(a2 + 192) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(_DWORD *)(a2 + 176) = 0;
  }
  return a1;
}

float md::MultiSizeIconLabelPart::updateWithStyle(md::LabelStyle ***this, md::LabelManager *a2)
{
  md::ImageLabelPart::updateWithStyle((md::ImageLabelPart *)this, a2);
  long long v5 = this[104];
  if (v5) {
    (*((void (**)(md::LabelStyle **, md::LabelManager *))*v5 + 9))(v5, a2);
  }
  if ((unint64_t)((char *)this[106] - (char *)this[105]) >= 0x11)
  {
    uint64_t v6 = this[4];
    unint64_t v7 = 1;
    uint64_t v8 = 916;
    do
    {
      int32x2_t v9 = (float *)((char *)this + v8);
      float32x2_t v10 = *v6;
      if (v7 - 1 >= *((unsigned __int8 *)*v6 + 126)) {
        goto LABEL_5;
      }
      if (!*((unsigned char *)v10 + 457)) {
        md::LabelStyle::prepareAlternateStyles(*v6);
      }
      if (*((unsigned char *)v10 + v8 - 556))
      {
        uint64_t v11 = *(void *)((char *)v10 + v8 - 548);
        *((unsigned char *)this + v8) = *(unsigned char *)(v11 + 95);
        uint64_t v12 = *(void *)(v11 + 8);
        float result = *(float *)(v11 + 16);
        *(v9 - 1) = result;
        *(void *)(v9 - 3) = v12;
      }
      else
      {
LABEL_5:
        *(v9 - 1) = 1.0;
        *(void *)(v9 - 3) = 0;
        *((unsigned char *)this + v8) = 0;
      }
      ++v7;
      v8 += 16;
    }
    while (v7 < ((char *)this[106] - (char *)this[105]) >> 4);
  }
  if (*((unsigned char *)this + 936))
  {
    float result = *(float *)&this[2 * *((unsigned __int8 *)this + 936) + 112];
    *((float *)this + 144) = result;
  }
  return result;
}

void md::MultiSizeIconLabelPart::~MultiSizeIconLabelPart(md::MultiSizeIconLabelPart *this)
{
  md::MultiSizeIconLabelPart::~MultiSizeIconLabelPart(this);
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  unsigned int v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t vars8;

  *(void *)this = &unk_1EF5417D0;
  unsigned int v2 = *((void *)this + 109);
  if (v2)
  {
    int v3 = *((void *)this + 110);
    uint64_t v4 = *((void *)this + 109);
    if (v3 != v2)
    {
      do
      {
        free(*(void **)(v3 - 48));
        free(*(void **)(v3 - 40));
        free(*(void **)(v3 - 24));
        v3 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 109);
    }
    *((void *)this + 110) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 112) + 40))(*((void *)this + 112), v4, *((void *)this + 111) - v4);
  }
  long long v5 = *((void *)this + 105);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 106);
    unint64_t v7 = *((void *)this + 105);
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 16;
      }
      while (v6 != v5);
      unint64_t v7 = *((void *)this + 105);
    }
    *((void *)this + 106) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 108) + 40))(*((void *)this + 108), v7, *((void *)this + 107) - v7);
  }
  *(void *)this = &unk_1EF539EE0;
  int32x2_t v9 = *((void *)this + 104);
  *((void *)this + 104) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (*((char *)this + 791) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 99) + 40))(*((void *)this + 99), *((void *)this + 96), *((void *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  }
  md::IconLabelPart::~IconLabelPart(this);
}

uint64_t md::PointLabelFeature::nextMultiPoiFallbackAttributeKey()
{
  return 0;
}

uint64_t md::PointLabelFeature::populateMultiPoiAttributeKey()
{
  return 0;
}

uint64_t md::PointLabelFeatureBase::collisionPriority(md::PointLabelFeatureBase *this)
{
  return 0;
}

double md::PointLabelFeatureBase::routeOffsetInMeters(md::PointLabelFeatureBase *this)
{
  return 0.0;
}

uint64_t md::LabelFeature::publicShieldName(md::LabelFeature *this)
{
  return 0;
}

void md::StorefrontLabelFeature::debugDraw(void *a1, uint64_t a2, float32x2_t *a3, _DWORD *a4)
{
  v111[1] = *MEMORY[0x1E4F143B8];
  double v4 = 1.0;
  if (*(unsigned char *)(a2 + 448)) {
    double v5 = 0.0000000249532021;
  }
  else {
    double v5 = 1.0;
  }
  uint64_t v6 = (void *)a1[57];
  unint64_t v7 = a1 + 58;
  if (v6 != a1 + 58)
  {
    uint64_t v12 = (float64x2_t *)(a2 + 1304);
    uint64_t v101 = a2 + 440;
    float v13 = v5 * 6.0;
    float v100 = v13;
    double v14 = 6.28318531;
    double v15 = -3.14159265;
    double v16 = -1.57079633;
    do
    {
      uint64_t v17 = (unsigned int *)(v6 + 4);
      if (!*a4 || *v17 == *a4)
      {
        uint64_t v18 = *v7;
        if (*v7)
        {
          unsigned int v19 = *v17;
          unint64_t v20 = v7;
          do
          {
            unsigned int v21 = *(_DWORD *)(v18 + 32);
            _CF = v21 >= v19;
            if (v21 >= v19) {
              __int8 v23 = (uint64_t *)v18;
            }
            else {
              __int8 v23 = (uint64_t *)(v18 + 8);
            }
            if (_CF) {
              unint64_t v20 = (void *)v18;
            }
            uint64_t v18 = *v23;
          }
          while (*v23);
          if (v20 != v7 && v19 >= *((_DWORD *)v20 + 8))
          {
            uint64_t v24 = *(void *)(a1[84] + 16 * *((unsigned __int8 *)v20 + 121));
            if (v24)
            {
              uint64_t v25 = (*(uint64_t (**)(void *, void *))(*a1 + 112))(a1, v6 + 4);
              uint64_t v26 = v25;
              if (*(unsigned char *)(a2 + 448))
              {
                uint64_t v27 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v25);
                double v28 = *v27;
                double v29 = v27[1];
                float v30 = *(float *)(v26 + 40);
                double v31 = v5 * v30;
                _ZF = v30 == 3.4028e38;
                double v33 = 0.0;
                if (!_ZF) {
                  double v33 = v31;
                }
              }
              else if (*(unsigned char *)(v25 + 44))
              {
                double v28 = *(double *)v25;
                double v29 = *(double *)(v25 + 8);
                double v33 = *(double *)(v25 + 16);
              }
              else
              {
                long double v34 = *(double *)(v25 + 24) * v14;
                long double v35 = exp(v15 + *(double *)(v25 + 32) * v14);
                double v36 = v16 + atan(v35) * 2.0;
                long double v37 = fmod(v34, v14);
                double v38 = fmod(v37 + v14, v14) + v15;
                __double2 v39 = __sincos_stret(v36);
                double v40 = sqrt(v4 + v39.__sinval * v39.__sinval * -0.00669437999);
                double v41 = v5;
                double v42 = v14;
                double v43 = v16;
                double v44 = v15;
                double v45 = 6378137.0 / v40;
                double v46 = 6378137.0 / v40 * v39.__cosval;
                __double2 v47 = __sincos_stret(v38);
                double v28 = v46 * v47.__cosval;
                double v29 = v46 * v47.__sinval;
                *(double *)uint64_t v26 = v46 * v47.__cosval;
                *(double *)(v26 + 8) = v46 * v47.__sinval;
                double v33 = v39.__sinval * 0.99330562 * v45;
                double v15 = v44;
                double v16 = v43;
                double v14 = v42;
                double v5 = v41;
                double v4 = 1.0;
                *(double *)(v26 + 16) = v33;
                *(unsigned char *)(v26 + 44) = 1;
              }
              double v103 = v33;
              double v104 = v28;
              v106.f64[0] = v28;
              v106.f64[1] = v29;
              double v102 = v29;
              double v107 = v33;
              if (!md::LabelLayoutContext::isDistanceClipped(v101, (uint64_t)&v106))
              {
                float32x2_t v48 = (float32x2_t)(*(uint64_t (**)(void *, void *))(*a1 + 136))(a1, v6 + 4);
                if ((v49 & 0xFF00000000) == 0)
                {
                  uint64_t v99 = std::__throw_bad_optional_access[abi:nn180100]();
                  md::StorefrontLabelFeature::debugString(v99);
                  return;
                }
                _D1 = *(double *)(a2 + 1360);
                double v51 = *(double *)(a2 + 1392);
                float64x2_t v52 = v12[2];
                float64x2_t v53 = v12[4];
                float64x2_t v54 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v12[6], *v12, v104), v52, v102), v53, v103), v4 / (*(double *)(a2 + 1424) + *(double *)(a2 + 1328) * v104 + _D1 * v102 + v51 * v103));
                _Q18 = vaddq_f64(v106, vcvtq_f64_f32(vmul_n_f32(v48, v100)));
                __asm { FMLA            D3, D1, V18.D[1] }
                float32x2_t v59 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v12[6], *v12, _Q18.f64[0]), v52, _Q18, 1), v53, v103 + (float)(*(float *)&v49 * v100)), v4 / (_D3 + v51 * (v103 + (float)(*(float *)&v49 * v100)))));
                float32x2_t v105 = v59;
                float32x2_t v60 = vcvt_f32_f64(v54);
                a3[13].i32[0] = 0x40000000;
                a3[1] = v60;
                ggl::DebugConsole::drawSymbol(a3, 1);
                a3[1] = v59;
                ggl::DebugConsole::drawSymbol(a3, 0);
                a3[1] = v60;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v105);
                double v61 = *(float *)(v24 + 56);
                float v62 = *(float *)(v24 + 84);
                double v63 = *(float *)(v24 + 80);
                float v64 = *(float *)(v24 + 88);
                double v65 = (float)(v64 * 0.5);
                double v66 = (float)(v62 * 0.5);
                double v67 = *(double *)(v24 + 16) - (v66 * v61 + v65 * v63);
                float64x2_t v68 = vcvtq_f64_f32(*(float32x2_t *)(v24 + 48));
                float64x2_t v69 = vcvtq_f64_f32(*(float32x2_t *)(v24 + 72));
                _Q4 = vsubq_f64(*(float64x2_t *)v24, vmlaq_n_f64(vmulq_n_f64(v68, v66), v69, v65));
                double v71 = v64;
                _Q6 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL);
                _D17 = *(void *)(a2 + 1328);
                _D18 = *(void *)(a2 + 1360);
                __asm { FMLA            D20, D18, V4.D[1] }
                float64x2_t v76 = *v12;
                float64x2_t v77 = v12[2];
                float64x2_t v78 = v12[6];
                float64x2_t v79 = vmlaq_laneq_f64(vmlaq_n_f64(v78, *v12, _Q4.f64[0]), v77, _Q4, 1);
                _Q4 = vmlaq_n_f64(_Q4, v69, v71);
                double v81 = v62;
                double v82 = v81 * v61;
                float64x2_t v83 = vmulq_n_f64(v68, v81);
                _Q7 = (float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL);
                v69.f64[1] = _Q7.f64[1];
                v69.f64[0] = v82;
                double v85 = v67 + v71 * v63;
                v86.f64[1] = _Q6.f64[1];
                v86.f64[0] = v85;
                _Q3 = vaddq_f64(v69, v86);
                _Q2 = vaddq_f64(v83, _Q4);
                _Q7.f64[1] = v82;
                _Q6.f64[1] = v67;
                _Q0 = vaddq_f64(_Q7, _Q6);
                _Q6.f64[0] = *(float64_t *)(a2 + 1392);
                float64x2_t v90 = v12[4];
                __asm { FMLA            D7, D18, V4.D[1] }
                float32x2_t v91 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v78, *v12, _Q4.f64[0]), v77, _Q4, 1), v90, v85), v4 / (_Q7.f64[0] + _Q6.f64[0] * v85)));
                float32x2_t v108 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v79, v90, v67), v4 / (_D20 + _Q6.f64[0] * v67)));
                float32x2_t v109 = v91;
                __asm { FMLA            D1, D18, V2.D[1] }
                float32x2_t v93 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v78, v76, _Q2.f64[0]), v77, _Q2, 1), v90, _Q3.f64[0]), v4 / vmlad_n_f64(_D1, _Q6.f64[0], _Q3.f64[0])));
                __asm
                {
                  FMLA            D19, D17, V3.D[1]
                  FMLA            D19, D6, V0.D[1]
                }
                float32x2_t v96 = vcvt_f32_f64(vmulq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v78, v76, _Q3, 1), v77, _Q0.f64[0]), v90, _Q0, 1), v4 / _D19));
                float32x2_t v110 = v93;
                v111[0] = v96;
                a3[1] = v108;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v109);
                a3[1] = v91;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v110);
                a3[1] = v93;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v111);
                a3[1] = v96;
                ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v108);
              }
            }
          }
        }
      }
      uint64_t v97 = (void *)v6[1];
      if (v97)
      {
        do
        {
          unint64_t v98 = v97;
          uint64_t v97 = (void *)*v97;
        }
        while (v97);
      }
      else
      {
        do
        {
          unint64_t v98 = (void *)v6[2];
          _ZF = *v98 == (void)v6;
          uint64_t v6 = v98;
        }
        while (!_ZF);
      }
      uint64_t v6 = v98;
    }
    while (v98 != v7);
  }
}

uint64_t md::StorefrontLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, unsigned char *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v37);
  md::PointLabelFeature::debugString(a1, a2, a3, a4, __p);
  if ((v36 & 0x80u) == 0) {
    float32x2_t v10 = __p;
  }
  else {
    float32x2_t v10 = (void **)__p[0];
  }
  if ((v36 & 0x80u) == 0) {
    uint64_t v11 = v36;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)v10, v11);
  if ((char)v36 < 0)
  {
    operator delete(__p[0]);
    uint64_t v12 = *(void *)(a1 + 464);
    if (!v12) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 464);
    if (!v12) {
      goto LABEL_22;
    }
  }
  unsigned int v13 = *a3;
  uint64_t v14 = a1 + 464;
  do
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 >= v13;
    if (v15 >= v13) {
      uint64_t v17 = (uint64_t *)v12;
    }
    else {
      uint64_t v17 = (uint64_t *)(v12 + 8);
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 != a1 + 464 && v13 >= *(_DWORD *)(v14 + 32))
  {
    uint64_t v18 = v37[0];
    *(_DWORD *)((char *)&v37[1] + *(void *)(v37[0] - 24)) = *(_DWORD *)((unsigned char *)&v37[1] + *(void *)(v37[0] - 24)) & 0xFFFFFEFB | 4;
    *(void *)((char *)&v37[2] + *(void *)(v18 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" Size:(", 7);
    unsigned int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
    unint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")\n", 2);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" Coordinate:(", 13);
    unsigned int v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
    unsigned __int8 v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
    __int8 v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)")\n", 2);
    *(void *)((char *)&v37[2] + *(void *)(v37[0] - 24)) = 4;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" Normal:(", 9);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)")\n", 2);
  }
LABEL_22:
  if ((v44 & 0x10) != 0)
  {
    unint64_t v28 = v43;
    if (v43 < v40)
    {
      unint64_t v43 = v40;
      unint64_t v28 = v40;
    }
    double v29 = (const void **)&v39;
  }
  else
  {
    if ((v44 & 8) == 0)
    {
      size_t v27 = 0;
      a5[23] = 0;
      goto LABEL_37;
    }
    double v29 = (const void **)v38;
    unint64_t v28 = v38[2];
  }
  float v30 = *v29;
  size_t v27 = v28 - (void)*v29;
  if (v27 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    double v33 = operator new(v31 + 1);
    *((void *)a5 + 1) = v27;
    *((void *)a5 + 2) = v32 | 0x8000000000000000;
    *(void *)a5 = v33;
    a5 = v33;
    goto LABEL_36;
  }
  a5[23] = v27;
  if (v27) {
LABEL_36:
  }
    memmove(a5, v30, v27);
LABEL_37:
  a5[v27] = 0;
  v37[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v37[1] = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete(v41);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v45);
}

void sub_1A1F23D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::containsPixel()
{
  return 0;
}

uint64_t md::PointLabelFeature::venueComponentType(md::PointLabelFeature *this)
{
  return *((unsigned __int8 *)this + 646);
}

uint64_t md::PointLabelFeature::venueLookInsideFloorOrdinal@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  if (*(unsigned char *)(this + 642))
  {
    *(_WORD *)(a2 + 2) = *(_WORD *)(this + 644);
    *(unsigned char *)a2 = 1;
  }
  return this;
}

uint64_t md::PointLabelFeature::venueFloorOrdinal(md::PointLabelFeature *this)
{
  return *((__int16 *)this + 320);
}

uint64_t md::PointLabelFeature::venueComponentID(md::PointLabelFeature *this)
{
  return *((void *)this + 79);
}

uint64_t md::PointLabelFeature::venueLevelID(md::PointLabelFeature *this)
{
  return *((void *)this + 78);
}

uint64_t md::PointLabelFeature::venueBuildingID(md::PointLabelFeature *this)
{
  return *((void *)this + 77);
}

uint64_t md::PointLabelFeature::isMuninLandmark(md::PointLabelFeature *this)
{
  return *((unsigned __int8 *)this + 651);
}

double md::LabelFeature::minLabelSpacing(md::LabelFeature *this, int a2, const LabelLayoutContext *a3)
{
  return 0.0;
}

float md::StorefrontLabelFeature::elevationOffset()
{
  return 4.0;
}

id md::PointLabelFeature::customFeatureAnnotation(id *this)
{
  return this[66];
}

uint64_t md::PointLabelFeature::animationID(md::PointLabelFeature *this)
{
  return *((void *)this + 48);
}

uint64_t md::PointLabelFeature::clientFeatureID(md::PointLabelFeature *this)
{
  uint64_t v1 = *((void *)this + 63);
  if (v1) {
    return *(void *)(v1 + 24);
  }
  else {
    return 0;
  }
}

unint64_t md::StorefrontLabelFeature::facingVector(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2)
  {
    unsigned int v3 = *a2;
    uint64_t v4 = a1 + 464;
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        unint64_t v7 = (uint64_t *)v2;
      }
      else {
        unint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 == a1 + 464
      || v3 < *(_DWORD *)(v4 + 32)
      || (uint64_t v9 = *(void *)(*(void *)(a1 + 672) + 16 * *(unsigned __int8 *)(v4 + 121))) == 0)
    {
      unint64_t v8 = 0;
      uint64_t v2 = 0;
    }
    else
    {
      unint64_t v8 = *(void *)(v9 + 60) & 0xFFFFFFFFFFFFFF00;
      uint64_t v2 = *(void *)(v9 + 60);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  return v2 | v8;
}

void md::LabelFeature::secondaryLabelPoint(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[48] = 0;
}

long long *md::StorefrontLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2)
  {
    unsigned int v3 = *a2;
    uint64_t v4 = a1 + 464;
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        unint64_t v7 = (uint64_t *)v2;
      }
      else {
        unint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 464 && v3 >= *(_DWORD *)(v4 + 32))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 672) + 16 * *(unsigned __int8 *)(v4 + 121));
      if (v8) {
        return (long long *)(v8 + 96);
      }
    }
  }
  {
    qword_1EB317748 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1EB317738 = 0u;
    dword_1EB317750 = 2139095039;
    word_1EB317754 = 256;
    byte_1EB317756 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

void md::StorefrontLabelFeature::~StorefrontLabelFeature(md::StorefrontLabelFeature *this)
{
  *(void *)this = &unk_1EF542320;
  uint64_t v2 = *((void *)this + 84);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 85);
    uint64_t v4 = (void *)*((void *)this + 84);
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 84);
    }
    *((void *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF542320;
  uint64_t v2 = *((void *)this + 84);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 85);
    uint64_t v4 = (void *)*((void *)this + 84);
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 84);
    }
    *((void *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

void md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    unsigned int v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      unsigned int v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARProcessMeshComponentsLogic::runBeforeLayout(int8x8_t **a1)
{
  uint64_t v2 = a1[18];
  uint64_t v3 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v2);
  uint64_t v4 = gdc::Registry::storage<arComponents::CustomBoxCreateDesc>(v2);
  unsigned int v5 = (void *)v4;
  uint64_t v6 = v4 + 32;
  uint64_t v8 = v3[7];
  uint64_t v7 = v3[8];
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= (unint64_t)(v7 - v8)) {
    char v9 = v3 + 4;
  }
  else {
    char v9 = (void *)(v4 + 32);
  }
  if (v3 + 4 == v9 && v8 != v7)
  {
    do
    {
      unint64_t v98 = *(unsigned int *)(v8 + 4);
      uint64_t v99 = v5[4];
      unint64_t v100 = (v5[5] - v99) >> 3;
      if (v98 >> 7 < v100)
      {
        uint64_t v101 = *(void *)(v99 + 8 * (v98 >> 7));
        if (v101)
        {
          unint64_t v102 = *(unsigned __int16 *)(v101 + 2 * (v98 & 0x7F));
          uint64_t v104 = v5[7];
          uint64_t v103 = v5[8];
          unint64_t v105 = (v103 - v104) >> 3;
          if (v105 > v102)
          {
            uint64_t v106 = v104 + 8 * v102;
            if (v106 != v103 && *(_DWORD *)(v106 + 4) == v98)
            {
              unint64_t v108 = *(void *)v8;
              unint64_t v109 = *(void *)v8 >> 39;
              if (v109 < v100
                && (uint64_t v110 = *(void *)(v99 + 8 * v109)) != 0
                && (unint64_t v111 = *(unsigned __int16 *)(v110 + 2 * (HIDWORD(v108) & 0x7F)), v105 > v111)
                && ((uint64_t v112 = v104 + 8 * v111, v112 != v103)
                  ? (BOOL v113 = *(_DWORD *)(v112 + 4) == HIDWORD(v108))
                  : (BOOL v113 = 0),
                    v113))
              {
                uint64_t v97 = (float64_t **)(v5[10] + 24 * v111);
              }
              else
              {
                uint64_t v97 = (float64_t **)v5[11];
              }
              md::ARProcessMeshComponentsLogic::prepareCustomBoxMeshes(md::LayoutContext const&)::$_0::operator()((uint64_t)a1, v108, v97);
            }
          }
        }
      }
      v8 += 8;
    }
    while (v8 != v7);
  }
  if ((void *)v6 == v9)
  {
    uint64_t v142 = v5[7];
    uint64_t v143 = v5[8];
    if (v142 != v143)
    {
      uint64_t v144 = (float64_t **)v5[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v142 + 4);
        uint64_t v146 = v3[4];
        if (v145 >> 7 < (v3[5] - v146) >> 3)
        {
          uint64_t v147 = *(void *)(v146 + 8 * (v145 >> 7));
          if (v147)
          {
            unint64_t v148 = *(unsigned __int16 *)(v147 + 2 * (v145 & 0x7F));
            uint64_t v150 = v3[7];
            uint64_t v149 = v3[8];
            if (v148 < (v149 - v150) >> 3)
            {
              uint64_t v151 = v150 + 8 * v148;
              if (v151 != v149 && *(_DWORD *)(v151 + 4) == v145) {
                md::ARProcessMeshComponentsLogic::prepareCustomBoxMeshes(md::LayoutContext const&)::$_0::operator()((uint64_t)a1, *(void *)v142, v144);
              }
            }
          }
        }
        v144 += 3;
        v142 += 8;
      }
      while (v142 != v143);
    }
  }
  uint64_t v11 = gdc::Registry::storage<arComponents::IcoSphereMesh>(a1[18]);
  uint64_t v12 = *(unint64_t **)(v11 + 56);
  for (uint64_t i = *(unint64_t **)(v11 + 64); v12 != i; ++v12)
  {
    unint64_t v14 = *v12;
    md::ARMeshRenderResources::generateIcoSphereCached((md::ARMeshRenderResources *)&v233, 2u);
    unsigned int v15 = a1[18];
    BOOL v16 = (std::__shared_weak_count *)v234;
    v229[0] = v233;
    v229[1] = v234;
    if (v234) {
      atomic_fetch_add_explicit(v234 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v15);
    gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v17, v14, (uint64_t *)v229);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v18 = a1[18];
    *(_OWORD *)uint64_t v229 = v235;
    unsigned int v230 = (unsigned char *)v236[0];
    unsigned int v19 = (void *)gdc::Registry::storage<arComponents::Boundary>(v18);
    gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v19, v14, (long long *)v229);
    unint64_t v20 = (void *)gdc::Registry::storage<arComponents::IcoSphereMesh>(a1[18]);
    gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::remove(v20, v14);
    unsigned int v21 = (std::__shared_weak_count *)v234;
    if (v234 && !atomic_fetch_add(v234 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0xCBF29CE484222325;
  v229[0] = v232;
  v229[1] = v232;
  unsigned int v230 = v232;
  unint64_t v231 = 4;
  long long v224 = v228;
  uint64_t v225 = (unint64_t *)v228;
  uint64_t v226 = v228;
  uint64_t v227 = 4;
  unint64_t v24 = 0xCBF29CE484222325;
  do
    unint64_t v24 = 0x100000001B3 * (v24 ^ aStdStringViewG_776[v22++ + 38]);
  while (v22 != 122);
  uint64_t v25 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(a1[18], v24);
  size_t v27 = (unint64_t *)v25[7];
  uint64_t v26 = (unint64_t *)v25[8];
  uint64_t v28 = (char *)v26 - (char *)v27;
  if (v26 != v27)
  {
    if ((v29 = *((unsigned int *)v27 + 1), uint64_t v30 = v25[4], v31 = (v25[5] - v30) >> 3, v29 >> 7 >= v31)
      || (uint64_t v32 = *(void *)(v30 + 8 * (v29 >> 7))) == 0
      || (unint64_t v33 = *(unsigned __int16 *)(v32 + 2 * (v29 & 0x7F)), v33 >= v28 >> 3)
      || ((long double v34 = &v27[v33], v34 != v26) ? (v35 = *((_DWORD *)v34 + 1) == v29) : (v35 = 0), !v35))
    {
      unsigned __int8 v36 = v27 + 1;
      if (v27 + 1 == v26)
      {
LABEL_77:
        unint64_t v43 = (unint64_t *)v229[1];
        goto LABEL_78;
      }
      unint64_t v37 = v28 >> 3;
      while (1)
      {
        unint64_t v38 = *((unsigned int *)v36 + 1);
        if (v38 >> 7 < v31)
        {
          uint64_t v39 = *(void *)(v30 + 8 * (v38 >> 7));
          if (v39)
          {
            unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (v38 & 0x7F));
            if (v37 > v40)
            {
              double v41 = &v27[v40];
              if (v41 != v26 && *((_DWORD *)v41 + 1) == v38) {
                break;
              }
            }
          }
        }
        if (++v36 == v26) {
          goto LABEL_77;
        }
      }
      size_t v27 = v36;
    }
  }
  unint64_t v43 = (unint64_t *)v229[1];
  if (v26 != v27)
  {
    while (1)
    {
      unint64_t v44 = *v27;
      uint64_t v45 = v229[0];
      uint64_t v46 = ((char *)v43 - (char *)v229[0]) >> 3;
      if (v231 < v46 + 1) {
        break;
      }
LABEL_65:
      *unint64_t v43 = v44;
      unint64_t v43 = (unint64_t *)((char *)v229[1] + 8);
      v229[1] = (char *)v229[1] + 8;
      double v65 = (unint64_t *)v25[8];
      double v66 = v27 + 1;
      if (v27 + 1 != v65)
      {
        uint64_t v67 = v25[4];
        uint64_t v68 = v25[7];
        while (1)
        {
          unint64_t v69 = *((unsigned int *)v66 + 1);
          if (v69 >> 7 < (v25[5] - v67) >> 3)
          {
            uint64_t v70 = *(void *)(v67 + 8 * (v69 >> 7));
            if (v70)
            {
              unint64_t v71 = *(unsigned __int16 *)(v70 + 2 * (v69 & 0x7F));
              if (((uint64_t)v65 - v68) >> 3 > v71)
              {
                uint64_t v72 = v68 + 8 * v71;
                if ((unint64_t *)v72 != v65 && *(_DWORD *)(v72 + 4) == v69) {
                  break;
                }
              }
            }
          }
          if (++v66 == v65) {
            goto LABEL_45;
          }
        }
        double v65 = v66;
      }
LABEL_45:
      size_t v27 = v65;
      if (v26 == v65) {
        goto LABEL_78;
      }
    }
    unint64_t v222 = *v27;
    __double2 v47 = v25;
    float32x2_t v48 = v230;
    unint64_t v49 = (1 << -(char)__clz(v231 + 1));
    if (v231 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v50 = 1;
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50 <= v46 + 1) {
      uint64_t v51 = v46 + 1;
    }
    else {
      uint64_t v51 = v50;
    }
    float64x2_t v52 = malloc_type_malloc(8 * v51, 0x100004000313F17uLL);
    float64x2_t v53 = (char *)v52;
    float64x2_t v54 = (uint64_t *)v229[0];
    uint64_t v55 = (uint64_t *)v229[1];
    if (v229[0] != v229[1])
    {
      unint64_t v56 = (char *)v229[1] - (char *)v229[0] - 8;
      if (v56 < 0x18)
      {
        char v57 = v52;
      }
      else
      {
        char v57 = v52;
        if ((unint64_t)((char *)v52 - (char *)v229[0]) >= 0x20)
        {
          uint64_t v58 = (v56 >> 3) + 1;
          uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          char v57 = (void *)((char *)v52 + v59);
          float32x2_t v60 = (long long *)((char *)v229[0] + 16);
          double v61 = v52 + 1;
          uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            _OWORD *v61 = v63;
            v60 += 2;
            v61 += 2;
            v62 -= 4;
          }
          while (v62);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_62;
          }
          float64x2_t v54 = (uint64_t *)((char *)v54 + v59);
        }
      }
      do
      {
        uint64_t v64 = *v54++;
        *v57++ = v64;
      }
      while (v54 != v55);
    }
LABEL_62:
    if (v45 != v48) {
      free(v229[0]);
    }
    unint64_t v43 = (unint64_t *)&v53[8 * v46];
    v229[0] = v53;
    v229[1] = v43;
    unint64_t v231 = v51;
    uint64_t v25 = v47;
    unint64_t v44 = v222;
    goto LABEL_65;
  }
LABEL_78:
  for (uint64_t j = (unint64_t *)v229[0]; j != v43; ++j)
    gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::updateRequestStatus(a1[18], *j, 3);
  int8x16_t v75 = a1[18];
  float64x2_t v76 = (void *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(v75);
  for (uint64_t k = 0; k != 120; ++k)
    unint64_t v23 = 0x100000001B3 * (v23 ^ aStdStringViewG_125[k + 38]);
  uint64_t v78 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(v75, v23);
  float64x2_t v79 = (void *)v78;
  uint64_t v80 = v78 + 32;
  uint64_t v82 = v76[7];
  uint64_t v81 = v76[8];
  if (*(void *)(v78 + 64) - *(void *)(v78 + 56) >= (unint64_t)(v81 - v82)) {
    float64x2_t v83 = v76 + 4;
  }
  else {
    float64x2_t v83 = (void *)(v78 + 32);
  }
  if (v76 + 4 == v83)
  {
    uint64_t v233 = a1;
    uint64_t v234 = (atomic_ullong *)&v224;
    if (v82 != v81)
    {
      uint64_t v153 = (float *)(v76[10] + 4);
      do
      {
        unint64_t v154 = *(unsigned int *)(v82 + 4);
        uint64_t v155 = v79[4];
        if (v154 >> 7 < (v79[5] - v155) >> 3)
        {
          uint64_t v156 = *(void *)(v155 + 8 * (v154 >> 7));
          if (v156)
          {
            unint64_t v157 = *(unsigned __int16 *)(v156 + 2 * (v154 & 0x7F));
            uint64_t v159 = v79[7];
            uint64_t v158 = v79[8];
            if (v157 < (v158 - v159) >> 3)
            {
              uint64_t v160 = v159 + 8 * v157;
              if (v160 != v158 && *(_DWORD *)(v160 + 4) == v154) {
                md::ARProcessMeshComponentsLogic::preparePlaneMeshes(md::LayoutContext const&)::$_0::operator()(&v233, *(void *)v82, *(v153 - 1), *v153);
              }
            }
          }
        }
        v82 += 8;
        v153 += 2;
      }
      while (v82 != v81);
    }
  }
  if ((void *)v80 == v83)
  {
    uint64_t v233 = a1;
    uint64_t v234 = (atomic_ullong *)&v224;
    uint64_t v163 = v79[7];
    uint64_t v162 = v79[8];
    while (v163 != v162)
    {
      unint64_t v165 = *(unsigned int *)(v163 + 4);
      uint64_t v166 = v76[4];
      unint64_t v167 = (v76[5] - v166) >> 3;
      if (v165 >> 7 < v167)
      {
        uint64_t v168 = *(void *)(v166 + 8 * (v165 >> 7));
        if (v168)
        {
          unint64_t v169 = *(unsigned __int16 *)(v168 + 2 * (v165 & 0x7F));
          uint64_t v171 = v76[7];
          uint64_t v170 = v76[8];
          unint64_t v172 = (v170 - v171) >> 3;
          if (v172 > v169)
          {
            uint64_t v173 = v171 + 8 * v169;
            if (v173 != v170 && *(_DWORD *)(v173 + 4) == v165)
            {
              unint64_t v175 = *(void *)v163;
              unint64_t v176 = *(void *)v163 >> 39;
              if (v176 < v167
                && (uint64_t v177 = *(void *)(v166 + 8 * v176)) != 0
                && (unint64_t v178 = *(unsigned __int16 *)(v177 + 2 * (HIDWORD(v175) & 0x7F)), v172 > v178)
                && ((uint64_t v179 = v171 + 8 * v178, v179 != v170)
                  ? (BOOL v180 = *(_DWORD *)(v179 + 4) == HIDWORD(v175))
                  : (BOOL v180 = 0),
                    v180))
              {
                uint64_t v164 = (float *)(v76[10] + 8 * v178);
              }
              else
              {
                uint64_t v164 = (float *)v76[11];
              }
              md::ARProcessMeshComponentsLogic::preparePlaneMeshes(md::LayoutContext const&)::$_0::operator()(&v233, v175, *v164, v164[1]);
            }
          }
        }
      }
      v163 += 8;
    }
  }
  uint64_t v84 = (unint64_t *)v224;
  double v85 = v225;
  if (v224 != v225)
  {
    do
      gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::updateRequestStatus(a1[18], *v84++, 4);
    while (v84 != v85);
  }
  float64x2_t v86 = a1[18];
  uint64_t v233 = (int8x8_t **)v236;
  uint64_t v234 = v236;
  *(void *)&long long v235 = v236;
  *((void *)&v235 + 1) = 4;
  long long v87 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v86);
  uint64_t v88 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(v86);
  uint64_t v89 = (void *)v88;
  uint64_t v91 = v87[7];
  uint64_t v90 = v87[8];
  if (*(void *)(v88 + 64) - *(void *)(v88 + 56) >= (unint64_t)(v90 - v91)) {
    BOOL v92 = v87 + 4;
  }
  else {
    BOOL v92 = (void *)(v88 + 32);
  }
  std::string v221 = v92;
  uint64_t v223 = v88 + 32;
  if (v87 + 4 == v92 && v91 != v90)
  {
    double v114 = (unsigned __int8 *)v87[10];
    while (1)
    {
      unint64_t v116 = *(unsigned int *)(v91 + 4);
      uint64_t v117 = v89[4];
      if (v116 >> 7 >= (v89[5] - v117) >> 3) {
        goto LABEL_130;
      }
      uint64_t v118 = *(void *)(v117 + 8 * (v116 >> 7));
      if (!v118) {
        goto LABEL_130;
      }
      unint64_t v119 = *(unsigned __int16 *)(v118 + 2 * (v116 & 0x7F));
      uint64_t v121 = v89[7];
      uint64_t v120 = v89[8];
      if (v119 >= (v120 - v121) >> 3) {
        goto LABEL_130;
      }
      uint64_t v122 = v121 + 8 * v119;
      if (v122 == v120 || *(_DWORD *)(v122 + 4) != v116) {
        goto LABEL_130;
      }
      size_t v124 = *(void *)v91;
      gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v86, *(void *)v91, *v114);
      int v125 = v233;
      uint64_t v115 = v234;
      unint64_t v126 = (((char *)v234 - (char *)v233) >> 3) + 1;
      if (*((void *)&v235 + 1) < v126) {
        break;
      }
LABEL_129:
      atomic_ullong *v115 = v124;
      ++v234;
LABEL_130:
      ++v114;
      v91 += 8;
      if (v91 == v90) {
        goto LABEL_97;
      }
    }
    long long v219 = (int8x8_t **)v235;
    uint64_t v220 = ((char *)v234 - (char *)v233) >> 3;
    unint64_t v127 = (1 << -(char)__clz(*((void *)&v235 + 1) + 1));
    if (*((void *)&v235 + 1) >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v127 = 1;
    }
    if (v127 <= v126) {
      uint64_t v128 = (((char *)v234 - (char *)v233) >> 3) + 1;
    }
    else {
      uint64_t v128 = v127;
    }
    uint64_t v129 = malloc_type_malloc(8 * v128, 0x100004000313F17uLL);
    uint64_t v130 = (int8x8_t **)v129;
    unint64_t v131 = v233;
    long long v132 = v234;
    if (v233 != (int8x8_t **)v234)
    {
      unint64_t v133 = (char *)v234 - (char *)v233 - 8;
      if (v133 < 0x18)
      {
        uint64_t v134 = v129;
      }
      else
      {
        uint64_t v134 = v129;
        if ((unint64_t)((char *)v129 - (char *)v233) >= 0x20)
        {
          uint64_t v135 = (v133 >> 3) + 1;
          uint64_t v136 = 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v134 = (void *)((char *)v129 + v136);
          long long v137 = (long long *)(v233 + 2);
          uint64_t v138 = v129 + 1;
          uint64_t v139 = v135 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v140 = *v137;
            *(v138 - 1) = *(v137 - 1);
            *uint64_t v138 = v140;
            v137 += 2;
            v138 += 2;
            v139 -= 4;
          }
          while (v139);
          if (v135 == (v135 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_154;
          }
          unint64_t v131 = (int8x8_t **)((char *)v131 + v136);
        }
      }
      do
      {
        uint64_t v141 = (uint64_t)*v131++;
        *v134++ = v141;
      }
      while (v131 != (int8x8_t **)v132);
    }
LABEL_154:
    if (v125 != v219) {
      free(v233);
    }
    uint64_t v115 = (atomic_ullong *)&v130[v220];
    uint64_t v233 = v130;
    uint64_t v234 = v115;
    *((void *)&v235 + 1) = v128;
    goto LABEL_129;
  }
LABEL_97:
  if ((void *)v223 == v221)
  {
    uint64_t v181 = v89[7];
    uint64_t v182 = v89[8];
    while (1)
    {
      if (v181 == v182) {
        goto LABEL_98;
      }
      unint64_t v184 = *(unsigned int *)(v181 + 4);
      uint64_t v185 = v87[4];
      unint64_t v186 = (v87[5] - v185) >> 3;
      if (v184 >> 7 < v186)
      {
        uint64_t v187 = *(void *)(v185 + 8 * (v184 >> 7));
        if (v187)
        {
          unint64_t v188 = *(unsigned __int16 *)(v187 + 2 * (v184 & 0x7F));
          uint64_t v190 = v87[7];
          uint64_t v189 = v87[8];
          unint64_t v191 = (v189 - v190) >> 3;
          if (v191 > v188)
          {
            uint64_t v192 = v190 + 8 * v188;
            if (v192 != v189 && *(_DWORD *)(v192 + 4) == v184) {
              break;
            }
          }
        }
      }
LABEL_205:
      v181 += 8;
    }
    size_t v194 = *(void *)v181;
    unint64_t v195 = *(void *)v181 >> 39;
    if (v195 < v186
      && (uint64_t v196 = *(void *)(v185 + 8 * v195)) != 0
      && (unint64_t v197 = *(unsigned __int16 *)(v196 + 2 * (HIDWORD(v194) & 0x7F)), v191 > v197)
      && ((uint64_t v198 = v190 + 8 * v197, v198 != v189) ? (v199 = *(_DWORD *)(v198 + 4) == HIDWORD(v194)) : (v199 = 0), v199))
    {
      uint64_t v200 = (unsigned __int8 *)(v87[10] + v197);
    }
    else
    {
      uint64_t v200 = (unsigned __int8 *)v87[11];
    }
    gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v86, *(void *)v181, *v200);
    long long v201 = v233;
    __int16 v183 = v234;
    uint64_t v202 = ((char *)v234 - (char *)v233) >> 3;
    if (*((void *)&v235 + 1) >= (unint64_t)(v202 + 1))
    {
LABEL_204:
      atomic_ullong *v183 = v194;
      ++v234;
      goto LABEL_205;
    }
    long long v203 = (int8x8_t **)v235;
    unint64_t v204 = (1 << -(char)__clz(*((void *)&v235 + 1) + 1));
    if (*((void *)&v235 + 1) >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v204 = 1;
    }
    if (v204 <= v202 + 1) {
      unint64_t v205 = v202 + 1;
    }
    else {
      unint64_t v205 = v204;
    }
    char v206 = malloc_type_malloc(8 * v205, 0x100004000313F17uLL);
    __int16 v207 = (int8x8_t **)v206;
    char v208 = v233;
    char v209 = v234;
    if (v233 != (int8x8_t **)v234)
    {
      unint64_t v210 = (char *)v234 - (char *)v233 - 8;
      if (v210 < 0x18)
      {
        char v211 = v206;
      }
      else
      {
        char v211 = v206;
        if ((unint64_t)((char *)v206 - (char *)v233) >= 0x20)
        {
          uint64_t v212 = (v210 >> 3) + 1;
          uint64_t v213 = 8 * (v212 & 0x3FFFFFFFFFFFFFFCLL);
          char v211 = (void *)((char *)v206 + v213);
          long long v214 = (long long *)(v233 + 2);
          long long v215 = v206 + 1;
          uint64_t v216 = v212 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v217 = *v214;
            *(v215 - 1) = *(v214 - 1);
            _OWORD *v215 = v217;
            v214 += 2;
            v215 += 2;
            v216 -= 4;
          }
          while (v216);
          if (v212 == (v212 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_239;
          }
          char v208 = (int8x8_t **)((char *)v208 + v213);
        }
      }
      do
      {
        uint64_t v218 = (uint64_t)*v208++;
        *v211++ = v218;
      }
      while (v208 != (int8x8_t **)v209);
    }
LABEL_239:
    if (v201 != v203) {
      free(v233);
    }
    __int16 v183 = (atomic_ullong *)&v207[v202];
    uint64_t v233 = v207;
    uint64_t v234 = v183;
    *((void *)&v235 + 1) = v205;
    goto LABEL_204;
  }
LABEL_98:
  unint64_t v94 = (unint64_t *)v233;
  unint64_t v95 = (unint64_t *)v234;
  if (v233 != (int8x8_t **)v234)
  {
    do
    {
      float32x2_t v96 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(v86);
      gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::remove(v96, *v94++);
    }
    while (v94 != v95);
    unint64_t v94 = (unint64_t *)v233;
  }
  if (v94 != (unint64_t *)v235) {
    free(v94);
  }
  if (v224 != v226) {
    free(v224);
  }
  if (v229[0] != v230) {
    free(v229[0]);
  }
}

void sub_1A1F24ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  if (a13 != a15) {
    free(a13);
  }
  if (a21 != a23)
  {
    free(a21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unsigned int v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A1F25268(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(int8x8_t *a1)
{
  unint64_t v10 = 0xEB22B1DADB49C565;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEB22B1DADB49C565;
    if (*(void *)&v1 <= 0xEB22B1DADB49C565) {
      unint64_t v3 = 0xEB22B1DADB49C565 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEB22B1DADB49C565;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unsigned int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEB22B1DADB49C565)
      {
        if (v5[2] == 0xEB22B1DADB49C565) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unsigned int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEB22B1DADB49C565) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unsigned int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEB22B1DADB49C565) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F254D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unsigned int v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A1F25788(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::updateRequestStatus(int8x8_t *a1, unint64_t a2, int a3)
{
  uint64_t v6 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  uint64_t v7 = v6[4];
  if (a2 >> 39 < (v6[5] - v7) >> 3)
  {
    uint64_t v8 = *(void *)(v7 + 8 * (a2 >> 39));
    if (v8)
    {
      unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v11 = v6[7];
      uint64_t v10 = v6[8];
      if (v9 < (v10 - v11) >> 3)
      {
        uint64_t v12 = v11 + 8 * v9;
        if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2))
        {
          uint64_t v14 = v6[10];
          unsigned int v15 = (unsigned char *)(v14 + v9);
          if (v14 + v9 != v6[11] && v14 != 0)
          {
            int v17 = *v15;
            if (v17 != a3)
            {
              gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(a1, a2, v17);
              if (a3 == 4)
              {
                uint64_t v26 = 0;
                unint64_t v27 = 0xCBF29CE484222325;
                do
                  unint64_t v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_777[v26++ + 38]);
                while (v26 != 122);
                uint64_t v28 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(a1, v27);
                unint64_t v61 = a2;
                unint64_t v29 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v28 + 4, (uint64_t)&v61);
                if (v30)
                {
                  unint64_t v38 = (unsigned char *)v28[11];
                  unint64_t v37 = v28[12];
                  if ((unint64_t)v38 >= v37)
                  {
                    uint64_t v46 = (char *)v28[10];
                    uint64_t v47 = v38 - v46;
                    uint64_t v48 = v38 - v46 + 1;
                    if (v48 < 0) {
                      goto LABEL_74;
                    }
                    unint64_t v49 = v37 - (void)v46;
                    if (2 * v49 > v48) {
                      uint64_t v48 = 2 * v49;
                    }
                    if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v50 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v50 = v48;
                    }
                    if (v50) {
                      uint64_t v51 = (char *)operator new(v50);
                    }
                    else {
                      uint64_t v51 = 0;
                    }
                    unint64_t v56 = &v51[v50];
                    uint64_t v39 = (uint64_t)&v51[v47 + 1];
                    char v57 = (char *)(v46 - v38);
                    if (v46 == v38) {
                      char v57 = 0;
                    }
                    unsigned char v28[10] = &v51[v47 + (void)v57];
                    v28[11] = v39;
                    v28[12] = v56;
                    if (v46) {
                      operator delete(v46);
                    }
                  }
                  else
                  {
                    uint64_t v39 = (uint64_t)(v38 + 1);
                  }
                  v28[11] = v39;
                  uint64_t v31 = v28[31];
                }
                else
                {
                  uint64_t v31 = v28[31];
                  if (v28[10] + (((uint64_t)v29 - v28[7]) >> 3) != v28[11])
                  {
                    uint64_t v32 = (void *)v28[16];
                    if (v32)
                    {
                      while (1)
                      {
                        long long v63 = &v61;
                        uint64_t v64 = 1;
                        uint64_t v62 = v31;
                        uint64_t v33 = v32[6];
                        if (!v33) {
                          goto LABEL_73;
                        }
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v33 + 48))(v33, &v62, &v63);
                        uint64_t v32 = (void *)*v32;
                        if (!v32) {
                          goto LABEL_71;
                        }
                      }
                    }
                    goto LABEL_71;
                  }
                }
                for (uint64_t i = (void *)v28[22]; i; uint64_t i = (void *)*i)
                {
                  long long v63 = &v61;
                  uint64_t v64 = 1;
                  uint64_t v62 = v31;
                  uint64_t v59 = i[6];
                  if (!v59) {
                    goto LABEL_73;
                  }
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v59 + 48))(v59, &v62, &v63);
                }
              }
              else if (a3 == 3)
              {
                uint64_t v18 = 0;
                unint64_t v19 = 0xCBF29CE484222325;
                do
                  unint64_t v19 = 0x100000001B3 * (v19 ^ aStdStringViewG_125[v18++ + 38]);
                while (v18 != 120);
                unint64_t v20 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(a1, v19);
                unint64_t v61 = a2;
                unsigned int v21 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v20 + 4, (uint64_t)&v61);
                if (v22)
                {
                  BOOL v35 = (unsigned char *)v20[11];
                  unint64_t v34 = v20[12];
                  if ((unint64_t)v35 >= v34)
                  {
                    unint64_t v40 = (char *)v20[10];
                    uint64_t v41 = v35 - v40;
                    uint64_t v42 = v35 - v40 + 1;
                    if (v42 < 0) {
                      goto LABEL_74;
                    }
                    unint64_t v43 = v34 - (void)v40;
                    if (2 * v43 > v42) {
                      uint64_t v42 = 2 * v43;
                    }
                    if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v44 = v42;
                    }
                    if (v44) {
                      uint64_t v45 = (char *)operator new(v44);
                    }
                    else {
                      uint64_t v45 = 0;
                    }
                    float64x2_t v52 = &v45[v44];
                    uint64_t v36 = (uint64_t)&v45[v41 + 1];
                    float64x2_t v53 = (char *)(v40 - v35);
                    if (v40 == v35) {
                      float64x2_t v53 = 0;
                    }
                    v20[10] = &v45[v41 + (void)v53];
                    v20[11] = v36;
                    v20[12] = v52;
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    uint64_t v36 = (uint64_t)(v35 + 1);
                  }
                  v20[11] = v36;
                  uint64_t v23 = v20[31];
                }
                else
                {
                  uint64_t v23 = v20[31];
                  if (v20[10] + (((uint64_t)v21 - v20[7]) >> 3) != v20[11])
                  {
                    unint64_t v24 = (void *)v20[16];
                    if (v24)
                    {
                      while (1)
                      {
                        long long v63 = &v61;
                        uint64_t v64 = 1;
                        uint64_t v62 = v23;
                        uint64_t v25 = v24[6];
                        if (!v25) {
                          break;
                        }
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v25 + 48))(v25, &v62, &v63);
                        unint64_t v24 = (void *)*v24;
                        if (!v24) {
                          goto LABEL_71;
                        }
                      }
LABEL_73:
                      std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
                      abort();
                    }
                    goto LABEL_71;
                  }
                }
                for (uint64_t j = (void *)v20[22]; j; uint64_t j = (void *)*j)
                {
                  long long v63 = &v61;
                  uint64_t v64 = 1;
                  uint64_t v62 = v23;
                  uint64_t v55 = j[6];
                  if (!v55) {
                    goto LABEL_73;
                  }
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v55 + 48))(v55, &v62, &v63);
                }
              }
LABEL_71:
              unsigned char *v15 = a3;
              float32x2_t v60 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(a1);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v60, a2);
            }
          }
        }
      }
    }
  }
}

void md::ARProcessMeshComponentsLogic::preparePlaneMeshes(md::LayoutContext const&)::$_0::operator()(void *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  v165[0] = a3;
  *(void *)&v165[1] = 0;
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  memset(v157, 0, sizeof(v157));
  std::string __p = 0;
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  md::GeometryLogic::createXYPlane(&v158, v157, (unint64_t *)&__p, 0.0, 0.0);
  unint64_t v127 = a1;
  uint64_t v8 = v158;
  uint64_t v7 = v159;
  unint64_t v9 = __p;
  uint64_t v10 = v155;
  uint64_t v11 = (std::__shared_weak_count *)operator new(0xF8uLL);
  uint64_t v129 = v7;
  unint64_t v12 = (v7 - v8) / 12;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585030;
  uint64_t v13 = ggl::BufferData::BufferData((uint64_t)&v11[1], 12, 0, 0, 6, v12);
  v11[9].__shared_weak_owners_ = (uint64_t)"/Plane/VertexData";
  v11[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedVboReflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55CC88;
  v11[9].__shared_owners_ = (uint64_t)&unk_1EF55CCA8;
  uint64_t v152 = (uint64_t *)v13;
  uint64_t v153 = v11;
  long long v147 = 0uLL;
  unint64_t v14 = v11[1].__shared_owners_ * v12;
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v13;
  if (v14) {
    BOOL v16 = v11[4].__vftable;
  }
  else {
    BOOL v16 = 0;
  }
  long long v147 = v15;
  unint64_t v148 = 0;
  unint64_t v149 = v14;
  uint64_t v151 = v16;
  __int16 v150 = 1;
  int v17 = (std::__shared_weak_count *)operator new(0xE0uLL);
  uint64_t v128 = v6;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583FC8;
  uint64_t v18 = ggl::BufferData::BufferData((uint64_t)&v17[1], qword_1E9558C10, 3, 1, 6, v12);
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B9D0;
  unint64_t v145 = (uint64_t *)v18;
  uint64_t v146 = v17;
  *(void *)&long long v19 = 0;
  *((void *)&v19 + 1) = v18;
  if (v17[1].__shared_owners_ * v12) {
    unint64_t v20 = (float16x8_t *)v17[4].__vftable;
  }
  else {
    unint64_t v20 = 0;
  }
  long long v142 = v19;
  unint64_t v143 = v17[1].__shared_owners_ * v12;
  uint64_t v144 = v20;
  unsigned int v21 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584000;
  uint64_t v22 = ggl::BufferData::BufferData((uint64_t)&v21[1], qword_1E9558BD0, 3, 1, 6, v12);
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B9F0;
  long long v140 = (uint64_t *)v22;
  uint64_t v141 = v21;
  v23.i64[0] = 0;
  v23.i64[1] = v22;
  float32x4_t v137 = v23;
  unint64_t v138 = v21[1].__shared_owners_ * v12;
  uint64_t v139 = (float16x8_t *)v21[4].__vftable;
  v24.i32[0] = *((_DWORD *)v8 + 2);
  v23.i64[0] = *(void *)v8;
  v16->~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))v8;
  LODWORD(v16->~__shared_weak_count_0) = v24.i32[0];
  int32x2_t v25 = *(int32x2_t *)(v8 + 12);
  __int32 v26 = *((_DWORD *)v8 + 5);
  *(int32x2_t *)((char *)&v16->~__shared_weak_count_0 + 4) = v25;
  HIDWORD(v16->__on_zero_shared) = v26;
  v27.i64[0] = *((void *)v8 + 3);
  unsigned int v28 = *((_DWORD *)v8 + 8);
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v27.i64[0];
  LODWORD(v16->__on_zero_shared_weak) = v28;
  uint64_t v29 = *(void *)(v8 + 36);
  unsigned int v30 = *((_DWORD *)v8 + 11);
  *(void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)&v16->__on_zero_shared_weak + 4) = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  *(int32x2_t *)v31.f32 = vzip1_s32(*(int32x2_t *)v23.f32, v25);
  v31.i64[1] = __PAIR64__(v29, v27.u32[0]);
  HIDWORD(v16[1].~__shared_weak_count) = v30;
  v32.i64[0] = __PAIR64__(v25.u32[1], v23.u32[1]);
  v32.i64[1] = __PAIR64__(HIDWORD(v29), vdup_lane_s32(*(int32x2_t *)v27.f32, 1).u32[0]);
  v24.i32[1] = v26;
  v24.i64[1] = __PAIR64__(v30, v28);
  __asm { FMOV            V5.4S, #1.0 }
  float32x4_t v38 = vdivq_f32(_Q5, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v31, v31), v32, v32), v24, v24)));
  int32x4_t v39 = (int32x4_t)vmlaq_f32(_Q5, v24, v38);
  int32x4_t v40 = (int32x4_t)vmulq_f32(v38, (float32x4_t)vdupq_n_s32(0x3E90019Du));
  *(int32x2_t *)&v23.u32[2] = v25;
  v27.i64[1] = v29;
  v41.i64[0] = 0x3F0000003F000000;
  v41.i64[1] = 0x3F0000003F000000;
  *uint64_t v139 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v40, v40), v23), (float32x4_t)vzip1q_s32(v39, v39)), v41)), vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v40, v40), v27), (float32x4_t)vzip2q_s32(v39, v39)), v41));
  float32x4_t v42 = (float32x4_t)vdupq_lane_s64(__SPAIR64__(LODWORD(a4), LODWORD(v165[0])), 0);
  float16x8_t *v20 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(*(float32x4_t *)v157[0], v42)), vmulq_f32(*(float32x4_t *)(v157[0] + 16), v42));
  unint64_t v43 = (std::__shared_weak_count *)operator new(0xF8uLL);
  unint64_t v44 = (v10 - v9) >> 2;
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
  ggl::BufferData::BufferData((uint64_t)&v43[1], 2, 1, 0, 6, v44);
  uint64_t v45 = 0;
  LODWORD(v43[10].__vftable) = 0;
  v43[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
  v43[1].__shared_owners_ = 2;
  v43[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
  v43[9].__shared_weak_owners_ = (uint64_t)"/Plane/IndexData";
  uint64_t v136 = v43;
  *(void *)&long long v46 = 0;
  if ((unint64_t)(v10 - v9) >= 4) {
    uint64_t v45 = v43[4].__vftable;
  }
  *((void *)&v46 + 1) = v43 + 1;
  long long v133 = v46;
  unint64_t v134 = 2 * v44;
  uint64_t v135 = v45;
  if (v10 != v9)
  {
    uint64_t v47 = (char *)__p;
    if (v44 <= 1) {
      unint64_t v48 = 1;
    }
    else {
      unint64_t v48 = (v10 - v9) >> 2;
    }
    if (v48 <= 0xF)
    {
      unint64_t v49 = 0;
LABEL_18:
      unint64_t v57 = v48 - v49;
      uint64_t v58 = (_WORD *)((char *)v45 + 2 * v49);
      uint64_t v59 = &v47[4 * v49];
      do
      {
        int v60 = *(_DWORD *)v59;
        v59 += 4;
        *v58++ = v60;
        --v57;
      }
      while (v57);
      goto LABEL_20;
    }
    unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF0;
    p_on_zero_shared = (int16x8_t *)&v45->__on_zero_shared;
    uint64_t v51 = (int16x8_t *)((char *)__p + 32);
    unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v54 = v51[-2];
      int16x8_t v53 = v51[-1];
      int16x8_t v56 = *v51;
      int16x8_t v55 = v51[1];
      v51 += 4;
      p_on_zero_shared[-1] = vuzp1q_s16(v54, v53);
      int16x8_t *p_on_zero_shared = vuzp1q_s16(v56, v55);
      p_on_zero_shared += 2;
      v52 -= 16;
    }
    while (v52);
    if (v48 != v49) {
      goto LABEL_18;
    }
  }
LABEL_20:
  unint64_t v61 = (std::__shared_weak_count *)operator new(0xA8uLL);
  uint64_t v62 = v61;
  v61->__shared_owners_ = 0;
  v61->__shared_weak_owners_ = 0;
  v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589438;
  uint64_t v63 = (uint64_t)&v61[1];
  uint64_t v163 = v152;
  uint64_t v164 = v153;
  if (v153) {
    atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v161 = (uint64_t *)&v43[1];
  uint64_t v162 = v43;
  atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)&v61[1], (uint64_t)"/DV/CustomPlane", (uint64_t *)&v163, (uint64_t *)&v161);
  if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v64 = v164;
  if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v129 == v8)
  {
    float v70 = 3.4028e38;
    float v72 = -3.4028e38;
    float v71 = -3.4028e38;
    float v67 = -3.4028e38;
    float v69 = 3.4028e38;
    float v68 = 3.4028e38;
    goto LABEL_39;
  }
  if (v12 <= 1) {
    unint64_t v65 = 1;
  }
  else {
    unint64_t v65 = v12;
  }
  if (v65 <= 7)
  {
    unint64_t v66 = 0;
    float v67 = -3.4028e38;
    float v68 = 3.4028e38;
    float v69 = 3.4028e38;
    float v70 = 3.4028e38;
    float v71 = -3.4028e38;
    float v72 = -3.4028e38;
LABEL_37:
    unint64_t v88 = v65 - v66;
    uint64_t v89 = &v158[12 * v66 + 8];
    do
    {
      float v90 = *((float *)v89 - 2);
      float v91 = *((float *)v89 - 1);
      float v68 = fminf(v90, v68);
      float v67 = fmaxf(v67, v90);
      float v69 = fminf(v91, v69);
      float v71 = fmaxf(v71, v91);
      float v92 = *(float *)v89;
      v89 += 12;
      float v70 = fminf(v92, v70);
      float v72 = fmaxf(v72, v92);
      --v88;
    }
    while (v88);
    goto LABEL_39;
  }
  float32x4_t v73 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
  v74.i64[0] = 0x80000000800000;
  v74.i64[1] = 0x80000000800000;
  int8x16_t v75 = v158;
  unint64_t v76 = v65 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v77 = v73;
  float32x4_t v78 = v73;
  float32x4_t v79 = v73;
  float32x4_t v80 = v73;
  float32x4_t v81 = v73;
  v82.i64[0] = 0x80000000800000;
  v82.i64[1] = 0x80000000800000;
  v83.i64[0] = 0x80000000800000;
  v83.i64[1] = 0x80000000800000;
  v84.i64[0] = 0x80000000800000;
  v84.i64[1] = 0x80000000800000;
  v85.i64[0] = 0x80000000800000;
  v85.i64[1] = 0x80000000800000;
  v86.i64[0] = 0x80000000800000;
  v86.i64[1] = 0x80000000800000;
  do
  {
    long long v87 = (const float *)v75;
    v75 += 96;
    float32x4x3_t v168 = vld3q_f32(v87);
    v87 += 12;
    float32x4_t v73 = vminnmq_f32(v168.val[0], v73);
    float32x4x3_t v169 = vld3q_f32(v87);
    float32x4_t v77 = vminnmq_f32(v169.val[0], v77);
    float32x4_t v74 = vmaxnmq_f32(v74, v168.val[0]);
    float32x4_t v82 = vmaxnmq_f32(v82, v169.val[0]);
    float32x4_t v78 = vminnmq_f32(v168.val[1], v78);
    float32x4_t v79 = vminnmq_f32(v169.val[1], v79);
    float32x4_t v83 = vmaxnmq_f32(v83, v168.val[1]);
    float32x4_t v84 = vmaxnmq_f32(v84, v169.val[1]);
    float32x4_t v80 = vminnmq_f32(v168.val[2], v80);
    float32x4_t v81 = vminnmq_f32(v169.val[2], v81);
    float32x4_t v85 = vmaxnmq_f32(v85, v168.val[2]);
    float32x4_t v86 = vmaxnmq_f32(v86, v169.val[2]);
    v76 -= 8;
  }
  while (v76);
  float v72 = vmaxnmvq_f32(vmaxnmq_f32(v85, v86));
  float v71 = vmaxnmvq_f32(vmaxnmq_f32(v83, v84));
  float v67 = vmaxnmvq_f32(vmaxnmq_f32(v74, v82));
  float v70 = vminnmvq_f32(vminnmq_f32(v80, v81));
  float v69 = vminnmvq_f32(vminnmq_f32(v78, v79));
  float v68 = vminnmvq_f32(vminnmq_f32(v73, v77));
  if (v65 != v66) {
    goto LABEL_37;
  }
LABEL_39:
  uint64_t v163 = v145;
  uint64_t v164 = v146;
  if (v146)
  {
    atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::Mesh::setCustomDeviceData(v63, &v163, 0);
    if (!atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  else
  {
    ggl::Mesh::setCustomDeviceData(v63, &v163, 0);
  }
  long long v161 = v140;
  uint64_t v162 = v141;
  if (v141)
  {
    atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::Mesh::setCustomDeviceData(v63, &v161, (uint64_t *)1);
    if (!atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  else
  {
    ggl::Mesh::setCustomDeviceData(v63, &v161, (uint64_t *)1);
  }
  unint64_t v131 = v62;
  atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v132 = __PAIR64__(LODWORD(v69), LODWORD(v68));
  *((void *)&v132 + 1) = __PAIR64__(LODWORD(v67), LODWORD(v70));
  if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  if (v135 && v134)
  {
    if ((void)v133 && *(unsigned char *)(*((void *)&v133 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v133 + 64))();
    }
    uint64_t v94 = *(void *)(*((void *)&v133 + 1) + 56);
    unint64_t v93 = *(void *)(*((void *)&v133 + 1) + 64);
    if (v93 == v94) {
      uint64_t v94 = *(void *)(*((void *)&v133 + 1) + 80) - *(void *)(*((void *)&v133 + 1) + 72);
    }
    if (v94) {
      uint64_t v94 = 0;
    }
    if (v93 <= v134) {
      unint64_t v93 = v134;
    }
    if (v93 == v94) {
      unint64_t v93 = v94 + *(void *)(*((void *)&v133 + 1) + 80) - *(void *)(*((void *)&v133 + 1) + 72);
    }
    *(void *)(*((void *)&v133 + 1) + 56) = v94;
    *(void *)(*((void *)&v133 + 1) + 64) = v93;
  }
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
  if (v139 && v138)
  {
    if (v137.i64[0] && *(unsigned char *)(v137.i64[1] + 17) != 2) {
      (*(void (**)(void))(*(void *)v137.i64[0] + 64))();
    }
    uint64_t v96 = *(void *)(v137.i64[1] + 56);
    unint64_t v95 = *(void *)(v137.i64[1] + 64);
    if (v95 == v96) {
      uint64_t v96 = *(void *)(v137.i64[1] + 80) - *(void *)(v137.i64[1] + 72);
    }
    if (v96) {
      uint64_t v96 = 0;
    }
    if (v95 <= v138) {
      unint64_t v95 = v138;
    }
    if (v95 == v96) {
      unint64_t v95 = v96 + *(void *)(v137.i64[1] + 80) - *(void *)(v137.i64[1] + 72);
    }
    *(void *)(v137.i64[1] + 56) = v96;
    *(void *)(v137.i64[1] + 64) = v95;
  }
  if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
  if (v144 && v143)
  {
    if ((void)v142 && *(unsigned char *)(*((void *)&v142 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v142 + 64))();
    }
    uint64_t v98 = *(void *)(*((void *)&v142 + 1) + 56);
    unint64_t v97 = *(void *)(*((void *)&v142 + 1) + 64);
    if (v97 == v98) {
      uint64_t v98 = *(void *)(*((void *)&v142 + 1) + 80) - *(void *)(*((void *)&v142 + 1) + 72);
    }
    if (v98) {
      uint64_t v98 = 0;
    }
    if (v97 <= v143) {
      unint64_t v97 = v143;
    }
    if (v97 == v98) {
      unint64_t v97 = v98 + *(void *)(*((void *)&v142 + 1) + 80) - *(void *)(*((void *)&v142 + 1) + 72);
    }
    *(void *)(*((void *)&v142 + 1) + 56) = v98;
    *(void *)(*((void *)&v142 + 1) + 64) = v97;
  }
  if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
    std::__shared_weak_count::__release_weak(v146);
  }
  if (v151 && v149 != v148)
  {
    uint64_t v99 = *((void *)&v147 + 1);
    if ((void)v147 && *(unsigned char *)(*((void *)&v147 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v147 + 64))();
    }
    if ((_BYTE)v150 && !HIBYTE(v150))
    {
      unint64_t v101 = *(void *)(*((void *)&v147 + 1) + 56);
      unint64_t v100 = *(void *)(*((void *)&v147 + 1) + 64);
      if (v100 == v101) {
        unint64_t v101 = *(void *)(*((void *)&v147 + 1) + 80) - *(void *)(*((void *)&v147 + 1) + 72);
      }
      if (v148 < v101) {
        unint64_t v101 = v148;
      }
      if (v100 <= v149) {
        unint64_t v100 = v149;
      }
      if (v100 == v101) {
        unint64_t v100 = v101 + *(void *)(*((void *)&v147 + 1) + 80) - *(void *)(*((void *)&v147 + 1) + 72);
      }
      *(void *)(*((void *)&v147 + 1) + 56) = v101;
      *(void *)(v99 + 64) = v100;
    }
  }
  if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
    std::__shared_weak_count::__release_weak(v153);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v157[0]) {
    operator delete((void *)v157[0]);
  }
  if (v158) {
    operator delete(v158);
  }
  unint64_t v102 = *(int8x8_t **)(v128 + 144);
  *(void *)&long long v147 = v63;
  *((void *)&v147 + 1) = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v103 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v102);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v103, a2, (uint64_t *)&v147);
  if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  uint64_t v104 = *(int8x8_t **)(v128 + 144);
  long long v147 = v132;
  unint64_t v148 = __PAIR64__(LODWORD(v72), LODWORD(v71));
  unint64_t v105 = (void *)gdc::Registry::storage<arComponents::Boundary>(v104);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v105, a2, &v147);
  uint64_t v106 = v127[1];
  unint64_t v108 = *(char **)v106;
  double v107 = *(uint64_t **)(v106 + 8);
  uint64_t v109 = ((uint64_t)v107 - *(void *)v106) >> 3;
  unint64_t v110 = *(void *)(v106 + 24);
  if (v110 < v109 + 1)
  {
    unint64_t v111 = *(char **)(v106 + 16);
    unint64_t v112 = (1 << -(char)__clz(v110 + 1));
    if (v110 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v112 = 1;
    }
    if (v112 <= v109 + 1) {
      unint64_t v113 = v109 + 1;
    }
    else {
      unint64_t v113 = v112;
    }
    double v114 = (char *)malloc_type_malloc(8 * v113, 0x100004000313F17uLL);
    uint64_t v115 = v114;
    unint64_t v116 = *(uint64_t **)v106;
    uint64_t v117 = *(char **)(v106 + 8);
    if (*(char **)v106 == v117) {
      goto LABEL_145;
    }
    unint64_t v118 = v117 - (char *)v116 - 8;
    if (v118 < 0x18)
    {
      unint64_t v119 = v114;
    }
    else
    {
      unint64_t v119 = v114;
      if ((unint64_t)(v114 - (char *)v116) >= 0x20)
      {
        uint64_t v120 = (v118 >> 3) + 1;
        uint64_t v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v119 = &v114[v121];
        uint64_t v122 = (long long *)(v116 + 2);
        uint64_t v123 = v114 + 16;
        uint64_t v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v125 = *v122;
          *(v123 - 1) = *(v122 - 1);
          _OWORD *v123 = v125;
          v122 += 2;
          v123 += 2;
          v124 -= 4;
        }
        while (v124);
        if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_145;
        }
        unint64_t v116 = (uint64_t *)((char *)v116 + v121);
      }
    }
    do
    {
      uint64_t v126 = *v116++;
      *(void *)unint64_t v119 = v126;
      v119 += 8;
    }
    while (v116 != (uint64_t *)v117);
LABEL_145:
    if (v108 != v111) {
      free(*(void **)v106);
    }
    double v107 = (uint64_t *)&v115[8 * v109];
    *(void *)uint64_t v106 = v115;
    *(void *)(v106 + 8) = v107;
    *(void *)(v106 + 24) = v113;
  }
  *double v107 = a2;
  *(void *)(v106 + 8) += 8;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
}

void sub_1A1F26B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *__p)
{
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(int8x8_t *a1)
{
  unint64_t v10 = 0xEA76D1997073A299;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEA76D1997073A299;
    if (*(void *)&v1 <= 0xEA76D1997073A299) {
      unint64_t v3 = 0xEA76D1997073A299 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEA76D1997073A299;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unsigned int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEA76D1997073A299)
      {
        if (v5[2] == 0xEA76D1997073A299) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unsigned int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEA76D1997073A299) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unsigned int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEA76D1997073A299) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F26E78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(int8x8_t *a1)
{
  unint64_t v10 = 0xE3EFBE7A1F01161ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE3EFBE7A1F01161ELL;
    if (*(void *)&v1 <= 0xE3EFBE7A1F01161ELL) {
      unint64_t v3 = 0xE3EFBE7A1F01161ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE3EFBE7A1F01161ELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unsigned int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE3EFBE7A1F01161ELL)
      {
        if (v5[2] == 0xE3EFBE7A1F01161ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unsigned int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE3EFBE7A1F01161ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unsigned int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE3EFBE7A1F01161ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F270E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>();
}

void gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(int8x8_t *a1, size_t a2, unsigned int a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xCBF29CE484222325;
  unint64_t v8 = 0xCBF29CE484222325;
  do
    unint64_t v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_787[v6++ + 38]);
  while (v6 != 116);
  uint64_t v9 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v8);
  uint64_t v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    uint64_t v11 = *(void *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        size_t v15 = HIDWORD(a2);
        uint64_t v16 = v14 + 8 * v12;
        if (v16 != v13 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
        {
          uint64_t v18 = v9[10];
          long long v19 = (unint64_t **)(v18 + 24 * v12);
          if (v19 != (unint64_t **)v9[11] && v18 != 0)
          {
            unsigned int v21 = *v19;
            uint64_t v22 = v19[1];
            if (*v19 != v22)
            {
LABEL_16:
              int v23 = a1[5].u16[0];
              int8x8_t v24 = a1[6];
              unint64_t v25 = (uint64_t)(*(void *)&a1[7] - *(void *)&v24) >> 3;
              while (1)
              {
                unint64_t v26 = *v21;
                unint64_t v27 = HIDWORD(*v21);
                if (v23 != (unsigned __int16)*v21 || v25 <= v27) {
                  break;
                }
                uint64_t v29 = (unsigned __int16 *)(*(void *)&v24 + 8 * v27);
                if (*v29 != v23 || v29[1] != WORD1(v26) || *((_DWORD *)v29 + 1) != v27) {
                  break;
                }
                if (++v21 == v22) {
                  goto LABEL_39;
                }
              }
              while (--v22 != v21)
              {
                unint64_t v30 = *v22;
                unint64_t v31 = HIDWORD(*v22);
                if (v23 == (unsigned __int16)*v22 && v25 > v31)
                {
                  uint64_t v33 = (unsigned __int16 *)(*(void *)&v24 + 8 * v31);
                  if (*v33 == v23 && v33[1] == WORD1(v30) && *((_DWORD *)v33 + 1) == v31)
                  {
                    *v21++ = v30;
                    *uint64_t v22 = v26;
                    if (v21 != v22) {
                      goto LABEL_16;
                    }
                    goto LABEL_39;
                  }
                }
              }
            }
            uint64_t v22 = v21;
LABEL_39:
            unint64_t v34 = *v19;
            BOOL v35 = v22;
            if (*v19 != v22)
            {
              do
              {
                uint64_t v36 = 0;
                unint64_t v37 = *v34;
                unint64_t v38 = 0xCBF29CE484222325;
                do
                  unint64_t v38 = 0x100000001B3 * (v38 ^ aStdStringViewG_788[v36++ + 38]);
                while (v36 != 112);
                int32x4_t v39 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v38);
                uint64_t v40 = v39[4];
                if (v37 >> 39 < (v39[5] - v40) >> 3
                  && (uint64_t v41 = *(void *)(v40 + 8 * (v37 >> 39))) != 0
                  && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v37) & 0x7F)),
                      uint64_t v44 = v39[7],
                      uint64_t v43 = v39[8],
                      v42 < (v43 - v44) >> 3)
                  && ((uint64_t v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == HIDWORD(v37)) : (v46 = 0), v46))
                {
                  uint64_t v47 = v39[11];
                  uint64_t v48 = v39[10] + 12 * v42;
                }
                else
                {
                  uint64_t v47 = v39[11];
                  uint64_t v48 = v47;
                }
                if (v48 == v47) {
                  uint64_t v48 = 0;
                }
                unsigned int v49 = *(unsigned __int8 *)(v48 + 8);
                *(unsigned char *)(v48 + 8) = a3;
                gdc::component::DataRequestObserver::updateStatusCounts(a1, v37, a2, v49, a3);
                ++v34;
              }
              while (v34 != v22);
              size_t v15 = HIDWORD(a2);
              BOOL v35 = *v19;
            }
            if (v22 == v35)
            {
              for (uint64_t i = 0; i != 116; ++i)
                unint64_t v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_787[i + 38]);
              uint64_t v51 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v7);
              size_t v57 = a2;
              if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v51 + 4, v15))
              {
                unint64_t v52 = (void *)v51[28];
                if (v52)
                {
                  uint64_t v53 = v51[31];
                  while (1)
                  {
                    v59[0] = &v57;
                    v59[1] = 1;
                    uint64_t v58 = v53;
                    uint64_t v54 = v52[6];
                    if (!v54) {
                      break;
                    }
                    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v54 + 48))(v54, &v58, v59);
                    unint64_t v52 = (void *)*v52;
                    if (!v52) {
                      return;
                    }
                  }
                  std::__throw_bad_function_call[abi:nn180100]();
                  gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v55, v56);
                }
              }
            }
            else if (v22 != v19[1])
            {
              v19[1] = v22;
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A1F27838(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A1F27AE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3) {
    return 0;
  }
  uint64_t v3 = *(void *)(*a1 + 8 * v2);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3) {
    return 0;
  }
  unint64_t v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7) {
    return 0;
  }
  unint64_t v11 = (void *)(a1[6] + 24 * v5);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (void *)v8);
  uint64_t v12 = a1[7];
  if (v11 != (void *)(v12 - 24))
  {
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(v11, *(char **)(v12 - 24), *(char **)(v12 - 16), (uint64_t)(*(void *)(v12 - 16) - *(void *)(v12 - 24)) >> 3);
    uint64_t v12 = a1[7];
  }
  uint64_t v14 = v12 - 24;
  uint64_t v13 = *(void **)(v12 - 24);
  if (v13)
  {
    *(void *)(v12 - 16) = v13;
    operator delete(v13);
  }
  a1[7] = v14;
  return 1;
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10] + 12 * v7;
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          char v15 = *(unsigned char *)(v14 - 4);
          *(void *)uint64_t v13 = *(void *)(v14 - 12);
          *(unsigned char *)(v13 + 8) = v15;
          a1[11] -= 12;
          uint64_t v16 = (void *)a1[28];
          if (v16)
          {
            uint64_t v17 = a1[31];
            while (1)
            {
              v22[0] = &v20;
              v22[1] = 1;
              uint64_t v21 = v17;
              uint64_t v18 = v16[6];
              if (!v18) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v21, v22);
              uint64_t v16 = (void *)*v16;
              if (!v16) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::~ComponentStorageWrapper(v19);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(a1 + 4, HIDWORD(a2));
  if (!v3) {
    return v3;
  }
  unint64_t v4 = (void *)a1[28];
  if (!v4) {
    return v3;
  }
  uint64_t v5 = a1[31];
  while (1)
  {
    v10[0] = &v8;
    v10[1] = 1;
    uint64_t v9 = v5;
    uint64_t v6 = v4[6];
    if (!v6) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v6 + 48))(v6, &v9, v10);
    unint64_t v4 = (void *)*v4;
    if (!v4) {
      return v3;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          *(unsigned char *)(v13 + v7) = *(unsigned char *)(v14 - 1);
          a1[11] = v14 - 1;
          char v15 = (void *)a1[28];
          if (v15)
          {
            uint64_t v16 = a1[31];
            while (1)
            {
              v21[0] = &v19;
              v21[1] = 1;
              uint64_t v20 = v16;
              uint64_t v17 = v15[6];
              if (!v17) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v20, v21);
              char v15 = (void *)*v15;
              if (!v15) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::~ComponentStorageWrapper(v18);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v24 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v24);
  if (v6)
  {
    uint64_t v12 = (void *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      char v15 = (void *)a1[10];
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v15) + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v15) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(24 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[8 * (v12 - v15)];
      *(_OWORD *)uint64_t v20 = *a3;
      *((void *)v20 + 2) = *((void *)a3 + 2);
      uint64_t v14 = v20 + 24;
      if (v12 != v15)
      {
        do
        {
          long long v21 = *(_OWORD *)(v12 - 3);
          *((void *)v20 - 1) = *(v12 - 1);
          *(_OWORD *)(v20 - 24) = v21;
          v20 -= 24;
          v12 -= 3;
        }
        while (v12 != v15);
        uint64_t v12 = (void *)a1[10];
      }
      a1[10] = v20;
      a1[11] = v14;
      a1[12] = &v19[24 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v13 = *a3;
      void v12[2] = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = v12 + 3;
    }
    a1[11] = v14;
    uint64_t v8 = a1[31];
  }
  else
  {
    unint64_t v7 = (_DWORD *)(a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3));
    *unint64_t v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    v7[2] = *((_DWORD *)a3 + 2);
    void v7[3] = *((_DWORD *)a3 + 3);
    v7[4] = *((_DWORD *)a3 + 4);
    void v7[5] = *((_DWORD *)a3 + 5);
    uint64_t v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      uint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          unint64_t v26 = &v24;
          uint64_t v27 = 1;
          uint64_t v25 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v25, &v26);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v22 = (void *)a1[22];
  if (v22)
  {
    while (1)
    {
      unint64_t v26 = &v24;
      uint64_t v27 = 1;
      uint64_t v25 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v25, &v26);
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

int8x8_t *gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(int8x8_t *result, unint64_t a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t v4 = 0;
      unint64_t v5 = 0xCBF29CE484222325;
      do
        unint64_t v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_126[v4++ + 38]);
      while (v4 != 119);
      int8x8_t v6 = result[16];
      if (!*(void *)&v6) {
        goto LABEL_39;
      }
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v8 = v5;
        if (*(void *)&v6 <= v5) {
          unint64_t v8 = v5 % *(void *)&v6;
        }
      }
      else
      {
        unint64_t v8 = (*(void *)&v6 - 1) & v5;
      }
      unint64_t v18 = *(void **)(*(void *)&result[15] + 8 * v8);
      if (!v18) {
        goto LABEL_39;
      }
      unint64_t v19 = (void *)*v18;
      if (!v19) {
        goto LABEL_39;
      }
      if (v7.u32[0] < 2uLL)
      {
        uint64_t v20 = *(void *)&v6 - 1;
        while (1)
        {
          uint64_t v22 = v19[1];
          if (v22 == v5)
          {
            if (v19[2] == v5) {
              goto LABEL_43;
            }
          }
          else if ((v22 & v20) != v8)
          {
            goto LABEL_39;
          }
          unint64_t v19 = (void *)*v19;
          if (!v19) {
            goto LABEL_39;
          }
        }
      }
      break;
    case 2:
      uint64_t v9 = 0;
      unint64_t v10 = 0xCBF29CE484222325;
      do
        unint64_t v10 = 0x100000001B3 * (v10 ^ aStdStringViewG_776[v9++ + 38]);
      while (v9 != 122);
      unint64_t v11 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(result, v10);
      return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(v11, a2);
    case 3:
      uint64_t v12 = 0;
      unint64_t v13 = 0xCBF29CE484222325;
      do
        unint64_t v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_125[v12++ + 38]);
      while (v12 != 120);
      uint64_t v14 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(result, v13);
      return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(v14, a2);
    case 4:
      uint64_t v15 = 0;
      unint64_t v16 = 0xCBF29CE484222325;
      do
        unint64_t v16 = 0x100000001B3 * (v16 ^ aStdStringViewG_777[v15++ + 38]);
      while (v15 != 122);
      unint64_t v17 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(result, v16);
      return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(v17, a2);
    default:
      return result;
  }
  while (1)
  {
    unint64_t v21 = v19[1];
    if (v21 == v5) {
      break;
    }
    if (v21 >= *(void *)&v6) {
      v21 %= *(void *)&v6;
    }
    if (v21 != v8) {
LABEL_39:
    }
      operator new();
LABEL_29:
    unint64_t v19 = (void *)*v19;
    if (!v19) {
      goto LABEL_39;
    }
  }
  if (v19[2] != v5) {
    goto LABEL_29;
  }
LABEL_43:
  uint64_t v23 = (void *)v19[3];
  return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(v23, a2);
}

void sub_1A1F28810(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (int8x8_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      int8x8_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    int8x8_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A1F28AD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove();
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v20, v21);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          unint64_t v13 = (_DWORD *)(a1[10] + 8 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          int v15 = *(_DWORD *)(v14 - 8);
          v14 -= 8;
          _DWORD *v13 = v15;
          v13[1] = *(_DWORD *)(v14 + 4);
          a1[11] = v14;
          uint64_t v16 = (void *)a1[28];
          if (v16)
          {
            uint64_t v17 = a1[31];
            while (1)
            {
              v22[0] = &v20;
              v22[1] = 1;
              uint64_t v21 = v17;
              uint64_t v18 = v16[6];
              if (!v18) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v21, v22);
              uint64_t v16 = (void *)*v16;
              if (!v16) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::~ComponentStorageWrapper(v19);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::IcoSphereMesh>(int8x8_t *a1)
{
  unint64_t v10 = 0xD4B151FA42BB996FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD4B151FA42BB996FLL;
    if (*(void *)&v1 <= 0xD4B151FA42BB996FLL) {
      unint64_t v3 = 0xD4B151FA42BB996FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD4B151FA42BB996FLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD4B151FA42BB996FLL)
      {
        if (v5[2] == 0xD4B151FA42BB996FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD4B151FA42BB996FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD4B151FA42BB996FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F29538(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(unsigned char *)(v14 + v7) = *(unsigned char *)--a1[11];
  int v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v21, v22);
    int v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::IcoSphereMesh>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARProcessMeshComponentsLogic::prepareCustomBoxMeshes(md::LayoutContext const&)::$_0::operator()(uint64_t a1, uint64_t a2, float64_t **a3)
{
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  uint64_t v165 = 0;
  uint64_t v160 = 0;
  long long v161 = 0;
  uint64_t v162 = 0;
  md::GeometryLogic::createBox(&v163, &v160);
  uint64_t v6 = v163;
  uint64_t v5 = v164;
  uint64_t v7 = v160;
  uint64_t v8 = v161;
  uint64_t v9 = (std::__shared_weak_count *)operator new(0xF8uLL);
  unint64_t v10 = (v5 - v6) / 12;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585030;
  uint64_t v11 = ggl::BufferData::BufferData((uint64_t)&v9[1], 12, 0, 0, 6, v10);
  v9[9].__shared_weak_owners_ = (uint64_t)"/ARMesh/VertexData";
  v9[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedVboReflection;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55CC88;
  v9[9].__shared_owners_ = (uint64_t)&unk_1EF55CCA8;
  uint64_t v158 = (uint64_t *)v11;
  uint64_t v159 = v9;
  long long v153 = 0uLL;
  unint64_t v12 = v9[1].__shared_owners_ * v10;
  *(void *)&long long v13 = 0;
  *((void *)&v13 + 1) = v11;
  if (v12) {
    uint64_t v14 = v9[4].__vftable;
  }
  else {
    uint64_t v14 = 0;
  }
  long long v153 = v13;
  unint64_t v154 = 0;
  unint64_t v155 = v12;
  unint64_t v157 = v14;
  __int16 v156 = 1;
  int v15 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583FC8;
  uint64_t v16 = ggl::BufferData::BufferData((uint64_t)&v15[1], qword_1E9558C10, 3, 1, 6, v10);
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B9D0;
  uint64_t v151 = (uint64_t *)v16;
  uint64_t v152 = v15;
  long long v146 = 0uLL;
  unint64_t v17 = v15[1].__shared_owners_ * v10;
  *(void *)&long long v18 = 0;
  *((void *)&v18 + 1) = v16;
  if (v17) {
    unint64_t v19 = v15[4].__vftable;
  }
  else {
    unint64_t v19 = 0;
  }
  long long v146 = v18;
  unint64_t v147 = 0;
  unint64_t v148 = v17;
  __int16 v150 = v19;
  __int16 v149 = 1;
  unint64_t v20 = (std::__shared_weak_count *)operator new(0xE0uLL);
  uint64_t v132 = a2;
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584000;
  uint64_t v21 = ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1E9558BD0, 3, 1, 6, v10);
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B9F0;
  uint64_t v144 = (uint64_t *)v21;
  unint64_t v145 = v20;
  float64x2_t v139 = 0uLL;
  v22.f64[0] = 0.0;
  *(void *)&v22.f64[1] = v21;
  unint64_t v23 = v20[1].__shared_owners_ * v10;
  uint64_t v24 = (float16x8_t *)v20[4].__vftable;
  float64x2_t v139 = v22;
  unint64_t v140 = 0;
  unint64_t v141 = v23;
  unint64_t v143 = v24;
  __int16 v142 = 1;
  v25.f64[0] = **a3;
  v26.f64[0] = (*a3)[1];
  v27.f64[0] = (*a3)[2];
  v29.f64[0] = (*a3)[6];
  v28.f64[0] = (*a3)[7];
  v30.f64[0] = (*a3)[8];
  v32.f64[0] = (*a3)[12];
  v31.f64[0] = (*a3)[13];
  v33.f64[0] = (*a3)[14];
  v35.f64[0] = (*a3)[18];
  v34.f64[0] = (*a3)[19];
  v22.f64[0] = (*a3)[20];
  v29.f64[1] = (*a3)[9];
  v25.f64[1] = (*a3)[3];
  *(float32x2_t *)&v25.f64[0] = vcvt_f32_f64(v25);
  v26.f64[1] = (*a3)[4];
  *(float32x2_t *)&v26.f64[0] = vcvt_f32_f64(v26);
  v27.f64[1] = (*a3)[5];
  int32x2_t v36 = vzip1_s32(*(int32x2_t *)&v25.f64[0], *(int32x2_t *)&v26.f64[0]);
  *(float32x2_t *)&v27.f64[0] = vcvt_f32_f64(v27);
  unint64_t v37 = __PAIR64__(HIDWORD(v25.f64[0]), LODWORD(v27.f64[0]));
  float32x4_t v38 = vcvt_hight_f32_f64(*(int32x2_t *)&v25.f64[0], v29);
  *(float32x2_t *)&v29.f64[0] = vcvt_f32_f64(v29);
  v28.f64[1] = (*a3)[10];
  v30.f64[1] = (*a3)[11];
  v35.f64[1] = (*a3)[21];
  v32.f64[1] = (*a3)[15];
  v34.f64[1] = (*a3)[22];
  v31.f64[1] = (*a3)[16];
  v22.f64[1] = (*a3)[23];
  v33.f64[1] = (*a3)[17];
  int32x2_t v39 = vzip2_s32(*(int32x2_t *)&v26.f64[0], *(int32x2_t *)&v27.f64[0]);
  float32x4_t v40 = vcvt_hight_f32_f64(*(int32x2_t *)&v26.f64[0], v28);
  *(float32x2_t *)&v28.f64[0] = vcvt_f32_f64(v28);
  float32x4_t v41 = vcvt_hight_f32_f64(*(int32x2_t *)&v27.f64[0], v30);
  *(float32x2_t *)&v30.f64[0] = vcvt_f32_f64(v30);
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v39;
  v14->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))vzip1_s32(*(int32x2_t *)&v29.f64[0], *(int32x2_t *)&v28.f64[0]);
  *(int32x2_t *)&v28.f64[0] = vzip2_s32(*(int32x2_t *)&v28.f64[0], *(int32x2_t *)&v30.f64[0]);
  HIDWORD(v30.f64[0]) = HIDWORD(v29.f64[0]);
  v14->__on_zero_shared_weauint64_t k = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v30.f64[0];
  v14[1].~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v28.f64[0];
  __asm { FMOV            V6.4S, #1.0 }
  float32x4_t v47 = vdivq_f32(_Q6, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v38, v38), v40, v40), v41, v41)));
  int32x4_t v48 = (int32x4_t)vmlaq_f32(_Q6, v41, v47);
  float32x4_t v49 = (float32x4_t)vdupq_n_s32(0x3E90019Du);
  int32x4_t v50 = (int32x4_t)vmulq_f32(v47, v49);
  v41.i64[0] = 0x3F0000003F000000;
  v41.i64[1] = 0x3F0000003F000000;
  *uint64_t v24 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v50, v50), (float32x4_t)vzip1q_s32((int32x4_t)v38, (int32x4_t)v40)), (float32x4_t)vzip1q_s32(v48, v48)), v41)), vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v50, v50), (float32x4_t)vzip2q_s32((int32x4_t)v38, (int32x4_t)v40)), (float32x4_t)vzip2q_s32(v48, v48)), v41));
  *(float32x2_t *)&v32.f64[0] = vcvt_f32_f64(v32);
  *(float32x2_t *)&v31.f64[0] = vcvt_f32_f64(v31);
  *(int32x2_t *)v50.i8 = vzip1_s32(*(int32x2_t *)&v32.f64[0], *(int32x2_t *)&v31.f64[0]);
  *(float32x2_t *)&v33.f64[0] = vcvt_f32_f64(v33);
  v48.i64[0] = __PAIR64__(HIDWORD(v32.f64[0]), LODWORD(v33.f64[0]));
  float32x4_t v51 = vcvt_hight_f32_f64(*(int32x2_t *)&v32.f64[0], v35);
  *(float32x2_t *)&v35.f64[0] = vcvt_f32_f64(v35);
  *(int32x2_t *)v38.f32 = vzip2_s32(*(int32x2_t *)&v31.f64[0], *(int32x2_t *)&v33.f64[0]);
  float32x4_t v52 = vcvt_hight_f32_f64(*(int32x2_t *)&v31.f64[0], v34);
  *(float32x2_t *)&v34.f64[0] = vcvt_f32_f64(v34);
  float32x4_t v53 = vcvt_hight_f32_f64(*(int32x2_t *)&v33.f64[0], v22);
  *(float32x2_t *)&v22.f64[0] = vcvt_f32_f64(v22);
  v14[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v50.i64[0];
  v14[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v48.i64[0];
  v14[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v38.i64[0];
  v14[1].__on_zero_shared_weauint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))vzip1_s32(*(int32x2_t *)&v35.f64[0], *(int32x2_t *)&v34.f64[0]);
  *(int32x2_t *)&v34.f64[0] = vzip2_s32(*(int32x2_t *)&v34.f64[0], *(int32x2_t *)&v22.f64[0]);
  HIDWORD(v22.f64[0]) = HIDWORD(v35.f64[0]);
  v14[2].~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v22.f64[0];
  v14[2].~__shared_weak_count_0 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))&v34.f64[0];
  float32x4_t v54 = vdivq_f32(_Q6, vsqrtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v51, v51), v52, v52), v53, v53)));
  int32x4_t v55 = (int32x4_t)vmlaq_f32(_Q6, v53, v54);
  int32x4_t v56 = (int32x4_t)vmulq_f32(v54, v49);
  v24[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip1q_s32(v56, v56), (float32x4_t)vzip1q_s32((int32x4_t)v51, (int32x4_t)v52)), (float32x4_t)vzip1q_s32(v55, v55)), v41)), vaddq_f32(vdivq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v56, v56), (float32x4_t)vzip2q_s32((int32x4_t)v51, (int32x4_t)v52)), (float32x4_t)vzip2q_s32(v55, v55)), v41));
  size_t v57 = v150;
  *(_OWORD *)&v150->~__shared_weak_count = xmmword_1A28FD1C0;
  *(_OWORD *)&v57->__on_zero_shared = xmmword_1A28FD1C0;
  uint64_t v58 = (std::__shared_weak_count *)operator new(0xF8uLL);
  unint64_t v59 = (v8 - v7) >> 2;
  v58->__shared_owners_ = 0;
  v58->__shared_weak_owners_ = 0;
  v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
  ggl::BufferData::BufferData((uint64_t)&v58[1], 2, 1, 0, 6, v59);
  int v60 = 0;
  LODWORD(v58[10].__vftable) = 0;
  v58[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
  v58[1].__shared_owners_ = 2;
  v58[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
  v58[9].__shared_weak_owners_ = (uint64_t)"/ARMesh/IndexData";
  unint64_t v138 = v58;
  *(void *)&long long v61 = 0;
  if ((unint64_t)(v8 - v7) >= 4) {
    int v60 = v58[4].__vftable;
  }
  *((void *)&v61 + 1) = v58 + 1;
  long long v135 = v61;
  unint64_t v136 = 2 * v59;
  float32x4_t v137 = v60;
  if (v8 != v7)
  {
    uint64_t v62 = v160;
    if (v59 <= 1) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = (v8 - v7) >> 2;
    }
    if (v63 <= 0xF)
    {
      unint64_t v64 = 0;
LABEL_18:
      unint64_t v72 = v63 - v64;
      float32x4_t v73 = (_WORD *)((char *)v60 + 2 * v64);
      float32x4_t v74 = &v62[4 * v64];
      do
      {
        int v75 = *(_DWORD *)v74;
        v74 += 4;
        *v73++ = v75;
        --v72;
      }
      while (v72);
      goto LABEL_20;
    }
    unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF0;
    p_on_zero_shared = (int16x8_t *)&v60->__on_zero_shared;
    unint64_t v66 = v160 + 32;
    unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v69 = *((int16x8_t *)v66 - 2);
      int16x8_t v68 = *((int16x8_t *)v66 - 1);
      int16x8_t v71 = *(int16x8_t *)v66;
      int16x8_t v70 = *((int16x8_t *)v66 + 1);
      v66 += 64;
      p_on_zero_shared[-1] = vuzp1q_s16(v69, v68);
      int16x8_t *p_on_zero_shared = vuzp1q_s16(v71, v70);
      p_on_zero_shared += 2;
      v67 -= 16;
    }
    while (v67);
    if (v63 != v64) {
      goto LABEL_18;
    }
  }
LABEL_20:
  unint64_t v76 = (std::__shared_weak_count *)operator new(0xA8uLL);
  float32x4_t v77 = v76;
  v76->__shared_owners_ = 0;
  v76->__shared_weak_owners_ = 0;
  v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589438;
  uint64_t v78 = (uint64_t)&v76[1];
  float32x4x3_t v168 = v158;
  float32x4x3_t v169 = v159;
  if (v159) {
    atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v166 = (uint64_t *)&v58[1];
  unint64_t v167 = v58;
  atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)&v76[1], (uint64_t)"/ARMesh/CustomBox", (uint64_t *)&v168, (uint64_t *)&v166);
  if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  float32x4_t v79 = v169;
  if (!v169 || atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v5 != v6) {
      goto LABEL_27;
    }
LABEL_39:
    float v85 = 3.4028e38;
    float v87 = -3.4028e38;
    float v86 = -3.4028e38;
    float v82 = -3.4028e38;
    float v84 = 3.4028e38;
    float v83 = 3.4028e38;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (v5 == v6) {
    goto LABEL_39;
  }
LABEL_27:
  if (v10 <= 1) {
    unint64_t v80 = 1;
  }
  else {
    unint64_t v80 = (v5 - v6) / 12;
  }
  if (v80 <= 7)
  {
    unint64_t v81 = 0;
    float v82 = -3.4028e38;
    float v83 = 3.4028e38;
    float v84 = 3.4028e38;
    float v85 = 3.4028e38;
    float v86 = -3.4028e38;
    float v87 = -3.4028e38;
LABEL_35:
    unint64_t v109 = v80 - v81;
    unint64_t v110 = &(*a3)[3 * v81 + 2];
    do
    {
      float v111 = *(v110 - 2);
      float v112 = *(v110 - 1);
      double v113 = *v110;
      v110 += 3;
      float v114 = v113;
      float v83 = fminf(v83, v111);
      float v82 = fmaxf(v82, v111);
      float v84 = fminf(v84, v112);
      float v86 = fmaxf(v86, v112);
      float v85 = fminf(v85, v114);
      float v87 = fmaxf(v87, v114);
      --v109;
    }
    while (v109);
    goto LABEL_40;
  }
  float32x4_t v88 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
  v89.i64[0] = 0x80000000800000;
  v89.i64[1] = 0x80000000800000;
  float v90 = *a3;
  unint64_t v91 = v80 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v92 = v88;
  float32x4_t v93 = v88;
  float32x4_t v94 = v88;
  float32x4_t v95 = v88;
  float32x4_t v96 = v88;
  v97.i64[0] = 0x80000000800000;
  v97.i64[1] = 0x80000000800000;
  v98.i64[0] = 0x80000000800000;
  v98.i64[1] = 0x80000000800000;
  v99.i64[0] = 0x80000000800000;
  v99.i64[1] = 0x80000000800000;
  v100.i64[0] = 0x80000000800000;
  v100.i64[1] = 0x80000000800000;
  v101.i64[0] = 0x80000000800000;
  v101.i64[1] = 0x80000000800000;
  do
  {
    unint64_t v102 = v90 + 12;
    uint64_t v103 = v90;
    float64x2x3_t v170 = vld3q_f64(v103);
    v103 += 6;
    float64x2x3_t v171 = vld3q_f64(v103);
    float64x2x3_t v172 = vld3q_f64(v102);
    uint64_t v104 = v90 + 18;
    float64x2x3_t v173 = vld3q_f64(v104);
    float32x4_t v105 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v170.val[0]), v171.val[0]);
    float32x4_t v106 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172.val[0]), v173.val[0]);
    float32x4_t v107 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v170.val[1]), v171.val[1]);
    float32x4_t v108 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172.val[1]), v173.val[1]);
    v170.val[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v170.val[2]), v171.val[2]);
    v170.val[1] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172.val[2]), v173.val[2]);
    float32x4_t v88 = vminnmq_f32(v88, v105);
    float32x4_t v92 = vminnmq_f32(v92, v106);
    float32x4_t v89 = vmaxnmq_f32(v89, v105);
    float32x4_t v97 = vmaxnmq_f32(v97, v106);
    float32x4_t v93 = vminnmq_f32(v93, v107);
    float32x4_t v94 = vminnmq_f32(v94, v108);
    float32x4_t v98 = vmaxnmq_f32(v98, v107);
    float32x4_t v99 = vmaxnmq_f32(v99, v108);
    float32x4_t v95 = vminnmq_f32(v95, (float32x4_t)v170.val[0]);
    float32x4_t v96 = vminnmq_f32(v96, (float32x4_t)v170.val[1]);
    float32x4_t v100 = vmaxnmq_f32(v100, (float32x4_t)v170.val[0]);
    float32x4_t v101 = vmaxnmq_f32(v101, (float32x4_t)v170.val[1]);
    v90 += 24;
    v91 -= 8;
  }
  while (v91);
  float v87 = vmaxnmvq_f32(vmaxnmq_f32(v100, v101));
  float v86 = vmaxnmvq_f32(vmaxnmq_f32(v98, v99));
  float v82 = vmaxnmvq_f32(vmaxnmq_f32(v89, v97));
  float v85 = vminnmvq_f32(vminnmq_f32(v95, v96));
  float v84 = vminnmvq_f32(vminnmq_f32(v93, v94));
  float v83 = vminnmvq_f32(vminnmq_f32(v88, v92));
  if (v80 != v81) {
    goto LABEL_35;
  }
LABEL_40:
  float32x4x3_t v168 = v151;
  float32x4x3_t v169 = v152;
  if (v152)
  {
    atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::Mesh::setCustomDeviceData(v78, &v168, 0);
    if (!atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  else
  {
    ggl::Mesh::setCustomDeviceData(v78, &v168, 0);
  }
  uint64_t v166 = v144;
  unint64_t v167 = v145;
  if (v145)
  {
    atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::Mesh::setCustomDeviceData(v78, &v166, (uint64_t *)1);
    if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  else
  {
    ggl::Mesh::setCustomDeviceData(v78, &v166, (uint64_t *)1);
  }
  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v134 = __PAIR64__(LODWORD(v84), LODWORD(v83));
  *((void *)&v134 + 1) = __PAIR64__(LODWORD(v82), LODWORD(v85));
  if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  if (v137 && v136)
  {
    if ((void)v135 && *(unsigned char *)(*((void *)&v135 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v135 + 64))();
    }
    uint64_t v116 = *(void *)(*((void *)&v135 + 1) + 56);
    unint64_t v115 = *(void *)(*((void *)&v135 + 1) + 64);
    if (v115 == v116) {
      uint64_t v116 = *(void *)(*((void *)&v135 + 1) + 80) - *(void *)(*((void *)&v135 + 1) + 72);
    }
    if (v116) {
      uint64_t v116 = 0;
    }
    if (v115 <= v136) {
      unint64_t v115 = v136;
    }
    if (v115 == v116) {
      unint64_t v115 = v116 + *(void *)(*((void *)&v135 + 1) + 80) - *(void *)(*((void *)&v135 + 1) + 72);
    }
    *(void *)(*((void *)&v135 + 1) + 56) = v116;
    *(void *)(*((void *)&v135 + 1) + 64) = v115;
  }
  if (v138 && !atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
  }
  if (v143 && v141 != v140)
  {
    float64_t v117 = v139.f64[1];
    if (*(void *)&v139.f64[0] && *(unsigned char *)(*(void *)&v139.f64[1] + 17) != 2) {
      (*(void (**)(void))(**(void **)&v139.f64[0] + 64))();
    }
    if ((_BYTE)v142 && !HIBYTE(v142))
    {
      unint64_t v119 = *(void *)(*(void *)&v139.f64[1] + 56);
      unint64_t v118 = *(void *)(*(void *)&v139.f64[1] + 64);
      if (v118 == v119) {
        unint64_t v119 = *(void *)(*(void *)&v139.f64[1] + 80) - *(void *)(*(void *)&v139.f64[1] + 72);
      }
      if (v140 < v119) {
        unint64_t v119 = v140;
      }
      if (v118 <= v141) {
        unint64_t v118 = v141;
      }
      if (v118 == v119) {
        unint64_t v118 = v119 + *(void *)(*(void *)&v139.f64[1] + 80) - *(void *)(*(void *)&v139.f64[1] + 72);
      }
      *(void *)(*(void *)&v139.f64[1] + 56) = v119;
      *(void *)(*(void *)&v117 + 64) = v118;
    }
  }
  if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
  if (v150 && v148 != v147)
  {
    uint64_t v120 = *((void *)&v146 + 1);
    if ((void)v146 && *(unsigned char *)(*((void *)&v146 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v146 + 64))();
    }
    if ((_BYTE)v149 && !HIBYTE(v149))
    {
      unint64_t v122 = *(void *)(*((void *)&v146 + 1) + 56);
      unint64_t v121 = *(void *)(*((void *)&v146 + 1) + 64);
      if (v121 == v122) {
        unint64_t v122 = *(void *)(*((void *)&v146 + 1) + 80) - *(void *)(*((void *)&v146 + 1) + 72);
      }
      if (v147 < v122) {
        unint64_t v122 = v147;
      }
      if (v121 <= v148) {
        unint64_t v121 = v148;
      }
      if (v121 == v122) {
        unint64_t v121 = v122 + *(void *)(*((void *)&v146 + 1) + 80) - *(void *)(*((void *)&v146 + 1) + 72);
      }
      *(void *)(*((void *)&v146 + 1) + 56) = v122;
      *(void *)(v120 + 64) = v121;
    }
  }
  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
  if (v157 && v155 != v154)
  {
    uint64_t v123 = *((void *)&v153 + 1);
    if ((void)v153 && *(unsigned char *)(*((void *)&v153 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v153 + 64))();
    }
    if ((_BYTE)v156 && !HIBYTE(v156))
    {
      unint64_t v125 = *(void *)(*((void *)&v153 + 1) + 56);
      unint64_t v124 = *(void *)(*((void *)&v153 + 1) + 64);
      if (v124 == v125) {
        unint64_t v125 = *(void *)(*((void *)&v153 + 1) + 80) - *(void *)(*((void *)&v153 + 1) + 72);
      }
      if (v154 < v125) {
        unint64_t v125 = v154;
      }
      if (v124 <= v155) {
        unint64_t v124 = v155;
      }
      if (v124 == v125) {
        unint64_t v124 = v125 + *(void *)(*((void *)&v153 + 1) + 80) - *(void *)(*((void *)&v153 + 1) + 72);
      }
      *(void *)(*((void *)&v153 + 1) + 56) = v125;
      *(void *)(v123 + 64) = v124;
    }
  }
  if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
  }
  if (v160)
  {
    long long v161 = v160;
    operator delete(v160);
  }
  if (v163) {
    operator delete(v163);
  }
  uint64_t v126 = *(int8x8_t **)(a1 + 144);
  long long v153 = v134;
  unint64_t v154 = __PAIR64__(LODWORD(v87), LODWORD(v86));
  unint64_t v127 = (void *)gdc::Registry::storage<arComponents::Boundary>(v126);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v127, v132, &v153);
  uint64_t v128 = (uint64_t *)gdc::Registry::storage<arComponents::CustomBoxCreateDesc>(*(int8x8_t **)(a1 + 144));
  *(void *)&v139.f64[0] = v132;
  if (geo::sparse_map<gdc::Entity,arComponents::CustomBoxCreateDesc>::erase(v128 + 4, HIDWORD(v132))
    && (uint64_t v129 = (void *)v128[28]) != 0)
  {
    uint64_t v130 = v128[31];
    while (1)
    {
      *(void *)&long long v153 = &v139;
      *((void *)&v153 + 1) = 1;
      *(void *)&long long v146 = v130;
      uint64_t v131 = v129[6];
      if (!v131) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v131 + 48))(v131, &v146, &v153);
      uint64_t v129 = (void *)*v129;
      if (!v129) {
        goto LABEL_133;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  else
  {
LABEL_133:
    if (v77)
    {
      if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
}

void sub_1A1F2A5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a33);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a41);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a43);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v43 - 240);
  uint64_t v45 = *(void **)(v43 - 224);
  if (v45)
  {
    *(void *)(v43 - 216) = v45;
    operator delete(v45);
    BOOL v46 = *(void **)(v43 - 200);
    if (!v46) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    BOOL v46 = *(void **)(v43 - 200);
    if (!v46) {
      goto LABEL_3;
    }
  }
  operator delete(v46);
  _Unwind_Resume(a1);
}

void sub_1A1F2A684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x3C394DB2AC35C8 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3C394DB2AC35C8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::ARProcessMeshComponentsLogic,md::ARProcessMeshComponentsContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1F2AA9C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARProcessMeshComponentsContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARProcessMeshComponentsContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555CD0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARProcessMeshComponentsContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555CD0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::ARProcessMeshComponentsLogic::~ARProcessMeshComponentsLogic(md::ARProcessMeshComponentsLogic *this)
{
  *(void *)this = &unk_1EF549100;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF549100;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void altitude::Map::~Map(altitude::Map *this)
{
  *(void *)this = &unk_1EF56B2A8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF56B2A8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL altitude::MapRequest::succeeded(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  int v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  return (v2 & 2) == 0 && this[28] != 0;
}

void altitude::MapRequest::jobStep(altitude::MapRequest *this)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(*((void *)this + 1) + 68);
  switch(*((_DWORD *)this + 110))
  {
    case 0:
      karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::reference((uint64_t **)buf, *((void *)this + 25), (uint64_t)this + 240);
      uint64_t v4 = *(void *)buf;
      uint64_t v3 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 39);
      *((void *)this + 38) = v4;
      *((void *)this + 39) = v3;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v7 = *((void *)this + 38);
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (v9)
      {
        uint64_t v10 = *((void *)this + 38);
        uint64_t v11 = *(void *)(v10 + 8);
        unint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v13 = (std::__shared_weak_count *)*((void *)this + 29);
        *((void *)this + 28) = v11;
        *((void *)this + 29) = v12;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        return;
      }
      uint64_t v58 = *((void *)this + 34);
      uint64_t v57 = *((void *)this + 35);
      uint64_t v59 = v57 - v58;
      unint64_t v60 = (v57 - v58) >> 5;
      if (v60 != 1 && v60 != 4)
      {
        (*(void (**)(altitude::MapRequest *))(*(void *)this + 16))(this);
LABEL_368:
        ++*((_DWORD *)this + 110);
        return;
      }
      if (*((unsigned char *)this + 444))
      {
        uint64_t v62 = *((void *)this + 40);
        long long v61 = (void (***)(void))*((void *)this + 41);
        unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v61 - v62) >> 3);
        unint64_t v64 = v60 - v63;
        if (v60 <= v63)
        {
          if (v60 < v63)
          {
            float32x4x3_t v168 = (void (***)(void))(v62 + 40 * v60);
            if (v61 != v168)
            {
              float32x4x3_t v169 = v61 - 5;
              float64x2x3_t v170 = v61 - 5;
              float64x2x3_t v171 = v61 - 5;
              do
              {
                float64x2x3_t v172 = *v171;
                v171 -= 5;
                (*v172)(v170);
                v169 -= 5;
                BOOL v173 = v170 == v168;
                float64x2x3_t v170 = v171;
              }
              while (!v173);
            }
            *((void *)this + 41) = v168;
          }
          goto LABEL_311;
        }
        uint64_t v65 = *((void *)this + 42);
        if (0xCCCCCCCCCCCCCCCDLL * ((v65 - (uint64_t)v61) >> 3) >= v64)
        {
          unint64_t v184 = &v61[5 * v64];
          uint64_t v185 = 40 * v60 - 8 * (((uint64_t)v61 - v62) >> 3);
          unint64_t v186 = (void *)*((void *)this + 41);
          do
          {
            v186[1] = 0;
            v186[2] = 0;
            void *v186 = off_1EF5676C0;
            v186[3] = 0;
            v186[4] = 0;
            v186 += 5;
            v61 += 5;
            v185 -= 40;
          }
          while (v185);
          *((void *)this + 41) = v184;
LABEL_311:
          if (v57 != v58)
          {
            unint64_t v200 = (v57 - v58) >> 5;
            unint64_t v201 = 0;
            unsigned int v202 = 1;
            do
            {
              atomic_load((unsigned int *)this + 4);
              (*(void (**)(uint8_t *__return_ptr))(**((void **)this + 24) + 104))(buf);
              uint64_t v203 = *((void *)this + 40);
              uint64_t v204 = v203 + 40 * v201;
              uint64_t v205 = *(void *)(v204 + 8);
              if (v205) {
                atomic_fetch_add((atomic_uint *volatile)(v205 + 128), 0xFFFFFFFF);
              }
              uint64_t v206 = *(void *)&buf[8];
              unint64_t v207 = v238.n128_u64[0];
              if (v238.n128_u64[0]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v238.n128_u64[0] + 8), 1uLL, memory_order_relaxed);
              }
              char v208 = *(std::__shared_weak_count **)(v204 + 16);
              *(void *)(v204 + 8) = v206;
              *(void *)(v204 + 16) = v207;
              if (v208)
              {
                if (!atomic_fetch_add(&v208->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
                uint64_t v206 = *(void *)(v204 + 8);
              }
              if (v206) {
                atomic_fetch_add((atomic_uint *volatile)(v206 + 128), 1u);
              }
              unint64_t v210 = v238.n128_u64[1];
              unint64_t v209 = v239.n128_u64[0];
              if (v239.n128_u64[0]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v239.n128_u64[0] + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)(v203 + 40 * v201 + 24) = v210;
              uint64_t v211 = v203 + 40 * v201;
              uint64_t v212 = *(std::__shared_weak_count **)(v211 + 32);
              *(void *)(v211 + 32) = v209;
              if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                std::__shared_weak_count::__release_weak(v212);
              }
              *(void *)int buf = off_1EF5676C0;
              uint64_t v213 = (std::__shared_weak_count *)v239.n128_u64[0];
              if (v239.n128_u64[0]
                && !atomic_fetch_add((atomic_ullong *volatile)(v239.n128_u64[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
              *(void *)int buf = off_1EF5677B0;
              if (*(void *)&buf[8]) {
                atomic_fetch_add((atomic_uint *volatile)(*(void *)&buf[8] + 128), 0xFFFFFFFF);
              }
              long long v214 = (std::__shared_weak_count *)v238.n128_u64[0];
              if (v238.n128_u64[0]
                && !atomic_fetch_add((atomic_ullong *volatile)(v238.n128_u64[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                std::__shared_weak_count::__release_weak(v214);
              }
              uint64_t v215 = *((void *)this + 40) + 40 * v201;
              unint64_t v231 = *(void (***)(karo::AsyncRequestManager::RequestHandle *__hidden))(v215 + 8);
              uint64_t v216 = *(std::__shared_weak_count **)(v215 + 16);
              uint64_t v232 = v216;
              if (v216)
              {
                atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                karo::Job::addBlockingSubJob((uint64_t *)this, &v231, -1, 0);
                if (!atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                  std::__shared_weak_count::__release_weak(v216);
                }
              }
              else
              {
                karo::Job::addBlockingSubJob((uint64_t *)this, &v231, -1, 0);
              }
              unint64_t v201 = v202++;
            }
            while (v200 > v201);
          }
          goto LABEL_368;
        }
        if ((v59 & 0x8000000000000000) == 0)
        {
          unint64_t v66 = 0x999999999999999ALL * ((v65 - v62) >> 3);
          if (v66 <= v60) {
            unint64_t v66 = (v57 - v58) >> 5;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v65 - v62) >> 3) >= 0x333333333333333) {
            unint64_t v67 = 0x666666666666666;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67 <= 0x666666666666666)
          {
            int16x8_t v68 = (char *)operator new(40 * v67);
            int16x8_t v69 = &v68[40 * v63];
            int16x8_t v70 = &v68[40 * v60];
            uint64_t v71 = 40 * v60 - 40 * v63;
            unint64_t v72 = v69;
            float32x4_t v73 = v69;
            do
            {
              *((void *)v73 + 1) = 0;
              *((void *)v73 + 2) = 0;
              *(void *)float32x4_t v73 = off_1EF5676C0;
              *((void *)v73 + 3) = 0;
              *((void *)v73 + 4) = 0;
              v73 += 40;
              v72 += 40;
              v71 -= 40;
            }
            while (v71);
            float32x4_t v74 = &v68[40 * v67];
            int v75 = (char *)*((void *)this + 40);
            unint64_t v76 = (char *)*((void *)this + 41);
            if (v76 == v75)
            {
              *((void *)this + 40) = v69;
              *((void *)this + 41) = v70;
              *((void *)this + 42) = v74;
            }
            else
            {
              uint64_t v77 = (uint64_t)&v68[40 * v63 - 40];
              uint64_t v78 = &v68[40 * v63];
              do
              {
                *((void *)v78 - 5) = off_1EF5677B0;
                v78 -= 40;
                uint64_t v79 = *((void *)v76 - 4);
                *((void *)v78 + 1) = v79;
                uint64_t v80 = *((void *)v76 - 3);
                *((void *)v78 + 2) = v80;
                if (v80)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
                  uint64_t v79 = *((void *)v69 - 4);
                }
                if (v79) {
                  atomic_fetch_add((atomic_uint *volatile)(v79 + 128), 1u);
                }
                *((void *)v69 - 5) = off_1EF5676C0;
                *((void *)v69 - 2) = *((void *)v76 - 2);
                uint64_t v81 = *((void *)v76 - 1);
                *((void *)v69 - 1) = v81;
                if (v81) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
                }
                v76 -= 40;
                v77 -= 40;
                int16x8_t v69 = v78;
              }
              while (v76 != v75);
              unint64_t v76 = (char *)*((void *)this + 40);
              unint64_t v191 = (char *)*((void *)this + 41);
              *((void *)this + 40) = v78;
              *((void *)this + 41) = v70;
              *((void *)this + 42) = v74;
              if (v191 != v76)
              {
                uint64_t v192 = v191 - 40;
                char v193 = v191 - 40;
                size_t v194 = (void (***)(char *))(v191 - 40);
                do
                {
                  unint64_t v195 = *v194;
                  v194 -= 5;
                  (*v195)(v193);
                  v192 -= 40;
                  BOOL v173 = v193 == v76;
                  char v193 = (char *)v194;
                }
                while (!v173);
              }
            }
            if (v76) {
              operator delete(v76);
            }
            goto LABEL_311;
          }
LABEL_371:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
LABEL_370:
        abort();
      }
      uint64_t v152 = (char *)*((void *)this + 43);
      uint64_t v151 = (char *)*((void *)this + 44);
      unint64_t v153 = (v151 - v152) >> 4;
      unint64_t v154 = v60 - v153;
      if (v60 <= v153)
      {
        if (v60 < v153)
        {
          for (uint64_t i = &v152[16 * v60]; v151 != i; v151 -= 16)
          {
            __int16 v183 = (std::__shared_weak_count *)*((void *)v151 - 1);
            if (v183 && !atomic_fetch_add(&v183->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
          *((void *)this + 44) = i;
        }
      }
      else
      {
        uint64_t v155 = *((void *)this + 45);
        if (v154 <= (v155 - (uint64_t)v151) >> 4)
        {
          bzero(*((void **)this + 44), 16 * v154);
          *((void *)this + 44) = &v151[16 * v154];
        }
        else
        {
          if (v59 < 0) {
            goto LABEL_370;
          }
          uint64_t v156 = v155 - (void)v152;
          uint64_t v157 = v156 >> 3;
          if (v156 >> 3 <= v60) {
            uint64_t v157 = (v57 - v58) >> 5;
          }
          BOOL v158 = (unint64_t)v156 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v159 = 0xFFFFFFFFFFFFFFFLL;
          if (!v158) {
            unint64_t v159 = v157;
          }
          if (v159 >> 60) {
            goto LABEL_371;
          }
          uint64_t v160 = 16 * v159;
          long long v161 = (char *)operator new(16 * v159);
          uint64_t v162 = &v161[16 * v153];
          uint64_t v163 = &v161[v160];
          bzero(v162, 16 * v154);
          uint64_t v164 = &v162[16 * v154];
          if (v151 == v152)
          {
            *((void *)this + 43) = v162;
            *((void *)this + 44) = v164;
            *((void *)this + 45) = v163;
          }
          else
          {
            do
            {
              long long v165 = *((_OWORD *)v151 - 1);
              v151 -= 16;
              *((_OWORD *)v162 - 1) = v165;
              v162 -= 16;
              *(void *)uint64_t v151 = 0;
              *((void *)v151 + 1) = 0;
            }
            while (v151 != v152);
            uint64_t v151 = (char *)*((void *)this + 43);
            uint64_t v166 = (char *)*((void *)this + 44);
            *((void *)this + 43) = v162;
            *((void *)this + 44) = v164;
            for (*((void *)this + 45) = v163; v166 != v151; v166 -= 16)
            {
              unint64_t v167 = (std::__shared_weak_count *)*((void *)v166 - 1);
              if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
          }
          if (v151) {
            operator delete(v151);
          }
        }
      }
      if (v57 != v58)
      {
        long long v217 = (char *)operator new(0x40uLL);
        *((void *)v217 + 1) = 0;
        *((void *)v217 + 2) = 0;
        *(void *)long long v217 = &unk_1EF58AB30;
        *((void *)v217 + 7) = 0;
        *(_OWORD *)(v217 + 24) = 0u;
        *(_OWORD *)(v217 + 40) = 0u;
        uint64_t v218 = (void *)*((void *)this + 43);
        long long v219 = (std::__shared_weak_count *)v218[1];
        void *v218 = v217 + 24;
        v218[1] = v217;
        if (v219 && !atomic_fetch_add(&v219->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
        uint64_t v220 = operator new(0x88uLL);
        v220[1] = 0;
        v220[2] = 0;
        void *v220 = &unk_1EF58A938;
        void v220[3] = &unk_1EF568050;
        v220[4] = 0;
        *((_DWORD *)v220 + 10) = 29;
        *((unsigned char *)v220 + 44) = 0;
        *((_OWORD *)v220 + 3) = 0u;
        *((_OWORD *)v220 + 4) = 0u;
        *((_OWORD *)v220 + 5) = 0u;
        *((_OWORD *)v220 + 6) = 0u;
        *((_OWORD *)v220 + 7) = 0u;
        *((unsigned char *)v220 + 128) = 0;
        uint64_t v221 = **((void **)this + 43);
        unint64_t v222 = *(std::__shared_weak_count **)(v221 + 16);
        *(void *)(v221 + 8) = v220 + 3;
        *(void *)(v221 + 16) = v220;
        if (v222 && !atomic_fetch_add(&v222->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
        atomic_load((unsigned int *)this + 4);
        (*(void (**)(uint8_t *__return_ptr))(**((void **)this + 24) + 104))(buf);
        uint64_t v223 = *(std::__shared_weak_count **)&buf[8];
        unint64_t v231 = off_1EF5677B0;
        uint64_t v232 = *(std::__shared_weak_count **)&buf[8];
        unint64_t v233 = v238.n128_u64[0];
        if (v238.n128_u64[0])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v238.n128_u64[0] + 8), 1uLL, memory_order_relaxed);
          uint64_t v223 = v232;
        }
        if (v223) {
          atomic_fetch_add((atomic_uint *volatile)&v223[5].__shared_owners_, 1u);
        }
        *(void *)int buf = off_1EF5676C0;
        long long v224 = (std::__shared_weak_count *)v239.n128_u64[0];
        if (v239.n128_u64[0]
          && !atomic_fetch_add((atomic_ullong *volatile)(v239.n128_u64[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
        *(void *)int buf = off_1EF5677B0;
        if (*(void *)&buf[8]) {
          atomic_fetch_add((atomic_uint *volatile)(*(void *)&buf[8] + 128), 0xFFFFFFFF);
        }
        uint64_t v225 = (std::__shared_weak_count *)v238.n128_u64[0];
        if (v238.n128_u64[0]
          && !atomic_fetch_add((atomic_ullong *volatile)(v238.n128_u64[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
        v236[0] = v232;
        v236[1] = v233;
        if (v233) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v233 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v226 = *((void *)this + 43);
        uint64_t v227 = *((void *)this + 1);
        int v228 = operator new(0xE8uLL);
        v228[1] = 0;
        v228[2] = 0;
        *int v228 = &unk_1EF58AFC8;
        if (*(void *)(v226 + 8))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(v226 + 8) + 8), 1uLL, memory_order_relaxed);
          karo::Job::Job((uint64_t)(v228 + 3), v227);
        }
        karo::Job::Job((uint64_t)(v228 + 3), v227);
      }
      goto LABEL_368;
    case 1:
      if (*((unsigned char *)this + 444))
      {
        uint64_t v14 = *((void *)this + 40);
        if (*((void *)this + 41) != v14)
        {
          unint64_t v15 = 0;
          unsigned int v16 = 1;
          while ((*(unsigned int (**)(unint64_t))(*(void *)(v14 + 40 * v15) + 16))(v14 + 40 * v15))
          {
            if ((*(unsigned int (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15) + 16))(*((void *)this + 40) + 40 * v15) != 4
              || !(*(uint64_t (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15) + 40))(*((void *)this + 40) + 40 * v15)
              || (*(uint64_t (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15) + 40))(*((void *)this + 40) + 40 * v15) == 4
              && *(_DWORD *)(*(uint64_t (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15)
                                                                        + 24))(*((void *)this + 40) + 40 * v15) == 0x2000000)
            {
              goto LABEL_181;
            }
            unint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)(*((void *)this + 40)
                                                                                             + 40 * v15)
                                                                                 + 24))(*((void *)this + 40) + 40 * v15);
            if ((*(unsigned int (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15) + 40))(*((void *)this + 40) + 40 * v15) < 0xBuLL
              || *v17 != 255
              || v17[1] != 216
              || v17[2] != 255
              || v17[3] != 224
              || v17[6] != 74
              || v17[7] != 70
              || v17[8] != 73
              || v17[9] != 70
              || v17[10])
            {
              long long v18 = (unsigned char *)(*(uint64_t (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15)
                                                                         + 24))(*((void *)this + 40) + 40 * v15);
              if (((*(uint64_t (**)(unint64_t))(*(void *)(*((void *)this + 40) + 40 * v15) + 40))(*((void *)this + 40) + 40 * v15) & 0xFFFFFFFCuLL) < 0xC
                || v18[4] != 102
                || v18[5] != 116
                || v18[6] != 121
                || v18[7] != 112
                || v18[8] != 104
                || v18[9] != 101
                || v18[10] != 105
                || v18[11] != 99)
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                }
                float v112 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
                {
                  double v113 = (_DWORD *)(*((void *)this + 34) + 32 * v15);
                  unsigned __int32 v115 = v113[4];
                  int v114 = v113[5];
                  int v116 = v113[6];
                  LODWORD(v113) = v113[7];
                  *(_DWORD *)int buf = 67109888;
                  *(_DWORD *)&buf[4] = v114;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v116;
                  *(_WORD *)&buf[14] = 1024;
                  v238.n128_u32[0] = v115;
                  v238.n128_u16[2] = 1024;
                  *(unsigned __int32 *)((char *)&v238.n128_u32[1] + 2) = v113;
                  _os_log_impl(&dword_1A1780000, v112, OS_LOG_TYPE_ERROR, "Trying to page non JPEG or HEIF data: %d %d %d %d", buf, 0x1Au);
                }
                goto LABEL_180;
              }
            }
            unint64_t v15 = v16;
            uint64_t v14 = *((void *)this + 40);
            ++v16;
            if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 41) - v14) >> 3) <= v15) {
              goto LABEL_61;
            }
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v130 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
          {
            uint64_t v187 = (_DWORD *)(*((void *)this + 34) + 32 * v15);
            unsigned __int32 v189 = v187[4];
            int v188 = v187[5];
            int v190 = v187[6];
            LODWORD(v187) = v187[7];
            *(_DWORD *)int buf = 67109888;
            *(_DWORD *)&buf[4] = v188;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v190;
            *(_WORD *)&buf[14] = 1024;
            v238.n128_u32[0] = v189;
            v238.n128_u16[2] = 1024;
            *(unsigned __int32 *)((char *)&v238.n128_u32[1] + 2) = v187;
            _os_log_impl(&dword_1A1780000, v130, OS_LOG_TYPE_ERROR, "Failed to download image %d %d %d %d", buf, 0x1Au);
          }
          goto LABEL_207;
        }
LABEL_61:
        float64x2_t v25 = (char *)operator new(0x80uLL);
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = 0;
        *(void *)float64x2_t v25 = &unk_1EF58AAC0;
        *((void *)v25 + 3) = &unk_1EF568510;
        *((void *)v25 + 5) = 0;
        *((void *)v25 + 6) = 0;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 5) = 0u;
        *((_OWORD *)v25 + 6) = 0u;
        *(_OWORD *)(v25 + 105) = 0u;
        *(void *)int buf = v25 + 24;
        *(void *)&buf[8] = v25;
        int v26 = *((_DWORD *)this + 112);
        *((_DWORD *)v25 + 8) = v26;
        float64x2_t v27 = operator new(0x58uLL);
        v27[1] = 0;
        v27[2] = 0;
        *float64x2_t v27 = &unk_1EF58AF58;
        __int16 v28 = *((_WORD *)this + 124);
        v27[3] = &unk_1EF56B2A8;
        v27[4] = *((void *)this + 30);
        *((_DWORD *)v27 + 10) = v26;
        *((_WORD *)v27 + 24) = v28;
        *(void *)((char *)v27 + 52) = *(void *)((char *)this + 252);
        v27[9] = 0;
        v27[10] = 0;
        float64x2_t v29 = (std::__shared_weak_count *)*((void *)this + 29);
        *((void *)this + 28) = v27 + 3;
        *((void *)this + 29) = v27;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        uint64_t v30 = *((void *)this + 28);
        uint64_t v31 = *(void *)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        float64x2_t v32 = *(std::__shared_weak_count **)(v30 + 56);
        *(void *)(v30 + 48) = *(void *)buf;
        *(void *)(v30 + 56) = v31;
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        ++*((_DWORD *)this + 110);
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**(void **)&buf[8] + 16))(*(void *)&buf[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
LABEL_72:
        if (v2)
        {
          uint64_t v34 = *((void *)this + 40);
          uint64_t v33 = *((void *)this + 41);
          if (v33 == v34)
          {
            int v36 = 0;
            uint64_t v37 = *((void *)this + 41);
          }
          else
          {
            float64x2_t v35 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v34 + 24))(*((void *)this + 40));
            if ((unint64_t)(*(uint64_t (**)(void))(**((void **)this + 40) + 40))(*((void *)this + 40)) >= 0xC
              && v35[4] == 102
              && v35[5] == 116
              && v35[6] == 121
              && v35[7] == 112
              && v35[8] == 104
              && v35[9] == 101
              && v35[10] == 105)
            {
              int v36 = 2 * (v35[11] == 99);
            }
            else
            {
              int v36 = 0;
            }
            uint64_t v33 = *((void *)this + 40);
            uint64_t v37 = *((void *)this + 41);
          }
          unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * ((v37 - v33) >> 3);
          if (v82 == 1)
          {
            float32x4_t v108 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33);
            size_t v109 = (*(uint64_t (**)(void))(**((void **)this + 40) + 40))(*((void *)this + 40));
            unint64_t v110 = (atomic_ullong *)operator new(0x30uLL);
            v110[2] = 0;
            v110[1] = 0;
            *unint64_t v110 = (atomic_ullong)&unk_1EF588E18;
            *(void *)int buf = ggl::Data::Data((ggl::Data *)(v110 + 3), v108, v109);
            *(void *)&buf[8] = v110;
            altitude::TextureMap::setSourceData(*(void *)(*((void *)this + 28) + 48), (__n128 *)buf, v36);
            if (atomic_fetch_add(v110 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_237;
            }
            (*(void (**)(atomic_ullong *))(*v110 + 16))(v110);
            float v111 = (std::__shared_weak_count *)v110;
          }
          else
          {
            if (v82 != 4) {
              goto LABEL_237;
            }
            __n128 v239 = 0u;
            __n128 v240 = 0u;
            *(_OWORD *)int buf = 0u;
            __n128 v238 = 0u;
            float v83 = (const unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33);
            size_t v84 = (*(uint64_t (**)(void))(**((void **)this + 40) + 40))(*((void *)this + 40));
            float v85 = operator new(0x30uLL);
            v85[1] = 0;
            v85[2] = 0;
            *float v85 = &unk_1EF588E18;
            *(void *)int buf = ggl::Data::Data((ggl::Data *)(v85 + 3), v83, v84);
            *(void *)&buf[8] = v85;
            float v86 = (const unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 40) + 40) + 24))();
            size_t v87 = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 40) + 40) + 40))();
            float32x4_t v88 = operator new(0x30uLL);
            v88[1] = 0;
            v88[2] = 0;
            *float32x4_t v88 = &unk_1EF588E18;
            float32x4_t v89 = ggl::Data::Data((ggl::Data *)(v88 + 3), v86, v87);
            float v90 = (std::__shared_weak_count *)v238.n128_u64[1];
            v238.n128_u64[0] = (unint64_t)v89;
            v238.n128_u64[1] = (unint64_t)v88;
            if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
            unint64_t v91 = (const unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 40) + 80) + 24))();
            size_t v92 = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 40) + 80) + 40))();
            float32x4_t v93 = operator new(0x30uLL);
            v93[1] = 0;
            v93[2] = 0;
            void *v93 = &unk_1EF588E18;
            float32x4_t v94 = ggl::Data::Data((ggl::Data *)(v93 + 3), v91, v92);
            float32x4_t v95 = (std::__shared_weak_count *)v239.n128_u64[1];
            v239.n128_u64[0] = (unint64_t)v94;
            v239.n128_u64[1] = (unint64_t)v93;
            if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
            float32x4_t v96 = (const unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*((void *)this + 40) + 120) + 24))();
            size_t v97 = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 40) + 120) + 40))();
            float32x4_t v98 = operator new(0x30uLL);
            v98[1] = 0;
            double v98[2] = 0;
            void *v98 = &unk_1EF588E18;
            float32x4_t v99 = ggl::Data::Data((ggl::Data *)(v98 + 3), v96, v97);
            float32x4_t v100 = (std::__shared_weak_count *)v240.n128_u64[1];
            v240.n128_u64[0] = (unint64_t)v99;
            v240.n128_u64[1] = (unint64_t)v98;
            if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            uint64_t v101 = *(void *)(*((void *)this + 28) + 48);
            unint64_t v102 = operator new(0x38uLL);
            v102[1] = 0;
            v102[2] = 0;
            *unint64_t v102 = &unk_1EF58AE78;
            *((_DWORD *)v102 + 6) = 1;
            *((_DWORD *)v102 + 7) = v36;
            v102[5] = 0;
            void v102[6] = 0;
            v102[4] = 0;
            uint64_t v103 = *(std::__shared_weak_count **)(v101 + 48);
            *(void *)(v101 + 40) = v102 + 3;
            *(void *)(v101 + 48) = v102;
            if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
            uint64_t v104 = *(void *)(v101 + 40);
            float32x4_t v105 = *(__n128 **)(v104 + 16);
            if ((unint64_t)v105 >= *(void *)(v104 + 24))
            {
              float32x4_t v107 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v104 + 8, *(__n128 *)buf);
            }
            else
            {
              v105->n128_u64[0] = *(void *)buf;
              uint64_t v106 = *(void *)&buf[8];
              v105->n128_u64[1] = *(void *)&buf[8];
              if (v106) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
              }
              float32x4_t v107 = v105 + 1;
            }
            *(void *)(v104 + 16) = v107;
            uint64_t v135 = *(void *)(v101 + 40);
            unint64_t v136 = *(__n128 **)(v135 + 16);
            if ((unint64_t)v136 >= *(void *)(v135 + 24))
            {
              unint64_t v138 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v135 + 8, v238);
            }
            else
            {
              v136->n128_u64[0] = v238.n128_u64[0];
              unint64_t v137 = v238.n128_u64[1];
              v136->n128_u64[1] = v238.n128_u64[1];
              if (v137) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v137 + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v138 = v136 + 1;
            }
            *(void *)(v135 + 16) = v138;
            uint64_t v139 = *(void *)(v101 + 40);
            unint64_t v140 = *(__n128 **)(v139 + 16);
            if ((unint64_t)v140 >= *(void *)(v139 + 24))
            {
              __int16 v142 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v139 + 8, v239);
            }
            else
            {
              v140->n128_u64[0] = v239.n128_u64[0];
              unint64_t v141 = v239.n128_u64[1];
              v140->n128_u64[1] = v239.n128_u64[1];
              if (v141) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v141 + 8), 1uLL, memory_order_relaxed);
              }
              __int16 v142 = v140 + 1;
            }
            *(void *)(v139 + 16) = v142;
            uint64_t v143 = *(void *)(v101 + 40);
            uint64_t v144 = *(__n128 **)(v143 + 16);
            if ((unint64_t)v144 >= *(void *)(v143 + 24))
            {
              long long v146 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v143 + 8, v240);
              unint64_t v145 = (std::__shared_weak_count *)v240.n128_u64[1];
            }
            else
            {
              v144->n128_u64[0] = v240.n128_u64[0];
              unint64_t v145 = (std::__shared_weak_count *)v240.n128_u64[1];
              v144->n128_u64[1] = v240.n128_u64[1];
              if (v145) {
                atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              long long v146 = v144 + 1;
            }
            *(void *)(v143 + 16) = v146;
            if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
            if (v239.n128_u64[1]
              && !atomic_fetch_add((atomic_ullong *volatile)(v239.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(unint64_t))(*(void *)v239.n128_u64[1] + 16))(v239.n128_u64[1]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v239.n128_u64[1]);
            }
            if (v238.n128_u64[1]
              && !atomic_fetch_add((atomic_ullong *volatile)(v238.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(unint64_t))(*(void *)v238.n128_u64[1] + 16))(v238.n128_u64[1]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v238.n128_u64[1]);
            }
            if (!*(void *)&buf[8]
              || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
LABEL_237:
              unint64_t v147 = (char *)operator new(0x58uLL);
              *((void *)v147 + 1) = 0;
              *((void *)v147 + 2) = 0;
              *(void *)unint64_t v147 = &unk_1EF583858;
              *((void *)v147 + 5) = 0;
              *((void *)v147 + 6) = 0;
              *((_DWORD *)v147 + 14) = 0;
              *((void *)v147 + 3) = &unk_1EF55AE58;
              *((void *)v147 + 4) = 0;
              *(void *)&long long v148 = 0x100000001;
              *((void *)&v148 + 1) = 0x100000001;
              *(_OWORD *)(v147 + 60) = v148;
              *(void *)(v147 + 76) = 0x100000001;
              *((_DWORD *)v147 + 21) = 0;
              *(void *)int buf = v147 + 24;
              *(void *)&buf[8] = v147;
              uint64_t v149 = *((void *)this + 1);
              __int16 v150 = operator new(0x180uLL);
              v150[1] = 0;
              v150[2] = 0;
              *__int16 v150 = &unk_1EF58ADD0;
              altitude::TextureMapLoadJob::TextureMapLoadJob((uint64_t)(v150 + 3), v149);
            }
            (*(void (**)(void))(**(void **)&buf[8] + 16))(*(void *)&buf[8]);
            float v111 = *(std::__shared_weak_count **)&buf[8];
          }
          std::__shared_weak_count::__release_weak(v111);
          goto LABEL_237;
        }
        if (!*((void *)this + 48))
        {
          uint64_t v118 = (uint64_t)(*((void *)this + 35) - *((void *)this + 34)) >> 5;
          if (v118 == 1)
          {
            uint64_t v174 = *(void *)(*((void *)this + 44) - 16);
            uint64_t v176 = *(void *)(v174 + 8);
            uint64_t v175 = *(void *)(v174 + 16);
            if (v175) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v177 = (std::__shared_weak_count *)*((void *)this + 49);
            *((void *)this + 48) = v176;
            *((void *)this + 49) = v175;
            if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          else if (v118 == 4)
          {
            if (!*(void *)karo::Job::getSubJob((pthread_mutex_t **)this, 0)) {
              operator new();
            }
            SubJob = karo::Job::getSubJob((pthread_mutex_t **)this, 0);
            unint64_t v121 = *(void (***)(karo::AsyncRequestManager::RequestHandle *__hidden))SubJob;
            uint64_t v120 = (std::__shared_weak_count *)*((void *)SubJob + 1);
            unint64_t v231 = *(void (***)(karo::AsyncRequestManager::RequestHandle *__hidden))SubJob;
            uint64_t v232 = v120;
            if (v120) {
              atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            pthread_mutex_lock((pthread_mutex_t *)v121[19]);
            int v122 = *((_DWORD *)v121 + 40);
            pthread_mutex_unlock((pthread_mutex_t *)v121[19]);
            if ((v122 & 2) != 0)
            {
              (*(void (**)(altitude::MapRequest *))(*(void *)this + 16))(this);
              pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
              *((_DWORD *)this + 40) |= 1u;
              pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
            }
            else
            {
              uint64_t v124 = *((void *)this + 46);
              uint64_t v123 = *((void *)this + 47);
              if (v123) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v125 = (std::__shared_weak_count *)*((void *)this + 49);
              *((void *)this + 48) = v124;
              *((void *)this + 49) = v123;
              if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
              uint64_t v126 = *((void *)this + 43);
              for (uint64_t j = *((void *)this + 44); j != v126; j -= 16)
              {
                uint64_t v128 = *(std::__shared_weak_count **)(j - 8);
                if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              *((void *)this + 44) = v126;
              uint64_t v120 = v232;
            }
            if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
            if ((v122 & 2) != 0) {
              return;
            }
          }
        }
        if (*((unsigned char *)this + 296))
        {
          uint64_t v38 = *(void *)(*((void *)this + 48) + 8);
          if (v38)
          {
            unsigned int v39 = *(_DWORD *)(v38 + 8) - 22;
            if ((v39 >= 0x24 || ((0xFFFCFFFC1uLL >> v39) & 1) == 0)
              && *(void *)(v38 + 24) - *(void *)(v38 + 16) == 16)
            {
              if (!*(void *)karo::Job::getSubJob((pthread_mutex_t **)this, 1)) {
                operator new();
              }
              float32x4_t v40 = karo::Job::getSubJob((pthread_mutex_t **)this, 1);
              uint64_t v42 = *(void *)v40;
              float32x4_t v41 = (std::__shared_weak_count *)*((void *)v40 + 1);
              uint64_t v234 = *(void *)v40;
              long long v235 = v41;
              if (v41) {
                atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              pthread_mutex_lock(*(pthread_mutex_t **)(v42 + 152));
              int v43 = *(_DWORD *)(v42 + 160);
              pthread_mutex_unlock(*(pthread_mutex_t **)(v42 + 152));
              if ((v43 & 2) != 0)
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                }
                uint64_t v196 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
                {
                  unint64_t v197 = (_DWORD *)*((void *)this + 34);
                  int v199 = v197[5];
                  int v198 = v197[6];
                  LODWORD(v197) = v197[4];
                  *(_DWORD *)int buf = 67109632;
                  *(_DWORD *)&buf[4] = v199;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v198;
                  *(_WORD *)&buf[14] = 1024;
                  v238.n128_u32[0] = v197;
                  _os_log_impl(&dword_1A1780000, v196, OS_LOG_TYPE_ERROR, "Failed to mipmap image %d %d %d", buf, 0x14u);
                }

                (*(void (**)(altitude::MapRequest *))(*(void *)this + 16))(this);
                pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
                *((_DWORD *)this + 40) |= 1u;
                pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
                if (!v41) {
                  return;
                }
LABEL_130:
                if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
                return;
              }
              if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
        }
        ++*((_DWORD *)this + 110);
LABEL_99:
        if (*((unsigned char *)this + 444))
        {
          (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(*(void *)(*((void *)this + 1)
                                                                                             + 8)
                                                                                 + 112)
                                                                     + 8)
                                                       + 24))(v236);
          uint64_t v44 = &unk_1EF57CF78;
        }
        else
        {
          (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(*(void *)(*((void *)this + 1)
                                                                                             + 8)
                                                                                 + 112)
                                                                     + 8)
                                                       + 24))(v236);
          uint64_t v44 = &unk_1EF57CFC0;
        }
        *(void *)int buf = v44;
        *(void *)&buf[8] = this;
        v238.n128_u64[1] = (unint64_t)buf;
        unint64_t v231 = 0;
        uint64_t v232 = 0;
        (*(void (**)(void, uint8_t *, void (***)(karo::AsyncRequestManager::RequestHandle *__hidden)))(*(void *)v236[0] + 16))(v236[0], buf, &v231);
        uint64_t v45 = v232;
        if (v232 && !atomic_fetch_add(&v232->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        if ((uint8_t *)v238.n128_u64[1] == buf)
        {
          (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
          uint64_t v46 = v236[0];
          if (!v236[0]) {
            goto LABEL_115;
          }
        }
        else
        {
          if (v238.n128_u64[1]) {
            (*(void (**)(void))(*(void *)v238.n128_u64[1] + 40))();
          }
          uint64_t v46 = v236[0];
          if (!v236[0])
          {
LABEL_115:
            karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::reference(&v229, *((void *)this + 25), (uint64_t)this + 240);
            float32x4_t v52 = v229;
            float32x4_t v51 = v230;
            if (v230)
            {
              atomic_fetch_add_explicit(&v230->__shared_owners_, 1uLL, memory_order_relaxed);
              float32x4_t v41 = v51;
            }
            else
            {
              float32x4_t v41 = 0;
            }
            std::mutex::lock((std::mutex *)(v52 + 3));
            if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
            float32x4_t v53 = (std::__shared_weak_count *)v52[2];
            if (v53)
            {
              atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            uint64_t v55 = *((void *)this + 28);
            uint64_t v54 = *((void *)this + 29);
            if (v54) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
            }
            int32x4_t v56 = (std::__shared_weak_count *)v52[2];
            v52[1] = v55;
            uint64_t v52[2] = v54;
            if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
            pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
            *((_DWORD *)this + 40) |= 1u;
            pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
            std::mutex::unlock((std::mutex *)(v52 + 3));
            if (!v41) {
              return;
            }
            goto LABEL_130;
          }
        }
        uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 24))(v46);
        uint64_t v48 = v236[0];
        v236[0] = 0;
        *(void *)int buf = v48;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v47 + 48))(v47, buf);
        uint64_t v49 = *(void *)buf;
        *(void *)int buf = 0;
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
        uint64_t v50 = v236[0];
        v236[0] = 0;
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
        }
        goto LABEL_115;
      }
      uint64_t v19 = *((void *)this + 43);
      if (*((void *)this + 44) == v19) {
        goto LABEL_61;
      }
      unint64_t v15 = 0;
      unsigned int v20 = 1;
      while (1)
      {
        uint64_t v21 = *(void *)(*(void *)(*(void *)(v19 + 16 * v15) + 8) + 8);
        if (!v21) {
          break;
        }
        float64x2_t v22 = *(uint64_t **)(v21 + 16);
        uint64_t v24 = *v22;
        unint64_t v23 = (std::__shared_weak_count *)v22[1];
        if (v23)
        {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (!v24) {
          break;
        }
        unint64_t v15 = v20;
        uint64_t v19 = *((void *)this + 43);
        ++v20;
        if (v15 >= (*((void *)this + 44) - v19) >> 4) {
          goto LABEL_61;
        }
      }
      int v129 = **(_DWORD **)(*((void *)this + 43) + 16 * v15);
      if (v129 == 3)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        float v112 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          unint64_t v178 = (_DWORD *)(*((void *)this + 34) + 32 * v15);
          unsigned __int32 v180 = v178[4];
          int v179 = v178[5];
          int v181 = v178[6];
          LODWORD(v178) = v178[7];
          *(_DWORD *)int buf = 67109888;
          *(_DWORD *)&buf[4] = v179;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v181;
          *(_WORD *)&buf[14] = 1024;
          v238.n128_u32[0] = v180;
          v238.n128_u16[2] = 1024;
          *(unsigned __int32 *)((char *)&v238.n128_u32[1] + 2) = v178;
          _os_log_impl(&dword_1A1780000, v112, OS_LOG_TYPE_ERROR, "Failed to decode image %d %d %d %d", buf, 0x1Au);
        }
LABEL_180:

        (*(void (**)(void, unint64_t))(**((void **)this + 24) + 120))(*((void *)this + 24), *((void *)this + 52) + 32 * v15);
        goto LABEL_181;
      }
      if (v129 == 1)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v130 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
        {
          uint64_t v131 = (_DWORD *)(*((void *)this + 34) + 32 * v15);
          unsigned __int32 v133 = v131[4];
          int v132 = v131[5];
          int v134 = v131[6];
          LODWORD(v131) = v131[7];
          *(_DWORD *)int buf = 67109888;
          *(_DWORD *)&buf[4] = v132;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v134;
          *(_WORD *)&buf[14] = 1024;
          v238.n128_u32[0] = v133;
          v238.n128_u16[2] = 1024;
          *(unsigned __int32 *)((char *)&v238.n128_u32[1] + 2) = v131;
          _os_log_impl(&dword_1A1780000, v130, OS_LOG_TYPE_ERROR, "Failed to download image %d %d %d %d", buf, 0x1Au);
        }
LABEL_207:
      }
LABEL_181:
      float64_t v117 = *(void (**)(altitude::MapRequest *))(*(void *)this + 16);
      v117(this);
      return;
    case 2:
      goto LABEL_72;
    case 3:
      goto LABEL_99;
    default:
      return;
  }
}

void sub_1A1F2DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1F2DEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1F2DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1F2DF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  karo::Job::~Job(v25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  MEMORY[0x1A6239270](v25, 0x10A1C40B452C71ALL);
  _Unwind_Resume(a1);
}

void sub_1A1F2DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1F2DFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1A1F2DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::reference(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  uint64_t v8 = (uint64_t **)(a2 + 80);
  uint64_t v7 = *(void **)(a2 + 80);
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v9 = (uint64_t **)(a2 + 80);
  do
  {
    int v10 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v7 + 4), a3);
    uint64_t v11 = v7 + 1;
    if (!v10)
    {
      uint64_t v11 = v7;
      uint64_t v9 = (uint64_t **)v7;
    }
    uint64_t v7 = (void *)*v11;
  }
  while (*v11);
  if (v9 == v8 || (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a3, (uint64_t)(v9 + 4)) & 1) != 0)
  {
LABEL_8:
    unint64_t v12 = 0;
  }
  else
  {
    uint64_t v30 = (std::__shared_weak_count *)v9[13];
    if (v30 && (uint64_t v31 = std::__shared_weak_count::lock(v30)) != 0)
    {
      unint64_t v12 = v31;
      float64x2_t v32 = v9[12];
      if (v32)
      {
        *a1 = v32;
        a1[1] = (uint64_t *)v31;
LABEL_37:
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  uint64_t v34 = a1;
  float64x2_t v35 = v6;
  long long v13 = (char *)operator new(0xB0uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)long long v13 = &unk_1EF58A820;
  uint64_t v33 = a2;
  *((void *)v13 + 3) = a2;
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 6) = 850045863;
  *((void *)v13 + 5) = 0;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  uint64_t v14 = *(void *)a3;
  *((void *)v13 + 13) = 0;
  *((void *)v13 + 14) = v14;
  *((_WORD *)v13 + 60) = *(_WORD *)(a3 + 8);
  *(void *)(v13 + 124) = *(void *)(a3 + 12);
  *((void *)v13 + 18) = 0;
  *((void *)v13 + 19) = 0;
  *((void *)v13 + 20) = 0;
  unint64_t v15 = *(char **)(a3 + 32);
  unsigned int v16 = *(char **)(a3 + 40);
  uint64_t v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v17 < 0) {
      abort();
    }
    long long v18 = operator new(v16 - v15);
    *((void *)v13 + 18) = v18;
    *((void *)v13 + 19) = v18;
    *((void *)v13 + 20) = &v18[2 * (v17 >> 5)];
    do
    {
      *long long v18 = *(_OWORD *)v15;
      v18[1] = *((_OWORD *)v15 + 1);
      v18 += 2;
      v15 += 32;
    }
    while (v15 != v16);
    *((void *)v13 + 19) = v18;
  }
  v13[168] = *(unsigned char *)(a3 + 56);
  int v36 = v13 + 24;
  uint64_t v37 = (std::__shared_weak_count *)v13;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v19 = *v8;
  unsigned int v20 = (uint64_t **)(a2 + 80);
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v20 = (uint64_t **)v19;
        uint64_t v21 = (uint64_t)(v19 + 4);
        if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](a3, (uint64_t)(v19 + 4))) {
          break;
        }
        uint64_t v19 = *v20;
        uint64_t v8 = v20;
        if (!*v20) {
          goto LABEL_23;
        }
      }
      if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](v21, a3)) {
        break;
      }
      uint64_t v8 = v20 + 1;
      uint64_t v19 = v20[1];
      if (!v19) {
        goto LABEL_23;
      }
    }
    float64x2_t v22 = (char *)v20;
  }
  else
  {
LABEL_23:
    float64x2_t v22 = (char *)operator new(0x70uLL);
    *((void *)v22 + 4) = *(void *)a3;
    *((_WORD *)v22 + 20) = *(_WORD *)(a3 + 8);
    *(void *)(v22 + 44) = *(void *)(a3 + 12);
    *((void *)v22 + 9) = 0;
    *((void *)v22 + 10) = 0;
    *((void *)v22 + 8) = 0;
    unint64_t v23 = *(char **)(a3 + 32);
    uint64_t v24 = *(char **)(a3 + 40);
    uint64_t v25 = v24 - v23;
    if (v24 != v23)
    {
      if (v25 < 0) {
        abort();
      }
      int v26 = operator new(v24 - v23);
      *((void *)v22 + 8) = v26;
      *((void *)v22 + 9) = v26;
      *((void *)v22 + 10) = &v26[2 * (v25 >> 5)];
      do
      {
        *int v26 = *(_OWORD *)v23;
        v26[1] = *((_OWORD *)v23 + 1);
        v26 += 2;
        v23 += 32;
      }
      while (v23 != v24);
      *((void *)v22 + 9) = v26;
    }
    v22[88] = *(unsigned char *)(a3 + 56);
    *((void *)v22 + 12) = 0;
    *((void *)v22 + 13) = 0;
    *(void *)float64x2_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v20;
    *uint64_t v8 = (uint64_t *)v22;
    uint64_t v27 = **(void **)(v33 + 72);
    __int16 v28 = (uint64_t *)v22;
    if (v27)
    {
      *(void *)(v33 + 72) = v27;
      __int16 v28 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v33 + 80), v28);
    ++*(void *)(v33 + 88);
  }
  uint64_t v6 = v35;
  unint64_t v12 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  float64x2_t v29 = (std::__shared_weak_count *)*((void *)v22 + 13);
  *((void *)v22 + 12) = v36;
  *((void *)v22 + 13) = v37;
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  *uint64_t v34 = (uint64_t *)v36;
  v34[1] = (uint64_t *)v37;
  if (v37) {
    goto LABEL_37;
  }
LABEL_39:
  std::mutex::unlock(v6);
}

void sub_1A1F2E468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = (std::__shared_weak_count *)operator new(0x58uLL);
  v2->__shared_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
  v2[1].__shared_weak_owners_ = 0;
  v2[2].__vftable = 0;
  v2[1].__shared_owners_ = 0;
  LODWORD(v2[2].__shared_owners_) = 0;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v2[2].__shared_owners_ + 4) = v3;
  *(std::__shared_weak_count_vtbl **)((char *)&v2[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v2[3].__shared_owners_) = 0;
  altitude::TextureMap::loadImage(*(void *)(*(void *)(v1 + 224) + 48), *(void *)(v1 + 384));
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57CFC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57CFC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_1,std::allocator<altitude::MapRequest::uploadTexture(void)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
}

uint64_t std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57CF78;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57CF78;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::MapRequest::uploadTexture(void)::$_0,std::allocator<altitude::MapRequest::uploadTexture(void)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<altitude::util::MipmapAndCompressImageJob *,std::shared_ptr<altitude::util::MipmapAndCompressImageJob>::__shared_ptr_default_delete<altitude::util::MipmapAndCompressImageJob,altitude::util::MipmapAndCompressImageJob>,std::allocator<altitude::util::MipmapAndCompressImageJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::util::MipmapAndCompressImageJob *,std::shared_ptr<altitude::util::MipmapAndCompressImageJob>::__shared_ptr_default_delete<altitude::util::MipmapAndCompressImageJob,altitude::util::MipmapAndCompressImageJob>,std::allocator<altitude::util::MipmapAndCompressImageJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<altitude::util::MergeImagesJob *,std::shared_ptr<altitude::util::MergeImagesJob>::__shared_ptr_default_delete<altitude::util::MergeImagesJob,altitude::util::MergeImagesJob>,std::allocator<altitude::util::MergeImagesJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::util::MergeImagesJob *,std::shared_ptr<altitude::util::MergeImagesJob>::__shared_ptr_default_delete<altitude::util::MergeImagesJob,altitude::util::MergeImagesJob>,std::allocator<altitude::util::MergeImagesJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::Image *,std::shared_ptr<karo::media::Image>::__shared_ptr_default_delete<karo::media::Image,karo::media::Image>,std::allocator<karo::media::Image>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::Image *,std::shared_ptr<karo::media::Image>::__shared_ptr_default_delete<karo::media::Image,karo::media::Image>,std::allocator<karo::media::Image>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<altitude::TextureMapLoadJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::TextureMapLoadJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58ADD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::TextureMapLoadJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58ADD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::Map>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::Map>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::Map>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::TextureMap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::TextureMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::TextureMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::util::LoadImageJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::util::LoadImageJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::util::LoadImageJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<karo::media::Image>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<karo::media::Image>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::Image>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::MapImageData>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<altitude::MapImageData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::MapImageData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::less<altitude::MapRequestId>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4) {
    return 1;
  }
  if (v3 > v4) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v6 = *(unsigned __int8 *)(a2 + 9);
  BOOL v7 = v5 >= v6;
  if (v5 != v6) {
    return !v7;
  }
  int v8 = *(_DWORD *)(a1 + 12);
  int v9 = *(_DWORD *)(a2 + 12);
  BOOL v10 = v8 < v9;
  if (v8 == v9)
  {
    int v11 = *(_DWORD *)(a1 + 16);
    int v12 = *(_DWORD *)(a2 + 16);
    BOOL v10 = v11 < v12;
    if (v11 == v12)
    {
      if (!*(unsigned char *)(a1 + 56) || *(unsigned char *)(a2 + 56))
      {
        if (!*(unsigned char *)(a1 + 56) && *(unsigned char *)(a2 + 56)) {
          return 0;
        }
        long long v13 = *(_DWORD **)(a1 + 32);
        uint64_t v14 = *(_DWORD **)(a2 + 32);
        unsigned int v15 = v13[4];
        unsigned int v16 = v14[4];
        if (v15 == v16 && v13[5] == v14[5] && v13[6] == v14[6] && v14[7] == v13[7])
        {
          BOOL v7 = *v13 >= *v14;
          if (*v13 != *v14) {
            return !v7;
          }
          unsigned int v17 = v13[1];
          unsigned int v18 = v14[1];
          BOOL v7 = v17 >= v18;
          if (v17 != v18) {
            return !v7;
          }
          unsigned int v19 = v13[2];
          unsigned int v20 = v14[2];
          goto LABEL_31;
        }
        if (v15 >= v16)
        {
          if (v15 > v16) {
            return 0;
          }
          unsigned int v21 = v13[5];
          unsigned int v22 = v14[5];
          if (v21 >= v22)
          {
            if (v21 > v22) {
              return 0;
            }
            unsigned int v23 = v13[6];
            unsigned int v24 = v14[6];
            if (v23 >= v24)
            {
              if (v23 <= v24)
              {
                unsigned int v19 = v13[7];
                unsigned int v20 = v14[7];
LABEL_31:
                BOOL v7 = v19 >= v20;
                return !v7;
              }
              return 0;
            }
          }
        }
      }
      return 1;
    }
  }
  return v10;
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(void *)(a1 + 24);
  std::mutex::lock((std::mutex *)(v2 + 8));
  int v4 = *(void **)(v2 + 80);
  if (v4)
  {
    unsigned int v5 = (uint64_t *)(v2 + 80);
    do
    {
      int v6 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v4 + 4), a1 + 112);
      BOOL v7 = v4 + 1;
      if (!v6)
      {
        BOOL v7 = v4;
        unsigned int v5 = v4;
      }
      int v4 = (void *)*v7;
    }
    while (*v7);
    if (v5 != (uint64_t *)(v2 + 80)
      && (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a1 + 112, (uint64_t)(v5 + 4)) & 1) == 0)
    {
      int v8 = (std::__shared_weak_count *)v5[13];
      if (v8)
      {
        int v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          uint64_t v10 = v5[12];
          if (v10)
          {
            if (v10 != v3)
            {
LABEL_27:
              if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              goto LABEL_29;
            }
          }
        }
      }
      else
      {
        int v9 = 0;
      }
      int v11 = (uint64_t *)v5[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          int v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        long long v13 = v5;
        do
        {
          int v12 = (uint64_t *)v13[2];
          BOOL v14 = *v12 == (void)v13;
          long long v13 = v12;
        }
        while (!v14);
      }
      if (*(uint64_t **)(v2 + 72) == v5) {
        *(void *)(v2 + 72) = v12;
      }
      unsigned int v15 = *(uint64_t **)(v2 + 80);
      --*(void *)(v2 + 88);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v5);
      unsigned int v16 = (std::__shared_weak_count *)v5[13];
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      unsigned int v17 = (void *)v5[8];
      if (v17)
      {
        v5[9] = (uint64_t)v17;
        operator delete(v17);
      }
      operator delete(v5);
      if (v9) {
        goto LABEL_27;
      }
    }
  }
LABEL_29:
  std::mutex::unlock((std::mutex *)(v2 + 8));
  unsigned int v18 = *(void **)(a1 + 144);
  if (v18)
  {
    *(void *)(a1 + 152) = v18;
    operator delete(v18);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  unsigned int v19 = *(std::__shared_weak_count **)(a1 + 40);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_1A1F2EFFC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 144);
  if (v3)
  {
    *(void *)(v1 + 152) = v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(v1 + 48));
  int v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Entry>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::MapRequest::~MapRequest(altitude::MapRequest *this)
{
  altitude::MapRequest::~MapRequest(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  void (***v10)(void);
  void (***v11)(void);
  void *v12;
  void (***v13)(void);
  void (***v14)(void);
  void (***v15)(void);
  void (**v16)(void);
  BOOL v17;
  std::__shared_weak_count *v18;
  void *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t vars8;

  *(void *)this = &unk_1EF568400;
  uint64_t v2 = (void *)*((void *)this + 52);
  if (v2)
  {
    *((void *)this + 53) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    int v4 = (std::__shared_weak_count *)*((void *)this + 49);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    int v4 = (std::__shared_weak_count *)*((void *)this + 49);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  unsigned int v5 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int v6 = (char *)*((void *)this + 43);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (char *)*((void *)this + 43);
    if (!v6) {
      goto LABEL_20;
    }
  }
  BOOL v7 = (char *)*((void *)this + 44);
  int v8 = v6;
  if (v7 != v6)
  {
    do
    {
      int v9 = (std::__shared_weak_count *)*((void *)v7 - 1);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v7 -= 16;
    }
    while (v7 != v6);
    int v8 = (char *)*((void *)this + 43);
  }
  *((void *)this + 44) = v6;
  operator delete(v8);
LABEL_20:
  uint64_t v10 = (void (***)(void))*((void *)this + 40);
  if (v10)
  {
    int v11 = (void (***)(void))*((void *)this + 41);
    int v12 = (void *)*((void *)this + 40);
    if (v11 != v10)
    {
      long long v13 = v11 - 5;
      BOOL v14 = v11 - 5;
      unsigned int v15 = v11 - 5;
      do
      {
        unsigned int v16 = *v15;
        v15 -= 5;
        (*v16)(v14);
        v13 -= 5;
        unsigned int v17 = v14 == v10;
        BOOL v14 = v15;
      }
      while (!v17);
      int v12 = (void *)*((void *)this + 40);
    }
    *((void *)this + 41) = v10;
    operator delete(v12);
  }
  unsigned int v18 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    unsigned int v19 = (void *)*((void *)this + 34);
    if (!v19) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  unsigned int v19 = (void *)*((void *)this + 34);
  if (v19)
  {
LABEL_30:
    *((void *)this + 35) = v19;
    operator delete(v19);
  }
LABEL_31:
  unsigned int v20 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    unsigned int v21 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v21) {
      goto LABEL_41;
    }
  }
  else
  {
    unsigned int v21 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v21) {
      goto LABEL_41;
    }
  }
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_41:
  karo::Job::~Job(this);
}

void altitude::MapRequestManager::request(void *a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1[13] && a1[6])
  {
    unsigned int v5 = *(void (**)(void))(*a1 + 80);
    v5();
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    int v6 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      BOOL v7 = (_DWORD *)*((void *)a2 + 4);
      int v9 = v7[4];
      int v8 = v7[5];
      int v10 = v7[6];
      LODWORD(v7) = v7[7];
      int v11 = *a2;
      int v12 = a2[1];
      int v13 = *((unsigned __int8 *)a2 + 9);
      int v14 = a2[3];
      int v15 = a2[4];
      int v16 = *((unsigned __int8 *)a2 + 56);
      v17[0] = 67111424;
      v17[1] = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = (int)v7;
      __int16 v24 = 1024;
      int v25 = v11;
      __int16 v26 = 1024;
      int v27 = v12;
      __int16 v28 = 1024;
      int v29 = v13;
      __int16 v30 = 1024;
      int v31 = v14;
      __int16 v32 = 1024;
      int v33 = v15;
      __int16 v34 = 1024;
      int v35 = v16;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "Missing input! Unable to fetch request %d %d %d %d | %d | %d | %d | %d | %d | %d", (uint8_t *)v17, 0x3Eu);
    }

    a3[1] = 0;
    a3[2] = 0;
    *a3 = off_1EF5677B0;
  }
}

void karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  int v8 = (void *)(a1 + 72);
  int v9 = *(void **)(a1 + 72);
  if (!v9) {
    goto LABEL_8;
  }
  int v10 = (void *)(a1 + 72);
  do
  {
    int v11 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v9 + 4), a2);
    int v12 = v9 + 1;
    if (!v11)
    {
      int v12 = v9;
      int v10 = v9;
    }
    int v9 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(&v32, a1, a2, a3);
    long long v31 = v32;
    *(_OWORD *)a4 = v32;
    int v13 = (void *)*v8;
    int v14 = v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          int v14 = v13;
          uint64_t v15 = (uint64_t)(v13 + 4);
          if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v13 + 4))) {
            break;
          }
          int v13 = (void *)*v14;
          int v8 = v14;
          if (!*v14) {
            goto LABEL_14;
          }
        }
        if (!std::less<altitude::MapRequestId>::operator()[abi:nn180100](v15, a2)) {
          break;
        }
        int v8 = v14 + 1;
        int v13 = (void *)v14[1];
        if (!v13) {
          goto LABEL_14;
        }
      }
      int v16 = (char *)v14;
      long long v23 = v31;
      uint64_t v24 = *((void *)&v31 + 1);
      if (!*((void *)&v31 + 1)) {
        goto LABEL_23;
      }
    }
    else
    {
LABEL_14:
      int v16 = (char *)operator new(0x70uLL);
      *((void *)v16 + 4) = *(void *)a2;
      *((_WORD *)v16 + 20) = *(_WORD *)(a2 + 8);
      *(void *)(v16 + 44) = *(void *)(a2 + 12);
      *((void *)v16 + 9) = 0;
      *((void *)v16 + 10) = 0;
      *((void *)v16 + 8) = 0;
      unsigned int v17 = *(char **)(a2 + 32);
      __int16 v18 = *(char **)(a2 + 40);
      uint64_t v19 = v18 - v17;
      if (v18 != v17)
      {
        if (v19 < 0) {
          abort();
        }
        __int16 v20 = operator new(v18 - v17);
        *((void *)v16 + 8) = v20;
        *((void *)v16 + 9) = v20;
        *((void *)v16 + 10) = &v20[2 * (v19 >> 5)];
        do
        {
          _OWORD *v20 = *(_OWORD *)v17;
          v20[1] = *((_OWORD *)v17 + 1);
          v20 += 2;
          v17 += 32;
        }
        while (v17 != v18);
        *((void *)v16 + 9) = v20;
      }
      v16[88] = *(unsigned char *)(a2 + 56);
      *((void *)v16 + 12) = 0;
      *((void *)v16 + 13) = 0;
      *(void *)int v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v14;
      *int v8 = v16;
      uint64_t v21 = **(void **)(a1 + 64);
      __int16 v22 = (uint64_t *)v16;
      if (v21)
      {
        *(void *)(a1 + 64) = v21;
        __int16 v22 = (uint64_t *)*v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v22);
      ++*(void *)(a1 + 80);
      long long v23 = *(_OWORD *)a4;
      uint64_t v24 = a4[1];
      if (!v24) {
        goto LABEL_23;
      }
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
LABEL_23:
    int v25 = (std::__shared_weak_count *)*((void *)v16 + 13);
    *((_OWORD *)v16 + 6) = v23;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    unint64_t v26 = *(void *)(a1 + 48);
    if (v26)
    {
      uint64_t v27 = *a4;
      __int16 v28 = (std::__shared_weak_count *)a4[1];
      *(void *)&long long v32 = v27;
      *((void *)&v32 + 1) = v28;
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::JobManager::queueJob(v26, &v32);
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        karo::JobManager::queueJob(v26, &v32);
      }
    }
    return;
  }
  uint64_t v30 = v10[12];
  uint64_t v29 = v10[13];
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = v30;
  a4[1] = v29;
}

void sub_1A1F2F93C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = (pthread_mutex_t **)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  int v9 = *(void **)(a1 + 72);
  BOOL v7 = (void *)(a1 + 72);
  int v8 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  int v10 = v7;
  do
  {
    int v11 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v8 + 4), a2);
    int v12 = v8 + 1;
    if (!v11)
    {
      int v12 = v8;
      int v10 = v8;
    }
    int v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v7 || (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)) & 1) != 0)
  {
LABEL_8:
    int v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_9;
  }
  int v16 = (karo::Job *)v10[12];
  int v13 = (std::__shared_weak_count *)v10[13];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(*v6);
  if (v16)
  {
    karo::Job::waitToFinish(v16, a3);
    __int16 v18 = (pthread_mutex_t *)*((void *)v16 + 19);
    unsigned int v17 = (pthread_mutex_t **)((char *)v16 + 152);
    pthread_mutex_lock(v18);
    uint64_t v14 = (_BYTE)v17[1] & 1;
    int v6 = v17;
LABEL_9:
    pthread_mutex_unlock(*v6);
    if (!v13) {
      return v14;
    }
    goto LABEL_10;
  }
  uint64_t v14 = 0;
  if (!v13) {
    return v14;
  }
LABEL_10:
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v14;
}

void sub_1A1F2FAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  int v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  __int16 v18 = v22;
  uint64_t v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    __int16 v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  __int16 v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A1F2FC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 64;
      (*(void (**)(unsigned int **__return_ptr, uint64_t))(*(void *)a1 + 96))(&v22, a1);
      int v11 = v22;
      int v12 = *(_DWORD *)(v10 + 4);
      unsigned int v13 = *(_DWORD *)(v10 + 8);
      char v14 = *(unsigned char *)(v10 + 12);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      int v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        uint64_t v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        *int v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        uint64_t v19 = v16 + 3;
        *(void *)(a3 + 8) = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      __int16 v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 16;
    }
    while (v10 + 16 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A1F2FE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

void altitude::MapRequestManager::createRequest()
{
}

void sub_1A1F300C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A1F300FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, md::DynamicTrafficTileList *a12, void **a13)
{
  __int16 v20 = (void *)*((void *)v13 + 52);
  if (v20)
  {
    *((void *)v13 + 53) = v20;
    operator delete(v20);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a11);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(a12);
  std::vector<karo::AsyncFileLoader::FileObject>::~vector[abi:nn180100](a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16);
  uint64_t v21 = *v18;
  if (*v18)
  {
    *((void *)v13 + 35) = v21;
    operator delete(v21);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v14);
  karo::Job::~Job(v13);
  MEMORY[0x1A6239270]();
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::MapRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::MapRequest>,std::allocator<altitude::MapRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::MapRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::MapRequest>,std::allocator<altitude::MapRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void **std::vector<karo::AsyncFileLoader::FileObject>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      unsigned int v5 = v3 - 40;
      int v6 = v3 - 40;
      BOOL v7 = v3 - 40;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v5 -= 40;
        BOOL v9 = v6 == v2;
        int v6 = v7;
      }
      while (!v9);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    int v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a1 + 72);
    do
    {
      int v6 = std::less<altitude::MapRequestId>::operator()[abi:nn180100]((uint64_t)(v4 + 4), a2);
      BOOL v7 = v4 + 1;
      if (!v6)
      {
        BOOL v7 = v4;
        uint64_t v5 = v4;
      }
      unint64_t v4 = (void *)*v7;
    }
    while (*v7);
    if (v5 != (uint64_t *)(a1 + 72)
      && (std::less<altitude::MapRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v5 + 4)) & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)v5[12] + 16))(v5[12]);
      std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v5);
    }
  }
  uint64_t v8 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v8);
}

void sub_1A1F3042C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      unint64_t v4 = v3;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  BOOL v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, a2);
  uint64_t v8 = (std::__shared_weak_count *)a2[13];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v9 = (void *)a2[8];
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  BOOL v9 = (void *)a2[8];
  if (v9)
  {
LABEL_12:
    a2[9] = (uint64_t)v9;
    operator delete(v9);
  }
LABEL_13:
  operator delete(a2);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    while (v4[12] != a2)
    {
      uint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
      if (v6 == (uint64_t *)(a1 + 72)) {
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
  }
LABEL_12:
  uint64_t v8 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v8);
}

void sub_1A1F305D4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::MapRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      BOOL v7 = (uint64_t *)v4[1];
      uint64_t v8 = v4;
      if (v7)
      {
        do
        {
          BOOL v9 = v7;
          BOOL v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v9 = (uint64_t *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      uint64_t v11 = v4[12];
      if (atomic_load((unsigned int *)(v11 + 128))) {
        *(_DWORD *)(v11 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v11 + 152));
      int v13 = *(_DWORD *)(v11 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 152));
      if ((v13 & 1) != 0 && *(unsigned char *)(v11 + 176) && *(_DWORD *)(v11 + 180) != a2
        || (a2 - *(_DWORD *)(v11 + 180)) > *(_DWORD *)(v11 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
      }
      unint64_t v4 = v9;
    }
    while (v9 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v5);
}

void sub_1A1F3071C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void altitude::MapRequestManager::~MapRequestManager(altitude::MapRequestManager *this)
{
  altitude::MapRequestManager::~MapRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF569BB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF567838;
  while (*((void *)this + 10))
    (*(void (**)(altitude::MapRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void sub_1A1F30860(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::MapRequestId,std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::MapRequestId>,true>,std::allocator<std::__value_type<altitude::MapRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[13];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = (void *)a1[8];
    if (v3)
    {
      a1[9] = v3;
      operator delete(v3);
    }
    operator delete(a1);
  }
}

uint64_t gdc::LayerDataSource::fallbackSettings(gdc::LayerDataSource *this)
{
  return 0;
}

void gdc::LayerDataSource::~LayerDataSource(gdc::LayerDataSource *this)
{
  *(void *)this = &unk_1EF554F60;
  std::mutex::~mutex((std::mutex *)((char *)this + 480));
  uint64_t v2 = (gdc::LayerDataSource *)*((void *)this + 58);
  if (v2 == (gdc::LayerDataSource *)((char *)this + 440))
  {
    (*(void (**)(char *))(*((void *)this + 55) + 32))((char *)this + 440);
  }
  else if (v2)
  {
    (*(void (**)(gdc::LayerDataSource *))(*(void *)v2 + 40))(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 376));
  uint64_t v3 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 304));
  uint64_t v4 = *((void *)this + 31);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 32);
    BOOL v6 = (void *)*((void *)this + 31);
    if (v5 != v4)
    {
      do
      {
        BOOL v7 = *(void **)(v5 - 88);
        if (v7 != *(void **)(v5 - 72)) {
          free(v7);
        }
        if (*(unsigned char *)(v5 - 112)) {
          *(unsigned char *)(v5 - 112) = 0;
        }
        uint64_t v8 = *(void **)(v5 - 192);
        if (v8 != *(void **)(v5 - 176)) {
          free(v8);
        }
        v5 -= 208;
      }
      while (v5 != v4);
      BOOL v6 = (void *)*((void *)this + 31);
    }
    *((void *)this + 32) = v4;
    operator delete(v6);
  }
  uint64_t v9 = *((void *)this + 28);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 29);
    uint64_t v11 = (void *)*((void *)this + 28);
    if (v10 != v9)
    {
      do
      {
        int v12 = *(void **)(v10 - 88);
        if (v12 != *(void **)(v10 - 72)) {
          free(v12);
        }
        v10 -= 96;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v9;
    operator delete(v11);
  }
  uint64_t v13 = *((void *)this + 25);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 26);
    uint64_t v15 = (void *)*((void *)this + 25);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      uint64_t v15 = (void *)*((void *)this + 25);
    }
    *((void *)this + 26) = v13;
    operator delete(v15);
  }
  uint64_t v17 = (void *)*((void *)this + 22);
  if (v17)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v19) {
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::~__hash_table((uint64_t)this + 40);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PolygonShadowedStroke::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::PolygonShadowedStroke::ShadowPathMesh::~ShadowPathMesh(ggl::PolygonShadowedStroke::ShadowPathMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolygonShadowedStroke::ShadowPathMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::PolygonShadowedStroke::ShadowPathMesh *)((char *)this - 16));
}

void ggl::PolygonShadowedStroke::ShadowPathMesh::~ShadowPathMesh(ggl::PolygonShadowedStroke::ShadowPathMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::PolygonShadowedStroke::ShadowPathPipelineState::~ShadowPathPipelineState(ggl::PolygonShadowedStroke::ShadowPathPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::textureIsEnabled(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *this)
{
  return 0;
}

BOOL ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::constantDataIsEnabled(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PolygonShadowedStroke::ShadowPathPipelineSetup::~ShadowPathPipelineSetup(ggl::PolygonShadowedStroke::ShadowPathPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::ElevatedStrokeConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  BOOL v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        __int16 v20 = operator new(8 * v19);
      }
      else
      {
        __int16 v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      __int16 v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        int v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          __int16 v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      __int16 v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ElevatedStrokeConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525C28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525C28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevatedStrokeConstantDataHandle>(gdc::Entity,md::ls::ElevatedStrokeConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559F18;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559F18;

  return a1;
}

void sub_1A1F31C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1A1F31DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F31E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F31F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F31FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F320BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::ARCameraLocationProvider::heading(md::ARCameraLocationProvider *this)
{
  return (uint64_t)this + 8;
}

uint64_t md::ARCameraRouteLocationProvider::location(md::ARCameraRouteLocationProvider *this)
{
  return (uint64_t)this + 24;
}

void md::ARCameraRouteLocationProvider::update(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  id v7 = a3;
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = v9;
    uint64_t v11 = *a5;
    uint64_t v12 = a5[1];
    while (v11 != v12)
    {
      if (v11)
      {
        if (!*(_DWORD *)(v11 + 16)) {
          *(double *)(a1 + 72) = *(double *)(a1 + 72)
        }
                               + (float)((float)(*(float *)(v11 + 12) - *(float *)(v11 + 4))
                                       / sqrtf((float)((float)(*(float *)(v11 + 8) - *(float *)v11)* (float)(*(float *)(v11 + 8) - *(float *)v11))+ (float)((float)(*(float *)(v11 + 12) - *(float *)(v11 + 4))* (float)(*(float *)(v11 + 12) - *(float *)(v11 + 4)))));
      }
      v11 += 24;
    }
    double v13 = *(double *)(a1 + 72);
    [v9 distance];
    *(double *)(a1 + 72) = fmin(fmax(v13, 0.0), v14);
    uint64_t v15 = objc_msgSend(v10, "coordinateAtOffset:");
    double v16 = *(double *)(a1 + 80);
    id v17 = v10;
    [v17 pointWithAltitudeCorrectionAtRouteCoordinate:v15];
    double v19 = v18;
    double v21 = v20;
    uint64_t v47 = v22;
    [v17 courseAtRouteCoordinateIndex:v15];
    double v24 = v23;
    long double v25 = tan(v19 * 0.00872664626 + 0.785398163);
    long double v26 = log(v25) * 0.159154943 + 0.5;
    double v27 = v21 * 0.00277777778 + 0.5;
    long double v28 = tan(v19 * 0.00872664626 + 0.789761487);
    double v29 = log(v28);
    long double v30 = tan(v19 * 0.00872664626 + 0.78103484);
    double v31 = fabs((v29 - log(v30)) * 0.159154943);
    long double v32 = cos(v19 * 0.034906585) * -559.82 + 111132.92;
    long double v33 = v32 + cos(v19 * 0.0698131701) * 1.175;
    long double v34 = v33 + cos(v19 * 0.104719755) * -0.0023;
    long double v35 = fmod(360.0 - v24, 360.0);
    long double v36 = fmod(v35 + 360.0, 360.0);
    __double2 v37 = __sincos_stret(v36 * 0.0174532925);
    long double v38 = v31 * v16 / v34;
    long double v39 = (v27 + v38 * v37.__cosval) * 6.28318531;
    long double v40 = exp((v26 + v38 * v37.__sinval) * 6.28318531 + -3.14159265);
    long double v45 = atan(v40);
    long double v41 = fmod(v39, 6.28318531);
    long double v42 = fmod(v41 + 6.28318531, 6.28318531);
    v43.f64[0] = v45;
    v43.f64[1] = v42;
    float64x2_t v46 = vmlaq_f64((float64x2_t)xmmword_1A28FCC00, (float64x2_t)xmmword_1A28FCBF0, v43);

    *(float64x2_t *)(a1 + 24) = v46;
    *(void *)(a1 + 40) = v47;
    uint64_t v44 = *(void *)(a1 + 112);
    if (v44)
    {
      uint64_t v48 = v15;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v44 + 48))(v44, &v48);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
}

void sub_1A1F323D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::ARCameraRouteLocationProvider::~ARCameraRouteLocationProvider(md::ARCameraRouteLocationProvider *this)
{
  *(void *)this = &unk_1EF54AB30;
  uint64_t v2 = (char *)this + 88;
  uint64_t v3 = (char *)*((void *)this + 14);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 6) = &unk_1EF559678;

  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;

  *(void *)this = &unk_1EF54AB30;
  uint64_t v2 = (char *)this + 88;
  uint64_t v3 = (char *)*((void *)this + 14);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 6) = &unk_1EF559678;
}

void geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559678;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559678;

  return a1;
}

void md::ARCameraRouteLocationProvider::setRoute(md::ARCameraRouteLocationProvider *this, GEOComposedRoute *a2)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if ((geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*((void **)this + 7), (void **)&v8) & 1) == 0)
  {
    uint64_t v3 = v7;
    uint64_t v4 = v3;
    if (v3) {
      uint64_t v5 = v3;
    }
    uint64_t v6 = (void *)*((void *)this + 7);
    *((void *)this + 7) = v4;

    *((void *)this + 9) = 0;
  }
}

void sub_1A1F326E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARAddEnvironmentProbeLogic::runBeforeLayout(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = +[VKDebugSettings sharedSettings];
  char v5 = [v4 arEnableEnvironmentMap];

  if (v5)
  {
    id v54 = *(id *)(*(void *)a3 + 80);
    uint64_t v6 = (int8x8_t *)*((void *)a1 + 15);
    char v7 = (void *)gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(v6);
    uint64_t v8 = gdc::Registry::storage<arComponents::WorldTransform>(v6);
    char v9 = (void *)v8;
    uint64_t v10 = v8 + 32;
    uint64_t v12 = v7[7];
    uint64_t v11 = v7[8];
    if (*(void *)(v8 + 64) - *(void *)(v8 + 56) >= (unint64_t)(v11 - v12)) {
      uint64_t v13 = v7 + 4;
    }
    else {
      uint64_t v13 = (void *)(v8 + 32);
    }
    if (v7 + 4 == v13)
    {
      uint64_t v55 = &v54;
      for (uint64_t i = a1; v12 != v11; v12 += 8)
      {
        unint64_t v25 = *(unsigned int *)(v12 + 4);
        uint64_t v26 = v9[4];
        unint64_t v27 = (v9[5] - v26) >> 3;
        if (v25 >> 7 < v27)
        {
          uint64_t v28 = *(void *)(v26 + 8 * (v25 >> 7));
          if (v28)
          {
            unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (v25 & 0x7F));
            uint64_t v31 = v9[7];
            uint64_t v30 = v9[8];
            unint64_t v32 = (v30 - v31) >> 3;
            if (v32 > v29)
            {
              uint64_t v33 = v31 + 8 * v29;
              if (v33 != v30 && *(_DWORD *)(v33 + 4) == v25)
              {
                unint64_t v35 = *(void *)v12;
                unint64_t v36 = *(void *)v12 >> 39;
                if (v36 < v27
                  && (uint64_t v37 = *(void *)(v26 + 8 * v36)) != 0
                  && (unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v35) & 0x7F)), v32 > v38)
                  && ((uint64_t v39 = v31 + 8 * v38, v39 != v30) ? (v40 = *(_DWORD *)(v39 + 4) == HIDWORD(v35)) : (v40 = 0), v40))
                {
                  uint64_t v24 = v9[10] + 80 * v38;
                }
                else
                {
                  uint64_t v24 = v9[11];
                }
                md::ARAddEnvironmentProbeLogic::processRequests(ARSession *)::$_0::operator()((uint64_t)&v55, v35, v24);
              }
            }
          }
        }
      }
    }
    if ((void *)v10 == v13)
    {
      uint64_t v55 = &v54;
      uint64_t i = a1;
      uint64_t v41 = v9[7];
      uint64_t v42 = v9[8];
      if (v41 != v42)
      {
        uint64_t v43 = v9[10];
        do
        {
          unint64_t v44 = *(unsigned int *)(v41 + 4);
          uint64_t v45 = v7[4];
          if (v44 >> 7 < (v7[5] - v45) >> 3)
          {
            uint64_t v46 = *(void *)(v45 + 8 * (v44 >> 7));
            if (v46)
            {
              unint64_t v47 = *(unsigned __int16 *)(v46 + 2 * (v44 & 0x7F));
              uint64_t v49 = v7[7];
              uint64_t v48 = v7[8];
              if (v47 < (v48 - v49) >> 3)
              {
                uint64_t v50 = v49 + 8 * v47;
                if (v50 != v48 && *(_DWORD *)(v50 + 4) == v44) {
                  md::ARAddEnvironmentProbeLogic::processRequests(ARSession *)::$_0::operator()((uint64_t)&v55, *(void *)v41, v43);
                }
              }
            }
          }
          v43 += 80;
          v41 += 8;
        }
        while (v41 != v42);
      }
    }

    updated = (void *)gdc::Registry::storage<arComponents::UpdateEnvironentProbeTexture>(*((int8x8_t **)a1 + 15));
    uint64_t v15 = updated[7];
    uint64_t v52 = updated[8];
    if (v15 != v52)
    {
      double v16 = (id *)(updated[10] + 8);
      do
      {
        id v17 = *v16;
        double v18 = [v17 environmentTexture];
        if (v18)
        {
          double v19 = (char *)operator new(0x58uLL);
          *((void *)v19 + 1) = 0;
          *(void *)double v19 = &unk_1EF583858;
          *((void *)v19 + 5) = 0;
          *((void *)v19 + 6) = 0;
          *((void *)v19 + 4) = 0;
          *((_DWORD *)v19 + 14) = 0;
          *((void *)v19 + 2) = 0;
          *((void *)v19 + 3) = &unk_1EF55AE58;
          *(_OWORD *)(v19 + 60) = xmmword_1A28FC780;
          *(void *)(v19 + 76) = 0x100000001;
          *((_DWORD *)v19 + 21) = 0;
          int v20 = [v18 mipmapLevelCount];
          int v21 = [v18 width];
          uint64_t v22 = (char *)operator new(0xF8uLL);
          *((void *)v22 + 1) = 0;
          *(void *)uint64_t v22 = &unk_1EF5835F0;
          *((void *)v22 + 5) = 0;
          *((void *)v22 + 6) = 0;
          *((void *)v22 + 4) = 0;
          *((_DWORD *)v22 + 14) = 0;
          *((_OWORD *)v22 + 5) = xmmword_1A28FD1D0;
          *((void *)v22 + 12) = 1;
          *((void *)v22 + 13) = 0;
          *((void *)v22 + 2) = 0;
          *((void *)v22 + 3) = &unk_1EF55A950;
          *((void *)v22 + 8) = &unk_1EF55A970;
          *((void *)v22 + 9) = "";
          *((_DWORD *)v22 + 28) = v20;
          *(_OWORD *)(v22 + 120) = 0u;
          *(_OWORD *)(v22 + 136) = 0u;
          *(_OWORD *)(v22 + 152) = 0u;
          *(_OWORD *)(v22 + 168) = 0u;
          *(_OWORD *)(v22 + 184) = 0u;
          *(_OWORD *)(v22 + 200) = 0u;
          *((_WORD *)v22 + 108) = 0;
          *((_DWORD *)v22 + 55) = v21;
          v22[224] = 1;
          *((void *)v22 + 29) = v19 + 24;
          *((void *)v22 + 30) = v19;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
          double v23 = (gdc::Registry *)*((void *)a1 + 15);
          atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
          uint64_t v55 = v18;
          uint64_t i = v22 + 24;
          uint64_t v57 = v22;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
          gdc::Registry::create(v23);
        }

        v15 += 8;
        v16 += 3;
      }
      while (v15 != v52);
    }
  }
}

void sub_1A1F32D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::UpdateEnvironentProbeTexture>(int8x8_t *a1)
{
  uint64_t v10 = 0x1D70BA3BBBE79160;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1D70BA3BBBE79160;
    if (*(void *)&v1 <= 0x1D70BA3BBBE79160uLL) {
      uint64_t v3 = 0x1D70BA3BBBE79160uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1D70BA3BBBE79160;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1D70BA3BBBE79160)
      {
        if (v5[2] == 0x1D70BA3BBBE79160) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1D70BA3BBBE79160) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1D70BA3BBBE79160) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F33110(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a2;
  char v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v47);
  if (v6)
  {
    unint64_t v18 = a1[11];
    unint64_t v17 = a1[12];
    if (v18 >= v17)
    {
      uint64_t v23 = a1[10];
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v23) >> 3);
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_57;
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v23) >> 3);
      uint64_t v26 = 2 * v25;
      if (2 * v25 <= v24 + 1) {
        uint64_t v26 = v24 + 1;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27)
      {
        if (v27 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v28 = (char *)operator new(24 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      unint64_t v29 = &v28[24 * v24];
      *((void *)v29 + 1) = 0;
      *(void *)unint64_t v29 = 0;
      *((void *)v29 + 2) = 0;
      objc_storeStrong((id *)v29, *(id *)a3);
      uint64_t v31 = *(void *)(a3 + 8);
      uint64_t v30 = *(void *)(a3 + 16);
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v29 + 1) = v31;
      unint64_t v32 = &v28[24 * v24];
      uint64_t v33 = (std::__shared_weak_count *)*((void *)v32 + 2);
      *((void *)v32 + 2) = v30;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      long double v34 = &v28[24 * v27];
      uint64_t v22 = v29 + 24;
      unint64_t v36 = (void *)a1[10];
      unint64_t v35 = (void *)a1[11];
      if (v35 == v36)
      {
        a1[10] = v29;
        a1[11] = v22;
        a1[12] = v34;
      }
      else
      {
        uint64_t v37 = (uint64_t)&v28[24 * v24 - 24];
        do
        {
          uint64_t v38 = v37;
          *(void *)uint64_t v37 = 0;
          *(void *)(v37 + 8) = 0;
          *(void *)(v37 + 16) = 0;
          uint64_t v39 = (void *)*(v35 - 3);
          v35 -= 3;
          objc_storeStrong((id *)v37, v39);
          uint64_t v41 = v35[1];
          uint64_t v40 = v35[2];
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = *(std::__shared_weak_count **)(v38 + 16);
          *(void *)(v38 + 8) = v41;
          *(void *)(v38 + 16) = v40;
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          uint64_t v37 = v38 - 24;
        }
        while (v35 != v36);
        unint64_t v35 = (void *)a1[10];
        uint64_t v43 = (void *)a1[11];
        a1[10] = v38;
        a1[11] = v22;
        for (a1[12] = v34; v43 != v35; v43 -= 3)
        {
          unint64_t v44 = (std::__shared_weak_count *)*(v43 - 1);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(void *)unint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = 0;
      objc_storeStrong((id *)v18, *(id *)a3);
      uint64_t v20 = *(void *)(a3 + 8);
      uint64_t v19 = *(void *)(a3 + 16);
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      int v21 = *(std::__shared_weak_count **)(v18 + 16);
      *(void *)(v18 + 8) = v20;
      *(void *)(v18 + 16) = v19;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v22 = (char *)(v18 + 24);
    }
    a1[11] = v22;
    uint64_t v14 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10];
    uint64_t v8 = ((uint64_t)v5 - a1[7]) >> 3;
    uint64_t v9 = v7 + 24 * v8;
    objc_storeStrong((id *)v9, *(id *)a3);
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v9 + 8) = v11;
    uint64_t v12 = v7 + 24 * v8;
    uint64_t v13 = *(std::__shared_weak_count **)(v12 + 16);
    *(void *)(v12 + 16) = v10;
    if (v13)
    {
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    uint64_t v14 = a1[31];
    if (v9 != a1[11])
    {
      uint64_t v15 = (void *)a1[16];
      if (v15)
      {
        while (1)
        {
          uint64_t v49 = &v47;
          uint64_t v50 = 1;
          uint64_t v48 = v14;
          uint64_t v16 = v15[6];
          if (!v16) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v16 + 48))(v16, &v48, &v49);
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            return;
          }
        }
LABEL_56:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_57:
        abort();
      }
      return;
    }
  }
  uint64_t v45 = (void *)a1[22];
  if (v45)
  {
    while (1)
    {
      uint64_t v49 = &v47;
      uint64_t v50 = 1;
      uint64_t v48 = v14;
      uint64_t v46 = v45[6];
      if (!v46) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v46 + 48))(v46, &v48, &v49);
      uint64_t v45 = (void *)*v45;
      if (!v45) {
        return;
      }
    }
    goto LABEL_56;
  }
}

uint64_t gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v23 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  id v15 = *(id *)(a1[11] - 16);
  uint64_t v16 = v14 + 24 * v7;
  unint64_t v17 = *(void **)(v16 + 8);
  *(void *)(v16 + 8) = v15;

  uint64_t v18 = a1[11];
  uint64_t v19 = v18 - 24;
  *(void *)(v18 - 24) = &unk_1EF559AD8;

  a1[11] = v19;
  uint64_t v20 = (void *)a1[28];
  if (!v20) {
    return 1;
  }
  uint64_t v21 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    uint64_t v24 = v21;
    uint64_t v22 = v20[6];
    if (!v22) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v22 + 48))(v22, &v24, v25);
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return geo::_retain_ptr<AREnvironmentProbeAnchor * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr();
}

void geo::_retain_ptr<AREnvironmentProbeAnchor * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559AD8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<AREnvironmentProbeAnchor * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559AD8;

  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::TextureCube>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5835F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5835F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<arComponents::UpdateEnvironentProbeTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    unint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 24;
      do
      {
        *(void *)(v3 - 24) = &unk_1EF559AD8;
        v3 -= 24;

        v5 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = (void *)a1[4];
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(int8x8_t *a1)
{
  unint64_t v10 = 0x8CEA2E362F0B4EBDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8CEA2E362F0B4EBDLL;
    if (*(void *)&v1 <= 0x8CEA2E362F0B4EBDLL) {
      unint64_t v3 = 0x8CEA2E362F0B4EBDLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8CEA2E362F0B4EBDLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8CEA2E362F0B4EBDLL)
      {
        if (v5[2] == 0x8CEA2E362F0B4EBDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8CEA2E362F0B4EBDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8CEA2E362F0B4EBDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F33C28(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARAddEnvironmentProbeLogic::processRequests(ARSession *)::$_0::operator()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  id v21 = [**(id **)a1 currentFrame];
  unint64_t v7 = [v21 camera];
  [v7 transform];
  double v19 = v9;
  double v20 = v8;
  double v17 = v11;
  double v18 = v10;

  double v12 = *(double *)(a3 + 56);
  id v13 = objc_alloc((Class)getAREnvironmentProbeAnchorClass());
  double v14 = v12 * 100.0;
  *(float *)&double v14 = v12 * 100.0;
  id v15 = objc_msgSend(v13, "initWithTransform:extent:", v20, v19, v18, v17, *(double *)vdupq_lane_s32(*(int32x2_t *)&v14, 0).i64);
  [**(id **)a1 addAnchor:v15];
  uint64_t v16 = (void *)gdc::Registry::storage<arComponents::PendingEnvironmentProbeCreation>(*(int8x8_t **)(v6 + 120));
  gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::remove(v16, a2);
}

void sub_1A1F33D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  double v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    double v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return initAREnvironmentProbeAnchor();
}

Class initAREnvironmentProbeAnchor(void)
{
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_4568);
  }
  Class result = objc_getClass("AREnvironmentProbeAnchor");
  classAREnvironmentProbeAnchor = (uint64_t)result;
  getAREnvironmentProbeAnchorClass = (uint64_t (*)(void))AREnvironmentProbeAnchorFunction;
  return result;
}

id AREnvironmentProbeAnchorFunction(void)
{
  return (id)classAREnvironmentProbeAnchor;
}

void ___ZL9LoadARKitv_block_invoke()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit");
  }
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::PendingEnvironmentProbeCreation>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  unint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v5 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v7 = 0x37F8C546A65FE3EEuLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x37F8C546A65FE3EELL)
      {
        if (v9[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v4 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v6 = 0x37F8C546A65FE3EEuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v4 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v6 = 0x37F8C546A65FE3EEuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v4 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v6 = 0x37F8C546A65FE3EEuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x62E8209F98919A2ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v4 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v6 = 0x37F8C546A65FE3EEuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::ARAddEnvironmentProbeLogic,md::ARAddEnvironmentProbeContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1F347FC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARAddEnvironmentProbeContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARAddEnvironmentProbeContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555BB8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARAddEnvironmentProbeContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555BB8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::ARAddEnvironmentProbeLogic::~ARAddEnvironmentProbeLogic(md::ARAddEnvironmentProbeLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

unint64_t md::LabelLine::coordinateAtOffset(md::LabelLine *this, double a2)
{
  if (a2 <= 0.0)
  {
    unint64_t v15 = 0;
    LODWORD(v16) = 0;
    LOWORD(v7) = 0;
    uint64_t v18 = (char *)this + 8;
    unint64_t v17 = (unsigned char *)*((void *)this + 1);
    if (*((unsigned char **)v18 + 1) == v17) {
      unint64_t v17 = 0;
    }
    if (!v17[8])
    {
      LODWORD(v16) = (*(uint64_t (**)(void))(**(void **)v17 + 16))();
      unint64_t v15 = 0;
      LOWORD(v7) = 0;
      LODWORD(v16) = v16 + 0xFFFF;
    }
    return (v16 << 16) | v15 | (unsigned __int16)v7;
  }
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = v4 - v3;
  if (*((double *)this + 13) <= a2)
  {
    __int16 v12 = ((unint64_t)v5 >> 4) - 1;
    uint64_t v13 = (unsigned char *)(v3 + 16 * v12);
    if (v12 >= (unint64_t)(v5 >> 4)) {
      uint64_t v13 = 0;
    }
    if (!v13[8]) {
      goto LABEL_16;
    }
    goto LABEL_24;
  }
  unint64_t v6 = v5 >> 4;
  if (v4 == v3)
  {
LABEL_13:
    __int16 v12 = ((unint64_t)v5 >> 4) - 1;
    uint64_t v13 = (unsigned char *)(v3 + 16 * v12);
    if (v6 <= v12) {
      uint64_t v13 = 0;
    }
    if (!v13[8])
    {
LABEL_16:
      unint64_t v14 = 0;
LABEL_25:
      unint64_t v15 = 0;
      LOWORD(v7) = v14 | v12;
      unint64_t v16 = v14 >> 16;
      return (v16 << 16) | v15 | (unsigned __int16)v7;
    }
LABEL_24:
    unint64_t v14 = ((*(unsigned int (**)(void))(**(void **)v13 + 16))() << 16) - 0x10000;
    goto LABEL_25;
  }
  unint64_t v7 = 0;
  if (v6 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v5 >> 4;
  }
  double v9 = 0.0;
  uint64_t v10 = *((void *)this + 1);
  while (1)
  {
    uint64_t v11 = v6 <= v7 ? 0 : v10;
    if (*(double *)(*(void *)v11 + 8) + v9 >= a2) {
      break;
    }
    ++v7;
    v10 += 16;
    double v9 = *(double *)(*(void *)v11 + 8) + v9;
    if (v8 == v7) {
      goto LABEL_13;
    }
  }
  unint64_t v16 = md::LabelLineSegment::coordinateAtOffset(*(md::LabelLineSegment **)v11, *(unsigned __int8 *)(v11 + 8), a2 - v9);
  unint64_t v15 = v16 & 0xFFFFFFFF00000000;
  return (v16 << 16) | v15 | (unsigned __int16)v7;
}

void sub_1A1F34DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F34FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F350B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKStateCaptureHandler;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A1F3534C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverMorph::Morph>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::FlyoverMorphRenderable::~FlyoverMorphRenderable(altitude::FlyoverMorphRenderable *this)
{
  *(void *)this = &unk_1EF56A6F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A6F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMorphRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  *(void *)this = &unk_1EF56A6F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A6F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

uint64_t std::construct_at[abi:nn180100]<ggl::FlyoverMorph::MorphMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::FlyoverMorph::MorphMesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a4;
  unint64_t v6 = (std::__shared_weak_count *)a4[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  {
    uint64_t v14 = a2;
    a2 = v14;
    if (v15)
    {
      {
        ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
      }
      ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
      unk_1E957D578 = 1;
      a2 = v14;
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 8) = "/meshes/flyover";
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = &ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
  *(void *)(a1 + 64) = 0;
  uint64_t v8 = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    uint64_t v19 = a2;
    a2 = v19;
    uint64_t v8 = a1 + 64;
    if (v16) {
      operator new();
    }
  }
  uint64_t v9 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 120) = 0;
  uint64_t v10 = a1 + 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v9;
  {
    uint64_t v20 = a2;
    uint64_t v21 = v8;
    uint64_t v10 = a1 + 120;
    a2 = v20;
    int v18 = v17;
    uint64_t v8 = v21;
    if (v18) {
      operator new();
    }
  }
  *(void *)(a1 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = v10;
  *(void *)a1 = &unk_1EF561F60;
  *(void *)(a1 + 16) = &unk_1EF561F80;
  uint64_t v22 = a2;
  unint64_t v23 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v22, &v24, 1uLL);
  uint64_t v11 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v12 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v6;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)a1 = &unk_1EF55ABD8;
  *(void *)(a1 + 16) = &unk_1EF55ABF8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorph::MorphMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMorph::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorph::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorph::MorphPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::FlyoverMorph::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorph::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorph::MorphPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::FlyoverMorphNightRenderable::~FlyoverMorphNightRenderable(altitude::FlyoverMorphNightRenderable *this)
{
  *(void *)this = &unk_1EF56A850;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A850;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMorphNightRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  *(void *)this = &unk_1EF56A850;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A850;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMorphNight::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphNight::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorphNight::MorphPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::FlyoverMorphNight::MorphPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphNight::MorphPipelineSetup>,std::allocator<ggl::FlyoverMorphNight::MorphPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::FlyoverMorphBorderRenderable::~FlyoverMorphBorderRenderable(altitude::FlyoverMorphBorderRenderable *this)
{
  *(void *)this = &unk_1EF56A8A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A8A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverMorphBorderRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  *(void *)this = &unk_1EF56A8A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A8A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  altitude::Renderable::~Renderable(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverMorphBorder::MorphBorderMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>,std::allocator<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>,std::allocator<ggl::FlyoverMorphBorder::MorphBorderPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::GEOFlyoverMetadataResourceDecoder::decode(md::GEOFlyoverMetadataResourceDecoder *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, uint64_t *a4@<X8>)
{
  if (!*((unsigned char *)a3 + 16))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  int v31 = *(_DWORD *)(*((void *)a2 + 1) + 16);
  uint64_t v6 = *((void *)this + 4);
  if (!v6)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    uint64_t v28 = v27;
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v29);
    _Unwind_Resume(v28);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 48))(&v29);
  if (!v29)
  {
    *a4 = 0;
    a4[1] = 0;
    uint64_t v26 = v30;
    if (!v30) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v8 = (int *)*((void *)a2 + 1);
  int v10 = v8[1];
  uint64_t v9 = v8[2];
  int v11 = *v8;
  __int16 v12 = *(id **)a3;
  uint64_t v13 = [*(id *)(*(void *)a3 + 16) bytes];
  unint64_t v14 = gdc::DataObject::length(v12);
  geo::c3mm::loadFromChunk(v13, v14, v29, v9 | ((unint64_t)(~(-1 << v9) - v10) << 32), v11, v15, v16, v17, v18, v19, v20, v21, v22);
  unint64_t v23 = operator new(0xC0uLL);
  v23[1] = 0;
  void v23[2] = 0;
  *unint64_t v23 = &unk_1EF581E88;
  uint64_t v24 = gdc::Resource::Resource((uint64_t)(v23 + 4), (uint64_t)a2);
  void v23[3] = &unk_1EF547A28;
  unint64_t v25 = v30;
  v23[22] = v29;
  v23[23] = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a4 = v24;
  a4[1] = (uint64_t)v23;
  uint64_t v26 = v30;
  if (v30)
  {
LABEL_10:
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void md::GEOFlyoverMetadataResource::~GEOFlyoverMetadataResource(md::GEOFlyoverMetadataResource *this)
{
  *(void *)this = &unk_1EF547A28;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3 != *((void **)this + 4)) {
    free(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(void *)this = &unk_1EF547A28;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3 != *((void **)this + 4)) {
    free(v3);
  }
}

uint64_t std::__shared_ptr_emplace<md::GEOFlyoverMetadataResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::GEOFlyoverMetadataResourceDecoder::~GEOFlyoverMetadataResourceDecoder(md::GEOFlyoverMetadataResourceDecoder *this)
{
  *(void *)this = &unk_1EF54DD08;
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  char *v1;
  char *v2;

  *(void *)this = &unk_1EF54DD08;
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

void ggl::Grid::GridPipelineState::~GridPipelineState(ggl::Grid::GridPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Grid::GridPipelineSetup::textureIsEnabled(ggl::Grid::GridPipelineSetup *this)
{
  return 0;
}

void ggl::Grid::GridPipelineSetup::~GridPipelineSetup(ggl::Grid::GridPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Grid::GridUVPipelineState::~GridUVPipelineState(ggl::Grid::GridUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Grid::GridUVPipelineSetup::textureIsEnabled(ggl::Grid::GridUVPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Grid::GridUVPipelineSetup::constantDataIsEnabled(ggl::Grid::GridUVPipelineSetup *this, uint64_t a2)
{
  if ((unint64_t)(a2 - 2) < 2 || a2 == 0) {
    return 1;
  }
  if (a2 == 1) {
    return *(unsigned char *)(*((void *)this + 2) + 305) != 0;
  }
  return 0;
}

void ggl::Grid::GridUVPipelineSetup::~GridUVPipelineSetup(ggl::Grid::GridUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::TransitPillIconLabelPart::populateDebugNode(md::TransitPillIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  md::ImageLabelPart::populateDebugNode(this, a2);
  uint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v27 = v4;
  *(_OWORD *)&uint8_t v27[8] = xmmword_1A28FD110;
  strcpy(v4, "TransitPillIconLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)v27);
  operator delete(v4);
  v27[23] = 9;
  strcpy(v27, "Is Active");
  uint64_t v6 = *((unsigned __int8 *)this + 817);
  int v26 = 0;
  memset(&v25[4], 0, 24);
  v25[0] = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, (uint64_t)v25);
  float v7 = *((float *)this + 173);
  v27[23] = 5;
  strcpy(v27, "Scale");
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  int v24 = 2;
  double v20 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, (uint64_t)v19);
  if (*((unsigned char *)this + 721))
  {
    v27[23] = 6;
    strcpy(v27, "Radius");
    double v8 = *((float *)this + 177);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    int v18 = 2;
    double v14 = v8;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, (uint64_t)v13);
    return;
  }
  v27[23] = 8;
  strcpy(v27, "Half Ext");
  float v9 = *((float *)this + 178);
  double v10 = *((float *)this + 179);
  int v11 = (char *)operator new(0x80uLL);
  v12[1] = (uint64_t)(v11 + 128);
  void v12[2] = (uint64_t)(v11 + 128);
  *((double *)v11 + 2) = v9;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_DWORD *)v11 + 14) = 2;
  *((void *)v11 + 12) = 0;
  *((double *)v11 + 10) = v10;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 14) = 0;
  *((_DWORD *)v11 + 30) = 2;
  v12[0] = (uint64_t)v11;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v27, v12);
  if (v11[119] < 0)
  {
    operator delete(*((void **)v11 + 12));
    if ((v11[55] & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    operator delete(*((void **)v11 + 4));
    goto LABEL_5;
  }
  if (v11[55] < 0) {
    goto LABEL_7;
  }
LABEL_5:
  operator delete(v11);
}

uint64_t md::TransitPillIconLabelPart::debugString@<X0>(md::TransitPillIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v28);
  md::ImageLabelPart::debugString(this, &__p);
  if ((v27 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v5 = v27;
  }
  else {
    uint64_t v5 = v26;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, v5);
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"\nTransitPillIcon", 16);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 819);
  if (v6)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n  isActive:", 12);
    float v7 = (void *)std::ostream::operator<<();
    double v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)", scale=", 8);
    uint64_t v9 = *v8;
    *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v8 + *(void *)(v9 - 24) + 16) = 1;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" distScale=", 11);
    std::ostream::operator<<();
    if (*((unsigned char *)this + 721))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" radius:", 8);
      *(void *)((char *)&v28[2] + *(void *)(v28[0] - 24)) = 2;
      std::ostream::operator<<();
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" halfExt:", 9);
      *(void *)((char *)&v28[2] + *(void *)(v28[0] - 24)) = 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
      double v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
    }
    uint64_t v12 = *((void *)this + 93);
    if (v12)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v12 + 16))(&__p);
      unsigned __int8 v13 = v27;
      if ((v27 & 0x80u) == 0) {
        uint64_t v14 = v27;
      }
      else {
        uint64_t v14 = v26;
      }
      if (v14)
      {
        if ((v27 & 0x80u) == 0) {
          uint64_t v15 = &__p;
        }
        else {
          uint64_t v15 = __p;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v15, v14);
        unsigned __int8 v13 = v27;
      }
      if ((v13 & 0x80) != 0)
      {
        operator delete(__p);
        char v16 = v35;
        if ((v35 & 0x10) == 0) {
          goto LABEL_25;
        }
LABEL_29:
        unint64_t v19 = v34;
        if (v34 < v31)
        {
          unint64_t v34 = v31;
          unint64_t v19 = v31;
        }
        int v18 = (const void **)&v30;
        goto LABEL_32;
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n  No external icon", 19);
  }
  char v16 = v35;
  if ((v35 & 0x10) != 0) {
    goto LABEL_29;
  }
LABEL_25:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_40;
  }
  int v18 = (const void **)v29;
  unint64_t v19 = v29[2];
LABEL_32:
  double v20 = *v18;
  size_t v17 = v19 - (void)*v18;
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v23 = operator new(v21 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v22 | 0x8000000000000000;
    *(void *)a2 = v23;
    a2 = v23;
    goto LABEL_39;
  }
  a2[23] = v17;
  if (v17) {
LABEL_39:
  }
    memmove(a2, v20, v17);
LABEL_40:
  a2[v17] = 0;
  v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v28[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete(v32);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v36);
}

void sub_1A1F379A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::TransitPillIconLabelPart::needsCrossfade(md::TransitPillIconLabelPart *this, md::LabelManager *a2, int a3)
{
  if (*((unsigned char *)this + 818)) {
    return 1;
  }
  if (*((void *)this + 91)) {
    md::TransitPillIconLabelPart::checkExternalIconRequest(this, a2);
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 819);
  if (v7)
  {
    int v8 = *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 21) + 64) + 16))(*(void *)(*((void *)a2 + 21) + 64))
                            + 432);
    uint64_t v9 = (unsigned char *)*((void *)this + 93);
    if (v8 && v9[68])
    {
      (*(void (**)(unsigned char *))(*(void *)v9 + 24))(v9);
      uint64_t v9 = (unsigned char *)*((void *)this + 93);
    }
    if (v9[69]) {
      return 1;
    }
  }
  if (a3 && *((unsigned char *)this + 816))
  {
    double v10 = (uint64_t *)*((void *)this + 4);
    uint64_t v11 = *v10;
    uint64_t v12 = *(void *)(*v10 + 296);
    if (!v12)
    {
      unsigned __int8 v13 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v10, 0);
      uint64_t v12 = *v13;
      *(void *)(v11 + 296) = *v13;
    }
    if (*(unsigned char *)(v12 + 88) != 6) {
      return 1;
    }
    uint64_t v14 = *v10;
    uint64_t v15 = *(void *)(*v10 + 272);
    if (!v15)
    {
      char v16 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v10);
      uint64_t v15 = *v16;
      *(void *)(v14 + 272) = *v16;
    }
    if (*(char *)(v15 + 263) < 0) {
      uint64_t v17 = *(void *)(v15 + 248);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v15 + 263);
    }
    int v18 = (unsigned __int8 *)(v15 + 80);
    uint64_t v19 = 80;
    if (v17)
    {
      uint64_t v19 = 240;
      int v18 = (unsigned __int8 *)(v15 + 240);
    }
    uint64_t v20 = *((unsigned __int8 *)this + 783);
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = *((unsigned __int8 *)this + 783);
    }
    else {
      uint64_t v21 = *((void *)this + 96);
    }
    uint64_t v22 = v18[23];
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *((void *)v18 + 1);
    }
    if (v21 != v22) {
      return 1;
    }
    int v24 = (const void **)((char *)this + 760);
    unint64_t v25 = *(unsigned __int8 **)(v15 + v19);
    if (v23 >= 0) {
      uint64_t v26 = v18;
    }
    else {
      uint64_t v26 = v25;
    }
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*v24, v26, *((void *)this + 96))) {
        return 1;
      }
    }
    else if (*((unsigned char *)this + 783))
    {
      while (*(unsigned __int8 *)v24 == *v26)
      {
        int v24 = (const void **)((char *)v24 + 1);
        ++v26;
        if (!--v20) {
          goto LABEL_37;
        }
      }
      return 1;
    }
LABEL_37:
    int v27 = *((unsigned __int8 *)this + 800);
    uint64_t v28 = *v10;
    uint64_t v29 = *(void *)(*v10 + 296);
    if (!v29)
    {
      uint64_t v30 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v10, 0);
      uint64_t v29 = *v30;
      *(void *)(v28 + 296) = *v30;
    }
    if (v27 == *(unsigned __int8 *)(v29 + 92))
    {
      uint64_t v31 = *v10;
      uint64_t v32 = *(void *)(*v10 + 296);
      if (!v32)
      {
        char v33 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v10, 0);
        uint64_t v32 = *v33;
        *(void *)(v31 + 296) = *v33;
      }
      if (*(_DWORD *)(v32 + 56) == *((_DWORD *)this + 198) && *(_DWORD *)(v32 + 60) == *((_DWORD *)this + 199)) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

void md::TransitPillIconLabelPart::checkExternalIconRequest(md::TransitPillIconLabelPart *this, md::LabelManager *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 91);
  if (v2 && *((unsigned char *)v2 + 57))
  {
    uint64_t v6 = *v2;
    uint64_t v5 = v2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v7 = (void *)((char *)this + 728);
    *((void *)this + 93) = v6;
    int v8 = (std::__shared_weak_count *)*((void *)this + 94);
    *((void *)this + 94) = v5;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = (char *)this + 744;
    double v10 = (std::__shared_weak_count *)*((void *)this + 92);
    *unsigned __int8 v7 = 0;
    *((void *)this + 92) = 0;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (*(void *)v9)
    {
      *(unsigned char *)(*(void *)v9 + 68) = *((unsigned char *)this + 817);
      unint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 21) + 64) + 16))(*(void *)(*((void *)a2 + 21) + 64));
      md::LabelExternalObjectsModerator::registerIconForAsynchModeUpdates(v11, (uint64_t *)this + 93);
      atomic_store(1u, (unsigned __int8 *)this + 819);
    }
  }
}

void md::TransitPillIconLabelPart::populateImageInfos(float32x2_t *a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x148uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB50;
  v4[1].std::__shared_count = 0u;
  uint64_t v5 = v4 + 1;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = 0u;
  v4[2].__shared_owners_ = 0;
  uint64_t v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    uint64_t v5 = v4 + 1;
    if (v12) {
      operator new();
    }
  }
  uint64_t v7 = *((void *)v6 + 91);
  v4[3].__vftable = 0;
  v4[3].__shared_owners_ = 0;
  v4[2].__shared_weak_owners_ = v7;
  LOWORD(v4[3].__shared_weak_owners_) = 0;
  v4[4].__vftable = (std::__shared_weak_count_vtbl *)&v4[5].__shared_owners_;
  v4[4].__shared_owners_ = (uint64_t)&v4[5].__shared_owners_;
  v4[4].__shared_weak_owners_ = (uint64_t)&v4[5].__shared_owners_;
  v4[5].__vftable = (std::__shared_weak_count_vtbl *)2;
  LODWORD(v4[5].__shared_weak_owners_) = 16842752;
  WORD2(v4[5].__shared_weak_owners_) = 1;
  v4[6].__shared_owners_ = 0;
  v4[6].__shared_weak_owners_ = 0;
  v4[6].__vftable = 0;
  {
    uint64_t v14 = v5;
    uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    uint64_t v5 = v14;
    if (v13) {
      operator new();
    }
  }
  v4[7].__vftable = (std::__shared_weak_count_vtbl *)*((void *)v6 + 91);
  v4[7].__shared_owners_ = 0;
  *(uint64_t *)((char *)&v4[7].__shared_owners_ + 5) = 0;
  LOBYTE(v4[8].__vftable) = 4;
  *(std::__shared_weak_count_vtbl **)((char *)&v4[8].__vftable + 4) = 0;
  BYTE4(v4[8].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v4[8].__shared_weak_owners_ + 4) = 0xFFFF3F800000;
  WORD2(v4[9].__vftable) = 0;
  LODWORD(v4[9].__shared_owners_) = 1065353216;
  v4[13].__shared_owners_ = 0;
  v4[10].std::__shared_count = 0u;
  *(_OWORD *)&v4[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[11].__shared_owners_ = 0u;
  v4[12].__vftable = 0;
  int v18 = v5;
  uint64_t v19 = v4;
  LOWORD(v4[5].__shared_weak_owners_) = 2052;
  HIDWORD(v4[3].__shared_owners_) = 65558;
  LOWORD(v4[3].__shared_weak_owners_) = 1;
  LODWORD(v4[3].__shared_owners_) = a1[101].i32[1];
  uint64_t v15 = v5;
  char v16 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  float32x2_t v8 = vmla_f32(a1[45], (float32x2_t)0x3F0000003F000000, vsub_f32(a1[46], a1[45]));
  float32x2_t v17 = v8;
  uint64_t v9 = *(std::__shared_weak_count ***)(a2 + 8);
  if ((unint64_t)v9 >= *(void *)(a2 + 16))
  {
    uint64_t v10 = std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelImageInfo>(a2, (uint64_t)&v15);
    uint64_t v4 = v16;
    *(void *)(a2 + 8) = v10;
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v9)
    {
      char *v9 = v5;
      v9[1] = v4;
      uint64_t v15 = 0;
      char v16 = 0;
      v9[2] = (std::__shared_weak_count *)v8;
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = v9 + 3;
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v11 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v11 = v19;
  if (!v19) {
    return;
  }
LABEL_11:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A1F380B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelImageInfo>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0xAAAAAAAAAAAAAAALL;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < 0x555555555555555) {
    uint64_t v2 = v4;
  }
  if (v2)
  {
    uint64_t v7 = 24 * v2;
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 24 * v2, 8);
    uint64_t v9 = v8 + 24 * v3;
    uint64_t v2 = v8 + v7;
    if (v8)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v8 + 24 * v3 + 16) = *(void *)(a2 + 16);
    }
  }
  else
  {
    uint64_t v9 = 8 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  }
  uint64_t v10 = v9 + 24;
  unint64_t v11 = *(void **)a1;
  int v12 = *(void **)(a1 + 8);
  if (v12 == *(void **)a1)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    uint64_t v15 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)(v9 - 24) = v13;
      v9 -= 24;
      *int v12 = 0;
      v12[1] = 0;
      *(void *)(v9 + 16) = v12[2];
    }
    while (v12 != v11);
    int v12 = *(void **)a1;
    uint64_t v14 = *(void **)(a1 + 8);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    uint64_t v15 = *(void *)(a1 + 16);
    for (*(void *)(a1 + 16) = v2; v14 != v12; v14 -= 3)
    {
      char v16 = (std::__shared_weak_count *)*(v14 - 2);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v12) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v12, v15 - (void)v12);
  }
  return v10;
}

float md::TransitPillIconLabelPart::calloutAnchorRect(md::TransitPillIconLabelPart *this)
{
  if (*((unsigned char *)this + 721)) {
    return -*((float *)this + 177);
  }
  else {
    return -*((float *)this + 178);
  }
}

void md::TransitPillIconLabelPart::transferResource(md::TransitPillIconLabelPart *this)
{
}

uint64_t md::TransitPillIconLabelPart::markInactive(uint64_t this)
{
  if (*(unsigned char *)(this + 817))
  {
    *(_WORD *)(this + 817) = 256;
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 819));
    if (v1) {
      *(unsigned char *)(*(void *)(this + 744) + 68) = 0;
    }
  }
  return this;
}

uint64_t md::TransitPillIconLabelPart::markActive(uint64_t this)
{
  if (!*(unsigned char *)(this + 817))
  {
    *(unsigned char *)(this + 817) = 1;
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 819));
    if (v1) {
      *(unsigned char *)(*(void *)(this + 744) + 68) = 1;
    }
  }
  return this;
}

uint64_t md::TransitPillIconLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  *(float *)(result + 552) = fmaxf(fminf(*(float *)(result + 600) * a3, 1.0), 0.0);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(result + 819));
  if (v3)
  {
    uint64_t v5 = *(void *)(result + 744);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(result + 552);
    uint64_t v6 = *(void **)(a2 + 16);
    unint64_t v7 = *(void *)(a2 + 24);
    if ((unint64_t)v6 < v7)
    {
      if (v6) {
        *uint64_t v6 = v5;
      }
      uint64_t v8 = v6 + 1;
LABEL_28:
      *(void *)(a2 + 16) = v8;
      return result;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = ((uint64_t)v6 - v9) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v7 - v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      uint64_t v13 = 8 * v11;
      uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), 8 * v11, 8);
      uint64_t v14 = (void *)(result + 8 * v10);
      unint64_t v11 = result + v13;
      if (result) {
        *uint64_t v14 = v5;
      }
    }
    else
    {
      uint64_t v14 = (void *)(8 * v10);
    }
    uint64_t v8 = v14 + 1;
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v15 = *(void *)(a2 + 16);
    if (v15 == v16)
    {
LABEL_26:
      *(void *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v8;
      uint64_t v25 = *(void *)(a2 + 24);
      *(void *)(a2 + 24) = v11;
      if (v15) {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 32) + 40))(*(void *)(a2 + 32), v15, v25 - v15);
      }
      goto LABEL_28;
    }
    unint64_t v17 = v15 - v16 - 8;
    if (v17 < 0x38)
    {
      uint64_t v19 = *(void *)(a2 + 16);
    }
    else if ((unint64_t)(v15 - (void)v14) < 0x20)
    {
      uint64_t v19 = *(void *)(a2 + 16);
    }
    else
    {
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = v15 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v20 = v14 - 2;
      uint64_t v21 = (long long *)(v15 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v14 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_25;
      }
    }
    do
    {
      uint64_t v24 = *(void *)(v19 - 8);
      v19 -= 8;
      *--uint64_t v14 = v24;
    }
    while (v19 != v16);
LABEL_25:
    uint64_t v15 = *(void *)(a2 + 8);
    goto LABEL_26;
  }
  return result;
}

uint64_t md::TransitPillIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 819));
  if ((v4 & 1) == 0) {
    return 16;
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 744) + 65));
  if ((v7 & 1) == 0) {
    return 15;
  }
  double v10 = *(double *)(a1 + 680);
  float32x2_t v11 = vmul_n_f32(*(float32x2_t *)&v10, *(float *)(a2 + 896));
  float32x2_t v12 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*(float32x2_t *)&v10, *(float *)(a2 + 900)));
  LODWORD(v10) = vsub_f32(v11, v12).u32[0];
  HIDWORD(v10) = vadd_f32(v11, v12).i32[1];
  double v13 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v10, *a4));
  *(double *)(a1 + 520) = v13;
  *(double *)(a1 + 344) = v13;
  md::CollisionObject::setupShapeData(a1 + 312, v13, *(double *)&v12, v10);
  uint64_t v14 = *(void *)(a1 + 16);
  int v15 = *(_DWORD *)(v14 + 1040);
  *(_DWORD *)(a1 + 692) = v15;
  uint64_t v16 = *(void *)(a1 + 744);
  *(_DWORD *)(v16 + 16) = v15;
  if (*(unsigned char *)(a2 + 448))
  {
    double v17 = 1.0;
    double v18 = 0.0;
    double v19 = 0.0;
  }
  else
  {
    double v20 = *(double *)(v14 + 408);
    double v21 = *(double *)(v14 + 416);
    double v22 = *(double *)(v14 + 424);
    double v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
    double v18 = v23 * v20;
    double v19 = v23 * v21;
    double v17 = v23 * v22;
  }
  float v24 = *(double *)(a2 + 600) * v18 + *(double *)(a2 + 608) * v19 + *(double *)(a2 + 616) * v17;
  *(float *)(v16 + 24) = -v24;
  *(_DWORD *)(v16 + 36) = a4->i32[0];
  *(_DWORD *)(v16 + 40) = a4->i32[1];
  return 37;
}

void md::TransitPillIconLabelPart::updateForDisplay(md::TransitPillIconLabelPart *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 819);
  if (v1)
  {
    *((_DWORD *)this + 153) = *((_DWORD *)this + 147);
    uint64_t v3 = *(void *)((char *)this + 572);
    *(void *)((char *)this + 596) = v3;
    int v4 = v3;
    *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
    *((unsigned char *)this + 617) = *((unsigned char *)this + 593);
    *((unsigned char *)this + 556) = *((unsigned char *)this + 633) + 4 * *((unsigned char *)this + 594);
    uint64_t v5 = *((void *)this + 93);
    *(_DWORD *)(v5 + 12) = v4;
    *(unsigned char *)(v5 + 66) = *((unsigned char *)this + 676);
    *(unsigned char *)(v5 + 28) = *((unsigned char *)this + 656);
    *(unsigned char *)(v5 + 29) = *((unsigned char *)this + 657);
    *(unsigned char *)(v5 + 30) = *((unsigned char *)this + 658);
    *(unsigned char *)(v5 + 31) = *((unsigned char *)this + 659);
    uint64_t v6 = (unsigned char *)*((void *)this + 93);
    v6[32] = *((unsigned char *)this + 660);
    v6[33] = *((unsigned char *)this + 661);
    v6[34] = *((unsigned char *)this + 662);
    v6[35] = *((unsigned char *)this + 663);
    int v7 = *((_DWORD *)this + 161);
    *((_DWORD *)this + 172) = v7;
    *(_DWORD *)(*((void *)this + 93) + 20) = v7;
    *((void *)this + 85) = *(void *)((char *)this + 636);
    if (*((unsigned char *)this + 722)
      || *((float *)this + 80) < *((float *)this + 78)
      || *((float *)this + 81) < *((float *)this + 79))
    {
      uint64_t v8 = (int8x16_t *)((char *)this + 312);
      *((unsigned char *)this + 722) = 0;
      int v9 = *((unsigned __int8 *)this + 677);
      *((unsigned char *)this + 721) = v9;
      float32x2_t v10 = *(float32x2_t *)((char *)this + 668);
      *((float32x2_t *)this + 89) = v10;
      float v11 = *((float *)this + 166);
      *((float *)this + 177) = v11;
      float v12 = *((float *)this + 163);
      *((float *)this + 174) = v12;
      if (!v9)
      {
        float32x2_t v35 = v10;
        md::CollisionObject::resetWithRects((void **)this + 39, 1u);
        uint64_t v20 = *((unsigned int *)this + 122);
        double v21 = (void *)(*((void *)this + 59) + 16 * v20);
        *(float32x2_t *)v22.i8 = vneg_f32(v35);
        void *v21 = v22.i64[0];
        v21[1] = v35;
        int8x16_t v23 = *v8;
        v24.i64[0] = v8->i64[0];
        *(float32x2_t *)&v24.u32[2] = v35;
        v25.i64[0] = v22.i64[0];
        v25.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
        *((_DWORD *)this + 122) = v20 + 1;
        v22.u64[1] = (unint64_t)v35;
        int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_f32(v24, v25), v22, v23);
LABEL_10:
        *uint64_t v8 = v19;
        return;
      }
      __int32 v34 = LODWORD(v11);
      if (v12 == 1.0)
      {
        md::CollisionObject::resetWithCircles((void **)this + 39, 1u);
        uint64_t v13 = *((void *)this + 60);
        unsigned int v14 = *((_DWORD *)this + 122);
        *((_DWORD *)this + 122) = v14 + 1;
        uint64_t v15 = v13 + 12 * v14;
        *(void *)uint64_t v15 = 0;
        *(_DWORD *)(v15 + 8) = v34;
        if (*(float *)&v34 == 0.0) {
          return;
        }
        v16.i64[0] = v8->i64[0];
        v16.i32[2] = v34;
        v16.i32[3] = v34;
        int32x4_t v17 = *(int32x4_t *)v8;
        *(float *)v17.i32 = -*(float *)&v34;
        float32x4_t v18 = (float32x4_t)v17;
        v18.f32[1] = -*(float *)&v34;
        v17.i32[2] = v34;
        int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_f32(v16, v18), (int8x16_t)vtrn1q_s32(v17, v17), *v8);
        goto LABEL_10;
      }
      float v26 = v12 * v11;
      float v27 = -v11;
      float v33 = -(float)(v12 * v11);
      md::CollisionObject::resetWithRects((void **)this + 39, 1u);
      uint64_t v28 = *((unsigned int *)this + 122);
      uint64_t v29 = *((void *)this + 59) + 16 * v28;
      *(float *)uint64_t v29 = v27;
      *(float *)(v29 + 4) = v33;
      *(_DWORD *)(v29 + 8) = v34;
      *(float *)(v29 + 12) = v26;
      int8x8_t v30 = *(int8x8_t *)((char *)this + 316);
      int8x8_t v31 = (int8x8_t)__PAIR64__(v34, v30.u32[0]);
      float v32 = fminf(*((float *)this + 78), v27);
      *(float *)v31.i32 = v33;
      *((_DWORD *)this + 122) = v28 + 1;
      *((float *)this + 78) = v32;
      *(int8x8_t *)((char *)this + 316) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v34, v30.u32[0]), (float32x2_t)__PAIR64__(v30.u32[1], LODWORD(v33))), v31, v30);
      *((float *)this + 81) = fmaxf(*((float *)this + 81), v26);
    }
  }
}

uint64_t md::TransitPillIconLabelPart::layoutForStaging(md::TransitPillIconLabelPart *this, md::LabelManager *a2, float *a3)
{
  if (*((void *)this + 91))
  {
    md::TransitPillIconLabelPart::checkExternalIconRequest(this, a2);
    if (*((void *)this + 91)) {
      return 15;
    }
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 819);
  if ((v6 & 1) == 0) {
    return 16;
  }
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*((void *)this + 93) + 65));
  if ((v8 & 1) == 0) {
    return 15;
  }
  uint64_t v9 = *((void *)a2 + 54);
  if (*(unsigned char *)(v9 + 8))
  {
    double v10 = 1.0;
    double v11 = 0.0;
    v12.i64[0] = 0;
  }
  else
  {
    uint64_t v13 = (double *)*((void *)this + 2);
    double v14 = v13[74];
    double v15 = v13[75];
    double v16 = v13[76];
    double v17 = 1.0 / sqrt(v14 * v14 + v15 * v15 + v16 * v16);
    double v11 = v17 * v14;
    *(double *)v12.i64 = v17 * v15;
    double v10 = v17 * v16;
  }
  *(double *)v18.i64 = *(double *)(v9 + 160) * v11 + *(double *)(v9 + 168) * *(double *)v12.i64;
  *(double *)v19.i64 = *(double *)v18.i64 + *(double *)(v9 + 176) * v10;
  *(float *)v19.i32 = *(double *)v19.i64;
  *(float *)v19.i32 = -*(float *)v19.i32;
  if (vabds_f32(*(float *)v19.i32, *((float *)this + 163)) > 0.2)
  {
    *((_DWORD *)this + 163) = v19.i32[0];
    *((unsigned char *)this + 678) = 1;
    *((unsigned char *)this + 722) = 1;
  }
  unsigned __int8 v20 = atomic_load((unsigned __int8 *)this + 819);
  if (v20)
  {
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)(*((void *)this + 93) + 65));
    if ((v21 & 1) != 0
      && (*((unsigned char *)this + 628)
       || *((unsigned char *)this + 678)
       || *((float *)this + 20) < *((float *)this + 18)
       || *((float *)this + 21) < *((float *)this + 19)))
    {
      *((unsigned char *)this + 628) = 0;
      int v22 = *((unsigned __int8 *)this + 677);
      if (*((unsigned char *)this + 677)) {
        v19.i32[0] = *((_DWORD *)this + 166);
      }
      else {
        *(float *)v19.i32 = fminf(*((float *)this + 168), *((float *)this + 167));
      }
      *(float *)v19.i32 = 0.5 - *(float *)v19.i32;
      int8x16_t v23 = (int8x16_t *)((char *)this + 72);
      *((float32x2_t *)this + 21) = vmaxnm_f32(*(float32x2_t *)((char *)this + 620), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 0));
      *((unsigned char *)this + 271) = *((unsigned char *)this + 631);
      *((unsigned char *)this + 678) = 0;
      if (v22)
      {
        float v24 = *((float *)this + 163);
        float v25 = *((float *)this + 166);
        __int32 v47 = LODWORD(v25);
        if (v24 == 1.0)
        {
          *(double *)v19.i64 = md::CollisionObject::resetWithCircles((void **)this + 9, 1u);
          uint64_t v26 = *((void *)this + 30);
          unsigned int v27 = *((_DWORD *)this + 62);
          *((_DWORD *)this + 62) = v27 + 1;
          uint64_t v28 = v26 + 12 * v27;
          *(void *)uint64_t v28 = 0;
          *(_DWORD *)(v28 + 8) = v47;
          if (*(float *)&v47 != 0.0)
          {
            int8x16_t v18 = *v23;
            v29.i64[0] = v23->i64[0];
            v29.i32[2] = v47;
            v29.i32[3] = v47;
            int32x4_t v30 = *(int32x4_t *)v23;
            *(float *)v30.i32 = -*(float *)&v47;
            float32x4_t v31 = (float32x4_t)v30;
            v31.f32[1] = -*(float *)&v47;
            int8x16_t v32 = (int8x16_t)vcgtq_f32(v29, v31);
            v30.i32[2] = v47;
            int8x16_t v12 = (int8x16_t)vtrn1q_s32(v30, v30);
            int8x16_t v19 = vbslq_s8(v32, v12, *v23);
            *int8x16_t v23 = v19;
          }
        }
        else
        {
          float v39 = v25 * v24;
          float v40 = -v25;
          float v46 = -(float)(v25 * v24);
          md::CollisionObject::resetWithRects((void **)this + 9, 1u);
          uint64_t v41 = *((unsigned int *)this + 62);
          uint64_t v42 = *((void *)this + 29) + 16 * v41;
          *(float *)uint64_t v42 = v40;
          *(float *)(v42 + 4) = v46;
          *(_DWORD *)(v42 + 8) = v47;
          *(float *)(v42 + 12) = v39;
          v18.i64[0] = *(void *)((char *)this + 76);
          v12.i64[0] = __PAIR64__(v47, v18.u32[0]);
          *(float *)v19.i32 = fminf(*((float *)this + 18), v40);
          *(float *)v12.i32 = v46;
          *((_DWORD *)this + 62) = v41 + 1;
          *((_DWORD *)this + 18) = v19.i32[0];
          *(int8x8_t *)v19.i8 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v47, v18.u32[0]), (float32x2_t)__PAIR64__(v18.u32[1], LODWORD(v46))), *(int8x8_t *)v12.i8, *(int8x8_t *)v18.i8);
          *(void *)((char *)this + 76) = v19.i64[0];
          *((float *)this + 21) = fmaxf(*((float *)this + 21), v39);
        }
      }
      else
      {
        float32x2_t v48 = *(float32x2_t *)((char *)this + 668);
        md::CollisionObject::resetWithRects((void **)this + 9, 1u);
        uint64_t v33 = *((unsigned int *)this + 62);
        __int32 v34 = (void *)(*((void *)this + 29) + 16 * v33);
        *(float32x2_t *)v35.i8 = vneg_f32(v48);
        *__int32 v34 = v35.i64[0];
        v34[1] = v48;
        int8x16_t v36 = *(int8x16_t *)((char *)this + 72);
        v37.i64[0] = *((void *)this + 9);
        *(float32x2_t *)&v37.u32[2] = v48;
        v12.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
        v38.i64[0] = v35.i64[0];
        v38.i64[1] = v12.i64[0];
        *((_DWORD *)this + 62) = v33 + 1;
        int8x16_t v18 = (int8x16_t)vcgtq_f32(v37, v38);
        v35.u64[1] = (unint64_t)v48;
        int8x16_t v19 = vbslq_s8(v18, v35, v36);
        *(int8x16_t *)((char *)this + 72) = v19;
      }
    }
  }
  uint64_t v43 = *((void *)a2 + 54);
  v19.i32[0] = *((_DWORD *)this + 159);
  v18.i32[0] = *(_DWORD *)(v43 + 456);
  v12.i32[0] = *(_DWORD *)(v43 + 460);
  float v44 = *((float *)this + 160);
  float v45 = a3[1] + (float)(*(float *)v12.i32 * *(float *)v19.i32);
  *(float *)v12.i32 = v44 * *(float *)v12.i32;
  *(float *)v19.i32 = -(float)(*(float *)v12.i32 - (float)(*(float *)v18.i32 * *(float *)v19.i32));
  *(float *)v18.i32 = v45 + (float)(v44 * *(float *)v18.i32);
  *(float *)v19.i32 = *(float *)v19.i32 + *a3;
  *((_DWORD *)this + 70) = v19.i32[0];
  *((_DWORD *)this + 71) = v18.i32[0];
  *((_DWORD *)this + 26) = v19.i32[0];
  *((_DWORD *)this + 27) = v18.i32[0];
  md::CollisionObject::setupShapeData((uint64_t)this + 72, *(double *)v19.i64, *(double *)v18.i64, *(double *)v12.i64);
  return 37;
}

void md::TransitPillIconLabelPart::updateWithStyle(md::TransitPillIconLabelPart *this, md::LabelManager *a2)
{
  if (*((void *)this + 91)) {
    md::TransitPillIconLabelPart::checkExternalIconRequest(this, a2);
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 819);
  if (v4)
  {
    md::ImageLabelPart::updateWithStyle(this, a2);
    uint64_t v5 = (uint64_t *)*((void *)this + 4);
    uint64_t v6 = *v5;
    uint64_t v7 = *(void *)(*v5 + 296);
    if (!v7)
    {
      unsigned __int8 v8 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v5, 0);
      uint64_t v7 = *v8;
      *(void *)(v6 + 296) = *v8;
      uint64_t v6 = *v5;
    }
    BOOL v9 = *(unsigned char *)(v7 + 89) == 2;
    *((unsigned char *)this + 676) = v9;
    if (v9)
    {
      double v10 = *(unsigned char **)(v6 + 296);
      if (!v10)
      {
        double v11 = (void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v6, 0);
        double v10 = (unsigned char *)*v11;
        *(void *)(v6 + 296) = *v11;
      }
      *((unsigned char *)this + 656) = v10[72];
      *((unsigned char *)this + 657) = v10[73];
      *((unsigned char *)this + 658) = v10[74];
      *((unsigned char *)this + 659) = v10[75];
      uint64_t v6 = *v5;
    }
    int8x16_t v12 = *(unsigned char **)(v6 + 296);
    if (!v12)
    {
      uint64_t v13 = (void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v6, 0);
      int8x16_t v12 = (unsigned char *)*v13;
      *(void *)(v6 + 296) = *v13;
    }
    *((unsigned char *)this + 660) = v12[76];
    *((unsigned char *)this + 661) = v12[77];
    *((unsigned char *)this + 662) = v12[78];
    *((unsigned char *)this + 663) = v12[79];
    double v14 = (float32x2_t *)*((void *)this + 93);
    *((_DWORD *)this + 159) = v14[6].i32[0];
    *((_DWORD *)this + 160) = v14[6].i32[1];
    float v15 = *(float *)(*((void *)this + 2) + 760);
    *((float *)this + 162) = v15;
    uint64_t v16 = *v5;
    uint64_t v17 = *(void *)(*v5 + 296);
    if (!v17)
    {
      int8x16_t v18 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v5, 0);
      uint64_t v17 = *v18;
      *(void *)(v16 + 296) = *v18;
      float v15 = *((float *)this + 162);
      double v14 = (float32x2_t *)*((void *)this + 93);
    }
    float v19 = *(float *)(v17 + 36);
    *((float *)this + 161) = v19;
    if (!v14[8].i8[6]) {
      float v19 = 1.0;
    }
    float v20 = v19 * v15;
    int v21 = v14[8].u8[0];
    if (*((unsigned __int8 *)this + 677) == v21)
    {
      if (!v14[8].i8[0])
      {
        float v23 = v14[7].f32[0] * v20;
        float v24 = v14[7].f32[1] * v20;
        if (vabds_f32(*((float *)this + 167), v23) < 1.0 && vabds_f32(*((float *)this + 168), v24) < 1.0) {
          goto LABEL_26;
        }
        *((float *)this + 167) = v23;
        *((float *)this + 168) = v24;
        goto LABEL_25;
      }
      float v22 = v14[5].f32[1] * v20;
      if (vabds_f32(*((float *)this + 166), v22) >= 1.0)
      {
        *((float *)this + 166) = v22;
LABEL_25:
        *((unsigned char *)this + 678) = 1;
      }
    }
    else
    {
      *((unsigned char *)this + 677) = v21;
      *((unsigned char *)this + 678) = 1;
      *((float *)this + 166) = v14[5].f32[1] * v20;
      *(float32x2_t *)((char *)this + 668) = vmul_n_f32(v14[7], v20);
    }
LABEL_26:
    *((unsigned char *)this + 722) |= *((unsigned char *)this + 678);
  }
}

void md::TransitPillIconLabelPart::~TransitPillIconLabelPart(md::TransitPillIconLabelPart *this)
{
  md::TransitPillIconLabelPart::~TransitPillIconLabelPart(this);
  unsigned __int8 v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unsigned __int8 v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

{
  unsigned __int8 v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EF545CB0;
  if (*((unsigned char *)this + 817))
  {
    *(_WORD *)((char *)this + 817) = 256;
    uint64_t v2 = atomic_load((unsigned __int8 *)this + 819);
    if (v2) {
      *(unsigned char *)(*((void *)this + 93) + 68) = 0;
    }
  }
  int v3 = atomic_load((unsigned __int8 *)this + 819);
  if ((v3 & 1) == 0)
  {
    if ((*((char *)this + 783) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    (*(void (**)(void, void, uint64_t))(**((void **)this + 98) + 40))(*((void *)this + 98), *((void *)this + 95), *((void *)this + 97) & 0x7FFFFFFFFFFFFFFFLL);
    unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 94);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  *(unsigned char *)(*((void *)this + 93) + 67) = 1;
  if (*((char *)this + 783) < 0) {
    goto LABEL_9;
  }
LABEL_6:
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 94);
  if (!v4)
  {
LABEL_11:
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 92);
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
LABEL_10:
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 92);
  if (!v5) {
    goto LABEL_15;
  }
LABEL_12:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_15:
  *(void *)this = &unk_1EF5540C8;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

void md::LogicBase::_debugConsoleString(unsigned char *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

void md::LogicBase::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = v3;
    unint64_t v16 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = *(void *)(a1 + 24);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v5, v3);
  *((unsigned char *)p_dst + v3) = 0;
  int v9 = SHIBYTE(v16);
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v16;
  }
  *(unsigned char *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  v14[23] = 6;
  strcpy(v14, "Active");
  uint64_t v10 = *(unsigned __int8 *)(a1 + 56);
  int v13 = 0;
  memset(&v12[4], 0, 24);
  v12[0] = v10;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v14, (uint64_t)v12);
  if (v9 < 0)
  {
    double v11 = (void *)__dst;
    operator delete(v11);
  }
}

void ggl::FlyoverMasked::FlyoverPipelineState::~FlyoverPipelineState(ggl::FlyoverMasked::FlyoverPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverMasked::FlyoverPipelineState::FlyoverPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    uint64_t v10 = a4;
    int8x16_t v12 = a2;
    uint64_t v13 = a3;
    a2 = v12;
    a3 = v13;
    a4 = v10;
    if (v11)
    {
      {
        if (v11)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            unk_1E958CB20 = 1;
          }
          ggl::FlyoverMasked::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          unk_1E957D2E0 = &ggl::FlyoverMasked::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
          qword_1E957D2E8 = 0;
          {
            ggl::FlyoverMasked::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            *(void *)algn_1E957D318 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1E957D320 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1E957D328 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1E957D330 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
          }
          qword_1E957D2F0 = (uint64_t)&ggl::FlyoverMasked::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
          unk_1E957D2F8 = xmmword_1A28FD1E0;
        }
      }
      ggl::FlyoverMasked::FlyoverPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMasked::FlyoverPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMaskedShader::typedReflection(v11);
      qword_1E958F0A8 = (uint64_t)&ggl::FlyoverMaskedShader::typedReflection(void)::ref;
      {
        ggl::FlyoverMasked::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E958F108 = 0;
        qword_1E958F110 = (uint64_t)"";
        dword_1E958F118 = 0;
        qword_1E958F120 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineAttributeBinding_0(void)::attr;
        unk_1E958F128 = 2;
      }
      qword_1E958F0B0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958F0B8 = 1;
      qword_1E958F0C0 = 0;
      unk_1E958F0C8 = 3;
      qword_1E958F0D0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineDeviceStructBinding(void)::ref;
      unk_1E958F0D8 = 0;
      {
        ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E958F148 = 0;
        qword_1E958F150 = (uint64_t)"sharedConstants";
        dword_1E958F158 = 3;
        qword_1E958F160 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E958F168 = xmmword_1A28FC940;
        qword_1E958F178 = 1;
        unk_1E958F180 = "transform";
        dword_1E958F188 = 3;
        qword_1E958F190 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantTransformBinding(void)::reflection;
        unk_1E958F198 = vdupq_n_s64(2uLL);
        qword_1E958F1A8 = 2;
        unk_1E958F1B0 = "clip";
        dword_1E958F1B8 = 3;
        qword_1E958F1C0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantClipBinding(void)::reflection;
        unk_1E958F1C8 = xmmword_1A28FC950;
        qword_1E958F1D8 = 3;
        unk_1E958F1E0 = "material";
        dword_1E958F1E8 = 3;
        qword_1E958F1F0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantMaterialBinding(void)::reflection;
        unk_1E958F1F8 = xmmword_1A28FC960;
        qword_1E958F208 = 4;
        unk_1E958F210 = "texcoords";
        dword_1E958F218 = 3;
        qword_1E958F220 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1E958F228 = 2;
      }
      qword_1E958F0E0 = (uint64_t)&ggl::FlyoverMasked::pipelineStateFlyoverPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E958F0E8 = 5;
      a4 = v10;
      a2 = v12;
      a3 = v13;
    }
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v16 = *(_OWORD *)a3;
  *(_OWORD *)&v16[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverMasked::FlyoverPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v15;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v16;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v16[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1EF55B018;
  return a1;
}

BOOL ggl::FlyoverMasked::FlyoverPipelineSetup::textureIsEnabled(ggl::FlyoverMasked::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::FlyoverMasked::FlyoverPipelineSetup::constantDataIsEnabled(ggl::FlyoverMasked::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::FlyoverMasked::FlyoverPipelineSetup::~FlyoverPipelineSetup(ggl::FlyoverMasked::FlyoverPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

__n128 md::SelectedTransitTileResourceFetcher::tileLoaderAdditionalInfo@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v3.n128_u64[1] = *(void *)(*(void *)(a1 + 8) + 32);
  __n128 result = v3;
  *(__n128 *)(a2 + 4) = v3;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t md::SelectedTransitTileResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F411C438](**(unsigned int **)(a3 + 8), *(unsigned int *)(*(void *)(a3 + 8) + 4), *(unsigned int *)(*(void *)(a3 + 8) + 8), *(void *)(*(void *)(a3 + 8) + 16));
}

void md::SelectedTransitTileResourceFetcher::~SelectedTransitTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::GEOVectorTileResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::GEOVectorTileResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::GEOVectorTileResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::StackLabelPart::debugCompositeClassName@<X0>(md::StackLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v15);
  if (*((float *)this + 166) == *((float *)this + 165))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"Stack, Margin=", 14);
    uint64_t v4 = v15[0];
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFEFB | 4;
    *(void *)((char *)&v15[2] + *(void *)(v4 - 24)) = 1;
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"Stack, Margin:H=", 16);
    uint64_t v5 = v15[0];
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFEFB | 4;
    *(void *)((char *)&v15[2] + *(void *)(v5 - 24)) = 1;
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)", V=", 4);
  }
  std::ostream::operator<<();
  if ((v22 & 0x10) != 0)
  {
    unint64_t v8 = v21;
    if (v21 < v18)
    {
      unint64_t v21 = v18;
      unint64_t v8 = v18;
    }
    int v9 = (const void **)&v17;
  }
  else
  {
    if ((v22 & 8) == 0)
    {
      size_t v7 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    int v9 = (const void **)v16;
    unint64_t v8 = v16[2];
  }
  uint64_t v10 = *v9;
  size_t v7 = v8 - (void)*v9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = operator new(v11 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v12 | 0x8000000000000000;
    *(void *)a2 = v13;
    a2 = v13;
    goto LABEL_18;
  }
  a2[23] = v7;
  if (v7) {
LABEL_18:
  }
    memmove(a2, v10, v7);
LABEL_19:
  a2[v7] = 0;
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v23);
}

void sub_1A1F39F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::StackLabelPart::populateCollisionObjects(float32x2_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, float *a6, float a7, float a8)
{
  uint64_t v11 = a2;
  if (a1[78].i8[6])
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    if (v13 - v14 == -208)
    {
      for (; v13 != v14; v13 -= 208)
      {
        free(*(void **)(v13 - 48));
        free(*(void **)(v13 - 40));
        free(*(void **)(v13 - 24));
      }
      *(void *)(v11 + 16) = v14;
    }
    else
    {
      std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a2 + 8), 1uLL);
      uint64_t v14 = *(void *)(v11 + 16);
    }
    unint64_t v21 = (const float *)&a1[1];
    float32x2_t v22 = vld1_dup_f32(v21);
    *(float32x2_t *)(v14 - 112) = vadd_f32(a1[21], v22);
    float v23 = *a6;
    *(float *)(v14 - 192) = *a6;
    *(float *)(v14 - 188) = a6[1];
    *(unsigned char *)(v14 - 12) = fabsf(v23 + -1.0) > 0.000001;
    float32x2_t v44 = vmul_f32(a1[80], (float32x2_t)0x3F0000003F000000);
    md::CollisionObject::resetWithRects((void **)(v14 - 208), 1u);
    uint64_t v24 = *(unsigned int *)(v14 - 32);
    *(float32x2_t *)&long long v25 = vneg_f32(v44);
    *((float32x2_t *)&v25 + 1) = v44;
    *(_OWORD *)(*(void *)(v14 - 48) + 16 * v24) = v25;
    float32x2_t v26 = *(float32x2_t *)(v14 - 200);
    double v27 = COERCE_DOUBLE(vminnm_f32(*(float32x2_t *)(v14 - 208), *(float32x2_t *)&v25));
    *(_DWORD *)(v14 - 32) = v24 + 1;
    double v28 = COERCE_DOUBLE(vmaxnm_f32(v26, v44));
    *(double *)(v14 - 208) = v27;
    *(double *)(v14 - 200) = v28;
    *(float *)(v14 - 176) = a7;
    *(float *)(v14 - 172) = a8;
    return md::CollisionObject::setupShapeData(v14 - 208, v27, v28, *(double *)&v44);
  }
  uint64_t v46 = 0;
  uint64_t result = gss::LabelPositionToMask(a3);
  int v19 = a1[86].u8[2];
  unsigned int v43 = a3;
  if (!a1[86].i8[2])
  {
    uint64_t v20 = (*(void *)&a1[73] - *(void *)&a1[72]) >> 3;
    uint64_t v45 = 1;
    goto LABEL_20;
  }
  if (!a1[86].i8[0])
  {
    uint64_t v20 = (*(void *)&a1[73] - *(void *)&a1[72]) >> 3;
    int v19 = result & 0xE;
    if ((result & 0xE) == 0)
    {
      uint64_t v45 = 1;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if ((result & 0x38) != 0)
  {
    uint64_t v20 = (*(void *)&a1[73] - *(void *)&a1[72]) >> 3;
LABEL_19:
    int v19 = v20 - 1;
    uint64_t v45 = -1;
    LODWORD(v20) = -1;
    goto LABEL_20;
  }
  int v19 = 0;
  uint64_t v20 = (*(void *)&a1[73] - *(void *)&a1[72]) >> 3;
  uint64_t v45 = 1;
  if ((result & 0x83) == 0 && a4) {
    goto LABEL_19;
  }
LABEL_20:
  int v29 = v20 - v19;
  if (v20 != v19)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 8 * v19;
    do
    {
      uint64_t v34 = v11;
      int8x16_t v35 = *(void **)(*(void *)&a1[72] + v31 + 8 * v30);
      md::StackLabelPart::childCoordinateForAlignment((uint64_t)a1, 0, (float *)&a1[79], v35, v30 == 0, a5, (float *)&v46);
      float v37 = v36 - a1[81].f32[0];
      float v39 = v38 - a1[81].f32[1];
      float v40 = *a6;
      if (*a6 != 1.0)
      {
        float v41 = a6[1];
        float v42 = v41 * v39;
        float v39 = (float)(v39 * v40) + (float)(v41 * v37);
        float v37 = -(float)(v42 - (float)(v40 * v37));
      }
      int8x16_t v32 = (uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, float *, float, float))(*v35 + 584);
      uint64_t v33 = v35;
      uint64_t v11 = v34;
      uint64_t result = (*v32)(v33, v34, v43, a4, a5, a6, v37 + a7, v39 + a8);
      v30 += v45;
    }
    while (v29 != v30);
  }
  return result;
}

void md::StackLabelPart::childCoordinateForAlignment(uint64_t a1, uint64_t a2, float *a3, void *a4, int a5, uint64_t a6, float *a7)
{
  uint64_t v11 = a4[3];
  uint64_t v12 = (float *)(v11 + 72);
  uint64_t v13 = 312;
  if (a2) {
    uint64_t v12 = (float *)(v11 + 312);
  }
  else {
    uint64_t v13 = 72;
  }
  float v14 = v12[2];
  float v15 = *(float *)(v11 + v13);
  float v16 = 0.0;
  if (v14 >= v15)
  {
    float v18 = v12[3];
    float v19 = v12[1];
    float v17 = 0.0;
    if (v18 >= v19)
    {
      float v16 = v14 - v15;
      float v17 = v18 - v19;
    }
  }
  else
  {
    float v17 = 0.0;
  }
  if (*(unsigned char *)(a1 + 688))
  {
    *a7 = (float)(*a7 + v16) + a3[1];
  }
  else
  {
    if (a5) {
      float v20 = 0.0;
    }
    else {
      float v20 = (*(float (**)(void *, uint64_t))(*a4 + 280))(a4, a2);
    }
    float v21 = *a3;
    a7[1] = a7[1]
          - (float)((float)((*(float (**)(void *, uint64_t))(*a4 + 288))(a4, a2) + v17)
                  + (float)(v21 + v20));
  }
}

uint64_t md::StackLabelPart::setRadialPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 576);
  size_t v7 = *(uint64_t **)(a1 + 584);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 368))(v8, a2, a3);
  }
  uint64_t result = gss::LabelPositionToMask(a2);
  char v10 = *(unsigned char *)(a1 + 690);
  if (v10)
  {
    if ((result & 0x83) != 0) {
      char v11 = 0;
    }
    else {
      char v11 = a3;
    }
    if ((result & 0x38) != 0) {
      char v11 = 1;
    }
    if (*(unsigned char *)(a1 + 688)) {
      char v10 = v11;
    }
    else {
      char v10 = (result & 0xE) != 0;
    }
  }
  *(unsigned char *)(a1 + 691) = v10;
  if (*(unsigned char *)(a1 + 692))
  {
    uint64_t result = gss::LabelPositionToMask(a2);
    if ((result & 0x38) != 0) {
      char v12 = 2;
    }
    else {
      char v12 = 1;
    }
    *(unsigned char *)(a1 + 656) = v12;
    *(unsigned char *)(a1 + 684) = v12;
  }
  return result;
}

uint64_t md::StackLabelPart::setAlignment(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a2 && !*(unsigned char *)(result + 688)) {
    *(unsigned char *)(result + 656) = a3;
  }
  uint64_t v5 = *(uint64_t **)(result + 576);
  for (uint64_t i = *(uint64_t **)(result + 584);
        v5 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 360))(v7, a2, a3))
  {
    uint64_t v7 = *v5++;
  }
  return result;
}

uint64_t md::StackLabelPart::setTextAlignment(uint64_t result, uint64_t a2, uint64_t a3)
{
  __n128 v3 = *(uint64_t **)(result + 576);
  for (uint64_t i = *(uint64_t **)(result + 584);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 352))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return result;
}

float md::StackLabelPart::bottomAlignInset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 576) == *(void *)(a1 + 584)) {
    return 0.0;
  }
  int v6 = *(unsigned __int8 *)(a1 + 690);
  if (!*(unsigned char *)(a1 + 690))
  {
LABEL_6:
    if (*(unsigned char *)(a1 + 689)) {
      goto LABEL_7;
    }
LABEL_12:
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  char v7 = gss::LabelPositionToMask(a3);
  if (*(unsigned char *)(a1 + 688))
  {
    if ((v7 & 0x38) != 0)
    {
LABEL_5:
      int v6 = *(unsigned char *)(a1 + 690) == 0;
      goto LABEL_6;
    }
  }
  else if ((v7 & 0xE) != 0)
  {
    goto LABEL_5;
  }
  int v6 = 0;
  if (!*(unsigned char *)(a1 + 689)) {
    goto LABEL_12;
  }
LABEL_7:
  if (v6)
  {
LABEL_8:
    uint64_t v8 = (void *)(*(void *)(a1 + 584) - 8);
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v8 = *(void **)(a1 + 576);
LABEL_14:
  uint64_t v10 = *v8;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v8 + 328))(*v8, a2, a3);
  uint64_t v11 = a1 + 632;
  if (a2) {
    uint64_t v11 = a1 + 660;
  }
  if (!*(unsigned char *)(a1 + 688))
  {
    if (!*(unsigned char *)(a1 + 689) || *(unsigned char *)(a1 + 691)) {
      return result;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(v11 + 24))
  {
    if (*(unsigned char *)(v11 + 24) != 3) {
      return result;
    }
LABEL_22:
    float v12 = *(float *)(v11 + 12);
    uint64_t v13 = *(void *)(v10 + 24);
    float v14 = (float *)(v13 + 72);
    uint64_t v15 = 312;
    if (a2) {
      float v14 = (float *)(v13 + 312);
    }
    else {
      uint64_t v15 = 72;
    }
    float v16 = 0.0;
    if (v14[2] >= *(float *)(v13 + v15))
    {
      float v17 = v14[3];
      float v18 = v14[1];
      BOOL v19 = v17 < v18;
      float v16 = v17 - v18;
      if (v19) {
        float v16 = 0.0;
      }
    }
    return (float)(v12 + result) - v16;
  }
  float v20 = *(float *)(v11 + 12);
  uint64_t v21 = *(void *)(v10 + 24);
  float32x2_t v22 = (float *)(v21 + 72);
  uint64_t v23 = 312;
  if (a2) {
    float32x2_t v22 = (float *)(v21 + 312);
  }
  else {
    uint64_t v23 = 72;
  }
  float v24 = 0.0;
  if (v22[2] >= *(float *)(v21 + v23))
  {
    float v25 = v22[3];
    float v26 = v22[1];
    if (v25 >= v26) {
      float v24 = v25 - v26;
    }
  }
  return result + (float)((float)(v20 - v24) * 0.5);
}

float md::StackLabelPart::topRightAlignInset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 576) == *(void *)(a1 + 584)) {
    return 0.0;
  }
  char v6 = gss::LabelPositionToMask(a3);
  if (*(unsigned char *)(a1 + 688))
  {
    if ((v6 & 0x38) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v6 & 0xE) == 0)
  {
LABEL_8:
    uint64_t v8 = *(void **)(a1 + 576);
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 690)) {
    goto LABEL_8;
  }
  uint64_t v8 = (void *)(*(void *)(a1 + 584) - 8);
LABEL_10:
  uint64_t v9 = *v8;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v8 + 312))(*v8, a2, a3);
  if (*(unsigned char *)(a1 + 688))
  {
    uint64_t v10 = a1 + 632;
    if (a2) {
      uint64_t v10 = a1 + 660;
    }
    if (*(unsigned char *)(v10 + 24))
    {
      if (*(unsigned char *)(v10 + 24) == 4)
      {
        float v11 = *(float *)(v10 + 12);
        uint64_t v12 = *(void *)(v9 + 24);
        uint64_t v13 = (float *)(v12 + 72);
        uint64_t v14 = 312;
        if (a2) {
          uint64_t v13 = (float *)(v12 + 312);
        }
        else {
          uint64_t v14 = 72;
        }
        float v15 = 0.0;
        if (v13[2] >= *(float *)(v12 + v14))
        {
          float v16 = v13[3];
          float v17 = v13[1];
          BOOL v18 = v16 < v17;
          float v15 = v16 - v17;
          if (v18) {
            float v15 = 0.0;
          }
        }
        return (float)(v11 + result) - v15;
      }
    }
    else
    {
      float v19 = *(float *)(v10 + 12);
      uint64_t v20 = *(void *)(v9 + 24);
      uint64_t v21 = (float *)(v20 + 72);
      uint64_t v22 = 312;
      if (a2) {
        uint64_t v21 = (float *)(v20 + 312);
      }
      else {
        uint64_t v22 = 72;
      }
      float v23 = 0.0;
      if (v21[2] >= *(float *)(v20 + v22))
      {
        float v24 = v21[3];
        float v25 = v21[1];
        if (v24 >= v25) {
          float v23 = v24 - v25;
        }
      }
      return result + (float)((float)(v19 - v23) * 0.5);
    }
  }
  return result;
}

float md::StackLabelPart::topLeftAlignInset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 576) == *(void *)(a1 + 584)) {
    return 0.0;
  }
  char v6 = gss::LabelPositionToMask(a3);
  if (*(unsigned char *)(a1 + 688))
  {
    if ((v6 & 0x38) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v6 & 0xE) == 0)
  {
LABEL_8:
    uint64_t v8 = *(void **)(a1 + 576);
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 690)) {
    goto LABEL_8;
  }
  uint64_t v8 = (void *)(*(void *)(a1 + 584) - 8);
LABEL_10:
  uint64_t v9 = *v8;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v8 + 312))(*v8, a2, a3);
  if (*(unsigned char *)(a1 + 688))
  {
    uint64_t v10 = a1 + 632;
    if (a2) {
      uint64_t v10 = a1 + 660;
    }
    if (*(unsigned char *)(v10 + 24))
    {
      if (*(unsigned char *)(v10 + 24) == 4)
      {
        float v11 = *(float *)(v10 + 12);
        uint64_t v12 = *(void *)(v9 + 24);
        uint64_t v13 = (float *)(v12 + 72);
        uint64_t v14 = 312;
        if (a2) {
          uint64_t v13 = (float *)(v12 + 312);
        }
        else {
          uint64_t v14 = 72;
        }
        float v15 = 0.0;
        if (v13[2] >= *(float *)(v12 + v14))
        {
          float v16 = v13[3];
          float v17 = v13[1];
          BOOL v18 = v16 < v17;
          float v15 = v16 - v17;
          if (v18) {
            float v15 = 0.0;
          }
        }
        return (float)(v11 + result) - v15;
      }
    }
    else
    {
      float v19 = *(float *)(v10 + 12);
      uint64_t v20 = *(void *)(v9 + 24);
      uint64_t v21 = (float *)(v20 + 72);
      uint64_t v22 = 312;
      if (a2) {
        uint64_t v21 = (float *)(v20 + 312);
      }
      else {
        uint64_t v22 = 72;
      }
      float v23 = 0.0;
      if (v21[2] >= *(float *)(v20 + v22))
      {
        float v24 = v21[3];
        float v25 = v21[1];
        if (v24 >= v25) {
          float v23 = v24 - v25;
        }
      }
      return result + (float)((float)(v19 - v23) * 0.5);
    }
  }
  return result;
}

uint64_t md::StackLabelPart::isVisuallySimilar(md::StackLabelPart *this, const md::LabelPart *a2)
{
  uint64_t v2 = *((void *)this + 73);
  uint64_t v3 = *((void *)this + 72);
  if (v2 - v3 == *((void *)a2 + 73) - *((void *)a2 + 72))
  {
    if (v2 == v3)
    {
LABEL_8:
      if (*((unsigned __int8 *)this + 656) == *((unsigned __int8 *)a2 + 656)
        && *((unsigned __int8 *)this + 688) == *((unsigned __int8 *)a2 + 688))
      {
        return *((unsigned __int8 *)this + 690) == *((unsigned __int8 *)a2 + 690);
      }
    }
    else
    {
      unint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)(v3 + 8 * v6);
        uint64_t v8 = *(void *)(*((void *)a2 + 72) + 8 * v6);
        int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
        if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)v8 + 224))(v8)) {
          break;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
        if (!result) {
          return result;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 232))(v7, v8) & 1) == 0) {
          break;
        }
        ++v6;
        uint64_t v3 = *((void *)this + 72);
        if (v6 >= (*((void *)this + 73) - v3) >> 3) {
          goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

uint64_t md::StackLabelPart::layoutForDisplay(float32x2_t *a1, uint64_t a2, md::LabelAnimator *a3, float *a4, float *a5)
{
  v10.n128_f32[0] = md::CompositeLabelPart::updateAnimationForDisplay((md::CompositeLabelPart *)a1, a3);
  float v13 = *a5;
  float v12 = a5[1];
  if (a1[77].i8[0])
  {
    float v13 = a1[77].f32[1] + v13;
    v10.n128_u32[0] = a1[78].u32[0];
    float v12 = v10.n128_f32[0] + v12;
  }
  uint64_t v14 = (uint64_t)&a1[39];
  float v16 = *a4;
  float v15 = a4[1];
  uint64_t v44 = 0;
  uint64_t v17 = (*(void *)&a1[73] - *(void *)&a1[72]) >> 3;
  int v18 = v17 - 1;
  if (a1[86].i8[3]) {
    LODWORD(v17) = -1;
  }
  else {
    int v18 = 0;
  }
  int v19 = v17 - v18;
  if (v17 == v18)
  {
    uint64_t v20 = 37;
  }
  else
  {
    uint64_t v21 = 0;
    if (a1[86].i8[3]) {
      uint64_t v22 = -1;
    }
    else {
      uint64_t v22 = 1;
    }
    uint64_t v23 = 8 * v18;
    while (1)
    {
      float v24 = *(void **)(*(void *)&a1[72] + v23 + 8 * v21);
      uint64_t v43 = 0;
      (*(void (**)(void *, uint64_t, md::LabelAnimator *, float *, uint64_t *, __n128))(*v24 + 120))(v24, a2, a3, a4, &v43, v10);
      md::StackLabelPart::childCoordinateForAlignment((uint64_t)a1, 1, (float *)&a1[82] + 1, v24, v21 == 0, a1[85].u8[4], (float *)&v44);
      float v26 = v25 - a1[84].f32[1];
      float v28 = v27 - a1[85].f32[0];
      if (a1[63].i8[4])
      {
        float v29 = a1[41].f32[0];
        float v30 = a1[41].f32[1];
        float v31 = v30 * v28;
        float v28 = (float)(v29 * v28) + (float)(v30 * v26);
        float v26 = -(float)(v31 - (float)(v29 * v26));
      }
      *(float *)&uint64_t v43 = v26 + v13;
      *((float *)&v43 + 1) = v28 + v12;
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, md::LabelAnimator *, float *, uint64_t *))(*v24 + 120))(v24, a2, a3, a4, &v43);
      if (v32 != 37) {
        break;
      }
      v21 += v22;
      if (v19 == v21)
      {
        uint64_t v20 = 37;
        goto LABEL_18;
      }
    }
    uint64_t v20 = v32;
LABEL_18:
    uint64_t v14 = (uint64_t)&a1[39];
  }
  float32x2_t v33 = vmul_f32(*(float32x2_t *)(v14 + 356), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)&long long v34 = vneg_f32(v33);
  float32x2_t v41 = (float32x2_t)v34;
  float32x2_t v42 = v33;
  if (a1[78].i8[6])
  {
    md::CollisionObject::resetWithRects((void **)v14, 1u);
    float32x2_t v35 = a1[59];
    uint64_t v36 = a1[61].u32[0];
    a1[61].i32[0] = v36 + 1;
    double v11 = *(double *)&v42;
    *(float32x2_t *)&long long v37 = v41;
    *((float32x2_t *)&v37 + 1) = v42;
    *(_OWORD *)(*(void *)&v35 + 16 * v36) = v37;
    float32x2_t v33 = vminnm_f32(a1[39], v41);
    *(float32x2_t *)&long long v34 = vmaxnm_f32(a1[40], v42);
    a1[39] = v33;
    a1[40] = (float32x2_t)v34;
  }
  else
  {
    float v38 = (void *)a1[59];
    if (v38)
    {
      free(v38);
      *(float32x2_t *)&long long v34 = v41;
      float32x2_t v33 = v42;
      a1[59] = 0;
    }
    float v39 = (void *)a1[60];
    if (v39)
    {
      free(v39);
      *(float32x2_t *)&long long v34 = v41;
      float32x2_t v33 = v42;
      a1[60] = 0;
    }
    *((float32x2_t *)&v34 + 1) = v33;
    *(_OWORD *)uint64_t v14 = v34;
  }
  v33.f32[0] = v16 + v13;
  a1[65].f32[0] = v16 + v13;
  *(float *)&long long v34 = v15 + v12;
  a1[65].f32[1] = v15 + v12;
  a1[43].f32[0] = v16 + v13;
  a1[43].f32[1] = v15 + v12;
  md::CollisionObject::setupShapeData(v14, *(double *)&v33, *(double *)&v34, v11);
  return v20;
}

double md::StackLabelPart::updateForDisplay(md::StackLabelPart *this)
{
  uint64_t v2 = (char *)this + 632;
  uint64_t v3 = (uint64_t *)*((void *)this + 72);
  uint64_t v4 = (uint64_t *)*((void *)this + 73);
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    (*(void (**)(uint64_t))(*(void *)v5 + 112))(v5);
  }
  *(_OWORD *)(v2 + 28) = *(_OWORD *)v2;
  *((unsigned char *)this + 684) = *((unsigned char *)this + 656);
  double result = *((double *)this + 81);
  *(double *)(v2 + 44) = result;
  return result;
}

uint64_t md::StackLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  *(void *)(a1 + 640) = 0;
  uint64_t v11 = (*(void *)(a1 + 584) - *(void *)(a1 + 576)) >> 3;
  int v12 = v11 - 1;
  if (*(unsigned char *)(a1 + 691))
  {
    LODWORD(v11) = -1;
    int v13 = -1;
  }
  else
  {
    int v12 = 0;
    int v13 = 1;
  }
  a6.n128_u64[0] = 0;
  int v14 = v11;
  int v83 = v12;
  if (v11 != v12)
  {
    int v19 = v12 - v11;
    uint64_t v20 = 8 * v12;
    float v21 = 0.0;
    do
    {
      uint64_t v22 = *(void **)(*(void *)(a1 + 576) + v20);
      (*(void (**)(void *, uint64_t, float32x2_t *, float32x2_t *, __n128, __n128))(*v22 + 80))(v22, a2, a3, a4, a5, a6);
      uint64_t v23 = v22[3];
      a6.n128_u32[0] = *(_DWORD *)(v23 + 80);
      LODWORD(a7) = *(_DWORD *)(v23 + 72);
      float v24 = 0.0;
      a5.n128_u64[0] = 0;
      if (a6.n128_f32[0] >= *(float *)&a7)
      {
        float v25 = *(float *)(v23 + 84);
        float v26 = *(float *)(v23 + 76);
        if (v25 >= v26)
        {
          float v24 = a6.n128_f32[0] - *(float *)&a7;
          a5.n128_f32[0] = v25 - v26;
        }
      }
      if (*(unsigned char *)(a1 + 688))
      {
        a6.n128_f32[0] = *(float *)(a1 + 640) + v24;
        a5.n128_f32[0] = fmaxf(*(float *)(a1 + 644), a5.n128_f32[0]);
        *(_DWORD *)(a1 + 644) = a5.n128_u32[0];
      }
      else
      {
        *(float *)(a1 + 644) = (float)((float)(a5.n128_f32[0] + v21) + *(float *)(a1 + 644))
                             + (*(float (**)(void *, void))(*v22 + 280))(v22, 0);
        float v21 = (*(float (**)(void *, void))(*v22 + 288))(v22, 0);
        a5.n128_u32[0] = *(_DWORD *)(a1 + 640);
        a6.n128_f32[0] = fmaxf(a5.n128_f32[0], v24);
      }
      *(_DWORD *)(a1 + 640) = a6.n128_u32[0];
      v20 += 8 * v13;
      v19 += v13;
    }
    while (v19);
  }
  int v15 = *(unsigned __int8 *)(a1 + 688);
  uint64_t v16 = *(void *)(a1 + 584);
  uint64_t v17 = *(void *)(a1 + 576);
  if (*(unsigned char *)(a1 + 688))
  {
    a6.n128_f32[0] = a6.n128_f32[0] + (float)(*(float *)(a1 + 636) * (float)(unint64_t)(((v16 - v17) >> 3) - 1));
    *(_DWORD *)(a1 + 640) = a6.n128_u32[0];
    float v18 = *(float *)(a1 + 644);
  }
  else
  {
    float v18 = *(float *)(a1 + 644) + (float)(*(float *)(a1 + 632) * (float)(unint64_t)(((v16 - v17) >> 3) - 1));
    *(float *)(a1 + 644) = v18;
  }
  int v27 = v14;
  LODWORD(a7) = 0.5;
  float v28 = a6.n128_f32[0] * 0.5;
  *(float *)(a1 + 648) = a6.n128_f32[0] * 0.5;
  *(float *)(a1 + 652) = v18 * -0.5;
  if (*(unsigned char *)(a1 + 693) == 1)
  {
    uint64_t v29 = v16 - v17;
    if ((unint64_t)(v16 - v17) >= 9)
    {
      int v30 = v14 - v83;
      if (v14 == v83)
      {
        float32x2_t v31 = *a3;
        float32x2_t v32 = *a4;
        uint64_t v33 = 37;
        goto LABEL_55;
      }
      uint64_t v34 = (v29 >> 3) - 1;
      uint64_t v35 = 636;
      if (!v15) {
        uint64_t v35 = 632;
      }
      float v36 = *(float *)(a1 + v35);
      float v37 = (float)(unint64_t)v34;
      uint64_t v38 = 640;
      if (!v15) {
        uint64_t v38 = 644;
      }
      float v39 = *(float *)(a1 + v38) - (float)(v36 * v37);
      *(float *)&a7 = v36 * 0.5;
      if (v15)
      {
        int v40 = 0;
        uint64_t v41 = v17 + 8 * v83;
        float v42 = 0.0;
        float v43 = 3.4028e38;
        do
        {
          uint64_t v44 = *(float **)(*(void *)v41 + 24);
          float v45 = v44[20];
          float v46 = v44[18];
          float v47 = 0.0;
          if (v45 >= v46)
          {
            float v47 = 0.0;
            if (v44[21] >= v44[19]) {
              float v47 = v45 - v46;
            }
          }
          float v42 = v47 + v42;
          float v48 = vabds_f32(v42, vabds_f32(v39, v42));
          if (v48 < v43)
          {
            if (v40 >= 0) {
              int v49 = v40;
            }
            else {
              int v49 = -v40;
            }
            *(float *)(a1 + 648) = v42 + (float)(*(float *)&a7 * (float)((2 * v49) | 1u));
            float v43 = v48;
          }
          v40 += v13;
          v41 += 8 * v13;
        }
        while (v30 != v40);
      }
      else
      {
        uint64_t v50 = v17 + 8 * v83;
        float v51 = 0.0;
        float v52 = 3.4028e38;
        do
        {
          float32x4_t v53 = *(float **)(*(void *)v50 + 24);
          float v54 = 0.0;
          if (v53[20] >= v53[18])
          {
            float v55 = v53[21];
            float v56 = v53[19];
            if (v55 >= v56) {
              float v54 = v55 - v56;
            }
          }
          float v51 = v54 + v51;
          float v57 = vabds_f32(v51, vabds_f32(v39, v51));
          if (v57 < v52)
          {
            if (v15 >= 0) {
              int v58 = v15;
            }
            else {
              int v58 = -v15;
            }
            *(float *)(a1 + 652) = v51 + (float)(*(float *)&a7 * (float)((2 * v58) | 1u));
            float v52 = v57;
          }
          v15 += v13;
          v50 += 8 * v13;
        }
        while (v30 != v15);
      }
    }
  }
  float32x2_t v31 = *a3;
  float32x2_t v32 = *a4;
  uint64_t v87 = 0;
  if (v14 == v83)
  {
    uint64_t v33 = 37;
  }
  else
  {
    uint64_t v59 = a3;
    uint64_t v60 = 0;
    uint64_t v61 = v13;
    int v62 = v13;
    int v63 = v27 - (v83 + v13);
    do
    {
      unint64_t v66 = *(void **)(*(void *)(a1 + 576) + 8 * v83 + 8 * v60);
      md::StackLabelPart::childCoordinateForAlignment(a1, 0, (float *)(a1 + 632), v66, v60 == 0, *(unsigned __int8 *)(a1 + 656), (float *)&v87);
      v68.i32[1] = v67;
      float32x2_t v69 = vsub_f32(v68, *(float32x2_t *)(a1 + 648));
      if (*(unsigned char *)(a1 + 268))
      {
        float32x2_t v70 = *(float32x2_t *)(a1 + 88);
        float32x2_t v71 = vmul_n_f32(v70, v69.f32[0]);
        float32x2_t v72 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v70, v69, 1));
        v69.i32[0] = vsub_f32(v71, v72).u32[0];
        v69.i32[1] = vadd_f32(v71, v72).i32[1];
      }
      float32x2_t v86 = vadd_f32(*a4, v69);
      uint64_t v64 = (*(uint64_t (**)(void *, uint64_t, float32x2_t *, float32x2_t *))(*v66 + 80))(v66, a2, v59, &v86);
      BOOL v65 = v64 != 37 || v63 == 0;
      v63 -= v62;
      v60 += v61;
    }
    while (!v65);
    uint64_t v33 = v64;
    float v18 = *(float *)(a1 + 644);
    LODWORD(a7) = 0.5;
    float v28 = *(float *)(a1 + 640) * 0.5;
  }
LABEL_55:
  a6.n128_u32[0] = 0.5;
  float v73 = v18 * 0.5;
  float v74 = -v28;
  float v75 = -(float)(v18 * 0.5);
  float v84 = v28;
  float v85 = v75;
  if (*(unsigned char *)(a1 + 630))
  {
    md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
    uint64_t v76 = *(void *)(a1 + 232);
    uint64_t v77 = *(unsigned int *)(a1 + 248);
    *(_DWORD *)(a1 + 248) = v77 + 1;
    uint64_t v78 = (float *)(v76 + 16 * v77);
    *uint64_t v78 = v74;
    v78[1] = v85;
    v78[2] = v84;
    v78[3] = v73;
    a6.n128_u64[0] = *(void *)(a1 + 76);
    a7 = COERCE_DOUBLE(__PAIR64__(LODWORD(v84), a6.n128_u32[0]));
    *(float *)&a7 = v85;
    *(float *)(a1 + 72) = fminf(*(float *)(a1 + 72), v74);
    *(int8x8_t *)(a1 + 76) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(LODWORD(v84), a6.n128_u32[0]), (float32x2_t)__PAIR64__(a6.n128_u32[1], LODWORD(v85))), *(int8x8_t *)&a7, (int8x8_t)a6.n128_u64[0]);
    *(float *)(a1 + 84) = fmaxf(*(float *)(a1 + 84), v73);
  }
  else
  {
    uint64_t v79 = *(void **)(a1 + 232);
    if (v79)
    {
      free(v79);
      float v75 = v85;
      *(void *)(a1 + 232) = 0;
    }
    uint64_t v80 = *(void **)(a1 + 240);
    if (v80)
    {
      free(v80);
      float v75 = v85;
      *(void *)(a1 + 240) = 0;
    }
    *(float *)(a1 + 72) = v74;
    *(float *)(a1 + 76) = v75;
    *(float *)(a1 + 80) = v84;
    *(float *)(a1 + 84) = v73;
  }
  double v81 = COERCE_DOUBLE(vadd_f32(v32, v31));
  *(double *)(a1 + 280) = v81;
  *(double *)(a1 + 104) = v81;
  md::CollisionObject::setupShapeData(a1 + 72, v81, a6.n128_f64[0], a7);
  return v33;
}

void md::StackLabelPart::updateWithStyle(md::StackLabelPart *this, md::LabelManager *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 72);
  uint64_t v4 = (uint64_t *)*((void *)this + 73);
  if (v3 == v4)
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 4);
    float v6 = *(float *)(*v8 + 172);
  }
  else
  {
    float v6 = -3.4028e38;
    do
    {
      uint64_t v7 = *v3++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(void *)v7 + 72))(v7, a2);
      float v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(void *)v7 + 240))(v7));
    }
    while (v3 != v4);
    uint64_t v8 = (uint64_t *)*((void *)this + 4);
  }
  *((float *)this + 42) = v6;
  unsigned int v9 = *((unsigned __int8 *)this + 562);
  if (v9 > 0xC) {
    goto LABEL_20;
  }
  if (((1 << v9) & 0x1B80) != 0)
  {
    uint64_t v10 = *v8;
    uint64_t v11 = *(void *)(*v8 + 312);
    if (!v11)
    {
      int v12 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(*v8);
      uint64_t v11 = *v12;
      *(void *)(v10 + 312) = *v12;
    }
    int v13 = *(_DWORD *)(v11 + 32);
LABEL_11:
    *((_DWORD *)this + 159) = v13;
    goto LABEL_12;
  }
  if (v9 == 1)
  {
    uint64_t v16 = *v8;
    uint64_t v17 = *(void *)(*v8 + 272);
    if (!v17)
    {
      float v18 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
      uint64_t v17 = *v18;
      *(void *)(v16 + 272) = *v18;
    }
    int v13 = *(_DWORD *)(v17 + 48);
    goto LABEL_11;
  }
  if (v9 == 6)
  {
    uint64_t v14 = *v8;
    uint64_t v15 = *(void *)(*v8 + 272);
    if (v15)
    {
      *((_DWORD *)this + 159) = *(_DWORD *)(v15 + 44);
      int v13 = *(_DWORD *)(v15 + 40);
    }
    else
    {
      float v21 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
      uint64_t v22 = *v21;
      *(void *)(v14 + 272) = *v21;
      uint64_t v23 = *v8;
      uint64_t v24 = *(void *)(*v8 + 272);
      *((_DWORD *)this + 159) = *(_DWORD *)(v22 + 44);
      if (!v24)
      {
        float v25 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v23);
        uint64_t v24 = *v25;
        *(void *)(v23 + 272) = *v25;
      }
      int v13 = *(_DWORD *)(v24 + 40);
    }
  }
  else
  {
LABEL_20:
    uint64_t v19 = *v8;
    uint64_t v20 = *(void *)(*v8 + 272);
    if (v20)
    {
      *((_DWORD *)this + 159) = *(_DWORD *)(v20 + 36);
    }
    else
    {
      float v26 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
      uint64_t v27 = *v26;
      *(void *)(v19 + 272) = *v26;
      uint64_t v28 = *v8;
      uint64_t v20 = *(void *)(*v8 + 272);
      *((_DWORD *)this + 159) = *(_DWORD *)(v27 + 36);
      if (!v20)
      {
        uint64_t v29 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v28);
        uint64_t v20 = *v29;
        *(void *)(v28 + 272) = *v29;
      }
    }
    int v13 = *(_DWORD *)(v20 + 24);
  }
LABEL_12:
  *((_DWORD *)this + 158) = v13;
}

void md::StackLabelPart::~StackLabelPart(md::StackLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  unsigned __int8 v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unsigned __int8 v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

uint64_t md::StackLabelPart::StackLabelPart(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 1065353216;
  uint64_t v2 = result + 280;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = result;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 0;
  *(_OWORD *)(result + 72) = xmmword_1A28FC750;
  *(void *)(result + 88) = 1065353216;
  *(_DWORD *)(result + 96) = 1065353216;
  *(_OWORD *)(result + 100) = 0u;
  *(_DWORD *)(result + 116) = 0;
  *(_OWORD *)(result + 120) = xmmword_1A28FC750;
  *(_OWORD *)(result + 136) = xmmword_1A28FC750;
  *(_OWORD *)(result + 152) = xmmword_1A28FC750;
  *(_OWORD *)(result + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(result + 224) = 0;
  *(unsigned char *)(result + 200) = 0;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 257) = 0u;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(result + 232) = 0u;
  *(_OWORD *)(result + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(result + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(result + 312) = xmmword_1A28FC750;
  *(void *)(result + 328) = 1065353216;
  *(_DWORD *)(result + 336) = 1065353216;
  *(_DWORD *)(result + 356) = 0;
  *(_OWORD *)(result + 340) = 0u;
  *(_OWORD *)(result + 360) = xmmword_1A28FC750;
  *(_OWORD *)(result + 376) = xmmword_1A28FC750;
  *(_OWORD *)(result + 392) = xmmword_1A28FC750;
  *(_OWORD *)(result + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(result + 464) = 0;
  *(_OWORD *)(result + 424) = 0u;
  *(unsigned char *)(result + 440) = 0;
  *(_OWORD *)(result + 497) = 0u;
  *(_OWORD *)(result + 472) = 0u;
  *(_OWORD *)(result + 488) = 0u;
  *(_OWORD *)(result + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(result + 536) = 1065353216;
  *(_OWORD *)(result + 540) = 0u;
  *(_WORD *)(result + 556) = 512;
  *(unsigned char *)(result + 562) = 0;
  *(_DWORD *)(result + 558) = 0;
  *(_WORD *)(result + 563) = -1;
  *(_DWORD *)(result + 565) = 0;
  *(void *)double result = &unk_1EF538820;
  *(_OWORD *)(result + 576) = 0u;
  *(void *)(result + 592) = 0;
  int v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v8 = result;
    int v7 = a2;
    uint64_t v6 = result + 280;
    int v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    uint64_t v2 = v6;
    a2 = v7;
    int v5 = v4;
    double result = v8;
    if (v5) {
      operator new();
    }
  }
  *(void *)(result + 600) = *((void *)v3 + 91);
  *(unsigned char *)(result + 608) = 0;
  *(unsigned char *)(result + 616) = 0;
  *(_WORD *)(result + 628) = 1;
  *(unsigned char *)(result + 630) = 0;
  *(void *)double result = &unk_1EF534608;
  *(void *)(result + 632) = 0;
  *(void *)(result + 648) = 0;
  *(void *)(result + 640) = 0;
  *(void *)(result + 668) = 0;
  *(void *)(result + 676) = 0;
  *(void *)(result + 660) = 0;
  *(unsigned char *)(result + 688) = a2 == 1;
  *(unsigned char *)(result + 689) = 1;
  *(unsigned char *)(result + 656) = 0;
  *(unsigned char *)(result + 684) = 0;
  *(_DWORD *)(v2 + 410) = 0;
  return result;
}

uint64_t md::StackLabelPart::StackLabelPart(uint64_t result, int a2, int a3, int a4, char a5)
{
  *(_DWORD *)(result + 8) = 1065353216;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = result;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 0;
  *(_OWORD *)(result + 72) = xmmword_1A28FC750;
  *(void *)(result + 88) = 1065353216;
  *(_DWORD *)(result + 96) = 1065353216;
  *(_OWORD *)(result + 100) = 0u;
  *(_DWORD *)(result + 116) = 0;
  *(_OWORD *)(result + 120) = xmmword_1A28FC750;
  *(_OWORD *)(result + 136) = xmmword_1A28FC750;
  *(_OWORD *)(result + 152) = xmmword_1A28FC750;
  *(_OWORD *)(result + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(result + 224) = 0;
  *(unsigned char *)(result + 200) = 0;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 257) = 0u;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(result + 232) = 0u;
  *(_OWORD *)(result + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(result + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(result + 312) = xmmword_1A28FC750;
  *(void *)(result + 328) = 1065353216;
  *(_DWORD *)(result + 336) = 1065353216;
  *(_DWORD *)(result + 356) = 0;
  *(_OWORD *)(result + 340) = 0u;
  *(_OWORD *)(result + 360) = xmmword_1A28FC750;
  *(_OWORD *)(result + 376) = xmmword_1A28FC750;
  *(_OWORD *)(result + 392) = xmmword_1A28FC750;
  *(_OWORD *)(result + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(result + 464) = 0;
  *(_OWORD *)(result + 424) = 0u;
  *(unsigned char *)(result + 440) = 0;
  *(_OWORD *)(result + 497) = 0u;
  *(_OWORD *)(result + 472) = 0u;
  *(_OWORD *)(result + 488) = 0u;
  *(_OWORD *)(result + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(result + 536) = 1065353216;
  *(_OWORD *)(result + 540) = 0u;
  *(_WORD *)(result + 556) = 512;
  *(unsigned char *)(result + 562) = 0;
  *(_DWORD *)(result + 558) = 0;
  *(_WORD *)(result + 563) = -1;
  *(_DWORD *)(result + 565) = 0;
  *(void *)double result = &unk_1EF538820;
  *(_OWORD *)(result + 576) = 0u;
  *(void *)(result + 592) = 0;
  int v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v13 = result;
    int v12 = a3;
    int v10 = a4;
    char v11 = a5;
    int v9 = a2;
    int v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a2 = v9;
    a4 = v10;
    a5 = v11;
    a3 = v12;
    int v8 = v7;
    double result = v13;
    if (v8) {
      operator new();
    }
  }
  *(void *)(result + 600) = *((void *)v5 + 91);
  *(unsigned char *)(result + 608) = 0;
  *(unsigned char *)(result + 616) = 0;
  *(_WORD *)(result + 628) = 1;
  *(unsigned char *)(result + 630) = 0;
  *(void *)double result = &unk_1EF534608;
  *(void *)(result + 632) = 0;
  *(void *)(result + 648) = 0;
  *(void *)(result + 640) = 0;
  *(void *)(result + 668) = 0;
  *(void *)(result + 676) = 0;
  *(void *)(result + 660) = 0;
  *(unsigned char *)(result + 688) = a2 == 1;
  *(unsigned char *)(result + 689) = 1;
  *(unsigned char *)(result + 690) = a4 == 1;
  *(unsigned char *)(result + 691) = 0;
  *(unsigned char *)(result + 692) = a3 == 5;
  *(unsigned char *)(result + 693) = a5;
  if (a3 == 5) {
    char v6 = 2;
  }
  else {
    char v6 = a3;
  }
  *(unsigned char *)(result + 656) = v6;
  *(unsigned char *)(result + 684) = v6;
  return result;
}

uint64_t md::PuckLogic::debugConsoleString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v123);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"NavigationPuck: \n", 17);
  id v8 = *(id *)(v7 + 48);
  if (v8)
  {
    id v3 = *(id *)(v7 + 48);
    [v3 puck];
  }
  int v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  if (v8) {

  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"NavigationPuck.enabled: \n", 25);
  id v10 = *(id *)(v7 + 48);
  if (v10)
  {
    id v3 = *(id *)(v7 + 48);
    if ([v3 puck])
    {
      id v4 = *(id *)(v7 + 48);
      [v4 puck];
      int v11 = 1;
    }
    else
    {
      int v11 = 0;
    }
  }
  else
  {
    int v11 = 0;
  }
  int v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  if (v11) {

  }
  if (v10) {
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Entities exist: \n", 17);
  }
  if (*(unsigned char *)(a1 + 481)) {
    uint64_t v13 = "true";
  }
  else {
    uint64_t v13 = "false";
  }
  if (*(unsigned char *)(a1 + 481)) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 5;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Entities injected: \n", 20);
  if (*(unsigned char *)(a1 + 482)) {
    uint64_t v15 = "true";
  }
  else {
    uint64_t v15 = "false";
  }
  if (*(unsigned char *)(a1 + 482)) {
    uint64_t v16 = 4;
  }
  else {
    uint64_t v16 = 5;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"CameraType globe: \n", 19);
  if (*(unsigned char *)(a1 + 483)) {
    uint64_t v17 = "true";
  }
  else {
    uint64_t v17 = "false";
  }
  if (*(unsigned char *)(a1 + 483)) {
    uint64_t v18 = 4;
  }
  else {
    uint64_t v18 = 5;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck asset available: \n", 23);
  if (*(unsigned char *)(a1 + 484)) {
    uint64_t v19 = "true";
  }
  else {
    uint64_t v19 = "false";
  }
  if (*(unsigned char *)(a1 + 484)) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 5;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Injectable tiles in view: \n", 27);
  if (*(unsigned char *)(a1 + 485)) {
    float v21 = "true";
  }
  else {
    float v21 = "false";
  }
  if (*(unsigned char *)(a1 + 485)) {
    uint64_t v22 = 4;
  }
  else {
    uint64_t v22 = 5;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v21, v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"IDs found: \n", 12);
  if (*(unsigned char *)(a1 + 487)) {
    uint64_t v23 = "true";
  }
  else {
    uint64_t v23 = "false";
  }
  if (*(unsigned char *)(a1 + 487)) {
    uint64_t v24 = 4;
  }
  else {
    uint64_t v24 = 5;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck Position: [\n\t", 18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"x: ", 3);
  float v25 = (void *)std::ostream::operator<<();
  float v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n\t", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"y: ", 3);
  uint64_t v27 = (void *)std::ostream::operator<<();
  uint64_t v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n\t", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"z: ", 3);
  uint64_t v29 = (void *)std::ostream::operator<<();
  int v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"\n\t", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)"z (meters): ", 12);
  float32x2_t v31 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"]\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck facing camera: ", 20);
  float32x2_t v32 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck occlusion behavior: ", 25);
  int v33 = *(unsigned __int8 *)(a1 + 192);
  if (v33 == 2)
  {
    uint64_t v34 = 8;
    char v122 = 8;
    strcpy(__p, "Occluded");
  }
  else if (v33 == 1)
  {
    uint64_t v34 = 11;
    char v122 = 11;
    strcpy(__p, "NonOccluded");
  }
  else if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v34 = 0;
    char v122 = 0;
    __p[0] = 0;
  }
  else
  {
    uint64_t v34 = 17;
    char v122 = 17;
    strcpy(__p, "PartiallyOccluded");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)__p, v34);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  if (v122 < 0) {
    operator delete(*(void **)__p);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck visibility: ", 17);
  if (*(unsigned char *)(a1 + 269) == 1)
  {
    uint64_t v35 = 6;
    char v122 = 6;
    strcpy(__p, "Always");
  }
  else if (*(unsigned char *)(a1 + 269))
  {
    uint64_t v35 = 0;
    char v122 = 0;
    __p[0] = 0;
  }
  else
  {
    uint64_t v35 = 4;
    char v122 = 4;
    strcpy(__p, "Auto");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)__p, v35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  if (v122 < 0) {
    operator delete(*(void **)__p);
  }
  id v36 = *(id *)(v7 + 48);
  if (v36)
  {
    float v37 = v36;
    uint64_t v38 = [*(id *)(v7 + 48) puck];

    if (v38)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck course angle (radians): ", 29);
      id v39 = *(id *)(v7 + 48);
      [v39 puck];
      int v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
    }
  }
  if (*(unsigned char *)(a1 + 384))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck Bounds: [\n\t", 16);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Min: [\n\t\t", 9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"x: ", 3);
    uint64_t v41 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"y: ", 3);
    float v42 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"z: ", 3);
    float v43 = (void *)std::ostream::operator<<();
    uint64_t v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)"\n\t]\n\t", 5);
    float v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"Max: [\n\t\t", 9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"x: ", 3);
    float v46 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)"y: ", 3);
    float v47 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)"z: ", 3);
    float v48 = (void *)std::ostream::operator<<();
    int v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)"\n\t]\n", 4);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n]\n", 3);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Billboard-factor: ", 18);
  uint64_t v50 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
  uint64_t v120 = a3;
  float v51 = *(int8x8_t **)(a1 + 288);
  if (v51)
  {
    float v52 = (void *)gdc::Registry::storage<md::components::OcclusionType>(*(int8x8_t **)(a1 + 288));
    uint64_t v53 = gdc::Registry::storage<md::components::Visibility>(v51);
    float v54 = (void *)v53;
    uint64_t v55 = v53 + 32;
    float v57 = (unint64_t *)v52[7];
    float v56 = (uint64_t *)v52[8];
    if (*(void *)(v53 + 64) - *(void *)(v53 + 56) >= (unint64_t)((char *)v56 - (char *)v57)) {
      int v58 = v52 + 4;
    }
    else {
      int v58 = (void *)(v53 + 32);
    }
    if (v52 + 4 == v58 && v57 != (unint64_t *)v56)
    {
      uint64_t v59 = (unsigned char *)v52[10];
      do
      {
        unint64_t v60 = *((unsigned int *)v57 + 1);
        uint64_t v61 = v54[4];
        unint64_t v62 = (v54[5] - v61) >> 3;
        if (v60 >> 7 >= v62) {
          goto LABEL_78;
        }
        uint64_t v63 = *(void *)(v61 + 8 * (v60 >> 7));
        if (!v63) {
          goto LABEL_78;
        }
        unint64_t v64 = *(unsigned __int16 *)(v63 + 2 * (v60 & 0x7F));
        uint64_t v66 = v54[7];
        uint64_t v65 = v54[8];
        unint64_t v67 = (v65 - v66) >> 3;
        if (v67 <= v64) {
          goto LABEL_78;
        }
        uint64_t v68 = v66 + 8 * v64;
        if (v68 == v65 || *(_DWORD *)(v68 + 4) != v60) {
          goto LABEL_78;
        }
        unint64_t v70 = *v57;
        unint64_t v71 = *v57 >> 39;
        if (v71 < v62
          && (uint64_t v72 = *(void *)(v61 + 8 * v71)) != 0
          && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v70) & 0x7F)), v67 > v73)
          && ((v74 = HIDWORD(v70), uint64_t v75 = v66 + 8 * v73, v75 != v65)
            ? (BOOL v76 = *(_DWORD *)(v75 + 4) == v74)
            : (BOOL v76 = 0),
              v76))
        {
          uint64_t v77 = (unsigned char *)(v54[10] + v73);
          int v78 = *v59;
          if (!*v59)
          {
LABEL_98:
            uint64_t v79 = "Non-occluded Puck: ";
            uint64_t v80 = 19;
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v77 = (unsigned char *)v54[11];
          int v78 = *v59;
          if (!*v59) {
            goto LABEL_98;
          }
        }
        if (v78 == 1)
        {
          uint64_t v79 = "Occluded Puck: ";
          uint64_t v80 = 15;
LABEL_99:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v79, v80);
          if (*v77) {
            double v81 = "visible";
          }
          else {
            double v81 = "not visible";
          }
          if (*v77) {
            uint64_t v82 = 7;
          }
          else {
            uint64_t v82 = 11;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v81, v82);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
        }
LABEL_78:
        ++v59;
        ++v57;
      }
      while (v57 != (unint64_t *)v56);
    }
    if ((void *)v55 == v58)
    {
      float32x4_t v94 = (unint64_t *)v54[7];
      float32x4_t v95 = (uint64_t *)v54[8];
      if (v94 != (unint64_t *)v95)
      {
        float32x4_t v96 = (unsigned char *)v54[10];
        while (1)
        {
          unint64_t v97 = *((unsigned int *)v94 + 1);
          uint64_t v98 = v52[4];
          unint64_t v99 = (v52[5] - v98) >> 3;
          if (v97 >> 7 >= v99) {
            goto LABEL_132;
          }
          uint64_t v100 = *(void *)(v98 + 8 * (v97 >> 7));
          if (!v100) {
            goto LABEL_132;
          }
          unint64_t v101 = *(unsigned __int16 *)(v100 + 2 * (v97 & 0x7F));
          uint64_t v103 = v52[7];
          uint64_t v102 = v52[8];
          unint64_t v104 = (v102 - v103) >> 3;
          if (v104 <= v101) {
            goto LABEL_132;
          }
          uint64_t v105 = v103 + 8 * v101;
          if (v105 == v102 || *(_DWORD *)(v105 + 4) != v97) {
            goto LABEL_132;
          }
          if ((unint64_t v107 = *v94, v108 = *v94 >> 39, v108 < v99)
            && (uint64_t v109 = *(void *)(v98 + 8 * v108)) != 0
            && (unint64_t v110 = *(unsigned __int16 *)(v109 + 2 * (HIDWORD(v107) & 0x7F)), v104 > v110)
            && ((unint64_t v111 = HIDWORD(v107), v112 = v103 + 8 * v110, v112 != v102)
              ? (BOOL v113 = *(_DWORD *)(v112 + 4) == v111)
              : (BOOL v113 = 0),
                v113))
          {
            int v114 = (unsigned __int8 *)(v52[10] + v110);
          }
          else
          {
            int v114 = (unsigned __int8 *)v52[11];
          }
          int v115 = *v114;
          if (v115 == 1) {
            break;
          }
          if (!v115)
          {
            int v116 = "Non-occluded Puck: ";
            uint64_t v117 = 19;
LABEL_153:
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v116, v117);
            if (*v96) {
              uint64_t v118 = "visible";
            }
            else {
              uint64_t v118 = "not visible";
            }
            if (*v96) {
              uint64_t v119 = 7;
            }
            else {
              uint64_t v119 = 11;
            }
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v118, v119);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
          }
LABEL_132:
          ++v96;
          if (++v94 == (unint64_t *)v95) {
            goto LABEL_107;
          }
        }
        int v116 = "Occluded Puck: ";
        uint64_t v117 = 15;
        goto LABEL_153;
      }
    }
  }
LABEL_107:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"Puck Render Mode: ", 18);
  int v83 = v120;
  if (*(unsigned char *)(a1 + 480))
  {
    if (*(unsigned char *)(a1 + 480) != 1) {
      goto LABEL_112;
    }
    float v84 = "3D";
  }
  else
  {
    float v84 = "2D";
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)v84, 2);
LABEL_112:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
  if ((v131 & 0x10) != 0)
  {
    unint64_t v86 = v130;
    if (v130 < v127)
    {
      unint64_t v130 = v127;
      unint64_t v86 = v127;
    }
    uint64_t v87 = (const void **)&v126;
  }
  else
  {
    if ((v131 & 8) == 0)
    {
      size_t v85 = 0;
      *((unsigned char *)v120 + 23) = 0;
      goto LABEL_127;
    }
    uint64_t v87 = (const void **)v125;
    unint64_t v86 = v125[2];
  }
  float32x4_t v88 = *v87;
  size_t v85 = v86 - (void)*v87;
  if (v85 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v85 >= 0x17)
  {
    uint64_t v89 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17) {
      uint64_t v89 = v85 | 7;
    }
    uint64_t v90 = v89 + 1;
    unint64_t v91 = operator new(v89 + 1);
    v120[1] = v85;
    v120[2] = v90 | 0x8000000000000000;
    void *v120 = v91;
    int v83 = v91;
    goto LABEL_126;
  }
  *((unsigned char *)v120 + 23) = v85;
  if (v85) {
LABEL_126:
  }
    memmove(v83, v88, v85);
LABEL_127:
  *((unsigned char *)v83 + v85) = 0;
  v123[0] = *MEMORY[0x1E4FBA408];
  uint64_t v92 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v123 + *(void *)(v123[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v124[0] = v92;
  v124[1] = MEMORY[0x1E4FBA470] + 16;
  if (v129 < 0) {
    operator delete(v128);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v132);
}

void sub_1A1F3C9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::RenderableInjected>(int8x8_t *a1)
{
  uint64_t v10 = 0x2D19D14B1A606548;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2D19D14B1A606548;
    if (*(void *)&v1 <= 0x2D19D14B1A606548uLL) {
      uint64_t v3 = 0x2D19D14B1A606548uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2D19D14B1A606548;
  }
  id v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2D19D14B1A606548)
      {
        if (v5[2] == 0x2D19D14B1A606548) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2D19D14B1A606548) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2D19D14B1A606548) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F3CCA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::StyleManagerEvent)>::~function(void *a1)
{
  uint8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::updateAndLogChange<BOOL>(unsigned char *a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*a1 != a2)
  {
    if (GEOGetVectorKitPuckLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPuckLogicLog(void)::onceToken, &__block_literal_global_5070);
    }
    uint64_t v6 = GEOGetVectorKitPuckLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitPuckLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      int v7 = *a1;
      int v8 = 136315650;
      uint64_t v9 = a3;
      __int16 v10 = 1024;
      int v11 = v7;
      __int16 v12 = 1024;
      int v13 = a2;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_INFO, "State %s changed from %d to %d", (uint8_t *)&v8, 0x18u);
    }
    *a1 = a2;
  }
}

uint64_t md::PuckStyleInfo::update(uint64_t a1, uint64_t a2, id *a3, uint64_t *a4, uint64_t *a5, float a6)
{
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorLinear, (uint64_t)&md::kDefaultArrowColor);
  }
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorStaleLinear, (uint64_t)&md::kDefaultArrowColorStale);
  }
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultCircleColorLinear, (uint64_t)&md::kDefaultCircleColor);
  }
  uint64_t v12 = *a5;
  int v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v216 = v12;
  long long v217 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v233, v12, (uint64_t)v13);
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v234) {
      goto LABEL_9;
    }
LABEL_21:
    int v20 = 0;
    *(_DWORD *)(a1 + 8) = 1065353216;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v234) {
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v14 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v15 = 23;
  }
  else {
    unsigned int v15 = (int)a6;
  }
  uint64_t v16 = *(float **)v14;
  if (!*(void *)v14)
  {
    BOOL v18 = 0;
    goto LABEL_23;
  }
  float v17 = *v16;
  BOOL v18 = *v16 == 1.0;
  if (!*(unsigned char *)(v14 + 10) || (v17 != 0.0 ? (BOOL v19 = v17 == 1.0) : (BOOL v19 = 1), v19))
  {
LABEL_23:
    unsigned int v21 = *(unsigned __int8 *)(v14 + v18 + 11);
    if (v21 != 2) {
      goto LABEL_26;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0xF7u, v15, 0)) {
    goto LABEL_27;
  }
  unsigned int v21 = 1;
LABEL_26:
  int hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0xF7u, v15, v21);
  float v23 = 1.0;
  if (hasValueForKeyAtZAtEnd)
  {
LABEL_27:
    if (v16)
    {
      float v24 = *v16;
      BOOL v25 = *v16 == 1.0;
      if (*(unsigned char *)(v14 + 10))
      {
        if (v24 != 0.0 && v24 != 1.0)
        {
LABEL_37:
          LOBYTE(v216) = 1;
          LOBYTE(v229) = 1;
          float v28 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v14, 0xF7u, v15, 0, &v216);
          float v23 = v28
              + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v14, 0xF7u, v15, 1u, &v229)- v28)* v24);
          goto LABEL_39;
        }
      }
    }
    else
    {
      BOOL v25 = 0;
    }
    unsigned int v27 = *(unsigned __int8 *)(v14 + v25 + 11);
    float v24 = 0.0;
    if (v27 != 2)
    {
      float v23 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v14, 0xF7u, v15, v27, 0);
      goto LABEL_39;
    }
    goto LABEL_37;
  }
LABEL_39:
  int v20 = v234;
  *(float *)(a1 + 8) = v23;
  if (!v20) {
    goto LABEL_53;
  }
  uint64_t v29 = *(void *)(v233[0] + 24);
  int v30 = *(float **)v29;
  if (*(void *)v29
    && (float v31 = *v30, LODWORD(v30) = *v30 == 1.0, *(unsigned char *)(v29 + 10))
    && (v31 != 0.0 ? (BOOL v32 = v31 == 1.0) : (BOOL v32 = 1), !v32)
    || (unsigned int v33 = *(unsigned __int8 *)(v29 + v30 + 11), v33 == 2))
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0x18Fu, v15, 0)) {
      goto LABEL_51;
    }
    unsigned int v33 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x18Fu, v15, v33))
  {
LABEL_53:
    *(_OWORD *)(a1 + 16) = md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultCircleColorLinear;
    if (!v20) {
      goto LABEL_70;
    }
    goto LABEL_54;
  }
LABEL_51:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v216, v29, 0x18Fu, v15, 2u, 0);
  int v20 = v234;
  *(float32x4_t *)(a1 + 16) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v216)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v20)
  {
LABEL_70:
    *(_OWORD *)(a1 + 48) = md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorStaleLinear;
    if (!v20) {
      goto LABEL_87;
    }
    goto LABEL_71;
  }
LABEL_54:
  uint64_t v34 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v35 = 23;
  }
  else {
    unsigned int v35 = (int)a6;
  }
  id v36 = *(float **)v34;
  if (*(void *)v34
    && (float v37 = *v36, LODWORD(v36) = *v36 == 1.0, *(unsigned char *)(v34 + 10))
    && (v37 != 0.0 ? (BOOL v38 = v37 == 1.0) : (BOOL v38 = 1), !v38)
    || (unsigned int v39 = *(unsigned __int8 *)(v34 + v36 + 11), v39 == 2))
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0xF9u, v35, 0)) {
      goto LABEL_68;
    }
    unsigned int v39 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v34, 0xF9u, v35, v39)) {
    goto LABEL_70;
  }
LABEL_68:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v216, v34, 0xF9u, v35, 2u, 0);
  int v20 = v234;
  *(float32x4_t *)(a1 + 48) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v216)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v20) {
    goto LABEL_87;
  }
LABEL_71:
  uint64_t v40 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v41 = 23;
  }
  else {
    unsigned int v41 = (int)a6;
  }
  float v42 = *(float **)v40;
  if (*(void *)v40
    && (float v43 = *v42, LODWORD(v42) = *v42 == 1.0, *(unsigned char *)(v40 + 10))
    && (v43 != 0.0 ? (BOOL v44 = v43 == 1.0) : (BOOL v44 = 1), !v44)
    || (unsigned int v45 = *(unsigned __int8 *)(v40 + v42 + 11), v45 == 2))
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0xF8u, v41, 0)) {
      goto LABEL_85;
    }
    unsigned int v45 = 1;
  }
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v40, 0xF8u, v41, v45))
  {
LABEL_87:
    *(_OWORD *)(a1 + 32) = md::PuckStyleInfo::update(float,md::NavigationContext const&,md::SharedResourcesContext const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &)::kDefaultArrowColorLinear;
    if (!v20) {
      goto LABEL_86;
    }
    goto LABEL_88;
  }
LABEL_85:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v216, v40, 0xF8u, v41, 2u, 0);
  int v46 = v234;
  *(float32x4_t *)(a1 + 32) = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v216)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v46)
  {
LABEL_86:
    *(_DWORD *)(a1 + 12) = 1065353216;
LABEL_135:
    float v71 = *(float *)a1;
    goto LABEL_136;
  }
LABEL_88:
  uint64_t v47 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v48 = 23;
  }
  else {
    unsigned int v48 = (int)a6;
  }
  int v49 = *(float **)v47;
  if (!*(void *)v47)
  {
    BOOL v51 = 0;
    goto LABEL_100;
  }
  float v50 = *v49;
  BOOL v51 = *v49 == 1.0;
  if (!*(unsigned char *)(v47 + 10) || (v50 != 0.0 ? (BOOL v52 = v50 == 1.0) : (BOOL v52 = 1), v52))
  {
LABEL_100:
    unsigned int v53 = *(unsigned __int8 *)(v47 + v51 + 11);
    if (v53 != 2) {
      goto LABEL_103;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0xF6u, v48, 0)) {
    goto LABEL_104;
  }
  unsigned int v53 = 1;
LABEL_103:
  int v54 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v47, 0xF6u, v48, v53);
  float v55 = 1.0;
  if (!v54) {
    goto LABEL_116;
  }
LABEL_104:
  if (v49)
  {
    float v56 = *v49;
    BOOL v57 = *v49 == 1.0;
    if (*(unsigned char *)(v47 + 10))
    {
      if (v56 != 0.0 && v56 != 1.0) {
        goto LABEL_114;
      }
    }
  }
  else
  {
    BOOL v57 = 0;
  }
  unsigned int v59 = *(unsigned __int8 *)(v47 + v57 + 11);
  float v56 = 0.0;
  if (v59 == 2)
  {
LABEL_114:
    LOBYTE(v216) = 1;
    LOBYTE(v229) = 1;
    float v60 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v47, 0xF6u, v48, 0, &v216);
    float v55 = v60
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v47, 0xF6u, v48, 1u, &v229)- v60)* v56);
    goto LABEL_116;
  }
  float v55 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v47, 0xF6u, v48, v59, 0);
LABEL_116:
  int v61 = v234;
  *(float *)(a1 + 12) = v55;
  if (!v61) {
    goto LABEL_135;
  }
  unint64_t v62 = *(void *)(v233[0] + 24);
  uint64_t v63 = *(float **)v62;
  if (!*(void *)v62)
  {
    BOOL v65 = 0;
    goto LABEL_126;
  }
  float v64 = *v63;
  BOOL v65 = *v63 == 1.0;
  if (!*(unsigned char *)(v62 + 10) || (v64 != 0.0 ? (BOOL v66 = v64 == 1.0) : (BOOL v66 = 1), v66))
  {
LABEL_126:
    unsigned int v67 = *(unsigned __int8 *)(v62 + v65 + 11);
    if (v67 != 2) {
      goto LABEL_129;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0xFAu, v48, 0)) {
    goto LABEL_130;
  }
  unsigned int v67 = 1;
LABEL_129:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0xFAu, v48, v67)) {
    goto LABEL_135;
  }
LABEL_130:
  float v68 = fminf(fmaxf(a6, 0.0), 23.0);
  if (v63)
  {
    float v69 = *v63;
    BOOL v70 = *v63 == 1.0;
    if (*(unsigned char *)(v62 + 10) && v69 != 0.0 && v69 != 1.0) {
      goto LABEL_235;
    }
  }
  else
  {
    BOOL v70 = 0;
  }
  unsigned int v130 = *(unsigned __int8 *)(v62 + v70 + 11);
  float v69 = 0.0;
  if (v130 == 2)
  {
LABEL_235:
    LOBYTE(v216) = 1;
    LOBYTE(v229) = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v62, 0xFAu, 0, (BOOL *)&v216, v68);
    float v132 = v131;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v62, 0xFAu, 1u, (BOOL *)&v229, v68);
    float v71 = v132 + (float)((float)(v133 - v132) * v69);
    goto LABEL_136;
  }
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v62, 0xFAu, v130, 0, v68);
LABEL_136:
  *(float *)a1 = v71;
  if (!v234)
  {
LABEL_161:
    float v82 = *(float *)(a1 + 4);
    goto LABEL_166;
  }
  uint64_t v72 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v73 = 23;
  }
  else {
    unsigned int v73 = (int)a6;
  }
  unint64_t v74 = *(float **)v72;
  if (!*(void *)v72)
  {
    BOOL v76 = 0;
    goto LABEL_149;
  }
  float v75 = *v74;
  BOOL v76 = *v74 == 1.0;
  if (!*(unsigned char *)(v72 + 10) || (v75 != 0.0 ? (BOOL v77 = v75 == 1.0) : (BOOL v77 = 1), v77))
  {
LABEL_149:
    unsigned int v78 = *(unsigned __int8 *)(v72 + v76 + 11);
    if (v78 != 2) {
      goto LABEL_152;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0xFBu, v73, 0)) {
    goto LABEL_153;
  }
  unsigned int v78 = 1;
LABEL_152:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v72, 0xFBu, v73, v78)) {
    goto LABEL_161;
  }
LABEL_153:
  if (v74)
  {
    float v79 = *v74;
    BOOL v80 = *v74 == 1.0;
    if (*(unsigned char *)(v72 + 10))
    {
      if (v79 != 0.0 && v79 != 1.0) {
        goto LABEL_164;
      }
    }
  }
  else
  {
    BOOL v80 = 0;
  }
  unsigned int v83 = *(unsigned __int8 *)(v72 + v80 + 11);
  float v79 = 0.0;
  if (v83 == 2)
  {
LABEL_164:
    LOBYTE(v216) = 1;
    LOBYTE(v229) = 1;
    float v84 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0xFBu, v73, 0, &v216);
    float v82 = v84
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0xFBu, v73, 1u, &v229)- v84)* v79);
    goto LABEL_166;
  }
  float v82 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0xFBu, v73, v83, 0);
LABEL_166:
  *(float *)(a1 + 4) = v82;
  if (!v234)
  {
    *(_DWORD *)(a1 + 68) = 0;
LABEL_199:
    *(_WORD *)(a1 + 72) = 0;
LABEL_200:
    float v103 = 1.2;
    goto LABEL_201;
  }
  uint64_t v85 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v86 = 23;
  }
  else {
    unsigned int v86 = (int)a6;
  }
  uint64_t v87 = *(float **)v85;
  if (!*(void *)v85)
  {
    BOOL v89 = 0;
    goto LABEL_180;
  }
  float v88 = *v87;
  BOOL v89 = *v87 == 1.0;
  if (!*(unsigned char *)(v85 + 10) || (v88 != 0.0 ? (BOOL v90 = v88 == 1.0) : (BOOL v90 = 1), v90))
  {
LABEL_180:
    unsigned int v91 = *(unsigned __int8 *)(v85 + v89 + 11);
    if (v91 != 2) {
      goto LABEL_183;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0x1B9u, v86, 0)) {
    goto LABEL_184;
  }
  unsigned int v91 = 1;
LABEL_183:
  int v92 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v85, 0x1B9u, v86, v91);
  float v93 = 0.0;
  if (!v92) {
    goto LABEL_193;
  }
LABEL_184:
  if (v87)
  {
    float v94 = *v87;
    BOOL v95 = *v87 == 1.0;
    if (*(unsigned char *)(v85 + 10) && v94 != 0.0 && v94 != 1.0) {
      goto LABEL_191;
    }
  }
  else
  {
    BOOL v95 = 0;
  }
  unsigned int v96 = *(unsigned __int8 *)(v85 + v95 + 11);
  float v94 = 0.0;
  if (v96 == 2)
  {
LABEL_191:
    LOBYTE(v216) = 1;
    LOBYTE(v229) = 1;
    float v97 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x1B9u, v86, 0, &v216);
    float v93 = v97
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x1B9u, v86, 1u, &v229)- v97)* v94);
    goto LABEL_193;
  }
  float v93 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x1B9u, v86, v96, 0);
LABEL_193:
  int v98 = v234;
  *(float *)(a1 + 68) = v93;
  if (!v98) {
    goto LABEL_199;
  }
  uint64_t v99 = *(void *)(v233[0] + 24);
  uint64_t v100 = *(float **)v99;
  if (!*(void *)v99)
  {
    BOOL v102 = 0;
    goto LABEL_223;
  }
  float v101 = *v100;
  BOOL v102 = *v100 == 1.0;
  if (!*(unsigned char *)(v99 + 10) || v101 == 0.0 || v101 == 1.0)
  {
LABEL_223:
    unsigned int v127 = *(unsigned __int8 *)(v99 + v102 + 11);
    if (v127 != 2) {
      goto LABEL_226;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v99, 0x1C4u, v86, 0)) {
    goto LABEL_227;
  }
  unsigned int v127 = 1;
LABEL_226:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v99, 0x1C4u, v86, v127) & 1) == 0)
  {
    *(unsigned char *)(a1 + 72) = 0;
    goto LABEL_244;
  }
LABEL_227:
  if (v100)
  {
    float v128 = *v100;
    BOOL v129 = *v100 == 1.0;
    if (*(unsigned char *)(v99 + 10) && v128 != 0.0 && v128 != 1.0) {
      goto LABEL_238;
    }
  }
  else
  {
    BOOL v129 = 0;
  }
  unsigned int v134 = *(unsigned __int8 *)(v99 + v129 + 11);
  float v128 = 0.0;
  if (v134 != 2)
  {
    int v136 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v99, 0x1C4u, v86, v134, 0);
    goto LABEL_243;
  }
LABEL_238:
  LOBYTE(v216) = 1;
  LOBYTE(v229) = 1;
  int v135 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v99, 0x1C4u, v86, 0, &v216);
  int v136 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v99, 0x1C4u, v86, 1u, &v229);
  if (v128 < 1.0) {
    LOBYTE(v136) = v135;
  }
LABEL_243:
  int v137 = v234;
  *(unsigned char *)(a1 + 72) = v136;
  if (!v137)
  {
    *(unsigned char *)(a1 + 73) = 0;
    goto LABEL_200;
  }
LABEL_244:
  uint64_t v138 = *(void *)(v233[0] + 24);
  uint64_t v139 = *(float **)v138;
  if (!*(void *)v138)
  {
    BOOL v141 = 0;
    goto LABEL_250;
  }
  float v140 = *v139;
  BOOL v141 = *v139 == 1.0;
  if (!*(unsigned char *)(v138 + 10) || v140 == 0.0 || v140 == 1.0)
  {
LABEL_250:
    unsigned int v142 = *(unsigned __int8 *)(v138 + v141 + 11);
    if (v142 != 2) {
      goto LABEL_253;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v138, 0x1C5u, v86, 0)) {
    goto LABEL_254;
  }
  unsigned int v142 = 1;
LABEL_253:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v138, 0x1C5u, v86, v142) & 1) == 0)
  {
    *(unsigned char *)(a1 + 73) = 0;
    goto LABEL_365;
  }
LABEL_254:
  if (v139)
  {
    float v143 = *v139;
    BOOL v144 = *v139 == 1.0;
    if (*(unsigned char *)(v138 + 10) && v143 != 0.0 && v143 != 1.0) {
      goto LABEL_360;
    }
  }
  else
  {
    BOOL v144 = 0;
  }
  unsigned int v201 = *(unsigned __int8 *)(v138 + v144 + 11);
  float v143 = 0.0;
  if (v201 != 2)
  {
    int v203 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v138, 0x1C5u, v86, v201, 0);
    goto LABEL_364;
  }
LABEL_360:
  LOBYTE(v216) = 1;
  LOBYTE(v229) = 1;
  int v202 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v138, 0x1C5u, v86, 0, &v216);
  int v203 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v138, 0x1C5u, v86, 1u, &v229);
  if (v143 < 1.0) {
    LOBYTE(v203) = v202;
  }
LABEL_364:
  int v204 = v234;
  *(unsigned char *)(a1 + 73) = v203;
  if (!v204) {
    goto LABEL_200;
  }
LABEL_365:
  uint64_t v205 = *(void *)(v233[0] + 24);
  if ((int)a6 >= 0x17) {
    unsigned int v206 = 23;
  }
  else {
    unsigned int v206 = (int)a6;
  }
  unint64_t v207 = *(float **)v205;
  if (!*(void *)v205)
  {
    BOOL v209 = 0;
    goto LABEL_374;
  }
  float v208 = *v207;
  BOOL v209 = *v207 == 1.0;
  if (!*(unsigned char *)(v205 + 10) || v208 == 0.0 || v208 == 1.0)
  {
LABEL_374:
    unsigned int v210 = *(unsigned __int8 *)(v205 + v209 + 11);
    if (v210 != 2) {
      goto LABEL_377;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v233[0] + 24), 0x1A1u, v206, 0)) {
    goto LABEL_378;
  }
  unsigned int v210 = 1;
LABEL_377:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v205, 0x1A1u, v206, v210)) {
    goto LABEL_200;
  }
LABEL_378:
  if (v207)
  {
    float v211 = *v207;
    BOOL v212 = *v207 == 1.0;
    if (*(unsigned char *)(v205 + 10) && v211 != 0.0 && v211 != 1.0) {
      goto LABEL_385;
    }
  }
  else
  {
    BOOL v212 = 0;
  }
  unsigned int v213 = *(unsigned __int8 *)(v205 + v212 + 11);
  float v211 = 0.0;
  if (v213 == 2)
  {
LABEL_385:
    LOBYTE(v216) = 1;
    LOBYTE(v229) = 1;
    float v214 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v205, 0x1A1u, v206, 0, &v216);
    float v103 = v214
         + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v205, 0x1A1u, v206, 1u, &v229)- v214)* v211);
    goto LABEL_201;
  }
  float v103 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v205, 0x1A1u, v206, v213, 0);
LABEL_201:
  id v104 = *(id *)(a2 + 40);
  uint64_t v105 = [v104 routeInfo];
  uint64_t v106 = [v105 route];
  unsigned __int16 v107 = [v106 transportType];

  uint64_t v229 = 0;
  unsigned int v230 = 0;
  unint64_t v231 = 0;
  uint64_t v109 = (gss::Allocator *)gss::Allocator::instance(v108);
  uint64_t v232 = v109;
  unint64_t v110 = v230;
  if ((unint64_t)v230 < v231)
  {
    if (v230) {
      *(void *)unsigned int v230 = 0xB00000005;
    }
    unint64_t v111 = (unint64_t *)(v110 + 2);
    goto LABEL_267;
  }
  uint64_t v112 = ((char *)v230 - (char *)v229) >> 3;
  unint64_t v113 = v112 + 1;
  if ((unint64_t)(v112 + 1) >> 61) {
    abort();
  }
  uint64_t v114 = v231 - (void)v229;
  if ((uint64_t)(v231 - (void)v229) >> 2 > v113) {
    unint64_t v113 = v114 >> 2;
  }
  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v115 = v113;
  }
  if (v115)
  {
    uint64_t v109 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(void *)v109 + 16))(v109, 8 * v115, 4);
    int v116 = (unsigned int *)((char *)v109 + 8 * v112);
    uint64_t v117 = (char *)v109 + 8 * v115;
    if (v109) {
      *(void *)int v116 = 0xB00000005;
    }
  }
  else
  {
    uint64_t v117 = 0;
    int v116 = (unsigned int *)(8 * v112);
  }
  unint64_t v111 = (unint64_t *)(v116 + 2);
  uint64_t v119 = v229;
  uint64_t v118 = v230;
  if (v230 != v229)
  {
    unint64_t v120 = (char *)v230 - (char *)v229 - 8;
    if (v120 < 0x38)
    {
      char v122 = v230;
    }
    else if ((unint64_t)((char *)v230 - (char *)v116) < 0x20)
    {
      char v122 = v230;
    }
    else
    {
      uint64_t v121 = (v120 >> 3) + 1;
      char v122 = &v230[-2 * (v121 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v123 = v116 - 4;
      uint64_t v124 = v230 - 4;
      uint64_t v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v126 = *(_OWORD *)v124;
        *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
        *(_OWORD *)uint64_t v123 = v126;
        v123 -= 8;
        v124 -= 8;
        v125 -= 4;
      }
      while (v125);
      v116 -= 2 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
      if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_264;
      }
    }
    do
    {
      uint64_t v145 = *((void *)v122 - 1);
      v122 -= 2;
      *((void *)v116 - 1) = v145;
      v116 -= 2;
    }
    while (v122 != v119);
LABEL_264:
    uint64_t v118 = v229;
  }
  uint64_t v229 = v116;
  unsigned int v230 = (unsigned int *)v111;
  unint64_t v146 = v231;
  unint64_t v231 = (unint64_t)v117;
  if (v118) {
    uint64_t v109 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, unsigned int *, unint64_t))(*(void *)v232 + 40))(v232, v118, v146 - (void)v118);
  }
LABEL_267:
  unsigned int v230 = (unsigned int *)v111;
  if ((unint64_t)v111 < v231)
  {
    unint64_t *v111 = ((unint64_t)v107 << 32) | 0x10010;
    unint64_t v147 = (unsigned int *)(v111 + 1);
    goto LABEL_292;
  }
  uint64_t v148 = ((char *)v111 - (char *)v229) >> 3;
  if ((unint64_t)(v148 + 1) >> 61) {
    abort();
  }
  unint64_t v149 = (uint64_t)(v231 - (void)v229) >> 2;
  if (v149 <= v148 + 1) {
    unint64_t v149 = v148 + 1;
  }
  if (v231 - (unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v150 = v149;
  }
  if (v150)
  {
    uint64_t v109 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(void *)v232 + 16))(v232, 8 * v150, 4);
    uint64_t v151 = (unsigned int *)((char *)v109 + 8 * v148);
    uint64_t v152 = (char *)v109 + 8 * v150;
    if (v109) {
      *(void *)uint64_t v151 = ((unint64_t)v107 << 32) | 0x10010;
    }
  }
  else
  {
    uint64_t v152 = 0;
    uint64_t v151 = (unsigned int *)(8 * v148);
  }
  unint64_t v147 = v151 + 2;
  unint64_t v154 = v229;
  unint64_t v153 = v230;
  if (v230 != v229)
  {
    unint64_t v155 = (char *)v230 - (char *)v229 - 8;
    if (v155 < 0x38)
    {
      uint64_t v157 = v230;
    }
    else if ((unint64_t)((char *)v230 - (char *)v151) < 0x20)
    {
      uint64_t v157 = v230;
    }
    else
    {
      uint64_t v156 = (v155 >> 3) + 1;
      uint64_t v157 = &v230[-2 * (v156 & 0x3FFFFFFFFFFFFFFCLL)];
      BOOL v158 = v151 - 4;
      unint64_t v159 = v230 - 4;
      uint64_t v160 = v156 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v161 = *(_OWORD *)v159;
        *((_OWORD *)v158 - 1) = *((_OWORD *)v159 - 1);
        *(_OWORD *)BOOL v158 = v161;
        v158 -= 8;
        v159 -= 8;
        v160 -= 4;
      }
      while (v160);
      v151 -= 2 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
      if (v156 == (v156 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_289;
      }
    }
    do
    {
      uint64_t v162 = *((void *)v157 - 1);
      v157 -= 2;
      *((void *)v151 - 1) = v162;
      v151 -= 2;
    }
    while (v157 != v154);
LABEL_289:
    unint64_t v153 = v229;
  }
  uint64_t v229 = v151;
  unsigned int v230 = v147;
  unint64_t v163 = v231;
  unint64_t v231 = (unint64_t)v152;
  if (v153) {
    uint64_t v109 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, unsigned int *, unint64_t))(*(void *)v232 + 40))(v232, v153, v163 - (void)v153);
  }
LABEL_292:
  unsigned int v230 = v147;
  uint64_t v225 = 0;
  uint64_t v226 = 0;
  uint64_t v227 = 0;
  uint64_t v228 = gss::Allocator::instance(v109);
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v225, &v229, v223);
  memset(v221, 0, sizeof(v221));
  char v222 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x10002u) = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x1004Du) = 1;
  uint64_t v164 = *(void *)(*a4 + 520);
  long long v165 = *(std::__shared_weak_count **)(*a4 + 528);
  uint64_t v216 = v164;
  long long v217 = v165;
  if (v165) {
    atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v166 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v164);
  if (v165 && !atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x10001u) = v166;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x1000Du) = BYTE1(v166);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x1000Eu) = BYTE2(v166);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x10033u) = BYTE4(v166);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v221, 0x1003Cu) = BYTE5(v166);
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v219, *a4, (gss::FeatureAttributeSet *)v223, (gss::QueryOverrides *)v221);
  unint64_t v167 = v219;
  float32x4x3_t v168 = v220;
  v215[0] = v219;
  v215[1] = v220;
  if (v220) {
    atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v216, (uint64_t)v167, (uint64_t)v168);
  if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
    std::__shared_weak_count::__release_weak(v168);
    if (!v218) {
      goto LABEL_345;
    }
LABEL_302:
    md::RouteLineSection::halfWidthAtZoom(&v216, a6);
    float v170 = v169;
    id v171 = *a3;
    float v172 = v170 + v170;
    if ([v171 alphaAtlas])
    {
      id v173 = *a3;
      float v172 = *(float *)([v173 alphaAtlas] + 16) * v172;
    }
    uint64_t v174 = *(void *)(v216 + 24);
    if ((int)a6 >= 0x17) {
      unsigned int v175 = 23;
    }
    else {
      unsigned int v175 = (int)a6;
    }
    uint64_t v176 = *(float **)v174;
    if (*(void *)v174)
    {
      float v177 = *v176;
      BOOL v178 = *v176 == 1.0;
      if (*(unsigned char *)(v174 + 10) && v177 != 0.0 && v177 != 1.0)
      {
LABEL_316:
        if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v216 + 24), 0x13Fu, v175, 0)) {
          goto LABEL_319;
        }
        unsigned int v179 = 1;
LABEL_318:
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v174, 0x13Fu, v175, v179)) {
          goto LABEL_341;
        }
LABEL_319:
        float v180 = fminf(fmaxf(a6, 0.0), 23.0);
        if (v176)
        {
          float v181 = *v176;
          BOOL v182 = *v176 == 1.0;
          if (*(unsigned char *)(v174 + 10) && v181 != 0.0 && v181 != 1.0) {
            goto LABEL_326;
          }
        }
        else
        {
          BOOL v182 = 0;
        }
        unsigned int v183 = *(unsigned __int8 *)(v174 + v182 + 11);
        float v181 = 0.0;
        if (v183 != 2)
        {
          char v185 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v174, v183, 0, v180);
          goto LABEL_330;
        }
LABEL_326:
        LOBYTE(v215[0]) = 1;
        char v235 = 1;
        char v184 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v174, 0, (BOOL *)v215, v180);
        char v185 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v174, 1u, (BOOL *)&v235, v180);
        if (v181 < 1.0) {
          char v185 = v184;
        }
LABEL_330:
        if (v185 == 2) {
          float v186 = 0.5;
        }
        else {
          float v186 = 0.0;
        }
        if (v185)
        {
          if (v218) {
            goto LABEL_335;
          }
          goto LABEL_342;
        }
LABEL_341:
        float v186 = 1.0;
        if (v218)
        {
LABEL_335:
          unint64_t v187 = *(void *)(v216 + 24);
          float v188 = fminf(fmaxf(a6, 0.0), 23.0);
          unsigned __int32 v189 = *(float **)v187;
          if (*(void *)v187
            && (float v190 = *v189, LODWORD(v189) = *v189 == 1.0, *(unsigned char *)(v187 + 10))
            && v190 != 0.0
            && v190 != 1.0
            || (v191 = *(unsigned __int8 *)(v187 + v189 + 11), float v190 = 0.0, v191 == 2))
          {
            LOBYTE(v215[0]) = 1;
            char v235 = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v187, 0x61u, 0, (BOOL *)v215, v188);
            float v193 = v192;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v187, 0x61u, 1u, (BOOL *)&v235, v188);
            float v195 = v193 + (float)((float)(v194 - v193) * v190);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(v216 + 24), 0x61u, v191, 0, v188);
          }
          goto LABEL_344;
        }
LABEL_342:
        float v195 = 0.0;
LABEL_344:
        *(float *)a1 = fmaxf(*(float *)a1, (float)(v172 + (float)((float)(v186 + v186) * v195)) * v103);
        goto LABEL_345;
      }
    }
    else
    {
      BOOL v178 = 0;
    }
    unsigned int v179 = *(unsigned __int8 *)(v174 + v178 + 11);
    if (v179 != 2) {
      goto LABEL_318;
    }
    goto LABEL_316;
  }
  if (v218) {
    goto LABEL_302;
  }
LABEL_345:
  uint64_t v196 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v216);
  unint64_t v197 = v220;
  if (v220 && !atomic_fetch_add(&v220->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
    std::__shared_weak_count::__release_weak(v197);
  }
  if (!v221[14])
  {
    uint64_t v198 = *(void *)v221;
    if (*(void *)v221)
    {
      uint64_t v199 = gss::Allocator::instance(v196);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v199 + 40))(v199, v198, *(unsigned __int16 *)&v221[12]);
    }
  }
  if (v223[0])
  {
    v223[1] = v223[0];
    (*(void (**)(uint64_t, unsigned int *, int64_t))(*(void *)v224 + 40))(v224, v223[0], (char *)v223[2] - (char *)v223[0]);
  }
  if (v225)
  {
    uint64_t v226 = v225;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v228 + 40))(v228, v225, v227 - v225);
  }
  if (v229)
  {
    unsigned int v230 = v229;
    (*(void (**)(gss::Allocator *, unsigned int *, unint64_t))(*(void *)v232 + 40))(v232, v229, v231 - (void)v229);
  }
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v233);
}

void sub_1A1F3E618(_Unwind_Exception *a1)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v1 - 176);
  _Unwind_Resume(a1);
}

double gm::operator*<double,3,4,4>(double *a1, double *a2, double *a3)
{
  double v3 = a3[1];
  double v4 = a2[1];
  double v6 = a2[2];
  double v5 = a2[3];
  double v49 = *a3;
  double v7 = a2[6];
  double v8 = a2[7];
  double v9 = a3[2];
  double v48 = v3;
  double v10 = *a3 * *a2 + v3 * v5 + v9 * v7;
  double v11 = a3[4];
  double v47 = a3[3];
  double v12 = a3[5];
  double v46 = v11;
  double v14 = v12;
  double v13 = a3[6];
  double v15 = v11 * *a2 + v12 * v5 + v13 * v7;
  double v17 = a3[7];
  double v16 = a3[8];
  double v19 = v16;
  double v18 = a3[9];
  double v20 = a3[10];
  double v21 = v16 * *a2 + v18 * v5 + v20 * v7;
  double v23 = a3[11];
  double v22 = a3[12];
  double v24 = a3[13];
  double v25 = v22 * *a2 + v24 * v5;
  double v26 = a3[14];
  double v27 = v25 + v26 * v7;
  double v29 = a2[4];
  double v28 = a2[5];
  double v30 = *a3 * v4 + v3 * v29;
  double v31 = v11 * v4 + v12 * v29;
  double v32 = v16 * v4 + v18 * v29;
  double v34 = a2[8];
  double v33 = a2[9];
  double v36 = v26;
  double v35 = a3[15];
  double v37 = v27 + v35 * v33;
  double v38 = v30 + v9 * v8;
  double v39 = v31 + v13 * v8;
  double v40 = v32 + v20 * v8;
  double v41 = v22 * v4 + v24 * v29 + v26 * v8;
  double v42 = a2[10];
  double v43 = a2[11];
  double result = v41 + v35 * v42;
  *a1 = v10 + v47 * v33;
  a1[1] = v38 + v47 * v42;
  a1[6] = v21 + v23 * v33;
  a1[7] = v40 + v23 * v42;
  a1[2] = v49 * v6 + v48 * v28 + v9 * v34 + v47 * v43;
  a1[3] = v15 + v17 * v33;
  a1[4] = v39 + v17 * v42;
  a1[5] = v46 * v6 + v14 * v28 + v13 * v34 + v17 * v43;
  a1[8] = v19 * v6 + v18 * v28 + v20 * v34 + v23 * v43;
  a1[9] = v37;
  double v45 = v22 * v6 + v24 * v28 + v36 * v34 + a3[15] * v43;
  a1[10] = result;
  a1[11] = v45;
  return result;
}

void md::PuckLogic::update3DPuckRenderStates(md::PuckStyleInfo const&,md::PuckStyleInfo const&,BOOL)::$_1::operator()(uint64_t *a1, uint64_t a2, char a3, void *a4, unsigned char *a5)
{
  if (a3 == 1)
  {
    uint64_t v7 = *a1;
    double v8 = (uint64_t *)a1[2];
  }
  else
  {
    if (a3) {
      return;
    }
    uint64_t v7 = *a1;
    double v8 = (uint64_t *)a1[1];
  }
  uint64_t v9 = *(void *)(v7 + 8);
  if (**(unsigned char **)v7)
  {
    int v10 = *((unsigned __int8 *)v8 + 16);
    if (*a5 != v10)
    {
      *a5 = v10;
      double v11 = (void *)gdc::Registry::storage<md::components::VisibilityChanged>(*(int8x8_t **)(v9 + 288));
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, a2);
    }
  }
  else
  {
    *a5 = 0;
  }
  uint64_t v12 = *v8;
  if (*a4 != *v8)
  {
    uint64_t v13 = v8[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    double v14 = (std::__shared_weak_count *)a4[1];
    *a4 = v12;
    a4[1] = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    double v15 = (void *)gdc::Registry::storage<md::components::CustomRenderStateChanged>(*(int8x8_t **)(v9 + 288));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v15, a2);
  }
}

BOOL gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  double v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    double v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::CustomRenderStateChanged>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  double v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    double v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::VisibilityChanged>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

unsigned char *md::RouteLineSection::halfWidthAtZoom(unsigned char *result, float a2)
{
  if (!result[32]) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(*(void *)result + 24);
  uint64_t v5 = *(float **)v4;
  if (*(void *)v4
    && (float v6 = *v5, LODWORD(v5) = *v5 == 1.0, *(unsigned char *)(v4 + 10))
    && (v6 != 0.0 ? (BOOL v7 = v6 == 1.0) : (BOOL v7 = 1), !v7)
    || (unsigned int v8 = *(unsigned __int8 *)(v4 + v5 + 11), v8 == 2))
  {
    char v38 = 1;
    char v37 = 1;
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v4, 0xF3u, 0, &v38);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v4, 0xF3u, 1u, &v37);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(*(void *)result + 24), 0xF3u, v8, 0);
  }
  uint64_t v9 = *(void *)(*(void *)v3 + 24);
  unint64_t v10 = *(float **)v9;
  if (*(void *)v9
    && (float v11 = *v10, LODWORD(v10) = *v10 == 1.0, *(unsigned char *)(v9 + 10))
    && (v11 != 0.0 ? (BOOL v12 = v11 == 1.0) : (BOOL v12 = 1), !v12)
    || (unsigned int v13 = *(unsigned __int8 *)(v9 + v10 + 11), v13 == 2))
  {
    char v40 = 1;
    char v39 = 1;
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v9, 0xF4u, 0, &v40);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v9, 0xF4u, 1u, &v39);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(*(void *)v3 + 24), 0xF4u, v13, 0);
  }
  uint64_t v14 = *(void *)(*(void *)v3 + 24);
  uint64_t v15 = *(float **)v14;
  if (*(void *)v14
    && (float v16 = *v15, LODWORD(v15) = *v15 == 1.0, *(unsigned char *)(v14 + 10))
    && (v16 != 0.0 ? (BOOL v17 = v16 == 1.0) : (BOOL v17 = 1), !v17)
    || (unsigned int v18 = *(unsigned __int8 *)(v14 + v15 + 11), v18 == 2))
  {
    char v42 = 1;
    char v41 = 1;
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v14, 0xF5u, 0, &v42);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v14, 0xF5u, 1u, &v41);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(*(void *)v3 + 24), 0xF5u, v18, 0);
  }
  unint64_t v19 = *(void *)(*(void *)v3 + 24);
  if ((int)a2 >= 0x17) {
    unsigned int v20 = 23;
  }
  else {
    unsigned int v20 = (int)a2;
  }
  double v21 = *(float **)v19;
  if (!*(void *)v19)
  {
    BOOL v23 = 0;
    goto LABEL_45;
  }
  float v22 = *v21;
  BOOL v23 = *v21 == 1.0;
  if (!*(unsigned char *)(v19 + 10) || (v22 != 0.0 ? (BOOL v24 = v22 == 1.0) : (BOOL v24 = 1), v24))
  {
LABEL_45:
    unsigned int v25 = *(unsigned __int8 *)(v19 + v23 + 11);
    if (v25 != 2) {
      goto LABEL_48;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)v3 + 24), 0x1B5u, v20, 0)) {
    goto LABEL_49;
  }
  unsigned int v25 = 1;
LABEL_48:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v19, 0x1B5u, v20, v25))
  {
LABEL_49:
    float v26 = fminf(fmaxf(a2, 0.0), 23.0);
    if (v21)
    {
      float v27 = *v21;
      BOOL v28 = *v21 == 1.0;
      if (*(unsigned char *)(v19 + 10))
      {
        if (v27 != 0.0 && v27 != 1.0)
        {
LABEL_59:
          char v44 = 1;
          char v43 = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v19, 0x1B5u, 0, (BOOL *)&v44, v26);
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v19, 0x1B5u, 1u, (BOOL *)&v43, v26);
          goto LABEL_61;
        }
      }
    }
    else
    {
      BOOL v28 = 0;
    }
    unsigned int v30 = *(unsigned __int8 *)(v19 + v28 + 11);
    if (v30 != 2)
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v19, 0x1B5u, v30, 0, v26);
      goto LABEL_61;
    }
    goto LABEL_59;
  }
LABEL_61:
  unint64_t v31 = *(void *)(*(void *)v3 + 24);
  float v32 = fminf(fmaxf(a2, 0.0), 23.0);
  double v33 = *(float **)v31;
  if (!*(void *)v31
    || (float v34 = *v33, LODWORD(v33) = *v33 == 1.0, !*(unsigned char *)(v31 + 10))
    || (v34 != 0.0 ? (BOOL v35 = v34 == 1.0) : (BOOL v35 = 1), v35))
  {
    unsigned int v36 = *(unsigned __int8 *)(v31 + v33 + 11);
    if (v36 != 2) {
      return (unsigned char *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x5Eu, v36, 0, v32);
    }
  }
  char v46 = 1;
  char v45 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x5Eu, 0, (BOOL *)&v46, v32);
  return (unsigned char *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v31, 0x5Eu, 1u, (BOOL *)&v45, v32);
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, BOOL *a3, float a4)
{
  unsigned int v5 = (int)a4;
  if ((int)a4 >= 0x17) {
    uint64_t v6 = 23;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 >= 0x16) {
    uint64_t v7 = 22;
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v8 = a1 + 16 * a2;
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v9 = v11;
  if (!v11)
  {
    if (a3) {
      *a3 = 0;
    }
    return *(unsigned int *)gss::defaultValueForKey<gss::PropertyID,unsigned int>(319);
  }
  uint64_t v13 = v7 + 1;
  uint64_t v14 = a1 + 16 * a2;
  uint64_t v15 = *(unsigned __int16 *)(v14 + 56);
  if (!*(_WORD *)(v14 + 56))
  {
    unsigned __int8 v83 = 1;
    unsigned __int8 v82 = 1;
LABEL_126:
    unsigned int v18 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 0x13Fu, v6, &v83);
LABEL_127:
    unsigned int v17 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(*(void *)v10 + 72), 0x13Fu, v13, &v82);
    if (a3) {
LABEL_128:
    }
      *a3 = (v83 | v82) != 0;
    goto LABEL_129;
  }
  char v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  unint64_t v19 = *(uint64_t **)(v14 + 48);
  unsigned int v20 = &v19[v15];
  while (2)
  {
    LOBYTE(v21) = 0;
    while (1)
    {
      uint64_t v23 = *v19;
      if (v21)
      {
        int v21 = 1;
        if (v16) {
          goto LABEL_89;
        }
        goto LABEL_67;
      }
      BOOL v24 = *(uint64_t **)(v23 + 72);
      if (!v24
        || (unsigned int v25 = *((unsigned __int8 *)v24 + v6 + 16),
            uint64_t v26 = *v24,
            uint64_t v27 = v26 + 80 * v25,
            unint64_t v28 = *(unsigned __int16 *)(v27 + 10),
            !*(_WORD *)(v27 + 10)))
      {
LABEL_31:
        int v21 = 0;
        if (v16) {
          goto LABEL_89;
        }
        goto LABEL_67;
      }
      double v29 = *(unsigned __int16 **)v27;
      if (!*(unsigned char *)(v27 + 15))
      {
        uint64_t v38 = 2 * v28;
        unsigned int v30 = *(unsigned __int16 **)v27;
        while (*v30 != 319)
        {
          ++v30;
          v38 -= 2;
          if (!v38)
          {
            LODWORD(v30) = v29 + 2 * v28;
            break;
          }
        }
LABEL_37:
        if ((unsigned __int16)((v30 - v29) >> 1) == v28) {
          goto LABEL_31;
        }
        goto LABEL_38;
      }
      unsigned int v30 = *(unsigned __int16 **)v27;
      unint64_t v31 = v28;
      if (v28 >= 0x1E)
      {
        do
        {
          unint64_t v34 = v31 >> 1;
          BOOL v35 = &v30[v31 >> 1];
          unsigned int v37 = *v35;
          unsigned int v36 = v35 + 1;
          v31 += ~(v31 >> 1);
          if (v37 < 0x13F) {
            unsigned int v30 = v36;
          }
          else {
            unint64_t v31 = v34;
          }
        }
        while (v31);
        if (v30 == &v29[v28] || *v30 != 319) {
          goto LABEL_31;
        }
        goto LABEL_37;
      }
      uint64_t v32 = 0;
      while (1)
      {
        unsigned int v33 = v29[v32];
        if (v33 >= 0x13F) {
          break;
        }
        if (v28 == ++v32) {
          goto LABEL_31;
        }
      }
      int v51 = (unsigned __int16)v32;
      if (v33 != 319) {
        int v51 = v28;
      }
      if (v51 == v28) {
        goto LABEL_31;
      }
LABEL_38:
      uint64_t v39 = v26 + 80 * v25;
      unint64_t v40 = *(unsigned __int16 *)(v39 + 42);
      if (!*(_WORD *)(v39 + 42)) {
        goto LABEL_52;
      }
      uint64_t v41 = v26 + 80 * v25;
      uint64_t v42 = *(void *)(v41 + 32);
      if (!*(unsigned char *)(v41 + 47))
      {
        uint64_t v52 = 2 * v40;
        char v43 = *(unsigned __int16 **)(v41 + 32);
        while (*v43 != 319)
        {
          ++v43;
          v52 -= 2;
          if (!v52)
          {
            LODWORD(v43) = v42 + 2 * v40;
            break;
          }
        }
LABEL_61:
        LODWORD(v43) = (unsigned __int16)((v43 - v42) >> 1);
LABEL_64:
        float v50 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (v43 != v40) {
          float v50 = (int *)(v42 + *(unsigned __int16 *)(v26 + 80 * v25 + 40) + 4 * v43);
        }
        goto LABEL_66;
      }
      char v43 = *(unsigned __int16 **)(v41 + 32);
      unint64_t v44 = v40;
      if (v40 < 0x1E)
      {
        char v43 = 0;
        while (1)
        {
          unsigned int v45 = *(unsigned __int16 *)(v42 + 2 * (void)v43);
          if (v45 >= 0x13F) {
            break;
          }
          char v43 = (unsigned __int16 *)((char *)v43 + 1);
          if ((unsigned __int16 *)v40 == v43) {
            goto LABEL_52;
          }
        }
        LODWORD(v43) = (unsigned __int16)v43;
        if (v45 != 319) {
          LODWORD(v43) = v40;
        }
        goto LABEL_64;
      }
      do
      {
        char v46 = (_WORD *)(v44 >> 1);
        double v47 = &v43[v44 >> 1];
        unsigned int v49 = *v47;
        double v48 = v47 + 1;
        v44 += ~(v44 >> 1);
        if (v49 < 0x13F) {
          char v43 = v48;
        }
        else {
          unint64_t v44 = (unint64_t)v46;
        }
      }
      while (v44);
      if (v43 == (unsigned __int16 *)(v42 + 2 * v40))
      {
LABEL_52:
        float v50 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        goto LABEL_66;
      }
      float v50 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      if (*v43 == 319) {
        goto LABEL_61;
      }
LABEL_66:
      unsigned int v18 = *v50;
      int v21 = 1;
      if (v16)
      {
LABEL_89:
        if (v21) {
          goto LABEL_132;
        }
        goto LABEL_117;
      }
LABEL_67:
      unsigned int v53 = *(uint64_t **)(v23 + 72);
      if (!v53) {
        goto LABEL_13;
      }
      unsigned int v54 = *((unsigned __int8 *)v53 + v13 + 16);
      uint64_t v55 = *v53;
      uint64_t v56 = v55 + 80 * v54;
      unint64_t v57 = *(unsigned __int16 *)(v56 + 10);
      if (!*(_WORD *)(v56 + 10))
      {
        int v22 = 0;
        goto LABEL_12;
      }
      int v58 = *(unsigned __int16 **)v56;
      if (!*(unsigned char *)(v56 + 15))
      {
        uint64_t v67 = 2 * v57;
        unsigned int v59 = *(unsigned __int16 **)v56;
        while (*v59 != 319)
        {
          ++v59;
          v67 -= 2;
          if (!v67)
          {
            LODWORD(v59) = v58 + 2 * v57;
            break;
          }
        }
LABEL_86:
        int v22 = (unsigned __int16)((v59 - v58) >> 1);
        goto LABEL_12;
      }
      unsigned int v59 = *(unsigned __int16 **)v56;
      unint64_t v60 = v57;
      if (v57 >= 0x1E)
      {
        do
        {
          unint64_t v63 = v60 >> 1;
          float v64 = &v59[v60 >> 1];
          unsigned int v66 = *v64;
          BOOL v65 = v64 + 1;
          v60 += ~(v60 >> 1);
          if (v66 < 0x13F) {
            unsigned int v59 = v65;
          }
          else {
            unint64_t v60 = v63;
          }
        }
        while (v60);
        if (v59 == &v58[v57] || *v59 != 319) {
          goto LABEL_13;
        }
        goto LABEL_86;
      }
      uint64_t v61 = 0;
      while (1)
      {
        unsigned int v62 = v58[v61];
        if (v62 >= 0x13F) {
          break;
        }
        if (v57 == ++v61) {
          goto LABEL_13;
        }
      }
      int v22 = (unsigned __int16)v61;
      if (v62 != 319) {
        int v22 = v57;
      }
LABEL_12:
      if (v22 != v57) {
        break;
      }
LABEL_13:
      char v16 = 0;
      if (++v19 == v20)
      {
        unsigned __int8 v83 = 1;
        unsigned __int8 v82 = 1;
        if ((v21 & 1) == 0) {
          goto LABEL_126;
        }
        goto LABEL_127;
      }
    }
    uint64_t v68 = v55 + 80 * v54;
    unint64_t v69 = *(unsigned __int16 *)(v68 + 42);
    if (*(_WORD *)(v68 + 42))
    {
      uint64_t v70 = v55 + 80 * v54;
      uint64_t v71 = *(void *)(v70 + 32);
      if (!*(unsigned char *)(v70 + 47))
      {
        uint64_t v80 = 2 * v69;
        uint64_t v72 = *(unsigned __int16 **)(v70 + 32);
        while (*v72 != 319)
        {
          ++v72;
          v80 -= 2;
          if (!v80)
          {
            LODWORD(v72) = v71 + 2 * v69;
            goto LABEL_111;
          }
        }
        goto LABEL_111;
      }
      uint64_t v72 = *(unsigned __int16 **)(v70 + 32);
      unint64_t v73 = v69;
      if (v69 < 0x1E)
      {
        uint64_t v72 = 0;
        while (1)
        {
          unsigned int v74 = *(unsigned __int16 *)(v71 + 2 * (void)v72);
          if (v74 >= 0x13F) {
            break;
          }
          uint64_t v72 = (unsigned __int16 *)((char *)v72 + 1);
          if ((unsigned __int16 *)v69 == v72) {
            goto LABEL_105;
          }
        }
        LODWORD(v72) = (unsigned __int16)v72;
        if (v74 != 319) {
          LODWORD(v72) = v69;
        }
LABEL_114:
        float v79 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (v72 != v69) {
          float v79 = (int *)(v71 + *(unsigned __int16 *)(v55 + 80 * v54 + 40) + 4 * v72);
        }
LABEL_116:
        unsigned int v17 = *v79;
        if (v21) {
          goto LABEL_132;
        }
        goto LABEL_117;
      }
      do
      {
        float v75 = (_WORD *)(v73 >> 1);
        BOOL v76 = &v72[v73 >> 1];
        unsigned int v78 = *v76;
        BOOL v77 = v76 + 1;
        v73 += ~(v73 >> 1);
        if (v78 < 0x13F) {
          uint64_t v72 = v77;
        }
        else {
          unint64_t v73 = (unint64_t)v75;
        }
      }
      while (v73);
      if (v72 != (unsigned __int16 *)(v71 + 2 * v69))
      {
        float v79 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (*v72 != 319) {
          goto LABEL_116;
        }
LABEL_111:
        LODWORD(v72) = (unsigned __int16)((v72 - v71) >> 1);
        goto LABEL_114;
      }
    }
LABEL_105:
    unsigned int v17 = gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    if (v21)
    {
LABEL_132:
      unsigned __int8 v83 = 1;
      unsigned __int8 v82 = 1;
      if (a3) {
        goto LABEL_128;
      }
      goto LABEL_129;
    }
LABEL_117:
    ++v19;
    char v16 = 1;
    if (v19 != v20) {
      continue;
    }
    break;
  }
  unsigned __int8 v83 = 1;
  unsigned __int8 v82 = 1;
  unsigned int v18 = *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 0x13Fu, v6, &v83);
  if (a3) {
    goto LABEL_128;
  }
LABEL_129:
  if ((float)(a4 - (float)v6) >= 1.0) {
    return v17;
  }
  else {
    return v18;
  }
}

BOOL gdc::ComponentStorageWrapper<md::components::RenderableInjected>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::components::RenderableInjected>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::RenderableInjected>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::components::RenderableInjected>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEEclEOSU_(uint64_t a1, unsigned __int8 *a2)
{
  if ((*a2 | 4) == 4)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    uint64_t v3 = (std::__shared_weak_count *)v2[38];
    v2[37] = 0;
    v2[38] = 0;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[40];
    v2[39] = 0;
    v2[40] = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579F50;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF579F50;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__2NS_9allocatorISR_EEFvNS2_17StyleManagerEventEEED0Ev()
{
}

void gdc::Registry::add<md::components::ReferencedAssetInstance,md::components::CustomRenderState,md::components::StencilBucket,md::components::IntendedSceneLayer,md::components::NonTiled,md::components::CustomZIndex,md::components::OcclusionType>(int8x8_t *a1, uint64_t a2, long long *a3, uint64_t *a4, unsigned char *a5, unsigned char *a6, _DWORD *a7, unsigned char *a8)
{
  uint64_t v16 = (void *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(a1);
  gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::emplace(v16, a2, a3);
  unint64_t v17 = (void *)gdc::Registry::storage<md::components::CustomRenderState>(a1);
  gdc::ComponentStorageWrapper<md::components::CustomRenderState>::emplace(v17, a2, a4);
  uint64_t v18 = (void *)gdc::Registry::storage<md::components::StencilBucket>(a1);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v18, a2, a5);
  unint64_t v19 = (void *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a1);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v19, a2, a6);
  unsigned int v20 = (void *)gdc::Registry::storage<md::components::NonTiled>(a1);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v20, a2);
  int v21 = (void *)gdc::Registry::storage<md::components::CustomZIndex>(a1);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v21, a2, a7);
  int v22 = (void *)gdc::Registry::storage<md::components::OcclusionType>(a1);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v22, a2, a8);
}

gdc::Registry **std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](gdc::Registry **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::Registry::~Registry(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(void *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t *)a2;
  }
  else {
    uint64_t v4 = *(uint64_t **)a2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v10 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v6;
    }
    uint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      BOOL v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v13 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v19 = v12[1];
            if (v8 == v19)
            {
              uint64_t v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v21 = v12[3];
              }
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3])) {
                    return v12;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v12 + 39)) {
                    return v12;
                  }
                  uint64_t v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22) {
                      return v12;
                    }
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            double result = 0;
            BOOL v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v15 = v12[1];
          if (v8 == v15)
          {
            uint64_t v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v17 = v12[3];
            }
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18) {
                    return v12;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= *(void *)&v7) {
              v15 %= *(void *)&v7;
            }
            if (v15 != v10) {
              return 0;
            }
          }
          double result = 0;
          BOOL v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

void ___ZL27GEOGetVectorKitPuckLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "PuckLogic");
  uint64_t v1 = (void *)GEOGetVectorKitPuckLogicLog(void)::log;
  GEOGetVectorKitPuckLogicLog(void)::log = (uint64_t)v0;
}

double ___ZN2md9PuckLogic13animatePuckUpERKN3geo9Mercator3IdEE_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = a2;
  double v4 = *(double *)(a1 + 56) + (*(double *)(a1 + 80) - *(double *)(a1 + 56)) * v3;
  float64x2_t v5 = vmlaq_n_f64(*(float64x2_t *)(a1 + 40), vsubq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a1 + 40)), v3);
  double v6 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v5, v5)) + v4 * v4);
  float64x2_t v7 = vmulq_n_f64(v5, v6);
  double result = v6 * v4;
  *(float64x2_t *)(v2 + 456) = v7;
  *(double *)(v2 + 472) = result;
  return result;
}

void ___ZN2md9PuckLogic13animatePuckUpERKN3geo9Mercator3IdEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 440);
  *(void *)(v1 + 440) = 0;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579F08;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF579F08;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__1NS_9allocatorISR_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579EC0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF579EC0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x9AEE7E062376E454 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::PuckContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::PuckContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5552D0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1000C40EA5CE5F4);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::PuckContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5552D0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40EA5CE5F4);
  }
  return a1;
}

void md::PuckLogic::didBecomeInactive(md::PuckLogic *this)
{
  if (*((unsigned char *)this + 328))
  {
    uint64_t v2 = *((void *)this + 34);
    v4[0] = 0;
    int v5 = 1;
    md::RegistryManager::removeRegistry(v2, (uint64_t)v4);
    if (v5 != -1) {
      ((void (*)(char *, unsigned char *))off_1EF58F7B8[v5])(&v6, v4);
    }
    *((void *)this + 36) = 0;
  }
  *((unsigned char *)this + 328) = 0;
  [*((id *)this + 55) stop];
  uint64_t v3 = (void *)*((void *)this + 55);
  *((void *)this + 55) = 0;
}

void sub_1A1F401B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a21 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EF58F7B8[a21])(v21 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void md::PuckLogic::~PuckLogic(md::PuckLogic *this)
{
  md::PuckLogic::~PuckLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;

  *(void *)this = &unk_1EF554548;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  uint64_t v3 = (void *)((char *)this + 392);
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 50);
  *uint64_t v3 = 0;
  v3[1] = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 54);
  v3[4] = 0;
  v3[5] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  [*((id *)this + 55) stop];
  char v6 = (void *)*((void *)this + 55);
  *((void *)this + 55) = 0;

  float64x2_t v7 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  BOOL v12 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A1F40544(_Unwind_Exception *a1)
{
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams(v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 312);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 296);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 272);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ggl::RenderState *,std::shared_ptr<ggl::RenderState>::__shared_ptr_default_delete<ggl::RenderState,ggl::RenderState>,std::allocator<ggl::RenderState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::RenderState *,std::shared_ptr<ggl::RenderState>::__shared_ptr_default_delete<ggl::RenderState,ggl::RenderState>,std::allocator<ggl::RenderState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    int v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      int v5 = __p;
    }
    BOOL v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::SelectedRoadTileResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F411C398](**(unsigned int **)(a3 + 8), *(unsigned int *)(*(void *)(a3 + 8) + 4), *(unsigned int *)(*(void *)(a3 + 8) + 8), *(void *)(*(void *)(a3 + 8) + 16));
}

void md::SelectedRoadTileResourceFetcher::~SelectedRoadTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void *md::LabelSettings_Navigation::setDetachedCamera(md::LabelSettings_Navigation *this, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EF56EAC0;
  v3[1] = this;
  v3[2] = a2;
  uint64_t v4 = v3;
  md::LabelManager::queueCommand(this, 22, 1, v3);
  uint64_t result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_1A1F40820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5787B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5787B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578768;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF578768;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void ***std::unique_ptr<md::RoadStyling>::~unique_ptr[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v4 = v2;
    std::vector<md::RoadStyling::Entry>::__destroy_vector::operator()[abi:nn180100](&v4);
    MEMORY[0x1A6239270](v2, 0x20C40960023A9);
  }
  return a1;
}

void md::DaVinciCenterLineRoadsRenderResources::~DaVinciCenterLineRoadsRenderResources(md::DaVinciCenterLineRoadsRenderResources *this)
{
  uint64_t v2 = (md::RoadSharedResources *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    md::RoadSharedResources::~RoadSharedResources(v2);
    MEMORY[0x1A6239270]();
  }
  uint64_t v3 = (md::RoadSharedResources *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    md::RoadSharedResources::~RoadSharedResources(v3);
    MEMORY[0x1A6239270]();
  }
  uint64_t v4 = *(md::PatternedSharedResources **)this;
  *(void *)this = 0;
  if (v4)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v4);
    MEMORY[0x1A6239270]();
  }
}

void md::ScreenLabelFeature::styleAttributes(void *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  {
    operator new();
  }
  uint64_t v25 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(void *, uint64_t *))(*a1 + 544))(a1, &v22);
  uint64_t v4 = v22;
  if (v22 == v23)
  {
    uint64_t v21 = a1[34];
    *a2 = (void **)a1[33];
    a2[1] = (void **)v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = (const FeatureStyleAttributes *)a1[33];
    char v6 = (char *)operator new(0x40uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)char v6 = &unk_1EF57F680;
    char v7 = (void **)(v6 + 24);
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v6 + 24), v5);
    uint64_t v8 = v22;
    if (((v23 - v22) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v9 = 0;
      char v10 = 0;
      uint64_t v11 = ((unint64_t)(v23 - v22) >> 3);
      unsigned __int8 v12 = v6[57];
      while (1)
      {
        size_t v13 = v12;
        uint64_t v14 = *v7;
        if (v12) {
          break;
        }
LABEL_5:
        v14[v13] = *(void *)(v8 + 8 * v9);
        unsigned __int8 v12 = v6[57] + 1;
        v6[57] = v12;
        ++v9;
        char v10 = 1;
        if (v9 == v11)
        {
          uint64_t v14 = *v7;
          size_t v13 = v12;
LABEL_24:
          qsort(v14, v13, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_25;
        }
      }
      if (v12 > 0x1Fu)
      {
        do
        {
          uint64_t v18 = 0;
          uint64_t v19 = (int *)v14;
          while (1)
          {
            int v20 = *v19;
            v19 += 2;
            if (v20 == *(_DWORD *)(v8 + 8 * v9)) {
              break;
            }
            if (v13 == ++v18) {
              goto LABEL_16;
            }
          }
          HIDWORD(v14[v18]) = *(_DWORD *)(v8 + 8 * v9 + 4);
LABEL_16:
          ++v9;
        }
        while (v9 != v11);
      }
      else
      {
        do
        {
          uint64_t v15 = 0;
          uint64_t v16 = (int *)v14;
          while (1)
          {
            int v17 = *v16;
            v16 += 2;
            if (v17 == *(_DWORD *)(v8 + 8 * v9)) {
              break;
            }
            if (v13 == ++v15) {
              goto LABEL_5;
            }
          }
          HIDWORD(v14[v15]) = *(_DWORD *)(v8 + 8 * v9++ + 4);
        }
        while (v9 != v11);
      }
      if (v10) {
        goto LABEL_24;
      }
    }
LABEL_25:
    *a2 = v7;
    a2[1] = (void **)v6;
    uint64_t v4 = v22;
  }
  if (v4)
  {
    uint64_t v23 = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 40))(v25, v4, v24 - v4);
  }
}

void sub_1A1F40D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11)
  {
    a12 = a11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, a11, a13 - a11);
  }
  _Unwind_Resume(a1);
}

void md::ScreenLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 584))(&v9);
  md::createFeatureAttributeSet((gss::Allocator *)v12, &v9);
  md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v11, a3, v12, 0);
  if (v12[0])
  {
    v12[1] = v12[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v12[0], v12[2] - v12[0]);
  }
  uint64_t v5 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    char v6 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v11);
  }
  else
  {
    if (v5)
    {
      _OWORD *v5 = v11;
      long long v11 = 0uLL;
    }
    char v6 = v5 + 1;
  }
  *(void *)(a2 + 8) = v6;
  char v7 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1A1F40F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t md::ScreenLabelFeature::restyleFeature(md::ScreenLabelFeature *this, md::LabelFeatureStyler **a2)
{
  return md::LabelFeatureStyler::restyleFeature(a2[37], this);
}

uint64_t md::LabelFeature::publicNameCount(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::publicLocale(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::publicName(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::ScreenLabelFeature::debugString@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"  ScreenFeature type=", 21);
  uint64_t v4 = gss::to_string(**(unsigned __int8 **)(a1 + 208));
  size_t v5 = strlen(v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  if ((v21 & 0x10) != 0)
  {
    unint64_t v7 = v20;
    if (v20 < v17)
    {
      unint64_t v20 = v17;
      unint64_t v7 = v17;
    }
    uint64_t v8 = (const void **)&v16;
  }
  else
  {
    if ((v21 & 8) == 0)
    {
      size_t v6 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    uint64_t v8 = (const void **)v15;
    unint64_t v7 = v15[2];
  }
  uint64_t v9 = *v8;
  size_t v6 = v7 - (void)*v8;
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    unsigned __int8 v12 = operator new(v10 + 1);
    *((void *)a2 + 1) = v6;
    *((void *)a2 + 2) = v11 | 0x8000000000000000;
    *(void *)a2 = v12;
    a2 = v12;
    goto LABEL_15;
  }
  a2[23] = v6;
  if (v6) {
LABEL_15:
  }
    memmove(a2, v9, v6);
LABEL_16:
  a2[v6] = 0;
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v22);
}

void sub_1A1F4122C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL md::LabelFeature::hasIdentifier(uint64_t a1, _DWORD *a2)
{
  return *a2 != 0;
}

uint64_t md::ScreenLabelFeature::labelFeatureType(md::ScreenLabelFeature *this)
{
  return 6;
}

uint64_t md::ScreenLabelFeature::labelPoint(uint64_t a1)
{
  return a1 + 216;
}

uint64_t md::ScreenLabelFeature::isFeatureFromTileSource(md::ScreenLabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::updateDynamicStyling(md::LabelFeature *this, LabelManager *a2, md::Label *a3)
{
  return 0;
}

unsigned char *md::ScreenLabelFeature::newRootPart(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 200)) {
    goto LABEL_14;
  }
  uint64_t v4 = [VKImage alloc];
  uint64_t v5 = [*(id *)(a1 + 192) image];
  [*(id *)(a1 + 192) scale];
  double v7 = v6;
  uint64_t v8 = *(void *)(a2 + 112);
  uint64_t v9 = *(void **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  if (v9 != v10)
  {
    while (*v9 != 0x6F66BE14E10A8F81)
    {
      v9 += 5;
      if (v9 == v10) {
        goto LABEL_10;
      }
    }
  }
  if (v9 == v10)
  {
LABEL_10:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v9[3];
    unsigned __int8 v12 = (std::__shared_weak_count *)v9[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v24 = v11;
      uint64_t v25 = v12;
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_12;
    }
  }
  uint64_t v24 = v11;
  uint64_t v25 = 0;
LABEL_12:
  uint64_t v13 = [(VKImage *)v4 initWithCGImage:v5 scale:&v24 resourceStore:v7];
  uint64_t v14 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = v13;

  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_14:
  uint64_t v15 = (char *)operator new(0xD0uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_1EF52E2C8;
  id v16 = *(id *)(a1 + 200);
  *((void *)v15 + 4) = &unk_1EF559EB8;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 7) = 0;
  *((void *)v15 + 8) = 0;
  *(_OWORD *)(v15 + 72) = xmmword_1A28FC750;
  *(_OWORD *)(v15 + 88) = xmmword_1A28FC750;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *((void *)v15 + 19) = 0;
  *((void *)v15 + 20) = 1065353216;
  v15[168] = 0;
  *((void *)v15 + 3) = &unk_1EF5136A8;
  *((void *)v15 + 22) = &unk_1EF559EB8;
  *((void *)v15 + 23) = v16;
  v15[200] = 0;
  uint64_t v22 = v15 + 24;
  uint64_t v23 = (std::__shared_weak_count *)v15;
  md::LabelImageLoader::enqueueIconForRendering(*(void *)(a2 + 264), &v22);
  {
    operator new();
  }
  unint64_t v17 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
  double v18 = md::IconLabelPart::IconLabelPart((uint64_t)v17, &v22);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v19 + 176))(v19, 3, v18);
  (*(void (**)(unsigned char *, void))(*(void *)v17 + 816))(v17, *(unsigned __int8 *)(*(void *)(a1 + 208) + 1));
  v17[664] = 0;
  unint64_t v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return v17;
}

void sub_1A1F415E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1F41600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__shared_ptr_emplace<md::ExternalImageLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ExternalImageLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ExternalImageLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::ScreenLabelFeature::labelTypeAtPosition()
{
  return 15;
}

void md::ScreenLabelFeature::~ScreenLabelFeature(md::ScreenLabelFeature *this)
{
  *(void *)this = &unk_1EF53A718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  md::LabelFeature::~LabelFeature(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53A718;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  md::LabelFeature::~LabelFeature(this);
}

void md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    unsigned __int8 v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5751B0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5751B0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__1NS_9allocatorISJ_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575168;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575168;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x9F2276D081C2CB20;
    if (*(void *)&v5 <= 0x9F2276D081C2CB20) {
      unint64_t v7 = 0x9F2276D081C2CB20 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x9F2276D081C2CB20;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  char v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x9F2276D081C2CB20)
      {
        if (v9[2] == 0x9F2276D081C2CB20) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      char v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    char v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x9F2276D081C2CB20) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t gdc::ObjectHolder<md::PendingRegistryContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::PendingRegistryContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5559D8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::PendingRegistryContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5559D8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::PendingRegistryLogic::~PendingRegistryLogic(md::PendingRegistryLogic *this)
{
  *(void *)this = &unk_1EF53E810;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EF53E810;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void ggl::Clut::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::Clut::Pos2DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Clut::Pos2DUVPipelineSetup::textureIsEnabled(ggl::Clut::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Clut::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::Clut::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Clut::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::Clut::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::TransitNodeMissingFeature::decMissingFeatureRefCount(md::TransitNodeMissingFeature *this)
{
  if (atomic_fetch_add((atomic_uint *volatile)this + 14, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = *(void *)(*((void *)this + 8) + 8);
    if (v1) {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__erase_unique<unsigned long long>((void *)(v1 + 72), *((void *)this + 1));
    }
  }
}

uint64_t md::TransitNodeMissingFeature::incMissingFeatureRefCount(uint64_t this)
{
  return this;
}

BOOL md::TransitNodeMissingFeature::isUsedAsMissingFeature(md::TransitNodeMissingFeature *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 14);
  return v1 != 0;
}

void md::TransitNodeMissingFeature::~TransitNodeMissingFeature(md::TransitNodeMissingFeature *this)
{
  *(void *)this = &unk_1EF546E60;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      operator delete(v2);
      *((void *)this + 8) = 0;
    }
  }
  md::TransitNodeFeature::~TransitNodeFeature(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF546E60;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      operator delete(v2);
      *((void *)this + 8) = 0;
    }
  }
  md::TransitNodeFeature::~TransitNodeFeature(this);
}

void md::TransitNodeFeature::~TransitNodeFeature(md::TransitNodeFeature *this)
{
  *(void *)this = &unk_1EF53AE40;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    uint64_t v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      do
      {
        int8x8_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  uint64_t vars8;

  md::TransitNodeFeature::~TransitNodeFeature(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::TransitNodeFeature::isUsedAsMissingFeature(md::TransitNodeFeature *this)
{
  return 0;
}

md::TransitNodeFeature *md::TransitNodeFeature::TransitNodeFeature(md::TransitNodeFeature *this, unint64_t a2, md::LabelExternalObjectsModerator *a3)
{
  *(void *)this = &unk_1EF53AE40;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  md::LabelExternalObjectsModerator::externalTransitNode((md::LabelExternalObjectsModerator *)&v50, (uint64_t)a3, a2);
  if ((void)v50) {
    goto LABEL_92;
  }
  unint64_t v7 = operator new(0x38uLL);
  v7[1] = 0;
  void v7[2] = 0;
  *unint64_t v7 = &unk_1EF581B40;
  void v7[3] = a2;
  uint64_t v8 = *((void *)a3 + 3);
  v7[4] = *((void *)a3 + 2);
  void v7[5] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)v7 + 24) = 1280;
  char v9 = (std::__shared_weak_count *)*((void *)&v50 + 1);
  *(void *)&long long v50 = v7 + 3;
  *((void *)&v50 + 1) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::lock((std::mutex *)((char *)a3 + 368));
  unint64_t v10 = *((void *)a3 + 32);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v10 <= a2) {
        unint64_t v3 = a2 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & a2;
    }
    uint64_t v12 = *(void ***)(*((void *)a3 + 31) + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == a2)
            {
              if (v13[2] == a2) {
                goto LABEL_87;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_28;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == a2)
          {
            if (v13[2] == a2) {
              goto LABEL_87;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_28:
  uint64_t v13 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a3 + 35) + 16))(*((void *)a3 + 35), 40, 8);
  int v51 = v13;
  uint64_t v52 = (char *)a3 + 280;
  void *v13 = 0;
  v13[1] = a2;
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = a2;
  char v53 = 1;
  float v16 = (float)(unint64_t)(*((void *)a3 + 36) + 1);
  float v17 = *((float *)a3 + 74);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v10 = *((void *)a3 + 32);
    if (prime <= v10)
    {
      if (prime >= v10) {
        goto LABEL_64;
      }
      unint64_t v34 = vcvtps_u32_f32((float)*((unint64_t *)a3 + 36) / *((float *)a3 + 74));
      if (v10 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime >= v10)
      {
        unint64_t v10 = *((void *)a3 + 32);
LABEL_64:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v10 <= a2) {
            unint64_t v3 = a2 % v10;
          }
          else {
            unint64_t v3 = a2;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & a2;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        uint64_t v49 = *((void *)a3 + 31);
        *((void *)a3 + 31) = 0;
        if (v49) {
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)a3 + 33) + 40))(*((void *)a3 + 33), v49, 8 * *((void *)a3 + 32));
        }
        unint64_t v10 = 0;
        *((void *)a3 + 32) = 0;
        goto LABEL_64;
      }
    }
    uint64_t v22 = (*(uint64_t (**)(void, size_t, uint64_t))(**((void **)a3 + 33) + 16))(*((void *)a3 + 33), 8 * prime, 8);
    uint64_t v23 = *((void *)a3 + 31);
    *((void *)a3 + 31) = v22;
    if (v23) {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)a3 + 33) + 40))(*((void *)a3 + 33), v23, 8 * *((void *)a3 + 32));
    }
    uint64_t v24 = 0;
    *((void *)a3 + 32) = prime;
    do
      *(void *)(*((void *)a3 + 31) + 8 * v24++) = 0;
    while (prime != v24);
    uint64_t v25 = (void *)*((void *)a3 + 34);
    if (!v25)
    {
LABEL_63:
      unint64_t v10 = prime;
      goto LABEL_64;
    }
    uint64_t v26 = (char *)a3 + 272;
    size_t v27 = v25[1];
    size_t v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v29 = v27 & v28;
      *(void *)(*((void *)a3 + 31) + 8 * v29) = v26;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v31 = i[1] & v28;
        if (v31 == v29)
        {
          uint64_t v25 = i;
        }
        else
        {
          uint64_t v32 = *((void *)a3 + 31);
          if (*(void *)(v32 + 8 * v31))
          {
            void *v25 = *i;
            uint64_t v33 = 8 * v31;
            *uint64_t i = **(void **)(*((void *)a3 + 31) + v33);
            **(void **)(*((void *)a3 + 31) + v33) = i;
          }
          else
          {
            *(void *)(v32 + 8 * v31) = v25;
            uint64_t v25 = i;
            size_t v29 = v31;
          }
        }
      }
      goto LABEL_63;
    }
    if (v27 >= prime) {
      v27 %= prime;
    }
    *(void *)(*((void *)a3 + 31) + 8 * v27) = v26;
    unsigned int v37 = (void *)*v25;
    if (!*v25) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v39 = v37[1];
      if (v39 >= prime) {
        v39 %= prime;
      }
      if (v39 != v27)
      {
        uint64_t v40 = *((void *)a3 + 31);
        if (!*(void *)(v40 + 8 * v39))
        {
          *(void *)(v40 + 8 * v39) = v25;
          goto LABEL_68;
        }
        void *v25 = *v37;
        uint64_t v38 = 8 * v39;
        *unsigned int v37 = **(void **)(*((void *)a3 + 31) + v38);
        **(void **)(*((void *)a3 + 31) + v38) = v37;
        unsigned int v37 = v25;
      }
      size_t v39 = v27;
LABEL_68:
      uint64_t v25 = v37;
      unsigned int v37 = (void *)*v37;
      size_t v27 = v39;
      if (!v37) {
        goto LABEL_63;
      }
    }
  }
LABEL_77:
  uint64_t v41 = *(void **)(*((void *)a3 + 31) + 8 * v3);
  if (v41)
  {
    void *v13 = *v41;
  }
  else
  {
    void *v13 = *((void *)a3 + 34);
    *((void *)a3 + 34) = v13;
    *(void *)(*((void *)a3 + 31) + 8 * v3) = (char *)a3 + 272;
    if (!*v13) {
      goto LABEL_86;
    }
    unint64_t v42 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v42 >= v10) {
        v42 %= v10;
      }
    }
    else
    {
      v42 &= v10 - 1;
    }
    uint64_t v41 = (void *)(*((void *)a3 + 31) + 8 * v42);
  }
  *uint64_t v41 = v13;
LABEL_86:
  ++*((void *)a3 + 36);
LABEL_87:
  long long v43 = v50;
  if (*((void *)&v50 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v44 = (std::__shared_weak_count *)v13[4];
  *(_OWORD *)(v13 + 3) = v43;
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::mutex::unlock((std::mutex *)((char *)a3 + 368));
LABEL_92:
  long long v45 = v50;
  long long v50 = 0uLL;
  char v46 = (std::__shared_weak_count *)*((void *)this + 3);
  *((_OWORD *)this + 1) = v45;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  double v47 = (std::__shared_weak_count *)*((void *)&v50 + 1);
  if (*((void *)&v50 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  return this;
}

void sub_1A1F42A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<md::LabelExternalTransitNode>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<md::LabelExternalTransitNode>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a12);
  std::mutex::unlock(v13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v12 + 32));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v14);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  unsigned int v6 = *(unsigned __int8 *)(*a2 + 62);
  uint64_t v7 = *a3;
  unsigned int v8 = *(unsigned __int8 *)(*a3 + 62);
  if (v6 >= *(unsigned __int8 *)(*result + 62))
  {
    if (v8 < v6)
    {
      *a2 = v7;
      *a3 = v4;
      uint64_t v11 = a2 + 1;
      uint64_t v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      uint64_t v12 = *result;
      if (*(unsigned __int8 *)(*a2 + 62) < *(unsigned __int8 *)(*result + 62))
      {
        void *result = *a2;
        char v9 = result + 1;
        *a2 = v12;
LABEL_10:
        uint64_t v14 = *v9;
        uint64_t *v9 = *v11;
        *uint64_t v11 = v14;
      }
    }
  }
  else
  {
    if (v8 < v6)
    {
      char v9 = result + 1;
      void *result = v7;
LABEL_9:
      *a3 = v5;
      uint64_t v11 = a3 + 1;
      goto LABEL_10;
    }
    void *result = v4;
    *a2 = v5;
    char v9 = a2 + 1;
    uint64_t v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    uint64_t v5 = *a2;
    if (*(unsigned __int8 *)(*a3 + 62) < *(unsigned __int8 *)(*a2 + 62))
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  uint64_t v15 = *a3;
  if (*(unsigned __int8 *)(*a4 + 62) < *(unsigned __int8 *)(*a3 + 62))
  {
    *a3 = *a4;
    *a4 = v15;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    if (*(unsigned __int8 *)(*a3 + 62) < *(unsigned __int8 *)(*a2 + 62))
    {
      *a2 = *a3;
      *a3 = v17;
      uint64_t v18 = a2[1];
      a2[1] = a3[1];
      a3[1] = v18;
      uint64_t v19 = *result;
      if (*(unsigned __int8 *)(*a2 + 62) < *(unsigned __int8 *)(*result + 62))
      {
        void *result = *a2;
        *a2 = v19;
        uint64_t v20 = result[1];
        result[1] = a2[1];
        a2[1] = v20;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      if (*(unsigned __int8 *)(v6 + 62) < *(unsigned __int8 *)(*a1 + 62))
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        uint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      uint64_t v9 = a1[2];
      uint64_t v10 = *a1;
      unsigned int v11 = *(unsigned __int8 *)(v9 + 62);
      unsigned int v12 = *(unsigned __int8 *)(*a1 + 62);
      uint64_t v13 = *(a2 - 2);
      unsigned int v14 = *(unsigned __int8 *)(v13 + 62);
      if (v11 < v12)
      {
        if (v14 >= v11)
        {
          uint64_t v15 = a1 + 3;
          uint64_t v43 = a1[3];
          uint64_t v44 = a1[1];
          *a1 = v9;
          a1[1] = v43;
          a1[2] = v10;
          a1[3] = v44;
          uint64_t v45 = *(a2 - 2);
          if (*(unsigned __int8 *)(v45 + 62) >= v12) {
            return result;
          }
          a1[2] = v45;
        }
        else
        {
          uint64_t v15 = a1 + 1;
          *a1 = v13;
        }
        *(a2 - 2) = v10;
        unsigned int v37 = a2 - 1;
        goto LABEL_25;
      }
      if (v14 < v11)
      {
        a1[2] = v13;
        *(a2 - 2) = v9;
        unsigned int v37 = a1 + 3;
        uint64_t v36 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v36;
        uint64_t v38 = a1[2];
        uint64_t v39 = *a1;
        if (*(unsigned __int8 *)(v38 + 62) < *(unsigned __int8 *)(*a1 + 62))
        {
          *a1 = v38;
          a1[2] = v39;
          uint64_t v15 = a1 + 1;
LABEL_25:
          uint64_t v46 = *v15;
          uint64_t *v15 = *v37;
          *unsigned int v37 = v46;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, a1 + 2, a1 + 4, a1 + 6);
      uint64_t v24 = *(a2 - 2);
      uint64_t v25 = a1[6];
      if (*(unsigned __int8 *)(v24 + 62) < *(unsigned __int8 *)(v25 + 62))
      {
        a1[6] = v24;
        *(a2 - 2) = v25;
        uint64_t v26 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v26;
        uint64_t v27 = a1[6];
        uint64_t v28 = a1[4];
        unsigned int v29 = *(unsigned __int8 *)(v27 + 62);
        if (v29 < *(unsigned __int8 *)(v28 + 62))
        {
          uint64_t v30 = a1[5];
          uint64_t v31 = a1[7];
          a1[4] = v27;
          a1[5] = v31;
          a1[6] = v28;
          a1[7] = v30;
          uint64_t v32 = a1[2];
          if (v29 < *(unsigned __int8 *)(v32 + 62))
          {
            uint64_t v33 = a1[3];
            a1[2] = v27;
            a1[3] = v31;
            a1[4] = v32;
            a1[5] = v33;
            uint64_t v34 = *a1;
            if (v29 < *(unsigned __int8 *)(*a1 + 62))
            {
              uint64_t v35 = a1[1];
              *a1 = v27;
              a1[1] = v31;
              a1[2] = v34;
              a1[3] = v35;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v16 = a1 + 4;
      uint64_t v17 = a1[4];
      uint64_t v18 = a1[2];
      uint64_t v19 = *a1;
      unsigned int v20 = *(unsigned __int8 *)(v18 + 62);
      unsigned int v21 = *(unsigned __int8 *)(*a1 + 62);
      unsigned int v22 = *(unsigned __int8 *)(v17 + 62);
      if (v20 < v21)
      {
        if (v22 >= v20)
        {
          uint64_t v23 = a1 + 3;
          uint64_t v47 = a1[3];
          uint64_t v48 = a1[1];
          *a1 = v18;
          a1[1] = v47;
          a1[2] = v19;
          a1[3] = v48;
          if (v22 >= v21) {
            goto LABEL_30;
          }
          a1[2] = v17;
        }
        else
        {
          uint64_t v23 = a1 + 1;
          *a1 = v17;
        }
        a1[4] = v19;
        unsigned int v41 = a1 + 5;
        goto LABEL_29;
      }
      if (v22 < v20)
      {
        unsigned int v41 = a1 + 3;
        uint64_t v40 = a1[3];
        uint64_t v42 = a1[5];
        a1[4] = v18;
        a1[5] = v40;
        a1[2] = v17;
        a1[3] = v42;
        if (v22 < v21)
        {
          *a1 = v17;
          a1[2] = v19;
          uint64_t v23 = a1 + 1;
LABEL_29:
          uint64_t v49 = *v23;
          *uint64_t v23 = *v41;
          *unsigned int v41 = v49;
        }
      }
LABEL_30:
      long long v50 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v51 = 0;
      int v52 = 0;
      while (1)
      {
        uint64_t v53 = *v50;
        uint64_t v54 = *v16;
        if (*(unsigned __int8 *)(*v50 + 62) < *(unsigned __int8 *)(v54 + 62))
        {
          uint64_t v55 = v50[1];
          uint64_t v56 = v51;
          *long long v50 = 0;
          v50[1] = 0;
          while (1)
          {
            uint64_t v57 = (uint64_t *)((char *)a1 + v56);
            uint64_t v58 = *(uint64_t *)((char *)a1 + v56 + 40);
            v57[4] = 0;
            v57[5] = 0;
            unsigned int v59 = *(std::__shared_weak_count **)((char *)a1 + v56 + 56);
            v57[6] = v54;
            v57[7] = v58;
            if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
            if (v56 == -32) {
              break;
            }
            uint64_t v54 = *(uint64_t *)((char *)a1 + v56 + 16);
            v56 -= 16;
            if (*(unsigned __int8 *)(v53 + 62) >= *(unsigned __int8 *)(v54 + 62))
            {
              unsigned int v60 = (uint64_t *)((char *)a1 + v56 + 48);
              goto LABEL_43;
            }
          }
          unsigned int v60 = a1;
LABEL_43:
          uint64_t v61 = (std::__shared_weak_count *)v60[1];
          uint64_t *v60 = v53;
          v60[1] = v55;
          if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
          if (++v52 == 8) {
            return v50 + 2 == a2;
          }
        }
        uint64_t v16 = v50;
        v51 += 16;
        v50 += 2;
        if (v50 == a2) {
          return 1;
        }
      }
  }
}

void md::LabelExternalMeshModerator::requestExternalMesh(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v6 = *(char **)(a1 + 48);
  unint64_t v5 = *(void *)(a1 + 56);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(char **)(a1 + 40);
    uint64_t v10 = (v6 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v14 = (char *)operator new(16 * v13);
    uint64_t v15 = &v14[16 * v10];
    long long v16 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v16 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v9 = *(char **)(a1 + 40);
      uint64_t v6 = *(char **)(a1 + 48);
    }
    uint64_t v17 = &v14[16 * v13];
    uint64_t v8 = v15 + 16;
    if (v6 == v9)
    {
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = v17;
    }
    else
    {
      do
      {
        long long v18 = *((_OWORD *)v6 - 1);
        v6 -= 16;
        *((_OWORD *)v15 - 1) = v18;
        v15 -= 16;
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = 0;
      }
      while (v6 != v9);
      uint64_t v9 = *(char **)(a1 + 40);
      uint64_t v19 = *(char **)(a1 + 48);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v8;
      for (*(void *)(a1 + 56) = v17; v19 != v9; v19 -= 16)
      {
        unsigned int v20 = (std::__shared_weak_count *)*((void *)v19 - 1);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)uint64_t v6 = *(void *)a2;
    *((void *)v6 + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6 + 16;
  }
  *(void *)(a1 + 48) = v8;
  std::mutex::unlock(v4);
}

void sub_1A1F44308(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  unint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    unint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos2UVMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2UVMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonBase::MeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonBase::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonBase::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x3070CB6B3C7F21D3 && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t gdc::ObjectHolder<md::GeometryContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::GeometryContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5554D8;
  unsigned int v1 = (md::GeometryContext *)a1[4];
  if (v1)
  {
    md::GeometryContext::~GeometryContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::GeometryContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5554D8;
  uint64_t v2 = (md::GeometryContext *)a1[4];
  if (v2)
  {
    md::GeometryContext::~GeometryContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

double md::GeometryLogic::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void md::GeometryLogic::~GeometryLogic(md::GeometryLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

__n128 gdc::GlobeTileUtils::computeMercatorScaleCoeffs(double a1, double a2)
{
  double v4 = a2 - a1;
  float32_t v5 = cosh(a1 * 6.28318531 + -3.14159265);
  v113.f32[0] = v5;
  float32_t v6 = cosh((a1 + v4 * 0.142857149) * 6.28318531 + -3.14159265);
  v113.f32[1] = v6;
  float32_t v7 = cosh((a1 + v4 * 0.285714298) * 6.28318531 + -3.14159265);
  v113.f32[2] = v7;
  float32_t v8 = cosh((a1 + v4 * 0.428571463) * 6.28318531 + -3.14159265);
  v113.f32[3] = v8;
  float32_t v9 = cosh((a1 + v4 * 0.571428597) * 6.28318531 + -3.14159265);
  v114.f32[0] = v9;
  float32_t v10 = cosh((a1 + v4 * 0.714285731) * 6.28318531 + -3.14159265);
  v114.f32[1] = v10;
  float32_t v11 = cosh((a1 + v4 * 0.857142925) * 6.28318531 + -3.14159265);
  v114.f32[2] = v11;
  float32_t v12 = cosh(a2 * 6.28318531 + -3.14159265);
  v114.f32[3] = v12;
  uint64_t v13 = (float *)malloc_type_calloc(9uLL, 4uLL, 0x100004052888210uLL);
  unsigned int v14 = (float *)malloc_type_malloc(0x18uLL, 0x100004052888210uLL);
  uint64_t v15 = (float32x2_t *)malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
  long long v16 = (float *)malloc_type_calloc(3uLL, 4uLL, 0x100004052888210uLL);
  uint64_t v17 = (float32x2_t *)malloc_type_calloc(3uLL, 4uLL, 0x100004052888210uLL);
  long long v18 = (float32x4_t *)malloc_type_malloc(0x60uLL, 0x100004052888210uLL);
  uint64_t v19 = v18;
  __asm { FMOV            V0.4S, #1.0 }
  v18[2] = (float32x4_t)xmmword_1A28FD420;
  *long long v18 = _Q0;
  v18[1] = _Q0;
  void v18[3] = (float32x4_t)xmmword_1A28FD440;
  v18[4] = (float32x4_t)xmmword_1A28FD430;
  v18[5] = (float32x4_t)xmmword_1A28FD450;
  unint64_t v24 = (unint64_t)v17 + 4;
  float v25 = v17->f32[0];
  if (v17 >= (float32x2_t *)&v18[2] || (unint64_t)v18 >= v24)
  {
    float32x4_t v34 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v25), *v18, *v18), v18[1], v18[1]);
    float v33 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34));
  }
  else
  {
    float32_t v26 = v25 + (float)(v18->f32[0] * v18->f32[0]);
    v17->f32[0] = v26;
    float32_t v27 = v26 + (float)(v18->f32[1] * v18->f32[1]);
    v17->f32[0] = v27;
    float32_t v28 = v27 + (float)(v18->f32[2] * v18->f32[2]);
    v17->f32[0] = v28;
    float32_t v29 = v28 + (float)(v18->f32[3] * v18->f32[3]);
    v17->f32[0] = v29;
    float32_t v30 = v29 + (float)(v18[1].f32[0] * v18[1].f32[0]);
    v17->f32[0] = v30;
    float32_t v31 = v30 + (float)(v18[1].f32[1] * v18[1].f32[1]);
    v17->f32[0] = v31;
    float32_t v32 = v31 + (float)(v18[1].f32[2] * v18[1].f32[2]);
    v17->f32[0] = v32;
    float v33 = v32 + (float)(v18[1].f32[3] * v18[1].f32[3]);
    v17->f32[0] = v33;
  }
  v17->f32[0] = sqrtf(v33);
  float v35 = v17->f32[1];
  unint64_t v36 = (unint64_t)&v17[1];
  if (v24 >= (unint64_t)&v18[4] || (unint64_t)&v18[2] >= v36)
  {
    float32x4_t v45 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v35), v18[2], v18[2]), v18[3], v18[3]);
    float v44 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45));
  }
  else
  {
    float32_t v37 = v35 + (float)(v18[2].f32[0] * v18[2].f32[0]);
    v17->f32[1] = v37;
    float32_t v38 = v37 + (float)(v18[2].f32[1] * v18[2].f32[1]);
    v17->f32[1] = v38;
    float32_t v39 = v38 + (float)(v18[2].f32[2] * v18[2].f32[2]);
    v17->f32[1] = v39;
    float32_t v40 = v39 + (float)(v18[2].f32[3] * v18[2].f32[3]);
    v17->f32[1] = v40;
    float32_t v41 = v40 + (float)(v18[3].f32[0] * v18[3].f32[0]);
    v17->f32[1] = v41;
    float32_t v42 = v41 + (float)(v18[3].f32[1] * v18[3].f32[1]);
    v17->f32[1] = v42;
    float32_t v43 = v42 + (float)(v18[3].f32[2] * v18[3].f32[2]);
    v17->f32[1] = v43;
    float v44 = v43 + (float)(v18[3].f32[3] * v18[3].f32[3]);
    v17->f32[1] = v44;
  }
  v17->f32[1] = sqrtf(v44);
  float v46 = v17[1].f32[0];
  if (v36 >= (unint64_t)&v18[6] || &v18[4] >= (float32x4_t *)((char *)&v17[1] + 4))
  {
    float32x4_t v55 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v46), v18[4], v18[4]), v18[5], v18[5]);
    float v54 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v55, v55));
  }
  else
  {
    float32_t v47 = v46 + (float)(v18[4].f32[0] * v18[4].f32[0]);
    v17[1].f32[0] = v47;
    float32_t v48 = v47 + (float)(v18[4].f32[1] * v18[4].f32[1]);
    v17[1].f32[0] = v48;
    float32_t v49 = v48 + (float)(v18[4].f32[2] * v18[4].f32[2]);
    v17[1].f32[0] = v49;
    float32_t v50 = v49 + (float)(v18[4].f32[3] * v18[4].f32[3]);
    v17[1].f32[0] = v50;
    float32_t v51 = v50 + (float)(v18[5].f32[0] * v18[5].f32[0]);
    v17[1].f32[0] = v51;
    float32_t v52 = v51 + (float)(v18[5].f32[1] * v18[5].f32[1]);
    v17[1].f32[0] = v52;
    float32_t v53 = v52 + (float)(v18[5].f32[2] * v18[5].f32[2]);
    v17[1].f32[0] = v53;
    float v54 = v53 + (float)(v18[5].f32[3] * v18[5].f32[3]);
    v17[1].f32[0] = v54;
  }
  uint64_t v56 = 0;
  v17[1].f32[0] = sqrtf(v54);
  uint64_t v57 = v13 + 1;
  for (uint64_t i = 1; i != 7; i += 2)
  {
    float32x4_t v59 = vmlaq_f32(vmulq_f32(v18[i - 1], *v18), v18[1], v18[i]);
    *(v57 - 1) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59)) / (float)(v17->f32[v56] * v17->f32[0]);
    float32x4_t v60 = vmlaq_f32(vmulq_f32(v18[i - 1], v18[2]), v18[3], v18[i]);
    float *v57 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v60, v60)) / (float)(v17->f32[v56] * v17->f32[1]);
    float32x4_t v61 = vmlaq_f32(vmulq_f32(v18[i - 1], v18[4]), v18[5], v18[i]);
    v57[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v61, v61)) / (float)(v17->f32[v56] * v17[1].f32[0]);
    v57 += 3;
    ++v56;
  }
  uint64_t v62 = 0;
  for (uint64_t j = 0; j != 6; j += 2)
  {
    f32 = v18[j].f32;
    uint64_t v73 = &v16[v62 + 1];
    float v74 = v16[v62];
    BOOL v76 = &v16[v62] < (float *)&v115 && v73 > (float *)&v113;
    _CF = f32 >= v73 || &v16[v62] >= v18[j + 2].f32;
    if (!_CF || v76)
    {
      float v64 = v74 + (float)(v113.f32[0] * *f32);
      v16[v62] = v64;
      float v65 = v64 + (float)(v113.f32[1] * f32[1]);
      v16[v62] = v65;
      float v66 = v65 + (float)(v113.f32[2] * f32[2]);
      v16[v62] = v66;
      float v67 = v66 + (float)(v113.f32[3] * f32[3]);
      v16[v62] = v67;
      float v68 = v67 + (float)(v114.f32[0] * f32[4]);
      v16[v62] = v68;
      float v69 = v68 + (float)(v114.f32[1] * f32[5]);
      v16[v62] = v69;
      float v70 = v69 + (float)(v114.f32[2] * f32[6]);
      v16[v62] = v70;
      float v71 = v70 + (float)(v114.f32[3] * f32[7]);
    }
    else
    {
      float32x4_t v78 = vmlaq_f32(vmlaq_f32((float32x4_t)LODWORD(v74), v18[j], v113), v18[j + 1], v114);
      float v71 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v78, v78));
    }
    v16[v62] = v71;
    v16[v62] = v71 / v17->f32[v62];
    ++v62;
  }
  unint64_t v79 = 0;
  uint64_t v80 = 2;
  uint64_t v81 = v14;
  unsigned __int8 v82 = v13;
  do
  {
    float v83 = *v82;
    *uint64_t v81 = *v82;
    float v84 = &v81[-v79];
    if (v79)
    {
      float v83 = v83 - (float)(*v84 * *v84);
      *uint64_t v81 = v83;
      if (v79 != 1)
      {
        float v83 = v83 - (float)(v84[1] * v84[1]);
        *uint64_t v81 = v83;
      }
    }
    float v86 = *v82;
    uint64_t v85 = v82 + 1;
    *uint64_t v81 = sqrtf(fmaxf(v83, v86 * 0.000000001));
    if (v79 <= 1)
    {
      uint64_t v87 = &v81[v79 + 1];
      if (v79)
      {
        uint64_t v88 = v80;
        do
        {
          float v89 = *v85;
          *uint64_t v87 = *v85;
          float v90 = v89 - (float)(*v84 * v87[-v79]);
          *uint64_t v87 = v90;
          *uint64_t v87 = v90 / *v81;
          v87 += v88;
          ++v85;
          ++v88;
        }
        while (v88 != 4);
      }
      else
      {
        uint64_t v91 = v80;
        do
        {
          float v92 = *v85++;
          *uint64_t v87 = v92;
          *uint64_t v87 = v92 / *v81;
          v87 += v91++;
        }
        while (v91 != 4);
      }
    }
    v81 += v79 + 2;
    unsigned __int8 v82 = &v85[v79 + 1];
    ++v80;
    ++v79;
  }
  while (v79 != 3);
  float v93 = (float *)malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
  float v94 = *v16;
  float *v93 = *v16;
  float v95 = v94 / *v14;
  float *v93 = v95;
  float v96 = v16[1];
  v93[1] = v96;
  float v97 = v96 - (float)(v95 * v14[1]);
  v93[1] = v97;
  float v98 = v97 / v14[2];
  v93[1] = v98;
  float v99 = v16[2];
  v93[2] = v99;
  float v100 = v99 - (float)(v95 * v14[3]);
  v93[2] = v100;
  float v101 = v100 - (float)(v98 * v14[4]);
  v93[2] = v101;
  float v102 = v101 / v14[5];
  v93[2] = v102;
  v15[1].f32[0] = v102;
  float32_t v103 = v102 / v14[5];
  v15[1].f32[0] = v103;
  float v104 = v93[1];
  v15->f32[1] = v104;
  float32_t v105 = v104 - (float)(v103 * v14[4]);
  v15->f32[1] = v105;
  float32_t v106 = v105 / v14[2];
  v15->f32[1] = v106;
  float v107 = *v93;
  v15->f32[0] = *v93;
  float32_t v108 = v107 - (float)(v106 * v14[1]);
  v15->f32[0] = v108;
  float32_t v109 = v108 - (float)(v103 * v14[3]);
  v15->f32[0] = v109;
  v15->f32[0] = v109 / *v14;
  free(v93);
  *(float32x2_t *)&long long v110 = vdiv_f32(*v15, *v17);
  long long v112 = v110;
  free(v13);
  free(v14);
  free(v15);
  free(v16);
  free(v17);
  free(v19);
  return (__n128)v112;
}

void md::GeometryLogic::setTransformConstantDataWithMercatorRect(void *a1, double *a2, char a3, double a4, double a5, float a6)
{
  if (a3)
  {
    gdc::GlobeTileUtils::createSplinePatchFromMercatorRect((uint64_t)&v91, a2, a4, a5);
    long long v86 = 0uLL;
    unint64_t v11 = a1[1];
    *(void *)&long long v12 = 0;
    *((void *)&v12 + 1) = a1;
    uint64_t v13 = a1[9];
    long long v86 = v12;
    unint64_t v87 = 0;
    unint64_t v88 = v11;
    float v90 = (float *)v13;
    __int16 v89 = 1;
    DWORD2(v12) = v92;
    *(void *)(v13 + 32) = v91;
    *(_DWORD *)(v13 + 40) = DWORD2(v12);
    *(_DWORD *)(v13 + 44) = 1065353216;
    uint64_t v14 = v93;
    *(_DWORD *)(v13 + 56) = v94;
    *(void *)(v13 + 48) = v14;
    *(_DWORD *)(v13 + 60) = 1065353216;
    uint64_t v15 = v95;
    int v16 = v98;
    *(_DWORD *)(v13 + 72) = v96;
    *(void *)(v13 + 64) = v15;
    *(_DWORD *)(v13 + 76) = 1065353216;
    uint64_t v17 = v97;
    *(_DWORD *)(v13 + 88) = v16;
    *(void *)(v13 + 80) = v17;
    *(_DWORD *)(v13 + 92) = 1065353216;
    *(void *)&long long v12 = v99;
    *(_DWORD *)(v13 + 104) = v100;
    *(void *)(v13 + 96) = v12;
    *(_DWORD *)(v13 + 108) = 1065353216;
    uint64_t v18 = v101;
    *(_DWORD *)(v13 + 120) = v102;
    *(void *)(v13 + 112) = v18;
    *(_DWORD *)(v13 + 124) = 1065353216;
    uint64_t v19 = v103;
    int v20 = v106;
    *(_DWORD *)(v13 + 136) = v104;
    *(void *)(v13 + 128) = v19;
    *(_DWORD *)(v13 + 140) = 1065353216;
    uint64_t v21 = v105;
    *(_DWORD *)(v13 + 152) = v20;
    *(void *)(v13 + 144) = v21;
    *(_DWORD *)(v13 + 156) = 1065353216;
    *(void *)&long long v12 = v107;
    *(_DWORD *)(v13 + 168) = v108;
    *(void *)(v13 + 160) = v12;
    *(_DWORD *)(v13 + 172) = 1065353216;
    uint64_t v22 = v109;
    *(_DWORD *)(v13 + 184) = v110;
    *(void *)(v13 + 176) = v22;
    *(_DWORD *)(v13 + 188) = 1065353216;
    uint64_t v23 = v111;
    int v24 = v114;
    *(_DWORD *)(v13 + 200) = v112;
    *(void *)(v13 + 192) = v23;
    *(_DWORD *)(v13 + 204) = 1065353216;
    uint64_t v25 = v113;
    *(_DWORD *)(v13 + 216) = v24;
    *(void *)(v13 + 208) = v25;
    *(_DWORD *)(v13 + 220) = 1065353216;
    *(void *)&long long v12 = v115;
    *(_DWORD *)(v13 + 232) = v116;
    *(void *)(v13 + 224) = v12;
    *(_DWORD *)(v13 + 236) = 1065353216;
    uint64_t v26 = v117;
    *(_DWORD *)(v13 + 248) = v118;
    *(void *)(v13 + 240) = v26;
    *(_DWORD *)(v13 + 252) = 1065353216;
    uint64_t v27 = v119;
    int v28 = v122;
    *(_DWORD *)(v13 + 264) = v120;
    *(void *)(v13 + 256) = v27;
    *(_DWORD *)(v13 + 268) = 1065353216;
    uint64_t v29 = v121;
    *(_DWORD *)(v13 + 280) = v28;
    *(void *)(v13 + 272) = v29;
    *(_DWORD *)(v13 + 284) = 1065353216;
    double v30 = gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(a2[1], a2[3]);
    float32_t v31 = v90;
    *float v90 = *(float *)&v30;
    *((_DWORD *)v31 + 1) = v32;
    *((_DWORD *)v31 + 2) = v33;
    *((_DWORD *)v31 + 3) = v34;
    float v35 = +[VKDebugSettings sharedSettings];
    if ([v35 daVinciGlobeScalingCorrection])
    {
      unsigned __int32 v36 = gdc::GlobeTileUtils::computeMercatorScaleCoeffs(a2[1], a2[3]).n128_u32[0];
    }
    else
    {
      int v37 = 0;
      unsigned __int32 v36 = 1.0;
      int v38 = 0;
    }
    *((_DWORD *)v31 + 4) = v36;
    *((_DWORD *)v31 + 5) = v37;
    *((_DWORD *)v31 + 6) = v38;

    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v73, a2, a4, a5);
    double v41 = v85;
    double v42 = v82;
    double v43 = v83;
    double v44 = v80;
    double v45 = v85 - v82;
    float v46 = 1.0 / (v85 - v82);
    double v47 = v46;
    float v48 = (a5 - a4) * v47;
    v31[85] = v48;
    __asm { FMOV            V5.2S, #1.0 }
    *((void *)v31 + 43) = _D5;
    *(float *)&double v47 = (a6 + a4) * v47;
    v31[84] = *(float *)&v47;
    if (v43 < v44 || v84 < v81 || v41 < v42)
    {
      memset_pattern16(__b, &unk_1A28FFCE0, 0x18uLL);
      double v54 = *(double *)__b;
      double v55 = *(double *)&__b[1];
      double v56 = *(double *)&__b[2];
    }
    else
    {
      double v57 = -(v75 * v77 - v74 * v78) - (v75 * v77 - v74 * v78);
      double v58 = -(v73 * v78 - v75 * v76) - (v73 * v78 - v75 * v76);
      double v59 = -(v74 * v76 - v73 * v77) - (v74 * v76 - v73 * v77);
      double v54 = (v59 * v77 - (v73 + v44 + v57 * v79 + v58 * v78)) / (v43 - v44);
      double v55 = (v74 - v57 * v78 + v58 * v79 + v59 * v76 + v81) / (v81 - v84);
      double v56 = (v58 * v76 - (v42 + v75 + v57 * v77 + v59 * v79)) / v45;
    }
    float v60 = v56;
    float v61 = v55;
    float v62 = v54;
    v31[72] = v62;
    v31[73] = v61;
    v31[74] = v60;
    v31[75] = 1.0;
    unint64_t v64 = v87;
    unint64_t v63 = v88;
    if (v88 != v87)
    {
      float v65 = (void *)*((void *)&v86 + 1);
      int v66 = v89;
      int v67 = HIBYTE(v89);
      if ((void)v86 && *(unsigned char *)(*((void *)&v86 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v86 + 64))();
      }
      if (v66 && !v67)
      {
        unint64_t v69 = v65[7];
        unint64_t v68 = v65[8];
        if (v68 == v69) {
          unint64_t v69 = v65[10] - v65[9];
        }
        if (v64 < v69) {
          unint64_t v69 = v64;
        }
        if (v68 <= v63) {
          unint64_t v68 = v63;
        }
        if (v68 == v69) {
          unint64_t v68 = v69 + v65[10] - v65[9];
        }
        v65[7] = v69;
        v65[8] = v68;
      }
    }
  }
  else
  {
    unint64_t v39 = a1[1];
    if (v39) {
      uint64_t v40 = a1[9];
    }
    else {
      uint64_t v40 = 0;
    }
    double v70 = a5 - a4;
    if (a5 - a4 == 0.0) {
      double v70 = 1.0;
    }
    float v71 = a6 * 0.0000000249532021 / v70;
    *(float *)(v40 + 336) = v71;
    *(_DWORD *)(v40 + 348) = 1065353216;
    __asm { FMOV            V0.4S, #1.0 }
    *(void *)(v40 + 340) = _Q0;
    if (v40 && v39)
    {
      if (a1[8] > v39) {
        unint64_t v39 = a1[8];
      }
      a1[7] = 0;
      a1[8] = v39;
    }
  }
}

void sub_1A1F45488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void md::GeometryLogic::tileMatrix(md::GeometryLogic *this, int a2, const QuadTile *a3, double a4, double a5)
{
  if (a2)
  {
    double v6 = fmax(a4, 0.0);
    int v7 = 1 << a3->_level;
    double v8 = 1.0 / (double)v7;
    uint64_t xIdx = a3->_xIdx;
    int v10 = v7 + ~a3->_yIdx;
    double v41 = v8 * (double)xIdx;
    *(double *)&long long v42 = v8 * (double)v10;
    *((double *)&v42 + 1) = v8 + (double)xIdx * v8;
    *(double *)&long long v43 = v8 + (double)v10 * v8;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v26, &v41, 0.0, v6);
    long long v44 = 0u;
    uint64_t v46 = 0;
    uint64_t v48 = 0;
    long long v45 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v49 = v32;
    double v50 = v33;
    uint64_t v51 = 0x3FF0000000000000;
    double v41 = v34 - *(double *)&v32;
    *(double *)&long long v44 = v35 - *((double *)&v32 + 1);
    double v47 = v36 - v33;
    double v11 = v29;
    double v12 = v30;
    double v13 = v11 + v11;
    double v14 = (v11 + v11) * v11;
    double v15 = (v12 + v12) * v12;
    double v16 = v28;
    double v17 = v16 + v16;
    double v18 = (v16 + v16) * v29;
    double v19 = (v12 + v12) * v31;
    double v20 = v30 * (v16 + v16);
    double v21 = 1.0 - (v16 + v16) * v16;
    v37[0] = 1.0 - (v14 + v15);
    v37[1] = v19 + v18;
    v37[4] = v18 - v19;
    v37[5] = v21 - v15;
    v37[8] = v31 * v13 + v20;
    v37[9] = v13 * v30 - v31 * v17;
    v37[2] = v20 - v31 * v13;
    v37[6] = v31 * v17 + v13 * v30;
    v37[10] = v21 - v14;
    void v37[3] = 0.0;
    v37[7] = 0.0;
    v37[11] = 0.0;
    long long v38 = v26;
    uint64_t v39 = v27;
    uint64_t v40 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)this, v37, &v41);
  }
  else
  {
    int v22 = 1 << a3->_level;
    double v23 = 1.0 / (double)v22;
    uint64_t v24 = a3->_xIdx;
    int v25 = ~a3->_yIdx;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *((void *)this + 11) = 0;
    *(double *)this = v23;
    *((double *)this + 5) = v23;
    *((double *)this + 10) = v23;
    *((double *)this + 12) = v23 * (double)v24;
    *((double *)this + 13) = v23 * (double)(v22 + v25);
    *((_OWORD *)this + 7) = xmmword_1A28FCCC0;
  }
}

void md::GeometryLogic::createBox(char **a1, char **a2)
{
  float32_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v7 = *a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555) {
      goto LABEL_971;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        goto LABEL_972;
      }
      double v12 = (char *)operator new(12 * v11);
    }
    else
    {
      double v12 = 0;
    }
    double v13 = &v12[12 * v8];
    *((_DWORD *)v13 + 2) = 0;
    *(void *)double v13 = 0;
    double v6 = v13 + 12;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *(void *)(v5 - 12);
        v5 -= 12;
        int v15 = *((_DWORD *)v5 + 2);
        *(void *)(v13 - 12) = v14;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      float32_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[12 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *((_DWORD *)v5 + 2) = 0;
    double v6 = v5 + 12;
    *(void *)float32_t v5 = 0;
  }
  a1[1] = v6;
  unint64_t v16 = (unint64_t)a1[2];
  if ((unint64_t)v6 < v16)
  {
    *((_DWORD *)v6 + 2) = 0;
    *(void *)double v6 = 1065353216;
    double v17 = v6 + 12;
    goto LABEL_36;
  }
  double v18 = *a1;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 2);
  unint64_t v20 = v19 + 1;
  if (v19 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v18) >> 2);
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v22 = 0x1555555555555555;
  }
  else {
    unint64_t v22 = v20;
  }
  if (v22)
  {
    if (v22 > 0x1555555555555555) {
      goto LABEL_972;
    }
    double v23 = (char *)operator new(12 * v22);
  }
  else
  {
    double v23 = 0;
  }
  uint64_t v24 = &v23[12 * v19];
  int v25 = &v23[12 * v22];
  *((_DWORD *)v24 + 2) = 0;
  *(void *)uint64_t v24 = 1065353216;
  double v17 = v24 + 12;
  if (v6 == v18)
  {
    *a1 = v24;
    a1[1] = v17;
    a1[2] = v25;
LABEL_35:
    operator delete(v6);
    goto LABEL_36;
  }
  do
  {
    uint64_t v26 = *(void *)(v6 - 12);
    v6 -= 12;
    int v27 = *((_DWORD *)v6 + 2);
    *(void *)(v24 - 12) = v26;
    v24 -= 12;
    *((_DWORD *)v24 + 2) = v27;
  }
  while (v6 != v18);
  double v6 = *a1;
  *a1 = v24;
  a1[1] = v17;
  a1[2] = v25;
  if (v6) {
    goto LABEL_35;
  }
LABEL_36:
  a1[1] = v17;
  unint64_t v28 = (unint64_t)a1[2];
  if ((unint64_t)v17 < v28)
  {
    *((_DWORD *)v17 + 2) = 0;
    *(void *)double v17 = 0x3F80000000000000;
    double v29 = v17 + 12;
    goto LABEL_54;
  }
  double v30 = *a1;
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a1) >> 2);
  unint64_t v32 = v31 + 1;
  if (v31 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v30) >> 2);
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  if (v33 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v34 = 0x1555555555555555;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v34)
  {
    if (v34 > 0x1555555555555555) {
      goto LABEL_972;
    }
    double v35 = (char *)operator new(12 * v34);
  }
  else
  {
    double v35 = 0;
  }
  double v36 = &v35[12 * v31];
  int v37 = &v35[12 * v34];
  *((_DWORD *)v36 + 2) = 0;
  *(void *)double v36 = 0x3F80000000000000;
  double v29 = v36 + 12;
  if (v17 == v30)
  {
    *a1 = v36;
    a1[1] = v29;
    a1[2] = v37;
LABEL_53:
    operator delete(v17);
    goto LABEL_54;
  }
  do
  {
    uint64_t v38 = *(void *)(v17 - 12);
    v17 -= 12;
    int v39 = *((_DWORD *)v17 + 2);
    *(void *)(v36 - 12) = v38;
    v36 -= 12;
    *((_DWORD *)v36 + 2) = v39;
  }
  while (v17 != v30);
  double v17 = *a1;
  *a1 = v36;
  a1[1] = v29;
  a1[2] = v37;
  if (v17) {
    goto LABEL_53;
  }
LABEL_54:
  a1[1] = v29;
  unint64_t v40 = (unint64_t)a1[2];
  if ((unint64_t)v29 < v40)
  {
    *((_DWORD *)v29 + 2) = 0;
    __asm { FMOV            V0.4S, #1.0 }
    *(void *)double v29 = _Q0;
    uint64_t v46 = v29 + 12;
    goto LABEL_72;
  }
  double v47 = *a1;
  unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a1) >> 2);
  unint64_t v49 = v48 + 1;
  if (v48 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v47) >> 2);
  if (2 * v50 > v49) {
    unint64_t v49 = 2 * v50;
  }
  if (v50 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v51 = 0x1555555555555555;
  }
  else {
    unint64_t v51 = v49;
  }
  if (v51)
  {
    if (v51 > 0x1555555555555555) {
      goto LABEL_972;
    }
    float32_t v52 = (char *)operator new(12 * v51);
  }
  else
  {
    float32_t v52 = 0;
  }
  float32_t v53 = &v52[12 * v48];
  double v54 = &v52[12 * v51];
  *((_DWORD *)v53 + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(void *)float32_t v53 = _Q0;
  uint64_t v46 = v53 + 12;
  if (v29 == v47)
  {
    *a1 = v53;
    a1[1] = v46;
    a1[2] = v54;
LABEL_71:
    operator delete(v29);
    goto LABEL_72;
  }
  do
  {
    uint64_t v56 = *(void *)(v29 - 12);
    v29 -= 12;
    int v57 = *((_DWORD *)v29 + 2);
    *(void *)(v53 - 12) = v56;
    v53 -= 12;
    *((_DWORD *)v53 + 2) = v57;
  }
  while (v29 != v47);
  double v29 = *a1;
  *a1 = v53;
  a1[1] = v46;
  a1[2] = v54;
  if (v29) {
    goto LABEL_71;
  }
LABEL_72:
  a1[1] = v46;
  unint64_t v58 = (unint64_t)a1[2];
  if ((unint64_t)v46 < v58)
  {
    *((_DWORD *)v46 + 2) = 1065353216;
    *(void *)uint64_t v46 = 0;
    double v59 = v46 + 12;
    goto LABEL_90;
  }
  float v60 = *a1;
  unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((v46 - *a1) >> 2);
  unint64_t v62 = v61 + 1;
  if (v61 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)v60) >> 2);
  if (2 * v63 > v62) {
    unint64_t v62 = 2 * v63;
  }
  if (v63 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v64 = 0x1555555555555555;
  }
  else {
    unint64_t v64 = v62;
  }
  if (v64)
  {
    if (v64 > 0x1555555555555555) {
      goto LABEL_972;
    }
    float v65 = (char *)operator new(12 * v64);
  }
  else
  {
    float v65 = 0;
  }
  int v66 = &v65[12 * v61];
  int v67 = &v65[12 * v64];
  *((_DWORD *)v66 + 2) = 1065353216;
  *(void *)int v66 = 0;
  double v59 = v66 + 12;
  if (v46 == v60)
  {
    *a1 = v66;
    a1[1] = v59;
    a1[2] = v67;
LABEL_89:
    operator delete(v46);
    goto LABEL_90;
  }
  do
  {
    uint64_t v68 = *(void *)(v46 - 12);
    v46 -= 12;
    int v69 = *((_DWORD *)v46 + 2);
    *(void *)(v66 - 12) = v68;
    v66 -= 12;
    *((_DWORD *)v66 + 2) = v69;
  }
  while (v46 != v60);
  uint64_t v46 = *a1;
  *a1 = v66;
  a1[1] = v59;
  a1[2] = v67;
  if (v46) {
    goto LABEL_89;
  }
LABEL_90:
  a1[1] = v59;
  unint64_t v70 = (unint64_t)a1[2];
  if ((unint64_t)v59 < v70)
  {
    *((_DWORD *)v59 + 2) = 1065353216;
    *(void *)double v59 = 1065353216;
    float v71 = v59 + 12;
    goto LABEL_108;
  }
  uint64_t v72 = *a1;
  unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v59 - *a1) >> 2);
  unint64_t v74 = v73 + 1;
  if (v73 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (void)v72) >> 2);
  if (2 * v75 > v74) {
    unint64_t v74 = 2 * v75;
  }
  if (v75 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v76 = 0x1555555555555555;
  }
  else {
    unint64_t v76 = v74;
  }
  if (v76)
  {
    if (v76 > 0x1555555555555555) {
      goto LABEL_972;
    }
    double v77 = (char *)operator new(12 * v76);
  }
  else
  {
    double v77 = 0;
  }
  double v78 = &v77[12 * v73];
  double v79 = &v77[12 * v76];
  *((_DWORD *)v78 + 2) = 1065353216;
  *(void *)double v78 = 1065353216;
  float v71 = v78 + 12;
  if (v59 == v72)
  {
    *a1 = v78;
    a1[1] = v71;
    a1[2] = v79;
LABEL_107:
    operator delete(v59);
    goto LABEL_108;
  }
  do
  {
    uint64_t v80 = *(void *)(v59 - 12);
    v59 -= 12;
    int v81 = *((_DWORD *)v59 + 2);
    *(void *)(v78 - 12) = v80;
    v78 -= 12;
    *((_DWORD *)v78 + 2) = v81;
  }
  while (v59 != v72);
  double v59 = *a1;
  *a1 = v78;
  a1[1] = v71;
  a1[2] = v79;
  if (v59) {
    goto LABEL_107;
  }
LABEL_108:
  a1[1] = v71;
  unint64_t v82 = (unint64_t)a1[2];
  if ((unint64_t)v71 < v82)
  {
    *((_DWORD *)v71 + 2) = 1065353216;
    *(void *)float v71 = 0x3F80000000000000;
    double v83 = v71 + 12;
    goto LABEL_126;
  }
  double v84 = *a1;
  unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((v71 - *a1) >> 2);
  unint64_t v86 = v85 + 1;
  if (v85 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)v84) >> 2);
  if (2 * v87 > v86) {
    unint64_t v86 = 2 * v87;
  }
  if (v87 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v88 = 0x1555555555555555;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 > 0x1555555555555555) {
      goto LABEL_972;
    }
    __int16 v89 = (char *)operator new(12 * v88);
  }
  else
  {
    __int16 v89 = 0;
  }
  float v90 = &v89[12 * v85];
  uint64_t v91 = &v89[12 * v88];
  *((_DWORD *)v90 + 2) = 1065353216;
  *(void *)float v90 = 0x3F80000000000000;
  double v83 = v90 + 12;
  if (v71 == v84)
  {
    *a1 = v90;
    a1[1] = v83;
    a1[2] = v91;
LABEL_125:
    operator delete(v71);
    goto LABEL_126;
  }
  do
  {
    uint64_t v92 = *(void *)(v71 - 12);
    v71 -= 12;
    int v93 = *((_DWORD *)v71 + 2);
    *(void *)(v90 - 12) = v92;
    v90 -= 12;
    *((_DWORD *)v90 + 2) = v93;
  }
  while (v71 != v84);
  float v71 = *a1;
  *a1 = v90;
  a1[1] = v83;
  a1[2] = v91;
  if (v71) {
    goto LABEL_125;
  }
LABEL_126:
  a1[1] = v83;
  unint64_t v94 = (unint64_t)a1[2];
  if ((unint64_t)v83 < v94)
  {
    *((_DWORD *)v83 + 2) = 1065353216;
    __asm { FMOV            V0.4S, #1.0 }
    *(void *)double v83 = _Q0;
    int v96 = v83 + 12;
    goto LABEL_144;
  }
  uint64_t v97 = *a1;
  unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((v83 - *a1) >> 2);
  unint64_t v99 = v98 + 1;
  if (v98 + 1 > 0x1555555555555555) {
    goto LABEL_971;
  }
  unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (void)v97) >> 2);
  if (2 * v100 > v99) {
    unint64_t v99 = 2 * v100;
  }
  if (v100 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v101 = 0x1555555555555555;
  }
  else {
    unint64_t v101 = v99;
  }
  if (v101)
  {
    if (v101 > 0x1555555555555555) {
      goto LABEL_972;
    }
    int v102 = (char *)operator new(12 * v101);
  }
  else
  {
    int v102 = 0;
  }
  uint64_t v103 = &v102[12 * v98];
  int v104 = &v102[12 * v101];
  *((_DWORD *)v103 + 2) = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  *(void *)uint64_t v103 = _Q0;
  int v96 = v103 + 12;
  if (v83 == v97)
  {
    *a1 = v103;
    a1[1] = v96;
    a1[2] = v104;
LABEL_143:
    operator delete(v83);
    goto LABEL_144;
  }
  do
  {
    uint64_t v106 = *(void *)(v83 - 12);
    v83 -= 12;
    int v107 = *((_DWORD *)v83 + 2);
    *(void *)(v103 - 12) = v106;
    v103 -= 12;
    *((_DWORD *)v103 + 2) = v107;
  }
  while (v83 != v97);
  double v83 = *a1;
  *a1 = v103;
  a1[1] = v96;
  a1[2] = v104;
  if (v83) {
    goto LABEL_143;
  }
LABEL_144:
  a1[1] = v96;
  uint64_t v109 = a2[1];
  int v108 = a2[2];
  if (v109 >= v108)
  {
    uint64_t v111 = *a2;
    uint64_t v112 = v109 - *a2;
    uint64_t v113 = v112 >> 2;
    unint64_t v114 = (v112 >> 2) + 1;
    if (v114 >> 62) {
      goto LABEL_971;
    }
    uint64_t v115 = v108 - v111;
    if (v115 >> 1 > v114) {
      unint64_t v114 = v115 >> 1;
    }
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v116 = v114;
    }
    if (v116)
    {
      if (v116 >> 62) {
        goto LABEL_972;
      }
      uint64_t v117 = operator new(4 * v116);
    }
    else
    {
      uint64_t v117 = 0;
    }
    int v118 = &v117[4 * v113];
    int v108 = &v117[4 * v116];
    *(_DWORD *)int v118 = 0;
    int v110 = v118 + 4;
    if (v109 != v111)
    {
      unint64_t v119 = v109 - v111 - 4;
      if (v119 < 0x2C) {
        goto LABEL_975;
      }
      if ((unint64_t)(v109 - &v117[v112]) < 0x20) {
        goto LABEL_975;
      }
      uint64_t v120 = (v119 >> 2) + 1;
      uint64_t v121 = &v117[4 * v113 - 16];
      int v122 = v109 - 16;
      uint64_t v123 = v120 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        _OWORD *v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 8;
      }
      while (v123);
      v118 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
      v109 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
      if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_975:
        do
        {
          int v125 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *((_DWORD *)v118 - 1) = v125;
          v118 -= 4;
        }
        while (v109 != v111);
      }
    }
    *a2 = v118;
    a2[1] = v110;
    a2[2] = v108;
    if (v111)
    {
      operator delete(v111);
      int v108 = a2[2];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v109 = 0;
    int v110 = v109 + 4;
  }
  a2[1] = v110;
  if (v110 < v108)
  {
    *(_DWORD *)int v110 = 1;
    uint64_t v126 = v110 + 4;
    goto LABEL_188;
  }
  unsigned int v127 = *a2;
  uint64_t v128 = v110 - *a2;
  uint64_t v129 = v128 >> 2;
  unint64_t v130 = (v128 >> 2) + 1;
  if (v130 >> 62) {
    goto LABEL_971;
  }
  uint64_t v131 = v108 - v127;
  if (v131 >> 1 > v130) {
    unint64_t v130 = v131 >> 1;
  }
  if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v132 = v130;
  }
  if (v132)
  {
    if (v132 >> 62) {
      goto LABEL_972;
    }
    uint64_t v133 = operator new(4 * v132);
  }
  else
  {
    uint64_t v133 = 0;
  }
  uint64_t v134 = &v133[4 * v129];
  int v108 = &v133[4 * v132];
  *(_DWORD *)uint64_t v134 = 1;
  uint64_t v126 = v134 + 4;
  if (v110 != v127)
  {
    unint64_t v135 = v110 - v127 - 4;
    if (v135 < 0x2C)
    {
      unsigned int v136 = v110;
      goto LABEL_185;
    }
    if ((unint64_t)(v110 - v133 - v128) < 0x20)
    {
      unsigned int v136 = v110;
      do
      {
LABEL_185:
        int v142 = *((_DWORD *)v136 - 1);
        v136 -= 4;
        *((_DWORD *)v134 - 1) = v142;
        v134 -= 4;
      }
      while (v136 != v127);
      goto LABEL_186;
    }
    uint64_t v137 = (v135 >> 2) + 1;
    unsigned int v136 = &v110[-4 * (v137 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v138 = &v133[4 * v129 - 16];
    uint64_t v139 = v110 - 16;
    uint64_t v140 = v137 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v141 = *(_OWORD *)v139;
      *(v138 - 1) = *((_OWORD *)v139 - 1);
      *uint64_t v138 = v141;
      v138 -= 2;
      v139 -= 32;
      v140 -= 8;
    }
    while (v140);
    v134 -= 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
    if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_185;
    }
  }
LABEL_186:
  *a2 = v134;
  a2[1] = v126;
  a2[2] = v108;
  if (v127)
  {
    operator delete(v127);
    int v108 = a2[2];
  }
LABEL_188:
  a2[1] = v126;
  if (v126 < v108)
  {
    *(_DWORD *)uint64_t v126 = 2;
    float v143 = v126 + 4;
    goto LABEL_211;
  }
  BOOL v144 = *a2;
  uint64_t v145 = v126 - *a2;
  uint64_t v146 = v145 >> 2;
  unint64_t v147 = (v145 >> 2) + 1;
  if (v147 >> 62) {
    goto LABEL_971;
  }
  uint64_t v148 = v108 - v144;
  if (v148 >> 1 > v147) {
    unint64_t v147 = v148 >> 1;
  }
  if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v149 = v147;
  }
  if (v149)
  {
    if (v149 >> 62) {
      goto LABEL_972;
    }
    uint64_t v150 = operator new(4 * v149);
  }
  else
  {
    uint64_t v150 = 0;
  }
  uint64_t v151 = &v150[4 * v146];
  int v108 = &v150[4 * v149];
  *(_DWORD *)uint64_t v151 = 2;
  float v143 = v151 + 4;
  if (v126 != v144)
  {
    unint64_t v152 = v126 - v144 - 4;
    if (v152 < 0x2C)
    {
      unint64_t v153 = v126;
      goto LABEL_208;
    }
    if ((unint64_t)(v126 - v150 - v145) < 0x20)
    {
      unint64_t v153 = v126;
      do
      {
LABEL_208:
        int v159 = *((_DWORD *)v153 - 1);
        v153 -= 4;
        *((_DWORD *)v151 - 1) = v159;
        v151 -= 4;
      }
      while (v153 != v144);
      goto LABEL_209;
    }
    uint64_t v154 = (v152 >> 2) + 1;
    unint64_t v153 = &v126[-4 * (v154 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v155 = &v150[4 * v146 - 16];
    uint64_t v156 = v126 - 16;
    uint64_t v157 = v154 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v158 = *(_OWORD *)v156;
      *(v155 - 1) = *((_OWORD *)v156 - 1);
      *unint64_t v155 = v158;
      v155 -= 2;
      v156 -= 32;
      v157 -= 8;
    }
    while (v157);
    v151 -= 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
    if (v154 != (v154 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_208;
    }
  }
LABEL_209:
  *a2 = v151;
  a2[1] = v143;
  a2[2] = v108;
  if (v144)
  {
    operator delete(v144);
    int v108 = a2[2];
  }
LABEL_211:
  a2[1] = v143;
  if (v143 < v108)
  {
    *(_DWORD *)float v143 = 2;
    int64_t v160 = v143 + 4;
    goto LABEL_234;
  }
  uint64_t v161 = *a2;
  uint64_t v162 = v143 - *a2;
  uint64_t v163 = v162 >> 2;
  unint64_t v164 = (v162 >> 2) + 1;
  if (v164 >> 62) {
    goto LABEL_971;
  }
  uint64_t v165 = v108 - v161;
  if (v165 >> 1 > v164) {
    unint64_t v164 = v165 >> 1;
  }
  if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v166 = v164;
  }
  if (v166)
  {
    if (v166 >> 62) {
      goto LABEL_972;
    }
    unint64_t v167 = operator new(4 * v166);
  }
  else
  {
    unint64_t v167 = 0;
  }
  uint64_t v168 = &v167[4 * v163];
  int v108 = &v167[4 * v166];
  *(_DWORD *)uint64_t v168 = 2;
  int64_t v160 = v168 + 4;
  if (v143 != v161)
  {
    unint64_t v169 = v143 - v161 - 4;
    if (v169 < 0x2C)
    {
      float v170 = v143;
      goto LABEL_231;
    }
    if ((unint64_t)(v143 - v167 - v162) < 0x20)
    {
      float v170 = v143;
      do
      {
LABEL_231:
        int v176 = *((_DWORD *)v170 - 1);
        v170 -= 4;
        *((_DWORD *)v168 - 1) = v176;
        v168 -= 4;
      }
      while (v170 != v161);
      goto LABEL_232;
    }
    uint64_t v171 = (v169 >> 2) + 1;
    float v170 = &v143[-4 * (v171 & 0x7FFFFFFFFFFFFFF8)];
    float v172 = &v167[4 * v163 - 16];
    uint64_t v173 = v143 - 16;
    uint64_t v174 = v171 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v175 = *(_OWORD *)v173;
      *(v172 - 1) = *((_OWORD *)v173 - 1);
      _OWORD *v172 = v175;
      v172 -= 2;
      v173 -= 32;
      v174 -= 8;
    }
    while (v174);
    v168 -= 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
    if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_231;
    }
  }
LABEL_232:
  *a2 = v168;
  a2[1] = v160;
  a2[2] = v108;
  if (v161)
  {
    operator delete(v161);
    int v108 = a2[2];
  }
LABEL_234:
  a2[1] = v160;
  if (v160 < v108)
  {
    *(_DWORD *)int64_t v160 = 1;
    float v177 = v160 + 4;
    goto LABEL_257;
  }
  BOOL v178 = *a2;
  uint64_t v179 = v160 - *a2;
  uint64_t v180 = v179 >> 2;
  unint64_t v181 = (v179 >> 2) + 1;
  if (v181 >> 62) {
    goto LABEL_971;
  }
  uint64_t v182 = v108 - v178;
  if (v182 >> 1 > v181) {
    unint64_t v181 = v182 >> 1;
  }
  if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v183 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v183 = v181;
  }
  if (v183)
  {
    if (v183 >> 62) {
      goto LABEL_972;
    }
    char v184 = operator new(4 * v183);
  }
  else
  {
    char v184 = 0;
  }
  uint64_t v185 = &v184[4 * v180];
  int v108 = &v184[4 * v183];
  *(_DWORD *)uint64_t v185 = 1;
  float v177 = v185 + 4;
  if (v160 != v178)
  {
    unint64_t v186 = v160 - v178 - 4;
    if (v186 < 0x2C)
    {
      unint64_t v187 = v160;
      goto LABEL_254;
    }
    if ((unint64_t)(v160 - v184 - v179) < 0x20)
    {
      unint64_t v187 = v160;
      do
      {
LABEL_254:
        int v193 = *((_DWORD *)v187 - 1);
        v187 -= 4;
        *((_DWORD *)v185 - 1) = v193;
        v185 -= 4;
      }
      while (v187 != v178);
      goto LABEL_255;
    }
    uint64_t v188 = (v186 >> 2) + 1;
    unint64_t v187 = &v160[-4 * (v188 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v189 = &v184[4 * v180 - 16];
    uint64_t v190 = v160 - 16;
    uint64_t v191 = v188 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v192 = *(_OWORD *)v190;
      *(v189 - 1) = *((_OWORD *)v190 - 1);
      _OWORD *v189 = v192;
      v189 -= 2;
      v190 -= 32;
      v191 -= 8;
    }
    while (v191);
    v185 -= 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
    if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_254;
    }
  }
LABEL_255:
  *a2 = v185;
  a2[1] = v177;
  a2[2] = v108;
  if (v178)
  {
    operator delete(v178);
    int v108 = a2[2];
  }
LABEL_257:
  a2[1] = v177;
  if (v177 < v108)
  {
    *(_DWORD *)float v177 = 3;
    float v194 = v177 + 4;
    goto LABEL_280;
  }
  uint64_t v195 = *a2;
  uint64_t v196 = v177 - *a2;
  uint64_t v197 = v196 >> 2;
  unint64_t v198 = (v196 >> 2) + 1;
  if (v198 >> 62) {
    goto LABEL_971;
  }
  uint64_t v199 = v108 - v195;
  if (v199 >> 1 > v198) {
    unint64_t v198 = v199 >> 1;
  }
  if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v200 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v200 = v198;
  }
  if (v200)
  {
    if (v200 >> 62) {
      goto LABEL_972;
    }
    uint64_t v201 = operator new(4 * v200);
  }
  else
  {
    uint64_t v201 = 0;
  }
  int v202 = &v201[4 * v197];
  int v108 = &v201[4 * v200];
  *(_DWORD *)int v202 = 3;
  float v194 = v202 + 4;
  if (v177 != v195)
  {
    unint64_t v203 = v177 - v195 - 4;
    if (v203 < 0x2C)
    {
      int v204 = v177;
      goto LABEL_277;
    }
    if ((unint64_t)(v177 - v201 - v196) < 0x20)
    {
      int v204 = v177;
      do
      {
LABEL_277:
        int v210 = *((_DWORD *)v204 - 1);
        v204 -= 4;
        *((_DWORD *)v202 - 1) = v210;
        v202 -= 4;
      }
      while (v204 != v195);
      goto LABEL_278;
    }
    uint64_t v205 = (v203 >> 2) + 1;
    int v204 = &v177[-4 * (v205 & 0x7FFFFFFFFFFFFFF8)];
    unsigned int v206 = &v201[4 * v197 - 16];
    uint64_t v207 = v177 - 16;
    uint64_t v208 = v205 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v209 = *(_OWORD *)v207;
      *(v206 - 1) = *((_OWORD *)v207 - 1);
      *unsigned int v206 = v209;
      v206 -= 2;
      v207 -= 32;
      v208 -= 8;
    }
    while (v208);
    v202 -= 4 * (v205 & 0x7FFFFFFFFFFFFFF8);
    if (v205 != (v205 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_277;
    }
  }
LABEL_278:
  *a2 = v202;
  a2[1] = v194;
  a2[2] = v108;
  if (v195)
  {
    operator delete(v195);
    int v108 = a2[2];
  }
LABEL_280:
  a2[1] = v194;
  if (v194 < v108)
  {
    *(_DWORD *)float v194 = 5;
    float v211 = v194 + 4;
    goto LABEL_303;
  }
  uint64_t v212 = *a2;
  uint64_t v213 = v194 - *a2;
  uint64_t v214 = v213 >> 2;
  unint64_t v215 = (v213 >> 2) + 1;
  if (v215 >> 62) {
    goto LABEL_971;
  }
  uint64_t v216 = v108 - v212;
  if (v216 >> 1 > v215) {
    unint64_t v215 = v216 >> 1;
  }
  if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v217 = v215;
  }
  if (v217)
  {
    if (v217 >> 62) {
      goto LABEL_972;
    }
    char v218 = operator new(4 * v217);
  }
  else
  {
    char v218 = 0;
  }
  long long v219 = &v218[4 * v214];
  int v108 = &v218[4 * v217];
  *(_DWORD *)long long v219 = 5;
  float v211 = v219 + 4;
  if (v194 != v212)
  {
    unint64_t v220 = v194 - v212 - 4;
    if (v220 < 0x2C)
    {
      uint64_t v221 = v194;
      goto LABEL_300;
    }
    if ((unint64_t)(v194 - v218 - v213) < 0x20)
    {
      uint64_t v221 = v194;
      do
      {
LABEL_300:
        int v227 = *((_DWORD *)v221 - 1);
        v221 -= 4;
        *((_DWORD *)v219 - 1) = v227;
        v219 -= 4;
      }
      while (v221 != v212);
      goto LABEL_301;
    }
    uint64_t v222 = (v220 >> 2) + 1;
    uint64_t v221 = &v194[-4 * (v222 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v223 = &v218[4 * v214 - 16];
    uint64_t v224 = v194 - 16;
    uint64_t v225 = v222 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v226 = *(_OWORD *)v224;
      *(v223 - 1) = *((_OWORD *)v224 - 1);
      _OWORD *v223 = v226;
      v223 -= 2;
      v224 -= 32;
      v225 -= 8;
    }
    while (v225);
    v219 -= 4 * (v222 & 0x7FFFFFFFFFFFFFF8);
    if (v222 != (v222 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_300;
    }
  }
LABEL_301:
  *a2 = v219;
  a2[1] = v211;
  a2[2] = v108;
  if (v212)
  {
    operator delete(v212);
    int v108 = a2[2];
  }
LABEL_303:
  a2[1] = v211;
  if (v211 < v108)
  {
    *(_DWORD *)float v211 = 4;
    uint64_t v228 = v211 + 4;
    goto LABEL_326;
  }
  uint64_t v229 = *a2;
  uint64_t v230 = v211 - *a2;
  uint64_t v231 = v230 >> 2;
  unint64_t v232 = (v230 >> 2) + 1;
  if (v232 >> 62) {
    goto LABEL_971;
  }
  uint64_t v233 = v108 - v229;
  if (v233 >> 1 > v232) {
    unint64_t v232 = v233 >> 1;
  }
  if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v234 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v234 = v232;
  }
  if (v234)
  {
    if (v234 >> 62) {
      goto LABEL_972;
    }
    char v235 = operator new(4 * v234);
  }
  else
  {
    char v235 = 0;
  }
  int v236 = &v235[4 * v231];
  int v108 = &v235[4 * v234];
  *(_DWORD *)int v236 = 4;
  uint64_t v228 = v236 + 4;
  if (v211 != v229)
  {
    unint64_t v237 = v211 - v229 - 4;
    if (v237 < 0x2C)
    {
      __n128 v238 = v211;
      goto LABEL_323;
    }
    if ((unint64_t)(v211 - v235 - v230) < 0x20)
    {
      __n128 v238 = v211;
      do
      {
LABEL_323:
        int v244 = *((_DWORD *)v238 - 1);
        v238 -= 4;
        *((_DWORD *)v236 - 1) = v244;
        v236 -= 4;
      }
      while (v238 != v229);
      goto LABEL_324;
    }
    uint64_t v239 = (v237 >> 2) + 1;
    __n128 v238 = &v211[-4 * (v239 & 0x7FFFFFFFFFFFFFF8)];
    __n128 v240 = &v235[4 * v231 - 16];
    uint64_t v241 = v211 - 16;
    uint64_t v242 = v239 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v243 = *(_OWORD *)v241;
      *(v240 - 1) = *((_OWORD *)v241 - 1);
      *__n128 v240 = v243;
      v240 -= 2;
      v241 -= 32;
      v242 -= 8;
    }
    while (v242);
    v236 -= 4 * (v239 & 0x7FFFFFFFFFFFFFF8);
    if (v239 != (v239 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_323;
    }
  }
LABEL_324:
  *a2 = v236;
  a2[1] = v228;
  a2[2] = v108;
  if (v229)
  {
    operator delete(v229);
    int v108 = a2[2];
  }
LABEL_326:
  a2[1] = v228;
  if (v228 < v108)
  {
    *(_DWORD *)uint64_t v228 = 7;
    uint64_t v245 = v228 + 4;
    goto LABEL_349;
  }
  uint64_t v246 = *a2;
  uint64_t v247 = v228 - *a2;
  uint64_t v248 = v247 >> 2;
  unint64_t v249 = (v247 >> 2) + 1;
  if (v249 >> 62) {
    goto LABEL_971;
  }
  uint64_t v250 = v108 - v246;
  if (v250 >> 1 > v249) {
    unint64_t v249 = v250 >> 1;
  }
  if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v251 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v251 = v249;
  }
  if (v251)
  {
    if (v251 >> 62) {
      goto LABEL_972;
    }
    uint64_t v252 = operator new(4 * v251);
  }
  else
  {
    uint64_t v252 = 0;
  }
  unint64_t v253 = &v252[4 * v248];
  int v108 = &v252[4 * v251];
  *(_DWORD *)unint64_t v253 = 7;
  uint64_t v245 = v253 + 4;
  if (v228 != v246)
  {
    unint64_t v254 = v228 - v246 - 4;
    if (v254 < 0x2C)
    {
      int v255 = v228;
      goto LABEL_346;
    }
    if ((unint64_t)(v228 - v252 - v247) < 0x20)
    {
      int v255 = v228;
      do
      {
LABEL_346:
        int v261 = *((_DWORD *)v255 - 1);
        v255 -= 4;
        *((_DWORD *)v253 - 1) = v261;
        v253 -= 4;
      }
      while (v255 != v246);
      goto LABEL_347;
    }
    uint64_t v256 = (v254 >> 2) + 1;
    int v255 = &v228[-4 * (v256 & 0x7FFFFFFFFFFFFFF8)];
    int v257 = &v252[4 * v248 - 16];
    uint64_t v258 = v228 - 16;
    uint64_t v259 = v256 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v260 = *(_OWORD *)v258;
      *(v257 - 1) = *((_OWORD *)v258 - 1);
      *int v257 = v260;
      v257 -= 2;
      v258 -= 32;
      v259 -= 8;
    }
    while (v259);
    v253 -= 4 * (v256 & 0x7FFFFFFFFFFFFFF8);
    if (v256 != (v256 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_346;
    }
  }
LABEL_347:
  *a2 = v253;
  a2[1] = v245;
  a2[2] = v108;
  if (v246)
  {
    operator delete(v246);
    int v108 = a2[2];
  }
LABEL_349:
  a2[1] = v245;
  if (v245 < v108)
  {
    *(_DWORD *)uint64_t v245 = 7;
    int v262 = v245 + 4;
    goto LABEL_372;
  }
  uint64_t v263 = *a2;
  uint64_t v264 = v245 - *a2;
  uint64_t v265 = v264 >> 2;
  unint64_t v266 = (v264 >> 2) + 1;
  if (v266 >> 62) {
    goto LABEL_971;
  }
  uint64_t v267 = v108 - v263;
  if (v267 >> 1 > v266) {
    unint64_t v266 = v267 >> 1;
  }
  if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v268 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v268 = v266;
  }
  if (v268)
  {
    if (v268 >> 62) {
      goto LABEL_972;
    }
    int v269 = operator new(4 * v268);
  }
  else
  {
    int v269 = 0;
  }
  uint64_t v270 = &v269[4 * v265];
  int v108 = &v269[4 * v268];
  *(_DWORD *)uint64_t v270 = 7;
  int v262 = v270 + 4;
  if (v245 != v263)
  {
    unint64_t v271 = v245 - v263 - 4;
    if (v271 < 0x2C)
    {
      unint64_t v272 = v245;
      goto LABEL_369;
    }
    if ((unint64_t)(v245 - v269 - v264) < 0x20)
    {
      unint64_t v272 = v245;
      do
      {
LABEL_369:
        int v278 = *((_DWORD *)v272 - 1);
        v272 -= 4;
        *((_DWORD *)v270 - 1) = v278;
        v270 -= 4;
      }
      while (v272 != v263);
      goto LABEL_370;
    }
    uint64_t v273 = (v271 >> 2) + 1;
    unint64_t v272 = &v245[-4 * (v273 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v274 = &v269[4 * v265 - 16];
    std::string v275 = v245 - 16;
    uint64_t v276 = v273 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v277 = *(_OWORD *)v275;
      *(v274 - 1) = *((_OWORD *)v275 - 1);
      *unint64_t v274 = v277;
      v274 -= 2;
      v275 -= 32;
      v276 -= 8;
    }
    while (v276);
    v270 -= 4 * (v273 & 0x7FFFFFFFFFFFFFF8);
    if (v273 != (v273 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_369;
    }
  }
LABEL_370:
  *a2 = v270;
  a2[1] = v262;
  a2[2] = v108;
  if (v263)
  {
    operator delete(v263);
    int v108 = a2[2];
  }
LABEL_372:
  a2[1] = v262;
  if (v262 < v108)
  {
    *(_DWORD *)int v262 = 4;
    int v279 = v262 + 4;
    goto LABEL_395;
  }
  uint64_t v280 = *a2;
  uint64_t v281 = v262 - *a2;
  uint64_t v282 = v281 >> 2;
  unint64_t v283 = (v281 >> 2) + 1;
  if (v283 >> 62) {
    goto LABEL_971;
  }
  uint64_t v284 = v108 - v280;
  if (v284 >> 1 > v283) {
    unint64_t v283 = v284 >> 1;
  }
  if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v285 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v285 = v283;
  }
  if (v285)
  {
    if (v285 >> 62) {
      goto LABEL_972;
    }
    float v286 = operator new(4 * v285);
  }
  else
  {
    float v286 = 0;
  }
  uint64_t v287 = &v286[4 * v282];
  int v108 = &v286[4 * v285];
  *(_DWORD *)uint64_t v287 = 4;
  int v279 = v287 + 4;
  if (v262 != v280)
  {
    unint64_t v288 = v262 - v280 - 4;
    if (v288 < 0x2C)
    {
      char v289 = v262;
      goto LABEL_392;
    }
    if ((unint64_t)(v262 - v286 - v281) < 0x20)
    {
      char v289 = v262;
      do
      {
LABEL_392:
        int v295 = *((_DWORD *)v289 - 1);
        v289 -= 4;
        *((_DWORD *)v287 - 1) = v295;
        v287 -= 4;
      }
      while (v289 != v280);
      goto LABEL_393;
    }
    uint64_t v290 = (v288 >> 2) + 1;
    char v289 = &v262[-4 * (v290 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v291 = &v286[4 * v282 - 16];
    uint64_t v292 = v262 - 16;
    uint64_t v293 = v290 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v294 = *(_OWORD *)v292;
      *(v291 - 1) = *((_OWORD *)v292 - 1);
      *unint64_t v291 = v294;
      v291 -= 2;
      v292 -= 32;
      v293 -= 8;
    }
    while (v293);
    v287 -= 4 * (v290 & 0x7FFFFFFFFFFFFFF8);
    if (v290 != (v290 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_392;
    }
  }
LABEL_393:
  *a2 = v287;
  a2[1] = v279;
  a2[2] = v108;
  if (v280)
  {
    operator delete(v280);
    int v108 = a2[2];
  }
LABEL_395:
  a2[1] = v279;
  if (v279 < v108)
  {
    *(_DWORD *)int v279 = 6;
    uint64_t v296 = v279 + 4;
    goto LABEL_418;
  }
  uint64_t v297 = *a2;
  uint64_t v298 = v279 - *a2;
  uint64_t v299 = v298 >> 2;
  unint64_t v300 = (v298 >> 2) + 1;
  if (v300 >> 62) {
    goto LABEL_971;
  }
  uint64_t v301 = v108 - v297;
  if (v301 >> 1 > v300) {
    unint64_t v300 = v301 >> 1;
  }
  if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v302 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v302 = v300;
  }
  if (v302)
  {
    if (v302 >> 62) {
      goto LABEL_972;
    }
    v303 = operator new(4 * v302);
  }
  else
  {
    v303 = 0;
  }
  v304 = &v303[4 * v299];
  int v108 = &v303[4 * v302];
  *(_DWORD *)v304 = 6;
  uint64_t v296 = v304 + 4;
  if (v279 != v297)
  {
    unint64_t v305 = v279 - v297 - 4;
    if (v305 < 0x2C)
    {
      int v306 = v279;
      goto LABEL_415;
    }
    if ((unint64_t)(v279 - v303 - v298) < 0x20)
    {
      int v306 = v279;
      do
      {
LABEL_415:
        int v312 = *((_DWORD *)v306 - 1);
        v306 -= 4;
        *((_DWORD *)v304 - 1) = v312;
        v304 -= 4;
      }
      while (v306 != v297);
      goto LABEL_416;
    }
    uint64_t v307 = (v305 >> 2) + 1;
    int v306 = &v279[-4 * (v307 & 0x7FFFFFFFFFFFFFF8)];
    float32x2_t v308 = &v303[4 * v299 - 16];
    char v309 = v279 - 16;
    uint64_t v310 = v307 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v311 = *(_OWORD *)v309;
      *(v308 - 1) = *((_OWORD *)v309 - 1);
      _OWORD *v308 = v311;
      v308 -= 2;
      v309 -= 32;
      v310 -= 8;
    }
    while (v310);
    v304 -= 4 * (v307 & 0x7FFFFFFFFFFFFFF8);
    if (v307 != (v307 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_415;
    }
  }
LABEL_416:
  *a2 = v304;
  a2[1] = v296;
  a2[2] = v108;
  if (v297)
  {
    operator delete(v297);
    int v108 = a2[2];
  }
LABEL_418:
  a2[1] = v296;
  if (v296 < v108)
  {
    *(_DWORD *)uint64_t v296 = 1;
    uint8x8_t v313 = v296 + 4;
    goto LABEL_441;
  }
  unint64_t v314 = *a2;
  uint64_t v315 = v296 - *a2;
  uint64_t v316 = v315 >> 2;
  unint64_t v317 = (v315 >> 2) + 1;
  if (v317 >> 62) {
    goto LABEL_971;
  }
  uint64_t v318 = v108 - v314;
  if (v318 >> 1 > v317) {
    unint64_t v317 = v318 >> 1;
  }
  if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v319 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v319 = v317;
  }
  if (v319)
  {
    if (v319 >> 62) {
      goto LABEL_972;
    }
    uint64_t v320 = operator new(4 * v319);
  }
  else
  {
    uint64_t v320 = 0;
  }
  float v321 = &v320[4 * v316];
  int v108 = &v320[4 * v319];
  *(_DWORD *)float v321 = 1;
  uint8x8_t v313 = v321 + 4;
  if (v296 != v314)
  {
    unint64_t v322 = v296 - v314 - 4;
    if (v322 < 0x2C)
    {
      float v323 = v296;
      goto LABEL_438;
    }
    if ((unint64_t)(v296 - v320 - v315) < 0x20)
    {
      float v323 = v296;
      do
      {
LABEL_438:
        int v329 = *((_DWORD *)v323 - 1);
        v323 -= 4;
        *((_DWORD *)v321 - 1) = v329;
        v321 -= 4;
      }
      while (v323 != v314);
      goto LABEL_439;
    }
    uint64_t v324 = (v322 >> 2) + 1;
    float v323 = &v296[-4 * (v324 & 0x7FFFFFFFFFFFFFF8)];
    int8x8_t v325 = &v320[4 * v316 - 16];
    unint64_t v326 = v296 - 16;
    uint64_t v327 = v324 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v328 = *(_OWORD *)v326;
      *(v325 - 1) = *((_OWORD *)v326 - 1);
      *int8x8_t v325 = v328;
      v325 -= 2;
      v326 -= 32;
      v327 -= 8;
    }
    while (v327);
    v321 -= 4 * (v324 & 0x7FFFFFFFFFFFFFF8);
    if (v324 != (v324 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_438;
    }
  }
LABEL_439:
  *a2 = v321;
  a2[1] = v313;
  a2[2] = v108;
  if (v314)
  {
    operator delete(v314);
    int v108 = a2[2];
  }
LABEL_441:
  a2[1] = v313;
  if (v313 < v108)
  {
    *(_DWORD *)uint8x8_t v313 = 5;
    v330 = v313 + 4;
    goto LABEL_464;
  }
  uint64_t v331 = *a2;
  uint64_t v332 = v313 - *a2;
  uint64_t v333 = v332 >> 2;
  unint64_t v334 = (v332 >> 2) + 1;
  if (v334 >> 62) {
    goto LABEL_971;
  }
  uint64_t v335 = v108 - v331;
  if (v335 >> 1 > v334) {
    unint64_t v334 = v335 >> 1;
  }
  if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v336 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v336 = v334;
  }
  if (v336)
  {
    if (v336 >> 62) {
      goto LABEL_972;
    }
    float v337 = operator new(4 * v336);
  }
  else
  {
    float v337 = 0;
  }
  float v338 = &v337[4 * v333];
  int v108 = &v337[4 * v336];
  *(_DWORD *)float v338 = 5;
  v330 = v338 + 4;
  if (v313 != v331)
  {
    unint64_t v339 = v313 - v331 - 4;
    if (v339 < 0x2C)
    {
      uint64_t v340 = v313;
      goto LABEL_461;
    }
    if ((unint64_t)(v313 - v337 - v332) < 0x20)
    {
      uint64_t v340 = v313;
      do
      {
LABEL_461:
        int v346 = *((_DWORD *)v340 - 1);
        v340 -= 4;
        *((_DWORD *)v338 - 1) = v346;
        v338 -= 4;
      }
      while (v340 != v331);
      goto LABEL_462;
    }
    uint64_t v341 = (v339 >> 2) + 1;
    uint64_t v340 = &v313[-4 * (v341 & 0x7FFFFFFFFFFFFFF8)];
    v342 = &v337[4 * v333 - 16];
    uint64_t v343 = v313 - 16;
    uint64_t v344 = v341 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v345 = *(_OWORD *)v343;
      *(v342 - 1) = *((_OWORD *)v343 - 1);
      _OWORD *v342 = v345;
      v342 -= 2;
      v343 -= 32;
      v344 -= 8;
    }
    while (v344);
    v338 -= 4 * (v341 & 0x7FFFFFFFFFFFFFF8);
    if (v341 != (v341 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_461;
    }
  }
LABEL_462:
  *a2 = v338;
  a2[1] = v330;
  a2[2] = v108;
  if (v331)
  {
    operator delete(v331);
    int v108 = a2[2];
  }
LABEL_464:
  a2[1] = v330;
  if (v330 < v108)
  {
    *(_DWORD *)v330 = 3;
    v347 = v330 + 4;
    goto LABEL_487;
  }
  v348 = *a2;
  uint64_t v349 = v330 - *a2;
  uint64_t v350 = v349 >> 2;
  unint64_t v351 = (v349 >> 2) + 1;
  if (v351 >> 62) {
    goto LABEL_971;
  }
  uint64_t v352 = v108 - v348;
  if (v352 >> 1 > v351) {
    unint64_t v351 = v352 >> 1;
  }
  if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v353 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v353 = v351;
  }
  if (v353)
  {
    if (v353 >> 62) {
      goto LABEL_972;
    }
    v354 = operator new(4 * v353);
  }
  else
  {
    v354 = 0;
  }
  v355 = &v354[4 * v350];
  int v108 = &v354[4 * v353];
  *(_DWORD *)v355 = 3;
  v347 = v355 + 4;
  if (v330 != v348)
  {
    unint64_t v356 = v330 - v348 - 4;
    if (v356 < 0x2C)
    {
      uint64_t v357 = v330;
      goto LABEL_484;
    }
    if ((unint64_t)(v330 - v354 - v349) < 0x20)
    {
      uint64_t v357 = v330;
      do
      {
LABEL_484:
        int v363 = *((_DWORD *)v357 - 1);
        v357 -= 4;
        *((_DWORD *)v355 - 1) = v363;
        v355 -= 4;
      }
      while (v357 != v348);
      goto LABEL_485;
    }
    uint64_t v358 = (v356 >> 2) + 1;
    uint64_t v357 = &v330[-4 * (v358 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v359 = &v354[4 * v350 - 16];
    v360 = v330 - 16;
    uint64_t v361 = v358 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v362 = *(_OWORD *)v360;
      *(v359 - 1) = *((_OWORD *)v360 - 1);
      *unint64_t v359 = v362;
      v359 -= 2;
      v360 -= 32;
      v361 -= 8;
    }
    while (v361);
    v355 -= 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
    if (v358 != (v358 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_484;
    }
  }
LABEL_485:
  *a2 = v355;
  a2[1] = v347;
  a2[2] = v108;
  if (v348)
  {
    operator delete(v348);
    int v108 = a2[2];
  }
LABEL_487:
  a2[1] = v347;
  if (v347 < v108)
  {
    *(_DWORD *)v347 = 3;
    uint64_t v364 = v347 + 4;
    goto LABEL_510;
  }
  v365 = *a2;
  uint64_t v366 = v347 - *a2;
  uint64_t v367 = v366 >> 2;
  unint64_t v368 = (v366 >> 2) + 1;
  if (v368 >> 62) {
    goto LABEL_971;
  }
  uint64_t v369 = v108 - v365;
  if (v369 >> 1 > v368) {
    unint64_t v368 = v369 >> 1;
  }
  if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v370 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v370 = v368;
  }
  if (v370)
  {
    if (v370 >> 62) {
      goto LABEL_972;
    }
    unint64_t v371 = operator new(4 * v370);
  }
  else
  {
    unint64_t v371 = 0;
  }
  unint64_t v372 = &v371[4 * v367];
  int v108 = &v371[4 * v370];
  *(_DWORD *)unint64_t v372 = 3;
  uint64_t v364 = v372 + 4;
  if (v347 != v365)
  {
    unint64_t v373 = v347 - v365 - 4;
    if (v373 < 0x2C)
    {
      unint64_t v374 = v347;
      goto LABEL_507;
    }
    if ((unint64_t)(v347 - v371 - v366) < 0x20)
    {
      unint64_t v374 = v347;
      do
      {
LABEL_507:
        int v380 = *((_DWORD *)v374 - 1);
        v374 -= 4;
        *((_DWORD *)v372 - 1) = v380;
        v372 -= 4;
      }
      while (v374 != v365);
      goto LABEL_508;
    }
    uint64_t v375 = (v373 >> 2) + 1;
    unint64_t v374 = &v347[-4 * (v375 & 0x7FFFFFFFFFFFFFF8)];
    v376 = &v371[4 * v367 - 16];
    v377 = v347 - 16;
    uint64_t v378 = v375 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v379 = *(_OWORD *)v377;
      *(v376 - 1) = *((_OWORD *)v377 - 1);
      _OWORD *v376 = v379;
      v376 -= 2;
      v377 -= 32;
      v378 -= 8;
    }
    while (v378);
    v372 -= 4 * (v375 & 0x7FFFFFFFFFFFFFF8);
    if (v375 != (v375 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_507;
    }
  }
LABEL_508:
  *a2 = v372;
  a2[1] = v364;
  a2[2] = v108;
  if (v365)
  {
    operator delete(v365);
    int v108 = a2[2];
  }
LABEL_510:
  a2[1] = v364;
  if (v364 < v108)
  {
    *(_DWORD *)uint64_t v364 = 5;
    uint64_t v381 = v364 + 4;
    goto LABEL_533;
  }
  v382 = *a2;
  uint64_t v383 = v364 - *a2;
  uint64_t v384 = v383 >> 2;
  unint64_t v385 = (v383 >> 2) + 1;
  if (v385 >> 62) {
    goto LABEL_971;
  }
  uint64_t v386 = v108 - v382;
  if (v386 >> 1 > v385) {
    unint64_t v385 = v386 >> 1;
  }
  if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v387 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v387 = v385;
  }
  if (v387)
  {
    if (v387 >> 62) {
      goto LABEL_972;
    }
    float v388 = operator new(4 * v387);
  }
  else
  {
    float v388 = 0;
  }
  BOOL v389 = &v388[4 * v384];
  int v108 = &v388[4 * v387];
  *(_DWORD *)BOOL v389 = 5;
  uint64_t v381 = v389 + 4;
  if (v364 != v382)
  {
    unint64_t v390 = v364 - v382 - 4;
    if (v390 < 0x2C)
    {
      unint64_t v391 = v364;
      goto LABEL_530;
    }
    if ((unint64_t)(v364 - v388 - v383) < 0x20)
    {
      unint64_t v391 = v364;
      do
      {
LABEL_530:
        int v397 = *((_DWORD *)v391 - 1);
        v391 -= 4;
        *((_DWORD *)v389 - 1) = v397;
        v389 -= 4;
      }
      while (v391 != v382);
      goto LABEL_531;
    }
    uint64_t v392 = (v390 >> 2) + 1;
    unint64_t v391 = &v364[-4 * (v392 & 0x7FFFFFFFFFFFFFF8)];
    int8x8_t v393 = &v388[4 * v384 - 16];
    uint8x8_t v394 = v364 - 16;
    uint64_t v395 = v392 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v396 = *(_OWORD *)v394;
      *(v393 - 1) = *((_OWORD *)v394 - 1);
      *int8x8_t v393 = v396;
      v393 -= 2;
      v394 -= 32;
      v395 -= 8;
    }
    while (v395);
    v389 -= 4 * (v392 & 0x7FFFFFFFFFFFFFF8);
    if (v392 != (v392 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_530;
    }
  }
LABEL_531:
  *a2 = v389;
  a2[1] = v381;
  a2[2] = v108;
  if (v382)
  {
    operator delete(v382);
    int v108 = a2[2];
  }
LABEL_533:
  a2[1] = v381;
  if (v381 < v108)
  {
    *(_DWORD *)uint64_t v381 = 7;
    uint64_t v398 = v381 + 4;
    goto LABEL_556;
  }
  uint64_t v399 = *a2;
  uint64_t v400 = v381 - *a2;
  uint64_t v401 = v400 >> 2;
  unint64_t v402 = (v400 >> 2) + 1;
  if (v402 >> 62) {
    goto LABEL_971;
  }
  uint64_t v403 = v108 - v399;
  if (v403 >> 1 > v402) {
    unint64_t v402 = v403 >> 1;
  }
  if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v404 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v404 = v402;
  }
  if (v404)
  {
    if (v404 >> 62) {
      goto LABEL_972;
    }
    v405 = operator new(4 * v404);
  }
  else
  {
    v405 = 0;
  }
  v406 = &v405[4 * v401];
  int v108 = &v405[4 * v404];
  *(_DWORD *)v406 = 7;
  uint64_t v398 = v406 + 4;
  if (v381 != v399)
  {
    unint64_t v407 = v381 - v399 - 4;
    if (v407 < 0x2C)
    {
      uint64_t v408 = v381;
      goto LABEL_553;
    }
    if ((unint64_t)(v381 - v405 - v400) < 0x20)
    {
      uint64_t v408 = v381;
      do
      {
LABEL_553:
        int v414 = *((_DWORD *)v408 - 1);
        v408 -= 4;
        *((_DWORD *)v406 - 1) = v414;
        v406 -= 4;
      }
      while (v408 != v399);
      goto LABEL_554;
    }
    uint64_t v409 = (v407 >> 2) + 1;
    uint64_t v408 = &v381[-4 * (v409 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v410 = &v405[4 * v401 - 16];
    uint64_t v411 = v381 - 16;
    uint64_t v412 = v409 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v413 = *(_OWORD *)v411;
      *(v410 - 1) = *((_OWORD *)v411 - 1);
      *uint64_t v410 = v413;
      v410 -= 2;
      v411 -= 32;
      v412 -= 8;
    }
    while (v412);
    v406 -= 4 * (v409 & 0x7FFFFFFFFFFFFFF8);
    if (v409 != (v409 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_553;
    }
  }
LABEL_554:
  *a2 = v406;
  a2[1] = v398;
  a2[2] = v108;
  if (v399)
  {
    operator delete(v399);
    int v108 = a2[2];
  }
LABEL_556:
  a2[1] = v398;
  if (v398 < v108)
  {
    *(_DWORD *)uint64_t v398 = 4;
    v415 = v398 + 4;
    goto LABEL_579;
  }
  v416 = *a2;
  uint64_t v417 = v398 - *a2;
  uint64_t v418 = v417 >> 2;
  unint64_t v419 = (v417 >> 2) + 1;
  if (v419 >> 62) {
    goto LABEL_971;
  }
  uint64_t v420 = v108 - v416;
  if (v420 >> 1 > v419) {
    unint64_t v419 = v420 >> 1;
  }
  if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v421 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v421 = v419;
  }
  if (v421)
  {
    if (v421 >> 62) {
      goto LABEL_972;
    }
    v422 = operator new(4 * v421);
  }
  else
  {
    v422 = 0;
  }
  v423 = &v422[4 * v418];
  int v108 = &v422[4 * v421];
  *(_DWORD *)v423 = 4;
  v415 = v423 + 4;
  if (v398 != v416)
  {
    unint64_t v424 = v398 - v416 - 4;
    if (v424 < 0x2C)
    {
      uint64_t v425 = v398;
      goto LABEL_576;
    }
    if ((unint64_t)(v398 - v422 - v417) < 0x20)
    {
      uint64_t v425 = v398;
      do
      {
LABEL_576:
        int v431 = *((_DWORD *)v425 - 1);
        v425 -= 4;
        *((_DWORD *)v423 - 1) = v431;
        v423 -= 4;
      }
      while (v425 != v416);
      goto LABEL_577;
    }
    uint64_t v426 = (v424 >> 2) + 1;
    uint64_t v425 = &v398[-4 * (v426 & 0x7FFFFFFFFFFFFFF8)];
    v427 = &v422[4 * v418 - 16];
    v428 = v398 - 16;
    uint64_t v429 = v426 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v430 = *(_OWORD *)v428;
      *(v427 - 1) = *((_OWORD *)v428 - 1);
      _OWORD *v427 = v430;
      v427 -= 2;
      v428 -= 32;
      v429 -= 8;
    }
    while (v429);
    v423 -= 4 * (v426 & 0x7FFFFFFFFFFFFFF8);
    if (v426 != (v426 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_576;
    }
  }
LABEL_577:
  *a2 = v423;
  a2[1] = v415;
  a2[2] = v108;
  if (v416)
  {
    operator delete(v416);
    int v108 = a2[2];
  }
LABEL_579:
  a2[1] = v415;
  if (v415 < v108)
  {
    *(_DWORD *)v415 = 0;
    v432 = v415 + 4;
    goto LABEL_602;
  }
  int v433 = *a2;
  uint64_t v434 = v415 - *a2;
  uint64_t v435 = v434 >> 2;
  unint64_t v436 = (v434 >> 2) + 1;
  if (v436 >> 62) {
    goto LABEL_971;
  }
  uint64_t v437 = v108 - v433;
  if (v437 >> 1 > v436) {
    unint64_t v436 = v437 >> 1;
  }
  if ((unint64_t)v437 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v438 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v438 = v436;
  }
  if (v438)
  {
    if (v438 >> 62) {
      goto LABEL_972;
    }
    uint64_t v439 = operator new(4 * v438);
  }
  else
  {
    uint64_t v439 = 0;
  }
  unint64_t v440 = &v439[4 * v435];
  int v108 = &v439[4 * v438];
  *(_DWORD *)unint64_t v440 = 0;
  v432 = v440 + 4;
  if (v415 != v433)
  {
    unint64_t v441 = v415 - v433 - 4;
    if (v441 < 0x2C)
    {
      unint64_t v442 = v415;
      goto LABEL_599;
    }
    if ((unint64_t)(v415 - &v439[v434]) < 0x20)
    {
      unint64_t v442 = v415;
      do
      {
LABEL_599:
        int v448 = *((_DWORD *)v442 - 1);
        v442 -= 4;
        *((_DWORD *)v440 - 1) = v448;
        v440 -= 4;
      }
      while (v442 != v433);
      goto LABEL_600;
    }
    uint64_t v443 = (v441 >> 2) + 1;
    unint64_t v442 = &v415[-4 * (v443 & 0x7FFFFFFFFFFFFFF8)];
    char v444 = &v439[4 * v435 - 16];
    unint64_t v445 = v415 - 16;
    uint64_t v446 = v443 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v447 = *(_OWORD *)v445;
      *(v444 - 1) = *((_OWORD *)v445 - 1);
      *char v444 = v447;
      v444 -= 2;
      v445 -= 32;
      v446 -= 8;
    }
    while (v446);
    v440 -= 4 * (v443 & 0x7FFFFFFFFFFFFFF8);
    if (v443 != (v443 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_599;
    }
  }
LABEL_600:
  *a2 = v440;
  a2[1] = v432;
  a2[2] = v108;
  if (v433)
  {
    operator delete(v433);
    int v108 = a2[2];
  }
LABEL_602:
  a2[1] = v432;
  if (v432 < v108)
  {
    *(_DWORD *)v432 = 6;
    uint64_t v449 = v432 + 4;
    goto LABEL_625;
  }
  char v450 = *a2;
  uint64_t v451 = v432 - *a2;
  uint64_t v452 = v451 >> 2;
  unint64_t v453 = (v451 >> 2) + 1;
  if (v453 >> 62) {
    goto LABEL_971;
  }
  uint64_t v454 = v108 - v450;
  if (v454 >> 1 > v453) {
    unint64_t v453 = v454 >> 1;
  }
  if ((unint64_t)v454 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v455 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v455 = v453;
  }
  if (v455)
  {
    if (v455 >> 62) {
      goto LABEL_972;
    }
    int v456 = operator new(4 * v455);
  }
  else
  {
    int v456 = 0;
  }
  uint64_t v457 = &v456[4 * v452];
  int v108 = &v456[4 * v455];
  *(_DWORD *)uint64_t v457 = 6;
  uint64_t v449 = v457 + 4;
  if (v432 != v450)
  {
    unint64_t v458 = v432 - v450 - 4;
    if (v458 < 0x2C)
    {
      int v459 = v432;
      goto LABEL_622;
    }
    if ((unint64_t)(v432 - v456 - v451) < 0x20)
    {
      int v459 = v432;
      do
      {
LABEL_622:
        int v465 = *((_DWORD *)v459 - 1);
        v459 -= 4;
        *((_DWORD *)v457 - 1) = v465;
        v457 -= 4;
      }
      while (v459 != v450);
      goto LABEL_623;
    }
    uint64_t v460 = (v458 >> 2) + 1;
    int v459 = &v432[-4 * (v460 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v461 = &v456[4 * v452 - 16];
    v462 = v432 - 16;
    uint64_t v463 = v460 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v464 = *(_OWORD *)v462;
      *(v461 - 1) = *((_OWORD *)v462 - 1);
      *uint64_t v461 = v464;
      v461 -= 2;
      v462 -= 32;
      v463 -= 8;
    }
    while (v463);
    v457 -= 4 * (v460 & 0x7FFFFFFFFFFFFFF8);
    if (v460 != (v460 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_622;
    }
  }
LABEL_623:
  *a2 = v457;
  a2[1] = v449;
  a2[2] = v108;
  if (v450)
  {
    operator delete(v450);
    int v108 = a2[2];
  }
LABEL_625:
  a2[1] = v449;
  if (v449 < v108)
  {
    *(_DWORD *)uint64_t v449 = 6;
    v466 = v449 + 4;
    goto LABEL_648;
  }
  uint64_t v467 = *a2;
  uint64_t v468 = v449 - *a2;
  uint64_t v469 = v468 >> 2;
  unint64_t v470 = (v468 >> 2) + 1;
  if (v470 >> 62) {
    goto LABEL_971;
  }
  uint64_t v471 = v108 - v467;
  if (v471 >> 1 > v470) {
    unint64_t v470 = v471 >> 1;
  }
  if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v472 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v472 = v470;
  }
  if (v472)
  {
    if (v472 >> 62) {
      goto LABEL_972;
    }
    uint64_t v473 = operator new(4 * v472);
  }
  else
  {
    uint64_t v473 = 0;
  }
  unint64_t v474 = &v473[4 * v469];
  int v108 = &v473[4 * v472];
  *(_DWORD *)unint64_t v474 = 6;
  v466 = v474 + 4;
  if (v449 != v467)
  {
    unint64_t v475 = v449 - v467 - 4;
    if (v475 < 0x2C)
    {
      uint64_t v476 = v449;
      goto LABEL_645;
    }
    if ((unint64_t)(v449 - v473 - v468) < 0x20)
    {
      uint64_t v476 = v449;
      do
      {
LABEL_645:
        int v482 = *((_DWORD *)v476 - 1);
        v476 -= 4;
        *((_DWORD *)v474 - 1) = v482;
        v474 -= 4;
      }
      while (v476 != v467);
      goto LABEL_646;
    }
    uint64_t v477 = (v475 >> 2) + 1;
    uint64_t v476 = &v449[-4 * (v477 & 0x7FFFFFFFFFFFFFF8)];
    v478 = &v473[4 * v469 - 16];
    uint64_t v479 = v449 - 16;
    uint64_t v480 = v477 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v481 = *(_OWORD *)v479;
      *(v478 - 1) = *((_OWORD *)v479 - 1);
      _OWORD *v478 = v481;
      v478 -= 2;
      v479 -= 32;
      v480 -= 8;
    }
    while (v480);
    v474 -= 4 * (v477 & 0x7FFFFFFFFFFFFFF8);
    if (v477 != (v477 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_645;
    }
  }
LABEL_646:
  *a2 = v474;
  a2[1] = v466;
  a2[2] = v108;
  if (v467)
  {
    operator delete(v467);
    int v108 = a2[2];
  }
LABEL_648:
  a2[1] = v466;
  if (v466 < v108)
  {
    *(_DWORD *)v466 = 0;
    v483 = v466 + 4;
    goto LABEL_671;
  }
  v484 = *a2;
  uint64_t v485 = v466 - *a2;
  uint64_t v486 = v485 >> 2;
  unint64_t v487 = (v485 >> 2) + 1;
  if (v487 >> 62) {
    goto LABEL_971;
  }
  uint64_t v488 = v108 - v484;
  if (v488 >> 1 > v487) {
    unint64_t v487 = v488 >> 1;
  }
  if ((unint64_t)v488 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v489 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v489 = v487;
  }
  if (v489)
  {
    if (v489 >> 62) {
      goto LABEL_972;
    }
    v490 = operator new(4 * v489);
  }
  else
  {
    v490 = 0;
  }
  uint64_t v491 = &v490[4 * v486];
  int v108 = &v490[4 * v489];
  *(_DWORD *)uint64_t v491 = 0;
  v483 = v491 + 4;
  if (v466 != v484)
  {
    unint64_t v492 = v466 - v484 - 4;
    if (v492 < 0x2C)
    {
      uint64_t v493 = v466;
      goto LABEL_668;
    }
    if ((unint64_t)(v466 - &v490[v485]) < 0x20)
    {
      uint64_t v493 = v466;
      do
      {
LABEL_668:
        int v499 = *((_DWORD *)v493 - 1);
        v493 -= 4;
        *((_DWORD *)v491 - 1) = v499;
        v491 -= 4;
      }
      while (v493 != v484);
      goto LABEL_669;
    }
    uint64_t v494 = (v492 >> 2) + 1;
    uint64_t v493 = &v466[-4 * (v494 & 0x7FFFFFFFFFFFFFF8)];
    v495 = &v490[4 * v486 - 16];
    uint64_t v496 = v466 - 16;
    uint64_t v497 = v494 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v498 = *(_OWORD *)v496;
      *(v495 - 1) = *((_OWORD *)v496 - 1);
      _OWORD *v495 = v498;
      v495 -= 2;
      v496 -= 32;
      v497 -= 8;
    }
    while (v497);
    v491 -= 4 * (v494 & 0x7FFFFFFFFFFFFFF8);
    if (v494 != (v494 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_668;
    }
  }
LABEL_669:
  *a2 = v491;
  a2[1] = v483;
  a2[2] = v108;
  if (v484)
  {
    operator delete(v484);
    int v108 = a2[2];
  }
LABEL_671:
  a2[1] = v483;
  if (v483 < v108)
  {
    *(_DWORD *)v483 = 2;
    v500 = v483 + 4;
    goto LABEL_694;
  }
  uint64_t v501 = *a2;
  uint64_t v502 = v483 - *a2;
  uint64_t v503 = v502 >> 2;
  unint64_t v504 = (v502 >> 2) + 1;
  if (v504 >> 62) {
    goto LABEL_971;
  }
  uint64_t v505 = v108 - v501;
  if (v505 >> 1 > v504) {
    unint64_t v504 = v505 >> 1;
  }
  if ((unint64_t)v505 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v506 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v506 = v504;
  }
  if (v506)
  {
    if (v506 >> 62) {
      goto LABEL_972;
    }
    int v507 = operator new(4 * v506);
  }
  else
  {
    int v507 = 0;
  }
  uint64_t v508 = &v507[4 * v503];
  int v108 = &v507[4 * v506];
  *(_DWORD *)uint64_t v508 = 2;
  v500 = v508 + 4;
  if (v483 != v501)
  {
    unint64_t v509 = v483 - v501 - 4;
    if (v509 < 0x2C)
    {
      uint64_t v510 = v483;
      goto LABEL_691;
    }
    if ((unint64_t)(v483 - v507 - v502) < 0x20)
    {
      uint64_t v510 = v483;
      do
      {
LABEL_691:
        int v516 = *((_DWORD *)v510 - 1);
        v510 -= 4;
        *((_DWORD *)v508 - 1) = v516;
        v508 -= 4;
      }
      while (v510 != v501);
      goto LABEL_692;
    }
    uint64_t v511 = (v509 >> 2) + 1;
    uint64_t v510 = &v483[-4 * (v511 & 0x7FFFFFFFFFFFFFF8)];
    v512 = &v507[4 * v503 - 16];
    long long v513 = v483 - 16;
    uint64_t v514 = v511 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v515 = *(_OWORD *)v513;
      *(v512 - 1) = *((_OWORD *)v513 - 1);
      _OWORD *v512 = v515;
      v512 -= 2;
      v513 -= 32;
      v514 -= 8;
    }
    while (v514);
    v508 -= 4 * (v511 & 0x7FFFFFFFFFFFFFF8);
    if (v511 != (v511 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_691;
    }
  }
LABEL_692:
  *a2 = v508;
  a2[1] = v500;
  a2[2] = v108;
  if (v501)
  {
    operator delete(v501);
    int v108 = a2[2];
  }
LABEL_694:
  a2[1] = v500;
  if (v500 < v108)
  {
    *(_DWORD *)v500 = 2;
    uint64_t v517 = v500 + 4;
    goto LABEL_717;
  }
  v518 = *a2;
  uint64_t v519 = v500 - *a2;
  uint64_t v520 = v519 >> 2;
  unint64_t v521 = (v519 >> 2) + 1;
  if (v521 >> 62) {
    goto LABEL_971;
  }
  uint64_t v522 = v108 - v518;
  if (v522 >> 1 > v521) {
    unint64_t v521 = v522 >> 1;
  }
  if ((unint64_t)v522 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v523 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v523 = v521;
  }
  if (v523)
  {
    if (v523 >> 62) {
      goto LABEL_972;
    }
    uint64_t v524 = operator new(4 * v523);
  }
  else
  {
    uint64_t v524 = 0;
  }
  int v525 = &v524[4 * v520];
  int v108 = &v524[4 * v523];
  *(_DWORD *)int v525 = 2;
  uint64_t v517 = v525 + 4;
  if (v500 != v518)
  {
    unint64_t v526 = v500 - v518 - 4;
    if (v526 < 0x2C)
    {
      v527 = v500;
      goto LABEL_714;
    }
    if ((unint64_t)(v500 - v524 - v519) < 0x20)
    {
      v527 = v500;
      do
      {
LABEL_714:
        int v533 = *((_DWORD *)v527 - 1);
        v527 -= 4;
        *((_DWORD *)v525 - 1) = v533;
        v525 -= 4;
      }
      while (v527 != v518);
      goto LABEL_715;
    }
    uint64_t v528 = (v526 >> 2) + 1;
    v527 = &v500[-4 * (v528 & 0x7FFFFFFFFFFFFFF8)];
    v529 = &v524[4 * v520 - 16];
    v530 = v500 - 16;
    uint64_t v531 = v528 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v532 = *(_OWORD *)v530;
      *(v529 - 1) = *((_OWORD *)v530 - 1);
      _OWORD *v529 = v532;
      v529 -= 2;
      v530 -= 32;
      v531 -= 8;
    }
    while (v531);
    v525 -= 4 * (v528 & 0x7FFFFFFFFFFFFFF8);
    if (v528 != (v528 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_714;
    }
  }
LABEL_715:
  *a2 = v525;
  a2[1] = v517;
  a2[2] = v108;
  if (v518)
  {
    operator delete(v518);
    int v108 = a2[2];
  }
LABEL_717:
  a2[1] = v517;
  if (v517 < v108)
  {
    *(_DWORD *)uint64_t v517 = 3;
    int v534 = v517 + 4;
    goto LABEL_740;
  }
  uint64_t v535 = *a2;
  uint64_t v536 = v517 - *a2;
  uint64_t v537 = v536 >> 2;
  unint64_t v538 = (v536 >> 2) + 1;
  if (v538 >> 62) {
    goto LABEL_971;
  }
  uint64_t v539 = v108 - v535;
  if (v539 >> 1 > v538) {
    unint64_t v538 = v539 >> 1;
  }
  if ((unint64_t)v539 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v540 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v540 = v538;
  }
  if (v540)
  {
    if (v540 >> 62) {
      goto LABEL_972;
    }
    long long v541 = operator new(4 * v540);
  }
  else
  {
    long long v541 = 0;
  }
  uint64_t v542 = &v541[4 * v537];
  int v108 = &v541[4 * v540];
  *(_DWORD *)uint64_t v542 = 3;
  int v534 = v542 + 4;
  if (v517 != v535)
  {
    unint64_t v543 = v517 - v535 - 4;
    if (v543 < 0x2C)
    {
      v544 = v517;
      goto LABEL_737;
    }
    if ((unint64_t)(v517 - v541 - v536) < 0x20)
    {
      v544 = v517;
      do
      {
LABEL_737:
        int v550 = *((_DWORD *)v544 - 1);
        v544 -= 4;
        *((_DWORD *)v542 - 1) = v550;
        v542 -= 4;
      }
      while (v544 != v535);
      goto LABEL_738;
    }
    uint64_t v545 = (v543 >> 2) + 1;
    v544 = &v517[-4 * (v545 & 0x7FFFFFFFFFFFFFF8)];
    v546 = &v541[4 * v537 - 16];
    v547 = v517 - 16;
    uint64_t v548 = v545 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v549 = *(_OWORD *)v547;
      *(v546 - 1) = *((_OWORD *)v547 - 1);
      _OWORD *v546 = v549;
      v546 -= 2;
      v547 -= 32;
      v548 -= 8;
    }
    while (v548);
    v542 -= 4 * (v545 & 0x7FFFFFFFFFFFFFF8);
    if (v545 != (v545 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_737;
    }
  }
LABEL_738:
  *a2 = v542;
  a2[1] = v534;
  a2[2] = v108;
  if (v535)
  {
    operator delete(v535);
    int v108 = a2[2];
  }
LABEL_740:
  a2[1] = v534;
  if (v534 < v108)
  {
    *(_DWORD *)int v534 = 6;
    uint64_t v551 = v534 + 4;
    goto LABEL_763;
  }
  uint64_t v552 = *a2;
  uint64_t v553 = v534 - *a2;
  uint64_t v554 = v553 >> 2;
  unint64_t v555 = (v553 >> 2) + 1;
  if (v555 >> 62) {
    goto LABEL_971;
  }
  uint64_t v556 = v108 - v552;
  if (v556 >> 1 > v555) {
    unint64_t v555 = v556 >> 1;
  }
  if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v557 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v557 = v555;
  }
  if (v557)
  {
    if (v557 >> 62) {
      goto LABEL_972;
    }
    v558 = operator new(4 * v557);
  }
  else
  {
    v558 = 0;
  }
  v559 = &v558[4 * v554];
  int v108 = &v558[4 * v557];
  *(_DWORD *)v559 = 6;
  uint64_t v551 = v559 + 4;
  if (v534 != v552)
  {
    unint64_t v560 = v534 - v552 - 4;
    if (v560 < 0x2C)
    {
      v561 = v534;
      goto LABEL_760;
    }
    if ((unint64_t)(v534 - v558 - v553) < 0x20)
    {
      v561 = v534;
      do
      {
LABEL_760:
        int v567 = *((_DWORD *)v561 - 1);
        v561 -= 4;
        *((_DWORD *)v559 - 1) = v567;
        v559 -= 4;
      }
      while (v561 != v552);
      goto LABEL_761;
    }
    uint64_t v562 = (v560 >> 2) + 1;
    v561 = &v534[-4 * (v562 & 0x7FFFFFFFFFFFFFF8)];
    v563 = &v558[4 * v554 - 16];
    v564 = v534 - 16;
    uint64_t v565 = v562 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v566 = *(_OWORD *)v564;
      *(v563 - 1) = *((_OWORD *)v564 - 1);
      _OWORD *v563 = v566;
      v563 -= 2;
      v564 -= 32;
      v565 -= 8;
    }
    while (v565);
    v559 -= 4 * (v562 & 0x7FFFFFFFFFFFFFF8);
    if (v562 != (v562 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_760;
    }
  }
LABEL_761:
  *a2 = v559;
  a2[1] = v551;
  a2[2] = v108;
  if (v552)
  {
    operator delete(v552);
    int v108 = a2[2];
  }
LABEL_763:
  a2[1] = v551;
  if (v551 < v108)
  {
    *(_DWORD *)uint64_t v551 = 6;
    v568 = v551 + 4;
    goto LABEL_786;
  }
  v569 = *a2;
  uint64_t v570 = v551 - *a2;
  uint64_t v571 = v570 >> 2;
  unint64_t v572 = (v570 >> 2) + 1;
  if (v572 >> 62) {
    goto LABEL_971;
  }
  uint64_t v573 = v108 - v569;
  if (v573 >> 1 > v572) {
    unint64_t v572 = v573 >> 1;
  }
  if ((unint64_t)v573 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v574 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v574 = v572;
  }
  if (v574)
  {
    if (v574 >> 62) {
      goto LABEL_972;
    }
    v575 = operator new(4 * v574);
  }
  else
  {
    v575 = 0;
  }
  v576 = &v575[4 * v571];
  int v108 = &v575[4 * v574];
  *(_DWORD *)v576 = 6;
  v568 = v576 + 4;
  if (v551 != v569)
  {
    unint64_t v577 = v551 - v569 - 4;
    if (v577 < 0x2C)
    {
      v578 = v551;
      goto LABEL_783;
    }
    if ((unint64_t)(v551 - v575 - v570) < 0x20)
    {
      v578 = v551;
      do
      {
LABEL_783:
        int v584 = *((_DWORD *)v578 - 1);
        v578 -= 4;
        *((_DWORD *)v576 - 1) = v584;
        v576 -= 4;
      }
      while (v578 != v569);
      goto LABEL_784;
    }
    uint64_t v579 = (v577 >> 2) + 1;
    v578 = &v551[-4 * (v579 & 0x7FFFFFFFFFFFFFF8)];
    v580 = &v575[4 * v571 - 16];
    v581 = v551 - 16;
    uint64_t v582 = v579 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v583 = *(_OWORD *)v581;
      *(v580 - 1) = *((_OWORD *)v581 - 1);
      _OWORD *v580 = v583;
      v580 -= 2;
      v581 -= 32;
      v582 -= 8;
    }
    while (v582);
    v576 -= 4 * (v579 & 0x7FFFFFFFFFFFFFF8);
    if (v579 != (v579 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_783;
    }
  }
LABEL_784:
  *a2 = v576;
  a2[1] = v568;
  a2[2] = v108;
  if (v569)
  {
    operator delete(v569);
    int v108 = a2[2];
  }
LABEL_786:
  a2[1] = v568;
  if (v568 < v108)
  {
    *(_DWORD *)v568 = 3;
    v585 = v568 + 4;
    goto LABEL_809;
  }
  v586 = *a2;
  uint64_t v587 = v568 - *a2;
  uint64_t v588 = v587 >> 2;
  unint64_t v589 = (v587 >> 2) + 1;
  if (v589 >> 62) {
    goto LABEL_971;
  }
  uint64_t v590 = v108 - v586;
  if (v590 >> 1 > v589) {
    unint64_t v589 = v590 >> 1;
  }
  if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v591 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v591 = v589;
  }
  if (v591)
  {
    if (v591 >> 62) {
      goto LABEL_972;
    }
    v592 = operator new(4 * v591);
  }
  else
  {
    v592 = 0;
  }
  v593 = &v592[4 * v588];
  int v108 = &v592[4 * v591];
  *(_DWORD *)v593 = 3;
  v585 = v593 + 4;
  if (v568 != v586)
  {
    unint64_t v594 = v568 - v586 - 4;
    if (v594 < 0x2C)
    {
      v595 = v568;
      goto LABEL_806;
    }
    if ((unint64_t)(v568 - v592 - v587) < 0x20)
    {
      v595 = v568;
      do
      {
LABEL_806:
        int v601 = *((_DWORD *)v595 - 1);
        v595 -= 4;
        *((_DWORD *)v593 - 1) = v601;
        v593 -= 4;
      }
      while (v595 != v586);
      goto LABEL_807;
    }
    uint64_t v596 = (v594 >> 2) + 1;
    v595 = &v568[-4 * (v596 & 0x7FFFFFFFFFFFFFF8)];
    v597 = &v592[4 * v588 - 16];
    v598 = v568 - 16;
    uint64_t v599 = v596 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v600 = *(_OWORD *)v598;
      *(v597 - 1) = *((_OWORD *)v598 - 1);
      _OWORD *v597 = v600;
      v597 -= 2;
      v598 -= 32;
      v599 -= 8;
    }
    while (v599);
    v593 -= 4 * (v596 & 0x7FFFFFFFFFFFFFF8);
    if (v596 != (v596 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_806;
    }
  }
LABEL_807:
  *a2 = v593;
  a2[1] = v585;
  a2[2] = v108;
  if (v586)
  {
    operator delete(v586);
    int v108 = a2[2];
  }
LABEL_809:
  a2[1] = v585;
  if (v585 < v108)
  {
    *(_DWORD *)v585 = 7;
    v602 = v585 + 4;
    goto LABEL_832;
  }
  v603 = *a2;
  uint64_t v604 = v585 - *a2;
  uint64_t v605 = v604 >> 2;
  unint64_t v606 = (v604 >> 2) + 1;
  if (v606 >> 62) {
    goto LABEL_971;
  }
  uint64_t v607 = v108 - v603;
  if (v607 >> 1 > v606) {
    unint64_t v606 = v607 >> 1;
  }
  if ((unint64_t)v607 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v608 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v608 = v606;
  }
  if (v608)
  {
    if (v608 >> 62) {
      goto LABEL_972;
    }
    v609 = operator new(4 * v608);
  }
  else
  {
    v609 = 0;
  }
  v610 = &v609[4 * v605];
  int v108 = &v609[4 * v608];
  *(_DWORD *)v610 = 7;
  v602 = v610 + 4;
  if (v585 != v603)
  {
    unint64_t v611 = v585 - v603 - 4;
    if (v611 < 0x2C)
    {
      v612 = v585;
      goto LABEL_829;
    }
    if ((unint64_t)(v585 - v609 - v604) < 0x20)
    {
      v612 = v585;
      do
      {
LABEL_829:
        int v618 = *((_DWORD *)v612 - 1);
        v612 -= 4;
        *((_DWORD *)v610 - 1) = v618;
        v610 -= 4;
      }
      while (v612 != v603);
      goto LABEL_830;
    }
    uint64_t v613 = (v611 >> 2) + 1;
    v612 = &v585[-4 * (v613 & 0x7FFFFFFFFFFFFFF8)];
    v614 = &v609[4 * v605 - 16];
    v615 = v585 - 16;
    uint64_t v616 = v613 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v617 = *(_OWORD *)v615;
      *(v614 - 1) = *((_OWORD *)v615 - 1);
      _OWORD *v614 = v617;
      v614 -= 2;
      v615 -= 32;
      v616 -= 8;
    }
    while (v616);
    v610 -= 4 * (v613 & 0x7FFFFFFFFFFFFFF8);
    if (v613 != (v613 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_829;
    }
  }
LABEL_830:
  *a2 = v610;
  a2[1] = v602;
  a2[2] = v108;
  if (v603)
  {
    operator delete(v603);
    int v108 = a2[2];
  }
LABEL_832:
  a2[1] = v602;
  if (v602 < v108)
  {
    *(_DWORD *)v602 = 1;
    v619 = v602 + 4;
    goto LABEL_855;
  }
  v620 = *a2;
  uint64_t v621 = v602 - *a2;
  uint64_t v622 = v621 >> 2;
  unint64_t v623 = (v621 >> 2) + 1;
  if (v623 >> 62) {
    goto LABEL_971;
  }
  uint64_t v624 = v108 - v620;
  if (v624 >> 1 > v623) {
    unint64_t v623 = v624 >> 1;
  }
  if ((unint64_t)v624 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v625 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v625 = v623;
  }
  if (v625)
  {
    if (v625 >> 62) {
      goto LABEL_972;
    }
    v626 = operator new(4 * v625);
  }
  else
  {
    v626 = 0;
  }
  v627 = &v626[4 * v622];
  int v108 = &v626[4 * v625];
  *(_DWORD *)v627 = 1;
  v619 = v627 + 4;
  if (v602 != v620)
  {
    unint64_t v628 = v602 - v620 - 4;
    if (v628 < 0x2C)
    {
      v629 = v602;
      goto LABEL_852;
    }
    if ((unint64_t)(v602 - v626 - v621) < 0x20)
    {
      v629 = v602;
      do
      {
LABEL_852:
        int v635 = *((_DWORD *)v629 - 1);
        v629 -= 4;
        *((_DWORD *)v627 - 1) = v635;
        v627 -= 4;
      }
      while (v629 != v620);
      goto LABEL_853;
    }
    uint64_t v630 = (v628 >> 2) + 1;
    v629 = &v602[-4 * (v630 & 0x7FFFFFFFFFFFFFF8)];
    v631 = &v626[4 * v622 - 16];
    v632 = v602 - 16;
    uint64_t v633 = v630 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v634 = *(_OWORD *)v632;
      *(v631 - 1) = *((_OWORD *)v632 - 1);
      _OWORD *v631 = v634;
      v631 -= 2;
      v632 -= 32;
      v633 -= 8;
    }
    while (v633);
    v627 -= 4 * (v630 & 0x7FFFFFFFFFFFFFF8);
    if (v630 != (v630 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_852;
    }
  }
LABEL_853:
  *a2 = v627;
  a2[1] = v619;
  a2[2] = v108;
  if (v620)
  {
    operator delete(v620);
    int v108 = a2[2];
  }
LABEL_855:
  a2[1] = v619;
  if (v619 < v108)
  {
    *(_DWORD *)v619 = 0;
    v636 = v619 + 4;
    goto LABEL_878;
  }
  v637 = *a2;
  uint64_t v638 = v619 - *a2;
  uint64_t v639 = v638 >> 2;
  unint64_t v640 = (v638 >> 2) + 1;
  if (v640 >> 62) {
    goto LABEL_971;
  }
  uint64_t v641 = v108 - v637;
  if (v641 >> 1 > v640) {
    unint64_t v640 = v641 >> 1;
  }
  if ((unint64_t)v641 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v642 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v642 = v640;
  }
  if (v642)
  {
    if (v642 >> 62) {
      goto LABEL_972;
    }
    v643 = operator new(4 * v642);
  }
  else
  {
    v643 = 0;
  }
  v644 = &v643[4 * v639];
  int v108 = &v643[4 * v642];
  *(_DWORD *)v644 = 0;
  v636 = v644 + 4;
  if (v619 != v637)
  {
    unint64_t v645 = v619 - v637 - 4;
    if (v645 < 0x2C)
    {
      v646 = v619;
      goto LABEL_875;
    }
    if ((unint64_t)(v619 - &v643[v638]) < 0x20)
    {
      v646 = v619;
      do
      {
LABEL_875:
        int v652 = *((_DWORD *)v646 - 1);
        v646 -= 4;
        *((_DWORD *)v644 - 1) = v652;
        v644 -= 4;
      }
      while (v646 != v637);
      goto LABEL_876;
    }
    uint64_t v647 = (v645 >> 2) + 1;
    v646 = &v619[-4 * (v647 & 0x7FFFFFFFFFFFFFF8)];
    v648 = &v643[4 * v639 - 16];
    v649 = v619 - 16;
    uint64_t v650 = v647 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v651 = *(_OWORD *)v649;
      *(v648 - 1) = *((_OWORD *)v649 - 1);
      _OWORD *v648 = v651;
      v648 -= 2;
      v649 -= 32;
      v650 -= 8;
    }
    while (v650);
    v644 -= 4 * (v647 & 0x7FFFFFFFFFFFFFF8);
    if (v647 != (v647 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_875;
    }
  }
LABEL_876:
  *a2 = v644;
  a2[1] = v636;
  a2[2] = v108;
  if (v637)
  {
    operator delete(v637);
    int v108 = a2[2];
  }
LABEL_878:
  a2[1] = v636;
  if (v636 < v108)
  {
    *(_DWORD *)v636 = 5;
    v653 = v636 + 4;
    goto LABEL_901;
  }
  v654 = *a2;
  uint64_t v655 = v636 - *a2;
  uint64_t v656 = v655 >> 2;
  unint64_t v657 = (v655 >> 2) + 1;
  if (v657 >> 62) {
    goto LABEL_971;
  }
  uint64_t v658 = v108 - v654;
  if (v658 >> 1 > v657) {
    unint64_t v657 = v658 >> 1;
  }
  if ((unint64_t)v658 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v659 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v659 = v657;
  }
  if (v659)
  {
    if (v659 >> 62) {
      goto LABEL_972;
    }
    v660 = operator new(4 * v659);
  }
  else
  {
    v660 = 0;
  }
  v661 = &v660[4 * v656];
  int v108 = &v660[4 * v659];
  *(_DWORD *)v661 = 5;
  v653 = v661 + 4;
  if (v636 != v654)
  {
    unint64_t v662 = v636 - v654 - 4;
    if (v662 < 0x2C)
    {
      v663 = v636;
      goto LABEL_898;
    }
    if ((unint64_t)(v636 - v660 - v655) < 0x20)
    {
      v663 = v636;
      do
      {
LABEL_898:
        int v669 = *((_DWORD *)v663 - 1);
        v663 -= 4;
        *((_DWORD *)v661 - 1) = v669;
        v661 -= 4;
      }
      while (v663 != v654);
      goto LABEL_899;
    }
    uint64_t v664 = (v662 >> 2) + 1;
    v663 = &v636[-4 * (v664 & 0x7FFFFFFFFFFFFFF8)];
    v665 = &v660[4 * v656 - 16];
    v666 = v636 - 16;
    uint64_t v667 = v664 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v668 = *(_OWORD *)v666;
      *(v665 - 1) = *((_OWORD *)v666 - 1);
      _OWORD *v665 = v668;
      v665 -= 2;
      v666 -= 32;
      v667 -= 8;
    }
    while (v667);
    v661 -= 4 * (v664 & 0x7FFFFFFFFFFFFFF8);
    if (v664 != (v664 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_898;
    }
  }
LABEL_899:
  *a2 = v661;
  a2[1] = v653;
  a2[2] = v108;
  if (v654)
  {
    operator delete(v654);
    int v108 = a2[2];
  }
LABEL_901:
  a2[1] = v653;
  if (v653 < v108)
  {
    *(_DWORD *)v653 = 5;
    v670 = v653 + 4;
    goto LABEL_924;
  }
  v671 = *a2;
  uint64_t v672 = v653 - *a2;
  uint64_t v673 = v672 >> 2;
  unint64_t v674 = (v672 >> 2) + 1;
  if (v674 >> 62) {
    goto LABEL_971;
  }
  uint64_t v675 = v108 - v671;
  if (v675 >> 1 > v674) {
    unint64_t v674 = v675 >> 1;
  }
  if ((unint64_t)v675 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v676 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v676 = v674;
  }
  if (v676)
  {
    if (v676 >> 62) {
      goto LABEL_972;
    }
    v677 = operator new(4 * v676);
  }
  else
  {
    v677 = 0;
  }
  v678 = &v677[4 * v673];
  int v108 = &v677[4 * v676];
  *(_DWORD *)v678 = 5;
  v670 = v678 + 4;
  if (v653 != v671)
  {
    unint64_t v679 = v653 - v671 - 4;
    if (v679 < 0x2C)
    {
      v680 = v653;
      goto LABEL_921;
    }
    if ((unint64_t)(v653 - v677 - v672) < 0x20)
    {
      v680 = v653;
      do
      {
LABEL_921:
        int v686 = *((_DWORD *)v680 - 1);
        v680 -= 4;
        *((_DWORD *)v678 - 1) = v686;
        v678 -= 4;
      }
      while (v680 != v671);
      goto LABEL_922;
    }
    uint64_t v681 = (v679 >> 2) + 1;
    v680 = &v653[-4 * (v681 & 0x7FFFFFFFFFFFFFF8)];
    v682 = &v677[4 * v673 - 16];
    v683 = v653 - 16;
    uint64_t v684 = v681 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v685 = *(_OWORD *)v683;
      *(v682 - 1) = *((_OWORD *)v683 - 1);
      _OWORD *v682 = v685;
      v682 -= 2;
      v683 -= 32;
      v684 -= 8;
    }
    while (v684);
    v678 -= 4 * (v681 & 0x7FFFFFFFFFFFFFF8);
    if (v681 != (v681 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_921;
    }
  }
LABEL_922:
  *a2 = v678;
  a2[1] = v670;
  a2[2] = v108;
  if (v671)
  {
    operator delete(v671);
    int v108 = a2[2];
  }
LABEL_924:
  a2[1] = v670;
  if (v670 < v108)
  {
    *(_DWORD *)v670 = 0;
    v687 = v670 + 4;
    goto LABEL_947;
  }
  v688 = *a2;
  uint64_t v689 = v670 - *a2;
  uint64_t v690 = v689 >> 2;
  unint64_t v691 = (v689 >> 2) + 1;
  if (v691 >> 62) {
    goto LABEL_971;
  }
  uint64_t v692 = v108 - v688;
  if (v692 >> 1 > v691) {
    unint64_t v691 = v692 >> 1;
  }
  if ((unint64_t)v692 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v693 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v693 = v691;
  }
  if (v693)
  {
    if (v693 >> 62) {
      goto LABEL_972;
    }
    v694 = operator new(4 * v693);
  }
  else
  {
    v694 = 0;
  }
  v695 = &v694[4 * v690];
  int v108 = &v694[4 * v693];
  *(_DWORD *)v695 = 0;
  v687 = v695 + 4;
  if (v670 != v688)
  {
    unint64_t v696 = v670 - v688 - 4;
    if (v696 < 0x2C)
    {
      v697 = v670;
      goto LABEL_944;
    }
    if ((unint64_t)(v670 - &v694[v689]) < 0x20)
    {
      v697 = v670;
      do
      {
LABEL_944:
        int v703 = *((_DWORD *)v697 - 1);
        v697 -= 4;
        *((_DWORD *)v695 - 1) = v703;
        v695 -= 4;
      }
      while (v697 != v688);
      goto LABEL_945;
    }
    uint64_t v698 = (v696 >> 2) + 1;
    v697 = &v670[-4 * (v698 & 0x7FFFFFFFFFFFFFF8)];
    v699 = &v694[4 * v690 - 16];
    v700 = v670 - 16;
    uint64_t v701 = v698 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v702 = *(_OWORD *)v700;
      *(v699 - 1) = *((_OWORD *)v700 - 1);
      _OWORD *v699 = v702;
      v699 -= 2;
      v700 -= 32;
      v701 -= 8;
    }
    while (v701);
    v695 -= 4 * (v698 & 0x7FFFFFFFFFFFFFF8);
    if (v698 != (v698 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_944;
    }
  }
LABEL_945:
  *a2 = v695;
  a2[1] = v687;
  a2[2] = v108;
  if (v688)
  {
    operator delete(v688);
    int v108 = a2[2];
  }
LABEL_947:
  a2[1] = v687;
  if (v687 < v108)
  {
    *(_DWORD *)v687 = 4;
    v704 = v687 + 4;
    goto LABEL_970;
  }
  v705 = *a2;
  uint64_t v706 = v687 - *a2;
  uint64_t v707 = v706 >> 2;
  unint64_t v708 = (v706 >> 2) + 1;
  if (v708 >> 62) {
LABEL_971:
  }
    abort();
  uint64_t v709 = v108 - v705;
  if (v709 >> 1 > v708) {
    unint64_t v708 = v709 >> 1;
  }
  if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v710 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v710 = v708;
  }
  if (v710)
  {
    if (!(v710 >> 62))
    {
      v711 = operator new(4 * v710);
      goto LABEL_959;
    }
LABEL_972:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v711 = 0;
LABEL_959:
  v712 = &v711[4 * v707];
  v713 = &v711[4 * v710];
  *(_DWORD *)v712 = 4;
  v704 = v712 + 4;
  if (v687 == v705) {
    goto LABEL_968;
  }
  unint64_t v714 = v687 - v705 - 4;
  if (v714 < 0x2C)
  {
    v715 = v687;
    goto LABEL_967;
  }
  if ((unint64_t)(v687 - v711 - v706) < 0x20)
  {
    v715 = v687;
    do
    {
LABEL_967:
      int v721 = *((_DWORD *)v715 - 1);
      v715 -= 4;
      *((_DWORD *)v712 - 1) = v721;
      v712 -= 4;
    }
    while (v715 != v705);
    goto LABEL_968;
  }
  uint64_t v716 = (v714 >> 2) + 1;
  v715 = &v687[-4 * (v716 & 0x7FFFFFFFFFFFFFF8)];
  v717 = &v711[4 * v707 - 16];
  v718 = v687 - 16;
  uint64_t v719 = v716 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v720 = *(_OWORD *)v718;
    *(v717 - 1) = *((_OWORD *)v718 - 1);
    _OWORD *v717 = v720;
    v717 -= 2;
    v718 -= 32;
    v719 -= 8;
  }
  while (v719);
  v712 -= 4 * (v716 & 0x7FFFFFFFFFFFFFF8);
  if (v716 != (v716 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_967;
  }
LABEL_968:
  *a2 = v712;
  a2[1] = v704;
  a2[2] = v713;
  if (v705) {
    operator delete(v705);
  }
LABEL_970:
  a2[1] = v704;
}

void md::GeometryLogic::createIcoSphere(float **a1, void **a2, int a3)
{
  int v405 = 0;
  *(_OWORD *)unint64_t v402 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v404 = 1065353216;
  uint64_t v400 = a1;
  uint64_t v401 = &v405;
  int v399 = 0;
  unint64_t v398 = 0x3FCF1BBDBF800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 0;
  unint64_t v398 = 0x3FCF1BBD3F800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 0;
  unint64_t v398 = 0xBFCF1BBDBF800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 0;
  unint64_t v398 = 0xBFCF1BBD3F800000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 1070537661;
  unint64_t v398 = 0xBF80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 1070537661;
  unint64_t v398 = 0x3F80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = -1076945987;
  unint64_t v398 = 0xBF80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = -1076945987;
  unint64_t v398 = 0x3F80000000000000;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = -1082130432;
  unint64_t v398 = 1070537661;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 1065353216;
  unint64_t v398 = 1070537661;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = -1082130432;
  unint64_t v398 = 3218021309;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v399 = 1065353216;
  unint64_t v398 = 3218021309;
  md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(&v400, (float *)&v398);
  int v7 = a2[1];
  unint64_t v6 = (unint64_t)a2[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *a2;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a2) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x1555555555555555) {
        goto LABEL_578;
      }
      uint64_t v14 = (char *)operator new(12 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[12 * v10];
    *((_DWORD *)v15 + 2) = 5;
    *(void *)int v15 = 0xB00000000;
    unint64_t v8 = v15 + 12;
    if (v7 != v9)
    {
      do
      {
        uint64_t v16 = *(void *)(v7 - 3);
        v7 -= 3;
        int v17 = v7[2];
        *(void *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v7 != v9);
      int v7 = *a2;
    }
    *a2 = v15;
    a2[1] = v8;
    a2[2] = &v14[12 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    void v7[2] = 5;
    *(void *)int v7 = 0xB00000000;
    unint64_t v8 = v7 + 3;
  }
  a2[1] = v8;
  unint64_t v18 = (unint64_t)a2[2];
  if ((unint64_t)v8 < v18)
  {
    v8[2] = 1;
    *(void *)unint64_t v8 = 0x500000000;
    unint64_t v19 = v8 + 3;
    goto LABEL_36;
  }
  unint64_t v20 = *a2;
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (unsigned char *)*a2) >> 2);
  unint64_t v22 = v21 + 1;
  if (v21 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v20) >> 2);
  if (2 * v23 > v22) {
    unint64_t v22 = 2 * v23;
  }
  if (v23 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v24 = 0x1555555555555555;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v24)
  {
    if (v24 > 0x1555555555555555) {
      goto LABEL_578;
    }
    int v25 = (char *)operator new(12 * v24);
  }
  else
  {
    int v25 = 0;
  }
  uint64_t v26 = &v25[12 * v21];
  int v27 = &v25[12 * v24];
  *((_DWORD *)v26 + 2) = 1;
  *(void *)uint64_t v26 = 0x500000000;
  unint64_t v19 = v26 + 12;
  if (v8 == v20)
  {
    *a2 = v26;
    a2[1] = v19;
    a2[2] = v27;
LABEL_35:
    operator delete(v8);
    goto LABEL_36;
  }
  do
  {
    uint64_t v28 = *(void *)(v8 - 3);
    v8 -= 3;
    int v29 = v8[2];
    *(void *)(v26 - 12) = v28;
    v26 -= 12;
    *((_DWORD *)v26 + 2) = v29;
  }
  while (v8 != v20);
  unint64_t v8 = *a2;
  *a2 = v26;
  a2[1] = v19;
  a2[2] = v27;
  if (v8) {
    goto LABEL_35;
  }
LABEL_36:
  a2[1] = v19;
  unint64_t v30 = (unint64_t)a2[2];
  if ((unint64_t)v19 < v30)
  {
    void v19[2] = 7;
    *(void *)unint64_t v19 = 0x100000000;
    unint64_t v31 = v19 + 3;
    goto LABEL_54;
  }
  unint64_t v32 = *a2;
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (unsigned char *)*a2) >> 2);
  unint64_t v34 = v33 + 1;
  if (v33 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)v32) >> 2);
  if (2 * v35 > v34) {
    unint64_t v34 = 2 * v35;
  }
  if (v35 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v36 = 0x1555555555555555;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v36)
  {
    if (v36 > 0x1555555555555555) {
      goto LABEL_578;
    }
    int v37 = (char *)operator new(12 * v36);
  }
  else
  {
    int v37 = 0;
  }
  uint64_t v38 = &v37[12 * v33];
  int v39 = &v37[12 * v36];
  *((_DWORD *)v38 + 2) = 7;
  *(void *)uint64_t v38 = 0x100000000;
  unint64_t v31 = v38 + 12;
  if (v19 == v32)
  {
    *a2 = v38;
    a2[1] = v31;
    a2[2] = v39;
LABEL_53:
    operator delete(v19);
    goto LABEL_54;
  }
  do
  {
    uint64_t v40 = *(void *)(v19 - 3);
    v19 -= 3;
    int v41 = v19[2];
    *(void *)(v38 - 12) = v40;
    v38 -= 12;
    *((_DWORD *)v38 + 2) = v41;
  }
  while (v19 != v32);
  unint64_t v19 = *a2;
  *a2 = v38;
  a2[1] = v31;
  a2[2] = v39;
  if (v19) {
    goto LABEL_53;
  }
LABEL_54:
  a2[1] = v31;
  unint64_t v42 = (unint64_t)a2[2];
  if ((unint64_t)v31 < v42)
  {
    v31[2] = 10;
    *(void *)unint64_t v31 = 0x700000000;
    long long v43 = v31 + 3;
    goto LABEL_72;
  }
  long long v44 = *a2;
  unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (unsigned char *)*a2) >> 2);
  unint64_t v46 = v45 + 1;
  if (v45 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)v44) >> 2);
  if (2 * v47 > v46) {
    unint64_t v46 = 2 * v47;
  }
  if (v47 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v48 = 0x1555555555555555;
  }
  else {
    unint64_t v48 = v46;
  }
  if (v48)
  {
    if (v48 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v49 = (char *)operator new(12 * v48);
  }
  else
  {
    unint64_t v49 = 0;
  }
  unint64_t v50 = &v49[12 * v45];
  unint64_t v51 = &v49[12 * v48];
  *((_DWORD *)v50 + 2) = 10;
  *(void *)unint64_t v50 = 0x700000000;
  long long v43 = v50 + 12;
  if (v31 == v44)
  {
    *a2 = v50;
    a2[1] = v43;
    a2[2] = v51;
LABEL_71:
    operator delete(v31);
    goto LABEL_72;
  }
  do
  {
    uint64_t v52 = *(void *)(v31 - 3);
    v31 -= 3;
    int v53 = v31[2];
    *(void *)(v50 - 12) = v52;
    v50 -= 12;
    *((_DWORD *)v50 + 2) = v53;
  }
  while (v31 != v44);
  unint64_t v31 = *a2;
  *a2 = v50;
  a2[1] = v43;
  a2[2] = v51;
  if (v31) {
    goto LABEL_71;
  }
LABEL_72:
  a2[1] = v43;
  unint64_t v54 = (unint64_t)a2[2];
  if ((unint64_t)v43 < v54)
  {
    v43[2] = 11;
    *(void *)long long v43 = 0xA00000000;
    double v55 = v43 + 3;
    goto LABEL_90;
  }
  uint64_t v56 = *a2;
  unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)*a2) >> 2);
  unint64_t v58 = v57 + 1;
  if (v57 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - (void)v56) >> 2);
  if (2 * v59 > v58) {
    unint64_t v58 = 2 * v59;
  }
  if (v59 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v60 = 0x1555555555555555;
  }
  else {
    unint64_t v60 = v58;
  }
  if (v60)
  {
    if (v60 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v61 = (char *)operator new(12 * v60);
  }
  else
  {
    unint64_t v61 = 0;
  }
  unint64_t v62 = &v61[12 * v57];
  unint64_t v63 = &v61[12 * v60];
  *((_DWORD *)v62 + 2) = 11;
  *(void *)unint64_t v62 = 0xA00000000;
  double v55 = v62 + 12;
  if (v43 == v56)
  {
    *a2 = v62;
    a2[1] = v55;
    a2[2] = v63;
LABEL_89:
    operator delete(v43);
    goto LABEL_90;
  }
  do
  {
    uint64_t v64 = *(void *)(v43 - 3);
    v43 -= 3;
    int v65 = v43[2];
    *(void *)(v62 - 12) = v64;
    v62 -= 12;
    *((_DWORD *)v62 + 2) = v65;
  }
  while (v43 != v56);
  long long v43 = *a2;
  *a2 = v62;
  a2[1] = v55;
  a2[2] = v63;
  if (v43) {
    goto LABEL_89;
  }
LABEL_90:
  a2[1] = v55;
  unint64_t v66 = (unint64_t)a2[2];
  if ((unint64_t)v55 < v66)
  {
    v55[2] = 9;
    *(void *)double v55 = 0x500000001;
    int v67 = v55 + 3;
    goto LABEL_108;
  }
  uint64_t v68 = *a2;
  unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)*a2) >> 2);
  unint64_t v70 = v69 + 1;
  if (v69 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)v68) >> 2);
  if (2 * v71 > v70) {
    unint64_t v70 = 2 * v71;
  }
  if (v71 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v72 = 0x1555555555555555;
  }
  else {
    unint64_t v72 = v70;
  }
  if (v72)
  {
    if (v72 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v73 = (char *)operator new(12 * v72);
  }
  else
  {
    unint64_t v73 = 0;
  }
  unint64_t v74 = &v73[12 * v69];
  unint64_t v75 = &v73[12 * v72];
  *((_DWORD *)v74 + 2) = 9;
  *(void *)unint64_t v74 = 0x500000001;
  int v67 = v74 + 12;
  if (v55 == v68)
  {
    *a2 = v74;
    a2[1] = v67;
    a2[2] = v75;
LABEL_107:
    operator delete(v55);
    goto LABEL_108;
  }
  do
  {
    uint64_t v76 = *(void *)(v55 - 3);
    v55 -= 3;
    int v77 = v55[2];
    *(void *)(v74 - 12) = v76;
    v74 -= 12;
    *((_DWORD *)v74 + 2) = v77;
  }
  while (v55 != v68);
  double v55 = *a2;
  *a2 = v74;
  a2[1] = v67;
  a2[2] = v75;
  if (v55) {
    goto LABEL_107;
  }
LABEL_108:
  a2[1] = v67;
  unint64_t v78 = (unint64_t)a2[2];
  if ((unint64_t)v67 < v78)
  {
    v67[2] = 4;
    *(void *)int v67 = 0xB00000005;
    double v79 = v67 + 3;
    goto LABEL_126;
  }
  uint64_t v80 = *a2;
  unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (unsigned char *)*a2) >> 2);
  unint64_t v82 = v81 + 1;
  if (v81 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (void)v80) >> 2);
  if (2 * v83 > v82) {
    unint64_t v82 = 2 * v83;
  }
  if (v83 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v84 = 0x1555555555555555;
  }
  else {
    unint64_t v84 = v82;
  }
  if (v84)
  {
    if (v84 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v85 = (char *)operator new(12 * v84);
  }
  else
  {
    unint64_t v85 = 0;
  }
  unint64_t v86 = &v85[12 * v81];
  unint64_t v87 = &v85[12 * v84];
  *((_DWORD *)v86 + 2) = 4;
  *(void *)unint64_t v86 = 0xB00000005;
  double v79 = v86 + 12;
  if (v67 == v80)
  {
    *a2 = v86;
    a2[1] = v79;
    a2[2] = v87;
LABEL_125:
    operator delete(v67);
    goto LABEL_126;
  }
  do
  {
    uint64_t v88 = *(void *)(v67 - 3);
    v67 -= 3;
    int v89 = v67[2];
    *(void *)(v86 - 12) = v88;
    v86 -= 12;
    *((_DWORD *)v86 + 2) = v89;
  }
  while (v67 != v80);
  int v67 = *a2;
  *a2 = v86;
  a2[1] = v79;
  a2[2] = v87;
  if (v67) {
    goto LABEL_125;
  }
LABEL_126:
  a2[1] = v79;
  unint64_t v90 = (unint64_t)a2[2];
  if ((unint64_t)v79 < v90)
  {
    v79[2] = 2;
    *(void *)double v79 = 0xA0000000BLL;
    uint64_t v91 = v79 + 3;
    goto LABEL_144;
  }
  uint64_t v92 = *a2;
  unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (unsigned char *)*a2) >> 2);
  unint64_t v94 = v93 + 1;
  if (v93 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (void)v92) >> 2);
  if (2 * v95 > v94) {
    unint64_t v94 = 2 * v95;
  }
  if (v95 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v96 = 0x1555555555555555;
  }
  else {
    unint64_t v96 = v94;
  }
  if (v96)
  {
    if (v96 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v97 = (char *)operator new(12 * v96);
  }
  else
  {
    uint64_t v97 = 0;
  }
  unint64_t v98 = &v97[12 * v93];
  unint64_t v99 = &v97[12 * v96];
  *((_DWORD *)v98 + 2) = 2;
  *(void *)unint64_t v98 = 0xA0000000BLL;
  uint64_t v91 = v98 + 12;
  if (v79 == v92)
  {
    *a2 = v98;
    a2[1] = v91;
    a2[2] = v99;
LABEL_143:
    operator delete(v79);
    goto LABEL_144;
  }
  do
  {
    uint64_t v100 = *(void *)(v79 - 3);
    v79 -= 3;
    int v101 = v79[2];
    *(void *)(v98 - 12) = v100;
    v98 -= 12;
    *((_DWORD *)v98 + 2) = v101;
  }
  while (v79 != v92);
  double v79 = *a2;
  *a2 = v98;
  a2[1] = v91;
  a2[2] = v99;
  if (v79) {
    goto LABEL_143;
  }
LABEL_144:
  a2[1] = v91;
  unint64_t v102 = (unint64_t)a2[2];
  if ((unint64_t)v91 < v102)
  {
    v91[2] = 6;
    *(void *)uint64_t v91 = 0x70000000ALL;
    uint64_t v103 = v91 + 3;
    goto LABEL_162;
  }
  int v104 = *a2;
  unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (unsigned char *)*a2) >> 2);
  unint64_t v106 = v105 + 1;
  if (v105 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - (void)v104) >> 2);
  if (2 * v107 > v106) {
    unint64_t v106 = 2 * v107;
  }
  if (v107 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v108 = 0x1555555555555555;
  }
  else {
    unint64_t v108 = v106;
  }
  if (v108)
  {
    if (v108 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v109 = (char *)operator new(12 * v108);
  }
  else
  {
    uint64_t v109 = 0;
  }
  int v110 = &v109[12 * v105];
  uint64_t v111 = &v109[12 * v108];
  *((_DWORD *)v110 + 2) = 6;
  *(void *)int v110 = 0x70000000ALL;
  uint64_t v103 = v110 + 12;
  if (v91 == v104)
  {
    *a2 = v110;
    a2[1] = v103;
    a2[2] = v111;
LABEL_161:
    operator delete(v91);
    goto LABEL_162;
  }
  do
  {
    uint64_t v112 = *(void *)(v91 - 3);
    v91 -= 3;
    int v113 = v91[2];
    *(void *)(v110 - 12) = v112;
    v110 -= 12;
    *((_DWORD *)v110 + 2) = v113;
  }
  while (v91 != v104);
  uint64_t v91 = *a2;
  *a2 = v110;
  a2[1] = v103;
  a2[2] = v111;
  if (v91) {
    goto LABEL_161;
  }
LABEL_162:
  a2[1] = v103;
  unint64_t v114 = (unint64_t)a2[2];
  if ((unint64_t)v103 < v114)
  {
    v103[2] = 8;
    *(void *)uint64_t v103 = 0x100000007;
    uint64_t v115 = v103 + 3;
    goto LABEL_180;
  }
  unint64_t v116 = *a2;
  unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (unsigned char *)*a2) >> 2);
  unint64_t v118 = v117 + 1;
  if (v117 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (void)v116) >> 2);
  if (2 * v119 > v118) {
    unint64_t v118 = 2 * v119;
  }
  if (v119 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v120 = 0x1555555555555555;
  }
  else {
    unint64_t v120 = v118;
  }
  if (v120)
  {
    if (v120 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v121 = (char *)operator new(12 * v120);
  }
  else
  {
    uint64_t v121 = 0;
  }
  int v122 = &v121[12 * v117];
  uint64_t v123 = &v121[12 * v120];
  *((_DWORD *)v122 + 2) = 8;
  *(void *)int v122 = 0x100000007;
  uint64_t v115 = v122 + 12;
  if (v103 == v116)
  {
    *a2 = v122;
    a2[1] = v115;
    a2[2] = v123;
LABEL_179:
    operator delete(v103);
    goto LABEL_180;
  }
  do
  {
    uint64_t v124 = *(void *)(v103 - 3);
    v103 -= 3;
    int v125 = v103[2];
    *(void *)(v122 - 12) = v124;
    v122 -= 12;
    *((_DWORD *)v122 + 2) = v125;
  }
  while (v103 != v116);
  uint64_t v103 = *a2;
  *a2 = v122;
  a2[1] = v115;
  a2[2] = v123;
  if (v103) {
    goto LABEL_179;
  }
LABEL_180:
  a2[1] = v115;
  unint64_t v126 = (unint64_t)a2[2];
  if ((unint64_t)v115 < v126)
  {
    v115[2] = 4;
    *(void *)uint64_t v115 = 0x900000003;
    unsigned int v127 = v115 + 3;
    goto LABEL_198;
  }
  uint64_t v128 = *a2;
  unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (unsigned char *)*a2) >> 2);
  unint64_t v130 = v129 + 1;
  if (v129 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - (void)v128) >> 2);
  if (2 * v131 > v130) {
    unint64_t v130 = 2 * v131;
  }
  if (v131 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v132 = 0x1555555555555555;
  }
  else {
    unint64_t v132 = v130;
  }
  if (v132)
  {
    if (v132 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v133 = (char *)operator new(12 * v132);
  }
  else
  {
    uint64_t v133 = 0;
  }
  uint64_t v134 = &v133[12 * v129];
  unint64_t v135 = &v133[12 * v132];
  *((_DWORD *)v134 + 2) = 4;
  *(void *)uint64_t v134 = 0x900000003;
  unsigned int v127 = v134 + 12;
  if (v115 == v128)
  {
    *a2 = v134;
    a2[1] = v127;
    a2[2] = v135;
LABEL_197:
    operator delete(v115);
    goto LABEL_198;
  }
  do
  {
    uint64_t v136 = *(void *)(v115 - 3);
    v115 -= 3;
    int v137 = v115[2];
    *(void *)(v134 - 12) = v136;
    v134 -= 12;
    *((_DWORD *)v134 + 2) = v137;
  }
  while (v115 != v128);
  uint64_t v115 = *a2;
  *a2 = v134;
  a2[1] = v127;
  a2[2] = v135;
  if (v115) {
    goto LABEL_197;
  }
LABEL_198:
  a2[1] = v127;
  unint64_t v138 = (unint64_t)a2[2];
  if ((unint64_t)v127 < v138)
  {
    v127[2] = 2;
    *(void *)unsigned int v127 = 0x400000003;
    uint64_t v139 = v127 + 3;
    goto LABEL_216;
  }
  uint64_t v140 = *a2;
  unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - (unsigned char *)*a2) >> 2);
  unint64_t v142 = v141 + 1;
  if (v141 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - (void)v140) >> 2);
  if (2 * v143 > v142) {
    unint64_t v142 = 2 * v143;
  }
  if (v143 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v144 = 0x1555555555555555;
  }
  else {
    unint64_t v144 = v142;
  }
  if (v144)
  {
    if (v144 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v145 = (char *)operator new(12 * v144);
  }
  else
  {
    uint64_t v145 = 0;
  }
  uint64_t v146 = &v145[12 * v141];
  unint64_t v147 = &v145[12 * v144];
  *((_DWORD *)v146 + 2) = 2;
  *(void *)uint64_t v146 = 0x400000003;
  uint64_t v139 = v146 + 12;
  if (v127 == v140)
  {
    *a2 = v146;
    a2[1] = v139;
    a2[2] = v147;
LABEL_215:
    operator delete(v127);
    goto LABEL_216;
  }
  do
  {
    uint64_t v148 = *(void *)(v127 - 3);
    v127 -= 3;
    int v149 = v127[2];
    *(void *)(v146 - 12) = v148;
    v146 -= 12;
    *((_DWORD *)v146 + 2) = v149;
  }
  while (v127 != v140);
  unsigned int v127 = *a2;
  *a2 = v146;
  a2[1] = v139;
  a2[2] = v147;
  if (v127) {
    goto LABEL_215;
  }
LABEL_216:
  a2[1] = v139;
  unint64_t v150 = (unint64_t)a2[2];
  if ((unint64_t)v139 < v150)
  {
    v139[2] = 6;
    *(void *)uint64_t v139 = 0x200000003;
    uint64_t v151 = v139 + 3;
    goto LABEL_234;
  }
  unint64_t v152 = *a2;
  unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * (((char *)v139 - (unsigned char *)*a2) >> 2);
  unint64_t v154 = v153 + 1;
  if (v153 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - (void)v152) >> 2);
  if (2 * v155 > v154) {
    unint64_t v154 = 2 * v155;
  }
  if (v155 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v156 = 0x1555555555555555;
  }
  else {
    unint64_t v156 = v154;
  }
  if (v156)
  {
    if (v156 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v157 = (char *)operator new(12 * v156);
  }
  else
  {
    uint64_t v157 = 0;
  }
  long long v158 = &v157[12 * v153];
  int v159 = &v157[12 * v156];
  *((_DWORD *)v158 + 2) = 6;
  *(void *)long long v158 = 0x200000003;
  uint64_t v151 = v158 + 12;
  if (v139 == v152)
  {
    *a2 = v158;
    a2[1] = v151;
    a2[2] = v159;
LABEL_233:
    operator delete(v139);
    goto LABEL_234;
  }
  do
  {
    uint64_t v160 = *(void *)(v139 - 3);
    v139 -= 3;
    int v161 = v139[2];
    *(void *)(v158 - 12) = v160;
    v158 -= 12;
    *((_DWORD *)v158 + 2) = v161;
  }
  while (v139 != v152);
  uint64_t v139 = *a2;
  *a2 = v158;
  a2[1] = v151;
  a2[2] = v159;
  if (v139) {
    goto LABEL_233;
  }
LABEL_234:
  a2[1] = v151;
  unint64_t v162 = (unint64_t)a2[2];
  if ((unint64_t)v151 < v162)
  {
    v151[2] = 8;
    *(void *)uint64_t v151 = 0x600000003;
    uint64_t v163 = v151 + 3;
    goto LABEL_252;
  }
  unint64_t v164 = *a2;
  unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * (((char *)v151 - (unsigned char *)*a2) >> 2);
  unint64_t v166 = v165 + 1;
  if (v165 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v167 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v162 - (void)v164) >> 2);
  if (2 * v167 > v166) {
    unint64_t v166 = 2 * v167;
  }
  if (v167 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v168 = 0x1555555555555555;
  }
  else {
    unint64_t v168 = v166;
  }
  if (v168)
  {
    if (v168 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v169 = (char *)operator new(12 * v168);
  }
  else
  {
    unint64_t v169 = 0;
  }
  float v170 = &v169[12 * v165];
  uint64_t v171 = &v169[12 * v168];
  *((_DWORD *)v170 + 2) = 8;
  *(void *)float v170 = 0x600000003;
  uint64_t v163 = v170 + 12;
  if (v151 == v164)
  {
    *a2 = v170;
    a2[1] = v163;
    a2[2] = v171;
LABEL_251:
    operator delete(v151);
    goto LABEL_252;
  }
  do
  {
    uint64_t v172 = *(void *)(v151 - 3);
    v151 -= 3;
    int v173 = v151[2];
    *(void *)(v170 - 12) = v172;
    v170 -= 12;
    *((_DWORD *)v170 + 2) = v173;
  }
  while (v151 != v164);
  uint64_t v151 = *a2;
  *a2 = v170;
  a2[1] = v163;
  a2[2] = v171;
  if (v151) {
    goto LABEL_251;
  }
LABEL_252:
  a2[1] = v163;
  unint64_t v174 = (unint64_t)a2[2];
  if ((unint64_t)v163 < v174)
  {
    v163[2] = 9;
    *(void *)uint64_t v163 = 0x800000003;
    long long v175 = v163 + 3;
    goto LABEL_270;
  }
  int v176 = *a2;
  unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v163 - (unsigned char *)*a2) >> 2);
  unint64_t v178 = v177 + 1;
  if (v177 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - (void)v176) >> 2);
  if (2 * v179 > v178) {
    unint64_t v178 = 2 * v179;
  }
  if (v179 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v180 = 0x1555555555555555;
  }
  else {
    unint64_t v180 = v178;
  }
  if (v180)
  {
    if (v180 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v181 = (char *)operator new(12 * v180);
  }
  else
  {
    unint64_t v181 = 0;
  }
  uint64_t v182 = &v181[12 * v177];
  unint64_t v183 = &v181[12 * v180];
  *((_DWORD *)v182 + 2) = 9;
  *(void *)uint64_t v182 = 0x800000003;
  long long v175 = v182 + 12;
  if (v163 == v176)
  {
    *a2 = v182;
    a2[1] = v175;
    a2[2] = v183;
LABEL_269:
    operator delete(v163);
    goto LABEL_270;
  }
  do
  {
    uint64_t v184 = *(void *)(v163 - 3);
    v163 -= 3;
    int v185 = v163[2];
    *(void *)(v182 - 12) = v184;
    v182 -= 12;
    *((_DWORD *)v182 + 2) = v185;
  }
  while (v163 != v176);
  uint64_t v163 = *a2;
  *a2 = v182;
  a2[1] = v175;
  a2[2] = v183;
  if (v163) {
    goto LABEL_269;
  }
LABEL_270:
  a2[1] = v175;
  unint64_t v186 = (unint64_t)a2[2];
  if ((unint64_t)v175 < v186)
  {
    v175[2] = 5;
    *(void *)long long v175 = 0x900000004;
    unint64_t v187 = (char *)(v175 + 3);
    goto LABEL_288;
  }
  uint64_t v188 = *a2;
  unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * (((char *)v175 - (unsigned char *)*a2) >> 2);
  unint64_t v190 = v189 + 1;
  if (v189 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (void)v188) >> 2);
  if (2 * v191 > v190) {
    unint64_t v190 = 2 * v191;
  }
  if (v191 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v192 = 0x1555555555555555;
  }
  else {
    unint64_t v192 = v190;
  }
  if (v192)
  {
    if (v192 > 0x1555555555555555) {
      goto LABEL_578;
    }
    int v193 = (char *)operator new(12 * v192);
  }
  else
  {
    int v193 = 0;
  }
  float v194 = &v193[12 * v189];
  uint64_t v195 = &v193[12 * v192];
  *((_DWORD *)v194 + 2) = 5;
  *(void *)float v194 = 0x900000004;
  unint64_t v187 = v194 + 12;
  if (v175 == v188)
  {
    *a2 = v194;
    a2[1] = v187;
    a2[2] = v195;
LABEL_287:
    operator delete(v175);
    goto LABEL_288;
  }
  do
  {
    uint64_t v196 = *(void *)(v175 - 3);
    v175 -= 3;
    int v197 = v175[2];
    *(void *)(v194 - 12) = v196;
    v194 -= 12;
    *((_DWORD *)v194 + 2) = v197;
  }
  while (v175 != v188);
  long long v175 = *a2;
  *a2 = v194;
  a2[1] = v187;
  a2[2] = v195;
  if (v175) {
    goto LABEL_287;
  }
LABEL_288:
  a2[1] = v187;
  unint64_t v198 = (unint64_t)a2[2];
  if ((unint64_t)v187 < v198)
  {
    *((_DWORD *)v187 + 2) = 11;
    *(void *)unint64_t v187 = 0x400000002;
    uint64_t v199 = v187 + 12;
    goto LABEL_306;
  }
  unint64_t v200 = (char *)*a2;
  unint64_t v201 = 0xAAAAAAAAAAAAAAABLL * ((v187 - (unsigned char *)*a2) >> 2);
  unint64_t v202 = v201 + 1;
  if (v201 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198 - (void)v200) >> 2);
  if (2 * v203 > v202) {
    unint64_t v202 = 2 * v203;
  }
  if (v203 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v204 = 0x1555555555555555;
  }
  else {
    unint64_t v204 = v202;
  }
  if (v204)
  {
    if (v204 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v205 = (char *)operator new(12 * v204);
  }
  else
  {
    uint64_t v205 = 0;
  }
  unsigned int v206 = &v205[12 * v201];
  uint64_t v207 = &v205[12 * v204];
  *((_DWORD *)v206 + 2) = 11;
  *(void *)unsigned int v206 = 0x400000002;
  uint64_t v199 = v206 + 12;
  if (v187 == v200)
  {
    *a2 = v206;
    a2[1] = v199;
    a2[2] = v207;
LABEL_305:
    operator delete(v187);
    goto LABEL_306;
  }
  do
  {
    uint64_t v208 = *(void *)(v187 - 12);
    v187 -= 12;
    int v209 = *((_DWORD *)v187 + 2);
    *(void *)(v206 - 12) = v208;
    v206 -= 12;
    *((_DWORD *)v206 + 2) = v209;
  }
  while (v187 != v200);
  unint64_t v187 = (char *)*a2;
  *a2 = v206;
  a2[1] = v199;
  a2[2] = v207;
  if (v187) {
    goto LABEL_305;
  }
LABEL_306:
  a2[1] = v199;
  unint64_t v210 = (unint64_t)a2[2];
  if ((unint64_t)v199 < v210)
  {
    *((_DWORD *)v199 + 2) = 10;
    *(void *)uint64_t v199 = 0x200000006;
    float v211 = v199 + 12;
    goto LABEL_324;
  }
  uint64_t v212 = (char *)*a2;
  unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * ((v199 - (unsigned char *)*a2) >> 2);
  unint64_t v214 = v213 + 1;
  if (v213 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210 - (void)v212) >> 2);
  if (2 * v215 > v214) {
    unint64_t v214 = 2 * v215;
  }
  if (v215 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v216 = 0x1555555555555555;
  }
  else {
    unint64_t v216 = v214;
  }
  if (v216)
  {
    if (v216 > 0x1555555555555555) {
      goto LABEL_578;
    }
    unint64_t v217 = (char *)operator new(12 * v216);
  }
  else
  {
    unint64_t v217 = 0;
  }
  char v218 = &v217[12 * v213];
  long long v219 = &v217[12 * v216];
  *((_DWORD *)v218 + 2) = 10;
  *(void *)char v218 = 0x200000006;
  float v211 = v218 + 12;
  if (v199 == v212)
  {
    *a2 = v218;
    a2[1] = v211;
    a2[2] = v219;
LABEL_323:
    operator delete(v199);
    goto LABEL_324;
  }
  do
  {
    uint64_t v220 = *(void *)(v199 - 12);
    v199 -= 12;
    int v221 = *((_DWORD *)v199 + 2);
    *(void *)(v218 - 12) = v220;
    v218 -= 12;
    *((_DWORD *)v218 + 2) = v221;
  }
  while (v199 != v212);
  uint64_t v199 = (char *)*a2;
  *a2 = v218;
  a2[1] = v211;
  a2[2] = v219;
  if (v199) {
    goto LABEL_323;
  }
LABEL_324:
  a2[1] = v211;
  unint64_t v222 = (unint64_t)a2[2];
  if ((unint64_t)v211 < v222)
  {
    *((_DWORD *)v211 + 2) = 7;
    *(void *)float v211 = 0x600000008;
    uint64_t v223 = v211 + 12;
    goto LABEL_342;
  }
  uint64_t v224 = (char *)*a2;
  unint64_t v225 = 0xAAAAAAAAAAAAAAABLL * ((v211 - (unsigned char *)*a2) >> 2);
  unint64_t v226 = v225 + 1;
  if (v225 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - (void)v224) >> 2);
  if (2 * v227 > v226) {
    unint64_t v226 = 2 * v227;
  }
  if (v227 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v228 = 0x1555555555555555;
  }
  else {
    unint64_t v228 = v226;
  }
  if (v228)
  {
    if (v228 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v229 = (char *)operator new(12 * v228);
  }
  else
  {
    uint64_t v229 = 0;
  }
  uint64_t v230 = &v229[12 * v225];
  uint64_t v231 = &v229[12 * v228];
  *((_DWORD *)v230 + 2) = 7;
  *(void *)uint64_t v230 = 0x600000008;
  uint64_t v223 = v230 + 12;
  if (v211 == v224)
  {
    *a2 = v230;
    a2[1] = v223;
    a2[2] = v231;
LABEL_341:
    operator delete(v211);
    goto LABEL_342;
  }
  do
  {
    uint64_t v232 = *(void *)(v211 - 12);
    v211 -= 12;
    int v233 = *((_DWORD *)v211 + 2);
    *(void *)(v230 - 12) = v232;
    v230 -= 12;
    *((_DWORD *)v230 + 2) = v233;
  }
  while (v211 != v224);
  float v211 = (char *)*a2;
  *a2 = v230;
  a2[1] = v223;
  a2[2] = v231;
  if (v211) {
    goto LABEL_341;
  }
LABEL_342:
  a2[1] = v223;
  unint64_t v234 = (unint64_t)a2[2];
  if ((unint64_t)v223 < v234)
  {
    *((_DWORD *)v223 + 2) = 1;
    *(void *)uint64_t v223 = 0x800000009;
    char v235 = v223 + 12;
    goto LABEL_360;
  }
  int v236 = (char *)*a2;
  unint64_t v237 = 0xAAAAAAAAAAAAAAABLL * ((v223 - (unsigned char *)*a2) >> 2);
  unint64_t v238 = v237 + 1;
  if (v237 + 1 > 0x1555555555555555) {
    abort();
  }
  unint64_t v239 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v234 - (void)v236) >> 2);
  if (2 * v239 > v238) {
    unint64_t v238 = 2 * v239;
  }
  if (v239 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v240 = 0x1555555555555555;
  }
  else {
    unint64_t v240 = v238;
  }
  if (v240)
  {
    if (v240 > 0x1555555555555555) {
      goto LABEL_578;
    }
    uint64_t v241 = (char *)operator new(12 * v240);
  }
  else
  {
    uint64_t v241 = 0;
  }
  uint64_t v242 = &v241[12 * v237];
  long long v243 = &v241[12 * v240];
  *((_DWORD *)v242 + 2) = 1;
  *(void *)uint64_t v242 = 0x800000009;
  char v235 = v242 + 12;
  if (v223 == v236)
  {
    *a2 = v242;
    a2[1] = v235;
    a2[2] = v243;
LABEL_359:
    operator delete(v223);
    goto LABEL_360;
  }
  do
  {
    uint64_t v244 = *(void *)(v223 - 12);
    v223 -= 12;
    int v245 = *((_DWORD *)v223 + 2);
    *(void *)(v242 - 12) = v244;
    v242 -= 12;
    *((_DWORD *)v242 + 2) = v245;
  }
  while (v223 != v236);
  uint64_t v223 = (char *)*a2;
  *a2 = v242;
  a2[1] = v235;
  a2[2] = v243;
  if (v223) {
    goto LABEL_359;
  }
LABEL_360:
  int v246 = 0;
  a2[1] = v235;
  uint64_t v247 = (signed int *)*a2;
  float v388 = a2;
  while (2)
  {
    if (v247 == (signed int *)v235)
    {
      uint64_t v384 = 0;
      uint64_t v247 = 0;
      uint64_t v383 = v235;
      char v235 = 0;
      if (!v383) {
        goto LABEL_361;
      }
LABEL_572:
      a2[1] = v383;
      operator delete(v383);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      goto LABEL_361;
    }
    int v390 = v246;
    uint64_t v248 = 0;
    unint64_t v249 = 0;
    uint64_t v395 = 0;
    int8x8_t v393 = (signed int *)v235;
    while (2)
    {
      signed int v250 = v247[1];
      unsigned int v251 = *v247;
      if (*v247 >= v250) {
        uint64_t v252 = v250;
      }
      else {
        uint64_t v252 = v251;
      }
      if ((int)v251 <= v250) {
        unsigned int v253 = v247[1];
      }
      else {
        unsigned int v253 = *v247;
      }
      unint64_t v254 = (v252 << 32) + (int)v253;
      int8x8_t v255 = (int8x8_t)v402[1];
      if (v402[1])
      {
        uint8x8_t v256 = (uint8x8_t)vcnt_s8((int8x8_t)v402[1]);
        v256.i16[0] = vaddlv_u8(v256);
        if (v256.u32[0] > 1uLL)
        {
          unint64_t v257 = v254;
          if ((void *)v254 >= v402[1]) {
            unint64_t v257 = v254 % (unint64_t)v402[1];
          }
        }
        else
        {
          unint64_t v257 = v254 & ((unint64_t)v402[1] - 1);
        }
        uint64_t v258 = (uint64_t **)*((void *)v402[0] + v257);
        if (v258)
        {
          uint64_t v259 = *v258;
          if (v259)
          {
            if (v256.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v261 = v259[1];
                if (v261 == v254)
                {
                  if (v259[2] == v254) {
                    goto LABEL_566;
                  }
                }
                else if ((v261 & ((uint64_t)v402[1] - 1)) != v257)
                {
                  goto LABEL_392;
                }
                uint64_t v259 = (uint64_t *)*v259;
                if (!v259) {
                  goto LABEL_392;
                }
              }
            }
            do
            {
              unint64_t v260 = v259[1];
              if (v260 == v254)
              {
                if (v259[2] == v254)
                {
LABEL_566:
                  int v397 = *((_DWORD *)v259 + 6);
                  goto LABEL_410;
                }
              }
              else
              {
                if ((void *)v260 >= v402[1]) {
                  v260 %= (unint64_t)v402[1];
                }
                if (v260 != v257) {
                  break;
                }
              }
              uint64_t v259 = (uint64_t *)*v259;
            }
            while (v259);
          }
        }
      }
LABEL_392:
      uint64_t v262 = (uint64_t)&(*a1)[3 * v251];
      uint64_t v263 = (uint64_t)&(*a1)[3 * v250];
      v4.i64[0] = *(void *)v262;
      v4.i32[2] = *(_DWORD *)(v262 + 8);
      v5.i64[0] = *(void *)v263;
      v5.i32[2] = *(_DWORD *)(v263 + 8);
      float32x4_t v264 = vaddq_f32(v5, v4);
      v265.i64[0] = 0x3F0000003F000000;
      v265.i64[1] = 0x3F0000003F000000;
      float32x4_t v266 = vmulq_f32(v264, v265);
      float32x4_t v267 = vmulq_f32(v266, v266);
      float32x4_t v268 = vmulq_n_f32(v266, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v267.f32, 1), v267), (float32x4_t)vdupq_laneq_s32((int32x4_t)v267, 2)).f32[0]));
      int v269 = v400;
      unint64_t v271 = v400[1];
      uint64_t v270 = v400[2];
      if (v271 >= v270)
      {
        uint64_t v273 = *v400;
        unint64_t v274 = 0xAAAAAAAAAAAAAAABLL * (v271 - *v400);
        unint64_t v275 = v274 + 1;
        if (v274 + 1 > 0x1555555555555555) {
          abort();
        }
        unint64_t v276 = 0xAAAAAAAAAAAAAAABLL * (v270 - v273);
        if (2 * v276 > v275) {
          unint64_t v275 = 2 * v276;
        }
        if (v276 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v277 = 0x1555555555555555;
        }
        else {
          unint64_t v277 = v275;
        }
        if (v277)
        {
          if (v277 > 0x1555555555555555) {
            goto LABEL_578;
          }
          float32x4_t v396 = v268;
          int v278 = (char *)operator new(12 * v277);
          float32x4_t v268 = v396;
        }
        else
        {
          int v278 = 0;
        }
        int v279 = &v278[12 * v274];
        *(void *)int v279 = v268.i64[0];
        *((_DWORD *)v279 + 2) = v268.i32[2];
        uint64_t v280 = v279;
        if (v271 != v273)
        {
          do
          {
            uint64_t v281 = *(void *)(v271 - 3);
            v271 -= 3;
            int v282 = *((_DWORD *)v271 + 2);
            *(void *)(v280 - 12) = v281;
            v280 -= 12;
            *((_DWORD *)v280 + 2) = v282;
          }
          while (v271 != v273);
          unint64_t v271 = *v269;
        }
        unint64_t v272 = (float *)(v279 + 12);
        unsigned char *v269 = (float *)v280;
        v269[1] = (float *)(v279 + 12);
        v269[2] = (float *)&v278[12 * v277];
        if (v271) {
          operator delete(v271);
        }
      }
      else
      {
        v271[2] = v268.f32[2];
        *(void *)unint64_t v271 = v268.i64[0];
        unint64_t v272 = v271 + 3;
      }
      v269[1] = v272;
      int v283 = (*v401)++;
      int v397 = v283;
      std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((float *)v402, v254, v254, v283);
      signed int v250 = v247[1];
      int8x8_t v255 = (int8x8_t)v402[1];
LABEL_410:
      signed int v284 = v247[2];
      if (v250 >= v284) {
        uint64_t v285 = v284;
      }
      else {
        uint64_t v285 = v250;
      }
      if (v250 <= v284) {
        int v286 = v247[2];
      }
      else {
        int v286 = v250;
      }
      uint64_t v287 = v285 << 32;
      unint64_t v288 = v287 + v286;
      if (v255)
      {
        uint8x8_t v289 = (uint8x8_t)vcnt_s8(v255);
        v289.i16[0] = vaddlv_u8(v289);
        if (v289.u32[0] > 1uLL)
        {
          unint64_t v290 = v287 + v286;
          if (v288 >= *(void *)&v255) {
            unint64_t v290 = v288 % *(void *)&v255;
          }
        }
        else
        {
          unint64_t v290 = v288 & (*(void *)&v255 - 1);
        }
        unint64_t v291 = (uint64_t **)*((void *)v402[0] + v290);
        if (v291)
        {
          uint64_t v292 = *v291;
          if (v292)
          {
            if (v289.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v294 = v292[1];
                if (v294 == v288)
                {
                  if (v292[2] == v288) {
                    goto LABEL_567;
                  }
                }
                else if ((v294 & (*(void *)&v255 - 1)) != v290)
                {
                  goto LABEL_436;
                }
                uint64_t v292 = (uint64_t *)*v292;
                if (!v292) {
                  goto LABEL_436;
                }
              }
            }
            do
            {
              unint64_t v293 = v292[1];
              if (v293 == v288)
              {
                if (v292[2] == v288)
                {
LABEL_567:
                  int v316 = *((_DWORD *)v292 + 6);
                  goto LABEL_454;
                }
              }
              else
              {
                if (v293 >= *(void *)&v255) {
                  v293 %= *(void *)&v255;
                }
                if (v293 != v290) {
                  break;
                }
              }
              uint64_t v292 = (uint64_t *)*v292;
            }
            while (v292);
          }
        }
      }
LABEL_436:
      uint64_t v295 = (uint64_t)&(*a1)[3 * v250];
      uint64_t v296 = (uint64_t)&(*a1)[3 * v284];
      v4.i64[0] = *(void *)v295;
      v4.i32[2] = *(_DWORD *)(v295 + 8);
      v5.i64[0] = *(void *)v296;
      v5.i32[2] = *(_DWORD *)(v296 + 8);
      float32x4_t v297 = vaddq_f32(v5, v4);
      v298.i64[0] = 0x3F0000003F000000;
      v298.i64[1] = 0x3F0000003F000000;
      float32x4_t v299 = vmulq_f32(v297, v298);
      float32x4_t v300 = vmulq_f32(v299, v299);
      float32x4_t v301 = vmulq_n_f32(v299, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v300.f32, 1), v300), (float32x4_t)vdupq_laneq_s32((int32x4_t)v300, 2)).f32[0]));
      unint64_t v302 = v400;
      v304 = v400[1];
      v303 = v400[2];
      if (v304 >= v303)
      {
        int v306 = *v400;
        unint64_t v307 = 0xAAAAAAAAAAAAAAABLL * (v304 - *v400);
        unint64_t v308 = v307 + 1;
        if (v307 + 1 > 0x1555555555555555) {
          abort();
        }
        unint64_t v309 = 0xAAAAAAAAAAAAAAABLL * (v303 - v306);
        if (2 * v309 > v308) {
          unint64_t v308 = 2 * v309;
        }
        if (v309 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v310 = 0x1555555555555555;
        }
        else {
          unint64_t v310 = v308;
        }
        if (v310)
        {
          if (v310 > 0x1555555555555555) {
            goto LABEL_578;
          }
          float32x4_t v391 = v301;
          long long v311 = (char *)operator new(12 * v310);
          float32x4_t v301 = v391;
        }
        else
        {
          long long v311 = 0;
        }
        int v312 = &v311[12 * v307];
        *(void *)int v312 = v301.i64[0];
        *((_DWORD *)v312 + 2) = v301.i32[2];
        uint8x8_t v313 = v312;
        if (v304 != v306)
        {
          do
          {
            uint64_t v314 = *(void *)(v304 - 3);
            v304 -= 3;
            int v315 = *((_DWORD *)v304 + 2);
            *(void *)(v313 - 12) = v314;
            v313 -= 12;
            *((_DWORD *)v313 + 2) = v315;
          }
          while (v304 != v306);
          v304 = *v302;
        }
        unint64_t v305 = (float *)(v312 + 12);
        std::string *v302 = (float *)v313;
        v302[1] = (float *)(v312 + 12);
        v302[2] = (float *)&v311[12 * v310];
        if (v304) {
          operator delete(v304);
        }
      }
      else
      {
        v304[2] = v301.f32[2];
        *(void *)v304 = v301.i64[0];
        unint64_t v305 = v304 + 3;
      }
      v302[1] = v305;
      int v316 = (*v401)++;
      std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((float *)v402, v288, v288, v316);
      signed int v284 = v247[2];
      int8x8_t v255 = (int8x8_t)v402[1];
LABEL_454:
      unsigned int v317 = *v247;
      if (v284 >= *v247) {
        uint64_t v318 = v317;
      }
      else {
        uint64_t v318 = v284;
      }
      if (v284 <= (int)v317) {
        unsigned int v319 = *v247;
      }
      else {
        unsigned int v319 = v284;
      }
      uint64_t v320 = v318 << 32;
      unint64_t v321 = v320 + (int)v319;
      if (!*(void *)&v255) {
        goto LABEL_480;
      }
      uint8x8_t v322 = (uint8x8_t)vcnt_s8(v255);
      v322.i16[0] = vaddlv_u8(v322);
      if (v322.u32[0] > 1uLL)
      {
        unint64_t v323 = v320 + (int)v319;
        if (v321 >= *(void *)&v255) {
          unint64_t v323 = v321 % *(void *)&v255;
        }
      }
      else
      {
        unint64_t v323 = v321 & (*(void *)&v255 - 1);
      }
      uint64_t v324 = (uint64_t **)*((void *)v402[0] + v323);
      if (!v324 || (int8x8_t v325 = *v324) == 0)
      {
LABEL_480:
        uint64_t v329 = (uint64_t)&(*a1)[3 * v284];
        uint64_t v330 = (uint64_t)&(*a1)[3 * v317];
        v4.i64[0] = *(void *)v329;
        v4.i32[2] = *(_DWORD *)(v329 + 8);
        v5.i64[0] = *(void *)v330;
        v5.i32[2] = *(_DWORD *)(v330 + 8);
        float32x4_t v331 = vaddq_f32(v5, v4);
        v332.i64[0] = 0x3F0000003F000000;
        v332.i64[1] = 0x3F0000003F000000;
        float32x4_t v333 = vmulq_f32(v331, v332);
        float32x4_t v334 = vmulq_f32(v333, v333);
        float32x4_t v335 = vmulq_n_f32(v333, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v334.f32, 1), v334), (float32x4_t)vdupq_laneq_s32((int32x4_t)v334, 2)).f32[0]));
        unint64_t v336 = v400;
        float v338 = v400[1];
        float v337 = v400[2];
        if (v338 >= v337)
        {
          uint64_t v340 = *v400;
          unint64_t v341 = 0xAAAAAAAAAAAAAAABLL * (v338 - *v400);
          unint64_t v342 = v341 + 1;
          if (v341 + 1 > 0x1555555555555555) {
            abort();
          }
          unint64_t v343 = 0xAAAAAAAAAAAAAAABLL * (v337 - v340);
          if (2 * v343 > v342) {
            unint64_t v342 = 2 * v343;
          }
          if (v343 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v344 = 0x1555555555555555;
          }
          else {
            unint64_t v344 = v342;
          }
          if (v344)
          {
            if (v344 > 0x1555555555555555) {
              goto LABEL_578;
            }
            float32x4_t v392 = v335;
            long long v345 = (char *)operator new(12 * v344);
            float32x4_t v335 = v392;
          }
          else
          {
            long long v345 = 0;
          }
          int v346 = &v345[12 * v341];
          *(void *)int v346 = v335.i64[0];
          *((_DWORD *)v346 + 2) = v335.i32[2];
          v347 = v346;
          if (v338 != v340)
          {
            do
            {
              uint64_t v348 = *(void *)(v338 - 3);
              v338 -= 3;
              int v349 = *((_DWORD *)v338 + 2);
              *(void *)(v347 - 12) = v348;
              v347 -= 12;
              *((_DWORD *)v347 + 2) = v349;
            }
            while (v338 != v340);
            float v338 = *v336;
          }
          uint64_t v350 = (float *)&v345[12 * v344];
          unint64_t v339 = (float *)(v346 + 12);
          *unint64_t v336 = (float *)v347;
          v336[1] = (float *)(v346 + 12);
          v336[2] = v350;
          if (v338) {
            operator delete(v338);
          }
        }
        else
        {
          v338[2] = v335.f32[2];
          *(void *)float v338 = v335.i64[0];
          unint64_t v339 = v338 + 3;
        }
        v336[1] = v339;
        int v351 = (*v401)++;
        std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((float *)v402, v321, v321, v351);
        unsigned int v317 = *v247;
        goto LABEL_498;
      }
      if (v322.u32[0] < 2uLL)
      {
        uint64_t v326 = *(void *)&v255 - 1;
        while (1)
        {
          uint64_t v328 = v325[1];
          if (v328 == v321)
          {
            if (v325[2] == v321) {
              goto LABEL_568;
            }
          }
          else if ((v328 & v326) != v323)
          {
            goto LABEL_480;
          }
          int8x8_t v325 = (uint64_t *)*v325;
          if (!v325) {
            goto LABEL_480;
          }
        }
      }
      while (1)
      {
        unint64_t v327 = v325[1];
        if (v327 == v321) {
          break;
        }
        if (v327 >= *(void *)&v255) {
          v327 %= *(void *)&v255;
        }
        if (v327 != v323) {
          goto LABEL_480;
        }
LABEL_470:
        int8x8_t v325 = (uint64_t *)*v325;
        if (!v325) {
          goto LABEL_480;
        }
      }
      if (v325[2] != v321) {
        goto LABEL_470;
      }
LABEL_568:
      int v351 = *((_DWORD *)v325 + 6);
LABEL_498:
      if (v249 < v395)
      {
        *(_DWORD *)unint64_t v249 = v317;
        *((_DWORD *)v249 + 1) = v397;
        uint64_t v352 = v249 + 12;
        *((_DWORD *)v249 + 2) = v351;
        unint64_t v353 = (unint64_t)v395;
        goto LABEL_516;
      }
      unint64_t v354 = 0xAAAAAAAAAAAAAAABLL * ((v249 - v248) >> 2) + 1;
      if (v354 > 0x1555555555555555) {
        abort();
      }
      if (0x5555555555555556 * ((v395 - v248) >> 2) > v354) {
        unint64_t v354 = 0x5555555555555556 * ((v395 - v248) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v395 - v248) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v355 = 0x1555555555555555;
      }
      else {
        unint64_t v355 = v354;
      }
      if (v355)
      {
        if (v355 <= 0x1555555555555555)
        {
          unint64_t v356 = (char *)operator new(12 * v355);
          goto LABEL_510;
        }
LABEL_578:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v356 = 0;
LABEL_510:
      uint64_t v357 = &v356[4 * ((v249 - v248) >> 2)];
      *(_DWORD *)uint64_t v357 = v317;
      *((_DWORD *)v357 + 1) = v397;
      *((_DWORD *)v357 + 2) = v351;
      uint64_t v358 = v357;
      while (v249 != v248)
      {
        uint64_t v359 = *(void *)(v249 - 12);
        v249 -= 12;
        int v360 = *((_DWORD *)v249 + 2);
        *(void *)(v358 - 12) = v359;
        v358 -= 12;
        *((_DWORD *)v358 + 2) = v360;
      }
      unint64_t v353 = (unint64_t)&v356[12 * v355];
      uint64_t v352 = v357 + 12;
      if (v248) {
        operator delete(v248);
      }
      uint64_t v248 = v358;
LABEL_516:
      int v361 = v247[1];
      if ((unint64_t)v352 >= v353)
      {
        unint64_t v363 = 0xAAAAAAAAAAAAAAABLL * ((v352 - v248) >> 2) + 1;
        if (v363 > 0x1555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v353 - (void)v248) >> 2) > v363) {
          unint64_t v363 = 0x5555555555555556 * ((uint64_t)(v353 - (void)v248) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353 - (void)v248) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v364 = 0x1555555555555555;
        }
        else {
          unint64_t v364 = v363;
        }
        if (v364)
        {
          if (v364 > 0x1555555555555555) {
            goto LABEL_578;
          }
          v365 = (char *)operator new(12 * v364);
        }
        else
        {
          v365 = 0;
        }
        uint64_t v366 = &v365[4 * ((v352 - v248) >> 2)];
        unint64_t v353 = (unint64_t)&v365[12 * v364];
        *(_DWORD *)uint64_t v366 = v361;
        *((_DWORD *)v366 + 1) = v316;
        *((_DWORD *)v366 + 2) = v397;
        long long v362 = v366 + 12;
        if (v352 == v248) {
          goto LABEL_531;
        }
        do
        {
          uint64_t v367 = *(void *)(v352 - 12);
          v352 -= 12;
          int v368 = *((_DWORD *)v352 + 2);
          *(void *)(v366 - 12) = v367;
          v366 -= 12;
          *((_DWORD *)v366 + 2) = v368;
        }
        while (v352 != v248);
        if (v248) {
LABEL_531:
        }
          operator delete(v248);
        uint64_t v248 = v366;
      }
      else
      {
        *(_DWORD *)uint64_t v352 = v361;
        *((_DWORD *)v352 + 1) = v316;
        long long v362 = v352 + 12;
        *((_DWORD *)v352 + 2) = v397;
      }
      int v369 = v247[2];
      if ((unint64_t)v362 >= v353)
      {
        unint64_t v371 = 0xAAAAAAAAAAAAAAABLL * ((v362 - v248) >> 2) + 1;
        if (v371 > 0x1555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v353 - (void)v248) >> 2) > v371) {
          unint64_t v371 = 0x5555555555555556 * ((uint64_t)(v353 - (void)v248) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353 - (void)v248) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v372 = 0x1555555555555555;
        }
        else {
          unint64_t v372 = v371;
        }
        if (v372)
        {
          if (v372 > 0x1555555555555555) {
            goto LABEL_578;
          }
          unint64_t v373 = (char *)operator new(12 * v372);
        }
        else
        {
          unint64_t v373 = 0;
        }
        unint64_t v374 = &v373[4 * ((v362 - v248) >> 2)];
        unint64_t v353 = (unint64_t)&v373[12 * v372];
        *(_DWORD *)unint64_t v374 = v369;
        *((_DWORD *)v374 + 1) = v351;
        *((_DWORD *)v374 + 2) = v316;
        unint64_t v370 = (int *)(v374 + 12);
        if (v362 == v248) {
          goto LABEL_549;
        }
        do
        {
          uint64_t v375 = *(void *)(v362 - 12);
          v362 -= 12;
          int v376 = *((_DWORD *)v362 + 2);
          *(void *)(v374 - 12) = v375;
          v374 -= 12;
          *((_DWORD *)v374 + 2) = v376;
        }
        while (v362 != v248);
        if (v248) {
LABEL_549:
        }
          operator delete(v248);
        uint64_t v248 = v374;
        if ((unint64_t)v370 < v353) {
          goto LABEL_364;
        }
LABEL_551:
        unint64_t v377 = 0xAAAAAAAAAAAAAAABLL * (((char *)v370 - v248) >> 2) + 1;
        if (v377 > 0x1555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v353 - (void)v248) >> 2) > v377) {
          unint64_t v377 = 0x5555555555555556 * ((uint64_t)(v353 - (void)v248) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353 - (void)v248) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v378 = 0x1555555555555555;
        }
        else {
          unint64_t v378 = v377;
        }
        if (v378)
        {
          if (v378 > 0x1555555555555555) {
            goto LABEL_578;
          }
          long long v379 = (char *)operator new(12 * v378);
        }
        else
        {
          long long v379 = 0;
        }
        int v380 = (int *)&v379[4 * (((char *)v370 - v248) >> 2)];
        uint64_t v395 = &v379[12 * v378];
        int *v380 = v397;
        v380[1] = v316;
        v380[2] = v351;
        unint64_t v249 = (char *)(v380 + 3);
        if (v370 == (int *)v248) {
          goto LABEL_564;
        }
        do
        {
          uint64_t v381 = *(void *)(v370 - 3);
          v370 -= 3;
          int v382 = v370[2];
          *(void *)(v380 - 3) = v381;
          v380 -= 3;
          v380[2] = v382;
        }
        while (v370 != (int *)v248);
        if (v248) {
LABEL_564:
        }
          operator delete(v248);
        uint64_t v248 = (char *)v380;
      }
      else
      {
        *(_DWORD *)long long v362 = v369;
        *((_DWORD *)v362 + 1) = v351;
        unint64_t v370 = (int *)(v362 + 12);
        *((_DWORD *)v362 + 2) = v316;
        if ((unint64_t)(v362 + 12) >= v353) {
          goto LABEL_551;
        }
LABEL_364:
        uint64_t v395 = (char *)v353;
        *unint64_t v370 = v397;
        v370[1] = v316;
        unint64_t v249 = (char *)(v370 + 3);
        v370[2] = v351;
      }
      v247 += 3;
      if (v247 != v393) {
        continue;
      }
      break;
    }
    a2 = v388;
    uint64_t v383 = *v388;
    char v235 = v249;
    uint64_t v247 = (signed int *)v248;
    int v246 = v390;
    uint64_t v384 = v395;
    if (*v388) {
      goto LABEL_572;
    }
LABEL_361:
    *a2 = v247;
    a2[1] = v235;
    a2[2] = v384;
    if (++v246 != a3) {
      continue;
    }
    break;
  }
  unint64_t v385 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v386 = (void *)*v385;
      operator delete(v385);
      unint64_t v385 = v386;
    }
    while (v386);
  }
  unint64_t v387 = v402[0];
  v402[0] = 0;
  if (v387) {
    operator delete(v387);
  }
}

void sub_1A1F4AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::GeometryLogic::createIcoSphere(std::vector<gm::Matrix<float,3,1>> &,std::vector<gm::Matrix<int,3,1>> &,unsigned int)::$_0::operator()(float ***a1, float *a2)
{
  float v3 = a2[1];
  float v4 = a2[2];
  float v5 = 1.0 / sqrtf((float)((float)(*a2 * *a2) + (float)(v3 * v3)) + (float)(v4 * v4));
  float v6 = v5 * *a2;
  float v7 = v5 * v3;
  float v8 = v5 * v4;
  unint64_t v9 = *a1;
  unint64_t v11 = (*a1)[1];
  unint64_t v10 = (unint64_t)(*a1)[2];
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = *v9;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v11 - *v9);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555) {
      abort();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v13) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v18 = (char *)operator new(12 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v19 = (float *)&v18[12 * v14];
    *unint64_t v19 = v6;
    v19[1] = v7;
    void v19[2] = v8;
    unint64_t v12 = v19 + 3;
    if (v11 != v13)
    {
      do
      {
        uint64_t v20 = *(void *)(v11 - 3);
        v11 -= 3;
        int v21 = *((_DWORD *)v11 + 2);
        *(void *)(v19 - 3) = v20;
        v19 -= 3;
        *((_DWORD *)v19 + 2) = v21;
      }
      while (v11 != v13);
      unint64_t v11 = *v9;
    }
    _DWORD *v9 = v19;
    v9[1] = v12;
    v9[2] = (float *)&v18[12 * v17];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *unint64_t v11 = v6;
    v11[1] = v7;
    unint64_t v12 = v11 + 3;
    v11[2] = v8;
  }
  v9[1] = v12;
  ++*(_DWORD *)a1[1];
}

void std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>(float *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7 = a2;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2) {
                return;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v7;
  v15[2] = a3;
  *((_DWORD *)v15 + 6) = a4;
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    unint64_t v7 = v4;
    goto LABEL_72;
  }
  BOOL v18 = 1;
  if (v9 >= 3) {
    BOOL v18 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v9);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v9 = *((void *)a1 + 1);
  }
  if (prime > v9)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v22 = operator new(8 * prime);
    unint64_t v23 = *(void **)a1;
    *(void *)a1 = v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v24 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    uint64_t v26 = (uint64_t *)(a1 + 4);
    int v25 = (void *)*((void *)a1 + 2);
    if (!v25) {
      goto LABEL_59;
    }
    size_t v27 = v25[1];
    size_t v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v29 = v27 & v28;
      *(void *)(*(void *)a1 + 8 * v29) = v26;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v31 = i[1] & v28;
        if (v31 == v29)
        {
          int v25 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v31))
        {
          void *v25 = *i;
          uint64_t v32 = 8 * v31;
          *uint64_t i = **(void **)(*(void *)a1 + v32);
          **(void **)(*(void *)a1 + v32) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v31) = v25;
          int v25 = i;
          size_t v29 = v31;
        }
      }
LABEL_59:
      unint64_t v9 = prime;
      goto LABEL_60;
    }
    if (v27 >= prime) {
      v27 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v27) = v26;
    unint64_t v36 = (void *)*v25;
    if (!*v25) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v38 = v36[1];
      if (v38 >= prime) {
        v38 %= prime;
      }
      if (v38 != v27)
      {
        if (!*(void *)(*(void *)a1 + 8 * v38))
        {
          *(void *)(*(void *)a1 + 8 * v38) = v25;
          goto LABEL_64;
        }
        void *v25 = *v36;
        uint64_t v37 = 8 * v38;
        *unint64_t v36 = **(void **)(*(void *)a1 + v37);
        **(void **)(*(void *)a1 + v37) = v36;
        unint64_t v36 = v25;
      }
      size_t v38 = v27;
LABEL_64:
      int v25 = v36;
      unint64_t v36 = (void *)*v36;
      size_t v27 = v38;
      if (!v36) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v9) {
    goto LABEL_60;
  }
  unint64_t v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
  {
    unint64_t v33 = std::__next_prime(v33);
  }
  else
  {
    uint64_t v35 = 1 << -(char)__clz(v33 - 1);
    if (v33 >= 2) {
      unint64_t v33 = v35;
    }
  }
  if (prime <= v33) {
    size_t prime = v33;
  }
  if (prime < v9)
  {
    if (!prime)
    {
      unint64_t v42 = *(void **)a1;
      *(void *)a1 = 0;
      if (v42) {
        operator delete(v42);
      }
      unint64_t v9 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v9 = *((void *)a1 + 1);
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v7) {
      v7 %= v9;
    }
  }
  else
  {
    v7 &= v9 - 1;
  }
LABEL_72:
  int v39 = *(void **)a1;
  uint64_t v40 = *(void **)(*(void *)a1 + 8 * v7);
  if (v40)
  {
    void *v15 = *v40;
LABEL_80:
    *uint64_t v40 = v15;
    goto LABEL_81;
  }
  void *v15 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v15;
  v39[v7] = a1 + 4;
  if (*v15)
  {
    unint64_t v41 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9) {
        v41 %= v9;
      }
    }
    else
    {
      v41 &= v9 - 1;
    }
    uint64_t v40 = (void *)(*(void *)a1 + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A1F4B248(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::NavigationMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v3 = v2[2];
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x2FED70A4459DFCA1;
    if (*(void *)&v3 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v7 = 0x2FED70A4459DFCA1uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  float v8 = *(void **)(*(void *)&v2[1] + 8 * v7);
  if (!v8) {
    goto LABEL_26;
  }
  unint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x2FED70A4459DFCA1)
      {
        if (v9[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_22;
        }
      }
      else if ((v11 & (*(void *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x2FED70A4459DFCA1) {
      break;
    }
    if (v10 >= *(void *)&v3) {
      v10 %= *(void *)&v3;
    }
    if (v10 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x2FED70A4459DFCA1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v9[5];
  if (v12)
  {
    md::StyleLogic::setMapMode(v12, 0, 0.0);
    uint64_t v2 = *(int8x8_t **)(a2 + 1120);
    int8x8_t v3 = v2[2];
  }
LABEL_24:
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v3);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v6 = v13.u32[0];
LABEL_26:
  if (v6 > 1)
  {
    unint64_t v14 = 0xDAD5CEE0DC5FF509;
    if (*(void *)&v3 <= 0xDAD5CEE0DC5FF509) {
      unint64_t v14 = 0xDAD5CEE0DC5FF509 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v3 - 1) & 0xDAD5CEE0DC5FF509;
  }
  unint64_t v15 = *(void **)(*(void *)&v2[1] + 8 * v14);
  if (v15)
  {
    float v16 = (void *)*v15;
    if (v16)
    {
      if (v6 < 2)
      {
        uint64_t v17 = *(void *)&v3 - 1;
        while (1)
        {
          uint64_t v19 = v16[1];
          if (v19 == 0xDAD5CEE0DC5FF509)
          {
            if (v16[2] == 0xDAD5CEE0DC5FF509) {
              goto LABEL_46;
            }
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          float v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
      }
      do
      {
        unint64_t v18 = v16[1];
        if (v18 == 0xDAD5CEE0DC5FF509)
        {
          if (v16[2] == 0xDAD5CEE0DC5FF509)
          {
LABEL_46:
            uint64_t v20 = v16[5];
            if (v20) {
              *(unsigned char *)(v20 + 168) = 0;
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(void *)&v3) {
            v18 %= *(void *)&v3;
          }
          if (v18 != v14) {
            return;
          }
        }
        float v16 = (void *)*v16;
      }
      while (v16);
    }
  }
}

void md::NavigationMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  md::StandardMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  uint8x8_t v5 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v6 = v5[2];
  if (!*(void *)&v6) {
    return;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v9 = 0x2FED70A4459DFCA1;
    if (*(void *)&v6 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v9 = 0x2FED70A4459DFCA1uLL % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v9 = (*(void *)&v6 - 1) & 0x2FED70A4459DFCA1;
  }
  unint64_t v10 = *(void **)(*(void *)&v5[1] + 8 * v9);
  if (!v10) {
    goto LABEL_26;
  }
  uint64_t v11 = (void *)*v10;
  if (!v11) {
    goto LABEL_26;
  }
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v13 = v11[1];
      if (v13 == 0x2FED70A4459DFCA1)
      {
        if (v11[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_22;
        }
      }
      else if ((v13 & (*(void *)&v6 - 1)) != v9)
      {
        goto LABEL_24;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == 0x2FED70A4459DFCA1) {
      break;
    }
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
    if (v12 != v9) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_24;
    }
  }
  if (v11[2] != 0x2FED70A4459DFCA1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = v11[5];
  if (v14)
  {
    md::StyleLogic::setMapMode(v14, 3, 0.0);
    uint8x8_t v5 = *(int8x8_t **)(a2 + 1120);
    int8x8_t v6 = v5[2];
  }
LABEL_24:
  if (!*(void *)&v6) {
    return;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v6);
  v15.i16[0] = vaddlv_u8(v15);
  unint64_t v8 = v15.u32[0];
LABEL_26:
  if (v8 > 1)
  {
    unint64_t v16 = 0xDAD5CEE0DC5FF509;
    if (*(void *)&v6 <= 0xDAD5CEE0DC5FF509) {
      unint64_t v16 = 0xDAD5CEE0DC5FF509 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v16 = (*(void *)&v6 - 1) & 0xDAD5CEE0DC5FF509;
  }
  uint64_t v17 = *(void **)(*(void *)&v5[1] + 8 * v16);
  if (v17)
  {
    unint64_t v18 = (void *)*v17;
    if (v18)
    {
      if (v8 < 2)
      {
        uint64_t v19 = *(void *)&v6 - 1;
        while (1)
        {
          uint64_t v21 = v18[1];
          if (v21 == 0xDAD5CEE0DC5FF509)
          {
            if (v18[2] == 0xDAD5CEE0DC5FF509) {
              goto LABEL_46;
            }
          }
          else if ((v21 & v19) != v16)
          {
            return;
          }
          unint64_t v18 = (void *)*v18;
          if (!v18) {
            return;
          }
        }
      }
      do
      {
        unint64_t v20 = v18[1];
        if (v20 == 0xDAD5CEE0DC5FF509)
        {
          if (v18[2] == 0xDAD5CEE0DC5FF509)
          {
LABEL_46:
            uint64_t v22 = v18[5];
            if (v22) {
              *(unsigned char *)(v22 + 168) = 1;
            }
            return;
          }
        }
        else
        {
          if (v20 >= *(void *)&v6) {
            v20 %= *(void *)&v6;
          }
          if (v20 != v16) {
            return;
          }
        }
        unint64_t v18 = (void *)*v18;
      }
      while (v18);
    }
  }
}

void md::NavigationMapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  md::MapEngineMode::applyMapDataTypeSettings(a1, a2, a3);
  uint8x8_t v5 = *(uint64_t **)(a2 + 1128);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 != v7)
  {
    while (*(unsigned char *)v6 != 25)
    {
      v6 += 16;
      if (v6 == v7) {
        return;
      }
    }
  }
  if (v6 != v7 && *(void *)(v6 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 6u);
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x1Au);
  }
}

void md::NavigationMapEngineMode::~NavigationMapEngineMode(md::NavigationMapEngineMode *this)
{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
}

md::NavigationMapEngineMode *md::NavigationMapEngineMode::NavigationMapEngineMode(md::NavigationMapEngineMode *this, int a2)
{
  char IsEnabled_VKMLayout_Navigation = MapsFeature_IsEnabled_VKMLayout_Navigation();
  uint8x8_t v5 = (void *)md::StandardMapEngineMode::StandardMapEngineMode((uint64_t)this, 5, a2, IsEnabled_VKMLayout_Navigation);
  void *v5 = &unk_1EF543980;
  v15[0] = 13;
  v15[1] = a2;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(v5 + 10), 0xDu, v15);
  if (a2) {
    int v7 = 65537;
  }
  else {
    int v7 = 1;
  }
  *(_DWORD *)((char *)v6 + 18) = v7;
  if (a2)
  {
    uint64_t v9 = (void *)((char *)this + 128);
    uint64_t v8 = *((void *)this + 16);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (void *)v8;
          unsigned int v11 = *(unsigned __int16 *)(v8 + 26);
          if (v11 < 9) {
            break;
          }
          uint64_t v8 = *v10;
          uint64_t v9 = v10;
          if (!*v10) {
            goto LABEL_12;
          }
        }
        if (v11 == 8) {
          break;
        }
        uint64_t v8 = v10[1];
        if (!v8)
        {
          uint64_t v9 = v10 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
      unint64_t v10 = (void *)((char *)this + 128);
LABEL_12:
      unint64_t v12 = operator new(0x20uLL);
      v12[13] = 8;
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v10;
      void *v9 = v12;
      uint64_t v13 = **((void **)this + 15);
      if (v13)
      {
        *((void *)this + 15) = v13;
        unint64_t v12 = (_WORD *)*v9;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 16), (uint64_t *)v12);
      ++*((void *)this + 17);
    }
  }
  return this;
}

void sub_1A1F4B8E8(_Unwind_Exception *a1)
{
  *(void *)unsigned int v1 = &unk_1EF5463F0;
  if (*((unsigned char *)v1 + 548)) {
    *((unsigned char *)v1 + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void *md::LabelSettings_Presentation::setInARMode(md::LabelSettings_Presentation *this, unsigned int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EF56DF80;
  v3[1] = this;
  v3[2] = a2;
  unint64_t v4 = v3;
  md::LabelManager::queueCommand(this, 48, 1, v3);
  double result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_1A1F4BA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void altitude::GeoResourceLoader::getProtocol(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v7 = 11;
  strcpy((char *)__p, "georesource");
  int8x8_t v3 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1, (uint64_t)__p);
  int v4 = v7;
  *(void *)(a1 + 8) = v3;
  if (v4 < 0)
  {
    uint64_t v5 = __p[0];
    operator delete(v5);
  }
}

void sub_1A1F4BB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:nn180100](v15);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    char v7 = (char *)operator new(24 * v6);
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v10 = v8 + 24;
  unsigned int v11 = (void **)*a1;
  unint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    unint64_t v12 = (void **)*a1;
    uint64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

void **std::vector<std::string>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void altitude::GeoResourceLoader::requestFile(pthread_mutex_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  pthread_mutex_lock(a1[5]);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = __p;
  }
  char v18 = 0;
  (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, std::string *, void))&(*a1)[1].__opaque[24])(&v19, a1, &v17, 0);
  uint64_t v14 = v19;
  uint8x8_t v15 = v20;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v21 = v14;
  uint64_t v22 = v15;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  pthread_mutex_unlock(a1[5]);
  karo::AsyncFileLoader::requestFile((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1A1F4BEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v25 + 40));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = (void *)(a1 + 72);
  uint64_t v9 = *(void **)(a1 + 72);
  if (!v9) {
    goto LABEL_8;
  }
  unint64_t v10 = (void *)(a1 + 72);
  do
  {
    BOOL v11 = std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100]((uint64_t)(v9 + 4), a2);
    unint64_t v12 = v9 + 1;
    if (!v11)
    {
      unint64_t v12 = v9;
      unint64_t v10 = v9;
    }
    uint64_t v9 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(&v27, a1, a2, a3);
    long long v26 = v27;
    *(_OWORD *)a4 = v27;
    long long v13 = (char *)*v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = v13;
          uint64_t v15 = (uint64_t)(v13 + 32);
          if (!std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v13 + 32))) {
            break;
          }
          long long v13 = (char *)*v14;
          uint64_t v8 = v14;
          if (!*v14) {
            goto LABEL_19;
          }
        }
        if (!std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](v15, a2)) {
          break;
        }
        uint64_t v8 = v14 + 1;
        long long v13 = (char *)v14[1];
        if (!v13) {
          goto LABEL_19;
        }
      }
      char v18 = (char *)*v8;
      if (*v8) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v14 = v8;
    }
LABEL_19:
    char v18 = (char *)operator new(0x50uLL);
    uint64_t v19 = (std::string *)(v18 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v18 + 6) = *(void *)(a2 + 16);
    }
    v18[56] = *(unsigned char *)(a2 + 24);
    *((void *)v18 + 8) = 0;
    *((void *)v18 + 9) = 0;
    *(void *)char v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v14;
    *uint64_t v8 = v18;
    uint64_t v20 = **(void **)(a1 + 64);
    uint64_t v21 = (uint64_t *)v18;
    if (v20)
    {
      *(void *)(a1 + 64) = v20;
      uint64_t v21 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v21);
    ++*(void *)(a1 + 80);
    long long v26 = *(_OWORD *)a4;
LABEL_25:
    if (*((void *)&v26 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)*((void *)v18 + 9);
    *((_OWORD *)v18 + 4) = v26;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    unint64_t v23 = *(void *)(a1 + 48);
    if (v23)
    {
      uint64_t v24 = *a4;
      uint64_t v25 = (std::__shared_weak_count *)a4[1];
      *(void *)&long long v27 = v24;
      *((void *)&v27 + 1) = v25;
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::JobManager::queueJob(v23, &v27);
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      else
      {
        karo::JobManager::queueJob(v23, &v27);
      }
    }
    return;
  }
  uint64_t v17 = v10[8];
  uint64_t v16 = v10[9];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = v17;
  a4[1] = v16;
}

void sub_1A1F4C198(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

BOOL std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v21 = *(std::string *)a1;
  }
  unsigned __int8 v22 = *(unsigned char *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 24);
  char v20 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  int v6 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  int v8 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  uint64_t v9 = (void *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v19.__r_.__value_.__l.__size_;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v11 = &v19;
  }
  else {
    BOOL v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (size != v10) {
    goto LABEL_24;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    if (memcmp(v21.__r_.__value_.__l.__data_, v11, v21.__r_.__value_.__l.__size_)) {
      goto LABEL_24;
    }
LABEL_37:
    BOOL v17 = v22 < v4;
    if (v8 < 0) {
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  if (!*((unsigned char *)&v21.__r_.__value_.__s + 23)) {
    goto LABEL_37;
  }
  unint64_t v12 = &v21;
  long long v13 = v11;
  while (v12->__r_.__value_.__s.__data_[0] == v13->__r_.__value_.__s.__data_[0])
  {
    unint64_t v12 = (std::string *)((char *)v12 + 1);
    long long v13 = (std::string *)((char *)v13 + 1);
    if (!--v5) {
      goto LABEL_37;
    }
  }
LABEL_24:
  if (v6 >= 0) {
    uint64_t v14 = &v21;
  }
  else {
    uint64_t v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (v10 >= size) {
    size_t v15 = size;
  }
  else {
    size_t v15 = v10;
  }
  int v16 = memcmp(v14, v11, v15);
  if (v16)
  {
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_32;
    }
  }
  else if (size >= v10)
  {
LABEL_32:
    BOOL v17 = 0;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  BOOL v17 = 1;
  if (v8 < 0)
  {
LABEL_33:
    operator delete(v9);
    LOBYTE(v6) = *((unsigned char *)&v21.__r_.__value_.__s + 23);
  }
LABEL_34:
  if ((v6 & 0x80) != 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_1A1F4C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = (pthread_mutex_t **)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v9 = *(void **)(a1 + 72);
  char v7 = (void *)(a1 + 72);
  int v8 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  std::string::size_type v10 = v7;
  do
  {
    BOOL v11 = std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100]((uint64_t)(v8 + 4), a2);
    unint64_t v12 = v8 + 1;
    if (!v11)
    {
      unint64_t v12 = v8;
      std::string::size_type v10 = v8;
    }
    int v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    long long v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_9;
  }
  int v16 = (karo::Job *)v10[8];
  long long v13 = (std::__shared_weak_count *)v10[9];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(*v6);
  if (v16)
  {
    karo::Job::waitToFinish(v16, a3);
    char v18 = (pthread_mutex_t *)*((void *)v16 + 19);
    BOOL v17 = (pthread_mutex_t **)((char *)v16 + 152);
    pthread_mutex_lock(v18);
    uint64_t v14 = (_BYTE)v17[1] & 1;
    int v6 = v17;
LABEL_9:
    pthread_mutex_unlock(*v6);
    if (!v13) {
      return v14;
    }
    goto LABEL_10;
  }
  uint64_t v14 = 0;
  if (!v13) {
    return v14;
  }
LABEL_10:
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v14;
}

void sub_1A1F4C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  int v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  char v18 = v22;
  std::string v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    char v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  char v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A1F4C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 32;
      (*(void (**)(unsigned int **__return_ptr, uint64_t))(*(void *)a1 + 96))(&v22, a1);
      BOOL v11 = v22;
      int v12 = *(_DWORD *)(v10 + 4);
      unsigned int v13 = *(_DWORD *)(v10 + 8);
      char v14 = *(unsigned char *)(v10 + 12);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      int v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        std::string v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        *int v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        std::string v19 = v16 + 3;
        *(void *)(a3 + 8) = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      char v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 16;
    }
    while (v10 + 16 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A1F4C858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

void altitude::GeoResourceLoader::createRequest()
{
}

void sub_1A1F4C9C4(_Unwind_Exception *a1)
{
  karo::AsyncFileLoader::LoadJob::~LoadJob(v1);
  MEMORY[0x1A6239270]();
  _Unwind_Resume(a1);
}

void sub_1A1F4C9EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::GeoResourceLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::GeoResourceLoadJob>,std::allocator<altitude::GeoResourceLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::GeoResourceLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::GeoResourceLoadJob>,std::allocator<altitude::GeoResourceLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::GeoResourceLoadJob::getData(id *this)
{
  return [this[30] bytes];
}

uint64_t altitude::GeoResourceLoadJob::getDataSize(id *this)
{
  return [this[30] length];
}

uint64_t altitude::GeoResourceLoadJob::succeeded(altitude::GeoResourceLoadJob *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t altitude::GeoResourceLoadJob::jobStep(altitude::GeoResourceLoadJob *this)
{
  uint64_t v2 = *((void *)this + 30);
  if (!v2)
  {
    v9[23] = 14;
    strcpy(v9, "georesource://");
    karo::util::Path::removePrefix(__p, (uint64_t)this + 216, (uint64_t)v9);
    if (v11 >= 0) {
      unint64_t v3 = __p;
    }
    else {
      unint64_t v3 = (void **)__p[0];
    }
    unsigned int v4 = [NSString stringWithUTF8String:v3];
    uint64_t v5 = [MEMORY[0x1E4F64908] sharedManager];
    uint64_t v6 = [v5 dataForResourceWithName:v4 fallbackBundle:0];
    char v7 = (void *)*((void *)this + 30);
    *((void *)this + 30) = v6;

    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = *((void *)this + 30);
  }
  *((unsigned char *)this + 248) = v2 != 0;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_1A1F4CBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void altitude::GeoResourceLoadJob::~GeoResourceLoadJob(id *this)
{
  *this = &unk_1EF569F28;

  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  *this = &unk_1EF567700;
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  karo::Job::~Job((karo::Job *)this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *this = &unk_1EF569F28;

  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  *this = &unk_1EF567700;
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  karo::Job::~Job((karo::Job *)this);
}

void karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(void **)(a1 + 64);
  if (v4 != (void *)(a1 + 72))
  {
    while (v4[8] != a2)
    {
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
      if (v6 == (void *)(a1 + 72)) {
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((void *)(a1 + 64), (uint64_t)v4);
  }
LABEL_12:
  uint64_t v8 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v8);
}

void sub_1A1F4CE88(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      unint64_t v4 = v3;
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = (void *)a2;
    do
    {
      unint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  BOOL v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 72);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != a1 + 72)
  {
    do
    {
      BOOL v7 = *(void **)(v4 + 8);
      uint64_t v8 = (void *)v4;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      uint64_t v11 = *(void *)(v4 + 64);
      if (atomic_load((unsigned int *)(v11 + 128))) {
        *(_DWORD *)(v11 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v11 + 152));
      int v13 = *(_DWORD *)(v11 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 152));
      if ((v13 & 1) != 0 && *(unsigned char *)(v11 + 176) && *(_DWORD *)(v11 + 180) != a2
        || (a2 - *(_DWORD *)(v11 + 180)) > *(_DWORD *)(v11 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((void *)(a1 + 64), v4);
      }
      uint64_t v4 = (uint64_t)v9;
    }
    while (v9 != (void *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v5);
}

void sub_1A1F4D0C0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void altitude::GeoResourceLoader::~GeoResourceLoader(altitude::GeoResourceLoader *this)
{
  *(void *)this = &unk_1EF567DD8;
  while (*((void *)this + 10))
    (*(void (**)(altitude::GeoResourceLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((char **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF567DD8;
  while (*((void *)this + 10))
    (*(void (**)(altitude::GeoResourceLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((char **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

unsigned __int8 *md::RoadSignPartMetrics::RoadSignPartMetrics(unsigned __int8 *a1, unsigned int a2, double *a3)
{
  *a1 = 0;
  *(_OWORD *)(a1 + 8) = *MEMORY[0x1E4F1DB30];
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E4F1DB28];
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  BOOL v6 = (double *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 81) = 0u;
  long long v7 = *MEMORY[0x1E4F1DAD8];
  *(_OWORD *)(a1 + 104) = *MEMORY[0x1E4F1DAD8];
  *(_OWORD *)(a1 + 120) = v7;
  uint64_t v8 = (double *)(a1 + 136);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 152) = v7;
  *a1 = a2;
  double v9 = a3[1];
  double v10 = a3[2];
  double v11 = v10 * v9;
  double v12 = round(v10 * v9 * a3[9]);
  double v13 = round(v10 * v9 * a3[10]);
  *((double *)a1 + 11) = fmax(v12, v13);
  BOOL v14 = a2 < 0x10;
  unsigned int v15 = v14 & (0xFFCCu >> a2);
  a1[96] = v14 & (0xFFCCu >> a2);
  int v16 = (double *)(a1 + 80);
  double v17 = round(a3[7] * (v10 * v9));
  double v18 = round(a3[8] * (v10 * v9));
  double v19 = fmax(v12 - v17, 0.0);
  double v20 = fmax(v17 + v12, 0.0);
  double v21 = fmax(v18 + v12, 0.0);
  double v22 = fmax(v12 - v18, 0.0);
  double v23 = round(v10 * v9 * a3[14]);
  double v24 = fmax(v19, v13) + v23;
  double v25 = fmax(v20, v13) + v23;
  double v26 = fmax(v21, v13);
  double v27 = round(v10 * v9 * a3[15]);
  double v28 = v26 + v27;
  double v29 = fmax(v22, v13) + v27;
  double v30 = 2.0;
  switch(a2)
  {
    case 1u:
      goto LABEL_16;
    case 2u:
    case 3u:
      double v35 = round(v11 * a3[6]) + v23;
      double v36 = round(v11 * a3[3]);
      double v30 = v36 + v35 * 2.0;
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v35;
      double v37 = v35 + v36;
      *((double *)a1 + 15) = v37;
      double v34 = (v37 + v35) * 0.5;
      goto LABEL_22;
    case 4u:
      *BOOL v6 = v24;
      double v42 = round(v11 * a3[13]);
      double v43 = a3[16];
      goto LABEL_15;
    case 5u:
      *int v16 = v25;
      double v42 = round(v11 * a3[16]);
      double v43 = a3[13];
LABEL_15:
      double v30 = round(v11 * v43) + v42;
LABEL_16:
      *((double *)a1 + 5) = v30;
LABEL_24:
      *((double *)a1 + 4) = v29;
      double v49 = round(v11 * a3[12]);
      *((double *)a1 + 6) = v49;
      *((double *)a1 + 8) = v29;
LABEL_28:
      double v50 = v29;
LABEL_29:
      *((double *)a1 + 7) = v28;
      switch(a2)
      {
        case 2u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
          *((double *)a1 + 18) = v29;
          double v52 = round(v9 * a3[4] * v10) + v29;
          goto LABEL_37;
        case 3u:
          double v61 = a3[4];
          goto LABEL_36;
        case 8u:
        case 9u:
          uint64_t v53 = *((void *)a1 + 3);
          CGFloat MidY = CGRectGetMidY(*(CGRect *)(&v30 - 2));
          *((CGFloat *)a1 + 18) = MidY;
          double v10 = a3[2];
          double v9 = a3[1];
          double v55 = round(v9 * a3[3] * v10) * 0.5;
          *((CGFloat *)a1 + 14) = MidY - v55;
          *((double *)a1 + 16) = v55 + MidY;
          unsigned int v15 = a1[96];
          break;
        case 0xCu:
        case 0xDu:
          double v56 = round(round(v11 * a3[4]) * 0.707106781);
          double v57 = round(fabs(round(v11 * a3[3])) * 0.707106781);
          *((double *)a1 + 18) = v29;
          double v58 = v56 + v29;
          *((double *)a1 + 14) = v58;
          double v52 = v57 + v58;
          goto LABEL_38;
        case 0xEu:
        case 0xFu:
          double v59 = round(round(v11 * a3[4]) * 0.707106781);
          double v60 = round(fabs(round(v11 * a3[3])) * 0.707106781);
          *((double *)a1 + 18) = v59 + v49 + v29;
          *((double *)a1 + 14) = v49 + v29;
          double v52 = v49 + v29 - v60;
          goto LABEL_38;
        default:
          goto LABEL_39;
      }
      goto LABEL_39;
    case 6u:
      *BOOL v6 = v24;
      goto LABEL_19;
    case 7u:
      *int v16 = v25;
LABEL_19:
      double v44 = round(v11 * a3[13]);
      double v45 = round(v11 * a3[3]);
      double v46 = round(v11 * a3[6]);
      double v30 = v45 + v44 + round(v11 * a3[16]) + v46 * 2.0;
      *((double *)a1 + 5) = v30;
      double v47 = v46 + v44;
      *((double *)a1 + 13) = v47;
      *((double *)a1 + 15) = v47 + v45;
      double v34 = v47 + v45 * 0.5;
      goto LABEL_22;
    case 8u:
    case 9u:
      double v38 = round(v11 * a3[4]);
      if (a2 != 8) {
        double v24 = v25;
      }
      uint64_t v39 = 80;
      if (a2 == 8) {
        uint64_t v39 = 72;
      }
      *(double *)&a1[v39] = v38 + v24;
      double v30 = round(v11 * a3[16]) + round(v11 * a3[13]);
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v30;
      *((double *)a1 + 15) = v30;
      double v34 = v38 + v30;
      goto LABEL_22;
    case 0xAu:
    case 0xBu:
      double v40 = round(v11 * a3[3]);
      double v41 = fmax(round(v11 * a3[16]), v40);
      if (a2 == 10) {
        *BOOL v6 = v24;
      }
      else {
        *int v16 = v25;
      }
      double v30 = round(v11 * a3[13]) + round(v11 * a3[6]) + v41;
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v30 - v40;
      *((double *)a1 + 15) = v30;
      double v34 = v30;
      goto LABEL_22;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
      double v31 = round(round(v11 * a3[4]) * 0.707106781);
      double v32 = round(fabs(round(v11 * a3[3])) * 0.707106781);
      double v33 = fmax(round(v11 * a3[16]), v32);
      if ((a2 | 2) != 0xE)
      {
        double v24 = v25;
        BOOL v6 = (double *)(a1 + 80);
      }
      *BOOL v6 = v31 + v24;
      double v30 = round(v11 * a3[13]) + round(v11 * a3[6]) + v33;
      *((double *)a1 + 5) = v30;
      *((double *)a1 + 13) = v30 - v32;
      *((double *)a1 + 15) = v30;
      double v34 = v30 + v31;
LABEL_22:
      *uint64_t v8 = v34;
      switch(a2)
      {
        case 2u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
          double v48 = v11 * a3[4];
          goto LABEL_26;
        case 3u:
          *((double *)a1 + 4) = v29;
          double v49 = round(v11 * a3[12]);
          *((double *)a1 + 6) = v49;
          *((double *)a1 + 8) = v29;
          double v61 = a3[4];
          *((double *)a1 + 7) = round(v11 * v61) + v28;
LABEL_36:
          double v52 = v49 + v29;
          *((double *)a1 + 18) = round(v9 * v61 * v10) + v49 + v29;
LABEL_37:
          *((double *)a1 + 14) = v52;
LABEL_38:
          *((double *)a1 + 16) = v52;
          goto LABEL_39;
        case 8u:
        case 9u:
          goto LABEL_24;
        case 0xCu:
        case 0xDu:
          double v48 = round(v11 * a3[4]) * 0.707106781;
LABEL_26:
          double v50 = round(v48) + v29;
          *((double *)a1 + 4) = v50;
          double v49 = round(v11 * a3[12]);
          *((double *)a1 + 6) = v49;
          *((double *)a1 + 8) = v50;
          goto LABEL_29;
        case 0xEu:
        case 0xFu:
          double v51 = round(round(v11 * a3[4]) * 0.707106781);
          *((double *)a1 + 4) = v29;
          double v49 = round(v11 * a3[12]);
          *((double *)a1 + 6) = v49;
          *((double *)a1 + 8) = v29;
          double v28 = v51 + v28;
          goto LABEL_28;
        default:
          goto LABEL_39;
      }
    default:
LABEL_39:
      if (!v15) {
        goto LABEL_58;
      }
      double v62 = *((double *)a1 + 17);
      double v63 = *((double *)a1 + 18);
      double v64 = round(v9 * v10 * a3[5]);
      if (v64 == 0.0) {
        goto LABEL_57;
      }
      double v65 = *((double *)a1 + 13) - v62;
      double v66 = *((double *)a1 + 14) - v63;
      double v67 = 1.0 / sqrt(v66 * v66 + v65 * v65);
      double v68 = v67 * v65;
      double v69 = v67 * v66;
      v99[0] = v68;
      v99[1] = v69;
      double v70 = *((double *)a1 + 15) - v62;
      double v71 = *((double *)a1 + 16) - v63;
      double v72 = 1.0 / sqrt(v71 * v71 + v70 * v70);
      double v73 = v72 * v70;
      double v74 = v72 * v71;
      *(double *)&long long v98 = v72 * v70;
      *((double *)&v98 + 1) = v72 * v71;
      if ((*a1 & 0xFE) == 8)
      {
        long long v75 = xmmword_1A28FCCC0;
        if (*(_OWORD *)v99 == 0)
        {
          double v79 = 0.0;
        }
        else
        {
          long double v76 = atan2(v69, v68);
          long double v77 = fmod(v76 + 1.57079633, 6.28318531);
          long double v78 = fmod(v77 + 6.28318531, 6.28318531);
          long long v75 = xmmword_1A28FCCC0;
          double v79 = v78 + -3.14159265;
        }
        if (v75 != 0 && v98 != 0)
        {
          double v84 = atan2(v74, v73);
          double v85 = 1.57079633;
LABEL_54:
          long double v86 = fmod(v84 + v85, 6.28318531);
          double v87 = fmod(v86 + 6.28318531, 6.28318531) + -3.14159265;
          goto LABEL_56;
        }
      }
      else
      {
        long long v80 = xmmword_1A28FCBD0;
        if (*(_OWORD *)v99 == 0)
        {
          double v79 = 0.0;
        }
        else
        {
          long double v81 = atan2(v69, v68);
          long double v82 = fmod(v81 + 3.14159265, 6.28318531);
          long double v83 = fmod(v82 + 6.28318531, 6.28318531);
          long long v80 = xmmword_1A28FCBD0;
          double v79 = v83 + -3.14159265;
        }
        if (v80 != 0 && v98 != 0)
        {
          double v84 = atan2(v74, v73);
          double v85 = 3.14159265;
          goto LABEL_54;
        }
      }
      double v87 = 0.0;
LABEL_56:
      double v88 = (v87 + v79) * 0.5;
      long double v89 = v64 / asin(vabdd_f64(v79, v87) * 0.5) - v64;
      __double2 v90 = __sincos_stret(v88);
      long double v91 = v89 / sqrt(v90.__cosval * v90.__cosval + v90.__sinval * v90.__sinval);
      double v62 = ceil(v62 + v91 * v90.__cosval);
      double v63 = ceil(v63 + v91 * v90.__sinval);
LABEL_57:
      *((double *)a1 + 19) = v62;
      *((double *)a1 + 20) = v63;
LABEL_58:
      v92.f64[0] = *((float64_t *)a1 + 10);
      float64x2_t v93 = *(float64x2_t *)(a1 + 40);
      v92.f64[1] = *((float64_t *)a1 + 7);
      float64x2_t v94 = vaddq_f64(vaddq_f64(v93, (float64x2_t)vextq_s8(*((int8x16_t *)a1 + 4), *((int8x16_t *)a1 + 4), 8uLL)), v92);
      *(float64x2_t *)(a1 + 8) = v94;
      unsigned int v95 = *a1;
      if (v95 <= 0xE && ((1 << v95) & 0x5550) != 0)
      {
        *((void *)a1 + 3) = *(_OWORD *)&vsubq_f64(v94, v93);
        if (v15)
        {
          long long v96 = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 120) = v96;
          *((double *)a1 + 13) = v94.f64[0] - *((double *)a1 + 13);
          *((double *)a1 + 15) = v94.f64[0] - *((double *)a1 + 15);
          *uint64_t v8 = v94.f64[0] - *v8;
          *((double *)a1 + 19) = v94.f64[0] - *((double *)a1 + 19);
        }
      }
      return a1;
  }
}

md::RoadSignGeneratedMetrics *md::RoadSignGeneratedMetrics::RoadSignGeneratedMetrics(md::RoadSignGeneratedMetrics *this, const RoadSignMetrics *a2, const RoadSignTextMetrics *a3)
{
  *(unsigned char *)this = 0;
  uint64_t v6 = MEMORY[0x1E4F1DB30];
  *(_OWORD *)((char *)this + 8) = *MEMORY[0x1E4F1DB30];
  long long v7 = (long long *)MEMORY[0x1E4F1DB28];
  long long v8 = *MEMORY[0x1E4F1DB28];
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E4F1DB28];
  *(_OWORD *)((char *)this + 40) = v9;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 81) = 0u;
  double v10 = (long long *)MEMORY[0x1E4F1DAD8];
  long long v11 = *MEMORY[0x1E4F1DAD8];
  *(_OWORD *)((char *)this + 104) = *MEMORY[0x1E4F1DAD8];
  *(_OWORD *)((char *)this + 120) = v11;
  *(_OWORD *)((char *)this + 136) = v11;
  *(_OWORD *)((char *)this + 152) = v11;
  *((unsigned char *)this + 168) = 0;
  double v12 = (char *)this + 168;
  long long v13 = *v7;
  long long v14 = v7[1];
  *((_OWORD *)this + 11) = *(_OWORD *)v6;
  *((_OWORD *)this + 12) = v8;
  *(_OWORD *)((char *)this + 249) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = v14;
  long long v15 = *v10;
  *((_OWORD *)this + 17) = *v10;
  *((_OWORD *)this + 18) = v15;
  long long v16 = *v10;
  *((_OWORD *)this + 19) = *v10;
  *((_OWORD *)this + 20) = v16;
  double v17 = (char *)this + 336;
  *((unsigned char *)this + 336) = 0;
  *(_OWORD *)((char *)this + 344) = *(_OWORD *)v6;
  long long v18 = *v7;
  *(_OWORD *)((char *)this + 376) = v7[1];
  *(_OWORD *)((char *)this + 360) = v18;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 440) = *v10;
  *(_OWORD *)((char *)this + 456) = *v10;
  *(_OWORD *)((char *)this + 472) = *v10;
  *(_OWORD *)((char *)this + 488) = *v10;
  double v19 = (char *)this + 504;
  *((unsigned char *)this + 504) = 0;
  long long v20 = *v7;
  long long v21 = v7[1];
  *((_OWORD *)this + 32) = *(_OWORD *)v6;
  *((_OWORD *)this + 33) = v20;
  *(_OWORD *)((char *)this + 585) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 34) = v21;
  long long v22 = *v10;
  *((_OWORD *)this + 38) = *v10;
  *((_OWORD *)this + 39) = v22;
  long long v23 = *v10;
  *((_OWORD *)this + 40) = *v10;
  *((_OWORD *)this + 41) = v23;
  *(_OWORD *)((char *)this + 680) = *(_OWORD *)v6;
  long long v24 = v7[1];
  *(_OWORD *)((char *)this + 696) = *v7;
  *(_OWORD *)((char *)this + 712) = v24;
  long long v25 = v7[1];
  *(_OWORD *)((char *)this + 728) = *v7;
  *(_OWORD *)((char *)this + 744) = v25;
  *((void *)this + 95) = 0;
  long long v26 = *v10;
  *((_OWORD *)this + 48) = *v10;
  *((_OWORD *)this + 49) = v26;
  long long v27 = *v7;
  long long v28 = v7[1];
  *((_OWORD *)this + 50) = *v10;
  *((_OWORD *)this + 51) = v27;
  long long v29 = *v7;
  long long v30 = v7[1];
  *((_OWORD *)this + 52) = v28;
  *((_OWORD *)this + 53) = v29;
  long long v31 = *v7;
  long long v32 = v7[1];
  *((_OWORD *)this + 54) = v30;
  *((_OWORD *)this + 55) = v31;
  long long v33 = *v7;
  long long v34 = v7[1];
  *((_OWORD *)this + 56) = v32;
  *((_OWORD *)this + 57) = v33;
  long long v35 = *v7;
  long long v36 = v7[1];
  *((_OWORD *)this + 58) = v34;
  *((_OWORD *)this + 59) = v35;
  long long v37 = *v7;
  long long v38 = v7[1];
  *((_OWORD *)this + 60) = v36;
  *((_OWORD *)this + 61) = v37;
  long long v39 = v7[1];
  *((_OWORD *)this + 63) = v13;
  *((_OWORD *)this + 64) = v39;
  *((_OWORD *)this + 62) = v38;
  unsigned int orientation = a2->_orientation;
  unsigned int v41 = 6;
  int v42 = 5;
  int v43 = 4;
  switch(orientation)
  {
    case 1u:
      goto LABEL_6;
    case 2u:
    case 3u:
    case 5u:
    case 7u:
    case 9u:
    case 0xAu:
    case 0xCu:
    case 0xDu:
      goto LABEL_2;
    case 4u:
      unsigned int v41 = 8;
      goto LABEL_6;
    case 6u:
      unsigned int v41 = 10;
      goto LABEL_6;
    case 8u:
      unsigned int v41 = 12;
      goto LABEL_6;
    case 0xBu:
      unsigned int v41 = 14;
LABEL_6:
      char v45 = 0;
      unsigned int v46 = 0;
      unsigned int v44 = v42;
      break;
    default:
      int v43 = 0;
LABEL_2:
      unsigned int v41 = v43;
      int v42 = 7;
      unsigned int v44 = 5;
      switch(orientation)
      {
        case 2u:
          goto LABEL_6;
        case 3u:
        case 4u:
        case 6u:
        case 8u:
        case 0xAu:
        case 0xBu:
        case 0xDu:
          if (orientation <= 0xD) {
            goto LABEL_4;
          }
          goto LABEL_60;
        case 5u:
          int v42 = 9;
          goto LABEL_6;
        case 7u:
          int v42 = 11;
          goto LABEL_6;
        case 9u:
          int v42 = 13;
          goto LABEL_6;
        case 0xCu:
          int v42 = 15;
          goto LABEL_6;
        default:
          unsigned int v44 = 0;
          if (orientation > 0xD) {
            goto LABEL_60;
          }
LABEL_4:
          char v45 = 1;
          if (((1 << orientation) & 0x3BF0) != 0)
          {
            int v42 = v44;
            goto LABEL_6;
          }
          if (orientation == 3)
          {
            unsigned int v46 = 2;
          }
          else if (orientation == 10)
          {
            unsigned int v46 = 3;
          }
          else
          {
LABEL_60:
            char v45 = 0;
            unsigned int v46 = 0;
          }
          break;
      }
      break;
  }
  *((unsigned char *)this + 672) = v45;
  if (v41)
  {
    md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, v41, (double *)&a2->_orientation);
    long long v47 = v146;
    *((_OWORD *)this + 8) = v145;
    *((_OWORD *)this + 9) = v47;
    *((void *)this + 20) = v147;
    long long v48 = v142;
    *((_OWORD *)this + 4) = v141;
    *((_OWORD *)this + 5) = v48;
    long long v49 = v144;
    *((_OWORD *)this + 6) = v143;
    *((_OWORD *)this + 7) = v49;
    long long v50 = v138;
    *(_OWORD *)this = v137;
    *((_OWORD *)this + 1) = v50;
    long long v51 = v140;
    *((_OWORD *)this + 2) = v139;
    *((_OWORD *)this + 3) = v51;
  }
  if (v44)
  {
    md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, v44, (double *)&a2->_orientation);
    long long v52 = v146;
    *((_OWORD *)v12 + 8) = v145;
    *((_OWORD *)v12 + 9) = v52;
    *((void *)v12 + 20) = v147;
    long long v53 = v142;
    *((_OWORD *)v12 + 4) = v141;
    *((_OWORD *)v12 + 5) = v53;
    long long v54 = v144;
    *((_OWORD *)v12 + 6) = v143;
    *((_OWORD *)v12 + 7) = v54;
    long long v55 = v138;
    *(_OWORD *)double v12 = v137;
    *((_OWORD *)v12 + 1) = v55;
    long long v56 = v140;
    *((_OWORD *)v12 + 2) = v139;
    *((_OWORD *)v12 + 3) = v56;
  }
  BOOL v57 = 1;
  md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, 1u, (double *)&a2->_orientation);
  long long v58 = v146;
  *((_OWORD *)v17 + 8) = v145;
  *((_OWORD *)v17 + 9) = v58;
  *((void *)v17 + 20) = v147;
  long long v59 = v142;
  *((_OWORD *)v17 + 4) = v141;
  *((_OWORD *)v17 + 5) = v59;
  long long v60 = v144;
  *((_OWORD *)v17 + 6) = v143;
  *((_OWORD *)v17 + 7) = v60;
  long long v61 = v138;
  *(_OWORD *)double v17 = v137;
  *((_OWORD *)v17 + 1) = v61;
  long long v62 = v140;
  *((_OWORD *)v17 + 2) = v139;
  *((_OWORD *)v17 + 3) = v62;
  double v63 = 0.0;
  if (!*((unsigned char *)this + 672)) {
    goto LABEL_14;
  }
  md::RoadSignPartMetrics::RoadSignPartMetrics((unsigned __int8 *)&v137, v46, (double *)&a2->_orientation);
  long long v64 = v146;
  *((_OWORD *)v19 + 8) = v145;
  *((_OWORD *)v19 + 9) = v64;
  *((void *)v19 + 20) = v147;
  long long v65 = v142;
  *((_OWORD *)v19 + 4) = v141;
  *((_OWORD *)v19 + 5) = v65;
  long long v66 = v144;
  *((_OWORD *)v19 + 6) = v143;
  *((_OWORD *)v19 + 7) = v66;
  long long v67 = v138;
  *(_OWORD *)double v19 = v137;
  *((_OWORD *)v19 + 1) = v67;
  long long v68 = v140;
  int v69 = *((unsigned __int8 *)this + 672);
  *((_OWORD *)v19 + 2) = v139;
  *((_OWORD *)v19 + 3) = v68;
  BOOL v57 = v69 == 0;
  if (v69) {
    double v70 = *((double *)this + 68);
  }
  else {
LABEL_14:
  }
    double v70 = 0.0;
  double v71 = *((double *)this + 5);
  double v72 = v71 + v70 + *((double *)this + 26);
  double width = a2->_glyphSize.width;
  if (width != *(double *)v6 || a2->_glyphSize.height != *(double *)(v6 + 8))
  {
    double scale = a2->_scale;
    double v75 = scale * width;
    double v76 = floor(v75);
    double v77 = ceil(v75);
    if (scale >= 1.0) {
      double v63 = v76;
    }
    else {
      double v63 = v77;
    }
  }
  double v78 = fmax(v72, a3[1]._verticalMargin + v63 + round(a3->_scale * a3->_horizontalMargin * a3->_contentScale) * 2.0);
  double v79 = v78 - v72;
  double v80 = 0.0;
  if (v57)
  {
    double v81 = 0.0;
  }
  else
  {
    double v79 = ceil(fmod(v78 - v72, 2.0)) + v79;
    double v81 = *((double *)this + 65);
  }
  *((double *)this + 95) = v79;
  *((double *)this + 89) = v78;
  v148.origin.x = *((CGFloat *)this + 3);
  double v82 = fmax(fmax(fmax(*((double *)this + 2), *((double *)this + 23)), *((double *)this + 44)), v81);
  *((double *)this + 85) = *((double *)this + 9) + *((double *)this + 31) + v78;
  *((double *)this + 86) = v82;
  double v83 = *((double *)this + 48);
  v148.origin.y = *((CGFloat *)this + 4);
  v148.size.height = *((CGFloat *)this + 6);
  v148.size.double width = v71;
  CGRectGetMinX(v148);
  double MinY = CGRectGetMinY(*(CGRect *)((char *)this + 24));
  CGRectGetMinX(*((CGRect *)this + 6));
  double v85 = CGRectGetMinY(*((CGRect *)this + 6));
  CGRectGetMinX(*(CGRect *)((char *)this + 360));
  double v86 = CGRectGetMinY(*(CGRect *)((char *)this + 360));
  if (*((unsigned char *)this + 672))
  {
    CGRectGetMinX(*(CGRect *)((char *)this + 528));
    double v80 = CGRectGetMinY(*(CGRect *)((char *)this + 528));
  }
  double v87 = fmax(fmax(fmax(MinY, v85), v86), v80);
  double MinX = CGRectGetMinX(*(CGRect *)((char *)this + 24));
  CGRectGetMinY(*(CGRect *)((char *)this + 24));
  *((double *)this + 87) = MinX;
  *((double *)this + 88) = v87;
  *((double *)this + 90) = v83;
  if (BYTE1(a3[1]._textSize))
  {
    double v89 = a3[1]._verticalMargin + MinX;
    double MinX = round(a3->_scale * a3->_horizontalMargin * a3->_contentScale) * 1.5;
  }
  else
  {
    double v89 = round(a3->_scale * a3->_horizontalMargin * a3->_contentScale) * 0.5;
  }
  *((double *)this + 91) = v89 + MinX;
  double v90 = a2->_scale;
  double v91 = a2->_glyphSize.width * v90;
  double v92 = a2->_glyphSize.height * v90;
  double v93 = floor(v91);
  double v94 = floor(v92);
  double v95 = ceil(v91);
  double v96 = ceil(v92);
  BOOL v97 = v90 < 1.0;
  if (v90 >= 1.0)
  {
    double v95 = v93;
    double v96 = v94;
  }
  double v98 = a2->_glyphVerticalOffset * v90;
  double v99 = floor(v98);
  double v100 = ceil(v98);
  if (!v97) {
    double v100 = v99;
  }
  *((double *)this + 92) = v100 + v87 + (v83 - v96) * 0.5;
  *((double *)this + 93) = v95;
  *((double *)this + 94) = v96;
  int v101 = *((unsigned __int8 *)this + 672);
  CGRectGetMinX(*(CGRect *)((char *)this + 24));
  v149.origin.y = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 24));
  v149.size.double width = *((CGFloat *)this + 1);
  v149.size.height = *((CGFloat *)this + 2);
  *((void *)this + 106) = 0;
  *((double *)this + 107) = v149.origin.y;
  *((void *)this + 108) = *(void *)&v149.size.width;
  *((void *)this + 109) = *(void *)&v149.size.height;
  v149.origin.x = 0.0;
  CGFloat MaxX = CGRectGetMaxX(v149);
  CGRectGetMinX(*(CGRect *)((char *)this + 360));
  double v103 = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 360));
  double v104 = *((double *)this + 95);
  if (v101)
  {
    double v105 = v104 * 0.5;
    uint64_t v106 = *((void *)this + 44);
    *((CGFloat *)this + 122) = MaxX;
    *((double *)this + 123) = v103;
    *((double *)this + 124) = v105;
    *((void *)this + 125) = v106;
    CGFloat v107 = MaxX;
    CGFloat v108 = CGRectGetMaxX(*(CGRect *)(&v103 - 1));
    CGRectGetMinX(*(CGRect *)((char *)this + 528));
    v150.origin.y = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 528));
    v150.size.double width = *((CGFloat *)this + 64);
    v150.size.height = *((CGFloat *)this + 65);
    *((CGFloat *)this + 118) = v108;
    *((double *)this + 119) = v150.origin.y;
    *((void *)this + 120) = *(void *)&v150.size.width;
    *((void *)this + 121) = *(void *)&v150.size.height;
    v150.origin.x = v108;
    CGFloat MaxX = CGRectGetMaxX(v150);
    CGRectGetMinX(*(CGRect *)((char *)this + 360));
    double v103 = v87 - CGRectGetMinY(*(CGRect *)((char *)this + 360));
    double v104 = *((double *)this + 95) * 0.5;
    uint64_t v109 = *((void *)this + 44);
    *((CGFloat *)this + 126) = MaxX;
    *((double *)this + 127) = v103;
    *((double *)this + 128) = v104;
    *((void *)this + 129) = v109;
  }
  else
  {
    uint64_t v109 = *((void *)this + 44);
    *((CGFloat *)this + 114) = MaxX;
    *((double *)this + 115) = v103;
    *((double *)this + 116) = v104;
    *((void *)this + 117) = v109;
  }
  CGFloat v110 = MaxX;
  double v111 = CGRectGetMaxX(*(CGRect *)(&v103 - 1));
  CGRectGetMinX(*((CGRect *)this + 6));
  CGFloat v112 = CGRectGetMinY(*((CGRect *)this + 6));
  *((double *)this + 110) = v111;
  *((double *)this + 111) = v87 - v112;
  *((_OWORD *)this + 56) = *((_OWORD *)this + 11);
  if (*((unsigned char *)this + 96))
  {
    *((_OWORD *)this + 48) = *(_OWORD *)((char *)this + 136);
    *((_OWORD *)this + 49) = *(_OWORD *)((char *)this + 152);
    goto LABEL_40;
  }
  if (*((unsigned char *)this + 264))
  {
    double v113 = *((double *)this + 38);
    *((void *)this + 97) = *((void *)this + 39);
    *((double *)this + 96) = v111 + v113;
    double v114 = *((double *)this + 40);
    *((void *)this + 99) = *((void *)this + 41);
    double v115 = v114 + v111;
LABEL_39:
    *((double *)this + 98) = v115;
    goto LABEL_40;
  }
  if (*((unsigned char *)this + 672) && *((unsigned char *)this + 600))
  {
    double v134 = *((double *)this + 80);
    *((void *)this + 97) = *((void *)this + 81);
    double v135 = *((double *)this + 118);
    *((double *)this + 96) = v135 + v134;
    double v136 = *((double *)this + 82);
    *((void *)this + 99) = *((void *)this + 83);
    double v115 = v136 + v135;
    goto LABEL_39;
  }
LABEL_40:
  double v116 = a2->_glyphSize.width;
  if (v116 != *(double *)v6 || (double v117 = 0.0, a2->_glyphSize.height != *(double *)(v6 + 8)))
  {
    double v118 = a2->_scale;
    double v119 = v118 * v116;
    double v120 = floor(v119);
    double v121 = ceil(v119);
    if (v118 >= 1.0) {
      double v117 = v120;
    }
    else {
      double v117 = v121;
    }
  }
  double v122 = a3->_contentScale * a3->_scale;
  double v123 = round(v122 * a3->_horizontalMargin);
  double v124 = -0.0;
  if (!BYTE1(a3[1]._textSize)) {
    double v124 = v117;
  }
  double v125 = v123 + *((double *)this + 87) + v124;
  double v126 = *((double *)this + 88);
  double v127 = round(a3->_verticalMargin * v122);
  *((double *)this + 100) = v125;
  *((double *)this + 101) = v127 + v126;
  double v128 = a3->_contentScale * a3->_scale;
  double v129 = round(v128 * a3->_verticalMargin);
  double v130 = round(a3->_horizontalMargin * v128);
  double v131 = *((double *)this + 89) - v117 - (v130 + v130);
  double v132 = *((double *)this + 90) + v129 * -2.0;
  *((double *)this + 102) = v125;
  *((double *)this + 103) = v129 + v126;
  *((double *)this + 104) = v131;
  *((double *)this + 105) = v132;
  return this;
}

void sub_1A1F4E928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F4EFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initCMTimeGetSeconds(CMTime *a1)
{
  if (LoadCoreMedia(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5545);
  }
  softLinkCMTimeGetSeconds = (uint64_t (*)(CMTime *__struct_ptr))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMTimeGetSeconds");
  long long v3 = *(_OWORD *)&a1->value;
  CMTimeEpoch epoch = a1->epoch;
  return softLinkCMTimeGetSeconds((CMTime *)&v3);
}

void ___ZL13LoadCoreMediav_block_invoke()
{
  LoadCoreMedia(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreMedia.framework/CoreMedia", 2);
  if (!LoadCoreMedia(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/CoreMedia.framework/CoreMedia");
  }
}

uint64_t initCMClockGetHostTimeClock(void)
{
  if (LoadCoreMedia(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5545);
  }
  os_log_t v0 = (uint64_t (*)(void))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMClockGetHostTimeClock");
  softLinkCMClockGetHostTimeClocuint64_t k = v0;
  return v0();
}

uint64_t initCMClockGetTime(OpaqueCMClock *a1)
{
  if (LoadCoreMedia(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5545);
  }
  uint64_t v2 = (uint64_t (*)(OpaqueCMClock *))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMClockGetTime");
  softLinkCMClockGetTime = v2;
  return v2(a1);
}

void sub_1A1F4F560(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_1A1F4F9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F4FA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_48c31_ZTSKN3geo14RigidTransformIddEE104c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  long long v3 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  __n128 result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_1A1F4FB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F4FED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,id location)
{
  objc_destroyWeak(v41);
  objc_destroyWeak(v40);
  _Block_object_dispose(&a35, 8);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v42 - 232), 8);

  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__5555(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  double result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

void sub_1A1F506FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F50860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c46_ZTSKN3geo4UnitINS_21RadianUnitDescriptionEdEE72c46_ZTSKN3geo4UnitINS_21RadianUnitDescriptionEdEE80c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE136c45_ZTSN3geo4UnitINS_21RadianUnitDescriptionEdEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  double result = *(double *)(a2 + 136);
  *(double *)(a1 + 136) = result;
  return result;
}

void sub_1A1F50B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F51164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1F512BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initCMVideoFormatDescriptionGetDimensions(const opaqueCMFormatDescription *a1)
{
  if (LoadCoreMedia(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5545);
  }
  long long v2 = (uint64_t (*)(const opaqueCMFormatDescription *))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMVideoFormatDescriptionGetDimensions");
  softLinkCMVideoFormatDescriptionGetDimensions[0] = v2;
  return v2(a1);
}

void sub_1A1F51438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1F51B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A1F523FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKARCameraController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A1F525D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::NavLabel::NavLabel(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6)
{
  id v11 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EF553DB0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 25) = 1;
  *(unsigned char *)(a1 + 27) = 0;
  id v12 = v11;
  long long v13 = (const char *)[v12 UTF8String];
  {
    operator new();
  }
  uint64_t v14 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  size_t v15 = strlen(v13);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    double v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v18 + 1, 1);
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v19 | 0x8000000000000000;
    *(void *)(a1 + 32) = v17;
    goto LABEL_9;
  }
  double v17 = (void *)(a1 + 32);
  *(unsigned char *)(a1 + 55) = v15;
  if (v15) {
LABEL_9:
  }
    memmove(v17, v13, v16);
  *((unsigned char *)v17 + v16) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v20 = a3[1];
  *(void *)(a1 + 80) = *a3;
  *(void *)(a1 + 88) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(double *)(a1 + 112) = a4;
  *(double *)(a1 + 120) = a5;
  *(double *)(a1 + 128) = a6;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(void *)(a1 + 196) = 1065353216;
  *(_WORD *)(a1 + 204) = 256;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 251) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(unsigned char *)(a1 + 276) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 1056964608;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 314) = 0;
  *(_DWORD *)(a1 + 321) = 0;
  *(void *)(a1 + 298) = 0;
  *(void *)(a1 + 306) = 0;
  *(unsigned char *)(a1 + 325) = 1;
  *(void *)(a1 + 342) = 0;
  *(void *)(a1 + 326) = 0;
  *(void *)(a1 + 334) = 0;
  *(_WORD *)(a1 + 350) = 0;
  *(_WORD *)(a1 + 296) = 256;

  return a1;
}

void sub_1A1F52868(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);

  _Unwind_Resume(a1);
}

float md::NavRoadSignLabelPart::updateWithNavLabelStyle(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 != *(unsigned __int8 *)(a1 + 768))
  {
    *(unsigned char *)(a1 + 768) = v4;
    *(unsigned char *)(a1 + 565) = v4 != 0;
    if (v4) {
      operator new();
    }
    uint64_t v6 = *(void *)(a1 + 776);
    *(void *)(a1 + 776) = 0;
    if (v6) {
      MEMORY[0x1A6239270](v6, 0x1000C40AE2C30F4);
    }
  }
  float result = *(float *)(a2 + 4);
  *(float *)(a1 + 596) = result;
  return result;
}

void md::NavRoadSignLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 20;
  strcpy(a1, "NavRoadSignLabelPart");
}

uint64_t md::NavLabelPart::modelMatrix(md::NavLabelPart *this)
{
  return *((void *)this + 102);
}

uint64_t md::NavLabelPart::layoutForDisplay()
{
  return 0;
}

uint64_t md::NavLabelPart::layoutForStaging()
{
  return 0;
}

void md::NavRoadSignLabelPart::~NavRoadSignLabelPart(md::NavRoadSignLabelPart *this)
{
  *(void *)this = &unk_1EF531878;
  uint64_t v2 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  uint64_t v3 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40AE2C30F4);
  }
  md::IconLabelPart::~IconLabelPart(this);
  int v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    int v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v6) {
      operator new();
    }
  }
  long long v5 = *(void (**)(void))(**((void **)v4 + 91) + 40);
  v5();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF531878;
  uint64_t v2 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  uint64_t v3 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40AE2C30F4);
  }
  md::IconLabelPart::~IconLabelPart(this);
}

uint64_t std::__shared_ptr_emplace<md::RoadSignLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RoadSignLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5804F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RoadSignLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5804F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::DaVinci::GroundShadowMapPipelineState::~GroundShadowMapPipelineState(ggl::DaVinci::GroundShadowMapPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DaVinci::GroundShadowMapPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundShadowMapPipelineSetup *this)
{
  return 0;
}

BOOL ggl::DaVinci::GroundShadowMapPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundShadowMapPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 3:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 335);
      goto LABEL_6;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 341);
      goto LABEL_6;
    case 5:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 336);
LABEL_6:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::DaVinci::GroundShadowMapPipelineSetup::~GroundShadowMapPipelineSetup(ggl::DaVinci::GroundShadowMapPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::DaVinci::LinearDepthPipelineState::~LinearDepthPipelineState(ggl::DaVinci::LinearDepthPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DaVinci::LinearDepthPipelineSetup::textureIsEnabled(ggl::DaVinci::LinearDepthPipelineSetup *this)
{
  return 0;
}

BOOL ggl::DaVinci::LinearDepthPipelineSetup::constantDataIsEnabled(ggl::DaVinci::LinearDepthPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 3:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 335);
      goto LABEL_6;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 341);
      goto LABEL_6;
    case 5:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 336);
LABEL_6:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::DaVinci::LinearDepthPipelineSetup::~LinearDepthPipelineSetup(ggl::DaVinci::LinearDepthPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::DaVinci::PackedLinearDepthPipelineState::~PackedLinearDepthPipelineState(ggl::DaVinci::PackedLinearDepthPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DaVinci::PackedLinearDepthPipelineSetup::textureIsEnabled(ggl::DaVinci::PackedLinearDepthPipelineSetup *this)
{
  return 0;
}

BOOL ggl::DaVinci::PackedLinearDepthPipelineSetup::constantDataIsEnabled(ggl::DaVinci::PackedLinearDepthPipelineSetup *this, unint64_t a2)
{
  if (a2 < 3) {
    return 1;
  }
  if (a2 == 4)
  {
    int v3 = *(unsigned __int8 *)(*((void *)this + 2) + 336);
    return v3 != 0;
  }
  if (a2 == 3)
  {
    int v3 = *(unsigned __int8 *)(*((void *)this + 2) + 341);
    return v3 != 0;
  }
  return 0;
}

void ggl::DaVinci::PackedLinearDepthPipelineSetup::~PackedLinearDepthPipelineSetup(ggl::DaVinci::PackedLinearDepthPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 328);
}

void std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 168);
    uint64_t v4 = *(void *)(a1 + 160);
    if (v3 != v2)
    {
      do
        md::LabelLineZSet::~LabelLineZSet((md::LabelLineZSet *)(v3 - 112));
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 160);
    }
    *(void *)(a1 + 168) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 184) + 40))(*(void *)(a1 + 184), v4, *(void *)(a1 + 176) - v4);
  }
  long long v5 = *(void **)(a1 + 120);
  if (v5)
  {
    int v6 = *(void **)(a1 + 128);
    uint64_t v7 = *(void *)(a1 + 120);
    if (v6 != v5)
    {
      do
      {
        long long v9 = (md::LabelLineStore::WorkUnit *)*--v6;
        long long v8 = v9;
        *int v6 = 0;
        if (v9)
        {
          md::LabelLineStore::WorkUnit::~WorkUnit(v8);
          {
            operator new();
          }
          (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v8, 248);
        }
      }
      while (v6 != v5);
      uint64_t v7 = *(void *)(a1 + 120);
    }
    *(void *)(a1 + 128) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v7, *(void *)(a1 + 136) - v7);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  double v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void md::LabelLineZSet::~LabelLineZSet(md::LabelLineZSet *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 11);
    uint64_t v4 = *((void *)this + 10);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          mdm::TypeDeleter<md::LabelLine>::operator()(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 10);
    }
    *((void *)this + 11) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), v4, *((void *)this + 12) - v4);
  }
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    long long v8 = (void *)*((void *)this + 7);
    uint64_t v9 = *((void *)this + 6);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *long long v8 = 0;
        if (v11)
        {
          uint64_t v12 = *(void *)(v10 + 24);
          if (v12)
          {
            *(void *)(v10 + 32) = v12;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v10 + 48) + 40))(*(void *)(v10 + 48), v12, *(void *)(v10 + 40) - v12);
          }
          long long v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13) {
            std::__shared_weak_count::__release_weak(v13);
          }
          {
            operator new();
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v10, 64);
        }
      }
      while (v8 != v7);
      uint64_t v9 = *((void *)this + 6);
    }
    *((void *)this + 7) = v7;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 9) + 40))(*((void *)this + 9), v9, *((void *)this + 8) - v9);
  }
  uint64_t v14 = (void *)*((void *)this + 2);
  if (v14)
  {
    size_t v15 = (void *)*((void *)this + 3);
    uint64_t v16 = *((void *)this + 2);
    if (v15 != v14)
    {
      do
      {
        uint64_t v18 = *--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 8))(v17, v16);
        }
      }
      while (v15 != v14);
      uint64_t v16 = *((void *)this + 2);
    }
    *((void *)this + 3) = v14;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 40))(*((void *)this + 5), v16, *((void *)this + 4) - v16);
  }
}

void std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelLineStore,geo::StdAllocator<md::LabelLineStore,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(a1, a2, a3, a4, a6);
  result.n128_u64[0] = *(void *)(a5 + 8);
  double v12 = *(double *)(a4 + 8);
  if (result.n128_f64[0] == v12)
  {
    if (*(unsigned __int8 *)(a5 + 16) == *(unsigned __int8 *)(a4 + 16))
    {
      if (*(void *)a5 >= *(void *)a4) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a5 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v12)
  {
    return result;
  }
  __n128 result = *(__n128 *)a4;
  uint64_t v13 = *(void *)(a4 + 16);
  char v14 = *(unsigned char *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(unsigned char *)(a4 + 16) = v14;
  *(unsigned char *)(a5 + 16) = v13;
  *(__n128 *)a5 = result;
  result.n128_u64[0] = *(void *)(a4 + 8);
  double v15 = *(double *)(a3 + 8);
  if (result.n128_f64[0] == v15)
  {
    if (*(unsigned __int8 *)(a4 + 16) == *(unsigned __int8 *)(a3 + 16))
    {
      if (*(void *)a4 >= *(void *)a3) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a4 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v15)
  {
    return result;
  }
  __n128 result = *(__n128 *)a3;
  uint64_t v16 = *(void *)(a3 + 16);
  char v17 = *(unsigned char *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(unsigned char *)(a3 + 16) = v17;
  *(unsigned char *)(a4 + 16) = v16;
  *(__n128 *)a4 = result;
  result.n128_u64[0] = *(void *)(a3 + 8);
  double v18 = *(double *)(a2 + 8);
  if (result.n128_f64[0] == v18)
  {
    if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      if (*(void *)a3 >= *(void *)a2) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a3 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v18)
  {
    return result;
  }
  __n128 result = *(__n128 *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  char v20 = *(unsigned char *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(unsigned char *)(a2 + 16) = v20;
  *(unsigned char *)(a3 + 16) = v19;
  *(__n128 *)a3 = result;
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v21 = *(double *)(a1 + 8);
  if (result.n128_f64[0] == v21)
  {
    if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
    {
      if (*(void *)a2 >= *(void *)a1) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a2 + 16))
    {
      return result;
    }
  }
  else if (result.n128_f64[0] >= v21)
  {
    return result;
  }
  __n128 result = *(__n128 *)a1;
  uint64_t v22 = *(void *)(a1 + 16);
  char v23 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v23;
  *(unsigned char *)(a2 + 16) = v22;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<md::DaVinciGroundTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciGroundTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5811D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciGroundTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5811D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::InjectedFeaturesLayerDataSource::fallbackSettings(md::InjectedFeaturesLayerDataSource *this)
{
  return *((unsigned __int16 *)this + 300) | 0x10000u;
}

void md::InjectedFeaturesLayerDataSource::~InjectedFeaturesLayerDataSource(md::InjectedFeaturesLayerDataSource *this)
{
  md::InjectedFeaturesLayerDataSource::~InjectedFeaturesLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF54D220;
  uint64_t v2 = (void *)*((void *)this + 92);
  if (v2)
  {
    *((void *)this + 93) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 89);
  if (v3)
  {
    *((void *)this + 90) = v3;
    operator delete(v3);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 664);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 84));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 80));
  if (*((unsigned char *)this + 608)) {
    *((unsigned char *)this + 608) = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  gdc::LayerDataSource::~LayerDataSource(this);
}

void sub_1A1F53DD0(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 672));
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::ls::PassToCommandBuffers &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::operator()(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (*a2)
  {
    if (*a2 != 3) {
      return result;
    }
LABEL_6:
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void, void))(***(void ***)(v2 + 16) + 32))(**(void **)(v2 + 16), 3, 0, 0);
    __n128 result = (*(uint64_t (**)(void))(***(void ***)(v2 + 16) + 48))(**(void **)(v2 + 16));
    *(void *)(v5 + 32) = *(void *)(result + 2592);
    return result;
  }
  if (**(unsigned char **)(result + 8))
  {
    uint64_t v4 = (*(uint64_t (**)(void, void, void, void))(***(void ***)(result + 16) + 32))(**(void **)(result + 16), 0, 0, 0);
    __n128 result = (*(uint64_t (**)(void))(***(void ***)(v2 + 16) + 48))(**(void **)(v2 + 16));
    *(void *)(v4 + 32) = *(void *)(result + 2592);
    if (*a2 == 3) {
      goto LABEL_6;
    }
  }
  return result;
}

__n128 std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF520588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareShadowPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::~__func()
{
}

__n128 std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5202B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5202B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::~__func()
{
}

void md::Logic<md::ARAnimationLogic,md::ARAnimationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::CameraContext,md::LabelsExternalMeshContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    double v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void *md::ARAnimationLogic::runAfterLayout(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(int8x8_t **)(a1 + 120);
  uint64_t v3 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v2);
  uint64_t v4 = gdc::Registry::storage<arComponents::AnimationGroupParent>(v2);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = v4 + 32;
  uint64_t v8 = v3[7];
  uint64_t v7 = v3[8];
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= (unint64_t)(v7 - v8)) {
    char v9 = v3 + 4;
  }
  else {
    char v9 = (void *)(v4 + 32);
  }
  if (v3 + 4 == v9 && v8 != v7)
  {
    double v18 = (unint64_t *)v3[10];
    uint64_t v19 = (void *)(v1 + 128);
    do
    {
      unint64_t v20 = *(unsigned int *)(v8 + 4);
      uint64_t v21 = v5[4];
      if (v20 >> 7 < (v5[5] - v21) >> 3)
      {
        uint64_t v22 = *(void *)(v21 + 8 * (v20 >> 7));
        if (v22)
        {
          unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (v20 & 0x7F));
          uint64_t v25 = v5[7];
          uint64_t v24 = v5[8];
          if (v23 < (v24 - v25) >> 3)
          {
            uint64_t v26 = v25 + 8 * v23;
            if (v26 != v24 && *(_DWORD *)(v26 + 4) == v20)
            {
              long long v28 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v19, *v18);
              if (v28)
              {
                std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v19, v28);
                long long v29 = __p[0];
                if (__p[0])
                {
                  if (v64)
                  {
                    long long v61 = v19;
                    uint64_t v62 = v1;
                    long long v30 = (id *)*((void *)__p[0] + 5);
                    if (v30)
                    {
                      do
                      {
                        long long v31 = (id *)*v30;

                        operator delete(v30);
                        long long v30 = v31;
                      }
                      while (v31);
                    }
                    long long v32 = (void *)v29[3];
                    void v29[3] = 0;
                    uint64_t v19 = v61;
                    uint64_t v1 = v62;
                    if (v32) {
                      operator delete(v32);
                    }
                  }
                  operator delete(v29);
                }
              }
            }
          }
        }
      }
      v18 += 2;
      v8 += 8;
    }
    while (v8 != v7);
  }
  if ((void *)v6 == v9)
  {
    long long v33 = (unint64_t *)v5[7];
    long long v34 = (uint64_t *)v5[8];
    if (v33 != (unint64_t *)v34)
    {
      long long v35 = (void *)(v1 + 128);
      do
      {
        unint64_t v36 = *((unsigned int *)v33 + 1);
        uint64_t v37 = v3[4];
        unint64_t v38 = (v3[5] - v37) >> 3;
        if (v36 >> 7 < v38)
        {
          uint64_t v39 = *(void *)(v37 + 8 * (v36 >> 7));
          if (v39)
          {
            unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (v36 & 0x7F));
            uint64_t v42 = v3[7];
            uint64_t v41 = v3[8];
            unint64_t v43 = (v41 - v42) >> 3;
            if (v43 > v40)
            {
              uint64_t v44 = v42 + 8 * v40;
              if (v44 != v41 && *(_DWORD *)(v44 + 4) == v36)
              {
                if ((unint64_t v46 = *v33, v47 = *v33 >> 39, v47 < v38)
                  && (uint64_t v48 = *(void *)(v37 + 8 * v47)) != 0
                  && (unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v46) & 0x7F)), v43 > v49)
                  && ((unint64_t v50 = HIDWORD(v46), v51 = v42 + 8 * v49, v51 != v41)
                    ? (BOOL v52 = *(_DWORD *)(v51 + 4) == v50)
                    : (BOOL v52 = 0),
                      v52))
                {
                  long long v53 = (unint64_t *)(v3[10] + 16 * v49);
                }
                else
                {
                  long long v53 = (unint64_t *)v3[11];
                }
                long long v54 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v35, *v53);
                if (v54)
                {
                  uint64_t v55 = v1;
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v35, v54);
                  long long v56 = __p[0];
                  if (__p[0])
                  {
                    if (v64)
                    {
                      BOOL v57 = (id *)*((void *)__p[0] + 5);
                      if (v57)
                      {
                        do
                        {
                          long long v58 = (id *)*v57;

                          operator delete(v57);
                          BOOL v57 = v58;
                        }
                        while (v58);
                      }
                      long long v59 = (void *)v56[3];
                      v56[3] = 0;
                      if (v59) {
                        operator delete(v59);
                      }
                    }
                    operator delete(v56);
                  }
                  uint64_t v1 = v55;
                }
              }
            }
          }
        }
        ++v33;
      }
      while (v33 != (unint64_t *)v34);
    }
  }
  __n128 result = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(*(int8x8_t **)(v1 + 120));
  double v12 = result;
  if (result[29] && (uint64_t v13 = (void *)result[28]) != 0)
  {
    uint64_t v14 = result[31];
    double v15 = (void *)result[7];
    uint64_t v16 = (uint64_t)(result[8] - (void)v15) >> 3;
    while (1)
    {
      __p[0] = v15;
      __p[1] = (void *)v16;
      uint64_t v65 = v14;
      uint64_t v17 = v13[6];
      if (!v17) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)v17 + 48))(v17, &v65, __p);
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_15;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v60);
  }
  else
  {
LABEL_15:
    v12[8] = v12[7];
    v12[11] = v12[10];
  }
  return result;
}

uint64_t gdc::Registry::storage<arComponents::AnimationInfo>(int8x8_t *a1)
{
  uint64_t v10 = 0x6BC5598729A9856CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6BC5598729A9856CLL;
    if (*(void *)&v1 <= 0x6BC5598729A9856CuLL) {
      uint64_t v3 = 0x6BC5598729A9856CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6BC5598729A9856CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6BC5598729A9856CLL)
      {
        if (v5[2] == 0x6BC5598729A9856CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6BC5598729A9856CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6BC5598729A9856CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F54718(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationGroupParent>(int8x8_t *a1)
{
  uint64_t v10 = 0x16C9454C0C9AFF7BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x16C9454C0C9AFF7BLL;
    if (*(void *)&v1 <= 0x16C9454C0C9AFF7BuLL) {
      uint64_t v3 = 0x16C9454C0C9AFF7BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x16C9454C0C9AFF7BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x16C9454C0C9AFF7BLL)
      {
        if (v5[2] == 0x16C9454C0C9AFF7BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x16C9454C0C9AFF7BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x16C9454C0C9AFF7BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F54988(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(int8x8_t *a1)
{
  uint64_t v10 = 0x28062957AE7A638DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x28062957AE7A638DLL;
    if (*(void *)&v1 <= 0x28062957AE7A638DuLL) {
      uint64_t v3 = 0x28062957AE7A638DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x28062957AE7A638DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x28062957AE7A638DLL)
      {
        if (v5[2] == 0x28062957AE7A638DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x28062957AE7A638DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x28062957AE7A638DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F54BF8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)3>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AnimationGroupParent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(_OWORD *)(v13 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
          a1[11] -= 16;
          uint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              uint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

unint64_t md::ARAnimationLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *this, uint64_t a3)
{
  int v1532 = *(unsigned __int8 *)(*(void *)(a3 + 8) + 3776);
  double v4 = *(double *)(md::LayoutContext::frameState(this) + 88);
  uint64_t v5 = *(int8x8_t **)(a1 + 120);
  uint64_t v6 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v5);
  unint64_t v7 = (uint64_t *)v6[7];
  uint64_t v8 = (uint64_t *)v6[8];
  if (v7 != v8)
  {
    uint64_t v9 = (unint64_t *)v6[10];
    do
    {
      uint64_t v10 = *v7;
      unint64_t v11 = *v9;
      int v12 = (unsigned __int16)*v9;
      if (v5[5].u16[0] != v12
        || (int8x8_t v13 = v5[6], HIDWORD(v11) >= (unint64_t)((uint64_t)(*(void *)&v5[7] - *(void *)&v13) >> 3))
        || (uint64_t v14 = (unsigned __int16 *)(*(void *)&v13 + 8 * HIDWORD(v11)), *v14 != v12)
        || v14[1] != WORD1(v11)
        || *((_DWORD *)v14 + 1) != HIDWORD(v11))
      {
        uint64_t v15 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v5);
        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v15, v10);
      }
      v9 += 2;
      ++v7;
    }
    while (v7 != v8);
  }
  uint64_t v1533 = a1;
  uint64_t v16 = *(int8x8_t **)(a1 + 120);
  unint64_t v17 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(v16);
  unint64_t v18 = (void *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>(v16);
  uint64_t v19 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v16);
  unint64_t v20 = (void *)v19;
  uint64_t v21 = v19 + 32;
  uint64_t v23 = v17[7];
  uint64_t v22 = v17[8];
  if (v18[8] - v18[7] >= (unint64_t)(v22 - v23)) {
    uint64_t v24 = v17 + 4;
  }
  else {
    uint64_t v24 = v18 + 4;
  }
  if (*(void *)(v19 + 64) - *(void *)(v19 + 56) >= v24[4] - v24[3]) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = (void *)(v19 + 32);
  }
  if (v22 != v23 && v17 + 4 == v25)
  {
    float32x4_t v266 = (float *)(v17[10] + 8);
    do
    {
      unint64_t v267 = *(unsigned int *)(v23 + 4);
      unint64_t v268 = v267 >> 7;
      uint64_t v269 = v18[4];
      if (v267 >> 7 < (v18[5] - v269) >> 3)
      {
        uint64_t v270 = *(void *)(v269 + 8 * v268);
        if (v270)
        {
          unint64_t v271 = *(unsigned __int16 *)(v270 + 2 * (v267 & 0x7F));
          uint64_t v273 = v18[7];
          uint64_t v272 = v18[8];
          if (v271 < (v272 - v273) >> 3)
          {
            uint64_t v274 = v273 + 8 * v271;
            if (v274 != v272 && *(_DWORD *)(v274 + 4) == v267)
            {
              uint64_t v276 = v20[4];
              if (v268 < (v20[5] - v276) >> 3)
              {
                uint64_t v277 = *(void *)(v276 + 8 * v268);
                if (v277)
                {
                  unint64_t v278 = *(unsigned __int16 *)(v277 + 2 * (v267 & 0x7F));
                  uint64_t v280 = v20[7];
                  uint64_t v279 = v20[8];
                  if (v278 < (v279 - v280) >> 3)
                  {
                    uint64_t v281 = v280 + 8 * v278;
                    BOOL v282 = v281 != v279 && *(_DWORD *)(v281 + 4) == v267;
                    if (v282 && fabsf(*v266 + -1.0) <= 0.000001)
                    {
                      v1550 = *(gdc::Registry **)v23;
                      int v283 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v16);
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v283, (uint64_t)v1550);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v23 += 8;
      v266 += 6;
    }
    while (v23 != v22);
  }
  if (v18 + 4 == v25)
  {
    uint64_t v284 = v18[7];
    for (uint64_t i = v18[8]; v284 != i; v284 += 8)
    {
      unint64_t v286 = *(unsigned int *)(v284 + 4);
      unint64_t v287 = v286 >> 7;
      uint64_t v288 = v17[4];
      unint64_t v289 = (v17[5] - v288) >> 3;
      if (v286 >> 7 < v289)
      {
        uint64_t v290 = *(void *)(v288 + 8 * v287);
        if (v290)
        {
          unint64_t v291 = *(unsigned __int16 *)(v290 + 2 * (v286 & 0x7F));
          uint64_t v293 = v17[7];
          uint64_t v292 = v17[8];
          unint64_t v294 = (v292 - v293) >> 3;
          if (v294 > v291)
          {
            uint64_t v295 = v293 + 8 * v291;
            if (v295 != v292 && *(_DWORD *)(v295 + 4) == v286)
            {
              uint64_t v297 = v20[4];
              if (v287 < (v20[5] - v297) >> 3)
              {
                uint64_t v298 = *(void *)(v297 + 8 * v287);
                if (v298)
                {
                  unint64_t v299 = *(unsigned __int16 *)(v298 + 2 * (v286 & 0x7F));
                  uint64_t v301 = v20[7];
                  uint64_t v300 = v20[8];
                  if (v299 < (v300 - v301) >> 3)
                  {
                    uint64_t v302 = v301 + 8 * v299;
                    if (v302 != v300 && *(_DWORD *)(v302 + 4) == v286)
                    {
                      if ((v304 = *(void *)v284, unint64_t v305 = *(void *)v284 >> 39, v305 < v289)
                        && (uint64_t v306 = *(void *)(v288 + 8 * v305)) != 0
                        && (unint64_t v307 = *(unsigned __int16 *)(v306 + 2 * (HIDWORD(v304) & 0x7F)), v294 > v307)
                        && ((uint64_t v308 = v293 + 8 * v307, v308 != v292)
                          ? (BOOL v309 = *(_DWORD *)(v308 + 4) == HIDWORD(v304))
                          : (BOOL v309 = 0),
                            v309))
                      {
                        uint64_t v310 = v17[10] + 24 * v307;
                      }
                      else
                      {
                        uint64_t v310 = v17[11];
                      }
                      if (fabsf(*(float *)(v310 + 8) + -1.0) <= 0.000001)
                      {
                        long long v311 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v16);
                        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v311, v304);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((void *)v21 == v25)
  {
    uint64_t v312 = v20[7];
    for (uint64_t j = v20[8]; v312 != j; v312 += 8)
    {
      unint64_t v314 = *(unsigned int *)(v312 + 4);
      unint64_t v315 = v314 >> 7;
      uint64_t v316 = v17[4];
      unint64_t v317 = (v17[5] - v316) >> 3;
      if (v314 >> 7 < v317)
      {
        uint64_t v318 = *(void *)(v316 + 8 * v315);
        if (v318)
        {
          unint64_t v319 = *(unsigned __int16 *)(v318 + 2 * (v314 & 0x7F));
          uint64_t v321 = v17[7];
          uint64_t v320 = v17[8];
          unint64_t v322 = (v320 - v321) >> 3;
          if (v322 > v319)
          {
            uint64_t v323 = v321 + 8 * v319;
            if (v323 != v320 && *(_DWORD *)(v323 + 4) == v314)
            {
              uint64_t v325 = v18[4];
              if (v315 < (v18[5] - v325) >> 3)
              {
                uint64_t v326 = *(void *)(v325 + 8 * v315);
                if (v326)
                {
                  unint64_t v327 = *(unsigned __int16 *)(v326 + 2 * (v314 & 0x7F));
                  uint64_t v329 = v18[7];
                  uint64_t v328 = v18[8];
                  if (v327 < (v328 - v329) >> 3)
                  {
                    uint64_t v330 = v329 + 8 * v327;
                    if (v330 != v328 && *(_DWORD *)(v330 + 4) == v314)
                    {
                      if ((unint64_t v332 = *(void *)v312, v333 = *(void *)v312 >> 39, v333 < v317)
                        && (uint64_t v334 = *(void *)(v316 + 8 * v333)) != 0
                        && (unint64_t v335 = *(unsigned __int16 *)(v334 + 2 * (HIDWORD(v332) & 0x7F)), v322 > v335)
                        && ((uint64_t v336 = v321 + 8 * v335, v336 != v320)
                          ? (BOOL v337 = *(_DWORD *)(v336 + 4) == HIDWORD(v332))
                          : (BOOL v337 = 0),
                            v337))
                      {
                        uint64_t v338 = v17[10] + 24 * v335;
                      }
                      else
                      {
                        uint64_t v338 = v17[11];
                      }
                      if (fabsf(*(float *)(v338 + 8) + -1.0) <= 0.000001)
                      {
                        unint64_t v339 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v16);
                        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v339, v332);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v1561[0] = *(int8x8_t **)(v1533 + 120);
  uint64_t v1558 = 0;
  v1559 = 0;
  uint64_t v1560 = 0;
  long long v27 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v1561[0]);
  uint64_t v28 = gdc::Registry::storage<arComponents::AnimationInfo>(v1561[0]);
  long long v29 = (void *)v28;
  uint64_t v30 = v28 + 32;
  uint64_t v32 = v27[7];
  uint64_t v31 = v27[8];
  if (*(void *)(v28 + 64) - *(void *)(v28 + 56) >= (unint64_t)(v31 - v32)) {
    long long v33 = v27 + 4;
  }
  else {
    long long v33 = (void *)(v28 + 32);
  }
  if (v27 + 4 == v33)
  {
    *(void *)&long long v1562 = v1533 + 128;
    *((void *)&v1562 + 1) = v1561;
    v1563 = &v1558;
    while (v32 != v31)
    {
      unint64_t v341 = *(unsigned int *)(v32 + 4);
      uint64_t v342 = v29[4];
      unint64_t v343 = (v29[5] - v342) >> 3;
      if (v341 >> 7 < v343)
      {
        uint64_t v344 = *(void *)(v342 + 8 * (v341 >> 7));
        if (v344)
        {
          unint64_t v345 = *(unsigned __int16 *)(v344 + 2 * (v341 & 0x7F));
          uint64_t v347 = v29[7];
          uint64_t v346 = v29[8];
          unint64_t v348 = (v346 - v347) >> 3;
          if (v348 > v345)
          {
            uint64_t v349 = v347 + 8 * v345;
            if (v349 != v346 && *(_DWORD *)(v349 + 4) == v341)
            {
              unint64_t v351 = *(void *)v32;
              unint64_t v352 = *(void *)v32 >> 39;
              if (v352 < v343
                && (uint64_t v353 = *(void *)(v342 + 8 * v352)) != 0
                && (unint64_t v354 = *(unsigned __int16 *)(v353 + 2 * (HIDWORD(v351) & 0x7F)), v348 > v354)
                && ((uint64_t v355 = v347 + 8 * v354, v355 != v346)
                  ? (BOOL v356 = *(_DWORD *)(v355 + 4) == HIDWORD(v351))
                  : (BOOL v356 = 0),
                    v356))
              {
                uint64_t v340 = v29[10] + 16 * v354;
              }
              else
              {
                uint64_t v340 = v29[11];
              }
              stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t)&v1562, v351, *(void *)v340, *(void *)(v340 + 8));
            }
          }
        }
      }
      v32 += 8;
    }
  }
  if ((void *)v30 == v33)
  {
    *(void *)&long long v1562 = v1533 + 128;
    *((void *)&v1562 + 1) = v1561;
    v1563 = &v1558;
    uint64_t v357 = v29[7];
    uint64_t v358 = v29[8];
    if (v357 != v358)
    {
      uint64_t v359 = (uint64_t *)(v29[10] + 8);
      do
      {
        unint64_t v360 = *(unsigned int *)(v357 + 4);
        uint64_t v361 = v27[4];
        if (v360 >> 7 < (v27[5] - v361) >> 3)
        {
          uint64_t v362 = *(void *)(v361 + 8 * (v360 >> 7));
          if (v362)
          {
            unint64_t v363 = *(unsigned __int16 *)(v362 + 2 * (v360 & 0x7F));
            uint64_t v365 = v27[7];
            uint64_t v364 = v27[8];
            if (v363 < (v364 - v365) >> 3)
            {
              uint64_t v366 = v365 + 8 * v363;
              if (v366 != v364 && *(_DWORD *)(v366 + 4) == v360) {
                stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((uint64_t)&v1562, *(void *)v357, *(v359 - 1), *v359);
              }
            }
          }
        }
        v357 += 8;
        v359 += 2;
      }
      while (v357 != v358);
    }
  }
  long long v34 = v1561[0];
  long long v35 = (unint64_t *)v1558;
  unint64_t v36 = v1559;
  if ((unint64_t *)v1558 != v1559)
  {
    do
    {
      uint64_t v37 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v34);
      gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(v37, *v35++);
    }
    while (v35 != v36);
    long long v34 = v1561[0];
    long long v35 = (unint64_t *)v1558;
    unint64_t v38 = v1559;
    if ((unint64_t *)v1558 != v1559)
    {
      do
      {
        uint64_t v39 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(v34);
        gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::remove(v39, *v35++);
      }
      while (v35 != v38);
      long long v34 = v1561[0];
      long long v35 = (unint64_t *)v1558;
      unint64_t v40 = v1559;
      if ((unint64_t *)v1558 != v1559)
      {
        do
        {
          uint64_t v41 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v34);
          gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::remove(v41, *v35++);
        }
        while (v35 != v40);
        long long v35 = (unint64_t *)v1558;
        long long v34 = v1561[0];
      }
    }
  }
  v1559 = v35;
  uint64_t v42 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>(v34);
  uint64_t v43 = gdc::Registry::storage<arComponents::AnimationInfo>(v34);
  uint64_t v44 = (void *)v43;
  uint64_t v45 = v43 + 32;
  uint64_t v47 = v42[7];
  uint64_t v46 = v42[8];
  if (*(void *)(v43 + 64) - *(void *)(v43 + 56) >= (unint64_t)(v46 - v47)) {
    uint64_t v48 = v42 + 4;
  }
  else {
    uint64_t v48 = (void *)(v43 + 32);
  }
  if (v42 + 4 == v48)
  {
    *(void *)&long long v1562 = v1533 + 128;
    *((void *)&v1562 + 1) = v1561;
    v1563 = &v1558;
    while (v47 != v46)
    {
      unint64_t v369 = *(unsigned int *)(v47 + 4);
      uint64_t v370 = v44[4];
      unint64_t v371 = (v44[5] - v370) >> 3;
      if (v369 >> 7 < v371)
      {
        uint64_t v372 = *(void *)(v370 + 8 * (v369 >> 7));
        if (v372)
        {
          unint64_t v373 = *(unsigned __int16 *)(v372 + 2 * (v369 & 0x7F));
          uint64_t v375 = v44[7];
          uint64_t v374 = v44[8];
          unint64_t v376 = (v374 - v375) >> 3;
          if (v376 > v373)
          {
            uint64_t v377 = v375 + 8 * v373;
            if (v377 != v374 && *(_DWORD *)(v377 + 4) == v369)
            {
              unint64_t v379 = *(void *)v47;
              unint64_t v380 = *(void *)v47 >> 39;
              if (v380 < v371
                && (uint64_t v381 = *(void *)(v370 + 8 * v380)) != 0
                && (unint64_t v382 = *(unsigned __int16 *)(v381 + 2 * (HIDWORD(v379) & 0x7F)), v376 > v382)
                && ((uint64_t v383 = v375 + 8 * v382, v383 != v374)
                  ? (BOOL v384 = *(_DWORD *)(v383 + 4) == HIDWORD(v379))
                  : (BOOL v384 = 0),
                    v384))
              {
                uint64_t v368 = v44[10] + 16 * v382;
              }
              else
              {
                uint64_t v368 = v44[11];
              }
              stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1562, v379, *(void *)v368, *(void *)(v368 + 8));
            }
          }
        }
      }
      v47 += 8;
    }
  }
  if ((void *)v45 == v48)
  {
    *(void *)&long long v1562 = v1533 + 128;
    *((void *)&v1562 + 1) = v1561;
    v1563 = &v1558;
    uint64_t v385 = v44[7];
    uint64_t v386 = v44[8];
    if (v385 != v386)
    {
      unint64_t v387 = (uint64_t *)(v44[10] + 8);
      do
      {
        unint64_t v388 = *(unsigned int *)(v385 + 4);
        uint64_t v389 = v42[4];
        if (v388 >> 7 < (v42[5] - v389) >> 3)
        {
          uint64_t v390 = *(void *)(v389 + 8 * (v388 >> 7));
          if (v390)
          {
            unint64_t v391 = *(unsigned __int16 *)(v390 + 2 * (v388 & 0x7F));
            uint64_t v393 = v42[7];
            uint64_t v392 = v42[8];
            if (v391 < (v392 - v393) >> 3)
            {
              uint64_t v394 = v393 + 8 * v391;
              if (v394 != v392 && *(_DWORD *)(v394 + 4) == v388) {
                stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1562, *(void *)v385, *(v387 - 1), *v387);
              }
            }
          }
        }
        v385 += 8;
        v387 += 2;
      }
      while (v385 != v386);
    }
  }
  unint64_t v50 = (unint64_t *)v1558;
  unint64_t v49 = v1559;
  if ((unint64_t *)v1558 != v1559)
  {
    uint64_t v51 = v1561[0];
    do
    {
      BOOL v52 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v51);
      gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(v52, *v50++);
    }
    while (v50 != v49);
    unint64_t v50 = (unint64_t *)v1558;
    long long v53 = v1559;
    if ((unint64_t *)v1558 != v1559)
    {
      long long v54 = v1561[0];
      do
      {
        uint64_t v55 = (void *)gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>(v54);
        gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>::remove(v55, *v50++);
      }
      while (v50 != v53);
      unint64_t v50 = (unint64_t *)v1558;
      long long v56 = v1559;
      if ((unint64_t *)v1558 != v1559)
      {
        BOOL v57 = v1561[0];
        do
        {
          long long v58 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v57);
          gdc::ComponentStorageWrapper<arComponents::AnimationInfo>::remove(v58, *v50++);
        }
        while (v50 != v56);
        unint64_t v50 = (unint64_t *)v1558;
      }
    }
  }
  if (v50)
  {
    v1559 = v50;
    operator delete(v50);
  }
  long long v59 = *(int8x8_t **)(v1533 + 120);
  JumpAndRotate = (void *)gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>(v59);
  long long v61 = (int8x8_t **)JumpAndRotate[7];
  if (v61 != (int8x8_t **)JumpAndRotate[8])
  {
    v1534 = (_DWORD *)JumpAndRotate[10];
    v1535 = *v61;
    *(void *)operator new(8uLL) = v1535;
    v1561[0] = v1535;
    v1561[1] = (int8x8_t *)0xFFFFFFFFLL;
    LODWORD(v1562) = *v1534;
    *(void *)((char *)&v1562 + 4) = 0;
    v1563 = (uint64_t *)MEMORY[0x1A6239EB0](VKAnimationCurveLinear);
    gdc::Registry::create((gdc::Registry *)v59);
  }
  uint64_t v62 = *(int8x8_t **)(v1533 + 120);
  double v63 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(v62);
  char v64 = (void *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>(v62);
  uint64_t v65 = (void *)gdc::Registry::storage<arComponents::TimeBasedStart>(v62);
  v1548 = (gdc::Registry *)v62;
  uint64_t v66 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v62);
  long long v67 = (void *)v66;
  long long v68 = (void *)(v66 + 32);
  uint64_t v69 = v63[7];
  uint64_t v70 = v63[8];
  if (v64[8] - v64[7] >= (unint64_t)(v70 - v69)) {
    double v71 = v63 + 4;
  }
  else {
    double v71 = v64 + 4;
  }
  if (v65[8] - v65[7] < v71[4] - v71[3]) {
    double v71 = v65 + 4;
  }
  if (*(void *)(v66 + 64) - *(void *)(v66 + 56) >= v71[4] - v71[3]) {
    double v72 = v71;
  }
  else {
    double v72 = (void *)(v66 + 32);
  }
  if (v70 != v69 && v63 + 4 == v72)
  {
    double v73 = (float *)(v63[10] + 4);
    do
    {
      unint64_t v74 = *(unsigned int *)(v69 + 4);
      unint64_t v75 = v74 >> 7;
      uint64_t v76 = v64[4];
      unint64_t v77 = (v64[5] - v76) >> 3;
      if (v74 >> 7 < v77)
      {
        uint64_t v78 = *(void *)(v76 + 8 * v75);
        if (v78)
        {
          uint64_t v79 = v74 & 0x7F;
          unint64_t v80 = *(unsigned __int16 *)(v78 + 2 * v79);
          uint64_t v82 = v64[7];
          uint64_t v81 = v64[8];
          unint64_t v83 = (v81 - v82) >> 3;
          if (v83 > v80)
          {
            uint64_t v84 = v82 + 8 * v80;
            if (v84 != v81 && *(_DWORD *)(v84 + 4) == v74)
            {
              uint64_t v86 = v65[4];
              if (v75 < (v65[5] - v86) >> 3)
              {
                uint64_t v87 = *(void *)(v86 + 8 * v75);
                if (v87)
                {
                  unint64_t v88 = *(unsigned __int16 *)(v87 + 2 * v79);
                  uint64_t v89 = v65[7];
                  uint64_t v90 = v65[8];
                  if (v88 < (v90 - v89) >> 3)
                  {
                    uint64_t v91 = v89 + 8 * v88;
                    if (v91 != v90 && *(_DWORD *)(v91 + 4) == v74)
                    {
                      uint64_t v93 = v67[4];
                      if (v75 < (v67[5] - v93) >> 3)
                      {
                        uint64_t v94 = *(void *)(v93 + 8 * v75);
                        if (v94)
                        {
                          unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * v79);
                          uint64_t v97 = v67[7];
                          uint64_t v96 = v67[8];
                          if (v95 < (v96 - v97) >> 3)
                          {
                            uint64_t v98 = v97 + 8 * v95;
                            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v74)
                            {
                              unint64_t v100 = *(void *)v69;
                              unint64_t v101 = *(void *)v69 >> 39;
                              std::string __p = v68;
                              uint64_t v1536 = *(void *)v69;
                              if (v101 < v77
                                && (uint64_t v102 = *(void *)(v76 + 8 * v101)) != 0
                                && (unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * (HIDWORD(v100) & 0x7F)), v83 > v103)
                                && (uint64_t v104 = v82 + 8 * v103, v104 != v81)
                                && *(_DWORD *)(v104 + 4) == HIDWORD(v100))
                              {
                                double v105 = (unint64_t *)(v64[10] + 8 * v103);
                              }
                              else
                              {
                                double v105 = (unint64_t *)v64[11];
                              }
                              unint64_t v1539 = *v105;
                              uint64_t v106 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>((int8x8_t *)v1548);
                              uint64_t v107 = v106[4];
                              if (v1539 >> 39 < (v106[5] - v107) >> 3
                                && (uint64_t v108 = *(void *)(v107 + 8 * (v1539 >> 39))) != 0
                                && (unint64_t v109 = *(unsigned __int16 *)(v108 + 2 * (HIDWORD(v1539) & 0x7F)),
                                    uint64_t v111 = v106[7],
                                    uint64_t v110 = v106[8],
                                    v109 < (v110 - v111) >> 3)
                                && (uint64_t v112 = v111 + 8 * v109, v112 != v110)
                                && *(_DWORD *)(v112 + 4) == HIDWORD(v1539))
                              {
                                double v113 = (float *)v106[11];
                                double v114 = (float *)(v106[10] + 24 * v109);
                              }
                              else
                              {
                                double v113 = (float *)v106[11];
                                double v114 = v113;
                              }
                              long long v68 = __p;
                              if (v114 == v113) {
                                double v114 = 0;
                              }
                              if ((float)(*v114 * v114[2]) >= *v73)
                              {
                                started = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(started, v1536);
                                long long v68 = __p;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v69 += 8;
      v73 += 6;
    }
    while (v69 != v70);
  }
  if (v64 + 4 == v72)
  {
    uint64_t v396 = v64[7];
    uint64_t v397 = v64[8];
    if (v396 != v397)
    {
      unint64_t v398 = (unint64_t *)v64[10];
      do
      {
        unint64_t v399 = *(unsigned int *)(v396 + 4);
        unint64_t v400 = v399 >> 7;
        uint64_t v401 = v63[4];
        unint64_t v402 = (v63[5] - v401) >> 3;
        if (v399 >> 7 < v402)
        {
          uint64_t v403 = *(void *)(v401 + 8 * v400);
          if (v403)
          {
            uint64_t v404 = v399 & 0x7F;
            unint64_t v405 = *(unsigned __int16 *)(v403 + 2 * v404);
            uint64_t v407 = v63[7];
            uint64_t v406 = v63[8];
            unint64_t v408 = (v406 - v407) >> 3;
            if (v408 > v405)
            {
              uint64_t v409 = v407 + 8 * v405;
              if (v409 != v406 && *(_DWORD *)(v409 + 4) == v399)
              {
                uint64_t v411 = v65[4];
                if (v400 < (v65[5] - v411) >> 3)
                {
                  uint64_t v412 = *(void *)(v411 + 8 * v400);
                  if (v412)
                  {
                    unint64_t v413 = *(unsigned __int16 *)(v412 + 2 * v404);
                    uint64_t v414 = v65[7];
                    uint64_t v415 = v65[8];
                    if (v413 < (v415 - v414) >> 3)
                    {
                      uint64_t v416 = v414 + 8 * v413;
                      if (v416 != v415 && *(_DWORD *)(v416 + 4) == v399)
                      {
                        uint64_t v418 = v67[4];
                        if (v400 < (v67[5] - v418) >> 3)
                        {
                          uint64_t v419 = *(void *)(v418 + 8 * v400);
                          if (v419)
                          {
                            unint64_t v420 = *(unsigned __int16 *)(v419 + 2 * v404);
                            uint64_t v422 = v67[7];
                            uint64_t v421 = v67[8];
                            if (v420 < (v421 - v422) >> 3)
                            {
                              uint64_t v423 = v422 + 8 * v420;
                              if (v423 != v421 && *(_DWORD *)(v423 + 4) == v399)
                              {
                                unint64_t v425 = *(void *)v396;
                                unint64_t v426 = *(void *)v396 >> 39;
                                __pb = v68;
                                uint64_t v1537 = *(void *)v396;
                                if (v426 < v402
                                  && (uint64_t v427 = *(void *)(v401 + 8 * v426)) != 0
                                  && (unint64_t v428 = *(unsigned __int16 *)(v427 + 2 * (HIDWORD(v425) & 0x7F)), v408 > v428)
                                  && (uint64_t v429 = v407 + 8 * v428, v429 != v406)
                                  && *(_DWORD *)(v429 + 4) == HIDWORD(v425))
                                {
                                  uint64_t v430 = v63[10] + 24 * v428;
                                }
                                else
                                {
                                  uint64_t v430 = v63[11];
                                }
                                uint64_t v1541 = v430;
                                unint64_t v431 = *v398;
                                v432 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>((int8x8_t *)v1548);
                                uint64_t v433 = v432[4];
                                if (v431 >> 39 < (v432[5] - v433) >> 3
                                  && (uint64_t v434 = *(void *)(v433 + 8 * (v431 >> 39))) != 0
                                  && (unint64_t v435 = *(unsigned __int16 *)(v434 + 2 * (HIDWORD(v431) & 0x7F)),
                                      uint64_t v437 = v432[7],
                                      uint64_t v436 = v432[8],
                                      v435 < (v436 - v437) >> 3)
                                  && (uint64_t v438 = v437 + 8 * v435, v438 != v436)
                                  && *(_DWORD *)(v438 + 4) == HIDWORD(v431))
                                {
                                  uint64_t v439 = (float *)v432[11];
                                  unint64_t v440 = (float *)(v432[10] + 24 * v435);
                                  long long v68 = __pb;
                                }
                                else
                                {
                                  uint64_t v439 = (float *)v432[11];
                                  unint64_t v440 = v439;
                                  long long v68 = __pb;
                                }
                                if (v440 == v439) {
                                  unint64_t v440 = 0;
                                }
                                if ((float)(*v440 * v440[2]) >= *(float *)(v1541 + 4))
                                {
                                  unint64_t v441 = v68;
                                  unint64_t v442 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v442, v1537);
                                  long long v68 = v441;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v398;
        v396 += 8;
      }
      while (v396 != v397);
    }
  }
  if (v65 + 4 == v72)
  {
    uint64_t v443 = v65[7];
    for (uint64_t k = v65[8]; v443 != k; v443 += 8)
    {
      unint64_t v445 = *(unsigned int *)(v443 + 4);
      unint64_t v446 = v445 >> 7;
      uint64_t v447 = v63[4];
      unint64_t v448 = (v63[5] - v447) >> 3;
      if (v445 >> 7 < v448)
      {
        uint64_t v449 = *(void *)(v447 + 8 * v446);
        if (v449)
        {
          uint64_t v450 = v445 & 0x7F;
          unint64_t v451 = *(unsigned __int16 *)(v449 + 2 * v450);
          uint64_t v453 = v63[7];
          uint64_t v452 = v63[8];
          unint64_t v454 = (v452 - v453) >> 3;
          if (v454 > v451)
          {
            uint64_t v455 = v453 + 8 * v451;
            if (v455 != v452 && *(_DWORD *)(v455 + 4) == v445)
            {
              uint64_t v457 = v64[4];
              unint64_t v458 = (v64[5] - v457) >> 3;
              if (v446 < v458)
              {
                uint64_t v459 = *(void *)(v457 + 8 * v446);
                if (v459)
                {
                  unint64_t v460 = *(unsigned __int16 *)(v459 + 2 * v450);
                  uint64_t v462 = v64[7];
                  uint64_t v461 = v64[8];
                  unint64_t v463 = (v461 - v462) >> 3;
                  if (v463 > v460)
                  {
                    uint64_t v464 = v462 + 8 * v460;
                    if (v464 != v461 && *(_DWORD *)(v464 + 4) == v445)
                    {
                      uint64_t v466 = v67[4];
                      if (v446 < (v67[5] - v466) >> 3)
                      {
                        uint64_t v467 = *(void *)(v466 + 8 * v446);
                        if (v467)
                        {
                          unint64_t v468 = *(unsigned __int16 *)(v467 + 2 * v450);
                          uint64_t v470 = v67[7];
                          uint64_t v469 = v67[8];
                          if (v468 < (v469 - v470) >> 3)
                          {
                            uint64_t v471 = v470 + 8 * v468;
                            if (v471 != v469 && *(_DWORD *)(v471 + 4) == v445)
                            {
                              unint64_t v473 = *(void *)v443;
                              uint64_t v474 = HIDWORD(*(void *)v443);
                              unint64_t v475 = *(void *)v443 >> 39;
                              if (v475 < v448
                                && (uint64_t v476 = *(void *)(v447 + 8 * v475)) != 0
                                && (unint64_t v477 = *(unsigned __int16 *)(v476 + 2 * (HIDWORD(v473) & 0x7F)), v454 > v477)
                                && (uint64_t v478 = v453 + 8 * v477, v478 != v452)
                                && *(_DWORD *)(v478 + 4) == v474)
                              {
                                uint64_t v479 = v63[10] + 24 * v477;
                              }
                              else
                              {
                                uint64_t v479 = v63[11];
                              }
                              uint64_t v1538 = *(void *)v443;
                              uint64_t v1542 = v479;
                              if (v475 < v458
                                && (uint64_t v480 = *(void *)(v457 + 8 * v475)) != 0
                                && (unint64_t v481 = *(unsigned __int16 *)(v480 + 2 * (HIDWORD(v473) & 0x7F)), v463 > v481)
                                && (uint64_t v482 = v462 + 8 * v481, v482 != v461)
                                && *(_DWORD *)(v482 + 4) == v474)
                              {
                                v483 = v68;
                                v484 = (unint64_t *)(v64[10] + 8 * v481);
                              }
                              else
                              {
                                v483 = v68;
                                v484 = (unint64_t *)v64[11];
                              }
                              unint64_t v485 = *v484;
                              uint64_t v486 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>((int8x8_t *)v1548);
                              uint64_t v487 = v486[4];
                              if (v485 >> 39 < (v486[5] - v487) >> 3
                                && (uint64_t v488 = *(void *)(v487 + 8 * (v485 >> 39))) != 0
                                && (unint64_t v489 = *(unsigned __int16 *)(v488 + 2 * (HIDWORD(v485) & 0x7F)),
                                    uint64_t v491 = v486[7],
                                    uint64_t v490 = v486[8],
                                    v489 < (v490 - v491) >> 3)
                                && (uint64_t v492 = v491 + 8 * v489, v492 != v490)
                                && *(_DWORD *)(v492 + 4) == HIDWORD(v485))
                              {
                                uint64_t v493 = (float *)v486[11];
                                uint64_t v494 = (float *)(v486[10] + 24 * v489);
                              }
                              else
                              {
                                uint64_t v493 = (float *)v486[11];
                                uint64_t v494 = v493;
                              }
                              long long v68 = v483;
                              if (v494 == v493) {
                                uint64_t v494 = 0;
                              }
                              if ((float)(*v494 * v494[2]) >= *(float *)(v1542 + 4))
                              {
                                v495 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v495, v1538);
                                long long v68 = v483;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v68 == v72)
  {
    uint64_t v496 = v67[7];
    for (uint64_t m = v67[8]; v496 != m; v496 += 8)
    {
      unint64_t v498 = *(unsigned int *)(v496 + 4);
      unint64_t v499 = v498 >> 7;
      uint64_t v500 = v63[4];
      unint64_t v501 = (v63[5] - v500) >> 3;
      if (v498 >> 7 < v501)
      {
        uint64_t v502 = *(void *)(v500 + 8 * v499);
        if (v502)
        {
          uint64_t v503 = v498 & 0x7F;
          unint64_t v504 = *(unsigned __int16 *)(v502 + 2 * v503);
          uint64_t v506 = v63[7];
          uint64_t v505 = v63[8];
          unint64_t v507 = (v505 - v506) >> 3;
          if (v507 > v504)
          {
            uint64_t v508 = v506 + 8 * v504;
            if (v508 != v505 && *(_DWORD *)(v508 + 4) == v498)
            {
              uint64_t v510 = v64[4];
              unint64_t v511 = (v64[5] - v510) >> 3;
              if (v499 < v511)
              {
                uint64_t v512 = *(void *)(v510 + 8 * v499);
                if (v512)
                {
                  unint64_t v513 = *(unsigned __int16 *)(v512 + 2 * v503);
                  uint64_t v515 = v64[7];
                  uint64_t v514 = v64[8];
                  unint64_t v516 = (v514 - v515) >> 3;
                  if (v516 > v513)
                  {
                    uint64_t v517 = v515 + 8 * v513;
                    if (v517 != v514 && *(_DWORD *)(v517 + 4) == v498)
                    {
                      uint64_t v519 = v65[4];
                      if (v499 < (v65[5] - v519) >> 3)
                      {
                        uint64_t v520 = *(void *)(v519 + 8 * v499);
                        if (v520)
                        {
                          unint64_t v521 = *(unsigned __int16 *)(v520 + 2 * v503);
                          uint64_t v523 = v65[7];
                          uint64_t v522 = v65[8];
                          if (v521 < (v522 - v523) >> 3)
                          {
                            uint64_t v524 = v523 + 8 * v521;
                            if (v524 != v522 && *(_DWORD *)(v524 + 4) == v498)
                            {
                              unint64_t v526 = *(void *)v496;
                              uint64_t v527 = HIDWORD(*(void *)v496);
                              unint64_t v528 = *(void *)v496 >> 39;
                              if (v528 < v501
                                && (uint64_t v529 = *(void *)(v500 + 8 * v528)) != 0
                                && (unint64_t v530 = *(unsigned __int16 *)(v529 + 2 * (HIDWORD(v526) & 0x7F)), v507 > v530)
                                && (uint64_t v531 = v506 + 8 * v530, v531 != v505)
                                && *(_DWORD *)(v531 + 4) == v527)
                              {
                                uint64_t v532 = v63[10] + 24 * v530;
                              }
                              else
                              {
                                uint64_t v532 = v63[11];
                              }
                              if (v528 < v511
                                && (uint64_t v533 = *(void *)(v510 + 8 * v528)) != 0
                                && (unint64_t v534 = *(unsigned __int16 *)(v533 + 2 * (HIDWORD(v526) & 0x7F)), v516 > v534)
                                && (uint64_t v535 = v515 + 8 * v534, v535 != v514)
                                && *(_DWORD *)(v535 + 4) == v527)
                              {
                                uint64_t v536 = (unint64_t *)(v64[10] + 8 * v534);
                              }
                              else
                              {
                                uint64_t v536 = (unint64_t *)v64[11];
                              }
                              unint64_t v537 = *v536;
                              unint64_t v538 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>((int8x8_t *)v1548);
                              uint64_t v539 = v538[4];
                              if (v537 >> 39 < (v538[5] - v539) >> 3
                                && (uint64_t v540 = *(void *)(v539 + 8 * (v537 >> 39))) != 0
                                && (unint64_t v541 = *(unsigned __int16 *)(v540 + 2 * (HIDWORD(v537) & 0x7F)),
                                    uint64_t v543 = v538[7],
                                    uint64_t v542 = v538[8],
                                    v541 < (v542 - v543) >> 3)
                                && (uint64_t v544 = v543 + 8 * v541, v544 != v542)
                                && *(_DWORD *)(v544 + 4) == HIDWORD(v537))
                              {
                                uint64_t v545 = (float *)v538[11];
                                v546 = (float *)(v538[10] + 24 * v541);
                              }
                              else
                              {
                                uint64_t v545 = (float *)v538[11];
                                v546 = v545;
                              }
                              if (v546 == v545) {
                                v546 = 0;
                              }
                              if ((float)(*v546 * v546[2]) >= *(float *)(v532 + 4))
                              {
                                v547 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v547, v526);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  double v116 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>((int8x8_t *)v1548);
  double v117 = (void *)gdc::Registry::storage<arComponents::AnimationDependencyOn>((int8x8_t *)v1548);
  double v118 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>((int8x8_t *)v1548);
  uint64_t v119 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>((int8x8_t *)v1548);
  double v120 = (void *)v119;
  uint64_t v121 = v119 + 32;
  uint64_t v123 = v116[7];
  uint64_t v122 = v116[8];
  if (v117[8] - v117[7] >= (unint64_t)(v122 - v123)) {
    double v124 = v116 + 4;
  }
  else {
    double v124 = v117 + 4;
  }
  if (v118[8] - v118[7] < v124[4] - v124[3]) {
    double v124 = v118 + 4;
  }
  if (*(void *)(v119 + 64) - *(void *)(v119 + 56) >= v124[4] - v124[3]) {
    double v125 = v124;
  }
  else {
    double v125 = (void *)(v119 + 32);
  }
  if (v122 != v123 && v116 + 4 == v125)
  {
    do
    {
      unint64_t v208 = *(unsigned int *)(v123 + 4);
      unint64_t v209 = v208 >> 7;
      uint64_t v210 = v117[4];
      unint64_t v211 = (v117[5] - v210) >> 3;
      if (v208 >> 7 < v211)
      {
        uint64_t v212 = *(void *)(v210 + 8 * v209);
        if (v212)
        {
          uint64_t v213 = v208 & 0x7F;
          unint64_t v214 = *(unsigned __int16 *)(v212 + 2 * v213);
          uint64_t v216 = v117[7];
          uint64_t v215 = v117[8];
          unint64_t v217 = (v215 - v216) >> 3;
          if (v217 > v214)
          {
            uint64_t v218 = v216 + 8 * v214;
            if (v218 != v215 && *(_DWORD *)(v218 + 4) == v208)
            {
              uint64_t v220 = v118[4];
              if (v209 < (v118[5] - v220) >> 3)
              {
                uint64_t v221 = *(void *)(v220 + 8 * v209);
                if (v221)
                {
                  unint64_t v222 = *(unsigned __int16 *)(v221 + 2 * v213);
                  uint64_t v223 = v118[7];
                  uint64_t v224 = v118[8];
                  if (v222 < (v224 - v223) >> 3)
                  {
                    uint64_t v225 = v223 + 8 * v222;
                    if (v225 != v224 && *(_DWORD *)(v225 + 4) == v208)
                    {
                      uint64_t v227 = v120[4];
                      if (v209 < (v120[5] - v227) >> 3)
                      {
                        uint64_t v228 = *(void *)(v227 + 8 * v209);
                        if (v228)
                        {
                          unint64_t v229 = *(unsigned __int16 *)(v228 + 2 * v213);
                          uint64_t v231 = v120[7];
                          uint64_t v230 = v120[8];
                          if (v229 < (v230 - v231) >> 3)
                          {
                            uint64_t v232 = v231 + 8 * v229;
                            if (v232 != v230 && *(_DWORD *)(v232 + 4) == v208)
                            {
                              unint64_t v234 = *(void *)v123;
                              unint64_t v235 = *(void *)v123 >> 39;
                              uint64_t v1540 = *(void *)v123;
                              if (v235 < v211
                                && (uint64_t v236 = *(void *)(v210 + 8 * v235)) != 0
                                && (unint64_t v237 = *(unsigned __int16 *)(v236 + 2 * (HIDWORD(v234) & 0x7F)), v217 > v237)
                                && (uint64_t v238 = v216 + 8 * v237, v238 != v215)
                                && *(_DWORD *)(v238 + 4) == HIDWORD(v234))
                              {
                                unint64_t v239 = (void **)(v117[10] + 8 * v237);
                              }
                              else
                              {
                                unint64_t v239 = (void **)v117[11];
                              }
                              unint64_t __pa = (unint64_t)*v239;
                              unint64_t v240 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>((int8x8_t *)v1548);
                              uint64_t v241 = v240[4];
                              if (__pa >> 39 < (v240[5] - v241) >> 3)
                              {
                                uint64_t v242 = *(void *)(v241 + 8 * (__pa >> 39));
                                if (v242)
                                {
                                  unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(__pa) & 0x7F));
                                  uint64_t v245 = v240[7];
                                  uint64_t v244 = v240[8];
                                  if (v243 < (v244 - v245) >> 3)
                                  {
                                    uint64_t v246 = v245 + 8 * v243;
                                    if (v246 != v244 && *(_DWORD *)(v246 + 4) == HIDWORD(__pa))
                                    {
                                      uint64_t v247 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v247, v1540);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v123 += 8;
    }
    while (v123 != v122);
  }
  if (v117 + 4 == v125)
  {
    uint64_t v548 = v117[7];
    uint64_t v549 = v117[8];
    if (v548 != v549)
    {
      int v550 = (void **)v117[10];
      do
      {
        unint64_t v551 = *(unsigned int *)(v548 + 4);
        unint64_t v552 = v551 >> 7;
        uint64_t v553 = v116[4];
        if (v551 >> 7 < (v116[5] - v553) >> 3)
        {
          uint64_t v554 = *(void *)(v553 + 8 * v552);
          if (v554)
          {
            uint64_t v555 = v551 & 0x7F;
            unint64_t v556 = *(unsigned __int16 *)(v554 + 2 * v555);
            uint64_t v558 = v116[7];
            uint64_t v557 = v116[8];
            if (v556 < (v557 - v558) >> 3)
            {
              uint64_t v559 = v558 + 8 * v556;
              if (v559 != v557 && *(_DWORD *)(v559 + 4) == v551)
              {
                uint64_t v561 = v118[4];
                if (v552 < (v118[5] - v561) >> 3)
                {
                  uint64_t v562 = *(void *)(v561 + 8 * v552);
                  if (v562)
                  {
                    unint64_t v563 = *(unsigned __int16 *)(v562 + 2 * v555);
                    uint64_t v565 = v118[7];
                    uint64_t v564 = v118[8];
                    if (v563 < (v564 - v565) >> 3)
                    {
                      uint64_t v566 = v565 + 8 * v563;
                      if (v566 != v564 && *(_DWORD *)(v566 + 4) == v551)
                      {
                        uint64_t v568 = v120[4];
                        if (v552 < (v120[5] - v568) >> 3)
                        {
                          uint64_t v569 = *(void *)(v568 + 8 * v552);
                          if (v569)
                          {
                            unint64_t v570 = *(unsigned __int16 *)(v569 + 2 * v555);
                            uint64_t v572 = v120[7];
                            uint64_t v571 = v120[8];
                            if (v570 < (v571 - v572) >> 3)
                            {
                              uint64_t v573 = v572 + 8 * v570;
                              if (v573 != v571 && *(_DWORD *)(v573 + 4) == v551)
                              {
                                uint64_t v1543 = *(void *)v548;
                                unint64_t __pc = (unint64_t)*v550;
                                v575 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>((int8x8_t *)v1548);
                                uint64_t v576 = v575[4];
                                if (__pc >> 39 < (v575[5] - v576) >> 3)
                                {
                                  uint64_t v577 = *(void *)(v576 + 8 * (__pc >> 39));
                                  if (v577)
                                  {
                                    unint64_t v578 = *(unsigned __int16 *)(v577 + 2 * (HIDWORD(__pc) & 0x7F));
                                    uint64_t v580 = v575[7];
                                    uint64_t v579 = v575[8];
                                    if (v578 < (v579 - v580) >> 3)
                                    {
                                      uint64_t v581 = v580 + 8 * v578;
                                      if (v581 != v579 && *(_DWORD *)(v581 + 4) == HIDWORD(__pc))
                                      {
                                        uint64_t v582 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                        gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v582, v1543);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v550;
        v548 += 8;
      }
      while (v548 != v549);
    }
  }
  if (v118 + 4 == v125)
  {
    uint64_t v583 = v118[7];
    uint64_t v584 = v118[8];
    while (v583 != v584)
    {
      unint64_t v585 = *(unsigned int *)(v583 + 4);
      unint64_t v586 = v585 >> 7;
      uint64_t v587 = v116[4];
      if (v585 >> 7 < (v116[5] - v587) >> 3)
      {
        uint64_t v588 = *(void *)(v587 + 8 * v586);
        if (v588)
        {
          uint64_t v589 = v585 & 0x7F;
          unint64_t v590 = *(unsigned __int16 *)(v588 + 2 * v589);
          uint64_t v592 = v116[7];
          uint64_t v591 = v116[8];
          if (v590 < (v591 - v592) >> 3)
          {
            uint64_t v593 = v592 + 8 * v590;
            if (v593 != v591 && *(_DWORD *)(v593 + 4) == v585)
            {
              uint64_t v595 = v117[4];
              unint64_t v596 = (v117[5] - v595) >> 3;
              if (v586 < v596)
              {
                uint64_t v597 = *(void *)(v595 + 8 * v586);
                if (v597)
                {
                  unint64_t v598 = *(unsigned __int16 *)(v597 + 2 * v589);
                  uint64_t v600 = v117[7];
                  uint64_t v599 = v117[8];
                  unint64_t v601 = (v599 - v600) >> 3;
                  if (v601 > v598)
                  {
                    uint64_t v602 = v600 + 8 * v598;
                    if (v602 != v599 && *(_DWORD *)(v602 + 4) == v585)
                    {
                      uint64_t v604 = v120[4];
                      if (v586 < (v120[5] - v604) >> 3)
                      {
                        uint64_t v605 = *(void *)(v604 + 8 * v586);
                        if (v605)
                        {
                          unint64_t v606 = *(unsigned __int16 *)(v605 + 2 * v589);
                          uint64_t v608 = v120[7];
                          uint64_t v607 = v120[8];
                          if (v606 < (v607 - v608) >> 3)
                          {
                            uint64_t v609 = v608 + 8 * v606;
                            if (v609 != v607 && *(_DWORD *)(v609 + 4) == v585)
                            {
                              unint64_t v611 = *(void *)v583;
                              unint64_t v612 = *(void *)v583 >> 39;
                              if (v612 < v596
                                && (uint64_t v613 = *(void *)(v595 + 8 * v612)) != 0
                                && (unint64_t v614 = *(unsigned __int16 *)(v613 + 2 * (HIDWORD(v611) & 0x7F)), v601 > v614)
                                && (uint64_t v615 = v600 + 8 * v614, v615 != v599)
                                && *(_DWORD *)(v615 + 4) == HIDWORD(v611))
                              {
                                uint64_t v616 = (unint64_t *)(v117[10] + 8 * v614);
                              }
                              else
                              {
                                uint64_t v616 = (unint64_t *)v117[11];
                              }
                              unint64_t v617 = *v616;
                              int v618 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>((int8x8_t *)v1548);
                              uint64_t v619 = v618[4];
                              if (v617 >> 39 < (v618[5] - v619) >> 3)
                              {
                                uint64_t v620 = *(void *)(v619 + 8 * (v617 >> 39));
                                if (v620)
                                {
                                  unint64_t v621 = *(unsigned __int16 *)(v620 + 2 * (HIDWORD(v617) & 0x7F));
                                  uint64_t v623 = v618[7];
                                  uint64_t v622 = v618[8];
                                  if (v621 < (v622 - v623) >> 3)
                                  {
                                    uint64_t v624 = v623 + 8 * v621;
                                    if (v624 != v622 && *(_DWORD *)(v624 + 4) == HIDWORD(v617))
                                    {
                                      unint64_t v625 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v625, v611);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v583 += 8;
    }
  }
  if ((void *)v121 == v125)
  {
    uint64_t v626 = v120[7];
    uint64_t v627 = v120[8];
    while (v626 != v627)
    {
      unint64_t v628 = *(unsigned int *)(v626 + 4);
      unint64_t v629 = v628 >> 7;
      uint64_t v630 = v116[4];
      if (v628 >> 7 < (v116[5] - v630) >> 3)
      {
        uint64_t v631 = *(void *)(v630 + 8 * v629);
        if (v631)
        {
          uint64_t v632 = v628 & 0x7F;
          unint64_t v633 = *(unsigned __int16 *)(v631 + 2 * v632);
          uint64_t v635 = v116[7];
          uint64_t v634 = v116[8];
          if (v633 < (v634 - v635) >> 3)
          {
            uint64_t v636 = v635 + 8 * v633;
            if (v636 != v634 && *(_DWORD *)(v636 + 4) == v628)
            {
              uint64_t v638 = v117[4];
              unint64_t v639 = (v117[5] - v638) >> 3;
              if (v629 < v639)
              {
                uint64_t v640 = *(void *)(v638 + 8 * v629);
                if (v640)
                {
                  unint64_t v641 = *(unsigned __int16 *)(v640 + 2 * v632);
                  uint64_t v643 = v117[7];
                  uint64_t v642 = v117[8];
                  unint64_t v644 = (v642 - v643) >> 3;
                  if (v644 > v641)
                  {
                    uint64_t v645 = v643 + 8 * v641;
                    if (v645 != v642 && *(_DWORD *)(v645 + 4) == v628)
                    {
                      uint64_t v647 = v118[4];
                      if (v629 < (v118[5] - v647) >> 3)
                      {
                        uint64_t v648 = *(void *)(v647 + 8 * v629);
                        if (v648)
                        {
                          unint64_t v649 = *(unsigned __int16 *)(v648 + 2 * v632);
                          uint64_t v651 = v118[7];
                          uint64_t v650 = v118[8];
                          if (v649 < (v650 - v651) >> 3)
                          {
                            uint64_t v652 = v651 + 8 * v649;
                            if (v652 != v650 && *(_DWORD *)(v652 + 4) == v628)
                            {
                              unint64_t v654 = *(void *)v626;
                              unint64_t v655 = *(void *)v626 >> 39;
                              if (v655 < v639
                                && (uint64_t v656 = *(void *)(v638 + 8 * v655)) != 0
                                && (unint64_t v657 = *(unsigned __int16 *)(v656 + 2 * (HIDWORD(v654) & 0x7F)), v644 > v657)
                                && (uint64_t v658 = v643 + 8 * v657, v658 != v642)
                                && *(_DWORD *)(v658 + 4) == HIDWORD(v654))
                              {
                                unint64_t v659 = (unint64_t *)(v117[10] + 8 * v657);
                              }
                              else
                              {
                                unint64_t v659 = (unint64_t *)v117[11];
                              }
                              unint64_t v660 = *v659;
                              v661 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>((int8x8_t *)v1548);
                              uint64_t v662 = v661[4];
                              if (v660 >> 39 < (v661[5] - v662) >> 3)
                              {
                                uint64_t v663 = *(void *)(v662 + 8 * (v660 >> 39));
                                if (v663)
                                {
                                  unint64_t v664 = *(unsigned __int16 *)(v663 + 2 * (HIDWORD(v660) & 0x7F));
                                  uint64_t v666 = v661[7];
                                  uint64_t v665 = v661[8];
                                  if (v664 < (v665 - v666) >> 3)
                                  {
                                    uint64_t v667 = v666 + 8 * v664;
                                    if (v667 != v665 && *(_DWORD *)(v667 + 4) == HIDWORD(v660))
                                    {
                                      long long v668 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>((int8x8_t *)v1548);
                                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v668, v654);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v626 += 8;
    }
  }
  long long v1562 = 0uLL;
  v1563 = 0;
  if (!*(void *)(v1533 + 176))
  {
    int v669 = (atomic_ullong *)operator new(0x30uLL);
    v670 = (std::__shared_weak_count *)v669;
    v669[2] = 0;
    v669[1] = 0;
    *int v669 = (atomic_ullong)&unk_1EF580170;
    v671 = v669 + 3;
    v669[4] = (atomic_ullong)v669;
    v669[5] = v1533;
    atomic_fetch_add_explicit(v669 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v669 + 2, 1uLL, memory_order_relaxed);
    v669[3] = (atomic_ullong)(v669 + 3);
    if (!atomic_fetch_add(v669 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v669 + 16))(v669);
      std::__shared_weak_count::__release_weak(v670);
    }
    uint64_t v672 = *(std::__shared_weak_count **)(v1533 + 184);
    *(void *)(v1533 + 176) = v671;
    *(void *)(v1533 + 184) = v670;
    if (v672 && !atomic_fetch_add(&v672->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
      std::__shared_weak_count::__release_weak(v672);
    }
  }
  double v126 = *(int8x8_t **)(v1533 + 120);
  double v127 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(v126);
  double v128 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v126);
  double v129 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v126);
  uint64_t v130 = gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v126);
  double v131 = (void *)v130;
  uint64_t v132 = v127[7];
  uint64_t v133 = v127[8];
  if (v128[8] - v128[7] >= (unint64_t)(v133 - v132)) {
    double v134 = (gdc::Registry *)(v127 + 4);
  }
  else {
    double v134 = (gdc::Registry *)(v128 + 4);
  }
  if (v129[8] - v129[7] < *((void *)v134 + 4) - *((void *)v134 + 3)) {
    double v134 = (gdc::Registry *)(v129 + 4);
  }
  v1549 = (gdc::Registry *)(v130 + 32);
  if (*(void *)(v130 + 64) - *(void *)(v130 + 56) >= *((void *)v134 + 4) - *((void *)v134 + 3)) {
    double v135 = v134;
  }
  else {
    double v135 = (gdc::Registry *)(v130 + 32);
  }
  if (v127 + 4 == (void *)v135)
  {
    uint64_t v1558 = v1533;
    v1559 = (unint64_t *)&v1562;
    if (v132 != v133)
    {
      uint64_t v673 = v127[10];
      do
      {
        unint64_t v906 = *(unsigned int *)(v132 + 4);
        unint64_t v907 = v906 >> 7;
        uint64_t v908 = v128[4];
        unint64_t v909 = (v128[5] - v908) >> 3;
        if (v906 >> 7 < v909)
        {
          uint64_t v910 = *(void *)(v908 + 8 * v907);
          if (v910)
          {
            uint64_t v911 = v906 & 0x7F;
            unint64_t v912 = *(unsigned __int16 *)(v910 + 2 * v911);
            uint64_t v914 = v128[7];
            uint64_t v913 = v128[8];
            unint64_t v915 = (v913 - v914) >> 3;
            if (v915 > v912)
            {
              uint64_t v916 = v914 + 8 * v912;
              if (v916 != v913 && *(_DWORD *)(v916 + 4) == v906)
              {
                uint64_t v918 = v129[4];
                if (v907 < (v129[5] - v918) >> 3)
                {
                  uint64_t v919 = *(void *)(v918 + 8 * v907);
                  if (v919)
                  {
                    unint64_t v920 = *(unsigned __int16 *)(v919 + 2 * v911);
                    uint64_t v921 = v129[7];
                    uint64_t v922 = v129[8];
                    if (v920 < (v922 - v921) >> 3)
                    {
                      uint64_t v923 = v921 + 8 * v920;
                      if (v923 != v922 && *(_DWORD *)(v923 + 4) == v906)
                      {
                        uint64_t v925 = v131[4];
                        if (v907 < (v131[5] - v925) >> 3)
                        {
                          uint64_t v926 = *(void *)(v925 + 8 * v907);
                          if (v926)
                          {
                            unint64_t v927 = *(unsigned __int16 *)(v926 + 2 * v911);
                            uint64_t v929 = v131[7];
                            uint64_t v928 = v131[8];
                            if (v927 < (v928 - v929) >> 3)
                            {
                              uint64_t v930 = v929 + 8 * v927;
                              if (v930 != v928 && *(_DWORD *)(v930 + 4) == v906)
                              {
                                unint64_t v932 = *(void *)v132;
                                unint64_t v933 = *(void *)v132 >> 39;
                                if (v933 < v909
                                  && (uint64_t v934 = *(void *)(v908 + 8 * v933)) != 0
                                  && (unint64_t v935 = *(unsigned __int16 *)(v934 + 2 * (HIDWORD(v932) & 0x7F)), v915 > v935)
                                  && (uint64_t v936 = v914 + 8 * v935, v936 != v913)
                                  && *(_DWORD *)(v936 + 4) == HIDWORD(v932))
                                {
                                  uint64_t v905 = v128[10] + 16 * v935;
                                }
                                else
                                {
                                  uint64_t v905 = v128[11];
                                }
                                md::ARAnimationLogic::createAnimations(void)::$_0::operator()(&v1558, v932, v673, v905);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v673 += 24;
        v132 += 8;
      }
      while (v132 != v133);
    }
  }
  if (v128 + 4 == (void *)v135)
  {
    uint64_t v1558 = v1533;
    v1559 = (unint64_t *)&v1562;
    uint64_t v674 = v128[7];
    uint64_t v675 = v128[8];
    if (v674 != v675)
    {
      uint64_t v676 = v128[10];
      do
      {
        unint64_t v938 = *(unsigned int *)(v674 + 4);
        unint64_t v939 = v938 >> 7;
        uint64_t v940 = v127[4];
        unint64_t v941 = (v127[5] - v940) >> 3;
        if (v938 >> 7 < v941)
        {
          uint64_t v942 = *(void *)(v940 + 8 * v939);
          if (v942)
          {
            uint64_t v943 = v938 & 0x7F;
            unint64_t v944 = *(unsigned __int16 *)(v942 + 2 * v943);
            uint64_t v946 = v127[7];
            uint64_t v945 = v127[8];
            unint64_t v947 = (v945 - v946) >> 3;
            if (v947 > v944)
            {
              uint64_t v948 = v946 + 8 * v944;
              if (v948 != v945 && *(_DWORD *)(v948 + 4) == v938)
              {
                uint64_t v950 = v129[4];
                if (v939 < (v129[5] - v950) >> 3)
                {
                  uint64_t v951 = *(void *)(v950 + 8 * v939);
                  if (v951)
                  {
                    unint64_t v952 = *(unsigned __int16 *)(v951 + 2 * v943);
                    uint64_t v953 = v129[7];
                    uint64_t v954 = v129[8];
                    if (v952 < (v954 - v953) >> 3)
                    {
                      uint64_t v955 = v953 + 8 * v952;
                      if (v955 != v954 && *(_DWORD *)(v955 + 4) == v938)
                      {
                        uint64_t v957 = v131[4];
                        if (v939 < (v131[5] - v957) >> 3)
                        {
                          uint64_t v958 = *(void *)(v957 + 8 * v939);
                          if (v958)
                          {
                            unint64_t v959 = *(unsigned __int16 *)(v958 + 2 * v943);
                            uint64_t v961 = v131[7];
                            uint64_t v960 = v131[8];
                            if (v959 < (v960 - v961) >> 3)
                            {
                              uint64_t v962 = v961 + 8 * v959;
                              if (v962 != v960 && *(_DWORD *)(v962 + 4) == v938)
                              {
                                unint64_t v964 = *(void *)v674;
                                unint64_t v965 = *(void *)v674 >> 39;
                                if (v965 < v941
                                  && (uint64_t v966 = *(void *)(v940 + 8 * v965)) != 0
                                  && (unint64_t v967 = *(unsigned __int16 *)(v966 + 2 * (HIDWORD(v964) & 0x7F)), v947 > v967)
                                  && (uint64_t v968 = v946 + 8 * v967, v968 != v945)
                                  && *(_DWORD *)(v968 + 4) == HIDWORD(v964))
                                {
                                  uint64_t v937 = v127[10] + 24 * v967;
                                }
                                else
                                {
                                  uint64_t v937 = v127[11];
                                }
                                md::ARAnimationLogic::createAnimations(void)::$_0::operator()(&v1558, v964, v937, v676);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v676 += 16;
        v674 += 8;
      }
      while (v674 != v675);
    }
  }
  if (v129 + 4 == (void *)v135)
  {
    uint64_t v1558 = v1533;
    v1559 = (unint64_t *)&v1562;
    uint64_t v677 = v129[7];
    for (uint64_t n = v129[8]; v677 != n; v677 += 8)
    {
      unint64_t v970 = *(unsigned int *)(v677 + 4);
      unint64_t v971 = v970 >> 7;
      uint64_t v972 = v127[4];
      unint64_t v973 = (v127[5] - v972) >> 3;
      if (v970 >> 7 < v973)
      {
        uint64_t v974 = *(void *)(v972 + 8 * v971);
        if (v974)
        {
          uint64_t v975 = v970 & 0x7F;
          unint64_t v976 = *(unsigned __int16 *)(v974 + 2 * v975);
          uint64_t v978 = v127[7];
          uint64_t v977 = v127[8];
          unint64_t v979 = (v977 - v978) >> 3;
          if (v979 > v976)
          {
            uint64_t v980 = v978 + 8 * v976;
            if (v980 != v977 && *(_DWORD *)(v980 + 4) == v970)
            {
              uint64_t v982 = v128[4];
              unint64_t v983 = (v128[5] - v982) >> 3;
              if (v971 < v983)
              {
                uint64_t v984 = *(void *)(v982 + 8 * v971);
                if (v984)
                {
                  unint64_t v985 = *(unsigned __int16 *)(v984 + 2 * v975);
                  uint64_t v987 = v128[7];
                  uint64_t v986 = v128[8];
                  unint64_t v988 = (v986 - v987) >> 3;
                  if (v988 > v985)
                  {
                    uint64_t v989 = v987 + 8 * v985;
                    if (v989 != v986 && *(_DWORD *)(v989 + 4) == v970)
                    {
                      uint64_t v991 = v131[4];
                      if (v971 < (v131[5] - v991) >> 3)
                      {
                        uint64_t v992 = *(void *)(v991 + 8 * v971);
                        if (v992)
                        {
                          unint64_t v993 = *(unsigned __int16 *)(v992 + 2 * v975);
                          uint64_t v995 = v131[7];
                          uint64_t v994 = v131[8];
                          if (v993 < (v994 - v995) >> 3)
                          {
                            uint64_t v996 = v995 + 8 * v993;
                            if (v996 != v994 && *(_DWORD *)(v996 + 4) == v970)
                            {
                              unint64_t v998 = *(void *)v677;
                              uint64_t v999 = HIDWORD(*(void *)v677);
                              unint64_t v1000 = *(void *)v677 >> 39;
                              if (v1000 < v973
                                && (uint64_t v1001 = *(void *)(v972 + 8 * v1000)) != 0
                                && (unint64_t v1002 = *(unsigned __int16 *)(v1001 + 2 * (HIDWORD(v998) & 0x7F)), v979 > v1002)
                                && (uint64_t v1003 = v978 + 8 * v1002, v1003 != v977)
                                && *(_DWORD *)(v1003 + 4) == v999)
                              {
                                uint64_t v1004 = v127[10] + 24 * v1002;
                              }
                              else
                              {
                                uint64_t v1004 = v127[11];
                              }
                              if (v1000 < v983
                                && (uint64_t v1005 = *(void *)(v982 + 8 * v1000)) != 0
                                && (unint64_t v1006 = *(unsigned __int16 *)(v1005 + 2 * (HIDWORD(v998) & 0x7F)), v988 > v1006)
                                && (uint64_t v1007 = v987 + 8 * v1006, v1007 != v986)
                                && *(_DWORD *)(v1007 + 4) == v999)
                              {
                                uint64_t v969 = v128[10] + 16 * v1006;
                              }
                              else
                              {
                                uint64_t v969 = v128[11];
                              }
                              md::ARAnimationLogic::createAnimations(void)::$_0::operator()(&v1558, v998, v1004, v969);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v1549 == v135)
  {
    uint64_t v1558 = v1533;
    v1559 = (unint64_t *)&v1562;
    uint64_t v679 = v131[7];
    for (iuint64_t i = v131[8]; v679 != ii; v679 += 8)
    {
      unint64_t v1009 = *(unsigned int *)(v679 + 4);
      unint64_t v1010 = v1009 >> 7;
      uint64_t v1011 = v127[4];
      unint64_t v1012 = (v127[5] - v1011) >> 3;
      if (v1009 >> 7 < v1012)
      {
        uint64_t v1013 = *(void *)(v1011 + 8 * v1010);
        if (v1013)
        {
          uint64_t v1014 = v1009 & 0x7F;
          unint64_t v1015 = *(unsigned __int16 *)(v1013 + 2 * v1014);
          uint64_t v1017 = v127[7];
          uint64_t v1016 = v127[8];
          unint64_t v1018 = (v1016 - v1017) >> 3;
          if (v1018 > v1015)
          {
            uint64_t v1019 = v1017 + 8 * v1015;
            if (v1019 != v1016 && *(_DWORD *)(v1019 + 4) == v1009)
            {
              uint64_t v1021 = v128[4];
              unint64_t v1022 = (v128[5] - v1021) >> 3;
              if (v1010 < v1022)
              {
                uint64_t v1023 = *(void *)(v1021 + 8 * v1010);
                if (v1023)
                {
                  unint64_t v1024 = *(unsigned __int16 *)(v1023 + 2 * v1014);
                  uint64_t v1026 = v128[7];
                  uint64_t v1025 = v128[8];
                  unint64_t v1027 = (v1025 - v1026) >> 3;
                  if (v1027 > v1024)
                  {
                    uint64_t v1028 = v1026 + 8 * v1024;
                    if (v1028 != v1025 && *(_DWORD *)(v1028 + 4) == v1009)
                    {
                      uint64_t v1030 = v129[4];
                      if (v1010 < (v129[5] - v1030) >> 3)
                      {
                        uint64_t v1031 = *(void *)(v1030 + 8 * v1010);
                        if (v1031)
                        {
                          unint64_t v1032 = *(unsigned __int16 *)(v1031 + 2 * v1014);
                          uint64_t v1034 = v129[7];
                          uint64_t v1033 = v129[8];
                          if (v1032 < (v1033 - v1034) >> 3)
                          {
                            uint64_t v1035 = v1034 + 8 * v1032;
                            if (v1035 != v1033 && *(_DWORD *)(v1035 + 4) == v1009)
                            {
                              unint64_t v1037 = *(void *)v679;
                              uint64_t v1038 = HIDWORD(*(void *)v679);
                              unint64_t v1039 = *(void *)v679 >> 39;
                              if (v1039 < v1012
                                && (uint64_t v1040 = *(void *)(v1011 + 8 * v1039)) != 0
                                && (unint64_t v1041 = *(unsigned __int16 *)(v1040 + 2 * (HIDWORD(v1037) & 0x7F)), v1018 > v1041)
                                && (uint64_t v1042 = v1017 + 8 * v1041, v1042 != v1016)
                                && *(_DWORD *)(v1042 + 4) == v1038)
                              {
                                uint64_t v1043 = v127[10] + 24 * v1041;
                              }
                              else
                              {
                                uint64_t v1043 = v127[11];
                              }
                              if (v1039 < v1022
                                && (uint64_t v1044 = *(void *)(v1021 + 8 * v1039)) != 0
                                && (unint64_t v1045 = *(unsigned __int16 *)(v1044 + 2 * (HIDWORD(v1037) & 0x7F)), v1027 > v1045)
                                && (uint64_t v1046 = v1026 + 8 * v1045, v1046 != v1025)
                                && *(_DWORD *)(v1046 + 4) == v1038)
                              {
                                uint64_t v1008 = v128[10] + 16 * v1045;
                              }
                              else
                              {
                                uint64_t v1008 = v128[11];
                              }
                              md::ARAnimationLogic::createAnimations(void)::$_0::operator()(&v1558, v1037, v1043, v1008);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  double v136 = (unint64_t *)*((void *)&v1562 + 1);
  long long v137 = (unint64_t *)v1562;
  if ((void)v1562 != *((void *)&v1562 + 1))
  {
    long long v138 = *(int8x8_t **)(v1533 + 120);
    do
    {
      long long v139 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(v138);
      gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)0>>::remove(v139, *v137++);
    }
    while (v137 != v136);
    long long v140 = (unint64_t *)*((void *)&v1562 + 1);
    long long v137 = (unint64_t *)v1562;
    if ((void)v1562 != *((void *)&v1562 + 1))
    {
      long long v141 = *(int8x8_t **)(v1533 + 120);
      do
      {
        long long v142 = (void *)gdc::Registry::storage<arComponents::ReadyToStartAnimation>(v141);
        gdc::ComponentStorageWrapper<arComponents::ReadyToStartAnimation>::remove(v142, *v137++);
      }
      while (v137 != v140);
      long long v137 = (unint64_t *)v1562;
    }
  }
  if (v137)
  {
    *((void *)&v1562 + 1) = v137;
    operator delete(v137);
  }
  long long v143 = *(int8x8_t **)(v1533 + 120);
  v1561[0] = v143;
  uint64_t v1557 = (uint64_t)(v4 * 1000.0);
  long long v144 = (void *)gdc::Registry::storage<arComponents::AnimationGroupParent>(v143);
  long long v145 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v143);
  uint64_t v146 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(v143);
  uint64_t v147 = (void *)v146;
  uint64_t v148 = v146 + 32;
  uint64_t v150 = v144[7];
  uint64_t v149 = v144[8];
  if (v145[8] - v145[7] >= (unint64_t)(v149 - v150)) {
    uint64_t v151 = v144 + 4;
  }
  else {
    uint64_t v151 = v145 + 4;
  }
  if (*(void *)(v146 + 64) - *(void *)(v146 + 56) >= v151[4] - v151[3]) {
    unint64_t v152 = v151;
  }
  else {
    unint64_t v152 = (void *)(v146 + 32);
  }
  if (v149 != v150 && v144 + 4 == v152)
  {
    do
    {
      unint64_t v248 = *(unsigned int *)(v150 + 4);
      unint64_t v249 = v248 >> 7;
      uint64_t v250 = v145[4];
      if (v248 >> 7 < (v145[5] - v250) >> 3)
      {
        uint64_t v251 = *(void *)(v250 + 8 * v249);
        if (v251)
        {
          unint64_t v252 = *(unsigned __int16 *)(v251 + 2 * (v248 & 0x7F));
          uint64_t v254 = v145[7];
          uint64_t v253 = v145[8];
          if (v252 < (v253 - v254) >> 3)
          {
            uint64_t v255 = v254 + 8 * v252;
            if (v255 != v253 && *(_DWORD *)(v255 + 4) == v248)
            {
              uint64_t v257 = v147[4];
              if (v249 < (v147[5] - v257) >> 3)
              {
                uint64_t v258 = *(void *)(v257 + 8 * v249);
                if (v258)
                {
                  unint64_t v259 = *(unsigned __int16 *)(v258 + 2 * (v248 & 0x7F));
                  uint64_t v261 = v147[7];
                  uint64_t v260 = v147[8];
                  if (v259 < (v260 - v261) >> 3)
                  {
                    uint64_t v262 = v261 + 8 * v259;
                    if (v262 != v260 && *(_DWORD *)(v262 + 4) == v248)
                    {
                      uint64_t v264 = *(void *)v150;
                      float32x4_t v265 = (void *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v1561[0]);
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v265, v264);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v150 += 8;
    }
    while (v150 != v149);
  }
  if (v145 + 4 == v152)
  {
    uint64_t v681 = v145[7];
    uint64_t v682 = v145[8];
    while (v681 != v682)
    {
      unint64_t v683 = *(unsigned int *)(v681 + 4);
      unint64_t v684 = v683 >> 7;
      uint64_t v685 = v144[4];
      if (v683 >> 7 < (v144[5] - v685) >> 3)
      {
        uint64_t v686 = *(void *)(v685 + 8 * v684);
        if (v686)
        {
          unint64_t v687 = *(unsigned __int16 *)(v686 + 2 * (v683 & 0x7F));
          uint64_t v689 = v144[7];
          uint64_t v688 = v144[8];
          if (v687 < (v688 - v689) >> 3)
          {
            uint64_t v690 = v689 + 8 * v687;
            if (v690 != v688 && *(_DWORD *)(v690 + 4) == v683)
            {
              uint64_t v692 = v147[4];
              if (v684 < (v147[5] - v692) >> 3)
              {
                uint64_t v693 = *(void *)(v692 + 8 * v684);
                if (v693)
                {
                  unint64_t v694 = *(unsigned __int16 *)(v693 + 2 * (v683 & 0x7F));
                  uint64_t v696 = v147[7];
                  uint64_t v695 = v147[8];
                  if (v694 < (v695 - v696) >> 3)
                  {
                    uint64_t v697 = v696 + 8 * v694;
                    if (v697 != v695 && *(_DWORD *)(v697 + 4) == v683)
                    {
                      uint64_t v699 = *(void *)v681;
                      v700 = (void *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v1561[0]);
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v700, v699);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v681 += 8;
    }
  }
  if ((void *)v148 == v152)
  {
    uint64_t v701 = v147[7];
    uint64_t v702 = v147[8];
    while (v701 != v702)
    {
      unint64_t v703 = *(unsigned int *)(v701 + 4);
      unint64_t v704 = v703 >> 7;
      uint64_t v705 = v144[4];
      if (v703 >> 7 < (v144[5] - v705) >> 3)
      {
        uint64_t v706 = *(void *)(v705 + 8 * v704);
        if (v706)
        {
          unint64_t v707 = *(unsigned __int16 *)(v706 + 2 * (v703 & 0x7F));
          uint64_t v709 = v144[7];
          uint64_t v708 = v144[8];
          if (v707 < (v708 - v709) >> 3)
          {
            uint64_t v710 = v709 + 8 * v707;
            if (v710 != v708 && *(_DWORD *)(v710 + 4) == v703)
            {
              uint64_t v712 = v145[4];
              if (v704 < (v145[5] - v712) >> 3)
              {
                uint64_t v713 = *(void *)(v712 + 8 * v704);
                if (v713)
                {
                  unint64_t v714 = *(unsigned __int16 *)(v713 + 2 * (v703 & 0x7F));
                  uint64_t v716 = v145[7];
                  uint64_t v715 = v145[8];
                  if (v714 < (v715 - v716) >> 3)
                  {
                    uint64_t v717 = v716 + 8 * v714;
                    if (v717 != v715 && *(_DWORD *)(v717 + 4) == v703)
                    {
                      uint64_t v719 = *(void *)v701;
                      long long v720 = (void *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v1561[0]);
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v720, v719);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v701 += 8;
    }
  }
  uint64_t v1558 = 0;
  v1559 = 0;
  uint64_t v1560 = 0;
  unint64_t v154 = v1561[0];
  unint64_t v155 = (void *)gdc::Registry::storage<arComponents::AnimationGroupParent>(v1561[0]);
  unint64_t v156 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v154);
  uint64_t v157 = gdc::Registry::storage<arComponents::NeedsPropagateActive>(v154);
  long long v158 = (void *)v157;
  uint64_t v159 = v157 + 32;
  uint64_t v161 = v155[7];
  uint64_t v160 = v155[8];
  if (v156[8] - v156[7] >= (unint64_t)(v160 - v161)) {
    unint64_t v162 = v155 + 4;
  }
  else {
    unint64_t v162 = v156 + 4;
  }
  if (*(void *)(v157 + 64) - *(void *)(v157 + 56) >= v162[4] - v162[3]) {
    uint64_t v163 = v162;
  }
  else {
    uint64_t v163 = (void *)(v157 + 32);
  }
  if (v155 + 4 == v163)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1557;
    v1563 = &v1558;
    while (v161 != v160)
    {
      unint64_t v806 = *(unsigned int *)(v161 + 4);
      unint64_t v807 = v806 >> 7;
      uint64_t v808 = v156[4];
      unint64_t v809 = (v156[5] - v808) >> 3;
      if (v806 >> 7 < v809)
      {
        uint64_t v810 = *(void *)(v808 + 8 * v807);
        if (v810)
        {
          unint64_t v811 = *(unsigned __int16 *)(v810 + 2 * (v806 & 0x7F));
          uint64_t v813 = v156[7];
          uint64_t v812 = v156[8];
          unint64_t v814 = (v812 - v813) >> 3;
          if (v814 > v811)
          {
            uint64_t v815 = v813 + 8 * v811;
            if (v815 != v812 && *(_DWORD *)(v815 + 4) == v806)
            {
              uint64_t v817 = v158[4];
              if (v807 < (v158[5] - v817) >> 3)
              {
                uint64_t v818 = *(void *)(v817 + 8 * v807);
                if (v818)
                {
                  unint64_t v819 = *(unsigned __int16 *)(v818 + 2 * (v806 & 0x7F));
                  uint64_t v821 = v158[7];
                  uint64_t v820 = v158[8];
                  if (v819 < (v820 - v821) >> 3)
                  {
                    uint64_t v822 = v821 + 8 * v819;
                    if (v822 != v820 && *(_DWORD *)(v822 + 4) == v806)
                    {
                      unint64_t v824 = *(void *)v161;
                      unint64_t v825 = *(void *)v161 >> 39;
                      if (v825 < v809
                        && (uint64_t v826 = *(void *)(v808 + 8 * v825)) != 0
                        && (unint64_t v827 = *(unsigned __int16 *)(v826 + 2 * (HIDWORD(v824) & 0x7F)), v814 > v827)
                        && ((uint64_t v828 = v813 + 8 * v827, v828 != v812)
                          ? (BOOL v829 = *(_DWORD *)(v828 + 4) == HIDWORD(v824))
                          : (BOOL v829 = 0),
                            v829))
                      {
                        v805 = (unint64_t *)(v156[10] + 16 * v827);
                      }
                      else
                      {
                        v805 = (unint64_t *)v156[11];
                      }
                      propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1562, v824, *v805);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v161 += 8;
    }
  }
  if (v156 + 4 == v163)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1557;
    v1563 = &v1558;
    uint64_t v721 = v156[7];
    uint64_t v722 = v156[8];
    if (v721 != v722)
    {
      v723 = (unint64_t *)v156[10];
      do
      {
        unint64_t v724 = *(unsigned int *)(v721 + 4);
        unint64_t v725 = v724 >> 7;
        uint64_t v726 = v155[4];
        if (v724 >> 7 < (v155[5] - v726) >> 3)
        {
          uint64_t v727 = *(void *)(v726 + 8 * v725);
          if (v727)
          {
            unint64_t v728 = *(unsigned __int16 *)(v727 + 2 * (v724 & 0x7F));
            uint64_t v730 = v155[7];
            uint64_t v729 = v155[8];
            if (v728 < (v729 - v730) >> 3)
            {
              uint64_t v731 = v730 + 8 * v728;
              if (v731 != v729 && *(_DWORD *)(v731 + 4) == v724)
              {
                uint64_t v733 = v158[4];
                if (v725 < (v158[5] - v733) >> 3)
                {
                  uint64_t v734 = *(void *)(v733 + 8 * v725);
                  if (v734)
                  {
                    unint64_t v735 = *(unsigned __int16 *)(v734 + 2 * (v724 & 0x7F));
                    uint64_t v737 = v158[7];
                    uint64_t v736 = v158[8];
                    if (v735 < (v736 - v737) >> 3)
                    {
                      uint64_t v738 = v737 + 8 * v735;
                      if (v738 != v736 && *(_DWORD *)(v738 + 4) == v724) {
                        propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1562, *(void *)v721, *v723);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v723 += 2;
        v721 += 8;
      }
      while (v721 != v722);
    }
  }
  if ((void *)v159 == v163)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1557;
    v1563 = &v1558;
    uint64_t v740 = v158[7];
    uint64_t v741 = v158[8];
    while (v740 != v741)
    {
      unint64_t v831 = *(unsigned int *)(v740 + 4);
      unint64_t v832 = v831 >> 7;
      uint64_t v833 = v155[4];
      if (v831 >> 7 < (v155[5] - v833) >> 3)
      {
        uint64_t v834 = *(void *)(v833 + 8 * v832);
        if (v834)
        {
          unint64_t v835 = *(unsigned __int16 *)(v834 + 2 * (v831 & 0x7F));
          uint64_t v837 = v155[7];
          uint64_t v836 = v155[8];
          if (v835 < (v836 - v837) >> 3)
          {
            uint64_t v838 = v837 + 8 * v835;
            if (v838 != v836 && *(_DWORD *)(v838 + 4) == v831)
            {
              uint64_t v840 = v156[4];
              unint64_t v841 = (v156[5] - v840) >> 3;
              if (v832 < v841)
              {
                uint64_t v842 = *(void *)(v840 + 8 * v832);
                if (v842)
                {
                  unint64_t v843 = *(unsigned __int16 *)(v842 + 2 * (v831 & 0x7F));
                  uint64_t v845 = v156[7];
                  uint64_t v844 = v156[8];
                  unint64_t v846 = (v844 - v845) >> 3;
                  if (v846 > v843)
                  {
                    uint64_t v847 = v845 + 8 * v843;
                    if (v847 != v844 && *(_DWORD *)(v847 + 4) == v831)
                    {
                      unint64_t v849 = *(void *)v740;
                      unint64_t v850 = *(void *)v740 >> 39;
                      if (v850 < v841
                        && (uint64_t v851 = *(void *)(v840 + 8 * v850)) != 0
                        && (unint64_t v852 = *(unsigned __int16 *)(v851 + 2 * (HIDWORD(v849) & 0x7F)), v846 > v852)
                        && ((uint64_t v853 = v845 + 8 * v852, v853 != v844)
                          ? (BOOL v854 = *(_DWORD *)(v853 + 4) == HIDWORD(v849))
                          : (BOOL v854 = 0),
                            v854))
                      {
                        v830 = (unint64_t *)(v156[10] + 16 * v852);
                      }
                      else
                      {
                        v830 = (unint64_t *)v156[11];
                      }
                      propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()((uint64_t)&v1562, v849, *v830);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v740 += 8;
    }
  }
  unint64_t v164 = v1561[0];
  unint64_t v165 = (unint64_t *)v1558;
  unint64_t v166 = v1559;
  if ((unint64_t *)v1558 != v1559)
  {
    do
    {
      unint64_t v167 = (void *)gdc::Registry::storage<arComponents::NeedsPropagateActive>(v164);
      gdc::ComponentStorageWrapper<arComponents::NeedsPropagateActive>::remove(v167, *v165++);
    }
    while (v165 != v166);
    unint64_t v165 = (unint64_t *)v1558;
    unint64_t v164 = v1561[0];
  }
  v1559 = v165;
  unint64_t v168 = (void *)gdc::Registry::storage<arComponents::AnimationGroupParent>(v164);
  unint64_t v169 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v164);
  uint64_t v170 = gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v164);
  uint64_t v171 = (void *)v170;
  uint64_t v172 = v170 + 32;
  uint64_t v174 = v168[7];
  uint64_t v173 = v168[8];
  if (v169[8] - v169[7] >= (unint64_t)(v173 - v174)) {
    long long v175 = v168 + 4;
  }
  else {
    long long v175 = v169 + 4;
  }
  if (*(void *)(v170 + 64) - *(void *)(v170 + 56) >= v175[4] - v175[3]) {
    int v176 = v175;
  }
  else {
    int v176 = (void *)(v170 + 32);
  }
  if (v168 + 4 == v176)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1557;
    v1563 = &v1558;
    while (v174 != v173)
    {
      unint64_t v856 = *(unsigned int *)(v174 + 4);
      unint64_t v857 = v856 >> 7;
      uint64_t v858 = v169[4];
      unint64_t v859 = (v169[5] - v858) >> 3;
      if (v856 >> 7 < v859)
      {
        uint64_t v860 = *(void *)(v858 + 8 * v857);
        if (v860)
        {
          unint64_t v861 = *(unsigned __int16 *)(v860 + 2 * (v856 & 0x7F));
          uint64_t v863 = v169[7];
          uint64_t v862 = v169[8];
          unint64_t v864 = (v862 - v863) >> 3;
          if (v864 > v861)
          {
            uint64_t v865 = v863 + 8 * v861;
            if (v865 != v862 && *(_DWORD *)(v865 + 4) == v856)
            {
              uint64_t v867 = v171[4];
              if (v857 < (v171[5] - v867) >> 3)
              {
                uint64_t v868 = *(void *)(v867 + 8 * v857);
                if (v868)
                {
                  unint64_t v869 = *(unsigned __int16 *)(v868 + 2 * (v856 & 0x7F));
                  uint64_t v871 = v171[7];
                  uint64_t v870 = v171[8];
                  if (v869 < (v870 - v871) >> 3)
                  {
                    uint64_t v872 = v871 + 8 * v869;
                    if (v872 != v870 && *(_DWORD *)(v872 + 4) == v856)
                    {
                      unint64_t v874 = *(void *)v174;
                      unint64_t v875 = *(void *)v174 >> 39;
                      if (v875 < v859
                        && (uint64_t v876 = *(void *)(v858 + 8 * v875)) != 0
                        && (unint64_t v877 = *(unsigned __int16 *)(v876 + 2 * (HIDWORD(v874) & 0x7F)), v864 > v877)
                        && ((uint64_t v878 = v863 + 8 * v877, v878 != v862)
                          ? (BOOL v879 = *(_DWORD *)(v878 + 4) == HIDWORD(v874))
                          : (BOOL v879 = 0),
                            v879))
                      {
                        v855 = (unint64_t *)(v169[10] + 16 * v877);
                      }
                      else
                      {
                        v855 = (unint64_t *)v169[11];
                      }
                      propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()((uint64_t)&v1562, v874, *v855);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v174 += 8;
    }
  }
  if (v169 + 4 == v176)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1557;
    v1563 = &v1558;
    uint64_t v742 = v169[7];
    uint64_t v743 = v169[8];
    if (v742 != v743)
    {
      v744 = (unint64_t *)v169[10];
      do
      {
        unint64_t v745 = *(unsigned int *)(v742 + 4);
        unint64_t v746 = v745 >> 7;
        uint64_t v747 = v168[4];
        if (v745 >> 7 < (v168[5] - v747) >> 3)
        {
          uint64_t v748 = *(void *)(v747 + 8 * v746);
          if (v748)
          {
            unint64_t v749 = *(unsigned __int16 *)(v748 + 2 * (v745 & 0x7F));
            uint64_t v751 = v168[7];
            uint64_t v750 = v168[8];
            if (v749 < (v750 - v751) >> 3)
            {
              uint64_t v752 = v751 + 8 * v749;
              if (v752 != v750 && *(_DWORD *)(v752 + 4) == v745)
              {
                uint64_t v754 = v171[4];
                if (v746 < (v171[5] - v754) >> 3)
                {
                  uint64_t v755 = *(void *)(v754 + 8 * v746);
                  if (v755)
                  {
                    unint64_t v756 = *(unsigned __int16 *)(v755 + 2 * (v745 & 0x7F));
                    uint64_t v758 = v171[7];
                    uint64_t v757 = v171[8];
                    if (v756 < (v757 - v758) >> 3)
                    {
                      uint64_t v759 = v758 + 8 * v756;
                      if (v759 != v757 && *(_DWORD *)(v759 + 4) == v745) {
                        propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()((uint64_t)&v1562, *(void *)v742, *v744);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v744 += 2;
        v742 += 8;
      }
      while (v742 != v743);
    }
  }
  if ((void *)v172 == v176)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1557;
    v1563 = &v1558;
    uint64_t v761 = v171[7];
    uint64_t v762 = v171[8];
    while (v761 != v762)
    {
      unint64_t v881 = *(unsigned int *)(v761 + 4);
      unint64_t v882 = v881 >> 7;
      uint64_t v883 = v168[4];
      if (v881 >> 7 < (v168[5] - v883) >> 3)
      {
        uint64_t v884 = *(void *)(v883 + 8 * v882);
        if (v884)
        {
          unint64_t v885 = *(unsigned __int16 *)(v884 + 2 * (v881 & 0x7F));
          uint64_t v887 = v168[7];
          uint64_t v886 = v168[8];
          if (v885 < (v886 - v887) >> 3)
          {
            uint64_t v888 = v887 + 8 * v885;
            if (v888 != v886 && *(_DWORD *)(v888 + 4) == v881)
            {
              uint64_t v890 = v169[4];
              unint64_t v891 = (v169[5] - v890) >> 3;
              if (v882 < v891)
              {
                uint64_t v892 = *(void *)(v890 + 8 * v882);
                if (v892)
                {
                  unint64_t v893 = *(unsigned __int16 *)(v892 + 2 * (v881 & 0x7F));
                  uint64_t v895 = v169[7];
                  uint64_t v894 = v169[8];
                  unint64_t v896 = (v894 - v895) >> 3;
                  if (v896 > v893)
                  {
                    uint64_t v897 = v895 + 8 * v893;
                    if (v897 != v894 && *(_DWORD *)(v897 + 4) == v881)
                    {
                      unint64_t v899 = *(void *)v761;
                      unint64_t v900 = *(void *)v761 >> 39;
                      if (v900 < v891
                        && (uint64_t v901 = *(void *)(v890 + 8 * v900)) != 0
                        && (unint64_t v902 = *(unsigned __int16 *)(v901 + 2 * (HIDWORD(v899) & 0x7F)), v896 > v902)
                        && ((uint64_t v903 = v895 + 8 * v902, v903 != v894)
                          ? (BOOL v904 = *(_DWORD *)(v903 + 4) == HIDWORD(v899))
                          : (BOOL v904 = 0),
                            v904))
                      {
                        v880 = (unint64_t *)(v169[10] + 16 * v902);
                      }
                      else
                      {
                        v880 = (unint64_t *)v169[11];
                      }
                      propagateAnimationStatusToAnimatedEntity(gdc::Registry *,long long,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_2::operator()((uint64_t)&v1562, v899, *v880);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v761 += 8;
    }
  }
  unint64_t v178 = (unint64_t *)v1558;
  unint64_t v177 = v1559;
  if ((unint64_t *)v1558 != v1559)
  {
    unint64_t v179 = v1561[0];
    do
    {
      unint64_t v180 = (void *)gdc::Registry::storage<arComponents::NeedsPropagateFinished>(v179);
      gdc::ComponentStorageWrapper<arComponents::NeedsPropagateFinished>::remove(v180, *v178++);
    }
    while (v178 != v177);
    unint64_t v178 = (unint64_t *)v1558;
  }
  if (v178)
  {
    v1559 = v178;
    operator delete(v178);
  }
  unint64_t v181 = *(int8x8_t **)(v1533 + 120);
  uint64_t v1558 = (uint64_t)v181;
  double v182 = 0.0000000249532021;
  if (v1532) {
    double v182 = 1.0;
  }
  v1561[0] = *(int8x8_t **)&v182;
  unint64_t v183 = (void *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(v181);
  uint64_t v184 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(v181);
  int v185 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v181);
  uint64_t v186 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v181);
  unint64_t v187 = (void *)v186;
  uint64_t v188 = (gdc::Registry *)(v186 + 32);
  unint64_t v190 = (unint64_t *)v183[7];
  unint64_t v189 = (uint64_t *)v183[8];
  if (v184[8] - v184[7] >= (unint64_t)((char *)v189 - (char *)v190)) {
    unint64_t v191 = (gdc::Registry *)(v183 + 4);
  }
  else {
    unint64_t v191 = (gdc::Registry *)(v184 + 4);
  }
  if (v185[8] - v185[7] < *((void *)v191 + 4) - *((void *)v191 + 3)) {
    unint64_t v191 = (gdc::Registry *)(v185 + 4);
  }
  if (*(void *)(v186 + 64) - *(void *)(v186 + 56) >= *((void *)v191 + 4) - *((void *)v191 + 3)) {
    unint64_t v192 = v191;
  }
  else {
    unint64_t v192 = (gdc::Registry *)(v186 + 32);
  }
  if (v183 + 4 == (void *)v192)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1558;
    if (v190 != (unint64_t *)v189)
    {
      v763 = (float *)(v183[10] + 20);
      do
      {
        unint64_t v1048 = *((unsigned int *)v190 + 1);
        unint64_t v1049 = v1048 >> 7;
        uint64_t v1050 = v184[4];
        unint64_t v1051 = (v184[5] - v1050) >> 3;
        if (v1048 >> 7 < v1051)
        {
          uint64_t v1052 = *(void *)(v1050 + 8 * v1049);
          if (v1052)
          {
            uint64_t v1053 = v1048 & 0x7F;
            unint64_t v1054 = *(unsigned __int16 *)(v1052 + 2 * v1053);
            uint64_t v1056 = v184[7];
            uint64_t v1055 = v184[8];
            unint64_t v1057 = (v1055 - v1056) >> 3;
            if (v1057 > v1054)
            {
              uint64_t v1058 = v1056 + 8 * v1054;
              if (v1058 != v1055 && *(_DWORD *)(v1058 + 4) == v1048)
              {
                uint64_t v1060 = v185[4];
                unint64_t v1061 = (v185[5] - v1060) >> 3;
                if (v1049 < v1061)
                {
                  uint64_t v1062 = *(void *)(v1060 + 8 * v1049);
                  if (v1062)
                  {
                    unint64_t v1063 = *(unsigned __int16 *)(v1062 + 2 * v1053);
                    uint64_t v1065 = v185[7];
                    uint64_t v1064 = v185[8];
                    unint64_t v1066 = (v1064 - v1065) >> 3;
                    if (v1066 > v1063)
                    {
                      uint64_t v1067 = v1065 + 8 * v1063;
                      if (v1067 != v1064 && *(_DWORD *)(v1067 + 4) == v1048)
                      {
                        uint64_t v1069 = v187[4];
                        if (v1049 < (v187[5] - v1069) >> 3)
                        {
                          uint64_t v1070 = *(void *)(v1069 + 8 * v1049);
                          if (v1070)
                          {
                            unint64_t v1071 = *(unsigned __int16 *)(v1070 + 2 * v1053);
                            uint64_t v1073 = v187[7];
                            uint64_t v1072 = v187[8];
                            if (v1071 < (v1072 - v1073) >> 3)
                            {
                              uint64_t v1074 = v1073 + 8 * v1071;
                              if (v1074 != v1072 && *(_DWORD *)(v1074 + 4) == v1048)
                              {
                                unint64_t v1076 = *v190;
                                unint64_t v1077 = HIDWORD(*v190);
                                unint64_t v1078 = *v190 >> 39;
                                if (v1078 < v1051
                                  && (uint64_t v1079 = *(void *)(v1050 + 8 * v1078)) != 0
                                  && (unint64_t v1080 = *(unsigned __int16 *)(v1079 + 2 * (HIDWORD(v1076) & 0x7F)), v1057 > v1080)
                                  && (uint64_t v1081 = v1056 + 8 * v1080, v1081 != v1055)
                                  && *(_DWORD *)(v1081 + 4) == v1077)
                                {
                                  uint64_t v1082 = v184[10] + 24 * v1080;
                                }
                                else
                                {
                                  uint64_t v1082 = v184[11];
                                }
                                v1551 = v188;
                                if (v1078 < v1061
                                  && (uint64_t v1083 = *(void *)(v1060 + 8 * v1078)) != 0
                                  && (unint64_t v1084 = *(unsigned __int16 *)(v1083 + 2 * (HIDWORD(v1076) & 0x7F)), v1066 > v1084)
                                  && (uint64_t v1085 = v1065 + 8 * v1084, v1085 != v1064)
                                  && *(_DWORD *)(v1085 + 4) == v1077)
                                {
                                  uint64_t v1047 = v185[10] + 16 * v1084;
                                }
                                else
                                {
                                  uint64_t v1047 = v185[11];
                                }
                                processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1562, v1082, v1047, *(v763 - 3), *v763);
                                uint64_t v188 = v1551;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v190;
        v763 += 6;
      }
      while (v190 != (unint64_t *)v189);
    }
  }
  if (v184 + 4 == (void *)v192)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1558;
    v764 = (unint64_t *)v184[7];
    v765 = (uint64_t *)v184[8];
    if (v764 != (unint64_t *)v765)
    {
      uint64_t v766 = v184[10];
      do
      {
        unint64_t v1087 = *((unsigned int *)v764 + 1);
        unint64_t v1088 = v1087 >> 7;
        uint64_t v1089 = v183[4];
        unint64_t v1090 = (v183[5] - v1089) >> 3;
        if (v1087 >> 7 < v1090)
        {
          uint64_t v1091 = *(void *)(v1089 + 8 * v1088);
          if (v1091)
          {
            uint64_t v1092 = v1087 & 0x7F;
            unint64_t v1093 = *(unsigned __int16 *)(v1091 + 2 * v1092);
            uint64_t v1095 = v183[7];
            uint64_t v1094 = v183[8];
            unint64_t v1096 = (v1094 - v1095) >> 3;
            if (v1096 > v1093)
            {
              uint64_t v1097 = v1095 + 8 * v1093;
              if (v1097 != v1094 && *(_DWORD *)(v1097 + 4) == v1087)
              {
                uint64_t v1099 = v185[4];
                unint64_t v1100 = (v185[5] - v1099) >> 3;
                if (v1088 < v1100)
                {
                  uint64_t v1101 = *(void *)(v1099 + 8 * v1088);
                  if (v1101)
                  {
                    unint64_t v1102 = *(unsigned __int16 *)(v1101 + 2 * v1092);
                    uint64_t v1104 = v185[7];
                    uint64_t v1103 = v185[8];
                    unint64_t v1105 = (v1103 - v1104) >> 3;
                    if (v1105 > v1102)
                    {
                      uint64_t v1106 = v1104 + 8 * v1102;
                      if (v1106 != v1103 && *(_DWORD *)(v1106 + 4) == v1087)
                      {
                        uint64_t v1108 = v187[4];
                        if (v1088 < (v187[5] - v1108) >> 3)
                        {
                          uint64_t v1109 = *(void *)(v1108 + 8 * v1088);
                          if (v1109)
                          {
                            unint64_t v1110 = *(unsigned __int16 *)(v1109 + 2 * v1092);
                            uint64_t v1112 = v187[7];
                            uint64_t v1111 = v187[8];
                            if (v1110 < (v1111 - v1112) >> 3)
                            {
                              uint64_t v1113 = v1112 + 8 * v1110;
                              if (v1113 != v1111 && *(_DWORD *)(v1113 + 4) == v1087)
                              {
                                unint64_t v1115 = *v764;
                                unint64_t v1116 = HIDWORD(*v764);
                                unint64_t v1117 = *v764 >> 39;
                                if (v1117 < v1090
                                  && (uint64_t v1118 = *(void *)(v1089 + 8 * v1117)) != 0
                                  && (unint64_t v1119 = *(unsigned __int16 *)(v1118 + 2 * (HIDWORD(v1115) & 0x7F)), v1096 > v1119)
                                  && (uint64_t v1120 = v1095 + 8 * v1119, v1120 != v1094)
                                  && *(_DWORD *)(v1120 + 4) == v1116)
                                {
                                  uint64_t v1121 = v183[10] + 24 * v1119;
                                }
                                else
                                {
                                  uint64_t v1121 = v183[11];
                                }
                                v1552 = v188;
                                if (v1117 < v1100
                                  && (uint64_t v1122 = *(void *)(v1099 + 8 * v1117)) != 0
                                  && (unint64_t v1123 = *(unsigned __int16 *)(v1122 + 2 * (HIDWORD(v1115) & 0x7F)), v1105 > v1123)
                                  && (uint64_t v1124 = v1104 + 8 * v1123, v1124 != v1103)
                                  && *(_DWORD *)(v1124 + 4) == v1116)
                                {
                                  uint64_t v1086 = v185[10] + 16 * v1123;
                                }
                                else
                                {
                                  uint64_t v1086 = v185[11];
                                }
                                processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1562, v766, v1086, *(float *)(v1121 + 8), *(float *)(v1121 + 20));
                                uint64_t v188 = v1552;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v766 += 24;
        ++v764;
      }
      while (v764 != (unint64_t *)v765);
    }
  }
  if (v185 + 4 == (void *)v192)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1558;
    v767 = (unint64_t *)v185[7];
    v768 = (uint64_t *)v185[8];
    if (v767 != (unint64_t *)v768)
    {
      uint64_t v769 = v185[10];
      do
      {
        unint64_t v1127 = *((unsigned int *)v767 + 1);
        unint64_t v1128 = v1127 >> 7;
        uint64_t v1129 = v183[4];
        unint64_t v1130 = (v183[5] - v1129) >> 3;
        if (v1127 >> 7 < v1130)
        {
          uint64_t v1131 = *(void *)(v1129 + 8 * v1128);
          if (v1131)
          {
            uint64_t v1132 = v1127 & 0x7F;
            unint64_t v1133 = *(unsigned __int16 *)(v1131 + 2 * v1132);
            uint64_t v1135 = v183[7];
            uint64_t v1134 = v183[8];
            unint64_t v1136 = (v1134 - v1135) >> 3;
            if (v1136 > v1133)
            {
              uint64_t v1137 = v1135 + 8 * v1133;
              if (v1137 != v1134 && *(_DWORD *)(v1137 + 4) == v1127)
              {
                uint64_t v1139 = v184[4];
                unint64_t v1140 = (v184[5] - v1139) >> 3;
                if (v1128 < v1140)
                {
                  uint64_t v1141 = *(void *)(v1139 + 8 * v1128);
                  if (v1141)
                  {
                    unint64_t v1142 = *(unsigned __int16 *)(v1141 + 2 * v1132);
                    uint64_t v1144 = v184[7];
                    uint64_t v1143 = v184[8];
                    unint64_t v1145 = (v1143 - v1144) >> 3;
                    if (v1145 > v1142)
                    {
                      uint64_t v1146 = v1144 + 8 * v1142;
                      if (v1146 != v1143 && *(_DWORD *)(v1146 + 4) == v1127)
                      {
                        uint64_t v1148 = v187[4];
                        if (v1128 < (v187[5] - v1148) >> 3)
                        {
                          uint64_t v1149 = *(void *)(v1148 + 8 * v1128);
                          if (v1149)
                          {
                            unint64_t v1150 = *(unsigned __int16 *)(v1149 + 2 * v1132);
                            uint64_t v1152 = v187[7];
                            uint64_t v1151 = v187[8];
                            if (v1150 < (v1151 - v1152) >> 3)
                            {
                              uint64_t v1153 = v1152 + 8 * v1150;
                              if (v1153 != v1151 && *(_DWORD *)(v1153 + 4) == v1127)
                              {
                                unint64_t v1155 = *v767;
                                unint64_t v1156 = HIDWORD(*v767);
                                unint64_t v1157 = *v767 >> 39;
                                if (v1157 < v1130
                                  && (uint64_t v1158 = *(void *)(v1129 + 8 * v1157)) != 0
                                  && (unint64_t v1159 = *(unsigned __int16 *)(v1158 + 2 * (HIDWORD(v1155) & 0x7F)), v1136 > v1159)
                                  && (uint64_t v1160 = v1135 + 8 * v1159, v1160 != v1134)
                                  && *(_DWORD *)(v1160 + 4) == v1156)
                                {
                                  uint64_t v1161 = v183[10] + 24 * v1159;
                                }
                                else
                                {
                                  uint64_t v1161 = v183[11];
                                }
                                if (v1157 < v1140
                                  && (uint64_t v1162 = *(void *)(v1139 + 8 * v1157)) != 0
                                  && (unint64_t v1163 = *(unsigned __int16 *)(v1162 + 2 * (HIDWORD(v1155) & 0x7F)), v1145 > v1163)
                                  && (uint64_t v1164 = v1144 + 8 * v1163, v1164 != v1143)
                                  && *(_DWORD *)(v1164 + 4) == v1156)
                                {
                                  v1125 = v188;
                                  uint64_t v1126 = v184[10] + 24 * v1163;
                                }
                                else
                                {
                                  v1125 = v188;
                                  uint64_t v1126 = v184[11];
                                }
                                processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1562, v1126, v769, *(float *)(v1161 + 8), *(float *)(v1161 + 20));
                                uint64_t v188 = v1125;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v769 += 16;
        ++v767;
      }
      while (v767 != (unint64_t *)v768);
    }
  }
  if (v188 == v192)
  {
    *(void *)&long long v1562 = v1561;
    *((void *)&v1562 + 1) = &v1558;
    v770 = (unint64_t *)v187[7];
    for (juint64_t j = (uint64_t *)v187[8]; v770 != (unint64_t *)jj; ++v770)
    {
      unint64_t v1166 = *((unsigned int *)v770 + 1);
      unint64_t v1167 = v1166 >> 7;
      uint64_t v1168 = v183[4];
      unint64_t v1169 = (v183[5] - v1168) >> 3;
      if (v1166 >> 7 < v1169)
      {
        uint64_t v1170 = *(void *)(v1168 + 8 * v1167);
        if (v1170)
        {
          uint64_t v1171 = v1166 & 0x7F;
          unint64_t v1172 = *(unsigned __int16 *)(v1170 + 2 * v1171);
          uint64_t v1174 = v183[7];
          uint64_t v1173 = v183[8];
          unint64_t v1175 = (v1173 - v1174) >> 3;
          if (v1175 > v1172)
          {
            uint64_t v1176 = v1174 + 8 * v1172;
            if (v1176 != v1173 && *(_DWORD *)(v1176 + 4) == v1166)
            {
              uint64_t v1178 = v184[4];
              unint64_t v1179 = (v184[5] - v1178) >> 3;
              if (v1167 < v1179)
              {
                uint64_t v1180 = *(void *)(v1178 + 8 * v1167);
                if (v1180)
                {
                  unint64_t v1181 = *(unsigned __int16 *)(v1180 + 2 * v1171);
                  uint64_t v1183 = v184[7];
                  uint64_t v1182 = v184[8];
                  unint64_t v1184 = (v1182 - v1183) >> 3;
                  if (v1184 > v1181)
                  {
                    uint64_t v1185 = v1183 + 8 * v1181;
                    if (v1185 != v1182 && *(_DWORD *)(v1185 + 4) == v1166)
                    {
                      uint64_t v1187 = v185[4];
                      unint64_t v1188 = (v185[5] - v1187) >> 3;
                      if (v1167 < v1188)
                      {
                        uint64_t v1189 = *(void *)(v1187 + 8 * v1167);
                        if (v1189)
                        {
                          unint64_t v1190 = *(unsigned __int16 *)(v1189 + 2 * v1171);
                          uint64_t v1192 = v185[7];
                          uint64_t v1191 = v185[8];
                          unint64_t v1193 = (v1191 - v1192) >> 3;
                          if (v1193 > v1190)
                          {
                            uint64_t v1194 = v1192 + 8 * v1190;
                            if (v1194 != v1191 && *(_DWORD *)(v1194 + 4) == v1166)
                            {
                              unint64_t v1196 = *v770;
                              unint64_t v1197 = HIDWORD(*v770);
                              unint64_t v1198 = *v770 >> 39;
                              if (v1198 < v1169
                                && (uint64_t v1199 = *(void *)(v1168 + 8 * v1198)) != 0
                                && (unint64_t v1200 = *(unsigned __int16 *)(v1199 + 2 * (HIDWORD(v1196) & 0x7F)), v1175 > v1200)
                                && (uint64_t v1201 = v1174 + 8 * v1200, v1201 != v1173)
                                && *(_DWORD *)(v1201 + 4) == v1197)
                              {
                                uint64_t v1202 = v183[10] + 24 * v1200;
                              }
                              else
                              {
                                uint64_t v1202 = v183[11];
                              }
                              if (v1198 < v1179
                                && (uint64_t v1203 = *(void *)(v1178 + 8 * v1198)) != 0
                                && (unint64_t v1204 = *(unsigned __int16 *)(v1203 + 2 * (HIDWORD(v1196) & 0x7F)), v1184 > v1204)
                                && (uint64_t v1205 = v1183 + 8 * v1204, v1205 != v1182)
                                && *(_DWORD *)(v1205 + 4) == v1197)
                              {
                                uint64_t v1206 = v184[10] + 24 * v1204;
                              }
                              else
                              {
                                uint64_t v1206 = v184[11];
                              }
                              if (v1198 < v1188
                                && (uint64_t v1207 = *(void *)(v1187 + 8 * v1198)) != 0
                                && (unint64_t v1208 = *(unsigned __int16 *)(v1207 + 2 * (HIDWORD(v1196) & 0x7F)), v1193 > v1208)
                                && (uint64_t v1209 = v1192 + 8 * v1208, v1209 != v1191)
                                && *(_DWORD *)(v1209 + 4) == v1197)
                              {
                                uint64_t v1165 = v185[10] + 16 * v1208;
                              }
                              else
                              {
                                uint64_t v1165 = v185[11];
                              }
                              processTranslationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &,gdc::CameraType const&)::$_0::operator()((uint64_t)&v1562, v1206, v1165, *(float *)(v1202 + 8), *(float *)(v1202 + 20));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int v193 = *(int8x8_t **)(v1533 + 120);
  uint64_t v1558 = (uint64_t)v193;
  float v194 = (void *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)1,gm::Matrix<float,3,1>>>(v193);
  uint64_t v195 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(v193);
  uint64_t v196 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v193);
  uint64_t v197 = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v193);
  unint64_t v198 = (void *)v197;
  uint64_t v199 = (gdc::Registry *)(v197 + 32);
  unint64_t v200 = (unint64_t *)v194[7];
  unint64_t v201 = (uint64_t *)v194[8];
  if (v195[8] - v195[7] >= (unint64_t)((char *)v201 - (char *)v200)) {
    unint64_t v202 = (gdc::Registry *)(v194 + 4);
  }
  else {
    unint64_t v202 = (gdc::Registry *)(v195 + 4);
  }
  if (v196[8] - v196[7] < *((void *)v202 + 4) - *((void *)v202 + 3)) {
    unint64_t v202 = (gdc::Registry *)(v196 + 4);
  }
  if (*(void *)(v197 + 64) - *(void *)(v197 + 56) >= *((void *)v202 + 4) - *((void *)v202 + 3)) {
    unint64_t v203 = v202;
  }
  else {
    unint64_t v203 = (gdc::Registry *)(v197 + 32);
  }
  if (v194 + 4 == (void *)v203)
  {
    *(void *)&long long v1562 = &v1558;
    if (v200 != (unint64_t *)v201)
    {
      v772 = (float *)v194[10];
      do
      {
        unint64_t v1211 = *((unsigned int *)v200 + 1);
        unint64_t v1212 = v1211 >> 7;
        uint64_t v1213 = v195[4];
        unint64_t v1214 = (v195[5] - v1213) >> 3;
        if (v1211 >> 7 < v1214)
        {
          uint64_t v1215 = *(void *)(v1213 + 8 * v1212);
          if (v1215)
          {
            uint64_t v1216 = v1211 & 0x7F;
            unint64_t v1217 = *(unsigned __int16 *)(v1215 + 2 * v1216);
            uint64_t v1219 = v195[7];
            uint64_t v1218 = v195[8];
            unint64_t v1220 = (v1218 - v1219) >> 3;
            if (v1220 > v1217)
            {
              uint64_t v1221 = v1219 + 8 * v1217;
              if (v1221 != v1218 && *(_DWORD *)(v1221 + 4) == v1211)
              {
                uint64_t v1223 = v196[4];
                unint64_t v1224 = (v196[5] - v1223) >> 3;
                if (v1212 < v1224)
                {
                  uint64_t v1225 = *(void *)(v1223 + 8 * v1212);
                  if (v1225)
                  {
                    unint64_t v1226 = *(unsigned __int16 *)(v1225 + 2 * v1216);
                    uint64_t v1228 = v196[7];
                    uint64_t v1227 = v196[8];
                    unint64_t v1229 = (v1227 - v1228) >> 3;
                    if (v1229 > v1226)
                    {
                      uint64_t v1230 = v1228 + 8 * v1226;
                      if (v1230 != v1227 && *(_DWORD *)(v1230 + 4) == v1211)
                      {
                        uint64_t v1232 = v198[4];
                        if (v1212 < (v198[5] - v1232) >> 3)
                        {
                          uint64_t v1233 = *(void *)(v1232 + 8 * v1212);
                          if (v1233)
                          {
                            unint64_t v1234 = *(unsigned __int16 *)(v1233 + 2 * v1216);
                            uint64_t v1236 = v198[7];
                            uint64_t v1235 = v198[8];
                            if (v1234 < (v1235 - v1236) >> 3)
                            {
                              uint64_t v1237 = v1236 + 8 * v1234;
                              if (v1237 != v1235 && *(_DWORD *)(v1237 + 4) == v1211)
                              {
                                unint64_t v1239 = *v200;
                                unint64_t v1240 = HIDWORD(*v200);
                                unint64_t v1241 = *v200 >> 39;
                                if (v1241 < v1214
                                  && (uint64_t v1242 = *(void *)(v1213 + 8 * v1241)) != 0
                                  && (unint64_t v1243 = *(unsigned __int16 *)(v1242 + 2 * (HIDWORD(v1239) & 0x7F)), v1220 > v1243)
                                  && (uint64_t v1244 = v1219 + 8 * v1243, v1244 != v1218)
                                  && *(_DWORD *)(v1244 + 4) == v1240)
                                {
                                  uint64_t v1245 = v195[10] + 24 * v1243;
                                }
                                else
                                {
                                  uint64_t v1245 = v195[11];
                                }
                                v1553 = v199;
                                if (v1241 < v1224
                                  && (uint64_t v1246 = *(void *)(v1223 + 8 * v1241)) != 0
                                  && (unint64_t v1247 = *(unsigned __int16 *)(v1246 + 2 * (HIDWORD(v1239) & 0x7F)), v1229 > v1247)
                                  && (uint64_t v1248 = v1228 + 8 * v1247, v1248 != v1227)
                                  && *(_DWORD *)(v1248 + 4) == v1240)
                                {
                                  uint64_t v1210 = v196[10] + 16 * v1247;
                                }
                                else
                                {
                                  uint64_t v1210 = v196[11];
                                }
                                processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v772, v1245, v1210);
                                uint64_t v199 = v1553;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v772 += 6;
        ++v200;
      }
      while (v200 != (unint64_t *)v201);
    }
  }
  if (v195 + 4 == (void *)v203)
  {
    *(void *)&long long v1562 = &v1558;
    v773 = (unint64_t *)v195[7];
    v774 = (uint64_t *)v195[8];
    if (v773 != (unint64_t *)v774)
    {
      uint64_t v775 = v195[10];
      do
      {
        unint64_t v1250 = *((unsigned int *)v773 + 1);
        unint64_t v1251 = v1250 >> 7;
        uint64_t v1252 = v194[4];
        unint64_t v1253 = (v194[5] - v1252) >> 3;
        if (v1250 >> 7 < v1253)
        {
          uint64_t v1254 = *(void *)(v1252 + 8 * v1251);
          if (v1254)
          {
            uint64_t v1255 = v1250 & 0x7F;
            unint64_t v1256 = *(unsigned __int16 *)(v1254 + 2 * v1255);
            uint64_t v1258 = v194[7];
            uint64_t v1257 = v194[8];
            unint64_t v1259 = (v1257 - v1258) >> 3;
            if (v1259 > v1256)
            {
              uint64_t v1260 = v1258 + 8 * v1256;
              if (v1260 != v1257 && *(_DWORD *)(v1260 + 4) == v1250)
              {
                uint64_t v1262 = v196[4];
                unint64_t v1263 = (v196[5] - v1262) >> 3;
                if (v1251 < v1263)
                {
                  uint64_t v1264 = *(void *)(v1262 + 8 * v1251);
                  if (v1264)
                  {
                    unint64_t v1265 = *(unsigned __int16 *)(v1264 + 2 * v1255);
                    uint64_t v1267 = v196[7];
                    uint64_t v1266 = v196[8];
                    unint64_t v1268 = (v1266 - v1267) >> 3;
                    if (v1268 > v1265)
                    {
                      uint64_t v1269 = v1267 + 8 * v1265;
                      if (v1269 != v1266 && *(_DWORD *)(v1269 + 4) == v1250)
                      {
                        uint64_t v1271 = v198[4];
                        if (v1251 < (v198[5] - v1271) >> 3)
                        {
                          uint64_t v1272 = *(void *)(v1271 + 8 * v1251);
                          if (v1272)
                          {
                            unint64_t v1273 = *(unsigned __int16 *)(v1272 + 2 * v1255);
                            uint64_t v1275 = v198[7];
                            uint64_t v1274 = v198[8];
                            if (v1273 < (v1274 - v1275) >> 3)
                            {
                              uint64_t v1276 = v1275 + 8 * v1273;
                              if (v1276 != v1274 && *(_DWORD *)(v1276 + 4) == v1250)
                              {
                                unint64_t v1278 = *v773;
                                unint64_t v1279 = HIDWORD(*v773);
                                unint64_t v1280 = *v773 >> 39;
                                if (v1280 < v1253
                                  && (uint64_t v1281 = *(void *)(v1252 + 8 * v1280)) != 0
                                  && (unint64_t v1282 = *(unsigned __int16 *)(v1281 + 2 * (HIDWORD(v1278) & 0x7F)), v1259 > v1282)
                                  && (uint64_t v1283 = v1258 + 8 * v1282, v1283 != v1257)
                                  && *(_DWORD *)(v1283 + 4) == v1279)
                                {
                                  v1284 = (float *)(v194[10] + 24 * v1282);
                                }
                                else
                                {
                                  v1284 = (float *)v194[11];
                                }
                                v1554 = v199;
                                if (v1280 < v1263
                                  && (uint64_t v1285 = *(void *)(v1262 + 8 * v1280)) != 0
                                  && (unint64_t v1286 = *(unsigned __int16 *)(v1285 + 2 * (HIDWORD(v1278) & 0x7F)), v1268 > v1286)
                                  && (uint64_t v1287 = v1267 + 8 * v1286, v1287 != v1266)
                                  && *(_DWORD *)(v1287 + 4) == v1279)
                                {
                                  uint64_t v1249 = v196[10] + 16 * v1286;
                                }
                                else
                                {
                                  uint64_t v1249 = v196[11];
                                }
                                processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v1284, v775, v1249);
                                uint64_t v199 = v1554;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v775 += 24;
        ++v773;
      }
      while (v773 != (unint64_t *)v774);
    }
  }
  if (v196 + 4 == (void *)v203)
  {
    *(void *)&long long v1562 = &v1558;
    v776 = (unint64_t *)v196[7];
    v777 = (uint64_t *)v196[8];
    if (v776 != (unint64_t *)v777)
    {
      uint64_t v778 = v196[10];
      do
      {
        unint64_t v1289 = *((unsigned int *)v776 + 1);
        unint64_t v1290 = v1289 >> 7;
        uint64_t v1291 = v194[4];
        unint64_t v1292 = (v194[5] - v1291) >> 3;
        if (v1289 >> 7 < v1292)
        {
          uint64_t v1293 = *(void *)(v1291 + 8 * v1290);
          if (v1293)
          {
            uint64_t v1294 = v1289 & 0x7F;
            unint64_t v1295 = *(unsigned __int16 *)(v1293 + 2 * v1294);
            uint64_t v1297 = v194[7];
            uint64_t v1296 = v194[8];
            unint64_t v1298 = (v1296 - v1297) >> 3;
            if (v1298 > v1295)
            {
              uint64_t v1299 = v1297 + 8 * v1295;
              if (v1299 != v1296 && *(_DWORD *)(v1299 + 4) == v1289)
              {
                uint64_t v1301 = v195[4];
                unint64_t v1302 = (v195[5] - v1301) >> 3;
                if (v1290 < v1302)
                {
                  uint64_t v1303 = *(void *)(v1301 + 8 * v1290);
                  if (v1303)
                  {
                    unint64_t v1304 = *(unsigned __int16 *)(v1303 + 2 * v1294);
                    uint64_t v1306 = v195[7];
                    uint64_t v1305 = v195[8];
                    unint64_t v1307 = (v1305 - v1306) >> 3;
                    if (v1307 > v1304)
                    {
                      uint64_t v1308 = v1306 + 8 * v1304;
                      if (v1308 != v1305 && *(_DWORD *)(v1308 + 4) == v1289)
                      {
                        uint64_t v1310 = v198[4];
                        if (v1290 < (v198[5] - v1310) >> 3)
                        {
                          uint64_t v1311 = *(void *)(v1310 + 8 * v1290);
                          if (v1311)
                          {
                            unint64_t v1312 = *(unsigned __int16 *)(v1311 + 2 * v1294);
                            uint64_t v1314 = v198[7];
                            uint64_t v1313 = v198[8];
                            if (v1312 < (v1313 - v1314) >> 3)
                            {
                              uint64_t v1315 = v1314 + 8 * v1312;
                              if (v1315 != v1313 && *(_DWORD *)(v1315 + 4) == v1289)
                              {
                                unint64_t v1317 = *v776;
                                unint64_t v1318 = HIDWORD(*v776);
                                unint64_t v1319 = *v776 >> 39;
                                if (v1319 < v1292
                                  && (uint64_t v1320 = *(void *)(v1291 + 8 * v1319)) != 0
                                  && (unint64_t v1321 = *(unsigned __int16 *)(v1320 + 2 * (HIDWORD(v1317) & 0x7F)), v1298 > v1321)
                                  && (uint64_t v1322 = v1297 + 8 * v1321, v1322 != v1296)
                                  && *(_DWORD *)(v1322 + 4) == v1318)
                                {
                                  v1323 = (float *)(v194[10] + 24 * v1321);
                                }
                                else
                                {
                                  v1323 = (float *)v194[11];
                                }
                                v1555 = v199;
                                if (v1319 < v1302
                                  && (uint64_t v1324 = *(void *)(v1301 + 8 * v1319)) != 0
                                  && (unint64_t v1325 = *(unsigned __int16 *)(v1324 + 2 * (HIDWORD(v1317) & 0x7F)), v1307 > v1325)
                                  && (uint64_t v1326 = v1306 + 8 * v1325, v1326 != v1305)
                                  && *(_DWORD *)(v1326 + 4) == v1318)
                                {
                                  uint64_t v1288 = v195[10] + 24 * v1325;
                                }
                                else
                                {
                                  uint64_t v1288 = v195[11];
                                }
                                processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v1323, v1288, v778);
                                uint64_t v199 = v1555;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v778 += 16;
        ++v776;
      }
      while (v776 != (unint64_t *)v777);
    }
  }
  if (v199 == v203)
  {
    *(void *)&long long v1562 = &v1558;
    v779 = (unint64_t *)v198[7];
    for (kuint64_t k = (uint64_t *)v198[8]; v779 != (unint64_t *)kk; ++v779)
    {
      unint64_t v1328 = *((unsigned int *)v779 + 1);
      unint64_t v1329 = v1328 >> 7;
      uint64_t v1330 = v194[4];
      unint64_t v1331 = (v194[5] - v1330) >> 3;
      if (v1328 >> 7 < v1331)
      {
        uint64_t v1332 = *(void *)(v1330 + 8 * v1329);
        if (v1332)
        {
          uint64_t v1333 = v1328 & 0x7F;
          unint64_t v1334 = *(unsigned __int16 *)(v1332 + 2 * v1333);
          uint64_t v1336 = v194[7];
          uint64_t v1335 = v194[8];
          unint64_t v1337 = (v1335 - v1336) >> 3;
          if (v1337 > v1334)
          {
            uint64_t v1338 = v1336 + 8 * v1334;
            if (v1338 != v1335 && *(_DWORD *)(v1338 + 4) == v1328)
            {
              uint64_t v1340 = v195[4];
              unint64_t v1341 = (v195[5] - v1340) >> 3;
              if (v1329 < v1341)
              {
                uint64_t v1342 = *(void *)(v1340 + 8 * v1329);
                if (v1342)
                {
                  unint64_t v1343 = *(unsigned __int16 *)(v1342 + 2 * v1333);
                  uint64_t v1345 = v195[7];
                  uint64_t v1344 = v195[8];
                  unint64_t v1346 = (v1344 - v1345) >> 3;
                  if (v1346 > v1343)
                  {
                    uint64_t v1347 = v1345 + 8 * v1343;
                    if (v1347 != v1344 && *(_DWORD *)(v1347 + 4) == v1328)
                    {
                      uint64_t v1349 = v196[4];
                      unint64_t v1350 = (v196[5] - v1349) >> 3;
                      if (v1329 < v1350)
                      {
                        uint64_t v1351 = *(void *)(v1349 + 8 * v1329);
                        if (v1351)
                        {
                          unint64_t v1352 = *(unsigned __int16 *)(v1351 + 2 * v1333);
                          uint64_t v1354 = v196[7];
                          uint64_t v1353 = v196[8];
                          unint64_t v1355 = (v1353 - v1354) >> 3;
                          if (v1355 > v1352)
                          {
                            uint64_t v1356 = v1354 + 8 * v1352;
                            if (v1356 != v1353 && *(_DWORD *)(v1356 + 4) == v1328)
                            {
                              unint64_t v1358 = *v779;
                              unint64_t v1359 = HIDWORD(*v779);
                              unint64_t v1360 = *v779 >> 39;
                              if (v1360 < v1331
                                && (uint64_t v1361 = *(void *)(v1330 + 8 * v1360)) != 0
                                && (unint64_t v1362 = *(unsigned __int16 *)(v1361 + 2 * (HIDWORD(v1358) & 0x7F)), v1337 > v1362)
                                && (uint64_t v1363 = v1336 + 8 * v1362, v1363 != v1335)
                                && *(_DWORD *)(v1363 + 4) == v1359)
                              {
                                v1364 = (float *)(v194[10] + 24 * v1362);
                              }
                              else
                              {
                                v1364 = (float *)v194[11];
                              }
                              if (v1360 < v1341
                                && (uint64_t v1365 = *(void *)(v1340 + 8 * v1360)) != 0
                                && (unint64_t v1366 = *(unsigned __int16 *)(v1365 + 2 * (HIDWORD(v1358) & 0x7F)), v1346 > v1366)
                                && (uint64_t v1367 = v1345 + 8 * v1366, v1367 != v1344)
                                && *(_DWORD *)(v1367 + 4) == v1359)
                              {
                                uint64_t v1368 = v195[10] + 24 * v1366;
                              }
                              else
                              {
                                uint64_t v1368 = v195[11];
                              }
                              if (v1360 < v1350
                                && (uint64_t v1369 = *(void *)(v1349 + 8 * v1360)) != 0
                                && (unint64_t v1370 = *(unsigned __int16 *)(v1369 + 2 * (HIDWORD(v1358) & 0x7F)), v1355 > v1370)
                                && (uint64_t v1371 = v1354 + 8 * v1370, v1371 != v1353)
                                && *(_DWORD *)(v1371 + 4) == v1359)
                              {
                                uint64_t v1327 = v196[10] + 16 * v1370;
                              }
                              else
                              {
                                uint64_t v1327 = v196[11];
                              }
                              processRotationAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v1364, v1368, v1327);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  unint64_t v204 = *(int8x8_t **)(v1533 + 120);
  v1561[0] = v204;
  uint64_t v1558 = 0x1182AA34D6B77F4FLL;
  int8x8_t v205 = v204[16];
  if (!*(void *)&v205) {
    goto LABEL_809;
  }
  uint8x8_t v206 = (uint8x8_t)vcnt_s8(v205);
  v206.i16[0] = vaddlv_u8(v206);
  if (v206.u32[0] > 1uLL)
  {
    uint64_t v207 = 0x1182AA34D6B77F4FLL;
    if (*(void *)&v205 <= 0x1182AA34D6B77F4FuLL) {
      uint64_t v207 = 0x1182AA34D6B77F4FuLL % *(void *)&v205;
    }
  }
  else
  {
    uint64_t v207 = (*(void *)&v205 - 1) & 0x1182AA34D6B77F4FLL;
  }
  v781 = *(void **)(*(void *)&v204[15] + 8 * v207);
  if (!v781 || (v782 = (void *)*v781) == 0) {
LABEL_809:
  }
    operator new();
  if (v206.u32[0] < 2uLL)
  {
    uint64_t v783 = *(void *)&v205 - 1;
    while (1)
    {
      uint64_t v785 = v782[1];
      if (v785 == 0x1182AA34D6B77F4FLL)
      {
        if (v782[2] == 0x1182AA34D6B77F4FLL) {
          goto LABEL_831;
        }
      }
      else if ((v785 & v783) != v207)
      {
        goto LABEL_809;
      }
      v782 = (void *)*v782;
      if (!v782) {
        goto LABEL_809;
      }
    }
  }
  while (1)
  {
    unint64_t v784 = v782[1];
    if (v784 == 0x1182AA34D6B77F4FLL) {
      break;
    }
    if (v784 >= *(void *)&v205) {
      v784 %= *(void *)&v205;
    }
    if (v784 != v207) {
      goto LABEL_809;
    }
LABEL_799:
    v782 = (void *)*v782;
    if (!v782) {
      goto LABEL_809;
    }
  }
  if (v782[2] != 0x1182AA34D6B77F4FLL) {
    goto LABEL_799;
  }
LABEL_831:
  v804 = (void *)v782[3];
  v786 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(v204);
  v787 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(v204);
  unint64_t result = gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(v204);
  v789 = (void *)result;
  v790 = (gdc::Registry *)(result + 32);
  v792 = (unint64_t *)v804[7];
  v791 = (uint64_t *)v804[8];
  if (v786[8] - v786[7] >= (unint64_t)((char *)v791 - (char *)v792)) {
    v793 = (gdc::Registry *)(v804 + 4);
  }
  else {
    v793 = (gdc::Registry *)(v786 + 4);
  }
  if (v787[8] - v787[7] < *((void *)v793 + 4) - *((void *)v793 + 3)) {
    v793 = (gdc::Registry *)(v787 + 4);
  }
  if (*(void *)(result + 64) - *(void *)(result + 56) >= *((void *)v793 + 4) - *((void *)v793 + 3)) {
    v794 = v793;
  }
  else {
    v794 = (gdc::Registry *)(result + 32);
  }
  if (v804 + 4 == (void *)v794)
  {
    *(void *)&long long v1562 = v1561;
    if (v792 != (unint64_t *)v791)
    {
      v795 = (float *)(v804[10] + 4);
      do
      {
        unint64_t v1373 = *((unsigned int *)v792 + 1);
        unint64_t v1374 = v1373 >> 7;
        uint64_t v1375 = v786[4];
        unint64_t v1376 = (v786[5] - v1375) >> 3;
        if (v1373 >> 7 < v1376)
        {
          uint64_t v1377 = *(void *)(v1375 + 8 * v1374);
          if (v1377)
          {
            uint64_t v1378 = v1373 & 0x7F;
            unint64_t v1379 = *(unsigned __int16 *)(v1377 + 2 * v1378);
            uint64_t v1381 = v786[7];
            uint64_t v1380 = v786[8];
            unint64_t result = (v1380 - v1381) >> 3;
            if (result > v1379)
            {
              uint64_t v1382 = v1381 + 8 * v1379;
              if (v1382 != v1380 && *(_DWORD *)(v1382 + 4) == v1373)
              {
                uint64_t v1384 = v787[4];
                unint64_t v1385 = (v787[5] - v1384) >> 3;
                if (v1374 < v1385)
                {
                  uint64_t v1386 = *(void *)(v1384 + 8 * v1374);
                  if (v1386)
                  {
                    unint64_t v1387 = *(unsigned __int16 *)(v1386 + 2 * v1378);
                    uint64_t v1389 = v787[7];
                    uint64_t v1388 = v787[8];
                    unint64_t v1390 = (v1388 - v1389) >> 3;
                    if (v1390 > v1387)
                    {
                      uint64_t v1391 = v1389 + 8 * v1387;
                      if (v1391 != v1388 && *(_DWORD *)(v1391 + 4) == v1373)
                      {
                        uint64_t v1393 = v789[4];
                        if (v1374 < (v789[5] - v1393) >> 3)
                        {
                          uint64_t v1394 = *(void *)(v1393 + 8 * v1374);
                          if (v1394)
                          {
                            unint64_t v1395 = *(unsigned __int16 *)(v1394 + 2 * v1378);
                            uint64_t v1397 = v789[7];
                            uint64_t v1396 = v789[8];
                            if (v1395 < (v1396 - v1397) >> 3)
                            {
                              uint64_t v1398 = v1397 + 8 * v1395;
                              if (v1398 != v1396 && *(_DWORD *)(v1398 + 4) == v1373)
                              {
                                unint64_t v1400 = *v792;
                                unint64_t v1401 = HIDWORD(*v792);
                                unint64_t v1402 = *v792 >> 39;
                                if (v1402 < v1376
                                  && (uint64_t v1403 = *(void *)(v1375 + 8 * v1402)) != 0
                                  && (unint64_t v1404 = *(unsigned __int16 *)(v1403 + 2 * (HIDWORD(v1400) & 0x7F)), result > v1404)
                                  && (uint64_t v1405 = v1381 + 8 * v1404, v1405 != v1380)
                                  && *(_DWORD *)(v1405 + 4) == v1401)
                                {
                                  uint64_t v1406 = v786[10] + 24 * v1404;
                                }
                                else
                                {
                                  uint64_t v1406 = v786[11];
                                }
                                v1556 = v790;
                                if (v1402 < v1385
                                  && (uint64_t v1407 = *(void *)(v1384 + 8 * v1402)) != 0
                                  && (unint64_t v1408 = *(unsigned __int16 *)(v1407 + 2 * (HIDWORD(v1400) & 0x7F)), v1390 > v1408)
                                  && (uint64_t v1409 = v1389 + 8 * v1408, v1409 != v1388)
                                  && *(_DWORD *)(v1409 + 4) == v1401)
                                {
                                  uint64_t v1372 = v787[10] + 16 * v1408;
                                }
                                else
                                {
                                  uint64_t v1372 = v787[11];
                                }
                                unint64_t result = processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v1406, v1372, *(v795 - 1), *v795);
                                v790 = v1556;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v792;
        v795 += 2;
      }
      while (v792 != (unint64_t *)v791);
    }
  }
  if (v786 + 4 == (void *)v794)
  {
    *(void *)&long long v1562 = v1561;
    v796 = (unint64_t *)v786[7];
    v797 = (uint64_t *)v786[8];
    if (v796 != (unint64_t *)v797)
    {
      uint64_t v798 = v786[10];
      do
      {
        unint64_t v1412 = *((unsigned int *)v796 + 1);
        unint64_t v1413 = v1412 >> 7;
        uint64_t v1414 = v804[4];
        unint64_t v1415 = (v804[5] - v1414) >> 3;
        if (v1412 >> 7 < v1415)
        {
          uint64_t v1416 = *(void *)(v1414 + 8 * v1413);
          if (v1416)
          {
            uint64_t v1417 = v1412 & 0x7F;
            unint64_t v1418 = *(unsigned __int16 *)(v1416 + 2 * v1417);
            uint64_t v1420 = v804[7];
            uint64_t v1419 = v804[8];
            unint64_t result = (v1419 - v1420) >> 3;
            if (result > v1418)
            {
              uint64_t v1421 = v1420 + 8 * v1418;
              if (v1421 != v1419 && *(_DWORD *)(v1421 + 4) == v1412)
              {
                uint64_t v1423 = v787[4];
                unint64_t v1424 = (v787[5] - v1423) >> 3;
                if (v1413 < v1424)
                {
                  uint64_t v1425 = *(void *)(v1423 + 8 * v1413);
                  if (v1425)
                  {
                    unint64_t v1426 = *(unsigned __int16 *)(v1425 + 2 * v1417);
                    uint64_t v1428 = v787[7];
                    uint64_t v1427 = v787[8];
                    unint64_t v1429 = (v1427 - v1428) >> 3;
                    if (v1429 > v1426)
                    {
                      uint64_t v1430 = v1428 + 8 * v1426;
                      if (v1430 != v1427 && *(_DWORD *)(v1430 + 4) == v1412)
                      {
                        uint64_t v1432 = v789[4];
                        if (v1413 < (v789[5] - v1432) >> 3)
                        {
                          uint64_t v1433 = *(void *)(v1432 + 8 * v1413);
                          if (v1433)
                          {
                            unint64_t v1434 = *(unsigned __int16 *)(v1433 + 2 * v1417);
                            uint64_t v1436 = v789[7];
                            uint64_t v1435 = v789[8];
                            if (v1434 < (v1435 - v1436) >> 3)
                            {
                              uint64_t v1437 = v1436 + 8 * v1434;
                              if (v1437 != v1435 && *(_DWORD *)(v1437 + 4) == v1412)
                              {
                                unint64_t v1439 = *v796;
                                unint64_t v1440 = HIDWORD(*v796);
                                unint64_t v1441 = *v796 >> 39;
                                if (v1441 < v1415
                                  && (uint64_t v1442 = *(void *)(v1414 + 8 * v1441)) != 0
                                  && (unint64_t v1443 = *(unsigned __int16 *)(v1442 + 2 * (HIDWORD(v1439) & 0x7F)), result > v1443)
                                  && (uint64_t v1444 = v1420 + 8 * v1443, v1444 != v1419)
                                  && *(_DWORD *)(v1444 + 4) == v1440)
                                {
                                  v1445 = (float *)(v804[10] + 8 * v1443);
                                }
                                else
                                {
                                  v1445 = (float *)v804[11];
                                }
                                if (v1441 < v1424
                                  && (uint64_t v1446 = *(void *)(v1423 + 8 * v1441)) != 0
                                  && (unint64_t v1447 = *(unsigned __int16 *)(v1446 + 2 * (HIDWORD(v1439) & 0x7F)), v1429 > v1447)
                                  && (uint64_t v1448 = v1428 + 8 * v1447, v1448 != v1427)
                                  && *(_DWORD *)(v1448 + 4) == v1440)
                                {
                                  v1410 = v790;
                                  uint64_t v1411 = v787[10] + 16 * v1447;
                                }
                                else
                                {
                                  v1410 = v790;
                                  uint64_t v1411 = v787[11];
                                }
                                unint64_t result = processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v798, v1411, *v1445, v1445[1]);
                                v790 = v1410;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v798 += 24;
        ++v796;
      }
      while (v796 != (unint64_t *)v797);
    }
  }
  if (v787 + 4 == (void *)v794)
  {
    *(void *)&long long v1562 = v1561;
    v799 = (unint64_t *)v787[7];
    v800 = (uint64_t *)v787[8];
    if (v799 != (unint64_t *)v800)
    {
      uint64_t v801 = v787[10];
      do
      {
        unint64_t v1451 = *((unsigned int *)v799 + 1);
        unint64_t v1452 = v1451 >> 7;
        uint64_t v1453 = v804[4];
        unint64_t v1454 = (v804[5] - v1453) >> 3;
        if (v1451 >> 7 < v1454)
        {
          uint64_t v1455 = *(void *)(v1453 + 8 * v1452);
          if (v1455)
          {
            uint64_t v1456 = v1451 & 0x7F;
            unint64_t v1457 = *(unsigned __int16 *)(v1455 + 2 * v1456);
            uint64_t v1459 = v804[7];
            uint64_t v1458 = v804[8];
            unint64_t result = (v1458 - v1459) >> 3;
            if (result > v1457)
            {
              uint64_t v1460 = v1459 + 8 * v1457;
              if (v1460 != v1458 && *(_DWORD *)(v1460 + 4) == v1451)
              {
                uint64_t v1462 = v786[4];
                unint64_t v1463 = (v786[5] - v1462) >> 3;
                if (v1452 < v1463)
                {
                  uint64_t v1464 = *(void *)(v1462 + 8 * v1452);
                  if (v1464)
                  {
                    unint64_t v1465 = *(unsigned __int16 *)(v1464 + 2 * v1456);
                    uint64_t v1467 = v786[7];
                    uint64_t v1466 = v786[8];
                    unint64_t v1468 = (v1466 - v1467) >> 3;
                    if (v1468 > v1465)
                    {
                      uint64_t v1469 = v1467 + 8 * v1465;
                      if (v1469 != v1466 && *(_DWORD *)(v1469 + 4) == v1451)
                      {
                        uint64_t v1471 = v789[4];
                        if (v1452 < (v789[5] - v1471) >> 3)
                        {
                          uint64_t v1472 = *(void *)(v1471 + 8 * v1452);
                          if (v1472)
                          {
                            unint64_t v1473 = *(unsigned __int16 *)(v1472 + 2 * v1456);
                            uint64_t v1475 = v789[7];
                            uint64_t v1474 = v789[8];
                            if (v1473 < (v1474 - v1475) >> 3)
                            {
                              uint64_t v1476 = v1475 + 8 * v1473;
                              if (v1476 != v1474 && *(_DWORD *)(v1476 + 4) == v1451)
                              {
                                unint64_t v1478 = *v799;
                                unint64_t v1479 = HIDWORD(*v799);
                                unint64_t v1480 = *v799 >> 39;
                                if (v1480 < v1454
                                  && (uint64_t v1481 = *(void *)(v1453 + 8 * v1480)) != 0
                                  && (unint64_t v1482 = *(unsigned __int16 *)(v1481 + 2 * (HIDWORD(v1478) & 0x7F)), result > v1482)
                                  && (uint64_t v1483 = v1459 + 8 * v1482, v1483 != v1458)
                                  && *(_DWORD *)(v1483 + 4) == v1479)
                                {
                                  v1484 = (float *)(v804[10] + 8 * v1482);
                                }
                                else
                                {
                                  v1484 = (float *)v804[11];
                                }
                                if (v1480 < v1463
                                  && (uint64_t v1485 = *(void *)(v1462 + 8 * v1480)) != 0
                                  && (unint64_t v1486 = *(unsigned __int16 *)(v1485 + 2 * (HIDWORD(v1478) & 0x7F)), v1468 > v1486)
                                  && (uint64_t v1487 = v1467 + 8 * v1486, v1487 != v1466)
                                  && *(_DWORD *)(v1487 + 4) == v1479)
                                {
                                  v1449 = v790;
                                  uint64_t v1450 = v786[10] + 24 * v1486;
                                }
                                else
                                {
                                  v1449 = v790;
                                  uint64_t v1450 = v786[11];
                                }
                                unint64_t result = processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v1450, v801, *v1484, v1484[1]);
                                v790 = v1449;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v801 += 16;
        ++v799;
      }
      while (v799 != (unint64_t *)v800);
    }
  }
  if (v790 == v794)
  {
    *(void *)&long long v1562 = v1561;
    v803 = (unint64_t *)v789[7];
    for (muint64_t m = (uint64_t *)v789[8]; v803 != (unint64_t *)mm; ++v803)
    {
      unint64_t v1489 = *((unsigned int *)v803 + 1);
      unint64_t v1490 = v1489 >> 7;
      uint64_t v1491 = v804[4];
      unint64_t v1492 = (v804[5] - v1491) >> 3;
      if (v1489 >> 7 < v1492)
      {
        uint64_t v1493 = *(void *)(v1491 + 8 * v1490);
        if (v1493)
        {
          uint64_t v1494 = v1489 & 0x7F;
          unint64_t v1495 = *(unsigned __int16 *)(v1493 + 2 * v1494);
          uint64_t v1496 = v804[7];
          unint64_t result = v804[8];
          unint64_t v1497 = (uint64_t)(result - v1496) >> 3;
          if (v1497 > v1495)
          {
            uint64_t v1498 = v1496 + 8 * v1495;
            if (v1498 != result && *(_DWORD *)(v1498 + 4) == v1489)
            {
              uint64_t v1500 = v786[4];
              unint64_t v1501 = (v786[5] - v1500) >> 3;
              if (v1490 < v1501)
              {
                uint64_t v1502 = *(void *)(v1500 + 8 * v1490);
                if (v1502)
                {
                  unint64_t v1503 = *(unsigned __int16 *)(v1502 + 2 * v1494);
                  uint64_t v1505 = v786[7];
                  uint64_t v1504 = v786[8];
                  unint64_t v1506 = (v1504 - v1505) >> 3;
                  if (v1506 > v1503)
                  {
                    uint64_t v1507 = v1505 + 8 * v1503;
                    if (v1507 != v1504 && *(_DWORD *)(v1507 + 4) == v1489)
                    {
                      uint64_t v1509 = v787[4];
                      unint64_t v1510 = (v787[5] - v1509) >> 3;
                      if (v1490 < v1510)
                      {
                        uint64_t v1511 = *(void *)(v1509 + 8 * v1490);
                        if (v1511)
                        {
                          unint64_t v1512 = *(unsigned __int16 *)(v1511 + 2 * v1494);
                          uint64_t v1514 = v787[7];
                          uint64_t v1513 = v787[8];
                          unint64_t v1515 = (v1513 - v1514) >> 3;
                          if (v1515 > v1512)
                          {
                            uint64_t v1516 = v1514 + 8 * v1512;
                            if (v1516 != v1513 && *(_DWORD *)(v1516 + 4) == v1489)
                            {
                              unint64_t v1518 = *v803;
                              unint64_t v1519 = HIDWORD(*v803);
                              unint64_t v1520 = *v803 >> 39;
                              if (v1520 < v1492
                                && (uint64_t v1521 = *(void *)(v1491 + 8 * v1520)) != 0
                                && (unint64_t v1522 = *(unsigned __int16 *)(v1521 + 2 * (HIDWORD(v1518) & 0x7F)), v1497 > v1522)
                                && (uint64_t v1523 = v1496 + 8 * v1522, v1523 != result)
                                && *(_DWORD *)(v1523 + 4) == v1519)
                              {
                                v1524 = (float *)(v804[10] + 8 * v1522);
                              }
                              else
                              {
                                v1524 = (float *)v804[11];
                              }
                              if (v1520 < v1501
                                && (uint64_t v1525 = *(void *)(v1500 + 8 * v1520)) != 0
                                && (unint64_t v1526 = *(unsigned __int16 *)(v1525 + 2 * (HIDWORD(v1518) & 0x7F)), v1506 > v1526)
                                && (uint64_t v1527 = v1505 + 8 * v1526, v1527 != v1504)
                                && *(_DWORD *)(v1527 + 4) == v1519)
                              {
                                uint64_t v1528 = v786[10] + 24 * v1526;
                              }
                              else
                              {
                                uint64_t v1528 = v786[11];
                              }
                              if (v1520 < v1510
                                && (uint64_t v1529 = *(void *)(v1509 + 8 * v1520)) != 0
                                && (unint64_t v1530 = *(unsigned __int16 *)(v1529 + 2 * (HIDWORD(v1518) & 0x7F)), v1515 > v1530)
                                && (uint64_t v1531 = v1514 + 8 * v1530, v1531 != v1513)
                                && *(_DWORD *)(v1531 + 4) == v1519)
                              {
                                uint64_t v1488 = v787[10] + 16 * v1530;
                              }
                              else
                              {
                                uint64_t v1488 = v787[11];
                              }
                              unint64_t result = processScaleAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()((int8x8_t ***)&v1562, v1528, v1488, *v1524, v1524[1]);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1A1F5AFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  long long v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(void *)(v32 - 168) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>(int8x8_t *a1)
{
  unint64_t v10 = 0xB7988916C13D056ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB7988916C13D056ALL;
    if (*(void *)&v1 <= 0xB7988916C13D056ALL) {
      unint64_t v3 = 0xB7988916C13D056ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB7988916C13D056ALL;
  }
  double v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB7988916C13D056ALL)
      {
        if (v5[2] == 0xB7988916C13D056ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB7988916C13D056ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB7988916C13D056ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5B3B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationDuration>(int8x8_t *a1)
{
  uint64_t v10 = 0x123588C1A18C7310;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x123588C1A18C7310;
    if (*(void *)&v1 <= 0x123588C1A18C7310uLL) {
      uint64_t v3 = 0x123588C1A18C7310uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x123588C1A18C7310;
  }
  double v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x123588C1A18C7310)
      {
        if (v5[2] == 0x123588C1A18C7310) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x123588C1A18C7310) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x123588C1A18C7310) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5B624(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationGroupAssociation>(int8x8_t *a1)
{
  unint64_t v10 = 0xCEA021FDB92686D6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCEA021FDB92686D6;
    if (*(void *)&v1 <= 0xCEA021FDB92686D6) {
      unint64_t v3 = 0xCEA021FDB92686D6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCEA021FDB92686D6;
  }
  double v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCEA021FDB92686D6)
      {
        if (v5[2] == 0xCEA021FDB92686D6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCEA021FDB92686D6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCEA021FDB92686D6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5B894(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)1>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC2D2914D000E6B65;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC2D2914D000E6B65;
    if (*(void *)&v1 <= 0xC2D2914D000E6B65) {
      unint64_t v3 = 0xC2D2914D000E6B65 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC2D2914D000E6B65;
  }
  double v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC2D2914D000E6B65)
      {
        if (v5[2] == 0xC2D2914D000E6B65) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC2D2914D000E6B65) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC2D2914D000E6B65) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5BB04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_0::operator()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4 = HIDWORD(a4);
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  stopAndReleaseAnimation(a3, a4, *(void **)a1, 0);
  if (GEOGetVectorKitARAnimationLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_45);
  }
  unint64_t v7 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v29[0] = 67109120;
    v29[1] = v4;
    _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_INFO, "Animating : Animation stopped: %d", (uint8_t *)v29, 8u);
  }

  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(**(int8x8_t ***)(a1 + 8));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v8, a2);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v11 = *(uint64_t **)(v9 + 8);
  unint64_t v10 = *(void *)(v9 + 16);
  if ((unint64_t)v11 >= v10)
  {
    int8x8_t v13 = *(uint64_t **)v9;
    uint64_t v14 = (uint64_t)v11 - *(void *)v9;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = v10 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v19 = operator new(8 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    unint64_t v20 = (uint64_t *)&v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    uint64_t *v20 = a2;
    int v12 = v20 + 1;
    if (v11 == v13)
    {
      int8x8_t v13 = v11;
    }
    else
    {
      unint64_t v22 = (char *)v11 - (char *)v13 - 8;
      if (v22 < 0x58) {
        goto LABEL_33;
      }
      if ((unint64_t)((char *)v11 - v19 - v14) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = &v19[8 * v15 - 16];
      uint64_t v25 = v11 - 2;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *uint64_t v24 = v27;
        v24 -= 2;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          uint64_t v28 = *--v11;
          *--unint64_t v20 = v28;
        }
        while (v11 != v13);
        int8x8_t v13 = *(uint64_t **)v9;
      }
    }
    *(void *)uint64_t v9 = v20;
    *(void *)(v9 + 8) = v12;
    *(void *)(v9 + 16) = v21;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *unint64_t v11 = a2;
    int v12 = v11 + 1;
  }
  *(void *)(v9 + 8) = v12;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AnimationState<(VKAnimationState)1>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::remove();
}

uint64_t gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)0>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>();
}

uint64_t gdc::Registry::storage<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>(int8x8_t *a1)
{
  uint64_t v10 = 0x36475A4976FF3838;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x36475A4976FF3838;
    if (*(void *)&v1 <= 0x36475A4976FF3838uLL) {
      uint64_t v3 = 0x36475A4976FF3838uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x36475A4976FF3838;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x36475A4976FF3838)
      {
        if (v5[2] == 0x36475A4976FF3838) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x36475A4976FF3838) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x36475A4976FF3838) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5C1BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void stopExistingAnimations(gdc::Registry *,std::unordered_map<gdc::EntityId,std::unordered_map<int,VKTimedAnimation * {__strong}>> &)::$_1::operator()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4 = HIDWORD(a4);
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  stopAndReleaseAnimation(a3, a4, *(void **)a1, 1);
  unint64_t v7 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)3>>(**(int8x8_t ***)(a1 + 8));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v7, a2);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(uint64_t **)(v8 + 8);
  unint64_t v9 = *(void *)(v8 + 16);
  uint64_t v11 = v10;
  if ((unint64_t)v10 >= v9)
  {
    int8x8_t v13 = *(uint64_t **)v8;
    uint64_t v14 = (uint64_t)v10 - *(void *)v8;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = v9 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v19 = operator new(8 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    unint64_t v20 = (uint64_t *)&v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    uint64_t *v20 = a2;
    int v12 = v20 + 1;
    if (v10 == v13)
    {
      int8x8_t v13 = v10;
    }
    else
    {
      unint64_t v22 = (char *)v10 - (char *)v13 - 8;
      if (v22 < 0x58) {
        goto LABEL_33;
      }
      if ((unint64_t)((char *)v10 - v19 - v14) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v11 = &v10[-(v23 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v24 = &v19[8 * v15 - 16];
      uint64_t v25 = v10 - 2;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *uint64_t v24 = v27;
        v24 -= 2;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          uint64_t v28 = *--v11;
          *--unint64_t v20 = v28;
        }
        while (v11 != v13);
        int8x8_t v13 = *(uint64_t **)v8;
      }
    }
    *(void *)uint64_t v8 = v20;
    *(void *)(v8 + 8) = v12;
    *(void *)(v8 + 16) = v21;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    uint64_t *v10 = a2;
    int v12 = v10 + 1;
  }
  *(void *)(v8 + 8) = v12;
  if (GEOGetVectorKitARAnimationLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARAnimationLog_onceToken, &__block_literal_global_45);
  }
  long long v29 = (id)GEOGetVectorKitARAnimationLog_log;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30[0] = 67109120;
    v30[1] = v4;
    _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_INFO, "Animating : Animation completed: %d", (uint8_t *)v30, 8u);
  }
}

uint64_t gdc::ComponentStorageWrapper<arComponents::StopAnimationRequest<(arComponents::StopAnimationType)1>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>();
}

uint64_t gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>(int8x8_t *a1)
{
  uint64_t v10 = 0x5A61F07088E4D192;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5A61F07088E4D192;
    if (*(void *)&v1 <= 0x5A61F07088E4D192uLL) {
      uint64_t v3 = 0x5A61F07088E4D192uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5A61F07088E4D192;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5A61F07088E4D192)
      {
        if (v5[2] == 0x5A61F07088E4D192) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5A61F07088E4D192) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5A61F07088E4D192) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5C780(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::Registry::add<arComponents::AnimationInfo,arComponents::AnimationGroupAssociation,arComponents::AnimationGroupProgress,arComponents::TimeBasedStart,arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>,arComponents::AnimationDuration,arComponents::AnimationState<(VKAnimationState)0>>(int8x8_t *a1, uint64_t a2, _OWORD *a3, void *a4, _DWORD *a5, long long *a6, uint64_t *a7)
{
  uint64_t v14 = (void *)gdc::Registry::storage<arComponents::AnimationInfo>(a1);
  gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(v14, a2, a3);
  uint64_t v15 = (void *)gdc::Registry::storage<arComponents::AnimationGroupAssociation>(a1);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v15, a2, a4);
  uint64_t v16 = (void *)gdc::Registry::storage<arComponents::AnimationGroupProgress>(a1);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v16, a2, a5);
  unint64_t v17 = (void *)gdc::Registry::storage<arComponents::TimeBasedStart>(a1);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v17, a2);
  uint64_t v18 = (void *)gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(a1);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v18, a2, a6);
  uint64_t v19 = (void *)gdc::Registry::storage<arComponents::AnimationDuration>(a1);
  gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(v19, a2, a7);
  unint64_t v20 = (void *)gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(a1);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v20, a2);
}

uint64_t gdc::Registry::storage<arComponents::AnimationGroupProgress>(int8x8_t *a1)
{
  unint64_t v10 = 0xCE983FFC149A5AACLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCE983FFC149A5AACLL;
    if (*(void *)&v1 <= 0xCE983FFC149A5AACLL) {
      unint64_t v3 = 0xCE983FFC149A5AACLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCE983FFC149A5AACLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCE983FFC149A5AACLL)
      {
        if (v5[2] == 0xCE983FFC149A5AACLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCE983FFC149A5AACLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCE983FFC149A5AACLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5CACC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationDependencyOn>(int8x8_t *a1)
{
  unint64_t v10 = 0xF42391DDAC21667CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF42391DDAC21667CLL;
    if (*(void *)&v1 <= 0xF42391DDAC21667CLL) {
      unint64_t v3 = 0xF42391DDAC21667CLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF42391DDAC21667CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF42391DDAC21667CLL)
      {
        if (v5[2] == 0xF42391DDAC21667CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF42391DDAC21667CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF42391DDAC21667CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5CD3C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AnimationTarget<(arComponents::AnimationProperty)0,gm::Matrix<float,3,1>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x30A6CC1B9187F411;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x30A6CC1B9187F411;
    if (*(void *)&v1 <= 0x30A6CC1B9187F411uLL) {
      uint64_t v3 = 0x30A6CC1B9187F411uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x30A6CC1B9187F411;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x30A6CC1B9187F411)
      {
        if (v5[2] == 0x30A6CC1B9187F411) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x30A6CC1B9187F411) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x30A6CC1B9187F411) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5CFAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AnimationDuration>::emplace(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v36 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v36);
  if (v6)
  {
    unint64_t v15 = a1[11];
    unint64_t v14 = a1[12];
    if (v15 >= v14)
    {
      uint64_t v18 = a1[10];
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v18) >> 3);
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_35;
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v18) >> 3);
      uint64_t v21 = 2 * v20;
      if (2 * v20 <= v19 + 1) {
        uint64_t v21 = v19 + 1;
      }
      if (v20 >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v23 = (char *)operator new(24 * v22);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = &v23[24 * v19];
      uint64_t v25 = &v23[24 * v22];
      *(void *)uint64_t v24 = *a3;
      *((_DWORD *)v24 + 2) = *((_DWORD *)a3 + 2);
      *((void *)v24 + 2) = MEMORY[0x1A6239EB0](a3[2]);
      unint64_t v17 = v24 + 24;
      uint64_t v26 = a1[10];
      uint64_t v27 = a1[11];
      if (v27 == v26)
      {
        a1[10] = v24;
        a1[11] = v17;
        a1[12] = v25;
        if (!v27) {
          goto LABEL_26;
        }
      }
      else
      {
        do
        {
          uint64_t v28 = *(void *)(v27 - 24);
          v27 -= 24;
          int v29 = *(_DWORD *)(v27 + 8);
          *((void *)v24 - 3) = v28;
          v24 -= 24;
          *((_DWORD *)v24 + 2) = v29;
          uint64_t v30 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = 0;
          *((void *)v24 + 2) = v30;
        }
        while (v27 != v26);
        uint64_t v27 = a1[10];
        uint64_t v31 = a1[11];
        a1[10] = v24;
        a1[11] = v17;
        a1[12] = v25;
        if (v31 != v27)
        {
          do
          {
            uint64_t v32 = v31 - 24;

            uint64_t v31 = v32;
          }
          while (v32 != v27);
        }
        if (!v27) {
          goto LABEL_26;
        }
      }
      operator delete((void *)v27);
    }
    else
    {
      uint64_t v16 = *a3;
      *(_DWORD *)(v15 + 8) = *((_DWORD *)a3 + 2);
      *(void *)unint64_t v15 = v16;
      *(void *)(v15 + 16) = MEMORY[0x1A6239EB0](a3[2]);
      unint64_t v17 = (char *)(v15 + 24);
    }
LABEL_26:
    a1[11] = v17;
    goto LABEL_27;
  }
  uint64_t v7 = a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3);
  uint64_t v8 = *a3;
  *(_DWORD *)(v7 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v7 = v8;
  uint64_t v9 = a3[2];
  a3[2] = 0;
  uint64_t v10 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v9;

  if (v7 != a1[11])
  {
    uint64_t v11 = (void *)a1[16];
    if (v11)
    {
      uint64_t v12 = a1[31];
      while (1)
      {
        unint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v12;
        uint64_t v13 = v11[6];
        if (!v13) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v13 + 48))(v13, &v37, &v38);
        uint64_t v11 = (void *)*v11;
        if (!v11) {
          return;
        }
      }
LABEL_34:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
      abort();
    }
    return;
  }
LABEL_27:
  long long v33 = (void *)a1[22];
  if (v33)
  {
    uint64_t v34 = a1[31];
    while (1)
    {
      unint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v34;
      uint64_t v35 = v33[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      long long v33 = (void *)*v33;
      if (!v33) {
        return;
      }
    }
    goto LABEL_34;
  }
}

uint64_t gdc::Registry::storage<arComponents::AnimationState<(VKAnimationState)0>>(int8x8_t *a1)
{
  unint64_t v10 = 0x92A8E86C11220425;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x92A8E86C11220425;
    if (*(void *)&v1 <= 0x92A8E86C11220425) {
      unint64_t v3 = 0x92A8E86C11220425 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x92A8E86C11220425;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x92A8E86C11220425)
      {
        if (v5[2] == 0x92A8E86C11220425) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x92A8E86C11220425) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x92A8E86C11220425) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5D4C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::remove(void *a1, unint64_t a2)
{
  unint64_t v23 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 72 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 72);
  long long v16 = *(_OWORD *)(v15 - 56);
  long long v17 = *(_OWORD *)(v15 - 40);
  long long v18 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 64) = *(void *)(v15 - 8);
  *(_OWORD *)(v14 + 32) = v17;
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 16) = v16;
  a1[11] -= 72;
  unint64_t v19 = (void *)a1[28];
  if (!v19) {
    return 1;
  }
  uint64_t v20 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    uint64_t v24 = v20;
    uint64_t v21 = v19[6];
    if (!v21) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v21 + 48))(v21, &v24, v25);
    unint64_t v19 = (void *)*v19;
    if (!v19) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::TimeBasedStart>(v22);
}

uint64_t gdc::Registry::storage<arComponents::TimeBasedStart>(int8x8_t *a1)
{
  uint64_t v10 = 0x61D2B95408214F8ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x61D2B95408214F8ELL;
    if (*(void *)&v1 <= 0x61D2B95408214F8EuLL) {
      uint64_t v3 = 0x61D2B95408214F8EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x61D2B95408214F8ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x61D2B95408214F8ELL)
      {
        if (v5[2] == 0x61D2B95408214F8ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x61D2B95408214F8ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x61D2B95408214F8ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5D85C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ReadyToStartAnimation>(int8x8_t *a1)
{
  unint64_t v10 = 0xBA4F817314B669D2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBA4F817314B669D2;
    if (*(void *)&v1 <= 0xBA4F817314B669D2) {
      unint64_t v3 = 0xBA4F817314B669D2 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBA4F817314B669D2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBA4F817314B669D2)
      {
        if (v5[2] == 0xBA4F817314B669D2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBA4F817314B669D2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBA4F817314B669D2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1F5DACC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::NeedsPropagateFinished>(int8x8_t *a1)
{
  uint64_t v10 = 0x21F4200BFFAD882CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x21F4200BFFAD882CLL;
    if (*(void *)&v1 <= 0x21F4200BFFAD882CuLL) {
      uint64_t v3 = 0x21F4200BFFAD882CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x21F4200BFFAD882CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x21F4200BFFAD882CLL)
      {
        if (v5[2] == 0x21F4200BFFAD882CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x21F4200BFFAD882CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x21F4200BFFAD882CLL) {
    goto LABEL_11;
  }
  return v5[3];
}