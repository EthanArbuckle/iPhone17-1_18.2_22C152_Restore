uint64_t std::sort[abi:nn180100]<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode *,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1}>(uint64_t a1, int32x2_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2);
  if (a2 == (int32x2_t *)a1) {
    v3 = 0;
  }
  else {
    v3 = v2;
  }
  return std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*,false>(a1, a2, v3, 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*,false>(uint64_t result, int32x2_t *a2, uint64_t a3, char a4)
{
  v9 = (int32x2_t *)result;
  while (2)
  {
    v10 = (__int32 *)&a2[-1] + 1;
    v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = ((char *)a2 - (char *)v11) >> 2;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(unsigned __int16 *)v10 >= v11->u16[0]) {
                  return result;
                }
                __int32 v70 = v11->i32[0];
                goto LABEL_102;
              case 3:
                unsigned int v71 = v11->u16[2];
                unsigned int v72 = *(unsigned __int16 *)v10;
                if (v71 >= v11->u16[0])
                {
                  if (v72 < v71)
                  {
                    __int32 v104 = v11->i32[1];
                    v11->i32[1] = *v10;
                    __int32 *v10 = v104;
                    if (v11->u16[2] < v11->u16[0]) {
                      int32x2_t *v11 = vrev64_s32(*v11);
                    }
                  }
                }
                else
                {
                  __int32 v70 = v11->i32[0];
                  if (v72 >= v71)
                  {
                    v11->i32[0] = v11->i32[1];
                    v11->i32[1] = v70;
                    if (*(unsigned __int16 *)v10 < (unsigned __int16)v70)
                    {
                      v11->i32[1] = *v10;
                      __int32 *v10 = v70;
                    }
                  }
                  else
                  {
LABEL_102:
                    v11->i32[0] = *v10;
                    __int32 *v10 = v70;
                  }
                }
                return result;
              case 4:
                unsigned int v73 = v11->u16[2];
                unsigned int v74 = v11->u16[0];
                unsigned int v75 = v11[1].u16[0];
                if (v73 >= v74)
                {
                  if (v75 < v73)
                  {
                    unsigned int v75 = v11->u32[1];
                    __int32 v105 = v11[1].i32[0];
                    v11->i32[1] = v105;
                    v11[1].i32[0] = v75;
                    unsigned int v75 = (unsigned __int16)v75;
                    if (v74 > (unsigned __int16)v105)
                    {
                      __int32 v106 = v11->i32[0];
                      v11->i32[0] = v105;
                      v11->i32[1] = v106;
                    }
                  }
                }
                else
                {
                  __int32 v76 = v11->i32[0];
                  unsigned int v77 = (unsigned __int16)v11->i32[0];
                  if (v75 >= v73)
                  {
                    v11->i32[0] = v11->i32[1];
                    v11->i32[1] = v76;
                    if (v75 >= v77) {
                      goto LABEL_183;
                    }
                    v11->i32[1] = v11[1].i32[0];
                  }
                  else
                  {
                    v11->i32[0] = v11[1].i32[0];
                  }
                  v11[1].i32[0] = v76;
                  unsigned int v75 = v77;
                }
LABEL_183:
                if (*(unsigned __int16 *)v10 < v75)
                {
                  __int32 v124 = v11[1].i32[0];
                  v11[1].i32[0] = *v10;
                  __int32 *v10 = v124;
                  if (v11[1].u16[0] < v11->u16[2])
                  {
                    __int32 v126 = v11->i32[1];
                    __int32 v125 = v11[1].i32[0];
                    v11->i32[1] = v125;
                    v11[1].i32[0] = v126;
                    if (v11->u16[0] > (unsigned __int16)v125)
                    {
                      __int32 v127 = v11->i32[0];
                      v11->i32[0] = v125;
                      v11->i32[1] = v127;
                    }
                  }
                }
                break;
              case 5:
                return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((unsigned __int16 *)v11, (unsigned __int16 *)v11 + 2, (unsigned int *)&v11[1], (unsigned int *)&v11[1] + 1, (unsigned int *)&a2[-1] + 1);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            v78 = (int32x2_t *)((char *)v11 + 4);
            BOOL v80 = v11 == a2 || v78 == a2;
            if (a4)
            {
              if (!v80)
              {
                uint64_t v81 = 0;
                v82 = v11;
                do
                {
                  unsigned int v84 = v82->u16[2];
                  unsigned int v85 = v82->u16[0];
                  v82 = v78;
                  if (v84 < v85)
                  {
                    __int32 v86 = v78->i32[0];
                    uint64_t v87 = v81;
                    do
                    {
                      *(__int32 *)((char *)&v11->i32[1] + v87) = *(__int32 *)((char *)v11->i32 + v87);
                      if (!v87)
                      {
                        v83 = v11;
                        goto LABEL_119;
                      }
                      unsigned int v88 = *(unsigned __int16 *)((char *)&v11->u16[-2] + v87);
                      v87 -= 4;
                    }
                    while (v88 > (unsigned __int16)v86);
                    v83 = (int32x2_t *)((char *)v11 + v87 + 4);
LABEL_119:
                    v83->i32[0] = v86;
                  }
                  v78 = (int32x2_t *)((char *)v82 + 4);
                  v81 += 4;
                }
                while (&v82->u8[4] != (unsigned __int8 *)a2);
              }
            }
            else if (!v80)
            {
              do
              {
                unsigned int v107 = v9->u16[2];
                unsigned int v108 = v9->u16[0];
                v9 = v78;
                if (v107 < v108)
                {
                  __int32 v109 = v78->i32[0];
                  do
                  {
                    v110 = v78;
                    __int32 v111 = v78[-1].i32[1];
                    v78 = (int32x2_t *)((char *)v78 - 4);
                    v110->i32[0] = v111;
                  }
                  while (v110[-1].u16[0] > (unsigned __int16)v109);
                  v78->i32[0] = v109;
                }
                v78 = (int32x2_t *)((char *)v9 + 4);
              }
              while (&v9->u8[4] != (unsigned __int8 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v89 = (unint64_t)(v13 - 2) >> 1;
              int64_t v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  uint64_t v92 = (2 * v90) | 1;
                  v93 = (unsigned __int16 *)v11 + 2 * v92;
                  if (2 * v90 + 2 < v13)
                  {
                    unsigned int v96 = *v93;
                    unsigned int v94 = v93[2];
                    BOOL v95 = v96 >= v94;
                    if (v96 <= v94) {
                      unsigned int v96 = v93[2];
                    }
                    if (!v95)
                    {
                      v93 += 2;
                      uint64_t v92 = 2 * v90 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v96 = *v93;
                  }
                  v97 = (unsigned __int16 *)v11 + 2 * v90;
                  if (v96 >= *v97)
                  {
                    int v98 = *(_DWORD *)v97;
                    while (1)
                    {
                      v102 = v97;
                      v97 = v93;
                      _DWORD *v102 = *(_DWORD *)v93;
                      if (v89 < v92) {
                        break;
                      }
                      uint64_t v103 = (2 * v92) | 1;
                      v93 = (unsigned __int16 *)v11 + 2 * v103;
                      uint64_t v92 = 2 * v92 + 2;
                      if (v92 < v13)
                      {
                        unsigned int v99 = *v93;
                        result = (uint64_t)(v93 + 2);
                        unsigned int v100 = v93[2];
                        BOOL v101 = v99 >= v100;
                        if (v99 <= v100) {
                          unsigned int v99 = v93[2];
                        }
                        if (v101) {
                          uint64_t v92 = v103;
                        }
                        else {
                          v93 += 2;
                        }
                        if (v99 < (unsigned __int16)v98) {
                          break;
                        }
                      }
                      else
                      {
                        uint64_t v92 = v103;
                        if (*v93 < (unsigned __int16)v98) {
                          break;
                        }
                      }
                    }
                    *(_DWORD *)v97 = v98;
                  }
                }
                BOOL v91 = v90-- <= 0;
              }
              while (!v91);
              uint64_t v112 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v113 = 0;
                __int32 v114 = v11->i32[0];
                v115 = v11;
                do
                {
                  v116 = (int32x2_t *)((char *)v115 + 4 * v113 + 4);
                  uint64_t v117 = (2 * v113) | 1;
                  uint64_t v118 = 2 * v113 + 2;
                  if (v118 < v112 && v116->u16[0] < v116->u16[2])
                  {
                    v116 = (int32x2_t *)((char *)v116 + 4);
                    uint64_t v117 = v118;
                  }
                  v115->i32[0] = v116->i32[0];
                  v115 = v116;
                  uint64_t v113 = v117;
                }
                while (v117 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                a2 = (int32x2_t *)((char *)a2 - 4);
                if (v116 == a2)
                {
                  v116->i32[0] = v114;
                }
                else
                {
                  v116->i32[0] = a2->i32[0];
                  a2->i32[0] = v114;
                  uint64_t v119 = (char *)v116 - (char *)v11 + 4;
                  if (v119 >= 5)
                  {
                    unint64_t v120 = (((unint64_t)v119 >> 2) - 2) >> 1;
                    v121 = (int32x2_t *)((char *)v11 + 4 * v120);
                    if (v121->u16[0] < v116->u16[0])
                    {
                      __int32 v122 = v116->i32[0];
                      do
                      {
                        v123 = v116;
                        v116 = v121;
                        v123->i32[0] = v121->i32[0];
                        if (!v120) {
                          break;
                        }
                        unint64_t v120 = (v120 - 1) >> 1;
                        v121 = (int32x2_t *)((char *)v11 + 4 * v120);
                      }
                      while (v121->u16[0] < (unsigned __int16)v122);
                      v116->i32[0] = v122;
                    }
                  }
                }
                BOOL v91 = v112-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          v15 = (unsigned __int16 *)v11 + 2 * ((unint64_t)v13 >> 1);
          unsigned int v16 = *(unsigned __int16 *)v10;
          if ((unint64_t)v12 < 0x201) {
            break;
          }
          unsigned int v17 = *v15;
          if (v17 >= v11->u16[0])
          {
            if (v16 < v17)
            {
              __int32 v21 = *(_DWORD *)v15;
              *(_DWORD *)v15 = *v10;
              __int32 *v10 = v21;
              if (*v15 < v11->u16[0])
              {
                __int32 v22 = v11->i32[0];
                v11->i32[0] = *(_DWORD *)v15;
                *(_DWORD *)v15 = v22;
              }
            }
          }
          else
          {
            __int32 v18 = v11->i32[0];
            if (v16 >= v17)
            {
              v11->i32[0] = *(_DWORD *)v15;
              *(_DWORD *)v15 = v18;
              if (*(unsigned __int16 *)v10 >= (unsigned __int16)v18) {
                goto LABEL_24;
              }
              *(_DWORD *)v15 = *v10;
            }
            else
            {
              v11->i32[0] = *v10;
            }
            __int32 *v10 = v18;
          }
LABEL_24:
          v25 = (char *)v11 + 4 * v14;
          unsigned int v28 = *((unsigned __int16 *)v25 - 2);
          v26 = v25 - 4;
          unsigned int v27 = v28;
          unsigned int v29 = a2[-1].u16[0];
          if (v28 >= v11->u16[2])
          {
            if (v29 < v27)
            {
              __int32 v31 = *(_DWORD *)v26;
              *(_DWORD *)v26 = a2[-1].i32[0];
              a2[-1].i32[0] = v31;
              if (*(unsigned __int16 *)v26 < v11->u16[2])
              {
                __int32 v32 = v11->i32[1];
                v11->i32[1] = *(_DWORD *)v26;
                *(_DWORD *)v26 = v32;
              }
            }
          }
          else
          {
            __int32 v30 = v11->i32[1];
            if (v29 >= v27)
            {
              v11->i32[1] = *(_DWORD *)v26;
              *(_DWORD *)v26 = v30;
              if (a2[-1].u16[0] >= (unsigned __int16)v30) {
                goto LABEL_38;
              }
              *(_DWORD *)v26 = a2[-1].i32[0];
            }
            else
            {
              v11->i32[1] = a2[-1].i32[0];
            }
            a2[-1].i32[0] = v30;
          }
LABEL_38:
          v34 = (char *)v11 + 4 * v14;
          unsigned int v37 = *((unsigned __int16 *)v34 + 2);
          v35 = (unsigned __int16 *)(v34 + 4);
          unsigned int v36 = v37;
          unsigned int v38 = a2[-2].u16[2];
          if (v37 >= v11[1].u16[0])
          {
            if (v38 < v36)
            {
              __int32 v40 = *(_DWORD *)v35;
              *(_DWORD *)v35 = a2[-2].i32[1];
              a2[-2].i32[1] = v40;
              if (*v35 < v11[1].u16[0])
              {
                __int32 v41 = v11[1].i32[0];
                v11[1].i32[0] = *(_DWORD *)v35;
                *(_DWORD *)v35 = v41;
              }
            }
          }
          else
          {
            __int32 v39 = v11[1].i32[0];
            if (v38 >= v36)
            {
              v11[1].i32[0] = *(_DWORD *)v35;
              *(_DWORD *)v35 = v39;
              if (a2[-2].u16[2] >= (unsigned __int16)v39) {
                goto LABEL_47;
              }
              *(_DWORD *)v35 = a2[-2].i32[1];
            }
            else
            {
              v11[1].i32[0] = a2[-2].i32[1];
            }
            a2[-2].i32[1] = v39;
          }
LABEL_47:
          unsigned int v42 = *v15;
          unsigned int v43 = *(unsigned __int16 *)v26;
          unsigned int v44 = *v35;
          if (v42 >= v43)
          {
            __int32 v45 = *(_DWORD *)v15;
            if (v44 < v42)
            {
              __int32 v46 = *(_DWORD *)v35;
              *(_DWORD *)v15 = *(_DWORD *)v35;
              *(_DWORD *)v35 = v45;
              if (v43 > (unsigned __int16)v46)
              {
                __int32 v45 = *(_DWORD *)v26;
                *(_DWORD *)v26 = v46;
                *(_DWORD *)v15 = v45;
              }
              else
              {
                __int32 v45 = v46;
              }
            }
          }
          else
          {
            __int32 v45 = *(_DWORD *)v26;
            if (v44 >= v42)
            {
              *(_DWORD *)v26 = *(_DWORD *)v15;
              *(_DWORD *)v15 = v45;
              if (v44 < (unsigned __int16)v45)
              {
                __int32 v47 = *(_DWORD *)v35;
                *(_DWORD *)v15 = *(_DWORD *)v35;
                *(_DWORD *)v35 = v45;
                __int32 v45 = v47;
              }
            }
            else
            {
              *(_DWORD *)v26 = *(_DWORD *)v35;
              *(_DWORD *)v35 = v45;
              __int32 v45 = *(_DWORD *)v15;
            }
          }
          __int32 v48 = v11->i32[0];
          v11->i32[0] = v45;
          *(_DWORD *)v15 = v48;
          --a3;
          if (a4) {
            goto LABEL_34;
          }
LABEL_57:
          __int32 v33 = v11->i32[0];
          if (v11[-1].u16[2] < v11->u16[0]) {
            goto LABEL_58;
          }
          unsigned int v61 = (unsigned __int16)v11->i32[0];
          if (*(unsigned __int16 *)v10 > v61)
          {
            do
            {
              unsigned int v62 = v11->u16[2];
              v11 = (int32x2_t *)((char *)v11 + 4);
            }
            while (v62 <= v61);
          }
          else
          {
            v63 = (int32x2_t *)((char *)v11 + 4);
            do
            {
              v11 = v63;
              if (v63 >= a2) {
                break;
              }
              v63 = (int32x2_t *)((char *)v63 + 4);
            }
            while (v11->u16[0] <= v61);
          }
          v64 = a2;
          if (v11 < a2)
          {
            v64 = a2;
            do
            {
              unsigned int v65 = v64[-1].u16[2];
              v64 = (int32x2_t *)((char *)v64 - 4);
            }
            while (v65 > v61);
          }
          while (v11 < v64)
          {
            __int32 v66 = v11->i32[0];
            v11->i32[0] = v64->i32[0];
            v64->i32[0] = v66;
            do
            {
              unsigned int v67 = v11->u16[2];
              v11 = (int32x2_t *)((char *)v11 + 4);
            }
            while (v67 <= v61);
            do
            {
              unsigned int v68 = v64[-1].u16[2];
              v64 = (int32x2_t *)((char *)v64 - 4);
            }
            while (v68 > v61);
          }
          v69 = (__int32 *)&v11[-1] + 1;
          BOOL v4 = &v11[-1].u8[4] >= (unsigned __int8 *)v9;
          BOOL v5 = &v11[-1].u8[4] == (unsigned __int8 *)v9;
          if (&v11[-1].u8[4] != (unsigned __int8 *)v9) {
            v9->i32[0] = *v69;
          }
          a4 = 0;
          __int32 *v69 = v33;
        }
        unsigned int v19 = v11->u16[0];
        if (v19 < *v15)
        {
          __int32 v20 = *(_DWORD *)v15;
          if (v16 >= v19)
          {
            *(_DWORD *)v15 = v11->i32[0];
            v11->i32[0] = v20;
            if (*(unsigned __int16 *)v10 >= (unsigned __int16)v20) {
              goto LABEL_33;
            }
            v11->i32[0] = *v10;
          }
          else
          {
            *(_DWORD *)v15 = *v10;
          }
          __int32 *v10 = v20;
LABEL_33:
          --a3;
          if ((a4 & 1) == 0) {
            goto LABEL_57;
          }
          goto LABEL_34;
        }
        if (v16 >= v19) {
          goto LABEL_33;
        }
        __int32 v23 = v11->i32[0];
        v11->i32[0] = *v10;
        __int32 *v10 = v23;
        if (v11->u16[0] >= *v15) {
          goto LABEL_33;
        }
        __int32 v24 = *(_DWORD *)v15;
        *(_DWORD *)v15 = v11->i32[0];
        v11->i32[0] = v24;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_57;
        }
LABEL_34:
        __int32 v33 = v11->i32[0];
LABEL_58:
        v49 = v11;
        do
        {
          unint64_t v50 = (unint64_t)v49;
          unsigned int v51 = v49->u16[2];
          v49 = (int32x2_t *)((char *)v49 + 4);
        }
        while (v51 < (unsigned __int16)v33);
        v52 = a2;
        if ((int32x2_t *)v50 == v11)
        {
          v52 = a2;
          do
          {
            if (v49 >= v52) {
              break;
            }
            unsigned int v54 = v52[-1].u16[2];
            v52 = (int32x2_t *)((char *)v52 - 4);
          }
          while (v54 >= (unsigned __int16)v33);
        }
        else
        {
          do
          {
            unsigned int v53 = v52[-1].u16[2];
            v52 = (int32x2_t *)((char *)v52 - 4);
          }
          while (v53 >= (unsigned __int16)v33);
        }
        if (v49 < v52)
        {
          unint64_t v55 = (unint64_t)v49;
          v56 = v52;
          do
          {
            __int32 v57 = *(_DWORD *)v55;
            *(_DWORD *)unint64_t v55 = v56->i32[0];
            v56->i32[0] = v57;
            do
            {
              unint64_t v50 = v55;
              unsigned int v58 = *(unsigned __int16 *)(v55 + 4);
              v55 += 4;
            }
            while (v58 < (unsigned __int16)v33);
            do
            {
              unsigned int v59 = v56[-1].u16[2];
              v56 = (int32x2_t *)((char *)v56 - 4);
            }
            while (v59 >= (unsigned __int16)v33);
          }
          while (v55 < (unint64_t)v56);
        }
        if ((int32x2_t *)v50 != v11) {
          v11->i32[0] = *(_DWORD *)v50;
        }
        *(_DWORD *)unint64_t v50 = v33;
        if (v49 >= v52) {
          break;
        }
LABEL_77:
        result = std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*,false>(v9, v50, a3, a4 & 1);
        a4 = 0;
        v11 = (int32x2_t *)(v50 + 4);
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*>(v11, (int32x2_t *)v50);
      v11 = (int32x2_t *)(v50 + 4);
      result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*>((int32x2_t *)(v50 + 4), a2);
      if (result) {
        break;
      }
      if (!v60) {
        goto LABEL_77;
      }
    }
    a2 = (int32x2_t *)v50;
    if (!v60) {
      continue;
    }
    return result;
  }
}

uint64_t geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 12))
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned __int16 *)(result + 8);
    if (!*(_WORD *)(result + 8))
    {
LABEL_21:
      *(unsigned char *)(v2 + 12) = 1;
      return result;
    }
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 == v4 || (BOOL v5 = *(uint64_t **)(v4 - 8), v6 = v5[1], v5[2] - v6 < v3)) {
        operator new();
      }
      uint64_t v7 = *v5;
      v5[1] = v6 + v3;
      if (v7)
      {
        uint64_t v8 = v7 + 4 * v6;
        uint64_t v9 = *(unsigned __int16 *)(result + 8);
        if (*(_WORD *)(result + 8))
        {
          v10 = *(int **)result;
          if (v9 < 8)
          {
            int v11 = *(unsigned __int16 *)(result + 8);
            uint64_t v12 = (_DWORD *)(v7 + 4 * v6);
          }
          else
          {
            int v11 = *(unsigned __int16 *)(result + 8);
            uint64_t v12 = (_DWORD *)(v7 + 4 * v6);
            if ((unint64_t)(v8 - (void)v10) >= 0x20)
            {
              uint64_t v13 = (unsigned __int16)v9 & 0xFFF8;
              uint64_t v14 = 4 * v13;
              uint64_t v12 = (_DWORD *)(v8 + 4 * v13);
              v15 = (long long *)(v10 + 4);
              unsigned int v16 = (_OWORD *)(v7 + 4 * v6 + 16);
              uint64_t v17 = v13;
              do
              {
                long long v18 = *v15;
                *(v16 - 1) = *(v15 - 1);
                *unsigned int v16 = v18;
                v15 += 2;
                v16 += 2;
                v17 -= 8;
              }
              while (v17);
              if (v13 == v9) {
                goto LABEL_17;
              }
              int v11 = v9 - v13;
              v10 = (int *)((char *)v10 + v14);
            }
          }
          do
          {
            int v19 = *v10++;
            *v12++ = v19;
            --v11;
          }
          while ((_WORD)v11);
        }
LABEL_17:
        if (!*(unsigned char *)(result + 12))
        {
          if (*(void *)result)
          {
            uint64_t v20 = gss::Allocator::instance((gss::Allocator *)result);
            result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v20 + 40))(v20, *(void *)v2, 4 * *(unsigned __int16 *)(v2 + 10));
          }
        }
        *(_WORD *)(v2 + 8) = v9;
        *(_WORD *)(v2 + 10) = 0;
        *(void *)uint64_t v2 = v8;
        goto LABEL_21;
      }
    }
  }
  return result;
}

void sub_1A189DFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo>>::~unique_ptr[abi:nn180100]((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_1A189DFD8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x1020C4024DAA5DELL);
  _Unwind_Resume(a1);
}

unsigned __int16 *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>(unsigned __int16 *result, unsigned __int16 *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5 = *a2;
  unsigned int v6 = *(unsigned __int16 *)a3;
  if (v5 >= *result)
  {
    if (v6 < v5)
    {
      unsigned int v6 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *a3;
      *a3 = v6;
      if (*a2 >= *result)
      {
        unsigned int v6 = (unsigned __int16)v6;
      }
      else
      {
        int v8 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v8;
        unsigned int v6 = *(unsigned __int16 *)a3;
      }
    }
  }
  else
  {
    unsigned int v7 = *(_DWORD *)result;
    if (v6 >= v5)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v7;
      unsigned int v6 = *(unsigned __int16 *)a3;
      if (v6 < (unsigned __int16)v7)
      {
        *(_DWORD *)a2 = *a3;
        *a3 = v7;
        unsigned int v6 = (unsigned __int16)v7;
      }
    }
    else
    {
      *(_DWORD *)result = *a3;
      *a3 = v7;
      unsigned int v6 = (unsigned __int16)v7;
    }
  }
  if (*(unsigned __int16 *)a4 < v6)
  {
    unsigned int v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    if (*(unsigned __int16 *)a3 < *a2)
    {
      unsigned int v10 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *a3;
      *a3 = v10;
      if (*a2 < *result)
      {
        int v11 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v11;
      }
    }
  }
  if (*(unsigned __int16 *)a5 < *(unsigned __int16 *)a4)
  {
    unsigned int v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    if (*(unsigned __int16 *)a4 < *(unsigned __int16 *)a3)
    {
      unsigned int v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      if (*(unsigned __int16 *)a3 < *a2)
      {
        unsigned int v14 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *a3;
        *a3 = v14;
        if (*a2 < *result)
        {
          int v15 = *(_DWORD *)result;
          *(_DWORD *)result = *(_DWORD *)a2;
          *(_DWORD *)a2 = v15;
        }
      }
    }
  }
  return result;
}

gss::Allocator *geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::resize(gss::Allocator *result, unint64_t a2)
{
  if (!*((unsigned char *)result + 12))
  {
    unint64_t v3 = result;
    unint64_t v4 = *((unsigned __int16 *)result + 4);
    if (v4 > a2)
    {
      uint64_t v5 = 24 * *((unsigned __int16 *)result + 4) - 24 * a2;
      unsigned int v6 = (unsigned char *)(24 * a2 + *(void *)result + 20);
      do
      {
        unsigned int v7 = v6 - 12;
        if (!*v6)
        {
          if (*v7)
          {
            uint64_t v8 = gss::Allocator::instance(result);
            result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v8 + 40))(v8, *(void *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
          }
        }
        *(void *)(v6 - 7) = 0;
        *unsigned int v7 = 0;
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      goto LABEL_17;
    }
    if (v4 >= a2) {
      return result;
    }
    if (*((unsigned __int16 *)result + 5) >= a2)
    {
      unsigned int v10 = *(gss::Allocator **)result;
      if (v4 == a2)
      {
LABEL_17:
        *((_WORD *)v3 + 4) = a2;
        return result;
      }
    }
    else
    {
      uint64_t v9 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v9 + 16))(v9, 24 * a2, 8);
      unsigned int v10 = result;
      if (*(void *)v3) {
        result = geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(v3, (uint64_t)result);
      }
      *((_WORD *)v3 + 5) = a2;
      *(void *)unint64_t v3 = v10;
      unint64_t v4 = *((unsigned __int16 *)v3 + 4);
      if (v4 == a2) {
        goto LABEL_17;
      }
    }
    int v11 = (void *)((char *)v10 + 24 * v4);
    do
    {
      *(_DWORD *)int v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v11 += 3;
    }
    while (v11 != (void *)((char *)v10 + 24 * a2));
    goto LABEL_17;
  }
  return result;
}

uint64_t geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  if (!*(unsigned char *)(result + 12))
  {
    unint64_t v3 = (void *)result;
    unint64_t v4 = *(unsigned __int16 *)(result + 8);
    if (v4 > a2)
    {
      uint64_t v5 = 24 * *(unsigned __int16 *)(result + 8) - 24 * a2;
      unsigned int v6 = (unsigned char *)(24 * a2 + *(void *)result + 20);
      do
      {
        unsigned int v7 = v6 - 12;
        if (!*v6)
        {
          if (*v7)
          {
            uint64_t v8 = gss::Allocator::instance((gss::Allocator *)result);
            result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v8 + 40))(v8, *(void *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
          }
        }
        *(void *)(v6 - 7) = 0;
        *unsigned int v7 = 0;
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      goto LABEL_43;
    }
    if (v4 >= a2) {
      return result;
    }
    if (*(unsigned __int16 *)(result + 10) >= a2)
    {
      uint64_t v10 = *(void *)result;
      if (v4 != a2)
      {
LABEL_41:
        v35 = (void *)(v10 + 24 * v4);
        do
        {
          v35[1] = 0;
          v35[2] = 0;
          void *v35 = 0xFFFFFFFF7FFFFFFFLL;
          v35 += 3;
        }
        while (v35 != (void *)(v10 + 24 * a2));
      }
    }
    else
    {
      uint64_t v9 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v9 + 16))(v9, 24 * a2, 8);
      uint64_t v10 = result;
      uint64_t v11 = *v3;
      unint64_t v4 = *((unsigned __int16 *)v3 + 4);
      if (*v3)
      {
        if (*((_WORD *)v3 + 4))
        {
          int v12 = *((unsigned __int16 *)v3 + 4);
          uint64_t v13 = result;
          while (1)
          {
            *(void *)uint64_t v13 = *(void *)v11;
            *(void *)(v13 + 8) = 0;
            result = v13 + 8;
            *(void *)(v13 + 13) = 0;
            uint64_t v14 = *(void *)(v11 + 8);
            if (!*(unsigned char *)(v11 + 20)) {
              break;
            }
            *(void *)(v13 + 8) = v14;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
            *(unsigned char *)(v13 + 20) = 1;
LABEL_14:
            v13 += 24;
            v11 += 24;
            if (!(_WORD)--v12) {
              goto LABEL_30;
            }
          }
          uint64_t v15 = *(unsigned __int16 *)(v11 + 16);
          if (!*(_WORD *)(v11 + 16))
          {
            __int16 v21 = 0;
LABEL_27:
            *(_WORD *)(v13 + 16) = v21 + v15;
            goto LABEL_14;
          }
          result = geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::reserve(result, *(unsigned __int16 *)(v11 + 16));
          uint64_t v16 = *(unsigned __int16 *)(v13 + 16);
          uint64_t v17 = *(void *)(v13 + 8);
          long long v18 = (_DWORD *)(v17 + 4 * v16);
          unint64_t v19 = (v15 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v19 >= 7)
          {
            uint64_t v22 = 4 * v16;
            unint64_t v23 = 4 * v16 + v17 - v14;
            uint64_t v20 = (int *)v14;
            if (v23 >= 0x20)
            {
              uint64_t v24 = (v19 + 1) & 0x7FFFFFFFFFFFFFF8;
              v18 += v24;
              v25 = (long long *)(v14 + 16);
              v26 = (_OWORD *)(v17 + v22 + 16);
              uint64_t v27 = v24;
              do
              {
                long long v28 = *v25;
                *(v26 - 1) = *(v25 - 1);
                _OWORD *v26 = v28;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v19 + 1 == v24) {
                goto LABEL_26;
              }
              uint64_t v20 = (int *)(v14 + 4 * v24);
            }
          }
          else
          {
            uint64_t v20 = (int *)v14;
          }
          do
          {
            int v29 = *v20++;
            *v18++ = v29;
          }
          while (v20 != (int *)(v14 + 4 * v15));
LABEL_26:
          __int16 v21 = *(_WORD *)(v13 + 16);
          goto LABEL_27;
        }
LABEL_30:
        if (!*((unsigned char *)v3 + 12) && *v3)
        {
          if (*((_WORD *)v3 + 4))
          {
            __int32 v30 = (unsigned char *)(*v3 + 20);
            uint64_t v31 = 24 * *((unsigned __int16 *)v3 + 4);
            do
            {
              __int32 v32 = v30 - 12;
              if (!*v30 && *v32)
              {
                uint64_t v33 = gss::Allocator::instance((gss::Allocator *)result);
                result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v33 + 40))(v33, *(void *)(v30 - 12), 4 * *((unsigned __int16 *)v30 - 1));
              }
              *(void *)(v30 - 7) = 0;
              *__int32 v32 = 0;
              v30 += 24;
              v31 -= 24;
            }
            while (v31);
          }
          uint64_t v34 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v34 + 40))(v34, *v3, 24 * *((unsigned __int16 *)v3 + 5));
        }
        *((unsigned char *)v3 + 12) = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      *((_WORD *)v3 + 5) = a2;
      *unint64_t v3 = v10;
      if (v4 != a2) {
        goto LABEL_41;
      }
    }
LABEL_43:
    *((_WORD *)v3 + 4) = a2;
  }
  return result;
}

uint64_t geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  if (!*(unsigned char *)(result + 12))
  {
    unint64_t v2 = a2;
    unint64_t v3 = (gss::Allocator **)result;
    uint64_t v5 = (_WORD *)(result + 8);
    unint64_t v4 = *(unsigned __int16 *)(result + 8);
    if (v4 > a2)
    {
      result = (uint64_t)geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::runDestructors((gss::Allocator *)(*(void *)result + 16 * a2), (gss::Allocator *)(*(void *)result + 16 * v4));
LABEL_42:
      *uint64_t v5 = v2;
      return result;
    }
    if (v4 >= a2) {
      return result;
    }
    if (*(unsigned __int16 *)(result + 10) >= a2)
    {
      result = *(void *)result;
      if (v4 == a2) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v6 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v6 + 16))(v6, 16 * v2, 8);
      unsigned int v7 = *v3;
      unint64_t v4 = *((unsigned __int16 *)v3 + 4);
      if (*v3)
      {
        unint64_t v36 = v2;
        uint64_t v37 = result;
        v35 = v5;
        unint64_t v38 = *((unsigned __int16 *)v3 + 4);
        if (*((_WORD *)v3 + 4))
        {
          uint64_t v8 = result;
          for (int i = *((unsigned __int16 *)v3 + 4); (_WORD)i; --i)
          {
            *(void *)(v8 + 5) = 0;
            *(void *)uint64_t v8 = 0;
            *(void *)(v8 + 5) = 0;
            *(void *)uint64_t v8 = 0;
            uint64_t v10 = *(void *)v7;
            if (*((unsigned char *)v7 + 12))
            {
              *(void *)uint64_t v8 = v10;
              *(_DWORD *)(v8 + 8) = *((_DWORD *)v7 + 2);
              *(unsigned char *)(v8 + 12) = 1;
            }
            else
            {
              uint64_t v11 = *((unsigned __int16 *)v7 + 4);
              if (*((_WORD *)v7 + 4))
              {
                uint64_t v12 = gss::Allocator::instance((gss::Allocator *)result);
                uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, 24 * v11, 8);
                if (*(void *)v8) {
                  geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent((gss::Allocator *)v8, v13);
                }
                uint64_t v14 = v10 + 24 * v11;
                __int16 v39 = v11;
                *(_WORD *)(v8 + 10) = v11;
                *(void *)uint64_t v8 = v13;
                uint64_t v15 = v13 + 24 * *(unsigned __int16 *)(v8 + 8);
                while (1)
                {
                  *(_DWORD *)uint64_t v15 = *(_DWORD *)v10;
                  *(void *)(v15 + 8) = 0;
                  result = v15 + 8;
                  *(void *)(v15 + 13) = 0;
                  uint64_t v16 = *(void *)(v10 + 8);
                  if (!*(unsigned char *)(v10 + 20)) {
                    break;
                  }
                  *(void *)(v15 + 8) = v16;
                  *(_DWORD *)(v15 + 16) = *(_DWORD *)(v10 + 16);
                  *(unsigned char *)(v15 + 20) = 1;
LABEL_17:
                  v10 += 24;
                  v15 += 24;
                  if (v10 == v14)
                  {
                    __int16 v29 = *(_WORD *)(v8 + 8);
                    LOWORD(v11) = v39;
                    goto LABEL_32;
                  }
                }
                uint64_t v17 = *(unsigned __int16 *)(v10 + 16);
                if (*(_WORD *)(v10 + 16))
                {
                  result = geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::reserve(result, *(unsigned __int16 *)(v10 + 16));
                  uint64_t v18 = *(unsigned __int16 *)(v15 + 16);
                  uint64_t v19 = *(void *)(v15 + 8);
                  uint64_t v20 = (_DWORD *)(v19 + 4 * v18);
                  unint64_t v21 = (v17 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                  if (v21 >= 7)
                  {
                    uint64_t v22 = (int *)v16;
                    if ((unint64_t)(4 * v18 + v19 - v16) < 0x20) {
                      goto LABEL_28;
                    }
                    uint64_t v23 = (v21 + 1) & 0x7FFFFFFFFFFFFFF8;
                    v20 += v23;
                    uint64_t v24 = (long long *)(v16 + 16);
                    v25 = (_OWORD *)(v19 + 4 * v18 + 16);
                    uint64_t v26 = v23;
                    do
                    {
                      long long v27 = *v24;
                      *(v25 - 1) = *(v24 - 1);
                      _OWORD *v25 = v27;
                      v24 += 2;
                      v25 += 2;
                      v26 -= 8;
                    }
                    while (v26);
                    if (v21 + 1 != v23)
                    {
                      uint64_t v22 = (int *)(v16 + 4 * v23);
                      goto LABEL_28;
                    }
                  }
                  else
                  {
                    uint64_t v22 = (int *)v16;
                    do
                    {
LABEL_28:
                      int v28 = *v22++;
                      *v20++ = v28;
                    }
                    while (v22 != (int *)(v16 + 4 * v17));
                  }
                }
                else
                {
                  LOWORD(v18) = 0;
                }
                *(_WORD *)(v15 + 16) = v18 + v17;
                goto LABEL_17;
              }
              __int16 v29 = 0;
LABEL_32:
              *(_WORD *)(v8 + 8) = v29 + v11;
            }
            v8 += 16;
            unsigned int v7 = (gss::Allocator *)((char *)v7 + 16);
          }
        }
        if (!*((unsigned char *)v3 + 12) && *v3)
        {
          __int32 v30 = geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::runDestructors(*v3, (gss::Allocator *)((char *)*v3 + 16 * *((unsigned __int16 *)v3 + 4)));
          uint64_t v31 = gss::Allocator::instance(v30);
          (*(void (**)(uint64_t, gss::Allocator *, uint64_t))(*(void *)v31 + 40))(v31, *v3, 16 * *((unsigned __int16 *)v3 + 5));
        }
        uint64_t v5 = v35;
        unint64_t v2 = v36;
        *((unsigned char *)v35 + 4) = 0;
        *(_DWORD *)v35 = 0;
        result = v37;
        unint64_t v4 = v38;
      }
      *((_WORD *)v3 + 5) = v2;
      *unint64_t v3 = (gss::Allocator *)result;
      if (v4 == v2) {
        goto LABEL_42;
      }
    }
    uint64_t v32 = 16 * v4;
    uint64_t v33 = (void *)(result + v32);
    uint64_t v34 = 16 * v2 - v32;
    do
    {
      *(void *)((char *)v33 + 5) = 0;
      *uint64_t v33 = 0;
      v33 += 2;
      v34 -= 16;
    }
    while (v34);
    goto LABEL_42;
  }
  return result;
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::CompositeLabeler::needsForceLayoutAllLabels(md::CompositeLabeler *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 88))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::Labeler::needsForceLayoutAllLabels(md::Labeler *this)
{
  return 0;
}

BOOL md::MapStandardLabeler::needsForceLayoutAllLabels(md::MapStandardLabeler *this)
{
  if (*((unsigned char *)this + 372))
  {
    *((unsigned char *)this + 372) = 0;
    return 1;
  }
  else
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*((void *)this + 3) + 3391));
    return (v2 & 1) != 0 && *(unsigned char *)(*((void *)this + 49) + 115) != 0;
  }
}

void ggl::MetalDeviceContext::processBuffer(ggl::MetalDeviceContext *this, ggl::CommandBuffer *a2)
{
  uint64_t v406 = *MEMORY[0x1E4F143B8];
  v381 = a2;
  uint64_t v3 = *((void *)this + 5);
  if (!v3 || !*((void *)this + 6)) {
    return;
  }
  os_signpost_id_t v6 = *((unsigned __int8 *)a2 + 16) | (*(void *)(v3 + 40) << 8);
  os_signpost_id_t v380 = v6;
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
  }
  unsigned int v7 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  uint64_t v8 = v7;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)this + 7);
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = v9;
    WORD2(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 6) = v10;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "ProcessCommandBuffer", "category=%s parent_signpost=%llu", (uint8_t *)buf, 0x16u);
  }
  v366 = this;

  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
  }
  uint64_t v11 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  uint64_t v12 = v11;
  if (v380 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    uint64_t v13 = *((void *)v381 + 1);
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v13;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v380, "CommandBufferLock", "category=%s", (uint8_t *)buf, 0xCu);
  }

  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
  }
  uint64_t v14 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  uint64_t v15 = v14;
  if (v380 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    uint64_t v16 = *((void *)v381 + 1);
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v16;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v15, OS_SIGNPOST_INTERVAL_END, v380, "CommandBufferLock", "category=%s", (uint8_t *)buf, 0xCu);
  }

  v377 = *(ggl::MetalResourceManager **)(*((void *)this + 2) + 80);
  uint64_t v17 = v381;
  uint64_t v18 = (uint64_t *)*((void *)v381 + 9);
  uint64_t v19 = (uint64_t *)*((void *)v381 + 10);
  if (v18 != v19)
  {
    uint64_t v20 = MEMORY[0x1E4F14500];
    do
    {
      uint64_t v22 = (void *)*v18;
      if (*(void *)(*v18 + 16) == 3131955885)
      {
        uint64_t v23 = v20;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = (void *)*v18;
          int v25 = *((unsigned __int8 *)v381 + 16);
          LODWORD(buf[0]) = 134218240;
          *(void *)((char *)buf + 4) = v24;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v25;
          _os_log_error_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Detected stale render item %p in command buffer %d.  Please file a radar!", (uint8_t *)buf, 0x12u);
        }

        uint64_t v22 = (void *)*v18;
      }
      ggl::RenderItem::gatherBufferLoadItems(v22, *((void *)this + 5) + 56, *((ggl::Device **)this + 2), *(void *)(*((void *)this + 5) + 24), *(void *)(*((void *)this + 5) + 32));
      uint64_t v21 = *v18++;
      ggl::RenderItem::gatherTextureLoadItems(v21, *((void *)this + 5) + 88, *((unsigned __int8 *)v381 + 16));
    }
    while (v18 != v19);
    uint64_t v17 = v381;
  }
  uint64_t v26 = *((void *)v17 + 13);
  uint64_t v373 = *((void *)v17 + 14);
  if (v26 != v373)
  {
    long long v27 = MEMORY[0x1E4F14500];
    while (1)
    {
      int v28 = *(void **)v26;
      if (**(void **)v26 == 3131955885)
      {
        __int16 v29 = v27;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          __int32 v57 = *(void **)v26;
          int v58 = *((unsigned __int8 *)v381 + 16);
          LODWORD(buf[0]) = 134218240;
          *(void *)((char *)buf + 4) = v57;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v58;
          _os_log_error_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Detected stale compute item %p in command buffer %d.  Please file a radar!", (uint8_t *)buf, 0x12u);
        }

        int v28 = *(void **)v26;
      }
      id v2 = (id)*((void *)v366 + 5);
      __int32 v30 = (void *)v28[1];
      uint64_t v31 = (std::mutex **)v30[5];
      uint64_t v32 = (std::mutex **)v30[6];
      if (v31 == v32) {
        break;
      }
      uint64_t v33 = (ggl::Device *)*((void *)v366 + 2);
      uint64_t v35 = *((void *)v2 + 3);
      uint64_t v34 = *((void *)v2 + 4);
      do
      {
        unint64_t v36 = *v31;
        if ((*v31)->__m_.__opaque[10] == 1 && v36[3].__m_.__sig != v35 && *(_DWORD *)&v36[1].__m_.__opaque[40])
        {
          v36[3].__m_.__sig = v35;
          *(_OWORD *)&v36->__m_.__opaque[48] = *(_OWORD *)&v36->__m_.__opaque[32];
        }
        if (v36[1].__m_.__sig != *(void *)&v36->__m_.__opaque[48])
        {
          uint64_t v37 = *v31;
          if (!*(void *)&(*v31)->__m_.__opaque[16]) {
            ggl::BufferData::prepareBufferForDevice(*v31, v33, 0);
          }
          if (v37->__m_.__opaque[10] == 1 && v37[3].__m_.__sig != v35 && *(_DWORD *)&v37[1].__m_.__opaque[40])
          {
            v37[3].__m_.__sig = v35;
            *(_OWORD *)&v37->__m_.__opaque[48] = *(_OWORD *)&v37->__m_.__opaque[32];
          }
          if (*(_DWORD *)&v37[1].__m_.__opaque[40] <= 1u) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = v34;
          }
          int64x2_t v39 = *(int64x2_t *)&v37->__m_.__opaque[48];
          int64x2_t v40 = vaddq_s64(vdupq_n_s64(v38 * *(void *)&v37[1].__m_.__opaque[48]), v39);
          *(void *)&v37->__m_.__opaque[48] = 0;
          v37[1].__m_.__sig = 0;
          uint64_t v41 = *(void *)&v37->__m_.__opaque[16];
          buf[0] = *(void *)v37[1].__m_.__opaque + v39.i64[0];
          buf[1] = v41;
          *(int64x2_t *)&buf[2] = v40;
          *((void *)&v401 + 1) = 0;
          unint64_t v42 = *((void *)v2 + 8);
          if (v42 >= *((void *)v2 + 9))
          {
            unsigned int v44 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>((char **)v2 + 7, (uint64_t)buf);
          }
          else
          {
            if (!v42) {
              goto LABEL_56;
            }
            long long v43 = *(_OWORD *)&buf[2];
            *(_OWORD *)unint64_t v42 = *(_OWORD *)buf;
            *(_OWORD *)(v42 + 16) = v43;
            if (*((void *)&v401 + 1))
            {
              if (*((void **)&v401 + 1) == &buf[4])
              {
                *(void *)(v42 + 56) = v42 + 32;
                (*(void (**)(void))(**((void **)&v401 + 1) + 24))(*((void *)&v401 + 1));
                unsigned int v44 = (char *)(v42 + 64);
              }
              else
              {
                *(void *)(v42 + 56) = (*(uint64_t (**)(void))(**((void **)&v401 + 1) + 16))();
LABEL_56:
                unsigned int v44 = (char *)(v42 + 64);
              }
            }
            else
            {
              *(void *)(v42 + 56) = 0;
              unsigned int v44 = (char *)(v42 + 64);
            }
          }
          *((void *)v2 + 8) = v44;
          if (*((void **)&v401 + 1) == &buf[4])
          {
            (*(void (**)(void *))(buf[4] + 32))(&buf[4]);
          }
          else if (*((void *)&v401 + 1))
          {
            (*(void (**)(void))(**((void **)&v401 + 1) + 40))();
          }
        }
        v31 += 2;
      }
      while (v31 != v32);
      __int32 v30 = *(void **)(*(void *)v26 + 8);
      if (v30)
      {
        id v2 = (id)*((void *)v366 + 5);
        break;
      }
LABEL_28:
      v26 += 8;
      long long v27 = MEMORY[0x1E4F14500];
      if (v26 == v373)
      {
        uint64_t v17 = v381;
        goto LABEL_110;
      }
    }
    __int32 v45 = (uint64_t *)v30[9];
    __int32 v46 = (uint64_t *)v30[10];
    while (1)
    {
      if (v45 == v46) {
        goto LABEL_28;
      }
      uint64_t v47 = *v45;
      if (*v45)
      {
        int v48 = *(_DWORD *)(v47 + 56);
        if (v48 == 3)
        {
          if (*(void *)(v47 + 96)) {
            BOOL v52 = *(void *)(v47 + 112) == 0;
          }
          else {
            BOOL v52 = 1;
          }
          if (!v52
            && *(void *)(v47 + 128) != 0
            && *(void *)(v47 + 144) != 0
            && *(void *)(v47 + 160) != 0
            && *(void *)(v47 + 176) != 0)
          {
            v49 = (unsigned char *)(v47 + 193);
            if (!*(unsigned char *)(v47 + 193))
            {
              ggl::TextureCube::vendImplicitLoadItems(*v45, (uint64_t *)v2 + 11);
LABEL_67:
              unsigned char *v49 = 1;
            }
          }
        }
        else if (v48 == 1)
        {
          if (*(void *)(v47 + 112))
          {
            v49 = (unsigned char *)(v47 + 129);
            if (!*(unsigned char *)(v47 + 129))
            {
              ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)buf, v47);
              unint64_t v50 = *((void *)v2 + 12);
              if (v50 >= *((void *)v2 + 13))
              {
                unsigned int v51 = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::Texture2DLoadItem>((char **)v2 + 11, (uint64_t)buf);
              }
              else
              {
                if (!v50) {
                  goto LABEL_84;
                }
                *(_OWORD *)unint64_t v50 = *(_OWORD *)buf;
                *(unsigned char *)(v50 + 16) = 0;
                if (LOBYTE(buf[2]))
                {
                  *(unsigned char *)(v50 + 17) = BYTE1(buf[2]);
                  *(unsigned char *)(v50 + 16) = 1;
                }
                *(unsigned char *)(v50 + 20) = 0;
                if (BYTE4(buf[2]))
                {
                  *(_DWORD *)(v50 + 24) = buf[3];
                  *(unsigned char *)(v50 + 20) = 1;
                }
                *(_OWORD *)(v50 + 28) = *(_OWORD *)((char *)&buf[3] + 4);
                if (*((void *)&v402 + 1))
                {
                  if (*((long long **)&v402 + 1) == &v401)
                  {
                    *(void *)(v50 + 72) = v50 + 48;
                    (*(void (**)(void))(**((void **)&v402 + 1) + 24))(*((void *)&v402 + 1));
                    unsigned int v51 = (char *)(v50 + 80);
                  }
                  else
                  {
                    *(void *)(v50 + 72) = *((void *)&v402 + 1);
                    *((void *)&v402 + 1) = 0;
LABEL_84:
                    unsigned int v51 = (char *)(v50 + 80);
                  }
                }
                else
                {
                  *(void *)(v50 + 72) = 0;
                  unsigned int v51 = (char *)(v50 + 80);
                }
              }
              *((void *)v2 + 12) = v51;
              if (*((long long **)&v402 + 1) == &v401)
              {
                (*(void (**)(long long *))(v401 + 32))(&v401);
              }
              else if (*((void *)&v402 + 1))
              {
                (*(void (**)(void))(**((void **)&v402 + 1) + 40))();
              }
              goto LABEL_67;
            }
          }
        }
      }
      ++v45;
    }
  }
LABEL_110:
  uint64_t v59 = *((void *)v17 + 17);
  uint64_t v374 = *((void *)v17 + 18);
  if (v59 != v374)
  {
    BOOL v60 = MEMORY[0x1E4F14500];
    while (1)
    {
      unsigned int v61 = *(void **)v59;
      if (**(void **)v59 == 3131955885)
      {
        unsigned int v62 = v60;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          int64_t v90 = *(void **)v59;
          int v91 = *((unsigned __int8 *)v381 + 16);
          LODWORD(buf[0]) = 134218240;
          *(void *)((char *)buf + 4) = v90;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v91;
          _os_log_error_impl(&dword_1A1780000, v60, OS_LOG_TYPE_ERROR, "Detected stale tile item %p in command buffer %d.  Please file a radar!", (uint8_t *)buf, 0x12u);
        }

        unsigned int v61 = *(void **)v59;
      }
      id v2 = (id)*((void *)v366 + 5);
      v63 = (void *)v61[1];
      v64 = (std::mutex **)v63[5];
      unsigned int v65 = (std::mutex **)v63[6];
      if (v64 == v65) {
        break;
      }
      __int32 v66 = (ggl::Device *)*((void *)v366 + 2);
      uint64_t v68 = *((void *)v2 + 3);
      uint64_t v67 = *((void *)v2 + 4);
      do
      {
        v69 = *v64;
        if (*v64)
        {
          if (v69->__m_.__opaque[10] == 1 && v69[3].__m_.__sig != v68 && *(_DWORD *)&v69[1].__m_.__opaque[40])
          {
            v69[3].__m_.__sig = v68;
            *(_OWORD *)&v69->__m_.__opaque[48] = *(_OWORD *)&v69->__m_.__opaque[32];
          }
          if (v69[1].__m_.__sig != *(void *)&v69->__m_.__opaque[48])
          {
            __int32 v70 = *v64;
            if (!*(void *)&(*v64)->__m_.__opaque[16]) {
              ggl::BufferData::prepareBufferForDevice(*v64, v66, 0);
            }
            if (v70->__m_.__opaque[10] == 1 && v70[3].__m_.__sig != v68 && *(_DWORD *)&v70[1].__m_.__opaque[40])
            {
              v70[3].__m_.__sig = v68;
              *(_OWORD *)&v70->__m_.__opaque[48] = *(_OWORD *)&v70->__m_.__opaque[32];
            }
            if (*(_DWORD *)&v70[1].__m_.__opaque[40] <= 1u) {
              uint64_t v71 = 0;
            }
            else {
              uint64_t v71 = v67;
            }
            int64x2_t v72 = *(int64x2_t *)&v70->__m_.__opaque[48];
            int64x2_t v73 = vaddq_s64(vdupq_n_s64(v71 * *(void *)&v70[1].__m_.__opaque[48]), v72);
            *(void *)&v70->__m_.__opaque[48] = 0;
            v70[1].__m_.__sig = 0;
            uint64_t v74 = *(void *)&v70->__m_.__opaque[16];
            buf[0] = *(void *)v70[1].__m_.__opaque + v72.i64[0];
            buf[1] = v74;
            *(int64x2_t *)&buf[2] = v73;
            *((void *)&v401 + 1) = 0;
            unint64_t v75 = *((void *)v2 + 8);
            if (v75 >= *((void *)v2 + 9))
            {
              unsigned int v77 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>((char **)v2 + 7, (uint64_t)buf);
            }
            else
            {
              if (!v75) {
                goto LABEL_141;
              }
              long long v76 = *(_OWORD *)&buf[2];
              *(_OWORD *)unint64_t v75 = *(_OWORD *)buf;
              *(_OWORD *)(v75 + 16) = v76;
              if (*((void *)&v401 + 1))
              {
                if (*((void **)&v401 + 1) == &buf[4])
                {
                  *(void *)(v75 + 56) = v75 + 32;
                  (*(void (**)(void))(**((void **)&v401 + 1) + 24))(*((void *)&v401 + 1));
                  unsigned int v77 = (char *)(v75 + 64);
                }
                else
                {
                  *(void *)(v75 + 56) = (*(uint64_t (**)(void))(**((void **)&v401 + 1) + 16))();
LABEL_141:
                  unsigned int v77 = (char *)(v75 + 64);
                }
              }
              else
              {
                *(void *)(v75 + 56) = 0;
                unsigned int v77 = (char *)(v75 + 64);
              }
            }
            *((void *)v2 + 8) = v77;
            if (*((void **)&v401 + 1) == &buf[4])
            {
              (*(void (**)(void *))(buf[4] + 32))(&buf[4]);
            }
            else if (*((void *)&v401 + 1))
            {
              (*(void (**)(void))(**((void **)&v401 + 1) + 40))();
            }
          }
        }
        v64 += 2;
      }
      while (v64 != v65);
      v63 = *(void **)(*(void *)v59 + 8);
      if (v63)
      {
        id v2 = (id)*((void *)v366 + 5);
        break;
      }
LABEL_112:
      v59 += 8;
      BOOL v60 = MEMORY[0x1E4F14500];
      if (v59 == v374) {
        goto LABEL_194;
      }
    }
    v78 = (uint64_t *)v63[9];
    v79 = (uint64_t *)v63[10];
    while (1)
    {
      if (v78 == v79) {
        goto LABEL_112;
      }
      uint64_t v80 = *v78;
      if (*v78)
      {
        int v81 = *(_DWORD *)(v80 + 56);
        if (v81 == 3)
        {
          if (*(void *)(v80 + 96)) {
            BOOL v85 = *(void *)(v80 + 112) == 0;
          }
          else {
            BOOL v85 = 1;
          }
          if (!v85
            && *(void *)(v80 + 128) != 0
            && *(void *)(v80 + 144) != 0
            && *(void *)(v80 + 160) != 0
            && *(void *)(v80 + 176) != 0)
          {
            v82 = (unsigned char *)(v80 + 193);
            if (!*(unsigned char *)(v80 + 193))
            {
              ggl::TextureCube::vendImplicitLoadItems(*v78, (uint64_t *)v2 + 11);
LABEL_152:
              unsigned char *v82 = 1;
            }
          }
        }
        else if (v81 == 1)
        {
          if (*(void *)(v80 + 112))
          {
            v82 = (unsigned char *)(v80 + 129);
            if (!*(unsigned char *)(v80 + 129))
            {
              ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)buf, v80);
              unint64_t v83 = *((void *)v2 + 12);
              if (v83 >= *((void *)v2 + 13))
              {
                unsigned int v84 = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::Texture2DLoadItem>((char **)v2 + 11, (uint64_t)buf);
              }
              else
              {
                if (!v83) {
                  goto LABEL_169;
                }
                *(_OWORD *)unint64_t v83 = *(_OWORD *)buf;
                *(unsigned char *)(v83 + 16) = 0;
                if (LOBYTE(buf[2]))
                {
                  *(unsigned char *)(v83 + 17) = BYTE1(buf[2]);
                  *(unsigned char *)(v83 + 16) = 1;
                }
                *(unsigned char *)(v83 + 20) = 0;
                if (BYTE4(buf[2]))
                {
                  *(_DWORD *)(v83 + 24) = buf[3];
                  *(unsigned char *)(v83 + 20) = 1;
                }
                *(_OWORD *)(v83 + 28) = *(_OWORD *)((char *)&buf[3] + 4);
                if (*((void *)&v402 + 1))
                {
                  if (*((long long **)&v402 + 1) == &v401)
                  {
                    *(void *)(v83 + 72) = v83 + 48;
                    (*(void (**)(void))(**((void **)&v402 + 1) + 24))(*((void *)&v402 + 1));
                    unsigned int v84 = (char *)(v83 + 80);
                  }
                  else
                  {
                    *(void *)(v83 + 72) = *((void *)&v402 + 1);
                    *((void *)&v402 + 1) = 0;
LABEL_169:
                    unsigned int v84 = (char *)(v83 + 80);
                  }
                }
                else
                {
                  *(void *)(v83 + 72) = 0;
                  unsigned int v84 = (char *)(v83 + 80);
                }
              }
              *((void *)v2 + 12) = v84;
              if (*((long long **)&v402 + 1) == &v401)
              {
                (*(void (**)(long long *))(v401 + 32))(&v401);
              }
              else if (*((void *)&v402 + 1))
              {
                (*(void (**)(void))(**((void **)&v402 + 1) + 40))();
              }
              goto LABEL_152;
            }
          }
        }
      }
      ++v78;
    }
  }
LABEL_194:
  uint64_t v92 = mach_absolute_time();
  v93 = v366;
  unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL
      * ((uint64_t)(*(void *)(*((void *)v366 + 5) + 96) - *(void *)(*((void *)v366 + 5) + 88)) >> 4)
      - 0x3333333333333333 * ((uint64_t)(*((void *)v381 + 26) - *((void *)v381 + 25)) >> 4);
  if (v94)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
    }
    BOOL v95 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    unsigned int v96 = v95;
    if (v380 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v95))
    {
      uint64_t v97 = *((void *)v381 + 1);
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v97;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v96, OS_SIGNPOST_INTERVAL_BEGIN, v380, "UploadTextures", "category=%s", (uint8_t *)buf, 0xCu);
    }

    v93 = v366;
  }
  uint64_t v98 = *((void *)v93 + 9);
  if (!*(void *)(v98 + 24))
  {
    ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)buf, v98);
    ggl::MetalResourceManager::upload(v377, (uint64_t)buf, (id)(*((void *)v93 + 5) + 8));
    if (*((long long **)&v402 + 1) == &v401)
    {
      (*(void (**)(long long *))(v401 + 32))(&v401);
    }
    else if (*((void *)&v402 + 1))
    {
      (*(void (**)(void))(**((void **)&v402 + 1) + 40))();
    }
  }
  uint64_t v99 = *((void *)v381 + 25);
  for (uint64_t i = *((void *)v381 + 26); v99 != i; v99 += 80)
    ggl::MetalResourceManager::upload(v377, v99, (id)(*((void *)v93 + 5) + 8));
  uint64_t v101 = *((void *)v93 + 5);
  uint64_t v102 = *(void *)(v101 + 88);
  for (uint64_t j = *(void *)(v101 + 96); v102 != j; v102 += 80)
    ggl::MetalResourceManager::upload(v377, v102, (id)(*((void *)v93 + 5) + 8));
  if (v94)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
    }
    __int32 v104 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    __int32 v105 = v104;
    if (v380 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v104))
    {
      uint64_t v106 = *((void *)v381 + 1);
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = v106;
      WORD2(buf[1]) = 2048;
      *(void *)((char *)&buf[1] + 6) = v94;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v105, OS_SIGNPOST_INTERVAL_END, v380, "UploadTextures", "category=%s textureCount=%zu", (uint8_t *)buf, 0x16u);
    }
  }
  unint64_t v107 = mach_absolute_time() - v92;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 152), v107);
  uint64_t v108 = mach_absolute_time();
  uint64_t v110 = *((void *)v381 + 29);
  uint64_t v109 = *((void *)v381 + 30);
  uint64_t v111 = ((v109 - v110) >> 6)
       + ((uint64_t)(*(void *)(*((void *)v366 + 5) + 64) - *(void *)(*((void *)v366 + 5) + 56)) >> 6);
  if (v111)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
    }
    uint64_t v112 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    uint64_t v113 = v112;
    if (v380 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v112))
    {
      uint64_t v114 = *((void *)v381 + 1);
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v114;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v113, OS_SIGNPOST_INTERVAL_BEGIN, v380, "UploadBuffers", "category=%s", (uint8_t *)buf, 0xCu);
    }

    uint64_t v110 = *((void *)v381 + 29);
    uint64_t v109 = *((void *)v381 + 30);
  }
  while (v110 != v109)
  {
    if (*(void *)(v110 + 24) != *(void *)(v110 + 16))
    {
      v115 = *(const ggl::Buffer **)(v110 + 8);
      v116 = (uint64_t *)*((void *)v115 + 3);
      if (v116 || (v116 = ggl::MetalResourceManager::newBuffer(v377, v115)) != 0)
      {
        uint64_t v117 = (void *)v116[4];
        if (v117)
        {
          memcpy((void *)([v117 contents] + *(void *)(v110 + 16)), *(const void **)v110, *(void *)(v110 + 24) - *(void *)(v110 + 16));
          uint64_t v118 = *(void *)(v110 + 56);
          if (v118) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v118 + 48))(v118, v110);
          }
        }
      }
    }
    v110 += 64;
  }
  uint64_t v119 = *((void *)v366 + 5);
  uint64_t v121 = *(void *)(v119 + 56);
  uint64_t v120 = *(void *)(v119 + 64);
  while (v121 != v120)
  {
    if (*(void *)(v121 + 24) != *(void *)(v121 + 16))
    {
      __int32 v122 = *(const ggl::Buffer **)(v121 + 8);
      v123 = (uint64_t *)*((void *)v122 + 3);
      if (v123 || (v123 = ggl::MetalResourceManager::newBuffer(v377, v122)) != 0)
      {
        __int32 v124 = (void *)v123[4];
        if (v124)
        {
          memcpy((void *)([v124 contents] + *(void *)(v121 + 16)), *(const void **)v121, *(void *)(v121 + 24) - *(void *)(v121 + 16));
          uint64_t v125 = *(void *)(v121 + 56);
          if (v125) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v125 + 48))(v125, v121);
          }
        }
      }
    }
    v121 += 64;
  }
  if (v111)
  {
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
    }
    __int32 v126 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    __int32 v127 = v126;
    if (v380 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v126))
    {
      uint64_t v128 = *((void *)v381 + 1);
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = v128;
      WORD2(buf[1]) = 2048;
      *(void *)((char *)&buf[1] + 6) = v111;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v127, OS_SIGNPOST_INTERVAL_END, v380, "UploadBuffers", "category=%s bufferCount=%zu", (uint8_t *)buf, 0x16u);
    }
  }
  unint64_t v129 = mach_absolute_time() - v108;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  v130 = v366;
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 160), v129);
  v132 = (void *)*((void *)v381 + 29);
  v131 = (void *)*((void *)v381 + 30);
  if (v131 != v132)
  {
    v133 = v131 - 4;
    v134 = v131 - 4;
    do
    {
      v136 = (void *)v134[3];
      if (v134 == v136)
      {
        (*(void (**)(void *))(*v134 + 32))(v134);
      }
      else if (v136)
      {
        (*(void (**)(void *))(*v136 + 40))(v136);
      }
      v135 = v134 - 4;
      v134 -= 8;
      v133 -= 8;
    }
    while (v135 != v132);
  }
  *((void *)v381 + 30) = v132;
  uint64_t v137 = *((void *)v366 + 5);
  v139 = *(void **)(v137 + 56);
  v138 = *(void **)(v137 + 64);
  if (v138 != v139)
  {
    v140 = v138 - 4;
    v141 = v138 - 4;
    do
    {
      v143 = (void *)v141[3];
      if (v141 == v143)
      {
        (*(void (**)(void *))(*v141 + 32))(v141);
      }
      else if (v143)
      {
        (*(void (**)(void *))(*v143 + 40))(v143);
      }
      v142 = v141 - 4;
      v141 -= 8;
      v140 -= 8;
    }
    while (v142 != v139);
  }
  *(void *)(v137 + 64) = v139;
  v144 = v381;
  v146 = (void *)*((void *)v381 + 25);
  v145 = (void *)*((void *)v381 + 26);
  if (v145 != v146)
  {
    v147 = v145 - 4;
    v148 = v145 - 4;
    do
    {
      v150 = (void *)v148[3];
      if (v148 == v150)
      {
        (*(void (**)(void *))(*v148 + 32))(v148);
        if (!*((unsigned char *)v148 - 28)) {
          goto LABEL_270;
        }
      }
      else
      {
        if (v150) {
          (*(void (**)(void *))(*v150 + 40))(v150);
        }
        if (!*((unsigned char *)v148 - 28)) {
          goto LABEL_270;
        }
      }
      *((unsigned char *)v148 - 28) = 0;
LABEL_270:
      if (*((unsigned char *)v148 - 32)) {
        *((unsigned char *)v148 - 32) = 0;
      }
      v149 = v148 - 6;
      v148 -= 10;
      v147 -= 10;
    }
    while (v149 != v146);
  }
  *((void *)v144 + 26) = v146;
  uint64_t v151 = *((void *)v366 + 5);
  v153 = *(void **)(v151 + 88);
  v152 = *(void **)(v151 + 96);
  if (v152 != v153)
  {
    v154 = v152 - 4;
    v155 = v152 - 4;
    do
    {
      v157 = (void *)v155[3];
      if (v155 == v157)
      {
        (*(void (**)(void *))(*v155 + 32))(v155);
        if (!*((unsigned char *)v155 - 28)) {
          goto LABEL_282;
        }
      }
      else
      {
        if (v157) {
          (*(void (**)(void *))(*v157 + 40))(v157);
        }
        if (!*((unsigned char *)v155 - 28)) {
          goto LABEL_282;
        }
      }
      *((unsigned char *)v155 - 28) = 0;
LABEL_282:
      if (*((unsigned char *)v155 - 32)) {
        *((unsigned char *)v155 - 32) = 0;
      }
      v156 = v155 - 6;
      v155 -= 10;
      v154 -= 10;
    }
    while (v156 != v153);
  }
  *(void *)(v151 + 96) = v153;
  if (*((void *)v381 + 4)
    || *((void *)v381 + 9) != *((void *)v381 + 10)
    || *((void *)v381 + 17) != *((void *)v381 + 18)
    || *((void *)v381 + 38)
    || *((void *)v381 + 44))
  {
    BOOL v158 = 0;
  }
  else
  {
    uint64_t v353 = *((void *)v366 + 6);
    if (*(unsigned char *)(v353 + 84)) {
      BOOL v158 = *(unsigned __int8 *)(v353 + 72) != 0;
    }
    else {
      BOOL v158 = 1;
    }
  }
  uint64_t v160 = *((void *)v381 + 21);
  uint64_t v159 = *((void *)v381 + 22);
  BOOL v369 = v158;
  if (v158)
  {
    BOOL v161 = *((void *)v381 + 13) == *((void *)v381 + 14) && *((void *)v381 + 5) == *((void *)v381 + 6);
    if (v161 && v160 == v159)
    {
      if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
      }
      v163 = (id)GEOGetGeoGLPerformanceDetailLog_log;
      v164 = v163;
      os_signpost_id_t v165 = v380;
      if (v380 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v163)) {
        goto LABEL_583;
      }
LABEL_582:
      uint64_t v351 = *((void *)v381 + 1);
      uint64_t v352 = *((void *)v130 + 7);
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = v351;
      WORD2(buf[1]) = 2048;
      *(void *)((char *)&buf[1] + 6) = v352;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v164, OS_SIGNPOST_INTERVAL_END, v165, "ProcessCommandBuffer", "category=%s parent_signpost=%llu", (uint8_t *)buf, 0x16u);
LABEL_583:

      return;
    }
  }
  uint64_t v364 = *((void *)v381 + 14);
  uint64_t v367 = *((void *)v381 + 13);
  uint64_t v354 = *((void *)v381 + 6);
  uint64_t v355 = *((void *)v381 + 5);
  if (v160 == v159) {
    goto LABEL_397;
  }
  uint64_t v166 = *((void *)v366 + 2);
  uint64_t v167 = *((void *)v366 + 5);
  unint64_t v168 = *(void *)(v167 + 40);
  ggl::MetalDeviceContextFrame::blitCommandEncoder(v167, 0, *(unsigned __int8 *)(v167 + 48));
  v378 = (ggl::MetalResourceManager *)objc_claimAutoreleasedReturnValue();
  ggl::MetalDeviceContextFrame::blitCommandEncoder(*((void *)v366 + 5), 1u, *(unsigned __int8 *)(*((void *)v366 + 5) + 49));
  v370 = (ggl::MetalResourceManager *)objc_claimAutoreleasedReturnValue();
  v169 = v381;
  v171 = (unsigned __int8 *)*((void *)v381 + 21);
  v170 = (unsigned __int8 *)*((void *)v381 + 22);
  if (v171 == v170) {
    goto LABEL_396;
  }
  v375 = *(std::__shared_weak_count ***)(v166 + 80);
  do
  {
    v172 = v378;
    if (v171[1])
    {
      if (v171[1] != 1) {
        goto LABEL_309;
      }
      v172 = v370;
    }
    v173 = v172;
    if (v173)
    {
      v174 = v173;
      int v175 = *v171;
      if (v175 == 6)
      {
        uint64_t v176 = *(void *)(*((void *)v171 + 2) + 24);
        if (v176)
        {
LABEL_317:
          v177 = *(uint64_t **)(v176 + 24);
          uint64_t v178 = *((void *)v171 + 8);
          if (!v178)
          {
LABEL_318:
            v179 = 0;
            goto LABEL_331;
          }
          goto LABEL_330;
        }
        goto LABEL_320;
      }
      if (v175 == 5)
      {
        uint64_t v176 = *(void *)(*((void *)v171 + 4) + 24);
        if (v176) {
          goto LABEL_317;
        }
LABEL_320:
        v177 = 0;
        uint64_t v178 = *((void *)v171 + 8);
        if (!v178) {
          goto LABEL_318;
        }
LABEL_330:
        v179 = ggl::MetalResourceManager::prepareTexture(v375, (const Texture *)v178, v168);
LABEL_331:
        int v181 = *v171;
        if (v181 == 6)
        {
          if (!v177)
          {
            v183 = *(const ggl::Buffer **)(*((void *)v171 + 2) + 24);
            if (*((void *)v183 + 3)) {
              v177 = 0;
            }
            else {
              v177 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v375, v183);
            }
          }
          v187 = *(const ggl::Buffer **)(*((void *)v171 + 1) + 24);
          v184 = (unint64_t *)*((void *)v187 + 3);
          if (!v184) {
            goto LABEL_349;
          }
        }
        else
        {
          if (v181 != 5)
          {
            if (!v177)
            {
              v185 = (const ggl::Buffer *)*((void *)v171 + 6);
              if (!v185)
              {
                v184 = 0;
                v177 = 0;
                goto LABEL_350;
              }
              v186 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v375, v185);
              v177 = v186;
              if (v171[148])
              {
                -[ggl::MetalResourceManager fillBuffer:range:value:](v174, "fillBuffer:range:value:", v186[4], 0, *(void *)(*((void *)v171 + 6) + 40), 0);
                v184 = 0;
                goto LABEL_350;
              }
            }
            v184 = 0;
            goto LABEL_350;
          }
          if (!v177)
          {
            v182 = *(const ggl::Buffer **)(*((void *)v171 + 4) + 24);
            if (*((void *)v182 + 3)) {
              v177 = 0;
            }
            else {
              v177 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v375, v182);
            }
          }
          v187 = *(const ggl::Buffer **)(*((void *)v171 + 3) + 24);
          v184 = (unint64_t *)*((void *)v187 + 3);
          if (!v184) {
LABEL_349:
          }
            v184 = (unint64_t *)ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v375, v187);
        }
LABEL_350:
        if (*v171 - 5 > 1)
        {
          v189 = (void *)*((void *)v171 + 5);
          if (v189) {
            v189 = *(void **)(v189[3] + 32);
          }
          v190 = v189;
          if (v177) {
            v191 = (void *)v177[4];
          }
          else {
            v191 = 0;
          }
          id v193 = v191;
        }
        else
        {
          if (v184) {
            v188 = (void *)v184[4];
          }
          else {
            v188 = 0;
          }
          v190 = v188;
          if (v177) {
            v192 = (void *)v177[4];
          }
          else {
            v192 = 0;
          }
          id v193 = v192;
          if (v184)
          {
            unint64_t v194 = atomic_load(v184 + 2);
            if (v194 < v168)
            {
              unint64_t v195 = v194;
              do
              {
                atomic_compare_exchange_strong((atomic_ullong *volatile)v184 + 2, &v195, v168);
                if (v195 == v194) {
                  break;
                }
                unint64_t v194 = v195;
              }
              while (v195 < v168);
            }
          }
        }
        v196 = (const Texture *)*((void *)v171 + 7);
        if (v196)
        {
          v197 = ggl::MetalResourceManager::prepareTexture(v375, v196, v168);
          if (*((unsigned char *)v197 + 120) == 1)
          {
            v198 = (id *)(v197[4] + 8 * *((unsigned int *)v197 + 16));
LABEL_380:
            id v2 = *v198;
            if (!v179) {
              goto LABEL_381;
            }
            goto LABEL_374;
          }
          if (!*((unsigned char *)v197 + 120))
          {
            v198 = (id *)v197[4];
            goto LABEL_380;
          }
        }
        else
        {
          id v2 = 0;
        }
        if (!v179)
        {
LABEL_381:
          v184 = 0;
          goto LABEL_382;
        }
LABEL_374:
        if (*((unsigned char *)v179 + 120) == 1)
        {
          v199 = (id *)(v179[4] + 8 * *((unsigned int *)v179 + 16));
        }
        else
        {
          if (*((unsigned char *)v179 + 120))
          {
LABEL_382:
            uint64_t v200 = *((unsigned int *)v171 + 18);
            uint64_t v201 = *((unsigned int *)v171 + 19);
            uint64_t v202 = *((unsigned int *)v171 + 20);
            uint64_t v203 = *((unsigned int *)v171 + 22);
            uint64_t v204 = *((unsigned int *)v171 + 23);
            uint64_t v205 = *((unsigned int *)v171 + 24);
            uint64_t v206 = *((unsigned int *)v171 + 25);
            uint64_t v207 = *((unsigned int *)v171 + 26);
            switch(*v171)
            {
              case 0u:
              case 5u:
                uint64_t v208 = *((unsigned int *)v171 + 27);
                uint64_t v209 = *((unsigned int *)v171 + 28);
                goto LABEL_388;
              case 1u:
                uint64_t v211 = *((unsigned int *)v171 + 27);
                uint64_t v212 = *((unsigned int *)v171 + 29);
                uint64_t v213 = *((unsigned int *)v171 + 31);
                buf[0] = *((unsigned int *)v171 + 18);
                buf[1] = v201;
                buf[2] = v202;
                uint64_t v214 = *((unsigned int *)v171 + 34);
                uint64_t v215 = *((unsigned int *)v171 + 36);
                *(void *)&long long v398 = v205;
                *((void *)&v398 + 1) = v206;
                uint64_t v399 = v207;
                [(ggl::MetalResourceManager *)v174 copyFromBuffer:v190 sourceOffset:v211 sourceBytesPerRow:v212 sourceBytesPerImage:v213 sourceSize:buf toTexture:v184 destinationSlice:v214 destinationLevel:v215 destinationOrigin:&v398];
                break;
              case 2u:
                uint64_t v210 = *((unsigned int *)v171 + 35);
                uint64_t v388 = *((unsigned int *)v171 + 21);
                uint64_t v389 = v203;
                uint64_t v390 = v204;
                uint64_t v385 = v200;
                uint64_t v386 = v201;
                uint64_t v387 = v202;
                [(ggl::MetalResourceManager *)v174 copyFromTexture:v2 sourceSlice:*((unsigned int *)v171 + 33) sourceLevel:v210 sourceOrigin:&v388 sourceSize:&v385 toBuffer:v193 destinationOffset:*((unsigned int *)v171 + 28) destinationBytesPerRow:*((unsigned int *)v171 + 30) destinationBytesPerImage:*((unsigned int *)v171 + 32)];
                break;
              case 3u:
                v384[0] = *((unsigned int *)v171 + 21);
                v384[1] = v203;
                v384[2] = v204;
                v383[0] = v200;
                v383[1] = v201;
                v383[2] = v202;
                uint64_t v216 = *((unsigned int *)v171 + 33);
                uint64_t v217 = *((unsigned int *)v171 + 34);
                uint64_t v218 = *((unsigned int *)v171 + 35);
                uint64_t v219 = *((unsigned int *)v171 + 36);
                v382[0] = v205;
                v382[1] = v206;
                v382[2] = v207;
                [(ggl::MetalResourceManager *)v174 copyFromTexture:v2 sourceSlice:v216 sourceLevel:v218 sourceOrigin:v384 sourceSize:v383 toTexture:v184 destinationSlice:v217 destinationLevel:v219 destinationOrigin:v382];
                break;
              case 4u:
                [(ggl::MetalResourceManager *)v174 copyFromTexture:v2 toTexture:v184];
                break;
              case 6u:
                uint64_t v208 = *((unsigned int *)v171 + 27);
                uint64_t v209 = *((unsigned int *)v171 + 28);
                uint64_t v200 = [v193 length];
LABEL_388:
                [(ggl::MetalResourceManager *)v174 copyFromBuffer:v190 sourceOffset:v208 toBuffer:v193 destinationOffset:v209 size:v200];
                break;
              default:
                break;
            }

            goto LABEL_309;
          }
          v199 = (id *)v179[4];
        }
        v184 = (unint64_t *)*v199;
        goto LABEL_382;
      }
      uint64_t v178 = *((void *)v171 + 8);
      if (v178)
      {
        v179 = *(uint64_t **)(v178 + 24);
        uint64_t v180 = *((void *)v171 + 6);
        if (v180) {
          goto LABEL_324;
        }
      }
      else
      {
        v179 = 0;
        uint64_t v180 = *((void *)v171 + 6);
        if (v180)
        {
LABEL_324:
          v177 = *(uint64_t **)(v180 + 24);
          if (v179) {
            goto LABEL_325;
          }
          goto LABEL_329;
        }
      }
      v177 = 0;
      if (v179)
      {
LABEL_325:
        if (!v178) {
          goto LABEL_331;
        }
        goto LABEL_330;
      }
LABEL_329:
      uint64_t v178 = *((void *)v171 + 8);
      if (!v178) {
        goto LABEL_318;
      }
      goto LABEL_330;
    }
LABEL_309:
    v171 += 152;
  }
  while (v171 != v170);
  v169 = v381;
  v171 = (unsigned __int8 *)*((void *)v381 + 21);
LABEL_396:
  *((void *)v169 + 22) = v171;

  v130 = v366;
LABEL_397:
  if (v369 || !*(void *)(*((void *)v130 + 6) + 8))
  {
LABEL_418:
    v224 = v381;
    if (v367 == v364) {
      goto LABEL_557;
    }
    uint64_t v225 = *((void *)v130 + 5);
    *(unsigned char *)(v225 + 50) = 1;
    uint64_t v226 = *((void *)v130 + 6);
    id v371 = *(id *)(v225 + 120);
    v227 = *(void **)(v226 + 96);
    if (v227)
    {
      [v227 updateFence:*(void *)(v226 + 88) afterStages:2];
      [*(id *)(v226 + 96) endEncoding];
      v228 = *(void **)(v226 + 96);
      *(void *)(v226 + 96) = 0;
    }
    v229 = *(void **)(v226 + 104);
    if (!v229)
    {
      uint64_t v230 = *(unsigned int *)(v226 + 80);
      if (!v230) {
        goto LABEL_425;
      }
      if (v230 == 1)
      {
        uint64_t v230 = 1;
LABEL_425:
        uint64_t v231 = [v371 computeCommandEncoderWithDispatchType:v230];
        v232 = *(void **)(v226 + 104);
        *(void *)(v226 + 104) = v231;

        v229 = *(void **)(v226 + 104);
        if (!*(_DWORD *)(v226 + 76)) {
          goto LABEL_429;
        }
        goto LABEL_428;
      }
      v229 = 0;
      if (*(_DWORD *)(v226 + 76))
      {
LABEL_428:
        [v229 waitForFence:*(void *)(v226 + 88)];
        v229 = *(void **)(v226 + 104);
      }
    }
LABEL_429:
    id v233 = v229;

    v234 = (ggl::Device *)*((void *)v366 + 2);
    unint64_t v235 = *(void *)(*((void *)v366 + 5) + 40);
    id v236 = v233;
    v237 = (void *)*((void *)v224 + 13);
    v356 = (void *)*((void *)v224 + 14);
    id v357 = v236;
    if (v237 != v356)
    {
      v359 = v234;
      uint64_t v360 = 0;
      uint64_t v238 = *((void *)v366 + 4);
      v379 = *(ggl::MetalResourceManager **)(*((void *)v366 + 5) + 32);
      uint64_t v365 = *(void *)(*((void *)v366 + 5) + 24);
      v363 = (void *)*((void *)v366 + 9);
      uint64_t v358 = v238;
      do
      {
        v361 = v237;
        v368 = (ggl::MetalResourceManager *)*((void *)v234 + 10);
        uint64_t v362 = *v237;
        id v372 = v357;
        v376 = *(void **)(v362 + 8);
        uint64_t v239 = v376[21];
        uint64_t v240 = *(void *)(v239 + 24);
        if (!v240)
        {
          v241 = *(const ggl::ShaderFunction **)(v239 + 48);
          uint64_t v242 = *((void *)v241 + 3);
          if (!v242) {
            uint64_t v242 = ggl::MetalResourceManager::newShaderFunction(v368, v241, *(unsigned __int8 *)(v239 + 56), *(void *)(v239 + 64));
          }
          id v243 = *(id *)(v242 + 32);
          id v244 = *(id *)(*((void *)v368 + 32) + 104);
          buf[0] = 0;
          v245 = (void *)[v244 newComputePipelineStateWithFunction:v243 error:buf];
          id v246 = (id)buf[0];

          if (v246)
          {
            v247 = [v246 localizedDescription];
            NSLog((NSString *)@"error creating compute CPS: %@", v247);

            uint64_t v240 = 0;
          }
          else
          {
            {
              operator new();
            }
            uint64_t v240 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                        + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
            *(void *)uint64_t v240 = 0;
            *(_WORD *)(v240 + 8) = 1537;
            *(void *)(v240 + 16) = 0;
            *(void *)(v240 + 24) = 0;
            *(void *)(v240 + 32) = 0;
            objc_storeStrong((id *)(v240 + 32), v245);
            v248 = (std::__shared_weak_count *)*((void *)v368 + 2);
            if (!v248 || (uint64_t v249 = *((void *)v368 + 1), (v250 = std::__shared_weak_count::lock(v248)) == 0))
            {
              std::__throw_bad_weak_ptr[abi:nn180100]();
              goto LABEL_590;
            }
            v251 = *(std::__shared_weak_count **)(v239 + 16);
            *(void *)(v239 + 8) = v249;
            *(void *)(v239 + 16) = v250;
            if (v251 && !atomic_fetch_add(&v251->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
              std::__shared_weak_count::__release_weak(v251);
            }
            *(void *)(v239 + 24) = v240;
            ++*(_DWORD *)(v239 + 32);
            ggl::ResourceManager::_addResourceStat((uint64_t)v368, "ComputePipelineState", 0xCB8C155300000014, 0);
          }

          {
            operator new();
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v242, 40);

          uint64_t v238 = v358;
          v234 = v359;
        }
        uint64_t v252 = *(void *)(v240 + 32);
        if (v360 != v252)
        {
          [v372 setComputePipelineState:*(void *)(v240 + 32)];
          uint64_t v360 = v252;
        }
        v253 = (std::mutex **)v376[1];
        for (k = (std::mutex **)v376[2]; v253 != k; v253 += 2)
        {
          while (1)
          {
            v255 = *v253;
            if (!*(void *)&(*v253)->__m_.__opaque[16]) {
              ggl::BufferData::prepareBufferForDevice(*v253, v234, 0);
            }
            if (v255->__m_.__opaque[10] == 1 && v255[3].__m_.__sig != v365 && *(_DWORD *)&v255[1].__m_.__opaque[40])
            {
              v255[3].__m_.__sig = v365;
              *(_OWORD *)&v255->__m_.__opaque[48] = *(_OWORD *)&v255->__m_.__opaque[32];
            }
            v256 = v379;
            if (*(_DWORD *)&v255[1].__m_.__opaque[40] <= 1u) {
              v256 = 0;
            }
            int64x2_t v257 = *(int64x2_t *)&v255->__m_.__opaque[48];
            int64x2_t v258 = vaddq_s64(vdupq_n_s64((void)v256 * *(void *)&v255[1].__m_.__opaque[48]), v257);
            *(void *)&v255->__m_.__opaque[48] = 0;
            v255[1].__m_.__sig = 0;
            v259 = *(const ggl::Buffer **)&v255->__m_.__opaque[16];
            buf[0] = *(void *)v255[1].__m_.__opaque + v257.i64[0];
            buf[1] = v259;
            *(int64x2_t *)&buf[2] = v258;
            *((void *)&v401 + 1) = 0;
            v260 = *v253;
            if (*(_DWORD *)&(*v253)[1].__m_.__opaque[40] >= 2u && !*(void *)&v260[1].__m_.__opaque[32]) {
              *(void *)&v260[1].__m_.__opaque[32] = v238;
            }
            if ((vmovn_s64(vceqq_s64(vdupq_laneq_s64(v258, 1), v258)).u8[0] & 1) == 0)
            {
              v261 = (uint64_t *)*((void *)v259 + 3);
              if (v261 || (v261 = ggl::MetalResourceManager::newBuffer(v368, v259)) != 0)
              {
                v262 = (void *)v261[4];
                if (v262)
                {
                  uint64_t v263 = [v262 contents];
                  memcpy((void *)(v263 + buf[2]), (const void *)buf[0], buf[3] - buf[2]);
                  if (*((void *)&v401 + 1)) {
                    (*(void (**)(void, void *))(**((void **)&v401 + 1) + 48))(*((void *)&v401 + 1), buf);
                  }
                }
              }
            }
            uint64_t v264 = *(void *)(*(void *)&v260->__m_.__opaque[16] + 24);
            unint64_t v265 = atomic_load((unint64_t *)(v264 + 16));
            if (v265 < v235)
            {
              unint64_t v266 = v265;
              do
              {
                atomic_compare_exchange_strong((atomic_ullong *volatile)(v264 + 16), &v266, v235);
                if (v266 == v265) {
                  break;
                }
                unint64_t v265 = v266;
              }
              while (v266 < v235);
            }
            if (*((void **)&v401 + 1) != &buf[4]) {
              break;
            }
            (*(void (**)(void *))(buf[4] + 32))(&buf[4]);
            v253 += 2;
            if (v253 == k) {
              goto LABEL_475;
            }
          }
          if (*((void *)&v401 + 1)) {
            (*(void (**)(void))(**((void **)&v401 + 1) + 40))();
          }
        }
LABEL_475:
        v267 = (std::mutex **)v376[5];
        v268 = (std::mutex **)v376[6];
        while (v267 != v268)
        {
          v269 = *v267;
          if (!*(void *)&(*v267)->__m_.__opaque[16]) {
            ggl::BufferData::prepareBufferForDevice(*v267, v234, 0);
          }
          if (v269->__m_.__opaque[10] == 1 && v269[3].__m_.__sig != v365 && *(_DWORD *)&v269[1].__m_.__opaque[40])
          {
            v269[3].__m_.__sig = v365;
            *(_OWORD *)&v269->__m_.__opaque[48] = *(_OWORD *)&v269->__m_.__opaque[32];
          }
          v270 = v379;
          if (*(_DWORD *)&v269[1].__m_.__opaque[40] <= 1u) {
            v270 = 0;
          }
          int64x2_t v271 = *(int64x2_t *)&v269->__m_.__opaque[48];
          int64x2_t v272 = vaddq_s64(vdupq_n_s64((void)v270 * *(void *)&v269[1].__m_.__opaque[48]), v271);
          *(void *)&v269->__m_.__opaque[48] = 0;
          v269[1].__m_.__sig = 0;
          v273 = *(const ggl::Buffer **)&v269->__m_.__opaque[16];
          buf[0] = *(void *)v269[1].__m_.__opaque + v271.i64[0];
          buf[1] = v273;
          *(int64x2_t *)&buf[2] = v272;
          *((void *)&v401 + 1) = 0;
          v274 = *v267;
          if (*(_DWORD *)&(*v267)[1].__m_.__opaque[40] >= 2u && !*(void *)&v274[1].__m_.__opaque[32]) {
            *(void *)&v274[1].__m_.__opaque[32] = v238;
          }
          if ((vmovn_s64(vceqq_s64(vdupq_laneq_s64(v272, 1), v272)).u8[0] & 1) == 0)
          {
            v275 = (uint64_t *)*((void *)v273 + 3);
            if (v275 || (v275 = ggl::MetalResourceManager::newBuffer(v368, v273)) != 0)
            {
              v276 = (void *)v275[4];
              if (v276)
              {
                uint64_t v277 = [v276 contents];
                memcpy((void *)(v277 + buf[2]), (const void *)buf[0], buf[3] - buf[2]);
                if (*((void *)&v401 + 1)) {
                  (*(void (**)(void, void *))(**((void **)&v401 + 1) + 48))(*((void *)&v401 + 1), buf);
                }
              }
            }
          }
          uint64_t v278 = *(void *)(*(void *)&v274->__m_.__opaque[16] + 24);
          unint64_t v279 = atomic_load((unint64_t *)(v278 + 16));
          if (v279 < v235)
          {
            unint64_t v280 = v279;
            do
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v278 + 16), &v280, v235);
              if (v280 == v279) {
                break;
              }
              unint64_t v279 = v280;
            }
            while (v280 < v235);
          }
          if (*((void **)&v401 + 1) == &buf[4])
          {
            (*(void (**)(void *))(buf[4] + 32))(&buf[4]);
          }
          else if (*((void *)&v401 + 1))
          {
            (*(void (**)(void))(**((void **)&v401 + 1) + 40))();
          }
          v267 += 2;
        }
        v281 = **(void ***)(v239 + 40);
        long long v404 = 0u;
        long long v405 = 0u;
        long long v402 = 0u;
        long long v403 = 0u;
        long long v401 = 0u;
        memset(buf, 0, sizeof(buf));
        if (!v281[5])
        {
          v293 = v281 + 7;
          if (!v281[7]) {
            goto LABEL_527;
          }
          uint64_t v283 = 0;
          unint64_t v284 = 0;
LABEL_517:
          uint64_t v294 = 0;
          unint64_t v295 = 0;
          while (2)
          {
            v296 = (unsigned __int8 *)(v281[6] + v294);
            uint64_t v297 = *v296;
            uint64_t v298 = v296[1];
            if (v284)
            {
              if (v284 > 0xF || v283 + v284 != v298)
              {
                objc_msgSend(v372, "setBuffers:offsets:withRange:", buf, &v398, v283, v284);
                unint64_t v284 = 0;
                goto LABEL_522;
              }
            }
            else
            {
LABEL_522:
              uint64_t v283 = v298;
            }
            uint64_t v299 = *(void *)(v376[5] + 16 * v297);
            v300 = *(void **)(*(void *)(*(void *)(v299 + 24) + 24) + 32);
            id v301 = v300;
            objc_storeStrong((id *)&buf[v284], v300);
            v302 = v379;
            if (*(_DWORD *)(v299 + 112) <= 1u) {
              v302 = 0;
            }
            *((void *)&v398 + v284) = *(void *)(v299 + 40) + (void)v302 * *(void *)(v299 + 120);

            ++v284;
            ++v295;
            v294 += 2;
            if (v295 >= *v293) {
              goto LABEL_526;
            }
            continue;
          }
        }
        uint64_t v282 = 0;
        uint64_t v283 = 0;
        unint64_t v284 = 0;
        unint64_t v285 = 0;
        do
        {
          v286 = (unsigned __int8 *)(v281[4] + v282);
          uint64_t v287 = *v286;
          uint64_t v288 = v286[1];
          if (!v284) {
            goto LABEL_509;
          }
          if (v284 > 0xF || v283 + v284 != v288)
          {
            objc_msgSend(v372, "setBuffers:offsets:withRange:", buf, &v398, v283, v284);
            unint64_t v284 = 0;
LABEL_509:
            uint64_t v283 = v288;
          }
          uint64_t v289 = *(void *)(v376[1] + 16 * v287);
          v290 = *(void **)(*(void *)(*(void *)(v289 + 24) + 24) + 32);
          id v291 = v290;
          objc_storeStrong((id *)&buf[v284], v290);
          v292 = v379;
          if (*(_DWORD *)(v289 + 112) <= 1u) {
            v292 = 0;
          }
          *((void *)&v398 + v284) = *(void *)(v289 + 40) + (void)v292 * *(void *)(v289 + 120);

          ++v284;
          ++v285;
          v282 += 2;
        }
        while (v285 < v281[5]);
        v293 = v281 + 7;
        if (v281[7]) {
          goto LABEL_517;
        }
LABEL_526:
        objc_msgSend(v372, "setBuffers:offsets:withRange:", buf, &v398, v283, v284);
LABEL_527:
        if (v281[9])
        {
          uint64_t v303 = 0;
          while (2)
          {
            v304 = (unsigned __int8 *)(v281[8] + 2 * v303);
            uint64_t v305 = *v304;
            uint64_t v306 = v304[1];
            uint64_t v307 = *(unsigned __int8 *)(v281[10] + 2 * v303 + 1);
            if (*(void *)(v376[9] + 8 * v305)) {
              id v308 = *(id *)(v376[9] + 8 * v305);
            }
            else {
              id v308 = v363;
            }
            v309 = (uint64_t *)*((void *)v308 + 3);
            if (!v309) {
              v309 = ggl::MetalResourceManager::prepareTexture((std::__shared_weak_count **)v368, (const Texture *)v308, v235);
            }
            unint64_t v310 = atomic_load((unint64_t *)v309 + 2);
            if (v310 < v235)
            {
              unint64_t v311 = v310;
              do
              {
                atomic_compare_exchange_strong(v309 + 2, &v311, v235);
                if (v311 == v310) {
                  break;
                }
                unint64_t v310 = v311;
              }
              while (v311 < v235);
            }
            SamplerStateResource = ggl::MetalResourceManager::getSamplerStateResource(v368, (const Texture *)v308);
            if (!SamplerStateResource) {
              goto LABEL_529;
            }
            if (*((unsigned char *)v309 + 120) == 1)
            {
              v313 = (id *)(v309[4] + 8 * *((unsigned int *)v309 + 16));
LABEL_544:
              id v308 = *v313;
            }
            else if (!*((unsigned char *)v309 + 120))
            {
              v313 = (id *)v309[4];
              goto LABEL_544;
            }
            [v372 setTexture:v308 atIndex:v306];
            unint64_t v314 = atomic_load((unint64_t *)SamplerStateResource + 2);
            if (v314 < v235)
            {
              unint64_t v315 = v314;
              do
              {
                atomic_compare_exchange_strong(SamplerStateResource + 2, &v315, v235);
                if (v315 == v314) {
                  break;
                }
                unint64_t v314 = v315;
              }
              while (v315 < v235);
            }
            id v316 = (id)SamplerStateResource[4];
            [v372 setSamplerState:v316 atIndex:v307];

LABEL_529:
            if ((unint64_t)++v303 >= v281[9]) {
              break;
            }
            continue;
          }
        }
        uint64_t v317 = *(unsigned int *)(v362 + 24);
        uint64_t v318 = HIDWORD(*(void *)(v362 + 16));
        uint64_t v319 = *(unsigned int *)(v362 + 36);
        uint64_t v320 = *(void *)(v362 + 28);
        uint64_t v321 = HIDWORD(*(void *)(v362 + 28));
        uint64_t v388 = *(void *)(v362 + 16);
        uint64_t v389 = v318;
        uint64_t v390 = v317;
        uint64_t v385 = v320;
        uint64_t v386 = v321;
        uint64_t v387 = v319;
        [v372 dispatchThreadgroups:&v388 threadsPerThreadgroup:&v385];

        v237 = v361 + 1;
        uint64_t v238 = v358;
        v234 = v359;
      }
      while (v361 + 1 != v356);
    }

    v224 = v381;
    v130 = v366;
LABEL_557:
    if (v355 != v354)
    {
      *(unsigned char *)(*((void *)v130 + 5) + 50) = 1;
      uint64_t v322 = *((void *)v130 + 6);
      v323 = *(void **)(v322 + 104);
      if (v323)
      {
        [v323 updateFence:*(void *)(v322 + 88)];
        [*(id *)(v322 + 104) endEncoding];
        v324 = *(void **)(v322 + 104);
        *(void *)(v322 + 104) = 0;

        v130 = v366;
      }
      v325 = *(void **)(v322 + 96);
      if (v325)
      {
        [v325 updateFence:*(void *)(v322 + 88) afterStages:2];
        v327 = *(void **)(v322 + 96);
        v326 = (void **)(v322 + 96);
        [v327 endEncoding];
        v328 = *v326;
        *v326 = 0;

        v130 = v366;
      }
      v329 = (uint64_t *)*((void *)v224 + 5);
      v330 = (uint64_t *)*((void *)v224 + 6);
      if (v329 != v330)
      {
        v331 = *(std::__shared_weak_count ***)(*((void *)v130 + 2) + 80);
        do
        {
          uint64_t v332 = *v329;
          uint64_t v333 = *(void *)(*v329 + 40);
          uint64_t v334 = *(void *)(*v329 + 16);
          uint64_t v335 = *(void *)(*v329 + 24);
          uint64_t v336 = v335 - v334;
          if (v335 == v334)
          {
            uint64_t v347 = 0;
            uint64_t v341 = 0;
            uint64_t v338 = 0;
          }
          else
          {
            if (v336 < 0) {
              abort();
            }
            uint64_t v337 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v333 + 16))(*(void *)(*v329 + 40), v335 - v334, 8);
            uint64_t v338 = v337;
            uint64_t v339 = 0;
            do
            {
              if (v337 + v339) {
                *(void *)(v337 + v339) = *(void *)(v334 + v339);
              }
              v339 += 8;
            }
            while (v334 + v339 != v335);
            uint64_t v340 = v337 + v339;
            uint64_t v341 = v337 + 8 * (v336 >> 3);
            uint64_t v342 = v340 - v337;
            if (v340 != v337)
            {
              uint64_t v343 = 0;
              int v344 = 0;
              unint64_t v345 = v342 >> 3;
              do
              {
                v346 = ggl::MetalResourceManager::prepareTexture(v331, *(const Texture **)(v338 + 8 * v343), *(void *)(*((void *)v366 + 5) + 40));
                (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v332 + 24))(v332, v346, v344++);
                uint64_t v343 = v344;
              }
              while (v345 > v344);
            }
            uint64_t v347 = v338;
            v130 = v366;
          }
          uint64_t v348 = *((void *)v130 + 2);
          id v349 = *(id *)(*((void *)v130 + 5) + 120);
          (*(void (**)(uint64_t, uint64_t, id))(*(void *)v332 + 16))(v332, v348, v349);

          if (v338) {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v333 + 40))(v333, v338, v341 - v347);
          }
          ++v329;
          v130 = v366;
        }
        while (v329 != v330);
      }
    }
    if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
    }
    v350 = (id)GEOGetGeoGLPerformanceDetailLog_log;
    v164 = v350;
    os_signpost_id_t v165 = v380;
    if (v380 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v350)) {
      goto LABEL_583;
    }
    goto LABEL_582;
  }
  v394 = (void (**)(void **))&unk_1EF57C9D8;
  v395 = &v380;
  v396 = &v381;
  v397 = (void **)&v394;
  v391 = (void (**)(void **))&unk_1EF57CA20;
  *(void *)&long long v392 = &v380;
  *((void *)&v392 + 1) = &v381;
  v393 = (void **)&v391;
  buf[3] = buf;
  buf[0] = &unk_1EF57CA20;
  *(_OWORD *)&buf[1] = v392;
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
  }
  v220 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  v221 = v220;
  os_signpost_id_t v222 = *v395;
  if (*v395 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v220))
  {
    uint64_t v223 = *((void *)*v396 + 1);
    LODWORD(v398) = 136315138;
    *(void *)((char *)&v398 + 4) = v223;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v221, OS_SIGNPOST_INTERVAL_BEGIN, v222, "EncodeRenderItems", "category=%s", (uint8_t *)&v398, 0xCu);
  }

  if (v393 == (void **)&v391)
  {
    v391[4]((void **)&v391);
    v130 = v366;
  }
  else
  {
    v130 = v366;
    if (v393) {
      (*((void (**)(void))*v393 + 5))();
    }
  }
  if (v397 == (void **)&v394)
  {
    v394[4]((void **)&v394);
  }
  else if (v397)
  {
    (*((void (**)(void))*v397 + 5))();
  }
  ggl::MetalDeviceContext::doRenderWork(v130, v381);
  if (buf[3])
  {
    (*(void (**)(void))(*(void *)buf[3] + 48))(buf[3]);
    if ((void *)buf[3] == buf)
    {
      (*(void (**)(void *))(buf[0] + 32))(buf);
    }
    else if (buf[3])
    {
      (*(void (**)(void))(*(void *)buf[3] + 40))();
    }
    goto LABEL_418;
  }
LABEL_590:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A18A185C(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 240));
  _Unwind_Resume(a1);
}

void sub_1A18A1870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v33 = *(void *)(v31 - 216);
  if (v33 == v31 - 240)
  {
    (*(void (**)(uint64_t))(*(void *)(v31 - 240) + 32))(v31 - 240);
    _Unwind_Resume(exception_object);
  }
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *ggl::RenderItem::gatherBufferLoadItems(void *result, uint64_t a2, ggl::Device *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t)result;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (void *)result[8];
  if (!v10) {
    goto LABEL_60;
  }
  uint64_t v12 = (std::mutex **)v10[8];
  uint64_t v11 = (std::mutex **)v10[9];
  if (v11 == v12 || !*v12) {
    goto LABEL_34;
  }
  do
  {
    uint64_t v13 = *v12;
    if ((*v12)->__m_.__opaque[10] == 1 && v13[3].__m_.__sig != a4 && *(_DWORD *)&v13[1].__m_.__opaque[40])
    {
      v13[3].__m_.__sig = a4;
      *(_OWORD *)&v13->__m_.__opaque[48] = *(_OWORD *)&v13->__m_.__opaque[32];
    }
    if (v13[1].__m_.__sig != *(void *)&v13->__m_.__opaque[48])
    {
      uint64_t v14 = *v12;
      if (!*(void *)&(*v12)->__m_.__opaque[16]) {
        ggl::BufferData::prepareBufferForDevice(*v12, a3, 0);
      }
      if (v14->__m_.__opaque[10] == 1 && v14[3].__m_.__sig != a4 && *(_DWORD *)&v14[1].__m_.__opaque[40])
      {
        v14[3].__m_.__sig = a4;
        *(_OWORD *)&v14->__m_.__opaque[48] = *(_OWORD *)&v14->__m_.__opaque[32];
      }
      if (*(_DWORD *)&v14[1].__m_.__opaque[40] <= 1u) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = a5;
      }
      int64x2_t v16 = *(int64x2_t *)&v14->__m_.__opaque[48];
      int64x2_t v17 = vaddq_s64(vdupq_n_s64(v15 * *(void *)&v14[1].__m_.__opaque[48]), v16);
      *(void *)&v14->__m_.__opaque[48] = 0;
      v14[1].__m_.__sig = 0;
      uint64_t v18 = *(void *)&v14->__m_.__opaque[16];
      *(void *)&long long v43 = *(void *)v14[1].__m_.__opaque + v16.i64[0];
      *((void *)&v43 + 1) = v18;
      int64x2_t v44 = v17;
      __int32 v46 = 0;
      unint64_t v19 = *(void *)(a2 + 8);
      if (v19 >= *(void *)(a2 + 16))
      {
        uint64_t v21 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>((char **)a2, (uint64_t)&v43);
      }
      else
      {
        if (!v19)
        {
LABEL_26:
          uint64_t v21 = (char *)(v19 + 64);
          goto LABEL_28;
        }
        int64x2_t v20 = v44;
        *(_OWORD *)unint64_t v19 = v43;
        *(int64x2_t *)(v19 + 16) = v20;
        if (v46)
        {
          if (v46 != v45)
          {
            *(void *)(v19 + 56) = (*(uint64_t (**)(void))(*v46 + 16))();
            goto LABEL_26;
          }
          *(void *)(v19 + 56) = v19 + 32;
          (*(void (**)(void *))(*v46 + 24))(v46);
          uint64_t v21 = (char *)(v19 + 64);
        }
        else
        {
          *(void *)(v19 + 56) = 0;
          uint64_t v21 = (char *)(v19 + 64);
        }
      }
LABEL_28:
      *(void *)(a2 + 8) = v21;
      uint64_t result = v46;
      if (v46 == v45)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void))(*v46 + 40))();
      }
    }
    v12 += 2;
  }
  while (v12 != v11);
  uint64_t v10 = *(void **)(v9 + 64);
LABEL_34:
  uint64_t v22 = v10[12];
  if (v22)
  {
    if (*(unsigned char *)(v22 + 18) == 1 && *(void *)(v22 + 192) != a4 && *(_DWORD *)(v22 + 112))
    {
      *(void *)(v22 + 192) = a4;
      *(_OWORD *)(v22 + 56) = *(_OWORD *)(v22 + 40);
    }
    if (*(void *)(v22 + 64) != *(void *)(v22 + 56))
    {
      uint64_t v23 = *(void *)(*(void *)(v9 + 64) + 96);
      if (!*(void *)(v23 + 24)) {
        ggl::BufferData::prepareBufferForDevice(*(std::mutex **)(*(void *)(v9 + 64) + 96), a3, 0);
      }
      if (*(unsigned char *)(v23 + 18) == 1 && *(void *)(v23 + 192) != a4 && *(_DWORD *)(v23 + 112))
      {
        *(void *)(v23 + 192) = a4;
        *(_OWORD *)(v23 + 56) = *(_OWORD *)(v23 + 40);
      }
      if (*(_DWORD *)(v23 + 112) <= 1u) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = a5;
      }
      int64x2_t v25 = *(int64x2_t *)(v23 + 56);
      int64x2_t v26 = vaddq_s64(vdupq_n_s64(v24 * *(void *)(v23 + 120)), v25);
      *(void *)(v23 + 56) = 0;
      *(void *)(v23 + 64) = 0;
      uint64_t v27 = *(void *)(v23 + 24);
      *(void *)&long long v43 = *(void *)(v23 + 72) + v25.i64[0];
      *((void *)&v43 + 1) = v27;
      int64x2_t v44 = v26;
      __int32 v46 = 0;
      unint64_t v28 = *(void *)(a2 + 8);
      if (v28 >= *(void *)(a2 + 16))
      {
        __int32 v30 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>((char **)a2, (uint64_t)&v43);
      }
      else
      {
        if (!v28) {
          goto LABEL_54;
        }
        int64x2_t v29 = v44;
        *(_OWORD *)unint64_t v28 = v43;
        *(int64x2_t *)(v28 + 16) = v29;
        if (v46)
        {
          if (v46 == v45)
          {
            *(void *)(v28 + 56) = v28 + 32;
            (*(void (**)(void *))(*v46 + 24))(v46);
            __int32 v30 = (char *)(v28 + 64);
          }
          else
          {
            *(void *)(v28 + 56) = (*(uint64_t (**)(void))(*v46 + 16))();
LABEL_54:
            __int32 v30 = (char *)(v28 + 64);
          }
        }
        else
        {
          *(void *)(v28 + 56) = 0;
          __int32 v30 = (char *)(v28 + 64);
        }
      }
      *(void *)(a2 + 8) = v30;
      uint64_t result = v46;
      if (v46 == v45)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void))(*v46 + 40))();
      }
    }
  }
LABEL_60:
  uint64_t v31 = *(void *)(v9 + 32);
  uint64_t v32 = *(std::mutex ***)(v31 + 32);
  uint64_t v33 = *(std::mutex ***)(v31 + 40);
  if (v32 != v33)
  {
    while (2)
    {
      uint64_t v34 = *v32;
      if (*v32)
      {
        if (v34->__m_.__opaque[10] == 1 && v34[3].__m_.__sig != a4 && *(_DWORD *)&v34[1].__m_.__opaque[40])
        {
          v34[3].__m_.__sig = a4;
          *(_OWORD *)&v34->__m_.__opaque[48] = *(_OWORD *)&v34->__m_.__opaque[32];
        }
        if (v34[1].__m_.__sig != *(void *)&v34->__m_.__opaque[48])
        {
          uint64_t v35 = *v32;
          if (!*(void *)&(*v32)->__m_.__opaque[16]) {
            ggl::BufferData::prepareBufferForDevice(*v32, a3, 0);
          }
          if (v35->__m_.__opaque[10] == 1 && v35[3].__m_.__sig != a4 && *(_DWORD *)&v35[1].__m_.__opaque[40])
          {
            v35[3].__m_.__sig = a4;
            *(_OWORD *)&v35->__m_.__opaque[48] = *(_OWORD *)&v35->__m_.__opaque[32];
          }
          if (*(_DWORD *)&v35[1].__m_.__opaque[40] <= 1u) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = a5;
          }
          int64x2_t v37 = *(int64x2_t *)&v35->__m_.__opaque[48];
          int64x2_t v38 = vaddq_s64(vdupq_n_s64(v36 * *(void *)&v35[1].__m_.__opaque[48]), v37);
          *(void *)&v35->__m_.__opaque[48] = 0;
          v35[1].__m_.__sig = 0;
          uint64_t v39 = *(void *)&v35->__m_.__opaque[16];
          *(void *)&long long v43 = *(void *)v35[1].__m_.__opaque + v37.i64[0];
          *((void *)&v43 + 1) = v39;
          int64x2_t v44 = v38;
          __int32 v46 = 0;
          unint64_t v40 = *(void *)(a2 + 8);
          if (v40 >= *(void *)(a2 + 16))
          {
            unint64_t v42 = std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>((char **)a2, (uint64_t)&v43);
          }
          else
          {
            if (!v40) {
              goto LABEL_84;
            }
            int64x2_t v41 = v44;
            *(_OWORD *)unint64_t v40 = v43;
            *(int64x2_t *)(v40 + 16) = v41;
            if (v46)
            {
              if (v46 == v45)
              {
                *(void *)(v40 + 56) = v40 + 32;
                (*(void (**)(void *))(*v46 + 24))(v46);
                unint64_t v42 = (char *)(v40 + 64);
              }
              else
              {
                *(void *)(v40 + 56) = (*(uint64_t (**)(void))(*v46 + 16))();
LABEL_84:
                unint64_t v42 = (char *)(v40 + 64);
              }
            }
            else
            {
              *(void *)(v40 + 56) = 0;
              unint64_t v42 = (char *)(v40 + 64);
            }
          }
          *(void *)(a2 + 8) = v42;
          uint64_t result = v46;
          if (v46 == v45)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void *))(v45[0] + 32))(v45);
          }
          else if (v46)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void))(*v46 + 40))();
          }
        }
      }
      v32 += 2;
      if (v32 == v33) {
        return result;
      }
      continue;
    }
  }
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoGLPerformanceDetailLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceDetailLog_onceToken, &__block_literal_global_9_53378);
  }
  id v2 = (id)GEOGetGeoGLPerformanceDetailLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = **(void **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 8);
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "EncodeRenderItems", "category=%s", (uint8_t *)&v6, 0xCu);
  }
}

void ggl::MetalDeviceContext::doRenderWork(ggl::MetalDeviceContext *this, ggl::CommandBuffer *a2)
{
  uint64_t v3 = this;
  uint64_t v649 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 5);
  *(unsigned char *)(v4 + 50) = 1;
  uint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = *((void *)this + 6);
  id v7 = *(id *)(v4 + 120);
  unint64_t v8 = *(void *)(*((void *)v3 + 5) + 40);
  v609 = (void *)((char *)v3 + 80);
  id v590 = v7;
  uint64_t v9 = *(void **)(v6 + 96);
  v598 = v3;
  if (v9)
  {
    id v10 = v9;
    goto LABEL_106;
  }
  uint64_t v11 = *(void **)(v6 + 104);
  if (v11)
  {
    [v11 updateFence:*(void *)(v6 + 88)];
    [*(id *)(v6 + 104) endEncoding];
    uint64_t v12 = *(void **)(v6 + 104);
    *(void *)(v6 + 104) = 0;
  }
  v615 = *(std::__shared_weak_count ***)(*(void *)v6 + 80);
  v602 = [MEMORY[0x1E4F352E0] renderPassDescriptor];
  unint64_t v611 = v8;
  uint64_t v13 = v6;
  if (*(unsigned char *)(v6 + 64)) {
    [v602 setImageblockSampleLength:*(unsigned int *)(v6 + 68)];
  }
  uint64_t v14 = *(char **)(v6 + 8);
  *(void *)v640 = *(void *)(v13 + 8);
  v623 = (float *)v5;
  id v15 = v602;
  uint64_t v605 = v13;
  if (*((void *)v14 + 9))
  {
    unint64_t v16 = 0;
    int64x2_t v17 = (int *)(v13 + 20);
    uint64_t v18 = 200;
    while (1)
    {
      uint64_t v19 = *(void *)&v14[v18 - 112];
      int64x2_t v20 = ggl::MetalResourceManager::prepareTexture(v615, (const Texture *)v19, v611);
      if (*((unsigned char *)v20 + 120) == 1) {
        break;
      }
      if (!*((unsigned char *)v20 + 120))
      {
        uint64_t v21 = (id *)v20[4];
LABEL_13:
        uint64_t v14 = (char *)*v21;
      }
      uint64_t v22 = [v15 colorAttachments];
      uint64_t v23 = [v22 objectAtIndexedSubscript:v16];
      [v23 setTexture:v14];

      uint64_t v24 = *(void *)(*(void *)v640 + v18 - 104);
      int64x2_t v25 = [v15 colorAttachments];
      int64x2_t v26 = [v25 objectAtIndexedSubscript:v16];
      [v26 setLevel:v24];

      uint64_t v27 = *(void *)(*(void *)v640 + v18 - 96);
      unint64_t v28 = [v15 colorAttachments];
      int64x2_t v29 = [v28 objectAtIndexedSubscript:v16];
      [v29 setSlice:v27];

      if (v623 && *(unsigned __int8 *)v623 == 255)
      {
        uint64_t v2 = 2;
      }
      else
      {
        if (*(_DWORD *)(v19 + 56)) {
          int v30 = 0;
        }
        else {
          int v30 = *(_DWORD *)(v19 + 76);
        }
        int v31 = *(v17 - 1);
        BOOL v32 = v30 == 0;
        if (v31) {
          BOOL v32 = 0;
        }
        uint64_t v2 = v31 == 2 || v32;
      }
      uint64_t v33 = [v15 colorAttachments];
      uint64_t v34 = [v33 objectAtIndexedSubscript:v16];
      [v34 setLoadAction:v2];

      uint64_t v35 = *(void *)(*(void *)v640 + v18 - 16);
      if (v35)
      {
        uint64_t v19 = *(void *)(*(void *)v640 + v18 - 16);
        if (*(_DWORD *)(v35 + 56)) {
          goto LABEL_27;
        }
      }
      else if (*(_DWORD *)(v19 + 56))
      {
LABEL_27:
        int v36 = 0;
        goto LABEL_30;
      }
      int v36 = *(_DWORD *)(v19 + 76);
LABEL_30:
      int v37 = *v17;
      BOOL v38 = v35 == 0;
      if (v35) {
        uint64_t v39 = 2;
      }
      else {
        uint64_t v39 = 1;
      }
      if (v38) {
        uint64_t v40 = 1;
      }
      else {
        uint64_t v40 = 2;
      }
      if (v36) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v40;
      }
      if (v37) {
        uint64_t v41 = 0;
      }
      if (v37 == 2) {
        uint64_t v41 = 1;
      }
      if (v37 == 3) {
        uint64_t v42 = v39;
      }
      else {
        uint64_t v42 = v41;
      }
      long long v43 = [v15 colorAttachments];
      int64x2_t v44 = [v43 objectAtIndexedSubscript:v16];
      [v44 setStoreAction:v42];

      id v45 = [v15 colorAttachments];
      __int32 v46 = [v45 objectAtIndexedSubscript:v16];
      uint64_t v47 = [v46 storeAction];

      if (v47 != 2) {
        goto LABEL_53;
      }
      int v48 = ggl::MetalResourceManager::prepareTexture(v615, *(const Texture **)(*(void *)v640 + v18 - 16), v611);
      if (*((unsigned char *)v48 + 120) == 1)
      {
        v49 = (id *)(v48[4] + 8 * *((unsigned int *)v48 + 16));
        goto LABEL_51;
      }
      if (!*((unsigned char *)v48 + 120))
      {
        v49 = (id *)v48[4];
LABEL_51:
        id v45 = *v49;
      }
      unint64_t v50 = [v15 colorAttachments];
      unsigned int v51 = [v50 objectAtIndexedSubscript:v16];
      [v51 setResolveTexture:v45];

      uint64_t v52 = *(void *)(*(void *)v640 + v18 - 8);
      unsigned int v53 = [v15 colorAttachments];
      unsigned int v54 = [v53 objectAtIndexedSubscript:v16];
      [v54 setResolveLevel:v52];

      uint64_t v55 = *(void *)(*(void *)v640 + v18);
      v56 = [v15 colorAttachments];
      __int32 v57 = [v56 objectAtIndexedSubscript:v16];
      [v57 setResolveSlice:v55];

LABEL_53:
      if (v623)
      {
        double v58 = v623[1];
        double v59 = v623[2];
        double v60 = v623[3];
        double v61 = v623[4];
      }
      else
      {
        double v58 = 1.0;
        double v59 = 1.0;
        double v60 = 1.0;
        double v61 = 1.0;
      }
      unsigned int v62 = [v15 colorAttachments];
      v63 = [v62 objectAtIndexedSubscript:v16];
      objc_msgSend(v63, "setClearColor:", v58, v59, v60, v61);

      ++v16;
      uint64_t v14 = *(char **)v640;
      v18 += 24;
      v17 += 2;
      if (v16 >= *(void *)(*(void *)v640 + 72)) {
        goto LABEL_57;
      }
    }
    uint64_t v21 = (id *)(v20[4] + 8 * *((unsigned int *)v20 + 16));
    goto LABEL_13;
  }
LABEL_57:
  v64 = (const Texture *)*((void *)v14 + 35);
  uint64_t v3 = v598;
  if (v64)
  {
    *(void *)&long long v638 = *((void *)v14 + 35);
    unsigned int v65 = ggl::MetalResourceManager::prepareTexture(v615, v64, v611);
    id v66 = (id)v605;
    if (*((unsigned char *)v65 + 120) == 1)
    {
      uint64_t v67 = (id *)(v65[4] + 8 * *((unsigned int *)v65 + 16));
    }
    else
    {
      if (*((unsigned char *)v65 + 120)) {
        goto LABEL_63;
      }
      uint64_t v67 = (id *)v65[4];
    }
    id v66 = *v67;
LABEL_63:
    *(void *)&long long v636 = v66;
    __src[0] = &v636;
    __src[1] = v640;
    __src[2] = (void *)(v605 + 16);
    __src[3] = &v638;
    __src[4] = &v623;
    unsigned int v68 = *(_DWORD *)(*(void *)v640 + 84);
    v69 = [v15 depthAttachment];
    unsigned int v70 = (v68 < 0x1B) & (0x4380000u >> v68);
    setupAttachments(ggl::MetalResourceManager *,ggl::RenderTarget *,ggl::PassDescriptor const&,ggl::ClearItem *,MTLRenderPassDescriptor *,unsigned long)::$_0::operator()((uint64_t)__src, v69, v70);

    if (v70)
    {
      if (v623) {
        double v71 = v623[6];
      }
      else {
        double v71 = 1.0;
      }
      int64x2_t v72 = [v15 depthAttachment];
      [v72 setClearDepth:v71];
    }
    int64x2_t v73 = [v15 stencilAttachment];
    unsigned int v74 = v68 - 25;
    setupAttachments(ggl::MetalResourceManager *,ggl::RenderTarget *,ggl::PassDescriptor const&,ggl::ClearItem *,MTLRenderPassDescriptor *,unsigned long)::$_0::operator()((uint64_t)__src, v73, v74 < 2);

    if (v74 < 2)
    {
      if (v623) {
        uint64_t v75 = *((unsigned int *)v623 + 8);
      }
      else {
        uint64_t v75 = 0;
      }
      long long v76 = [v15 stencilAttachment];
      [v76 setClearStencil:v75];

      unsigned int v77 = [v15 stencilAttachment];
      [v77 setStencilResolveFilter:0];
    }
    v78 = [v15 depthAttachment];
    v79 = [v15 stencilAttachment];
    id v80 = v78;
    if ([v80 storeAction] != 2)
    {
LABEL_80:

      id v83 = v79;
      if ([v83 storeAction] != 2)
      {
LABEL_87:

        uint64_t v14 = *(char **)v640;
        goto LABEL_88;
      }
      unsigned int v84 = ggl::MetalResourceManager::prepareTexture(v615, *(const Texture **)(*(void *)v640 + 304), v611);
      if (*((unsigned char *)v84 + 120))
      {
        if (*((unsigned char *)v84 + 120) != 1)
        {
LABEL_86:
          [v83 setResolveTexture:v2];

          [v83 setResolveLevel:*(void *)(*(void *)v640 + 312)];
          [v83 setResolveSlice:*(void *)(*(void *)v640 + 320)];
          goto LABEL_87;
        }
        BOOL v85 = (id *)(v84[4] + 8 * *((unsigned int *)v84 + 16));
      }
      else
      {
        BOOL v85 = (id *)v84[4];
      }
      uint64_t v2 = (uint64_t)*v85;
      goto LABEL_86;
    }
    int v81 = ggl::MetalResourceManager::prepareTexture(v615, *(const Texture **)(*(void *)v640 + 304), v611);
    if (*((unsigned char *)v81 + 120) == 1)
    {
      v82 = (id *)(v81[4] + 8 * *((unsigned int *)v81 + 16));
    }
    else
    {
      if (*((unsigned char *)v81 + 120))
      {
LABEL_79:
        [v80 setResolveTexture:v2];

        [v80 setResolveLevel:*(void *)(*(void *)v640 + 312)];
        [v80 setResolveSlice:*(void *)(*(void *)v640 + 320)];
        goto LABEL_80;
      }
      v82 = (id *)v81[4];
    }
    uint64_t v2 = (uint64_t)*v82;
    goto LABEL_79;
  }
LABEL_88:
  uint64_t v86 = *((void *)v14 + 42);
  if (v86)
  {
    uint64_t v87 = *(void *)(v86 + 24);
    if (!v87) {
      uint64_t v87 = ggl::MetalResourceManager::newRasterizationRateMap((uint64_t)v615, v86);
    }
    [v15 setRasterizationRateMap:*(void *)(v87 + 32)];
    uint64_t v14 = *(char **)v640;
  }
  unsigned int v88 = *((_DWORD *)v14 + 82);
  if (v88 == 1) {
    uint64_t v89 = 0;
  }
  else {
    uint64_t v89 = v88;
  }
  [v15 setRenderTargetArrayLength:v89];

  if (v5 && *(unsigned __int8 *)v5 == 255) {
    uint64_t v5 = 0;
  }
  uint64_t v90 = v605;
  uint64_t v91 = *(void *)(v605 + 8);
  if (*(unsigned char *)(v91 + 344))
  {
    uint64_t v92 = *(const Texture **)(v91 + 184);
    if (v92) {
      ggl::MetalResourceManager::updateTextureWithResource((ggl::MetalResourceManager *)v615, v92, 0);
    }
    else {
      ggl::MetalResourceManager::updateTextureWithResource((ggl::MetalResourceManager *)v615, *(const Texture **)(v91 + 88), 0);
    }
    uint64_t v90 = v605;
  }
  [v15 setVisibilityResultBuffer:*v609];
  uint64_t v93 = [v590 renderCommandEncoderWithDescriptor:v15];
  unint64_t v94 = *(void **)(v90 + 96);
  *(void *)(v90 + 96) = v93;

  if (*(_DWORD *)(v605 + 76)) {
    [*(id *)(v605 + 96) waitForFence:*(void *)(v605 + 88) beforeStages:1];
  }
  [*(id *)(v605 + 96) setFrontFacingWinding:1];
  [*(id *)(v605 + 96) setCullMode:2];
  LODWORD(v95) = 1.0;
  LODWORD(v96) = 1.0;
  LODWORD(v97) = 1.0;
  LODWORD(v98) = 1.0;
  [*(id *)(v605 + 96) setBlendColorRed:v95 green:v96 blue:v97 alpha:v98];
  id v10 = *(id *)(v605 + 96);

LABEL_106:
  unint64_t v99 = *((void *)v3 + 1);
  id v591 = v10;
  if (*(id *)v99 != v591)
  {
    ggl::MetalBindingManager::resetBindingCache((ggl::MetalBindingManager *)v99);
    objc_storeStrong((id *)v99, v10);
  }

  id v630 = 0;
  uint64_t v631 = 0;
  uint64_t v628 = 0;
  id v629 = 0;
  long long v626 = 0u;
  long long v627 = 0u;
  long long v624 = 0u;
  int8x16_t v625 = 0u;
  uint64_t v100 = *((void *)v3 + 5);
  uint64_t v101 = *((void *)v3 + 1);
  v623 = (float *)*((void *)v3 + 2);
  uint64_t v102 = *(void *)(*((void *)v3 + 6) + 8);
  *((void *)&v627 + 1) = v101;
  uint64_t v103 = *(void *)(v100 + 40);
  *((void *)&v624 + 1) = v102;
  *(void *)&long long v626 = v103;
  id v592 = v591;
  *(void *)&long long v624 = v592;
  uint64_t v104 = *((void *)v3 + 5);
  *((void *)&v626 + 1) = &v629;
  int8x16_t v625 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
  uint64_t v105 = *((void *)v3 + 9);
  *(void *)&long long v627 = *((void *)v3 + 4);
  uint64_t v628 = v105;
  if (!v5) {
    goto LABEL_306;
  }
  v643 = 0;
  uint64_t v641 = 0;
  memset(&v640[8], 0, 32);
  uint64_t v106 = *(void *)(*((void *)v3 + 6) + 8);
  *(void *)v640 = *((void *)v3 + 2);
  *(void *)&v640[8] = v106;
  *(int8x16_t *)&v640[16] = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
  uint64_t v107 = *((void *)v3 + 21);
  *(void *)&v640[32] = (char *)v3 + 152;
  uint64_t v641 = v107;
  __src[0] = &unk_1EF57C990;
  __src[1] = &v623;
  __src[3] = __src;
  v616 = (ggl::MetalResourceManager *)v642;
  std::__function::__value_func<void ()(ggl::RenderItem *)>::swap[abi:nn180100](__src, v642);
  if (__src[3] == __src)
  {
    (*((void (**)(void **))__src[0] + 4))(__src);
  }
  else if (__src[3])
  {
    (*(void (**)(void))(*(void *)__src[3] + 40))();
  }
  v632 = (unsigned __int8 *)v5;
  if (*(_DWORD *)(*(void *)&v640[8] + 328) <= 1u) {
    LODWORD(k) = 1;
  }
  else {
    LODWORD(k) = *(_DWORD *)(*(void *)&v640[8] + 328);
  }
  if (!**(void **)&v640[32])
  {
    uint64_t v109 = *(void *)v640;
    uint64_t v110 = operator new(0xF8uLL);
    v110[1] = 0;
    v110[2] = 0;
    void *v110 = &unk_1EF584E38;
    uint64_t v111 = ggl::BufferData::BufferData((uint64_t)(v110 + 3), 8, 0, 0, 6, 4);
    v110[29] = "clearquad_verts";
    v110[30] = &ggl::Clear::clearDataReflection;
    v110[3] = &unk_1EF55CAC8;
    v110[28] = &unk_1EF55CAE8;
    *(void *)&long long v636 = v111;
    *((void *)&v636 + 1) = v110;
    uint64_t v112 = operator new(0xF8uLL);
    v112[1] = 0;
    v112[2] = 0;
    *uint64_t v112 = &unk_1EF589D68;
    uint64_t v113 = ggl::BufferData::BufferData((uint64_t)(v112 + 3), 2, 1, 0, 6, 6);
    v112[3] = &unk_1EF561BA0;
    v112[4] = 2;
    v112[28] = &unk_1EF561BC0;
    v112[29] = "clearquad_idx";
    *((_DWORD *)v112 + 60) = 0;
    v633 = (void *)v113;
    *(void *)&long long v634 = v112;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v109 + 24))(&v635, v109);
    __src[0] = &unk_1EF57CAF8;
    __src[1] = &v636;
    __src[2] = &v633;
    __src[3] = __src;
    long long v638 = 0uLL;
    (*(void (**)(void, void **, long long *))(*(void *)v635 + 16))(v635, __src, &v638);
    uint64_t v114 = (std::__shared_weak_count *)*((void *)&v638 + 1);
    if (*((void *)&v638 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v638 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
    if (__src[3] == __src)
    {
      (*((void (**)(void **))__src[0] + 4))(__src);
      uint64_t v115 = v635;
      if (!(void)v635) {
        goto LABEL_130;
      }
    }
    else
    {
      if (__src[3]) {
        (*(void (**)(void))(*(void *)__src[3] + 40))();
      }
      uint64_t v115 = v635;
      if (!(void)v635) {
LABEL_130:
      }
        operator new();
    }
    uint64_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)v115 + 24))(v115);
    uint64_t v117 = (void *)v635;
    *(void *)&long long v635 = 0;
    __src[0] = v117;
    (*(void (**)(uint64_t, void **))(*(void *)v116 + 48))(v116, __src);
    uint64_t v118 = __src[0];
    __src[0] = 0;
    if (v118) {
      (*(void (**)(void *))(*(void *)v118 + 8))(v118);
    }
    uint64_t v119 = v635;
    *(void *)&long long v635 = 0;
    if (v119) {
      (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
    }
    goto LABEL_130;
  }
  uint64_t v120 = (unsigned __int8 *)v5;
  uint64_t v121 = v641;
  int v122 = *v120;
  long long v636 = *(_OWORD *)(*(void *)&v640[8] + 56);
  long long v637 = *(_OWORD *)(*(void *)&v640[8] + 72);
  v123 = *(char **)(v641 + 72);
  __int32 v124 = *(char **)(v641 + 80);
  if (v123 != v124)
  {
    for (uint64_t i = *(char **)(v641 + 72); i != v124; i += 64)
    {
      if (*i != v122 || *(_OWORD *)(i + 24) != v637) {
        continue;
      }
      if ((void)v637)
      {
        if (*((_DWORD *)i + 2) != v636) {
          continue;
        }
        unint64_t v126 = 0;
        while ((void)v637 - 1 != v126)
        {
          int v127 = *(_DWORD *)&i[4 * v126 + 12];
          int v128 = *((_DWORD *)&v636 + ++v126);
          if (v127 != v128)
          {
            if (v126 >= (unint64_t)v637) {
              break;
            }
            goto LABEL_134;
          }
        }
      }
      if (*((_DWORD *)i + 10) == k)
      {
        uint64_t v156 = (uint64_t)(i + 48);
        goto LABEL_191;
      }
LABEL_134:
      ;
    }
  }
  char v129 = v122 & 0xF;
  if (v122 == 255) {
    char v129 = 15;
  }
  LOBYTE(__src[0]) = 0;
  *(_OWORD *)((char *)__src + 4) = xmmword_1A28FC970;
  if (!v122) {
    char v129 = 0;
  }
  *(void **)((char *)&__src[2] + 4) = 0;
  *(_OWORD *)((char *)&__src[3] + 4) = 0uLL;
  BYTE4(__src[5]) = v129;
  uint64_t v130 = v124 - v123;
  if (v124 - v123 == -64)
  {
    if (v123 != v124)
    {
      unint64_t v99 = -1;
      do
      {
        v131 = (std::__shared_weak_count *)*((void *)v124 - 1);
        if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
        v124 -= 64;
      }
      while (v124 != v123);
    }
    *(void *)(v121 + 80) = v123;
  }
  else
  {
    v132 = *(char **)(v641 + 88);
    if (v132 == v124)
    {
      uint64_t v133 = v130 >> 6;
      unint64_t v134 = (v130 >> 6) + 1;
      if (v134 >> 58) {
LABEL_882:
      }
        abort();
      uint64_t v135 = v132 - v123;
      if (v135 >> 5 > v134) {
        unint64_t v134 = v135 >> 5;
      }
      if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFC0) {
        uint64_t v136 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v136 = v134;
      }
      uint64_t v137 = v136 << 6;
      if (v136)
      {
        uint64_t v138 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v641 + 96) + 16))(*(void *)(v641 + 96), v137, 8);
        v139 = (_OWORD *)(v138 + (v133 << 6));
        uint64_t v137 = v138 + (v136 << 6);
        if (v138)
        {
          v139[2] = 0u;
          v139[3] = 0u;
          _OWORD *v139 = 0u;
          v139[1] = 0u;
        }
      }
      else
      {
        v139 = (_OWORD *)(v133 << 6);
      }
      v140 = v139 + 4;
      uint64_t v141 = *(void *)(v121 + 72);
      uint64_t v142 = *(void *)(v121 + 80);
      if (v142 == v141)
      {
        *(void *)(v121 + 72) = v139;
        *(void *)(v121 + 80) = v140;
        uint64_t v146 = *(void *)(v121 + 88);
        *(void *)(v121 + 88) = v137;
      }
      else
      {
        do
        {
          long long v143 = *(_OWORD *)(v142 - 64);
          long long v144 = *(_OWORD *)(v142 - 48);
          *(_OWORD *)((char *)v139 - 36) = *(_OWORD *)(v142 - 36);
          *(v139 - 4) = v143;
          *(v139 - 3) = v144;
          *(v139 - 1) = *(_OWORD *)(v142 - 16);
          v139 -= 4;
          *(void *)(v142 - 16) = 0;
          *(void *)(v142 - 8) = 0;
          v142 -= 64;
        }
        while (v142 != v141);
        uint64_t v142 = *(void *)(v121 + 72);
        uint64_t v145 = *(void *)(v121 + 80);
        *(void *)(v121 + 72) = v139;
        *(void *)(v121 + 80) = v140;
        uint64_t v146 = *(void *)(v121 + 88);
        *(void *)(v121 + 88) = v137;
        if (v145 != v142)
        {
          unint64_t v99 = -1;
          do
          {
            v147 = *(std::__shared_weak_count **)(v145 - 8);
            if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
            v145 -= 64;
          }
          while (v145 != v142);
        }
      }
      if (v142) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v121 + 96) + 40))(*(void *)(v121 + 96), v142, v146 - v142);
      }
      v123 = *(char **)(v121 + 80);
    }
    else
    {
      if (v124)
      {
        *((_OWORD *)v124 + 2) = 0u;
        *((_OWORD *)v124 + 3) = 0u;
        *(_OWORD *)__int32 v124 = 0u;
        *((_OWORD *)v124 + 1) = 0u;
      }
      *(void *)(v121 + 80) = v124 + 64;
      v123 = v124 + 64;
    }
  }
  *(v123 - 64) = v122;
  *(_OWORD *)(v123 - 56) = v636;
  *(_OWORD *)(v123 - 40) = v637;
  *(_DWORD *)(*(void *)(v121 + 80) - 24) = k;
  uint64_t v148 = *(void *)(*(void *)(v121 + 136) + 80);
  v150 = *(void **)(v148 + 32);
  uint64_t v149 = *(void *)(v148 + 40);
  v633 = v150;
  *(void *)&long long v634 = v149;
  if (v149) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v149 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v151 = operator new(0x198uLL);
  v151[1] = 0;
  v151[2] = 0;
  *uint64_t v151 = &unk_1EF588FA0;
  long long v638 = v636;
  long long v639 = v637;
  uint64_t v152 = ggl::Clear::ClearPipelineState::ClearPipelineState((uint64_t)(v151 + 3), &v633, (uint64_t)__src, &v638, (int)k);
  uint64_t v153 = *(void *)(v121 + 80);
  v154 = *(std::__shared_weak_count **)(v153 - 8);
  *(void *)(v153 - 16) = v152;
  *(void *)(v153 - 8) = v151;
  if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
  }
  v155 = (std::__shared_weak_count *)v634;
  if ((void)v634 && !atomic_fetch_add((atomic_ullong *volatile)(v634 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
    std::__shared_weak_count::__release_weak(v155);
  }
  uint64_t v156 = *(void *)(v121 + 80) - 16;
  uint64_t v121 = v641;
LABEL_191:
  uint64_t v157 = *(void *)(v121 + 64);
  BOOL v158 = *(void **)v121;
  if (v157 == (uint64_t)(*(void *)(v121 + 8) - *(void *)v121) >> 4)
  {
    uint64_t v159 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586E60;
    uint64_t v160 = (void *)ggl::BufferData::BufferData((uint64_t)&v159[1], qword_1E957C8B8, 2, 1, 6, 1);
    v159[9].__shared_owners_ = (uint64_t)ggl::Clear::ClearConstants::reflection(void)::reflection;
    v159[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E2B8;
    __src[0] = v160;
    __src[1] = v159;
    BOOL v161 = *(void **)(v121 + 8);
    unint64_t v162 = *(void *)(v121 + 16);
    if ((unint64_t)v161 < v162)
    {
      if (v161)
      {
        *BOOL v161 = v160;
        v161[1] = v159;
        __src[1] = 0;
        __src[0] = 0;
        uint64_t v159 = 0;
      }
      *(void *)(v121 + 8) = v161 + 2;
      if (!v159) {
LABEL_220:
      }
        operator new();
LABEL_218:
      if (!atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
      goto LABEL_220;
    }
    uint64_t v163 = ((uint64_t)v161 - *(void *)v121) >> 4;
    unint64_t v164 = v163 + 1;
    if ((unint64_t)(v163 + 1) >> 60) {
      abort();
    }
    uint64_t v165 = v162 - *(void *)v121;
    if (v165 >> 3 > v164) {
      unint64_t v164 = v165 >> 3;
    }
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v166 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v166 = v164;
    }
    if (v166)
    {
      uint64_t v167 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v121 + 24) + 16))(*(void *)(v121 + 24), 16 * v166, 8);
      unint64_t v168 = (_OWORD *)(v167 + 16 * v163);
      uint64_t v169 = v167 + 16 * v166;
      if (v167)
      {
        *unint64_t v168 = *(_OWORD *)__src;
        __src[1] = 0;
        __src[0] = 0;
      }
    }
    else
    {
      uint64_t v169 = 0;
      unint64_t v168 = (_OWORD *)(16 * v163);
    }
    v170 = v168 + 1;
    v171 = *(void **)v121;
    v172 = *(void **)(v121 + 8);
    if (v172 == *(void **)v121)
    {
      *(void *)uint64_t v121 = v168;
      *(void *)(v121 + 8) = v170;
      uint64_t v175 = *(void *)(v121 + 16);
      *(void *)(v121 + 16) = v169;
      if (!v172) {
        goto LABEL_217;
      }
    }
    else
    {
      do
      {
        long long v173 = *((_OWORD *)v172 - 1);
        v172 -= 2;
        *--unint64_t v168 = v173;
        void *v172 = 0;
        v172[1] = 0;
      }
      while (v172 != v171);
      v172 = *(void **)v121;
      v174 = *(void **)(v121 + 8);
      *(void *)uint64_t v121 = v168;
      *(void *)(v121 + 8) = v170;
      uint64_t v175 = *(void *)(v121 + 16);
      *(void *)(v121 + 16) = v169;
      if (v174 != v172)
      {
        do
        {
          uint64_t v176 = (std::__shared_weak_count *)*(v174 - 1);
          if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
          v174 -= 2;
        }
        while (v174 != v172);
        if (v172) {
          goto LABEL_216;
        }
LABEL_217:
        uint64_t v159 = (std::__shared_weak_count *)__src[1];
        *(void *)(v121 + 8) = v170;
        if (!v159) {
          goto LABEL_220;
        }
        goto LABEL_218;
      }
      if (!v172) {
        goto LABEL_217;
      }
    }
LABEL_216:
    (*(void (**)(void, void *, uint64_t))(**(void **)(v121 + 24) + 40))(*(void *)(v121 + 24), v172, v175 - (void)v172);
    goto LABEL_217;
  }
  while (1)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v640 + 24))(&v633);
    v196 = (long long *)&v158[2 * v157];
    __src[0] = &unk_1EF57CB40;
    __src[1] = v196;
    __src[2] = &v632;
    __src[3] = __src;
    long long v638 = 0uLL;
    (*(void (**)(void *, void **, long long *))(*(void *)v633 + 16))(v633, __src, &v638);
    v197 = (std::__shared_weak_count *)*((void *)&v638 + 1);
    if (*((void *)&v638 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v638 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
    if (__src[3] == __src)
    {
      (*((void (**)(void **))__src[0] + 4))(__src);
      v198 = v633;
      if (!v633) {
        goto LABEL_264;
      }
LABEL_260:
      uint64_t v199 = (*(uint64_t (**)(void *))(*(void *)v198 + 24))(v198);
      uint64_t v200 = v633;
      v633 = 0;
      __src[0] = v200;
      (*(void (**)(uint64_t, void **))(*(void *)v199 + 48))(v199, __src);
      uint64_t v201 = __src[0];
      __src[0] = 0;
      if (v201) {
        (*(void (**)(void *))(*(void *)v201 + 8))(v201);
      }
      uint64_t v202 = v633;
      v633 = 0;
      if (v202) {
        (*(void (**)(void *))(*(void *)v202 + 8))(v202);
      }
      goto LABEL_264;
    }
    if (__src[3]) {
      (*(void (**)(void))(*(void *)__src[3] + 40))();
    }
    v198 = v633;
    if (v633) {
      goto LABEL_260;
    }
LABEL_264:
    uint64_t v203 = *(std::__shared_weak_count **)(*(void *)(v641 + 32) + 8 * *(void *)(v641 + 64));
    uint64_t v205 = *(void *)v156;
    uint64_t v204 = *(std::__shared_weak_count **)(v156 + 8);
    if (v204) {
      atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v205 || **(void **)(v205 + 40) != v203->__shared_owners_)
    {
      uint64_t v5 = (uint64_t)v203[1].__vftable;
      v203->__shared_weak_owners_ = 0;
      v203[1].__vftable = 0;
      if (!v5) {
        goto LABEL_280;
      }
LABEL_278:
      if (!atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
      }
      goto LABEL_280;
    }
    uint64_t shared_weak_owners = v203->__shared_weak_owners_;
    if (shared_weak_owners) {
      BOOL v207 = shared_weak_owners == v205;
    }
    else {
      BOOL v207 = 1;
    }
    if (!v207) {
      ggl::PipelineSetup::resetData((uint64_t)v203);
    }
    if (v204) {
      atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (uint64_t)v203[1].__vftable;
    v203->__shared_weak_owners_ = v205;
    v203[1].__vftable = (std::__shared_weak_count_vtbl *)v204;
    if (v5) {
      goto LABEL_278;
    }
LABEL_280:
    if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
    uint64_t v208 = (void *)v203[2].__shared_weak_owners_;
    v208[1] = 0;
    uint64_t v209 = v203[6].__shared_weak_owners_;
    long long v210 = *v196;
    *uint64_t v208 = *(void *)v196;
    if (*((void *)&v210 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v210 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v211 = *(void *)(v209 + 8);
    *(_OWORD *)uint64_t v209 = v210;
    if (v211 && !atomic_fetch_add((atomic_ullong *volatile)(v211 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(unint64_t))(*(void *)v211 + 16))(v211);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v211);
    }
    m = (void **)v641;
    unint64_t v213 = **(void **)&v640[32];
    v203[9].__shared_owners_ = **(void **)&v640[32];
    uint64_t v156 = v632[28];
    uint64_t v214 = (unsigned __int8 *)m[13];
    uint64_t v215 = (unsigned __int8 *)m[14];
    if (v214 == v215) {
LABEL_297:
    }
      operator new();
    while (1)
    {
      BOOL v216 = *v214 == v632[20] && v214[1] == v156;
      if (v216 && *((_DWORD *)v214 + 1) == k) {
        break;
      }
      v214 += 16;
      if (v214 == v215) {
        goto LABEL_297;
      }
    }
    uint64_t v218 = (void *)*((void *)v214 + 1);
    __src[0] = &off_1EF55A458;
    __src[2] = "clearItem";
    __src[3] = v218;
    __src[4] = v203;
    __src[6] = 0;
    LODWORD(__src[7]) = 1065353216;
    long long v645 = v213;
    long long v646 = 0uLL;
    int64x2_t v647 = vdupq_n_s64(1uLL);
    *(void *)&long long v648 = 0;
    LODWORD(__src[5]) = v632[32];
    *(void *)&long long v638 = __src;
    if (v643) {
      break;
    }
LABEL_870:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    {
      {
        ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r = (uint64_t)&ggl::Clear::clearDataReflection;
      }
      *(void *)uint64_t v5 = &ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r;
      *(void *)(v5 + 8) = 1;
    }
    v203->__vftable = (std::__shared_weak_count_vtbl *)v5;
    v203->__shared_owners_ = (uint64_t)&ggl::Clear::pipelineDataClearPipelineDeviceStructs(void)::ref;
    v203->__shared_weak_owners_ = 0;
    {
      ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref = v99;
    }
    qword_1EB31DA58 = (uint64_t)&ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref;
    unk_1EB31DA60 = xmmword_1A28FCC60;
    ggl::PipelineSetup::PipelineSetup(v211, (uint64_t)&ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref);
    *(void *)unint64_t v211 = &unk_1EF5606F0;
    v177 = (unint64_t *)m[5];
    uint64_t v178 = (unint64_t *)m[6];
    if (v177 < v178)
    {
      if (v177) {
        unint64_t *v177 = v211;
      }
      v179 = v177 + 1;
      goto LABEL_250;
    }
    uint64_t v180 = m[4];
    unint64_t v99 = ((char *)v177 - v180) >> 3;
    unint64_t v181 = v99 + 1;
    if ((v99 + 1) >> 61) {
      goto LABEL_882;
    }
    uint64_t v182 = (char *)v178 - v180;
    if (v182 >> 2 > v181) {
      unint64_t v181 = v182 >> 2;
    }
    if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v183 = v181;
    }
    if (v183)
    {
      uint64_t v184 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)m[7] + 16))(m[7], 8 * v183, 8);
      v185 = (unint64_t *)(v184 + 8 * v99);
      v186 = (void *)(v184 + 8 * v183);
      if (v184) {
        unint64_t *v185 = v211;
      }
    }
    else
    {
      v186 = 0;
      v185 = (unint64_t *)(8 * v99);
    }
    v179 = v185 + 1;
    v187 = m[4];
    v188 = m[5];
    if (v188 == (unsigned char *)v187)
    {
      m[4] = v185;
      m[5] = v179;
      id v193 = m[6];
      m[6] = v186;
      goto LABEL_248;
    }
    unint64_t v189 = v188 - (unsigned char *)v187 - 8;
    if (v189 <= 0x57
      || (unint64_t v190 = ((char *)v187 - v188 + 7) & 0xFFFFFFFFFFFFFFF8, &v188[v190] < (unsigned char *)v185)
      && (char *)v185 + v190 < v188)
    {
      v191 = m[5];
      do
      {
LABEL_242:
        unint64_t v192 = *--v191;
        void *v191 = 0;
        *--v185 = v192;
      }
      while (v191 != v187);
      goto LABEL_243;
    }
    uint64_t v581 = (v189 >> 3) + 1;
    v191 = &v188[-8 * (v581 & 0x3FFFFFFFFFFFFFFCLL)];
    v582 = v185 - 2;
    v583 = (long long *)(v188 - 32);
    uint64_t v584 = v581 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v586 = *v583;
      long long v585 = v583[1];
      long long *v583 = 0uLL;
      v583[1] = 0uLL;
      v583 -= 2;
      *((_OWORD *)v582 - 1) = v586;
      *(_OWORD *)v582 = v585;
      v582 -= 4;
      v584 -= 4;
    }
    while (v584);
    v185 -= v581 & 0x3FFFFFFFFFFFFFFCLL;
    if (v581 != (v581 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_242;
    }
LABEL_243:
    v188 = m[4];
    unint64_t v99 = (unint64_t)m[5];
    m[4] = v185;
    m[5] = v179;
    id v193 = m[6];
    m[6] = v186;
    while ((unsigned char *)v99 != v188)
    {
      uint64_t v195 = *(void *)(v99 - 8);
      v99 -= 8;
      uint64_t v194 = v195;
      *(void *)unint64_t v99 = 0;
      if (v195) {
        (*(void (**)(uint64_t))(*(void *)v194 + 8))(v194);
      }
    }
LABEL_248:
    if (v188) {
      (*(void (**)(void *, unsigned char *, int64_t))(*(void *)m[7] + 40))(m[7], v188, v193 - v188);
    }
LABEL_250:
    m[5] = v179;
    uint64_t v157 = *(void *)(v641 + 64);
    BOOL v158 = *(void **)v641;
  }
  (*(void (**)(ggl::MetalResourceManager *, long long *))(*(void *)v643 + 48))(v643, &v638);
  uint64_t v3 = v598;
  ++*(void *)(v641 + 64);
  if (v643 == v616)
  {
    (*(void (**)(ggl::MetalResourceManager *))(v642[0] + 32))(v616);
  }
  else if (v643)
  {
    (*(void (**)(void))(*(void *)v643 + 40))();
  }
LABEL_306:
  uint64_t v219 = (uint64_t *)*((void *)a2 + 9);
  for (uint64_t j = (uint64_t *)*((void *)a2 + 10); v219 != j; ++v219)
    ggl::MetalRenderItemEncoder::encode((uint64_t)&v623, *v219);
  v221 = a2;
  if (!*((void *)a2 + 38) && !*((void *)a2 + 44)) {
    goto LABEL_749;
  }
  *((void *)&v646 + 1) = 0;
  __src[3] = 0;
  os_signpost_id_t v222 = (void *)*((void *)v3 + 2);
  __src[2] = 0;
  __src[0] = v222;
  id v223 = v592;
  uint64_t v224 = *((void *)v3 + 5);
  __src[4] = v223;
  *(_OWORD *)&__src[5] = *(_OWORD *)(v224 + 24);
  LODWORD(__src[7]) = *((unsigned __int8 *)a2 + 16);
  __src[1] = v609;
  *(void *)v640 = &unk_1EF57C990;
  *(void *)&v640[8] = &v623;
  *(void *)&v640[24] = v640;
  std::__function::__value_func<void ()(ggl::RenderItem *)>::swap[abi:nn180100](v640, &v645);
  if (*(unsigned char **)&v640[24] == v640)
  {
    (*(void (**)(unsigned char *))(*(void *)v640 + 32))(v640);
  }
  else if (*(void *)&v640[24])
  {
    (*(void (**)(void))(**(void **)&v640[24] + 40))();
  }
  v603 = __src[1];
  v588 = (ggl::MetalResourceManager *)[*(id *)__src[1] contents];
  v600 = (ggl::Device *)__src[0];
  unint64_t v225 = *((void *)a2 + 43);
  uint64_t v226 = (void **)*((void *)a2 + 40);
  v227 = (void **)*((void *)a2 + 41);
  v228 = (char *)&v226[v225 >> 7];
  if (v227 == v226) {
    v229 = 0;
  }
  else {
    v229 = (unsigned int *)(*(void *)v228 + 32 * (*((void *)a2 + 43) & 0x7FLL));
  }
  v612 = (int64x2_t *)((char *)a2 + 296);
LABEL_318:
  unint64_t v230 = *((void *)a2 + 44) + v225;
  unint64_t v231 = v230 >> 7;
  unint64_t v232 = v230 & 0x7F;
LABEL_319:
  id v233 = v229 - 1024;
  while (v227 != v226)
  {
    if (v229 == (unsigned int *)((char *)v226[v231] + 32 * v232)) {
      goto LABEL_489;
    }
LABEL_324:
    if ((char *)__src[5] - *((void *)v229 + 1) >= (void *)3)
    {
      uint64_t v235 = *((void *)v229 + 2);
      if (v235)
      {
        uint64_t v236 = *((void *)v588 + *v229);
        *(unsigned char *)(v235 + 129) = 1;
        *(_DWORD *)(v235 + 132) = v236;
        *(void *)(v235 + 120) = 0;
      }
      unsigned int *v229 = 0;
      v237 = (char *)&v226[v225 >> 7];
      if (v227 == v226) {
        uint64_t v238 = 0;
      }
      else {
        uint64_t v238 = *(void *)v237 + 32 * (v225 & 0x7F);
      }
      v617 = (ggl::MetalResourceManager *)v238;
      if (v229 == (unsigned int *)v238)
      {
        unint64_t v596 = 0;
        uint64_t v240 = *(void **)v237;
      }
      else
      {
        uint64_t v239 = (((uint64_t)v229 - *(void *)v228) >> 5) + 16 * (v228 - v237);
        uint64_t v240 = *(void **)v237;
        unint64_t v596 = v239 - ((v238 - *(void *)v237) >> 5);
        if (v596)
        {
          if (v239 < 1)
          {
            unint64_t v243 = 127 - v239;
            v241 = (void **)&v237[-8 * (v243 >> 7)];
            uint64_t v240 = *v241;
            uint64_t v242 = ~v243 & 0x7FLL;
          }
          else
          {
            v241 = (void **)&v237[8 * ((unint64_t)v239 >> 7)];
            uint64_t v240 = *v241;
            uint64_t v242 = v239 & 0x7F;
          }
          uint64_t v238 = (uint64_t)v240 + 32 * v242;
          uint64_t v244 = *((void *)a2 + 44);
          if (v596 > (unint64_t)(v244 - 1) >> 1)
          {
            uint64_t v245 = (v238 - (uint64_t)v240) >> 5;
            if (v238 - (uint64_t)v240 < -31)
            {
              unint64_t v293 = 126 - v245;
              char v246 = ~(_BYTE)v293;
              v247 = &v241[-(v293 >> 7)];
            }
            else
            {
              char v246 = v245 + 1;
              v247 = &v241[(unint64_t)(v245 + 1) >> 7];
            }
            uint64_t v294 = (char *)*v247;
            uint64_t v5 = (uint64_t)*v247 + 32 * (v246 & 0x7F);
            unint64_t v295 = v244 + v225;
            v296 = &v226[v295 >> 7];
            if (v227 == v226)
            {
              v618 = 0;
              if (v247 == v296) {
                goto LABEL_464;
              }
LABEL_419:
              uint64_t v297 = v294 + 4096;
              if (v294 + 4096 != (char *)v5)
              {
                while (1)
                {
                  uint64_t v298 = ((uint64_t)v240 - v238 + 4096) >> 5;
                  if ((uint64_t)&v297[-v5] >> 5 < v298) {
                    uint64_t v298 = (uint64_t)&v297[-v5] >> 5;
                  }
                  if (v298)
                  {
                    uint64_t v299 = v5 + 32 * v298;
                    do
                    {
                      *(_OWORD *)uint64_t v238 = *(_OWORD *)v5;
                      long long v300 = *(_OWORD *)(v5 + 16);
                      *(void *)(v5 + 16) = 0;
                      *(void *)(v5 + 24) = 0;
                      id v301 = *(std::__shared_weak_count **)(v238 + 24);
                      *(_OWORD *)(v238 + 16) = v300;
                      if (v301 && !atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                        std::__shared_weak_count::__release_weak(v301);
                      }
                      v238 += 32;
                      v5 += 32;
                    }
                    while (v5 != v299);
                    uint64_t v5 = v299;
                  }
                  if ((char *)v5 == v297) {
                    break;
                  }
                  uint64_t v302 = (uint64_t)v241[1];
                  ++v241;
                  uint64_t v240 = (void *)v302;
                  uint64_t v238 = v302;
                }
                uint64_t v240 = *v241;
                if ((char *)*v241 + 4096 == (void *)v238)
                {
                  uint64_t v303 = (uint64_t)v241[1];
                  ++v241;
                  uint64_t v240 = (void *)v303;
                  uint64_t v238 = v303;
                }
              }
              uint64_t v3 = v598;
              uint64_t v5 = (uint64_t)(v247 + 1);
              v607 = v296;
              if (v247 + 1 == v296)
              {
                v304 = v618;
              }
              else
              {
                do
                {
                  uint64_t v312 = 0;
                  uint64_t v313 = *(void *)v5;
                  while (1)
                  {
                    uint64_t v314 = v313 + 32 * v312;
                    uint64_t v315 = (4096 - 32 * v312) >> 5;
                    if (v315 >= ((uint64_t)v240 - v238 + 4096) >> 5) {
                      uint64_t v315 = ((uint64_t)v240 - v238 + 4096) >> 5;
                    }
                    if (v315)
                    {
                      uint64_t v316 = v314 + 32 * v315;
                      uint64_t v317 = v313 + 32 * v312;
                      do
                      {
                        *(_OWORD *)uint64_t v238 = *(_OWORD *)v317;
                        long long v318 = *(_OWORD *)(v317 + 16);
                        *(void *)(v317 + 16) = 0;
                        *(void *)(v317 + 24) = 0;
                        uint64_t v319 = *(std::__shared_weak_count **)(v238 + 24);
                        *(_OWORD *)(v238 + 16) = v318;
                        if (v319 && !atomic_fetch_add(&v319->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                          std::__shared_weak_count::__release_weak(v319);
                        }
                        v238 += 32;
                        v317 += 32;
                      }
                      while (v317 != v316);
                    }
                    else
                    {
                      uint64_t v316 = v313 + 32 * v312;
                    }
                    v312 += (v316 - v314) >> 5;
                    if (v312 == 128) {
                      break;
                    }
                    uint64_t v320 = (uint64_t)v241[1];
                    ++v241;
                    uint64_t v240 = (void *)v320;
                    uint64_t v238 = v320;
                  }
                  uint64_t v240 = *v241;
                  if ((char *)*v241 + 4096 == (void *)v238)
                  {
                    uint64_t v321 = (uint64_t)v241[1];
                    ++v241;
                    uint64_t v240 = (void *)v321;
                    uint64_t v238 = v321;
                  }
                  uint64_t v3 = v598;
                  v304 = v618;
                  v5 += 8;
                }
                while ((void **)v5 != v607);
              }
              uint64_t v305 = (ggl::MetalResourceManager *)*v607;
              if (*v607 != v304)
              {
                uint64_t v306 = (uint64_t)*v241;
                while (1)
                {
                  uint64_t v307 = (v306 - v238 + 4096) >> 5;
                  if ((v304 - v305) >> 5 < v307) {
                    uint64_t v307 = (v304 - v305) >> 5;
                  }
                  if (v307)
                  {
                    id v308 = (ggl::MetalResourceManager *)((char *)v305 + 32 * v307);
                    do
                    {
                      *(_OWORD *)uint64_t v238 = *(_OWORD *)v305;
                      long long v309 = *((_OWORD *)v305 + 1);
                      *((void *)v305 + 2) = 0;
                      *((void *)v305 + 3) = 0;
                      unint64_t v310 = *(std::__shared_weak_count **)(v238 + 24);
                      *(_OWORD *)(v238 + 16) = v309;
                      if (v310 && !atomic_fetch_add(&v310->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                        std::__shared_weak_count::__release_weak(v310);
                      }
                      v238 += 32;
                      uint64_t v305 = (ggl::MetalResourceManager *)((char *)v305 + 32);
                    }
                    while (v305 != v308);
                    uint64_t v305 = v308;
                  }
                  if (v305 == v304) {
                    break;
                  }
                  uint64_t v311 = (uint64_t)v241[1];
                  ++v241;
                  uint64_t v306 = v311;
                  uint64_t v238 = v311;
                }
                goto LABEL_477;
              }
LABEL_479:
              v327 = *(std::__shared_weak_count **)(v238 + 24);
              if (!v327) {
                goto LABEL_482;
              }
            }
            else
            {
              v618 = (ggl::MetalResourceManager *)((char *)*v296 + 32 * (v295 & 0x7F));
              if (v247 != v296) {
                goto LABEL_419;
              }
LABEL_464:
              if ((ggl::MetalResourceManager *)v5 != v618)
              {
                uint64_t v3 = v598;
                while (1)
                {
                  uint64_t v322 = ((uint64_t)v240 - v238 + 4096) >> 5;
                  if (((uint64_t)v618 - v5) >> 5 < v322) {
                    uint64_t v322 = ((uint64_t)v618 - v5) >> 5;
                  }
                  if (v322)
                  {
                    uint64_t v323 = v5 + 32 * v322;
                    do
                    {
                      *(_OWORD *)uint64_t v238 = *(_OWORD *)v5;
                      long long v324 = *(_OWORD *)(v5 + 16);
                      *(void *)(v5 + 16) = 0;
                      *(void *)(v5 + 24) = 0;
                      v325 = *(std::__shared_weak_count **)(v238 + 24);
                      *(_OWORD *)(v238 + 16) = v324;
                      if (v325 && !atomic_fetch_add(&v325->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                        std::__shared_weak_count::__release_weak(v325);
                      }
                      v238 += 32;
                      v5 += 32;
                    }
                    while (v5 != v323);
                    uint64_t v5 = v323;
                  }
                  if ((ggl::MetalResourceManager *)v5 == v618) {
                    break;
                  }
                  uint64_t v326 = (uint64_t)v241[1];
                  ++v241;
                  uint64_t v240 = (void *)v326;
                  uint64_t v238 = v326;
                }
LABEL_477:
                if ((char *)*v241 + 4096 == (void *)v238) {
                  uint64_t v238 = (uint64_t)v241[1];
                }
                goto LABEL_479;
              }
              uint64_t v3 = v598;
              v327 = *(std::__shared_weak_count **)(v238 + 24);
              if (!v327)
              {
LABEL_482:
                uint64_t v289 = a2;
                uint64_t v226 = (void **)*((void *)a2 + 40);
                v328 = (void **)*((void *)a2 + 41);
                unint64_t v225 = *((void *)a2 + 43);
                uint64_t v329 = *((void *)a2 + 44);
                *((void *)a2 + 44) = v329 - 1;
                uint64_t v330 = 16 * ((char *)v328 - (char *)v226) - 1;
                if (v328 == v226) {
                  uint64_t v330 = 0;
                }
                if (v330 - (v329 + v225) + 1 >= 0x100)
                {
                  operator delete(*(v328 - 1));
                  char v290 = 0;
                  uint64_t v226 = (void **)*((void *)a2 + 40);
                  *((void *)a2 + 41) -= 8;
                  unint64_t v225 = *((void *)a2 + 43);
                }
                else
                {
                  char v290 = 0;
                }
LABEL_409:
                v228 = (char *)&v226[v225 >> 7];
                v227 = (void **)*((void *)v289 + 41);
                if (v227 == v226)
                {
                  v229 = 0;
                  if (v290) {
                    goto LABEL_318;
                  }
                }
                else
                {
                  v229 = (unsigned int *)(*(void *)v228 + 32 * (v225 & 0x7F));
                  if (v290) {
                    goto LABEL_318;
                  }
                }
                uint64_t v291 = v596 + (((uint64_t)v229 - *(void *)v228) >> 5);
                if (v291 < 1)
                {
                  unint64_t v292 = 127 - v291;
                  v228 -= 8 * (v292 >> 7);
                  v229 = (unsigned int *)(*(void *)v228 + 32 * (~(_BYTE)v292 & 0x7F));
                }
                else
                {
                  v228 += 8 * ((unint64_t)v291 >> 7);
                  v229 = (unsigned int *)(*(void *)v228 + 32 * (v291 & 0x7F));
                }
                goto LABEL_318;
              }
            }
            if (!atomic_fetch_add(&v327->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
            }
            goto LABEL_482;
          }
          char v587 = 0;
LABEL_344:
          uint64_t v248 = (v238 - (uint64_t)v240) >> 5;
          if (v238 - (uint64_t)v240 < -31)
          {
            unint64_t v251 = 126 - v248;
            char v249 = ~(_BYTE)v251;
            v250 = &v241[-(v251 >> 7)];
          }
          else
          {
            char v249 = v248 + 1;
            v250 = &v241[(unint64_t)(v248 + 1) >> 7];
          }
          uint64_t v252 = (uint64_t)*v250;
          uint64_t v253 = (uint64_t)*v250 + 32 * (v249 & 0x7F);
          if (v237 == (char *)v241)
          {
            v262 = v617;
            if (v617 != (ggl::MetalResourceManager *)v238)
            {
              while (1)
              {
                uint64_t v281 = (v253 - v252) >> 5;
                if ((v238 - (uint64_t)v617) >> 5 >= v281) {
                  uint64_t v282 = v281;
                }
                else {
                  uint64_t v282 = (v238 - (uint64_t)v617) >> 5;
                }
                if (v282)
                {
                  uint64_t v283 = v253 - 16;
                  uint64_t v284 = v238 - 16;
                  uint64_t v5 = -32 * v282;
                  do
                  {
                    *(_OWORD *)(v283 - 16) = *(_OWORD *)(v284 - 16);
                    long long v285 = *(_OWORD *)v284;
                    *(void *)uint64_t v284 = 0;
                    *(void *)(v284 + 8) = 0;
                    v286 = *(std::__shared_weak_count **)(v283 + 8);
                    *(_OWORD *)uint64_t v283 = v285;
                    if (v286 && !atomic_fetch_add(&v286->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                      std::__shared_weak_count::__release_weak(v286);
                    }
                    v283 -= 32;
                    v284 -= 32;
                    v5 += 32;
                  }
                  while (v5);
                }
                v238 -= 32 * v282;
                if ((ggl::MetalResourceManager *)v238 == v617) {
                  break;
                }
                uint64_t v280 = (uint64_t)*--v250;
                uint64_t v252 = v280;
                uint64_t v253 = v280 + 4096;
              }
            }
          }
          else
          {
            v606 = v237;
            if (v240 != (void *)v238)
            {
              while (1)
              {
                uint64_t v254 = (v253 - v252) >> 5;
                if ((v238 - (uint64_t)v240) >> 5 >= v254) {
                  uint64_t v255 = v254;
                }
                else {
                  uint64_t v255 = (v238 - (uint64_t)v240) >> 5;
                }
                if (v255)
                {
                  uint64_t v256 = v238 - 16;
                  uint64_t v5 = -32 * v255;
                  do
                  {
                    *(_OWORD *)(v253 - 32) = *(_OWORD *)(v256 - 16);
                    long long v257 = *(_OWORD *)v256;
                    *(void *)uint64_t v256 = 0;
                    *(void *)(v256 + 8) = 0;
                    int64x2_t v258 = *(std::__shared_weak_count **)(v253 - 8);
                    *(_OWORD *)(v253 - 16) = v257;
                    if (v258 && !atomic_fetch_add(&v258->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                      std::__shared_weak_count::__release_weak(v258);
                    }
                    v253 -= 32;
                    v256 -= 32;
                    v5 += 32;
                  }
                  while (v5);
                }
                v238 -= 32 * v255;
                if ((void *)v238 == v240) {
                  break;
                }
                uint64_t v259 = (uint64_t)*--v250;
                uint64_t v252 = v259;
                uint64_t v253 = v259 + 4096;
              }
              uint64_t v252 = (uint64_t)*v250;
              v237 = v606;
              if ((char *)*v250 + 4096 == (void *)v253)
              {
                uint64_t v260 = (uint64_t)v250[1];
                ++v250;
                uint64_t v252 = v260;
                uint64_t v253 = v260;
              }
            }
            v261 = (char *)(v241 - 1);
            if (v241 - 1 == (void **)v237)
            {
              v262 = v617;
            }
            else
            {
              do
              {
                uint64_t v271 = *(void *)v261;
                uint64_t v272 = *(void *)v261 + 4096;
                while (1)
                {
                  uint64_t v273 = (v253 - v252) >> 5;
                  if ((v272 - v271) >> 5 >= v273) {
                    uint64_t v274 = v273;
                  }
                  else {
                    uint64_t v274 = (v272 - v271) >> 5;
                  }
                  if (v274)
                  {
                    uint64_t v275 = v272 - 16;
                    uint64_t v5 = -32 * v274;
                    do
                    {
                      *(_OWORD *)(v253 - 32) = *(_OWORD *)(v275 - 16);
                      long long v276 = *(_OWORD *)v275;
                      *(void *)uint64_t v275 = 0;
                      *(void *)(v275 + 8) = 0;
                      uint64_t v277 = *(std::__shared_weak_count **)(v253 - 8);
                      *(_OWORD *)(v253 - 16) = v276;
                      if (v277 && !atomic_fetch_add(&v277->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                        std::__shared_weak_count::__release_weak(v277);
                      }
                      v253 -= 32;
                      v275 -= 32;
                      v5 += 32;
                    }
                    while (v5);
                  }
                  v272 -= 32 * v274;
                  if (v272 == v271) {
                    break;
                  }
                  uint64_t v278 = (uint64_t)*--v250;
                  uint64_t v252 = v278;
                  uint64_t v253 = v278 + 4096;
                }
                uint64_t v252 = (uint64_t)*v250;
                if ((char *)*v250 + 4096 == (void *)v253)
                {
                  uint64_t v279 = (uint64_t)v250[1];
                  ++v250;
                  uint64_t v252 = v279;
                  uint64_t v253 = v279;
                }
                v262 = v617;
                v237 = v606;
                v261 -= 8;
              }
              while (v261 != v606);
            }
            uint64_t v263 = *(void *)v237 + 4096;
            if ((ggl::MetalResourceManager *)v263 != v262)
            {
              while (1)
              {
                uint64_t v264 = (v253 - v252) >> 5;
                if ((v263 - (uint64_t)v262) >> 5 >= v264) {
                  uint64_t v265 = v264;
                }
                else {
                  uint64_t v265 = (v263 - (uint64_t)v262) >> 5;
                }
                if (v265)
                {
                  uint64_t v266 = v253 - 16;
                  uint64_t v267 = v263 - 16;
                  uint64_t v5 = -32 * v265;
                  do
                  {
                    *(_OWORD *)(v266 - 16) = *(_OWORD *)(v267 - 16);
                    long long v268 = *(_OWORD *)v267;
                    *(void *)uint64_t v267 = 0;
                    *(void *)(v267 + 8) = 0;
                    v269 = *(std::__shared_weak_count **)(v266 + 8);
                    *(_OWORD *)uint64_t v266 = v268;
                    if (v269 && !atomic_fetch_add(&v269->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                      std::__shared_weak_count::__release_weak(v269);
                    }
                    v266 -= 32;
                    v267 -= 32;
                    v5 += 32;
                  }
                  while (v5);
                }
                v263 -= 32 * v265;
                if ((ggl::MetalResourceManager *)v263 == v262) {
                  break;
                }
                uint64_t v270 = (uint64_t)*--v250;
                uint64_t v252 = v270;
                uint64_t v253 = v270 + 4096;
              }
            }
          }
          uint64_t v287 = (std::__shared_weak_count *)*((void *)v262 + 3);
          if (v287 && !atomic_fetch_add(&v287->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
            std::__shared_weak_count::__release_weak(v287);
          }
          int64x2_t v288 = vaddq_s64(*(int64x2_t *)((char *)a2 + 344), (int64x2_t)xmmword_1A28FE7B0);
          *(int64x2_t *)((char *)a2 + 344) = v288;
          unint64_t v225 = v288.i64[0];
          uint64_t v289 = a2;
          uint64_t v226 = (void **)*((void *)a2 + 40);
          uint64_t v3 = v598;
          char v290 = v587;
          if (v288.i64[0] >= 0x100uLL)
          {
            operator delete(*v226);
            uint64_t v226 = (void **)(*((void *)a2 + 40) + 8);
            *((void *)a2 + 40) = v226;
            unint64_t v225 = *((void *)a2 + 43) - 128;
            *((void *)a2 + 43) = v225;
          }
          goto LABEL_409;
        }
        unint64_t v596 = 0;
      }
      char v587 = 1;
      v241 = &v226[v225 >> 7];
      goto LABEL_344;
    }
    v229 += 8;
    v233 += 8;
    if (*(unsigned int **)v228 == v233)
    {
      v234 = (unsigned int *)*((void *)v228 + 1);
      v228 += 8;
      v229 = v234;
      goto LABEL_319;
    }
  }
  if (v229) {
    goto LABEL_324;
  }
LABEL_489:
  k = (ggl::MetalResourceManager *)*((void *)v600 + 10);
  v331 = __src[6];
  uint64_t v332 = v603[4];
  memset(v640, 0, 24);
  {
    operator new();
  }
  unint64_t v99 = (unint64_t)&qword_1EB32C000;
  *(void *)&v640[24] = ggl::Allocator::instance(void)::alloc;
  long long v638 = 0uLL;
  *(void *)&long long v639 = 0;
  {
    operator new();
  }
  *((void *)&v639 + 1) = ggl::Allocator::instance(void)::alloc;
  long long v636 = 0uLL;
  *(void *)&long long v637 = 0;
  {
    operator new();
  }
  *((void *)&v637 + 1) = ggl::Allocator::instance(void)::alloc;
  if (*((void *)a2 + 38))
  {
    v589 = k;
    uint64_t v333 = (void **)(v332 + 24 * (void)v331);
    uint64_t v5 = 24;
    v619 = (ggl::MetalResourceManager *)(v333 + 1);
    v608 = v333 + 2;
    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL;
    uint64_t v334 = v603;
    while (1)
    {
      if (v334[1] == v334[2])
      {
LABEL_562:
        uint64_t v377 = *((void *)&v636 + 1);
        uint64_t v376 = v636;
        uint64_t v3 = v598;
        for (k = v589; v376 != v377; v376 += 64)
        {
          if (*(void *)(v376 + 24) != *(void *)(v376 + 16))
          {
            v379 = *(const ggl::Buffer **)(v376 + 8);
            os_signpost_id_t v380 = (uint64_t *)*((void *)v379 + 3);
            if (v380 || (os_signpost_id_t v380 = ggl::MetalResourceManager::newBuffer(v589, v379)) != 0)
            {
              v381 = (void *)v380[4];
              if (v381)
              {
                memcpy((void *)([v381 contents] + *(void *)(v376 + 16)), *(const void **)v376, *(void *)(v376 + 24) - *(void *)(v376 + 16));
                uint64_t v382 = *(void *)(v376 + 56);
                if (v382) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v382 + 48))(v382, v376);
                }
              }
            }
          }
        }
        goto LABEL_563;
      }
      long long v335 = *(_OWORD *)(*(void *)(*((void *)a2 + 34) + ((*((void *)a2 + 37) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *((void *)a2 + 37));
      long long v635 = v335;
      if (*((void *)&v335 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v335 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v336 = *(std::__shared_weak_count **)(*(void *)(*((void *)a2 + 34)
                                                        + ((*((void *)a2 + 37) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * *((void *)a2 + 37)
                                            + 8);
        if (v336)
        {
          if (!atomic_fetch_add(&v336->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
            std::__shared_weak_count::__release_weak(v336);
          }
        }
      }
      int64x2_t v337 = vaddq_s64(*v612, (int64x2_t)xmmword_1A28FE7B0);
      int64x2_t *v612 = v337;
      if (v337.i64[0] >= 0x200uLL)
      {
        operator delete(**((void ***)a2 + 34));
        *((void *)a2 + 34) += 8;
        *((void *)a2 + 37) -= 256;
      }
      uint64_t v338 = v635;
      unsigned __int8 v339 = *(unsigned char *)(v635 + 128) - 1;
      *(unsigned char *)(v635 + 128) = v339;
      if (!(*(unsigned char *)(v338 + 136) | v339)) {
        break;
      }
LABEL_557:
      v375 = (std::__shared_weak_count *)*((void *)&v635 + 1);
      if (*((void *)&v635 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v635 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
        std::__shared_weak_count::__release_weak(v375);
      }
      if (!*((void *)a2 + 38)) {
        goto LABEL_562;
      }
    }
    uint64_t v340 = v334[2];
    int v341 = *(_DWORD *)(v340 - 4);
    v334[2] = v340 - 4;
    uint64_t v342 = *(char **)v619;
    if (*(void *)v619 < *v608)
    {
      *(_DWORD *)uint64_t v342 = v341;
      uint64_t v343 = v342 + 4;
      goto LABEL_527;
    }
    int v344 = v333;
    unint64_t v345 = (char *)*v333;
    uint64_t v346 = v342 - (unsigned char *)*v333;
    uint64_t v347 = v346 >> 2;
    unint64_t v348 = (v346 >> 2) + 1;
    if (v348 >> 62) {
      goto LABEL_873;
    }
    uint64_t v349 = *v608 - (void)v345;
    if (v349 >> 1 > v348) {
      unint64_t v348 = v349 >> 1;
    }
    if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v350 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v350 = v348;
    }
    if (v350)
    {
      if (v350 >> 62) {
        goto LABEL_871;
      }
      uint64_t v351 = operator new(4 * v350);
    }
    else
    {
      uint64_t v351 = 0;
    }
    uint64_t v352 = &v351[4 * v347];
    *uint64_t v352 = v341;
    uint64_t v343 = v352 + 1;
    if (v342 == v345)
    {
      uint64_t v333 = v344;
    }
    else
    {
      unint64_t v353 = v342 - 4 - v345;
      if (v353 >= 0x2C)
      {
        unint64_t v354 = v342 - &v351[v346];
        uint64_t v333 = v344;
        if (v354 >= 0x20)
        {
          uint64_t v355 = (v353 >> 2) + 1;
          v356 = &v351[4 * v347 - 16];
          id v357 = v342 - 16;
          uint64_t v358 = v355 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v359 = *(_OWORD *)v357;
            *(v356 - 1) = *((_OWORD *)v357 - 1);
            _OWORD *v356 = v359;
            v356 -= 2;
            v357 -= 32;
            v358 -= 8;
          }
          while (v358);
          v352 -= v355 & 0x7FFFFFFFFFFFFFF8;
          v342 -= 4 * (v355 & 0x7FFFFFFFFFFFFFF8);
          if (v355 == (v355 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_524;
          }
        }
      }
      else
      {
        uint64_t v333 = v344;
      }
      do
      {
        int v360 = *((_DWORD *)v342 - 1);
        v342 -= 4;
        *--uint64_t v352 = v360;
      }
      while (v342 != v345);
    }
LABEL_524:
    *uint64_t v333 = v352;
    *(void *)v619 = v343;
    void *v608 = &v351[4 * v350];
    if (v345) {
      operator delete(v345);
    }
    uint64_t v5 = 24;
    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL;
LABEL_527:
    *(void *)v619 = v343;
    ggl::RenderItem::gatherBufferLoadItems((void *)v338, (uint64_t)&v636, v600, (uint64_t)__src[5], (uint64_t)__src[6]);
    ggl::RenderItem::gatherTextureLoadItems(v338, (uint64_t)&v638, (int)__src[7]);
    LODWORD(v633) = v341;
    *(void *)&long long v634 = v338;
    *((void *)&v634 + 1) = *((void *)&v635 + 1);
    if (*((void *)&v635 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v635 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v361 = *(void *)&v640[8];
    uint64_t v362 = *(void *)&v640[16];
    if (*(void *)&v640[8] < *(void *)&v640[16])
    {
      if (*(void *)&v640[8])
      {
        **(_DWORD **)&v640[8] = v341;
        *(_OWORD *)(v361 + 8) = v634;
        long long v634 = 0uLL;
      }
      uint64_t v363 = v361 + 24;
      goto LABEL_553;
    }
    uint64_t v364 = *(void *)v640;
    unint64_t v365 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v640[8] - *(void *)v640) >> 3);
    unint64_t v366 = v365 + 1;
    if (v365 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    if (0x5555555555555556 * ((uint64_t)(*(void *)&v640[16] - *(void *)v640) >> 3) > v366) {
      unint64_t v366 = 0x5555555555555556 * ((uint64_t)(*(void *)&v640[16] - *(void *)v640) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v640[16] - *(void *)v640) >> 3) >= 0x555555555555555) {
      uint64_t v367 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      uint64_t v367 = v366;
    }
    if (v367)
    {
      uint64_t v368 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)&v640[24] + 16))(*(void *)&v640[24], 24 * v367, 8);
      uint64_t v369 = v368 + 24 * v365;
      uint64_t v370 = v368 + 24 * v367;
      if (v368)
      {
        *(_DWORD *)uint64_t v369 = v341;
        *(_OWORD *)(v368 + 24 * v365 + 8) = v634;
        long long v634 = 0uLL;
      }
    }
    else
    {
      uint64_t v370 = 0;
      uint64_t v369 = 8 * ((uint64_t)(*(void *)&v640[8] - *(void *)v640) >> 3);
    }
    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL;
    uint64_t v363 = v369 + 24;
    if (v361 == v364)
    {
      *(void *)v640 = v369;
      *(void *)&v640[16] = v370;
      if (!v361)
      {
LABEL_553:
        *(void *)&v640[8] = v363;
        uint64_t v374 = (std::__shared_weak_count *)*((void *)&v634 + 1);
        if (*((void *)&v634 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v634 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
        uint64_t v334 = v603;
        goto LABEL_557;
      }
    }
    else
    {
      uint64_t v371 = v361;
      do
      {
        int v372 = *(_DWORD *)(v371 - 24);
        v371 -= 24;
        *(_DWORD *)(v369 - 24) = v372;
        v369 -= 24;
        *(_OWORD *)(v369 + 8) = *(_OWORD *)(v371 + 8);
        *(void *)(v371 + 8) = 0;
        *(void *)(v371 + 16) = 0;
      }
      while (v371 != v364);
      *(void *)v640 = v369;
      *(void *)&v640[8] = v363;
      *(void *)&v640[16] = v370;
      do
      {
        uint64_t v373 = *(std::__shared_weak_count **)(v361 - 8);
        if (v373 && !atomic_fetch_add(&v373->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
          std::__shared_weak_count::__release_weak(v373);
        }
        v361 -= 24;
      }
      while (v361 != v364);
      uint64_t v361 = v364;
      unint64_t v99 = 0xAAAAAAAAAAAAAAABLL;
      if (!v364) {
        goto LABEL_553;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&v640[24] + 40))(*(void *)&v640[24], v361, v362 - v361);
    goto LABEL_553;
  }
LABEL_563:
  uint64_t v378 = *((void *)&v638 + 1);
  unint64_t v211 = v638;
  for (m = &__src[2]; v211 != v378; v211 += 80)
    ggl::MetalResourceManager::upload(k, v211, &__src[2]);
  uint64_t v156 = *(void *)v640;
  v609 = *(void **)&v640[8];
  if (*(void *)v640 == *(void *)&v640[8]) {
    goto LABEL_707;
  }
  do
  {
    int v383 = *(_DWORD *)v156;
    uint64_t v203 = *(std::__shared_weak_count **)(v156 + 16);
    v616 = *(ggl::MetalResourceManager **)(v156 + 8);
    v633 = v616;
    *(void *)&long long v634 = v203;
    if (v203) {
      atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v613 = v383;
    [__src[4] setVisibilityResultMode:1 offset:(8 * v383)];
    *(void *)&long long v635 = v616;
    if (!*((void *)&v646 + 1)) {
      goto LABEL_870;
    }
    (*(void (**)(void, long long *))(**((void **)&v646 + 1) + 48))(*((void *)&v646 + 1), &v635);
    m = (void **)*((void *)a2 + 41);
    k = (ggl::MetalResourceManager *)*((void *)a2 + 40);
    uint64_t v5 = (char *)m - (char *)k;
    if (m == (void **)k) {
      uint64_t v384 = 0;
    }
    else {
      uint64_t v384 = 16 * ((char *)m - (char *)k) - 1;
    }
    unint64_t v385 = *((void *)a2 + 43);
    unint64_t v386 = *((void *)a2 + 44) + v385;
    if (v384 != v386)
    {
      uint64_t v387 = v616;
      goto LABEL_696;
    }
    if (v385 < 0x80)
    {
      uint64_t v394 = v5 >> 3;
      v395 = (void **)*((void *)a2 + 42);
      unint64_t v99 = *((void *)a2 + 39);
      uint64_t v396 = (uint64_t)v395 - v99;
      if (v5 >> 3 < (unint64_t)((uint64_t)((uint64_t)v395 - v99) >> 3))
      {
        if (v395 != m)
        {
          *m = operator new(0x1000uLL);
          uint64_t v388 = a2;
LABEL_694:
          *((void *)v388 + 41) += 8;
          uint64_t v387 = v616;
          goto LABEL_695;
        }
        v408 = operator new(0x1000uLL);
        v409 = k;
        if ((ggl::MetalResourceManager *)v99 != k)
        {
LABEL_669:
          *((void *)v409 - 1) = v408;
          uint64_t v388 = a2;
          unint64_t v211 = *((void *)a2 + 40);
          uint64_t v5 = *((void *)a2 + 41);
          *((void *)a2 + 40) = v211 - 8;
          m = *(void ***)(v211 - 8);
          *((void *)a2 + 40) = v211;
          if (v5 != *((void *)a2 + 42))
          {
LABEL_693:
            *(void *)uint64_t v5 = m;
            goto LABEL_694;
          }
          unint64_t v99 = *((void *)a2 + 39);
          if (v211 > v99)
          {
            uint64_t v457 = (uint64_t)(v211 - v99) >> 3;
            if (v457 >= -1) {
              uint64_t v458 = v457 + 1;
            }
            else {
              uint64_t v458 = v457 + 2;
            }
            uint64_t v459 = v458 >> 1;
            unint64_t v99 = v211 - 8 * (v458 >> 1);
            size_t v460 = v5 - v211;
            if (v460)
            {
              memmove((void *)(v211 - 8 * (v458 >> 1)), (const void *)v211, v460);
              uint64_t v388 = a2;
              unint64_t v211 = *((void *)a2 + 40);
            }
            else
            {
              uint64_t v388 = a2;
            }
            uint64_t v5 = v99 + v460;
            *((void *)v388 + 40) = v211 - 8 * v459;
            *((void *)v388 + 41) = v5;
            goto LABEL_693;
          }
          if (v5 == v99) {
            unint64_t v461 = 1;
          }
          else {
            unint64_t v461 = (uint64_t)(v5 - v99) >> 2;
          }
          if (v461 >> 61) {
            goto LABEL_871;
          }
          v462 = (char *)operator new(8 * v461);
          unint64_t v463 = v461 >> 2;
          v464 = &v462[8 * (v461 >> 2)];
          unint64_t v465 = v5 - v211;
          BOOL v38 = v5 == v211;
          uint64_t v5 = (uint64_t)v464;
          if (!v38)
          {
            uint64_t v5 = (uint64_t)&v464[v465 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v466 = v465 - 8;
            if (v466 < 0x38)
            {
              v467 = &v462[8 * (v461 >> 2)];
              goto LABEL_690;
            }
            uint64_t v468 = 8 * v463;
            unint64_t v469 = (unint64_t)&v462[8 * v463 - v211];
            v467 = &v462[8 * (v461 >> 2)];
            if (v469 < 0x20)
            {
              do
              {
LABEL_690:
                uint64_t v476 = *(void *)v211;
                v211 += 8;
                *(void *)v467 = v476;
                v467 += 8;
              }
              while (v467 != (char *)v5);
              goto LABEL_691;
            }
            uint64_t v470 = (v466 >> 3) + 1;
            uint64_t v471 = 8 * (v470 & 0x3FFFFFFFFFFFFFFCLL);
            v467 = &v464[v471];
            v472 = (long long *)(v211 + 16);
            v473 = &v462[v468 + 16];
            uint64_t v474 = v470 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v475 = *v472;
              *((_OWORD *)v473 - 1) = *(v472 - 1);
              *(_OWORD *)v473 = v475;
              v472 += 2;
              v473 += 32;
              v474 -= 4;
            }
            while (v474);
            if (v470 != (v470 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v211 += v471;
              goto LABEL_690;
            }
          }
LABEL_691:
          uint64_t v388 = a2;
          *((void *)a2 + 39) = v462;
          *((void *)a2 + 40) = v464;
          *((void *)a2 + 41) = v5;
          *((void *)a2 + 42) = &v462[8 * v461];
          if (v99)
          {
            operator delete((void *)v99);
            uint64_t v5 = *((void *)a2 + 41);
          }
          goto LABEL_693;
        }
        if (m == (void **)k) {
          unint64_t v410 = 1;
        }
        else {
          unint64_t v410 = v396 >> 2;
        }
        if (v410 >> 61) {
          goto LABEL_871;
        }
        v411 = (char *)operator new(8 * v410);
        unint64_t v412 = (v410 + 3) >> 2;
        v409 = (ggl::MetalResourceManager *)&v411[8 * v412];
        v413 = &v411[8 * v410];
        v414 = v409;
        if (m != (void **)k)
        {
          v414 = (ggl::MetalResourceManager *)((char *)v409 + (((unint64_t)m - v99) & 0xFFFFFFFFFFFFFFF8));
          unint64_t v415 = (unint64_t)m - v99 - 8;
          v416 = &v411[8 * v412];
          v417 = k;
          if (v415 > 0x37)
          {
            uint64_t v418 = 8 * v412;
            v416 = &v411[8 * v412];
            v417 = k;
            if ((unint64_t)&v416[-v99] >= 0x20)
            {
              uint64_t v419 = (v415 >> 3) + 1;
              uint64_t v420 = 8 * (v419 & 0x3FFFFFFFFFFFFFFCLL);
              v416 = (char *)v409 + v420;
              v421 = (long long *)((char *)k + 16);
              v422 = &v411[v418 + 16];
              uint64_t v423 = v419 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v424 = *v421;
                *((_OWORD *)v422 - 1) = *(v421 - 1);
                *(_OWORD *)v422 = v424;
                v421 += 2;
                v422 += 32;
                v423 -= 4;
              }
              while (v423);
              if (v419 == (v419 & 0x3FFFFFFFFFFFFFFCLL))
              {
                *((void *)a2 + 39) = v411;
                *((void *)a2 + 40) = v409;
                *((void *)a2 + 41) = v414;
                *((void *)a2 + 42) = v413;
LABEL_668:
                operator delete(k);
                v409 = (ggl::MetalResourceManager *)*((void *)a2 + 40);
                goto LABEL_669;
              }
              v417 = (ggl::MetalResourceManager *)((char *)k + v420);
            }
          }
          do
          {
            uint64_t v456 = *(void *)v417;
            v417 = (ggl::MetalResourceManager *)((char *)v417 + 8);
            *(void *)v416 = v456;
            v416 += 8;
          }
          while (v416 != (char *)v414);
        }
        *((void *)a2 + 39) = v411;
        *((void *)a2 + 40) = v409;
        *((void *)a2 + 41) = v414;
        *((void *)a2 + 42) = v413;
        if (!k) {
          goto LABEL_669;
        }
        goto LABEL_668;
      }
      if (v395 == (void **)v99) {
        unint64_t v211 = 1;
      }
      else {
        unint64_t v211 = v396 >> 2;
      }
      if (!(v211 >> 61))
      {
        v397 = (char *)operator new(8 * v211);
        long long v398 = operator new(0x1000uLL);
        uint64_t v399 = &v397[8 * v394];
        unint64_t v99 = (unint64_t)&v397[8 * v211];
        if (v394 != v211) {
          goto LABEL_628;
        }
        if (v5 >= 1)
        {
          unint64_t v400 = v394 + 2;
          if (v394 >= -1) {
            unint64_t v400 = v394 + 1;
          }
          v399 -= 8 * (v400 >> 1);
LABEL_628:
          *(void *)uint64_t v399 = v398;
          uint64_t v5 = (uint64_t)(v399 + 8);
          if (m == (void **)k)
          {
LABEL_629:
            uint64_t v388 = a2;
            v426 = (void *)*((void *)a2 + 39);
            *((void *)a2 + 39) = v397;
            *((void *)a2 + 40) = v399;
            *((void *)a2 + 41) = v5;
            *((void *)a2 + 42) = v99;
            uint64_t v387 = v616;
            if (v426) {
              operator delete(v426);
            }
            goto LABEL_695;
          }
          while (v399 != v397)
          {
            v427 = v399;
            v428 = (char *)v5;
LABEL_632:
            uint64_t v429 = (uint64_t)*--m;
            *((void *)v427 - 1) = v429;
            unint64_t v211 = (unint64_t)(v427 - 8);
            uint64_t v399 = (char *)v211;
            uint64_t v5 = (uint64_t)v428;
            if (m == *((void ***)a2 + 40)) {
              goto LABEL_629;
            }
          }
          if (v5 < v99)
          {
            uint64_t v430 = (uint64_t)(v99 - v5) >> 3;
            if (v430 >= -1) {
              unint64_t v431 = v430 + 1;
            }
            else {
              unint64_t v431 = v430 + 2;
            }
            v428 = (char *)(v5 + 8 * (v431 >> 1));
            v427 = &v399[8 * (v431 >> 1)];
            if ((char *)v5 == v399)
            {
              v397 = (char *)v5;
            }
            else
            {
              memmove(&v399[8 * (v431 >> 1)], v399, v5 - (void)v399);
              v397 = v399;
            }
            goto LABEL_632;
          }
          if ((char *)v99 == v399) {
            unint64_t v432 = 1;
          }
          else {
            unint64_t v432 = (uint64_t)(v99 - (void)v399) >> 2;
          }
          if (v432 >> 61) {
            goto LABEL_871;
          }
          v433 = (char *)operator new(8 * v432);
          v397 = v433;
          unint64_t v434 = (v432 + 3) >> 2;
          v427 = &v433[8 * v434];
          v428 = v427;
          uint64_t v435 = v5 - (void)v399;
          if ((char *)v5 != v399)
          {
            v428 = &v427[v435 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v436 = v435 - 8;
            v437 = &v433[8 * v434];
            v438 = v399;
            if (v436 >= 0x38)
            {
              uint64_t v439 = 8 * v434;
              v437 = &v433[8 * v434];
              v438 = v399;
              if ((unint64_t)(v437 - v399) >= 0x20)
              {
                uint64_t v440 = (v436 >> 3) + 1;
                uint64_t v441 = 8 * (v440 & 0x3FFFFFFFFFFFFFFCLL);
                v437 = &v427[v441];
                v442 = (long long *)(v399 + 16);
                v443 = &v433[v439 + 16];
                uint64_t v444 = v440 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v445 = *v442;
                  *((_OWORD *)v443 - 1) = *(v442 - 1);
                  *(_OWORD *)v443 = v445;
                  v442 += 2;
                  v443 += 32;
                  v444 -= 4;
                }
                while (v444);
                if (v440 == (v440 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_652;
                }
                v438 = &v399[v441];
              }
            }
            do
            {
              uint64_t v446 = *(void *)v438;
              v438 += 8;
              *(void *)v437 = v446;
              v437 += 8;
            }
            while (v437 != v428);
          }
LABEL_652:
          unint64_t v99 = (unint64_t)&v433[8 * v432];
          operator delete(v399);
          goto LABEL_632;
        }
        if (m == (void **)k) {
          unint64_t v211 = 1;
        }
        else {
          unint64_t v211 = v5 >> 2;
        }
        if (!(v211 >> 61))
        {
          v425 = v398;
          uint64_t v399 = (char *)operator new(8 * v211);
          unint64_t v99 = (unint64_t)&v399[8 * v211];
          operator delete(v397);
          k = (ggl::MetalResourceManager *)*((void *)a2 + 40);
          m = (void **)*((void *)a2 + 41);
          v397 = v399;
          long long v398 = v425;
          goto LABEL_628;
        }
      }
LABEL_871:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v387 = v616;
    uint64_t v388 = a2;
    *((void *)a2 + 43) = v385 - 128;
    unint64_t v211 = (unint64_t)k + 8;
    uint64_t v389 = *(void **)k;
    *((void *)a2 + 40) = (char *)k + 8;
    if (*((void ***)a2 + 42) == m)
    {
      unint64_t v99 = *((void *)a2 + 39);
      if (v211 > v99)
      {
        uint64_t v390 = (uint64_t)(v211 - v99) >> 3;
        if (v390 >= -1) {
          uint64_t v391 = v390 + 1;
        }
        else {
          uint64_t v391 = v390 + 2;
        }
        uint64_t v392 = v391 >> 1;
        unint64_t v99 = v211 - 8 * (v391 >> 1);
        uint64_t v5 = (uint64_t)m - v211;
        if (m == (void **)v211)
        {
          v393 = m;
          uint64_t v388 = a2;
        }
        else
        {
          memmove((void *)(v211 - 8 * (v391 >> 1)), (const void *)v211, (size_t)m - v211);
          uint64_t v388 = a2;
          v393 = (void **)*((void *)a2 + 40);
        }
        m = (void **)(v99 + v5);
        *((void *)v388 + 40) = &v393[-v392];
        *((void *)v388 + 41) = v99 + v5;
        goto LABEL_664;
      }
      if (m == (void **)v99) {
        unint64_t v401 = 1;
      }
      else {
        unint64_t v401 = (uint64_t)((uint64_t)m - v99) >> 2;
      }
      if (v401 >> 61) {
        goto LABEL_871;
      }
      long long v402 = (char *)operator new(8 * v401);
      unint64_t v403 = v401 >> 2;
      long long v404 = (void **)&v402[8 * (v401 >> 2)];
      unint64_t v405 = (unint64_t)m - v211;
      BOOL v38 = m == (void **)v211;
      m = v404;
      if (!v38)
      {
        m = (void **)((char *)v404 + (v405 & 0xFFFFFFFFFFFFFFF8));
        unint64_t v406 = v405 - 8;
        if (v406 < 0x38)
        {
          v407 = (void **)&v402[8 * (v401 >> 2)];
          goto LABEL_661;
        }
        uint64_t v447 = 8 * v403;
        unint64_t v448 = (unint64_t)&v402[8 * v403 - v211];
        v407 = (void **)&v402[8 * (v401 >> 2)];
        if (v448 < 0x20)
        {
          do
          {
LABEL_661:
            v455 = *(void **)v211;
            v211 += 8;
            *v407++ = v455;
          }
          while (v407 != m);
          goto LABEL_662;
        }
        uint64_t v449 = (v406 >> 3) + 1;
        uint64_t v450 = v449 & 0x3FFFFFFFFFFFFFFCLL;
        v407 = &v404[v450];
        v451 = (long long *)((char *)k + 24);
        v452 = &v402[v447 + 16];
        uint64_t v453 = v449 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v454 = *v451;
          *((_OWORD *)v452 - 1) = *(v451 - 1);
          *(_OWORD *)v452 = v454;
          v451 += 2;
          v452 += 32;
          v453 -= 4;
        }
        while (v453);
        if (v449 != (v449 & 0x3FFFFFFFFFFFFFFCLL))
        {
          v211 += v450 * 8;
          goto LABEL_661;
        }
      }
LABEL_662:
      uint64_t v388 = a2;
      *((void *)a2 + 39) = v402;
      *((void *)a2 + 40) = v404;
      *((void *)a2 + 41) = m;
      *((void *)a2 + 42) = &v402[8 * v401];
      uint64_t v387 = v616;
      if (v99)
      {
        operator delete((void *)v99);
        m = (void **)*((void *)a2 + 41);
      }
    }
LABEL_664:
    *m = v389;
    *((void *)v388 + 41) += 8;
LABEL_695:
    k = (ggl::MetalResourceManager *)*((void *)v388 + 40);
    unint64_t v386 = *((void *)v388 + 44) + *((void *)v388 + 43);
LABEL_696:
    uint64_t v477 = *(void *)((char *)k + ((v386 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v386 & 0x7F);
    v478 = __src[5];
    *(_DWORD *)uint64_t v477 = v613;
    *(void *)(v477 + 8) = v478;
    *(void *)(v477 + 16) = v387;
    *(void *)(v477 + 24) = v203;
    if (v203)
    {
      atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(*(void *)(v477 + 16) + 120) = v477;
      ++*((void *)a2 + 44);
      if (!atomic_fetch_add(&v203->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    else
    {
      *((void *)v387 + 15) = v477;
      ++*((void *)a2 + 44);
    }
    v156 += 24;
  }
  while ((void *)v156 != v609);
  uint64_t v479 = *(void *)v640;
  uint64_t v156 = *(void *)&v640[8];
  if (*(void *)&v640[8] == *(void *)v640)
  {
    uint64_t v3 = v598;
  }
  else
  {
    uint64_t v3 = v598;
    do
    {
      v480 = *(std::__shared_weak_count **)(v156 - 8);
      if (v480 && !atomic_fetch_add(&v480->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
        std::__shared_weak_count::__release_weak(v480);
      }
      v156 -= 24;
    }
    while (v156 != v479);
    uint64_t v156 = v479;
  }
LABEL_707:
  *(void *)&v640[8] = v156;
  [__src[4] setVisibilityResultMode:0 offset:0];
  v481 = (void *)v636;
  if ((void)v636)
  {
    uint64_t v482 = v636;
    if (*((void *)&v636 + 1) != (void)v636)
    {
      uint64_t v483 = *((void *)&v636 + 1) - 32;
      v484 = (void *)(*((void *)&v636 + 1) - 32);
      do
      {
        v486 = (void *)v484[3];
        if (v484 == v486)
        {
          (*(void (**)(void *))(*v484 + 32))(v484);
        }
        else if (v486)
        {
          (*(void (**)(void *, uint64_t))(*v486 + 40))(v486, v482);
        }
        v485 = v484 - 4;
        v484 -= 8;
        v483 -= 64;
      }
      while (v485 != v481);
      uint64_t v482 = v636;
    }
    *((void *)&v636 + 1) = v481;
    (*(void (**)(void, uint64_t, void))(**((void **)&v637 + 1) + 40))(*((void *)&v637 + 1), v482, v637 - v482);
  }
  v487 = (void *)v638;
  if (!(void)v638) {
    goto LABEL_732;
  }
  uint64_t v488 = v638;
  if (*((void *)&v638 + 1) == (void)v638) {
    goto LABEL_731;
  }
  uint64_t v489 = *((void *)&v638 + 1) - 32;
  v490 = (void *)(*((void *)&v638 + 1) - 32);
  do
  {
    v492 = (void *)v490[3];
    if (v490 == v492)
    {
      (*(void (**)(void *, uint64_t))(*v490 + 32))(v490, v488);
      if (*((unsigned char *)v490 - 28)) {
        goto LABEL_725;
      }
    }
    else
    {
      if (v492) {
        (*(void (**)(void *, uint64_t))(*v492 + 40))(v492, v488);
      }
      if (*((unsigned char *)v490 - 28)) {
LABEL_725:
      }
        *((unsigned char *)v490 - 28) = 0;
    }
    if (*((unsigned char *)v490 - 32)) {
      *((unsigned char *)v490 - 32) = 0;
    }
    v491 = v490 - 6;
    v490 -= 10;
    v489 -= 80;
  }
  while (v491 != v487);
  uint64_t v488 = v638;
LABEL_731:
  *((void *)&v638 + 1) = v487;
  (*(void (**)(void, uint64_t, void))(**((void **)&v639 + 1) + 40))(*((void *)&v639 + 1), v488, v639 - v488);
LABEL_732:
  uint64_t v493 = *(void *)v640;
  if (*(void *)v640)
  {
    uint64_t v494 = *(void *)&v640[8];
    uint64_t v495 = *(void *)v640;
    if (*(void *)&v640[8] != *(void *)v640)
    {
      do
      {
        v496 = *(std::__shared_weak_count **)(v494 - 8);
        if (v496 && !atomic_fetch_add(&v496->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v496->__on_zero_shared)(v496, v495);
          std::__shared_weak_count::__release_weak(v496);
        }
        v494 -= 24;
      }
      while (v494 != v493);
      uint64_t v495 = *(void *)v640;
    }
    *(void *)&v640[8] = v493;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&v640[24] + 40))(*(void *)&v640[24], v495, *(void *)&v640[16] - v495);
  }
  if (*((long long **)&v646 + 1) == &v645)
  {
    (*(void (**)(long long *))(v645 + 32))(&v645);
  }
  else if (*((void *)&v646 + 1))
  {
    (*(void (**)(void))(**((void **)&v646 + 1) + 40))();
  }

  v497 = (std::__shared_weak_count *)__src[3];
  if (__src[3] && !atomic_fetch_add((atomic_ullong *volatile)__src[3] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
    std::__shared_weak_count::__release_weak(v497);
  }
  v221 = a2;
LABEL_749:
  v601 = (ggl::Device *)*((void *)v3 + 2);
  unint64_t v498 = *(void *)(*((void *)v3 + 5) + 40);
  id v622 = v592;
  uint64_t v499 = *((void *)v221 + 17);
  uint64_t v593 = *((void *)v221 + 18);
  if (v499 != v593)
  {
    uint64_t v599 = *((void *)v3 + 4);
    uint64_t v604 = *(void *)(*((void *)v3 + 5) + 24);
    v614 = (void *)*((void *)v3 + 9);
    v620 = *(ggl::MetalResourceManager **)(*((void *)v3 + 5) + 32);
    while (2)
    {
      uint64_t v597 = v499;
      v500 = (ggl::MetalResourceManager *)*((void *)v601 + 10);
      v501 = *(void **)(*(void *)v499 + 8);
      uint64_t v502 = v501[21];
      uint64_t v503 = *(void *)(v502 + 24);
      v610 = (std::__shared_weak_count **)v500;
      if (!v503)
      {
        id v504 = objc_alloc_init(MEMORY[0x1E4F35340]);
        v505 = *(const ggl::ShaderFunction **)(v502 + 48);
        uint64_t v506 = *((void *)v505 + 3);
        if (!v506) {
          uint64_t v506 = ggl::MetalResourceManager::newShaderFunction(v500, v505, *(unsigned __int8 *)(v502 + 88), *(void *)(v502 + 96));
        }
        id v594 = *(id *)(v506 + 32);
        objc_msgSend(v504, "setTileFunction:");
        [v504 setThreadgroupSizeMatchesTileSize:1];
        if (*(void *)(v502 + 72))
        {
          uint64_t v507 = 0;
          do
          {
            unsigned int v508 = *(_DWORD *)(v502 + 56 + 4 * v507) - 1;
            if (v508 > 0x2A) {
              uint64_t v509 = 0;
            }
            else {
              uint64_t v509 = qword_1A29CAEB8[v508];
            }
            v510 = [v504 colorAttachments];
            v511 = [v510 objectAtIndexedSubscript:v507];
            [v511 setPixelFormat:v509];

            ++v507;
          }
          while (v507 != *(void *)(v502 + 72));
        }
        [v504 setRasterSampleCount:*(unsigned int *)(v502 + 80)];
        id v512 = (id)v610[32][4].__shared_owners_;
        __src[0] = 0;
        v513 = (void *)[v512 newRenderPipelineStateWithTileDescriptor:v504 options:0 reflection:0 error:__src];
        v514 = __src[0];

        if (v514)
        {
          v515 = [v514 localizedDescription];
          NSLog((NSString *)@"PSO error: %@", v515);

          uint64_t v503 = 0;
        }
        else
        {
          {
            operator new();
          }
          uint64_t v503 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                      + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
          *(void *)uint64_t v503 = 0;
          *(_WORD *)(v503 + 8) = 1281;
          *(void *)(v503 + 16) = 0;
          *(void *)(v503 + 24) = 0;
          *(void *)(v503 + 32) = 0;
          objc_storeStrong((id *)(v503 + 32), v513);
          v516 = v610[2];
          if (!v516 || (v517 = v610[1], (v518 = std::__shared_weak_count::lock(v516)) == 0))
          {
            std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_873:
            abort();
          }
          v519 = *(std::__shared_weak_count **)(v502 + 16);
          *(void *)(v502 + 8) = v517;
          *(void *)(v502 + 16) = v518;
          if (v519 && !atomic_fetch_add(&v519->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
            std::__shared_weak_count::__release_weak(v519);
          }
          *(void *)(v502 + 24) = v503;
          ++*(_DWORD *)(v502 + 32);
        }

        if (!v503) {
          goto LABEL_751;
        }
      }
      unint64_t v520 = atomic_load((unint64_t *)(v503 + 16));
      if (v520 < v498)
      {
        unint64_t v521 = v520;
        do
        {
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v503 + 16), &v521, v498);
          if (v521 == v520) {
            break;
          }
          unint64_t v520 = v521;
        }
        while (v521 < v498);
      }
      id v595 = *(id *)(v503 + 32);
      objc_msgSend(v622, "setRenderPipelineState:");
      v522 = **(void ***)(v501[21] + 40);
      int64x2_t v647 = 0u;
      long long v648 = 0u;
      long long v645 = 0u;
      long long v646 = 0u;
      memset(__src, 0, sizeof(__src));
      if (v522[7])
      {
        uint64_t v523 = 0;
        unint64_t v524 = 0;
        unint64_t v525 = 0;
        v526 = v622;
        while (1)
        {
          v527 = (unsigned __int8 *)(v522[6] + 2 * v525);
          uint64_t v528 = *v527;
          uint64_t v529 = v527[1];
          if (v524)
          {
            if (v524 <= 0xF && v523 + v524 == v529) {
              goto LABEL_783;
            }
            objc_msgSend(v526, "setTileBuffers:offsets:withRange:", __src, v640, v523, v524);
            unint64_t v524 = 0;
          }
          uint64_t v523 = v529;
LABEL_783:
          uint64_t v530 = *(void *)(v501[5] + 16 * v528);
          if (v530)
          {
            uint64_t v531 = *(void *)(*(void *)(v530 + 24) + 24);
            unint64_t v532 = atomic_load((unint64_t *)(v531 + 16));
            if (v532 < v498)
            {
              unint64_t v533 = v532;
              do
              {
                atomic_compare_exchange_strong((atomic_ullong *volatile)(v531 + 16), &v533, v498);
                if (v533 == v532) {
                  break;
                }
                unint64_t v532 = v533;
              }
              while (v533 < v498);
            }
            v534 = *(void **)(v531 + 32);
            id v535 = v534;
            objc_storeStrong(&__src[v524], v534);
            v536 = v620;
            if (*(_DWORD *)(v530 + 112) <= 1u) {
              v536 = 0;
            }
            *(void *)&v640[8 * v524] = *(void *)(v530 + 40) + (void)v536 * *(void *)(v530 + 120);

            ++v524;
          }
          ++v525;
          v526 = v622;
          if (v525 >= v522[7])
          {
            if (v524) {
              objc_msgSend(v622, "setTileBuffers:offsets:withRange:", __src, v640, v523, v524);
            }
            break;
          }
        }
      }

      v537 = (std::mutex **)v501[1];
      v538 = (std::mutex **)v501[2];
      if (v537 == v538)
      {
LABEL_822:
        int64x2_t v647 = 0u;
        long long v648 = 0u;
        long long v645 = 0u;
        long long v646 = 0u;
        memset(__src, 0, sizeof(__src));
        if (!v522[5]) {
          goto LABEL_836;
        }
        uint64_t v552 = 0;
        uint64_t v553 = 0;
        unint64_t v554 = 0;
        unint64_t v555 = 0;
        v556 = v622;
        while (2)
        {
          v557 = (unsigned __int8 *)(v522[4] + v552);
          uint64_t v558 = *v557;
          uint64_t v559 = v557[1];
          if (v554)
          {
            if (v554 > 0xF || v553 + v554 != v559)
            {
              objc_msgSend(v556, "setTileBuffers:offsets:withRange:", __src, v640, v553, v554);
              unint64_t v554 = 0;
              goto LABEL_829;
            }
          }
          else
          {
LABEL_829:
            uint64_t v553 = v559;
          }
          uint64_t v560 = *(void *)(v501[1] + 16 * v558);
          if (v560)
          {
            v561 = *(void **)(*(void *)(*(void *)(v560 + 24) + 24) + 32);
            id v562 = v561;
            objc_storeStrong(&__src[v554], v561);
            v563 = v620;
            if (*(_DWORD *)(v560 + 112) <= 1u) {
              v563 = 0;
            }
            *(void *)&v640[8 * v554] = *(void *)(v560 + 40) + (void)v563 * *(void *)(v560 + 120);

            ++v554;
          }
          ++v555;
          v552 += 2;
          v556 = v622;
          if (v555 < v522[5]) {
            continue;
          }
          break;
        }
        if (v554) {
          objc_msgSend(v622, "setTileBuffers:offsets:withRange:", __src, v640, v553, v554);
        }
LABEL_836:

        v564 = v610;
        if (v522[9])
        {
          uint64_t v565 = 0;
          while (2)
          {
            v566 = (unsigned __int8 *)(v522[8] + 2 * v565);
            uint64_t v567 = *v566;
            uint64_t v568 = v566[1];
            uint64_t v569 = *(unsigned __int8 *)(v522[10] + 2 * v565 + 1);
            if (*(void *)(v501[9] + 8 * v567)) {
              id v570 = *(id *)(v501[9] + 8 * v567);
            }
            else {
              id v570 = v614;
            }
            v571 = (uint64_t *)*((void *)v570 + 3);
            if (!v571)
            {
              if (*((_DWORD *)v570 + 14) == 4) {
                v571 = ggl::MetalResourceManager::prepareTexture(v564, (const Texture *)v570, v498);
              }
              else {
                v571 = 0;
              }
            }
            unint64_t v572 = atomic_load((unint64_t *)v571 + 2);
            if (v572 < v498)
            {
              unint64_t v573 = v572;
              do
              {
                atomic_compare_exchange_strong(v571 + 2, &v573, v498);
                if (v573 == v572) {
                  break;
                }
                unint64_t v572 = v573;
              }
              while (v573 < v498);
            }
            SamplerStateResource = ggl::MetalResourceManager::getSamplerStateResource((ggl::MetalResourceManager *)v564, (const Texture *)v570);
            if (!SamplerStateResource) {
              goto LABEL_838;
            }
            if (*((unsigned char *)v571 + 120) == 1)
            {
              v575 = (id *)(v571[4] + 8 * *((unsigned int *)v571 + 16));
LABEL_855:
              id v570 = *v575;
            }
            else if (!*((unsigned char *)v571 + 120))
            {
              v575 = (id *)v571[4];
              goto LABEL_855;
            }
            [v622 setTileTexture:v570 atIndex:v568];
            unint64_t v576 = atomic_load((unint64_t *)SamplerStateResource + 2);
            if (v576 < v498)
            {
              unint64_t v577 = v576;
              do
              {
                atomic_compare_exchange_strong(SamplerStateResource + 2, &v577, v498);
                if (v577 == v576) {
                  break;
                }
                unint64_t v576 = v577;
              }
              while (v577 < v498);
            }
            id v578 = (id)SamplerStateResource[4];
            [v622 setTileSamplerState:v578 atIndex:v569];

            v564 = v610;
LABEL_838:
            if ((unint64_t)++v565 >= v522[9]) {
              break;
            }
            continue;
          }
        }
        v579 = (void *)[v622 tileWidth];
        v580 = (void *)[v622 tileHeight];
        __src[0] = v579;
        __src[1] = v580;
        __src[2] = (void *)1;
        [v622 dispatchThreadsPerTile:__src];

LABEL_751:
        uint64_t v499 = v597 + 8;
        if (v597 + 8 == v593) {
          goto LABEL_864;
        }
        continue;
      }
      break;
    }
    while (1)
    {
LABEL_796:
      v539 = *v537;
      if (!*v537) {
        goto LABEL_795;
      }
      if (!*(void *)&v539->__m_.__opaque[16]) {
        ggl::BufferData::prepareBufferForDevice(*v537, v601, 0);
      }
      if (v539->__m_.__opaque[10] == 1 && v539[3].__m_.__sig != v604 && *(_DWORD *)&v539[1].__m_.__opaque[40])
      {
        v539[3].__m_.__sig = v604;
        *(_OWORD *)&v539->__m_.__opaque[48] = *(_OWORD *)&v539->__m_.__opaque[32];
      }
      v540 = v620;
      if (*(_DWORD *)&v539[1].__m_.__opaque[40] <= 1u) {
        v540 = 0;
      }
      int64x2_t v541 = *(int64x2_t *)&v539->__m_.__opaque[48];
      int64x2_t v542 = vaddq_s64(vdupq_n_s64((void)v540 * *(void *)&v539[1].__m_.__opaque[48]), v541);
      *(void *)&v539->__m_.__opaque[48] = 0;
      v539[1].__m_.__sig = 0;
      v543 = *(void **)&v539->__m_.__opaque[16];
      __src[0] = (void *)(*(void *)v539[1].__m_.__opaque + v541.i64[0]);
      __src[1] = v543;
      *(int64x2_t *)&__src[2] = v542;
      __src[7] = 0;
      v544 = *v537;
      uint64_t v545 = *(void *)&(*v537)->__m_.__opaque[16];
      if (*(_DWORD *)&(*v537)[1].__m_.__opaque[40] >= 2u && !*(void *)&v544[1].__m_.__opaque[32]) {
        *(void *)&v544[1].__m_.__opaque[32] = v599;
      }
      if ((vmovn_s64(vceqq_s64(v542, vdupq_laneq_s64(v542, 1))).u8[0] & 1) == 0)
      {
        v546 = (uint64_t *)v543[3];
        if (v546
          || (v546 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v610, (const ggl::Buffer *)v543)) != 0)
        {
          v547 = (void *)v546[4];
          if (v547)
          {
            uint64_t v548 = [v547 contents];
            memcpy((char *)__src[2] + v548, __src[0], (char *)__src[3] - (char *)__src[2]);
            if (__src[7]) {
              (*(void (**)(void *, void **))(*(void *)__src[7] + 48))(__src[7], __src);
            }
          }
        }
      }
      uint64_t v549 = *(void *)(v545 + 24);
      unint64_t v550 = atomic_load((unint64_t *)(v549 + 16));
      if (v550 < v498)
      {
        unint64_t v551 = v550;
        do
        {
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v549 + 16), &v551, v498);
          if (v551 == v550) {
            break;
          }
          unint64_t v550 = v551;
        }
        while (v551 < v498);
      }
      if (__src[7] != &__src[4]) {
        break;
      }
      (*((void (**)(void **))__src[4] + 4))(&__src[4]);
      v537 += 2;
      if (v537 == v538) {
        goto LABEL_822;
      }
    }
    if (__src[7]) {
      (*(void (**)(void))(*(void *)__src[7] + 40))();
    }
LABEL_795:
    v537 += 2;
    if (v537 == v538) {
      goto LABEL_822;
    }
    goto LABEL_796;
  }
LABEL_864:
}

void sub_1A18A7374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  _Unwind_Resume(a1);
}

uint64_t *ggl::MetalResourceManager::prepareTexture(std::__shared_weak_count **this, const Texture *a2, unint64_t a3)
{
  int v6 = *((_DWORD *)a2 + 14);
  id v7 = (uint64_t *)*((void *)a2 + 3);
  if (v6)
  {
    if (!v7 || v6 == 1 && (uint64_t v8 = *((void *)a2 + 11)) != 0 && *(_DWORD *)(v8 + 32) != *((_DWORD *)a2 + 8)) {
      id v7 = ggl::MetalResourceManager::newTexture((ggl::MetalResourceManager *)this, a2);
    }
    goto LABEL_42;
  }
  if (v7)
  {
    uint64_t v9 = *((void *)a2 + 11);
    if (!v9 || *(_DWORD *)(v9 + 32) == *((_DWORD *)a2 + 8)) {
      goto LABEL_42;
    }
  }
  simpleValidateTexture(a2);
  PixelFormat = (void *)ggl::getPixelFormat(*((_DWORD *)a2 + 17), LOBYTE(this[32]->__shared_weak_owners_));
  id v7 = &qword_1EB32C000;
  while (1)
  {
    id v7 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[287] + 16))(v7[287], 136, 8);
    ggl::MetalTextureResource::MetalTextureResource((ggl::MetalTextureResource *)v7);
    uint64_t v11 = *((void *)a2 + 11);
    if (!v11) {
      break;
    }
    if (v7[16])
    {
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v11 + 24);
      do
      {
        id v14 = *(id *)(*(void *)(v13 + 32) + 8 * v12);
        uint64_t v15 = [v14 newTextureViewWithPixelFormat:PixelFormat];
        uint64_t v16 = v7[4];
        int64x2_t v17 = *(void **)(v16 + 8 * v12);
        *(void *)(v16 + 8 * v12) = v15;

        ++v12;
      }
      while (v12 < v7[16]);
    }
    uint64_t v18 = *((void *)a2 + 3);
    if (v18 && v18 != 3735927469)
    {
      ggl::RenderDataHolder::replaceRenderResource((uint64_t)a2, (uint64_t)this, (uint64_t)v7);
      goto LABEL_41;
    }
    if (!this)
    {
      int64x2_t v20 = 0;
      uint64_t v21 = 0;
LABEL_37:
      int v30 = (std::__shared_weak_count *)*((void *)a2 + 2);
      *((void *)a2 + 1) = v20;
      *((void *)a2 + 2) = v21;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      *((void *)a2 + 3) = v7;
      ++*((_DWORD *)a2 + 8);
      goto LABEL_41;
    }
    uint64_t v19 = this[2];
    if (v19)
    {
      int64x2_t v20 = this[1];
      uint64_t v21 = std::__shared_weak_count::lock(v19);
      if (v21) {
        goto LABEL_37;
      }
    }
LABEL_47:
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_48:
      operator new();
  }
  uint64_t v22 = [MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:PixelFormat width:*((unsigned int *)a2 + 20) height:*((unsigned int *)a2 + 21) mipmapped:0];
  PixelFormat = v22;
  if (*((_DWORD *)a2 + 19) == 1)
  {
    if (BYTE2(this[32]->__shared_weak_owners_)) {
      uint64_t v23 = 48;
    }
    else {
      uint64_t v23 = 32;
    }
  }
  else
  {
    uint64_t v23 = 32;
  }
  [v22 setResourceOptions:v23];
  [PixelFormat setUsage:4];
  [PixelFormat setSampleCount:*((unsigned int *)a2 + 18)];
  if (*((_DWORD *)a2 + 18) <= 1u) {
    uint64_t v24 = 2;
  }
  else {
    uint64_t v24 = 4;
  }
  [PixelFormat setTextureType:v24];
  int64x2_t v25 = (void *)[(id)this[32][4].__shared_owners_ newTextureWithDescriptor:PixelFormat];
  objc_storeStrong((id *)v7[4], v25);
  int64x2_t v26 = this[2];
  if (!v26) {
    goto LABEL_47;
  }
  uint64_t v27 = this[1];
  unint64_t v28 = std::__shared_weak_count::lock(v26);
  if (!v28) {
    goto LABEL_47;
  }
  int64x2_t v29 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *((void *)a2 + 1) = v27;
  *((void *)a2 + 2) = v28;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  *((void *)a2 + 3) = v7;
  ++*((_DWORD *)a2 + 8);

LABEL_41:
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Texture", 0x4DDB34EE00000007uLL, 0);
LABEL_42:
  unint64_t v31 = atomic_load((unint64_t *)v7 + 2);
  if (v31 < a3)
  {
    unint64_t v32 = v31;
    do
    {
      atomic_compare_exchange_strong(v7 + 2, &v32, a3);
      if (v32 == v31) {
        break;
      }
      unint64_t v31 = v32;
    }
    while (v32 < a3);
  }
  return v7;
}

void sub_1A18A7C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A18A7C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

char *std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(char **a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    abort();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 5 > v3) {
    unint64_t v3 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  uint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    uint64_t v7 = v3;
  }
  if (v7)
  {
    uint64_t v9 = v7 << 6;
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], v7 << 6, 8);
    uint64_t v11 = (char *)(v10 + (v2 << 6));
    uint64_t v12 = v10 + v9;
    if (v10)
    {
      uint64_t v13 = v10;
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
      *((_OWORD *)v11 + 1) = v14;
      uint64_t v15 = *(void *)(a2 + 56);
      if (v15)
      {
        if (v15 == a2 + 32)
        {
          *(void *)(v13 + (v2 << 6) + 56) = v11 + 32;
          (*(void (**)(void))(**(void **)(a2 + 56) + 24))(*(void *)(a2 + 56));
        }
        else
        {
          *(void *)(v13 + (v2 << 6) + 56) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
        }
      }
      else
      {
        *(void *)(v13 + (v2 << 6) + 56) = 0;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = (char *)(v2 << 6);
  }
  uint64_t v16 = v11 + 64;
  uint64_t v18 = *a1;
  int64x2_t v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v11;
    a1[1] = v16;
    uint64_t v19 = a1[2];
    a1[2] = (char *)v12;
  }
  else
  {
    do
    {
      long long v20 = *((_OWORD *)v17 - 3);
      *((_OWORD *)v11 - 4) = *((_OWORD *)v17 - 4);
      *((_OWORD *)v11 - 3) = v20;
      uint64_t v21 = (char *)*((void *)v17 - 1);
      if (v21)
      {
        if (v17 - 32 == v21)
        {
          *((void *)v11 - 1) = v11 - 32;
          (*(void (**)(void))(**((void **)v17 - 1) + 24))(*((void *)v17 - 1));
        }
        else
        {
          *((void *)v11 - 1) = v21;
          *((void *)v17 - 1) = 0;
        }
      }
      else
      {
        *((void *)v11 - 1) = 0;
      }
      v11 -= 64;
      v17 -= 64;
    }
    while (v17 != v18);
    int64x2_t v17 = *a1;
    uint64_t v22 = a1[1];
    *a1 = v11;
    a1[1] = v16;
    uint64_t v19 = a1[2];
    a1[2] = (char *)v12;
    if (v22 != v17)
    {
      uint64_t v23 = v22 - 32;
      uint64_t v24 = v22 - 32;
      do
      {
        int64x2_t v26 = (char *)*((void *)v24 + 3);
        if (v24 == v26)
        {
          (*(void (**)(char *))(*(void *)v24 + 32))(v24);
        }
        else if (v26)
        {
          (*(void (**)(char *))(*(void *)v26 + 40))(v26);
        }
        int64x2_t v25 = v24 - 32;
        v24 -= 64;
        v23 -= 64;
      }
      while (v25 != v17);
    }
  }
  if (v17) {
    (*(void (**)(char *, char *, int64_t))(*(void *)a1[3] + 40))(a1[3], v17, v19 - v17);
  }
  return v16;
}

void std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

id ggl::MetalDeviceContextFrame::blitCommandEncoder(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = a1 + 8 * a2;
  BOOL v6 = *(void **)(v3 + 144);
  uint64_t v5 = (void **)(v3 + 144);
  uint64_t v4 = v6;
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = a3 == 0;
  }
  if (!v7)
  {
    uint64_t v8 = 136;
    if (!a2) {
      uint64_t v8 = 128;
    }
    id v9 = *(id *)(a1 + v8);
    uint64_t v10 = [v9 blitCommandEncoder];
    uint64_t v11 = *v5;
    *uint64_t v5 = (void *)v10;

    uint64_t v4 = *v5;
  }
  return v4;
}

void sub_1A18A7FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::Clear::ClearPipelineState::ClearPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, int a5)
{
  {
    int v11 = a5;
    uint64_t v14 = a3;
    uint64_t v15 = a4;
    uint64_t v13 = a2;
    a2 = v13;
    a3 = v14;
    a4 = v15;
    a5 = v11;
    if (v12)
    {
      {
        if (v12)
        {
          {
            {
              ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r = (uint64_t)&ggl::Clear::clearDataReflection;
            }
            ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r;
            unk_1EB31DAA8 = 1;
          }
          ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r;
          *(void *)algn_1EB31DA48 = &ggl::Clear::pipelineDataClearPipelineDeviceStructs(void)::ref;
          qword_1EB31DA50 = 0;
          {
            ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref = (uint64_t)ggl::Clear::ClearConstants::reflection(void)::reflection;
          }
          qword_1EB31DA58 = (uint64_t)&ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref;
          unk_1EB31DA60 = xmmword_1A28FCC60;
        }
      }
      ggl::Clear::ClearPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref;
      ggl::ClearShader::typedReflection(v12);
      qword_1E958D430 = (uint64_t)&ggl::ClearShader::typedReflection(void)::ref;
      {
        ggl::Clear::pipelineStateClearPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E957F5D0 = 0;
        qword_1E957F5D8 = (uint64_t)"";
        dword_1E957F5E0 = 0;
        qword_1E957F5E8 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineAttributeBinding_0(void)::attr;
        unk_1E957F5F0 = 1;
      }
      qword_1E958D438 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineAttributeStructBinding(void)::attr;
      unk_1E958D440 = 1;
      qword_1E958D448 = 0;
      unk_1E958D450 = 0;
      qword_1E958D458 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineDeviceStructBinding(void)::ref;
      unk_1E958D460 = 0;
      {
        ggl::Clear::pipelineStateClearPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9588350 = 0;
        qword_1E9588358 = (uint64_t)"clearConstants";
        dword_1E9588360 = 3;
        qword_1E9588368 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineConstantClearConstantsBinding(void)::reflection;
        unk_1E9588370 = 2;
      }
      qword_1E958D468 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E958D470 = 1;
      a5 = v11;
      a3 = v14;
      a4 = v15;
      a2 = v13;
    }
  }
  uint64_t v6 = *a2;
  BOOL v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)a3;
  *(_OWORD *)&v18[12] = *(_OWORD *)(a3 + 12);
  long long v8 = *(_OWORD *)(a3 + 28);
  char v9 = *(unsigned char *)(a3 + 44);
  long long v16 = *a4;
  long long v17 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Clear::ClearPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v16;
  *(_OWORD *)(a1 + 272) = v17;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 372) = a5;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v18;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v18[12];
  *(_OWORD *)(a1 + 92) = v8;
  *(unsigned char *)(a1 + 108) = v9;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_1EF560720;
  return a1;
}

uint64_t ggl::Clear::ClearMesh::ClearMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v15 = a3;
    uint64_t v22 = a2;
    a2 = v22;
    a3 = v15;
    if (v16)
    {
      {
        ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r = (uint64_t)&ggl::Clear::clearDataReflection;
      }
      ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r;
      unk_1EB31DAA8 = 1;
      a3 = v15;
      a2 = v22;
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = &ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    long long v20 = a3;
    a3 = v20;
    uint64_t v6 = a1 + 64;
    if (v17) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 120) = 0;
  uint64_t v8 = a1 + 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v7;
  {
    uint64_t v21 = a3;
    uint64_t v23 = v6;
    uint64_t v8 = a1 + 120;
    a3 = v21;
    int v19 = v18;
    uint64_t v6 = v23;
    if (v19) {
      operator new();
    }
  }
  *(void *)(a1 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = v8;
  *(void *)a1 = &unk_1EF562760;
  *(void *)(a1 + 16) = &unk_1EF562780;
  uint64_t v9 = a3[1];
  uint64_t v24 = *a3;
  int64x2_t v25 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v6, &v24, &v26, 1uLL);
  uint64_t v10 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_1EF560740;
  *(void *)(a1 + 16) = &unk_1EF560760;
  return a1;
}

gdc::Registry *md::LabelRenderer::endLayout(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v902 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  v903 = (void *)a2;
  *(void *)(v6 + 1812) = 0;
  float v7 = 2.0 / *(float *)(a2 + 1064);
  *(float *)(v6 + 256) = v7;
  *(float *)(v6 + 276) = 2.0 / *(float *)(a2 + 1068);
  uint64_t v8 = *(void **)(v6 + 1376);
  unint64_t v9 = v8[1];
  if (v9) {
    uint64_t v10 = v8[9];
  }
  else {
    uint64_t v10 = 0;
  }
  *(float *)(v10 + 64) = v7;
  *(_DWORD *)(v10 + 68) = *(_DWORD *)(v6 + 260);
  *(_DWORD *)(v10 + 72) = *(_DWORD *)(v6 + 264);
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(v6 + 268);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v6 + 272);
  *(_DWORD *)(v10 + 84) = *(_DWORD *)(v6 + 276);
  *(_DWORD *)(v10 + 88) = *(_DWORD *)(v6 + 280);
  *(_DWORD *)(v10 + 92) = *(_DWORD *)(v6 + 284);
  *(_DWORD *)(v10 + 96) = *(_DWORD *)(v6 + 288);
  *(_DWORD *)(v10 + 100) = *(_DWORD *)(v6 + 292);
  *(_DWORD *)(v10 + 104) = *(_DWORD *)(v6 + 296);
  *(_DWORD *)(v10 + 108) = *(_DWORD *)(v6 + 300);
  *(_DWORD *)(v10 + 112) = *(_DWORD *)(v6 + 304);
  *(_DWORD *)(v10 + 116) = *(_DWORD *)(v6 + 308);
  *(_DWORD *)(v10 + 120) = *(_DWORD *)(v6 + 312);
  *(_DWORD *)(v10 + 124) = *(_DWORD *)(v6 + 316);
  if (v10 && v9)
  {
    unint64_t v11 = v8[8];
    if (v11 <= v9) {
      unint64_t v11 = v9;
    }
    v8[7] = 0;
    v8[8] = v11;
  }
  float32x2_t v12 = vcvt_f32_f64(*(float64x2_t *)(a2 + 624));
  float32x2_t v13 = vcvt_f32_f64(*(float64x2_t *)(a2 + 640));
  float32x2_t v14 = vcvt_f32_f64(*(float64x2_t *)(a2 + 656));
  float32x2_t v15 = vcvt_f32_f64(*(float64x2_t *)(a2 + 672));
  float32x2_t v16 = vcvt_f32_f64(*(float64x2_t *)(a2 + 688));
  float32x2_t v17 = vcvt_f32_f64(*(float64x2_t *)(a2 + 704));
  float32x2_t v18 = vcvt_f32_f64(*(float64x2_t *)(a2 + 720));
  int v19 = (float32x2_t *)v8[9];
  *int v19 = vcvt_f32_f64(*(float64x2_t *)(a2 + 608));
  v19[1] = v12;
  v19[2] = v13;
  v19[3] = v14;
  v19[4] = v15;
  v19[5] = v16;
  v19[6] = v17;
  v19[7] = v18;
  if (v9)
  {
    if (v8[8] > v9) {
      unint64_t v9 = v8[8];
    }
    v8[7] = 0;
    v8[8] = v9;
  }
  _S0 = *(_DWORD *)(a4 + 20);
  _S1 = *(_DWORD *)(a4 + 24);
  uint64_t v900 = a4;
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
  }
  int64x2_t v25 = *(void **)(v6 + 1408);
  unint64_t v26 = v25[1];
  uint64_t v27 = (_WORD *)v25[9];
  *uint64_t v27 = _S0;
  v27[1] = _S1;
  if (v25[8] > v26) {
    unint64_t v26 = v25[8];
  }
  v25[7] = 0;
  v25[8] = v26;
  unint64_t v28 = *(void **)(v6 + 1392);
  unint64_t v29 = v28[1];
  int v30 = (_DWORD *)v28[9];
  *int v30 = *(_DWORD *)(v6 + 256);
  v30[1] = *(_DWORD *)(v6 + 260);
  v30[2] = *(_DWORD *)(v6 + 264);
  v30[3] = *(_DWORD *)(v6 + 268);
  v30[4] = *(_DWORD *)(v6 + 272);
  v30[5] = *(_DWORD *)(v6 + 276);
  v30[6] = *(_DWORD *)(v6 + 280);
  v30[7] = *(_DWORD *)(v6 + 284);
  v30[8] = *(_DWORD *)(v6 + 288);
  v30[9] = *(_DWORD *)(v6 + 292);
  v30[10] = *(_DWORD *)(v6 + 296);
  v30[11] = *(_DWORD *)(v6 + 300);
  v30[12] = *(_DWORD *)(v6 + 304);
  v30[13] = *(_DWORD *)(v6 + 308);
  v30[14] = *(_DWORD *)(v6 + 312);
  v30[15] = *(_DWORD *)(v6 + 316);
  if (v28[8] > v29) {
    unint64_t v29 = v28[8];
  }
  v28[7] = 0;
  v28[8] = v29;
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v6 + 336));
  unint64_t v31 = *(uint64_t **)(v6 + 424);
  unint64_t v32 = (uint64_t *)v31[4];
  uint64_t v33 = (uint64_t *)v31[5];
  if (v32 != v33)
  {
    uint64_t v34 = (void *)v31[1];
    while (1)
    {
      uint64_t v35 = *v32;
      unint64_t v36 = v31[2];
      if ((unint64_t)v34 >= v36) {
        break;
      }
      if (v34) {
        void *v34 = v35;
      }
      ++v34;
LABEL_20:
      v31[1] = (uint64_t)v34;
      if (++v32 == v33)
      {
        uint64_t v56 = v31[4];
        if (v56 != v31[5]) {
          v31[5] = v56;
        }
        goto LABEL_49;
      }
    }
    uint64_t v37 = ((uint64_t)v34 - *v31) >> 3;
    if ((unint64_t)(v37 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v38 = v36 - *v31;
    uint64_t v39 = v38 >> 2;
    if (v38 >> 2 <= (unint64_t)(v37 + 1)) {
      uint64_t v39 = v37 + 1;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v40 = v39;
    }
    if (v40)
    {
      uint64_t v41 = 8 * v40;
      uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31[3] + 16))(v31[3], 8 * v40, 8);
      long long v43 = (void *)(v42 + 8 * v37);
      uint64_t v40 = v42 + v41;
      if (v42) {
        *long long v43 = v35;
      }
    }
    else
    {
      long long v43 = (void *)(8 * v37);
    }
    uint64_t v45 = *v31;
    uint64_t v44 = v31[1];
    uint64_t v46 = v44 - *v31;
    if (v44 == *v31)
    {
      int v48 = v43;
      goto LABEL_45;
    }
    unint64_t v47 = v46 - 8;
    if ((unint64_t)(v46 - 8) < 0x38)
    {
      int v48 = v43;
    }
    else
    {
      int v48 = v43;
      if ((unint64_t)(v44 - (void)v43) >= 0x20)
      {
        uint64_t v49 = (v47 >> 3) + 1;
        unint64_t v50 = v43 - 2;
        unsigned int v51 = (long long *)(v44 - 16);
        uint64_t v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v53 = *v51;
          *(v50 - 1) = *(v51 - 1);
          *unint64_t v50 = v53;
          v50 -= 2;
          v51 -= 2;
          v52 -= 4;
        }
        while (v52);
        int v48 = &v43[-(v49 & 0x3FFFFFFFFFFFFFFCLL)];
        v44 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_44;
        }
      }
    }
    do
    {
      uint64_t v54 = *(void *)(v44 - 8);
      v44 -= 8;
      *--int v48 = v54;
    }
    while (v44 != v45);
LABEL_44:
    uint64_t v44 = *v31;
LABEL_45:
    uint64_t v34 = v43 + 1;
    *unint64_t v31 = (uint64_t)v48;
    v31[1] = (uint64_t)(v43 + 1);
    uint64_t v55 = v31[2];
    v31[2] = v40;
    if (v44) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31[3] + 40))(v31[3], v44, v55 - v44);
    }
    goto LABEL_20;
  }
LABEL_49:
  __int32 v57 = *(uint64_t **)(v6 + 432);
  double v58 = (uint64_t *)v57[4];
  double v59 = (uint64_t *)v57[5];
  if (v58 == v59) {
    goto LABEL_81;
  }
  double v60 = (void *)v57[1];
  do
  {
    uint64_t v61 = *v58;
    unint64_t v62 = v57[2];
    if ((unint64_t)v60 < v62)
    {
      if (v60) {
        *double v60 = v61;
      }
      ++v60;
      goto LABEL_52;
    }
    uint64_t v63 = ((uint64_t)v60 - *v57) >> 3;
    if ((unint64_t)(v63 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v64 = v62 - *v57;
    uint64_t v65 = v64 >> 2;
    if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
      uint64_t v65 = v63 + 1;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v66 = v65;
    }
    if (v66)
    {
      uint64_t v67 = 8 * v66;
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57[3] + 16))(v57[3], 8 * v66, 8);
      v69 = (void *)(v68 + 8 * v63);
      uint64_t v66 = v68 + v67;
      if (v68) {
        void *v69 = v61;
      }
    }
    else
    {
      v69 = (void *)(8 * v63);
    }
    uint64_t v71 = *v57;
    uint64_t v70 = v57[1];
    uint64_t v72 = v70 - *v57;
    if (v70 == *v57)
    {
      unsigned int v74 = v69;
      goto LABEL_77;
    }
    unint64_t v73 = v72 - 8;
    if ((unint64_t)(v72 - 8) < 0x38)
    {
      unsigned int v74 = v69;
    }
    else
    {
      unsigned int v74 = v69;
      if ((unint64_t)(v70 - (void)v69) >= 0x20)
      {
        uint64_t v75 = (v73 >> 3) + 1;
        long long v76 = v69 - 2;
        unsigned int v77 = (long long *)(v70 - 16);
        uint64_t v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *long long v76 = v79;
          v76 -= 2;
          v77 -= 2;
          v78 -= 4;
        }
        while (v78);
        unsigned int v74 = &v69[-(v75 & 0x3FFFFFFFFFFFFFFCLL)];
        v70 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
      }
    }
    do
    {
      uint64_t v80 = *(void *)(v70 - 8);
      v70 -= 8;
      *--unsigned int v74 = v80;
    }
    while (v70 != v71);
LABEL_76:
    uint64_t v70 = *v57;
LABEL_77:
    double v60 = v69 + 1;
    *__int32 v57 = (uint64_t)v74;
    v57[1] = (uint64_t)(v69 + 1);
    uint64_t v81 = v57[2];
    v57[2] = v66;
    if (v70) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57[3] + 40))(v57[3], v70, v81 - v70);
    }
LABEL_52:
    v57[1] = (uint64_t)v60;
    ++v58;
  }
  while (v58 != v59);
  uint64_t v82 = v57[4];
  if (v82 != v57[5]) {
    v57[5] = v82;
  }
LABEL_81:
  id v83 = *(uint64_t **)(v6 + 448);
  unsigned int v84 = (uint64_t *)v83[4];
  BOOL v85 = (uint64_t *)v83[5];
  if (v84 == v85) {
    goto LABEL_113;
  }
  uint64_t v86 = (void *)v83[1];
  while (2)
  {
    uint64_t v87 = *v84;
    unint64_t v88 = v83[2];
    if ((unint64_t)v86 < v88)
    {
      if (v86) {
        *uint64_t v86 = v87;
      }
      ++v86;
      goto LABEL_84;
    }
    uint64_t v89 = ((uint64_t)v86 - *v83) >> 3;
    if ((unint64_t)(v89 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v90 = v88 - *v83;
    uint64_t v91 = v90 >> 2;
    if (v90 >> 2 <= (unint64_t)(v89 + 1)) {
      uint64_t v91 = v89 + 1;
    }
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v92 = v91;
    }
    if (v92)
    {
      uint64_t v93 = 8 * v92;
      uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83[3] + 16))(v83[3], 8 * v92, 8);
      double v95 = (void *)(v94 + 8 * v89);
      uint64_t v92 = v94 + v93;
      if (v94) {
        *double v95 = v87;
      }
    }
    else
    {
      double v95 = (void *)(8 * v89);
    }
    uint64_t v97 = *v83;
    uint64_t v96 = v83[1];
    uint64_t v98 = v96 - *v83;
    if (v96 == *v83)
    {
      uint64_t v100 = v95;
      goto LABEL_109;
    }
    unint64_t v99 = v98 - 8;
    if ((unint64_t)(v98 - 8) < 0x38)
    {
      uint64_t v100 = v95;
      do
      {
LABEL_107:
        uint64_t v106 = *(void *)(v96 - 8);
        v96 -= 8;
        *--uint64_t v100 = v106;
      }
      while (v96 != v97);
      goto LABEL_108;
    }
    uint64_t v100 = v95;
    if ((unint64_t)(v96 - (void)v95) < 0x20) {
      goto LABEL_107;
    }
    uint64_t v101 = (v99 >> 3) + 1;
    uint64_t v102 = v95 - 2;
    uint64_t v103 = (long long *)(v96 - 16);
    uint64_t v104 = v101 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v105 = *v103;
      *(v102 - 1) = *(v103 - 1);
      _OWORD *v102 = v105;
      v102 -= 2;
      v103 -= 2;
      v104 -= 4;
    }
    while (v104);
    uint64_t v100 = &v95[-(v101 & 0x3FFFFFFFFFFFFFFCLL)];
    v96 -= 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
    if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_107;
    }
LABEL_108:
    uint64_t v96 = *v83;
LABEL_109:
    uint64_t v86 = v95 + 1;
    uint64_t *v83 = (uint64_t)v100;
    v83[1] = (uint64_t)(v95 + 1);
    uint64_t v107 = v83[2];
    v83[2] = v92;
    if (v96) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83[3] + 40))(v83[3], v96, v107 - v96);
    }
LABEL_84:
    v83[1] = (uint64_t)v86;
    if (++v84 != v85) {
      continue;
    }
    break;
  }
  uint64_t v108 = v83[4];
  if (v108 != v83[5]) {
    v83[5] = v108;
  }
LABEL_113:
  uint64_t v109 = *(uint64_t **)(v6 + 376);
  uint64_t v110 = (uint64_t *)v109[4];
  uint64_t v111 = (uint64_t *)v109[5];
  if (v110 == v111) {
    goto LABEL_145;
  }
  uint64_t v112 = (void *)v109[1];
  while (2)
  {
    uint64_t v113 = *v110;
    unint64_t v114 = v109[2];
    if ((unint64_t)v112 < v114)
    {
      if (v112) {
        *uint64_t v112 = v113;
      }
      ++v112;
      goto LABEL_116;
    }
    uint64_t v115 = ((uint64_t)v112 - *v109) >> 3;
    if ((unint64_t)(v115 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v116 = v114 - *v109;
    uint64_t v117 = v116 >> 2;
    if (v116 >> 2 <= (unint64_t)(v115 + 1)) {
      uint64_t v117 = v115 + 1;
    }
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v118 = v117;
    }
    if (v118)
    {
      uint64_t v119 = 8 * v118;
      uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v109[3] + 16))(v109[3], 8 * v118, 8);
      uint64_t v121 = (void *)(v120 + 8 * v115);
      uint64_t v118 = v120 + v119;
      if (v120) {
        void *v121 = v113;
      }
    }
    else
    {
      uint64_t v121 = (void *)(8 * v115);
    }
    uint64_t v123 = *v109;
    uint64_t v122 = v109[1];
    uint64_t v124 = v122 - *v109;
    if (v122 == *v109)
    {
      unint64_t v126 = v121;
      goto LABEL_141;
    }
    unint64_t v125 = v124 - 8;
    if ((unint64_t)(v124 - 8) < 0x38)
    {
      unint64_t v126 = v121;
      do
      {
LABEL_139:
        uint64_t v132 = *(void *)(v122 - 8);
        v122 -= 8;
        *--unint64_t v126 = v132;
      }
      while (v122 != v123);
      goto LABEL_140;
    }
    unint64_t v126 = v121;
    if ((unint64_t)(v122 - (void)v121) < 0x20) {
      goto LABEL_139;
    }
    uint64_t v127 = (v125 >> 3) + 1;
    int v128 = v121 - 2;
    char v129 = (long long *)(v122 - 16);
    uint64_t v130 = v127 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v131 = *v129;
      *(v128 - 1) = *(v129 - 1);
      *int v128 = v131;
      v128 -= 2;
      v129 -= 2;
      v130 -= 4;
    }
    while (v130);
    unint64_t v126 = &v121[-(v127 & 0x3FFFFFFFFFFFFFFCLL)];
    v122 -= 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
    if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_139;
    }
LABEL_140:
    uint64_t v122 = *v109;
LABEL_141:
    uint64_t v112 = v121 + 1;
    *uint64_t v109 = (uint64_t)v126;
    v109[1] = (uint64_t)(v121 + 1);
    uint64_t v133 = v109[2];
    v109[2] = v118;
    if (v122) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v109[3] + 40))(v109[3], v122, v133 - v122);
    }
LABEL_116:
    v109[1] = (uint64_t)v112;
    if (++v110 != v111) {
      continue;
    }
    break;
  }
  uint64_t v134 = v109[4];
  if (v134 != v109[5]) {
    v109[5] = v134;
  }
LABEL_145:
  uint64_t v135 = *(uint64_t **)(v6 + 392);
  uint64_t v136 = (uint64_t *)v135[4];
  uint64_t v137 = (uint64_t *)v135[5];
  if (v136 == v137) {
    goto LABEL_177;
  }
  uint64_t v138 = (void *)v135[1];
  while (2)
  {
    uint64_t v139 = *v136;
    unint64_t v140 = v135[2];
    if ((unint64_t)v138 < v140)
    {
      if (v138) {
        void *v138 = v139;
      }
      ++v138;
      goto LABEL_148;
    }
    uint64_t v141 = ((uint64_t)v138 - *v135) >> 3;
    if ((unint64_t)(v141 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v142 = v140 - *v135;
    uint64_t v143 = v142 >> 2;
    if (v142 >> 2 <= (unint64_t)(v141 + 1)) {
      uint64_t v143 = v141 + 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v144 = v143;
    }
    if (v144)
    {
      uint64_t v145 = 8 * v144;
      uint64_t v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v135[3] + 16))(v135[3], 8 * v144, 8);
      v147 = (void *)(v146 + 8 * v141);
      uint64_t v144 = v146 + v145;
      if (v146) {
        void *v147 = v139;
      }
    }
    else
    {
      v147 = (void *)(8 * v141);
    }
    uint64_t v149 = *v135;
    uint64_t v148 = v135[1];
    uint64_t v150 = v148 - *v135;
    if (v148 == *v135)
    {
      uint64_t v152 = v147;
      goto LABEL_173;
    }
    unint64_t v151 = v150 - 8;
    if ((unint64_t)(v150 - 8) < 0x38)
    {
      uint64_t v152 = v147;
      do
      {
LABEL_171:
        uint64_t v158 = *(void *)(v148 - 8);
        v148 -= 8;
        *--uint64_t v152 = v158;
      }
      while (v148 != v149);
      goto LABEL_172;
    }
    uint64_t v152 = v147;
    if ((unint64_t)(v148 - (void)v147) < 0x20) {
      goto LABEL_171;
    }
    uint64_t v153 = (v151 >> 3) + 1;
    v154 = v147 - 2;
    v155 = (long long *)(v148 - 16);
    uint64_t v156 = v153 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v157 = *v155;
      *(v154 - 1) = *(v155 - 1);
      _OWORD *v154 = v157;
      v154 -= 2;
      v155 -= 2;
      v156 -= 4;
    }
    while (v156);
    uint64_t v152 = &v147[-(v153 & 0x3FFFFFFFFFFFFFFCLL)];
    v148 -= 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
    if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_171;
    }
LABEL_172:
    uint64_t v148 = *v135;
LABEL_173:
    uint64_t v138 = v147 + 1;
    uint64_t *v135 = (uint64_t)v152;
    v135[1] = (uint64_t)(v147 + 1);
    uint64_t v159 = v135[2];
    v135[2] = v144;
    if (v148) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v135[3] + 40))(v135[3], v148, v159 - v148);
    }
LABEL_148:
    v135[1] = (uint64_t)v138;
    if (++v136 != v137) {
      continue;
    }
    break;
  }
  uint64_t v160 = v135[4];
  if (v160 != v135[5]) {
    v135[5] = v160;
  }
LABEL_177:
  BOOL v161 = *(uint64_t **)(v6 + 384);
  unint64_t v162 = (uint64_t *)v161[4];
  uint64_t v163 = (uint64_t *)v161[5];
  if (v162 == v163) {
    goto LABEL_209;
  }
  unint64_t v164 = (void *)v161[1];
  while (2)
  {
    uint64_t v165 = *v162;
    unint64_t v166 = v161[2];
    if ((unint64_t)v164 < v166)
    {
      if (v164) {
        void *v164 = v165;
      }
      ++v164;
      goto LABEL_180;
    }
    uint64_t v167 = ((uint64_t)v164 - *v161) >> 3;
    if ((unint64_t)(v167 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v168 = v166 - *v161;
    uint64_t v169 = v168 >> 2;
    if (v168 >> 2 <= (unint64_t)(v167 + 1)) {
      uint64_t v169 = v167 + 1;
    }
    if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v170 = v169;
    }
    if (v170)
    {
      uint64_t v171 = 8 * v170;
      uint64_t v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v161[3] + 16))(v161[3], 8 * v170, 8);
      long long v173 = (void *)(v172 + 8 * v167);
      uint64_t v170 = v172 + v171;
      if (v172) {
        void *v173 = v165;
      }
    }
    else
    {
      long long v173 = (void *)(8 * v167);
    }
    uint64_t v175 = *v161;
    uint64_t v174 = v161[1];
    uint64_t v176 = v174 - *v161;
    if (v174 == *v161)
    {
      uint64_t v178 = v173;
      goto LABEL_205;
    }
    unint64_t v177 = v176 - 8;
    if ((unint64_t)(v176 - 8) < 0x38)
    {
      uint64_t v178 = v173;
      do
      {
LABEL_203:
        uint64_t v184 = *(void *)(v174 - 8);
        v174 -= 8;
        *--uint64_t v178 = v184;
      }
      while (v174 != v175);
      goto LABEL_204;
    }
    uint64_t v178 = v173;
    if ((unint64_t)(v174 - (void)v173) < 0x20) {
      goto LABEL_203;
    }
    uint64_t v179 = (v177 >> 3) + 1;
    uint64_t v180 = v173 - 2;
    unint64_t v181 = (long long *)(v174 - 16);
    uint64_t v182 = v179 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v183 = *v181;
      *(v180 - 1) = *(v181 - 1);
      *uint64_t v180 = v183;
      v180 -= 2;
      v181 -= 2;
      v182 -= 4;
    }
    while (v182);
    uint64_t v178 = &v173[-(v179 & 0x3FFFFFFFFFFFFFFCLL)];
    v174 -= 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
    if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_203;
    }
LABEL_204:
    uint64_t v174 = *v161;
LABEL_205:
    unint64_t v164 = v173 + 1;
    *BOOL v161 = (uint64_t)v178;
    v161[1] = (uint64_t)(v173 + 1);
    uint64_t v185 = v161[2];
    v161[2] = v170;
    if (v174) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v161[3] + 40))(v161[3], v174, v185 - v174);
    }
LABEL_180:
    v161[1] = (uint64_t)v164;
    if (++v162 != v163) {
      continue;
    }
    break;
  }
  uint64_t v186 = v161[4];
  if (v186 != v161[5]) {
    v161[5] = v186;
  }
LABEL_209:
  v187 = *(uint64_t **)(v6 + 344);
  v188 = (uint64_t *)v187[4];
  unint64_t v189 = (uint64_t *)v187[5];
  if (v188 == v189) {
    goto LABEL_241;
  }
  unint64_t v190 = (void *)v187[1];
  while (2)
  {
    uint64_t v191 = *v188;
    unint64_t v192 = v187[2];
    if ((unint64_t)v190 < v192)
    {
      if (v190) {
        void *v190 = v191;
      }
      ++v190;
      goto LABEL_212;
    }
    uint64_t v193 = ((uint64_t)v190 - *v187) >> 3;
    if ((unint64_t)(v193 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v194 = v192 - *v187;
    uint64_t v195 = v194 >> 2;
    if (v194 >> 2 <= (unint64_t)(v193 + 1)) {
      uint64_t v195 = v193 + 1;
    }
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v196 = v195;
    }
    if (v196)
    {
      uint64_t v197 = 8 * v196;
      uint64_t v198 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v187[3] + 16))(v187[3], 8 * v196, 8);
      uint64_t v199 = (void *)(v198 + 8 * v193);
      uint64_t v196 = v198 + v197;
      if (v198) {
        void *v199 = v191;
      }
    }
    else
    {
      uint64_t v199 = (void *)(8 * v193);
    }
    uint64_t v201 = *v187;
    uint64_t v200 = v187[1];
    uint64_t v202 = v200 - *v187;
    if (v200 == *v187)
    {
      uint64_t v204 = v199;
      goto LABEL_237;
    }
    unint64_t v203 = v202 - 8;
    if ((unint64_t)(v202 - 8) < 0x38)
    {
      uint64_t v204 = v199;
      do
      {
LABEL_235:
        uint64_t v210 = *(void *)(v200 - 8);
        v200 -= 8;
        *--uint64_t v204 = v210;
      }
      while (v200 != v201);
      goto LABEL_236;
    }
    uint64_t v204 = v199;
    if ((unint64_t)(v200 - (void)v199) < 0x20) {
      goto LABEL_235;
    }
    uint64_t v205 = (v203 >> 3) + 1;
    uint64_t v206 = v199 - 2;
    BOOL v207 = (long long *)(v200 - 16);
    uint64_t v208 = v205 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v209 = *v207;
      *(v206 - 1) = *(v207 - 1);
      *uint64_t v206 = v209;
      v206 -= 2;
      v207 -= 2;
      v208 -= 4;
    }
    while (v208);
    uint64_t v204 = &v199[-(v205 & 0x3FFFFFFFFFFFFFFCLL)];
    v200 -= 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
    if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_235;
    }
LABEL_236:
    uint64_t v200 = *v187;
LABEL_237:
    unint64_t v190 = v199 + 1;
    uint64_t *v187 = (uint64_t)v204;
    v187[1] = (uint64_t)(v199 + 1);
    uint64_t v211 = v187[2];
    v187[2] = v196;
    if (v200) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v187[3] + 40))(v187[3], v200, v211 - v200);
    }
LABEL_212:
    v187[1] = (uint64_t)v190;
    if (++v188 != v189) {
      continue;
    }
    break;
  }
  uint64_t v212 = v187[4];
  if (v212 != v187[5]) {
    v187[5] = v212;
  }
LABEL_241:
  unint64_t v213 = *(uint64_t **)(v6 + 352);
  uint64_t v214 = (uint64_t *)v213[4];
  uint64_t v215 = (uint64_t *)v213[5];
  if (v214 == v215) {
    goto LABEL_273;
  }
  BOOL v216 = (void *)v213[1];
  while (2)
  {
    uint64_t v217 = *v214;
    unint64_t v218 = v213[2];
    if ((unint64_t)v216 < v218)
    {
      if (v216) {
        *BOOL v216 = v217;
      }
      ++v216;
      goto LABEL_244;
    }
    uint64_t v219 = ((uint64_t)v216 - *v213) >> 3;
    if ((unint64_t)(v219 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v220 = v218 - *v213;
    uint64_t v221 = v220 >> 2;
    if (v220 >> 2 <= (unint64_t)(v219 + 1)) {
      uint64_t v221 = v219 + 1;
    }
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v222 = v221;
    }
    if (v222)
    {
      uint64_t v223 = 8 * v222;
      uint64_t v224 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v213[3] + 16))(v213[3], 8 * v222, 8);
      unint64_t v225 = (void *)(v224 + 8 * v219);
      uint64_t v222 = v224 + v223;
      if (v224) {
        *unint64_t v225 = v217;
      }
    }
    else
    {
      unint64_t v225 = (void *)(8 * v219);
    }
    uint64_t v227 = *v213;
    uint64_t v226 = v213[1];
    uint64_t v228 = v226 - *v213;
    if (v226 == *v213)
    {
      unint64_t v230 = v225;
      goto LABEL_269;
    }
    unint64_t v229 = v228 - 8;
    if ((unint64_t)(v228 - 8) < 0x38)
    {
      unint64_t v230 = v225;
      do
      {
LABEL_267:
        uint64_t v236 = *(void *)(v226 - 8);
        v226 -= 8;
        *--unint64_t v230 = v236;
      }
      while (v226 != v227);
      goto LABEL_268;
    }
    unint64_t v230 = v225;
    if ((unint64_t)(v226 - (void)v225) < 0x20) {
      goto LABEL_267;
    }
    uint64_t v231 = (v229 >> 3) + 1;
    unint64_t v232 = v225 - 2;
    id v233 = (long long *)(v226 - 16);
    uint64_t v234 = v231 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v235 = *v233;
      *(v232 - 1) = *(v233 - 1);
      _OWORD *v232 = v235;
      v232 -= 2;
      v233 -= 2;
      v234 -= 4;
    }
    while (v234);
    unint64_t v230 = &v225[-(v231 & 0x3FFFFFFFFFFFFFFCLL)];
    v226 -= 8 * (v231 & 0x3FFFFFFFFFFFFFFCLL);
    if (v231 != (v231 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_267;
    }
LABEL_268:
    uint64_t v226 = *v213;
LABEL_269:
    BOOL v216 = v225 + 1;
    *unint64_t v213 = (uint64_t)v230;
    v213[1] = (uint64_t)(v225 + 1);
    uint64_t v237 = v213[2];
    v213[2] = v222;
    if (v226) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v213[3] + 40))(v213[3], v226, v237 - v226);
    }
LABEL_244:
    v213[1] = (uint64_t)v216;
    if (++v214 != v215) {
      continue;
    }
    break;
  }
  uint64_t v238 = v213[4];
  if (v238 != v213[5]) {
    v213[5] = v238;
  }
LABEL_273:
  uint64_t v239 = *(uint64_t **)(v6 + 360);
  uint64_t v240 = (uint64_t *)v239[4];
  v241 = (uint64_t *)v239[5];
  if (v240 == v241) {
    goto LABEL_305;
  }
  uint64_t v242 = (void *)v239[1];
  while (2)
  {
    uint64_t v243 = *v240;
    unint64_t v244 = v239[2];
    if ((unint64_t)v242 < v244)
    {
      if (v242) {
        *uint64_t v242 = v243;
      }
      ++v242;
      goto LABEL_276;
    }
    uint64_t v245 = ((uint64_t)v242 - *v239) >> 3;
    if ((unint64_t)(v245 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v246 = v244 - *v239;
    uint64_t v247 = v246 >> 2;
    if (v246 >> 2 <= (unint64_t)(v245 + 1)) {
      uint64_t v247 = v245 + 1;
    }
    if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v248 = v247;
    }
    if (v248)
    {
      uint64_t v249 = 8 * v248;
      uint64_t v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v239[3] + 16))(v239[3], 8 * v248, 8);
      unint64_t v251 = (void *)(v250 + 8 * v245);
      uint64_t v248 = v250 + v249;
      if (v250) {
        void *v251 = v243;
      }
    }
    else
    {
      unint64_t v251 = (void *)(8 * v245);
    }
    uint64_t v253 = *v239;
    uint64_t v252 = v239[1];
    uint64_t v254 = v252 - *v239;
    if (v252 == *v239)
    {
      uint64_t v256 = v251;
      goto LABEL_301;
    }
    unint64_t v255 = v254 - 8;
    if ((unint64_t)(v254 - 8) < 0x38)
    {
      uint64_t v256 = v251;
      do
      {
LABEL_299:
        uint64_t v262 = *(void *)(v252 - 8);
        v252 -= 8;
        *--uint64_t v256 = v262;
      }
      while (v252 != v253);
      goto LABEL_300;
    }
    uint64_t v256 = v251;
    if ((unint64_t)(v252 - (void)v251) < 0x20) {
      goto LABEL_299;
    }
    uint64_t v257 = (v255 >> 3) + 1;
    int64x2_t v258 = v251 - 2;
    uint64_t v259 = (long long *)(v252 - 16);
    uint64_t v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v261 = *v259;
      *(v258 - 1) = *(v259 - 1);
      *int64x2_t v258 = v261;
      v258 -= 2;
      v259 -= 2;
      v260 -= 4;
    }
    while (v260);
    uint64_t v256 = &v251[-(v257 & 0x3FFFFFFFFFFFFFFCLL)];
    v252 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
    if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_299;
    }
LABEL_300:
    uint64_t v252 = *v239;
LABEL_301:
    uint64_t v242 = v251 + 1;
    *uint64_t v239 = (uint64_t)v256;
    v239[1] = (uint64_t)(v251 + 1);
    uint64_t v263 = v239[2];
    v239[2] = v248;
    if (v252) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v239[3] + 40))(v239[3], v252, v263 - v252);
    }
LABEL_276:
    v239[1] = (uint64_t)v242;
    if (++v240 != v241) {
      continue;
    }
    break;
  }
  uint64_t v264 = v239[4];
  if (v264 != v239[5]) {
    v239[5] = v264;
  }
LABEL_305:
  uint64_t v265 = *(uint64_t **)(v6 + 368);
  uint64_t v266 = (uint64_t *)v265[4];
  uint64_t v267 = (uint64_t *)v265[5];
  if (v266 == v267) {
    goto LABEL_337;
  }
  long long v268 = (void *)v265[1];
  while (2)
  {
    uint64_t v269 = *v266;
    unint64_t v270 = v265[2];
    if ((unint64_t)v268 < v270)
    {
      if (v268) {
        *long long v268 = v269;
      }
      ++v268;
      goto LABEL_308;
    }
    uint64_t v271 = ((uint64_t)v268 - *v265) >> 3;
    if ((unint64_t)(v271 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v272 = v270 - *v265;
    uint64_t v273 = v272 >> 2;
    if (v272 >> 2 <= (unint64_t)(v271 + 1)) {
      uint64_t v273 = v271 + 1;
    }
    if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v274 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v274 = v273;
    }
    if (v274)
    {
      uint64_t v275 = 8 * v274;
      uint64_t v276 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v265[3] + 16))(v265[3], 8 * v274, 8);
      uint64_t v277 = (void *)(v276 + 8 * v271);
      uint64_t v274 = v276 + v275;
      if (v276) {
        *uint64_t v277 = v269;
      }
    }
    else
    {
      uint64_t v277 = (void *)(8 * v271);
    }
    uint64_t v279 = *v265;
    uint64_t v278 = v265[1];
    uint64_t v280 = v278 - *v265;
    if (v278 == *v265)
    {
      uint64_t v282 = v277;
      goto LABEL_333;
    }
    unint64_t v281 = v280 - 8;
    if ((unint64_t)(v280 - 8) < 0x38)
    {
      uint64_t v282 = v277;
      do
      {
LABEL_331:
        uint64_t v288 = *(void *)(v278 - 8);
        v278 -= 8;
        *--uint64_t v282 = v288;
      }
      while (v278 != v279);
      goto LABEL_332;
    }
    uint64_t v282 = v277;
    if ((unint64_t)(v278 - (void)v277) < 0x20) {
      goto LABEL_331;
    }
    uint64_t v283 = (v281 >> 3) + 1;
    uint64_t v284 = v277 - 2;
    long long v285 = (long long *)(v278 - 16);
    uint64_t v286 = v283 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v287 = *v285;
      *(v284 - 1) = *(v285 - 1);
      *uint64_t v284 = v287;
      v284 -= 2;
      v285 -= 2;
      v286 -= 4;
    }
    while (v286);
    uint64_t v282 = &v277[-(v283 & 0x3FFFFFFFFFFFFFFCLL)];
    v278 -= 8 * (v283 & 0x3FFFFFFFFFFFFFFCLL);
    if (v283 != (v283 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_331;
    }
LABEL_332:
    uint64_t v278 = *v265;
LABEL_333:
    long long v268 = v277 + 1;
    *uint64_t v265 = (uint64_t)v282;
    v265[1] = (uint64_t)(v277 + 1);
    uint64_t v289 = v265[2];
    v265[2] = v274;
    if (v278) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v265[3] + 40))(v265[3], v278, v289 - v278);
    }
LABEL_308:
    v265[1] = (uint64_t)v268;
    if (++v266 != v267) {
      continue;
    }
    break;
  }
  uint64_t v290 = v265[4];
  if (v290 != v265[5]) {
    v265[5] = v290;
  }
LABEL_337:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v6 + 400));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v6 + 408));
  uint64_t v291 = *(uint64_t **)(v6 + 416);
  unint64_t v292 = (uint64_t *)v291[4];
  unint64_t v293 = (uint64_t *)v291[5];
  if (v292 == v293) {
    goto LABEL_369;
  }
  uint64_t v294 = (void *)v291[1];
  while (2)
  {
    uint64_t v295 = *v292;
    unint64_t v296 = v291[2];
    if ((unint64_t)v294 < v296)
    {
      if (v294) {
        *uint64_t v294 = v295;
      }
      ++v294;
      goto LABEL_340;
    }
    uint64_t v297 = ((uint64_t)v294 - *v291) >> 3;
    if ((unint64_t)(v297 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v298 = v296 - *v291;
    uint64_t v299 = v298 >> 2;
    if (v298 >> 2 <= (unint64_t)(v297 + 1)) {
      uint64_t v299 = v297 + 1;
    }
    if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v300 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v300 = v299;
    }
    if (v300)
    {
      uint64_t v301 = 8 * v300;
      uint64_t v302 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v291[3] + 16))(v291[3], 8 * v300, 8);
      uint64_t v303 = (void *)(v302 + 8 * v297);
      uint64_t v300 = v302 + v301;
      if (v302) {
        *uint64_t v303 = v295;
      }
    }
    else
    {
      uint64_t v303 = (void *)(8 * v297);
    }
    uint64_t v305 = *v291;
    uint64_t v304 = v291[1];
    uint64_t v306 = v304 - *v291;
    if (v304 == *v291)
    {
      id v308 = v303;
      goto LABEL_365;
    }
    unint64_t v307 = v306 - 8;
    if ((unint64_t)(v306 - 8) < 0x38)
    {
      id v308 = v303;
      do
      {
LABEL_363:
        uint64_t v314 = *(void *)(v304 - 8);
        v304 -= 8;
        *--id v308 = v314;
      }
      while (v304 != v305);
      goto LABEL_364;
    }
    id v308 = v303;
    if ((unint64_t)(v304 - (void)v303) < 0x20) {
      goto LABEL_363;
    }
    uint64_t v309 = (v307 >> 3) + 1;
    unint64_t v310 = v303 - 2;
    uint64_t v311 = (long long *)(v304 - 16);
    uint64_t v312 = v309 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v313 = *v311;
      *(v310 - 1) = *(v311 - 1);
      *unint64_t v310 = v313;
      v310 -= 2;
      v311 -= 2;
      v312 -= 4;
    }
    while (v312);
    id v308 = &v303[-(v309 & 0x3FFFFFFFFFFFFFFCLL)];
    v304 -= 8 * (v309 & 0x3FFFFFFFFFFFFFFCLL);
    if (v309 != (v309 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_363;
    }
LABEL_364:
    uint64_t v304 = *v291;
LABEL_365:
    uint64_t v294 = v303 + 1;
    *uint64_t v291 = (uint64_t)v308;
    v291[1] = (uint64_t)(v303 + 1);
    uint64_t v315 = v291[2];
    v291[2] = v300;
    if (v304) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v291[3] + 40))(v291[3], v304, v315 - v304);
    }
LABEL_340:
    v291[1] = (uint64_t)v294;
    if (++v292 != v293) {
      continue;
    }
    break;
  }
  uint64_t v316 = v291[4];
  if (v316 != v291[5]) {
    v291[5] = v316;
  }
LABEL_369:
  uint64_t v317 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(*(int8x8_t **)(v6 + 24));
  uint64_t v318 = v317[7];
  uint64_t v319 = v317[8];
  if (v318 != v319)
  {
    uint64_t v320 = (unsigned __int8 **)v317[10];
    while (1)
    {
      uint64_t v322 = (uint64_t)*v320;
      uint64_t v323 = v6;
      long long v324 = (uint64_t *)(v6 + 32 * **v320);
      uint64_t v326 = v324 + 14;
      unint64_t v325 = v324[14];
      v328 = v324 + 13;
      v327 = (void *)v324[13];
      if ((unint64_t)v327 >= v325) {
        break;
      }
      if (v327) {
        void *v327 = v322;
      }
      uint64_t v321 = v327 + 1;
LABEL_372:
      uint64_t v6 = v323;
      uint64_t *v328 = (uint64_t)v321;
      ++v320;
      v318 += 8;
      if (v318 == v319) {
        goto LABEL_398;
      }
    }
    uint64_t v329 = v324 + 12;
    uint64_t v330 = v324[12];
    uint64_t v331 = ((uint64_t)v327 - v330) >> 3;
    if ((unint64_t)(v331 + 1) >> 61) {
      goto LABEL_949;
    }
    uint64_t v332 = v324 + 15;
    unint64_t v333 = v325 - v330;
    unint64_t v334 = (uint64_t)(v325 - v330) >> 2;
    if (v334 <= v331 + 1) {
      unint64_t v334 = v331 + 1;
    }
    _CF = v333 >= 0x7FFFFFFFFFFFFFF8;
    uint64_t v335 = 0x1FFFFFFFFFFFFFFFLL;
    if (!_CF) {
      uint64_t v335 = v334;
    }
    v904 = v332;
    if (v335)
    {
      uint64_t v336 = 8 * v335;
      uint64_t v337 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v332 + 16))(*v332, 8 * v335, 8);
      uint64_t v338 = (void *)(v337 + 8 * v331);
      uint64_t v335 = v337 + v336;
      if (v337) {
        *uint64_t v338 = v322;
      }
    }
    else
    {
      uint64_t v338 = (void *)(8 * v331);
    }
    uint64_t v339 = *v328;
    uint64_t v340 = *v329;
    uint64_t v341 = *v328 - *v329;
    if (*v328 != *v329)
    {
      unint64_t v342 = v341 - 8;
      if ((unint64_t)(v341 - 8) < 0x38)
      {
        uint64_t v343 = v338;
      }
      else
      {
        uint64_t v343 = v338;
        if ((unint64_t)(v339 - (void)v338) >= 0x20)
        {
          uint64_t v344 = (v342 >> 3) + 1;
          unint64_t v345 = v338 - 2;
          uint64_t v346 = (long long *)(v339 - 16);
          uint64_t v347 = v344 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v348 = *v346;
            *(v345 - 1) = *(v346 - 1);
            *unint64_t v345 = v348;
            v345 -= 2;
            v346 -= 2;
            v347 -= 4;
          }
          while (v347);
          uint64_t v343 = &v338[-(v344 & 0x3FFFFFFFFFFFFFFCLL)];
          v339 -= 8 * (v344 & 0x3FFFFFFFFFFFFFFCLL);
          if (v344 == (v344 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_395:
            uint64_t v339 = *v329;
LABEL_396:
            uint64_t v321 = v338 + 1;
            uint64_t *v329 = (uint64_t)v343;
            uint64_t *v328 = (uint64_t)(v338 + 1);
            uint64_t v350 = *v326;
            *uint64_t v326 = v335;
            if (v339) {
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v904 + 40))(*v904, v339, v350 - v339);
            }
            goto LABEL_372;
          }
        }
      }
      do
      {
        uint64_t v349 = *(void *)(v339 - 8);
        v339 -= 8;
        *--uint64_t v343 = v349;
      }
      while (v339 != v340);
      goto LABEL_395;
    }
    uint64_t v343 = v338;
    goto LABEL_396;
  }
LABEL_398:
  if (!*(unsigned char *)(v6 + 1848))
  {
    uint64_t v352 = *(char **)(v6 + 160);
    uint64_t v351 = *(char **)(v6 + 168);
    uint64_t v353 = v351 - v352;
    if (v351 - v352 < 1) {
      goto LABEL_449;
    }
    uint64_t v354 = v353 >> 3;
    uint64_t v356 = *(void *)(v6 + 128);
    unint64_t v355 = *(void *)(v6 + 136);
    uint64_t v357 = v355 - v356;
    uint64_t v358 = (uint64_t *)(v356 + ((v355 - v356) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v359 = *(void *)(v6 + 144);
    if (v353 >> 3 <= (uint64_t)(v359 - v355) >> 3)
    {
      uint64_t v365 = (uint64_t)(v355 - (void)v358) >> 3;
      if (v365 >= v354)
      {
        unint64_t v366 = &v352[8 * v354];
        uint64_t v368 = *(char **)(v6 + 136);
      }
      else
      {
        unint64_t v366 = &v352[8 * v365];
        if (v366 == v351)
        {
          uint64_t v368 = *(char **)(v6 + 136);
        }
        else
        {
          uint64_t v367 = &v352[8 * v365];
          uint64_t v368 = *(char **)(v6 + 136);
          do
          {
            if (v368) {
              *(void *)uint64_t v368 = *(void *)v367;
            }
            v367 += 8;
            v368 += 8;
          }
          while (v367 != v351);
        }
        *(void *)(v6 + 136) = v368;
        if ((uint64_t)(v355 - (void)v358) < 1) {
          goto LABEL_449;
        }
      }
      uint64_t v396 = (char *)&v358[v354];
      v397 = &v368[-8 * v354];
      long long v398 = v368;
      if ((unint64_t)v397 < v355)
      {
        long long v398 = v368;
        do
        {
          if (v398) {
            *(void *)long long v398 = *(void *)v397;
          }
          v397 += 8;
          v398 += 8;
        }
        while ((unint64_t)v397 < v355);
      }
      *(void *)(v6 + 136) = v398;
      if (v368 != v396) {
        memmove(&v368[-8 * ((v368 - v396) >> 3)], v358, v368 - v396);
      }
      if (v366 != v352) {
        memmove(v358, v352, v366 - v352);
      }
      goto LABEL_449;
    }
    uint64_t v360 = v357 >> 3;
    unint64_t v361 = (v357 >> 3) + v354;
    if (v361 >> 61) {
LABEL_949:
    }
      abort();
    uint64_t v362 = v359 - v356;
    if (v362 >> 2 > v361) {
      unint64_t v361 = v362 >> 2;
    }
    if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v363 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v363 = v361;
    }
    if (v363) {
      uint64_t v364 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 152) + 16))(*(void *)(v6 + 152), 8 * v363, 8);
    }
    else {
      uint64_t v364 = 0;
    }
    uint64_t v369 = (void *)(v364 + 8 * v360);
    uint64_t v370 = 8 * v354;
    uint64_t v371 = &v369[v354];
    int v372 = v369;
    do
    {
      if (v372) {
        *int v372 = *(void *)v352;
      }
      ++v372;
      v352 += 8;
      v370 -= 8;
    }
    while (v370);
    uint64_t v373 = *(uint64_t **)(v6 + 128);
    if (v373 != v358)
    {
      uint64_t v374 = (v357 & 0xFFFFFFFFFFFFFFF8) + v356;
      unint64_t v375 = v374 - (void)v373 - 8;
      if (v375 < 0x68)
      {
        uint64_t v376 = v358;
        goto LABEL_428;
      }
      uint64_t v376 = v358;
      if (v374 - ((v357 & 0xFFFFFFFFFFFFFFF8) + v364) < 0x20) {
        goto LABEL_963;
      }
      uint64_t v377 = (v375 >> 3) + 1;
      uint64_t v376 = &v358[-(v377 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v378 = 8 * v360 - 16;
      v379 = (long long *)(v356 + v378);
      os_signpost_id_t v380 = (_OWORD *)(v364 + v378);
      uint64_t v381 = v377 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v382 = *v379;
        *(v380 - 1) = *(v379 - 1);
        *os_signpost_id_t v380 = v382;
        v379 -= 2;
        v380 -= 2;
        v381 -= 4;
      }
      while (v381);
      v369 -= v377 & 0x3FFFFFFFFFFFFFFCLL;
      if (v377 != (v377 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_963:
        do
        {
LABEL_428:
          uint64_t v383 = *--v376;
          *--uint64_t v369 = v383;
        }
        while (v376 != v373);
      }
    }
    uint64_t v384 = *(uint64_t **)(v6 + 136);
    if (v384 != v358)
    {
      uint64_t v385 = (v357 & 0xFFFFFFFFFFFFFFF8) + v356;
      unint64_t v386 = (unint64_t)v384 - v385 - 8;
      if (v386 < 0x68) {
        goto LABEL_964;
      }
      if ((v357 & 0xFFFFFFFFFFFFFFF8) + v364 + v353 - v385 < 0x20) {
        goto LABEL_964;
      }
      uint64_t v387 = (v386 >> 3) + 1;
      uint64_t v388 = 8 * (v387 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v358 = (uint64_t *)((char *)v358 + v388);
      uint64_t v389 = (_OWORD *)(8 * v360 + 8 * v354 + v364 + 16);
      uint64_t v390 = (long long *)(8 * v360 + v356 + 16);
      uint64_t v391 = v387 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v392 = *v390;
        *(v389 - 1) = *(v390 - 1);
        *uint64_t v389 = v392;
        v389 += 2;
        v390 += 2;
        v391 -= 4;
      }
      while (v391);
      uint64_t v371 = (void *)((char *)v371 + v388);
      if (v387 != (v387 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_964:
        do
        {
          uint64_t v393 = *v358++;
          *v371++ = v393;
        }
        while (v358 != v384);
      }
    }
    uint64_t v394 = *(void *)(v6 + 128);
    *(void *)(v6 + 128) = v369;
    *(void *)(v6 + 136) = v371;
    uint64_t v395 = *(void *)(v6 + 144);
    *(void *)(v6 + 144) = v364 + 8 * v363;
    if (v394) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 152) + 40))(*(void *)(v6 + 152), v394, v395 - v394);
    }
LABEL_449:
    *(void *)(v6 + 168) = *(void *)(v6 + 160);
  }
  uint64_t v399 = *(void *)(v6 + 96);
  unint64_t v400 = *(int8x16_t **)(v6 + 104);
  unint64_t v401 = ((uint64_t)v400->i64 - v399) >> 3;
  unint64_t v402 = 126 - 2 * __clz(v401);
  int v911 = 0;
  *(_DWORD *)(v6 + 1808) = v401;
  __p[0] = sortRenderDescriptionFunc;
  if (v400 == (int8x16_t *)v399) {
    uint64_t v403 = 0;
  }
  else {
    uint64_t v403 = v402;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v399, v400, (unsigned int (**)(uint64_t))__p, v403, 1);
  long long v404 = *(uint64_t **)(v6 + 96);
  for (uint64_t i = *(uint64_t **)(v6 + 104);
        v404 != i;
        *(_WORD *)((char *)&v911 + v407) = v408 + *(_WORD *)(v406 + 32) * *(unsigned __int8 *)(v406 + 29))
  {
    uint64_t v406 = *v404++;
    uint64_t v407 = shaderToVertexID[*(unsigned __int8 *)(v406 + 4)];
    *(unsigned char *)(v406 + 28) = v407;
    v407 *= 2;
    __int16 v408 = *(_WORD *)((char *)&v911 + v407);
    *(_WORD *)(v406 + 38) = v408;
  }
  uint64_t v409 = *(void *)(v6 + 128);
  unint64_t v410 = *(int8x16_t **)(v6 + 136);
  unint64_t v411 = ((uint64_t)v410->i64 - v409) >> 3;
  unint64_t v412 = 126 - 2 * __clz(v411);
  *(_DWORD *)(v6 + 1808) += v411;
  __p[0] = sortRenderDescriptionFunc;
  if (v410 == (int8x16_t *)v409) {
    uint64_t v413 = 0;
  }
  else {
    uint64_t v413 = v412;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v409, v410, (unsigned int (**)(uint64_t))__p, v413, 1);
  v414 = *(uint64_t **)(v6 + 128);
  for (uint64_t j = *(uint64_t **)(v6 + 136);
        v414 != j;
        *(_WORD *)((char *)&v911 + v417) = v418 + *(_WORD *)(v416 + 32) * *(unsigned __int8 *)(v416 + 29))
  {
    uint64_t v416 = *v414++;
    uint64_t v417 = shaderToVertexID[*(unsigned __int8 *)(v416 + 4)];
    *(unsigned char *)(v416 + 28) = v417;
    v417 *= 2;
    __int16 v418 = *(_WORD *)((char *)&v911 + v417);
    *(_WORD *)(v416 + 38) = v418;
  }
  uint64_t v419 = *(void *)(v6 + 160);
  uint64_t v420 = *(int8x16_t **)(v6 + 168);
  unint64_t v421 = ((uint64_t)v420->i64 - v419) >> 3;
  unint64_t v422 = 126 - 2 * __clz(v421);
  *(_DWORD *)(v6 + 1808) += v421;
  __p[0] = sortRenderDescriptionFunc;
  if (v420 == (int8x16_t *)v419) {
    uint64_t v423 = 0;
  }
  else {
    uint64_t v423 = v422;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v419, v420, (unsigned int (**)(uint64_t))__p, v423, 1);
  long long v424 = *(uint64_t **)(v6 + 160);
  for (k = *(uint64_t **)(v6 + 168);
        v424 != k;
        *(_WORD *)((char *)&v911 + v427) = v428 + *(_WORD *)(v426 + 32) * *(unsigned __int8 *)(v426 + 29))
  {
    uint64_t v426 = *v424++;
    uint64_t v427 = shaderToVertexID[*(unsigned __int8 *)(v426 + 4)];
    *(unsigned char *)(v426 + 28) = v427;
    v427 *= 2;
    __int16 v428 = *(_WORD *)((char *)&v911 + v427);
    *(_WORD *)(v426 + 38) = v428;
  }
  uint64_t v429 = *(void *)(v6 + 192);
  uint64_t v430 = *(int8x16_t **)(v6 + 200);
  unint64_t v431 = ((uint64_t)v430->i64 - v429) >> 3;
  unint64_t v432 = 126 - 2 * __clz(v431);
  *(_DWORD *)(v6 + 1808) += v431;
  __p[0] = sortRenderDescriptionFunc;
  if (v430 == (int8x16_t *)v429) {
    uint64_t v433 = 0;
  }
  else {
    uint64_t v433 = v432;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v429, v430, (unsigned int (**)(uint64_t))__p, v433, 1);
  unint64_t v434 = *(uint64_t **)(v6 + 192);
  for (m = *(uint64_t **)(v6 + 200);
        v434 != m;
        *(_WORD *)((char *)&v911 + v437) = v438 + *(_WORD *)(v436 + 32) * *(unsigned __int8 *)(v436 + 29))
  {
    uint64_t v436 = *v434++;
    uint64_t v437 = shaderToVertexID[*(unsigned __int8 *)(v436 + 4)];
    *(unsigned char *)(v436 + 28) = v437;
    v437 *= 2;
    __int16 v438 = *(_WORD *)((char *)&v911 + v437);
    *(_WORD *)(v436 + 38) = v438;
  }
  uint64_t v439 = *(void *)(v6 + 224);
  uint64_t v440 = *(int8x16_t **)(v6 + 232);
  unint64_t v441 = ((uint64_t)v440->i64 - v439) >> 3;
  unint64_t v442 = 126 - 2 * __clz(v441);
  *(_DWORD *)(v6 + 1808) += v441;
  __p[0] = sortRenderDescriptionFunc;
  if (v440 == (int8x16_t *)v439) {
    uint64_t v443 = 0;
  }
  else {
    uint64_t v443 = v442;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v439, v440, (unsigned int (**)(uint64_t))__p, v443, 1);
  uint64_t v444 = *(uint64_t **)(v6 + 224);
  for (n = *(uint64_t **)(v6 + 232);
        v444 != n;
        *(_WORD *)((char *)&v911 + v447) = v448 + *(_WORD *)(v446 + 32) * *(unsigned __int8 *)(v446 + 29))
  {
    uint64_t v446 = *v444++;
    uint64_t v447 = shaderToVertexID[*(unsigned __int8 *)(v446 + 4)];
    *(unsigned char *)(v446 + 28) = v447;
    v447 *= 2;
    __int16 v448 = *(_WORD *)((char *)&v911 + v447);
    *(_WORD *)(v446 + 38) = v448;
  }
  uint64_t v449 = (unsigned __int16)v911;
  uint64_t v450 = HIWORD(v911);
  if ((unsigned __int16)v911 <= HIWORD(v911)) {
    uint64_t v451 = HIWORD(v911);
  }
  else {
    uint64_t v451 = (unsigned __int16)v911;
  }
  uint64_t v452 = *(void *)(v6 + 456);
  unint64_t v453 = *(void *)(v452 + 8);
  unint64_t v454 = 2 * (v451 + 2 * v451);
  if ((*(void *)(v452 + 48) - *(void *)(v452 + 40)) / v453 < v454)
  {
    unint64_t v455 = v453 * v454;
    uint64_t v456 = *(void *)(v452 + 72);
    unint64_t v457 = *(void *)(v452 + 80) - v456;
    if (v455 != v457)
    {
      if (v455 <= v457)
      {
        if (v455 < v457) {
          *(void *)(v452 + 80) = v456 + v455;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v452 + 72, v455 - v457);
      }
      uint64_t v458 = *(std::__shared_weak_count **)(v452 + 32);
      *(void *)(v452 + 24) = 0;
      *(void *)(v452 + 32) = 0;
      if (v458 && !atomic_fetch_add(&v458->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
        std::__shared_weak_count::__release_weak(v458);
      }
      *(void *)(v452 + 120) = 0;
      *(_DWORD *)(v452 + 112) = 0;
      uint64_t v459 = *(void *)(v452 + 80) - *(void *)(v452 + 72);
      *(void *)(v452 + 40) = 0;
      *(void *)(v452 + 48) = v459;
      *(void *)(v452 + 56) = 0;
      *(void *)(v452 + 64) = v459;
      uint64_t v452 = *(void *)(v6 + 456);
      unint64_t v455 = *(void *)(v452 + 8) * v454;
    }
    if (v455)
    {
      size_t v460 = *(int8x8_t **)(v452 + 72);
      if (!v451) {
        goto LABEL_500;
      }
    }
    else
    {
      size_t v460 = 0;
      if (!v451) {
        goto LABEL_500;
      }
    }
    if (v451 == 1)
    {
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      unint64_t v463 = v460;
    }
    else
    {
      uint64_t v464 = 0;
      uint64_t v462 = (unsigned __int16)v451 & 0xFFFE;
      unint64_t v465 = v460 + 2;
      do
      {
        v465[-2].i16[0] = 4 * v464;
        v465[-2].i16[1] = (4 * v464) | 1;
        __int16 v466 = (4 * v464) | 6;
        v465->i16[0] = v466;
        v465[-2].i16[3] = 4 * v464;
        v465->i16[2] = v466;
        int8x8_t v467 = vorr_s8((int8x8_t)vdup_n_s16(4 * (int)v464), (int8x8_t)0x5000400030002);
        v465->i16[1] = v467.i16[2];
        v465[-2].i16[2] = v467.i16[0];
        v465[-1] = v467;
        v465->i16[3] = (4 * v464) | 7;
        v464 += 2;
        v465 += 3;
      }
      while (v462 != v464);
      if (v462 == v451) {
        goto LABEL_500;
      }
      uint64_t v461 = 4 * v462;
      unint64_t v463 = (int8x8_t *)((char *)v460 + 12 * ((unsigned __int16)v451 & 0xFFFE));
    }
    uint64_t v468 = v451 - v462;
    do
    {
      v463->i16[0] = v461;
      v463->i16[1] = v461 | 1;
      __int16 v469 = v461 | 2;
      v463->i16[2] = v461 | 2;
      v463->i16[3] = v461;
      __int16 v470 = v461 | 3;
      v461 += 4;
      v463[1].i16[0] = v469;
      v463[1].i16[1] = v470;
      unint64_t v463 = (int8x8_t *)((char *)v463 + 12);
      --v468;
    }
    while (v468);
LABEL_500:
    if (v460 && v455)
    {
      if (*(void *)(v452 + 64) > v455) {
        unint64_t v455 = *(void *)(v452 + 64);
      }
      *(void *)(v452 + 56) = 0;
      *(void *)(v452 + 64) = v455;
    }
  }
  long long v908 = 0u;
  long long v907 = 0u;
  uint64_t v909 = 0;
  v910 = v903;
  uint64_t v471 = 4 * v449;
  uint64_t v472 = **(void **)(v6 + 1296);
  unint64_t v473 = *(void *)(v472 + 8);
  if ((*(void *)(v472 + 48) - *(void *)(v472 + 40)) / v473 < 4 * v449)
  {
    unint64_t v474 = v473 * v471;
    uint64_t v475 = *(void *)(v472 + 72);
    unint64_t v476 = *(void *)(v472 + 80) - v475;
    if (v473 * v471 != v476)
    {
      if (v473 * v471 <= v476)
      {
        if (v474 < v476) {
          *(void *)(v472 + 80) = v475 + v474;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v472 + 72, v473 * v471 - v476);
      }
      uint64_t v477 = *(std::__shared_weak_count **)(v472 + 32);
      *(void *)(v472 + 24) = 0;
      *(void *)(v472 + 32) = 0;
      if (v477 && !atomic_fetch_add(&v477->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
        std::__shared_weak_count::__release_weak(v477);
      }
      *(void *)(v472 + 120) = 0;
      *(_DWORD *)(v472 + 112) = 0;
      uint64_t v478 = *(void *)(v472 + 80) - *(void *)(v472 + 72);
      *(void *)(v472 + 40) = 0;
      *(void *)(v472 + 48) = v478;
      *(void *)(v472 + 56) = 0;
      *(void *)(v472 + 64) = v478;
      uint64_t v472 = **(void **)(v6 + 1296);
      unint64_t v473 = *(void *)(v472 + 8);
    }
  }
  uint64_t v479 = v473 * v471;
  if (v479) {
    uint64_t v480 = *(void *)(v472 + 72);
  }
  else {
    uint64_t v480 = 0;
  }
  uint64_t v906 = v480;
  unint64_t v481 = 4 * v450;
  uint64_t v482 = **(void **)(v6 + 1088);
  unint64_t v483 = *(void *)(v482 + 8);
  if ((*(void *)(v482 + 48) - *(void *)(v482 + 40)) / v483 < v481)
  {
    unint64_t v484 = v483 * v481;
    uint64_t v485 = *(void *)(v482 + 72);
    unint64_t v486 = *(void *)(v482 + 80) - v485;
    if (v483 * v481 != v486)
    {
      if (v483 * v481 <= v486)
      {
        if (v484 < v486) {
          *(void *)(v482 + 80) = v485 + v484;
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v482 + 72, v483 * v481 - v486);
      }
      v487 = *(std::__shared_weak_count **)(v482 + 32);
      *(void *)(v482 + 24) = 0;
      *(void *)(v482 + 32) = 0;
      if (v487 && !atomic_fetch_add(&v487->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
        std::__shared_weak_count::__release_weak(v487);
      }
      *(void *)(v482 + 120) = 0;
      *(_DWORD *)(v482 + 112) = 0;
      uint64_t v488 = *(void *)(v482 + 80) - *(void *)(v482 + 72);
      *(void *)(v482 + 40) = 0;
      *(void *)(v482 + 48) = v488;
      *(void *)(v482 + 56) = 0;
      *(void *)(v482 + 64) = v488;
      uint64_t v482 = **(void **)(v6 + 1088);
      unint64_t v483 = *(void *)(v482 + 8);
    }
  }
  unint64_t v489 = v483 * v481;
  uint64_t v894 = v482;
  uint64_t v895 = v472;
  unint64_t v898 = v489;
  unint64_t v899 = v479;
  uint64_t v897 = v480;
  if (v489) {
    unint64_t v489 = *(void *)(v482 + 72);
  }
  unint64_t v896 = v489;
  *(void *)&long long v907 = v489;
  v490 = *(int8x8_t **)(v6 + 24);
  v491 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v490);
  v492 = (void *)gdc::Registry::storage<md::GlyphMeshDescriptor>(v490);
  uint64_t v494 = (unint64_t *)v492[7];
  uint64_t v493 = (uint64_t *)v492[8];
  v496 = (unint64_t *)v491[7];
  uint64_t v495 = (uint64_t *)v491[8];
  if ((char *)v493 - (char *)v494 >= (unint64_t)((char *)v495 - (char *)v496)) {
    v497 = v491 + 4;
  }
  else {
    v497 = v492 + 4;
  }
  long long v905 = 0u;
  if (v491 + 4 == v497 && v496 != (unint64_t *)v495)
  {
    unint64_t v498 = (uint64_t *)v491[10];
    uint64_t v499 = v492[4];
    unint64_t v500 = (v492[5] - v499) >> 3;
    unint64_t v501 = ((char *)v493 - (char *)v494) >> 3;
    long long v905 = 0uLL;
    uint64_t v502 = v492[10];
    uint64_t v503 = (unsigned __int8 *)v492[11];
    do
    {
      unint64_t v505 = *((unsigned int *)v496 + 1);
      if (v505 >> 7 < v500)
      {
        uint64_t v506 = *(void *)(v499 + 8 * (v505 >> 7));
        if (v506)
        {
          unint64_t v507 = *(unsigned __int16 *)(v506 + 2 * (v505 & 0x7F));
          if (v501 > v507)
          {
            unsigned int v508 = (uint64_t *)&v494[v507];
            if (v508 != v493 && *((_DWORD *)v508 + 1) == v505)
            {
              unint64_t v510 = *v496;
              unint64_t v511 = *v496 >> 39;
              id v512 = v503;
              if (v511 < v500)
              {
                uint64_t v513 = *(void *)(v499 + 8 * v511);
                id v512 = v503;
                if (v513)
                {
                  unint64_t v514 = *(unsigned __int16 *)(v513 + 2 * (HIDWORD(v510) & 0x7F));
                  id v512 = v503;
                  if (v501 > v514)
                  {
                    v515 = (uint64_t *)&v494[v514];
                    if (*((_DWORD *)v515 + 1) != HIDWORD(v510) || v515 == v493) {
                      id v512 = v503;
                    }
                    else {
                      id v512 = (unsigned __int8 *)(v502 + 40 * v514);
                    }
                  }
                }
              }
              uint64_t v517 = *v498;
              int v518 = *v512;
              int v519 = v512[1];
              *(_WORD *)(*v498 + 30) = 0;
              if (v518)
              {
                *(unsigned char *)(v517 + 30) = 4;
                int32x2_t v520 = (int32x2_t)4;
                if (v519)
                {
                  *(_WORD *)(v517 + 30) = 780;
                  int32x2_t v520 = (int32x2_t)0x30000000CLL;
                }
                *((void *)&v504 + 1) = *((void *)&v905 + 1);
                *(int32x2_t *)&long long v504 = vadd_s32(*(int32x2_t *)&v905, v520);
                long long v905 = v504;
              }
            }
          }
        }
      }
      ++v498;
      ++v496;
    }
    while (v496 != (unint64_t *)v495);
  }
  if (v492 + 4 == v497 && v494 != (unint64_t *)v493)
  {
    uint64_t v521 = v491[4];
    unint64_t v522 = (v491[5] - v521) >> 3;
    uint64_t v524 = v491[7];
    uint64_t v523 = v491[8];
    unint64_t v525 = (v523 - v524) >> 3;
    uint64_t v526 = v491[10];
    v527 = (uint64_t *)v491[11];
    uint64_t v528 = (unsigned __int8 *)(v492[10] + 1);
    do
    {
      unint64_t v530 = *((unsigned int *)v494 + 1);
      if (v530 >> 7 < v522)
      {
        uint64_t v531 = *(void *)(v521 + 8 * (v530 >> 7));
        if (v531)
        {
          unint64_t v532 = *(unsigned __int16 *)(v531 + 2 * (v530 & 0x7F));
          if (v525 > v532)
          {
            uint64_t v533 = v524 + 8 * v532;
            if (v533 != v523 && *(_DWORD *)(v533 + 4) == v530)
            {
              unint64_t v535 = *v494;
              unint64_t v536 = *v494 >> 39;
              v537 = v527;
              if (v536 < v522)
              {
                uint64_t v538 = *(void *)(v521 + 8 * v536);
                v537 = v527;
                if (v538)
                {
                  unint64_t v539 = *(unsigned __int16 *)(v538 + 2 * (HIDWORD(v535) & 0x7F));
                  v537 = v527;
                  if (v525 > v539)
                  {
                    uint64_t v540 = 8 * v539;
                    uint64_t v541 = v524 + 8 * v539;
                    if (*(_DWORD *)(v541 + 4) != HIDWORD(v535) || v541 == v523) {
                      v537 = v527;
                    }
                    else {
                      v537 = (uint64_t *)(v526 + v540);
                    }
                  }
                }
              }
              uint64_t v543 = *v537;
              int v544 = *(v528 - 1);
              int v545 = *v528;
              *(_WORD *)(v543 + 30) = 0;
              if (v544)
              {
                *(unsigned char *)(v543 + 30) = 4;
                int32x2_t v546 = (int32x2_t)4;
                if (v545)
                {
                  *(_WORD *)(v543 + 30) = 780;
                  int32x2_t v546 = (int32x2_t)0x30000000CLL;
                }
                *((void *)&v529 + 1) = *((void *)&v905 + 1);
                *(int32x2_t *)&long long v529 = vadd_s32(*(int32x2_t *)&v905, v546);
                long long v905 = v529;
              }
            }
          }
        }
      }
      ++v494;
      v528 += 40;
    }
    while (v494 != (unint64_t *)v493);
  }
  v547 = *(int8x8_t **)(v6 + 24);
  uint64_t v548 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v547);
  uint64_t v549 = (void *)gdc::Registry::storage<md::ShadowMeshDescriptor>(v547);
  unint64_t v551 = (unint64_t *)v549[7];
  unint64_t v550 = (uint64_t *)v549[8];
  uint64_t v553 = (unint64_t *)v548[7];
  uint64_t v552 = (uint64_t *)v548[8];
  if ((char *)v550 - (char *)v551 >= (unint64_t)((char *)v552 - (char *)v553)) {
    unint64_t v554 = v548 + 4;
  }
  else {
    unint64_t v554 = v549 + 4;
  }
  if (v548 + 4 == v554 && v553 != (unint64_t *)v552)
  {
    v676 = (uint64_t *)v548[10];
    uint64_t v677 = v549[4];
    unint64_t v678 = (v549[5] - v677) >> 3;
    unint64_t v679 = ((char *)v550 - (char *)v551) >> 3;
    uint64_t v680 = v549[10];
    v681 = (unsigned char *)v549[11];
    do
    {
      unint64_t v685 = *((unsigned int *)v553 + 1);
      if (v685 >> 7 < v678)
      {
        uint64_t v686 = *(void *)(v677 + 8 * (v685 >> 7));
        if (v686)
        {
          unint64_t v687 = *(unsigned __int16 *)(v686 + 2 * (v685 & 0x7F));
          if (v679 > v687)
          {
            v688 = (uint64_t *)&v551[v687];
            if (v688 != v550 && *((_DWORD *)v688 + 1) == v685)
            {
              unint64_t v690 = *v553;
              unint64_t v691 = *v553 >> 39;
              v692 = v681;
              if (v691 < v678)
              {
                uint64_t v693 = *(void *)(v677 + 8 * v691);
                v692 = v681;
                if (v693)
                {
                  unint64_t v694 = *(unsigned __int16 *)(v693 + 2 * (HIDWORD(v690) & 0x7F));
                  v692 = v681;
                  if (v679 > v694)
                  {
                    v695 = (uint64_t *)&v551[v694];
                    if (*((_DWORD *)v695 + 1) != HIDWORD(v690) || v695 == v550) {
                      v692 = v681;
                    }
                    else {
                      v692 = (unsigned char *)(v680 + 40 * v694);
                    }
                  }
                }
              }
              uint64_t v682 = *v676;
              if (*v692) {
                unsigned int v683 = 5;
              }
              else {
                unsigned int v683 = 1;
              }
              *(unsigned char *)(v682 + 30) = v683;
              *(unsigned char *)(v682 + 31) = 1;
              *((void *)&v684 + 1) = *((void *)&v905 + 1);
              *(int32x2_t *)&long long v684 = vadd_s32(*(int32x2_t *)&v905, (int32x2_t)(v683 | 0x100000000));
              long long v905 = v684;
            }
          }
        }
      }
      ++v676;
      ++v553;
    }
    while (v553 != (unint64_t *)v552);
  }
  if (v549 + 4 == v554 && v551 != (unint64_t *)v550)
  {
    v556 = (unsigned char *)v549[10];
    uint64_t v557 = v548[4];
    unint64_t v558 = (v548[5] - v557) >> 3;
    uint64_t v560 = v548[7];
    uint64_t v559 = v548[8];
    unint64_t v561 = (v559 - v560) >> 3;
    uint64_t v562 = v548[10];
    v563 = (uint64_t *)v548[11];
    do
    {
      unint64_t v567 = *((unsigned int *)v551 + 1);
      if (v567 >> 7 < v558)
      {
        uint64_t v568 = *(void *)(v557 + 8 * (v567 >> 7));
        if (v568)
        {
          unint64_t v569 = *(unsigned __int16 *)(v568 + 2 * (v567 & 0x7F));
          if (v561 > v569)
          {
            uint64_t v570 = v560 + 8 * v569;
            if (v570 != v559 && *(_DWORD *)(v570 + 4) == v567)
            {
              unint64_t v572 = *v551;
              unint64_t v573 = *v551 >> 39;
              v574 = v563;
              if (v573 < v558)
              {
                uint64_t v575 = *(void *)(v557 + 8 * v573);
                v574 = v563;
                if (v575)
                {
                  unint64_t v576 = *(unsigned __int16 *)(v575 + 2 * (HIDWORD(v572) & 0x7F));
                  v574 = v563;
                  if (v561 > v576)
                  {
                    uint64_t v577 = 8 * v576;
                    uint64_t v578 = v560 + 8 * v576;
                    if (*(_DWORD *)(v578 + 4) != HIDWORD(v572) || v578 == v559) {
                      v574 = v563;
                    }
                    else {
                      v574 = (uint64_t *)(v562 + v577);
                    }
                  }
                }
              }
              uint64_t v564 = *v574;
              if (*v556) {
                unsigned int v565 = 5;
              }
              else {
                unsigned int v565 = 1;
              }
              *(unsigned char *)(v564 + 30) = v565;
              *(unsigned char *)(v564 + 31) = 1;
              *((void *)&v566 + 1) = *((void *)&v905 + 1);
              *(int32x2_t *)&long long v566 = vadd_s32(*(int32x2_t *)&v905, (int32x2_t)(v565 | 0x100000000));
              long long v905 = v566;
            }
          }
        }
      }
      v556 += 40;
      ++v551;
    }
    while (v551 != (unint64_t *)v550);
  }
  v580 = *(int8x8_t **)(v6 + 24);
  uint64_t v581 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v580);
  v582 = (void *)gdc::Registry::storage<md::IconMeshDescriptor>(v580);
  uint64_t v584 = (unint64_t *)v581[7];
  v583 = (uint64_t *)v581[8];
  if (v582[8] - v582[7] >= (unint64_t)((char *)v583 - (char *)v584)) {
    long long v585 = v581 + 4;
  }
  else {
    long long v585 = v582 + 4;
  }
  unsigned int v586 = v905;
  unsigned int v587 = DWORD1(v905);
  if (v581 + 4 == v585 && v584 != (unint64_t *)v583)
  {
    v697 = (uint64_t *)v581[10];
    while (2)
    {
      unint64_t v700 = *((unsigned int *)v584 + 1);
      uint64_t v701 = v582[4];
      unint64_t v702 = (v582[5] - v701) >> 3;
      if (v700 >> 7 >= v702) {
        goto LABEL_742;
      }
      uint64_t v703 = *(void *)(v701 + 8 * (v700 >> 7));
      if (!v703) {
        goto LABEL_742;
      }
      unint64_t v704 = *(unsigned __int16 *)(v703 + 2 * (v700 & 0x7F));
      uint64_t v705 = v582[7];
      uint64_t v706 = v582[8];
      unint64_t v707 = (v706 - v705) >> 3;
      if (v707 <= v704) {
        goto LABEL_742;
      }
      uint64_t v708 = v705 + 8 * v704;
      if (v708 == v706 || *(_DWORD *)(v708 + 4) != v700) {
        goto LABEL_742;
      }
      unint64_t v710 = *v584;
      unint64_t v711 = *v584 >> 39;
      if (v711 < v702
        && (uint64_t v712 = *(void *)(v701 + 8 * v711)) != 0
        && (unint64_t v713 = *(unsigned __int16 *)(v712 + 2 * (HIDWORD(v710) & 0x7F)), v707 > v713)
        && ((unint64_t v714 = HIDWORD(v710), v715 = v705 + 8 * v713, v715 != v706)
          ? (BOOL v716 = *(_DWORD *)(v715 + 4) == v714)
          : (BOOL v716 = 0),
            v716))
      {
        v717 = (unsigned __int8 *)(v582[10] + 40 * v713);
      }
      else
      {
        v717 = (unsigned __int8 *)v582[11];
      }
      uint64_t v718 = *v697;
      *(_WORD *)(*v697 + 30) = 0;
      int v698 = *v717;
      if (*v717)
      {
        int v698 = 4;
        *(unsigned char *)(v718 + 30) = 4;
      }
      if (v717[1])
      {
        v698 |= 1u;
        *(unsigned char *)(v718 + 30) = v698;
        if (v717[2]) {
          int v699 = 6;
        }
        else {
          int v699 = 3;
        }
LABEL_740:
        *(unsigned char *)(v718 + 31) = v699;
      }
      else
      {
        int v699 = v717[3];
        if (v699)
        {
          v698 |= 1u;
          *(unsigned char *)(v718 + 30) = v698;
          int v699 = 1;
          goto LABEL_740;
        }
      }
      v586 += v698;
      v587 += v699;
LABEL_742:
      ++v697;
      if (++v584 == (unint64_t *)v583) {
        break;
      }
      continue;
    }
  }
  if (v582 + 4 == v585)
  {
    v719 = (unint64_t *)v582[7];
    v720 = (uint64_t *)v582[8];
    if (v719 != (unint64_t *)v720)
    {
      v721 = (unsigned char *)(v582[10] + 3);
      while (2)
      {
        unint64_t v872 = *((unsigned int *)v719 + 1);
        uint64_t v873 = v581[4];
        unint64_t v874 = (v581[5] - v873) >> 3;
        if (v872 >> 7 >= v874) {
          goto LABEL_926;
        }
        uint64_t v875 = *(void *)(v873 + 8 * (v872 >> 7));
        if (!v875) {
          goto LABEL_926;
        }
        unint64_t v876 = *(unsigned __int16 *)(v875 + 2 * (v872 & 0x7F));
        uint64_t v878 = v581[7];
        uint64_t v877 = v581[8];
        unint64_t v879 = (v877 - v878) >> 3;
        if (v879 <= v876) {
          goto LABEL_926;
        }
        uint64_t v880 = v878 + 8 * v876;
        if (v880 == v877 || *(_DWORD *)(v880 + 4) != v872) {
          goto LABEL_926;
        }
        unint64_t v882 = *v719;
        unint64_t v883 = *v719 >> 39;
        if (v883 < v874
          && (uint64_t v884 = *(void *)(v873 + 8 * v883)) != 0
          && (unint64_t v885 = *(unsigned __int16 *)(v884 + 2 * (HIDWORD(v882) & 0x7F)), v879 > v885)
          && ((unint64_t v886 = HIDWORD(v882), v887 = v878 + 8 * v885, v887 != v877)
            ? (BOOL v888 = *(_DWORD *)(v887 + 4) == v886)
            : (BOOL v888 = 0),
              v888))
        {
          uint64_t v889 = v581[10] + 8 * v885;
        }
        else
        {
          uint64_t v889 = v581[11];
        }
        uint64_t v890 = *(void *)v889;
        *(_WORD *)(*(void *)v889 + 30) = 0;
        int v870 = *(v721 - 3);
        if (*(v721 - 3))
        {
          int v870 = 4;
          *(unsigned char *)(v890 + 30) = 4;
        }
        if (*(v721 - 2))
        {
          v870 |= 1u;
          *(unsigned char *)(v890 + 30) = v870;
          if (*(v721 - 1)) {
            int v871 = 6;
          }
          else {
            int v871 = 3;
          }
LABEL_924:
          *(unsigned char *)(v890 + 31) = v871;
        }
        else
        {
          int v871 = *v721;
          if (*v721)
          {
            v870 |= 1u;
            *(unsigned char *)(v890 + 30) = v870;
            int v871 = 1;
            goto LABEL_924;
          }
        }
        v586 += v870;
        v587 += v871;
LABEL_926:
        ++v719;
        v721 += 40;
        if (v719 == (unint64_t *)v720) {
          break;
        }
        continue;
      }
    }
  }
  *(_DWORD *)(v6 + 1864) = v586;
  *(_DWORD *)(v6 + 1868) = v587;
  if (v586) {
    md::LabelRenderer::prepareDeviceBuffer((md::LabelRenderer *)v6, (uint32x2_t *)(v6 + 1488), v586);
  }
  if (v587) {
    md::LabelRenderer::prepareDeviceBuffer((md::LabelRenderer *)v6, (uint32x2_t *)(v6 + 1632), v587);
  }
  *((void *)&v918[0] + 1) = 0;
  *(_OWORD *)__p = 0u;
  long long v917 = 0u;
  LODWORD(v918[0]) = 0;
  v589 = *(int8x8_t **)(v6 + 24);
  id v590 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v589);
  uint64_t v591 = gdc::Registry::storage<md::ShadowMeshDescriptor>(v589);
  id v592 = (void *)v591;
  uint64_t v593 = v591 + 32;
  id v595 = (unint64_t *)v590[7];
  id v594 = (uint64_t *)v590[8];
  if (*(void *)(v591 + 64) - *(void *)(v591 + 56) >= (unint64_t)((char *)v594 - (char *)v595)) {
    unint64_t v596 = v590 + 4;
  }
  else {
    unint64_t v596 = (void *)(v591 + 32);
  }
  if (v590 + 4 == v596)
  {
    v912 = __p;
    v913 = &v906;
    v914 = v903;
    if (v595 != (unint64_t *)v594)
    {
      v722 = (uint64_t *)v590[10];
      do
      {
        unint64_t v724 = *((unsigned int *)v595 + 1);
        uint64_t v725 = v592[4];
        unint64_t v726 = (v592[5] - v725) >> 3;
        if (v724 >> 7 < v726)
        {
          uint64_t v727 = *(void *)(v725 + 8 * (v724 >> 7));
          if (v727)
          {
            unint64_t v728 = *(unsigned __int16 *)(v727 + 2 * (v724 & 0x7F));
            uint64_t v730 = v592[7];
            uint64_t v729 = v592[8];
            unint64_t v731 = (v729 - v730) >> 3;
            if (v731 > v728)
            {
              uint64_t v732 = v730 + 8 * v728;
              if (v732 != v729 && *(_DWORD *)(v732 + 4) == v724)
              {
                unint64_t v734 = *v595;
                unint64_t v735 = *v595 >> 39;
                if (v735 < v726
                  && (uint64_t v736 = *(void *)(v725 + 8 * v735)) != 0
                  && (unint64_t v737 = *(unsigned __int16 *)(v736 + 2 * (HIDWORD(v734) & 0x7F)), v731 > v737)
                  && ((unint64_t v738 = HIDWORD(v734), v739 = v730 + 8 * v737, v739 != v729)
                    ? (BOOL v740 = *(_DWORD *)(v739 + 4) == v738)
                    : (BOOL v740 = 0),
                      v740))
                {
                  v723 = (unsigned __int8 *)(v592[10] + 40 * v737);
                }
                else
                {
                  v723 = (unsigned __int8 *)v592[11];
                }
                md::LabelRenderer::initShadowhMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v912, *v722, v723);
              }
            }
          }
        }
        ++v722;
        ++v595;
      }
      while (v595 != (unint64_t *)v594);
    }
  }
  if ((void *)v593 == v596)
  {
    v912 = __p;
    v913 = &v906;
    v914 = v903;
    v741 = (unint64_t *)v592[7];
    v742 = (uint64_t *)v592[8];
    if (v741 != (unint64_t *)v742)
    {
      v743 = (unsigned __int8 *)v592[10];
      do
      {
        unint64_t v745 = *((unsigned int *)v741 + 1);
        uint64_t v746 = v590[4];
        unint64_t v747 = (v590[5] - v746) >> 3;
        if (v745 >> 7 < v747)
        {
          uint64_t v748 = *(void *)(v746 + 8 * (v745 >> 7));
          if (v748)
          {
            unint64_t v749 = *(unsigned __int16 *)(v748 + 2 * (v745 & 0x7F));
            uint64_t v751 = v590[7];
            uint64_t v750 = v590[8];
            unint64_t v752 = (v750 - v751) >> 3;
            if (v752 > v749)
            {
              uint64_t v753 = v751 + 8 * v749;
              if (v753 != v750 && *(_DWORD *)(v753 + 4) == v745)
              {
                unint64_t v755 = *v741;
                unint64_t v756 = *v741 >> 39;
                if (v756 < v747
                  && (uint64_t v757 = *(void *)(v746 + 8 * v756)) != 0
                  && (unint64_t v758 = *(unsigned __int16 *)(v757 + 2 * (HIDWORD(v755) & 0x7F)), v752 > v758)
                  && ((unint64_t v759 = HIDWORD(v755), v760 = v751 + 8 * v758, v760 != v750)
                    ? (BOOL v761 = *(_DWORD *)(v760 + 4) == v759)
                    : (BOOL v761 = 0),
                      v761))
                {
                  v744 = (uint64_t *)(v590[10] + 8 * v758);
                }
                else
                {
                  v744 = (uint64_t *)v590[11];
                }
                md::LabelRenderer::initShadowhMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v912, *v744, v743);
              }
            }
          }
        }
        v743 += 40;
        ++v741;
      }
      while (v741 != (unint64_t *)v742);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = 0u;
  long long v917 = 0u;
  memset(v918, 0, 28);
  long long v919 = 0u;
  long long v920 = 0u;
  uint64_t v597 = *(int8x8_t **)(v6 + 24);
  v598 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v597);
  uint64_t v599 = gdc::Registry::storage<md::GlyphMeshDescriptor>(v597);
  v600 = (void *)v599;
  uint64_t v601 = v599 + 32;
  v602 = (unint64_t *)v598[7];
  v603 = (uint64_t *)v598[8];
  if (*(void *)(v599 + 64) - *(void *)(v599 + 56) >= (unint64_t)((char *)v603 - (char *)v602)) {
    uint64_t v604 = v598 + 4;
  }
  else {
    uint64_t v604 = (void *)(v599 + 32);
  }
  if (v598 + 4 == v604)
  {
    v912 = __p;
    v913 = &v906;
    v914 = v903;
    v915 = (char *)&v919 + 8;
    if (v602 != (unint64_t *)v603)
    {
      v762 = (uint64_t *)v598[10];
      do
      {
        unint64_t v764 = *((unsigned int *)v602 + 1);
        uint64_t v765 = v600[4];
        unint64_t v766 = (v600[5] - v765) >> 3;
        if (v764 >> 7 < v766)
        {
          uint64_t v767 = *(void *)(v765 + 8 * (v764 >> 7));
          if (v767)
          {
            unint64_t v768 = *(unsigned __int16 *)(v767 + 2 * (v764 & 0x7F));
            uint64_t v770 = v600[7];
            uint64_t v769 = v600[8];
            unint64_t v771 = (v769 - v770) >> 3;
            if (v771 > v768)
            {
              uint64_t v772 = v770 + 8 * v768;
              if (v772 != v769 && *(_DWORD *)(v772 + 4) == v764)
              {
                unint64_t v774 = *v602;
                unint64_t v775 = *v602 >> 39;
                if (v775 < v766
                  && (uint64_t v776 = *(void *)(v765 + 8 * v775)) != 0
                  && (unint64_t v777 = *(unsigned __int16 *)(v776 + 2 * (HIDWORD(v774) & 0x7F)), v771 > v777)
                  && ((unint64_t v778 = HIDWORD(v774), v779 = v770 + 8 * v777, v779 != v769)
                    ? (BOOL v780 = *(_DWORD *)(v779 + 4) == v778)
                    : (BOOL v780 = 0),
                      v780))
                {
                  uint64_t v763 = v600[10] + 40 * v777;
                }
                else
                {
                  uint64_t v763 = v600[11];
                }
                md::LabelRenderer::initGlyphMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v912, *v762, v763);
              }
            }
          }
        }
        ++v762;
        ++v602;
      }
      while (v602 != (unint64_t *)v603);
    }
  }
  if ((void *)v601 == v604)
  {
    v912 = __p;
    v913 = &v906;
    v914 = v903;
    v915 = (char *)&v919 + 8;
    v781 = (unint64_t *)v600[7];
    v782 = (uint64_t *)v600[8];
    if (v781 != (unint64_t *)v782)
    {
      uint64_t v783 = v600[10];
      do
      {
        unint64_t v785 = *((unsigned int *)v781 + 1);
        uint64_t v786 = v598[4];
        unint64_t v787 = (v598[5] - v786) >> 3;
        if (v785 >> 7 < v787)
        {
          uint64_t v788 = *(void *)(v786 + 8 * (v785 >> 7));
          if (v788)
          {
            unint64_t v789 = *(unsigned __int16 *)(v788 + 2 * (v785 & 0x7F));
            uint64_t v791 = v598[7];
            uint64_t v790 = v598[8];
            unint64_t v792 = (v790 - v791) >> 3;
            if (v792 > v789)
            {
              uint64_t v793 = v791 + 8 * v789;
              if (v793 != v790 && *(_DWORD *)(v793 + 4) == v785)
              {
                unint64_t v795 = *v781;
                unint64_t v796 = *v781 >> 39;
                if (v796 < v787
                  && (uint64_t v797 = *(void *)(v786 + 8 * v796)) != 0
                  && (unint64_t v798 = *(unsigned __int16 *)(v797 + 2 * (HIDWORD(v795) & 0x7F)), v792 > v798)
                  && ((unint64_t v799 = HIDWORD(v795), v800 = v791 + 8 * v798, v800 != v790)
                    ? (BOOL v801 = *(_DWORD *)(v800 + 4) == v799)
                    : (BOOL v801 = 0),
                      v801))
                {
                  v784 = (uint64_t *)(v598[10] + 8 * v798);
                }
                else
                {
                  v784 = (uint64_t *)v598[11];
                }
                md::LabelRenderer::initGlyphMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v912, *v784, v783);
              }
            }
          }
        }
        v783 += 40;
        ++v781;
      }
      while (v781 != (unint64_t *)v782);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  DWORD2(v918[1]) = 0;
  *(void *)&v918[1] = 0;
  long long v919 = 0uLL;
  *(void *)&long long v920 = 0;
  *((void *)&v920 + 1) = -1;
  uint64_t v921 = -1;
  uint64_t v922 = -1;
  int v923 = -1;
  uint64_t v925 = 0;
  uint64_t v924 = 0;
  uint64_t v605 = *(int8x8_t **)(v6 + 24);
  v606 = (void *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v605);
  uint64_t v607 = gdc::Registry::storage<md::IconMeshDescriptor>(v605);
  v608 = (void *)v607;
  uint64_t v609 = v607 + 32;
  unint64_t v611 = (unint64_t *)v606[7];
  v610 = (uint64_t *)v606[8];
  if (*(void *)(v607 + 64) - *(void *)(v607 + 56) >= (unint64_t)((char *)v610 - (char *)v611)) {
    v612 = v606 + 4;
  }
  else {
    v612 = (void *)(v607 + 32);
  }
  if (v606 + 4 == v612)
  {
    v912 = __p;
    v913 = &v906;
    if (v611 != (unint64_t *)v610)
    {
      v802 = (uint64_t *)v606[10];
      do
      {
        unint64_t v804 = *((unsigned int *)v611 + 1);
        uint64_t v805 = v608[4];
        unint64_t v806 = (v608[5] - v805) >> 3;
        if (v804 >> 7 < v806)
        {
          uint64_t v807 = *(void *)(v805 + 8 * (v804 >> 7));
          if (v807)
          {
            unint64_t v808 = *(unsigned __int16 *)(v807 + 2 * (v804 & 0x7F));
            uint64_t v810 = v608[7];
            uint64_t v809 = v608[8];
            unint64_t v811 = (v809 - v810) >> 3;
            if (v811 > v808)
            {
              uint64_t v812 = v810 + 8 * v808;
              if (v812 != v809 && *(_DWORD *)(v812 + 4) == v804)
              {
                unint64_t v814 = *v611;
                unint64_t v815 = *v611 >> 39;
                if (v815 < v806
                  && (uint64_t v816 = *(void *)(v805 + 8 * v815)) != 0
                  && (unint64_t v817 = *(unsigned __int16 *)(v816 + 2 * (HIDWORD(v814) & 0x7F)), v811 > v817)
                  && ((unint64_t v818 = HIDWORD(v814), v819 = v810 + 8 * v817, v819 != v809)
                    ? (BOOL v820 = *(_DWORD *)(v819 + 4) == v818)
                    : (BOOL v820 = 0),
                      v820))
                {
                  uint64_t v803 = v608[10] + 40 * v817;
                }
                else
                {
                  uint64_t v803 = v608[11];
                }
                md::LabelRenderer::initIconMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v912, *v802, v803);
              }
            }
          }
        }
        ++v802;
        ++v611;
      }
      while (v611 != (unint64_t *)v610);
    }
  }
  if ((void *)v609 == v612)
  {
    v912 = __p;
    v913 = &v906;
    v821 = (unint64_t *)v608[7];
    v822 = (uint64_t *)v608[8];
    if (v821 != (unint64_t *)v822)
    {
      uint64_t v823 = v608[10];
      do
      {
        unint64_t v825 = *((unsigned int *)v821 + 1);
        uint64_t v826 = v606[4];
        unint64_t v827 = (v606[5] - v826) >> 3;
        if (v825 >> 7 < v827)
        {
          uint64_t v828 = *(void *)(v826 + 8 * (v825 >> 7));
          if (v828)
          {
            unint64_t v829 = *(unsigned __int16 *)(v828 + 2 * (v825 & 0x7F));
            uint64_t v831 = v606[7];
            uint64_t v830 = v606[8];
            unint64_t v832 = (v830 - v831) >> 3;
            if (v832 > v829)
            {
              uint64_t v833 = v831 + 8 * v829;
              if (v833 != v830 && *(_DWORD *)(v833 + 4) == v825)
              {
                unint64_t v835 = *v821;
                unint64_t v836 = *v821 >> 39;
                if (v836 < v827
                  && (uint64_t v837 = *(void *)(v826 + 8 * v836)) != 0
                  && (unint64_t v838 = *(unsigned __int16 *)(v837 + 2 * (HIDWORD(v835) & 0x7F)), v832 > v838)
                  && ((unint64_t v839 = HIDWORD(v835), v840 = v831 + 8 * v838, v840 != v830)
                    ? (BOOL v841 = *(_DWORD *)(v840 + 4) == v839)
                    : (BOOL v841 = 0),
                      v841))
                {
                  v824 = (uint64_t *)(v606[10] + 8 * v838);
                }
                else
                {
                  v824 = (uint64_t *)v606[11];
                }
                md::LabelRenderer::initIconMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v912, *v824, v823);
              }
            }
          }
        }
        v823 += 40;
        ++v821;
      }
      while (v821 != (unint64_t *)v822);
    }
  }
  if (v896 && v898)
  {
    unint64_t v613 = *(void *)(v894 + 64);
    if (v613 <= v898) {
      unint64_t v613 = v898;
    }
    *(void *)(v894 + 56) = 0;
    *(void *)(v894 + 64) = v613;
  }
  if (v897 && v899)
  {
    unint64_t v614 = *(void *)(v895 + 64);
    if (v614 <= v899) {
      unint64_t v614 = v899;
    }
    *(void *)(v895 + 56) = 0;
    *(void *)(v895 + 64) = v614;
  }
  v615 = *(unsigned __int8 **)v6;
  if (!*(unsigned char *)(*(void *)v6 + 112))
  {
    v891 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
    if (v896 && v898)
    {
      unint64_t v892 = *(void *)(v894 + 64);
      if (v892 <= v898) {
        unint64_t v892 = v898;
      }
      *(void *)(v894 + 56) = 0;
      *(void *)(v894 + 64) = v892;
    }
    if (v897 && v899)
    {
      unint64_t v893 = *(void *)(v895 + 64);
      if (v893 <= v899) {
        unint64_t v893 = v899;
      }
      *(void *)(v895 + 56) = 0;
      *(void *)(v895 + 64) = v893;
    }
    _Unwind_Resume(v891);
  }
  v616 = *(void **)(v902 + 8);
  uint64_t v617 = v616[3];
  uint64_t v618 = v616[4];
  uint64_t v619 = v618 - v617;
  if (v618 == v617) {
    goto LABEL_666;
  }
  uint64_t v620 = 0;
  unint64_t v621 = v619 >> 3;
  while (1)
  {
    id v622 = *(unsigned __int8 **)(v617 + 8 * v620);
    if (*v622 == v615[110])
    {
      unint64_t v623 = *((void *)v622 + 1);
      uint64_t v624 = v616[15];
      if (v623 < (v616[16] - v624) >> 3) {
        break;
      }
    }
    if (++v620 >= v621) {
      goto LABEL_666;
    }
  }
  uint64_t v625 = *(void *)(v624 + 8 * v623);
  if (!v625) {
LABEL_666:
  }
    long long v626 = 0;
  else {
    long long v626 = *(ggl::CommandBuffer **)(*(void *)(v625 + 24) + 8 * v615[111]);
  }
  uint64_t v627 = *((void *)v626 + 9);
  if (*((void *)v626 + 10) != v627) {
    *((void *)v626 + 10) = v627;
  }
  uint64_t v628 = v626;
  if (v615[115])
  {
    id v629 = *(void **)(v902 + 8);
    uint64_t v630 = v629[3];
    uint64_t v631 = v629[4];
    uint64_t v632 = v631 - v630;
    if (v631 == v630) {
      goto LABEL_677;
    }
    uint64_t v633 = 0;
    unint64_t v634 = v632 >> 3;
    while (1)
    {
      long long v635 = *(unsigned __int8 **)(v630 + 8 * v633);
      if (*v635 == v615[113])
      {
        unint64_t v636 = *((void *)v635 + 1);
        uint64_t v637 = v629[15];
        if (v636 < (v629[16] - v637) >> 3) {
          break;
        }
      }
      if (++v633 >= v634) {
        goto LABEL_677;
      }
    }
    uint64_t v638 = *(void *)(v637 + 8 * v636);
    if (!v638) {
LABEL_677:
    }
      uint64_t v628 = 0;
    else {
      uint64_t v628 = *(ggl::CommandBuffer **)(*(void *)(v638 + 24) + 8 * v615[114]);
    }
    uint64_t v639 = *((void *)v628 + 9);
    if (*((void *)v628 + 10) != v639) {
      *((void *)v628 + 10) = v639;
    }
  }
  v640 = v626;
  if (v615[118])
  {
    uint64_t v641 = *(void **)(v902 + 8);
    uint64_t v642 = v641[3];
    uint64_t v643 = v641[4];
    uint64_t v644 = v643 - v642;
    if (v643 == v642) {
      goto LABEL_688;
    }
    uint64_t v645 = 0;
    unint64_t v646 = v644 >> 3;
    while (1)
    {
      int64x2_t v647 = *(unsigned __int8 **)(v642 + 8 * v645);
      if (*v647 == v615[116])
      {
        unint64_t v648 = *((void *)v647 + 1);
        uint64_t v649 = v641[15];
        if (v648 < (v641[16] - v649) >> 3) {
          break;
        }
      }
      if (++v645 >= v646) {
        goto LABEL_688;
      }
    }
    uint64_t v650 = *(void *)(v649 + 8 * v648);
    if (!v650) {
LABEL_688:
    }
      v640 = 0;
    else {
      v640 = *(ggl::CommandBuffer **)(*(void *)(v650 + 24) + 8 * v615[117]);
    }
    uint64_t v651 = *((void *)v640 + 9);
    if (*((void *)v640 + 10) != v651) {
      *((void *)v640 + 10) = v651;
    }
  }
  v652 = v626;
  if (v615[121])
  {
    v653 = *(void **)(v902 + 8);
    uint64_t v654 = v653[3];
    uint64_t v655 = v653[4];
    uint64_t v656 = v655 - v654;
    if (v655 == v654) {
      goto LABEL_699;
    }
    uint64_t v657 = 0;
    unint64_t v658 = v656 >> 3;
    while (1)
    {
      v659 = *(unsigned __int8 **)(v654 + 8 * v657);
      if (*v659 == v615[119])
      {
        unint64_t v660 = *((void *)v659 + 1);
        uint64_t v661 = v653[15];
        if (v660 < (v653[16] - v661) >> 3) {
          break;
        }
      }
      if (++v657 >= v658) {
        goto LABEL_699;
      }
    }
    uint64_t v662 = *(void *)(v661 + 8 * v660);
    if (!v662) {
LABEL_699:
    }
      v652 = 0;
    else {
      v652 = *(ggl::CommandBuffer **)(*(void *)(v662 + 24) + 8 * v615[120]);
    }
    uint64_t v663 = *((void *)v652 + 9);
    if (*((void *)v652 + 10) != v663) {
      *((void *)v652 + 10) = v663;
    }
  }
  v664 = v626;
  if (v615[124])
  {
    v665 = *(void **)(v902 + 8);
    uint64_t v666 = v665[3];
    uint64_t v667 = v665[4];
    uint64_t v668 = v667 - v666;
    if (v667 == v666) {
      goto LABEL_710;
    }
    uint64_t v669 = 0;
    unint64_t v670 = v668 >> 3;
    while (1)
    {
      v671 = *(unsigned __int8 **)(v666 + 8 * v669);
      if (*v671 == v615[122])
      {
        unint64_t v672 = *((void *)v671 + 1);
        uint64_t v673 = v665[15];
        if (v672 < (v665[16] - v673) >> 3) {
          break;
        }
      }
      if (++v669 >= v670) {
        goto LABEL_710;
      }
    }
    uint64_t v674 = *(void *)(v673 + 8 * v672);
    if (!v674) {
LABEL_710:
    }
      v664 = 0;
    else {
      v664 = *(ggl::CommandBuffer **)(*(void *)(v674 + 24) + 8 * v615[123]);
    }
    uint64_t v675 = *((void *)v664 + 9);
    if (*((void *)v664 + 10) != v675) {
      *((void *)v664 + 10) = v675;
    }
  }
  if (*(unsigned char *)(v900 + 16))
  {
    *(_OWORD *)__p = *(_OWORD *)v900;
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
  }
  if (__p[0] != *(void **)(v6 + 320) || __p[1] != *(void **)(v6 + 328))
  {
    int v842 = (int)__p[0];
    int v843 = HIDWORD(__p[0]);
    *(_DWORD *)(v6 + 320) = __p[0];
    *(_DWORD *)(v6 + 324) = v843;
    int v844 = (int)__p[1];
    int v845 = HIDWORD(__p[1]);
    *(_DWORD *)(v6 + 328) = __p[1];
    *(_DWORD *)(v6 + 332) = v845;
    v846 = *(void **)(v6 + 1824);
    v847 = *(void **)(v6 + 1832);
    v848 = *(void **)(v6 + 1840);
    v849 = (_DWORD *)v846[1];
    v849[15] = v842;
    v849[16] = v843;
    v849[17] = v844;
    v849[18] = v845;
    v850 = (_DWORD *)*v846;
    v850[15] = v842;
    v850[16] = v843;
    v850[17] = v844;
    v850[18] = v845;
    v851 = (_DWORD *)v846[3];
    v851[15] = v842;
    v851[16] = v843;
    v851[17] = v844;
    v851[18] = v845;
    v852 = (_DWORD *)v846[2];
    v852[15] = v842;
    v852[16] = v843;
    v852[17] = v844;
    v852[18] = v845;
    v853 = (_DWORD *)v847[1];
    v853[15] = v842;
    v853[16] = v843;
    v853[17] = v844;
    v853[18] = v845;
    v854 = (_DWORD *)*v847;
    v854[15] = v842;
    v854[16] = v843;
    v854[17] = v844;
    v854[18] = v845;
    v855 = (_DWORD *)v847[3];
    v855[15] = v842;
    v855[16] = v843;
    v855[17] = v844;
    v855[18] = v845;
    v856 = (_DWORD *)v847[2];
    v856[15] = v842;
    v856[16] = v843;
    v856[17] = v844;
    v856[18] = v845;
    v857 = (_DWORD *)v848[1];
    v857[15] = v842;
    v857[16] = v843;
    v857[17] = v844;
    v857[18] = v845;
    v858 = (_DWORD *)*v848;
    v858[15] = v842;
    v858[16] = v843;
    v858[17] = v844;
    v858[18] = v845;
    v859 = (_DWORD *)v848[3];
    v859[15] = v842;
    v859[16] = v843;
    v859[17] = v844;
    v859[18] = v845;
    v860 = (_DWORD *)v848[2];
    v860[15] = v842;
    v860[16] = v843;
    v860[17] = v844;
    v860[18] = v845;
  }
  __p[0] = v903;
  LOBYTE(__p[1]) = a3;
  WORD4(v917) = 0;
  *(void *)&long long v917 = v626;
  md::LabelRenderer::createRenderItemsForPass(v6, 0, (uint64_t)__p);
  *(void *)&long long v917 = v628;
  md::LabelRenderer::createRenderItemsForPass(v6, 1u, (uint64_t)__p);
  *(void *)&long long v917 = v640;
  md::LabelRenderer::createRenderItemsForPass(v6, 2u, (uint64_t)__p);
  *(void *)&long long v917 = v652;
  md::LabelRenderer::createRenderItemsForPass(v6, 3u, (uint64_t)__p);
  *(void *)&long long v917 = v664;
  md::LabelRenderer::createRenderItemsForPass(v6, 4u, (uint64_t)__p);
  v861 = *(const ggl::Texture2DLoadItem **)(v6 + 1776);
  v862 = *(const ggl::Texture2DLoadItem **)(v6 + 1784);
  if (v861 != v862)
  {
    do
    {
      ggl::CommandBuffer::pushLoadItem(v626, v861);
      v861 = (const ggl::Texture2DLoadItem *)((char *)v861 + 80);
    }
    while (v861 != v862);
    v863 = *(void **)(v6 + 1784);
    v864 = *(void **)(v6 + 1776);
    if (v863 != v864)
    {
      v865 = v863 - 4;
      v866 = v863 - 4;
      do
      {
        v868 = (void *)v866[3];
        if (v866 == v868)
        {
          (*(void (**)(void *))(*v866 + 32))(v866);
          if (!*((unsigned char *)v866 - 28)) {
            goto LABEL_913;
          }
        }
        else
        {
          if (v868) {
            (*(void (**)(void *))(*v868 + 40))(v868);
          }
          if (!*((unsigned char *)v866 - 28)) {
            goto LABEL_913;
          }
        }
        *((unsigned char *)v866 - 28) = 0;
LABEL_913:
        if (*((unsigned char *)v866 - 32)) {
          *((unsigned char *)v866 - 32) = 0;
        }
        v867 = v866 - 6;
        v866 -= 10;
        v865 -= 10;
      }
      while (v867 != v864);
    }
    *(void *)(v6 + 1784) = v864;
  }
  *(void *)(v6 + 104) = *(void *)(v6 + 96);
  *(void *)(v6 + 136) = *(void *)(v6 + 128);
  *(void *)(v6 + 168) = *(void *)(v6 + 160);
  *(void *)(v6 + 200) = *(void *)(v6 + 192);
  *(void *)(v6 + 232) = *(void *)(v6 + 224);
  uint64_t result = *(gdc::Registry **)(v6 + 24);
  *(void *)(v6 + 24) = 0;
  if (result)
  {
    gdc::Registry::~Registry(result);
    return (gdc::Registry *)MEMORY[0x1A6239270]();
  }
  return result;
}

float md::LabelRenderer::initIconMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    *(float *)&uint64_t v7 = std::__function::__func<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(v36, v37, v38);
    return *(float *)&v7;
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 48))(v4, a2, *a1);
  uint64_t v8 = a1[1];
  unsigned int v9 = *(unsigned __int8 *)(a2 + 30);
  if (*(unsigned char *)(a2 + 30))
  {
    int v10 = *((_DWORD *)v8 + 4);
    int v11 = *((_DWORD *)v8 + 5);
    unsigned int v12 = 256 - v10;
    if (v12 >= v9) {
      unsigned int v12 = 0;
    }
    __int16 v13 = v10 + v12;
    *((_DWORD *)v8 + 4) = v10 + v12 + v9;
    *((_DWORD *)v8 + 5) = v11 + v9;
    uint64_t v14 = v8[3] + 16 * (v10 + v12);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 31);
    if (*(unsigned char *)(a2 + 31))
    {
LABEL_6:
      int v16 = *((_DWORD *)v8 + 8);
      int v17 = *((_DWORD *)v8 + 9);
      unsigned int v18 = 256 - v16;
      if (v18 >= v15) {
        unsigned int v18 = 0;
      }
      int v19 = v16 + v18;
      *((_DWORD *)v8 + 8) = v16 + v18 + v15;
      *((_DWORD *)v8 + 9) = v17 + v15;
      long long v20 = (_DWORD *)(v8[5] + 4 * (v16 + v18));
      if (*(unsigned char *)a3) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v13 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = *(unsigned __int8 *)(a2 + 31);
    if (*(unsigned char *)(a2 + 31)) {
      goto LABEL_6;
    }
  }
  int v19 = 0;
  long long v20 = 0;
  if (*(unsigned char *)a3)
  {
LABEL_9:
    gm::operator*<double,4,4,4>(v40[0].f64, (double *)(v8[6] + 736), (double *)(*a1)[8]);
    float32x4_t v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40[2]), v40[3]);
    *(float32x4_t *)uint64_t v14 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40[0]), v40[1]);
    *(float32x4_t *)(v14 + 16) = v21;
    LODWORD(v7) = LODWORD(v41.f64[0]);
    float32x4_t v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40[6]), v41);
    *(float32x4_t *)(v14 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40[4]), v40[5]);
    *(float32x4_t *)(v14 + 48) = v22;
    v14 += 64;
  }
LABEL_10:
  if (*(unsigned char *)(a3 + 1))
  {
    uint64_t v23 = *a1;
    *long long v20 = *((_DWORD *)*a1 + 22);
    v20[1] = v23[23];
    v20[2] = v23[24];
    int v24 = *(unsigned __int8 *)(a3 + 2);
    if (*(unsigned char *)(a3 + 2))
    {
      v20[3] = v23[25];
      v20[4] = v23[26];
      v20[5] = v23[27];
      int v24 = 3;
    }
    *(_DWORD *)uint64_t v14 = v23[18];
    *(_DWORD *)(v14 + 4) = v23[19];
    *(_DWORD *)(v14 + 8) = v23[20];
    int64x2_t v25 = v23 + 21;
  }
  else
  {
    int v24 = *(unsigned __int8 *)(a3 + 3);
    uint64_t v26 = (uint64_t)*a1;
    if (!*(unsigned char *)(a3 + 3)) {
      goto LABEL_20;
    }
    int v24 = 0;
    *long long v20 = *(_DWORD *)(v26 + 112);
    *(_DWORD *)uint64_t v14 = *(_DWORD *)(v26 + 116);
    *(_DWORD *)(v14 + 4) = *(_DWORD *)(v26 + 120);
    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v26 + 124);
    int64x2_t v25 = (_DWORD *)(v26 + 128);
  }
  LODWORD(v7) = *v25;
  *(_DWORD *)(v14 + 12) = *v25;
  uint64_t v26 = (uint64_t)*a1;
LABEL_20:
  if (*(unsigned char *)(a2 + 29))
  {
    unint64_t v27 = 0;
    int v28 = (int)fminf(fmaxf(*(float *)(v26 + 48) * 255.0, 0.0), 255.0);
    int v29 = (int)fminf(fmaxf(*(float *)(v26 + 52) * 100.0, 0.0), 255.0);
    int v30 = (int)fminf(fmaxf(*(float *)(v26 + 56) * 255.0, 0.0), 255.0);
    int v31 = (int)fminf(fmaxf(*(float *)(v26 + 32) * 65535.0, 0.0), 65535.0);
    int v32 = (int)fminf(fmaxf(*(float *)(v26 + 36) * 65535.0, 0.0), 65535.0);
    int v33 = (int)fminf(fmaxf(*(float *)(v26 + 40) * 65535.0, 0.0), 65535.0);
    int v34 = (int)fminf(fmaxf(*(float *)(v26 + 44) * 65535.0, 0.0), 65535.0);
    unint64_t v35 = *a1[1] + ((unint64_t)*(unsigned __int16 *)(a2 + 38) << 7);
    do
    {
      *(void *)unint64_t v35 = *(void *)v26;
      *(_DWORD *)(v35 + 8) = 0;
      *(_WORD *)(v35 + 16) = v31;
      *(_WORD *)(v35 + 18) = v32;
      *(unsigned char *)(v35 + 20) = v28;
      *(unsigned char *)(v35 + 21) = v29;
      *(unsigned char *)(v35 + 22) = v30;
      *(unsigned char *)(v35 + 23) = 0;
      *(_WORD *)(v35 + 24) = v13;
      *(_WORD *)(v35 + 26) = v19;
      *(void *)(v35 + 32) = *(void *)(v26 + 8);
      *(_DWORD *)(v35 + 40) = 0;
      *(_WORD *)(v35 + 48) = v33;
      *(_WORD *)(v35 + 50) = v32;
      *(unsigned char *)(v35 + 52) = v28;
      *(unsigned char *)(v35 + 53) = v29;
      *(unsigned char *)(v35 + 54) = v30;
      *(unsigned char *)(v35 + 55) = 1;
      *(_WORD *)(v35 + 56) = v13;
      *(_WORD *)(v35 + 58) = v19;
      *(void *)(v35 + 64) = *(void *)(v26 + 16);
      *(_DWORD *)(v35 + 72) = 0;
      *(_WORD *)(v35 + 80) = v33;
      *(_WORD *)(v35 + 82) = v34;
      *(unsigned char *)(v35 + 84) = v28;
      *(unsigned char *)(v35 + 85) = v29;
      *(unsigned char *)(v35 + 86) = v30;
      *(unsigned char *)(v35 + 87) = 2;
      *(_WORD *)(v35 + 88) = v13;
      *(_WORD *)(v35 + 90) = v19;
      uint64_t v7 = *(void *)(v26 + 24);
      *(void *)(v35 + 96) = v7;
      *(_DWORD *)(v35 + 104) = 0;
      *(_WORD *)(v35 + 112) = v31;
      *(_WORD *)(v35 + 114) = v34;
      *(unsigned char *)(v35 + 116) = v28;
      *(unsigned char *)(v35 + 117) = v29;
      *(unsigned char *)(v35 + 118) = v30;
      *(unsigned char *)(v35 + 119) = 3;
      *(_WORD *)(v35 + 120) = v13;
      *(_WORD *)(v35 + 122) = v19;
      v19 += v24;
      ++v27;
      v35 += 128;
    }
    while (v27 < *(unsigned __int8 *)(a2 + 29));
  }
  return *(float *)&v7;
}

float std::__function::__func<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 565)) {
    *(void *)(a3 + 64) = (*(uint64_t (**)(void))(*(void *)v4 + 144))(*(void *)(a1 + 8));
  }
  float v5 = *(float *)(v4 + 608) * *(float *)(v4 + 596);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v4 + 552);
  *(float *)(a3 + 52) = v5;
  *(_DWORD *)(a3 + 56) = *(_DWORD *)(v4 + 604);
  *(_DWORD *)a3 = *(_DWORD *)(v4 + 696);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v4 + 700);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v4 + 704);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(v4 + 708);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 712);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v4 + 716);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v4 + 720);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(v4 + 724);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 928))(v4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)v6;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 8);
  float result = *(float *)(v6 + 12);
  *(float *)(a3 + 44) = result;
  return result;
}

uint64_t md::IconLabelPart::textureRect(md::IconLabelPart *this)
{
  uint64_t v1 = *((void *)this + 80);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(v1 + 143));
  if (v2) {
    id v3 = *(id *)(v1 + 16);
  }
  else {
    id v3 = 0;
  }
  uint64_t v4 = [v3 textureCoordinates];

  return v4;
}

void sub_1A18AC340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LabelRenderer::initGlyphMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::LabelRenderer::createRenderItemsForPass();
    return;
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 48))(v4, a2, *a1);
  uint64_t v7 = a1[1];
  unsigned int v8 = *(unsigned __int8 *)(a2 + 30);
  if (*(unsigned char *)(a2 + 30))
  {
    int v9 = *(_DWORD *)(v7 + 16);
    int v10 = *(_DWORD *)(v7 + 20);
    unsigned int v11 = 256 - v9;
    if (v11 >= v8) {
      unsigned int v11 = 0;
    }
    __int16 v12 = v9 + v11;
    *(_DWORD *)(v7 + 16) = v9 + v11 + v8;
    *(_DWORD *)(v7 + 20) = v10 + v8;
    uint64_t v13 = *(void *)(v7 + 24) + 16 * (v9 + v11);
    unsigned int v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(unsigned char *)(a2 + 31)) {
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v12 = 0;
    uint64_t v13 = 0;
    unsigned int v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(unsigned char *)(a2 + 31))
    {
LABEL_6:
      int v15 = *(_DWORD *)(v7 + 32);
      int v16 = *(_DWORD *)(v7 + 36);
      unsigned int v17 = 256 - v15;
      if (v17 >= v14) {
        unsigned int v17 = 0;
      }
      __int16 v18 = v15 + v17;
      *(_DWORD *)(v7 + 32) = v15 + v17 + v14;
      *(_DWORD *)(v7 + 36) = v16 + v14;
      uint64_t v19 = *(void *)(v7 + 40) + 4 * (v15 + v17);
      goto LABEL_11;
    }
  }
  __int16 v18 = 0;
  uint64_t v19 = 0;
LABEL_11:
  uint64_t v20 = *a1;
  if (*(unsigned char *)a3)
  {
    uint64_t v85 = v19;
    uint64_t v21 = a1[2];
    float32x4_t v22 = *(double **)(v20 + 64);
    gm::operator*<double,4,4,4>(v104[0].f64, (double *)(v21 + 736), v22);
    float32x4_t v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[2]), v104[3]);
    *(float32x4_t *)uint64_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[0]), v104[1]);
    *(float32x4_t *)(v13 + 16) = v23;
    float32x4_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[6]), v104[7]);
    *(float32x4_t *)(v13 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[4]), v104[5]);
    *(float32x4_t *)(v13 + 48) = v24;
    if (*(unsigned char *)(a3 + 1))
    {
      gm::operator*<double,4,4,4>(&v88, (double *)(v21 + 480), v22);
      double v25 = v88;
      double v26 = v89;
      float v27 = v88;
      float v28 = v89;
      double v29 = v90;
      double v30 = v91;
      float v31 = v90;
      float v32 = v91;
      double v33 = v92;
      double v34 = v93;
      float v35 = v92;
      float v36 = v93;
      double v37 = v94;
      double v38 = v95;
      float v39 = v94;
      float v40 = v95;
      double v41 = v96;
      double v42 = v97;
      float v43 = v96;
      float v44 = v97;
      double v45 = v98;
      double v46 = v99;
      float v47 = v98;
      float v48 = v99;
      double v49 = v100;
      double v50 = v101;
      float v51 = v100;
      float v52 = v101;
      double v53 = v102;
      double v54 = v103;
      float v55 = v102;
      float v56 = v103;
      *(float *)(v13 + 64) = v27;
      *(float *)(v13 + 68) = v28;
      *(float *)(v13 + 72) = v31;
      *(float *)(v13 + 76) = v32;
      *(float *)(v13 + 80) = v35;
      *(float *)(v13 + 84) = v36;
      *(float *)(v13 + 88) = v39;
      *(float *)(v13 + 92) = v40;
      *(float *)(v13 + 96) = v43;
      *(float *)(v13 + 100) = v44;
      *(float *)(v13 + 104) = v47;
      *(float *)(v13 + 108) = v48;
      *(float *)(v13 + 112) = v51;
      *(float *)(v13 + 116) = v52;
      *(float *)(v13 + 120) = v55;
      *(float *)(v13 + 124) = v56;
      v86[0] = v25;
      v86[1] = v33;
      v86[2] = v41;
      v86[3] = v49;
      v86[4] = v26;
      v86[5] = v34;
      v86[6] = v42;
      v86[7] = v50;
      v86[8] = v29;
      v86[9] = v37;
      v86[10] = v45;
      v86[11] = v53;
      v86[12] = v30;
      v86[13] = v38;
      v86[14] = v46;
      v86[15] = v54;
      gm::Matrix<double,4,4>::inverted<int,void>(v87[0].f64, v86);
      float32x4_t v57 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[2]), v87[3]);
      *(float32x4_t *)(v13 + 128) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[0]), v87[1]);
      *(float32x4_t *)(v13 + 144) = v57;
      float32x4_t v58 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[6]), v87[7]);
      *(float32x4_t *)(v13 + 160) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[4]), v87[5]);
      *(float32x4_t *)(v13 + 176) = v58;
      double v59 = (float *)a1[3];
      float v60 = fmaxf(v59[2] / *v59, -1.0);
      float v61 = (float)(v60 * 127.5) + 127.5;
      if (*v59 == 0.0) {
        LOBYTE(v62) = 0;
      }
      else {
        int v62 = (int)fminf(fmaxf((float)(v59[3] * 255.0) / *v59, 0.0), 255.0);
      }
      if (v60 > 1.0) {
        float v61 = 255.0;
      }
      *(unsigned char *)uint64_t v85 = v62;
      *(unsigned char *)(v85 + 1) = (int)fminf(fmaxf(v61, 0.0), 255.0);
      *(unsigned char *)(v85 + 2) = (int)fminf(fmaxf(*(float *)(a1[3] + 4) * 255.0, 0.0), 255.0);
      *(_DWORD *)(v85 + 4) = *(_DWORD *)(a1[3] + 16);
      *(_DWORD *)(v85 + 8) = *(_DWORD *)(a1[3] + 20);
      uint64_t v20 = *a1;
      uint64_t v7 = a1[1];
    }
  }
  if (*(_WORD *)(a2 + 32))
  {
    unint64_t v63 = 0;
    float32x4_t v64 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    int8x8_t v65 = vuzp1_s8((int8x8_t)vmovn_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v20 + 28), v64))), (int8x8_t)vmovn_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v20 + 44), v64))));
    uint64_t v66 = *(void *)(v7 + 8) + 160 * *(unsigned __int16 *)(a2 + 38);
    uint64_t v67 = 88;
    do
    {
      uint64_t v68 = (float *)(*(void *)*a1 + v67);
      _S4 = *(_DWORD *)(*a1 + 24);
      __asm { FCVT            H4, S4 }
      _S5 = *v68;
      __asm { FCVT            H5, S5 }
      int v75 = (int)fminf(fmaxf(*(v68 - 10) * 65535.0, 0.0), 65535.0);
      int v76 = (int)fminf(fmaxf(*(v68 - 9) * 65535.0, 0.0), 65535.0);
      int v77 = (int)fminf(fmaxf(*(v68 - 8) * 65535.0, 0.0), 65535.0);
      int v78 = (int)fminf(fmaxf(*(v68 - 7) * 65535.0, 0.0), 65535.0);
      *(float *)uint64_t v66 = *(v68 - 22);
      *(float *)(v66 + 4) = *(v68 - 21);
      *(float *)(v66 + 8) = *(v68 - 20);
      *(_WORD *)(v66 + 12) = v75;
      *(_WORD *)(v66 + 14) = v76;
      *(_WORD *)(v66 + 16) = _S4;
      *(_WORD *)(v66 + 18) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 20) = v65;
      *(_WORD *)(v66 + 28) = v12;
      *(_WORD *)(v66 + 30) = v18;
      float v79 = *(v68 - 4) + 1.0;
      _S6 = (float)((float)(*(v68 - 6) * 0.28126) / v79) + 0.5;
      _S7 = (float)((float)(*(v68 - 5) * 0.28126) / v79) + 0.5;
      __asm
      {
        FCVT            H6, S6
        FCVT            H7, S7
      }
      *(_WORD *)(v66 + 32) = LOWORD(_S6);
      *(_WORD *)(v66 + 34) = LOWORD(_S7);
      float v82 = *(v68 - 1) + 1.0;
      _S16 = (float)((float)(*(v68 - 3) * 0.28126) / v82) + 0.5;
      _S17 = (float)((float)(*(v68 - 2) * 0.28126) / v82) + 0.5;
      __asm
      {
        FCVT            H16, S16
        FCVT            H17, S17
      }
      *(_WORD *)(v66 + 36) = LOWORD(_S16);
      *(_WORD *)(v66 + 38) = LOWORD(_S17);
      *(float *)(v66 + 40) = *(v68 - 19);
      *(float *)(v66 + 44) = *(v68 - 18);
      *(float *)(v66 + 48) = *(v68 - 17);
      *(_WORD *)(v66 + 52) = v77;
      *(_WORD *)(v66 + 54) = v76;
      *(_WORD *)(v66 + 56) = _S4;
      *(_WORD *)(v66 + 58) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 60) = v65;
      *(_WORD *)(v66 + 68) = v12;
      *(_WORD *)(v66 + 70) = v18;
      *(_WORD *)(v66 + 72) = LOWORD(_S6);
      *(_WORD *)(v66 + 74) = LOWORD(_S7);
      *(_WORD *)(v66 + 76) = LOWORD(_S16);
      *(_WORD *)(v66 + 78) = LOWORD(_S17);
      *(float *)(v66 + 80) = *(v68 - 16);
      *(float *)(v66 + 84) = *(v68 - 15);
      *(float *)(v66 + 88) = *(v68 - 14);
      *(_WORD *)(v66 + 92) = v77;
      *(_WORD *)(v66 + 94) = v78;
      *(_WORD *)(v66 + 96) = _S4;
      *(_WORD *)(v66 + 98) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 100) = v65;
      *(_WORD *)(v66 + 108) = v12;
      *(_WORD *)(v66 + 110) = v18;
      *(_WORD *)(v66 + 112) = LOWORD(_S6);
      *(_WORD *)(v66 + 114) = LOWORD(_S7);
      *(_WORD *)(v66 + 116) = LOWORD(_S16);
      *(_WORD *)(v66 + 118) = LOWORD(_S17);
      *(float *)(v66 + 120) = *(v68 - 13);
      *(float *)(v66 + 124) = *(v68 - 12);
      *(float *)(v66 + 128) = *(v68 - 11);
      *(_WORD *)(v66 + 132) = v75;
      *(_WORD *)(v66 + 134) = v78;
      *(_WORD *)(v66 + 136) = _S4;
      *(_WORD *)(v66 + 138) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 140) = v65;
      *(_WORD *)(v66 + 148) = v12;
      *(_WORD *)(v66 + 150) = v18;
      *(_WORD *)(v66 + 152) = LOWORD(_S6);
      *(_WORD *)(v66 + 154) = LOWORD(_S7);
      *(_WORD *)(v66 + 156) = LOWORD(_S16);
      *(_WORD *)(v66 + 158) = LOWORD(_S17);
      ++v63;
      v67 += 92;
      v66 += 160;
    }
    while (v63 < *(unsigned __int16 *)(a2 + 32));
  }
}

uint64_t md::LabelRenderer::createRenderItemsForPass(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result + 32 * a2;
  uint64_t v6 = *(uint64_t **)(v3 + 104);
  float v5 = (uint64_t **)(v3 + 104);
  uint64_t v4 = v6;
  uint64_t v7 = *(v5 - 1);
  if (v6 != v7)
  {
    uint64_t v9 = result;
    int v10 = (uint64_t *)(result + 1832);
    unsigned int v11 = (uint64_t *)(result + 1824);
    __int16 v12 = *(v5 - 1);
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(*v7 + 1);
      if (v12 != v4)
      {
        unint64_t v14 = v4 - v12;
        do
        {
          unint64_t v15 = v14 >> 1;
          int v16 = &v7[v14 >> 1];
          uint64_t v18 = *v16;
          unsigned int v17 = v16 + 1;
          v14 += ~(v14 >> 1);
          if (*(unsigned __int8 *)(v18 + 1) < v13) {
            unint64_t v14 = v15;
          }
          else {
            uint64_t v7 = v17;
          }
        }
        while (v14);
      }
      uint64_t v4 = v11;
      switch(v13)
      {
        case 0u:
          goto LABEL_5;
        case 1u:
          goto LABEL_4;
        case 2u:
        case 3u:
          *(unsigned char *)(a3 + 24) = 1;
          md::LabelRenderer::renderLayers(v9, v12, v7, a3, *(void **)(v9 + 1840));
          *(unsigned char *)(a3 + 24) = 0;
          goto LABEL_4;
        case 4u:
          *(unsigned char *)(a3 + 25) = 1;
          md::LabelRenderer::renderLayers(v9, v12, v7, a3, *(void **)(v9 + 1840));
          *(unsigned char *)(a3 + 25) = 0;
LABEL_4:
          uint64_t v4 = v10;
LABEL_5:
          float result = md::LabelRenderer::renderLayers(v9, v12, v7, a3, (void *)*v4);
          uint64_t v4 = *v5;
          break;
        default:
          break;
      }
      __int16 v12 = v7;
    }
    while (v4 != v7);
  }
  return result;
}

void md::LabelRenderer::initShadowhMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *((void *)a3 + 4);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::operator()(v31, v32, v33);
    return;
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 48))(v4, a2, *a1);
  uint64_t v7 = a1[1];
  unsigned int v8 = *(unsigned __int8 *)(a2 + 30);
  if (*(unsigned char *)(a2 + 30))
  {
    int v9 = *(_DWORD *)(v7 + 16);
    int v10 = *(_DWORD *)(v7 + 20);
    unsigned int v11 = 256 - v9;
    if (v11 >= v8) {
      unsigned int v11 = 0;
    }
    __int16 v12 = v9 + v11;
    *(_DWORD *)(v7 + 16) = v9 + v11 + v8;
    *(_DWORD *)(v7 + 20) = v10 + v8;
    uint64_t v13 = *(void *)(v7 + 24) + 16 * (v9 + v11);
    unsigned int v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(unsigned char *)(a2 + 31)) {
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v12 = 0;
    uint64_t v13 = 0;
    unsigned int v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(unsigned char *)(a2 + 31))
    {
LABEL_6:
      int v15 = *(_DWORD *)(v7 + 32);
      int v16 = *(_DWORD *)(v7 + 36);
      unsigned int v17 = 256 - v15;
      if (v17 >= v14) {
        unsigned int v17 = 0;
      }
      __int16 v18 = v15 + v17;
      *(_DWORD *)(v7 + 32) = v15 + v17 + v14;
      *(_DWORD *)(v7 + 36) = v16 + v14;
      uint64_t v19 = (_DWORD *)(*(void *)(v7 + 40) + 4 * (v15 + v17));
      goto LABEL_11;
    }
  }
  __int16 v18 = 0;
  uint64_t v19 = 0;
LABEL_11:
  int v20 = *a3;
  uint64_t v21 = *a1;
  if (v20)
  {
    gm::operator*<double,4,4,4>(v34[0].f64, (double *)(a1[2] + 736), *(double **)(v21 + 40));
    float32x4_t v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[2]), v34[3]);
    *(float32x4_t *)uint64_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[0]), v34[1]);
    *(float32x4_t *)(v13 + 16) = v22;
    float32x4_t v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[6]), v34[7]);
    *(float32x4_t *)(v13 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[4]), v34[5]);
    *(float32x4_t *)(v13 + 48) = v23;
    v13 += 64;
  }
  *(_DWORD *)uint64_t v13 = *(_DWORD *)(v21 + 28);
  *uint64_t v19 = *(_DWORD *)(v21 + 32);
  if (*(_WORD *)(a2 + 32))
  {
    unint64_t v24 = 0;
    unint64_t v25 = *(void *)a1[1] + ((unint64_t)*(unsigned __int16 *)(a2 + 38) << 7);
    uint64_t v26 = 52;
    int v27 = (int)fminf(fmaxf(*(float *)(*a1 + 24) * 255.0, 0.0), 255.0);
    do
    {
      float v28 = (float *)(*(void *)*a1 + v26);
      int v29 = (int)fminf(fmaxf(*(v28 - 1) * 32.0, 0.0), 65535.0);
      int v30 = (int)fminf(fmaxf(*v28 * 32.0, 0.0), 65535.0);
      *(float *)unint64_t v25 = *(v28 - 13);
      *(float *)(v25 + 4) = *(v28 - 12);
      *(float *)(v25 + 8) = *(v28 - 11);
      *(_WORD *)(v25 + 16) = v29;
      *(_WORD *)(v25 + 18) = v30;
      *(unsigned char *)(v25 + 20) = v27;
      *(_WORD *)(v25 + 21) = 100;
      *(unsigned char *)(v25 + 23) = 0;
      *(_WORD *)(v25 + 24) = v12;
      *(_WORD *)(v25 + 26) = v18;
      *(float *)(v25 + 32) = *(v28 - 10);
      *(float *)(v25 + 36) = *(v28 - 9);
      *(float *)(v25 + 40) = *(v28 - 8);
      *(_WORD *)(v25 + 48) = v29;
      *(_WORD *)(v25 + 50) = v30;
      *(unsigned char *)(v25 + 52) = v27;
      *(_WORD *)(v25 + 53) = 100;
      *(unsigned char *)(v25 + 55) = 1;
      *(_WORD *)(v25 + 56) = v12;
      *(_WORD *)(v25 + 58) = v18;
      *(float *)(v25 + 64) = *(v28 - 7);
      *(float *)(v25 + 68) = *(v28 - 6);
      *(float *)(v25 + 72) = *(v28 - 5);
      *(_WORD *)(v25 + 80) = v29;
      *(_WORD *)(v25 + 82) = v30;
      *(unsigned char *)(v25 + 84) = v27;
      *(_WORD *)(v25 + 85) = 100;
      *(unsigned char *)(v25 + 87) = 2;
      *(_WORD *)(v25 + 88) = v12;
      *(_WORD *)(v25 + 90) = v18;
      *(float *)(v25 + 96) = *(v28 - 4);
      *(float *)(v25 + 100) = *(v28 - 3);
      *(float *)(v25 + 104) = *(v28 - 2);
      *(_WORD *)(v25 + 112) = v29;
      *(_WORD *)(v25 + 114) = v30;
      *(unsigned char *)(v25 + 116) = v27;
      *(_WORD *)(v25 + 117) = 100;
      *(unsigned char *)(v25 + 119) = 3;
      *(_WORD *)(v25 + 120) = v12;
      *(_WORD *)(v25 + 122) = v18;
      ++v24;
      v26 += 56;
      v25 += 128;
    }
    while (v24 < *(unsigned __int16 *)(a2 + 32));
  }
}

void std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 565)) {
    *(void *)(a3 + 40) = (*(uint64_t (**)(void))(*(void *)v5 + 144))(*(void *)(a1 + 8));
  }
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v5 + 552);
  *(unsigned char *)(a3 + 32) = *(unsigned char *)(v5 + 826);
  *(unsigned char *)(a3 + 33) = *(unsigned char *)(v5 + 827);
  *(unsigned char *)(a3 + 34) = *(unsigned char *)(v5 + 828);
  *(unsigned char *)(a3 + 35) = *(unsigned char *)(v5 + 829);
  unint64_t v6 = *(unsigned __int16 *)(a2 + 32);
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  if (v6 <= v7)
  {
    if (v6 < v7) {
      *(void *)(a3 + 8) = *(void *)a3 + 56 * *(unsigned __int16 *)(a2 + 32);
    }
  }
  else
  {
    std::vector<md::ShadowMeshQuad>::__append((char **)a3, v6 - v7);
  }
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(v5 + 788);
  uint64_t v8 = *(void *)(v5 + 472);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v5 + 488);
    if (v9)
    {
      int v10 = *(unsigned __int8 *)(v5 + 565);
      uint64_t v11 = *(void *)a3 + 28;
      __int16 v12 = (float *)(v8 + 8);
      do
      {
        float v22 = *v12;
        float v21 = v12[1];
        float v24 = *(v12 - 2);
        float v23 = *(v12 - 1);
        if (*v12 >= v24 && v21 >= v23)
        {
          float v26 = (float)(v21 - v23) * 0.1;
          float v27 = *(float *)(v5 + 788);
          float v28 = v26 - v27;
          float v29 = fminf((float)(v22 - v24) * 0.5, v26) - v27;
          float v24 = v29 + v24;
          float v22 = v22 - v29;
          float v23 = v28 + v23;
          float v21 = v21 - v28;
        }
        float v30 = *(float *)(v5 + 792);
        float v31 = *(float *)(v5 + 796);
        if (v10)
        {
          float v13 = v24 + v30;
          float v14 = v23 - v31;
          float v15 = v22 + v30;
          float v16 = v21 - v31;
          float v17 = v16;
          float v18 = v15;
          float v19 = v14;
          float v20 = v13;
        }
        else
        {
          float v32 = *(float *)(*(void *)(v5 + 32) + 68);
          float v33 = 1.1;
          if (!*(unsigned char *)(v5 + 830)) {
            float v33 = 1.0;
          }
          float v34 = (float)(*(float *)(v5 + 912) * v33) * v32;
          float v35 = v21;
          float v36 = v24;
          float v37 = v22;
          float v38 = v23;
          if (fabsf(v34 + -1.0) > 0.000001)
          {
            float v36 = v24 * v34;
            float v38 = v23 * v34;
            float v37 = v22 * v34;
            float v35 = v21 * v34;
          }
          if (*(unsigned char *)(v5 + 508))
          {
            float v39 = *(float *)(v5 + 328);
            float v40 = *(float *)(v5 + 332);
            float v41 = v39 * v36;
            float v42 = v40 * v36;
            float v43 = v38 * v39;
            float v44 = v38 * v40;
            float v45 = v41 - v44;
            float v46 = v43 + v42;
            float v47 = v40 * v37;
            float v48 = (float)(v39 * v37) - v44;
            float v38 = v43 + (float)(v40 * v37);
            float v49 = v35 * v39;
            float v50 = v35 * v40;
            float v37 = (float)(v39 * v37) - v50;
            float v51 = v49 + v47;
            float v36 = v41 - v50;
            float v35 = v49 + v42;
          }
          else
          {
            float v51 = v35;
            float v48 = v37;
            float v46 = v38;
            float v45 = v36;
          }
          float v52 = *(float *)(v5 + 832) + (float)((float)(*(float *)(v5 + 544) + v30) * v32);
          float v53 = *(float *)(v5 + 836) + (float)((float)(*(float *)(v5 + 548) - v31) * v32);
          float v20 = v52 + v45;
          float v19 = v53 + v46;
          float v18 = v52 + v48;
          float v14 = v53 + v38;
          float v15 = v52 + v37;
          float v17 = v53 + v51;
          float v13 = v52 + v36;
          float v16 = v53 + v35;
        }
        *(float *)(v11 - 28) = v20;
        *(float *)(v11 - 24) = v19;
        *(_DWORD *)(v11 - 20) = 0;
        *(float *)(v11 - 16) = v18;
        *(float *)(v11 - 12) = v14;
        *(_DWORD *)(v11 - 8) = 0;
        *(float *)(v11 - 4) = v15;
        *(float *)uint64_t v11 = v17;
        *(_DWORD *)(v11 + 4) = 0;
        *(float *)(v11 + 8) = v13;
        *(float *)(v11 + 12) = v16;
        *(_DWORD *)(v11 + 16) = 0;
        *(float *)(v11 + 20) = (float)(v22 - v24) * 0.5;
        *(float *)(v11 + 24) = (float)(v21 - v23) * 0.5;
        v11 += 56;
        v12 += 4;
        --v9;
      }
      while (v9);
    }
  }
}

void gdc::Registry::~Registry(gdc::Registry *this)
{
  if (*((void *)this + 24))
  {
    unsigned __int8 v2 = (void *)*((void *)this + 23);
    while (v2)
    {
      float v22 = v2;
      unsigned __int8 v2 = (void *)*v2;
      float v23 = (void *)v22[6];
      if (v23 == v22 + 3)
      {
        (*(void (**)(void *))(v22[3] + 32))(v22 + 3);
      }
      else if (v23)
      {
        (*(void (**)(void *))(*v23 + 40))(v23);
      }
      operator delete(v22);
    }
    *((void *)this + 23) = 0;
    uint64_t v3 = *((void *)this + 22);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 21) + 8 * i) = 0;
    }
    *((void *)this + 24) = 0;
  }
  if (*((void *)this + 30))
  {
    uint64_t v5 = (void *)*((void *)this + 29);
    while (v5)
    {
      float v24 = v5;
      uint64_t v5 = (void *)*v5;
      unint64_t v25 = (void *)v24[6];
      if (v25 == v24 + 3)
      {
        (*(void (**)(void *))(v24[3] + 32))(v24 + 3);
      }
      else if (v25)
      {
        (*(void (**)(void *))(*v25 + 40))(v25);
      }
      operator delete(v24);
    }
    *((void *)this + 29) = 0;
    uint64_t v6 = *((void *)this + 28);
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(*((void *)this + 27) + 8 * j) = 0;
    }
    *((void *)this + 30) = 0;
  }
  if (*((void *)this + 36))
  {
    uint64_t v8 = (void *)*((void *)this + 35);
    while (v8)
    {
      float v26 = v8;
      uint64_t v8 = (void *)*v8;
      float v27 = (void *)v26[6];
      if (v27 == v26 + 3)
      {
        (*(void (**)(void *))(v26[3] + 32))(v26 + 3);
      }
      else if (v27)
      {
        (*(void (**)(void *))(*v27 + 40))(v27);
      }
      operator delete(v26);
    }
    *((void *)this + 35) = 0;
    uint64_t v9 = *((void *)this + 34);
    if (v9)
    {
      for (uint64_t k = 0; k != v9; ++k)
        *(void *)(*((void *)this + 33) + 8 * k) = 0;
    }
    *((void *)this + 36) = 0;
  }
  if (*((void *)this + 42))
  {
    uint64_t v11 = (void *)*((void *)this + 41);
    while (v11)
    {
      float v28 = v11;
      uint64_t v11 = (void *)*v11;
      float v29 = (void *)v28[6];
      if (v29 == v28 + 3)
      {
        (*(void (**)(void *))(v28[3] + 32))(v28 + 3);
      }
      else if (v29)
      {
        (*(void (**)(void *))(*v29 + 40))(v29);
      }
      operator delete(v28);
    }
    *((void *)this + 41) = 0;
    uint64_t v12 = *((void *)this + 40);
    if (v12)
    {
      for (uint64_t m = 0; m != v12; ++m)
        *(void *)(*((void *)this + 39) + 8 * m) = 0;
    }
    *((void *)this + 42) = 0;
  }
  if (*((void *)this + 48))
  {
    float v14 = (void *)*((void *)this + 47);
    while (v14)
    {
      float v30 = v14;
      float v14 = (void *)*v14;
      float v31 = (void *)v30[6];
      if (v31 == v30 + 3)
      {
        (*(void (**)(void *))(v30[3] + 32))(v30 + 3);
      }
      else if (v31)
      {
        (*(void (**)(void *))(*v31 + 40))(v31);
      }
      operator delete(v30);
    }
    *((void *)this + 47) = 0;
    uint64_t v15 = *((void *)this + 46);
    if (v15)
    {
      for (uint64_t n = 0; n != v15; ++n)
        *(void *)(*((void *)this + 45) + 8 * n) = 0;
    }
    *((void *)this + 48) = 0;
  }
  float v17 = (void *)*((void *)this + 53);
  if (v17)
  {
    do
    {
      int v76 = this;
      uint64_t v18 = v17[6];
      if (!v18)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::~ComponentStorageWrapper(v75);
        return;
      }
      (*(void (**)(uint64_t, gdc::Registry **))(*(void *)v18 + 48))(v18, &v76);
      float v17 = (void *)*v17;
    }
    while (v17);
    float v19 = (void **)((char *)this + 408);
    float v20 = (void *)*((void *)this + 53);
    if (!*((void *)this + 54)) {
      goto LABEL_75;
    }
    float v21 = (void *)((char *)this + 432);
    while (v20)
    {
      float v32 = v20;
      float v20 = (void *)*v20;
      float v33 = (void *)v32[6];
      if (v33 == v32 + 3)
      {
        (*(void (**)(void *))(v32[3] + 32))(v32 + 3);
      }
      else if (v33)
      {
        (*(void (**)(void *))(*v33 + 40))(v33);
      }
      operator delete(v32);
    }
    goto LABEL_69;
  }
  float v19 = (void **)((char *)this + 408);
  if (*((void *)this + 54))
  {
    float v21 = (void *)((char *)this + 432);
LABEL_69:
    *((void *)this + 53) = 0;
    uint64_t v34 = *((void *)this + 52);
    if (v34)
    {
      for (iuint64_t i = 0; ii != v34; ++ii)
        *((void *)*v19 + ii) = 0;
      float v20 = (void *)*((void *)this + 53);
    }
    else
    {
      float v20 = 0;
    }
    *float v21 = 0;
LABEL_75:
    while (v20)
    {
      uint64_t v67 = v20;
      float v20 = (void *)*v20;
      uint64_t v68 = (void *)v67[6];
      if (v68 == v67 + 3)
      {
        (*(void (**)(void *))(v67[3] + 32))(v67 + 3);
      }
      else if (v68)
      {
        (*(void (**)(void *))(*v68 + 40))(v68);
      }
      operator delete(v67);
    }
  }
  float v36 = *v19;
  *float v19 = 0;
  if (v36) {
    operator delete(v36);
  }
  float v37 = (void *)*((void *)this + 47);
  while (v37)
  {
    float32x4_t v57 = v37;
    float v37 = (void *)*v37;
    float32x4_t v58 = (void *)v57[6];
    if (v58 == v57 + 3)
    {
      (*(void (**)(void *))(v57[3] + 32))(v57 + 3);
    }
    else if (v58)
    {
      (*(void (**)(void *))(*v58 + 40))(v58);
    }
    operator delete(v57);
  }
  float v38 = (void *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v38) {
    operator delete(v38);
  }
  float v39 = (void *)*((void *)this + 41);
  while (v39)
  {
    double v59 = v39;
    float v39 = (void *)*v39;
    float v60 = (void *)v59[6];
    if (v60 == v59 + 3)
    {
      (*(void (**)(void *))(v59[3] + 32))(v59 + 3);
    }
    else if (v60)
    {
      (*(void (**)(void *))(*v60 + 40))(v60);
    }
    operator delete(v59);
  }
  float v40 = (void *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v40) {
    operator delete(v40);
  }
  float v41 = (void *)*((void *)this + 35);
  while (v41)
  {
    float v61 = v41;
    float v41 = (void *)*v41;
    int v62 = (void *)v61[6];
    if (v62 == v61 + 3)
    {
      (*(void (**)(void *))(v61[3] + 32))(v61 + 3);
    }
    else if (v62)
    {
      (*(void (**)(void *))(*v62 + 40))(v62);
    }
    operator delete(v61);
  }
  float v42 = (void *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v42) {
    operator delete(v42);
  }
  float v43 = (void *)*((void *)this + 29);
  while (v43)
  {
    unint64_t v63 = v43;
    float v43 = (void *)*v43;
    float32x4_t v64 = (void *)v63[6];
    if (v64 == v63 + 3)
    {
      (*(void (**)(void *))(v63[3] + 32))(v63 + 3);
    }
    else if (v64)
    {
      (*(void (**)(void *))(*v64 + 40))(v64);
    }
    operator delete(v63);
  }
  float v44 = (void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v44) {
    operator delete(v44);
  }
  float v45 = (void *)*((void *)this + 23);
  while (v45)
  {
    int8x8_t v65 = v45;
    float v45 = (void *)*v45;
    uint64_t v66 = (void *)v65[6];
    if (v66 == v65 + 3)
    {
      (*(void (**)(void *))(v65[3] + 32))(v65 + 3);
    }
    else if (v66)
    {
      (*(void (**)(void *))(*v66 + 40))(v66);
    }
    operator delete(v65);
  }
  float v46 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v46) {
    operator delete(v46);
  }
  float v47 = (void *)*((void *)this + 17);
  if (v47)
  {
    do
    {
      float v52 = (void *)*v47;
      uint64_t v53 = v47[3];
      v47[3] = 0;
      if (v53) {
        (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
      }
      operator delete(v47);
      float v47 = v52;
    }
    while (v52);
  }
  float v48 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v48) {
    operator delete(v48);
  }
  float v49 = (void *)*((void *)this + 12);
  if (v49)
  {
    float v50 = (void *)*((void *)this + 13);
    float v51 = (void *)*((void *)this + 12);
    if (v50 != v49)
    {
      do
      {
        uint64_t v55 = *--v50;
        uint64_t v54 = v55;
        *float v50 = 0;
        if (v55)
        {
          float v56 = *(void **)v54;
          if (*(void *)v54)
          {
            *(void *)(v54 + 8) = v56;
            operator delete(v56);
          }
          MEMORY[0x1A6239270](v54, 0x20C40960023A9);
        }
      }
      while (v50 != v49);
      float v51 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v49;
    operator delete(v51);
  }
  v69 = (void *)*((void *)this + 9);
  if (v69)
  {
    *((void *)this + 10) = v69;
    operator delete(v69);
  }
  uint64_t v70 = (void *)*((void *)this + 6);
  if (v70)
  {
    *((void *)this + 7) = v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)*((void *)this + 2);
  if (v71)
  {
    do
    {
      unint64_t v73 = (void *)*v71;
      uint64_t v74 = v71[5];
      v71[5] = 0;
      if (v74) {
        (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
      }
      operator delete(v71);
      uint64_t v71 = v73;
    }
    while (v73);
  }
  uint64_t v72 = *(void **)this;
  *(void *)this = 0;
  if (v72) {
    operator delete(v72);
  }
}

void gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::IconMeshDescriptor>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  unsigned __int8 v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    uint64_t v5 = (void *)a1[5];
    uint64_t v6 = (void *)a1[4];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          MEMORY[0x1A6239270](v7, 0x1000C40104B78CFLL);
        }
      }
      while (v5 != v4);
      uint64_t v6 = (void *)a1[4];
    }
    a1[5] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 80);
}

uint64_t std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

uint64_t geo::optional<float>::operator=(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    if (*(unsigned char *)a1)
    {
      int v3 = *(_DWORD *)geo::optional<int>::value(a2);
      *(_DWORD *)geo::optional<int>::value((unsigned char *)a1) = v3;
    }
    else
    {
      *(_DWORD *)(a1 + 4) = *(_DWORD *)geo::optional<int>::value(a2);
      *(unsigned char *)a1 = 1;
    }
  }
  else if (*(unsigned char *)a1)
  {
    geo::optional<int>::value((unsigned char *)a1);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void md::TextDataString::generateGlyphInfosAndPositions(md::TextDataString *a1, grl::FontManager **a2)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v185 = 0;
    long long v184 = 0uLL;
    uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      operator new();
    }
    uint64_t v186 = mdm::Allocator::instance(void)::alloc;
    if (*(char *)(v4 + 87) < 0)
    {
      if (*(void *)(v4 + 72))
      {
LABEL_5:
        if ((long long *)(v4 + 64) != &v184)
        {
          if ((*(unsigned char *)(v4 + 87) & 0x80) != 0)
          {
            std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__assign_no_alias<true>((void **)&v184, *(void **)(v4 + 64), *(void *)(v4 + 72));
          }
          else
          {
            long long v184 = *(_OWORD *)(v4 + 64);
            uint64_t v185 = *(void *)(v4 + 80);
          }
        }
        uint64_t v6 = HIBYTE(v185);
        char v7 = HIBYTE(v185);
        if (v185 < 0) {
          uint64_t v6 = *((void *)&v184 + 1);
        }
        if (!v6) {
          goto LABEL_231;
        }
        id v8 = [NSString alloc];
        if (v185 >= 0) {
          uint64_t v9 = &v184;
        }
        else {
          uint64_t v9 = (long long *)v184;
        }
        if (v185 >= 0) {
          uint64_t v10 = HIBYTE(v185);
        }
        else {
          uint64_t v10 = *((void *)&v184 + 1);
        }
        uint64_t v135 = &unk_1EF559F18;
        uint64_t v182 = &unk_1EF559F18;
        id v183 = (id)[v8 initWithCharacters:v9 length:v10];

        uint64_t v180 = &unk_1EF559078;
        CFMutableAttributedStringRef Mutable = CFAttributedStringCreateMutable(0, 0);
        if (!Mutable)
        {
LABEL_230:
          uint64_t v182 = v135;

          char v7 = HIBYTE(v185);
LABEL_231:
          if (v7 < 0) {
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v186 + 40))(v186, v184, 2 * v185);
          }
          return;
        }
        uint64_t v11 = (unsigned char *)*((void *)a1 + 2);
        int v12 = v11[40];
        int v13 = v11[37];
        uint64_t v134 = &unk_1EF559078;
        if (v12)
        {
          BOOL v14 = 1;
        }
        else if (v13)
        {
          BOOL v14 = v11[36] != 0;
          int v13 = 1;
        }
        else
        {
          BOOL v14 = 0;
        }
        BOOL v15 = v13 == 0;
        int v16 = !v14;
        int v17 = !v15 && !v14;
        if (!v11[36]) {
          int v16 = 0;
        }
        LODWORD(v151.f64[0]) = v16;
        int v18 = v11[38];
        int v19 = v11[39];
        grl::FontKey::FontKey(&v172, 18.0);
        grl::FontManager::fontForKey(*a2, (const grl::FontKey *)&v172, &v170);
        float v20 = v171;
        if (!v171)
        {
LABEL_224:
          uint64_t v172 = &unk_1EF554E58;
          if (v178)
          {
            uint64_t v179 = v178;
            operator delete(v178);
          }
          if (v177 < 0)
          {
            operator delete(v176);
            if ((v175 & 0x80000000) == 0) {
              goto LABEL_228;
            }
          }
          else if ((v175 & 0x80000000) == 0)
          {
            goto LABEL_228;
          }
          operator delete(v174);
LABEL_228:
          uint64_t v180 = v134;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_230;
        }
        if (v14)
        {
          uint64_t v168 = &unk_1EF5592D8;
          CFRetain(v171);
          uint64_t v169 = v20;
          BOOL HasSmallCaps = grl::FontManager::fontHasSmallCaps((uint64_t)&v168);
          uint64_t v168 = &unk_1EF5592D8;
          if (v169) {
            CFRelease(v169);
          }
          LODWORD(v151.f64[0]) = !HasSmallCaps;
          int v17 = 1;
        }
        else
        {
          BOOL HasSmallCaps = 0;
        }
        uint64_t v133 = &unk_1EF559178;
        unint64_t v166 = &unk_1EF559178;
        CFLocaleRef v167 = 0;
        if (v19 | v18 || (v17 & 1) != 0 || LODWORD(v151.f64[0]))
        {
          float v22 = (void *)(*(void *)a1 + 32);
          if (*(char *)(*(void *)a1 + 55) < 0) {
            float v22 = (void *)*v22;
          }
          float v23 = [NSString stringWithUTF8String:v22];
          CFLocaleRef v167 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v23);
        }
        if (v17)
        {
          float v24 = (__CFString *)v183;
          MutableCopy = CFStringCreateMutableCopy(0, 0, v24);
          uint64_t v191 = &unk_1EF558FF8;
          CFMutableStringRef v192 = MutableCopy;

          float v26 = v192;
          if (v192)
          {
            if (*(unsigned char *)(*(void *)a1 + 129) == 1)
            {
              v206.length = CFStringGetLength(v192);
              v206.locatiouint64_t n = 0;
              CFStringFindAndReplace(v26, @"ß", @"ẞ", v206, 0);
              float v26 = v192;
            }
            CFStringUppercase(v26, v167);
            v197.locatiouint64_t n = 0;
            v197.length = 0;
            CFAttributedStringReplaceString(Mutable, v197, v192);
            goto LABEL_54;
          }
LABEL_220:
          unint64_t v166 = v133;
          if (v167) {
            CFRelease(v167);
          }
          uint64_t v170 = &unk_1EF5592D8;
          if (v171) {
            CFRelease(v171);
          }
          goto LABEL_224;
        }
        if (v18)
        {
          float v27 = (__CFString *)v183;
          float v28 = CFStringCreateMutableCopy(0, 0, v27);
          uint64_t v191 = &unk_1EF558FF8;
          CFMutableStringRef v192 = v28;

          if (!v192) {
            goto LABEL_220;
          }
          CFStringLowercase(v192, v167);
          v198.locatiouint64_t n = 0;
          v198.length = 0;
          CFAttributedStringReplaceString(Mutable, v198, v192);
        }
        else
        {
          if (!v19)
          {
            unint64_t v126 = Mutable;
            uint64_t v127 = (__CFString *)v183;
            v205.locatiouint64_t n = 0;
            v205.length = 0;
            CFAttributedStringReplaceString(v126, v205, v127);

LABEL_56:
            uint64_t v132 = &unk_1EF5592D8;
            unint64_t v164 = &unk_1EF5592D8;
            uint64_t v165 = 0;
            CFIndex Length = CFAttributedStringGetLength(Mutable);
            double v32 = 0.0;
            if ((LODWORD(v151.f64[0]) | HasSmallCaps) != 1) {
              goto LABEL_71;
            }
            if (HasSmallCaps)
            {
              float v33 = v171;
              uint64_t v34 = (__CFString *)CTFontCopyFontDescriptor(v171);
              uint64_t v191 = &unk_1EF559258;
              CFMutableStringRef v192 = v34;
              int v190 = 38;
              CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFNumberRef v36 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v190);
              uint64_t v158 = (CFIndex *)&unk_1EF559198;
              CFNumberRef v159 = v36;
              int v189 = 1;
              uint64_t v156 = (void **)&unk_1EF559198;
              v157[0] = CFNumberCreate(v35, kCFNumberIntType, &v189);
              CTFontDescriptorRef CopyWithFeature = CTFontDescriptorCreateCopyWithFeature((CTFontDescriptorRef)v192, v159, (CFNumberRef)v157[0]);
              v187 = &unk_1EF559258;
              CTFontDescriptorRef v188 = CopyWithFeature;
              CopyWithCFDictionaryRef Attributes = (__CFString *)CTFontCreateCopyWithAttributes(v33, 0.0, 0, CopyWithFeature);
              v187 = &unk_1EF559258;
              if (v188) {
                CFRelease(v188);
              }
              uint64_t v156 = (void **)&unk_1EF559198;
              if (v157[0]) {
                CFRelease(v157[0]);
              }
              uint64_t v158 = (CFIndex *)&unk_1EF559198;
              if (v159) {
                CFRelease(v159);
              }
              uint64_t v191 = &unk_1EF559258;
              if (v192) {
                CFRelease(v192);
              }
              unint64_t v162 = &unk_1EF5592D8;
              uint64_t v163 = CopyWithAttributes;
            }
            else
            {
              double v32 = CTFontGetSize(v171) * 0.829999983;
              CopyWithCFDictionaryRef Attributes = (__CFString *)CTFontCreateCopyWithAttributes(v171, v32, 0, 0);
              uint64_t v191 = &unk_1EF5592D8;
              CFMutableStringRef v192 = CopyWithAttributes;
            }
            uint64_t v165 = CopyWithAttributes;
            if (CopyWithAttributes)
            {
              if (v18)
              {
                v200.locatiouint64_t n = 0;
                v200.length = Length;
                CFAttributedStringSetAttribute(Mutable, v200, (CFStringRef)*MEMORY[0x1E4F243F0], CopyWithAttributes);
              }
              else
              {
                v207.locatiouint64_t n = 0;
                v207.length = Length;
                applyRaisedInitial(Mutable, v171, (CFIndex)CopyWithAttributes, v207, v167);
              }
            }
            else
            {
LABEL_71:
              v201.locatiouint64_t n = 0;
              v201.length = Length;
              CFAttributedStringSetAttribute(Mutable, v201, (CFStringRef)*MEMORY[0x1E4F243F0], v171);
            }
            float v39 = v171;
            float v40 = (const void *)*((void *)a1 + 5);
            if (v171) {
              CFRetain(v171);
            }
            *((void *)a1 + 5) = v39;
            if (v40) {
              CFRelease(v40);
            }
            if (v173)
            {
              float v41 = (__CFString *)CTFontCopyCharacterSet(v171);
              uint64_t v191 = &unk_1EF559238;
              CFMutableStringRef v192 = v41;
              float v42 = [(__CFString *)v41 invertedSet];
              if (v42)
              {
                id v43 = v183;
                *((unsigned char *)a1 + 121) = [v43 rangeOfCharacterFromSet:v42] == 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                *((unsigned char *)a1 + 121) = 0;
              }

              uint64_t v191 = &unk_1EF559238;
              if (v192) {
                CFRelease(v192);
              }
            }
            CTLineRef v44 = CTLineCreateWithAttributedString(Mutable);
            long long v131 = &unk_1EF559318;
            v187 = &unk_1EF559318;
            CTFontDescriptorRef v188 = v44;
            if (v44)
            {
              unint64_t GlyphCount = CTLineGetGlyphCount(v44);
              uint64_t v46 = *((void *)a1 + 7);
              uint64_t v146 = (void *)((char *)a1 + 56);
              unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 9) - v46) >> 3);
              unint64_t v139 = GlyphCount;
              if (v47 < GlyphCount)
              {
                if (v139 > 0xAAAAAAAAAAAAAAALL) {
                  abort();
                }
                uint64_t v48 = *((void *)a1 + 10);
                uint64_t v49 = *((void *)a1 + 8);
                uint64_t v194 = (void *)((char *)a1 + 80);
                uint64_t v50 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v48 + 16))(v48, 24 * v139, 8);
                float v51 = (__CFString *)(v50 + v49 - v46);
                uint64_t v191 = (void *)v50;
                CFMutableStringRef v192 = v51;
                unint64_t v52 = v50 + 24 * v139;
                *(void *)&long long v193 = v51;
                *((void *)&v193 + 1) = v52;
                uint64_t v54 = *((void *)a1 + 7);
                uint64_t v53 = *((void *)a1 + 8);
                if (v53 == v54)
                {
                  *((void *)a1 + 7) = v51;
                  *((void *)a1 + 8) = v51;
                  uint64_t v58 = *((void *)a1 + 9);
                  *((void *)a1 + 9) = v52;
                }
                else
                {
                  uint64_t v55 = 0;
                  do
                  {
                    float v56 = (char *)v51 + v55;
                    *(_WORD *)((char *)v51 + v55 - 24) = *(_WORD *)(v53 + v55 - 24);
                    *((void *)v56 - 2) = CGFontRetain(*(CGFontRef *)(v53 + v55 - 16));
                    *(v56 - 8) = *(unsigned char *)(v53 + v55 - 8);
                    *(_WORD *)(v56 - 7) = *(_WORD *)(v53 + v55 - 7);
                    *(v56 - 5) = 0;
                    *(v56 - 4) &= 0xC0u;
                    v55 -= 24;
                  }
                  while (v53 + v55 != v54);
                  uint64_t v53 = *((void *)a1 + 7);
                  uint64_t v57 = *((void *)a1 + 8);
                  *((void *)a1 + 7) = (char *)v51 + v55;
                  *((void *)a1 + 8) = v51;
                  uint64_t v58 = *((void *)a1 + 9);
                  *((void *)a1 + 9) = v52;
                  uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
                  if (v57 != v53)
                  {
                    do
                    {
                      uint64_t v59 = v57 - 24;
                      CGFontRelease(*(CGFontRef *)(v57 - 16));
                      uint64_t v57 = v59;
                    }
                    while (v59 != v53);
                  }
                }
                if (v53) {
                  (*(void (**)(void, uint64_t, uint64_t))(**((void **)a1 + 10) + 40))(*((void *)a1 + 10), v53, v58 - v53);
                }
              }
              uint64_t v158 = 0;
              CFNumberRef v159 = 0;
              CFNumberRef v160 = 0;
              {
                operator new();
              }
              uint64_t v60 = *((void *)v5 + 91);
              uint64_t v161 = v60;
              if (!v139) {
                goto LABEL_104;
              }
              if (v139 >> 61) {
                abort();
              }
              uint64_t v61 = 8 * v139;
              uint64_t v60 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v60 + 16))(v60, 8 * v139, 8);
              CFNumberRef v62 = (const __CFNumber *)(v60 + 8 * v139);
              uint64_t v158 = (CFIndex *)v60;
              CFNumberRef v160 = v62;
              do
              {
                if (v60) {
                  *(void *)uint64_t v60 = 0;
                }
                v60 += 8;
                v61 -= 8;
              }
              while (v61);
              CFNumberRef v159 = v62;
              if (2 * v139 > 0x2000)
              {
                unint64_t v63 = malloc_type_malloc(2 * v139, 0x1000040BDFB0063uLL);
                uint64_t v150 = v63;
                int v64 = 0;
              }
              else
              {
LABEL_104:
                MEMORY[0x1F4188790](v60);
                uint64_t v150 = &v128[-((v65 + 15) & 0xFFFFFFFFFFFFFFF0)];
                bzero(v150, v65);
                int v64 = 1;
              }
              unint64_t v130 = 16 * v139;
              if (16 * v139 > 0x2000)
              {
                uint64_t v67 = (CGPoint *)malloc_type_malloc(16 * v139, 0x1000040451B5BE8uLL);
              }
              else
              {
                MEMORY[0x1F4188790](v63);
                uint64_t v67 = (CGPoint *)&v128[-((v66 + 15) & 0xFFFFFFFFFFFFFFF0)];
                bzero(v67, v66);
              }
              if (v150 && v67)
              {
                int v129 = v64;
                CFArrayRef GlyphRuns = CTLineGetGlyphRuns(v188);
                v157[0] = 0;
                {
                  operator new();
                }
                v157[1] = *((void **)v5 + 91);
                v157[2] = 0;
                uint64_t v156 = v157;
                long long v152 = 0u;
                long long v153 = 0u;
                long long v154 = 0u;
                long long v155 = 0u;
                CFArrayRef v138 = GlyphRuns;
                uint64_t v69 = [(__CFArray *)v138 countByEnumeratingWithState:&v152 objects:v195 count:16];
                unint64_t v70 = v139;
                if (v69)
                {
                  uint64_t v141 = 0;
                  uint64_t v71 = 0;
                  int v72 = LODWORD(v151.f64[0]);
                  if (vabdd_f64(18.0, v32) > 0.00999999978) {
                    int v72 = 0;
                  }
                  int v148 = v72;
                  uint64_t v144 = v67;
                  uint64_t v145 = (void *)((char *)a1 + 80);
                  uint64_t v73 = *(void *)v153;
                  uint64_t v136 = (const void *)*MEMORY[0x1E4F243F0];
                  uint64_t v137 = v73;
                  float v74 = 0.0;
                  for (uint64_t i = v73; ; uint64_t i = *(void *)v153)
                  {
                    if (i != v137) {
                      objc_enumerationMutation(v138);
                    }
                    uint64_t v142 = v71;
                    unint64_t v143 = v69;
                    int v76 = *(const __CTRun **)(*((void *)&v152 + 1) + 8 * v71);
                    CFIndex v77 = CTRunGetGlyphCount(v76);
                    CFDictionaryRef Attributes = CTRunGetAttributes(v76);
                    Value = (const __CTFont *)CFDictionaryGetValue(Attributes, v136);
                    CTFontSymbolicTraits SymbolicTraits = CTFontGetSymbolicTraits(Value);
                    CGFontRef v81 = CTFontCopyGraphicsFont(Value, 0);
                    unint64_t v162 = &unk_1EF5590B8;
                    uint64_t v163 = v81;
                    if (v81) {
                      break;
                    }
LABEL_201:
                    unint64_t v70 = v139;
                    uint64_t v69 = v143;
                    uint64_t v71 = v142 + 1;
                    if (v142 + 1 >= v143)
                    {
                      uint64_t v69 = [(__CFArray *)v138 countByEnumeratingWithState:&v152 objects:v195 count:16];
                      if (!v69) {
                        goto LABEL_205;
                      }
                      uint64_t v71 = 0;
                    }
                  }
                  v202.locatiouint64_t n = 0;
                  v202.length = v77;
                  CTRunGetStringIndices(v76, v202, &v158[v141]);
                  v203.locatiouint64_t n = 0;
                  v203.length = v77;
                  CTRunGetGlyphs(v76, v203, (CGGlyph *)v150);
                  v204.locatiouint64_t n = 0;
                  v204.length = v77;
                  CTRunGetPositions(v76, v204, v67);
                  if (*((unsigned char *)a1 + 122))
                  {
                    unint64_t v140 = &unk_1EF5590B8;
                    if (v77) {
                      goto LABEL_124;
                    }
                    goto LABEL_199;
                  }
                  *((unsigned char *)a1 + 122) = CTRunGetStatus(v76) & 1;
                  unint64_t v140 = &unk_1EF5590B8;
                  if (!v77)
                  {
LABEL_199:
                    v141 += v77;
                    unint64_t v162 = v140;
                    if (v163) {
                      CFRelease(v163);
                    }
                    goto LABEL_201;
                  }
LABEL_124:
                  uint64_t v82 = 0;
                  int v149 = (SymbolicTraits >> 13) & 1;
                  CFIndex v147 = v77;
                  while (1)
                  {
                    if (*(unsigned char *)(*(void *)a1 + 128) == 2 && *(unsigned char *)(*(void *)a1 + 130))
                    {
                      unsigned int v84 = &v184;
                      if (v185 < 0) {
                        unsigned int v84 = (long long *)v184;
                      }
                      unsigned int v85 = *((unsigned __int16 *)v84
                            + v158[0xAAAAAAAAAAAAAABLL * ((*((void *)a1 + 8) - *((void *)a1 + 7)) >> 3)]);
                      if (v85 > 0x300B)
                      {
                        switch(v85)
                        {
                          case 0x300Cu:
                            uint64_t v87 = (__int16 *)&unk_1A29C2FCE;
                            break;
                          case 0x300Du:
                            uint64_t v87 = (__int16 *)&unk_1A29C2FD0;
                            break;
                          case 0x30FCu:
                            uint64_t v87 = (__int16 *)&unk_1A29C2FCC;
                            break;
                          default:
LABEL_155:
                            uint64_t v87 = (__int16 *)&ggl::polylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
                            break;
                        }
                      }
                      else
                      {
                        unsigned int v86 = v85 - 40;
                        uint64_t v87 = jpVerticalExceptions;
                        switch(v86)
                        {
                          case 0u:
                            uint64_t v87 = &jpVerticalExceptions[4];
                            break;
                          case 1u:
                            uint64_t v87 = &jpVerticalExceptions[5];
                            break;
                          case 5u:
                            uint64_t v87 = &jpVerticalExceptions[13];
                            break;
                          case 7u:
                            uint64_t v87 = &jpVerticalExceptions[8];
                            break;
                          case 0x12u:
                            uint64_t v87 = &jpVerticalExceptions[11];
                            break;
                          case 0x14u:
                            uint64_t v87 = &jpVerticalExceptions[6];
                            break;
                          case 0x15u:
                            uint64_t v87 = &jpVerticalExceptions[12];
                            break;
                          case 0x16u:
                            uint64_t v87 = &jpVerticalExceptions[7];
                            break;
                          case 0x33u:
                            break;
                          case 0x34u:
                            uint64_t v87 = &jpVerticalExceptions[9];
                            break;
                          case 0x35u:
                            uint64_t v87 = &jpVerticalExceptions[1];
                            break;
                          case 0x37u:
                            uint64_t v87 = &jpVerticalExceptions[15];
                            break;
                          case 0x53u:
                            uint64_t v87 = &jpVerticalExceptions[2];
                            break;
                          case 0x54u:
                            uint64_t v87 = &jpVerticalExceptions[10];
                            break;
                          case 0x55u:
                            uint64_t v87 = &jpVerticalExceptions[3];
                            break;
                          case 0x56u:
                            uint64_t v87 = &jpVerticalExceptions[14];
                            break;
                          default:
                            goto LABEL_155;
                        }
                      }
                      BOOL v88 = (char *)v87 - (char *)jpVerticalExceptions != 38;
                    }
                    else
                    {
                      BOOL v88 = 0;
                    }
                    float64x2_t v89 = (float64x2_t)v67[v82];
                    *(float32x2_t *)&v89.f64[0] = vcvt_f32_f64(v89);
                    float64x2_t v151 = v89;
                    double v90 = (float64x2_t *)*((void *)a1 + 12);
                    unint64_t v91 = *((void *)a1 + 13);
                    if ((unint64_t)v90 >= v91)
                    {
                      uint64_t v93 = *((void *)a1 + 11);
                      uint64_t v94 = ((uint64_t)v90 - v93) >> 4;
                      unint64_t v95 = v94 + 1;
                      if ((unint64_t)(v94 + 1) >> 60) {
                        abort();
                      }
                      uint64_t v96 = v91 - v93;
                      if (v96 >> 3 > v95) {
                        unint64_t v95 = v96 >> 3;
                      }
                      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
                        uint64_t v97 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v97 = v95;
                      }
                      if (v97)
                      {
                        uint64_t v98 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a1 + 14) + 16))(*((void *)a1 + 14), 16 * v97, 8);
                        double v99 = (float64x2_t *)(v98 + 16 * v94);
                        uint64_t v100 = v98 + 16 * v97;
                        if (v98) {
                          *double v99 = vcvtq_f64_f32(*(float32x2_t *)&v151.f64[0]);
                        }
                      }
                      else
                      {
                        uint64_t v100 = 0;
                        double v99 = (float64x2_t *)(16 * v94);
                      }
                      uint64_t v102 = *((void *)a1 + 11);
                      uint64_t v101 = *((void *)a1 + 12);
                      double v103 = v99;
                      if (v101 != v102)
                      {
                        do
                        {
                          v103[-1] = *(float64x2_t *)(v101 - 16);
                          --v103;
                          v101 -= 16;
                        }
                        while (v101 != v102);
                        uint64_t v101 = *((void *)a1 + 11);
                      }
                      double v92 = v99 + 1;
                      *((void *)a1 + 11) = v103;
                      *((void *)a1 + 12) = v99 + 1;
                      uint64_t v104 = *((void *)a1 + 13);
                      *((void *)a1 + 13) = v100;
                      if (v101) {
                        (*(void (**)(void, uint64_t, uint64_t))(**((void **)a1 + 14) + 40))(*((void *)a1 + 14), v101, v104 - v101);
                      }
                    }
                    else
                    {
                      if (v90) {
                        *double v90 = vcvtq_f64_f32(*(float32x2_t *)&v151.f64[0]);
                      }
                      double v92 = v90 + 1;
                    }
                    *((void *)a1 + 12) = v92;
                    long long v105 = (CGFont *)v163;
                    unint64_t v107 = *((void *)a1 + 8);
                    unint64_t v106 = *((void *)a1 + 9);
                    if (v107 < v106)
                    {
                      if (v107)
                      {
                        *(_WORD *)unint64_t v107 = *(_WORD *)&v150[2 * v82];
                        *(void *)(v107 + 8) = CGFontRetain(v105);
                        *(unsigned char *)(v107 + 16) = v148;
                        *(unsigned char *)(v107 + 17) = v149;
                        *(unsigned char *)(v107 + 18) = v88;
                        *(unsigned char *)(v107 + 19) = 0;
                        *(unsigned char *)(v107 + 20) &= 0xC0u;
                      }
                      p_length = (uint64_t *)(v107 + 24);
                      *((void *)a1 + 8) = v107 + 24;
                      goto LABEL_126;
                    }
                    unint64_t v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - *v146) >> 3);
                    unint64_t v109 = v108 + 1;
                    if (v108 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      abort();
                    }
                    unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - *v146) >> 3);
                    if (2 * v110 > v109) {
                      unint64_t v109 = 2 * v110;
                    }
                    if (v110 >= 0x555555555555555) {
                      uint64_t v111 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      uint64_t v111 = v109;
                    }
                    uint64_t v194 = v145;
                    if (v111) {
                      uint64_t v112 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v145 + 16))(*v145, 24 * v111, 8);
                    }
                    else {
                      uint64_t v112 = 0;
                    }
                    uint64_t v113 = (__CFString *)(v112 + 24 * v108);
                    uint64_t v191 = (void *)v112;
                    CFMutableStringRef v192 = v113;
                    uint64_t v114 = v112 + 24 * v111;
                    *(void *)&long long v193 = v113;
                    *((void *)&v193 + 1) = v114;
                    if (v112)
                    {
                      LOWORD(v113->isa) = *(_WORD *)&v150[2 * v82];
                      CGFontRef v115 = CGFontRetain(v105);
                      unint64_t v116 = v112 + 24 * v108;
                      *(void *)(v116 + 8) = v115;
                      *(unsigned char *)(v116 + 16) = v148;
                      *(unsigned char *)(v116 + 17) = v149;
                      *(unsigned char *)(v116 + 18) = v88;
                      *(unsigned char *)(v116 + 19) = 0;
                      *(unsigned char *)(v116 + 20) &= 0xC0u;
                    }
                    p_length = &v113->length;
                    *(void *)&long long v193 = &v113->length;
                    uint64_t v117 = *((void *)a1 + 7);
                    uint64_t v118 = *((void *)a1 + 8);
                    if (v118 != v117) {
                      break;
                    }
                    *((void *)a1 + 7) = v113;
                    *((void *)a1 + 8) = p_length;
                    uint64_t v122 = *((void *)a1 + 9);
                    *((void *)a1 + 9) = v114;
                    CFIndex v77 = v147;
                    uint64_t v67 = v144;
                    if (v118) {
                      goto LABEL_198;
                    }
LABEL_126:
                    float v74 = fmaxf(v74, *(float *)v151.f64);
                    *((void *)a1 + 8) = p_length;
                    if (++v82 == v77) {
                      goto LABEL_199;
                    }
                  }
                  uint64_t v119 = 0;
                  CFIndex v77 = v147;
                  do
                  {
                    uint64_t v120 = (char *)v113 + v119;
                    *(_WORD *)((char *)v113 + v119 - 24) = *(_WORD *)(v118 + v119 - 24);
                    *((void *)v120 - 2) = CGFontRetain(*(CGFontRef *)(v118 + v119 - 16));
                    *(v120 - 8) = *(unsigned char *)(v118 + v119 - 8);
                    *(_WORD *)(v120 - 7) = *(_WORD *)(v118 + v119 - 7);
                    *(v120 - 5) = 0;
                    *(v120 - 4) &= 0xC0u;
                    v119 -= 24;
                  }
                  while (v118 + v119 != v117);
                  uint64_t v118 = *((void *)a1 + 7);
                  uint64_t v121 = *((void *)a1 + 8);
                  *((void *)a1 + 7) = (char *)v113 + v119;
                  uint64_t v122 = *((void *)a1 + 9);
                  uint64_t v123 = (uint64_t *)v193;
                  *((_OWORD *)a1 + 4) = v193;
                  p_length = v123;
                  if (v121 != v118)
                  {
                    do
                    {
                      uint64_t v124 = v121 - 24;
                      CGFontRelease(*(CGFontRef *)(v121 - 16));
                      uint64_t v121 = v124;
                    }
                    while (v124 != v118);
                  }
                  uint64_t v67 = v144;
                  if (!v118) {
                    goto LABEL_126;
                  }
LABEL_198:
                  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v194 + 40))(*v194, v118, v122 - v118);
                  goto LABEL_126;
                }
                float v74 = 0.0;
LABEL_205:

                if (*(unsigned char *)(*(void *)a1 + 132)) {
                  md::TextDataString::detectTextClusters(a1, v188, v74, v70);
                }
                std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v156, v157[0]);
                LOBYTE(v64) = v129;
              }
              if ((v64 & 1) == 0) {
                free(v150);
              }
              if (v130 > 0x2000) {
                free(v67);
              }
              unint64_t v125 = CFAttributedStringGetString(Mutable);
              if ([v125 length]) {
                md::TextDataStringInfo::generateLineBreakInfo(*(void *)a1, v125, &v158, v146);
              }

              if (v158) {
                (*(void (**)(uint64_t, CFIndex *, int64_t))(*(void *)v161 + 40))(v161, v158, v160 - (const __CFNumber *)v158);
              }
              v187 = v131;
              if (v188) {
                CFRelease(v188);
              }
            }
            unint64_t v164 = v132;
            if (v165) {
              CFRelease(v165);
            }
            goto LABEL_220;
          }
          float v29 = (__CFString *)v183;
          float v30 = CFStringCreateMutableCopy(0, 0, v29);
          uint64_t v191 = &unk_1EF558FF8;
          CFMutableStringRef v192 = v30;

          if (!v192) {
            goto LABEL_220;
          }
          CFStringLowercase(v192, v167);
          CFStringCapitalize(v192, v167);
          v199.locatiouint64_t n = 0;
          v199.length = 0;
          CFAttributedStringReplaceString(Mutable, v199, v192);
        }
LABEL_54:
        uint64_t v191 = &unk_1EF558FF8;
        if (v192) {
          CFRelease(v192);
        }
        goto LABEL_56;
      }
    }
    else if (*(unsigned char *)(v4 + 87))
    {
      goto LABEL_5;
    }
    md::TextDataStringInfo::widenText();
  }
}

void sub_1A18AF228(_Unwind_Exception *a1)
{
  *(void *)(v1 + 376) = *(void *)(v1 + 40);
  uint64_t v4 = *(const void **)(v1 + 384);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(v1 + 424) = &unk_1EF5592D8;
  uint64_t v5 = *(const void **)(v1 + 432);
  if (v5) {
    CFRelease(v5);
  }
  grl::FontKey::~FontKey((grl::FontKey *)(v1 + 448));
  *(void *)(v1 + 576) = *(void *)(v1 + 48);
  uint64_t v6 = *(const void **)(v1 + 584);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(v1 + 600) = *(void *)(v1 + 56);

  if (*(char *)(v1 + 647) < 0)
  {
    (*(void (**)(void, void, uint64_t))(**(void **)(v1 + 648) + 40))(*(void *)(v1 + 648), *(void *)(v1 + 624), 2 * *(void *)(v1 + 640));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void grl::FontManager::fontForKey(grl::FontManager *a1@<X0>, long long *a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  grl::FontKey::FontKey((uint64_t)v6, a2, a4);
  grl::FontManager::fontForKey(a1, (const grl::FontKey *)v6, a3);
  esl::FontKey::~FontKey((esl::FontKey *)v6);
}

void grl::FontManager::fontForKey(grl::FontManager *this@<X0>, const grl::FontKey *a2@<X1>, void *a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::mutex *)((char *)this + 168);
  std::mutex::lock((std::mutex *)((char *)this + 168));
  uint64_t v7 = *((unsigned __int8 *)a2 + 95);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 10);
  }
  if (v7)
  {
    id v8 = (char *)this + 96;
    if ((grl::FontManager *)((char *)this + 144) != (grl::FontManager *)geo::LRUPolicy<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>>::get((uint64_t)this + 144, (void *)this + 13, a2))
    {
      uint64_t v9 = (CFTypeRef *)geo::LRUPolicy<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>>::get((uint64_t)this + 144, (void *)this + 13, a2);
      if ((CFTypeRef *)((char *)this + 144) == v9)
      {
        *((void *)&buf + 1) = 0;
        geo::Cache<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>,geo::LRUPolicy>::insert((uint64_t)this + 96, a2, 0);
        *(void *)&long long buf = &unk_1EF5592F8;
        uint64_t v9 = (CFTypeRef *)*((void *)this + 19);
      }
      *a3 = &unk_1EF5592F8;
      CFTypeRef v10 = v9[19];
      if (v10) {
        CFRetain(v9[19]);
      }
LABEL_107:
      a3[1] = v10;
      goto LABEL_108;
    }
    uint64_t v11 = (char *)a2 + 72;
    if (*((unsigned char *)a2 + 11))
    {
      uint64_t v12 = *((unsigned __int8 *)a2 + 71);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((void *)a2 + 7);
      }
      if (v12)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)this + 1) + 48))(&buf);
        if (*((void *)&buf + 1) == (void)buf)
        {
          if (GEOGetGeoResourceLibFontLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_17_0);
          }
          int v18 = GEOGetGeoResourceLibFontLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a2 + 71) >= 0) {
              int v19 = (char *)a2 + 48;
            }
            else {
              int v19 = (char *)*((void *)a2 + 6);
            }
            LODWORD(v39[0]) = 136315138;
            *(void *)((char *)v39 + 4) = v19;
            _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, "Failed to read resource font from manifest, %s.", (uint8_t *)v39, 0xCu);
          }
          *(void *)&long long v35 = &unk_1EF5592F8;
          *((void *)&v35 + 1) = 0;
        }
        else
        {
          CFDataRef v13 = CFDataCreate(0, (const UInt8 *)buf, *((void *)&buf + 1) - buf);
          *(void *)&v39[0] = &unk_1EF5592B8;
          *((void *)&v39[0] + 1) = v13;
          if (v13)
          {
            BOOL v14 = CGDataProviderCreateWithCFData(v13);
            *(void *)&v38[0] = &unk_1EF559038;
            *((void *)&v38[0] + 1) = v14;
            if (v14)
            {
              *(void *)&long long v37 = &unk_1EF5590D8;
              *((void *)&v37 + 1) = CGFontCreateWithDataProvider(v14);
              CFRelease(*((CFTypeRef *)&v38[0] + 1));
              *((void *)&v38[0] + 1) = 0;
              if (*((void *)&v37 + 1))
              {
                CTFontRef v15 = CTFontCreateWithGraphicsFont(*((CGFontRef *)&v37 + 1), *((float *)a2 + 4), 0, 0);
                *(void *)&long long v36 = &unk_1EF5592F8;
                *((void *)&v36 + 1) = v15;
                if (v15)
                {
                  *(void *)&long long v35 = &unk_1EF5592F8;
                  *((void *)&v35 + 1) = v15;
                }
                else
                {
                  if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
                    dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
                  }
                  float v31 = GEOGetGeoResourceLibCoreFoundationLog::log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                  {
                    double v32 = (char *)a2 + 72;
                    if (*((char *)a2 + 95) < 0) {
                      double v32 = (char *)*((void *)a2 + 9);
                    }
                    LODWORD(v35) = 136315138;
                    *(void *)((char *)&v35 + 4) = v32;
                    _os_log_impl(&dword_1A1780000, v31, OS_LOG_TYPE_ERROR, "Failed to create CTFont from CGFont for font name \"%s\".", (uint8_t *)&v35, 0xCu);
                  }
                  *(void *)&long long v35 = &unk_1EF5592F8;
                  *((void *)&v35 + 1) = 0;
                  *(void *)&long long v36 = &unk_1EF5592F8;
                  if (*((void *)&v36 + 1)) {
                    CFRelease(*((CFTypeRef *)&v36 + 1));
                  }
                }
              }
              else
              {
                if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1) {
                  dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_37_0);
                }
                float v29 = GEOGetGeoResourceLibCoreGraphicsLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
                {
                  if (*((char *)a2 + 71) >= 0) {
                    float v30 = (char *)a2 + 48;
                  }
                  else {
                    float v30 = (char *)*((void *)a2 + 6);
                  }
                  LODWORD(v36) = 136315138;
                  *(void *)((char *)&v36 + 4) = v30;
                  _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_ERROR, "Failed to create CGFont from data provider for font name \"%s\".", (uint8_t *)&v36, 0xCu);
                }
                *(void *)&long long v35 = &unk_1EF5592F8;
                *((void *)&v35 + 1) = 0;
              }
              *(void *)&long long v37 = &unk_1EF5590D8;
              if (*((void *)&v37 + 1)) {
                CFRelease(*((CFTypeRef *)&v37 + 1));
              }
            }
            else
            {
              if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
                dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
              }
              float v27 = GEOGetGeoResourceLibCoreFoundationLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
              {
                if (*((char *)a2 + 71) >= 0) {
                  float v28 = (char *)a2 + 48;
                }
                else {
                  float v28 = (char *)*((void *)a2 + 6);
                }
                LODWORD(v37) = 136315138;
                *(void *)((char *)&v37 + 4) = v28;
                _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Failed to create CFDataProvider for font name \"%s\".", (uint8_t *)&v37, 0xCu);
              }
              *(void *)&long long v35 = &unk_1EF5592F8;
              *((void *)&v35 + 1) = 0;
            }
            uint64_t v11 = (char *)a2 + 72;
            *(void *)&v38[0] = &unk_1EF559038;
            if (*((void *)&v38[0] + 1)) {
              CFRelease(*((CFTypeRef *)&v38[0] + 1));
            }
          }
          else
          {
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
            }
            float v22 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              if (*((char *)a2 + 71) >= 0) {
                float v23 = (char *)a2 + 48;
              }
              else {
                float v23 = (char *)*((void *)a2 + 6);
              }
              LODWORD(v38[0]) = 136315138;
              *(void *)((char *)v38 + 4) = v23;
              _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, "Failed to generate CFData for font from manifest with name \"%s\".", (uint8_t *)v38, 0xCu);
            }
            *(void *)&long long v35 = &unk_1EF5592F8;
            *((void *)&v35 + 1) = 0;
          }
          *(void *)&v39[0] = &unk_1EF5592B8;
          if (*((void *)&v39[0] + 1)) {
            CFRelease(*((CFTypeRef *)&v39[0] + 1));
          }
        }
        if ((void)buf)
        {
          *((void *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
      }
      else
      {
        if (GEOGetGeoResourceLibFontLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_17_0);
        }
        int v17 = GEOGetGeoResourceLibFontLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1A1780000, v17, OS_LOG_TYPE_ERROR, "Font name is empty, can't create font.", (uint8_t *)&buf, 2u);
        }
        *(void *)&long long v35 = &unk_1EF5592F8;
        *((void *)&v35 + 1) = 0;
      }
      float v26 = (const void *)*((void *)&v35 + 1);
    }
    else
    {
      grl::FontKey::createDescriptor(a2, &buf);
      if (*((void *)&buf + 1))
      {
        CTFontRef v16 = CTFontCreateWithFontDescriptor(*((CTFontDescriptorRef *)&buf + 1), *((float *)a2 + 4), 0);
        *(void *)&v39[0] = &unk_1EF5592F8;
        *((void *)&v39[0] + 1) = v16;
        if (v16)
        {
          *(void *)&v38[0] = &unk_1EF5592F8;
          *((void *)&v38[0] + 1) = v16;
        }
        else
        {
          if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
          }
          float v24 = GEOGetGeoResourceLibCoreFoundationLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a2 + 95) >= 0) {
              unint64_t v25 = (char *)a2 + 72;
            }
            else {
              unint64_t v25 = (char *)*((void *)a2 + 9);
            }
            LODWORD(v38[0]) = 136315138;
            *(void *)((char *)v38 + 4) = v25;
            _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "Failed to create CTFont for font name \"%s\".", (uint8_t *)v38, 0xCu);
          }
          *(void *)&v38[0] = &unk_1EF5592F8;
          *((void *)&v38[0] + 1) = 0;
          *(void *)&v39[0] = &unk_1EF5592F8;
          if (*((void *)&v39[0] + 1)) {
            CFRelease(*((CFTypeRef *)&v39[0] + 1));
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
        }
        float v20 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a2 + 95) >= 0) {
            float v21 = (char *)a2 + 72;
          }
          else {
            float v21 = (char *)*((void *)a2 + 9);
          }
          LODWORD(v39[0]) = 136315138;
          *(void *)((char *)v39 + 4) = v21;
          _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Failed to create CTFontDescriptor for font name \"%s\".", (uint8_t *)v39, 0xCu);
        }
        *(void *)&v38[0] = &unk_1EF5592F8;
        *((void *)&v38[0] + 1) = 0;
      }
      *(void *)&long long buf = &unk_1EF559278;
      if (*((void *)&buf + 1)) {
        CFRelease(*((CFTypeRef *)&buf + 1));
      }
      float v26 = (const void *)*((void *)&v38[0] + 1);
    }
    if (!v26)
    {
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_33_0);
      }
      float v33 = GEOGetGeoResourceLibCoreFoundationLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a2 + 95) >= 0) {
          uint64_t v34 = v11;
        }
        else {
          uint64_t v34 = (char *)*((void *)a2 + 9);
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v34;
        _os_log_impl(&dword_1A1780000, v33, OS_LOG_TYPE_ERROR, "Failed to load a font from disk/manifest for font name \"%s\".", (uint8_t *)&buf, 0xCu);
      }
      CFTypeRef v10 = 0;
      *a3 = &unk_1EF5592F8;
      goto LABEL_107;
    }
    CFRetain(v26);
    geo::Cache<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>,geo::LRUPolicy>::insert((uint64_t)v8, a2, v26);
    CFRelease(v26);
    *a3 = &unk_1EF5592F8;
    a3[1] = v26;
  }
  else
  {
    *a3 = &unk_1EF5592F8;
    a3[1] = 0;
  }
LABEL_108:
  std::mutex::unlock(v6);
}

uint64_t grl::FontKey::FontKey(uint64_t a1, long long *a2, float a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)esl::FontKey::FontKey(a1, a2, 4, a3);
  *uint64_t v4 = &unk_1EF5672D0;
  memset(&__p, 0, sizeof(__p));
  int v5 = esl::FontKey::initialize((uint64_t)v4, &__p);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 3)
    {
      if (GEOGetGeoResourceLibFontLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_17_0);
      }
      uint64_t v11 = GEOGetGeoResourceLibFontLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        CTFontRef v16 = p_p;
        id v8 = "%s";
        uint64_t v9 = v11;
        uint32_t v10 = 12;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibFontLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_17_0);
    }
    uint64_t v6 = GEOGetGeoResourceLibFontLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      CTFontRef v16 = v7;
      __int16 v17 = 2080;
      int v18 = "false";
      __int16 v19 = 2080;
      float v20 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
      __int16 v21 = 1024;
      int v22 = 42;
      id v8 = "%s: Assertion with expression - %s : Failed in file - %s line - %i";
      uint64_t v9 = v6;
      uint32_t v10 = 38;
LABEL_15:
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

uint64_t esl::FontKey::FontKey(uint64_t a1, long long *a2, char a3, float a4)
{
  *(void *)a1 = &unk_1EF554E58;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 1120403456;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = a3;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "");
  uint64_t v6 = (std::string *)(a1 + 72);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 88) = *((void *)a2 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  return a1;
}

void sub_1A18B0300(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  geo::optional<int>::~optional(v3);
  geo::optional<float>::~optional(v1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t esl::FontKey::initialize(uint64_t a1, std::string *a2)
{
  size_t v4 = (const std::string *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(void *)(a1 + 80) < 2uLL) {
      goto LABEL_19;
    }
    size_t v5 = (unsigned char *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    size_t v5 = (unsigned char *)(a1 + 72);
    if (*(unsigned __int8 *)(a1 + 95) < 2u) {
      goto LABEL_19;
    }
  }
  if (*v5 == 37)
  {
    esl::FontKey::tokenize((std::string *)(a1 + 72), &v62);
    unint64_t v6 = v64;
    if (v64 < 2)
    {
LABEL_8:
      std::operator+<char>();
      uint64_t v7 = std::string::append(&v60, "\".");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      unsigned __int8 v11 = 1;
LABEL_168:
      std::__list_imp<std::string>::clear(&v62);
      return v11;
    }
    uint64_t v12 = v63;
    CFDataRef v13 = (const std::string::value_type **)(v63 + 16);
    if (*(char *)(v63 + 39) < 0)
    {
      std::string::size_type v14 = *(void *)(v63 + 24);
      if (!v14) {
        goto LABEL_8;
      }
      std::string::__init_copy_ctor_external(&__p, *v13, v14);
      uint64_t v12 = v63;
      unint64_t v6 = v64;
    }
    else
    {
      if (!*(unsigned char *)(v63 + 39)) {
        goto LABEL_8;
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v63 + 32);
    }
    CTFontRef v15 = *(void **)v12;
    v15[1] = *(void *)(v12 + 8);
    **(void **)(v12 + 8) = v15;
    unint64_t v64 = v6 - 1;
    std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)&v62, (void **)v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_34;
      }
      int v16 = *__p.__r_.__value_.__l.__data_;
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_34;
      }
      int v16 = __p.__r_.__value_.__s.__data_[0];
    }
    if (v16 == 33)
    {
      *(unsigned char *)(a1 + 11) = 1;
      std::string::operator=((std::string *)(a1 + 48), (const std::string *)(v63 + 16));
LABEL_154:
      unsigned __int8 v11 = 0;
LABEL_166:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_168;
    }
    if (v16 == 36)
    {
      *(unsigned char *)(a1 + 13) = 1;
LABEL_36:
      uint64_t v17 = v63;
      if ((uint64_t *)v63 == &v62) {
        goto LABEL_154;
      }
      unsigned __int8 v11 = 0;
      uint64_t v57 = (unsigned char *)(a1 + 32);
      while (1)
      {
        int v18 = (_DWORD *)(v17 + 16);
        int v19 = *(unsigned __int8 *)(v17 + 39);
        if (*(char *)(v17 + 39) < 0)
        {
          float v20 = *(char **)(v17 + 16);
          uint64_t v21 = *(void *)(v17 + 24);
          if (v21 == 6 && *(_DWORD *)v20 == 1818326121 && *((_WORD *)v20 + 2) == 25449)
          {
LABEL_67:
            *(unsigned char *)(a1 + 10) = 1;
            goto LABEL_128;
          }
          if (v21 == 7)
          {
            if (*(_DWORD *)v20 == 1853190002 && *(_DWORD *)(v20 + 3) == 1684366446)
            {
LABEL_73:
              *(unsigned char *)(a1 + 12) = 1;
              goto LABEL_128;
            }
            float v20 = *(char **)(v17 + 16);
            uint64_t v21 = *(void *)(v17 + 24);
          }
          if (v21 != 9) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v19 == 6)
          {
            if (*v18 == 1818326121 && *(_WORD *)(v17 + 20) == 25449) {
              goto LABEL_67;
            }
            goto LABEL_87;
          }
          if (v19 == 7)
          {
            BOOL v26 = *v18 == 1853190002 && *(_DWORD *)(v17 + 19) == 1684366446;
            float v20 = (char *)(v17 + 16);
            if (v26) {
              goto LABEL_73;
            }
            goto LABEL_77;
          }
          float v20 = (char *)(v17 + 16);
          if (v19 != 9) {
            goto LABEL_87;
          }
        }
        if (*(void *)v20 == 0x65736E65646E6F63 && v20[8] == 100)
        {
          *(unsigned char *)(a1 + 9) = 1;
          goto LABEL_128;
        }
        if ((v19 & 0x80) != 0)
        {
          float v20 = *(char **)(v17 + 16);
          uint64_t v21 = *(void *)(v17 + 24);
LABEL_76:
          if (v21 != 7) {
            goto LABEL_88;
          }
          goto LABEL_77;
        }
        float v20 = (char *)(v17 + 16);
        if (v19 != 7) {
          goto LABEL_87;
        }
LABEL_77:
        if (*(_DWORD *)v20 == 1886220131 && *(_DWORD *)(v20 + 3) == 1952670064)
        {
          *(unsigned char *)(a1 + 8) = 1;
          goto LABEL_128;
        }
        if ((v19 & 0x80) == 0)
        {
          if (v19 == 7 && *v18 == 1634100580 && *(_DWORD *)(v17 + 19) == 1953264993) {
            goto LABEL_128;
          }
LABEL_87:
          uint64_t v21 = *(unsigned __int8 *)(v17 + 39);
          float v20 = (char *)(v17 + 16);
          goto LABEL_88;
        }
        float v20 = *(char **)(v17 + 16);
        uint64_t v21 = *(void *)(v17 + 24);
        if (v21 == 7)
        {
          if (*(_DWORD *)v20 == 1634100580 && *(_DWORD *)(v20 + 3) == 1953264993) {
            goto LABEL_128;
          }
          float v29 = v20 + 7;
          uint64_t v21 = 7;
          goto LABEL_90;
        }
LABEL_88:
        if (v21 < 6) {
          goto LABEL_103;
        }
        float v29 = &v20[v21];
LABEL_90:
        float v30 = v20;
        do
        {
          float v31 = (char *)memchr(v30, 119, v21 - 5);
          if (!v31) {
            break;
          }
          if (*(_DWORD *)v31 == 1952737655 && *((_WORD *)v31 + 2) == 15720)
          {
            if (v31 == v29 || v31 - v20 == -1) {
              break;
            }
            uint64_t v33 = std::string::rfind[abi:ne180100]((unsigned __int8 *)(v17 + 16), "=", 0xFFFFFFFFFFFFFFFFLL);
            std::string::basic_string(&v60, (const std::string *)(v17 + 16), v33 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v59);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            {
              uint64_t v46 = (void *)v60.__r_.__value_.__r.__words[0];
              double v34 = atof(v60.__r_.__value_.__l.__data_);
              operator delete(v46);
            }
            else
            {
              double v34 = atof((const char *)&v60);
            }
            float v47 = v34;
            if (v47 != 0.0) {
              *(float *)(a1 + 20) = v47;
            }
            goto LABEL_128;
          }
          float v30 = v31 + 1;
          uint64_t v21 = v29 - (unsigned char *)v30;
        }
        while (v29 - (unsigned char *)v30 >= 6);
LABEL_103:
        if (std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "styl-alt=", 0) != -1)
        {
          unint64_t v35 = std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "=", 0);
          std::string::basic_string(&v60, (const std::string *)(v17 + 16), v35 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v59);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v36 = &v60;
          }
          else {
            long long v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v37 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v37 = v60.__r_.__value_.__l.__size_;
          }
          esl::FontKey::parseStylisticAlternates((void *)a1, (uint64_t)v36, v37);
          goto LABEL_111;
        }
        if (std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "lower-case=", 0) == -1)
        {
          std::string::size_type v40 = std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "-g", 0);
          std::string::basic_string(&v60, (const std::string *)(v17 + 16), 0, v40, (std::allocator<char> *)&v59);
          esl::toFontWeight(&v60, &v58);
          if ((_BYTE)v58)
          {
            *(unsigned char *)(a1 + 40) = *geo::optional<esl::FontWeight>::value(&v58);
            if (v40 != -1)
            {
              std::string::basic_string(&v59, (const std::string *)(v17 + 16), v40 + 2, 1uLL, (std::allocator<char> *)v65);
              if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              {
                uint64_t v48 = (void *)v59.__r_.__value_.__r.__words[0];
                int v41 = atoi(v59.__r_.__value_.__l.__data_);
                operator delete(v48);
              }
              else
              {
                int v41 = atoi((const char *)&v59);
              }
              if (v41 <= 1) {
                int v49 = 1;
              }
              else {
                int v49 = v41;
              }
              if (v49 >= 4) {
                int v50 = 4;
              }
              else {
                int v50 = v49;
              }
              if (*v57)
              {
                *(_DWORD *)geo::optional<int>::value(v57) = v50;
              }
              else
              {
                *(_DWORD *)(a1 + 36) = v50;
                *(unsigned char *)(a1 + 32) = 1;
              }
              float v51 = (float)*(int *)geo::optional<int>::value(v57) / 5.0;
              v59.__r_.__value_.__s.__data_[0] = 1;
              *((float *)v59.__r_.__value_.__r.__words + 1) = v51;
              geo::optional<float>::operator=(a1 + 24, &v59);
              geo::optional<float>::~optional(&v59);
            }
          }
          else
          {
            std::operator+<char>();
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CTLineRef v44 = &v59;
            }
            else {
              CTLineRef v44 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v45 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v45 = v59.__r_.__value_.__l.__size_;
            }
            std::string::append(a2, (const std::string::value_type *)v44, v45);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
            unsigned __int8 v11 = 3;
          }
          geo::optional<esl::FontWeight>::~optional(&v58);
LABEL_111:
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            float v38 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_127:
            operator delete(v38);
            goto LABEL_128;
          }
          goto LABEL_128;
        }
        unint64_t v39 = std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "=", 0);
        std::string::basic_string(&v60, (const std::string *)(v17 + 16), v39 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v59);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v43 = v60.__r_.__value_.__r.__words[0];
          *(unsigned char *)(a1 + 120) = atoi(v60.__r_.__value_.__l.__data_);
          float v38 = (void *)v43;
          goto LABEL_127;
        }
        *(unsigned char *)(a1 + 120) = atoi((const char *)&v60);
LABEL_128:
        uint64_t v17 = *(void *)(v17 + 8);
        if ((uint64_t *)v17 == &v62) {
          goto LABEL_166;
        }
      }
    }
LABEL_34:
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "&"))
    {
      std::operator+<char>();
      unint64_t v52 = std::string::append(&v59, "\".");
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v54 = &v60;
      }
      else {
        uint64_t v54 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v55 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v55 = v60.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v54, v55);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      unsigned __int8 v11 = 2;
      goto LABEL_166;
    }
    *(unsigned char *)(a1 + 13) = 1;
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(v63 + 16));
    goto LABEL_36;
  }
LABEL_19:
  std::string::operator=((std::string *)(a1 + 48), v4);
  return 0;
}

void sub_1A18B0C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::__list_imp<std::string>::clear(&a33);
  _Unwind_Resume(a1);
}

void esl::FontKey::~FontKey(esl::FontKey *this)
{
  *(void *)this = &unk_1EF554E58;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  geo::optional<int>::~optional((unsigned char *)this + 32);
  geo::optional<float>::~optional((unsigned char *)this + 24);
}

{
  uint64_t vars8;

  esl::FontKey::~FontKey(this);
  JUMPOUT(0x1A6239270);
}

unsigned char *geo::optional<float>::~optional(unsigned char *a1)
{
  if (*a1)
  {
    geo::optional<int>::value(a1);
    *a1 = 0;
  }
  return a1;
}

unsigned char *geo::optional<int>::~optional(unsigned char *a1)
{
  if (*a1)
  {
    geo::optional<int>::value(a1);
    *a1 = 0;
  }
  return a1;
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)(v5 + a3);
    uint32_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        int v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        uint64_t v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        uint64_t v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    uint64_t v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

unsigned char *geo::optional<int>::value(unsigned char *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    printf("%s : Assertion with expression - %s : Failed in file - %s line - %i\n", "optional has no value. Undefined behavior.", "_hasValue", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/GeoStdLib/Optional.hpp", 355);
    int v5 = 0;
    *(void *)unint64_t v6 = 0xE00000001;
    int v7 = 1;
    pid_t v8 = getpid();
    size_t v3 = 648;
    if (!sysctl(v6, 4u, v4, &v3, 0, 0) && (v5 & 0x800) != 0) {
      __debugbreak();
    }
  }
  return a1 + 4;
}

uint64_t geo::LRUPolicy<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>>::get(uint64_t a1, void *a2, esl::FontKey *this)
{
  size_t v4 = std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<grl::FontKey>(a2, this);
  if (v4)
  {
    int v5 = *(uint64_t **)(a1 + 8);
    unint64_t v6 = (uint64_t *)v4[18];
    if (v5 == v6) {
      return *(void *)(a1 + 8);
    }
    int v7 = (uint64_t *)v6[1];
    if (v7 == v5)
    {
      return *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = v7;
      *(void *)v6[1] = v8;
      uint64_t v9 = *v5;
      *(void *)(v9 + 8) = v6;
      *unint64_t v6 = v9;
      *int v5 = (uint64_t)v6;
      v6[1] = (uint64_t)v5;
      return *(void *)(a1 + 8);
    }
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<grl::FontKey>(void *a1, esl::FontKey *this)
{
  unint64_t v4 = esl::FontKey::hash(this);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint32_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (esl::FontKey::operator==((uint64_t)(v11 + 2), (uint64_t)this)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      int64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t esl::FontKey::hash(esl::FontKey *this)
{
  float v2 = *((float *)this + 4);
  float v3 = *((float *)this + 5);
  unint64_t v4 = ((*((unsigned __int8 *)this + 9) | ((*((unsigned __int8 *)this + 8) - 0x61C8864680B583EBLL) << 6))
      - 0x3A3AA7D820E2E4E6) ^ (*((unsigned __int8 *)this + 8) - 0x61C8864680B583EBLL);
  unint64_t v5 = ((*((unsigned __int8 *)this + 10) | (v4 << 6)) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  unint64_t v6 = ((*((unsigned __int8 *)this + 11) | (v5 << 6)) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v7 = ((*((unsigned __int8 *)this + 12) | (v6 << 6)) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  unint64_t v8 = ((*((unsigned __int8 *)this + 13) | (v7 << 6)) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  uint64_t v9 = LODWORD(v2) - 0x61C8864680B583EBLL;
  if (v2 == 0.0) {
    uint64_t v9 = 0x9E3779B97F4A7C15;
  }
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  uint64_t v11 = LODWORD(v3) - 0x61C8864680B583EBLL;
  if (v3 == 0.0) {
    uint64_t v11 = 0x9E3779B97F4A7C15;
  }
  unint64_t v12 = (v11 + (v10 << 6) + (v10 >> 2)) ^ v10;
  unint64_t v13 = (*((unsigned __int8 *)this + 40) + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
  unint64_t v14 = (std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, (uint64_t)this + 48)
       + (v13 << 6)
       + (v13 >> 2)
       - 0x61C8864680B583EBLL) ^ v13;
  return (std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, (uint64_t)this + 72)
        + (v14 << 6)
        + (v14 >> 2)
        - 0x61C8864680B583EBLL) ^ v14;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

BOOL esl::FontKey::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a1 + 8)
      && *(unsigned __int8 *)(a2 + 9) == *(unsigned __int8 *)(a1 + 9)
      && *(unsigned __int8 *)(a2 + 10) == *(unsigned __int8 *)(a1 + 10)
      && *(unsigned __int8 *)(a2 + 11) == *(unsigned __int8 *)(a1 + 11)
      && *(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12)
      && *(unsigned __int8 *)(a2 + 13) == *(unsigned __int8 *)(a1 + 13)
      && *(float *)(a2 + 16) == *(float *)(a1 + 16)
      && *(unsigned __int8 *)(a2 + 40) == *(unsigned __int8 *)(a1 + 40)
      && *(float *)(a2 + 20) == *(float *)(a1 + 20)
      && !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(a2 + 48), (unsigned __int8 *)(a1 + 48))&& !std::operator!=[abi:ne180100]<int,std::allocator<int>>(a2 + 96, a1 + 96)&& !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(a2 + 72), (unsigned __int8 *)(a1 + 72));
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL std::operator!=[abi:ne180100]<int,std::allocator<int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a1;
  size_t v4 = *(void *)(a1 + 8) - (void)v2;
  int v5 = *(const void **)a2;
  return v4 != *(void *)(a2 + 8) - (void)v5 || memcmp(v2, v5, v4) != 0;
}

unsigned char *geo::optional<esl::FontWeight>::value(unsigned char *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    printf("%s : Assertion with expression - %s : Failed in file - %s line - %i\n", "optional has no value. Undefined behavior.", "_hasValue", "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/GeoStdLib/Optional.hpp", 355);
    int v5 = 0;
    *(void *)uint64_t v6 = 0xE00000001;
    int v7 = 1;
    pid_t v8 = getpid();
    size_t v3 = 648;
    if (!sysctl(v6, 4u, v4, &v3, 0, 0) && (v5 & 0x800) != 0) {
      __debugbreak();
    }
  }
  return a1 + 1;
}

void std::__list_imp<std::string>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    size_t v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

uint64_t std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(v3, a2[1]);
    size_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

unsigned char *geo::optional<esl::FontWeight>::~optional(unsigned char *a1)
{
  if (*a1)
  {
    geo::optional<esl::FontWeight>::value(a1);
    *a1 = 0;
  }
  return a1;
}

void *esl::toFontWeight@<X0>(void *result@<X0>, __int16 *a2@<X8>)
{
  uint64_t v2 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    int v4 = *((unsigned __int8 *)result + 23);
    uint64_t v5 = result;
    switch(*((unsigned char *)result + 23))
    {
      case 4:
        if (*(_DWORD *)result != 1852401780) {
          goto LABEL_62;
        }
        goto LABEL_45;
      case 5:
        if (*(_DWORD *)result == 1751607660 && *((unsigned char *)result + 4) == 116) {
          goto LABEL_46;
        }
        if (v4 != 4 || *(_DWORD *)result != 1852401780) {
          goto LABEL_62;
        }
        goto LABEL_45;
      case 6:
        goto LABEL_52;
      case 7:
        if (*(_DWORD *)result == 1969710450 && *(_DWORD *)((char *)result + 3) == 1918987381) {
          goto LABEL_69;
        }
        if (v4 != 6) {
          goto LABEL_62;
        }
LABEL_52:
        if (*(_DWORD *)result != 1768187245 || *((_WORD *)result + 2) != 28021) {
          goto LABEL_62;
        }
        goto LABEL_57;
      case 8:
        goto LABEL_34;
      case 0xA:
        if (*result != 0x67696C6172746C75 || *((_WORD *)result + 4) != 29800) {
          goto LABEL_62;
        }
        goto LABEL_68;
      default:
        goto LABEL_62;
    }
  }
  uint64_t v6 = result[1];
  if (v6 == 5)
  {
    if (*(_DWORD *)*result == 1751607660 && *(unsigned char *)(*result + 4) == 116)
    {
LABEL_46:
      __int16 v11 = 257;
      goto LABEL_70;
    }
    uint64_t v6 = result[1];
  }
  else if (v6 == 10 && *(void *)*result == 0x67696C6172746C75 && *(_WORD *)(*result + 8) == 29800)
  {
LABEL_68:
    __int16 v11 = 1;
    goto LABEL_70;
  }
  if (v6 == 4)
  {
    if (*(_DWORD *)*result == 1852401780)
    {
LABEL_45:
      __int16 v11 = 513;
      goto LABEL_70;
    }
    uint64_t v6 = result[1];
  }
  if (v6 == 7)
  {
    if (*(_DWORD *)*result == 1969710450 && *(_DWORD *)(*result + 3) == 1918987381)
    {
LABEL_69:
      __int16 v11 = 769;
      goto LABEL_70;
    }
    uint64_t v6 = result[1];
  }
  if (v6 == 6)
  {
    if (*(_DWORD *)*result == 1768187245 && *(_WORD *)(*result + 4) == 28021)
    {
LABEL_57:
      __int16 v11 = 1025;
      goto LABEL_70;
    }
    uint64_t v6 = result[1];
  }
  if (v6 == 8)
  {
    uint64_t v5 = (void *)*result;
LABEL_34:
    if (*v5 == 0x646C6F62696D6573)
    {
      __int16 v11 = 1281;
LABEL_70:
      *a2 = v11;
      return result;
    }
  }
LABEL_62:
  float result = (void *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("bold", result);
  if (result)
  {
    __int16 v11 = 1537;
    goto LABEL_70;
  }
  float result = (void *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("heavy", v2);
  if (result)
  {
    __int16 v11 = 1793;
    goto LABEL_70;
  }
  float result = (void *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("black", v2);
  if (result)
  {
    __int16 v11 = 2049;
    goto LABEL_70;
  }
  *(unsigned char *)a2 = 0;
  return result;
}

uint64_t std::string::rfind[abi:ne180100](unsigned __int8 *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = a1;
  if ((char)a1[23] < 0)
  {
    uint64_t v5 = *(unsigned __int8 **)a1;
    unint64_t v6 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v6 = a1[23];
  }
  size_t v7 = strlen(__s);
  if (v6 >= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = v6;
  }
  size_t v9 = v6 - v8;
  size_t v10 = v8 + v7;
  if (v9 <= v7) {
    size_t v11 = v6;
  }
  else {
    size_t v11 = v10;
  }
  unint64_t v12 = &v5[v11];
  if (v7 && v11)
  {
    unint64_t v13 = v5;
    unint64_t v14 = &v5[v11];
    do
    {
      if (*v13 == *__s)
      {
        uint64_t v15 = 1;
        while (v7 != v15)
        {
          if (&v13[v15] == v12) {
            goto LABEL_23;
          }
          int v16 = v13[v15];
          int v17 = __s[v15++];
          if (v16 != v17) {
            goto LABEL_14;
          }
        }
        unint64_t v14 = v13;
      }
LABEL_14:
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
    unint64_t v14 = &v5[v11];
  }
LABEL_23:
  if (v14 != v12 || v7 == 0) {
    return v14 - v5;
  }
  else {
    return -1;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const char *a1, void *a2)
{
  size_t v4 = strlen(a1);
  if (*((char *)a2 + 23) < 0)
  {
    if (v4 == a2[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a2 = (void *)*a2;
      return memcmp(a2, a1, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a2 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a2, a1, v4) == 0;
  }
  return 0;
}

float md::CurvedTextLabelPart::updateForDisplay(md::CurvedTextLabelPart *this)
{
  uint64_t v2 = (char *)this + 968;
  md::TextLabelPart::updateForDisplay(this);
  if (*((unsigned char *)this + 1463))
  {
    *((unsigned char *)this + 1463) = 0;
    *((unsigned char *)this + 1331) = 1;
    (*(void (**)(void, char *))(**((void **)this + 134) + 24))(*((void *)this + 134), (char *)this + 1264);
    *((unsigned char *)this + 1334) = (*(uint64_t (**)(void))(**((void **)this + 158) + 80))(*((void *)this + 158));
    if (!*((unsigned char *)this + 1336))
    {
      *((unsigned char *)this + 1328) = *((unsigned char *)this + 1136);
      *((unsigned char *)this + 1333) = *((unsigned char *)this + 1141);
    }
  }
  *((_DWORD *)this + 335) = *((_DWORD *)this + 287);
  uint64_t v3 = *(void *)v2;
  *((_DWORD *)v2 + 50) = *((_DWORD *)v2 + 2);
  *((void *)v2 + 24) = v3;
  float result = *((float *)this + 246);
  *((float *)this + 294) = result;
  *((unsigned char *)this + 556) = 4 * *((unsigned char *)this + 1138);
  return result;
}

void md::StandardLabeler::synchStagingWithDisplay(md::StandardLabeler *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v156 = 0;
  long long v157 = 0;
  unint64_t v158 = 0;
  {
    operator new();
  }
  uint64_t v159 = mdm::Allocator::instance(void)::alloc;
  size_t v4 = (long long *)*((void *)this + 13);
  uint64_t v3 = (uint64_t *)*((void *)this + 14);
  float64x2_t v151 = this;
  if (v4 == (long long *)v3) {
    goto LABEL_36;
  }
  uint64_t v5 = (long long *)*((void *)this + 14);
  while (1)
  {
    if (*(unsigned char *)(*(void *)v4 + 820) != 2)
    {
      unsigned __int8 v6 = atomic_load((unsigned __int8 *)(*(void *)v4 + 1243));
      if ((v6 & 1) == 0)
      {
        uint64_t v7 = *(void *)v4;
        *(unsigned char *)(v7 + 1252) = 0;
        if (!*(unsigned char *)(v7 + 1072)) {
          break;
        }
      }
    }
    if (++v4 == (long long *)v3) {
      goto LABEL_37;
    }
  }
  unint64_t v8 = v157;
  if ((unint64_t)v157 >= v158)
  {
    size_t v10 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v156, v4);
  }
  else
  {
    if (v157)
    {
      void *v157 = v7;
      uint64_t v9 = *((void *)v4 + 1);
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
    }
    size_t v10 = v8 + 2;
  }
  long long v157 = v10;
  size_t v11 = *(md::Label **)v4;
  if (*(unsigned char *)(*(void *)v4 + 1251))
  {
    *((unsigned char *)v11 + 1251) = 0;
    md::Label::clearAnimation(v11);
  }
  if (v4 != (long long *)v3)
  {
    unint64_t v12 = (uint64_t *)(v4 + 1);
    if (v4 + 1 != (long long *)v3)
    {
      uint64_t v5 = v4;
      do
      {
        unint64_t v13 = (unsigned char *)*v12;
        if (*(unsigned char *)(*v12 + 820) == 2
          || (v14 = atomic_load(v13 + 1243), unint64_t v13 = (unsigned char *)*v12, (v14 & 1) != 0)
          || (v13[1252] = 0, v13[1072]))
        {
          uint64_t v15 = v12[1];
          *unint64_t v12 = 0;
          v12[1] = 0;
          int v16 = (std::__shared_weak_count *)*((void *)v5 + 1);
          *(void *)uint64_t v5 = v13;
          *((void *)v5 + 1) = v15;
          if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          ++v5;
        }
        else
        {
          int v17 = v157;
          if ((unint64_t)v157 >= v158)
          {
            uint64_t v19 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v156, (long long *)v12);
          }
          else
          {
            if (v157)
            {
              void *v157 = v13;
              uint64_t v18 = v12[1];
              v17[1] = v18;
              if (v18) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
              }
            }
            uint64_t v19 = v17 + 2;
          }
          long long v157 = v19;
          uint64_t v20 = (md::Label *)*v12;
          if (*(unsigned char *)(*v12 + 1251))
          {
            *((unsigned char *)v20 + 1251) = 0;
            md::Label::clearAnimation(v20);
          }
        }
        v12 += 2;
      }
      while (v12 != v3);
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v5 = v4;
  }
LABEL_37:
  uint64_t v21 = (void *)((char *)v151 + 104);
  std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase((uint64_t)v151 + 104, (uint64_t)v5, *((void *)v151 + 14));
  long long v152 = 0;
  long long v153 = 0;
  unint64_t v154 = 0;
  {
    operator new();
  }
  uint64_t v155 = mdm::Allocator::instance(void)::alloc;
  int v22 = v151;
  unint64_t v24 = (long long *)*((void *)v151 + 9);
  uint64_t v23 = (uint64_t *)*((void *)v151 + 10);
  if (v24 != (long long *)v23)
  {
    while (1)
    {
      uint64_t v25 = *(void *)v24;
      if (*(unsigned char *)(*(void *)v24 + 820) == 2) {
        break;
      }
LABEL_40:
      if (++v24 == (long long *)v23) {
        goto LABEL_87;
      }
    }
    if (*(unsigned char *)(v25 + 1251))
    {
LABEL_79:
      int v49 = *(unsigned __int8 *)(v25 + 1252);
      *(unsigned char *)(v25 + 1252) = 1;
      if (!v49)
      {
        md::Label::clearAnimation((md::Label *)v25);
        int v22 = v151;
        if (!*(unsigned char *)(v25 + 1283))
        {
          uint64_t v50 = *(void *)(v25 + 272);
          if (v50) {
            *(unsigned char *)(v50 + 560) = 1;
          }
        }
      }
      goto LABEL_40;
    }
    uint64_t v26 = v153;
    if ((unint64_t)v153 >= v154)
    {
      uint64_t v28 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v152, v24);
      int v22 = v151;
    }
    else
    {
      if (v153)
      {
        *(void *)long long v153 = v25;
        uint64_t v27 = *((void *)v24 + 1);
        *((void *)v26 + 1) = v27;
        if (v27) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
        }
      }
      uint64_t v28 = v26 + 1;
    }
    long long v153 = v28;
    if (!*(unsigned char *)(*(void *)v24 + 1251)) {
      *(unsigned char *)(*(void *)v24 + 1251) = 1;
    }
    uint64_t v29 = (void *)*((void *)v22 + 14);
    unint64_t v30 = *((void *)v22 + 15);
    if ((unint64_t)v29 < v30)
    {
      if (v29)
      {
        *uint64_t v29 = *(void *)v24;
        uint64_t v31 = *((void *)v24 + 1);
        v29[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
      }
      uint64_t v32 = v29 + 2;
      goto LABEL_78;
    }
    uint64_t v33 = ((uint64_t)v29 - *v21) >> 4;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60) {
      abort();
    }
    uint64_t v35 = v30 - *v21;
    if (v35 >> 3 > v34) {
      unint64_t v34 = v35 >> 3;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v36 = v34;
    }
    if (v36)
    {
      uint64_t v37 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v151 + 16) + 16))(*((void *)v151 + 16), 16 * v36, 8);
      unint64_t v38 = (long long *)(v37 + 16 * v33);
      uint64_t v39 = v37 + 16 * v36;
      if (v37)
      {
        long long v40 = *v24;
        *unint64_t v38 = *v24;
        int v22 = v151;
        if (*((void *)&v40 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
        }
LABEL_68:
        uint64_t v32 = v38 + 1;
        unint64_t v41 = (void *)*((void *)v22 + 13);
        float v42 = (void *)*((void *)v22 + 14);
        if (v42 == v41)
        {
          *((void *)v22 + 13) = v38;
          *((void *)v22 + 14) = v32;
          uint64_t v46 = *((void *)v22 + 15);
          *((void *)v22 + 15) = v39;
          if (!v42) {
            goto LABEL_78;
          }
        }
        else
        {
          do
          {
            long long v43 = *((_OWORD *)v42 - 1);
            v42 -= 2;
            *--unint64_t v38 = v43;
            *float v42 = 0;
            v42[1] = 0;
          }
          while (v42 != v41);
          CTLineRef v44 = v22;
          float v42 = (void *)*((void *)v22 + 13);
          std::string::size_type v45 = (void *)*((void *)v22 + 14);
          *((void *)v44 + 13) = v38;
          *((void *)v44 + 14) = v32;
          uint64_t v46 = *((void *)v44 + 15);
          *((void *)v44 + 15) = v39;
          if (v45 == v42)
          {
            int v22 = v151;
            if (!v42) {
              goto LABEL_78;
            }
          }
          else
          {
            float v47 = v21;
            do
            {
              uint64_t v48 = (std::__shared_weak_count *)*(v45 - 1);
              if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
              v45 -= 2;
            }
            while (v45 != v42);
            int v22 = v151;
            uint64_t v21 = v47;
            if (!v42) {
              goto LABEL_78;
            }
          }
        }
        (*(void (**)(void, void *, uint64_t))(**((void **)v22 + 16) + 40))(*((void *)v22 + 16), v42, v46 - (void)v42);
LABEL_78:
        *((void *)v22 + 14) = v32;
        uint64_t v25 = *(void *)v24;
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v39 = 0;
      unint64_t v38 = (long long *)(16 * v33);
    }
    int v22 = v151;
    goto LABEL_68;
  }
LABEL_87:
  float v51 = v156;
  unint64_t v52 = v157;
  if (v156 == v157)
  {
    char v53 = 0;
  }
  else
  {
    char v53 = 0;
    do
    {
      if (*(unsigned char *)(*v51 + 1254))
      {
        uint64_t v54 = *(void **)(v2 + 576);
        uint64_t v55 = *(void *)(v2 + 584);
        if (v54 != (void *)v55)
        {
          while (*v54 != *v51)
          {
            v54 += 2;
            if (v54 == (void *)v55)
            {
              uint64_t v54 = *(void **)(v2 + 584);
              break;
            }
          }
        }
        float v56 = v54 + 2;
        if (v54 != (void *)v55 && v56 != (uint64_t *)v55)
        {
          do
          {
            uint64_t v58 = *v56;
            if (*v56 != *v51)
            {
              uint64_t v59 = v56[1];
              uint64_t *v56 = 0;
              v56[1] = 0;
              std::string v60 = (std::__shared_weak_count *)v54[1];
              *uint64_t v54 = v58;
              v54[1] = v59;
              if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
              v54 += 2;
            }
            v56 += 2;
          }
          while (v56 != (uint64_t *)v55);
          uint64_t v55 = *(void *)(v2 + 584);
        }
        std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase(v2 + 576, (uint64_t)v54, v55);
        char v53 = 1;
      }
      v51 += 2;
    }
    while (v51 != v52);
  }
  uint64_t v61 = v152;
  uint64_t v62 = v153;
  if (v152 == v153)
  {
    unint64_t v64 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
  }
  else
  {
    uint64_t v63 = v152;
    unint64_t v64 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    do
    {
      if (*(unsigned char *)(*(void *)v63 + 1254))
      {
        size_t v66 = *(void **)(v2 + 584);
        if ((unint64_t)v66 >= *(void *)(v2 + 592))
        {
          size_t v65 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v2 + 576, v63);
        }
        else
        {
          if (v66)
          {
            *size_t v66 = *(void *)v63;
            uint64_t v67 = *((void *)v63 + 1);
            v66[1] = v67;
            if (v67) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
            }
          }
          size_t v65 = v66 + 2;
        }
        *(void *)(v2 + 584) = v65;
        char v53 = 1;
      }
      ++v63;
    }
    while (v63 != v62);
  }
  if (v53) {
    goto LABEL_123;
  }
  uint64_t v68 = *(void *)(v2 + 576);
  uint64_t v69 = *(void *)(v2 + 584);
  if (v68 != v69)
  {
    while (!*(unsigned char *)(*(void *)v68 + 1286))
    {
      v68 += 16;
      if (v68 == v69) {
        goto LABEL_127;
      }
    }
LABEL_123:
    ++*(_DWORD *)(v2 + 748);
  }
LABEL_127:
  if (*(_DWORD *)(v2 + 744) >= 0x14u)
  {
    *(_DWORD *)(v2 + 744) = 0;
    md::LabelPool::pruneCustomFeatureLabels(v2);
  }
  if (v61)
  {
    unint64_t v70 = v61;
    if (v61 != v62)
    {
      do
      {
        uint64_t v71 = (std::__shared_weak_count *)*((void *)v62 - 1);
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, long long *))v71->__on_zero_shared)(v71, v70);
          std::__shared_weak_count::__release_weak(v71);
        }
        --v62;
      }
      while (v62 != v61);
      int v22 = v151;
      unint64_t v70 = v152;
    }
    long long v153 = v61;
    (*(void (**)(uint64_t, long long *, unint64_t))(*(void *)v155 + 40))(v155, v70, v154 - (void)v70);
  }
  int v72 = v156;
  if (v156)
  {
    uint64_t v73 = v157;
    float v74 = v156;
    if (v157 != v156)
    {
      do
      {
        int v75 = (std::__shared_weak_count *)*(v73 - 1);
        if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, void *))v75->__on_zero_shared)(v75, v74);
          std::__shared_weak_count::__release_weak(v75);
        }
        v73 -= 2;
      }
      while (v73 != v72);
      float v74 = v156;
    }
    long long v157 = v72;
    (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v159 + 40))(v159, v74, v158 - (void)v74);
    int v22 = v151;
  }
  CFIndex v77 = (uint64_t *)*((void *)v22 + 13);
  int v76 = (uint64_t *)*((void *)v22 + 14);
  if (v77 != v76)
  {
    while (1)
    {
      uint64_t v78 = *v77;
      uint64_t v79 = *v77 + 840;
      uint64_t v80 = *((void *)v22 + 3);
      if (!*(unsigned char *)(*v77 + 1283))
      {
        if (*(unsigned char *)(v78 + 820) != 2)
        {
          if (*(unsigned char *)(v78 + 834)
            || (unsigned __int8 v89 = atomic_load((unsigned __int8 *)(v78 + 1240)), (v89 & 1) == 0)
            && (unsigned __int8 v90 = atomic_load((unsigned __int8 *)(v78 + 1243)), (v90 & 1) != 0))
          {
            *(unsigned char *)(v78 + 1250) = 0;
            *(unsigned char *)(v78 + 834) = 0;
            *(unsigned char *)(v78 + 1252) = 0;
          }
        }
        goto LABEL_284;
      }
      if (!*(unsigned char *)(v78 + 1285))
      {
        uint64_t v81 = *(void *)(v78 + 296);
        if (!v81 || (*(unsigned int (**)(uint64_t))(*(void *)v81 + 624))(v81)) {
          break;
        }
      }
LABEL_284:
      *(unsigned char *)(v78 + 1085) = *(unsigned char *)(v78 + 836);
      *(void *)(v79 + 204) = *(void *)(v78 + 744);
      if (*(unsigned char *)(v78 + 752))
      {
        if (*(void *)(v80 + 3592))
        {
          char v140 = *(unsigned char *)(v78 + 1278);
          if (v140) {
            char v140 = *(_DWORD *)(v78 + 104) == *(_DWORD *)(v80 + 3600);
          }
        }
        else
        {
          char v140 = 1;
        }
        *(unsigned char *)(v78 + 1076) = v140;
      }
      else
      {
        *(unsigned char *)(v78 + 1076) = 0;
      }
      *(_WORD *)(v78 + 1074) = *(_WORD *)(v78 + 822);
      if (*(unsigned char *)(v78 + 816)) {
        float v141 = *(float *)(v78 + 812);
      }
      else {
        float v141 = 1.0;
      }
      *(float *)(v78 + 1064) = v141;
      *(unsigned char *)(v78 + 1080) = *(unsigned char *)(v78 + 827);
      uint64_t v142 = *(void *)(v78 + 704);
      uint64_t v143 = *(void *)(v78 + 712);
      if (v143) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v143 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(v78 + 1024) = v142;
      uint64_t v144 = *(std::__shared_weak_count **)(v78 + 1032);
      *(void *)(v78 + 1032) = v143;
      if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
      *(unsigned char *)(v78 + 1078) |= *(unsigned char *)(v78 + 826);
      *(unsigned char *)(v78 + 826) = 0;
      *(unsigned char *)(v78 + 1083) = *(unsigned char *)(v78 + 835);
      long long v145 = *(_OWORD *)(v78 + 512);
      *(_OWORD *)uint64_t v79 = *(_OWORD *)(v78 + 496);
      *(_OWORD *)(v79 + 16) = v145;
      long long v146 = *(_OWORD *)(v78 + 544);
      *(_OWORD *)(v79 + 32) = *(_OWORD *)(v78 + 528);
      *(_OWORD *)(v79 + 48) = v146;
      *(void *)(v78 + 904) = *(void *)(v78 + 560);
      *(void *)(v78 + 984) = *(void *)(v78 + 656);
      if (!*(unsigned char *)(v78 + 1284))
      {
        *(_OWORD *)(v78 + 912) = *(_OWORD *)(v78 + 568);
        *(void *)(v78 + 928) = *(void *)(v78 + 584);
        *(_DWORD *)(v78 + 1056) = *(_DWORD *)(v78 + 772);
      }
      *(_OWORD *)(v78 + 112) = *(_OWORD *)(v78 + 640);
      if (*(unsigned char *)(v78 + 1294))
      {
        *(unsigned char *)(v78 + 1294) = 0;
        uint64_t v147 = *(void *)(v78 + 1000);
        if (*(void *)(v78 + 680))
        {
          if (!v147) {
            operator new();
          }
          uint64_t v148 = *(void *)(v78 + 680);
          *(void *)uint64_t v147 = *(void *)v148;
          *(void *)(v147 + 8) = *(void *)(v148 + 8);
          *(void *)(v147 + 16) = *(void *)(v148 + 16);
          *(void *)(v147 + 24) = *(void *)(v148 + 24);
          *(void *)(v147 + 32) = *(void *)(v148 + 32);
          *(unsigned char *)(v147 + 40) = *(unsigned char *)(v148 + 40);
        }
        else
        {
          *(void *)(v78 + 1000) = 0;
          if (v147) {
            MEMORY[0x1A6239270](v147, 0x1000C40C179455ELL);
          }
        }
      }
      if (*(unsigned char *)(v78 + 1293))
      {
        *(unsigned char *)(v78 + 1293) = 0;
        if (*(void *)(v78 + 672)) {
          operator new();
        }
        uint64_t v150 = *(void *)(v78 + 992);
        *(void *)(v78 + 992) = 0;
        if (v150) {
          MEMORY[0x1A6239270](v150, 0x1000C4015B1EB14);
        }
      }
      uint64_t v149 = *(void *)(v78 + 272);
      if (v149) {
        (*(void (**)(uint64_t))(*(void *)v149 + 112))(v149);
      }
      v77 += 2;
      if (v77 == v76) {
        return;
      }
    }
    *(unsigned char *)(v78 + 1283) = 0;
    *(unsigned char *)(v78 + 1286) = *(unsigned char *)(v78 + 1254);
    BOOL v82 = *(unsigned char *)(v78 + 820) == 2 || *(unsigned char *)(v78 + 834) != 0;
    id v83 = *(unsigned char **)(v78 + 264);
    v83[560] = v82;
    uint64_t v84 = (*(uint64_t (**)(unsigned char *))(*(void *)v83 + 96))(v83);
    if (*(unsigned char *)(v78 + 1082))
    {
      *(unsigned char *)(v78 + 1082) = 0;
      atomic_store(0, (unsigned __int8 *)(v78 + 1243));
    }
    if (*(unsigned char *)(v78 + 1081))
    {
      *(unsigned char *)(v78 + 1081) = 0;
      atomic_store(0, (unsigned __int8 *)(v78 + 1244));
      *(_DWORD *)(v78 + 1120) = 0;
      *(float *)(v78 + 1124) = (*(float (**)(uint64_t, double))(v78 + 1144))(v84, 0.0);
      md::Label::updateStateMachineForDisplay(v78, 8, *(unsigned char *)(v78 + 1073), 0);
    }
    uint64_t v85 = *(void *)(v78 + 296);
    *(void *)(v78 + 296) = 0;
    if (v85) {
      (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
    }
    uint64_t v86 = *(void *)(v78 + 280);
    *(void *)(v78 + 280) = 0;
    if (v86) {
      (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
    }
    uint64_t v87 = *(md::LabelAnimator **)(v78 + 1184);
    if (v87)
    {
      *(void *)(v78 + 1184) = 0;
      md::LabelAnimator::~LabelAnimator(v87);
      MEMORY[0x1A6239270]();
      uint64_t v88 = *(void *)(v78 + 272);
      if (v88) {
        (*(void (**)(uint64_t))(*(void *)v88 + 192))(v88);
      }
    }
    if (*(unsigned char *)(v78 + 833))
    {
      *(unsigned char *)(v78 + 833) = 0;
      atomic_store(1u, (unsigned __int8 *)(v78 + 1243));
    }
    else if (*(unsigned char *)(v78 + 834))
    {
      *(unsigned char *)(v78 + 834) = 0;
      *(unsigned char *)(v78 + 1082) = 1;
    }
    uint64_t v91 = *(void *)(v78 + 688);
    uint64_t v92 = *(void *)(v78 + 696);
    if (v92) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v78 + 1008) = v91;
    uint64_t v93 = *(std::__shared_weak_count **)(v78 + 1016);
    *(void *)(v78 + 1016) = v92;
    if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
    *(unsigned char *)(v78 + 1247) = 1;
    unsigned __int8 v94 = atomic_load((unsigned __int8 *)(v78 + 1240));
    if ((v94 & 1) == 0) {
      *(unsigned char *)(v78 + 1220) = *(unsigned char *)(*(void *)(v78 + 264) + 561);
    }
    if (!*(unsigned char *)(v80 + 3382) || *(unsigned char *)(v78 + 1255)) {
      *(unsigned char *)(v78 + 1287) = 1;
    }
    if (!*(unsigned char *)(v78 + 1072))
    {
      uint64_t v95 = *(void *)(v78 + 272);
      *(void *)(v78 + 272) = 0;
      if (v95) {
        uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)v95 + 8))(v95);
      }
      if (*(unsigned char *)(v78 + 1082))
      {
        *(unsigned char *)(v78 + 1082) = 0;
        atomic_store(0, (unsigned __int8 *)(v78 + 1243));
      }
      if (*(unsigned char *)(v78 + 1081))
      {
        *(unsigned char *)(v78 + 1081) = 0;
        atomic_store(0, (unsigned __int8 *)(v78 + 1244));
        *(_DWORD *)(v78 + 1120) = 0;
        *(float *)(v78 + 1124) = (*(float (**)(uint64_t, double))(v78 + 1144))(v95, 0.0);
        md::Label::updateStateMachineForDisplay(v78, 8, *(unsigned char *)(v78 + 1073), 0);
      }
      uint64_t v96 = *(void *)(v78 + 296);
      *(void *)(v78 + 296) = 0;
      if (v96) {
        (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
      }
      uint64_t v97 = *(void *)(v78 + 280);
      *(void *)(v78 + 280) = 0;
      if (v97) {
        (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
      }
      if (*(unsigned char *)(v78 + 1287) == 2) {
        *(unsigned char *)(v78 + 1287) = 1;
      }
    }
    if (*(unsigned char *)(v80 + 3375))
    {
      int v98 = *(unsigned __int8 *)(v78 + 1287);
    }
    else
    {
      uint64_t v99 = *(void *)(v78 + 296);
      if (v99 && (*(unsigned int (**)(uint64_t))(*(void *)v99 + 680))(v99))
      {
        uint64_t v100 = *(void *)(v78 + 296);
        if (v100 && (*(unsigned int (**)(uint64_t))(*(void *)v100 + 680))(v100))
        {
          if (*(unsigned char *)(v78 + 1082))
          {
            *(unsigned char *)(v78 + 1082) = 0;
            atomic_store(0, (unsigned __int8 *)(v78 + 1243));
          }
          if (*(unsigned char *)(v78 + 1081))
          {
            *(unsigned char *)(v78 + 1081) = 0;
            atomic_store(0, (unsigned __int8 *)(v78 + 1244));
            *(_DWORD *)(v78 + 1120) = 0;
            *(float *)(v78 + 1124) = (*(float (**)(double))(v78 + 1144))(0.0);
            md::Label::updateStateMachineForDisplay(v78, 8, *(unsigned char *)(v78 + 1073), 0);
          }
          uint64_t v101 = *(void *)(v78 + 296);
          *(void *)(v78 + 296) = 0;
          if (v101) {
            (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
          }
          uint64_t v102 = *(void *)(v78 + 280);
          *(void *)(v78 + 280) = 0;
          if (v102) {
            (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
          }
        }
        uint64_t v103 = *(void *)(v78 + 272);
        if (v103) {
          (*(void (**)(uint64_t))(*(void *)v103 + 552))(v103);
        }
      }
      int v98 = *(unsigned __int8 *)(v78 + 1287);
      if (v98 == 2)
      {
        *(unsigned char *)(v78 + 1287) = 1;
LABEL_220:
        uint64_t v105 = *(void *)(v78 + 264);
        uint64_t v104 = *(void *)(v78 + 272);
        *(void *)(v78 + 264) = 0;
        *(void *)(v78 + 272) = v105;
        if (v104) {
          uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
        if (*(unsigned char *)(v78 + 1082))
        {
          *(unsigned char *)(v78 + 1082) = 0;
          atomic_store(0, (unsigned __int8 *)(v78 + 1243));
        }
        if (*(unsigned char *)(v78 + 1081))
        {
LABEL_225:
          *(unsigned char *)(v78 + 1081) = 0;
          atomic_store(0, (unsigned __int8 *)(v78 + 1244));
          *(_DWORD *)(v78 + 1120) = 0;
          *(float *)(v78 + 1124) = (*(float (**)(uint64_t, double))(v78 + 1144))(v104, 0.0);
          md::Label::updateStateMachineForDisplay(v78, 8, *(unsigned char *)(v78 + 1073), 0);
        }
LABEL_226:
        uint64_t v106 = *(void *)(v78 + 296);
        *(void *)(v78 + 296) = 0;
        if (v106) {
          (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
        }
        uint64_t v107 = *(void *)(v78 + 280);
        *(void *)(v78 + 280) = 0;
        if (!v107) {
          goto LABEL_284;
        }
        goto LABEL_283;
      }
    }
    switch(v98)
    {
      case 0:
      case 1:
        goto LABEL_220;
      case 2:
        uint64_t v113 = *(void *)(v78 + 296);
        if (v113 && (*(unsigned int (**)(uint64_t))(*(void *)v113 + 680))(v113)) {
          goto LABEL_246;
        }
        uint64_t v114 = *(void *)(v78 + 272);
        if (!v114)
        {
          {
            operator new();
          }
          uint64_t v114 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v64 + 91) + 16))(*((void *)v64 + 91), 576, 8);
          bzero((void *)(v114 + 8), 0x238uLL);
          *(_DWORD *)(v114 + 8) = 1065353216;
          *(void *)(v114 + 24) = v114;
          *(_OWORD *)(v114 + 32) = 0u;
          *(_OWORD *)(v114 + 48) = 0u;
          *(void *)(v114 + 64) = 0;
          *(_OWORD *)(v114 + 72) = xmmword_1A28FC750;
          *(void *)(v114 + 88) = 1065353216;
          *(_DWORD *)(v114 + 96) = 1065353216;
          *(void *)(v114 + 108) = 0;
          *(void *)(v114 + 100) = 0;
          *(_DWORD *)(v114 + 116) = 0;
          *(_OWORD *)(v114 + 120) = xmmword_1A28FC750;
          *(_OWORD *)(v114 + 136) = xmmword_1A28FC750;
          *(_OWORD *)(v114 + 152) = xmmword_1A28FC750;
          *(_OWORD *)(v114 + 168) = xmmword_1A28FCDA0;
          *(void *)(v114 + 184) = 0;
          *(void *)(v114 + 192) = 0;
          *(unsigned char *)(v114 + 200) = 0;
          *(_OWORD *)(v114 + 232) = 0u;
          *(_OWORD *)(v114 + 248) = 0u;
          *(_OWORD *)(v114 + 257) = 0u;
          *(_OWORD *)(v114 + 280) = xmmword_1A28FCE90;
          *(_OWORD *)(v114 + 296) = xmmword_1A28FCEA0;
          *(_OWORD *)(v114 + 312) = xmmword_1A28FC750;
          *(void *)(v114 + 328) = 1065353216;
          *(_DWORD *)(v114 + 336) = 1065353216;
          *(_DWORD *)(v114 + 356) = 0;
          *(void *)(v114 + 340) = 0;
          *(void *)(v114 + 348) = 0;
          *(_OWORD *)(v114 + 360) = xmmword_1A28FC750;
          *(_OWORD *)(v114 + 376) = xmmword_1A28FC750;
          *(_OWORD *)(v114 + 392) = xmmword_1A28FC750;
          *(_OWORD *)(v114 + 408) = xmmword_1A28FCDA0;
          *(void *)(v114 + 424) = 0;
          *(void *)(v114 + 432) = 0;
          *(unsigned char *)(v114 + 440) = 0;
          *(_OWORD *)(v114 + 472) = 0u;
          *(_OWORD *)(v114 + 488) = 0u;
          *(_OWORD *)(v114 + 497) = 0u;
          *(_OWORD *)(v114 + 520) = xmmword_1A28FCE90;
          *(_DWORD *)(v114 + 536) = 1065353216;
          *(_WORD *)(v114 + 556) = 512;
          *(void *)(v114 + 540) = 0;
          *(void *)(v114 + 548) = 0;
          *(unsigned char *)(v114 + 562) = 0;
          *(_DWORD *)(v114 + 558) = 0;
          *(_WORD *)(v114 + 563) = -1;
          *(void *)uint64_t v114 = &unk_1EF532910;
          uint64_t v115 = *(void *)(v78 + 272);
          *(void *)(v78 + 272) = v114;
          if (v115)
          {
            (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
            uint64_t v114 = *(void *)(v78 + 272);
          }
          int v22 = v151;
        }
        uint64_t v116 = *(void *)(v78 + 280);
        *(void *)(v78 + 272) = 0;
        *(void *)(v78 + 280) = v114;
        if (v116)
        {
          (*(void (**)(uint64_t))(*(void *)v116 + 8))(v116);
LABEL_246:
          uint64_t v118 = *(void *)(v78 + 264);
          uint64_t v117 = *(void *)(v78 + 272);
          *(void *)(v78 + 264) = 0;
          *(void *)(v78 + 272) = v118;
          if (v117) {
            (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
          }
        }
        else
        {
          uint64_t v136 = *(void *)(v78 + 264);
          *(void *)(v78 + 264) = 0;
          *(void *)(v78 + 272) = v136;
        }
        uint64_t v137 = *(void *)(v78 + 272);
        uint64_t v138 = *(void *)(v78 + 280);
        int v139 = (*(uint64_t (**)(uint64_t))(*(void *)v137 + 224))(v137);
        if (v139 != (*(unsigned int (**)(uint64_t))(*(void *)v138 + 224))(v138)
          || !(*(unsigned int (**)(uint64_t))(*(void *)v137 + 224))(v137)
          || (uint64_t v104 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v137 + 232))(v137, v138), !v104))
        {
          unint64_t v64 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            operator new();
          }
          int v128 = (md::CrossFadeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 640, 8);
          md::CrossFadeLabelPart::CrossFadeLabelPart(v128, *(md::LabelPart **)(v78 + 280), *(md::LabelPart **)(v78 + 272), 0);
          *(void *)int v128 = &unk_1EF53A9C0;
          goto LABEL_282;
        }
        unint64_t v64 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (*(unsigned char *)(v78 + 1082))
        {
          *(unsigned char *)(v78 + 1082) = 0;
          atomic_store(0, (unsigned __int8 *)(v78 + 1243));
        }
        if (*(unsigned char *)(v78 + 1081)) {
          goto LABEL_225;
        }
        goto LABEL_226;
      case 3:
      case 4:
        uint64_t v108 = *(void *)(v78 + 272);
        if (!v108)
        {
          {
            operator new();
          }
          uint64_t v108 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v64 + 91) + 16))(*((void *)v64 + 91), 576, 8);
          bzero((void *)(v108 + 8), 0x238uLL);
          *(_DWORD *)(v108 + 8) = 1065353216;
          *(void *)(v108 + 24) = v108;
          *(_OWORD *)(v108 + 32) = 0u;
          *(_OWORD *)(v108 + 48) = 0u;
          *(void *)(v108 + 64) = 0;
          *(_OWORD *)(v108 + 72) = xmmword_1A28FC750;
          *(void *)(v108 + 88) = 1065353216;
          *(_DWORD *)(v108 + 96) = 1065353216;
          *(void *)(v108 + 108) = 0;
          *(void *)(v108 + 100) = 0;
          *(_DWORD *)(v108 + 116) = 0;
          *(_OWORD *)(v108 + 120) = xmmword_1A28FC750;
          *(_OWORD *)(v108 + 136) = xmmword_1A28FC750;
          *(_OWORD *)(v108 + 152) = xmmword_1A28FC750;
          *(_OWORD *)(v108 + 168) = xmmword_1A28FCDA0;
          *(void *)(v108 + 184) = 0;
          *(void *)(v108 + 192) = 0;
          *(unsigned char *)(v108 + 200) = 0;
          *(_OWORD *)(v108 + 232) = 0u;
          *(_OWORD *)(v108 + 248) = 0u;
          *(_OWORD *)(v108 + 257) = 0u;
          *(_OWORD *)(v108 + 280) = xmmword_1A28FCE90;
          *(_OWORD *)(v108 + 296) = xmmword_1A28FCEA0;
          *(_OWORD *)(v108 + 312) = xmmword_1A28FC750;
          *(void *)(v108 + 328) = 1065353216;
          *(_DWORD *)(v108 + 336) = 1065353216;
          *(_DWORD *)(v108 + 356) = 0;
          *(void *)(v108 + 340) = 0;
          *(void *)(v108 + 348) = 0;
          *(_OWORD *)(v108 + 360) = xmmword_1A28FC750;
          *(_OWORD *)(v108 + 376) = xmmword_1A28FC750;
          *(_OWORD *)(v108 + 392) = xmmword_1A28FC750;
          *(_OWORD *)(v108 + 408) = xmmword_1A28FCDA0;
          *(void *)(v108 + 424) = 0;
          *(void *)(v108 + 432) = 0;
          *(unsigned char *)(v108 + 440) = 0;
          *(_OWORD *)(v108 + 472) = 0u;
          *(_OWORD *)(v108 + 488) = 0u;
          *(_OWORD *)(v108 + 497) = 0u;
          *(_OWORD *)(v108 + 520) = xmmword_1A28FCE90;
          *(_DWORD *)(v108 + 536) = 1065353216;
          *(_WORD *)(v108 + 556) = 512;
          *(void *)(v108 + 540) = 0;
          *(void *)(v108 + 548) = 0;
          *(unsigned char *)(v108 + 562) = 0;
          *(_DWORD *)(v108 + 558) = 0;
          *(_WORD *)(v108 + 563) = -1;
          *(void *)uint64_t v108 = &unk_1EF532910;
          uint64_t v109 = *(void *)(v78 + 272);
          *(void *)(v78 + 272) = v108;
          if (v109)
          {
            (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
            uint64_t v108 = *(void *)(v78 + 272);
          }
        }
        uint64_t v110 = *(void *)(v78 + 280);
        *(void *)(v78 + 272) = 0;
        *(void *)(v78 + 280) = v108;
        if (v110)
        {
          (*(void (**)(uint64_t))(*(void *)v110 + 8))(v110);
          uint64_t v112 = *(void *)(v78 + 264);
          uint64_t v111 = *(void *)(v78 + 272);
          *(void *)(v78 + 264) = 0;
          *(void *)(v78 + 272) = v112;
          if (v111) {
            (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
          }
        }
        else
        {
          uint64_t v129 = *(void *)(v78 + 264);
          *(void *)(v78 + 264) = 0;
          *(void *)(v78 + 272) = v129;
        }
        int v130 = *(unsigned __int8 *)(v78 + 1287);
        {
          operator new();
        }
        long long v131 = *(uint64_t (**)(void))(**((void **)v64 + 91) + 16);
        if (v130 != 3)
        {
          uint64_t v132 = v131();
          md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(v132, (md::LabelManager *)v80, (md::Label *)v78, *(unsigned __int8 *)(v78 + 1288), *(md::LabelPart **)(v78 + 280), *(md::LabelPart **)(v78 + 272), 0);
          int v22 = v151;
          uint64_t v133 = *(void *)(v78 + 296);
          *(void *)(v78 + 296) = v132;
          if (v133) {
            (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
          }
          uint64_t v134 = *(void *)(v78 + 1192);
          if (v134)
          {
            int v135 = *(unsigned __int8 *)(v134 + 52);
            if (v135 == 1)
            {
              *(unsigned char *)(v78 + 1084) = 1;
              goto LABEL_284;
            }
            if (v135 == 2)
            {
              *(unsigned char *)(v78 + 1084) = *(double *)(*(void *)(*(void *)v134 + 432) + 336)
                                     - *(double *)(v134 + 104) < 0.5;
              goto LABEL_284;
            }
            LOBYTE(v134) = 0;
          }
          *(unsigned char *)(v78 + 1084) = v134;
          goto LABEL_284;
        }
        int v128 = (md::CrossFadeLabelPart *)v131();
        md::CrossFadeLabelPart::CrossFadeLabelPart(v128, *(md::LabelPart **)(v78 + 280), *(md::LabelPart **)(v78 + 272), 0);
        int v22 = v151;
        *(void *)int v128 = &unk_1EF543D10;
        *((unsigned char *)v128 + 638) = 1;
LABEL_282:
        uint64_t v107 = *(void *)(v78 + 296);
        *(void *)(v78 + 296) = v128;
        if (!v107) {
          goto LABEL_284;
        }
        break;
      case 5:
        if (*(void *)(v78 + 272) && (*(unsigned char *)(v78 + 1072) & 0xFD) == 1)
        {
          {
            operator new();
          }
          uint64_t v119 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v64 + 91) + 16))(*((void *)v64 + 91), 576, 8);
          bzero((void *)(v119 + 8), 0x238uLL);
          *(_DWORD *)(v119 + 8) = 1065353216;
          *(void *)(v119 + 24) = v119;
          *(_OWORD *)(v119 + 32) = 0u;
          *(_OWORD *)(v119 + 48) = 0u;
          *(void *)(v119 + 64) = 0;
          *(_OWORD *)(v119 + 72) = xmmword_1A28FC750;
          *(void *)(v119 + 88) = 1065353216;
          *(_DWORD *)(v119 + 96) = 1065353216;
          *(void *)(v119 + 108) = 0;
          *(void *)(v119 + 100) = 0;
          *(_DWORD *)(v119 + 116) = 0;
          *(_OWORD *)(v119 + 120) = xmmword_1A28FC750;
          *(_OWORD *)(v119 + 136) = xmmword_1A28FC750;
          *(_OWORD *)(v119 + 152) = xmmword_1A28FC750;
          *(_OWORD *)(v119 + 168) = xmmword_1A28FCDA0;
          *(void *)(v119 + 184) = 0;
          *(void *)(v119 + 192) = 0;
          *(unsigned char *)(v119 + 200) = 0;
          *(_OWORD *)(v119 + 232) = 0u;
          *(_OWORD *)(v119 + 248) = 0u;
          *(_OWORD *)(v119 + 257) = 0u;
          *(_OWORD *)(v119 + 280) = xmmword_1A28FCE90;
          *(_OWORD *)(v119 + 296) = xmmword_1A28FCEA0;
          *(_OWORD *)(v119 + 312) = xmmword_1A28FC750;
          *(void *)(v119 + 328) = 1065353216;
          *(_DWORD *)(v119 + 336) = 1065353216;
          *(_DWORD *)(v119 + 356) = 0;
          *(void *)(v119 + 340) = 0;
          *(void *)(v119 + 348) = 0;
          *(_OWORD *)(v119 + 360) = xmmword_1A28FC750;
          *(_OWORD *)(v119 + 376) = xmmword_1A28FC750;
          *(_OWORD *)(v119 + 392) = xmmword_1A28FC750;
          *(_OWORD *)(v119 + 408) = xmmword_1A28FCDA0;
          *(void *)(v119 + 424) = 0;
          *(void *)(v119 + 432) = 0;
          *(unsigned char *)(v119 + 440) = 0;
          *(_OWORD *)(v119 + 472) = 0u;
          *(_OWORD *)(v119 + 488) = 0u;
          *(_OWORD *)(v119 + 497) = 0u;
          *(_OWORD *)(v119 + 520) = xmmword_1A28FCE90;
          *(_DWORD *)(v119 + 536) = 1065353216;
          *(void *)(v119 + 540) = 0;
          *(void *)(v119 + 548) = 0;
          *(_WORD *)(v119 + 556) = 512;
          *(unsigned char *)(v119 + 562) = 0;
          *(_DWORD *)(v119 + 558) = 0;
          *(_WORD *)(v119 + 563) = -1;
          *(void *)uint64_t v119 = &unk_1EF532910;
          {
            operator new();
          }
          uint64_t v120 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v64 + 91) + 16))(*((void *)v64 + 91), 744, 8);
          int v121 = *(unsigned __int8 *)(v78 + 1288);
          uint64_t v122 = *(md::LabelPart **)(v78 + 272);
          *(void *)(v78 + 272) = 0;
          md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(v120, (md::LabelManager *)v80, (md::Label *)v78, v121, v122, (md::LabelPart *)v119, 1);
          uint64_t v123 = *(void *)(v78 + 304);
          *(void *)(v78 + 304) = v120;
          if (v123) {
            (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
          }
          *(_OWORD *)(v79 + 96) = *(_OWORD *)(v78 + 912);
          *(void *)(v78 + 952) = *(void *)(v78 + 928);
          *(_DWORD *)(v78 + 1060) = *(_DWORD *)(v78 + 1056);
        }
        {
          operator new();
        }
        uint64_t v124 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v64 + 91) + 16))(*((void *)v64 + 91), 576, 8);
        bzero((void *)(v124 + 8), 0x238uLL);
        *(_DWORD *)(v124 + 8) = 1065353216;
        *(void *)(v124 + 24) = v124;
        *(_OWORD *)(v124 + 32) = 0u;
        *(_OWORD *)(v124 + 48) = 0u;
        *(void *)(v124 + 64) = 0;
        *(_OWORD *)(v124 + 72) = xmmword_1A28FC750;
        *(void *)(v124 + 88) = 1065353216;
        *(_DWORD *)(v124 + 96) = 1065353216;
        *(void *)(v124 + 108) = 0;
        *(void *)(v124 + 100) = 0;
        *(_DWORD *)(v124 + 116) = 0;
        *(_OWORD *)(v124 + 120) = xmmword_1A28FC750;
        *(_OWORD *)(v124 + 136) = xmmword_1A28FC750;
        *(_OWORD *)(v124 + 152) = xmmword_1A28FC750;
        *(_OWORD *)(v124 + 168) = xmmword_1A28FCDA0;
        *(void *)(v124 + 184) = 0;
        *(void *)(v124 + 192) = 0;
        *(unsigned char *)(v124 + 200) = 0;
        *(_OWORD *)(v124 + 232) = 0u;
        *(_OWORD *)(v124 + 248) = 0u;
        *(_OWORD *)(v124 + 257) = 0u;
        *(_OWORD *)(v124 + 280) = xmmword_1A28FCE90;
        *(_OWORD *)(v124 + 296) = xmmword_1A28FCEA0;
        *(_OWORD *)(v124 + 312) = xmmword_1A28FC750;
        *(void *)(v124 + 328) = 1065353216;
        *(_DWORD *)(v124 + 336) = 1065353216;
        *(_DWORD *)(v124 + 356) = 0;
        *(void *)(v124 + 340) = 0;
        *(void *)(v124 + 348) = 0;
        *(_OWORD *)(v124 + 360) = xmmword_1A28FC750;
        *(_OWORD *)(v124 + 376) = xmmword_1A28FC750;
        *(_OWORD *)(v124 + 392) = xmmword_1A28FC750;
        *(_OWORD *)(v124 + 408) = xmmword_1A28FCDA0;
        *(void *)(v124 + 424) = 0;
        *(void *)(v124 + 432) = 0;
        *(unsigned char *)(v124 + 440) = 0;
        *(_OWORD *)(v124 + 472) = 0u;
        *(_OWORD *)(v124 + 488) = 0u;
        *(_OWORD *)(v124 + 497) = 0u;
        *(_OWORD *)(v124 + 520) = xmmword_1A28FCE90;
        *(_DWORD *)(v124 + 536) = 1065353216;
        *(_WORD *)(v124 + 556) = 512;
        *(void *)(v124 + 540) = 0;
        *(void *)(v124 + 548) = 0;
        *(unsigned char *)(v124 + 562) = 0;
        *(_DWORD *)(v124 + 558) = 0;
        *(_WORD *)(v124 + 563) = -1;
        *(void *)uint64_t v124 = &unk_1EF532910;
        uint64_t v125 = *(void *)(v78 + 280);
        *(void *)(v78 + 280) = v124;
        if (v125) {
          (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
        }
        uint64_t v127 = *(void *)(v78 + 264);
        uint64_t v126 = *(void *)(v78 + 272);
        *(void *)(v78 + 264) = 0;
        *(void *)(v78 + 272) = v127;
        int v22 = v151;
        if (v126) {
          (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
        }
        {
          operator new();
        }
        int v128 = (md::CrossFadeLabelPart *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v64 + 91)
                                                                                             + 16))(*((void *)v64 + 91), 744, 8);
        md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart((uint64_t)v128, (md::LabelManager *)v80, (md::Label *)v78, *(unsigned __int8 *)(v78 + 1288), *(md::LabelPart **)(v78 + 280), *(md::LabelPart **)(v78 + 272), 0);
        goto LABEL_282;
      default:
        goto LABEL_284;
    }
LABEL_283:
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
    goto LABEL_284;
  }
}

void sub_1A18B3E04(_Unwind_Exception *a1)
{
  {
      operator new();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v1, 744);
  _Unwind_Resume(a1);
}

void md::CaptionedIconLabelPart::updateForDisplay(md::CaptionedIconLabelPart *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 72);
  uint64_t v3 = (uint64_t *)*((void *)this + 73);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 112))(v4);
  }
  *(void *)((char *)this + 700) = *((void *)this + 81);
  *(_OWORD *)((char *)this + 684) = *(_OWORD *)((char *)this + 632);
  *((unsigned char *)this + 732) = *((unsigned char *)this + 680);
  float v5 = (*(float (**)(md::CaptionedIconLabelPart *))(*(void *)this + 264))(this);
  if (v7 < v5 || v8 < v6)
  {
    float v13 = 3.4028e38;
    float v15 = -3.4028e38;
    float v14 = -3.4028e38;
    float v11 = 3.4028e38;
  }
  else
  {
    float v10 = *((float *)this + 70);
    float v11 = v5 - v10;
    float v12 = *((float *)this + 71);
    float v13 = v6 - v12;
    float v14 = v7 - v10;
    float v15 = v8 - v12;
  }
  *((float *)this + 179) = v11;
  *((float *)this + 180) = v13;
  *((float *)this + 181) = v14;
  *((float *)this + 182) = v15;
}

float md::CompositeLabelPart::pixelBoundsForStaging(md::CompositeLabelPart *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 72);
  uint64_t v2 = (uint64_t *)*((void *)this + 73);
  if (v1 == v2) {
    return 3.4028e38;
  }
  float v3 = 3.4028e38;
  float v4 = -3.4028e38;
  float v5 = -3.4028e38;
  float v6 = 3.4028e38;
  do
  {
    uint64_t v7 = *v1++;
    float v6 = fminf((*(float (**)(uint64_t))(*(void *)v7 + 264))(v7), v6);
    float v5 = fmaxf(v5, v8);
    float v3 = fminf(v9, v3);
    float v4 = fmaxf(v4, v10);
  }
  while (v1 != v2);
  return v6;
}

float md::LabelPart::pixelBoundsForStaging(md::LabelPart *this)
{
  return *(float *)(*((void *)this + 3) + 120);
}

void md::HorizontalTextLabelPart::updateForDisplay(md::HorizontalTextLabelPart *this)
{
  md::TextLabelPart::updateForDisplay(this);
  int v2 = *((unsigned __int8 *)this + 1026);
  if (*((unsigned __int8 *)this + 1098) != v2)
  {
    *((unsigned char *)this + 1098) = v2;
    *((unsigned char *)this + 1099) = 1;
  }
  int v3 = *((_DWORD *)this + 244);
  if (*((_DWORD *)this + 262) != v3)
  {
    *((_DWORD *)this + 262) = v3;
    *((unsigned char *)this + 1099) = 1;
  }
  int v4 = *((_DWORD *)this + 245);
  if (*((_DWORD *)this + 263) != v4)
  {
    *((_DWORD *)this + 263) = v4;
    *((unsigned char *)this + 1099) = 1;
  }
  float v5 = *((float *)this + 241);
  if (*((float *)this + 259) != v5)
  {
    *((float *)this + 259) = v5;
    *((unsigned char *)this + 1099) = 1;
  }
  *((unsigned char *)this + 556) = 4 * *((unsigned char *)this + 1029);
}

void md::TextLabelPart::updateForDisplay(md::TextLabelPart *this)
{
  uint64_t v2 = *((void *)this + 76);
  uint64_t v3 = *((void *)this + 77);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 90) = v2;
  int v4 = (std::__shared_weak_count *)*((void *)this + 91);
  *((void *)this + 91) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *((_DWORD *)this + 189) = *((_DWORD *)this + 161);
  *(_OWORD *)((char *)this + 809) = *(_OWORD *)((char *)this + 697);
  long long v5 = *((_OWORD *)this + 41);
  long long v6 = *((_OWORD *)this + 42);
  *((_OWORD *)this + 48) = v5;
  *(_DWORD *)((char *)this + 825) = *(_DWORD *)((char *)this + 713);
  *((unsigned char *)this + 829) = *((unsigned char *)this + 717);
  *((_OWORD *)this + 49) = v6;
  if (*(float *)&v5 > 0.0 && !*((unsigned char *)this + 565))
  {
    *((_DWORD *)this + 192) = 0;
    LODWORD(v5) = 0;
  }
  *((_DWORD *)this + 227) = v5;
  *((unsigned char *)this + 866) = *(float *)&v5 >= 0.0001;
  *(_DWORD *)(*((void *)this + 74) + 8) = *(_DWORD *)(*((void *)this + 72) + 8);
}

uint64_t md::PointIconLabelPart::updateForDisplay(md::PointIconLabelPart *this)
{
  float v2 = *((float *)this + 147);
  *((float *)this + 153) = v2;
  uint64_t v3 = *(void *)((char *)this + 572);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
  *(void *)((char *)this + 596) = v3;
  *((unsigned char *)this + 617) = *((unsigned char *)this + 593);
  char v4 = *((unsigned char *)this + 633) + 4 * *((unsigned char *)this + 594);
  *((unsigned char *)this + 556) = v4;
  *((unsigned char *)this + 658) = v4;
  int v5 = *((unsigned __int8 *)this + 592);
  *((unsigned char *)this + 657) = v5;
  *((unsigned char *)this + 765) = v5 == 4;
  if (v5 == 4) {
    char v6 = 2;
  }
  else {
    char v6 = 1;
  }
  float v7 = *((float *)this + 188);
  *((unsigned char *)this + 685) = v6;
  if (v2 != v7)
  {
    *((float *)this + 188) = v2;
    (*(void (**)(md::PointIconLabelPart *, uint64_t, char *, char *))(*(void *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  uint64_t result = *((void *)this + 104);
  if (result)
  {
    float v9 = *(uint64_t (**)(void))(*(void *)result + 112);
    return v9();
  }
  return result;
}

uint64_t md::IconLabelPart::updateForDisplay(uint64_t this)
{
  float v1 = *(float *)(this + 588);
  *(float *)(this + 612) = v1;
  uint64_t v2 = *(void *)(this + 572);
  *(_DWORD *)(this + 604) = *(_DWORD *)(this + 580);
  *(void *)(this + 596) = v2;
  *(unsigned char *)(this + 617) = *(unsigned char *)(this + 593);
  char v3 = *(unsigned char *)(this + 633) + 4 * *(unsigned char *)(this + 594);
  *(unsigned char *)(this + 556) = v3;
  *(unsigned char *)(this + 658) = v3;
  int v4 = *(unsigned __int8 *)(this + 592);
  *(unsigned char *)(this + 657) = v4;
  *(unsigned char *)(this + 765) = v4 == 4;
  if (v4 == 4) {
    char v5 = 2;
  }
  else {
    char v5 = 1;
  }
  float v6 = *(float *)(this + 752);
  *(unsigned char *)(this + 685) = v5;
  if (v1 != v6)
  {
    *(float *)(this + 752) = v1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 912))(this, 1, this + 640, this + 312);
  }
  return this;
}

md::LabelAnimator *md::Label::clearAnimation(md::Label *this)
{
  if (*((unsigned char *)this + 1082))
  {
    *((unsigned char *)this + 1082) = 0;
    atomic_store(0, (unsigned __int8 *)this + 1243);
  }
  if (*((unsigned char *)this + 1081))
  {
    *((unsigned char *)this + 1081) = 0;
    atomic_store(0, (unsigned __int8 *)this + 1244);
    *((_DWORD *)this + 280) = 0;
    *((float *)this + 281) = (*((float (**)(double))this + 143))(0.0);
    md::Label::updateStateMachineForDisplay((uint64_t)this, 8, *((unsigned char *)this + 1073), 0);
  }
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  atomic_store(0, (unsigned __int8 *)this + 1244);
  uint64_t result = (md::LabelAnimator *)*((void *)this + 148);
  if (result)
  {
    *((void *)this + 148) = 0;
    md::LabelAnimator::~LabelAnimator(result);
    uint64_t result = (md::LabelAnimator *)MEMORY[0x1A6239270]();
    *((unsigned char *)this + 1106) = *((unsigned char *)this + 1108);
  }
  return result;
}

uint64_t md::CompositeLabelPart::resolveForDisplay(uint64_t this)
{
  float v1 = *(uint64_t **)(this + 576);
  for (uint64_t i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabeler::render(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(result + 8);
  for (uint64_t i = *(uint64_t **)(result + 16);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return result;
}

uint64_t md::MapStandardLabeler::render(md::MapStandardLabeler *this, const md::LayoutContext *a2, md::LabelRenderModel *a3, __n128 a4)
{
  md::StandardLabeler::render((uint64_t)this, a2, a3, a4);
  uint64_t v7 = **(uint64_t ***)(*((void *)this + 3) + 112);
  if (v7 != *(uint64_t **)(*(void *)(*((void *)this + 3) + 112) + 8) && *v7 != 0xD369A4D92C8FFE6CLL)
  {
    float v8 = v7 + 5;
    do
    {
      uint64_t v9 = *v8;
      v8 += 5;
    }
    while (v9 != 0xD369A4D92C8FFE6CLL);
    uint64_t v7 = v8 - 5;
  }
  float v10 = (uint64_t (***)(void))v7[3];
  float v11 = (std::__shared_weak_count *)v7[4];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  uint64_t result = (**v10)(v10);
  uint64_t v13 = result;
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)(*((void *)this + 3) + 3391));
  if (v14)
  {
    uint64_t result = *(void *)(*((void *)this + 50) + 32);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, const md::LayoutContext *, uint64_t))(*(void *)result + 16))(result, (char *)a3 + 8, a2, v13);
      *((unsigned char *)this + 369) = 0;
    }
  }
  else if (*((unsigned char *)this + 369))
  {
    *((unsigned char *)this + 369) = 0;
    uint64_t result = *(void *)(*((void *)this + 50) + 32);
    if (result)
    {
      float v15 = *(uint64_t (**)(void))(*(void *)result + 24);
      return v15();
    }
    else
    {
      int v16 = *(unsigned __int8 **)(*((void *)this + 3) + 232);
      if (v16[106])
      {
        int v17 = *(void **)(v13 + 8);
        uint64_t v18 = v17[3];
        uint64_t v19 = v17[4];
        uint64_t v20 = v19 - v18;
        if (v19 == v18) {
          goto LABEL_25;
        }
        uint64_t v21 = 0;
        unint64_t v22 = v20 >> 3;
        while (1)
        {
          uint64_t v23 = *(unsigned __int8 **)(v18 + 8 * v21);
          if (*v23 == v16[104])
          {
            unint64_t v24 = *((void *)v23 + 1);
            uint64_t v25 = v17[15];
            if (v24 < (v17[16] - v25) >> 3) {
              break;
            }
          }
          if (++v21 >= v22) {
            goto LABEL_25;
          }
        }
        uint64_t v26 = *(void *)(v25 + 8 * v24);
        if (!v26) {
LABEL_25:
        }
          uint64_t v27 = 0;
        else {
          uint64_t v27 = *(void **)(*(void *)(v26 + 24) + 8 * v16[105]);
        }
        uint64_t v28 = v27[9];
        if (v27[10] != v28) {
          v27[10] = v28;
        }
        v27[4] = 0;
      }
      else
      {
        uint64_t v29 = std::__throw_bad_optional_access[abi:nn180100]();
        return md::MapNavLabeler::render(v29, v30, v31);
      }
    }
  }
  return result;
}

uint64_t md::MapNavLabeler::render(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (*(unsigned char *)(result + 824)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(unsigned char *)(result + 825) == 0;
  }
  float v6 = *(uint64_t **)(result + 584);
  for (uint64_t i = *(uint64_t **)(result + 592); v6 != i; v6 += 2)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = *(void *)(*v6 + 288);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 640);
      if (v10)
      {
        unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v10 + 143));
        if ((v11 & 1) != 0 && *(float *)(v8 + 268) > 0.0) {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 288) + 128))(*(void *)(v8 + 288), a3);
        }
      }
    }
    if (v5)
    {
      if (*(unsigned char *)(*v6 + 265)
        && (uint64_t v12 = *(void *)(*(void *)(*v6 + 288) + 640)) != 0
        && (unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v12 + 143)), (v13 & 1) != 0))
      {
        BOOL v5 = 0;
        *(unsigned char *)(v4 + 825) = 1;
      }
      else
      {
        BOOL v5 = 1;
      }
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  return result;
}

void ta2::TextureAtlas::clearPageEdges(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 344) + 24))(*(void *)(a1 + 344), *(void *)(a2 + 200));
  if (!v4)
  {
    if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_17999);
    }
    BOOL v5 = GEOGetVectorKitTextureAtlasLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315650;
      *(void *)unint64_t v22 = "textureDescriptor";
      *(_WORD *)&v22[8] = 2080;
      *(void *)&v22[10] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
      *(_WORD *)&v22[18] = 1024;
      *(_DWORD *)&v22[20] = 446;
      _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_ERROR, "Using stale/invalid texture: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v21, 0x1Cu);
    }
  }
  unsigned int v6 = *v4;
  if (*(_DWORD *)(a1 + 60) >= v4[1]) {
    unsigned int v7 = v4[1];
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 60);
  }
  unsigned int v8 = 0x200u / *(unsigned __int8 *)(a1 + 36);
  if (v7)
  {
    unsigned int v9 = 0;
    do
    {
      if (v7 >= v8) {
        unsigned int v10 = v8;
      }
      else {
        unsigned int v10 = v7;
      }
      uint64_t v11 = *(void *)(a1 + 360);
      uint64_t v12 = *(void *)(a1 + 288);
      uint64_t v13 = *(void *)(a2 + 200);
      int v14 = *(unsigned __int8 *)(a1 + 36);
      int v21 = 0;
      *(_DWORD *)unint64_t v22 = v14;
      *(void *)&v22[4] = 0x100000200;
      *(_DWORD *)&v22[12] = v10;
      *(void *)&v22[16] = 1;
      int v23 = 0;
      uint64_t v24 = v9;
      char v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v11 + 32))(v11, v12, v13, &v21);
      v9 += v10;
      v7 -= v10;
    }
    while (v7);
  }
  if (*(_DWORD *)(a1 + 56) < v6) {
    unsigned int v6 = *(_DWORD *)(a1 + 56);
  }
  if (v6)
  {
    int v15 = 0;
    do
    {
      if (v6 >= v8) {
        unsigned int v16 = v8;
      }
      else {
        unsigned int v16 = v6;
      }
      uint64_t v17 = *(void *)(a1 + 360);
      uint64_t v18 = *(void *)(a1 + 288);
      uint64_t v19 = *(void *)(a2 + 200);
      int v20 = *(unsigned __int8 *)(a1 + 36) * v8;
      int v21 = 0;
      *(_DWORD *)unint64_t v22 = v20;
      *(_DWORD *)&v22[4] = 512;
      *(_DWORD *)&v22[8] = v16;
      *(void *)&v22[12] = 0x100000001;
      *(_DWORD *)&v22[20] = 0;
      int v23 = v15;
      uint64_t v24 = 0;
      char v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v17 + 32))(v17, v18, v19, &v21);
      v15 += v16;
      v6 -= v16;
    }
    while (v6);
  }
}

void ta2::TextureAtlas::loadRegions(uint64_t a1, uint64_t *a2, uint64_t *__sz)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (a2 != __sz)
  {
    size_t v3 = (size_t)__sz;
    for (uint64_t i = a2; i != (uint64_t *)v3; i += 9)
    {
      uint64_t v9 = i[7];
      if (!v9) {
        continue;
      }
      if (*((_DWORD *)i + 10) >= *((_DWORD *)i + 8) && *((_DWORD *)i + 11) >= *((_DWORD *)i + 9))
      {
        uint64_t v14 = i[4];
        LODWORD(v11) = v14 + 1;
        LODWORD(v12) = HIDWORD(v14) + 1;
        unint64_t v10 = (i[5] & 0xFFFFFFFF00000000 | (i[5] - 1)) - 0x100000000;
        if (*((unsigned char *)i + 64))
        {
LABEL_9:
          uint64_t v13 = i[6];
          if (v13) {
            goto LABEL_3;
          }
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v11 = i[4];
        unint64_t v10 = i[5];
        unint64_t v12 = HIDWORD(v11);
        if (*((unsigned char *)i + 64)) {
          goto LABEL_9;
        }
      }
      uint64_t v15 = *i;
      *(void *)(v15 + 24) = v9;
      *(_DWORD *)(v15 + 32) = v11;
      *(_DWORD *)(v15 + 36) = v12;
      *(void *)(v15 + 40) = v10;
      float v16 = *(float *)(v9 + 184);
      float v17 = *(float *)(v9 + 188);
      *(float *)(v15 + 48) = v16 * (float)v11;
      *(float *)(v15 + 52) = v17 * (float)v12;
      *(float *)(v15 + 56) = v16 * (float)v10;
      *(float *)(v15 + 60) = v17 * (float)HIDWORD(v10);
      uint64_t v19 = *(char **)(v9 + 352);
      unint64_t v18 = *(void *)(v9 + 360);
      if ((unint64_t)v19 >= v18)
      {
        unint64_t v22 = *(char **)(v9 + 344);
        uint64_t v23 = (v19 - v22) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          goto LABEL_78;
        }
        uint64_t v25 = v18 - (void)v22;
        if (v25 >> 3 > v24) {
          unint64_t v24 = v25 >> 3;
        }
        BOOL v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        if (!v26) {
          unint64_t v27 = v24;
        }
        if (v27 >> 60) {
LABEL_79:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v28 = 16 * v27;
        uint64_t v29 = (char *)operator new(16 * v27);
        uint64_t v30 = &v29[16 * v23];
        long long v31 = *(_OWORD *)i;
        *(_OWORD *)uint64_t v30 = *(_OWORD *)i;
        if (*((void *)&v31 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
          unint64_t v22 = *(char **)(v9 + 344);
          uint64_t v19 = *(char **)(v9 + 352);
        }
        uint64_t v32 = &v29[v28];
        int v21 = v30 + 16;
        if (v19 == v22)
        {
          *(void *)(v9 + 344) = v30;
          *(void *)(v9 + 352) = v21;
          *(void *)(v9 + 360) = v32;
          size_t v3 = (size_t)__sz;
          if (!v22) {
            goto LABEL_37;
          }
LABEL_36:
          operator delete(v22);
          goto LABEL_37;
        }
        size_t v3 = (size_t)__sz;
        do
        {
          long long v33 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v30 - 1) = v33;
          v30 -= 16;
          *(void *)uint64_t v19 = 0;
          *((void *)v19 + 1) = 0;
        }
        while (v19 != v22);
        unint64_t v22 = *(char **)(v9 + 344);
        unint64_t v34 = *(char **)(v9 + 352);
        *(void *)(v9 + 344) = v30;
        *(void *)(v9 + 352) = v21;
        *(void *)(v9 + 360) = v32;
        if (v34 == v22)
        {
          if (v22) {
            goto LABEL_36;
          }
        }
        else
        {
          do
          {
            uint64_t v35 = (std::__shared_weak_count *)*((void *)v34 - 1);
            if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
            v34 -= 16;
          }
          while (v34 != v22);
          size_t v3 = (size_t)__sz;
          if (v22) {
            goto LABEL_36;
          }
        }
      }
      else
      {
        *(void *)uint64_t v19 = *i;
        uint64_t v20 = i[1];
        *((void *)v19 + 1) = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        int v21 = v19 + 16;
      }
LABEL_37:
      *(void *)(v9 + 352) = v21;
      uint64_t v13 = i[6];
      if (v13)
      {
LABEL_3:
        uint64_t v5 = *(void *)(a1 + 360);
        uint64_t v6 = *(void *)(v13 + 200);
        uint64_t v7 = *(void *)(i[7] + 200);
        LODWORD(v89) = 0;
        HIDWORD(v89) = 0;
        int32x2_t v8 = (int32x2_t)i[3];
        *(void *)((char *)&v89 + 4) = i[2];
        *(int32x2_t *)&long long v90 = vsub_s32(v8, *(int32x2_t *)((char *)&v89 + 4));
        *((void *)&v90 + 1) = 1;
        unint64_t v91 = i[4];
        LODWORD(v92) = 0;
        BYTE4(v92) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v5 + 16))(v5, v6, v7, &v89);
        continue;
      }
LABEL_38:
      uint64_t v37 = *(void **)(*i + 64);
      uint64_t v36 = *(std::__shared_weak_count **)(*i + 72);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v87 = v36;
      if (*((unsigned char *)i + 64))
      {
        uint64_t v38 = *i;
        uint64_t v39 = *(std::__shared_weak_count **)(*i + 72);
        *(void *)(v38 + 64) = 0;
        *(void *)(v38 + 72) = 0;
        if (v39)
        {
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      uint64_t v40 = v37[8];
      uint64_t v41 = *(void *)(a1 + 344);
      LODWORD(v89) = v40;
      WORD2(v89) = 1;
      uint64_t v42 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v41 + 16))(v41, &v89);
      uint64_t v43 = *(void *)(a1 + 360);
      long long v89 = (unint64_t)(*(uint64_t (**)(void *, void))(*v37 + 16))(v37, 0);
      *(void *)&long long v90 = v40;
      if (v87) {
        atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v90 + 1) = &unk_1EF57CEE8;
      unint64_t v91 = (unint64_t)v37;
      uint64_t v92 = v87;
      uint64_t v93 = (long long *)((char *)&v90 + 8);
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v43 + 48))(v43, v42, &v89);
      if (v93 == (long long *)((char *)&v90 + 8))
      {
        (*(void (**)(char *))(*((void *)&v90 + 1) + 32))((char *)&v90 + 8);
      }
      else if (v93)
      {
        (*(void (**)(void))(*(void *)v93 + 40))();
      }
      uint64_t v44 = *(void *)(a1 + 360);
      uint64_t v45 = *(void *)(i[7] + 200);
      unsigned int v46 = (v10 - v11) * *(unsigned __int8 *)(a1 + 36);
      LODWORD(v89) = 0;
      *(void *)((char *)&v89 + 4) = __PAIR64__(v40, v46);
      HIDWORD(v89) = v10 - v11;
      LODWORD(v90) = HIDWORD(v10) - v12;
      *(void *)((char *)&v90 + 4) = 1;
      HIDWORD(v90) = v11;
      unint64_t v91 = v12;
      LOBYTE(v92) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v44 + 32))(v44, v42, v45, &v89);
      uint64_t v47 = *(void *)(a1 + 304);
      int v49 = *(uint64_t **)(v47 - 16);
      unint64_t v48 = *(void *)(v47 - 8);
      if ((unint64_t)v49 >= v48)
      {
        float v51 = *(char **)(v47 - 24);
        uint64_t v52 = ((char *)v49 - v51) >> 3;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61) {
LABEL_78:
        }
          abort();
        uint64_t v54 = v48 - (void)v51;
        if (v54 >> 2 > v53) {
          unint64_t v53 = v54 >> 2;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          if (v55 >> 61) {
            goto LABEL_79;
          }
          float v56 = (char *)operator new(8 * v55);
        }
        else
        {
          float v56 = 0;
        }
        uint64_t v57 = (uint64_t *)&v56[8 * v52];
        *uint64_t v57 = v42;
        uint64_t v50 = v57 + 1;
        if (v49 != (uint64_t *)v51)
        {
          unint64_t v58 = (char *)(v49 - 1) - v51;
          if (v58 < 0x58) {
            goto LABEL_82;
          }
          if ((unint64_t)(v51 - v56) < 0x20) {
            goto LABEL_82;
          }
          uint64_t v59 = (v58 >> 3) + 1;
          std::string v60 = &v56[8 * v52 - 16];
          uint64_t v61 = v49 - 2;
          uint64_t v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v63 = *(_OWORD *)v61;
            *((_OWORD *)v60 - 1) = *((_OWORD *)v61 - 1);
            *(_OWORD *)std::string v60 = v63;
            v60 -= 32;
            v61 -= 4;
            v62 -= 4;
          }
          while (v62);
          v57 -= v59 & 0x3FFFFFFFFFFFFFFCLL;
          v49 -= v59 & 0x3FFFFFFFFFFFFFFCLL;
          if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_82:
            do
            {
              uint64_t v64 = *--v49;
              *--uint64_t v57 = v64;
            }
            while (v49 != (uint64_t *)v51);
          }
          int v49 = *(uint64_t **)(v47 - 24);
        }
        *(void *)(v47 - 24) = v57;
        *(void *)(v47 - 16) = v50;
        *(void *)(v47 - 8) = &v56[8 * v55];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        uint64_t *v49 = v42;
        uint64_t v50 = v49 + 1;
      }
      *(void *)(v47 - 16) = v50;
      uint64_t v65 = *(void *)(*i + 32);
      uint64_t v66 = *(void *)(*i + 40);
      uint64_t v67 = (v65 - 1);
      unint64_t v68 = (v65 & 0xFFFFFFFF00000000) - 0x100000000;
      uint64_t v69 = (v66 - v65 + 2) | 0x100000000;
      unint64_t v70 = v68 | v67;
      unint64_t v71 = v67 | v66 & 0xFFFFFFFF00000000;
      unint64_t v72 = (v66 - v68 + 0x100000000) & 0xFFFFFFFF00000000 | 1;
      unint64_t v73 = v68 & 0xFFFFFFFF00000000 | v66;
      uint64_t v74 = *(void *)(a1 + 360);
      uint64_t v75 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      uint64_t v76 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      long long v89 = 0uLL;
      *(void *)&long long v90 = v69;
      *((void *)&v90 + 1) = 1;
      unint64_t v91 = v70;
      LODWORD(v92) = 0;
      BYTE4(v92) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v74 + 16))(v74, v75, v76, &v89);
      uint64_t v77 = *(void *)(a1 + 360);
      uint64_t v78 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      uint64_t v79 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      long long v89 = 0uLL;
      *(void *)&long long v90 = v69;
      *((void *)&v90 + 1) = 1;
      unint64_t v91 = v71;
      LODWORD(v92) = 0;
      BYTE4(v92) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v77 + 16))(v77, v78, v79, &v89);
      uint64_t v80 = *(void *)(a1 + 360);
      uint64_t v81 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      uint64_t v82 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      long long v89 = 0uLL;
      *(void *)&long long v90 = v72;
      *((void *)&v90 + 1) = 1;
      unint64_t v91 = v70;
      LODWORD(v92) = 0;
      BYTE4(v92) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v80 + 16))(v80, v81, v82, &v89);
      uint64_t v83 = *(void *)(a1 + 360);
      uint64_t v84 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      uint64_t v85 = (*(uint64_t (**)(void))(*(void *)*i + 24))();
      long long v89 = 0uLL;
      *(void *)&long long v90 = v72;
      *((void *)&v90 + 1) = 1;
      unint64_t v91 = v73;
      LODWORD(v92) = 0;
      BYTE4(v92) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v83 + 16))(v83, v84, v85, &v89);
      size_t v3 = (size_t)__sz;
      if (v87)
      {
        if (!atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
    }
  }
}

void md::LabelGGLResourceCopier::didPushCopyItem(std::mutex *this, unint64_t a2)
{
  uint64_t v4 = this + 1;
  std::mutex::lock(this + 1);
  opaque = (uint64_t **)this[2].__m_.__opaque;
  uint64_t v5 = *(uint64_t **)this[2].__m_.__opaque;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        opaque = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        opaque = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)this[2].__m_.__opaque;
LABEL_8:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a2;
    uint64_t *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *opaque = v9;
    uint64_t v10 = *(void *)this[2].__m_.__sig;
    if (v10)
    {
      this[2].__m_.__sig = v10;
      uint64_t v9 = *opaque;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)this[2].__m_.__opaque, v9);
    ++*(void *)&this[2].__m_.__opaque[8];
  }
  std::mutex::unlock(v4);
}

void sub_1A18B58E0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::LabelGGLResourceCopier::copyTextureToTexture(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = (std::__shared_mutex_base *)(v8 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v8 + 104));
  uint64_t v10 = *(void *)(v8 + 600);
  if (a2 < (unint64_t)((*(void *)(v8 + 608) - v10) >> 3)
    && ((v11 = *(void *)(v10 + 8 * a2)) != 0 ? (BOOL v12 = HIDWORD(a2) == HIDWORD(v11)) : (BOOL v12 = 0), v12))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v8 + 624) + 40 * v11);
    uint64_t v13 = *(uint64_t **)(v8 + 632);
  }
  else
  {
    uint64_t v13 = *(uint64_t **)(v8 + 632);
    uint64_t v14 = v13;
  }
  std::__shared_mutex_base::unlock_shared(v9);
  if (v14 == v13 || v14 == 0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v14;
  }
  uint64_t v17 = *(void *)(a1 + 24);
  unint64_t v18 = (std::__shared_mutex_base *)(v17 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v17 + 104));
  uint64_t v19 = *(void *)(v17 + 600);
  if (a3 < (unint64_t)((*(void *)(v17 + 608) - v19) >> 3)
    && ((uint64_t v20 = *(void *)(v19 + 8 * a3)) != 0 ? (v21 = HIDWORD(a3) == HIDWORD(v20)) : (v21 = 0), v21))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v17 + 624) + 40 * v20);
    unint64_t v22 = *(uint64_t **)(v17 + 632);
  }
  else
  {
    unint64_t v22 = *(uint64_t **)(v17 + 632);
    uint64_t v23 = v22;
  }
  std::__shared_mutex_base::unlock_shared(v18);
  if (v23 != v22 && v23 != 0)
  {
    if (v16)
    {
      uint64_t v25 = *v23;
      if (*v23)
      {
        uint64_t v26 = (***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32));
        unint64_t v27 = *(void **)(v26 + 8);
        uint64_t v28 = v27[3];
        uint64_t v29 = v27[4];
        uint64_t v30 = v29 - v28;
        if (v29 != v28)
        {
          uint64_t v31 = v26;
          uint64_t v32 = 0;
          unint64_t v33 = v30 >> 3;
          while (1)
          {
            unint64_t v34 = *(unsigned __int8 **)(v28 + 8 * v32);
            if (*v34 == *(unsigned __int8 *)(a1 + 8))
            {
              unint64_t v35 = *((void *)v34 + 1);
              uint64_t v36 = v27[15];
              if (v35 < (v27[16] - v36) >> 3) {
                break;
              }
            }
            if (++v32 >= v33) {
              return;
            }
          }
          uint64_t v37 = *(void *)(v36 + 8 * v35);
          if (v37)
          {
            uint64_t v38 = *(void *)(*(void *)(v37 + 24) + 8 * *(unsigned __int8 *)(a1 + 9));
            if (v38)
            {
              int v39 = *a4;
              uint64_t v40 = *(void *)(a4 + 1);
              int v41 = a4[3];
              uint64_t v42 = *((void *)a4 + 2);
              int v43 = a4[6];
              int v44 = a4[7];
              uint64_t v45 = *((void *)a4 + 4);
              int v46 = a4[10];
              char v47 = *((unsigned char *)a4 + 44);
              v49[0] = 3;
              uint64_t v50 = 0;
              uint64_t v51 = 0;
              uint64_t v52 = v16;
              uint64_t v53 = v25;
              uint64_t v54 = v42;
              int v55 = v43;
              uint64_t v56 = v40;
              int v57 = v41;
              uint64_t v58 = v45;
              int v59 = v46;
              int v60 = 0;
              int v61 = 0;
              int v62 = v39;
              int v63 = v44;
              char v64 = v47;
              ggl::CommandBuffer::pushCopyItem(v38, (uint64_t)v49);
              unint64_t v48 = **(void **)(*(void *)(v31 + 16) + 136);
              md::LabelGGLResourceCopier::didPushCopyItem((std::mutex *)a1, v48);
            }
          }
        }
      }
    }
  }
}

uint64_t RendererPassListProviderWrapper::passList(RendererPassListProviderWrapper *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t ggl::CommandBuffer::pushCopyItem(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 176);
  unint64_t v5 = *(void *)(result + 184);
  if (v4 >= v5)
  {
    uint64_t v14 = *(void *)(result + 168);
    unint64_t v15 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v14) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x1AF286BCA1AF286) {
      abort();
    }
    unint64_t v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - v14) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0xD79435E50D7943) {
      unint64_t v16 = 0x1AF286BCA1AF286;
    }
    if (v16)
    {
      uint64_t v18 = 152 * v16;
      uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 192) + 16))(*(void *)(result + 192), 152 * v16, 8);
      uint64_t v19 = result + 152 * v15;
      unint64_t v16 = result + v18;
      if (result)
      {
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v19 = *(_OWORD *)a2;
        *(_OWORD *)(v19 + 16) = v20;
        long long v21 = *(_OWORD *)(a2 + 32);
        long long v22 = *(_OWORD *)(a2 + 48);
        long long v23 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(v19 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v19 + 80) = v23;
        *(_OWORD *)(v19 + 32) = v21;
        *(_OWORD *)(v19 + 48) = v22;
        long long v24 = *(_OWORD *)(a2 + 96);
        long long v25 = *(_OWORD *)(a2 + 112);
        long long v26 = *(_OWORD *)(a2 + 128);
        *(void *)(v19 + 144) = *(void *)(a2 + 144);
        *(_OWORD *)(v19 + 112) = v25;
        *(_OWORD *)(v19 + 128) = v26;
        *(_OWORD *)(v19 + 96) = v24;
      }
    }
    else
    {
      uint64_t v19 = 152 * v15;
    }
    uint64_t v13 = v19 + 152;
    uint64_t v28 = *(void *)(v3 + 168);
    uint64_t v27 = *(void *)(v3 + 176);
    if (v27 != v28)
    {
      do
      {
        long long v29 = *(_OWORD *)(v27 - 152);
        *(_OWORD *)(v19 - 136) = *(_OWORD *)(v27 - 136);
        *(_OWORD *)(v19 - 152) = v29;
        long long v30 = *(_OWORD *)(v27 - 120);
        long long v31 = *(_OWORD *)(v27 - 104);
        long long v32 = *(_OWORD *)(v27 - 88);
        *(_OWORD *)(v19 - 72) = *(_OWORD *)(v27 - 72);
        *(_OWORD *)(v19 - 88) = v32;
        *(_OWORD *)(v19 - 104) = v31;
        *(_OWORD *)(v19 - 120) = v30;
        long long v33 = *(_OWORD *)(v27 - 56);
        long long v34 = *(_OWORD *)(v27 - 40);
        long long v35 = *(_OWORD *)(v27 - 24);
        *(void *)(v19 - 8) = *(void *)(v27 - 8);
        *(_OWORD *)(v19 - 24) = v35;
        *(_OWORD *)(v19 - 40) = v34;
        *(_OWORD *)(v19 - 56) = v33;
        v19 -= 152;
        v27 -= 152;
      }
      while (v27 != v28);
      uint64_t v27 = *(void *)(v3 + 168);
    }
    *(void *)(v3 + 168) = v19;
    *(void *)(v3 + 176) = v13;
    uint64_t v36 = *(void *)(v3 + 184);
    *(void *)(v3 + 184) = v16;
    if (v27) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 192) + 40))(*(void *)(v3 + 192), v27, v36 - v27);
    }
  }
  else
  {
    if (v4)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v6;
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 80) = v9;
      *(_OWORD *)(v4 + 32) = v7;
      *(_OWORD *)(v4 + 48) = v8;
      long long v10 = *(_OWORD *)(a2 + 96);
      long long v11 = *(_OWORD *)(a2 + 112);
      long long v12 = *(_OWORD *)(a2 + 128);
      *(void *)(v4 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(v4 + 112) = v11;
      *(_OWORD *)(v4 + 128) = v12;
      *(_OWORD *)(v4 + 96) = v10;
    }
    uint64_t v13 = v4 + 152;
  }
  *(void *)(v3 + 176) = v13;
  return result;
}

void md::LabelGGLResourceCopier::copyBufferToTexture(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = (std::__shared_mutex_base *)(v8 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v8 + 272));
  uint64_t v10 = *(void *)(v8 + 696);
  if (a2 < (unint64_t)((*(void *)(v8 + 704) - v10) >> 3)
    && ((v11 = *(void *)(v10 + 8 * a2)) != 0 ? (BOOL v12 = HIDWORD(a2) == HIDWORD(v11)) : (BOOL v12 = 0), v12))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v8 + 720) + 32 * *(void *)(v10 + 8 * a2));
    uint64_t v13 = *(uint64_t **)(v8 + 728);
  }
  else
  {
    uint64_t v13 = *(uint64_t **)(v8 + 728);
    uint64_t v14 = v13;
  }
  std::__shared_mutex_base::unlock_shared(v9);
  if (v14 == v13 || v14 == 0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v14;
  }
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = (std::__shared_mutex_base *)(v17 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v17 + 104));
  uint64_t v19 = *(void *)(v17 + 600);
  if (a3 < (unint64_t)((*(void *)(v17 + 608) - v19) >> 3)
    && ((uint64_t v20 = *(void *)(v19 + 8 * a3)) != 0 ? (v21 = HIDWORD(a3) == HIDWORD(v20)) : (v21 = 0), v21))
  {
    long long v23 = (uint64_t *)(*(void *)(v17 + 624) + 40 * v20);
    long long v22 = *(uint64_t **)(v17 + 632);
  }
  else
  {
    long long v22 = *(uint64_t **)(v17 + 632);
    long long v23 = v22;
  }
  std::__shared_mutex_base::unlock_shared(v18);
  if (v23 != v22 && v23 != 0)
  {
    if (v16)
    {
      uint64_t v25 = *v23;
      if (*v23)
      {
        uint64_t v26 = (***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32));
        uint64_t v27 = *(void **)(v26 + 8);
        uint64_t v28 = v27[3];
        uint64_t v29 = v27[4];
        uint64_t v30 = v29 - v28;
        if (v29 != v28)
        {
          uint64_t v31 = v26;
          uint64_t v32 = 0;
          unint64_t v33 = v30 >> 3;
          while (1)
          {
            long long v34 = *(unsigned __int8 **)(v28 + 8 * v32);
            if (*v34 == *(unsigned __int8 *)(a1 + 8))
            {
              unint64_t v35 = *((void *)v34 + 1);
              uint64_t v36 = v27[15];
              if (v35 < (v27[16] - v36) >> 3) {
                break;
              }
            }
            if (++v32 >= v33) {
              return;
            }
          }
          uint64_t v37 = *(void *)(v36 + 8 * v35);
          if (v37)
          {
            uint64_t v38 = *(void *)(*(void *)(v37 + 24) + 8 * *(unsigned __int8 *)(a1 + 9));
            if (v38)
            {
              int v39 = *a4;
              int v40 = a4[1];
              int v41 = a4[2];
              uint64_t v42 = *(void *)(a4 + 3);
              int v43 = a4[5];
              int v44 = a4[6];
              uint64_t v45 = *(void *)(a4 + 7);
              int v46 = a4[9];
              char v47 = *((unsigned char *)a4 + 40);
              v49[0] = 1;
              uint64_t v50 = v16;
              uint64_t v51 = 0;
              uint64_t v52 = 0;
              uint64_t v53 = v25;
              uint64_t v54 = v42;
              int v55 = v43;
              uint64_t v56 = v45;
              int v57 = v46;
              int v58 = v39;
              int v59 = v40;
              int v60 = v41;
              int v61 = 0;
              int v62 = v44;
              char v63 = v47;
              ggl::CommandBuffer::pushCopyItem(v38, (uint64_t)v49);
              unint64_t v48 = **(void **)(*(void *)(v31 + 16) + 136);
              md::LabelGGLResourceCopier::didPushCopyItem((std::mutex *)a1, v48);
            }
          }
        }
      }
    }
  }
}

void mre::GGLResourceStore::createBuffer()
{
}

void md::LabelGGLResourceCopier::uploadBuffer(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 24);
  long long v7 = (std::__shared_mutex_base *)(v6 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v6 + 272));
  uint64_t v8 = *(void *)(v6 + 696);
  if (a2 < (unint64_t)((*(void *)(v6 + 704) - v8) >> 3)
    && ((uint64_t v9 = *(void *)(v8 + 8 * a2)) != 0 ? (v10 = HIDWORD(a2) == HIDWORD(v9)) : (v10 = 0), v10))
  {
    BOOL v12 = (uint64_t *)(*(void *)(v6 + 720) + 32 * *(void *)(v8 + 8 * a2));
    uint64_t v11 = *(uint64_t **)(v6 + 728);
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 728);
    BOOL v12 = v11;
  }
  std::__shared_mutex_base::unlock_shared(v7);
  if (v12 != v11 && v12 != 0)
  {
    uint64_t v14 = *v12;
    if (*v12)
    {
      unint64_t v15 = *(void **)((***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32)) + 8);
      uint64_t v16 = v15[3];
      uint64_t v17 = v15[4];
      uint64_t v18 = v17 - v16;
      if (v17 != v16)
      {
        uint64_t v19 = 0;
        unint64_t v20 = v18 >> 3;
        while (1)
        {
          BOOL v21 = *(unsigned __int8 **)(v16 + 8 * v19);
          if (*v21 == *(unsigned __int8 *)(a1 + 8))
          {
            unint64_t v22 = *((void *)v21 + 1);
            uint64_t v23 = v15[15];
            if (v22 < (v15[16] - v23) >> 3) {
              break;
            }
          }
          if (++v19 >= v20) {
            return;
          }
        }
        uint64_t v24 = *(void *)(v23 + 8 * v22);
        if (v24)
        {
          uint64_t v25 = *(void *)(*(void *)(v24 + 24) + 8 * *(unsigned __int8 *)(a1 + 9));
          if (v25)
          {
            long long v68 = *a3;
            uint64_t v69 = *((void *)a3 + 2);
            uint64_t v26 = (long long *)*((void *)a3 + 6);
            if (v26)
            {
              if (v26 == (long long *)((char *)a3 + 24))
              {
                unint64_t v71 = v70;
                (*(void (**)(long long *, void *))(*(void *)v26 + 24))(v26, v70);
                uint64_t v27 = v71;
              }
              else
              {
                uint64_t v27 = (void *)(*(uint64_t (**)(long long *))(*(void *)v26 + 16))(v26);
                unint64_t v71 = v27;
              }
              long long v55 = *(long long *)((char *)a3 + 8);
              uint64_t v28 = *(void *)a3;
              long long v58 = v68;
              uint64_t v59 = v69;
              if (v27)
              {
                if (v27 == v70)
                {
                  int v61 = v60;
                  (*(void (**)(void *, void *))(v70[0] + 24))(v70, v60);
                }
                else
                {
                  int v61 = v27;
                  unint64_t v71 = 0;
                }
              }
              else
              {
                int v61 = 0;
              }
            }
            else
            {
              unint64_t v71 = 0;
              long long v55 = *(long long *)((char *)a3 + 8);
              uint64_t v28 = *(void *)a3;
              long long v58 = *a3;
              uint64_t v59 = *((void *)a3 + 2);
              int v61 = 0;
            }
            char v63 = 0;
            uint64_t v29 = (char *)operator new(0x40uLL);
            uint64_t v30 = v29;
            *(void *)uint64_t v29 = &unk_1EF575900;
            *(_OWORD *)(v29 + 8) = v58;
            uint64_t v31 = v61;
            *((void *)v29 + 3) = v59;
            if (v31)
            {
              if (v31 == v60)
              {
                *((void *)v29 + 7) = v29 + 32;
                (*(void (**)(void *))(v60[0] + 24))(v60);
              }
              else
              {
                *((void *)v29 + 7) = v31;
                int v61 = 0;
              }
            }
            else
            {
              *((void *)v29 + 7) = 0;
            }
            char v63 = v30;
            *(void *)&long long v64 = v28;
            *((void *)&v64 + 1) = v14;
            long long v65 = v55;
            uint64_t v67 = (void *)(*(uint64_t (**)(void *))(*v30 + 16))(v30);
            unint64_t v33 = *(void *)(v25 + 240);
            unint64_t v32 = *(void *)(v25 + 248);
            if (v33 >= v32)
            {
              uint64_t v36 = *(void *)(v25 + 232);
              uint64_t v37 = (uint64_t)(v33 - v36) >> 6;
              if ((unint64_t)(v37 + 1) >> 58) {
                abort();
              }
              uint64_t v38 = v32 - v36;
              uint64_t v39 = v38 >> 5;
              if (v38 >> 5 <= (unint64_t)(v37 + 1)) {
                uint64_t v39 = v37 + 1;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFC0) {
                uint64_t v40 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v40 = v39;
              }
              if (v40)
              {
                uint64_t v41 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v25 + 256) + 16))(*(void *)(v25 + 256), v40 << 6, 8);
                uint64_t v42 = (_OWORD *)(v41 + (v37 << 6));
                uint64_t v40 = v41 + (v40 << 6);
                uint64_t v57 = v40;
                if (v41)
                {
                  long long v43 = v65;
                  *uint64_t v42 = v64;
                  v42[1] = v43;
                  if (v67)
                  {
                    if (v67 == v66)
                    {
                      *(void *)(v41 + (v37 << 6) + 56) = v42 + 2;
                      (*(void (**)(void *))(*v67 + 24))(v67);
                    }
                    else
                    {
                      *(void *)(v41 + (v37 << 6) + 56) = (*(uint64_t (**)(void))(*v67 + 16))();
                    }
                  }
                  else
                  {
                    *(void *)(v41 + (v37 << 6) + 56) = 0;
                  }
                }
              }
              else
              {
                uint64_t v42 = (_OWORD *)(v37 << 6);
                uint64_t v57 = 0;
              }
              int v44 = v42 + 4;
              uint64_t v56 = v42 + 4;
              uint64_t v45 = *(void **)(v25 + 232);
              int v46 = *(void **)(v25 + 240);
              if (v46 == v45)
              {
                char v47 = *(void **)(v25 + 240);
              }
              else
              {
                do
                {
                  long long v48 = *((_OWORD *)v46 - 3);
                  *(v42 - 4) = *((_OWORD *)v46 - 4);
                  *(v42 - 3) = v48;
                  int v49 = (void *)*(v46 - 1);
                  if (v49)
                  {
                    if (v46 - 4 == v49)
                    {
                      *((void *)v42 - 1) = v42 - 2;
                      (*(void (**)(void))(*(void *)*(v46 - 1) + 24))(*(v46 - 1));
                    }
                    else
                    {
                      *((void *)v42 - 1) = v49;
                      *(v46 - 1) = 0;
                    }
                  }
                  else
                  {
                    *((void *)v42 - 1) = 0;
                  }
                  v42 -= 4;
                  v46 -= 8;
                }
                while (v46 != v45);
                char v47 = *(void **)(v25 + 232);
                int v46 = *(void **)(v25 + 240);
                int v44 = v56;
                uint64_t v40 = v57;
              }
              *(void *)(v25 + 232) = v42;
              *(void *)(v25 + 240) = v44;
              uint64_t v50 = *(void *)(v25 + 248);
              *(void *)(v25 + 248) = v40;
              if (v46 == v47)
              {
                char v47 = v46;
              }
              else
              {
                uint64_t v51 = v46 - 4;
                uint64_t v52 = v46 - 4;
                do
                {
                  uint64_t v54 = (void *)v52[3];
                  if (v52 == v54)
                  {
                    (*(void (**)(void *))(*v52 + 32))(v52);
                  }
                  else if (v54)
                  {
                    (*(void (**)(void *))(*v54 + 40))(v54);
                  }
                  uint64_t v53 = v52 - 4;
                  v52 -= 8;
                  v51 -= 8;
                }
                while (v53 != v47);
              }
              if (v47) {
                (*(void (**)(void, void *, uint64_t))(**(void **)(v25 + 256) + 40))(*(void *)(v25 + 256), v47, v50 - (void)v47);
              }
              goto LABEL_77;
            }
            if (v33)
            {
              long long v34 = v65;
              *(_OWORD *)unint64_t v33 = v64;
              *(_OWORD *)(v33 + 16) = v34;
              uint64_t v35 = (uint64_t)v67;
              if (v67)
              {
                if (v67 == v66)
                {
                  *(void *)(v33 + 56) = v33 + 32;
                  (*(void (**)(void *))(*v67 + 24))(v67);
                  goto LABEL_54;
                }
                uint64_t v35 = (*(uint64_t (**)(void))(*v67 + 16))();
              }
              *(void *)(v33 + 56) = v35;
            }
LABEL_54:
            int v44 = (_OWORD *)(v33 + 64);
            *(void *)(v25 + 240) = v33 + 64;
LABEL_77:
            *(void *)(v25 + 240) = v44;
            if (v67 == v66)
            {
              (*(void (**)(void *))(v66[0] + 32))(v66);
            }
            else if (v67)
            {
              (*(void (**)(void))(*v67 + 40))();
            }
            if (v63 == v62)
            {
              (*(void (**)(void *))(v62[0] + 32))(v62);
            }
            else if (v63)
            {
              (*(void (**)(void))(*v63 + 40))();
            }
            if (v61 == v60)
            {
              (*(void (**)(void *))(v60[0] + 32))(v60);
            }
            else if (v61)
            {
              (*(void (**)(void))(*v61 + 40))();
            }
            if (v71 == v70)
            {
              (*(void (**)(void *))(v70[0] + 32))(v70);
            }
            else if (v71)
            {
              (*(void (**)(void *))(*v71 + 40))(v71);
            }
          }
        }
      }
    }
  }
}

void sub_1A18B6CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__split_buffer<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator> &>::~__split_buffer((uint64_t)&a12);
  ggl::BufferLoadItem::~BufferLoadItem((ggl::BufferLoadItem *)&a29);
  std::function<void ()(ggl::BufferLoadItem const&)>::~function(&a25);
  md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0::~$_0((uint64_t)&a17);
  md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0::~$_0(v29 - 144);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF57CEE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 32;
  uint64_t v3 = (char *)*((void *)__p + 7);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

void std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  float v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EF575900;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    if (v3 == a1 + 32)
    {
      *((void *)v2 + 7) = v2 + 32;
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      return v2;
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *((void *)v2 + 7) = v3;
  return v2;
}

void sub_1A18B6F38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  float v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF57CF30;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1A6239250);
  }
  return result;
}

uint64_t mre::GGLResourceStore::getTextureDescriptor(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 600);
  if (a2 < (unint64_t)((*(void *)(a1 + 608) - v5) >> 3)
    && ((uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    uint64_t v9 = *(void *)(a1 + 624) + 40 * v6;
    uint64_t v8 = *(void *)(a1 + 632);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 632);
    uint64_t v9 = v8;
  }
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__shared_mutex_base::unlock_shared(v4);
  if (v10) {
    return v10 + 16;
  }
  else {
    return 0;
  }
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::shrink_to_fit(uint64_t result)
{
  if (!*(unsigned char *)(result + 14))
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int16 *)(result + 10);
    int v3 = *(unsigned __int8 *)(result + 15);
    if (v2 != *(unsigned __int16 *)(result + 12) || !*(unsigned char *)(result + 15))
    {
      unsigned __int16 v4 = (v2 & 0xFFFC) + 4;
      uint64_t v5 = gss::Allocator::instance((gss::Allocator *)result);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v5 + 16))(v5, (unsigned __int16)(v4 + 4 * v2) & 0xFFFC, 1);
      uint64_t v6 = result;
      if (*(void *)v1)
      {
        geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1, (unsigned char *)result, (_DWORD *)(result + v4), v3 == 0);
        uint64_t v8 = gss::Allocator::instance(v7);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *(void *)v1, *(unsigned __int16 *)(v1 + 12));
      }
      *(_WORD *)(v1 + 12) = v2;
      *(void *)uint64_t v1 = v6;
      *(_WORD *)(v1 + 8) = v4;
    }
  }
  return result;
}

uint64_t gss::StylePropertySet<gss::ScenePropertyID>::intern(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(result + 30))
  {
    *(unsigned char *)(result + 30) = 1;
    int v4 = *(unsigned __int16 *)(result + 26);
    if (*(_WORD *)(result + 26))
    {
      LOWORD(v51) = 0;
      uint64_t result = geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(a2, v4, &v51);
      uint64_t v5 = result;
      if (result)
      {
        __int16 v6 = v51;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 16, (unsigned char *)result, (unsigned char *)(result + (unsigned __int16)v51), 1);
        uint64_t v8 = gss::Allocator::instance(v7);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *(void *)(v3 + 16), *(unsigned __int16 *)(v3 + 28));
        *(_WORD *)(v3 + 28) = 0;
        *(void *)(v3 + 16) = v5;
        *(_WORD *)(v3 + 24) = v6;
      }
    }
  }
  if (!*(unsigned char *)(v3 + 46))
  {
    *(unsigned char *)(v3 + 46) = 1;
    int v9 = *(unsigned __int16 *)(v3 + 42);
    if (*(_WORD *)(v3 + 42))
    {
      unsigned int v10 = 5 * v9;
      if ((5 * v9) <= *(_DWORD *)(a2 + 76))
      {
        unsigned int v11 = *(_DWORD *)(a2 + 72);
        if (v11 < v10)
        {
          uint64_t v12 = gss::Allocator::instance((gss::Allocator *)result);
          uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v12 + 16))(v12, *(unsigned int *)(a2 + 76), 1);
          int v14 = *(_DWORD *)(a2 + 76);
          uint64_t v54 = (void **)&v52;
          uint64_t v51 = v13;
          uint64_t v52 = (uint64_t (**)(void **))&unk_1EF57A898;
          int v53 = v14;
          unint64_t v15 = *(uint64_t **)(a2 + 48);
          if ((unint64_t)v15 >= *(void *)(a2 + 56))
          {
            uint64_t v16 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)(a2 + 40), &v51);
          }
          else
          {
            uint64_t v51 = 0;
            uint64_t *v15 = v13;
            v15[4] = (uint64_t)(v15 + 1);
            (*((void (**)(void **))*v54 + 3))(v54);
            uint64_t v16 = (char *)(v15 + 5);
          }
          *(void *)(a2 + 48) = v16;
          int v30 = *(_DWORD *)(a2 + 76);
          *(_DWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 68) = v30;
          *(_DWORD *)(a2 + 72) = v30;
          uint64_t v31 = v51;
          uint64_t result = (uint64_t)v54;
          uint64_t v51 = 0;
          if (v31)
          {
            uint64_t v50 = v31;
            if (!v54) {
              goto LABEL_44;
            }
            (*((void (**)(void))*v54 + 6))();
            uint64_t result = (uint64_t)v54;
          }
          if ((uint64_t (***)(void **))result == &v52)
          {
            uint64_t result = v52[4]((void **)&v52);
          }
          else if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
          }
          unsigned int v11 = *(_DWORD *)(a2 + 72);
        }
        uint64_t v34 = *(void *)(*(void *)(a2 + 48) - 40);
        uint64_t v35 = *(unsigned int *)(a2 + 64);
        int v36 = *(_DWORD *)(a2 + 68) - 4 * v9;
        *(_DWORD *)(a2 + 64) = v35 + v9;
        *(_DWORD *)(a2 + 68) = v36;
        *(_DWORD *)(a2 + 72) = v11 - v10;
        if (v34)
        {
          uint64_t v37 = v34 + v35;
          __int16 v38 = v36 - v35;
          geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 32, (unsigned char *)(v34 + v35), (_DWORD *)(v34 + v35 + (unsigned __int16)(v36 - v35)), 1);
          uint64_t v40 = gss::Allocator::instance(v39);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v40 + 40))(v40, *(void *)(v3 + 32), *(unsigned __int16 *)(v3 + 44));
          *(_WORD *)(v3 + 44) = 0;
          *(void *)(v3 + 32) = v37;
          *(_WORD *)(v3 + 40) = v38;
        }
      }
    }
  }
  if (*(unsigned char *)(v3 + 62)) {
    goto LABEL_4;
  }
  *(unsigned char *)(v3 + 62) = 1;
  int v17 = *(unsigned __int16 *)(v3 + 58);
  if (!*(_WORD *)(v3 + 58)) {
    goto LABEL_4;
  }
  unsigned int v18 = 9 * v17;
  if ((9 * v17) > *(_DWORD *)(a2 + 116)) {
    goto LABEL_4;
  }
  unsigned int v19 = *(_DWORD *)(a2 + 112);
  if (v19 < v18)
  {
    uint64_t v20 = gss::Allocator::instance((gss::Allocator *)result);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v20 + 16))(v20, *(unsigned int *)(a2 + 116), 1);
    int v22 = *(_DWORD *)(a2 + 116);
    uint64_t v54 = (void **)&v52;
    uint64_t v51 = v21;
    uint64_t v52 = (uint64_t (**)(void **))&unk_1EF57A8E0;
    int v53 = v22;
    uint64_t v23 = *(uint64_t **)(a2 + 88);
    if ((unint64_t)v23 >= *(void *)(a2 + 96))
    {
      uint64_t v24 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)(a2 + 80), &v51);
    }
    else
    {
      uint64_t v51 = 0;
      *uint64_t v23 = v21;
      v23[4] = (uint64_t)(v23 + 1);
      (*((void (**)(void **))*v54 + 3))(v54);
      uint64_t v24 = (char *)(v23 + 5);
    }
    *(void *)(a2 + 88) = v24;
    int v32 = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 108) = v32;
    *(_DWORD *)(a2 + 112) = v32;
    uint64_t v33 = v51;
    uint64_t result = (uint64_t)v54;
    uint64_t v51 = 0;
    if (!v33) {
      goto LABEL_33;
    }
    uint64_t v50 = v33;
    if (v54)
    {
      (*((void (**)(void))*v54 + 6))();
      uint64_t result = (uint64_t)v54;
LABEL_33:
      if ((uint64_t (***)(void **))result == &v52)
      {
        uint64_t result = v52[4]((void **)&v52);
      }
      else if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      }
      unsigned int v19 = *(_DWORD *)(a2 + 112);
      goto LABEL_42;
    }
LABEL_44:
    std::__throw_bad_function_call[abi:nn180100]();
    int v49 = v48;
    std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](&v51);
    _Unwind_Resume(v49);
  }
LABEL_42:
  uint64_t v41 = *(void *)(*(void *)(a2 + 88) - 40);
  uint64_t v42 = *(unsigned int *)(a2 + 104);
  int v43 = *(_DWORD *)(a2 + 108) - 8 * v17;
  *(_DWORD *)(a2 + 104) = v42 + v17;
  *(_DWORD *)(a2 + 108) = v43;
  *(_DWORD *)(a2 + 112) = v19 - v18;
  if (v41)
  {
    uint64_t v44 = v41 + v42;
    __int16 v45 = v43 - v42;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 48, (unsigned char *)(v41 + v42), (void *)(v41 + v42 + (unsigned __int16)(v43 - v42)), 1);
    uint64_t v47 = gss::Allocator::instance(v46);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v47 + 40))(v47, *(void *)(v3 + 48), *(unsigned __int16 *)(v3 + 60));
    *(_WORD *)(v3 + 60) = 0;
    *(void *)(v3 + 48) = v44;
    *(_WORD *)(v3 + 56) = v45;
  }
LABEL_4:
  if (!*(unsigned char *)(v3 + 14))
  {
    *(unsigned char *)(v3 + 14) = 1;
    int v25 = *(unsigned __int16 *)(v3 + 10);
    if (*(_WORD *)(v3 + 10))
    {
      LOWORD(v51) = 0;
      uint64_t result = geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(a2, v25, &v51);
      uint64_t v26 = result;
      if (result)
      {
        __int16 v27 = v51;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3, (unsigned char *)result, (unsigned char *)(result + (unsigned __int16)v51), 1);
        uint64_t v29 = gss::Allocator::instance(v28);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v29 + 40))(v29, *(void *)v3, *(unsigned __int16 *)(v3 + 12));
        *(_WORD *)(v3 + 12) = 0;
        *(void *)uint64_t v3 = v26;
        *(_WORD *)(v3 + 8) = v27;
      }
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::shrink_to_fit(uint64_t result)
{
  if (!*(unsigned char *)(result + 14))
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int16 *)(result + 10);
    int v3 = *(unsigned __int8 *)(result + 15);
    if (v2 != *(unsigned __int16 *)(result + 12) || !*(unsigned char *)(result + 15))
    {
      unsigned __int16 v4 = v2 + 1;
      uint64_t v5 = gss::Allocator::instance((gss::Allocator *)result);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v5 + 16))(v5, (unsigned __int16)(v2 + 1 + v2), 1);
      uint64_t v6 = result;
      if (*(void *)v1)
      {
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1, (unsigned char *)result, (unsigned char *)(result + v4), v3 == 0);
        uint64_t v8 = gss::Allocator::instance(v7);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *(void *)v1, *(unsigned __int16 *)(v1 + 12));
      }
      *(_WORD *)(v1 + 12) = v2;
      *(void *)uint64_t v1 = v6;
      *(_WORD *)(v1 + 8) = v4;
    }
  }
  return result;
}

void geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, unsigned char *__dst, unsigned char *a3, int a4)
{
  unint64_t v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return;
  }
  if (a4)
  {
    uint64_t v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    int v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      unint64_t v14 = ((4 * v4 - 4) >> 2) + 1;
      uint64_t v10 = v14 & 0x7FFFFFFFFFFFFFF8;
      int32x4_t v15 = (int32x4_t)xmmword_1A28FC7A0;
      uint64_t v16 = v8 + 1;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16[-1] = v15;
        *uint64_t v16 = vaddq_s32(v15, v17);
        int32x4_t v15 = vaddq_s32(v15, v18);
        v16 += 2;
        v19 -= 8;
      }
      while (v19);
      if (v14 == v10) {
        goto LABEL_15;
      }
      unsigned int v11 = (unsigned int *)v8 + (v14 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      unsigned int v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_15:
    int v22 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v22, 126 - 2 * __clz(v4), 1);
    if (*(_WORD *)(a1 + 10))
    {
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = (unsigned char *)(*(void *)a1 + v8->u32[v20]);
        __dst[v20] = *v21;
        a3[v20++] = v21[*(unsigned __int16 *)(a1 + 8)];
      }
      while (v20 < *(unsigned __int16 *)(a1 + 10));
    }
    *(unsigned char *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, v4);
  size_t v12 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    uint64_t v13 = (const void *)(*(void *)a1 + *(unsigned __int16 *)(a1 + 8));
    memmove(a3, v13, v12);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int v11 = (unsigned int *)result;
LABEL_2:
  size_t v12 = a2 - 1;
  uint64_t v13 = v11;
  while (1)
  {
    unsigned int v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v91 = *v12;
          uint64_t v92 = *v13;
          if (*(unsigned __int8 *)(**a3 + v91) < *(unsigned __int8 *)(**a3 + v92))
          {
            *uint64_t v13 = v91;
            *size_t v12 = v92;
          }
          return result;
        case 3:
          uint64_t v93 = *v13;
          uint64_t v94 = v13[1];
          uint64_t v95 = **a3;
          unsigned int v96 = *(unsigned __int8 *)(v95 + v94);
          unsigned int v97 = *(unsigned __int8 *)(v95 + v93);
          uint64_t v98 = *v12;
          unsigned int v99 = *(unsigned __int8 *)(v95 + v98);
          if (v96 >= v97)
          {
            if (v99 < v96)
            {
              v13[1] = v98;
              *size_t v12 = v94;
              uint64_t v135 = *v13;
              uint64_t v134 = v13[1];
              if (*(unsigned __int8 *)(v95 + v134) < *(unsigned __int8 *)(v95 + v135))
              {
                *uint64_t v13 = v134;
                v13[1] = v135;
              }
            }
          }
          else if (v99 >= v96)
          {
            *uint64_t v13 = v94;
            v13[1] = v93;
            uint64_t v160 = *v12;
            if (*(unsigned __int8 *)(v95 + v160) < v97)
            {
              v13[1] = v160;
              *size_t v12 = v93;
            }
          }
          else
          {
            *uint64_t v13 = v98;
            *size_t v12 = v93;
          }
          return result;
        case 4:
          uint64_t v101 = v13 + 1;
          uint64_t v102 = v13[1];
          uint64_t v103 = v13 + 2;
          uint64_t v104 = v13[2];
          unsigned int v105 = v13[1];
          uint64_t v106 = **a3;
          unsigned int v107 = *(unsigned __int8 *)(v106 + v102);
          uint64_t v108 = *v13;
          unsigned int v109 = *(unsigned __int8 *)(v106 + v108);
          unsigned int v110 = *(unsigned __int8 *)(v106 + v104);
          if (v107 >= v109)
          {
            if (v110 < v107)
            {
              *uint64_t v101 = v104;
              *uint64_t v103 = v102;
              uint64_t v111 = v13;
              uint64_t result = (uint64_t)(v13 + 1);
              if (v110 >= v109) {
                goto LABEL_173;
              }
              goto LABEL_171;
            }
          }
          else
          {
            if (v110 < v107)
            {
              uint64_t v111 = v13;
              uint64_t result = (uint64_t)(v13 + 2);
              uint64_t v102 = *v13;
              unsigned int v105 = *v13;
LABEL_171:
              *uint64_t v111 = v104;
              *(_DWORD *)uint64_t result = v108;
              goto LABEL_173;
            }
            uint64_t v111 = v13 + 1;
            *uint64_t v13 = v102;
            v13[1] = v108;
            uint64_t result = (uint64_t)(v13 + 2);
            uint64_t v102 = v108;
            unsigned int v105 = v108;
            if (v110 < v109) {
              goto LABEL_171;
            }
          }
          uint64_t v102 = v104;
          unsigned int v105 = v104;
LABEL_173:
          uint64_t v161 = *v12;
          if (*(unsigned __int8 *)(v106 + v161) < *(unsigned __int8 *)(v106 + v102))
          {
            *uint64_t v103 = v161;
            *size_t v12 = v105;
            uint64_t v162 = *v103;
            uint64_t v163 = *v101;
            unsigned int v164 = *(unsigned __int8 *)(v106 + v162);
            if (v164 < *(unsigned __int8 *)(v106 + v163))
            {
              v13[1] = v162;
              v13[2] = v163;
              uint64_t v165 = *v13;
              if (v164 < *(unsigned __int8 *)(v106 + v165))
              {
                *uint64_t v13 = v162;
                v13[1] = v165;
              }
            }
          }
          return result;
        case 5:
          uint64_t v100 = **a3;
          return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, v100);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v122 = (unint64_t)(v15 - 2) >> 1;
        uint64_t v123 = *a3;
        int64_t v124 = v122;
        do
        {
          if (v122 >= v124)
          {
            uint64_t v126 = (2 * v124) | 1;
            uint64_t v127 = &v13[v126];
            uint64_t v128 = *v127;
            if (2 * v124 + 2 < v15)
            {
              uint64_t v129 = *v123;
              if (*(unsigned __int8 *)(*v123 + v128) < *(unsigned __int8 *)(*v123 + v127[1]))
              {
                LODWORD(v128) = v127[1];
                ++v127;
                uint64_t v126 = 2 * v124 + 2;
              }
            }
            else
            {
              uint64_t v129 = *v123;
            }
            int v130 = &v13[v124];
            uint64_t v131 = *v130;
            uint64_t result = *(unsigned __int8 *)(v129 + v131);
            if (*(unsigned __int8 *)(v129 + v128) >= result)
            {
              do
              {
                uint64_t v132 = v127;
                unsigned int *v130 = v128;
                if (v122 < v126) {
                  break;
                }
                uint64_t v133 = (2 * v126) | 1;
                uint64_t v127 = &v13[v133];
                uint64_t v126 = 2 * v126 + 2;
                uint64_t v128 = *v127;
                if (v126 < v15)
                {
                  if (*(unsigned __int8 *)(v129 + v128) >= *(unsigned __int8 *)(v129 + v127[1]))
                  {
                    uint64_t v126 = v133;
                  }
                  else
                  {
                    LODWORD(v128) = v127[1];
                    ++v127;
                  }
                }
                else
                {
                  uint64_t v126 = v133;
                }
                int v130 = v132;
              }
              while (*(unsigned __int8 *)(v129 + v128) >= result);
              unsigned int *v132 = v131;
            }
          }
          BOOL v125 = v124-- <= 0;
        }
        while (!v125);
        uint64_t v142 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v143 = 0;
          unsigned int v144 = *v13;
          long long v145 = *a3;
          long long v146 = v13;
          do
          {
            uint64_t v149 = &v146[v143];
            unsigned int v150 = v149[1];
            uint64_t v148 = v149 + 1;
            uint64_t v147 = v150;
            uint64_t v151 = (2 * v143) | 1;
            uint64_t v143 = 2 * v143 + 2;
            if (v143 < v142)
            {
              uint64_t result = v148[1];
              if (*(unsigned __int8 *)(*v145 + v147) >= *(unsigned __int8 *)(*v145 + result))
              {
                uint64_t v143 = v151;
              }
              else
              {
                LODWORD(v147) = v148[1];
                ++v148;
              }
            }
            else
            {
              uint64_t v143 = v151;
            }
            unsigned int *v146 = v147;
            long long v146 = v148;
          }
          while (v143 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
          if (v148 == --a2)
          {
            unsigned int *v148 = v144;
          }
          else
          {
            unsigned int *v148 = *a2;
            *a2 = v144;
            uint64_t v152 = (char *)v148 - (char *)v13 + 4;
            if (v152 >= 5)
            {
              unint64_t v153 = (((unint64_t)v152 >> 2) - 2) >> 1;
              unint64_t v154 = &v13[v153];
              uint64_t v155 = *v154;
              uint64_t v156 = *v148;
              uint64_t v157 = *v145;
              unsigned int v158 = *(unsigned __int8 *)(v157 + v156);
              if (*(unsigned __int8 *)(v157 + v155) < v158)
              {
                do
                {
                  uint64_t v159 = v154;
                  unsigned int *v148 = v155;
                  if (!v153) {
                    break;
                  }
                  unint64_t v153 = (v153 - 1) >> 1;
                  unint64_t v154 = &v13[v153];
                  uint64_t v155 = *v154;
                  uint64_t v148 = v159;
                }
                while (*(unsigned __int8 *)(v157 + v155) < v158);
                *uint64_t v159 = v156;
              }
            }
          }
          BOOL v125 = v142-- <= 2;
        }
        while (!v125);
      }
      return result;
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    int32x4_t v17 = &v13[(unint64_t)v15 >> 1];
    uint64_t v18 = **a3;
    uint64_t v19 = *v12;
    unsigned int v20 = *(unsigned __int8 *)(v18 + v19);
    if ((unint64_t)v14 >= 0x201)
    {
      uint64_t v21 = *v17;
      uint64_t v22 = *v13;
      unsigned int v23 = *(unsigned __int8 *)(v18 + v21);
      unsigned int v24 = *(unsigned __int8 *)(v18 + v22);
      if (v23 >= v24)
      {
        if (v20 < v23)
        {
          *int32x4_t v17 = v19;
          *size_t v12 = v21;
          uint64_t v29 = *v17;
          uint64_t v30 = *v13;
          if (*(unsigned __int8 *)(v18 + v29) < *(unsigned __int8 *)(v18 + v30))
          {
            *uint64_t v13 = v29;
            *int32x4_t v17 = v30;
          }
        }
      }
      else
      {
        if (v20 < v23)
        {
          *uint64_t v13 = v19;
          goto LABEL_22;
        }
        *uint64_t v13 = v21;
        *int32x4_t v17 = v22;
        uint64_t v33 = *v12;
        if (*(unsigned __int8 *)(v18 + v33) < v24)
        {
          *int32x4_t v17 = v33;
LABEL_22:
          *size_t v12 = v22;
        }
      }
      uint64_t v34 = &v13[v16];
      unsigned int v37 = *(v34 - 1);
      uint64_t v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v13[1];
      unsigned int v39 = *(unsigned __int8 *)(v18 + v37);
      unsigned int v40 = *(unsigned __int8 *)(v18 + v38);
      uint64_t v41 = *(a2 - 2);
      unsigned int v42 = *(unsigned __int8 *)(v18 + v41);
      if (v39 >= v40)
      {
        if (v42 < v39)
        {
          unsigned int *v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v13[1];
          if (*(unsigned __int8 *)(v18 + v43) < *(unsigned __int8 *)(v18 + v44))
          {
            v13[1] = v43;
            unsigned int *v35 = v44;
          }
        }
      }
      else
      {
        if (v42 < v39)
        {
          v13[1] = v41;
          goto LABEL_34;
        }
        v13[1] = v36;
        unsigned int *v35 = v38;
        uint64_t v46 = *(a2 - 2);
        if (*(unsigned __int8 *)(v18 + v46) < v40)
        {
          unsigned int *v35 = v46;
LABEL_34:
          *(a2 - 2) = v38;
        }
      }
      uint64_t v47 = &v13[v16];
      unsigned int v50 = v47[1];
      long long v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v13[2];
      unsigned int v52 = *(unsigned __int8 *)(v18 + v50);
      unsigned int v53 = *(unsigned __int8 *)(v18 + v51);
      uint64_t v54 = *(a2 - 3);
      unsigned int v55 = *(unsigned __int8 *)(v18 + v54);
      if (v52 >= v53)
      {
        if (v55 < v52)
        {
          *long long v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v13[2];
          if (*(unsigned __int8 *)(v18 + v56) < *(unsigned __int8 *)(v18 + v57))
          {
            v13[2] = v56;
            *long long v48 = v57;
          }
        }
      }
      else
      {
        if (v55 < v52)
        {
          v13[2] = v54;
          goto LABEL_43;
        }
        v13[2] = v49;
        *long long v48 = v51;
        uint64_t v58 = *(a2 - 3);
        if (*(unsigned __int8 *)(v18 + v58) < v53)
        {
          *long long v48 = v58;
LABEL_43:
          *(a2 - 3) = v51;
        }
      }
      uint64_t v59 = *v17;
      uint64_t v60 = *v35;
      unsigned int v61 = *(unsigned __int8 *)(v18 + v59);
      unsigned int v62 = *(unsigned __int8 *)(v18 + v60);
      uint64_t v63 = *v48;
      unsigned int v64 = *(unsigned __int8 *)(v18 + v63);
      if (v61 >= v62)
      {
        if (v64 >= v61) {
          goto LABEL_51;
        }
        *int32x4_t v17 = v63;
        *long long v48 = v59;
        long long v48 = v17;
        LODWORD(v59) = v60;
        if (v64 >= v62)
        {
          LODWORD(v59) = v63;
          goto LABEL_51;
        }
      }
      else if (v64 >= v61)
      {
        unsigned int *v35 = v59;
        *int32x4_t v17 = v60;
        uint64_t v35 = v17;
        LODWORD(v59) = v63;
        if (v64 >= v62)
        {
          LODWORD(v59) = v60;
LABEL_51:
          unsigned int v65 = *v13;
          *uint64_t v13 = v59;
          *int32x4_t v17 = v65;
          goto LABEL_52;
        }
      }
      unsigned int *v35 = v63;
      *long long v48 = v60;
      goto LABEL_51;
    }
    uint64_t v25 = *v13;
    uint64_t v26 = *v17;
    unsigned int v27 = *(unsigned __int8 *)(v18 + v25);
    unsigned int v28 = *(unsigned __int8 *)(v18 + v26);
    if (v27 >= v28)
    {
      if (v20 < v27)
      {
        *uint64_t v13 = v19;
        *size_t v12 = v25;
        uint64_t v31 = *v13;
        uint64_t v32 = *v17;
        if (*(unsigned __int8 *)(v18 + v31) < *(unsigned __int8 *)(v18 + v32))
        {
          *int32x4_t v17 = v31;
          *uint64_t v13 = v32;
        }
      }
      goto LABEL_52;
    }
    if (v20 < v27)
    {
      *int32x4_t v17 = v19;
LABEL_31:
      *size_t v12 = v26;
      goto LABEL_52;
    }
    *int32x4_t v17 = v25;
    *uint64_t v13 = v26;
    uint64_t v45 = *v12;
    if (*(unsigned __int8 *)(v18 + v45) < v28)
    {
      *uint64_t v13 = v45;
      goto LABEL_31;
    }
LABEL_52:
    --a4;
    uint64_t v66 = *v13;
    if (a5)
    {
      unsigned int v67 = *(unsigned __int8 *)(v18 + v66);
LABEL_55:
      long long v68 = v13;
      do
      {
        uint64_t v69 = v68;
        unsigned int v71 = v68[1];
        ++v68;
        unsigned int v70 = v71;
      }
      while (*(unsigned __int8 *)(v18 + v71) < v67);
      uint64_t v72 = a2;
      if (v69 == v13)
      {
        uint64_t v72 = a2;
        do
        {
          if (v68 >= v72) {
            break;
          }
          unsigned int v74 = *--v72;
        }
        while (*(unsigned __int8 *)(v18 + v74) >= v67);
      }
      else
      {
        do
          unsigned int v73 = *--v72;
        while (*(unsigned __int8 *)(v18 + v73) >= v67);
      }
      if (v68 < v72)
      {
        unsigned int v75 = *v72;
        unsigned int v76 = v70;
        uint64_t v77 = v68;
        uint64_t v78 = v72;
        do
        {
          *uint64_t v77 = v75;
          unsigned int *v78 = v76;
          do
          {
            uint64_t v69 = v77;
            unsigned int v79 = v77[1];
            ++v77;
            unsigned int v76 = v79;
          }
          while (*(unsigned __int8 *)(v18 + v79) < v67);
          do
          {
            unsigned int v80 = *--v78;
            unsigned int v75 = v80;
          }
          while (*(unsigned __int8 *)(v18 + v80) >= v67);
        }
        while (v77 < v78);
      }
      if (v69 != v13) {
        *uint64_t v13 = *v69;
      }
      unsigned int *v69 = v66;
      if (v68 < v72) {
        goto LABEL_74;
      }
      BOOL v81 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v69, *a3);
      uint64_t v13 = v69 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v69 + 1, a2, *a3);
      if (result)
      {
        a2 = v69;
        if (v81) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v81)
      {
LABEL_74:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v11, v69, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v69 + 1;
      }
    }
    else
    {
      unsigned int v67 = *(unsigned __int8 *)(v18 + v66);
      if (*(unsigned __int8 *)(v18 + *(v13 - 1)) < v67) {
        goto LABEL_55;
      }
      if (v67 < *(unsigned __int8 *)(v18 + *v12))
      {
        do
        {
          unsigned int v82 = v13[1];
          ++v13;
        }
        while (v67 >= *(unsigned __int8 *)(v18 + v82));
      }
      else
      {
        uint64_t v83 = v13 + 1;
        do
        {
          uint64_t v13 = v83;
          if (v83 >= a2) {
            break;
          }
          ++v83;
        }
        while (v67 >= *(unsigned __int8 *)(v18 + *v13));
      }
      uint64_t v84 = a2;
      if (v13 < a2)
      {
        uint64_t v84 = a2;
        do
          unsigned int v85 = *--v84;
        while (v67 < *(unsigned __int8 *)(v18 + v85));
      }
      if (v13 < v84)
      {
        unsigned int v86 = *v13;
        unsigned int v87 = *v84;
        do
        {
          *uint64_t v13 = v87;
          *uint64_t v84 = v86;
          do
          {
            unsigned int v88 = v13[1];
            ++v13;
            unsigned int v86 = v88;
          }
          while (v67 >= *(unsigned __int8 *)(v18 + v88));
          do
          {
            unsigned int v89 = *--v84;
            unsigned int v87 = v89;
          }
          while (v67 < *(unsigned __int8 *)(v18 + v89));
        }
        while (v13 < v84);
      }
      long long v90 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        unsigned int *v11 = *v90;
      }
      a5 = 0;
      *long long v90 = v66;
    }
  }
  if (a5)
  {
    if (v13 != a2)
    {
      uint64_t v112 = v13 + 1;
      if (v13 + 1 != a2)
      {
        uint64_t v113 = **a3;
        uint64_t v114 = 4;
        uint64_t v115 = v13;
        do
        {
          uint64_t v118 = *v115;
          uint64_t v117 = v115[1];
          uint64_t v115 = v112;
          unsigned int v119 = *(unsigned __int8 *)(v113 + v117);
          if (v119 < *(unsigned __int8 *)(v113 + v118))
          {
            uint64_t v120 = v114;
            do
            {
              *(unsigned int *)((char *)v13 + v120) = v118;
              uint64_t v121 = v120 - 4;
              if (v120 == 4)
              {
                uint64_t v116 = v13;
                goto LABEL_112;
              }
              uint64_t v118 = *(unsigned int *)((char *)v13 + v120 - 8);
              v120 -= 4;
            }
            while (v119 < *(unsigned __int8 *)(v113 + v118));
            uint64_t v116 = (unsigned int *)((char *)v13 + v121);
LABEL_112:
            unsigned int *v116 = v117;
          }
          uint64_t v112 = v115 + 1;
          v114 += 4;
        }
        while (v115 + 1 != a2);
      }
    }
  }
  else if (v13 != a2)
  {
    uint64_t v136 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v137 = **a3;
      do
      {
        uint64_t v139 = *v11;
        uint64_t v138 = v11[1];
        unsigned int v11 = v136;
        unsigned int v140 = *(unsigned __int8 *)(v137 + v138);
        if (v140 < *(unsigned __int8 *)(v137 + v139))
        {
          float v141 = v11;
          do
          {
            unsigned int *v141 = v139;
            uint64_t v139 = *(v141 - 2);
            --v141;
          }
          while (v140 < *(unsigned __int8 *)(v137 + v139));
          unsigned int *v141 = v138;
        }
        uint64_t v136 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

void geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, unsigned char *__dst, _DWORD *a3, int a4)
{
  unint64_t v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return;
  }
  BOOL v6 = __dst;
  if (a4)
  {
    uint64_t v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    int v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      unint64_t v14 = ((4 * v4 - 4) >> 2) + 1;
      uint64_t v10 = v14 & 0x7FFFFFFFFFFFFFF8;
      int32x4_t v15 = (int32x4_t)xmmword_1A28FC7A0;
      unint64_t v16 = v8 + 1;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16[-1] = v15;
        *unint64_t v16 = vaddq_s32(v15, v17);
        int32x4_t v15 = vaddq_s32(v15, v18);
        v16 += 2;
        v19 -= 8;
      }
      while (v19);
      if (v14 == v10) {
        goto LABEL_15;
      }
      unsigned int v11 = (unsigned int *)v8 + (v14 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      unsigned int v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_15:
    uint64_t v25 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v25, 126 - 2 * __clz(v4), 1);
    uint64_t v20 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void *)a1 + *(unsigned __int16 *)(a1 + 8);
      unsigned int v23 = v8;
      do
      {
        unsigned int v24 = v23->i32[0];
        unsigned int v23 = (int32x4_t *)((char *)v23 + 4);
        *v6++ = *(unsigned char *)(v21 + v24);
        *a3++ = *(_DWORD *)(v22 + 4 * v24);
        --v20;
      }
      while (v20);
    }
    *(unsigned char *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, v4);
  uint64_t v12 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    uint64_t v13 = (const void *)(*(void *)a1 + *(unsigned __int16 *)(a1 + 8));
    memmove(a3, v13, 4 * v12);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int v11 = (unsigned int *)result;
LABEL_2:
  uint64_t v12 = a2 - 1;
  uint64_t v13 = v11;
  while (1)
  {
    unsigned int v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v91 = *v12;
          uint64_t v92 = *v13;
          if (*(unsigned __int8 *)(**a3 + v91) < *(unsigned __int8 *)(**a3 + v92))
          {
            *uint64_t v13 = v91;
            *uint64_t v12 = v92;
          }
          return result;
        case 3:
          uint64_t v93 = *v13;
          uint64_t v94 = v13[1];
          uint64_t v95 = **a3;
          unsigned int v96 = *(unsigned __int8 *)(v95 + v94);
          unsigned int v97 = *(unsigned __int8 *)(v95 + v93);
          uint64_t v98 = *v12;
          unsigned int v99 = *(unsigned __int8 *)(v95 + v98);
          if (v96 >= v97)
          {
            if (v99 < v96)
            {
              v13[1] = v98;
              *uint64_t v12 = v94;
              uint64_t v135 = *v13;
              uint64_t v134 = v13[1];
              if (*(unsigned __int8 *)(v95 + v134) < *(unsigned __int8 *)(v95 + v135))
              {
                *uint64_t v13 = v134;
                v13[1] = v135;
              }
            }
          }
          else if (v99 >= v96)
          {
            *uint64_t v13 = v94;
            v13[1] = v93;
            uint64_t v160 = *v12;
            if (*(unsigned __int8 *)(v95 + v160) < v97)
            {
              v13[1] = v160;
              *uint64_t v12 = v93;
            }
          }
          else
          {
            *uint64_t v13 = v98;
            *uint64_t v12 = v93;
          }
          return result;
        case 4:
          uint64_t v101 = v13 + 1;
          uint64_t v102 = v13[1];
          uint64_t v103 = v13 + 2;
          uint64_t v104 = v13[2];
          unsigned int v105 = v13[1];
          uint64_t v106 = **a3;
          unsigned int v107 = *(unsigned __int8 *)(v106 + v102);
          uint64_t v108 = *v13;
          unsigned int v109 = *(unsigned __int8 *)(v106 + v108);
          unsigned int v110 = *(unsigned __int8 *)(v106 + v104);
          if (v107 >= v109)
          {
            if (v110 < v107)
            {
              *uint64_t v101 = v104;
              *uint64_t v103 = v102;
              uint64_t v111 = v13;
              uint64_t result = (uint64_t)(v13 + 1);
              if (v110 >= v109) {
                goto LABEL_173;
              }
              goto LABEL_171;
            }
          }
          else
          {
            if (v110 < v107)
            {
              uint64_t v111 = v13;
              uint64_t result = (uint64_t)(v13 + 2);
              uint64_t v102 = *v13;
              unsigned int v105 = *v13;
LABEL_171:
              *uint64_t v111 = v104;
              *(_DWORD *)uint64_t result = v108;
              goto LABEL_173;
            }
            uint64_t v111 = v13 + 1;
            *uint64_t v13 = v102;
            v13[1] = v108;
            uint64_t result = (uint64_t)(v13 + 2);
            uint64_t v102 = v108;
            unsigned int v105 = v108;
            if (v110 < v109) {
              goto LABEL_171;
            }
          }
          uint64_t v102 = v104;
          unsigned int v105 = v104;
LABEL_173:
          uint64_t v161 = *v12;
          if (*(unsigned __int8 *)(v106 + v161) < *(unsigned __int8 *)(v106 + v102))
          {
            *uint64_t v103 = v161;
            *uint64_t v12 = v105;
            uint64_t v162 = *v103;
            uint64_t v163 = *v101;
            unsigned int v164 = *(unsigned __int8 *)(v106 + v162);
            if (v164 < *(unsigned __int8 *)(v106 + v163))
            {
              v13[1] = v162;
              v13[2] = v163;
              uint64_t v165 = *v13;
              if (v164 < *(unsigned __int8 *)(v106 + v165))
              {
                *uint64_t v13 = v162;
                v13[1] = v165;
              }
            }
          }
          return result;
        case 5:
          uint64_t v100 = **a3;
          return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, v100);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v122 = (unint64_t)(v15 - 2) >> 1;
        uint64_t v123 = *a3;
        int64_t v124 = v122;
        do
        {
          if (v122 >= v124)
          {
            uint64_t v126 = (2 * v124) | 1;
            uint64_t v127 = &v13[v126];
            uint64_t v128 = *v127;
            if (2 * v124 + 2 < v15)
            {
              uint64_t v129 = *v123;
              if (*(unsigned __int8 *)(*v123 + v128) < *(unsigned __int8 *)(*v123 + v127[1]))
              {
                LODWORD(v128) = v127[1];
                ++v127;
                uint64_t v126 = 2 * v124 + 2;
              }
            }
            else
            {
              uint64_t v129 = *v123;
            }
            int v130 = &v13[v124];
            uint64_t v131 = *v130;
            uint64_t result = *(unsigned __int8 *)(v129 + v131);
            if (*(unsigned __int8 *)(v129 + v128) >= result)
            {
              do
              {
                uint64_t v132 = v127;
                unsigned int *v130 = v128;
                if (v122 < v126) {
                  break;
                }
                uint64_t v133 = (2 * v126) | 1;
                uint64_t v127 = &v13[v133];
                uint64_t v126 = 2 * v126 + 2;
                uint64_t v128 = *v127;
                if (v126 < v15)
                {
                  if (*(unsigned __int8 *)(v129 + v128) >= *(unsigned __int8 *)(v129 + v127[1]))
                  {
                    uint64_t v126 = v133;
                  }
                  else
                  {
                    LODWORD(v128) = v127[1];
                    ++v127;
                  }
                }
                else
                {
                  uint64_t v126 = v133;
                }
                int v130 = v132;
              }
              while (*(unsigned __int8 *)(v129 + v128) >= result);
              unsigned int *v132 = v131;
            }
          }
          BOOL v125 = v124-- <= 0;
        }
        while (!v125);
        uint64_t v142 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v143 = 0;
          unsigned int v144 = *v13;
          long long v145 = *a3;
          long long v146 = v13;
          do
          {
            uint64_t v149 = &v146[v143];
            unsigned int v150 = v149[1];
            uint64_t v148 = v149 + 1;
            uint64_t v147 = v150;
            uint64_t v151 = (2 * v143) | 1;
            uint64_t v143 = 2 * v143 + 2;
            if (v143 < v142)
            {
              uint64_t result = v148[1];
              if (*(unsigned __int8 *)(*v145 + v147) >= *(unsigned __int8 *)(*v145 + result))
              {
                uint64_t v143 = v151;
              }
              else
              {
                LODWORD(v147) = v148[1];
                ++v148;
              }
            }
            else
            {
              uint64_t v143 = v151;
            }
            unsigned int *v146 = v147;
            long long v146 = v148;
          }
          while (v143 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
          if (v148 == --a2)
          {
            unsigned int *v148 = v144;
          }
          else
          {
            unsigned int *v148 = *a2;
            *a2 = v144;
            uint64_t v152 = (char *)v148 - (char *)v13 + 4;
            if (v152 >= 5)
            {
              unint64_t v153 = (((unint64_t)v152 >> 2) - 2) >> 1;
              unint64_t v154 = &v13[v153];
              uint64_t v155 = *v154;
              uint64_t v156 = *v148;
              uint64_t v157 = *v145;
              unsigned int v158 = *(unsigned __int8 *)(v157 + v156);
              if (*(unsigned __int8 *)(v157 + v155) < v158)
              {
                do
                {
                  uint64_t v159 = v154;
                  unsigned int *v148 = v155;
                  if (!v153) {
                    break;
                  }
                  unint64_t v153 = (v153 - 1) >> 1;
                  unint64_t v154 = &v13[v153];
                  uint64_t v155 = *v154;
                  uint64_t v148 = v159;
                }
                while (*(unsigned __int8 *)(v157 + v155) < v158);
                *uint64_t v159 = v156;
              }
            }
          }
          BOOL v125 = v142-- <= 2;
        }
        while (!v125);
      }
      return result;
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    int32x4_t v17 = &v13[(unint64_t)v15 >> 1];
    uint64_t v18 = **a3;
    uint64_t v19 = *v12;
    unsigned int v20 = *(unsigned __int8 *)(v18 + v19);
    if ((unint64_t)v14 >= 0x201)
    {
      uint64_t v21 = *v17;
      uint64_t v22 = *v13;
      unsigned int v23 = *(unsigned __int8 *)(v18 + v21);
      unsigned int v24 = *(unsigned __int8 *)(v18 + v22);
      if (v23 >= v24)
      {
        if (v20 < v23)
        {
          *int32x4_t v17 = v19;
          *uint64_t v12 = v21;
          uint64_t v29 = *v17;
          uint64_t v30 = *v13;
          if (*(unsigned __int8 *)(v18 + v29) < *(unsigned __int8 *)(v18 + v30))
          {
            *uint64_t v13 = v29;
            *int32x4_t v17 = v30;
          }
        }
      }
      else
      {
        if (v20 < v23)
        {
          *uint64_t v13 = v19;
          goto LABEL_22;
        }
        *uint64_t v13 = v21;
        *int32x4_t v17 = v22;
        uint64_t v33 = *v12;
        if (*(unsigned __int8 *)(v18 + v33) < v24)
        {
          *int32x4_t v17 = v33;
LABEL_22:
          *uint64_t v12 = v22;
        }
      }
      uint64_t v34 = &v13[v16];
      unsigned int v37 = *(v34 - 1);
      uint64_t v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v13[1];
      unsigned int v39 = *(unsigned __int8 *)(v18 + v37);
      unsigned int v40 = *(unsigned __int8 *)(v18 + v38);
      uint64_t v41 = *(a2 - 2);
      unsigned int v42 = *(unsigned __int8 *)(v18 + v41);
      if (v39 >= v40)
      {
        if (v42 < v39)
        {
          unsigned int *v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v13[1];
          if (*(unsigned __int8 *)(v18 + v43) < *(unsigned __int8 *)(v18 + v44))
          {
            v13[1] = v43;
            unsigned int *v35 = v44;
          }
        }
      }
      else
      {
        if (v42 < v39)
        {
          v13[1] = v41;
          goto LABEL_34;
        }
        v13[1] = v36;
        unsigned int *v35 = v38;
        uint64_t v46 = *(a2 - 2);
        if (*(unsigned __int8 *)(v18 + v46) < v40)
        {
          unsigned int *v35 = v46;
LABEL_34:
          *(a2 - 2) = v38;
        }
      }
      uint64_t v47 = &v13[v16];
      unsigned int v50 = v47[1];
      long long v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v13[2];
      unsigned int v52 = *(unsigned __int8 *)(v18 + v50);
      unsigned int v53 = *(unsigned __int8 *)(v18 + v51);
      uint64_t v54 = *(a2 - 3);
      unsigned int v55 = *(unsigned __int8 *)(v18 + v54);
      if (v52 >= v53)
      {
        if (v55 < v52)
        {
          *long long v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v13[2];
          if (*(unsigned __int8 *)(v18 + v56) < *(unsigned __int8 *)(v18 + v57))
          {
            v13[2] = v56;
            *long long v48 = v57;
          }
        }
      }
      else
      {
        if (v55 < v52)
        {
          v13[2] = v54;
          goto LABEL_43;
        }
        v13[2] = v49;
        *long long v48 = v51;
        uint64_t v58 = *(a2 - 3);
        if (*(unsigned __int8 *)(v18 + v58) < v53)
        {
          *long long v48 = v58;
LABEL_43:
          *(a2 - 3) = v51;
        }
      }
      uint64_t v59 = *v17;
      uint64_t v60 = *v35;
      unsigned int v61 = *(unsigned __int8 *)(v18 + v59);
      unsigned int v62 = *(unsigned __int8 *)(v18 + v60);
      uint64_t v63 = *v48;
      unsigned int v64 = *(unsigned __int8 *)(v18 + v63);
      if (v61 >= v62)
      {
        if (v64 >= v61) {
          goto LABEL_51;
        }
        *int32x4_t v17 = v63;
        *long long v48 = v59;
        long long v48 = v17;
        LODWORD(v59) = v60;
        if (v64 >= v62)
        {
          LODWORD(v59) = v63;
          goto LABEL_51;
        }
      }
      else if (v64 >= v61)
      {
        unsigned int *v35 = v59;
        *int32x4_t v17 = v60;
        uint64_t v35 = v17;
        LODWORD(v59) = v63;
        if (v64 >= v62)
        {
          LODWORD(v59) = v60;
LABEL_51:
          unsigned int v65 = *v13;
          *uint64_t v13 = v59;
          *int32x4_t v17 = v65;
          goto LABEL_52;
        }
      }
      unsigned int *v35 = v63;
      *long long v48 = v60;
      goto LABEL_51;
    }
    uint64_t v25 = *v13;
    uint64_t v26 = *v17;
    unsigned int v27 = *(unsigned __int8 *)(v18 + v25);
    unsigned int v28 = *(unsigned __int8 *)(v18 + v26);
    if (v27 >= v28)
    {
      if (v20 < v27)
      {
        *uint64_t v13 = v19;
        *uint64_t v12 = v25;
        uint64_t v31 = *v13;
        uint64_t v32 = *v17;
        if (*(unsigned __int8 *)(v18 + v31) < *(unsigned __int8 *)(v18 + v32))
        {
          *int32x4_t v17 = v31;
          *uint64_t v13 = v32;
        }
      }
      goto LABEL_52;
    }
    if (v20 < v27)
    {
      *int32x4_t v17 = v19;
LABEL_31:
      *uint64_t v12 = v26;
      goto LABEL_52;
    }
    *int32x4_t v17 = v25;
    *uint64_t v13 = v26;
    uint64_t v45 = *v12;
    if (*(unsigned __int8 *)(v18 + v45) < v28)
    {
      *uint64_t v13 = v45;
      goto LABEL_31;
    }
LABEL_52:
    --a4;
    uint64_t v66 = *v13;
    if (a5)
    {
      unsigned int v67 = *(unsigned __int8 *)(v18 + v66);
LABEL_55:
      long long v68 = v13;
      do
      {
        uint64_t v69 = v68;
        unsigned int v71 = v68[1];
        ++v68;
        unsigned int v70 = v71;
      }
      while (*(unsigned __int8 *)(v18 + v71) < v67);
      uint64_t v72 = a2;
      if (v69 == v13)
      {
        uint64_t v72 = a2;
        do
        {
          if (v68 >= v72) {
            break;
          }
          unsigned int v74 = *--v72;
        }
        while (*(unsigned __int8 *)(v18 + v74) >= v67);
      }
      else
      {
        do
          unsigned int v73 = *--v72;
        while (*(unsigned __int8 *)(v18 + v73) >= v67);
      }
      if (v68 < v72)
      {
        unsigned int v75 = *v72;
        unsigned int v76 = v70;
        uint64_t v77 = v68;
        uint64_t v78 = v72;
        do
        {
          *uint64_t v77 = v75;
          unsigned int *v78 = v76;
          do
          {
            uint64_t v69 = v77;
            unsigned int v79 = v77[1];
            ++v77;
            unsigned int v76 = v79;
          }
          while (*(unsigned __int8 *)(v18 + v79) < v67);
          do
          {
            unsigned int v80 = *--v78;
            unsigned int v75 = v80;
          }
          while (*(unsigned __int8 *)(v18 + v80) >= v67);
        }
        while (v77 < v78);
      }
      if (v69 != v13) {
        *uint64_t v13 = *v69;
      }
      unsigned int *v69 = v66;
      if (v68 < v72) {
        goto LABEL_74;
      }
      BOOL v81 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v69, *a3);
      uint64_t v13 = v69 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v69 + 1, a2, *a3);
      if (result)
      {
        a2 = v69;
        if (v81) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v81)
      {
LABEL_74:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v11, v69, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v69 + 1;
      }
    }
    else
    {
      unsigned int v67 = *(unsigned __int8 *)(v18 + v66);
      if (*(unsigned __int8 *)(v18 + *(v13 - 1)) < v67) {
        goto LABEL_55;
      }
      if (v67 < *(unsigned __int8 *)(v18 + *v12))
      {
        do
        {
          unsigned int v82 = v13[1];
          ++v13;
        }
        while (v67 >= *(unsigned __int8 *)(v18 + v82));
      }
      else
      {
        uint64_t v83 = v13 + 1;
        do
        {
          uint64_t v13 = v83;
          if (v83 >= a2) {
            break;
          }
          ++v83;
        }
        while (v67 >= *(unsigned __int8 *)(v18 + *v13));
      }
      uint64_t v84 = a2;
      if (v13 < a2)
      {
        uint64_t v84 = a2;
        do
          unsigned int v85 = *--v84;
        while (v67 < *(unsigned __int8 *)(v18 + v85));
      }
      if (v13 < v84)
      {
        unsigned int v86 = *v13;
        unsigned int v87 = *v84;
        do
        {
          *uint64_t v13 = v87;
          *uint64_t v84 = v86;
          do
          {
            unsigned int v88 = v13[1];
            ++v13;
            unsigned int v86 = v88;
          }
          while (v67 >= *(unsigned __int8 *)(v18 + v88));
          do
          {
            unsigned int v89 = *--v84;
            unsigned int v87 = v89;
          }
          while (v67 < *(unsigned __int8 *)(v18 + v89));
        }
        while (v13 < v84);
      }
      long long v90 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        unsigned int *v11 = *v90;
      }
      a5 = 0;
      *long long v90 = v66;
    }
  }
  if (a5)
  {
    if (v13 != a2)
    {
      uint64_t v112 = v13 + 1;
      if (v13 + 1 != a2)
      {
        uint64_t v113 = **a3;
        uint64_t v114 = 4;
        uint64_t v115 = v13;
        do
        {
          uint64_t v118 = *v115;
          uint64_t v117 = v115[1];
          uint64_t v115 = v112;
          unsigned int v119 = *(unsigned __int8 *)(v113 + v117);
          if (v119 < *(unsigned __int8 *)(v113 + v118))
          {
            uint64_t v120 = v114;
            do
            {
              *(unsigned int *)((char *)v13 + v120) = v118;
              uint64_t v121 = v120 - 4;
              if (v120 == 4)
              {
                uint64_t v116 = v13;
                goto LABEL_112;
              }
              uint64_t v118 = *(unsigned int *)((char *)v13 + v120 - 8);
              v120 -= 4;
            }
            while (v119 < *(unsigned __int8 *)(v113 + v118));
            uint64_t v116 = (unsigned int *)((char *)v13 + v121);
LABEL_112:
            unsigned int *v116 = v117;
          }
          uint64_t v112 = v115 + 1;
          v114 += 4;
        }
        while (v115 + 1 != a2);
      }
    }
  }
  else if (v13 != a2)
  {
    uint64_t v136 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v137 = **a3;
      do
      {
        uint64_t v139 = *v11;
        uint64_t v138 = v11[1];
        unsigned int v11 = v136;
        unsigned int v140 = *(unsigned __int8 *)(v137 + v138);
        if (v140 < *(unsigned __int8 *)(v137 + v139))
        {
          float v141 = v11;
          do
          {
            unsigned int *v141 = v139;
            uint64_t v139 = *(v141 - 2);
            --v141;
          }
          while (v140 < *(unsigned __int8 *)(v137 + v139));
          unsigned int *v141 = v138;
        }
        uint64_t v136 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

uint64_t geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(uint64_t a1, int a2, _WORD *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = 2 * a2;
  if ((2 * a2) > *(_DWORD *)(a1 + 36)) {
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 32);
  if (v8 < v4)
  {
    uint64_t v9 = gss::Allocator::instance((gss::Allocator *)a1);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, *(unsigned int *)(a1 + 36), 1);
    int v11 = *(_DWORD *)(a1 + 36);
    unsigned int v24 = (void **)&v22;
    uint64_t v21 = v10;
    uint64_t v22 = (void (**)(void **))&unk_1EF57A850;
    int v23 = v11;
    uint64_t v12 = *(uint64_t **)(a1 + 8);
    if ((unint64_t)v12 >= *(void *)(a1 + 16))
    {
      uint64_t v13 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)a1, &v21);
    }
    else
    {
      uint64_t v21 = 0;
      *uint64_t v12 = v10;
      v12[4] = (uint64_t)(v12 + 1);
      (*((void (**)(void **))*v24 + 3))(v24);
      uint64_t v13 = (char *)(v12 + 5);
    }
    *(void *)(a1 + 8) = v13;
    int v14 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 28) = v14;
    *(_DWORD *)(a1 + 32) = v14;
    uint64_t v15 = v21;
    unint64_t v16 = v24;
    uint64_t v21 = 0;
    if (v15)
    {
      if (!v24)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        unsigned int v20 = v19;
        std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](&v21);
        _Unwind_Resume(v20);
      }
      (*((void (**)(void))*v24 + 6))();
      unint64_t v16 = v24;
    }
    if (v16 == (void **)&v22)
    {
      v22[4]((void **)&v22);
    }
    else if (v16)
    {
      (*((void (**)(void **))*v16 + 5))(v16);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 32);
  }
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  uint64_t result = *(void *)(*(void *)(a1 + 8) - 40) + v17;
  int v18 = *(_DWORD *)(a1 + 28) - a2;
  *(_DWORD *)(a1 + 24) = v17 + a2;
  *(_DWORD *)(a1 + 28) = v18;
  *a3 = v18 - v17;
  *(_DWORD *)(a1 + 32) = v8 - v4;
  return result;
}

void geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, unsigned char *__dst, void *a3, int a4)
{
  unint64_t v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return;
  }
  BOOL v6 = __dst;
  if (a4)
  {
    unsigned int v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    uint64_t v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      unint64_t v14 = ((4 * v4 - 4) >> 2) + 1;
      uint64_t v10 = v14 & 0x7FFFFFFFFFFFFFF8;
      int32x4_t v15 = (int32x4_t)xmmword_1A28FC7A0;
      unint64_t v16 = v8 + 1;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16[-1] = v15;
        *unint64_t v16 = vaddq_s32(v15, v17);
        int32x4_t v15 = vaddq_s32(v15, v18);
        v16 += 2;
        v19 -= 8;
      }
      while (v19);
      if (v14 == v10) {
        goto LABEL_15;
      }
      int v11 = (unsigned int *)v8 + (v14 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      int v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_15:
    uint64_t v25 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v25, 126 - 2 * __clz(v4), 1);
    uint64_t v20 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void *)a1 + *(unsigned __int16 *)(a1 + 8);
      int v23 = v8;
      do
      {
        unsigned int v24 = v23->i32[0];
        int v23 = (int32x4_t *)((char *)v23 + 4);
        *v6++ = *(unsigned char *)(v21 + v24);
        *a3++ = *(void *)(v22 + 8 * v24);
        --v20;
      }
      while (v20);
    }
    *(unsigned char *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, v4);
  uint64_t v12 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    uint64_t v13 = (const void *)(*(void *)a1 + *(unsigned __int16 *)(a1 + 8));
    memmove(a3, v13, 8 * v12);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int v11 = (unsigned int *)result;
LABEL_2:
  uint64_t v12 = a2 - 1;
  uint64_t v13 = v11;
  while (1)
  {
    int v11 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = a2 - v13;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v91 = *v12;
          uint64_t v92 = *v13;
          if (*(unsigned __int8 *)(**a3 + v91) < *(unsigned __int8 *)(**a3 + v92))
          {
            *uint64_t v13 = v91;
            *uint64_t v12 = v92;
          }
          return result;
        case 3:
          uint64_t v93 = *v13;
          uint64_t v94 = v13[1];
          uint64_t v95 = **a3;
          unsigned int v96 = *(unsigned __int8 *)(v95 + v94);
          unsigned int v97 = *(unsigned __int8 *)(v95 + v93);
          uint64_t v98 = *v12;
          unsigned int v99 = *(unsigned __int8 *)(v95 + v98);
          if (v96 >= v97)
          {
            if (v99 < v96)
            {
              v13[1] = v98;
              *uint64_t v12 = v94;
              uint64_t v135 = *v13;
              uint64_t v134 = v13[1];
              if (*(unsigned __int8 *)(v95 + v134) < *(unsigned __int8 *)(v95 + v135))
              {
                *uint64_t v13 = v134;
                v13[1] = v135;
              }
            }
          }
          else if (v99 >= v96)
          {
            *uint64_t v13 = v94;
            v13[1] = v93;
            uint64_t v160 = *v12;
            if (*(unsigned __int8 *)(v95 + v160) < v97)
            {
              v13[1] = v160;
              *uint64_t v12 = v93;
            }
          }
          else
          {
            *uint64_t v13 = v98;
            *uint64_t v12 = v93;
          }
          return result;
        case 4:
          uint64_t v101 = v13 + 1;
          uint64_t v102 = v13[1];
          uint64_t v103 = v13 + 2;
          uint64_t v104 = v13[2];
          unsigned int v105 = v13[1];
          uint64_t v106 = **a3;
          unsigned int v107 = *(unsigned __int8 *)(v106 + v102);
          uint64_t v108 = *v13;
          unsigned int v109 = *(unsigned __int8 *)(v106 + v108);
          unsigned int v110 = *(unsigned __int8 *)(v106 + v104);
          if (v107 >= v109)
          {
            if (v110 < v107)
            {
              *uint64_t v101 = v104;
              *uint64_t v103 = v102;
              uint64_t v111 = v13;
              uint64_t result = (uint64_t)(v13 + 1);
              if (v110 >= v109) {
                goto LABEL_173;
              }
              goto LABEL_171;
            }
          }
          else
          {
            if (v110 < v107)
            {
              uint64_t v111 = v13;
              uint64_t result = (uint64_t)(v13 + 2);
              uint64_t v102 = *v13;
              unsigned int v105 = *v13;
LABEL_171:
              *uint64_t v111 = v104;
              *(_DWORD *)uint64_t result = v108;
              goto LABEL_173;
            }
            uint64_t v111 = v13 + 1;
            *uint64_t v13 = v102;
            v13[1] = v108;
            uint64_t result = (uint64_t)(v13 + 2);
            uint64_t v102 = v108;
            unsigned int v105 = v108;
            if (v110 < v109) {
              goto LABEL_171;
            }
          }
          uint64_t v102 = v104;
          unsigned int v105 = v104;
LABEL_173:
          uint64_t v161 = *v12;
          if (*(unsigned __int8 *)(v106 + v161) < *(unsigned __int8 *)(v106 + v102))
          {
            *uint64_t v103 = v161;
            *uint64_t v12 = v105;
            uint64_t v162 = *v103;
            uint64_t v163 = *v101;
            unsigned int v164 = *(unsigned __int8 *)(v106 + v162);
            if (v164 < *(unsigned __int8 *)(v106 + v163))
            {
              v13[1] = v162;
              v13[2] = v163;
              uint64_t v165 = *v13;
              if (v164 < *(unsigned __int8 *)(v106 + v165))
              {
                *uint64_t v13 = v162;
                v13[1] = v165;
              }
            }
          }
          return result;
        case 5:
          uint64_t v100 = **a3;
          return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, v100);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != a2)
      {
        int64_t v122 = (unint64_t)(v15 - 2) >> 1;
        uint64_t v123 = *a3;
        int64_t v124 = v122;
        do
        {
          if (v122 >= v124)
          {
            uint64_t v126 = (2 * v124) | 1;
            uint64_t v127 = &v13[v126];
            uint64_t v128 = *v127;
            if (2 * v124 + 2 < v15)
            {
              uint64_t v129 = *v123;
              if (*(unsigned __int8 *)(*v123 + v128) < *(unsigned __int8 *)(*v123 + v127[1]))
              {
                LODWORD(v128) = v127[1];
                ++v127;
                uint64_t v126 = 2 * v124 + 2;
              }
            }
            else
            {
              uint64_t v129 = *v123;
            }
            int v130 = &v13[v124];
            uint64_t v131 = *v130;
            uint64_t result = *(unsigned __int8 *)(v129 + v131);
            if (*(unsigned __int8 *)(v129 + v128) >= result)
            {
              do
              {
                uint64_t v132 = v127;
                unsigned int *v130 = v128;
                if (v122 < v126) {
                  break;
                }
                uint64_t v133 = (2 * v126) | 1;
                uint64_t v127 = &v13[v133];
                uint64_t v126 = 2 * v126 + 2;
                uint64_t v128 = *v127;
                if (v126 < v15)
                {
                  if (*(unsigned __int8 *)(v129 + v128) >= *(unsigned __int8 *)(v129 + v127[1]))
                  {
                    uint64_t v126 = v133;
                  }
                  else
                  {
                    LODWORD(v128) = v127[1];
                    ++v127;
                  }
                }
                else
                {
                  uint64_t v126 = v133;
                }
                int v130 = v132;
              }
              while (*(unsigned __int8 *)(v129 + v128) >= result);
              unsigned int *v132 = v131;
            }
          }
          BOOL v125 = v124-- <= 0;
        }
        while (!v125);
        uint64_t v142 = (unint64_t)v14 >> 2;
        do
        {
          uint64_t v143 = 0;
          unsigned int v144 = *v13;
          long long v145 = *a3;
          long long v146 = v13;
          do
          {
            uint64_t v149 = &v146[v143];
            unsigned int v150 = v149[1];
            uint64_t v148 = v149 + 1;
            uint64_t v147 = v150;
            uint64_t v151 = (2 * v143) | 1;
            uint64_t v143 = 2 * v143 + 2;
            if (v143 < v142)
            {
              uint64_t result = v148[1];
              if (*(unsigned __int8 *)(*v145 + v147) >= *(unsigned __int8 *)(*v145 + result))
              {
                uint64_t v143 = v151;
              }
              else
              {
                LODWORD(v147) = v148[1];
                ++v148;
              }
            }
            else
            {
              uint64_t v143 = v151;
            }
            unsigned int *v146 = v147;
            long long v146 = v148;
          }
          while (v143 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
          if (v148 == --a2)
          {
            unsigned int *v148 = v144;
          }
          else
          {
            unsigned int *v148 = *a2;
            *a2 = v144;
            uint64_t v152 = (char *)v148 - (char *)v13 + 4;
            if (v152 >= 5)
            {
              unint64_t v153 = (((unint64_t)v152 >> 2) - 2) >> 1;
              unint64_t v154 = &v13[v153];
              uint64_t v155 = *v154;
              uint64_t v156 = *v148;
              uint64_t v157 = *v145;
              unsigned int v158 = *(unsigned __int8 *)(v157 + v156);
              if (*(unsigned __int8 *)(v157 + v155) < v158)
              {
                do
                {
                  uint64_t v159 = v154;
                  unsigned int *v148 = v155;
                  if (!v153) {
                    break;
                  }
                  unint64_t v153 = (v153 - 1) >> 1;
                  unint64_t v154 = &v13[v153];
                  uint64_t v155 = *v154;
                  uint64_t v148 = v159;
                }
                while (*(unsigned __int8 *)(v157 + v155) < v158);
                *uint64_t v159 = v156;
              }
            }
          }
          BOOL v125 = v142-- <= 2;
        }
        while (!v125);
      }
      return result;
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    int32x4_t v17 = &v13[(unint64_t)v15 >> 1];
    uint64_t v18 = **a3;
    uint64_t v19 = *v12;
    unsigned int v20 = *(unsigned __int8 *)(v18 + v19);
    if ((unint64_t)v14 >= 0x201)
    {
      uint64_t v21 = *v17;
      uint64_t v22 = *v13;
      unsigned int v23 = *(unsigned __int8 *)(v18 + v21);
      unsigned int v24 = *(unsigned __int8 *)(v18 + v22);
      if (v23 >= v24)
      {
        if (v20 < v23)
        {
          *int32x4_t v17 = v19;
          *uint64_t v12 = v21;
          uint64_t v29 = *v17;
          uint64_t v30 = *v13;
          if (*(unsigned __int8 *)(v18 + v29) < *(unsigned __int8 *)(v18 + v30))
          {
            *uint64_t v13 = v29;
            *int32x4_t v17 = v30;
          }
        }
      }
      else
      {
        if (v20 < v23)
        {
          *uint64_t v13 = v19;
          goto LABEL_22;
        }
        *uint64_t v13 = v21;
        *int32x4_t v17 = v22;
        uint64_t v33 = *v12;
        if (*(unsigned __int8 *)(v18 + v33) < v24)
        {
          *int32x4_t v17 = v33;
LABEL_22:
          *uint64_t v12 = v22;
        }
      }
      uint64_t v34 = &v13[v16];
      unsigned int v37 = *(v34 - 1);
      uint64_t v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v13[1];
      unsigned int v39 = *(unsigned __int8 *)(v18 + v37);
      unsigned int v40 = *(unsigned __int8 *)(v18 + v38);
      uint64_t v41 = *(a2 - 2);
      unsigned int v42 = *(unsigned __int8 *)(v18 + v41);
      if (v39 >= v40)
      {
        if (v42 < v39)
        {
          unsigned int *v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v13[1];
          if (*(unsigned __int8 *)(v18 + v43) < *(unsigned __int8 *)(v18 + v44))
          {
            v13[1] = v43;
            unsigned int *v35 = v44;
          }
        }
      }
      else
      {
        if (v42 < v39)
        {
          v13[1] = v41;
          goto LABEL_34;
        }
        v13[1] = v36;
        unsigned int *v35 = v38;
        uint64_t v46 = *(a2 - 2);
        if (*(unsigned __int8 *)(v18 + v46) < v40)
        {
          unsigned int *v35 = v46;
LABEL_34:
          *(a2 - 2) = v38;
        }
      }
      uint64_t v47 = &v13[v16];
      unsigned int v50 = v47[1];
      long long v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v13[2];
      unsigned int v52 = *(unsigned __int8 *)(v18 + v50);
      unsigned int v53 = *(unsigned __int8 *)(v18 + v51);
      uint64_t v54 = *(a2 - 3);
      unsigned int v55 = *(unsigned __int8 *)(v18 + v54);
      if (v52 >= v53)
      {
        if (v55 < v52)
        {
          *long long v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v13[2];
          if (*(unsigned __int8 *)(v18 + v56) < *(unsigned __int8 *)(v18 + v57))
          {
            v13[2] = v56;
            *long long v48 = v57;
          }
        }
      }
      else
      {
        if (v55 < v52)
        {
          v13[2] = v54;
          goto LABEL_43;
        }
        v13[2] = v49;
        *long long v48 = v51;
        uint64_t v58 = *(a2 - 3);
        if (*(unsigned __int8 *)(v18 + v58) < v53)
        {
          *long long v48 = v58;
LABEL_43:
          *(a2 - 3) = v51;
        }
      }
      uint64_t v59 = *v17;
      uint64_t v60 = *v35;
      unsigned int v61 = *(unsigned __int8 *)(v18 + v59);
      unsigned int v62 = *(unsigned __int8 *)(v18 + v60);
      uint64_t v63 = *v48;
      unsigned int v64 = *(unsigned __int8 *)(v18 + v63);
      if (v61 >= v62)
      {
        if (v64 >= v61) {
          goto LABEL_51;
        }
        *int32x4_t v17 = v63;
        *long long v48 = v59;
        long long v48 = v17;
        LODWORD(v59) = v60;
        if (v64 >= v62)
        {
          LODWORD(v59) = v63;
          goto LABEL_51;
        }
      }
      else if (v64 >= v61)
      {
        unsigned int *v35 = v59;
        *int32x4_t v17 = v60;
        uint64_t v35 = v17;
        LODWORD(v59) = v63;
        if (v64 >= v62)
        {
          LODWORD(v59) = v60;
LABEL_51:
          unsigned int v65 = *v13;
          *uint64_t v13 = v59;
          *int32x4_t v17 = v65;
          goto LABEL_52;
        }
      }
      unsigned int *v35 = v63;
      *long long v48 = v60;
      goto LABEL_51;
    }
    uint64_t v25 = *v13;
    uint64_t v26 = *v17;
    unsigned int v27 = *(unsigned __int8 *)(v18 + v25);
    unsigned int v28 = *(unsigned __int8 *)(v18 + v26);
    if (v27 >= v28)
    {
      if (v20 < v27)
      {
        *uint64_t v13 = v19;
        *uint64_t v12 = v25;
        uint64_t v31 = *v13;
        uint64_t v32 = *v17;
        if (*(unsigned __int8 *)(v18 + v31) < *(unsigned __int8 *)(v18 + v32))
        {
          *int32x4_t v17 = v31;
          *uint64_t v13 = v32;
        }
      }
      goto LABEL_52;
    }
    if (v20 < v27)
    {
      *int32x4_t v17 = v19;
LABEL_31:
      *uint64_t v12 = v26;
      goto LABEL_52;
    }
    *int32x4_t v17 = v25;
    *uint64_t v13 = v26;
    uint64_t v45 = *v12;
    if (*(unsigned __int8 *)(v18 + v45) < v28)
    {
      *uint64_t v13 = v45;
      goto LABEL_31;
    }
LABEL_52:
    --a4;
    uint64_t v66 = *v13;
    if (a5)
    {
      unsigned int v67 = *(unsigned __int8 *)(v18 + v66);
LABEL_55:
      long long v68 = v13;
      do
      {
        uint64_t v69 = v68;
        unsigned int v71 = v68[1];
        ++v68;
        unsigned int v70 = v71;
      }
      while (*(unsigned __int8 *)(v18 + v71) < v67);
      uint64_t v72 = a2;
      if (v69 == v13)
      {
        uint64_t v72 = a2;
        do
        {
          if (v68 >= v72) {
            break;
          }
          unsigned int v74 = *--v72;
        }
        while (*(unsigned __int8 *)(v18 + v74) >= v67);
      }
      else
      {
        do
          unsigned int v73 = *--v72;
        while (*(unsigned __int8 *)(v18 + v73) >= v67);
      }
      if (v68 < v72)
      {
        unsigned int v75 = *v72;
        unsigned int v76 = v70;
        uint64_t v77 = v68;
        uint64_t v78 = v72;
        do
        {
          *uint64_t v77 = v75;
          unsigned int *v78 = v76;
          do
          {
            uint64_t v69 = v77;
            unsigned int v79 = v77[1];
            ++v77;
            unsigned int v76 = v79;
          }
          while (*(unsigned __int8 *)(v18 + v79) < v67);
          do
          {
            unsigned int v80 = *--v78;
            unsigned int v75 = v80;
          }
          while (*(unsigned __int8 *)(v18 + v80) >= v67);
        }
        while (v77 < v78);
      }
      if (v69 != v13) {
        *uint64_t v13 = *v69;
      }
      unsigned int *v69 = v66;
      if (v68 < v72) {
        goto LABEL_74;
      }
      BOOL v81 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v13, v69, *a3);
      uint64_t v13 = v69 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v69 + 1, a2, *a3);
      if (result)
      {
        a2 = v69;
        if (v81) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v81)
      {
LABEL_74:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v11, v69, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v69 + 1;
      }
    }
    else
    {
      unsigned int v67 = *(unsigned __int8 *)(v18 + v66);
      if (*(unsigned __int8 *)(v18 + *(v13 - 1)) < v67) {
        goto LABEL_55;
      }
      if (v67 < *(unsigned __int8 *)(v18 + *v12))
      {
        do
        {
          unsigned int v82 = v13[1];
          ++v13;
        }
        while (v67 >= *(unsigned __int8 *)(v18 + v82));
      }
      else
      {
        uint64_t v83 = v13 + 1;
        do
        {
          uint64_t v13 = v83;
          if (v83 >= a2) {
            break;
          }
          ++v83;
        }
        while (v67 >= *(unsigned __int8 *)(v18 + *v13));
      }
      uint64_t v84 = a2;
      if (v13 < a2)
      {
        uint64_t v84 = a2;
        do
          unsigned int v85 = *--v84;
        while (v67 < *(unsigned __int8 *)(v18 + v85));
      }
      if (v13 < v84)
      {
        unsigned int v86 = *v13;
        unsigned int v87 = *v84;
        do
        {
          *uint64_t v13 = v87;
          *uint64_t v84 = v86;
          do
          {
            unsigned int v88 = v13[1];
            ++v13;
            unsigned int v86 = v88;
          }
          while (v67 >= *(unsigned __int8 *)(v18 + v88));
          do
          {
            unsigned int v89 = *--v84;
            unsigned int v87 = v89;
          }
          while (v67 < *(unsigned __int8 *)(v18 + v89));
        }
        while (v13 < v84);
      }
      long long v90 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        unsigned int *v11 = *v90;
      }
      a5 = 0;
      *long long v90 = v66;
    }
  }
  if (a5)
  {
    if (v13 != a2)
    {
      uint64_t v112 = v13 + 1;
      if (v13 + 1 != a2)
      {
        uint64_t v113 = **a3;
        uint64_t v114 = 4;
        uint64_t v115 = v13;
        do
        {
          uint64_t v118 = *v115;
          uint64_t v117 = v115[1];
          uint64_t v115 = v112;
          unsigned int v119 = *(unsigned __int8 *)(v113 + v117);
          if (v119 < *(unsigned __int8 *)(v113 + v118))
          {
            uint64_t v120 = v114;
            do
            {
              *(unsigned int *)((char *)v13 + v120) = v118;
              uint64_t v121 = v120 - 4;
              if (v120 == 4)
              {
                uint64_t v116 = v13;
                goto LABEL_112;
              }
              uint64_t v118 = *(unsigned int *)((char *)v13 + v120 - 8);
              v120 -= 4;
            }
            while (v119 < *(unsigned __int8 *)(v113 + v118));
            uint64_t v116 = (unsigned int *)((char *)v13 + v121);
LABEL_112:
            unsigned int *v116 = v117;
          }
          uint64_t v112 = v115 + 1;
          v114 += 4;
        }
        while (v115 + 1 != a2);
      }
    }
  }
  else if (v13 != a2)
  {
    uint64_t v136 = v13 + 1;
    if (v13 + 1 != a2)
    {
      uint64_t v137 = **a3;
      do
      {
        uint64_t v139 = *v11;
        uint64_t v138 = v11[1];
        int v11 = v136;
        unsigned int v140 = *(unsigned __int8 *)(v137 + v138);
        if (v140 < *(unsigned __int8 *)(v137 + v139))
        {
          float v141 = v11;
          do
          {
            unsigned int *v141 = v139;
            uint64_t v139 = *(v141 - 2);
            --v141;
          }
          while (v140 < *(unsigned __int8 *)(v137 + v139));
          unsigned int *v141 = v138;
        }
        uint64_t v136 = v11 + 1;
      }
      while (v11 + 1 != a2);
    }
  }
  return result;
}

char *std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>(char **a1, uint64_t *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
LABEL_39:
  }
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v7 = (char *)operator new(40 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  unsigned int v8 = &v7[40 * v2];
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)unsigned int v8 = v9;
  uint64_t v10 = v8 + 8;
  int v11 = (uint64_t *)a2[4];
  if (v11)
  {
    if (v11 == a2 + 1)
    {
      *((void *)v8 + 4) = v10;
      (*(void (**)(uint64_t *))(*v11 + 24))(v11);
    }
    else
    {
      *((void *)v8 + 4) = v11;
      a2[4] = 0;
    }
  }
  else
  {
    *((void *)v8 + 4) = 0;
  }
  uint64_t v12 = &v7[40 * v6];
  uint64_t v13 = v8 + 40;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = a1[1];
    do
    {
      int32x4_t v17 = v8;
      uint64_t v18 = *((void *)v16 - 5);
      v16 -= 40;
      *(void *)unint64_t v16 = 0;
      *((void *)v8 - 5) = v18;
      v8 -= 40;
      uint64_t v19 = (char *)*((void *)v16 + 4);
      if (v19)
      {
        if (v14 - 32 == v19)
        {
          *((void *)v17 - 1) = v8 + 8;
          (*(void (**)(void))(**((void **)v14 - 1) + 24))(*((void *)v14 - 1));
        }
        else
        {
          *((void *)v17 - 1) = v19;
          *((void *)v14 - 1) = 0;
        }
      }
      else
      {
        *((void *)v17 - 1) = 0;
      }
      uint64_t v14 = v16;
    }
    while (v16 != v15);
    uint64_t v14 = *a1;
    unsigned int v20 = a1[1];
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v12;
    if (v20 != v14)
    {
      uint64_t v21 = v20 - 32;
      uint64_t v22 = v20;
      do
      {
        uint64_t v24 = *((void *)v22 - 5);
        v22 -= 40;
        uint64_t v23 = v24;
        *(void *)uint64_t v22 = 0;
        if (v24)
        {
          uint64_t v28 = v23;
          uint64_t v25 = *((void *)v20 - 1);
          if (!v25)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_39;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v25 + 48))(v25, &v28);
        }
        uint64_t v26 = (char *)*((void *)v20 - 1);
        if (v20 - 32 == v26)
        {
          (*(void (**)(void *))(*((void *)v20 - 4) + 32))((void *)v20 - 4);
        }
        else if (v26)
        {
          (*(void (**)(char *, void *))(*(void *)v26 + 40))(v26, v10);
        }
        v21 -= 40;
        unsigned int v20 = v22;
      }
      while (v22 != v14);
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A7C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A778;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A808;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(unsigned __int8 *)(*a3 + v17);
      unsigned int v20 = *(unsigned __int8 *)(*a3 + v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v45 = *a1;
          uint64_t v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1[2];
      unsigned int v27 = a1[1];
      uint64_t v28 = *a3;
      unsigned int v29 = *(unsigned __int8 *)(*a3 + v24);
      uint64_t v30 = *a1;
      unsigned int v31 = *(unsigned __int8 *)(*a3 + v30);
      unsigned int v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          *uint64_t v23 = v26;
          _DWORD *v25 = v24;
          uint64_t v33 = a1;
          uint64_t v34 = a1 + 1;
          if (v32 >= v31) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          uint64_t v33 = a1;
          uint64_t v34 = a1 + 2;
          uint64_t v24 = *a1;
          unsigned int v27 = *a1;
LABEL_37:
          *uint64_t v33 = v26;
          _DWORD *v34 = v30;
          goto LABEL_39;
        }
        uint64_t v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        uint64_t v34 = a1 + 2;
        uint64_t v24 = v30;
        unsigned int v27 = v30;
        if (v32 < v31) {
          goto LABEL_37;
        }
      }
      uint64_t v24 = v26;
      unsigned int v27 = v26;
LABEL_39:
      uint64_t v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        _DWORD *v25 = v47;
        *(a2 - 1) = v27;
        uint64_t v48 = *v25;
        uint64_t v49 = *v23;
        unsigned int v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          uint64_t v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      BOOL v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(unsigned __int8 *)(*a3 + v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(unsigned __int8 *)(v9 + v11);
      unsigned int v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        *BOOL v7 = v8;
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        uint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      _DWORD *v15 = v11;
LABEL_18:
      uint64_t v35 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v36 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v39 = *v35;
        uint64_t v40 = *v7;
        unsigned int v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          uint64_t v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            uint64_t v43 = v42 - 4;
            if (v42 == 4)
            {
              uint64_t v38 = a1;
              goto LABEL_21;
            }
            uint64_t v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          uint64_t v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *uint64_t v38 = v39;
          if (++v36 == 8) {
            break;
          }
        }
        BOOL v7 = v35++;
        if (v35 == a2) {
          return 1;
        }
      }
      return v35 + 1 == a2;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(unsigned __int8 *)(*a3 + v17);
      unsigned int v20 = *(unsigned __int8 *)(*a3 + v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v45 = *a1;
          uint64_t v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1[2];
      unsigned int v27 = a1[1];
      uint64_t v28 = *a3;
      unsigned int v29 = *(unsigned __int8 *)(*a3 + v24);
      uint64_t v30 = *a1;
      unsigned int v31 = *(unsigned __int8 *)(*a3 + v30);
      unsigned int v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          *uint64_t v23 = v26;
          _DWORD *v25 = v24;
          uint64_t v33 = a1;
          uint64_t v34 = a1 + 1;
          if (v32 >= v31) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          uint64_t v33 = a1;
          uint64_t v34 = a1 + 2;
          uint64_t v24 = *a1;
          unsigned int v27 = *a1;
LABEL_37:
          *uint64_t v33 = v26;
          _DWORD *v34 = v30;
          goto LABEL_39;
        }
        uint64_t v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        uint64_t v34 = a1 + 2;
        uint64_t v24 = v30;
        unsigned int v27 = v30;
        if (v32 < v31) {
          goto LABEL_37;
        }
      }
      uint64_t v24 = v26;
      unsigned int v27 = v26;
LABEL_39:
      uint64_t v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        _DWORD *v25 = v47;
        *(a2 - 1) = v27;
        uint64_t v48 = *v25;
        uint64_t v49 = *v23;
        unsigned int v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          uint64_t v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      BOOL v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(unsigned __int8 *)(*a3 + v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(unsigned __int8 *)(v9 + v11);
      unsigned int v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        *BOOL v7 = v8;
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        uint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      _DWORD *v15 = v11;
LABEL_18:
      uint64_t v35 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v36 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v39 = *v35;
        uint64_t v40 = *v7;
        unsigned int v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          uint64_t v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            uint64_t v43 = v42 - 4;
            if (v42 == 4)
            {
              uint64_t v38 = a1;
              goto LABEL_21;
            }
            uint64_t v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          uint64_t v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *uint64_t v38 = v39;
          if (++v36 == 8) {
            break;
          }
        }
        BOOL v7 = v35++;
        if (v35 == a2) {
          return 1;
        }
      }
      return v35 + 1 == a2;
  }
}

_DWORD *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *result, unsigned int *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  int v7 = *a2;
  uint64_t v8 = *result;
  unsigned int v9 = *(unsigned __int8 *)(a6 + v6);
  unsigned int v10 = *(unsigned __int8 *)(a6 + v8);
  uint64_t v11 = *a3;
  unsigned int v12 = *(unsigned __int8 *)(a6 + v11);
  if (v9 >= v10)
  {
    if (v12 >= v9)
    {
      uint64_t v6 = *a3;
      int v7 = *a3;
    }
    else
    {
      *a2 = v11;
      *a3 = v6;
      uint64_t v13 = *a2;
      uint64_t v14 = *result;
      if (*(unsigned __int8 *)(a6 + v13) < *(unsigned __int8 *)(a6 + v14))
      {
        *uint64_t result = v13;
        *a2 = v14;
        uint64_t v6 = *a3;
        int v7 = *a3;
      }
    }
  }
  else
  {
    if (v12 < v9)
    {
      *uint64_t result = v11;
LABEL_9:
      *a3 = v8;
      uint64_t v6 = v8;
      int v7 = v8;
      goto LABEL_11;
    }
    *uint64_t result = v6;
    *a2 = v8;
    uint64_t v6 = *a3;
    int v7 = *a3;
    if (*(unsigned __int8 *)(a6 + v6) < v10)
    {
      *a2 = v6;
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v15 = *a4;
  if (*(unsigned __int8 *)(a6 + v15) < *(unsigned __int8 *)(a6 + v6))
  {
    *a3 = v15;
    *a4 = v7;
    uint64_t v16 = *a3;
    uint64_t v17 = *a2;
    if (*(unsigned __int8 *)(a6 + v16) < *(unsigned __int8 *)(a6 + v17))
    {
      *a2 = v16;
      *a3 = v17;
      uint64_t v18 = *a2;
      uint64_t v19 = *result;
      if (*(unsigned __int8 *)(a6 + v18) < *(unsigned __int8 *)(a6 + v19))
      {
        *uint64_t result = v18;
        *a2 = v19;
      }
    }
  }
  uint64_t v20 = *a5;
  uint64_t v21 = *a4;
  if (*(unsigned __int8 *)(a6 + v20) < *(unsigned __int8 *)(a6 + v21))
  {
    *a4 = v20;
    *a5 = v21;
    uint64_t v22 = *a4;
    uint64_t v23 = *a3;
    if (*(unsigned __int8 *)(a6 + v22) < *(unsigned __int8 *)(a6 + v23))
    {
      *a3 = v22;
      *a4 = v23;
      uint64_t v24 = *a3;
      uint64_t v25 = *a2;
      if (*(unsigned __int8 *)(a6 + v24) < *(unsigned __int8 *)(a6 + v25))
      {
        *a2 = v24;
        *a3 = v25;
        uint64_t v26 = *a2;
        uint64_t v27 = *result;
        if (*(unsigned __int8 *)(a6 + v26) < *(unsigned __int8 *)(a6 + v27))
        {
          *uint64_t result = v26;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A898;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A8E0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A850;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t md::CurvedTextLabelPart::initializeLayoutDirection(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  float v28 = 0.0;
  uint64_t v27 = 0;
  uint64_t v8 = *(unsigned __int8 **)(a1 + 1072);
  int v9 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v8 + 80))(v8);
  int v12 = v8[45];
  if (v8[45]) {
    char v13 = 1;
  }
  else {
    char v13 = 2;
  }
  if (v12 == 2) {
    char v13 = 0;
  }
  if (v9) {
    LOBYTE(v12) = v13;
  }
  uint64_t result = md::CurvedTextLabelPart::findLineLayoutDirection(a2, 0, v12, (uint64_t)&v27, a4, v10, v11);
  if (result)
  {
    if (*(unsigned char *)(a1 + 565))
    {
      uint64_t v15 = a3 + 24;
      uint64_t v16 = a3 + 25;
      float v17 = a3[26];
      uint64_t v18 = a3 + 21;
      uint64_t v19 = a3 + 22;
      float v20 = a3[23];
    }
    else
    {
      uint64_t v15 = a3 + 19;
      uint64_t v16 = a3 + 20;
      uint64_t v18 = a3 + 17;
      uint64_t v19 = a3 + 18;
      float v17 = 0.0;
      float v20 = 0.0;
    }
    uint64_t v21 = v27;
    float v22 = v28;
    float v23 = (float)((float)(*(float *)&v27 * *v15) + (float)(*((float *)&v27 + 1) * *v16)) + (float)(v28 * v17);
    if (*(unsigned char *)(a1 + 1455) && fabsf(v23) < 0.70711)
    {
      float v24 = *v18;
      float v25 = *v19;
      *(unsigned char *)(a1 + 1141) = 2;
      float v23 = -(float)((float)((float)(*(float *)&v21 * v24) + (float)(*((float *)&v21 + 1) * v25)) + (float)(v22 * v20));
    }
    else
    {
      *(unsigned char *)(a1 + 1141) = 1;
    }
    if (v23 >= 0.0) {
      char v26 = 1;
    }
    else {
      char v26 = 2;
    }
    *(unsigned char *)(a1 + 1136) = v26;
  }
  return result;
}

uint64_t md::CurvedTextLabelPart::CurvedTextLabelPart(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, float a9, unsigned char *a10, char a11)
{
  uint64_t v18 = a1 + 1141;
  uint64_t v19 = md::TextLabelPart::TextLabelPart(a1, a3, a11);
  *(void *)uint64_t v19 = &unk_1EF53B460;
  *(_OWORD *)(v19 + 960) = 0u;
  *(_OWORD *)(v19 + 976) = 0u;
  *(void *)(v19 + 992) = 1065353216;
  *(_DWORD *)(v19 + 1000) = 0;
  *(void *)(v19 + 1008) = 0;
  *(void *)(v19 + 1056) = 0;
  *(_OWORD *)(v19 + 1072) = 0u;
  *(_OWORD *)(v19 + 1088) = 0u;
  *(_OWORD *)(v19 + 1104) = 0u;
  *(_OWORD *)(v19 + 1120) = 0u;
  *(_DWORD *)(v19 + 1135) = 0;
  *(_WORD *)(v19 + 1139) = 2305;
  *(_DWORD *)uint64_t v18 = 0;
  *(_OWORD *)(v19 + 1148) = 0u;
  *(_OWORD *)(v19 + 1164) = 0u;
  *(_DWORD *)(v19 + 1180) = 0;
  *(void *)(v19 + 1184) = 1065353216;
  *(_DWORD *)(v19 + 1192) = 0;
  *(void *)(v19 + 1200) = 0;
  *(void *)(v19 + 1248) = 0;
  *(_DWORD *)(v19 + 1327) = 0;
  *(_OWORD *)(v19 + 1312) = 0u;
  *(_OWORD *)(v19 + 1296) = 0u;
  *(_OWORD *)(v19 + 1280) = 0u;
  *(_OWORD *)(v19 + 1264) = 0u;
  *(_WORD *)(v19 + 1331) = 2305;
  *(_DWORD *)(v19 + 1340) = 0;
  *(_DWORD *)(v18 + 192) = 0;
  *(_DWORD *)(v19 + 1344) = 1;
  *(unsigned char *)(v19 + 1348) = 10;
  *(_DWORD *)(v19 + 1350) = 16842752;
  *(unsigned char *)(v19 + 1354) = 0;
  *(void *)(v19 + 1360) = 0;
  *(_DWORD *)(v19 + 1368) = 0;
  *(_WORD *)(v19 + 1372) = 258;
  *(void *)(v19 + 1388) = 0;
  *(void *)(v19 + 1374) = 0;
  *(void *)(v19 + 1382) = 0;
  *(unsigned char *)(v19 + 1396) = 9;
  *(unsigned char *)(v19 + 1397) = *(unsigned char *)(a6 + 248);
  *(unsigned char *)(v19 + 1398) = *(unsigned char *)(a6 + 253);
  *(unsigned char *)(v19 + 1399) = 0;
  *(float *)(v19 + 1400) = a9;
  *(_DWORD *)(v19 + 1404) = *(_DWORD *)(a5 + 392);
  *(_DWORD *)(v19 + 1408) = 0;
  *(unsigned char *)(v19 + 1416) = 0;
  *(void *)(v19 + 1440) = 0;
  *(void *)(v19 + 1448) = 0;
  *(void *)(v19 + 1432) = 0;
  *(unsigned char *)(v19 + 1456) = a10[2];
  *(void *)(v19 + 1457) = 0x900000000;
  *(unsigned char *)(v19 + 1467) = 0;
  unsigned int v50 = (_WORD *)(v19 + 1461);
  *(_WORD *)(v19 + 1465) = 257;
  *(unsigned char *)(v19 + 1468) = a2;
  *(void *)(v19 + 1472) = *a7;
  uint64_t v20 = a7[1];
  *(void *)(v19 + 1480) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 557) = 1;
  uint64_t v21 = *(void *)(a6 + 264);
  if (a11 == 1)
  {
    if (!v21)
    {
      float v22 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(a6);
      uint64_t v21 = *v22;
      *(void *)(a6 + 264) = *v22;
    }
    float v23 = (unsigned char *)(v21 + 62);
  }
  else
  {
    if (!v21)
    {
      float v24 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(a6);
      uint64_t v21 = *v24;
      *(void *)(a6 + 264) = *v24;
    }
    float v23 = (unsigned char *)(v21 + 61);
  }
  char v25 = *v23 - 2;
  if ((v25 & 0xF8) != 0) {
    char v26 = 9;
  }
  else {
    char v26 = 0x908090609090902uLL >> (8 * v25);
  }
  *(unsigned char *)(a1 + 1396) = v26;
  if (a2 == 2 && *(unsigned char *)(*(void *)(a4 + 232) + 31))
  {
    *(unsigned char *)(a1 + 1399) = 0;
  }
  else
  {
    int v27 = *(unsigned __int8 *)(a1 + 1398);
    *(unsigned char *)(a1 + 1399) = v27;
    if (v27) {
      *(_WORD *)(a1 + 565) = 1;
    }
  }
  char v28 = *(unsigned char *)(a1 + 565);
  if (v28)
  {
    if (*(unsigned char *)(*(void *)(a4 + 232) + 17)) {
      char v28 = *(unsigned char *)(*(void *)(a4 + 432) + 24) != 0;
    }
    else {
      char v28 = 1;
    }
  }
  *(unsigned char *)(a1 + 869) = v28;
  *(unsigned char *)(a1 + 865) = 1;
  if (*(unsigned char *)(a1 + 1456) && !*(unsigned char *)(v18 + 316))
  {
    *(unsigned char *)(a1 + 1466) = 0;
    *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a5 + 96);
    *(_DWORD *)(a1 + 1000) = *(_DWORD *)(*(void *)(a4 + 432) + 1176);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)*a7 + 16))(&v52);
  long long v29 = v52;
  long long v52 = 0uLL;
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 1080);
  *(_OWORD *)(a1 + 1072) = v29;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  unsigned int v31 = (uint64_t *)(a1 + 1072);
  unsigned int v32 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v33 = *v31;
  if (a10[7])
  {
    (*(void (**)(uint64_t, void, double))(*(void *)v33 + 176))(v33, a10[6], 1.0);
    uint64_t v33 = *v31;
  }
  *(unsigned char *)(a1 + 1142) = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 80))(v33);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 1072) + 16))(&v52);
  long long v34 = v52;
  long long v52 = 0uLL;
  uint64_t v35 = *(std::__shared_weak_count **)(a1 + 1272);
  *(_OWORD *)(a1 + 1264) = v34;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  int v36 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  *(unsigned char *)(a1 + 1334) = (*(uint64_t (**)(void))(**(void **)(a1 + 1264) + 80))();
  *(unsigned char *)(a1 + 1136) = a10[1];
  int v37 = a10[3];
  *(unsigned char *)(a1 + 1141) = v37;
  int v38 = *(unsigned __int8 *)(a6 + 248);
  if (v38 == 32 && (uint64_t v39 = **(void **)(*a3 + 16), *(unsigned char *)(v39 + 128) == 2))
  {
    int v40 = *(unsigned __int8 *)(v39 + 130);
    *(unsigned char *)(a1 + 1455) = v40;
    uint64_t v41 = a8;
    if (v40) {
      goto LABEL_48;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1455) = 0;
    uint64_t v41 = a8;
  }
  if (!v37) {
    int v37 = v38;
  }
  if (v37 == 32) {
    LOBYTE(v37) = 0;
  }
LABEL_48:
  *(unsigned char *)(a1 + 1452) = v37;
  int v42 = *(unsigned __int8 *)(a6 + 251);
  if (v42 != 1 && v42 != 4)
  {
    if (a10[5])
    {
      int v42 = a10[4];
    }
    else if (*(unsigned char *)(a4 + 3645))
    {
      int v42 = 4;
    }
    else
    {
      int v42 = 1;
    }
  }
  *(unsigned char *)(a1 + 1453) = v42;
  if (*(unsigned char *)(v41 + 3) == 9)
  {
    *(unsigned char *)(a1 + 1458) = v42;
    if (v42 == 4)
    {
      BOOL v43 = *(unsigned __int8 *)(a1 + 864) == 1;
      uint64_t v44 = a6 + 280;
      if (*(unsigned char *)(a1 + 864) == 1) {
        uint64_t v45 = 6;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = *(float **)(v44 + 8 * (*(unsigned char *)(a1 + 864) == 1));
      if (v46)
      {
        if (vabds_f32(v46[2], *(float *)(a6 + 104)) >= 0.01)
        {
          md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)a6, (uint64_t)v46, v45);
          uint64_t v46 = *(float **)(v44 + 8 * v43);
        }
      }
      else
      {
        uint64_t v46 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a6, v45);
        *(void *)(v44 + 8 * v43) = v46;
      }
      if ((float)(*(float *)(a6 + 152) + *(float *)(a6 + 152)) <= (float)(*(float *)(*(void *)v46 + 100)
                                                                         / *(float *)(a4 + 176)))
        LOWORD(v47) = 2;
      else {
        LOWORD(v47) = 8;
      }
    }
    else
    {
      int v47 = *(unsigned __int8 *)(a1 + 1396);
      if (v47 == 9) {
        LOWORD(v47) = 8;
      }
    }
    *unsigned int v50 = v47;
  }
  else
  {
    *unsigned int v50 = *(_WORD *)(v41 + 3);
    *(unsigned char *)(a1 + 1458) = *(unsigned char *)v41;
  }
  *(unsigned char *)(a1 + 1465) = (*(unsigned char *)(a1 + 1396) & 0xFE) == 8;
  *(unsigned char *)(a1 + 1348) = 0;
  *(unsigned char *)(a1 + 1344) = *(unsigned char *)(a1 + 557);
  return a1;
}

void sub_1A18BB2AC(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 1472));
  if (v1[1416]) {
    v1[1416] = 0;
  }
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::CurvedTextLabelPart::LayoutState *)(v1 + 1152));
  md::CurvedTextLabelPart::LayoutState::~LayoutState(v2);
  md::TextLabelPart::~TextLabelPart((md::TextLabelPart *)v1);
  _Unwind_Resume(a1);
}

__n128 md::LineLabelPlacer::addPositionIfValid(uint64_t a1, uint64_t a2, uint64_t **this, int a4, int a5, uint64_t a6, int a7, double a8, double a9, float a10)
{
  __n128 v10 = (md::LabelLineResolvedPosition *)this;
  if (a5)
  {
    uint64_t v19 = *this;
    if (!*((unsigned char *)*this + 120))
    {
      switch(a5)
      {
        case 1:
          if (*((_DWORD *)this + 10) == *((_DWORD *)v19 + 63))
          {
            uint64_t v48 = this[3];
            if (v48)
            {
              if ((*((__int16 *)this + 17) & 0x80000000) == 0) {
                goto LABEL_60;
              }
            }
          }
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (*(void *)v10 && *((_DWORD *)v10 + 10) == *(_DWORD *)(*(void *)v10 + 252))
          {
            uint64_t v48 = (uint64_t *)*((void *)v10 + 3);
LABEL_60:
            if (v48)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                uint64_t v49 = *v48;
                if (v49)
                {
                  if (*(unsigned __int8 *)(v49 + 38) != 255)
                  {
                    uint64_t v20 = *(uint64_t **)(a2 + 32);
                    uint64_t v21 = (uint64_t *)(a2 + 40);
                    int v99 = a7;
                    uint64_t v98 = (void **)(a2 + 32);
                    if (v20 == (uint64_t *)(a2 + 40)) {
                      goto LABEL_89;
                    }
                    uint64_t v97 = a6;
                    float v22 = (md::LabelLineResolvedPosition *)((char *)v10 + 104);
                    goto LABEL_5;
                  }
                }
              }
            }
          }
          goto LABEL_103;
        case 2:
          BOOL v72 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v72 && (*((__int16 *)this + 17) & 0x80000000) == 0) {
            goto LABEL_206;
          }
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (*(unsigned char *)(*(void *)v10 + 120)) {
            break;
          }
          if (*((_DWORD *)v10 + 10) == *(_DWORD *)(*(void *)v10 + 252))
          {
LABEL_206:
            unsigned int v73 = (uint64_t *)*((void *)v10 + 3);
            if (v73)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                uint64_t v74 = *v73;
                if (v74)
                {
                  if (!*(unsigned char *)(v74 + 32))
                  {
                    uint64_t v75 = *(void *)(v74 + 16);
                    if (v75)
                    {
                      if (geo::codec::featureGetNativeShieldCount(v75)) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_177;
        case 3:
          BOOL v76 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v76 && (*((__int16 *)this + 17) & 0x80000000) == 0) {
            goto LABEL_123;
          }
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (*(unsigned char *)(*(void *)v10 + 120)) {
            break;
          }
          if (*((_DWORD *)v10 + 10) != *(_DWORD *)(*(void *)v10 + 252)) {
            goto LABEL_103;
          }
LABEL_123:
          uint64_t v77 = (uint64_t *)*((void *)v10 + 3);
          if (!v77) {
            goto LABEL_103;
          }
          if (*((__int16 *)v10 + 17) < 0) {
            goto LABEL_103;
          }
          uint64_t v78 = *v77;
          if (!v78) {
            goto LABEL_103;
          }
          if (*(unsigned char *)(v78 + 32)) {
            goto LABEL_103;
          }
          uint64_t v79 = *(void *)(v78 + 16);
          if (!v79 || !geo::codec::featureGetNativeShieldCount(v79)) {
            goto LABEL_103;
          }
          break;
        case 4:
          BOOL v80 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (v80 || *((__int16 *)this + 17) < 0) {
            md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          }
          if (md::LabelLinePosition::travelDirection(v10) - 1 < 2) {
            break;
          }
          goto LABEL_103;
        case 5:
          BOOL v81 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (v81 || *((__int16 *)this + 17) < 0) {
            md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          }
          if (md::LabelLinePosition::travelDirection(v10) < 2) {
            break;
          }
          goto LABEL_103;
        case 6:
          BOOL v82 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v82 && (*((__int16 *)this + 17) & 0x80000000) == 0
            || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8), !*(unsigned char *)(*(void *)v10 + 120))&& *((_DWORD *)v10 + 10) == *(_DWORD *)(*(void *)v10 + 252))
          {
            uint64_t v83 = (uint64_t *)*((void *)v10 + 3);
            if (v83)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                uint64_t v84 = *v83;
                if (v84)
                {
                  if (!*(unsigned char *)(v84 + 32))
                  {
                    uint64_t v85 = *(void *)(v84 + 16);
                    if (v85)
                    {
                      if (*(unsigned char *)(v85 + 150)) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_103;
        case 7:
          int v86 = *((_DWORD *)this + 10);
          BOOL v87 = v86 != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v87 && (int v88 = *((_DWORD *)this + 10), (*((__int16 *)this + 17) & 0x80000000) == 0)
            || ((md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8), int v86 = *((_DWORD *)v10 + 10), v88 = *(_DWORD *)(*(void *)v10 + 252), !*(unsigned char *)(*(void *)v10 + 120))? (v93 = v86 == v88): (v93 = 0), v93))
          {
            unsigned int v89 = (uint64_t *)*((void *)v10 + 3);
            if (v89)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                uint64_t v90 = *v89;
                if (v90)
                {
                  if (!*(unsigned char *)(v90 + 32))
                  {
                    uint64_t v91 = *(void *)(v90 + 16);
                    if (v91)
                    {
                      if (*(unsigned char *)(v91 + 150)) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          BOOL v94 = v86 != v88 || *((void *)v10 + 3) == 0;
          if (!v94 && (*((__int16 *)v10 + 17) & 0x80000000) == 0
            || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v10, *((unsigned __int8 *)v10 + 164), a8),
                *(void *)v10)
            && *((_DWORD *)v10 + 10) == *(_DWORD *)(*(void *)v10 + 252))
          {
            uint64_t v95 = (uint64_t *)*((void *)v10 + 3);
            if (v95)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                uint64_t v96 = *v95;
                if (v96)
                {
                  if (*(unsigned __int8 *)(v96 + 38) != 255) {
                    break;
                  }
                }
              }
            }
          }
          goto LABEL_103;
        case 8:
          BOOL v92 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (v92 || *((__int16 *)this + 17) < 0) {
            md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          }
          if (md::LabelLinePosition::travelDirection(v10) < 2) {
            break;
          }
LABEL_177:
          if (!md::LabelLineResolvedPosition::hasText(v10, a8)) {
            goto LABEL_103;
          }
          break;
        default:
          goto LABEL_103;
      }
    }
    uint64_t v20 = *(uint64_t **)(a2 + 32);
    uint64_t v21 = (uint64_t *)(a2 + 40);
    int v99 = a7;
    uint64_t v98 = (void **)(a2 + 32);
    if (v20 == (uint64_t *)(a2 + 40)) {
      goto LABEL_89;
    }
    float v22 = (md::LabelLineResolvedPosition *)((char *)v10 + 104);
    uint64_t v97 = a6;
    if (a5 == 1)
    {
LABEL_5:
      uint64_t v23 = 0;
      double v24 = 1.79769313e308;
      while (1)
      {
        char v25 = (unsigned char *)v20[5];
        if (v25[9] != 1) {
          goto LABEL_45;
        }
        int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 80))(v20[5]);
        int v27 = v25[45];
        if (v25[45]) {
          int v28 = 1;
        }
        else {
          int v28 = 2;
        }
        if (v27 == 2) {
          int v28 = 0;
        }
        if (v26) {
          int v27 = v28;
        }
        if (v27 != a4) {
          goto LABEL_45;
        }
        long long v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v20[5] + 200))(v20[5]);
        unsigned int v31 = v29;
        if ((*(void *)v29
           && *((_DWORD *)v29 + 10) == *(_DWORD *)(*(void *)v29 + 252)
           && (unsigned int v32 = (uint64_t *)*((void *)v29 + 3)) != 0
           && (*((__int16 *)v29 + 17) & 0x80000000) == 0
           || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v29, v29[164], v30),
               *(void *)v31)
           && *((_DWORD *)v31 + 10) == *(_DWORD *)(*(void *)v31 + 252)
           && (unsigned int v32 = (uint64_t *)*((void *)v31 + 3)) != 0)
          && (*((__int16 *)v31 + 17) & 0x80000000) == 0
          && (uint64_t v33 = *v32) != 0)
        {
          int v34 = *(unsigned __int8 *)(v33 + 38);
          uint64_t v35 = *(void *)v10;
          if (!*(void *)v10) {
            goto LABEL_35;
          }
        }
        else
        {
          int v34 = 255;
          uint64_t v35 = *(void *)v10;
          if (!*(void *)v10) {
            goto LABEL_35;
          }
        }
        int v36 = *(_DWORD *)(v35 + 252);
        int v37 = (uint64_t *)*((void *)v10 + 3);
        BOOL v38 = *((_DWORD *)v10 + 10) != v36 || v37 == 0;
        if (!v38)
        {
          int v39 = *((__int16 *)v10 + 17);
          if ((v39 & 0x80000000) == 0)
          {
            if (v37) {
              goto LABEL_38;
            }
            goto LABEL_42;
          }
        }
LABEL_35:
        md::LabelLineResolvedPosition::moveOntoPathForZoom(v10, *((unsigned __int8 *)v10 + 164), v30);
        if (!*(void *)v10) {
          goto LABEL_42;
        }
        if (*((_DWORD *)v10 + 10) == *(_DWORD *)(*(void *)v10 + 252))
        {
          int v37 = (uint64_t *)*((void *)v10 + 3);
          LOWORD(v39) = *((_WORD *)v10 + 17);
          if (v37)
          {
LABEL_38:
            if ((v39 & 0x8000) == 0)
            {
              uint64_t v40 = *v37;
              if (v40)
              {
                if (v34 == *(unsigned __int8 *)(v40 + 38)) {
                  goto LABEL_43;
                }
                goto LABEL_49;
              }
            }
          }
LABEL_42:
          if (v34 == 255) {
            goto LABEL_43;
          }
          goto LABEL_49;
        }
        if (v34 == 255)
        {
LABEL_43:
          uint64_t v41 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(void *)v20[5] + 56))(v20[5]);
          md::LabelPoint::vectorToPoint(v22, v41, *(unsigned __int8 *)(*(void *)a2 + 290));
          double v45 = v42 * v42 + v43 * v43 + v44 * v44;
          if (v45 < v24)
          {
            uint64_t v23 = v20[5];
            double v24 = v45;
          }
LABEL_45:
          uint64_t v46 = (uint64_t *)v20[1];
          if (v46) {
            goto LABEL_46;
          }
          goto LABEL_50;
        }
LABEL_49:
        uint64_t v46 = (uint64_t *)v20[1];
        if (v46)
        {
          do
          {
LABEL_46:
            int v47 = v46;
            uint64_t v46 = (uint64_t *)*v46;
          }
          while (v46);
          goto LABEL_6;
        }
        do
        {
LABEL_50:
          int v47 = (uint64_t *)v20[2];
          BOOL v38 = *v47 == (void)v20;
          uint64_t v20 = v47;
        }
        while (!v38);
LABEL_6:
        uint64_t v20 = v47;
        if (v47 == v21) {
          goto LABEL_85;
        }
      }
    }
    uint64_t v23 = 0;
    double v24 = 1.79769313e308;
    do
    {
      unsigned int v50 = (unsigned __int8 *)v20[5];
      if (v50[9] == a5)
      {
        int v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 80))(v20[5]);
        int v52 = v50[45];
        if (v50[45]) {
          int v53 = 1;
        }
        else {
          int v53 = 2;
        }
        if (v52 == 2) {
          int v53 = 0;
        }
        if (v51) {
          int v52 = v53;
        }
        if (v52 == a4)
        {
          uint64_t v54 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(void *)v20[5] + 56))(v20[5]);
          md::LabelPoint::vectorToPoint((md::LabelLineResolvedPosition *)((char *)v10 + 104), v54, *(unsigned __int8 *)(*(void *)a2 + 290));
          double v58 = v55 * v55 + v56 * v56 + v57 * v57;
          if (v58 < v24)
          {
            uint64_t v23 = v20[5];
            double v24 = v58;
          }
        }
      }
      uint64_t v59 = (uint64_t *)v20[1];
      if (v59)
      {
        do
        {
          uint64_t v60 = v59;
          uint64_t v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          uint64_t v60 = (uint64_t *)v20[2];
          BOOL v38 = *v60 == (void)v20;
          uint64_t v20 = v60;
        }
        while (!v38);
      }
      uint64_t v20 = v60;
    }
    while (v60 != v21);
LABEL_85:
    a6 = v97;
    if (!v23 || sqrt(v24) >= a8)
    {
LABEL_89:
      unsigned int v61 = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(a2 + 64) = v61 + 1;
      unsigned int v62 = (std::__shared_weak_count *)operator new(0xF0uLL);
      v62->__shared_owners_ = 0;
      v62->__shared_weak_owners_ = 0;
      v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581638;
      md::PolylineLabelPlacement::PolylineLabelPlacement((uint64_t)&v62[1], (uint64_t)v10, a5, a4, a6, v99, a9, a10);
      uint64_t v63 = *v21;
      unsigned int v64 = v21;
      if (*v21)
      {
        while (1)
        {
          while (1)
          {
            unsigned int v64 = (uint64_t *)v63;
            unsigned int v65 = *(_DWORD *)(v63 + 32);
            if (v61 >= v65) {
              break;
            }
            uint64_t v63 = *v64;
            uint64_t v21 = v64;
            if (!*v64) {
              goto LABEL_96;
            }
          }
          if (v65 >= v61) {
            break;
          }
          uint64_t v63 = v64[1];
          if (!v63)
          {
            uint64_t v21 = v64 + 1;
            goto LABEL_96;
          }
        }
        uint64_t v66 = (uint64_t)v64;
        if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      else
      {
LABEL_96:
        uint64_t v66 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 16))(*(void *)(a2 + 48), 56, 8);
        *(_DWORD *)(v66 + 32) = v61;
        *(void *)(v66 + 40) = v62 + 1;
        *(void *)(v66 + 48) = v62;
        *(void *)uint64_t v66 = 0;
        *(void *)(v66 + 8) = 0;
        *(void *)(v66 + 16) = v64;
        *uint64_t v21 = v66;
        unsigned int v67 = (void *)**v98;
        long long v68 = (uint64_t *)v66;
        if (v67)
        {
          *uint64_t v98 = v67;
          long long v68 = (uint64_t *)*v21;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 40), v68);
        ++*(void *)(a2 + 56);
      }
      *(unsigned char *)(*(void *)(v66 + 40) + 11) = 1;
    }
    else
    {
      *(_DWORD *)(v23 + 12) |= 1 << v97;
      if (*(_DWORD *)(v23 + 24) < (int)v97)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v23 + 176))(v23, v97, 1.0);
        *(_DWORD *)(v23 + 24) = v97;
      }
      *(unsigned char *)(v23 + 11) = 1;
      __n128 v10 = (md::LabelLineResolvedPosition *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 200))(v23);
    }
  }
LABEL_103:
  uint64_t v69 = *((void *)v10 + 1);
  *(void *)a1 = *(void *)v10;
  *(void *)(a1 + 8) = v69;
  if (v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)v10 + 1);
  *(void *)(a1 + 32) = *((void *)v10 + 4);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v10 + 10);
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)v10 + 56);
  *(void *)(a1 + 72) = *((void *)v10 + 9);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)v10 + 5);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)v10 + 24);
  *(_DWORD *)(a1 + 99) = *(_DWORD *)((char *)v10 + 99);
  long long v70 = *(_OWORD *)((char *)v10 + 104);
  *(void *)(a1 + 120) = *((void *)v10 + 15);
  *(_OWORD *)(a1 + 104) = v70;
  __n128 result = *((__n128 *)v10 + 8);
  *(__n128 *)(a1 + 128) = result;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)v10 + 36);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)((char *)v10 + 147);
  *(void *)(a1 + 152) = *((void *)v10 + 19);
  *(_DWORD *)(a1 + 160) = *((_DWORD *)v10 + 40);
  *(_DWORD *)(a1 + 164) = *((_DWORD *)v10 + 41);
  return result;
}

void sub_1A18BBDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A18BBDE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t md::PolylineLabelPlacement::isLineReversed(md::PolylineLabelPlacement *this)
{
  return *((unsigned __int8 *)this + 213);
}

uint64_t md::PolylineLabelPlacement::PolylineLabelPlacement(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, int a6, double a7, float a8)
{
  int v8 = a5;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 9) = a3;
  *(void *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 18) = 0;
  int v10 = -1;
  *(_DWORD *)(a1 + 20) = a6;
  *(_DWORD *)(a1 + 24) = -1;
  *(double *)(a1 + 32) = a7;
  *(float *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 44) = 0;
  *(unsigned char *)(a1 + 45) = a4;
  *(void *)a1 = &unk_1EF542140;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = *(void *)a2;
  *(void *)(a1 + 56) = v11;
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    LODWORD(v11) = *(_DWORD *)(a1 + 12);
    int v10 = *(_DWORD *)(a1 + 24);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 80) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 96) = 0;
  long long v12 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 120) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 80);
  int v13 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)(a2 + 99);
  *(_DWORD *)(a1 + 144) = v13;
  long long v14 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 168) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 128);
  int v15 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 195) = *(_DWORD *)(a2 + 147);
  *(_DWORD *)(a1 + 192) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 200) = v16;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 12) = v11 | (1 << a5);
  if (v10 < (int)a5)
  {
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 176))(a1, a5, 1.0);
    *(_DWORD *)(a1 + 24) = v8;
  }
  return a1;
}

void sub_1A18BBF5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::PolylineLabelPlacement::moveOntoPathForZoom(md::PolylineLabelPlacement *this, unsigned int a2, double a3)
{
  return md::LabelLineResolvedPosition::moveOntoPathForZoom((md::PolylineLabelPlacement *)((char *)this + 48), a2, a3);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(unint64_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v564 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  float64x2_t v579 = _Q0;
LABEL_2:
  uint64_t v11 = a2;
  uint64_t v523 = &a2[-1].u64[1];
  while (1)
  {
LABEL_3:
    long long v12 = (int8x16_t *)a1;
    uint64_t v13 = (char *)v11 - (char *)a1;
    unint64_t v14 = ((char *)v11 - (char *)a1) >> 3;
    if (_ZF || !_CF)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v523, v12->i64[0]))
          {
            unint64_t v285 = v12->i64[0];
            v12->i64[0] = *v523;
            *uint64_t v523 = v285;
          }
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v12, &v12->u64[1], v523);
          break;
        case 4uLL:
          uint64_t v286 = (unint64_t *)&v12[1];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v12, &v12->u64[1], (unint64_t *)&v12[1]);
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v523, v12[1].u64[0]))
          {
            unint64_t v287 = *v286;
            unint64_t *v286 = *v523;
            *uint64_t v523 = v287;
            if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v286, v12->u64[1]))
            {
              uint64_t v289 = v12->i64[1];
              unint64_t v288 = v12[1].u64[0];
              unint64_t v290 = v12->i64[0];
              v12->i64[1] = v288;
              v12[1].i64[0] = v289;
              if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v288, v290))
              {
                *long long v12 = vextq_s8(*v12, *v12, 8uLL);
              }
            }
          }
          break;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>((unint64_t *)v12, &v12->u64[1], (unint64_t *)&v12[1], &v12[1].u64[1], v523);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    uint64_t v526 = v12;
    if (v13 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v12 != v11)
      {
        int64_t v354 = (v14 - 2) >> 1;
        int64_t v355 = v354;
        do
        {
          int64_t v356 = v355;
          if (v354 >= v355)
          {
            uint64_t v357 = (2 * v355) | 1;
            uint64_t v358 = (unint64_t *)v12 + v357;
            if (2 * v355 + 2 < (uint64_t)v14
              && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v358, v358[1]))
            {
              ++v358;
              uint64_t v357 = 2 * v356 + 2;
            }
            uint64_t v359 = (unint64_t *)v12 + v356;
            if (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v358, *v359))
            {
              unint64_t v360 = *v359;
              do
              {
                unint64_t v361 = v358;
                unint64_t *v359 = *v358;
                if (v354 < v357) {
                  break;
                }
                uint64_t v362 = (2 * v357) | 1;
                uint64_t v358 = (unint64_t *)v526 + v362;
                uint64_t v363 = 2 * v357 + 2;
                if (v363 < (uint64_t)v14
                  && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v358, v358[1]))
                {
                  ++v358;
                  uint64_t v362 = v363;
                }
                uint64_t v359 = v361;
                uint64_t v357 = v362;
              }
              while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v358, v360));
              unint64_t *v361 = v360;
              long long v12 = v526;
            }
          }
          int64_t v355 = v356 - 1;
        }
        while (v356);
        uint64_t v364 = (unint64_t)v13 >> 3;
        float64x2_t v562 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
        do
        {
          uint64_t v366 = 0;
          unint64_t v524 = v12->i64[0];
          do
          {
            uint64_t v368 = &v12->u64[v366 + 1];
            uint64_t v369 = (2 * v366) | 1;
            uint64_t v370 = 2 * v366 + 2;
            if (v370 < v364)
            {
              unint64_t v371 = *v368;
              unint64_t v372 = v12[1].u64[v366];
              uint64_t v373 = (*(uint64_t (**)(unint64_t))(*(void *)*v368 + 56))(*v368);
              uint64_t v374 = v373;
              if (*(unsigned char *)(v373 + 45) || *(unsigned char *)(v373 + 46) == 0)
              {
                v570.f64[0] = *(float64_t *)(v373 + 24);
              }
              else
              {
                long double v376 = *(double *)v373;
                long double v377 = *(double *)(v373 + 8);
                long double v378 = *(double *)(v373 + 16);
                double v379 = sqrt(v376 * v376 + v377 * v377);
                double v380 = atan2(v378, v379 * 0.996647189);
                long double v569 = atan2(v377, v376);
                __double2 v381 = __sincos_stret(v380);
                long double v382 = atan2(v378 + v381.__sinval * v381.__sinval * 42841.3115 * v381.__sinval, v379 + v381.__cosval * v381.__cosval * -42697.6727 * v381.__cosval);
                long double v383 = tan(v382 * 0.5 + 0.785398163);
                long double v384 = log(v383);
                v385.f64[0] = v569;
                v385.f64[1] = v384;
                float64x2_t v570 = vmlaq_f64(v579, v562, v385);
                *(float64x2_t *)(v374 + 24) = v570;
                *(unsigned char *)(v374 + 45) = 1;
              }
              uint64_t v386 = (*(uint64_t (**)(unint64_t))(*(void *)v372 + 56))(v372);
              uint64_t v387 = v386;
              if (*(unsigned char *)(v386 + 45) || *(unsigned char *)(v386 + 46) == 0)
              {
                v399.f64[0] = *(float64_t *)(v386 + 24);
              }
              else
              {
                long double v389 = *(double *)v386;
                long double v390 = *(double *)(v386 + 8);
                long double v391 = *(double *)(v386 + 16);
                double v392 = sqrt(v389 * v389 + v390 * v390);
                double v393 = atan2(v391, v392 * 0.996647189);
                long double v538 = atan2(v390, v389);
                __double2 v394 = __sincos_stret(v393);
                long double v395 = atan2(v391 + v394.__sinval * v394.__sinval * 42841.3115 * v394.__sinval, v392 + v394.__cosval * v394.__cosval * -42697.6727 * v394.__cosval);
                long double v396 = tan(v395 * 0.5 + 0.785398163);
                long double v397 = log(v396);
                v398.f64[0] = v538;
                v398.f64[1] = v397;
                float64x2_t v399 = vmlaq_f64(v579, v562, v398);
                *(float64x2_t *)(v387 + 24) = v399;
                *(unsigned char *)(v387 + 45) = 1;
              }
              if (v570.f64[0] == v399.f64[0])
              {
                BOOL v367 = v371 < v372;
              }
              else
              {
                uint64_t v400 = (*(uint64_t (**)(unint64_t))(*(void *)v371 + 56))(v371);
                uint64_t v401 = v400;
                if (*(unsigned char *)(v400 + 45) || !*(unsigned char *)(v400 + 46))
                {
                  v572.f64[0] = *(float64_t *)(v400 + 24);
                }
                else
                {
                  long double v402 = *(double *)v400;
                  long double v403 = *(double *)(v400 + 8);
                  long double v404 = *(double *)(v400 + 16);
                  double v405 = sqrt(v402 * v402 + v403 * v403);
                  double v406 = atan2(v404, v405 * 0.996647189);
                  long double v571 = atan2(v403, v402);
                  __double2 v407 = __sincos_stret(v406);
                  long double v408 = atan2(v404 + v407.__sinval * v407.__sinval * 42841.3115 * v407.__sinval, v405 + v407.__cosval * v407.__cosval * -42697.6727 * v407.__cosval);
                  long double v409 = tan(v408 * 0.5 + 0.785398163);
                  long double v410 = log(v409);
                  v411.f64[0] = v571;
                  v411.f64[1] = v410;
                  float64x2_t v572 = vmlaq_f64(v579, v562, v411);
                  *(float64x2_t *)(v401 + 24) = v572;
                  *(unsigned char *)(v401 + 45) = 1;
                }
                uint64_t v412 = (*(uint64_t (**)(unint64_t))(*(void *)v372 + 56))(v372);
                uint64_t v413 = v412;
                if (*(unsigned char *)(v412 + 45) || !*(unsigned char *)(v412 + 46))
                {
                  v424.f64[0] = *(float64_t *)(v412 + 24);
                }
                else
                {
                  long double v414 = *(double *)v412;
                  long double v415 = *(double *)(v412 + 8);
                  long double v416 = *(double *)(v412 + 16);
                  double v417 = sqrt(v414 * v414 + v415 * v415);
                  double v418 = atan2(v416, v417 * 0.996647189);
                  long double v539 = atan2(v415, v414);
                  __double2 v419 = __sincos_stret(v418);
                  long double v420 = atan2(v416 + v419.__sinval * v419.__sinval * 42841.3115 * v419.__sinval, v417 + v419.__cosval * v419.__cosval * -42697.6727 * v419.__cosval);
                  long double v421 = tan(v420 * 0.5 + 0.785398163);
                  long double v422 = log(v421);
                  v423.f64[0] = v539;
                  v423.f64[1] = v422;
                  float64x2_t v424 = vmlaq_f64(v579, v562, v423);
                  *(float64x2_t *)(v413 + 24) = v424;
                  *(unsigned char *)(v413 + 45) = 1;
                }
                BOOL v367 = v572.f64[0] < v424.f64[0];
              }
              if (v367)
              {
                ++v368;
                uint64_t v369 = v370;
              }
            }
            v12->i64[0] = *v368;
            long long v12 = (int8x16_t *)v368;
            uint64_t v366 = v369;
          }
          while (v369 <= (uint64_t)((unint64_t)(v364 - 2) >> 1));
          v425 = &a2[-1].u64[1];
          _ZF = v368 == &a2[-1].u64[1];
          a2 = (int8x16_t *)((char *)a2 - 8);
          if (_ZF)
          {
            unint64_t *v368 = v524;
            long long v12 = v526;
          }
          else
          {
            unint64_t *v368 = *v425;
            unint64_t *v425 = v524;
            long long v12 = v526;
            uint64_t v426 = (char *)v368 - (char *)v526 + 8;
            if (v426 >= 9)
            {
              unint64_t v427 = ((unint64_t)v426 >> 3) - 2;
              unint64_t v428 = v427 >> 1;
              uint64_t v429 = (unint64_t *)v526 + (v427 >> 1);
              if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v429, *v368))
              {
                unint64_t v430 = *v368;
                unint64_t *v368 = *v429;
                if (v427 >= 2)
                {
                  while (1)
                  {
                    unint64_t v434 = v428 - 1;
                    unint64_t v428 = (v428 - 1) >> 1;
                    uint64_t v435 = (unint64_t *)v526 + v428;
                    unint64_t v436 = *v435;
                    uint64_t v437 = (*(uint64_t (**)(unint64_t))(*(void *)*v435 + 56))(*v435);
                    uint64_t v439 = v437;
                    if (*(unsigned char *)(v437 + 45)) {
                      BOOL v440 = 1;
                    }
                    else {
                      BOOL v440 = *(unsigned char *)(v437 + 46) == 0;
                    }
                    if (v440)
                    {
                      v438.n128_u64[0] = *(void *)(v437 + 24);
                      __n128 v574 = v438;
                    }
                    else
                    {
                      long double v441 = *(double *)v437;
                      long double v442 = *(double *)(v437 + 8);
                      long double v443 = *(double *)(v437 + 16);
                      double v444 = sqrt(v441 * v441 + v442 * v442);
                      double v445 = atan2(v443, v444 * 0.996647189);
                      long double v573 = atan2(v442, v441);
                      __double2 v446 = __sincos_stret(v445);
                      long double v447 = atan2(v443 + v446.__sinval * v446.__sinval * 42841.3115 * v446.__sinval, v444 + v446.__cosval * v446.__cosval * -42697.6727 * v446.__cosval);
                      long double v448 = tan(v447 * 0.5 + 0.785398163);
                      long double v449 = log(v448);
                      v450.f64[0] = v573;
                      v450.f64[1] = v449;
                      __n128 v574 = (__n128)vmlaq_f64(v579, v562, v450);
                      *(__n128 *)(v439 + 24) = v574;
                      *(unsigned char *)(v439 + 45) = 1;
                    }
                    uint64_t v451 = (*(uint64_t (**)(unint64_t))(*(void *)v430 + 56))(v430);
                    uint64_t v453 = v451;
                    if (*(unsigned char *)(v451 + 45)) {
                      BOOL v454 = 1;
                    }
                    else {
                      BOOL v454 = *(unsigned char *)(v451 + 46) == 0;
                    }
                    if (v454)
                    {
                      v452.n128_u64[0] = *(void *)(v451 + 24);
                    }
                    else
                    {
                      long double v455 = *(double *)v451;
                      long double v456 = *(double *)(v451 + 8);
                      long double v457 = *(double *)(v451 + 16);
                      double v458 = sqrt(v455 * v455 + v456 * v456);
                      double v459 = atan2(v457, v458 * 0.996647189);
                      long double v540 = atan2(v456, v455);
                      __double2 v460 = __sincos_stret(v459);
                      long double v461 = atan2(v457 + v460.__sinval * v460.__sinval * 42841.3115 * v460.__sinval, v458 + v460.__cosval * v460.__cosval * -42697.6727 * v460.__cosval);
                      long double v462 = tan(v461 * 0.5 + 0.785398163);
                      long double v463 = log(v462);
                      v464.f64[0] = v540;
                      v464.f64[1] = v463;
                      __n128 v452 = (__n128)vmlaq_f64(v579, v562, v464);
                      *(__n128 *)(v453 + 24) = v452;
                      *(unsigned char *)(v453 + 45) = 1;
                    }
                    if (v574.n128_f64[0] == v452.n128_f64[0])
                    {
                      if (v436 >= v430) {
                        break;
                      }
                    }
                    else
                    {
                      unint64_t v431 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t, __n128, __n128))(*(void *)v436 + 56))(v436, v452, v574);
                      double v432 = *(double *)md::LabelPoint::mercatorPoint(v431);
                      uint64_t v433 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)v430 + 56))(v430);
                      if (v432 >= *(double *)md::LabelPoint::mercatorPoint(v433)) {
                        break;
                      }
                    }
                    *uint64_t v429 = *v435;
                    uint64_t v429 = (unint64_t *)v526 + v428;
                    if (v434 <= 1) {
                      goto LABEL_283;
                    }
                  }
                }
                uint64_t v435 = v429;
LABEL_283:
                *uint64_t v435 = v430;
              }
            }
          }
        }
        while (v364-- > 2);
      }
      return;
    }
    unint64_t v15 = v14 >> 1;
    if ((unint64_t)v13 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v12, (unint64_t *)v12 + (v14 >> 1), v523);
      uint64_t v16 = v15;
      float v17 = &v12->i64[v15];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(&v12->u64[1], (unint64_t *)v17 - 1, (unint64_t *)&a2[-1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)&v12[1], &v12->u64[v16 + 1], &a2[-2].u64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v17 - 1, (unint64_t *)v12 + (v14 >> 1), &v12->u64[v16 + 1]);
      uint64_t v18 = v12->i64[0];
      v12->i64[0] = *v17;
      *float v17 = v18;
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v12 + (v14 >> 1), (unint64_t *)v12, v523);
    }
    --a3;
    if ((a4 & 1) == 0
      && !md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v12[-1].u64[1], v12->i64[0]))
    {
      a1 = (unint64_t *)v12;
      unint64_t v169 = v12->i64[0];
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v169, *v523))
      {
        do
        {
          unint64_t v170 = a1[1];
          ++a1;
        }
        while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v169, v170));
      }
      else
      {
        uint64_t v171 = a1 + 1;
        do
        {
          a1 = v171;
          if (v171 >= (unint64_t *)v11) {
            break;
          }
          ++v171;
        }
        while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v169, *a1));
      }
      uint64_t v172 = (unint64_t *)v11;
      if (a1 < (unint64_t *)v11)
      {
        uint64_t v172 = (unint64_t *)v11;
        do
          unint64_t v173 = *--v172;
        while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v169, v173));
      }
      while (1)
      {
LABEL_154:
        if (a1 >= v172)
        {
          uint64_t v284 = a1 - 1;
          _CF = a1 - 1 >= (unint64_t *)v526;
          _ZF = a1 - 1 == (unint64_t *)v526;
          if (a1 - 1 != (unint64_t *)v526) {
            v526->i64[0] = *v284;
          }
          a4 = 0;
          *uint64_t v284 = v169;
          uint64_t v11 = a2;
          goto LABEL_3;
        }
        unint64_t v174 = *a1;
        *a1++ = *v172;
        unint64_t *v172 = v174;
        while (1)
        {
          unint64_t v175 = *a1;
          uint64_t v176 = (*(uint64_t (**)(unint64_t))(*(void *)v169 + 56))(v169);
          uint64_t v178 = v176;
          if (*(unsigned char *)(v176 + 45) || *(unsigned char *)(v176 + 46) == 0)
          {
            v177.f64[0] = *(float64_t *)(v176 + 24);
            float64x2_t v554 = v177;
          }
          else
          {
            long double v180 = *(double *)v176;
            long double v181 = *(double *)(v176 + 8);
            long double v182 = *(double *)(v176 + 16);
            double v183 = sqrt(v180 * v180 + v181 * v181);
            double v184 = atan2(v182, v183 * 0.996647189);
            long double v553 = atan2(v181, v180);
            __double2 v185 = __sincos_stret(v184);
            long double v186 = atan2(v182 + v185.__sinval * v185.__sinval * 42841.3115 * v185.__sinval, v183 + v185.__cosval * v185.__cosval * -42697.6727 * v185.__cosval);
            long double v187 = tan(v186 * 0.5 + 0.785398163);
            long double v188 = log(v187);
            v189.f64[0] = v553;
            v189.f64[1] = v188;
            float64x2_t v554 = vmlaq_f64(v579, v564, v189);
            *(float64x2_t *)(v178 + 24) = v554;
            *(unsigned char *)(v178 + 45) = 1;
          }
          uint64_t v190 = (*(uint64_t (**)(unint64_t))(*(void *)v175 + 56))(v175);
          uint64_t v192 = v190;
          if (*(unsigned char *)(v190 + 45) || *(unsigned char *)(v190 + 46) == 0)
          {
            v191.n128_u64[0] = *(void *)(v190 + 24);
          }
          else
          {
            long double v194 = *(double *)v190;
            long double v195 = *(double *)(v190 + 8);
            long double v196 = *(double *)(v190 + 16);
            double v197 = sqrt(v194 * v194 + v195 * v195);
            double v198 = atan2(v196, v197 * 0.996647189);
            long double v532 = atan2(v195, v194);
            __double2 v199 = __sincos_stret(v198);
            long double v200 = atan2(v196 + v199.__sinval * v199.__sinval * 42841.3115 * v199.__sinval, v197 + v199.__cosval * v199.__cosval * -42697.6727 * v199.__cosval);
            long double v201 = tan(v200 * 0.5 + 0.785398163);
            long double v202 = log(v201);
            v203.f64[0] = v532;
            v203.f64[1] = v202;
            __n128 v191 = (__n128)vmlaq_f64(v579, v564, v203);
            *(__n128 *)(v192 + 24) = v191;
            *(unsigned char *)(v192 + 45) = 1;
          }
          __n128 v204 = (__n128)v554;
          if (v554.f64[0] != v191.n128_f64[0]) {
            break;
          }
          if (v169 < v175) {
            goto LABEL_132;
          }
LABEL_107:
          ++a1;
        }
        uint64_t v205 = (*(uint64_t (**)(unint64_t))(*(void *)v169 + 56))(v169);
        uint64_t v207 = v205;
        if (*(unsigned char *)(v205 + 45) || !*(unsigned char *)(v205 + 46))
        {
          v206.f64[0] = *(float64_t *)(v205 + 24);
          float64x2_t v556 = v206;
        }
        else
        {
          long double v208 = *(double *)v205;
          long double v209 = *(double *)(v205 + 8);
          long double v210 = *(double *)(v205 + 16);
          double v211 = sqrt(v208 * v208 + v209 * v209);
          double v212 = atan2(v210, v211 * 0.996647189);
          long double v555 = atan2(v209, v208);
          __double2 v213 = __sincos_stret(v212);
          long double v214 = atan2(v210 + v213.__sinval * v213.__sinval * 42841.3115 * v213.__sinval, v211 + v213.__cosval * v213.__cosval * -42697.6727 * v213.__cosval);
          long double v215 = tan(v214 * 0.5 + 0.785398163);
          long double v216 = log(v215);
          v217.f64[0] = v555;
          v217.f64[1] = v216;
          float64x2_t v556 = vmlaq_f64(v579, v564, v217);
          *(float64x2_t *)(v207 + 24) = v556;
          *(unsigned char *)(v207 + 45) = 1;
        }
        uint64_t v218 = (*(uint64_t (**)(unint64_t))(*(void *)v175 + 56))(v175);
        uint64_t v219 = v218;
        if (*(unsigned char *)(v218 + 45) || !*(unsigned char *)(v218 + 46))
        {
          v191.n128_u64[0] = *(void *)(v218 + 24);
        }
        else
        {
          long double v220 = *(double *)v218;
          long double v221 = *(double *)(v218 + 8);
          long double v222 = *(double *)(v218 + 16);
          double v223 = sqrt(v220 * v220 + v221 * v221);
          double v224 = atan2(v222, v223 * 0.996647189);
          long double v533 = atan2(v221, v220);
          __double2 v225 = __sincos_stret(v224);
          long double v226 = atan2(v222 + v225.__sinval * v225.__sinval * 42841.3115 * v225.__sinval, v223 + v225.__cosval * v225.__cosval * -42697.6727 * v225.__cosval);
          long double v227 = tan(v226 * 0.5 + 0.785398163);
          long double v228 = log(v227);
          v229.f64[0] = v533;
          v229.f64[1] = v228;
          __n128 v191 = (__n128)vmlaq_f64(v579, v564, v229);
          *(__n128 *)(v219 + 24) = v191;
          *(unsigned char *)(v219 + 45) = 1;
        }
        __n128 v204 = (__n128)v556;
        if (v556.f64[0] >= v191.n128_f64[0]) {
          goto LABEL_107;
        }
        do
        {
LABEL_132:
          while (1)
          {
            unint64_t v231 = *--v172;
            unint64_t v230 = v231;
            uint64_t v232 = (*(uint64_t (**)(unint64_t, __n128, __n128))(*(void *)v169 + 56))(v169, v191, v204);
            uint64_t v234 = v232;
            if (*(unsigned char *)(v232 + 45) || *(unsigned char *)(v232 + 46) == 0)
            {
              v233.f64[0] = *(float64_t *)(v232 + 24);
              float64x2_t v558 = v233;
            }
            else
            {
              long double v236 = *(double *)v232;
              long double v237 = *(double *)(v232 + 8);
              long double v238 = *(double *)(v232 + 16);
              double v239 = sqrt(v236 * v236 + v237 * v237);
              double v240 = atan2(v238, v239 * 0.996647189);
              long double v557 = atan2(v237, v236);
              __double2 v241 = __sincos_stret(v240);
              long double v242 = atan2(v238 + v241.__sinval * v241.__sinval * 42841.3115 * v241.__sinval, v239 + v241.__cosval * v241.__cosval * -42697.6727 * v241.__cosval);
              long double v243 = tan(v242 * 0.5 + 0.785398163);
              long double v244 = log(v243);
              v245.f64[0] = v557;
              v245.f64[1] = v244;
              float64x2_t v558 = vmlaq_f64(v579, v564, v245);
              *(float64x2_t *)(v234 + 24) = v558;
              *(unsigned char *)(v234 + 45) = 1;
            }
            uint64_t v246 = (*(uint64_t (**)(unint64_t))(*(void *)v230 + 56))(v230);
            uint64_t v247 = v246;
            if (*(unsigned char *)(v246 + 45) || *(unsigned char *)(v246 + 46) == 0)
            {
              v191.n128_u64[0] = *(void *)(v246 + 24);
            }
            else
            {
              long double v249 = *(double *)v246;
              long double v250 = *(double *)(v246 + 8);
              long double v251 = *(double *)(v246 + 16);
              double v252 = sqrt(v249 * v249 + v250 * v250);
              double v253 = atan2(v251, v252 * 0.996647189);
              long double v534 = atan2(v250, v249);
              __double2 v254 = __sincos_stret(v253);
              long double v255 = atan2(v251 + v254.__sinval * v254.__sinval * 42841.3115 * v254.__sinval, v252 + v254.__cosval * v254.__cosval * -42697.6727 * v254.__cosval);
              long double v256 = tan(v255 * 0.5 + 0.785398163);
              long double v257 = log(v256);
              v258.f64[0] = v534;
              v258.f64[1] = v257;
              __n128 v191 = (__n128)vmlaq_f64(v579, v564, v258);
              *(__n128 *)(v247 + 24) = v191;
              *(unsigned char *)(v247 + 45) = 1;
            }
            __n128 v204 = (__n128)v558;
            if (v558.f64[0] != v191.n128_f64[0]) {
              break;
            }
            if (v169 >= v230) {
              goto LABEL_154;
            }
          }
          uint64_t v259 = (*(uint64_t (**)(unint64_t))(*(void *)v169 + 56))(v169);
          uint64_t v261 = v259;
          if (*(unsigned char *)(v259 + 45) || !*(unsigned char *)(v259 + 46))
          {
            v260.f64[0] = *(float64_t *)(v259 + 24);
            float64x2_t v560 = v260;
          }
          else
          {
            long double v262 = *(double *)v259;
            long double v263 = *(double *)(v259 + 8);
            long double v264 = *(double *)(v259 + 16);
            double v265 = sqrt(v262 * v262 + v263 * v263);
            double v266 = atan2(v264, v265 * 0.996647189);
            long double v559 = atan2(v263, v262);
            __double2 v267 = __sincos_stret(v266);
            long double v268 = atan2(v264 + v267.__sinval * v267.__sinval * 42841.3115 * v267.__sinval, v265 + v267.__cosval * v267.__cosval * -42697.6727 * v267.__cosval);
            long double v269 = tan(v268 * 0.5 + 0.785398163);
            long double v270 = log(v269);
            v271.f64[0] = v559;
            v271.f64[1] = v270;
            float64x2_t v560 = vmlaq_f64(v579, v564, v271);
            *(float64x2_t *)(v261 + 24) = v560;
            *(unsigned char *)(v261 + 45) = 1;
          }
          uint64_t v272 = (*(uint64_t (**)(unint64_t))(*(void *)v230 + 56))(v230);
          uint64_t v273 = v272;
          if (*(unsigned char *)(v272 + 45) || !*(unsigned char *)(v272 + 46))
          {
            v191.n128_u64[0] = *(void *)(v272 + 24);
          }
          else
          {
            long double v274 = *(double *)v272;
            long double v275 = *(double *)(v272 + 8);
            long double v276 = *(double *)(v272 + 16);
            double v277 = sqrt(v274 * v274 + v275 * v275);
            double v278 = atan2(v276, v277 * 0.996647189);
            long double v535 = atan2(v275, v274);
            __double2 v279 = __sincos_stret(v278);
            long double v280 = atan2(v276 + v279.__sinval * v279.__sinval * 42841.3115 * v279.__sinval, v277 + v279.__cosval * v279.__cosval * -42697.6727 * v279.__cosval);
            long double v281 = tan(v280 * 0.5 + 0.785398163);
            long double v282 = log(v281);
            v283.f64[0] = v535;
            v283.f64[1] = v282;
            __n128 v191 = (__n128)vmlaq_f64(v579, v564, v283);
            *(__n128 *)(v273 + 24) = v191;
            *(unsigned char *)(v273 + 45) = 1;
          }
          __n128 v204 = (__n128)v560;
        }
        while (v560.f64[0] < v191.n128_f64[0]);
      }
    }
    uint64_t v19 = &v12->i64[1];
    unint64_t v20 = v12->i64[0];
    while (1)
    {
      unint64_t v24 = *v19;
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)*v19 + 56))(*v19);
      uint64_t v27 = v25;
      if (*(unsigned char *)(v25 + 45) || *(unsigned char *)(v25 + 46) == 0)
      {
        v26.n128_u64[0] = *(void *)(v25 + 24);
        __n128 v544 = v26;
      }
      else
      {
        long double v29 = *(double *)v25;
        long double v30 = *(double *)(v25 + 8);
        long double v31 = *(double *)(v25 + 16);
        double v32 = sqrt(v29 * v29 + v30 * v30);
        double v33 = atan2(v31, v32 * 0.996647189);
        long double v543 = atan2(v30, v29);
        __double2 v34 = __sincos_stret(v33);
        long double v35 = atan2(v31 + v34.__sinval * v34.__sinval * 42841.3115 * v34.__sinval, v32 + v34.__cosval * v34.__cosval * -42697.6727 * v34.__cosval);
        long double v36 = tan(v35 * 0.5 + 0.785398163);
        long double v37 = log(v36);
        v38.f64[0] = v543;
        v38.f64[1] = v37;
        __n128 v544 = (__n128)vmlaq_f64(v579, v564, v38);
        *(__n128 *)(v27 + 24) = v544;
        *(unsigned char *)(v27 + 45) = 1;
      }
      uint64_t v39 = (*(uint64_t (**)(unint64_t))(*(void *)v20 + 56))(v20);
      uint64_t v41 = v39;
      if (*(unsigned char *)(v39 + 45) || *(unsigned char *)(v39 + 46) == 0)
      {
        v40.n128_u64[0] = *(void *)(v39 + 24);
      }
      else
      {
        long double v43 = *(double *)v39;
        long double v44 = *(double *)(v39 + 8);
        long double v45 = *(double *)(v39 + 16);
        double v46 = sqrt(v43 * v43 + v44 * v44);
        double v47 = atan2(v45, v46 * 0.996647189);
        long double v527 = atan2(v44, v43);
        __double2 v48 = __sincos_stret(v47);
        long double v49 = atan2(v45 + v48.__sinval * v48.__sinval * 42841.3115 * v48.__sinval, v46 + v48.__cosval * v48.__cosval * -42697.6727 * v48.__cosval);
        long double v50 = tan(v49 * 0.5 + 0.785398163);
        long double v51 = log(v50);
        v52.f64[0] = v527;
        v52.f64[1] = v51;
        __n128 v40 = (__n128)vmlaq_f64(v579, v564, v52);
        *(__n128 *)(v41 + 24) = v40;
        *(unsigned char *)(v41 + 45) = 1;
      }
      if (v544.n128_f64[0] == v40.n128_f64[0]) {
        break;
      }
      uint64_t v21 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t, __n128, __n128))(*(void *)v24 + 56))(v24, v40, v544);
      double v22 = *(double *)md::LabelPoint::mercatorPoint(v21);
      uint64_t v23 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)v20 + 56))(v20);
      if (v22 >= *(double *)md::LabelPoint::mercatorPoint(v23)) {
        goto LABEL_29;
      }
LABEL_14:
      ++v19;
    }
    if (v24 < v20) {
      goto LABEL_14;
    }
LABEL_29:
    int v53 = (int8x16_t *)(v19 - 1);
    if (v19 - 1 == (uint64_t *)v526)
    {
      uint64_t v11 = a2;
      do
      {
        if (v19 >= (uint64_t *)v11) {
          break;
        }
        unint64_t v55 = v11[-1].u64[1];
        uint64_t v11 = (int8x16_t *)((char *)v11 - 8);
      }
      while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v55, v20));
    }
    else
    {
      do
      {
        unint64_t v54 = v11[-1].u64[1];
        uint64_t v11 = (int8x16_t *)((char *)v11 - 8);
      }
      while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v54, v20));
    }
    if (v19 < (uint64_t *)v11)
    {
      double v56 = (unint64_t *)v19;
      double v57 = (uint64_t *)v11;
      do
      {
        unint64_t v58 = *v56;
        *v56++ = *v57;
        *double v57 = v58;
        while (1)
        {
          unint64_t v59 = *v56;
          uint64_t v60 = (*(uint64_t (**)(unint64_t))(*(void *)*v56 + 56))(*v56);
          uint64_t v62 = v60;
          if (*(unsigned char *)(v60 + 45) || *(unsigned char *)(v60 + 46) == 0)
          {
            v61.f64[0] = *(float64_t *)(v60 + 24);
            float64x2_t v546 = v61;
          }
          else
          {
            long double v64 = *(double *)v60;
            long double v65 = *(double *)(v60 + 8);
            long double v66 = *(double *)(v60 + 16);
            double v67 = sqrt(v64 * v64 + v65 * v65);
            double v68 = atan2(v66, v67 * 0.996647189);
            long double v545 = atan2(v65, v64);
            __double2 v69 = __sincos_stret(v68);
            long double v70 = atan2(v66 + v69.__sinval * v69.__sinval * 42841.3115 * v69.__sinval, v67 + v69.__cosval * v69.__cosval * -42697.6727 * v69.__cosval);
            long double v71 = tan(v70 * 0.5 + 0.785398163);
            long double v72 = log(v71);
            v73.f64[0] = v545;
            v73.f64[1] = v72;
            float64x2_t v546 = vmlaq_f64(v579, v564, v73);
            *(float64x2_t *)(v62 + 24) = v546;
            *(unsigned char *)(v62 + 45) = 1;
          }
          uint64_t v74 = (*(uint64_t (**)(unint64_t))(*(void *)v20 + 56))(v20);
          uint64_t v76 = v74;
          if (*(unsigned char *)(v74 + 45) || *(unsigned char *)(v74 + 46) == 0)
          {
            v75.n128_u64[0] = *(void *)(v74 + 24);
          }
          else
          {
            long double v78 = *(double *)v74;
            long double v79 = *(double *)(v74 + 8);
            long double v80 = *(double *)(v74 + 16);
            double v81 = sqrt(v78 * v78 + v79 * v79);
            double v82 = atan2(v80, v81 * 0.996647189);
            long double v528 = atan2(v79, v78);
            __double2 v83 = __sincos_stret(v82);
            long double v84 = atan2(v80 + v83.__sinval * v83.__sinval * 42841.3115 * v83.__sinval, v81 + v83.__cosval * v83.__cosval * -42697.6727 * v83.__cosval);
            long double v85 = tan(v84 * 0.5 + 0.785398163);
            long double v86 = log(v85);
            v87.f64[0] = v528;
            v87.f64[1] = v86;
            __n128 v75 = (__n128)vmlaq_f64(v579, v564, v87);
            *(__n128 *)(v76 + 24) = v75;
            *(unsigned char *)(v76 + 45) = 1;
          }
          __n128 v88 = (__n128)v546;
          if (v546.f64[0] != v75.n128_f64[0]) {
            break;
          }
          if (v59 >= v20) {
            goto LABEL_63;
          }
LABEL_40:
          ++v56;
        }
        uint64_t v89 = (*(uint64_t (**)(unint64_t))(*(void *)v59 + 56))(v59);
        uint64_t v91 = v89;
        if (*(unsigned char *)(v89 + 45) || !*(unsigned char *)(v89 + 46))
        {
          v90.f64[0] = *(float64_t *)(v89 + 24);
          float64x2_t v548 = v90;
        }
        else
        {
          long double v92 = *(double *)v89;
          long double v93 = *(double *)(v89 + 8);
          long double v94 = *(double *)(v89 + 16);
          double v95 = sqrt(v92 * v92 + v93 * v93);
          double v96 = atan2(v94, v95 * 0.996647189);
          long double v547 = atan2(v93, v92);
          __double2 v97 = __sincos_stret(v96);
          long double v98 = atan2(v94 + v97.__sinval * v97.__sinval * 42841.3115 * v97.__sinval, v95 + v97.__cosval * v97.__cosval * -42697.6727 * v97.__cosval);
          long double v99 = tan(v98 * 0.5 + 0.785398163);
          long double v100 = log(v99);
          v101.f64[0] = v547;
          v101.f64[1] = v100;
          float64x2_t v548 = vmlaq_f64(v579, v564, v101);
          *(float64x2_t *)(v91 + 24) = v548;
          *(unsigned char *)(v91 + 45) = 1;
        }
        uint64_t v102 = (*(uint64_t (**)(unint64_t))(*(void *)v20 + 56))(v20);
        uint64_t v103 = v102;
        if (*(unsigned char *)(v102 + 45) || !*(unsigned char *)(v102 + 46))
        {
          v75.n128_u64[0] = *(void *)(v102 + 24);
        }
        else
        {
          long double v104 = *(double *)v102;
          long double v105 = *(double *)(v102 + 8);
          long double v106 = *(double *)(v102 + 16);
          double v107 = sqrt(v104 * v104 + v105 * v105);
          double v108 = atan2(v106, v107 * 0.996647189);
          long double v529 = atan2(v105, v104);
          __double2 v109 = __sincos_stret(v108);
          long double v110 = atan2(v106 + v109.__sinval * v109.__sinval * 42841.3115 * v109.__sinval, v107 + v109.__cosval * v109.__cosval * -42697.6727 * v109.__cosval);
          long double v111 = tan(v110 * 0.5 + 0.785398163);
          long double v112 = log(v111);
          v113.f64[0] = v529;
          v113.f64[1] = v112;
          __n128 v75 = (__n128)vmlaq_f64(v579, v564, v113);
          *(__n128 *)(v103 + 24) = v75;
          *(unsigned char *)(v103 + 45) = 1;
        }
        __n128 v88 = (__n128)v548;
        if (v548.f64[0] < v75.n128_f64[0]) {
          goto LABEL_40;
        }
LABEL_63:
        int v53 = (int8x16_t *)(v56 - 1);
        do
        {
          while (1)
          {
            unint64_t v115 = *--v57;
            unint64_t v114 = v115;
            uint64_t v116 = (*(uint64_t (**)(unint64_t, __n128, __n128))(*(void *)v115 + 56))(v115, v75, v88);
            uint64_t v118 = v116;
            if (*(unsigned char *)(v116 + 45) || *(unsigned char *)(v116 + 46) == 0)
            {
              v117.f64[0] = *(float64_t *)(v116 + 24);
              float64x2_t v550 = v117;
            }
            else
            {
              long double v120 = *(double *)v116;
              long double v121 = *(double *)(v116 + 8);
              long double v122 = *(double *)(v116 + 16);
              double v123 = sqrt(v120 * v120 + v121 * v121);
              double v124 = atan2(v122, v123 * 0.996647189);
              long double v549 = atan2(v121, v120);
              __double2 v125 = __sincos_stret(v124);
              long double v126 = atan2(v122 + v125.__sinval * v125.__sinval * 42841.3115 * v125.__sinval, v123 + v125.__cosval * v125.__cosval * -42697.6727 * v125.__cosval);
              long double v127 = tan(v126 * 0.5 + 0.785398163);
              long double v128 = log(v127);
              v129.f64[0] = v549;
              v129.f64[1] = v128;
              float64x2_t v550 = vmlaq_f64(v579, v564, v129);
              *(float64x2_t *)(v118 + 24) = v550;
              *(unsigned char *)(v118 + 45) = 1;
            }
            uint64_t v130 = (*(uint64_t (**)(unint64_t))(*(void *)v20 + 56))(v20);
            uint64_t v131 = v130;
            if (*(unsigned char *)(v130 + 45) || *(unsigned char *)(v130 + 46) == 0)
            {
              v75.n128_u64[0] = *(void *)(v130 + 24);
            }
            else
            {
              long double v133 = *(double *)v130;
              long double v134 = *(double *)(v130 + 8);
              long double v135 = *(double *)(v130 + 16);
              double v136 = sqrt(v133 * v133 + v134 * v134);
              double v137 = atan2(v135, v136 * 0.996647189);
              long double v530 = atan2(v134, v133);
              __double2 v138 = __sincos_stret(v137);
              long double v139 = atan2(v135 + v138.__sinval * v138.__sinval * 42841.3115 * v138.__sinval, v136 + v138.__cosval * v138.__cosval * -42697.6727 * v138.__cosval);
              long double v140 = tan(v139 * 0.5 + 0.785398163);
              long double v141 = log(v140);
              v142.f64[0] = v530;
              v142.f64[1] = v141;
              __n128 v75 = (__n128)vmlaq_f64(v579, v564, v142);
              *(__n128 *)(v131 + 24) = v75;
              *(unsigned char *)(v131 + 45) = 1;
            }
            __n128 v88 = (__n128)v550;
            if (v550.f64[0] != v75.n128_f64[0]) {
              break;
            }
            if (v114 < v20) {
              goto LABEL_37;
            }
          }
          uint64_t v143 = (*(uint64_t (**)(unint64_t))(*(void *)v114 + 56))(v114);
          uint64_t v145 = v143;
          if (*(unsigned char *)(v143 + 45) || !*(unsigned char *)(v143 + 46))
          {
            v144.f64[0] = *(float64_t *)(v143 + 24);
            float64x2_t v552 = v144;
          }
          else
          {
            long double v146 = *(double *)v143;
            long double v147 = *(double *)(v143 + 8);
            long double v148 = *(double *)(v143 + 16);
            double v149 = sqrt(v146 * v146 + v147 * v147);
            double v150 = atan2(v148, v149 * 0.996647189);
            long double v551 = atan2(v147, v146);
            __double2 v151 = __sincos_stret(v150);
            long double v152 = atan2(v148 + v151.__sinval * v151.__sinval * 42841.3115 * v151.__sinval, v149 + v151.__cosval * v151.__cosval * -42697.6727 * v151.__cosval);
            long double v153 = tan(v152 * 0.5 + 0.785398163);
            long double v154 = log(v153);
            v155.f64[0] = v551;
            v155.f64[1] = v154;
            float64x2_t v552 = vmlaq_f64(v579, v564, v155);
            *(float64x2_t *)(v145 + 24) = v552;
            *(unsigned char *)(v145 + 45) = 1;
          }
          uint64_t v156 = (*(uint64_t (**)(unint64_t))(*(void *)v20 + 56))(v20);
          uint64_t v157 = v156;
          if (*(unsigned char *)(v156 + 45) || !*(unsigned char *)(v156 + 46))
          {
            v75.n128_u64[0] = *(void *)(v156 + 24);
          }
          else
          {
            long double v158 = *(double *)v156;
            long double v159 = *(double *)(v156 + 8);
            long double v160 = *(double *)(v156 + 16);
            double v161 = sqrt(v158 * v158 + v159 * v159);
            double v162 = atan2(v160, v161 * 0.996647189);
            long double v531 = atan2(v159, v158);
            __double2 v163 = __sincos_stret(v162);
            long double v164 = atan2(v160 + v163.__sinval * v163.__sinval * 42841.3115 * v163.__sinval, v161 + v163.__cosval * v163.__cosval * -42697.6727 * v163.__cosval);
            long double v165 = tan(v164 * 0.5 + 0.785398163);
            long double v166 = log(v165);
            v167.f64[0] = v531;
            v167.f64[1] = v166;
            __n128 v75 = (__n128)vmlaq_f64(v579, v564, v167);
            *(__n128 *)(v157 + 24) = v75;
            *(unsigned char *)(v157 + 45) = 1;
          }
          __n128 v88 = (__n128)v552;
        }
        while (v552.f64[0] >= v75.n128_f64[0]);
LABEL_37:
        ;
      }
      while (v56 < (unint64_t *)v57);
    }
    if (v53 != v526) {
      v526->i64[0] = v53->i64[0];
    }
    v53->i64[0] = v20;
    _CF = v19 >= (uint64_t *)v11;
    uint64_t v11 = a2;
    if (_CF)
    {
      BOOL v168 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v526, v53);
      a1 = &v53->u64[1];
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((int8x16_t *)&v53->u64[1], a2))
      {
        a2 = v53;
        a1 = (unint64_t *)v526;
        if (v168) {
          return;
        }
        goto LABEL_2;
      }
      if (!v168) {
        goto LABEL_94;
      }
    }
    else
    {
LABEL_94:
      std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(v526, v53, a3, a4 & 1);
      a4 = 0;
      a1 = &v53->u64[1];
    }
  }
  uint64_t v291 = &v12->i64[1];
  BOOL v293 = v12 == v11 || v291 == (uint64_t *)v11;
  if ((a4 & 1) == 0)
  {
    if (v293) {
      return;
    }
    float64x2_t v563 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    while (1)
    {
      unint64_t v465 = (int8x16_t *)v291;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v12->u64[1], v12->i64[0]))
      {
        unint64_t v466 = v465->i64[0];
        do
        {
          while (1)
          {
            int8x8_t v467 = (uint64_t *)v12;
            v12->i64[1] = v12->i64[0];
            uint64_t v469 = v12[-1].i64[1];
            long long v12 = (int8x16_t *)((char *)v12 - 8);
            unint64_t v468 = v469;
            uint64_t v470 = (*(uint64_t (**)(unint64_t))(*(void *)v466 + 56))(v466);
            uint64_t v471 = v470;
            if (*(unsigned char *)(v470 + 45) || *(unsigned char *)(v470 + 46) == 0)
            {
              v576.f64[0] = *(float64_t *)(v470 + 24);
            }
            else
            {
              long double v473 = *(double *)v470;
              long double v474 = *(double *)(v470 + 8);
              long double v475 = *(double *)(v470 + 16);
              double v476 = sqrt(v473 * v473 + v474 * v474);
              double v477 = atan2(v475, v476 * 0.996647189);
              long double v575 = atan2(v474, v473);
              __double2 v478 = __sincos_stret(v477);
              long double v479 = atan2(v475 + v478.__sinval * v478.__sinval * 42841.3115 * v478.__sinval, v476 + v478.__cosval * v478.__cosval * -42697.6727 * v478.__cosval);
              long double v480 = tan(v479 * 0.5 + 0.785398163);
              long double v481 = log(v480);
              v482.f64[0] = v575;
              v482.f64[1] = v481;
              float64x2_t v576 = vmlaq_f64(v579, v563, v482);
              *(float64x2_t *)(v471 + 24) = v576;
              *(unsigned char *)(v471 + 45) = 1;
            }
            uint64_t v483 = (*(uint64_t (**)(unint64_t))(*(void *)v468 + 56))(v468);
            uint64_t v484 = v483;
            if (*(unsigned char *)(v483 + 45) || *(unsigned char *)(v483 + 46) == 0)
            {
              v496.f64[0] = *(float64_t *)(v483 + 24);
            }
            else
            {
              long double v486 = *(double *)v483;
              long double v487 = *(double *)(v483 + 8);
              long double v488 = *(double *)(v483 + 16);
              double v489 = sqrt(v486 * v486 + v487 * v487);
              double v490 = atan2(v488, v489 * 0.996647189);
              long double v541 = atan2(v487, v486);
              __double2 v491 = __sincos_stret(v490);
              long double v492 = atan2(v488 + v491.__sinval * v491.__sinval * 42841.3115 * v491.__sinval, v489 + v491.__cosval * v491.__cosval * -42697.6727 * v491.__cosval);
              long double v493 = tan(v492 * 0.5 + 0.785398163);
              long double v494 = log(v493);
              v495.f64[0] = v541;
              v495.f64[1] = v494;
              float64x2_t v496 = vmlaq_f64(v579, v563, v495);
              *(float64x2_t *)(v484 + 24) = v496;
              *(unsigned char *)(v484 + 45) = 1;
            }
            if (v576.f64[0] != v496.f64[0]) {
              break;
            }
            if (v466 >= v468) {
              goto LABEL_287;
            }
          }
          uint64_t v497 = (*(uint64_t (**)(unint64_t))(*(void *)v466 + 56))(v466);
          uint64_t v498 = v497;
          if (*(unsigned char *)(v497 + 45) || !*(unsigned char *)(v497 + 46))
          {
            v578.f64[0] = *(float64_t *)(v497 + 24);
          }
          else
          {
            long double v499 = *(double *)v497;
            long double v500 = *(double *)(v497 + 8);
            long double v501 = *(double *)(v497 + 16);
            double v502 = sqrt(v499 * v499 + v500 * v500);
            double v503 = atan2(v501, v502 * 0.996647189);
            long double v577 = atan2(v500, v499);
            __double2 v504 = __sincos_stret(v503);
            long double v505 = atan2(v501 + v504.__sinval * v504.__sinval * 42841.3115 * v504.__sinval, v502 + v504.__cosval * v504.__cosval * -42697.6727 * v504.__cosval);
            long double v506 = tan(v505 * 0.5 + 0.785398163);
            long double v507 = log(v506);
            v508.f64[0] = v577;
            v508.f64[1] = v507;
            float64x2_t v578 = vmlaq_f64(v579, v563, v508);
            *(float64x2_t *)(v498 + 24) = v578;
            *(unsigned char *)(v498 + 45) = 1;
          }
          uint64_t v509 = (*(uint64_t (**)(unint64_t))(*(void *)v468 + 56))(v468);
          uint64_t v510 = v509;
          if (*(unsigned char *)(v509 + 45) || !*(unsigned char *)(v509 + 46))
          {
            v521.f64[0] = *(float64_t *)(v509 + 24);
          }
          else
          {
            long double v511 = *(double *)v509;
            long double v512 = *(double *)(v509 + 8);
            long double v513 = *(double *)(v509 + 16);
            double v514 = sqrt(v511 * v511 + v512 * v512);
            double v515 = atan2(v513, v514 * 0.996647189);
            long double v542 = atan2(v512, v511);
            __double2 v516 = __sincos_stret(v515);
            long double v517 = atan2(v513 + v516.__sinval * v516.__sinval * 42841.3115 * v516.__sinval, v514 + v516.__cosval * v516.__cosval * -42697.6727 * v516.__cosval);
            long double v518 = tan(v517 * 0.5 + 0.785398163);
            long double v519 = log(v518);
            v520.f64[0] = v542;
            v520.f64[1] = v519;
            float64x2_t v521 = vmlaq_f64(v579, v563, v520);
            *(float64x2_t *)(v510 + 24) = v521;
            *(unsigned char *)(v510 + 45) = 1;
          }
        }
        while (v578.f64[0] < v521.f64[0]);
LABEL_287:
        uint64_t *v467 = v466;
      }
      uint64_t v291 = &v465->i64[1];
      long long v12 = v465;
      if (&v465->u64[1] == (unint64_t *)a2) {
        return;
      }
    }
  }
  if (v293) {
    return;
  }
  uint64_t v294 = 0;
  float64x2_t v561 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  uint64_t v295 = (unint64_t *)v12;
  while (2)
  {
    uint64_t v297 = v291;
    if (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v295[1], *v295))goto LABEL_184; {
    unint64_t v298 = v295[1];
    }
    v295[1] = *v295;
    i64 = v12->i64;
    if (v295 == (unint64_t *)v12) {
      goto LABEL_183;
    }
    uint64_t v299 = v294;
    while (2)
    {
      uint64_t v300 = (uint64_t *)((char *)v12->i64 + v299);
      unint64_t v301 = *(v300 - 1);
      uint64_t v302 = (*(uint64_t (**)(unint64_t))(*(void *)v298 + 56))(v298);
      uint64_t v303 = v302;
      if (*(unsigned char *)(v302 + 45)) {
        BOOL v304 = 1;
      }
      else {
        BOOL v304 = *(unsigned char *)(v302 + 46) == 0;
      }
      if (v304)
      {
        v566.f64[0] = *(float64_t *)(v302 + 24);
      }
      else
      {
        long double v305 = *(double *)v302;
        long double v306 = *(double *)(v302 + 8);
        long double v307 = *(double *)(v302 + 16);
        double v308 = sqrt(v305 * v305 + v306 * v306);
        double v309 = atan2(v307, v308 * 0.996647189);
        long double v565 = atan2(v306, v305);
        __double2 v310 = __sincos_stret(v309);
        long double v311 = atan2(v307 + v310.__sinval * v310.__sinval * 42841.3115 * v310.__sinval, v308 + v310.__cosval * v310.__cosval * -42697.6727 * v310.__cosval);
        long double v312 = tan(v311 * 0.5 + 0.785398163);
        long double v313 = log(v312);
        v314.f64[0] = v565;
        v314.f64[1] = v313;
        float64x2_t v566 = vmlaq_f64(v579, v561, v314);
        *(float64x2_t *)(v303 + 24) = v566;
        *(unsigned char *)(v303 + 45) = 1;
      }
      uint64_t v315 = (*(uint64_t (**)(unint64_t))(*(void *)v301 + 56))(v301);
      uint64_t v316 = v315;
      if (*(unsigned char *)(v315 + 45)) {
        BOOL v317 = 1;
      }
      else {
        BOOL v317 = *(unsigned char *)(v315 + 46) == 0;
      }
      if (v317)
      {
        v328.f64[0] = *(float64_t *)(v315 + 24);
      }
      else
      {
        long double v318 = *(double *)v315;
        long double v319 = *(double *)(v315 + 8);
        long double v320 = *(double *)(v315 + 16);
        double v321 = sqrt(v318 * v318 + v319 * v319);
        double v322 = atan2(v320, v321 * 0.996647189);
        long double v536 = atan2(v319, v318);
        __double2 v323 = __sincos_stret(v322);
        long double v324 = atan2(v320 + v323.__sinval * v323.__sinval * 42841.3115 * v323.__sinval, v321 + v323.__cosval * v323.__cosval * -42697.6727 * v323.__cosval);
        long double v325 = tan(v324 * 0.5 + 0.785398163);
        long double v326 = log(v325);
        v327.f64[0] = v536;
        v327.f64[1] = v326;
        float64x2_t v328 = vmlaq_f64(v579, v561, v327);
        *(float64x2_t *)(v316 + 24) = v328;
        *(unsigned char *)(v316 + 45) = 1;
      }
      if (v566.f64[0] != v328.f64[0])
      {
        uint64_t v329 = (*(uint64_t (**)(unint64_t))(*(void *)v298 + 56))(v298);
        uint64_t v330 = v329;
        if (*(unsigned char *)(v329 + 45) || !*(unsigned char *)(v329 + 46))
        {
          v568.f64[0] = *(float64_t *)(v329 + 24);
        }
        else
        {
          long double v331 = *(double *)v329;
          long double v332 = *(double *)(v329 + 8);
          long double v333 = *(double *)(v329 + 16);
          double v334 = sqrt(v331 * v331 + v332 * v332);
          double v335 = atan2(v333, v334 * 0.996647189);
          long double v567 = atan2(v332, v331);
          __double2 v336 = __sincos_stret(v335);
          long double v337 = atan2(v333 + v336.__sinval * v336.__sinval * 42841.3115 * v336.__sinval, v334 + v336.__cosval * v336.__cosval * -42697.6727 * v336.__cosval);
          long double v338 = tan(v337 * 0.5 + 0.785398163);
          long double v339 = log(v338);
          v340.f64[0] = v567;
          v340.f64[1] = v339;
          float64x2_t v568 = vmlaq_f64(v579, v561, v340);
          *(float64x2_t *)(v330 + 24) = v568;
          *(unsigned char *)(v330 + 45) = 1;
        }
        uint64_t v341 = (*(uint64_t (**)(unint64_t))(*(void *)v301 + 56))(v301);
        uint64_t v342 = v341;
        if (*(unsigned char *)(v341 + 45) || !*(unsigned char *)(v341 + 46))
        {
          v353.f64[0] = *(float64_t *)(v341 + 24);
        }
        else
        {
          long double v343 = *(double *)v341;
          long double v344 = *(double *)(v341 + 8);
          long double v345 = *(double *)(v341 + 16);
          double v346 = sqrt(v343 * v343 + v344 * v344);
          double v347 = atan2(v345, v346 * 0.996647189);
          long double v537 = atan2(v344, v343);
          __double2 v348 = __sincos_stret(v347);
          long double v349 = atan2(v345 + v348.__sinval * v348.__sinval * 42841.3115 * v348.__sinval, v346 + v348.__cosval * v348.__cosval * -42697.6727 * v348.__cosval);
          long double v350 = tan(v349 * 0.5 + 0.785398163);
          long double v351 = log(v350);
          v352.f64[0] = v537;
          v352.f64[1] = v351;
          float64x2_t v353 = vmlaq_f64(v579, v561, v352);
          *(float64x2_t *)(v342 + 24) = v353;
          *(unsigned char *)(v342 + 45) = 1;
        }
        if (v568.f64[0] >= v353.f64[0])
        {
          i64 = v295;
          long long v12 = v526;
          goto LABEL_183;
        }
        goto LABEL_189;
      }
      if (v298 < v301)
      {
LABEL_189:
        --v295;
        void *v300 = *(v300 - 1);
        v299 -= 8;
        long long v12 = v526;
        if (!v299)
        {
          i64 = v526->i64;
          goto LABEL_183;
        }
        continue;
      }
      break;
    }
    long long v12 = v526;
    i64 = (uint64_t *)((char *)v526->i64 + v299);
LABEL_183:
    void *i64 = v298;
LABEL_184:
    uint64_t v291 = v297 + 1;
    v294 += 8;
    uint64_t v295 = (unint64_t *)v297;
    if (v297 + 1 != (uint64_t *)a2) {
      continue;
    }
    break;
  }
}

uint64_t md::PolylineLabelPlacement::labelPoint(md::PolylineLabelPlacement *this)
{
  return (uint64_t)this + 152;
}

BOOL md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  double v5 = *(double *)md::LabelPoint::mercatorPoint(v4);
  uint64_t v6 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  if (v5 == *(double *)md::LabelPoint::mercatorPoint(v6)) {
    return a1 < a2;
  }
  int v8 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  double v9 = *(double *)md::LabelPoint::mercatorPoint(v8);
  int v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  return v9 < *(double *)md::LabelPoint::mercatorPoint(v10);
}

{
  uint64_t v4;
  uint64_t v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  uint64_t v15;
  uint64_t v16;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  long double v33;
  double v34;
  __double2 v35;
  double v36;
  __double2 v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  long double v41;
  long double v42;
  double v43;
  long double v44;
  double v45;
  __double2 v46;
  double v47;
  __double2 v48;

  uint64_t v4 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  double v5 = v4;
  if (*(unsigned char *)(v4 + 44))
  {
    uint64_t v6 = *(double *)v4;
  }
  else
  {
    int v7 = *(double *)(v4 + 24) * 6.28318531;
    int v8 = exp(*(double *)(v4 + 32) * 6.28318531 + -3.14159265);
    double v9 = atan(v8) * 2.0 + -1.57079633;
    int v10 = fmod(v7, 6.28318531);
    uint64_t v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
    long long v12 = __sincos_stret(v9);
    uint64_t v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
    unint64_t v14 = __sincos_stret(v11);
    uint64_t v6 = v13 * v12.__cosval * v14.__cosval;
    *(double *)double v5 = v6;
    *(double *)(v5 + 8) = v13 * v12.__cosval * v14.__sinval;
    *(double *)(v5 + 16) = v12.__sinval * 0.99330562 * v13;
    *(unsigned char *)(v5 + 44) = 1;
  }
  unint64_t v15 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v16 = v15;
  if (*(unsigned char *)(v15 + 44))
  {
    if (v6 == *(double *)v15) {
      return a1 < a2;
    }
  }
  else
  {
    uint64_t v18 = *(double *)(v15 + 24) * 6.28318531;
    uint64_t v19 = exp(*(double *)(v15 + 32) * 6.28318531 + -3.14159265);
    unint64_t v20 = atan(v19) * 2.0 + -1.57079633;
    uint64_t v21 = fmod(v18, 6.28318531);
    double v22 = fmod(v21 + 6.28318531, 6.28318531) + -3.14159265;
    uint64_t v23 = __sincos_stret(v20);
    unint64_t v24 = 6378137.0 / sqrt(v23.__sinval * v23.__sinval * -0.00669437999 + 1.0);
    uint64_t v25 = __sincos_stret(v22);
    __n128 v26 = v24 * v23.__cosval * v25.__cosval;
    *(double *)uint64_t v16 = v26;
    *(double *)(v16 + 8) = v24 * v23.__cosval * v25.__sinval;
    *(double *)(v16 + 16) = v23.__sinval * 0.99330562 * v24;
    *(unsigned char *)(v16 + 44) = 1;
    if (v6 == v26) {
      return a1 < a2;
    }
  }
  uint64_t v27 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 56))(a1);
  int v28 = v27;
  if (*(unsigned char *)(v27 + 44))
  {
    long double v29 = *(double *)v27;
  }
  else
  {
    long double v30 = *(double *)(v27 + 24) * 6.28318531;
    long double v31 = exp(*(double *)(v27 + 32) * 6.28318531 + -3.14159265);
    double v32 = atan(v31) * 2.0 + -1.57079633;
    double v33 = fmod(v30, 6.28318531);
    __double2 v34 = fmod(v33 + 6.28318531, 6.28318531) + -3.14159265;
    long double v35 = __sincos_stret(v32);
    long double v36 = 6378137.0 / sqrt(v35.__sinval * v35.__sinval * -0.00669437999 + 1.0);
    long double v37 = __sincos_stret(v34);
    long double v29 = v36 * v35.__cosval * v37.__cosval;
    *(double *)int v28 = v29;
    *(double *)(v28 + 8) = v36 * v35.__cosval * v37.__sinval;
    *(double *)(v28 + 16) = v35.__sinval * 0.99330562 * v36;
    *(unsigned char *)(v28 + 44) = 1;
  }
  float64x2_t v38 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v39 = v38;
  if (*(unsigned char *)(v38 + 44))
  {
    __n128 v40 = *(double *)v38;
  }
  else
  {
    uint64_t v41 = *(double *)(v38 + 24) * 6.28318531;
    double v42 = exp(*(double *)(v38 + 32) * 6.28318531 + -3.14159265);
    long double v43 = atan(v42) * 2.0 + -1.57079633;
    long double v44 = fmod(v41, 6.28318531);
    long double v45 = fmod(v44 + 6.28318531, 6.28318531) + -3.14159265;
    double v46 = __sincos_stret(v43);
    double v47 = 6378137.0 / sqrt(v46.__sinval * v46.__sinval * -0.00669437999 + 1.0);
    __double2 v48 = __sincos_stret(v45);
    __n128 v40 = v47 * v46.__cosval * v48.__cosval;
    *(double *)uint64_t v39 = v40;
    *(double *)(v39 + 8) = v47 * v46.__cosval * v48.__sinval;
    *(double *)(v39 + 16) = v46.__sinval * 0.99330562 * v47;
    *(unsigned char *)(v39 + 44) = 1;
  }
  return v29 < v40;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v6 = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2);
  if (v6)
  {
    unint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, v8);
      if (result)
      {
        unint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
    if (result)
    {
      unint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

{
  BOOL v6;
  BOOL result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  BOOL v6 = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
  BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2);
  if (v6)
  {
    unint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, v8);
      if (result)
      {
        unint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
    if (result)
    {
      unint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t md::MercatorCameraContext::MercatorCameraContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 176);
  long long v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  long long v10 = *(_OWORD *)(a2 + 224);
  long long v11 = *(_OWORD *)(a2 + 240);
  long long v12 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  long long v13 = *(_OWORD *)(a2 + 288);
  long long v14 = *(_OWORD *)(a2 + 304);
  long long v15 = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(_OWORD *)(a1 + 304) = v14;
  *(_OWORD *)(a1 + 320) = v15;
  *(_OWORD *)(a1 + 288) = v13;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 344) = 0;
  if (*(unsigned char *)(a2 + 344))
  {
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(unsigned char *)(a1 + 344) = 1;
  }
  *(unsigned char *)(a1 + 360) = 0;
  if (*(unsigned char *)(a2 + 360))
  {
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(unsigned char *)(a1 + 360) = 1;
  }
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  long long v16 = *(_OWORD *)(a2 + 408);
  long long v17 = *(_OWORD *)(a2 + 424);
  long long v18 = *(_OWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 424) = v17;
  *(_OWORD *)(a1 + 440) = v18;
  *(_OWORD *)(a1 + 408) = v16;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  geo::View<double>::View(a1 + 504, (long long *)(a2 + 504), (double *)(a2 + 560), (long long *)(a2 + 688), (_WORD *)(a2 + 960), *(_DWORD *)(a2 + 964), *(double *)(a2 + 944));
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  memcpy((void *)(a1 + 992), (const void *)(a2 + 992), 0x1A0uLL);
  long long v19 = *(_OWORD *)(a2 + 1472);
  long long v20 = *(_OWORD *)(a2 + 1488);
  long long v21 = *(_OWORD *)(a2 + 1504);
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  *(_OWORD *)(a1 + 1504) = v21;
  *(_OWORD *)(a1 + 1488) = v20;
  *(_OWORD *)(a1 + 1472) = v19;
  long long v22 = *(_OWORD *)(a2 + 1408);
  long long v23 = *(_OWORD *)(a2 + 1424);
  long long v24 = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(_OWORD *)(a1 + 1440) = v24;
  *(_OWORD *)(a1 + 1424) = v23;
  *(_OWORD *)(a1 + 1408) = v22;
  long long v25 = *(_OWORD *)(a2 + 1552);
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(a1 + 1552) = v25;
  *(void *)(a1 + 1568) = 0;
  *(void *)(a1 + 1584) = 0;
  *(void *)(a1 + 1576) = 0;
  if (a1 != a2) {
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1568, *(void *)(a2 + 1568), *(char **)(a2 + 1576), (uint64_t)(*(void *)(a2 + 1576) - *(void *)(a2 + 1568)) >> 4);
  }
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  long long v26 = *(_OWORD *)(a2 + 1600);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(_OWORD *)(a1 + 1600) = v26;
  long long v27 = *(_OWORD *)(a2 + 1624);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  *(_OWORD *)(a1 + 1624) = v27;
  *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
  *(unsigned char *)(a1 + 1664) = *(unsigned char *)(a2 + 1664);
  return a1;
}

void sub_1A18BE814(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 1576) = v4;
    operator delete(v4);
    if (!*(unsigned char *)(v1 + 360))
    {
LABEL_3:
      if (!*(unsigned char *)(v1 + 344)) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(v1 + 360))
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v1 + 360) = 0;
  if (!*(unsigned char *)(v1 + 344)) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(unsigned char *)(v1 + 344) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t md::MercatorCameraContext::MercatorCameraContext(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 72);
  long long v14 = *(_OWORD *)(a2 + 80);
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v16 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 104) = v15;
  *(_OWORD *)(a1 + 88) = v14;
  long long v17 = *(_OWORD *)(a2 + 152);
  long long v18 = *(_OWORD *)(a2 + 168);
  long long v19 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 208) = v19;
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = v18;
  long long v20 = *(_OWORD *)(a2 + 216);
  long long v21 = *(_OWORD *)(a2 + 232);
  long long v22 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
  long long v23 = *(_OWORD *)(a2 + 280);
  long long v24 = *(_OWORD *)(a2 + 296);
  long long v25 = *(_OWORD *)(a2 + 312);
  *(void *)(a1 + 336) = *(void *)(a2 + 328);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 344) = 0;
  if (*(unsigned char *)(a2 + 336))
  {
    *(void *)(a1 + 352) = *(void *)(a2 + 344);
    *(unsigned char *)(a1 + 344) = 1;
  }
  *(unsigned char *)(a1 + 360) = 0;
  if (*(unsigned char *)(a2 + 352))
  {
    *(void *)(a1 + 368) = *(void *)(a2 + 360);
    *(unsigned char *)(a1 + 360) = 1;
  }
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 384);
  long long v26 = *(_OWORD *)(a2 + 400);
  long long v27 = *(_OWORD *)(a2 + 416);
  long long v28 = *(_OWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 424) = v27;
  *(_OWORD *)(a1 + 440) = v28;
  *(_OWORD *)(a1 + 408) = v26;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 456);
  *(void *)(a1 + 480) = *(void *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 480);
  geo::View<double>::View(a1 + 504, (long long *)(a2 + 496), (double *)(a2 + 552), (long long *)(a2 + 680), (_WORD *)(a2 + 952), *(_DWORD *)(a2 + 956), *(double *)(a2 + 936));
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 960);
  *(void *)(a1 + 984) = *(void *)(a2 + 976);
  memcpy((void *)(a1 + 992), (const void *)(a2 + 984), 0x180uLL);
  v29.f64[0] = *(float *)(a2 + 488);
  *(float64_t *)(a1 + 1376) = v29.f64[0];
  *(double *)(a1 + 1384) = a4;
  *(double *)(a1 + 1392) = a5;
  *(double *)(a1 + 1400) = a6;
  uint64_t v30 = a1 + 1568;
  double v140 = 0.0;
  long long v141 = 0uLL;
  *(void *)(a1 + 1568) = 0;
  *(void *)(a1 + 1584) = 0;
  *(void *)(a1 + 1576) = 0;
  geo::ConvexHull2<double>::getConvexHullPoints((double **)&v140, (void *)(a1 + 1568), v29);
  *(unsigned char *)(a1 + 1664) = 1;
  double v31 = *(double *)(a2 + 496);
  double v32 = *(double *)(a2 + 504);
  double v131 = *(double *)(a2 + 512);
  v157[0] = 0.0;
  v157[1] = 0.0;
  v157[2] = 1.0;
  v157[3] = -a7;
  geo::Intersect::intersection<double>(&v155, a2 + 984, v157);
  long double v152 = 0;
  long double v153 = 0;
  long double v154 = 0;
  long double v35 = v155;
  __double2 v34 = v156;
  if (v156 == v155)
  {
    long double v37 = 0;
  }
  else
  {
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v156 - v155);
    __double2 v125 = v155;
    if (v36 >> 60) {
      abort();
    }
    uint64_t v129 = a3;
    long double v37 = (double *)operator new(0xAAAAAAAAAAAAAAB0 * (v156 - v155));
    float64x2_t v38 = v153;
    uint64_t v39 = v37;
    __n128 v40 = v35;
    uint64_t v41 = &v37[2 * v36];
    do
    {
      if (v39 < v41)
      {
        float64x2_t v33 = *(float64x2_t *)v40;
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        float64x2_t v38 = v39 + 2;
      }
      else
      {
        uint64_t v42 = ((char *)v39 - (char *)v37) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
        {
          long double v153 = v38;
          long double v154 = v41;
          long double v152 = v37;
          abort();
        }
        if (v41 - v37 > v43) {
          unint64_t v43 = v41 - v37;
        }
        if ((unint64_t)((char *)v41 - (char *)v37) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          if (v44 >> 60)
          {
            long double v153 = v38;
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          long double v45 = (char *)operator new(16 * v44);
        }
        else
        {
          long double v45 = 0;
        }
        double v46 = (double *)&v45[16 * v42];
        uint64_t v41 = (double *)&v45[16 * v44];
        *(_OWORD *)double v46 = *(_OWORD *)v40;
        float64x2_t v38 = v46 + 2;
        if (v39 == v37) {
          goto LABEL_24;
        }
        do
        {
          float64x2_t v33 = *(float64x2_t *)(v39 - 2);
          *((float64x2_t *)v46 - 1) = v33;
          v46 -= 2;
          v39 -= 2;
        }
        while (v39 != v37);
        if (v37) {
LABEL_24:
        }
          operator delete(v37);
        long double v37 = v46;
      }
      v40 += 3;
      uint64_t v39 = v38;
    }
    while (v40 != v34);
    long double v153 = v38;
    long double v154 = v41;
    long double v152 = v37;
    uint64_t v30 = a1 + 1568;
    long double v35 = v125;
    a3 = v129;
  }
  double v140 = 0.0;
  long long v141 = 0uLL;
  geo::ConvexHull2<double>::getConvexHullPoints(&v152, &v140, v33);
  double v47 = *(double **)&v140;
  std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(v30, *(unint64_t *)&v140, (char *)v141, (uint64_t)(v141 - *(void *)&v140) >> 4);
  if (v47) {
    operator delete(v47);
  }
  __double2 v48 = *(char **)(a1 + 1568);
  long double v49 = *(char **)(a1 + 1576);
  double v128 = a4;
  if (v48 == v49)
  {
    double v53 = 1.79769313e308;
    double v54 = -1.79769313e308;
    double v51 = 1.79769313e308;
    double v52 = -1.79769313e308;
    goto LABEL_39;
  }
  unint64_t v50 = v49 - v48 - 16;
  if (v50 < 0x30)
  {
    double v51 = 1.79769313e308;
    double v52 = -1.79769313e308;
    double v53 = 1.79769313e308;
    double v54 = -1.79769313e308;
    goto LABEL_38;
  }
  uint64_t v55 = (v50 >> 4) + 1;
  float64x2_t v56 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  float64x2_t v57 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  unint64_t v58 = (const double *)(v48 + 32);
  uint64_t v59 = v55 & 0x1FFFFFFFFFFFFFFCLL;
  float64x2_t v60 = v57;
  float64x2_t v61 = v56;
  float64x2_t v62 = v56;
  float64x2_t v63 = v56;
  float64x2_t v64 = v57;
  float64x2_t v65 = v57;
  do
  {
    long double v66 = v58 - 4;
    float64x2x2_t v158 = vld2q_f64(v66);
    float64x2x2_t v159 = vld2q_f64(v58);
    float64x2_t v56 = vminnmq_f64(v158.val[0], v56);
    float64x2_t v61 = vminnmq_f64(v159.val[0], v61);
    float64x2_t v64 = vmaxnmq_f64(v64, v158.val[0]);
    float64x2_t v65 = vmaxnmq_f64(v65, v159.val[0]);
    float64x2_t v62 = vminnmq_f64(v158.val[1], v62);
    float64x2_t v63 = vminnmq_f64(v159.val[1], v63);
    float64x2_t v57 = vmaxnmq_f64(v57, v158.val[1]);
    float64x2_t v60 = vmaxnmq_f64(v60, v159.val[1]);
    v58 += 8;
    v59 -= 4;
  }
  while (v59);
  double v54 = vmaxnmvq_f64(vmaxnmq_f64(v64, v65));
  double v53 = vminnmvq_f64(vminnmq_f64(v62, v63));
  double v51 = vminnmvq_f64(vminnmq_f64(v56, v61));
  double v52 = vmaxnmvq_f64(vmaxnmq_f64(v57, v60));
  if (v55 != (v55 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v48 += 16 * (v55 & 0x1FFFFFFFFFFFFFFCLL);
    do
    {
LABEL_38:
      double v67 = *(double *)v48;
      double v68 = *((double *)v48 + 1);
      v48 += 16;
      double v51 = fmin(v67, v51);
      double v54 = fmax(v54, v67);
      double v53 = fmin(v68, v53);
      double v52 = fmax(v52, v68);
    }
    while (v48 != v49);
  }
LABEL_39:
  *(double *)(a1 + 1536) = v51;
  *(double *)(a1 + 1544) = v53;
  *(double *)(a1 + 1552) = v54;
  *(double *)(a1 + 1560) = v52;
  long long v143 = 0u;
  uint64_t v145 = 0;
  uint64_t v147 = 0;
  long long v144 = 0u;
  long long v142 = 0u;
  long long v141 = 0u;
  uint64_t v151 = 0x3FF0000000000000;
  double v140 = v54 - v51;
  *(double *)&long long v143 = v52 - v53;
  double v146 = v54 - v51;
  double v148 = v51;
  double v149 = v53;
  double v126 = a7;
  double v150 = a7;
  gm::operator*<double,4,4,4>(v132.f64, (double *)(a2 + 808), &v140);
  long long v69 = v133;
  *(float64x2_t *)(a1 + 1408) = v132;
  *(_OWORD *)(a1 + 1424) = v69;
  long long v70 = v135;
  *(_OWORD *)(a1 + 1440) = v134;
  *(_OWORD *)(a1 + 1456) = v70;
  long long v71 = v137;
  *(_OWORD *)(a1 + 1472) = v136;
  *(_OWORD *)(a1 + 1488) = v71;
  long long v72 = v139;
  *(_OWORD *)(a1 + 1504) = v138;
  *(_OWORD *)(a1 + 1520) = v72;
  double v73 = *(double *)(a2 + 528);
  double v74 = *(double *)(a2 + 536);
  double v75 = *(double *)(a2 + 520);
  double v76 = v73 * -2.0;
  double v77 = v75 + v75;
  double v78 = *(double *)(a2 + 544);
  double v79 = v73 * -2.0 * v74;
  double v80 = (v75 + v75) * v74;
  double v130 = -1.0 - v73 * -2.0 * v73;
  double v82 = *(double *)(a1 + 376);
  double v81 = *(double *)(a1 + 384);
  double v124 = v74;
  double v127 = a5;
  if (v81 >= v82)
  {
    double v88 = *(double *)(a1 + 464);
  }
  else
  {
    double v83 = v81 * v82;
    double v84 = v81 / v82;
    if (v83 <= 0.0) {
      double v84 = 1.0;
    }
    double v122 = v84;
    double v85 = *(double *)(a2 + 544);
    long double v86 = tan(*(double *)(a1 + 464) * 0.5);
    long double v87 = atan(v122 * v86);
    double v78 = v85;
    double v88 = v87 + v87;
  }
  double v120 = v78;
  double v121 = v76;
  double v89 = -(v80 - v78 * v76);
  double v90 = v79 + v77 * v78;
  double v123 = v75;
  double v91 = v130 + v77 * v75;
  double v97 = tan(v88 * 0.5);
  if (v34 == v35)
  {
    double v99 = 1.79769313e308;
    double v102 = v131;
  }
  else
  {
    double v98 = 0.0;
    double v99 = 1.79769313e308;
    double v100 = 1.79769313e308;
    float64x2_t v101 = v35;
    double v102 = v131;
    do
    {
      double v96 = *v101;
      double v103 = *v101 - v31;
      double v104 = v101[1] - v32;
      double v94 = v101[2] - v131;
      double v95 = sqrt(v103 * v103 + v104 * v104 + v94 * v94);
      if (v95 > v98)
      {
        *(double *)(a1 + 1624) = v96;
        *(double *)(a1 + 1632) = v101[1];
        *(double *)(a1 + 1640) = v101[2];
        double v98 = v95;
      }
      if (v95 < v100)
      {
        *(double *)(a1 + 1600) = *v101;
        *(double *)(a1 + 1608) = v101[1];
        *(double *)(a1 + 1616) = v101[2];
        double v100 = v95;
      }
      double v93 = v103 * v89;
      double v92 = v93 + v104 * v90 + v94 * v91;
      double v99 = fmin(v92, v99);
      v101 += 3;
    }
    while (v101 != v34);
  }
  *(double *)(a1 + 1592) = v128 * ((v97 + v97) * v99) / v127;
  double v105 = *(double *)(a2 + 976);
  if (a3 && *(double *)(a2 + 40) > 0.610865238)
  {
    v132.f64[0] = v31 + v105 * v89;
    v132.f64[1] = v32 + v105 * v90;
    *(double *)&long long v133 = v102 + v105 * v91;
    double v106 = COERCE_DOUBLE(md::World::getElevation(a3, &v132, v132.f64[0], v132.f64[1], *(double *)&v133, v92, v93, v94, v95, *(float *)&v96));
    double v108 = v97;
    double v109 = v126;
    if (v106 * 0.0000000249532021 <= v126 && v107 != 0) {
      double v109 = v106 * 0.0000000249532021;
    }
  }
  else
  {
    double v108 = v97;
    double v109 = v126;
  }
  double v111 = 1.57079633 - *(double *)(a2 + 40);
  __double2 v112 = __sincos_stret(v111);
  double v113 = v105 * v108;
  double v114 = vabdd_f64(v131, v109) / v112.__sinval;
  double v115 = (v113 + tan(v111) * (v105 - v114)) / (v113 + v113);
  if (v109 < 0.0) {
    double v115 = v115 + v109 / (v112.__cosval * v113);
  }
  *(double *)(a1 + 1648) = v115;
  double v116 = fabs(v112.__sinval);
  double v117 = 1.79769313e308;
  if (v116 > v116 * 2.22044605e-14 && v116 >= 2.22507386e-308)
  {
    double v118 = fabs(v112.__cosval);
    double v117 = 1.79769313e308;
    if (v118 > v118 * 2.22044605e-14 && v118 >= 2.22507386e-308) {
      double v117 = -(-(((v105 - v114) / v112.__cosval + v114 * v112.__cosval)
    }
               * (v89 * (v123 * v121 - v120 * (v124 + v124)) + v90 * -(v130 + (v124 + v124) * v124)))
             / sqrt((v123 * v121 - v120 * (v124 + v124)) * (v123 * v121 - v120 * (v124 + v124))+ -(v130 + (v124 + v124) * v124) * -(v130 + (v124 + v124) * v124))+ *(double *)(a2 + 512) * v91);
  }
  *(double *)(a1 + 1656) = v117;
  *(double *)a1 = v109;
  if (v37)
  {
    long double v153 = v37;
    operator delete(v37);
    long double v35 = v155;
  }
  if (v35) {
    operator delete(v35);
  }
  return a1;
}

void sub_1A18BF144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __pa = v39;
  if (v38)
  {
    *(void *)(v41 - 232) = v38;
    operator delete(v38);
    __pa = *(void **)(v41 - 216);
  }
  if (__pa) {
    operator delete(__pa);
  }
  unint64_t v43 = *v40;
  if (*v40)
  {
    *(void *)(v37 + 1576) = v43;
    operator delete(v43);
  }
  if (*(unsigned char *)(v37 + 360))
  {
    *(unsigned char *)(v37 + 360) = 0;
    if (!*(unsigned char *)(v37 + 344)) {
LABEL_9:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!*(unsigned char *)(v37 + 344))
  {
    goto LABEL_9;
  }
  *(unsigned char *)(v37 + 344) = 0;
  _Unwind_Resume(exception_object);
}

md::LabelLayoutContext *md::LabelLayoutContext::LabelLayoutContext(md::LabelLayoutContext *this, const md::LabelLayoutContext *a2)
{
  memcpy(this, a2, 0x480uLL);
  *((void *)this + 144) = 0;
  *((void *)this + 146) = 0;
  *((void *)this + 145) = 0;
  if (this != a2) {
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)this + 1152, *((void *)a2 + 144), *((char **)a2 + 145), (uint64_t)(*((void *)a2 + 145) - *((void *)a2 + 144)) >> 4);
  }
  long long v4 = *(_OWORD *)((char *)a2 + 1192);
  *(_OWORD *)((char *)this + 1176) = *(_OWORD *)((char *)a2 + 1176);
  *(_OWORD *)((char *)this + 1192) = v4;
  *((void *)this + 151) = 0;
  *((void *)this + 153) = 0;
  *((void *)this + 152) = 0;
  long long v5 = (unsigned char *)*((void *)a2 + 151);
  long long v6 = (unsigned char *)*((void *)a2 + 152);
  int64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      abort();
    }
    long long v8 = (char *)operator new(v6 - v5);
    *((void *)this + 151) = v8;
    *((void *)this + 152) = v8;
    long long v9 = &v8[16 * (v7 >> 4)];
    *((void *)this + 153) = v9;
    memcpy(v8, v5, v7);
    *((void *)this + 152) = v9;
  }
  long long v10 = *((_OWORD *)a2 + 77);
  long long v11 = *((_OWORD *)a2 + 78);
  long long v12 = *((_OWORD *)a2 + 79);
  *((_DWORD *)this + 320) = *((_DWORD *)a2 + 320);
  *((_OWORD *)this + 79) = v12;
  *((_OWORD *)this + 78) = v11;
  *((_OWORD *)this + 77) = v10;
  return this;
}

void sub_1A18BF310(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 1160) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<gm::Matrix<float,2,1> ()(void)>::function<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = (char *)operator new(0x518uLL);
  *(void *)long long v4 = &unk_1EF578CC0;
  *((void *)v4 + 1) = *(void *)a2;
  memcpy(v4 + 16, (const void *)(a2 + 8), 0x480uLL);
  *((void *)v4 + 146) = 0;
  *((void *)v4 + 148) = 0;
  *((void *)v4 + 147) = 0;
  if (v4 + 8 != (char *)a2) {
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v4 + 1168), *(void *)(a2 + 1160), *(char **)(a2 + 1168), (uint64_t)(*(void *)(a2 + 1168) - *(void *)(a2 + 1160)) >> 4);
  }
  long long v5 = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(v4 + 1192) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(v4 + 1208) = v5;
  *((void *)v4 + 153) = 0;
  *((void *)v4 + 155) = 0;
  *((void *)v4 + 154) = 0;
  long long v6 = *(unsigned char **)(a2 + 1216);
  int64_t v7 = *(unsigned char **)(a2 + 1224);
  int64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0) {
      abort();
    }
    long long v9 = (char *)operator new(v7 - v6);
    *((void *)v4 + 153) = v9;
    *((void *)v4 + 154) = v9;
    long long v10 = &v9[16 * (v8 >> 4)];
    *((void *)v4 + 155) = v10;
    memcpy(v9, v6, v8);
    *((void *)v4 + 154) = v10;
  }
  *((_DWORD *)v4 + 324) = *(_DWORD *)(a2 + 1288);
  *((_OWORD *)v4 + 78) = *(_OWORD *)(a2 + 1240);
  *((_OWORD *)v4 + 79) = *(_OWORD *)(a2 + 1256);
  *((_OWORD *)v4 + 80) = *(_OWORD *)(a2 + 1272);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_1A18BF46C(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    v1[147] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  long long v6 = (char *)a2;
  uint64_t v8 = *(void *)(a1 + 16);
  BOOL result = *(char **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_44;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_44:
    }
      abort();
    uint64_t v13 = 16 * v12;
    BOOL result = (char *)operator new(16 * v12);
    long long v14 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v13];
    long long v15 = result;
    if (v6 != a3)
    {
      BOOL result = (char *)memcpy(result, v6, ((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      long long v15 = &v14[((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    int64_t v16 = v15 - v14;
    long long v17 = (void *)(a1 + 8);
    goto LABEL_43;
  }
  long long v18 = *(char **)(a1 + 8);
  long long v17 = (void *)(a1 + 8);
  long long v14 = v18;
  int64_t v19 = v18 - result;
  unint64_t v20 = (v18 - result) >> 4;
  if (v20 >= __sz)
  {
    if ((char *)a2 == a3)
    {
      long long v25 = result;
    }
    else
    {
      unint64_t v24 = (unint64_t)&a3[-a2 - 16];
      if (v24 >= 0x90)
      {
        unint64_t v37 = (v24 & 0xFFFFFFFFFFFFFFF0) + 16;
        if ((unint64_t)result >= a2 + v37 || (unint64_t)&result[v37] <= a2)
        {
          uint64_t v40 = (v24 >> 4) + 1;
          uint64_t v41 = 16 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
          long long v25 = &result[v41];
          uint64_t v42 = (long long *)(a2 + 32);
          unint64_t v43 = result + 32;
          uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            long long v46 = *(v42 - 2);
            long long v45 = *(v42 - 1);
            long long v48 = *v42;
            long long v47 = v42[1];
            v42 += 4;
            *(v43 - 2) = v46;
            *(v43 - 1) = v45;
            *unint64_t v43 = v48;
            v43[1] = v47;
            v43 += 4;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
            goto LABEL_42;
          }
          long long v6 = (char *)(a2 + v41);
        }
        else
        {
          long long v25 = result;
        }
      }
      else
      {
        long long v25 = result;
      }
      do
      {
        *(void *)long long v25 = *(void *)v6;
        *((void *)v25 + 1) = *((void *)v6 + 1);
        v25 += 16;
        v6 += 16;
      }
      while (v6 != a3);
    }
LABEL_42:
    int64_t v16 = v25 - result;
    long long v14 = result;
    goto LABEL_43;
  }
  long long v21 = (char *)(a2 + 16 * v20);
  if (v14 != result)
  {
    unint64_t v22 = v19 - 16;
    if ((unint64_t)(v19 - 16) >= 0x90)
    {
      unint64_t v26 = v19 & 0xFFFFFFFFFFFFFFF0;
      if ((unint64_t)result < a2 + v26 && (unint64_t)&result[v26] > a2)
      {
        long long v23 = result;
      }
      else
      {
        uint64_t v28 = (v22 >> 4) + 1;
        uint64_t v29 = 16 * (v28 & 0x1FFFFFFFFFFFFFFCLL);
        long long v23 = &result[v29];
        uint64_t v30 = (long long *)(a2 + 32);
        double v31 = result + 32;
        uint64_t v32 = v28 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *(v30 - 2);
          long long v33 = *(v30 - 1);
          long long v36 = *v30;
          long long v35 = v30[1];
          v30 += 4;
          *(v31 - 2) = v34;
          *(v31 - 1) = v33;
          *double v31 = v36;
          v31[1] = v35;
          v31 += 4;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_34;
        }
        long long v6 = (char *)(a2 + v29);
      }
    }
    else
    {
      long long v23 = result;
    }
    do
    {
      *(void *)long long v23 = *(void *)v6;
      *((void *)v23 + 1) = *((void *)v6 + 1);
      v6 += 16;
      v23 += 16;
    }
    while (v6 != v21);
  }
LABEL_34:
  for (uint64_t i = v14; v21 != a3; i += 16)
  {
    long long v39 = *(_OWORD *)v21;
    v21 += 16;
    *(_OWORD *)uint64_t i = v39;
  }
  int64_t v16 = i - v14;
LABEL_43:
  *long long v17 = &v14[v16];
  return result;
}

float64_t geo::ConvexHull2<double>::getConvexHullPoints(double **a1, void *a2, float64x2_t a3)
{
  long long v5 = *a1;
  long long v4 = a1[1];
  if (v4 == *a1)
  {
    if (a2[1] != *a2) {
      a2[1] = *a2;
    }
    return a3.f64[0];
  }
  uint64_t v6 = ((char *)v4 - (char *)*a1) >> 4;
  int64_t v7 = *a1;
  uint64_t v8 = *a1;
  do
  {
    if (*v8 < *v7 || *v8 == *v7 && v8[1] < v7[1]) {
      int64_t v7 = v8;
    }
    v8 += 2;
  }
  while (v8 != v4);
  unint64_t v9 = v6 - 1;
  if (v6 == 1)
  {
    uint64_t v10 = 0;
    BOOL v11 = 0;
  }
  else
  {
    if (v9 >> 60) {
      abort();
    }
    uint64_t v10 = (double *)operator new(16 * v9);
    BOOL v11 = &v10[2 * v9];
  }
  unint64_t v12 = v10;
  do
  {
    if (*(void *)v5 != *(void *)v7 || *((void *)v5 + 1) != *((void *)v7 + 1))
    {
      if (v12 < v11)
      {
        *(_OWORD *)unint64_t v12 = *(_OWORD *)v5;
        v12 += 2;
      }
      else
      {
        uint64_t v14 = ((char *)v12 - (char *)v10) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          abort();
        }
        if (v11 - v10 > v15) {
          unint64_t v15 = v11 - v10;
        }
        if ((unint64_t)((char *)v11 - (char *)v10) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 >> 60) {
            goto LABEL_146;
          }
          long long v17 = (char *)operator new(16 * v16);
        }
        else
        {
          long long v17 = 0;
        }
        long long v18 = &v17[16 * v14];
        *(_OWORD *)long long v18 = *(_OWORD *)v5;
        if (v12 == v10)
        {
          unint64_t v20 = &v17[16 * v14];
        }
        else
        {
          int64_t v19 = &v17[16 * v14];
          do
          {
            unint64_t v20 = v19 - 16;
            *((_OWORD *)v19 - 1) = *((_OWORD *)v12 - 1);
            v12 -= 2;
            v19 -= 16;
          }
          while (v12 != v10);
        }
        BOOL v11 = (double *)&v17[16 * v16];
        unint64_t v12 = (double *)(v18 + 16);
        if (v10) {
          operator delete(v10);
        }
        uint64_t v10 = (double *)v20;
      }
    }
    v5 += 2;
  }
  while (v5 != v4);
  if (v12 == v10)
  {
    uint64_t v32 = (char *)*a2;
    long long v33 = (char *)a2[1];
    uint64_t v34 = (uint64_t)&v33[-*a2];
    if (v33 != (char *)*a2)
    {
      if ((unint64_t)v34 >= 0x11) {
        a2[1] = v32 + 16;
      }
LABEL_54:
      long long v33 = v32;
      goto LABEL_143;
    }
    uint64_t v41 = v34 >> 4;
    unint64_t v42 = 1 - (v34 >> 4);
    uint64_t v43 = a2[2];
    if (v42 <= (v43 - (uint64_t)v33) >> 4)
    {
      a2[1] = &v33[16 * v42];
    }
    else
    {
      uint64_t v44 = v43 - (void)v32;
      uint64_t v45 = v44 >> 3;
      if ((unint64_t)(v44 >> 3) <= 1) {
        uint64_t v45 = 1;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46 >> 60) {
        goto LABEL_146;
      }
      long long v47 = (char *)operator new(16 * v46);
      uint64_t v32 = &v47[16 * v41];
      *a2 = v32;
      a2[1] = &v32[16 * v42];
      a2[2] = &v47[16 * v46];
      if (!v33) {
        goto LABEL_54;
      }
      operator delete(v33);
      long long v33 = (char *)*a2;
    }
LABEL_143:
    *(double *)long long v33 = *v7;
    a3.f64[0] = v7[1];
    *((void *)v33 + 1) = *(void *)&a3.f64[0];
    if (v10) {
      goto LABEL_139;
    }
    return a3.f64[0];
  }
  float64x2_t v88 = *(float64x2_t *)v7;
  std::__introsort<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*,false>(v10, v12, v88.f64, 126 - 2 * __clz(((char *)v12 - (char *)v10) >> 4), 1);
  int64_t v21 = (char *)a1[1] - (char *)*a1;
  uint64_t v22 = v21 >> 4;
  long long v23 = (char *)a2[2];
  unint64_t v24 = (char *)*a2;
  if (v21 >> 4 > (unint64_t)((uint64_t)&v23[-*a2] >> 4))
  {
    if (v21 < 0) {
      goto LABEL_148;
    }
    long long v25 = (unsigned char *)a2[1];
    unint64_t v26 = (char *)operator new(v21);
    long long v23 = &v26[16 * v22];
    long long v27 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v28 = v27;
    if (v25 != v24)
    {
      uint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v28 = v29 - 16;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v25 - 1);
        v25 -= 16;
        v29 -= 16;
      }
      while (v25 != v24);
    }
    *a2 = v28;
    a2[1] = v27;
    a2[2] = v23;
    if (v24)
    {
      operator delete(v24);
      long long v23 = (char *)a2[2];
    }
  }
  uint64_t v30 = (char *)a2[1];
  if (v30 >= v23)
  {
    long long v35 = (char *)*a2;
    uint64_t v36 = (uint64_t)&v30[-*a2] >> 4;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60) {
      goto LABEL_148;
    }
    uint64_t v38 = v23 - v35;
    if (v38 >> 3 > v37) {
      unint64_t v37 = v38 >> 3;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 >> 60) {
        goto LABEL_146;
      }
      uint64_t v40 = (char *)operator new(16 * v39);
    }
    else
    {
      uint64_t v40 = 0;
    }
    long long v48 = &v40[16 * v36];
    *(_OWORD *)long long v48 = *(_OWORD *)v7;
    double v31 = (float64x2_t *)(v48 + 16);
    if (v30 != v35)
    {
      do
      {
        *((_OWORD *)v48 - 1) = *((_OWORD *)v30 - 1);
        v48 -= 16;
        v30 -= 16;
      }
      while (v30 != v35);
      uint64_t v30 = (char *)*a2;
    }
    *a2 = v48;
    a2[1] = v31;
    a2[2] = &v40[16 * v39];
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v7;
    double v31 = (float64x2_t *)(v30 + 16);
  }
  a2[1] = v31;
  unint64_t v49 = a2[2];
  if ((unint64_t)v31 < v49)
  {
    *double v31 = *(float64x2_t *)v10;
    unint64_t v50 = v31 + 1;
    goto LABEL_97;
  }
  double v51 = (float64x2_t *)*a2;
  uint64_t v52 = ((uint64_t)v31 - *a2) >> 4;
  unint64_t v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 60) {
LABEL_148:
  }
    abort();
  uint64_t v54 = v49 - (void)v51;
  if (v54 >> 3 > v53) {
    unint64_t v53 = v54 >> 3;
  }
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v55 = v53;
  }
  if (v55)
  {
    if (v55 >> 60) {
      goto LABEL_146;
    }
    float64x2_t v56 = (char *)operator new(16 * v55);
  }
  else
  {
    float64x2_t v56 = 0;
  }
  float64x2_t v57 = (float64x2_t *)&v56[16 * v52];
  unint64_t v58 = &v56[16 * v55];
  *float64x2_t v57 = *(float64x2_t *)v10;
  unint64_t v50 = v57 + 1;
  if (v31 == v51)
  {
    *a2 = v57;
    a2[1] = v50;
    a2[2] = v58;
  }
  else
  {
    do
    {
      v57[-1] = v31[-1];
      --v57;
      --v31;
    }
    while (v31 != v51);
    double v31 = (float64x2_t *)*a2;
    *a2 = v57;
    a2[1] = v50;
    a2[2] = v58;
    if (!v31) {
      goto LABEL_97;
    }
  }
  operator delete(v31);
LABEL_97:
  a2[1] = v50;
  uint64_t v59 = (float64x2_t *)(v10 + 2);
  uint64_t v60 = 1;
  while (v59 != (float64x2_t *)v12)
  {
    if (*(void *)&v59->f64[0] != *(void *)&v50[-1].f64[0] || *(void *)&v59->f64[1] != *(void *)&v50[-1].f64[1])
    {
      float64x2_t v62 = (char *)*a2;
      uint64_t v63 = *a2 - 16;
      float64x2_t v64 = *v59;
      float64x2_t v65 = v50 - 1;
      do
      {
        int8x16_t v66 = (int8x16_t)vsubq_f64(v64, *v65);
        float64x2_t v67 = vmulq_f64((float64x2_t)vextq_s8(v66, v66, 8uLL), vsubq_f64(*v65, *(float64x2_t *)(v63 + 16 * v60)));
        if (vsubq_f64(v67, (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1)).f64[0] > 0.0) {
          break;
        }
        a2[1] = v65--;
        --v60;
      }
      while (v60);
      double v68 = (char *)&v65[1];
      unint64_t v69 = a2[2];
      if ((unint64_t)&v65[1] < v69)
      {
        *(float64x2_t *)double v68 = *v59;
        unint64_t v50 = v65 + 2;
      }
      else
      {
        uint64_t v70 = (v68 - v62) >> 4;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 60) {
          abort();
        }
        uint64_t v72 = v69 - (void)v62;
        if (v72 >> 3 > v71) {
          unint64_t v71 = v72 >> 3;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          if (v73 >> 60) {
            goto LABEL_146;
          }
          double v74 = (char *)operator new(16 * v73);
        }
        else
        {
          double v74 = 0;
        }
        double v75 = (float64x2_t *)&v74[16 * v70];
        double v76 = &v74[16 * v73];
        *double v75 = *v59;
        unint64_t v50 = v75 + 1;
        if (v68 == v62)
        {
          *a2 = v75;
          a2[1] = v50;
          a2[2] = v76;
        }
        else
        {
          do
          {
            v75[-1] = *((float64x2_t *)v68 - 1);
            --v75;
            v68 -= 16;
          }
          while (v68 != v62);
          float64x2_t v62 = (char *)*a2;
          *a2 = v75;
          a2[1] = v50;
          a2[2] = v76;
          if (!v62) {
            goto LABEL_99;
          }
        }
        operator delete(v62);
      }
LABEL_99:
      a2[1] = v50;
      ++v60;
    }
    ++v59;
  }
  double v77 = (float64x2_t *)*a2;
  a3 = *(float64x2_t *)v7;
  double v78 = v50 - 1;
  do
  {
    int8x16_t v79 = (int8x16_t)vsubq_f64(a3, *v78);
    float64x2_t v80 = vmulq_f64((float64x2_t)vextq_s8(v79, v79, 8uLL), vsubq_f64(*v78, v77[v60 - 1]));
    if (vsubq_f64(v80, (float64x2_t)vdupq_laneq_s64((int64x2_t)v80, 1)).f64[0] >= 0.0) {
      break;
    }
    a2[1] = v78--;
    --v60;
  }
  while (v60);
  double v81 = v78 + 1;
  int64_t v82 = (char *)&v78[1] - (char *)v77;
  uint64_t v83 = v82 >> 4;
  if (v82 >> 4 < (unint64_t)((uint64_t)(a2[2] - (void)v77) >> 4))
  {
    if (v81 == v77)
    {
      *a2 = 16 * v83;
      a2[1] = 16 * v83;
      a2[2] = 16 * v83;
      goto LABEL_137;
    }
    if ((v82 & 0x8000000000000000) == 0)
    {
      double v84 = (float64x2_t *)((char *)operator new(v82) + 16 * v83);
      double v85 = v84;
      do
      {
        a3 = v81[-1];
        v85[-1] = a3;
        --v85;
        --v81;
      }
      while (v81 != v77);
      *a2 = v85;
      a2[1] = v84;
      a2[2] = v84;
      if (!v77) {
        goto LABEL_138;
      }
LABEL_137:
      operator delete(v77);
      goto LABEL_138;
    }
LABEL_146:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_138:
  if (v10)
  {
LABEL_139:
    operator delete(v10);
  }
  return a3.f64[0];
}

void sub_1A18BFE70(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(double *result, double *a2, double *a3, double *a4)
{
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = *a4;
  double v7 = a4[1];
  double v8 = *result;
  double v9 = result[1];
  double v10 = (v5 - v7) / (*a2 - *a4);
  if (vabdd_f64(*a2, *a4) < 2.22044605e-16) {
    double v10 = 1.79769313e308;
  }
  if (vabdd_f64(v8, v6) >= 2.22044605e-16) {
    double v11 = (v9 - v7) / (*result - *a4);
  }
  else {
    double v11 = 1.79769313e308;
  }
  if (v10 < v11 || v10 == v11 && (v4 < v8 || v4 == v8 && v5 < v9))
  {
    double v12 = *a3;
    double v13 = a3[1];
    double v14 = (v13 - v7) / (*a3 - v6);
    BOOL v15 = vabdd_f64(*a3, v6) < 2.22044605e-16;
    double v16 = 1.79769313e308;
    if (!v15) {
      double v16 = v14;
    }
    if (v16 < v10 || v16 == v10 && (v12 < v4 || v12 == v4 && v13 < v5))
    {
      *BOOL result = v12;
      result[1] = a3[1];
LABEL_48:
      *a3 = v8;
      a3[1] = v9;
      return result;
    }
    *BOOL result = v4;
    result[1] = a2[1];
    *a2 = v8;
    a2[1] = v9;
    double v31 = *a3;
    double v32 = a3[1];
    double v33 = a4[1];
    double v34 = v32 - v33;
    double v35 = v9 - v33;
    double v36 = v34 / (*a3 - *a4);
    if (vabdd_f64(*a3, *a4) < 2.22044605e-16) {
      double v36 = 1.79769313e308;
    }
    double v37 = v35 / (v8 - *a4);
    if (vabdd_f64(v8, *a4) >= 2.22044605e-16) {
      double v38 = v37;
    }
    else {
      double v38 = 1.79769313e308;
    }
    if (v36 < v38 || v36 == v38 && (v31 < v8 || v31 == v8 && v32 < v9))
    {
      *a2 = v31;
      a2[1] = a3[1];
      goto LABEL_48;
    }
  }
  else
  {
    double v17 = *a3;
    double v18 = a3[1];
    double v19 = (v18 - v7) / (*a3 - v6);
    BOOL v15 = vabdd_f64(*a3, v6) < 2.22044605e-16;
    double v20 = 1.79769313e308;
    if (!v15) {
      double v20 = v19;
    }
    if (v20 < v10 || v20 == v10 && (v17 < v4 || v17 == v4 && v18 < v5))
    {
      *a2 = v17;
      a2[1] = a3[1];
      *a3 = v4;
      a3[1] = v5;
      double v21 = *a2;
      double v22 = a2[1];
      double v23 = a4[1];
      double v24 = v22 - v23;
      double v25 = *result;
      double v26 = result[1];
      double v27 = v26 - v23;
      double v28 = v24 / (*a2 - *a4);
      if (vabdd_f64(*a2, *a4) < 2.22044605e-16) {
        double v28 = 1.79769313e308;
      }
      double v29 = v27 / (*result - *a4);
      if (vabdd_f64(v25, *a4) >= 2.22044605e-16) {
        double v30 = v29;
      }
      else {
        double v30 = 1.79769313e308;
      }
      if (v28 < v30 || v28 == v30 && (v21 < v25 || v21 == v25 && v22 < v26))
      {
        *BOOL result = v21;
        result[1] = a2[1];
        *a2 = v25;
        a2[1] = v26;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*,false>(double *a1, double *a2, double *a3, uint64_t a4, int a5)
{
void geo::Intersect::intersection<double>(double **a1, uint64_t a2, double *a3)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  double v5 = *(double *)(a2 + 200);
  double v6 = *(double *)(a2 + 224);
  double v7 = *(double *)(a2 + 232);
  double v8 = *(double *)(a2 + 208);
  v56[0] = *(double *)(a2 + 192);
  v56[1] = v5;
  v56[4] = v6 - v5;
  v56[5] = v7 - v8;
  double v9 = *(double *)(a2 + 272);
  double v10 = *(double *)(a2 + 280);
  double v12 = *(double *)(a2 + 248);
  double v11 = *(double *)(a2 + 256);
  uint64_t v13 = *(void *)(a2 + 232);
  double v57 = *(double *)(a2 + 240);
  double v58 = v12;
  double v61 = v9 - v12;
  double v62 = v10 - v11;
  double v14 = *(double *)(a2 + 320);
  double v15 = *(double *)(a2 + 328);
  double v17 = *(double *)(a2 + 296);
  double v16 = *(double *)(a2 + 304);
  uint64_t v18 = *(void *)(a2 + 280);
  double v63 = *(double *)(a2 + 288);
  double v64 = v17;
  double v67 = v14 - v17;
  double v68 = v15 - v16;
  double v19 = *(double *)(a2 + 368);
  double v20 = *(double *)(a2 + 376);
  double v21 = *(double *)(a2 + 344);
  double v22 = *(double *)(a2 + 352);
  uint64_t v23 = *(void *)(a2 + 328);
  double v69 = *(double *)(a2 + 336);
  double v70 = v21;
  double v73 = v19 - v21;
  double v74 = v20 - v22;
  double v77 = v8;
  double v78 = v57 - v56[0];
  double v75 = v56[0];
  double v76 = v5;
  double v79 = v12 - v5;
  double v80 = v11 - v8;
  double v81 = v57;
  double v82 = v12;
  double v83 = v11;
  double v84 = v69 - v57;
  double v85 = v21 - v12;
  double v86 = v22 - v11;
  double v87 = v69;
  double v88 = v21;
  double v89 = v22;
  double v90 = v63 - v69;
  double v91 = v17 - v21;
  double v92 = v16 - v22;
  double v93 = v63;
  double v94 = v17;
  double v95 = v16;
  double v96 = v56[0] - v63;
  double v97 = v5 - v17;
  double v98 = v8 - v16;
  float64x2_t v24 = *(float64x2_t *)(a2 + 216);
  v56[2] = v8;
  v56[3] = v24.f64[0] - v56[0];
  float64x2_t v99 = v24;
  double v102 = v9 - v6;
  double v103 = v10 - v7;
  float64x2_t v25 = *(float64x2_t *)(a2 + 264);
  double v59 = v11;
  double v60 = v25.f64[0] - v57;
  uint64_t v100 = v13;
  uint64_t v101 = *(_OWORD *)&vsubq_f64(v25, v24);
  float64x2_t v104 = v25;
  double v107 = v19 - v9;
  double v108 = v20 - v10;
  uint64_t v26 = *(void *)(a2 + 376);
  float64x2_t v27 = *(float64x2_t *)(a2 + 360);
  double v71 = v22;
  double v72 = v27.f64[0] - v69;
  uint64_t v105 = v18;
  uint64_t v106 = *(_OWORD *)&vsubq_f64(v27, v25);
  float64x2_t v109 = v27;
  double v112 = v14 - v19;
  double v113 = v15 - v20;
  float64x2_t v28 = *(float64x2_t *)(a2 + 312);
  double v65 = v16;
  double v66 = v28.f64[0] - v63;
  uint64_t v110 = v26;
  uint64_t v111 = *(_OWORD *)&vsubq_f64(v28, v27);
  float64x2_t v114 = v28;
  uint64_t v115 = v23;
  uint64_t v116 = *(_OWORD *)&vsubq_f64(v24, v28);
  double v117 = v6 - v14;
  double v118 = v7 - v15;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  double v29 = (double *)operator new(0x120uLL);
  uint64_t v30 = 0;
  *a1 = v29;
  a1[1] = v29;
  a1[2] = v29 + 36;
  do
  {
    double v32 = &v56[6 * v30];
    double v33 = a3[1];
    double v35 = v32[3];
    double v34 = v32[4];
    double v36 = a3[2];
    double v37 = v32[5];
    double v38 = v35 * *a3 + v34 * v33 + v37 * v36;
    if (fabs(v38) > 2.22044605e-16)
    {
      double v39 = v32[1];
      double v40 = v32[2];
      double v41 = -(a3[3] + *v32 * *a3 + v39 * v33 + v40 * v36) / v38;
      if (v41 >= 0.0 && v41 <= 1.0)
      {
        double v43 = *v32 + v41 * v35;
        double v44 = v39 + v41 * v34;
        double v45 = v40 + v41 * v37;
        unint64_t v46 = (unint64_t)a1[2];
        if ((unint64_t)v29 < v46)
        {
          *double v29 = v43;
          v29[1] = v44;
          double v31 = v29 + 3;
          v29[2] = v45;
        }
        else
        {
          double v47 = *a1;
          unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (v29 - *a1);
          unint64_t v49 = v48 + 1;
          if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (void)v47) >> 3);
          if (2 * v50 > v49) {
            unint64_t v49 = 2 * v50;
          }
          if (v50 >= 0x555555555555555) {
            unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            if (v51 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            BOOL v52 = (char *)operator new(24 * v51);
          }
          else
          {
            BOOL v52 = 0;
          }
          BOOL v53 = (double *)&v52[24 * v48];
          *BOOL v53 = v43;
          v53[1] = v44;
          v53[2] = v45;
          uint64_t v54 = v53;
          if (v29 != v47)
          {
            do
            {
              long long v55 = *(_OWORD *)(v29 - 3);
              *(v54 - 1) = *(v29 - 1);
              *(_OWORD *)(v54 - 3) = v55;
              v54 -= 3;
              v29 -= 3;
            }
            while (v29 != v47);
            double v29 = *a1;
          }
          double v31 = v53 + 3;
          *a1 = v54;
          a1[1] = v53 + 3;
          a1[2] = (double *)&v52[24 * v51];
          if (v29) {
            operator delete(v29);
          }
        }
        a1[1] = v31;
        double v29 = v31;
      }
    }
    ++v30;
  }
  while (v30 != 12);
}

void sub_1A18C149C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  v5[0] = &unk_1EF526378;
  v7[3] = v7;
  double v6 = v5;
  v7[0] = &unk_1EF526378;
  int v8 = 3;
  ecs2::Runtime::queueCommand(a2, (uint64_t)v7);
  if (v8 != -1) {
    ((void (*)(char *, void *))off_1EF591020[v8])(&v4, v7);
  }
  int v8 = -1;
  uint64_t result = (uint64_t)v6;
  if (v6 == v5)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    uint64_t result = (*(uint64_t (**)(void))(*v6 + 40))();
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_117;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x64780CBD71DF7CF5;
    if (a3 <= 0x64780CBD71DF7CF5) {
      uint64_t v4 = 0x64780CBD71DF7CF5 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x64780CBD71DF7CF5;
  }
  uint64_t v9 = *(void **)(a2 + 8 * v4);
  if (!v9) {
    goto LABEL_25;
  }
  double v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x64780CBD71DF7CF5)
      {
        if (v10[2] == 0x64780CBD71DF7CF5) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      double v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x64780CBD71DF7CF5) {
      break;
    }
    if (v11 >= a3) {
      v11 %= a3;
    }
    if (v11 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    double v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x64780CBD71DF7CF5) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v14 = 0x8677AD8BA9352C1DLL;
    if (a3 <= 0x8677AD8BA9352C1DLL) {
      unint64_t v14 = 0x8677AD8BA9352C1DLL % a3;
    }
  }
  else
  {
    unint64_t v14 = (a3 - 1) & 0x8677AD8BA9352C1DLL;
  }
  double v15 = *(void **)(a2 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  double v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0x8677AD8BA9352C1DLL)
      {
        if (v16[2] == 0x8677AD8BA9352C1DLL) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      double v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0x8677AD8BA9352C1DLL)
    {
      if (v17 >= a3) {
        v17 %= a3;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0x8677AD8BA9352C1DLL)
    {
LABEL_35:
      double v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0x8677AD8BA9352C1DLL)
  {
    uint64_t v6 = *(void *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v20 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v20 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v20 = (a3 - 1) & 0x1AF456233693CD46;
  }
  double v21 = *(void **)(a2 + 8 * v20);
  if (!v21) {
    goto LABEL_71;
  }
  double v22 = (void *)*v21;
  if (!v22) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0x1AF456233693CD46)
      {
        if (v22[2] == 0x1AF456233693CD46) {
          goto LABEL_69;
        }
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      double v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = v22[1];
    if (v23 != 0x1AF456233693CD46)
    {
      if (v23 >= a3) {
        v23 %= a3;
      }
      if (v23 != v20) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v22[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      double v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v25 = v22[5];
  if (*(void *)(v25 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v8 = *(void *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v26 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4) {
      unint64_t v26 = 0xC97B9E962ADF4AD4 % a3;
    }
  }
  else
  {
    unint64_t v26 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  float64x2_t v27 = *(void **)(a2 + 8 * v26);
  if (!v27) {
    goto LABEL_94;
  }
  float64x2_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0xC97B9E962ADF4AD4)
      {
        if (v28[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_92;
        }
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      float64x2_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v29 = v28[1];
    if (v29 != 0xC97B9E962ADF4AD4)
    {
      if (v29 >= a3) {
        v29 %= a3;
      }
      if (v29 != v26) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v28[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_81:
      float64x2_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) == 0xC97B9E962ADF4AD4)
  {
    uint64_t v5 = *(void *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v32 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988) {
      uint64_t v32 = 0x7851AF310F49C988 % a3;
    }
  }
  else
  {
    uint64_t v32 = (a3 - 1) & 0x7851AF310F49C988;
  }
  double v33 = *(void **)(a2 + 8 * v32);
  if (!v33) {
    goto LABEL_117;
  }
  double v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0x7851AF310F49C988)
      {
        if (v34[2] == 0x7851AF310F49C988) {
          goto LABEL_115;
        }
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      double v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0x7851AF310F49C988) {
      break;
    }
    if (v35 >= a3) {
      v35 %= a3;
    }
    if (v35 != v32) {
      goto LABEL_117;
    }
LABEL_104:
    double v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_117;
    }
  }
  if (v34[2] != 0x7851AF310F49C988) {
    goto LABEL_104;
  }
LABEL_115:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) != 0x7851AF310F49C988)
  {
LABEL_117:
    uint64_t v38 = 0;
    goto LABEL_118;
  }
  uint64_t v38 = *(void *)(v37 + 32);
LABEL_118:
  *uint64_t result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

void md::PendingSceneLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t **)(*(void *)a3 + 64); i; uint64_t i = (uint64_t *)*i)
  {
    int v5 = *((unsigned __int16 *)i + 8);
    uint64_t v6 = *(void **)(a1 + 392);
    uint64_t v7 = (unsigned __int16 *)v6[14];
    uint64_t v8 = (unsigned __int16 *)v6[15];
    if (v7 != v8)
    {
      while (*v7 != v5)
      {
        v7 += 56;
        if (v7 == v8)
        {
          uint64_t v7 = (unsigned __int16 *)v6[15];
          break;
        }
      }
    }
    *((_DWORD *)v7 + 14) = *((_DWORD *)i + 6);
    if (v7 + 28 != (unsigned __int16 *)(i + 3))
    {
      *((_DWORD *)v7 + 24) = *((_DWORD *)i + 16);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)v7 + 8, (uint64_t *)i[6]);
      uint64_t v6 = *(void **)(a1 + 392);
    }
    double v10 = (unsigned __int16 *)v6[17];
    uint64_t v9 = (unsigned __int16 *)v6[18];
    if (v10 != v9)
    {
      while (*v10 != v5)
      {
        v10 += 56;
        if (v10 == v9)
        {
          double v10 = v9;
          break;
        }
      }
    }
    *((_DWORD *)v10 + 14) = *((_DWORD *)i + 18);
    if (v10 + 28 != (unsigned __int16 *)(i + 9))
    {
      *((_DWORD *)v10 + 24) = *((_DWORD *)i + 28);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)v10 + 8, (uint64_t *)i[12]);
    }
  }
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v6 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      long long v7 = *((_OWORD *)a2 + 1);
      v6[4] = a2[4];
      *((_OWORD *)v6 + 1) = v7;
      uint64_t v8 = (void *)*v6;
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      uint64_t v6 = v8;
      if (!v8) {
        goto LABEL_7;
      }
    }
    do
    {
      double v16 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v16;
    }
    while (v16);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      uint64_t v9 = operator new(0x28uLL);
      *(void *)uint64_t v9 = 0;
      uint64_t v10 = *((unsigned __int8 *)a2 + 17);
      uint64_t v11 = *((int *)a2 + 5);
      uint64_t v12 = *((int *)a2 + 6);
      uint64_t v13 = *((unsigned __int8 *)a2 + 16);
      v9[16] = v13;
      v9[17] = v10;
      *((_DWORD *)v9 + 5) = v11;
      *((_DWORD *)v9 + 6) = v12;
      unint64_t v14 = (v10
           - 0x61C8864680B583EBLL
           + ((v13 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v13 - 0x61C8864680B583EBLL) >> 2)) ^ (v13 - 0x61C8864680B583EBLL);
      unint64_t v15 = (v11 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
      *((void *)v9 + 1) = (v12 - 0x61C8864680B583EBLL + (v15 << 6) + (v15 >> 2)) ^ v15;
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi((uint64_t)a1, (uint64_t)v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1A18C1F70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(unsigned __int8 *)(a2 + 17)
      + ((*(unsigned __int8 *)(a2 + 16) - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*(unsigned __int8 *)(a2 + 16) - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(unsigned __int8 *)(a2 + 16) - 0x61C8864680B583EBLL);
  unint64_t v5 = (*(int *)(a2 + 20) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  unint64_t v6 = (*(int *)(a2 + 24) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  *(void *)(a2 + 8) = v6;
  unint64_t v7 = *(void *)(a1 + 8);
  float v8 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v9 = *(float *)(a1 + 32);
  if (!v7 || (float)(v9 * (float)v7) < v8)
  {
    BOOL v10 = 1;
    if (v7 >= 3) {
      BOOL v10 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v7);
    unint64_t v12 = vcvtps_u32_f32(v8 / v9);
    if (v11 <= v12) {
      size_t prime = v12;
    }
    else {
      size_t prime = v11;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_117;
    }
    if (prime >= v7) {
      goto LABEL_43;
    }
    unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      unint64_t v27 = std::__next_prime(v27);
    }
    else
    {
      uint64_t v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2) {
        unint64_t v27 = v29;
      }
    }
    if (prime <= v27) {
      size_t prime = v27;
    }
    if (prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_117:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v14 = operator new(8 * prime);
      unint64_t v15 = *(void **)a1;
      *(void *)a1 = v14;
      if (v15) {
        operator delete(v15);
      }
      uint64_t v16 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v16++) = 0;
      while (prime != v16);
      uint64_t v18 = a1 + 16;
      unint64_t v17 = *(uint64_t ***)(a1 + 16);
      if (v17)
      {
        size_t v19 = (size_t)v17[1];
        size_t v20 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v19 >= prime) {
            v19 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v19) = v18;
          for (uint64_t i = *v17; *v17; uint64_t i = *v17)
          {
            size_t v33 = i[1];
            if (v33 >= prime) {
              v33 %= prime;
            }
            if (v33 == v19)
            {
              unint64_t v17 = (uint64_t **)i;
            }
            else
            {
              double v34 = i;
              if (*(void *)(*(void *)a1 + 8 * v33))
              {
                do
                {
                  unint64_t v35 = v34;
                  double v34 = (uint64_t *)*v34;
                }
                while (v34
                     && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v34 + 16)
                     && *((unsigned __int8 *)i + 17) == *((unsigned __int8 *)v34 + 17)
                     && *((_DWORD *)i + 5) == *((_DWORD *)v34 + 5)
                     && *((_DWORD *)i + 6) == *((_DWORD *)v34 + 6));
                *unint64_t v17 = v34;
                uint64_t v36 = 8 * v33;
                void *v35 = **(void **)(*(void *)a1 + v36);
                **(void **)(*(void *)a1 + v36) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v33) = v17;
                unint64_t v17 = (uint64_t **)i;
                size_t v19 = v33;
              }
            }
          }
        }
        else
        {
          size_t v21 = v19 & v20;
          *(void *)(*(void *)a1 + 8 * v21) = v18;
          for (uint64_t j = *v17; *v17; uint64_t j = *v17)
          {
            size_t v23 = j[1] & v20;
            if (v23 == v21)
            {
              unint64_t v17 = (uint64_t **)j;
            }
            else
            {
              uint64_t v24 = j;
              if (*(void *)(*(void *)a1 + 8 * v23))
              {
                do
                {
                  uint64_t v25 = v24;
                  uint64_t v24 = (uint64_t *)*v24;
                }
                while (v24
                     && *((unsigned __int8 *)j + 16) == *((unsigned __int8 *)v24 + 16)
                     && *((unsigned __int8 *)j + 17) == *((unsigned __int8 *)v24 + 17)
                     && *((_DWORD *)j + 5) == *((_DWORD *)v24 + 5)
                     && *((_DWORD *)j + 6) == *((_DWORD *)v24 + 6));
                *unint64_t v17 = v24;
                uint64_t v26 = 8 * v23;
                void *v25 = **(void **)(*(void *)a1 + v26);
                **(void **)(*(void *)a1 + v26) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v23) = v17;
                unint64_t v17 = (uint64_t **)j;
                size_t v21 = v23;
              }
            }
          }
        }
      }
      unint64_t v7 = prime;
    }
    else
    {
      uint64_t v54 = *(void **)a1;
      *(void *)a1 = 0;
      if (v54) {
        operator delete(v54);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    unint64_t v32 = v6;
    if (v7 <= v6) {
      unint64_t v32 = v6 % v7;
    }
  }
  else
  {
    unint64_t v32 = (v7 - 1) & v6;
  }
  uint64_t v37 = *(uint64_t **)(*(void *)a1 + 8 * v32);
  if (v37)
  {
    int v38 = *(unsigned __int8 *)(a2 + 16);
    int v39 = *(unsigned __int8 *)(a2 + 17);
    int v40 = *(_DWORD *)(a2 + 20);
    int v41 = *(_DWORD *)(a2 + 24);
    if (v31.u32[0] >= 2uLL)
    {
      int v47 = 0;
      do
      {
        double v43 = v37;
        uint64_t v37 = (uint64_t *)*v37;
        if (!v37) {
          break;
        }
        unint64_t v48 = v37[1];
        unint64_t v49 = v48;
        if (v48 >= v7) {
          unint64_t v49 = v48 % v7;
        }
        if (v49 != v32) {
          break;
        }
        BOOL v50 = v48 == v6
           && *((unsigned __int8 *)v37 + 16) == v38
           && *((unsigned __int8 *)v37 + 17) == v39
           && *((_DWORD *)v37 + 5) == v40
           && *((_DWORD *)v37 + 6) == v41;
        int v51 = v47 & !v50;
        v47 |= v50;
      }
      while (v51 != 1);
    }
    else
    {
      int v42 = 0;
      do
      {
        double v43 = v37;
        uint64_t v37 = (uint64_t *)*v37;
        if (!v37) {
          break;
        }
        uint64_t v44 = v37[1];
        if ((v44 & (v7 - 1)) != v32) {
          break;
        }
        BOOL v45 = v44 == v6
           && *((unsigned __int8 *)v37 + 16) == v38
           && *((unsigned __int8 *)v37 + 17) == v39
           && *((_DWORD *)v37 + 5) == v40
           && *((_DWORD *)v37 + 6) == v41;
        char v46 = v42 & !v45;
        v42 |= v45;
      }
      while ((v46 & 1) == 0);
    }
  }
  else
  {
    double v43 = 0;
  }
  unint64_t v52 = *(void *)(a2 + 8);
  if (v31.u32[0] > 1uLL)
  {
    if (v52 >= v7) {
      v52 %= v7;
    }
  }
  else
  {
    v52 &= v7 - 1;
  }
  if (!v43)
  {
    *(void *)a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v52) = a1 + 16;
    if (!*(void *)a2) {
      goto LABEL_104;
    }
    unint64_t v53 = *(void *)(*(void *)a2 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v53 >= v7) {
        v53 %= v7;
      }
    }
    else
    {
      v53 &= v7 - 1;
    }
LABEL_103:
    *(void *)(*(void *)a1 + 8 * v53) = a2;
    goto LABEL_104;
  }
  *(void *)a2 = *v43;
  *double v43 = a2;
  if (*(void *)a2)
  {
    unint64_t v53 = *(void *)(*(void *)a2 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v53 >= v7) {
        v53 %= v7;
      }
    }
    else
    {
      v53 &= v7 - 1;
    }
    if (v53 != v52) {
      goto LABEL_103;
    }
  }
LABEL_104:
  ++*(void *)(a1 + 24);
}

void sub_1A18C25B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  v22[0] = &unk_1EF5262A0;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5262A0;
  int v26 = 3;
  ecs2::Runtime::queueCommand(a2, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  uint8x8_t v3 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5262E8;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5262E8;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v3, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v4 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526450;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526450;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v4, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v5 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526498;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526498;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v5, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v6 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5264E0;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5264E0;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v6, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v7 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526528;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526528;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v7, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  float v8 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526570;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526570;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v8, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  float v9 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5900A8;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5900A8;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v9, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  BOOL v10 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5900F0;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5900F0;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v10, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v11 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5265B8;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5265B8;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v11, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v12 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF590168;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF590168;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v12, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  uint64_t v13 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5263C0;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5263C0;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v13, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v14 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF5266D8;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF5266D8;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v14, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v15 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526408;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526408;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v15, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  uint64_t v16 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526330;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526330;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v16, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v17 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526690;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526690;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v17, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  uint64_t v18 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526648;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526648;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v18, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  size_t v19 = *(void **)(a1 + 8);
  v22[0] = &unk_1EF526600;
  uint64_t v25 = v24;
  size_t v23 = v22;
  v24[0] = &unk_1EF526600;
  int v26 = 3;
  ecs2::Runtime::queueCommand(v19, (uint64_t)v24);
  if (v26 != -1) {
    ((void (*)(char *, void *))off_1EF590078[v26])(&v21, v24);
  }
  int v26 = -1;
  uint64_t result = (uint64_t)v23;
  if (v23 == v22)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    uint64_t result = (*(uint64_t (**)(void))(*v23 + 40))();
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(v3, a2[1]);
    unint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

{
  uint64_t v3;

  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t **md::PointLabelFeature::addElement(uint64_t a1, void **a2, int a3, __n128 a4, __n128 a5)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v120 = 0;
  unint64_t v121 = 0;
  unint64_t v122 = 0;
  {
    operator new();
  }
  uint64_t v123 = mdm::Allocator::instance(void)::alloc;
  unint64_t v7 = *a2 + 1;
  uint64_t v8 = *v7;
  if (*v7)
  {
    if (!*a2) {
      unint64_t v7 = 0;
    }
    unint64_t v9 = v7[9];
    unint64_t v10 = *(void *)(a1 + 432);
    if (md::DebugStreamingPOIFeatureID && md::DebugStreamingPOIFeatureID == *(void *)(v8 + 40))
    {
      if (GEOGetVectorKitStreamingPOILog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_61);
      }
      unint64_t v11 = (id)GEOGetVectorKitStreamingPOILog_log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        if (*a2) {
          uint64_t v12 = (uint64_t)(*a2 + 1);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(void *)(v12 + 8);
        uint64_t v14 = *(void *)(a1 + 432);
        uint64_t v15 = *(void *)(v12 + 72);
        *(_DWORD *)long long buf = 134219008;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v14;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v126 = v15;
        LOWORD(v127) = 1024;
        *(_DWORD *)((char *)&v127 + 2) = v9 < v10;
        WORD3(v127) = 1024;
        DWORD2(v127) = v9 > v10;
        _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_DEBUG, "PointFeature::addElement: geoTile=%p oldVersion=%llu newVersion=%llu isOldVersion=%i isNewVersion=%i", buf, 0x2Cu);
      }
    }
    if (v9 < v10)
    {
      if (*(void *)(a1 + 480)) {
        md::PointPosition::addElement((unint64_t *)(*(void *)(a1 + 456) + 40), a2);
      }
      goto LABEL_168;
    }
    if (v9 > v10)
    {
      uint64_t v115 = v8;
      double v117 = a2;
      uint64_t v118 = a1;
      uint64_t v16 = *(void **)(a1 + 456);
      uint64_t v119 = (void *)(a1 + 464);
      if (v16 != (void *)(a1 + 464))
      {
        __n128 v17 = 0uLL;
        while (1)
        {
          size_t v19 = (void **)v16[5];
          uint64_t v18 = (void **)v16[6];
          if (v19 != v18) {
            break;
          }
LABEL_72:
          unint64_t v48 = (void *)v16[1];
          if (v48)
          {
            do
            {
              unint64_t v49 = v48;
              unint64_t v48 = (void *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              unint64_t v49 = (void *)v16[2];
              BOOL v46 = *v49 == (void)v16;
              uint64_t v16 = v49;
            }
            while (!v46);
          }
          uint64_t v16 = v49;
          if (v49 == v119) {
            goto LABEL_78;
          }
        }
        size_t v20 = (void *)v121;
        while (1)
        {
          if ((unint64_t)v20 < v122)
          {
            if (v20)
            {
              *size_t v20 = 0;
              char v21 = *v19;
              *size_t v20 = *v19;
              if (v21) {
                ++*v21;
              }
            }
            ++v20;
            goto LABEL_25;
          }
          uint64_t v22 = (void **)v20 - v120;
          if ((unint64_t)(v22 + 1) >> 61) {
            abort();
          }
          unint64_t v23 = (uint64_t)(v122 - (void)v120) >> 2;
          if (v23 <= v22 + 1) {
            unint64_t v23 = v22 + 1;
          }
          uint64_t v24 = v122 - (unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
          if (v24)
          {
            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128))(*(void *)v123 + 16))(v123, 8 * v24, 8, a4, a5, (__n128)0);
            int v26 = (void *)(v25 + 8 * v22);
            uint64_t v27 = v25 + 8 * v24;
            if (v25)
            {
              void *v26 = 0;
              uint8x8_t v28 = *v19;
              void *v26 = *v19;
              __n128 v17 = 0uLL;
              if (v28) {
                ++*v28;
              }
            }
            else
            {
              __n128 v17 = 0uLL;
            }
          }
          else
          {
            uint64_t v27 = 0;
            int v26 = (void *)(8 * v22);
          }
          size_t v20 = v26 + 1;
          uint64_t v29 = v120;
          unint64_t v30 = v121;
          if ((void **)v121 != v120) {
            break;
          }
          uint64_t v120 = (void **)v26;
          unint64_t v121 = (unint64_t)(v26 + 1);
          unint64_t v42 = v122;
          unint64_t v122 = v27;
          if (v30) {
            goto LABEL_71;
          }
LABEL_25:
          unint64_t v121 = (unint64_t)v20;
          if (++v19 == v18) {
            goto LABEL_72;
          }
        }
        unint64_t v31 = v121 - (void)v120 - 8;
        if (v31 > 0x37
          && ((unint64_t v32 = v31 >> 3, (unint64_t)&v26[-v32 - 1] < v121)
            ? (BOOL v33 = v121 - 8 * v32 - 8 >= (unint64_t)v26)
            : (BOOL v33 = 1),
              v33))
        {
          unint64_t v34 = v32 + 1;
          uint64_t v35 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v36 = (void *)(v121 - 8 * v35);
          uint64_t v37 = (__n128 *)(v26 - 4);
          int v38 = (__n128 *)(v121 - 32);
          uint64_t v39 = v35;
          do
          {
            *uint64_t v37 = v17;
            v37[1] = v17;
            a5 = *v38;
            a4 = v38[1];
            *uint64_t v37 = *v38;
            v37[1] = a4;
            v37 -= 2;
            *int v38 = v17;
            v38[1] = v17;
            v38 -= 2;
            v39 -= 4;
          }
          while (v39);
          v26 -= v35;
          if (v34 == v35)
          {
LABEL_55:
            unint64_t v30 = (unint64_t)v120;
            unint64_t v41 = v121;
            uint64_t v120 = (void **)v26;
            unint64_t v121 = (unint64_t)v20;
            unint64_t v42 = v122;
            unint64_t v122 = v27;
            if (v41 != v30)
            {
              unint64_t v43 = v41;
              do
              {
                BOOL v45 = *(void **)(v43 - 8);
                v43 -= 8;
                uint64_t v44 = v45;
                if (v45)
                {
                  BOOL v46 = (*v44)-- == 1;
                  if (v46)
                  {
                    int v47 = (std::__shared_weak_count *)v44[3];
                    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                      std::__shared_weak_count::__release_weak(v47);
                    }
                    {
                      operator new();
                    }
                    (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, *(void *)(v41 - 8), 152);
                    *(void *)(v41 - 8) = 0;
                    __n128 v17 = 0uLL;
                  }
                }
                unint64_t v41 = v43;
              }
              while (v43 != v30);
            }
            if (!v30) {
              goto LABEL_25;
            }
LABEL_71:
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v123 + 40))(v123, v30, v42 - v30);
            __n128 v17 = 0uLL;
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v36 = (void *)v121;
        }
        do
        {
          *--int v26 = 0;
          uint64_t v40 = *--v36;
          void *v26 = v40;
          *uint64_t v36 = 0;
        }
        while (v36 != v29);
        goto LABEL_55;
      }
LABEL_78:
      a1 = v118;
      std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(v118 + 456, *(void **)(v118 + 464));
      *(void *)(v118 + 480) = 0;
      *(void *)(v118 + 456) = v119;
      *(void *)(v118 + 464) = 0;
      uint64_t v50 = *(void *)(v118 + 552);
      uint64_t v51 = *(void *)(v118 + 544);
      a2 = (void **)v117;
      if (v50 == v51)
      {
LABEL_79:
        *(void *)(v118 + 552) = v51;
        if (*v117) {
          uint64_t v52 = *v117 + 8;
        }
        else {
          uint64_t v52 = 0;
        }
        *(void *)(v118 + 432) = *(void *)(v52 + 72);
        uint64_t v54 = *(void *)(v115 + 24);
        uint64_t v53 = *(void *)(v115 + 32);
        if (v53) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(v118 + 656) = v54;
        long long v55 = *(std::__shared_weak_count **)(v118 + 664);
        *(void *)(v118 + 664) = v53;
        if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        *(unsigned char *)(v118 + 448) = 1;
        float v56 = *(float *)(v115 + 164);
        if (v56 == 0.0) {
          float v56 = 254.0;
        }
        *(float *)(v118 + 368) = v56;
        float v57 = *(float *)(v115 + 68);
        *(float *)(v118 + 352) = v57;
        float v58 = *(float *)(v115 + 160);
        if (v58 == 101.0) {
          float v59 = v57;
        }
        else {
          float v59 = *(float *)(v115 + 160);
        }
        if (v58 == 100.0) {
          float v59 = 253.0;
        }
        *(float *)(v118 + 356) = v59;
        float v60 = *(float *)(v115 + 168);
        if (v60 == 101.0) {
          float v61 = v57;
        }
        else {
          float v61 = *(float *)(v115 + 168);
        }
        if (v60 == 100.0) {
          float v62 = 253.0;
        }
        else {
          float v62 = v61;
        }
        *(float *)(v118 + 360) = v62;
        float v63 = *(float *)(v115 + 172);
        if (v63 != 101.0) {
          float v57 = *(float *)(v115 + 172);
        }
        if (v63 == 100.0) {
          float v57 = 253.0;
        }
        *(float *)(v118 + 364) = v57;
        goto LABEL_105;
      }
      while (1)
      {
        if (*(char *)(v50 - 9) < 0)
        {
          (*(void (**)(void, void, uint64_t))(**(void **)(v50 - 8) + 40))(*(void *)(v50 - 8), *(void *)(v50 - 32), *(void *)(v50 - 16) & 0x7FFFFFFFFFFFFFFFLL);
          if (*(char *)(v50 - 41) < 0) {
LABEL_129:
          }
            (*(void (**)(void, void, uint64_t))(**(void **)(v50 - 40) + 40))(*(void *)(v50 - 40), *(void *)(v50 - 64), *(void *)(v50 - 48) & 0x7FFFFFFFFFFFFFFFLL);
        }
        else if (*(char *)(v50 - 41) < 0)
        {
          goto LABEL_129;
        }
        v50 -= 64;
        if (v50 == v51) {
          goto LABEL_79;
        }
      }
    }
  }
LABEL_105:
  if (*(void *)(a1 + 480))
  {
    uint64_t v64 = *a2 ? (uint64_t)(*a2 + 1) : 0;
    unsigned int v65 = *(char *)(v64 + 129);
    double v66 = ldexp(1.0, v65);
    double v67 = *(void **)(a1 + 456);
    if (v67 != (void *)(a1 + 464))
    {
      double v68 = 156543.035 / v66 * (156543.035 / v66);
      do
      {
        if (*(unsigned char *)(v64 + 68))
        {
          if (*((unsigned char *)v67 + 116)) {
            goto LABEL_114;
          }
        }
        else
        {
          long double v72 = *(double *)(v64 + 48) * 6.28318531;
          long double v73 = exp(*(double *)(v64 + 56) * 6.28318531 + -3.14159265);
          double v74 = atan(v73) * 2.0 + -1.57079633;
          long double v75 = fmod(v72, 6.28318531);
          double v76 = fmod(v75 + 6.28318531, 6.28318531) + -3.14159265;
          __double2 v77 = __sincos_stret(v74);
          double v78 = 6378137.0 / sqrt(v77.__sinval * v77.__sinval * -0.00669437999 + 1.0);
          __double2 v79 = __sincos_stret(v76);
          *(double *)(v64 + 24) = v78 * v77.__cosval * v79.__cosval;
          *(double *)(v64 + 32) = v78 * v77.__cosval * v79.__sinval;
          *(double *)(v64 + 40) = v77.__sinval * 0.99330562 * v78;
          *(unsigned char *)(v64 + 68) = 1;
          if (*((unsigned char *)v67 + 116))
          {
LABEL_114:
            double v69 = *((double *)v67 + 9);
            double v70 = *((double *)v67 + 10);
            double v71 = *((double *)v67 + 11);
            goto LABEL_117;
          }
        }
        long double v80 = *((double *)v67 + 12) * 6.28318531;
        long double v81 = exp(*((double *)v67 + 13) * 6.28318531 + -3.14159265);
        double v82 = atan(v81) * 2.0 + -1.57079633;
        long double v83 = fmod(v80, 6.28318531);
        double v84 = fmod(v83 + 6.28318531, 6.28318531) + -3.14159265;
        __double2 v85 = __sincos_stret(v82);
        double v86 = 6378137.0 / sqrt(v85.__sinval * v85.__sinval * -0.00669437999 + 1.0);
        __double2 v87 = __sincos_stret(v84);
        double v69 = v86 * v85.__cosval * v87.__cosval;
        double v70 = v86 * v85.__cosval * v87.__sinval;
        *((double *)v67 + 9) = v69;
        *((double *)v67 + 10) = v70;
        double v71 = v85.__sinval * 0.99330562 * v86;
        *((double *)v67 + 11) = v71;
        *((unsigned char *)v67 + 116) = 1;
LABEL_117:
        double v88 = *(double *)(v64 + 24);
        if ((v88 - v69) * (v88 - v69)
           + (*(double *)(v64 + 32) - v70) * (*(double *)(v64 + 32) - v70)
           + (*(double *)(v64 + 40) - v71) * (*(double *)(v64 + 40) - v71) <= v68)
        {
          if (*((unsigned __int8 *)v67 + 120) < v65)
          {
            if (*((unsigned char *)v67 + 122))
            {
              *((double *)v67 + 9) = v88;
              v67[10] = *(void *)(v64 + 32);
              v67[11] = *(void *)(v64 + 40);
              v67[12] = *(void *)(v64 + 48);
              v67[13] = *(void *)(v64 + 56);
              int v112 = *(_DWORD *)(v64 + 64);
              *(_DWORD *)((char *)v67 + 115) = *(_DWORD *)(v64 + 67);
              *((_DWORD *)v67 + 28) = v112;
            }
            else
            {
              int v113 = *((_DWORD *)v67 + 28);
              *((double *)v67 + 9) = v88;
              v67[10] = *(void *)(v64 + 32);
              v67[11] = *(void *)(v64 + 40);
              v67[12] = *(void *)(v64 + 48);
              v67[13] = *(void *)(v64 + 56);
              int v114 = *(_DWORD *)(v64 + 64);
              *(_DWORD *)((char *)v67 + 115) = *(_DWORD *)(v64 + 67);
              *((_DWORD *)v67 + 28) = v114;
              *((_DWORD *)v67 + 28) = v113;
            }
            *((unsigned char *)v67 + 120) = v65;
          }
          int v103 = md::PointPosition::addElement(v67 + 5, a2);
          goto LABEL_145;
        }
        double v89 = (void *)v67[1];
        if (v89)
        {
          do
          {
            double v90 = v89;
            double v89 = (void *)*v89;
          }
          while (v89);
        }
        else
        {
          do
          {
            double v90 = (void *)v67[2];
            BOOL v46 = *v90 == (void)v67;
            double v67 = v90;
          }
          while (!v46);
        }
        double v67 = v90;
      }
      while (v90 != (void *)(a1 + 464));
    }
  }
  unsigned int v91 = *(_DWORD *)(a1 + 488);
  *(_DWORD *)(a1 + 488) = v91 + 1;
  memset(buf, 0, sizeof(buf));
  {
    operator new();
  }
  uint64_t v126 = mdm::Allocator::instance(void)::alloc;
  if (*a2) {
    uint64_t v92 = (uint64_t)(*a2 + 1);
  }
  else {
    uint64_t v92 = 0;
  }
  long long v93 = *(_OWORD *)(v92 + 24);
  uint64_t v128 = *(void *)(v92 + 40);
  long long v127 = v93;
  long long v129 = *(_OWORD *)(v92 + 48);
  int v94 = *(_DWORD *)(v92 + 67);
  v130[0] = *(float *)(v92 + 64);
  *(_DWORD *)((char *)v130 + 3) = v94;
  LOWORD(v131) = *(unsigned __int8 *)(v92 + 129);
  HIBYTE(v131) = 0;
  BYTE2(v131) = v130[0] != 3.4028e38;
  md::PointPosition::addElement((unint64_t *)buf, a2);
  uint64_t v95 = *(void *)(a1 + 464);
  if (v95)
  {
    while (1)
    {
      while (1)
      {
        double v97 = (uint64_t *)v95;
        unsigned int v98 = *(_DWORD *)(v95 + 32);
        if (v91 >= v98) {
          break;
        }
        uint64_t v95 = *v97;
        double v96 = v97;
        if (!*v97) {
          goto LABEL_141;
        }
      }
      if (v98 >= v91) {
        break;
      }
      uint64_t v95 = v97[1];
      if (!v95)
      {
        double v96 = v97 + 1;
        goto LABEL_141;
      }
    }
  }
  else
  {
    double v96 = (uint64_t *)(a1 + 464);
    double v97 = (uint64_t *)(a1 + 464);
LABEL_141:
    uint64_t v99 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 472) + 16))(*(void *)(a1 + 472), 128, 8);
    *(_DWORD *)(v99 + 32) = v91;
    *(_OWORD *)(v99 + 40) = *(_OWORD *)buf;
    uint64_t v100 = v126;
    *(void *)(v99 + 56) = *(void *)&buf[16];
    *(void *)(v99 + 64) = v100;
    memset(buf, 0, sizeof(buf));
    *(void *)(v99 + 88) = v128;
    *(_OWORD *)(v99 + 72) = v127;
    *(_OWORD *)(v99 + 96) = v129;
    float v101 = v130[0];
    *(float *)(v99 + 115) = *(float *)((char *)v130 + 3);
    *(float *)(v99 + 112) = v101;
    *(_DWORD *)(v99 + 120) = v131;
    *(void *)uint64_t v99 = 0;
    *(void *)(v99 + 8) = 0;
    *(void *)(v99 + 16) = v97;
    *double v96 = v99;
    uint64_t v102 = **(void **)(a1 + 456);
    if (v102)
    {
      *(void *)(a1 + 456) = v102;
      uint64_t v99 = *v96;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 464), (uint64_t *)v99);
    ++*(void *)(a1 + 480);
  }
  double v124 = buf;
  std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v124);
  int v103 = 1;
LABEL_145:
  float64x2_t v104 = v120;
  uint64_t v105 = (void **)v121;
  if (v120 != (void **)v121)
  {
    uint64_t v106 = (unint64_t *)(*(void *)(a1 + 456) + 40);
    do
    {
      double v107 = *v104;
      *(void *)long long buf = v107;
      if (v107) {
        ++*v107;
      }
      md::PointPosition::addElement(v106, (void **)buf);
      if (v107)
      {
        BOOL v46 = (*v107)-- == 1;
        if (v46)
        {
          double v108 = (std::__shared_weak_count *)v107[3];
          if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
          {
            operator new();
          }
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(void *)buf, 152);
        }
      }
      ++v104;
    }
    while (v104 != v105);
  }
  if (v103)
  {
    if (*a2) {
      unint64_t v109 = (unint64_t)(*a2 + 1);
    }
    else {
      unint64_t v109 = 0;
    }
    md::PointLabelFeatureElement::updateText(v109, (const md::PointLabelFeature *)a1, a3);
    if (*a2) {
      uint64_t v110 = (md::PointLabelFeatureElement *)(*a2 + 1);
    }
    else {
      uint64_t v110 = 0;
    }
    md::PointLabelFeatureElement::updateLabelPlacements(v110, (const md::PointLabelFeature *)a1);
  }
LABEL_168:
  *(void *)long long buf = &v120;
  return std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);
}

void sub_1A18C4554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19)
{
  a19 = &a14;
  std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&a19);
  _Unwind_Resume(a1);
}

uint64_t **std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = **result;
    unint64_t v5 = *result;
    if (v3 != v2)
    {
      unint64_t v6 = result;
      uint64_t v7 = v1[1];
      do
      {
        unint64_t v9 = *(void **)(v7 - 8);
        v7 -= 8;
        uint64_t v8 = v9;
        if (v9)
        {
          if ((*v8)-- == 1)
          {
            unint64_t v11 = (std::__shared_weak_count *)v8[3];
            if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v4);
              std::__shared_weak_count::__release_weak(v11);
            }
            {
              operator new();
            }
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(void *)(v3 - 8), 152);
            *(void *)(v3 - 8) = 0;
          }
        }
        uint64_t v3 = v7;
      }
      while (v7 != v2);
      unint64_t v5 = *v6;
    }
    v1[1] = v2;
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)v5[3] + 40);
    return (uint64_t **)v12();
  }
  return result;
}

uint64_t md::PointLabelFeature::newTextPart(uint64_t *a1, void *a2, unsigned int a3, int a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a1[68];
  if (a3 >= (unint64_t)((a1[69] - v5) >> 6)) {
    return 0;
  }
  unint64_t v10 = a1 + 68;
  if (!*(unsigned char *)(*a2 + 3032))
  {
    uint64_t v11 = a2[2];
    uint64_t v12 = *(void *)(v11 + 272);
    if (v12)
    {
      if (!*(unsigned char *)(v12 + 72)) {
        return 0;
      }
    }
    else
    {
      uint64_t v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
      uint64_t v14 = *v13;
      *(void *)(v11 + 272) = *v13;
      if (!*(unsigned char *)(v14 + 72)) {
        return 0;
      }
    }
    uint64_t v5 = *v10;
  }
  uint64_t v15 = v5 + (v4 << 6);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    return 0;
  }
  uint64_t v16 = a1[63];
  if (!v16) {
    goto LABEL_15;
  }
  int v17 = *(unsigned __int8 *)(v16 + 88);
  if (v17 == 3) {
    return 0;
  }
  if (!v17)
  {
LABEL_15:
    if (!*(unsigned char *)(a2[2] + 121)) {
      return 0;
    }
  }
  if (!*(unsigned char *)(*a2 + 3032))
  {
    uint64_t v18 = a2[2];
    uint64_t v19 = *(void *)(v18 + 272);
    if (!v19)
    {
      size_t v20 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
      uint64_t v19 = *v20;
      *(void *)(v18 + 272) = *v20;
    }
    if (!*(unsigned char *)(v19 + 73)) {
      return 0;
    }
  }
  uint64_t v21 = a2[2];
  BOOL v22 = a4 == 1;
  uint64_t v23 = v21 + 280;
  if (a4 == 1) {
    uint64_t v24 = 6;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(v23 + 8 * (a4 == 1));
  if (v25)
  {
    if (vabds_f32(*(float *)(v25 + 8), *(float *)(v21 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v21, v25, v24);
      uint64_t v25 = *(void *)(v23 + 8 * v22);
    }
  }
  else
  {
    uint64_t v25 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v21, v24);
    *(void *)(v23 + 8 * v22) = v25;
  }
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = a2[2];
  uint64_t v28 = *(void *)(v27 + 272);
  if (v28)
  {
    if (*(unsigned char *)(v28 + 70)) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
  uint64_t v36 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
  uint64_t v37 = *v36;
  *(void *)(v27 + 272) = *v36;
  if (!*(unsigned char *)(v37 + 70))
  {
LABEL_40:
    if (*(float *)(v26 + 100) > 0.0)
    {
      char v38 = *(unsigned char *)(a2[1] + 404);
      unint64_t v39 = (*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1);
      uint64_t v40 = (unsigned __int8 *)a1[20];
      unint64_t v41 = (unsigned __int8 *)a1[21];
      if (v39 > 0x6DB6DB6DB6DB6DB7 * ((v41 - v40) >> 3))
      {
        md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
        uint64_t v40 = (unsigned __int8 *)a1[20];
        unint64_t v41 = (unsigned __int8 *)a1[21];
      }
      uint64_t v42 = v26 + 72;
      md::TextDataStore::textDataForZoom(&v85, v40, v41, a3, v26 + 72);
      md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v75, " … ", 0);
      uint64_t shared_owners = HIBYTE(v76);
      if (v76 < 0) {
        uint64_t shared_owners = v75.__shared_owners_;
      }
      if (shared_owners)
      {
        uint64_t v44 = (unsigned __int8 *)a1[68];
        BOOL v45 = (unsigned __int8 *)a1[69];
        if (v44 == v45)
        {
          unsigned __int8 v46 = 0;
LABEL_98:
          if ((unint64_t)v45 >= a1[70])
          {
            uint64_t v67 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v10, (long long *)&v75);
          }
          else
          {
            std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__construct_one_at_end[abi:nn180100]<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v10, (long long *)&v75);
            uint64_t v67 = (uint64_t)(v45 + 64);
          }
          a1[69] = v67;
        }
        else
        {
          unsigned __int8 v46 = 0;
          while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v44, (unsigned __int8 *)&v75) & 1) == 0)
          {
            ++v46;
            v44 += 64;
            if (v44 == v45)
            {
              if (v46 <= 0x64u) {
                goto LABEL_98;
              }
              goto LABEL_51;
            }
          }
        }
      }
      else
      {
LABEL_51:
        unsigned __int8 v46 = -1;
      }
      if (SHIBYTE(v79) < 0) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v80 + 40))(v80, v78[0], v79 & 0x7FFFFFFFFFFFFFFFLL);
      }
      if (SHIBYTE(v76) < 0) {
        (*(void (**)(uint64_t, std::__shared_count_vtbl *, uint64_t))(*(void *)v77 + 40))(v77, v75.__vftable, v76 & 0x7FFFFFFFFFFFFFFFLL);
      }
      unint64_t v68 = (*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1);
      double v69 = (unsigned __int8 *)a1[20];
      double v70 = (unsigned __int8 *)a1[21];
      if (v68 > 0x6DB6DB6DB6DB6DB7 * ((v70 - v69) >> 3))
      {
        md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
        double v69 = (unsigned __int8 *)a1[20];
        double v70 = (unsigned __int8 *)a1[21];
      }
      md::TextDataStore::textDataForZoom(&v75, v69, v70, v46, v42);
      if (v85)
      {
        double v71 = (mdm::Allocator *)std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> &,std::shared_ptr<md::TextDataString> &,unsigned char const&,void>((uint64_t *)&v83, (uint64_t)v85, (uint64_t)v86, &v75, v38);
        if (v83)
        {
          uint64_t v72 = mdm::Allocator::instance(v71);
          uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72 + 16))(v72, 1168, 8);
          md::PointLabelFeature::textColor(v74, a1, (uint64_t)a2, a4);
          md::HorizontalTextLabelPart::HorizontalTextLabelPart(v47, &v83, (uint64_t)v74, a4);
        }
        else
        {
          uint64_t v47 = 0;
        }
        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v83);
      }
      else
      {
        uint64_t v47 = 0;
      }
      long double v73 = (std::__shared_weak_count *)v75.__shared_owners_;
      if (v75.__shared_owners_
        && !atomic_fetch_add((atomic_ullong *volatile)(v75.__shared_owners_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
      double v66 = v86;
      if (!v86) {
        goto LABEL_120;
      }
      goto LABEL_118;
    }
    return 0;
  }
LABEL_29:
  if (*(char *)(v15 + 23) < 0) {
    uint64_t v15 = *(void *)v15;
  }
  unint64_t v30 = (std::__shared_count *)a2[1];
  uint64_t v29 = a2[2];
  uint64_t v31 = *a2;
  unint64_t v32 = (std::__shared_weak_count *)operator new(0x148uLL);
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB50;
  v32[1].std::__shared_count = 0u;
  *(_OWORD *)&v32[1].__shared_weak_owners_ = 0u;
  v32[2].__shared_owners_ = 0;
  {
    operator new();
  }
  uint64_t v33 = mdm::Allocator::instance(void)::alloc;
  v32[6].__vftable = 0;
  v32[3].__vftable = 0;
  v32[3].__shared_owners_ = 0;
  v32[2].__shared_weak_owners_ = v33;
  LOWORD(v32[3].__shared_weak_owners_) = 0;
  v32[4].__vftable = (std::__shared_weak_count_vtbl *)&v32[5].__shared_owners_;
  v32[4].__shared_owners_ = (uint64_t)&v32[5].__shared_owners_;
  v32[4].__shared_weak_owners_ = (uint64_t)&v32[5].__shared_owners_;
  v32[5].__vftable = (std::__shared_weak_count_vtbl *)2;
  LOBYTE(v32[5].__shared_weak_owners_) = 0;
  *(_DWORD *)((char *)&v32[5].__shared_weak_owners_ + 1) = 16843008;
  BYTE5(v32[5].__shared_weak_owners_) = 0;
  v32[6].__shared_owners_ = 0;
  v32[6].__shared_weak_owners_ = 0;
  {
    operator new();
  }
  v32[7].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
  v32[7].__shared_owners_ = 0;
  *(uint64_t *)((char *)&v32[7].__shared_owners_ + 5) = 0;
  LOBYTE(v32[8].__vftable) = 4;
  *(std::__shared_weak_count_vtbl **)((char *)&v32[8].__vftable + 4) = 0;
  BYTE4(v32[8].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v32[8].__shared_weak_owners_ + 4) = 0xFFFF3F800000;
  WORD2(v32[9].__vftable) = 0;
  LODWORD(v32[9].__shared_owners_) = 1065353216;
  v32[13].__shared_owners_ = 0;
  v32[10].std::__shared_count = 0u;
  *(_OWORD *)&v32[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[11].__shared_owners_ = 0u;
  v32[12].__vftable = 0;
  __double2 v85 = (md::LabelImageKey *)&v32[1];
  double v86 = v32;
  LOBYTE(v32[5].__shared_weak_owners_) = 5;
  LODWORD(v32[3].__shared_owners_) = *(_DWORD *)(v29 + 88);
  v32[1].std::__shared_count = v30[7];
  uint64_t v34 = *(void *)(v29 + 296);
  if (!v34)
  {
    uint64_t v35 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v29, 0);
    uint64_t v34 = *v35;
    *(void *)(v29 + 296) = *v35;
  }
  *(std::__shared_weak_count_vtbl **)((char *)&v32[8].__vftable + 4) = *(std::__shared_weak_count_vtbl **)(v34 + 56);
  std::__shared_count v75 = (std::__shared_count)0;
  uint64_t v76 = 0;
  {
    operator new();
  }
  uint64_t v77 = mdm::Allocator::instance(void)::alloc;
  memset(v78, 0, 13);
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v75, (char *)v15);
  if (SHIBYTE(v32[6].__shared_weak_owners_) < 0)
  {
    if (v76 >= 0) {
      unint64_t v49 = (long long *)&v75;
    }
    else {
      unint64_t v49 = (long long *)v75.__vftable;
    }
    if (v76 >= 0) {
      size_t v50 = HIBYTE(v76);
    }
    else {
      size_t v50 = v75.__shared_owners_;
    }
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v32[6].__vftable, v49, v50);
  }
  else if (v76 < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>(&v32[6], v75.__vftable, v75.__shared_owners_);
  }
  else
  {
    v32[6].std::__shared_count = v75;
    v32[6].__shared_weak_owners_ = v76;
  }
  v32[7].__shared_owners_ = v78[0];
  LODWORD(v32[7].__shared_weak_owners_) = v78[1];
  BYTE4(v32[7].__shared_weak_owners_) = BYTE4(v78[1]);
  uint64_t v51 = *(void *)(v29 + 272);
  if (!v51)
  {
    uint64_t v52 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v29);
    uint64_t v51 = *v52;
    *(void *)(v29 + 272) = *v52;
  }
  size_t v53 = *(unsigned __int8 *)(v51 + 231);
  if (*(char *)(v51 + 231) < 0)
  {
    if (!*(void *)(v51 + 216))
    {
LABEL_81:
      uint64_t v61 = *(void *)(v31 + 264);
      long double v83 = (md::LabelImageKey *)&v32[1];
      uint64_t v84 = (uint64_t)v32;
LABEL_82:
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_83;
    }
  }
  else if (!*(unsigned char *)(v51 + 231))
  {
    goto LABEL_81;
  }
  uint64_t v54 = (long long *)(v51 + 208);
  p_uint64_t shared_weak_owners = (void **)&v32[1].__shared_weak_owners_;
  if (&v32[1].__shared_weak_owners_ == (uint64_t *)(v51 + 208)) {
    goto LABEL_81;
  }
  if ((SHIBYTE(v32[2].__shared_owners_) & 0x80000000) == 0)
  {
    if ((v53 & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)p_shared_weak_owners, *(void **)(v51 + 208), *(void *)(v51 + 216));
    }
    else
    {
      long long v56 = *v54;
      v32[2].__shared_owners_ = *(void *)(v51 + 224);
      *(_OWORD *)p_uint64_t shared_weak_owners = v56;
    }
    goto LABEL_81;
  }
  float v58 = *(long long **)(v51 + 208);
  size_t v57 = *(void *)(v51 + 216);
  if ((v53 & 0x80u) == 0) {
    float v59 = v54;
  }
  else {
    float v59 = v58;
  }
  if ((v53 & 0x80u) == 0) {
    size_t v60 = v53;
  }
  else {
    size_t v60 = v57;
  }
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(p_shared_weak_owners, v59, v60);
  unint64_t v32 = v86;
  uint64_t v61 = *(void *)(v31 + 264);
  long double v83 = v85;
  uint64_t v84 = (uint64_t)v86;
  if (v86) {
    goto LABEL_82;
  }
LABEL_83:
  md::LabelImageLoader::loadImage(&v81, v61, &v83);
  float v63 = (std::__shared_weak_count *)v84;
  if (v84 && !atomic_fetch_add((atomic_ullong *volatile)(v84 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  if (SHIBYTE(v76) < 0) {
    (*(void (**)(uint64_t, std::__shared_count_vtbl *, uint64_t))(*(void *)v77 + 40))(v77, v75.__vftable, v76 & 0x7FFFFFFFFFFFFFFFLL);
  }
  uint64_t v64 = v86;
  if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v81)
  {
    {
      operator new();
    }
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v62.n128_f64[0] = md::IconLabelPart::IconLabelPart(v47, &v81);
    *(void *)uint64_t v65 = &unk_1EF537E00;
    *(unsigned char *)(v65 + 557) = 1;
    *(unsigned char *)(v65 + 656) = 1;
    double v66 = v82;
    if (!v82) {
      goto LABEL_120;
    }
    goto LABEL_118;
  }
  uint64_t v47 = 0;
  double v66 = v82;
  if (v82)
  {
LABEL_118:
    if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v62);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
LABEL_120:
  if (v47) {
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v47 + 176))(v47, 5, v62);
  }
  return v47;
}

void sub_1A18C51E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3 - 96);
  _Unwind_Resume(a1);
}

void sub_1A18C5284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  if (SHIBYTE(a6) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a7 + 40))(a7, a4, a6 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v13 - 96);
  _Unwind_Resume(a1);
}

uint64_t md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  size_t v3 = *((void *)a2 + 1);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t v5 = a1[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a1 + 1);
  }
  if (v4 != v5) {
    return 0;
  }
  if (v6 >= 0) {
    unint64_t v9 = a1;
  }
  else {
    unint64_t v9 = *(unsigned __int8 **)a1;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v9, v3)) {
      return 0;
    }
  }
  else if (v2)
  {
    unint64_t v10 = a2;
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v2) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v11 = a2[55];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = a2[55];
  }
  else {
    uint64_t v12 = *((void *)a2 + 5);
  }
  uint64_t v13 = a1[55];
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a1 + 5);
  }
  if (v12 != v13) {
    return 0;
  }
  uint64_t v15 = (const void **)(a2 + 32);
  uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 4);
  int v17 = a1 + 32;
  uint64_t v16 = v18;
  if (v14 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v16;
  }
  if ((v11 & 0x80) != 0) {
    return memcmp(*v15, v19, *((void *)a2 + 5)) == 0;
  }
  if (!a2[55]) {
    return 1;
  }
  uint64_t v20 = v11 - 1;
  do
  {
    int v22 = *(unsigned __int8 *)v15;
    uint64_t v15 = (const void **)((char *)v15 + 1);
    int v21 = v22;
    int v24 = *v19++;
    int v23 = v24;
    BOOL v26 = v20-- != 0;
    uint64_t result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

void md::TextDataStore::textDataForZoom(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  if (a2 == a3)
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v7 = a2;
  while (*v7 != a4)
  {
    v7 += 56;
    if (v7 == a3) {
      goto LABEL_5;
    }
  }
  long long v53 = 0uLL;
  uint64_t v8 = (void *)*((void *)v7 + 3);
  unint64_t v9 = (void *)*((void *)v7 + 4);
  if (v8 == v9)
  {
LABEL_34:
    int v24 = 0;
    goto LABEL_35;
  }
  int v10 = *(unsigned __int8 *)(a5 + 36);
  int v11 = *(unsigned __int8 *)(a5 + 37);
  int v12 = *(unsigned __int8 *)(a5 + 38);
  int v13 = *(unsigned __int8 *)(a5 + 39);
  int v14 = *(unsigned __int8 *)(a5 + 40);
  char v15 = *(unsigned char *)(a5 + 23);
  if (v15 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a5 + 8);
  }
  if (v15 >= 0) {
    int v17 = (const std::string::value_type *)a5;
  }
  else {
    int v17 = *(const std::string::value_type **)a5;
  }
  while (1)
  {
    uint64_t v19 = *v8;
    uint64_t v20 = *(unsigned __int8 **)(*v8 + 16);
    if (v20[36] != v10 || v20[37] != v11 || v20[38] != v12 || v20[39] != v13 || v20[40] != v14) {
      goto LABEL_15;
    }
    uint64_t v21 = v20[23];
    uint64_t v22 = (v21 & 0x80u) == 0 ? v20[23] : *((void *)v20 + 1);
    if (v22 != v16) {
      goto LABEL_15;
    }
    if ((v21 & 0x80) == 0) {
      break;
    }
    uint64_t v52 = v17;
    int v51 = v14;
    uint64_t v50 = v16;
    int v18 = memcmp(*(const void **)v20, v17, *((void *)v20 + 1));
    int v17 = v52;
    uint64_t v16 = v50;
    int v14 = v51;
    if (!v18) {
      goto LABEL_30;
    }
LABEL_15:
    v8 += 2;
    if (v8 == v9) {
      goto LABEL_34;
    }
  }
  if (v20[23])
  {
    int v23 = v17;
    while (*v20 == *(unsigned __int8 *)v23)
    {
      ++v20;
      ++v23;
      if (!--v21) {
        goto LABEL_30;
      }
    }
    goto LABEL_15;
  }
LABEL_30:
  int v24 = (std::__shared_weak_count *)v8[1];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)&v53 + 1) = v24;
  if (v19)
  {
LABEL_83:
    *a1 = v19;
    a1[1] = v24;
  }
  else
  {
LABEL_35:
    if (*(float *)(a5 + 28) != 0.0)
    {
      uint64_t v25 = *(unsigned __int8 *)(a5 + 23);
      if ((v25 & 0x80u) != 0) {
        uint64_t v25 = *(void *)(a5 + 8);
      }
      if (v25)
      {
        {
          operator new();
        }
        uint64_t v26 = mdm::Allocator::instance(void)::alloc;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 160, 8);
        *(void *)uint64_t v27 = &unk_1EF57FDF0;
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = v26;
        *(void *)(v27 + 32) = *((void *)v7 + 1);
        uint64_t v28 = *((void *)v7 + 2);
        *(void *)(v27 + 40) = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (std::string *)operator new(0x48uLL);
        unint64_t v30 = v29;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF57F840;
        uint64_t v31 = v29 + 1;
        if (*(char *)(a5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v29 + 1, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        }
        else
        {
          *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
          v29[1].__r_.__value_.__r.__words[2] = *(void *)(a5 + 16);
        }
        *(_OWORD *)&v30[2].__r_.__value_.__l.__data_ = *(_OWORD *)(a5 + 24);
        LOWORD(v30[2].__r_.__value_.__r.__words[2]) = *(_WORD *)(a5 + 40);
        *(void *)(v27 + 48) = v31;
        *(void *)(v27 + 56) = v30;
        *(void *)(v27 + 64) = &unk_1EF5592D8;
        *(void *)(v27 + 72) = 0;
        *(void *)(v27 + 96) = 0;
        *(void *)(v27 + 104) = 0;
        *(void *)(v27 + 88) = 0;
        {
          operator new();
        }
        *(void *)(v27 + 112) = mdm::Allocator::instance(void)::alloc;
        *(void *)(v27 + 120) = 0;
        *(void *)(v27 + 128) = 0;
        *(void *)(v27 + 136) = 0;
        {
          operator new();
        }
        *(void *)(v27 + 144) = mdm::Allocator::instance(void)::alloc;
        *(unsigned char *)(v27 + 152) = 1;
        *(_DWORD *)(v27 + 153) = 0;
        *(unsigned char *)(v27 + 157) = 0;
        atomic_fetch_add(md::TextDataString::_totalLabelTextData, 1u);
        unint64_t v32 = (std::__shared_weak_count *)*((void *)&v53 + 1);
        *(void *)&long long v54 = v27 + 32;
        *((void *)&v54 + 1) = v27;
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        uint64_t v33 = (void *)*((void *)v7 + 4);
        unint64_t v34 = *((void *)v7 + 5);
        if ((unint64_t)v33 >= v34)
        {
          uint64_t v36 = *((void *)v7 + 3);
          uint64_t v37 = ((uint64_t)v33 - v36) >> 4;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60) {
            abort();
          }
          uint64_t v39 = v34 - v36;
          if (v39 >> 3 > v38) {
            unint64_t v38 = v39 >> 3;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
            uint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v40 = v38;
          }
          if (v40)
          {
            uint64_t v41 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v7 + 6) + 16))(*((void *)v7 + 6), 16 * v40, 8);
            uint64_t v42 = (_OWORD *)(v41 + 16 * v37);
            uint64_t v43 = v41 + 16 * v40;
            if (v41)
            {
              *uint64_t v42 = v54;
              if (*((void *)&v54 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v54 + 1) + 8), 1uLL, memory_order_relaxed);
              }
            }
          }
          else
          {
            uint64_t v43 = 0;
            uint64_t v42 = (_OWORD *)(16 * v37);
          }
          uint64_t v35 = v42 + 1;
          uint64_t v44 = (void *)*((void *)v7 + 3);
          BOOL v45 = (void *)*((void *)v7 + 4);
          if (v45 == v44)
          {
            *((void *)v7 + 3) = v42;
            *((void *)v7 + 4) = v35;
            uint64_t v48 = *((void *)v7 + 5);
            *((void *)v7 + 5) = v43;
          }
          else
          {
            do
            {
              long long v46 = *((_OWORD *)v45 - 1);
              v45 -= 2;
              *--uint64_t v42 = v46;
              *BOOL v45 = 0;
              v45[1] = 0;
            }
            while (v45 != v44);
            BOOL v45 = (void *)*((void *)v7 + 3);
            uint64_t v47 = (void *)*((void *)v7 + 4);
            *((void *)v7 + 3) = v42;
            *((void *)v7 + 4) = v35;
            uint64_t v48 = *((void *)v7 + 5);
            for (*((void *)v7 + 5) = v43; v47 != v45; v47 -= 2)
            {
              unint64_t v49 = (std::__shared_weak_count *)*(v47 - 1);
              if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
          }
          if (v45) {
            (*(void (**)(void, void *, uint64_t))(**((void **)v7 + 6) + 40))(*((void *)v7 + 6), v45, v48 - (void)v45);
          }
        }
        else
        {
          if (v33)
          {
            *uint64_t v33 = v27 + 32;
            v33[1] = v27;
            if (v27) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
            }
          }
          uint64_t v35 = v33 + 2;
        }
        *((void *)v7 + 4) = v35;
        int v24 = (std::__shared_weak_count *)*((void *)&v54 + 1);
        uint64_t v19 = v54;
        goto LABEL_83;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1A18C5AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v14 + 40))(v14, v13, 160);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp(uint64_t a1, const char *a2, const char *a3)
{
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = "";
  }
  {
    operator new();
  }
  uint64_t v6 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  size_t v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    unint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v10 + 1, 1);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v11 | 0x8000000000000000;
    *(void *)a1 = v9;
    goto LABEL_12;
  }
  *(unsigned char *)(a1 + 23) = v7;
  unint64_t v9 = (void *)a1;
  if (v7) {
LABEL_12:
  }
    memmove(v9, v5, v8);
  *((unsigned char *)v9 + v8) = 0;
  if (!a3) {
    a3 = "";
  }
  {
    operator new();
  }
  uint64_t v12 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  size_t v13 = strlen(a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v16 + 1, 1);
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v17 | 0x8000000000000000;
    *(void *)(a1 + 32) = v15;
  }
  else
  {
    char v15 = (void *)(a1 + 32);
    *(unsigned char *)(a1 + 55) = v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  memmove(v15, a3, v14);
LABEL_24:
  *((unsigned char *)v15 + v14) = 0;
  return a1;
}

void sub_1A18C5DDC(_Unwind_Exception *a1)
{
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_string(v1);
  _Unwind_Resume(a1);
}

unint64_t md::PointLabelFeatureElement::updateText(unint64_t this, const md::PointLabelFeature *a2, int a3)
{
  *(unsigned char *)(this + 130) = -1;
  if (*(void *)(this + 72) >= *((void *)a2 + 54))
  {
    uint64_t v5 = this;
    if (!*(unsigned char *)(this + 136))
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      if (!a3
        || (geo::codec::featureGetLocalizedLabel(*(void *)this, 0, (unint64_t *)&v28, (unint64_t *)&v27), (size_t v14 = v28) == 0)|| !*v28)
      {
        geo::codec::featureGetNativeLabel(*(void *)v5, 0, &v28, &v27);
        size_t v14 = v28;
      }
      this = md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, v14, v27);
      char v15 = (void *)HIBYTE(v30);
      int v16 = SHIBYTE(v30);
      uint64_t v17 = __src[1];
      if (v30 < 0) {
        char v15 = __src[1];
      }
      if (v15)
      {
        int v18 = (unsigned __int8 *)*((void *)a2 + 68);
        unint64_t v19 = *((void *)a2 + 69);
        if (v18 == (unsigned __int8 *)v19)
        {
          unsigned __int8 v20 = 0;
          unint64_t v19 = *((void *)a2 + 68);
LABEL_30:
          if (v19 >= *((void *)a2 + 70))
          {
            this = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)a2 + 68, (long long *)__src);
          }
          else
          {
            if (v19)
            {
              *(void *)(v19 + 24) = v31;
              if (v16 < 0)
              {
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v19, __src[0], (unint64_t)v17);
              }
              else
              {
                long long v21 = *(_OWORD *)__src;
                *(void *)(v19 + 16) = v30;
                *(_OWORD *)unint64_t v19 = v21;
              }
              uint64_t v25 = (void **)(v19 + 32);
              *(void *)(v19 + 56) = v34;
              if (SHIBYTE(v33) < 0)
              {
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v25, (void *)v32, *((unint64_t *)&v32 + 1));
              }
              else
              {
                long long v26 = v32;
                *(void *)(v19 + 48) = v33;
                *(_OWORD *)uint64_t v25 = v26;
              }
            }
            this = v19 + 64;
            *((void *)a2 + 69) = v19 + 64;
          }
          *((void *)a2 + 69) = this;
        }
        else
        {
          unsigned __int8 v20 = 0;
          while (1)
          {
            this = md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v18, (unsigned __int8 *)__src);
            if (this) {
              break;
            }
            ++v20;
            v18 += 64;
            if (v18 == (unsigned __int8 *)v19)
            {
              if (v20 <= 0x64u) {
                goto LABEL_30;
              }
              goto LABEL_28;
            }
          }
        }
      }
      else
      {
LABEL_28:
        unsigned __int8 v20 = -1;
      }
      *(unsigned char *)(v5 + 130) = v20;
      if ((SHIBYTE(v33) & 0x80000000) == 0) {
        goto LABEL_63;
      }
LABEL_62:
      this = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v34 + 40))(v34, v32, v33 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_63:
      if (SHIBYTE(v30) < 0) {
        return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v31 + 40))(v31, __src[0], v30 & 0x7FFFFFFFFFFFFFFFLL);
      }
      return this;
    }
    this = (*(uint64_t (**)(const md::PointLabelFeature *))(*(void *)a2 + 72))(a2);
    uint64_t v6 = *(void *)(this + 48);
    if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(this + 56) - v6) >> 3) <= (unint64_t)*(unsigned __int8 *)(v5 + 134)) {
      return this;
    }
    if (a3)
    {
      uint64_t v7 = v6 + 104 * *(unsigned __int8 *)(v5 + 134);
      size_t v8 = (void *)(v7 + 56);
      int v9 = *(char *)(v7 + 79);
      if (v9 < 0)
      {
        if (v8[1])
        {
LABEL_7:
          this = (unint64_t)md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__src, v8);
          uint64_t v10 = (void *)HIBYTE(v30);
          if (v30 < 0) {
            uint64_t v10 = __src[1];
          }
          if (v10)
          {
            uint64_t v11 = (unsigned __int8 *)*((void *)a2 + 68);
            uint64_t v12 = (unsigned __int8 *)*((void *)a2 + 69);
            if (v11 != v12)
            {
              unsigned __int8 v13 = 0;
              while (1)
              {
                this = md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v11, (unsigned __int8 *)__src);
                if (this) {
                  goto LABEL_53;
                }
                ++v13;
                v11 += 64;
                if (v11 == v12)
                {
                  if (v13 <= 0x64u) {
                    goto LABEL_49;
                  }
                  goto LABEL_44;
                }
              }
            }
            unsigned __int8 v13 = 0;
            uint64_t v12 = (unsigned __int8 *)*((void *)a2 + 68);
LABEL_49:
            int v24 = (uint64_t *)((char *)a2 + 544);
            if ((unint64_t)v12 < *((void *)a2 + 70))
            {
LABEL_50:
              std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__construct_one_at_end[abi:nn180100]<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v24, (long long *)__src);
              this = (unint64_t)(v12 + 64);
LABEL_52:
              *((void *)a2 + 69) = this;
              goto LABEL_53;
            }
LABEL_51:
            this = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v24, (long long *)__src);
            goto LABEL_52;
          }
          goto LABEL_44;
        }
      }
      else if ((_BYTE)v9)
      {
        goto LABEL_7;
      }
    }
    this = (unint64_t)md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__src, (void *)(v6 + 104 * *(unsigned __int8 *)(v5 + 134) + 8));
    uint64_t v22 = (void *)HIBYTE(v30);
    if (v30 < 0) {
      uint64_t v22 = __src[1];
    }
    if (v22)
    {
      int v23 = (unsigned __int8 *)*((void *)a2 + 68);
      uint64_t v12 = (unsigned __int8 *)*((void *)a2 + 69);
      if (v23 != v12)
      {
        unsigned __int8 v13 = 0;
        while (1)
        {
          this = md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v23, (unsigned __int8 *)__src);
          if (this) {
            break;
          }
          ++v13;
          v23 += 64;
          if (v23 == v12)
          {
            if (v13 <= 0x64u) {
              goto LABEL_46;
            }
            goto LABEL_44;
          }
        }
LABEL_53:
        *(unsigned char *)(v5 + 130) = v13;
        if ((SHIBYTE(v33) & 0x80000000) == 0) {
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      unsigned __int8 v13 = 0;
      uint64_t v12 = (unsigned __int8 *)*((void *)a2 + 68);
LABEL_46:
      int v24 = (uint64_t *)((char *)a2 + 544);
      if ((unint64_t)v12 < *((void *)a2 + 70)) {
        goto LABEL_50;
      }
      goto LABEL_51;
    }
LABEL_44:
    unsigned __int8 v13 = -1;
    goto LABEL_53;
  }
  return this;
}

void sub_1A18C61DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v4 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v4 + 24) + 40))(*(void *)(v4 + 24), *(void *)v4, *(void *)(v4 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v3 + 552) = v4;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    abort();
  }
  uint64_t v5 = a1 + 3;
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v3) {
    unint64_t v3 = v6 >> 5;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0;
  uint64_t v8 = 0x3FFFFFFFFFFFFFFLL;
  if (!v7) {
    uint64_t v8 = v3;
  }
  if (v8)
  {
    uint64_t v10 = v8 << 6;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 16))(*v5, v8 << 6, 8);
    uint64_t v12 = v11 + (v2 << 6);
    uint64_t v13 = v11 + v10;
    if (v11)
    {
      uint64_t v14 = v11;
      *(void *)(v12 + 24) = *((void *)a2 + 3);
      if (*((char *)a2 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)(v11 + (v2 << 6)), *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v15 = *a2;
        *(void *)(v12 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v12 = v15;
      }
      uint64_t v16 = v14 + (v2 << 6);
      uint64_t v17 = (void **)(v16 + 32);
      *(void *)(v16 + 56) = *((void *)a2 + 7);
      if (*((char *)a2 + 55) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v17, *((void **)a2 + 4), *((void *)a2 + 5));
      }
      else
      {
        long long v18 = a2[2];
        *(void *)(v16 + 48) = *((void *)a2 + 6);
        *(_OWORD *)uint64_t v17 = v18;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = v2 << 6;
  }
  uint64_t v19 = v12 + 64;
  uint64_t v21 = *a1;
  uint64_t v20 = a1[1];
  if (v20 == *a1)
  {
    uint64_t v24 = a1[1];
  }
  else
  {
    do
    {
      long long v22 = *(_OWORD *)(v20 - 48);
      *(_OWORD *)(v12 - 64) = *(_OWORD *)(v20 - 64);
      *(_OWORD *)(v12 - 48) = v22;
      *(void *)(v20 - 56) = 0;
      *(void *)(v20 - 48) = 0;
      *(void *)(v20 - 64) = 0;
      long long v23 = *(_OWORD *)(v20 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(v20 - 32);
      *(_OWORD *)(v12 - 16) = v23;
      v12 -= 64;
      *(void *)(v20 - 24) = 0;
      *(void *)(v20 - 16) = 0;
      *(void *)(v20 - 32) = 0;
      v20 -= 64;
    }
    while (v20 != v21);
    uint64_t v24 = *a1;
    uint64_t v20 = a1[1];
  }
  *a1 = v12;
  a1[1] = v19;
  uint64_t v25 = a1[2];
  a1[2] = v13;
  if (v20 != v24)
  {
    uint64_t v26 = v20 - 32;
    while (1)
    {
      uint64_t v27 = v26 - 32;
      if (*(char *)(v26 + 23) < 0)
      {
        (*(void (**)(void, void, uint64_t))(**(void **)(v26 + 24) + 40))(*(void *)(v26 + 24), *(void *)v26, *(void *)(v26 + 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v26 - 9) < 0) {
LABEL_26:
        }
          (*(void (**)(void, void, uint64_t))(**(void **)(v26 - 8) + 40))(*(void *)(v26 - 8), *(void *)(v26 - 32), *(void *)(v26 - 16) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v26 - 9) < 0)
      {
        goto LABEL_26;
      }
      v26 -= 64;
      if (v27 == v24)
      {
        uint64_t v20 = v24;
        break;
      }
    }
  }
  if (v20) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 40))(*v5, v20, v25 - v20);
  }
  return v19;
}

void sub_1A18C64D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), *(void *)v2, *(void *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::__split_buffer<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelPart::setContentType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 562) = a2;
  return result;
}

uint64_t md::HorizontalTextLabelPart::HorizontalTextLabelPart(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t result = md::TextLabelPart::TextLabelPart(a1, a2, a4);
  *(void *)uint64_t result = &unk_1EF543018;
  *(void *)(result + 960) = 0x3F80000000000000;
  *(_OWORD *)(result + 968) = 0u;
  *(_OWORD *)(result + 984) = 0u;
  *(_OWORD *)(result + 1000) = 0u;
  *(_OWORD *)(result + 1011) = 0u;
  *(_WORD *)(result + 1027) = 1;
  *(unsigned char *)(result + 1029) = 0;
  *(void *)(result + 1032) = 0x3F80000000000000;
  *(_OWORD *)(result + 1040) = 0u;
  *(_OWORD *)(result + 1056) = 0u;
  *(_OWORD *)(result + 1072) = 0u;
  *(_OWORD *)(result + 1083) = 0u;
  *(_WORD *)(result + 1099) = 1;
  *(unsigned char *)(result + 1101) = 0;
  *(_DWORD *)(result + 1104) = 1;
  *(unsigned char *)(result + 1108) = 10;
  *(_DWORD *)(result + 1110) = 16842752;
  *(unsigned char *)(result + 1114) = 0;
  *(void *)(result + 1120) = 0;
  *(_DWORD *)(result + 1128) = 0;
  *(_WORD *)(result + 1132) = 258;
  *(unsigned char *)(result + 1166) = 0;
  *(_DWORD *)(result + 1141) = 0;
  *(void *)(result + 1134) = 0;
  *(void *)(result + 1148) = 0;
  *(unsigned char *)(result + 1156) = 0;
  if (*(unsigned char *)(a3 + 10))
  {
    *(unsigned char *)(result + 1160) = 0;
    if (*(unsigned char *)(a3 + 4))
    {
      *(_DWORD *)(result + 1156) = *(_DWORD *)a3;
      *(unsigned char *)(result + 1160) = 1;
    }
    *(unsigned char *)(result + 1161) = 0;
    *(unsigned char *)(result + 1165) = 0;
    if (*(unsigned char *)(a3 + 9))
    {
      *(_DWORD *)(result + 1161) = *(_DWORD *)(a3 + 5);
      *(unsigned char *)(result + 1165) = 1;
    }
    *(unsigned char *)(result + 1166) = 1;
  }
  *(unsigned char *)(result + 557) = 2;
  *(unsigned char *)(result + 1144) = *(unsigned char *)(**(void **)(*(void *)(result + 576) + 16) + 130);
  *(unsigned char *)(result + 1108) = 0;
  *(unsigned char *)(result + 1104) = 2;
  return result;
}

uint64_t md::TextLabelPart::TextLabelPart(uint64_t a1, void *a2, char a3)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_1A28FC750;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(a1 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(a1 + 312) = xmmword_1A28FC750;
  *(void *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(void *)a1 = &unk_1EF533088;
  *(_DWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 628) = xmmword_1A28FF880;
  *(_DWORD *)(a1 + 644) = 0;
  __asm { FMOV            V3.2S, #1.0 }
  *(void *)(a1 + 648) = _D3;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 682) = 0u;
  *(_OWORD *)(a1 + 698) = xmmword_1A28FF890;
  *(unsigned char *)(a1 + 718) = 0;
  *(_DWORD *)(a1 + 714) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 740) = xmmword_1A28FF880;
  *(_DWORD *)(a1 + 756) = 0;
  *(void *)(a1 + 760) = _D3;
  *(_OWORD *)(a1 + 794) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 810) = xmmword_1A28FF890;
  *(unsigned char *)(a1 + 830) = 0;
  *(_DWORD *)(a1 + 826) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(unsigned char *)(a1 + 864) = a3;
  *(_DWORD *)(a1 + 868) = 0;
  *(_DWORD *)(a1 + 865) = 0;
  *(_WORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 1065353216;
  *(unsigned char *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 928) = 1;
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 584);
    *(void *)(a1 + 576) = v11;
    *(void *)(a1 + 584) = v10;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    *(void *)(a1 + 576) = v11;
    *(void *)(a1 + 584) = 0;
  }
  uint64_t v13 = **(void **)(*a2 + 16);
  if (*(unsigned char *)(v13 + 131)) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = *(unsigned char *)(v13 + 132) != 0;
  }
  *(unsigned char *)(a1 + 872) = v14;
  return a1;
}

void md::PointLabelFeature::textColor(unsigned char *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  BOOL v8 = a4 == 1;
  uint64_t v9 = v7 + 280;
  if (a4 == 1) {
    uint64_t v10 = 6;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(float **)(v9 + 8 * (a4 == 1));
  if (v11)
  {
    if (vabds_f32(v11[2], *(float *)(v7 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v7, (uint64_t)v11, v10);
      uint64_t v11 = *(float **)(v9 + 8 * v8);
    }
  }
  else
  {
    uint64_t v11 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v7, v10);
    *(void *)(v9 + 8 * v8) = v11;
  }
  int v12 = *(unsigned __int8 *)(*(void *)v11 + 60);
  if ((v12 - 5) > 1u)
  {
    *a1 = 0;
    a1[10] = 0;
  }
  else
  {
    md::PointLabelFeature::iconPackColor((uint64_t)a1, a2, a3, v12);
  }
}

uint64_t mdm::Allocator::instance(mdm::Allocator *this)
{
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  return *((void *)v1 + 91);
}

uint64_t std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> &,std::shared_ptr<md::TextDataString> &,unsigned char const&,void>(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v10 = operator new(0xB0uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EF582A90;
  uint64_t result = md::LabelText::LabelText((uint64_t)(v10 + 3), a2, a3, a4, a5);
  *a1 = result;
  a1[1] = (uint64_t)v10;
  return result;
}

uint64_t md::LabelText::LabelText(uint64_t result, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  *(void *)uint64_t result = &unk_1EF554458;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v20 = result;
    uint64_t v16 = a4;
    char v18 = a5;
    uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a4 = v16;
    a5 = v18;
    int v13 = v12;
    uint64_t result = v20;
    if (v13) {
      operator new();
    }
  }
  *(void *)(result + 56) = *((void *)v5 + 91);
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(result + 64) = _D0;
  *(_DWORD *)(result + 72) = 0;
  uint64_t v11 = a4[1];
  *(void *)(result + 80) = *a4;
  *(void *)(result + 88) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  {
    uint64_t v21 = result;
    char v19 = a5;
    uint64_t v17 = _D0;
    _D0 = v17;
    uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a5 = v19;
    int v15 = v14;
    uint64_t result = v21;
    if (v15) {
      operator new();
    }
  }
  *(void *)(result + 120) = *((void *)v5 + 91);
  *(void *)(result + 128) = _D0;
  *(_DWORD *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 1;
  *(_DWORD *)(result + 8) |= 1 << a5;
  return result;
}

void *md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(void *__dst, void *__src)
{
  {
    operator new();
  }
  uint64_t v4 = mdm::Allocator::instance(void)::alloc;
  __dst[3] = mdm::Allocator::instance(void)::alloc;
  if (*((char *)__src + 23) < 0)
  {
    size_t v5 = __src[1];
    if (v5 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v6 = (void *)*__src;
    if (v5 < 0x17)
    {
LABEL_4:
      *((unsigned char *)__dst + 23) = v5;
      uint64_t v7 = __dst;
      if (!v5) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)__src + 23);
    uint64_t v6 = __src;
    if (v5 < 0x17) {
      goto LABEL_4;
    }
  }
  uint64_t v8 = (v5 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v8 = v5 | 7;
  }
  uint64_t v9 = v8 + 1;
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v8 + 1, 1);
  __dst[1] = v5;
  __dst[2] = v9 | 0x8000000000000000;
  *__dst = v7;
LABEL_11:
  memmove(v7, v6, v5);
LABEL_12:
  *((unsigned char *)v7 + v5) = 0;
  {
    operator new();
  }
  uint64_t v10 = mdm::Allocator::instance(void)::alloc;
  __dst[7] = mdm::Allocator::instance(void)::alloc;
  int v11 = *((char *)__src + 47);
  if (v11 < 0)
  {
    size_t v13 = __src[4];
    if (v13 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    int v12 = (char *)__src[3];
    if (v13 < 0x17)
    {
LABEL_15:
      int v14 = (char *)(__dst + 4);
      *((unsigned char *)__dst + 55) = v13;
      if (!v13) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else
  {
    int v12 = (char *)(__src + 3);
    size_t v13 = v11;
    if (v11 < 0x17uLL) {
      goto LABEL_15;
    }
  }
  uint64_t v15 = (v13 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v15 = v13 | 7;
  }
  uint64_t v16 = v15 + 1;
  int v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v15 + 1, 1);
  __dst[5] = v13;
  __dst[6] = v16 | 0x8000000000000000;
  __dst[4] = v14;
LABEL_22:
  memmove(v14, v12, v13);
LABEL_23:
  v14[v13] = 0;
  return __dst;
}

void sub_1A18C6F74(_Unwind_Exception *a1)
{
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_string(v1);
  _Unwind_Resume(a1);
}

void geo::codec::featureGetLocalizedLabel(uint64_t a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  if (a1)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
    if (v8)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v8);
      uint64_t v9 = v8;
      if (v8) {
        uint64_t v8 = *(std::__shared_weak_count **)a1;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    geo::codec::vectorTileGetLocalizedLabel(v8, *(unsigned __int8 *)(a1 + 73), *(unsigned int *)(a1 + 56), a2, a3, a4);
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A18C7070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *geo::codec::vectorTileGetLocalizedLabel(void *result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  if (a4 < a2 && (uint64_t v8 = result) != 0 && (v9 = (unint64_t *)(result[131] + 24 * (a4 + a3)), (v10 = *v9) != 0))
  {
    unint64_t v11 = v9[1];
    unint64_t v12 = result[107];
    unint64_t v13 = result[108];
    if (v12 <= v10)
    {
      BOOL v14 = v13 >= v10;
      BOOL v15 = v13 == v10;
    }
    else
    {
      BOOL v14 = 0;
      BOOL v15 = 0;
    }
    if (v15 || !v14) {
      goto LABEL_21;
    }
    uint64_t v16 = (const void *)result[135];
    uint64_t v17 = result[136];
    unint64_t __key = v10 - v12;
    uint64_t result = bsearch(&__key, v16, (v17 - (uint64_t)v16) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
    if (!result) {
      goto LABEL_21;
    }
    unint64_t v18 = result[1];
    if (v18 == -1) {
      goto LABEL_21;
    }
    char v19 = v8 + 127;
    uint64_t v20 = 127;
    if ((result[3] & 1) == 0)
    {
      uint64_t v20 = 113;
      char v19 = v8 + 113;
    }
    uint64_t v21 = v8[v20];
    if (v18 < v19[1] - v21 && v21)
    {
      unint64_t v11 = result[2];
      if (a5) {
        *a5 = v21 + v18;
      }
    }
    else
    {
LABEL_21:
      if (a5) {
        *a5 = v10;
      }
    }
    if (a6) {
      goto LABEL_24;
    }
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    if (a6)
    {
      unint64_t v11 = 0;
LABEL_24:
      *a6 = v11;
    }
  }
  return result;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = operator new(0x18uLL);
  *unint64_t v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v6);
  if (v24)
  {
    *unint64_t v13 = *v24;
LABEL_58:
    *uint64_t v24 = v13;
    goto LABEL_59;
  }
  *unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v23 + 8 * v6) = a1 + 16;
  if (*v13)
  {
    unint64_t v25 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A18C7478(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelRenderer::addGlyphRenderItem(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(unsigned __int8 *)(*(void *)a2 + 4);
  uint64_t v9 = a1 + 1008;
  uint64_t v10 = 992;
  if (a5) {
    uint64_t v10 = 1008;
  }
  uint64_t v566 = v10;
  if (!a5) {
    uint64_t v9 = a1 + 992;
  }
  uint64_t v567 = v9;
  int v11 = *(unsigned __int8 *)(v7 + 9);
  uint64_t v12 = a1 + 1424;
  uint64_t v13 = a1 + 1456;
  uint64_t v14 = 1456;
  if (!*(unsigned char *)(a3 + 24))
  {
    uint64_t v14 = 1440;
    uint64_t v13 = a1 + 1440;
  }
  if (*(unsigned char *)(v7 + 9)) {
    uint64_t v14 = 1424;
  }
  else {
    uint64_t v12 = v13;
  }
  uint64_t v569 = v14;
  uint64_t v570 = v12;
  if (v8 == 2)
  {
    BOOL v15 = 1;
    BOOL v16 = 0;
  }
  else
  {
    BOOL v15 = *(unsigned char *)(a1 + 1861) != 0;
    BOOL v16 = 0;
    if (!*(unsigned char *)(a1 + 1861)) {
      goto LABEL_15;
    }
  }
  if ((a5 & 1) == 0) {
    BOOL v16 = *(unsigned char *)(a1 + 1860) != 0;
  }
LABEL_15:
  uint64_t v17 = a1 + 1488;
  uint64_t v18 = *(void *)(a1 + 1488 + 16 * *(unsigned int *)(a1 + 1540) + 64);
  if (!v18) {
    uint64_t v18 = *(void *)(a1 + 1872);
  }
  uint64_t v568 = v18;
  uint64_t v19 = *(void *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
  if (!v19) {
    uint64_t v19 = *(void *)(a1 + 1888);
  }
  uint64_t v564 = v19;
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(v7 + 16);
  uint64_t v22 = (std::__shared_mutex_base *)(v20 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v20 + 104));
  uint64_t v23 = *(void *)(v20 + 600);
  if (v21 < (unint64_t)((*(void *)(v20 + 608) - v23) >> 3)
    && ((uint64_t v24 = *(void *)(v23 + 8 * v21)) != 0 ? (v25 = HIDWORD(v21) == HIDWORD(v24)) : (v25 = 0), v25))
  {
    uint64_t v27 = (uint64_t *)(*(void *)(v20 + 624) + 40 * v24);
    uint64_t v26 = *(uint64_t **)(v20 + 632);
  }
  else
  {
    uint64_t v26 = *(uint64_t **)(v20 + 632);
    uint64_t v27 = v26;
  }
  std::__shared_mutex_base::unlock_shared(v22);
  uint64_t v28 = 0;
  if (v27 != v26 && v27) {
    uint64_t v28 = *v27;
  }
  if (v8 == 3)
  {
    uint64_t v29 = a2;
    uint64_t v30 = a1;
    uint64_t v31 = *(void *)(a1 + 416);
    uint64_t v32 = *(void *)(v31 + 8);
    if (v32 != *(void *)v31)
    {
      uint64_t v33 = v28;
      uint64_t v34 = *(void **)(v32 - 8);
      *(void *)(v31 + 8) = v32 - 8;
      uint64_t v35 = *(void **)(v31 + 40);
      unint64_t v36 = *(void *)(v31 + 48);
      uint64_t v37 = a3;
      if ((unint64_t)v35 >= v36)
      {
        uint64_t v38 = *(void *)(v31 + 32);
        uint64_t v39 = ((uint64_t)v35 - v38) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          goto LABEL_681;
        }
        uint64_t v41 = v36 - v38;
        if (v41 >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v40)
        {
          uint64_t v42 = 8 * v40;
          uint64_t v43 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v31 + 56) + 16))(*(void *)(v31 + 56), 8 * v40, 8);
          uint64_t v44 = (void *)(v43 + 8 * v39);
          unint64_t v40 = v43 + v42;
          if (v43) {
            *uint64_t v44 = v34;
          }
        }
        else
        {
          uint64_t v44 = (void *)(8 * v39);
        }
        float v59 = v44 + 1;
        uint64_t v125 = *(void *)(v31 + 32);
        uint64_t v124 = *(void *)(v31 + 40);
        if (v124 == v125) {
          goto LABEL_225;
        }
        unint64_t v126 = v124 - v125 - 8;
        if (v126 < 0x38)
        {
          uint64_t v128 = *(void *)(v31 + 40);
        }
        else if ((unint64_t)(v124 - (void)v44) < 0x20)
        {
          uint64_t v128 = *(void *)(v31 + 40);
        }
        else
        {
          uint64_t v127 = (v126 >> 3) + 1;
          uint64_t v128 = v124 - 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
          long long v129 = v44 - 2;
          double v130 = (long long *)(v124 - 16);
          uint64_t v131 = v127 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v132 = *v130;
            *(v129 - 1) = *(v130 - 1);
            *long long v129 = v132;
            v129 -= 2;
            v130 -= 2;
            v131 -= 4;
          }
          while (v131);
          v44 -= v127 & 0x3FFFFFFFFFFFFFFCLL;
          if (v127 == (v127 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_224;
          }
        }
        do
        {
          uint64_t v158 = *(void *)(v128 - 8);
          v128 -= 8;
          *--uint64_t v44 = v158;
        }
        while (v128 != v125);
LABEL_224:
        uint64_t v124 = *(void *)(v31 + 32);
LABEL_225:
        *(void *)(v31 + 32) = v44;
        *(void *)(v31 + 40) = v59;
        uint64_t v208 = *(void *)(v31 + 48);
        *(void *)(v31 + 48) = v40;
        if (v124) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v31 + 56) + 40))(*(void *)(v31 + 56), v124, v208 - v124);
        }
        goto LABEL_227;
      }
      goto LABEL_54;
    }
    uint64_t v57 = *(void *)(v31 + 88);
    if (v57)
    {
      uint64_t v33 = v28;
      uint64_t v37 = a3;
      uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 48))(v57);
      uint64_t v35 = *(void **)(v31 + 40);
      unint64_t v58 = *(void *)(v31 + 48);
      if ((unint64_t)v35 >= v58)
      {
        uint64_t v96 = *(void *)(v31 + 32);
        uint64_t v97 = ((uint64_t)v35 - v96) >> 3;
        unint64_t v40 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 61) {
          goto LABEL_681;
        }
        uint64_t v98 = v58 - v96;
        if (v98 >> 2 > v40) {
          unint64_t v40 = v98 >> 2;
        }
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v40)
        {
          uint64_t v99 = 8 * v40;
          uint64_t v100 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v31 + 56) + 16))(*(void *)(v31 + 56), 8 * v40, 8);
          uint64_t v44 = (void *)(v100 + 8 * v97);
          unint64_t v40 = v100 + v99;
          if (v100) {
            *uint64_t v44 = v34;
          }
        }
        else
        {
          uint64_t v44 = (void *)(8 * v97);
        }
        float v59 = v44 + 1;
        uint64_t v139 = *(void *)(v31 + 32);
        uint64_t v124 = *(void *)(v31 + 40);
        if (v124 == v139) {
          goto LABEL_225;
        }
        unint64_t v140 = v124 - v139 - 8;
        if (v140 < 0x38)
        {
          uint64_t v142 = *(void *)(v31 + 40);
        }
        else if ((unint64_t)(v124 - (void)v44) < 0x20)
        {
          uint64_t v142 = *(void *)(v31 + 40);
        }
        else
        {
          uint64_t v141 = (v140 >> 3) + 1;
          uint64_t v142 = v124 - 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
          double v143 = v44 - 2;
          double v144 = (long long *)(v124 - 16);
          uint64_t v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v146 = *v144;
            *(v143 - 1) = *(v144 - 1);
            _OWORD *v143 = v146;
            v143 -= 2;
            v144 -= 2;
            v145 -= 4;
          }
          while (v145);
          v44 -= v141 & 0x3FFFFFFFFFFFFFFCLL;
          if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_224;
          }
        }
        do
        {
          uint64_t v207 = *(void *)(v142 - 8);
          v142 -= 8;
          *--uint64_t v44 = v207;
        }
        while (v142 != v139);
        goto LABEL_224;
      }
LABEL_54:
      if (v35) {
        void *v35 = v34;
      }
      float v59 = v35 + 1;
LABEL_227:
      *(void *)(v31 + 40) = v59;
      long double v573 = v34;
      uint64_t v209 = *(void *)(v31 + 120);
      if (v209)
      {
        (*(void (**)(uint64_t, void **))(*(void *)v209 + 48))(v209, &v573);
        uint64_t v210 = v34[8];
        *(void *)(v210 + 72) = 0;
        uint64_t v211 = *(void *)(a1 + 1408);
        *(void *)(v210 + 64) = v211;
        uint64_t v212 = v34[20];
        uint64_t v213 = *(void *)(a1 + 1416);
        if (v213) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v213 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v214 = *(std::__shared_weak_count **)(v212 + 72);
        *(void *)(v212 + 64) = v211;
        *(void *)(v212 + 72) = v213;
        if (v214 && !atomic_fetch_add(&v214->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
        double v215 = (void *)v34[8];
        v215[1] = 0;
        uint64_t v216 = *(void *)(a1 + 1376);
        *double v215 = v216;
        double v217 = (void *)v34[20];
        uint64_t v218 = *(void *)(a1 + 1384);
        if (v218) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v218 + 8), 1uLL, memory_order_relaxed);
        }
        double v219 = (std::__shared_weak_count *)v217[1];
        *double v217 = v216;
        v217[1] = v218;
        if (v219 && !atomic_fetch_add(&v219->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
        uint64_t v220 = v34[8];
        *(void *)(v220 + 24) = 0;
        uint64_t v221 = *(void *)(a1 + v569);
        *(void *)(v220 + 16) = v221;
        uint64_t v222 = v34[20];
        uint64_t v223 = *(void *)(v570 + 8);
        if (v223) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v223 + 8), 1uLL, memory_order_relaxed);
        }
        double v224 = *(std::__shared_weak_count **)(v222 + 24);
        *(void *)(v222 + 16) = v221;
        *(void *)(v222 + 24) = v223;
        if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
        uint64_t v225 = v34[8];
        *(void *)(v225 + 40) = 0;
        uint64_t v226 = *(void *)(a1 + 1496);
        *(void *)(v225 + 32) = v226;
        uint64_t v227 = v34[20];
        uint64_t v228 = *(void *)(a1 + 1504);
        if (v228) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v228 + 8), 1uLL, memory_order_relaxed);
        }
        float64x2_t v229 = *(std::__shared_weak_count **)(v227 + 40);
        *(void *)(v227 + 32) = v226;
        *(void *)(v227 + 40) = v228;
        if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
        *(void *)(v34[12] + 8) = v568;
        uint64_t v230 = v34[8];
        *(void *)(v230 + 56) = 0;
        uint64_t v231 = *(void *)(a1 + v566);
        *(void *)(v230 + 48) = v231;
        uint64_t v232 = v34[20];
        uint64_t v233 = *(void *)(v567 + 8);
        if (v233) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v233 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v234 = *(std::__shared_weak_count **)(v232 + 56);
        *(void *)(v232 + 48) = v231;
        *(void *)(v232 + 56) = v233;
        if (!v234) {
          goto LABEL_425;
        }
LABEL_423:
        if (!atomic_fetch_add(&v234->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          std::__shared_weak_count::__release_weak(v234);
        }
        goto LABEL_425;
      }
    }
LABEL_680:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_681:
    abort();
  }
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  int v45 = *(unsigned __int8 *)(*(void *)a2 + 4);
  switch(v45)
  {
    case 6:
      uint64_t v60 = *(void *)(a1 + 368);
      uint64_t v61 = *(void *)(v60 + 8);
      if (v61 == *(void *)v60)
      {
        uint64_t v136 = *(void *)(v60 + 88);
        if (!v136) {
          goto LABEL_680;
        }
        uint64_t v33 = v28;
        uint64_t v37 = a3;
        uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v136 + 48))(v136);
        __n128 v62 = *(void **)(v60 + 40);
        unint64_t v137 = *(void *)(v60 + 48);
        if ((unint64_t)v62 >= v137)
        {
          uint64_t v173 = *(void *)(v60 + 32);
          uint64_t v174 = ((uint64_t)v62 - v173) >> 3;
          unint64_t v66 = v174 + 1;
          if ((unint64_t)(v174 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v175 = v137 - v173;
          if (v175 >> 2 > v66) {
            unint64_t v66 = v175 >> 2;
          }
          if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v66)
          {
            uint64_t v176 = 8 * v66;
            uint64_t v177 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v60 + 56) + 16))(*(void *)(v60 + 56), 8 * v66, 8);
            double v70 = (void *)(v177 + 8 * v174);
            unint64_t v66 = v177 + v176;
            if (v177) {
              *double v70 = v34;
            }
          }
          else
          {
            double v70 = (void *)(8 * v174);
          }
          double v138 = v70 + 1;
          uint64_t v261 = *(void *)(v60 + 32);
          uint64_t v198 = *(void *)(v60 + 40);
          if (v198 == v261) {
            goto LABEL_391;
          }
          unint64_t v262 = v198 - v261 - 8;
          if (v262 < 0x38)
          {
            uint64_t v264 = *(void *)(v60 + 40);
          }
          else if ((unint64_t)(v198 - (void)v70) < 0x20)
          {
            uint64_t v264 = *(void *)(v60 + 40);
          }
          else
          {
            uint64_t v263 = (v262 >> 3) + 1;
            uint64_t v264 = v198 - 8 * (v263 & 0x3FFFFFFFFFFFFFFCLL);
            double v265 = v70 - 2;
            double v266 = (long long *)(v198 - 16);
            uint64_t v267 = v263 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v268 = *v266;
              *(v265 - 1) = *(v266 - 1);
              *double v265 = v268;
              v265 -= 2;
              v266 -= 2;
              v267 -= 4;
            }
            while (v267);
            v70 -= v263 & 0x3FFFFFFFFFFFFFFCLL;
            if (v263 == (v263 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_390;
            }
          }
          do
          {
            uint64_t v345 = *(void *)(v264 - 8);
            v264 -= 8;
            *--double v70 = v345;
          }
          while (v264 != v261);
          goto LABEL_390;
        }
      }
      else
      {
        uint64_t v33 = v28;
        uint64_t v34 = *(void **)(v61 - 8);
        *(void *)(v60 + 8) = v61 - 8;
        __n128 v62 = *(void **)(v60 + 40);
        unint64_t v63 = *(void *)(v60 + 48);
        uint64_t v37 = a3;
        if ((unint64_t)v62 >= v63)
        {
          uint64_t v64 = *(void *)(v60 + 32);
          uint64_t v65 = ((uint64_t)v62 - v64) >> 3;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v67 = v63 - v64;
          if (v67 >> 2 > v66) {
            unint64_t v66 = v67 >> 2;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v66)
          {
            uint64_t v68 = 8 * v66;
            uint64_t v69 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v60 + 56) + 16))(*(void *)(v60 + 56), 8 * v66, 8);
            double v70 = (void *)(v69 + 8 * v65);
            unint64_t v66 = v69 + v68;
            if (v69) {
              *double v70 = v34;
            }
          }
          else
          {
            double v70 = (void *)(8 * v65);
          }
          double v138 = v70 + 1;
          uint64_t v199 = *(void *)(v60 + 32);
          uint64_t v198 = *(void *)(v60 + 40);
          if (v198 == v199) {
            goto LABEL_391;
          }
          unint64_t v200 = v198 - v199 - 8;
          if (v200 < 0x38)
          {
            uint64_t v202 = *(void *)(v60 + 40);
          }
          else if ((unint64_t)(v198 - (void)v70) < 0x20)
          {
            uint64_t v202 = *(void *)(v60 + 40);
          }
          else
          {
            uint64_t v201 = (v200 >> 3) + 1;
            uint64_t v202 = v198 - 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
            double v203 = v70 - 2;
            double v204 = (long long *)(v198 - 16);
            uint64_t v205 = v201 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v206 = *v204;
              *(v203 - 1) = *(v204 - 1);
              *double v203 = v206;
              v203 -= 2;
              v204 -= 2;
              v205 -= 4;
            }
            while (v205);
            v70 -= v201 & 0x3FFFFFFFFFFFFFFCLL;
            if (v201 == (v201 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_390;
            }
          }
          do
          {
            uint64_t v297 = *(void *)(v202 - 8);
            v202 -= 8;
            *--double v70 = v297;
          }
          while (v202 != v199);
LABEL_390:
          uint64_t v198 = *(void *)(v60 + 32);
LABEL_391:
          *(void *)(v60 + 32) = v70;
          *(void *)(v60 + 40) = v138;
          uint64_t v346 = *(void *)(v60 + 48);
          *(void *)(v60 + 48) = v66;
          if (v198) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v60 + 56) + 40))(*(void *)(v60 + 56), v198, v346 - v198);
          }
          goto LABEL_393;
        }
      }
      if (v62) {
        *__n128 v62 = v34;
      }
      double v138 = v62 + 1;
LABEL_393:
      *(void *)(v60 + 40) = v138;
      long double v573 = v34;
      uint64_t v344 = *(void *)(v60 + 120);
      if (!v344) {
        goto LABEL_680;
      }
LABEL_394:
      (*(void (**)(uint64_t, void **))(*(void *)v344 + 48))(v344, &v573);
      uint64_t v347 = v34[8];
      *(void *)(v347 + 88) = 0;
      uint64_t v348 = *(void *)(a1 + 1408);
      *(void *)(v347 + 80) = v348;
      uint64_t v349 = v34[20];
      uint64_t v350 = *(void *)(a1 + 1416);
      uint64_t v352 = v566;
      uint64_t v351 = v567;
      if (v350) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v350 + 8), 1uLL, memory_order_relaxed);
      }
      float64x2_t v353 = *(std::__shared_weak_count **)(v349 + 88);
      *(void *)(v349 + 80) = v348;
      *(void *)(v349 + 88) = v350;
      if (v353 && !atomic_fetch_add(&v353->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
        std::__shared_weak_count::__release_weak(v353);
      }
      int64_t v354 = (void *)v34[8];
      v354[1] = 0;
      uint64_t v355 = *(void *)(a1 + 1376);
      *int64_t v354 = v355;
      int64_t v356 = (void *)v34[20];
      uint64_t v357 = *(void *)(a1 + 1384);
      if (v357) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v357 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v358 = (std::__shared_weak_count *)v356[1];
      void *v356 = v355;
      v356[1] = v357;
      if (v358 && !atomic_fetch_add(&v358->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
        std::__shared_weak_count::__release_weak(v358);
      }
      uint64_t v359 = v34[8];
      *(void *)(v359 + 24) = 0;
      uint64_t v360 = *(void *)(a1 + v569);
      *(void *)(v359 + 16) = v360;
      uint64_t v361 = v34[20];
      uint64_t v362 = *(void *)(v570 + 8);
      if (v362) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v362 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v363 = *(std::__shared_weak_count **)(v361 + 24);
      *(void *)(v361 + 16) = v360;
      *(void *)(v361 + 24) = v362;
      if (v363 && !atomic_fetch_add(&v363->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
        std::__shared_weak_count::__release_weak(v363);
      }
      uint64_t v364 = v34[8];
      *(void *)(v364 + 56) = 0;
      uint64_t v365 = *(void *)(a1 + 1496);
      *(void *)(v364 + 48) = v365;
      uint64_t v366 = v34[20];
      uint64_t v367 = *(void *)(a1 + 1504);
      if (v367) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v367 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v368 = *(std::__shared_weak_count **)(v366 + 56);
      *(void *)(v366 + 48) = v365;
      *(void *)(v366 + 56) = v367;
      if (v368 && !atomic_fetch_add(&v368->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
        std::__shared_weak_count::__release_weak(v368);
      }
      *(void *)(v34[12] + 16) = v568;
      uint64_t v369 = v34[8];
      *(void *)(v369 + 40) = 0;
      uint64_t v370 = *(void *)(a1 + 1640);
      *(void *)(v369 + 32) = v370;
      uint64_t v371 = v34[20];
      uint64_t v372 = *(void *)(a1 + 1648);
      if (v372) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v372 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v373 = *(std::__shared_weak_count **)(v371 + 40);
      *(void *)(v371 + 32) = v370;
      *(void *)(v371 + 40) = v372;
      if (v373 && !atomic_fetch_add(&v373->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
        std::__shared_weak_count::__release_weak(v373);
      }
      *(void *)(v34[12] + 8) = v564;
      goto LABEL_420;
    case 5:
      if (a5)
      {
        uint64_t v71 = *(void *)(a1 + 360);
        uint64_t v72 = *(void *)(v71 + 8);
        uint64_t v37 = a3;
        if (v72 == *(void *)v71)
        {
          uint64_t v159 = *(void *)(v71 + 88);
          if (!v159) {
            goto LABEL_680;
          }
          uint64_t v33 = v28;
          uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v159 + 48))(v159);
          long double v73 = *(void **)(v71 + 40);
          unint64_t v160 = *(void *)(v71 + 48);
          if ((unint64_t)v73 >= v160)
          {
            uint64_t v238 = *(void *)(v71 + 32);
            uint64_t v239 = ((uint64_t)v73 - v238) >> 3;
            unint64_t v77 = v239 + 1;
            if ((unint64_t)(v239 + 1) >> 61) {
              goto LABEL_681;
            }
            uint64_t v240 = v160 - v238;
            if (v240 >> 2 > v77) {
              unint64_t v77 = v240 >> 2;
            }
            if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v77)
            {
              uint64_t v241 = 8 * v77;
              uint64_t v242 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v71 + 56) + 16))(*(void *)(v71 + 56), 8 * v77, 8);
              uint64_t v81 = (void *)(v242 + 8 * v239);
              unint64_t v77 = v242 + v241;
              if (v242) {
                *uint64_t v81 = v34;
              }
            }
            else
            {
              uint64_t v81 = (void *)(8 * v239);
            }
            double v161 = v81 + 1;
            uint64_t v309 = *(void *)(v71 + 32);
            uint64_t v269 = *(void *)(v71 + 40);
            if (v269 == v309) {
              goto LABEL_492;
            }
            unint64_t v310 = v269 - v309 - 8;
            if (v310 < 0x38)
            {
              uint64_t v312 = *(void *)(v71 + 40);
            }
            else if ((unint64_t)(v269 - (void)v81) < 0x20)
            {
              uint64_t v312 = *(void *)(v71 + 40);
            }
            else
            {
              uint64_t v311 = (v310 >> 3) + 1;
              uint64_t v312 = v269 - 8 * (v311 & 0x3FFFFFFFFFFFFFFCLL);
              long double v313 = v81 - 2;
              float64x2_t v314 = (long long *)(v269 - 16);
              uint64_t v315 = v311 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v316 = *v314;
                *(v313 - 1) = *(v314 - 1);
                _OWORD *v313 = v316;
                v313 -= 2;
                v314 -= 2;
                v315 -= 4;
              }
              while (v315);
              v81 -= v311 & 0x3FFFFFFFFFFFFFFCLL;
              if (v311 == (v311 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_491;
              }
            }
            do
            {
              uint64_t v427 = *(void *)(v312 - 8);
              v312 -= 8;
              *--uint64_t v81 = v427;
            }
            while (v312 != v309);
            goto LABEL_491;
          }
        }
        else
        {
          uint64_t v33 = v28;
          uint64_t v34 = *(void **)(v72 - 8);
          *(void *)(v71 + 8) = v72 - 8;
          long double v73 = *(void **)(v71 + 40);
          unint64_t v74 = *(void *)(v71 + 48);
          if ((unint64_t)v73 >= v74)
          {
            uint64_t v75 = *(void *)(v71 + 32);
            uint64_t v76 = ((uint64_t)v73 - v75) >> 3;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 61) {
              goto LABEL_681;
            }
            uint64_t v78 = v74 - v75;
            if (v78 >> 2 > v77) {
              unint64_t v77 = v78 >> 2;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v77)
            {
              uint64_t v79 = 8 * v77;
              uint64_t v80 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v71 + 56) + 16))(*(void *)(v71 + 56), 8 * v77, 8);
              uint64_t v81 = (void *)(v80 + 8 * v76);
              unint64_t v77 = v80 + v79;
              if (v80) {
                *uint64_t v81 = v34;
              }
            }
            else
            {
              uint64_t v81 = (void *)(8 * v76);
            }
            double v161 = v81 + 1;
            uint64_t v270 = *(void *)(v71 + 32);
            uint64_t v269 = *(void *)(v71 + 40);
            if (v269 == v270) {
              goto LABEL_492;
            }
            unint64_t v271 = v269 - v270 - 8;
            if (v271 < 0x38)
            {
              uint64_t v273 = *(void *)(v71 + 40);
            }
            else if ((unint64_t)(v269 - (void)v81) < 0x20)
            {
              uint64_t v273 = *(void *)(v71 + 40);
            }
            else
            {
              uint64_t v272 = (v271 >> 3) + 1;
              uint64_t v273 = v269 - 8 * (v272 & 0x3FFFFFFFFFFFFFFCLL);
              long double v274 = v81 - 2;
              long double v275 = (long long *)(v269 - 16);
              uint64_t v276 = v272 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v277 = *v275;
                *(v274 - 1) = *(v275 - 1);
                _OWORD *v274 = v277;
                v274 -= 2;
                v275 -= 2;
                v276 -= 4;
              }
              while (v276);
              v81 -= v272 & 0x3FFFFFFFFFFFFFFCLL;
              if (v272 == (v272 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_491;
              }
            }
            do
            {
              uint64_t v388 = *(void *)(v273 - 8);
              v273 -= 8;
              *--uint64_t v81 = v388;
            }
            while (v273 != v270);
LABEL_491:
            uint64_t v269 = *(void *)(v71 + 32);
LABEL_492:
            *(void *)(v71 + 32) = v81;
            *(void *)(v71 + 40) = v161;
            uint64_t v428 = *(void *)(v71 + 48);
            *(void *)(v71 + 48) = v77;
            if (v269) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v71 + 56) + 40))(*(void *)(v71 + 56), v269, v428 - v269);
            }
            goto LABEL_494;
          }
        }
        if (v73) {
          *long double v73 = v34;
        }
        double v161 = v73 + 1;
LABEL_494:
        *(void *)(v71 + 40) = v161;
        long double v573 = v34;
        uint64_t v429 = *(void *)(v71 + 120);
        if (!v429) {
          goto LABEL_680;
        }
        (*(void (**)(uint64_t, void **))(*(void *)v429 + 48))(v429, &v573);
        uint64_t v430 = v34[8];
        *(void *)(v430 + 88) = 0;
        uint64_t v431 = *(void *)(a1 + 1408);
        *(void *)(v430 + 80) = v431;
        uint64_t v432 = v34[20];
        uint64_t v433 = *(void *)(a1 + 1416);
        if (v433) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v433 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v434 = *(std::__shared_weak_count **)(v432 + 88);
        *(void *)(v432 + 80) = v431;
        *(void *)(v432 + 88) = v433;
        if (v434 && !atomic_fetch_add(&v434->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
          std::__shared_weak_count::__release_weak(v434);
        }
        uint64_t v435 = (void *)v34[8];
        v435[1] = 0;
        uint64_t v436 = *(void *)(a1 + 1376);
        *uint64_t v435 = v436;
        uint64_t v437 = (void *)v34[20];
        uint64_t v438 = *(void *)(a1 + 1384);
        if (v438) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v438 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v439 = (std::__shared_weak_count *)v437[1];
        void *v437 = v436;
        v437[1] = v438;
        if (v439 && !atomic_fetch_add(&v439->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
          std::__shared_weak_count::__release_weak(v439);
        }
        uint64_t v440 = v34[8];
        *(void *)(v440 + 24) = 0;
        uint64_t v441 = *(void *)(a1 + v569);
        *(void *)(v440 + 16) = v441;
        uint64_t v442 = v34[20];
        uint64_t v443 = *(void *)(v570 + 8);
        if (v443) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v443 + 8), 1uLL, memory_order_relaxed);
        }
        double v444 = *(std::__shared_weak_count **)(v442 + 24);
        *(void *)(v442 + 16) = v441;
        *(void *)(v442 + 24) = v443;
        if (v444 && !atomic_fetch_add(&v444->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
          std::__shared_weak_count::__release_weak(v444);
        }
        uint64_t v445 = v34[8];
        *(void *)(v445 + 56) = 0;
        uint64_t v446 = *(void *)(a1 + 1496);
        *(void *)(v445 + 48) = v446;
        uint64_t v447 = v34[20];
        uint64_t v448 = *(void *)(a1 + 1504);
        if (v448) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v448 + 8), 1uLL, memory_order_relaxed);
        }
        long double v449 = *(std::__shared_weak_count **)(v447 + 56);
        *(void *)(v447 + 48) = v446;
        *(void *)(v447 + 56) = v448;
        if (v449 && !atomic_fetch_add(&v449->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
          std::__shared_weak_count::__release_weak(v449);
        }
        *(void *)(v34[12] + 16) = v568;
        uint64_t v450 = v34[8];
        *(void *)(v450 + 40) = 0;
        uint64_t v451 = *(void *)(a1 + 1640);
        *(void *)(v450 + 32) = v451;
        uint64_t v452 = v34[20];
        uint64_t v453 = *(void *)(a1 + 1648);
        if (v453) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v453 + 8), 1uLL, memory_order_relaxed);
        }
        BOOL v454 = *(std::__shared_weak_count **)(v452 + 40);
        *(void *)(v452 + 32) = v451;
        *(void *)(v452 + 40) = v453;
        if (v454 && !atomic_fetch_add(&v454->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
          std::__shared_weak_count::__release_weak(v454);
        }
        *(void *)(v34[12] + 8) = v564;
        uint64_t v455 = v34[8];
        *(void *)(v455 + 72) = 0;
        uint64_t v375 = *(void *)(a1 + 1008);
        *(void *)(v455 + 64) = v375;
        uint64_t v376 = v34[20];
        uint64_t v377 = *(void *)(a1 + 1016);
        if (!v377)
        {
LABEL_422:
          uint64_t v234 = *(std::__shared_weak_count **)(v376 + 72);
          *(void *)(v376 + 64) = v375;
          *(void *)(v376 + 72) = v377;
          if (!v234) {
            goto LABEL_425;
          }
          goto LABEL_423;
        }
LABEL_421:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v377 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_422;
      }
      uint64_t v101 = *(void *)(a1 + 352);
      uint64_t v102 = *(void *)(v101 + 8);
      uint64_t v37 = a3;
      if (v102 == *(void *)v101)
      {
        uint64_t v162 = *(void *)(v101 + 88);
        if (!v162) {
          goto LABEL_680;
        }
        uint64_t v33 = v28;
        uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v162 + 48))(v162);
        int v103 = *(void **)(v101 + 40);
        unint64_t v163 = *(void *)(v101 + 48);
        if ((unint64_t)v103 >= v163)
        {
          uint64_t v243 = *(void *)(v101 + 32);
          uint64_t v244 = ((uint64_t)v103 - v243) >> 3;
          unint64_t v107 = v244 + 1;
          if ((unint64_t)(v244 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v245 = v163 - v243;
          if (v245 >> 2 > v107) {
            unint64_t v107 = v245 >> 2;
          }
          if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v107)
          {
            uint64_t v246 = 8 * v107;
            uint64_t v247 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v101 + 56) + 16))(*(void *)(v101 + 56), 8 * v107, 8);
            uint64_t v111 = (void *)(v247 + 8 * v244);
            unint64_t v107 = v247 + v246;
            if (v247) {
              *uint64_t v111 = v34;
            }
          }
          else
          {
            uint64_t v111 = (void *)(8 * v244);
          }
          double v164 = v111 + 1;
          uint64_t v317 = *(void *)(v101 + 32);
          uint64_t v278 = *(void *)(v101 + 40);
          if (v278 == v317) {
            goto LABEL_526;
          }
          unint64_t v318 = v278 - v317 - 8;
          if (v318 < 0x38)
          {
            uint64_t v320 = *(void *)(v101 + 40);
          }
          else if ((unint64_t)(v278 - (void)v111) < 0x20)
          {
            uint64_t v320 = *(void *)(v101 + 40);
          }
          else
          {
            uint64_t v319 = (v318 >> 3) + 1;
            uint64_t v320 = v278 - 8 * (v319 & 0x3FFFFFFFFFFFFFFCLL);
            double v321 = v111 - 2;
            double v322 = (long long *)(v278 - 16);
            uint64_t v323 = v319 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v324 = *v322;
              *(v321 - 1) = *(v322 - 1);
              *double v321 = v324;
              v321 -= 2;
              v322 -= 2;
              v323 -= 4;
            }
            while (v323);
            v111 -= v319 & 0x3FFFFFFFFFFFFFFCLL;
            if (v319 == (v319 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_525;
            }
          }
          do
          {
            uint64_t v456 = *(void *)(v320 - 8);
            v320 -= 8;
            *--uint64_t v111 = v456;
          }
          while (v320 != v317);
          goto LABEL_525;
        }
      }
      else
      {
        uint64_t v33 = v28;
        uint64_t v34 = *(void **)(v102 - 8);
        *(void *)(v101 + 8) = v102 - 8;
        int v103 = *(void **)(v101 + 40);
        unint64_t v104 = *(void *)(v101 + 48);
        if ((unint64_t)v103 >= v104)
        {
          uint64_t v105 = *(void *)(v101 + 32);
          uint64_t v106 = ((uint64_t)v103 - v105) >> 3;
          unint64_t v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v108 = v104 - v105;
          if (v108 >> 2 > v107) {
            unint64_t v107 = v108 >> 2;
          }
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v107)
          {
            uint64_t v109 = 8 * v107;
            uint64_t v110 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v101 + 56) + 16))(*(void *)(v101 + 56), 8 * v107, 8);
            uint64_t v111 = (void *)(v110 + 8 * v106);
            unint64_t v107 = v110 + v109;
            if (v110) {
              *uint64_t v111 = v34;
            }
          }
          else
          {
            uint64_t v111 = (void *)(8 * v106);
          }
          double v164 = v111 + 1;
          uint64_t v279 = *(void *)(v101 + 32);
          uint64_t v278 = *(void *)(v101 + 40);
          if (v278 == v279) {
            goto LABEL_526;
          }
          unint64_t v280 = v278 - v279 - 8;
          if (v280 < 0x38)
          {
            uint64_t v282 = *(void *)(v101 + 40);
          }
          else if ((unint64_t)(v278 - (void)v111) < 0x20)
          {
            uint64_t v282 = *(void *)(v101 + 40);
          }
          else
          {
            uint64_t v281 = (v280 >> 3) + 1;
            uint64_t v282 = v278 - 8 * (v281 & 0x3FFFFFFFFFFFFFFCLL);
            float64x2_t v283 = v111 - 2;
            uint64_t v284 = (long long *)(v278 - 16);
            uint64_t v285 = v281 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v286 = *v284;
              *(v283 - 1) = *(v284 - 1);
              *float64x2_t v283 = v286;
              v283 -= 2;
              v284 -= 2;
              v285 -= 4;
            }
            while (v285);
            v111 -= v281 & 0x3FFFFFFFFFFFFFFCLL;
            if (v281 == (v281 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_525;
            }
          }
          do
          {
            uint64_t v389 = *(void *)(v282 - 8);
            v282 -= 8;
            *--uint64_t v111 = v389;
          }
          while (v282 != v279);
LABEL_525:
          uint64_t v278 = *(void *)(v101 + 32);
LABEL_526:
          *(void *)(v101 + 32) = v111;
          *(void *)(v101 + 40) = v164;
          uint64_t v457 = *(void *)(v101 + 48);
          *(void *)(v101 + 48) = v107;
          if (v278) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v101 + 56) + 40))(*(void *)(v101 + 56), v278, v457 - v278);
          }
          goto LABEL_528;
        }
      }
      if (v103) {
        *int v103 = v34;
      }
      double v164 = v103 + 1;
LABEL_528:
      *(void *)(v101 + 40) = v164;
      long double v573 = v34;
      uint64_t v458 = *(void *)(v101 + 120);
      if (!v458) {
        goto LABEL_680;
      }
      (*(void (**)(uint64_t, void **))(*(void *)v458 + 48))(v458, &v573);
      uint64_t v459 = v34[8];
      *(void *)(v459 + 88) = 0;
      uint64_t v460 = *(void *)(a1 + 1408);
      *(void *)(v459 + 80) = v460;
      uint64_t v461 = v34[20];
      uint64_t v462 = *(void *)(a1 + 1416);
      if (v462) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v462 + 8), 1uLL, memory_order_relaxed);
      }
      long double v463 = *(std::__shared_weak_count **)(v461 + 88);
      *(void *)(v461 + 80) = v460;
      *(void *)(v461 + 88) = v462;
      if (v463 && !atomic_fetch_add(&v463->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
        std::__shared_weak_count::__release_weak(v463);
      }
      float64x2_t v464 = (void *)v34[8];
      v464[1] = 0;
      uint64_t v465 = *(void *)(a1 + 1376);
      void *v464 = v465;
      unint64_t v466 = (void *)v34[20];
      uint64_t v467 = *(void *)(a1 + 1384);
      if (v467) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v467 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v468 = (std::__shared_weak_count *)v466[1];
      *unint64_t v466 = v465;
      v466[1] = v467;
      if (v468 && !atomic_fetch_add(&v468->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
        std::__shared_weak_count::__release_weak(v468);
      }
      uint64_t v469 = v34[8];
      *(void *)(v469 + 24) = 0;
      uint64_t v470 = *(void *)(a1 + v569);
      *(void *)(v469 + 16) = v470;
      uint64_t v471 = v34[20];
      uint64_t v472 = *(void *)(v570 + 8);
      if (v472) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v472 + 8), 1uLL, memory_order_relaxed);
      }
      long double v473 = *(std::__shared_weak_count **)(v471 + 24);
      *(void *)(v471 + 16) = v470;
      *(void *)(v471 + 24) = v472;
      if (v473 && !atomic_fetch_add(&v473->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
        std::__shared_weak_count::__release_weak(v473);
      }
      uint64_t v474 = v34[8];
      *(void *)(v474 + 56) = 0;
      uint64_t v475 = *(void *)(a1 + 1496);
      *(void *)(v474 + 48) = v475;
      uint64_t v476 = v34[20];
      uint64_t v477 = *(void *)(a1 + 1504);
      if (v477) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v477 + 8), 1uLL, memory_order_relaxed);
      }
      __double2 v478 = *(std::__shared_weak_count **)(v476 + 56);
      *(void *)(v476 + 48) = v475;
      *(void *)(v476 + 56) = v477;
      if (v478 && !atomic_fetch_add(&v478->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
        std::__shared_weak_count::__release_weak(v478);
      }
      *(void *)(v34[12] + 16) = v568;
      uint64_t v479 = v34[8];
      *(void *)(v479 + 40) = 0;
      uint64_t v480 = *(void *)(a1 + 1640);
      *(void *)(v479 + 32) = v480;
      uint64_t v481 = v34[20];
      uint64_t v482 = *(void *)(a1 + 1648);
      if (v482) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v482 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v483 = *(std::__shared_weak_count **)(v481 + 40);
      *(void *)(v481 + 32) = v480;
      *(void *)(v481 + 40) = v482;
      if (v483 && !atomic_fetch_add(&v483->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
        std::__shared_weak_count::__release_weak(v483);
      }
      *(void *)(v34[12] + 8) = v564;
      uint64_t v484 = v34[8];
      *(void *)(v484 + 72) = 0;
      uint64_t v375 = *(void *)(a1 + 992);
      *(void *)(v484 + 64) = v375;
      uint64_t v376 = v34[20];
      uint64_t v377 = *(void *)(a1 + 1000);
      if (!v377) {
        goto LABEL_422;
      }
      goto LABEL_421;
    case 4:
      uint64_t v46 = *(void *)(a1 + 344);
      uint64_t v47 = *(void *)(v46 + 8);
      if (v47 == *(void *)v46)
      {
        uint64_t v133 = *(void *)(v46 + 88);
        if (!v133) {
          goto LABEL_680;
        }
        uint64_t v33 = v28;
        uint64_t v37 = a3;
        uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v133 + 48))(v133);
        uint64_t v48 = *(void **)(v46 + 40);
        unint64_t v134 = *(void *)(v46 + 48);
        if ((unint64_t)v48 >= v134)
        {
          uint64_t v168 = *(void *)(v46 + 32);
          uint64_t v169 = ((uint64_t)v48 - v168) >> 3;
          unint64_t v52 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v170 = v134 - v168;
          if (v170 >> 2 > v52) {
            unint64_t v52 = v170 >> 2;
          }
          if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v52)
          {
            uint64_t v171 = 8 * v52;
            uint64_t v172 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v46 + 56) + 16))(*(void *)(v46 + 56), 8 * v52, 8);
            long long v56 = (void *)(v172 + 8 * v169);
            unint64_t v52 = v172 + v171;
            if (v172) {
              void *v56 = v34;
            }
          }
          else
          {
            long long v56 = (void *)(8 * v169);
          }
          double v135 = v56 + 1;
          uint64_t v253 = *(void *)(v46 + 32);
          uint64_t v189 = *(void *)(v46 + 40);
          if (v189 == v253) {
            goto LABEL_383;
          }
          unint64_t v254 = v189 - v253 - 8;
          if (v254 < 0x38)
          {
            uint64_t v256 = *(void *)(v46 + 40);
          }
          else if ((unint64_t)(v189 - (void)v56) < 0x20)
          {
            uint64_t v256 = *(void *)(v46 + 40);
          }
          else
          {
            uint64_t v255 = (v254 >> 3) + 1;
            uint64_t v256 = v189 - 8 * (v255 & 0x3FFFFFFFFFFFFFFCLL);
            long double v257 = v56 - 2;
            float64x2_t v258 = (long long *)(v189 - 16);
            uint64_t v259 = v255 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v260 = *v258;
              *(v257 - 1) = *(v258 - 1);
              *long double v257 = v260;
              v257 -= 2;
              v258 -= 2;
              v259 -= 4;
            }
            while (v259);
            v56 -= v255 & 0x3FFFFFFFFFFFFFFCLL;
            if (v255 == (v255 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_382;
            }
          }
          do
          {
            uint64_t v342 = *(void *)(v256 - 8);
            v256 -= 8;
            *--long long v56 = v342;
          }
          while (v256 != v253);
          goto LABEL_382;
        }
      }
      else
      {
        uint64_t v33 = v28;
        uint64_t v34 = *(void **)(v47 - 8);
        *(void *)(v46 + 8) = v47 - 8;
        uint64_t v48 = *(void **)(v46 + 40);
        unint64_t v49 = *(void *)(v46 + 48);
        uint64_t v37 = a3;
        if ((unint64_t)v48 >= v49)
        {
          uint64_t v50 = *(void *)(v46 + 32);
          uint64_t v51 = ((uint64_t)v48 - v50) >> 3;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v53 = v49 - v50;
          if (v53 >> 2 > v52) {
            unint64_t v52 = v53 >> 2;
          }
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v52)
          {
            uint64_t v54 = 8 * v52;
            uint64_t v55 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v46 + 56) + 16))(*(void *)(v46 + 56), 8 * v52, 8);
            long long v56 = (void *)(v55 + 8 * v51);
            unint64_t v52 = v55 + v54;
            if (v55) {
              void *v56 = v34;
            }
          }
          else
          {
            long long v56 = (void *)(8 * v51);
          }
          double v135 = v56 + 1;
          uint64_t v190 = *(void *)(v46 + 32);
          uint64_t v189 = *(void *)(v46 + 40);
          if (v189 == v190) {
            goto LABEL_383;
          }
          unint64_t v191 = v189 - v190 - 8;
          if (v191 < 0x38)
          {
            uint64_t v193 = *(void *)(v46 + 40);
          }
          else if ((unint64_t)(v189 - (void)v56) < 0x20)
          {
            uint64_t v193 = *(void *)(v46 + 40);
          }
          else
          {
            uint64_t v192 = (v191 >> 3) + 1;
            uint64_t v193 = v189 - 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
            double v194 = v56 - 2;
            double v195 = (long long *)(v189 - 16);
            uint64_t v196 = v192 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v197 = *v195;
              *(v194 - 1) = *(v195 - 1);
              *double v194 = v197;
              v194 -= 2;
              v195 -= 2;
              v196 -= 4;
            }
            while (v196);
            v56 -= v192 & 0x3FFFFFFFFFFFFFFCLL;
            if (v192 == (v192 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_382;
            }
          }
          do
          {
            uint64_t v296 = *(void *)(v193 - 8);
            v193 -= 8;
            *--long long v56 = v296;
          }
          while (v193 != v190);
LABEL_382:
          uint64_t v189 = *(void *)(v46 + 32);
LABEL_383:
          *(void *)(v46 + 32) = v56;
          *(void *)(v46 + 40) = v135;
          uint64_t v343 = *(void *)(v46 + 48);
          *(void *)(v46 + 48) = v52;
          if (v189) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v46 + 56) + 40))(*(void *)(v46 + 56), v189, v343 - v189);
          }
          goto LABEL_385;
        }
      }
      if (v48) {
        *uint64_t v48 = v34;
      }
      double v135 = v48 + 1;
LABEL_385:
      *(void *)(v46 + 40) = v135;
      long double v573 = v34;
      uint64_t v344 = *(void *)(v46 + 120);
      if (!v344) {
        goto LABEL_680;
      }
      goto LABEL_394;
  }
  if (v15)
  {
    uint64_t v82 = *(void *)(v17 + 16 * *(unsigned int *)(a1 + 1540) + 64);
    if (!v82) {
      uint64_t v82 = *(void *)(a1 + 1872);
    }
    uint64_t v83 = *(void *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
    if (!v83) {
      uint64_t v83 = *(void *)(a1 + 1888);
    }
    uint64_t v37 = a3;
    if (a5)
    {
      uint64_t v84 = *(void *)(a1 + 384);
      uint64_t v85 = *(void *)(v84 + 8);
      if (v85 == *(void *)v84)
      {
        uint64_t v235 = *(void *)(v84 + 88);
        if (!v235) {
          goto LABEL_680;
        }
        uint64_t v33 = v28;
        uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v235 + 48))(v235);
        double v86 = *(void **)(v84 + 40);
        unint64_t v236 = *(void *)(v84 + 48);
        uint64_t v88 = v82;
        if ((unint64_t)v86 >= v236)
        {
          uint64_t v304 = *(void *)(v84 + 32);
          uint64_t v305 = ((uint64_t)v86 - v304) >> 3;
          unint64_t v91 = v305 + 1;
          if ((unint64_t)(v305 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v306 = v236 - v304;
          if (v306 >> 2 > v91) {
            unint64_t v91 = v306 >> 2;
          }
          if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v91)
          {
            uint64_t v307 = 8 * v91;
            uint64_t v308 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v84 + 56) + 16))(*(void *)(v84 + 56), 8 * v91, 8);
            uint64_t v95 = (void *)(v308 + 8 * v305);
            unint64_t v91 = v308 + v307;
            if (v308) {
              *uint64_t v95 = v34;
            }
          }
          else
          {
            uint64_t v95 = (void *)(8 * v305);
          }
          long double v237 = v95 + 1;
          uint64_t v401 = *(void *)(v84 + 32);
          uint64_t v333 = *(void *)(v84 + 40);
          if (v333 == v401) {
            goto LABEL_628;
          }
          unint64_t v402 = v333 - v401 - 8;
          if (v402 < 0x38)
          {
            uint64_t v404 = *(void *)(v84 + 40);
          }
          else if ((unint64_t)(v333 - (void)v95) < 0x20)
          {
            uint64_t v404 = *(void *)(v84 + 40);
          }
          else
          {
            uint64_t v403 = (v402 >> 3) + 1;
            uint64_t v404 = v333 - 8 * (v403 & 0x3FFFFFFFFFFFFFFCLL);
            double v405 = v95 - 2;
            double v406 = (long long *)(v333 - 16);
            uint64_t v407 = v403 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v408 = *v406;
              *(v405 - 1) = *(v406 - 1);
              *double v405 = v408;
              v405 -= 2;
              v406 -= 2;
              v407 -= 4;
            }
            while (v407);
            v95 -= v403 & 0x3FFFFFFFFFFFFFFCLL;
            if (v403 == (v403 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_627;
            }
          }
          do
          {
            uint64_t v530 = *(void *)(v404 - 8);
            v404 -= 8;
            *--uint64_t v95 = v530;
          }
          while (v404 != v401);
          goto LABEL_627;
        }
      }
      else
      {
        uint64_t v33 = v28;
        uint64_t v34 = *(void **)(v85 - 8);
        *(void *)(v84 + 8) = v85 - 8;
        double v86 = *(void **)(v84 + 40);
        unint64_t v87 = *(void *)(v84 + 48);
        uint64_t v88 = v82;
        if ((unint64_t)v86 >= v87)
        {
          uint64_t v89 = *(void *)(v84 + 32);
          uint64_t v90 = ((uint64_t)v86 - v89) >> 3;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v92 = v87 - v89;
          if (v92 >> 2 > v91) {
            unint64_t v91 = v92 >> 2;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v91)
          {
            uint64_t v93 = 8 * v91;
            uint64_t v94 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v84 + 56) + 16))(*(void *)(v84 + 56), 8 * v91, 8);
            uint64_t v95 = (void *)(v94 + 8 * v90);
            unint64_t v91 = v94 + v93;
            if (v94) {
              *uint64_t v95 = v34;
            }
          }
          else
          {
            uint64_t v95 = (void *)(8 * v90);
          }
          long double v237 = v95 + 1;
          uint64_t v334 = *(void *)(v84 + 32);
          uint64_t v333 = *(void *)(v84 + 40);
          if (v333 == v334) {
            goto LABEL_628;
          }
          unint64_t v335 = v333 - v334 - 8;
          if (v335 < 0x38)
          {
            uint64_t v337 = *(void *)(v84 + 40);
          }
          else if ((unint64_t)(v333 - (void)v95) < 0x20)
          {
            uint64_t v337 = *(void *)(v84 + 40);
          }
          else
          {
            uint64_t v336 = (v335 >> 3) + 1;
            uint64_t v337 = v333 - 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
            long double v338 = v95 - 2;
            long double v339 = (long long *)(v333 - 16);
            uint64_t v340 = v336 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v341 = *v339;
              *(v338 - 1) = *(v339 - 1);
              *long double v338 = v341;
              v338 -= 2;
              v339 -= 2;
              v340 -= 4;
            }
            while (v340);
            v95 -= v336 & 0x3FFFFFFFFFFFFFFCLL;
            if (v336 == (v336 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_627;
            }
          }
          do
          {
            uint64_t v513 = *(void *)(v337 - 8);
            v337 -= 8;
            *--uint64_t v95 = v513;
          }
          while (v337 != v334);
LABEL_627:
          uint64_t v333 = *(void *)(v84 + 32);
LABEL_628:
          *(void *)(v84 + 32) = v95;
          *(void *)(v84 + 40) = v237;
          uint64_t v531 = *(void *)(v84 + 48);
          *(void *)(v84 + 48) = v91;
          if (v333) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v84 + 56) + 40))(*(void *)(v84 + 56), v333, v531 - v333);
          }
          goto LABEL_630;
        }
      }
      if (v86) {
        *double v86 = v34;
      }
      long double v237 = v86 + 1;
LABEL_630:
      *(void *)(v84 + 40) = v237;
      long double v573 = v34;
      uint64_t v532 = *(void *)(v84 + 120);
      if (!v532) {
        goto LABEL_680;
      }
      goto LABEL_655;
    }
    if (v16)
    {
      uint64_t v147 = *(void *)(a1 + 392);
      uint64_t v148 = *(void *)(v147 + 8);
      if (v148 == *(void *)v147)
      {
        uint64_t v298 = *(void *)(v147 + 88);
        if (!v298) {
          goto LABEL_680;
        }
        uint64_t v33 = v28;
        uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v298 + 48))(v298);
        double v149 = *(void **)(v147 + 40);
        unint64_t v299 = *(void *)(v147 + 48);
        uint64_t v88 = v82;
        if ((unint64_t)v149 >= v299)
        {
          uint64_t v391 = *(void *)(v147 + 32);
          uint64_t v392 = ((uint64_t)v149 - v391) >> 3;
          unint64_t v153 = v392 + 1;
          if ((unint64_t)(v392 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v393 = v299 - v391;
          if (v393 >> 2 > v153) {
            unint64_t v153 = v393 >> 2;
          }
          if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v153)
          {
            uint64_t v394 = 8 * v153;
            uint64_t v395 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v147 + 56) + 16))(*(void *)(v147 + 56), 8 * v153, 8);
            uint64_t v157 = (void *)(v395 + 8 * v392);
            unint64_t v153 = v395 + v394;
            if (v395) {
              void *v157 = v34;
            }
          }
          else
          {
            uint64_t v157 = (void *)(8 * v392);
          }
          uint64_t v300 = v157 + 1;
          uint64_t v514 = *(void *)(v147 + 32);
          uint64_t v409 = *(void *)(v147 + 40);
          if (v409 == v514) {
            goto LABEL_644;
          }
          unint64_t v515 = v409 - v514 - 8;
          if (v515 < 0x38)
          {
            uint64_t v517 = *(void *)(v147 + 40);
          }
          else if ((unint64_t)(v409 - (void)v157) < 0x20)
          {
            uint64_t v517 = *(void *)(v147 + 40);
          }
          else
          {
            uint64_t v516 = (v515 >> 3) + 1;
            uint64_t v517 = v409 - 8 * (v516 & 0x3FFFFFFFFFFFFFFCLL);
            long double v518 = v157 - 2;
            long double v519 = (long long *)(v409 - 16);
            uint64_t v520 = v516 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v521 = *v519;
              *(v518 - 1) = *(v519 - 1);
              _OWORD *v518 = v521;
              v518 -= 2;
              v519 -= 2;
              v520 -= 4;
            }
            while (v520);
            v157 -= v516 & 0x3FFFFFFFFFFFFFFCLL;
            if (v516 == (v516 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_643;
            }
          }
          do
          {
            uint64_t v535 = *(void *)(v517 - 8);
            v517 -= 8;
            *--uint64_t v157 = v535;
          }
          while (v517 != v514);
          goto LABEL_643;
        }
      }
      else
      {
        uint64_t v33 = v28;
        uint64_t v34 = *(void **)(v148 - 8);
        *(void *)(v147 + 8) = v148 - 8;
        double v149 = *(void **)(v147 + 40);
        unint64_t v150 = *(void *)(v147 + 48);
        uint64_t v88 = v82;
        if ((unint64_t)v149 >= v150)
        {
          uint64_t v151 = *(void *)(v147 + 32);
          uint64_t v152 = ((uint64_t)v149 - v151) >> 3;
          unint64_t v153 = v152 + 1;
          if ((unint64_t)(v152 + 1) >> 61) {
            goto LABEL_681;
          }
          uint64_t v154 = v150 - v151;
          if (v154 >> 2 > v153) {
            unint64_t v153 = v154 >> 2;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v153)
          {
            uint64_t v155 = 8 * v153;
            uint64_t v156 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v147 + 56) + 16))(*(void *)(v147 + 56), 8 * v153, 8);
            uint64_t v157 = (void *)(v156 + 8 * v152);
            unint64_t v153 = v156 + v155;
            if (v156) {
              void *v157 = v34;
            }
          }
          else
          {
            uint64_t v157 = (void *)(8 * v152);
          }
          uint64_t v300 = v157 + 1;
          uint64_t v410 = *(void *)(v147 + 32);
          uint64_t v409 = *(void *)(v147 + 40);
          if (v409 == v410) {
            goto LABEL_644;
          }
          unint64_t v411 = v409 - v410 - 8;
          if (v411 < 0x38)
          {
            uint64_t v413 = *(void *)(v147 + 40);
          }
          else if ((unint64_t)(v409 - (void)v157) < 0x20)
          {
            uint64_t v413 = *(void *)(v147 + 40);
          }
          else
          {
            uint64_t v412 = (v411 >> 3) + 1;
            uint64_t v413 = v409 - 8 * (v412 & 0x3FFFFFFFFFFFFFFCLL);
            long double v414 = v157 - 2;
            long double v415 = (long long *)(v409 - 16);
            uint64_t v416 = v412 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v417 = *v415;
              *(v414 - 1) = *(v415 - 1);
              _OWORD *v414 = v417;
              v414 -= 2;
              v415 -= 2;
              v416 -= 4;
            }
            while (v416);
            v157 -= v412 & 0x3FFFFFFFFFFFFFFCLL;
            if (v412 == (v412 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_643;
            }
          }
          do
          {
            uint64_t v533 = *(void *)(v413 - 8);
            v413 -= 8;
            *--uint64_t v157 = v533;
          }
          while (v413 != v410);
LABEL_643:
          uint64_t v409 = *(void *)(v147 + 32);
LABEL_644:
          *(void *)(v147 + 32) = v157;
          *(void *)(v147 + 40) = v300;
          uint64_t v536 = *(void *)(v147 + 48);
          *(void *)(v147 + 48) = v153;
          if (v409) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v147 + 56) + 40))(*(void *)(v147 + 56), v409, v536 - v409);
          }
          goto LABEL_646;
        }
      }
      if (v149) {
        void *v149 = v34;
      }
      uint64_t v300 = v149 + 1;
LABEL_646:
      *(void *)(v147 + 40) = v300;
      long double v573 = v34;
      uint64_t v532 = *(void *)(v147 + 120);
      if (!v532) {
        goto LABEL_680;
      }
      goto LABEL_655;
    }
    uint64_t v178 = *(void *)(a1 + 376);
    uint64_t v179 = *(void *)(v178 + 8);
    if (v179 == *(void *)v178)
    {
      uint64_t v301 = *(void *)(v178 + 88);
      if (!v301) {
        goto LABEL_680;
      }
      uint64_t v33 = v28;
      uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v301 + 48))(v301);
      long double v180 = *(void **)(v178 + 40);
      unint64_t v302 = *(void *)(v178 + 48);
      uint64_t v88 = v82;
      if ((unint64_t)v180 >= v302)
      {
        uint64_t v396 = *(void *)(v178 + 32);
        uint64_t v397 = ((uint64_t)v180 - v396) >> 3;
        unint64_t v184 = v397 + 1;
        if ((unint64_t)(v397 + 1) >> 61) {
          goto LABEL_681;
        }
        uint64_t v398 = v302 - v396;
        if (v398 >> 2 > v184) {
          unint64_t v184 = v398 >> 2;
        }
        if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v184)
        {
          uint64_t v399 = 8 * v184;
          uint64_t v400 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v178 + 56) + 16))(*(void *)(v178 + 56), 8 * v184, 8);
          double v188 = (void *)(v400 + 8 * v397);
          unint64_t v184 = v400 + v399;
          if (v400) {
            void *v188 = v34;
          }
        }
        else
        {
          double v188 = (void *)(8 * v397);
        }
        uint64_t v303 = v188 + 1;
        uint64_t v522 = *(void *)(v178 + 32);
        uint64_t v418 = *(void *)(v178 + 40);
        if (v418 == v522) {
          goto LABEL_652;
        }
        unint64_t v523 = v418 - v522 - 8;
        if (v523 < 0x38)
        {
          uint64_t v525 = *(void *)(v178 + 40);
        }
        else if ((unint64_t)(v418 - (void)v188) < 0x20)
        {
          uint64_t v525 = *(void *)(v178 + 40);
        }
        else
        {
          uint64_t v524 = (v523 >> 3) + 1;
          uint64_t v525 = v418 - 8 * (v524 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v526 = v188 - 2;
          long double v527 = (long long *)(v418 - 16);
          uint64_t v528 = v524 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v529 = *v527;
            *(v526 - 1) = *(v527 - 1);
            _OWORD *v526 = v529;
            v526 -= 2;
            v527 -= 2;
            v528 -= 4;
          }
          while (v528);
          v188 -= v524 & 0x3FFFFFFFFFFFFFFCLL;
          if (v524 == (v524 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_651;
          }
        }
        do
        {
          uint64_t v537 = *(void *)(v525 - 8);
          v525 -= 8;
          *--double v188 = v537;
        }
        while (v525 != v522);
        goto LABEL_651;
      }
    }
    else
    {
      uint64_t v33 = v28;
      uint64_t v34 = *(void **)(v179 - 8);
      *(void *)(v178 + 8) = v179 - 8;
      long double v180 = *(void **)(v178 + 40);
      unint64_t v181 = *(void *)(v178 + 48);
      uint64_t v88 = v82;
      if ((unint64_t)v180 >= v181)
      {
        uint64_t v182 = *(void *)(v178 + 32);
        uint64_t v183 = ((uint64_t)v180 - v182) >> 3;
        unint64_t v184 = v183 + 1;
        if ((unint64_t)(v183 + 1) >> 61) {
          goto LABEL_681;
        }
        uint64_t v185 = v181 - v182;
        if (v185 >> 2 > v184) {
          unint64_t v184 = v185 >> 2;
        }
        if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v184)
        {
          uint64_t v186 = 8 * v184;
          uint64_t v187 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v178 + 56) + 16))(*(void *)(v178 + 56), 8 * v184, 8);
          double v188 = (void *)(v187 + 8 * v183);
          unint64_t v184 = v187 + v186;
          if (v187) {
            void *v188 = v34;
          }
        }
        else
        {
          double v188 = (void *)(8 * v183);
        }
        uint64_t v303 = v188 + 1;
        uint64_t v419 = *(void *)(v178 + 32);
        uint64_t v418 = *(void *)(v178 + 40);
        if (v418 == v419) {
          goto LABEL_652;
        }
        unint64_t v420 = v418 - v419 - 8;
        if (v420 < 0x38)
        {
          uint64_t v422 = *(void *)(v178 + 40);
        }
        else if ((unint64_t)(v418 - (void)v188) < 0x20)
        {
          uint64_t v422 = *(void *)(v178 + 40);
        }
        else
        {
          uint64_t v421 = (v420 >> 3) + 1;
          uint64_t v422 = v418 - 8 * (v421 & 0x3FFFFFFFFFFFFFFCLL);
          float64x2_t v423 = v188 - 2;
          float64x2_t v424 = (long long *)(v418 - 16);
          uint64_t v425 = v421 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v426 = *v424;
            *(v423 - 1) = *(v424 - 1);
            *float64x2_t v423 = v426;
            v423 -= 2;
            v424 -= 2;
            v425 -= 4;
          }
          while (v425);
          v188 -= v421 & 0x3FFFFFFFFFFFFFFCLL;
          if (v421 == (v421 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_651;
          }
        }
        do
        {
          uint64_t v534 = *(void *)(v422 - 8);
          v422 -= 8;
          *--double v188 = v534;
        }
        while (v422 != v419);
LABEL_651:
        uint64_t v418 = *(void *)(v178 + 32);
LABEL_652:
        *(void *)(v178 + 32) = v188;
        *(void *)(v178 + 40) = v303;
        uint64_t v538 = *(void *)(v178 + 48);
        *(void *)(v178 + 48) = v184;
        if (v418) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v178 + 56) + 40))(*(void *)(v178 + 56), v418, v538 - v418);
        }
        goto LABEL_654;
      }
    }
    if (v180) {
      *long double v180 = v34;
    }
    uint64_t v303 = v180 + 1;
LABEL_654:
    *(void *)(v178 + 40) = v303;
    long double v573 = v34;
    uint64_t v532 = *(void *)(v178 + 120);
    if (!v532) {
      goto LABEL_680;
    }
LABEL_655:
    (*(void (**)(uint64_t, void **))(*(void *)v532 + 48))(v532, &v573);
    uint64_t v539 = v34[8];
    *(void *)(v539 + 88) = 0;
    uint64_t v540 = *(void *)(a1 + 1408);
    *(void *)(v539 + 80) = v540;
    uint64_t v541 = v34[20];
    uint64_t v542 = *(void *)(a1 + 1416);
    uint64_t v352 = v566;
    uint64_t v351 = v567;
    if (v542) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v542 + 8), 1uLL, memory_order_relaxed);
    }
    long double v543 = *(std::__shared_weak_count **)(v541 + 88);
    *(void *)(v541 + 80) = v540;
    *(void *)(v541 + 88) = v542;
    if (v543 && !atomic_fetch_add(&v543->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
      std::__shared_weak_count::__release_weak(v543);
    }
    __n128 v544 = (void *)v34[8];
    v544[1] = 0;
    uint64_t v545 = *(void *)(a1 + 1376);
    void *v544 = v545;
    float64x2_t v546 = (void *)v34[20];
    uint64_t v547 = *(void *)(a1 + 1384);
    if (v547) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v547 + 8), 1uLL, memory_order_relaxed);
    }
    float64x2_t v548 = (std::__shared_weak_count *)v546[1];
    void *v546 = v545;
    v546[1] = v547;
    if (v548 && !atomic_fetch_add(&v548->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
      std::__shared_weak_count::__release_weak(v548);
    }
    uint64_t v549 = v34[8];
    *(void *)(v549 + 24) = 0;
    uint64_t v550 = *(void *)(a1 + v569);
    *(void *)(v549 + 16) = v550;
    uint64_t v551 = v34[20];
    uint64_t v552 = *(void *)(v570 + 8);
    if (v552) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v552 + 8), 1uLL, memory_order_relaxed);
    }
    long double v553 = *(std::__shared_weak_count **)(v551 + 24);
    *(void *)(v551 + 16) = v550;
    *(void *)(v551 + 24) = v552;
    if (v553 && !atomic_fetch_add(&v553->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
      std::__shared_weak_count::__release_weak(v553);
    }
    uint64_t v554 = v34[8];
    *(void *)(v554 + 56) = 0;
    uint64_t v555 = *(void *)(a1 + 1496);
    *(void *)(v554 + 48) = v555;
    uint64_t v556 = v34[20];
    uint64_t v557 = *(void *)(a1 + 1504);
    if (v557) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v557 + 8), 1uLL, memory_order_relaxed);
    }
    float64x2_t v558 = *(std::__shared_weak_count **)(v556 + 56);
    *(void *)(v556 + 48) = v555;
    *(void *)(v556 + 56) = v557;
    if (v558 && !atomic_fetch_add(&v558->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
      std::__shared_weak_count::__release_weak(v558);
    }
    *(void *)(v34[12] + 16) = v88;
    *(void *)(v34[12] + 8) = v83;
    uint64_t v559 = v34[8];
    *(void *)(v559 + 40) = 0;
    uint64_t v30 = a1;
    uint64_t v560 = *(void *)(a1 + 1640);
    *(void *)(v559 + 32) = v560;
    uint64_t v561 = v34[20];
    uint64_t v562 = *(void *)(a1 + 1648);
    if (v562) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v562 + 8), 1uLL, memory_order_relaxed);
    }
    float64x2_t v563 = *(std::__shared_weak_count **)(v561 + 40);
    *(void *)(v561 + 32) = v560;
    *(void *)(v561 + 40) = v562;
    if (v563 && !atomic_fetch_add(&v563->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
      std::__shared_weak_count::__release_weak(v563);
    }
LABEL_420:
    uint64_t v374 = v34[8];
    *(void *)(v374 + 72) = 0;
    uint64_t v375 = *(void *)(v30 + v352);
    *(void *)(v374 + 64) = v375;
    uint64_t v376 = v34[20];
    uint64_t v377 = *(void *)(v351 + 8);
    if (!v377) {
      goto LABEL_422;
    }
    goto LABEL_421;
  }
  uint64_t v37 = a3;
  int v112 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v113 = *(void *)(a1 + 400);
  uint64_t v114 = *(void *)(v113 + 8);
  if (v114 == *(void *)v113)
  {
    uint64_t v165 = *(void *)(v113 + 88);
    if (!v165) {
      goto LABEL_680;
    }
    uint64_t v33 = v28;
    uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v165 + 48))(v165);
    uint64_t v115 = *(void **)(v113 + 40);
    unint64_t v166 = *(void *)(v113 + 48);
    if ((unint64_t)v115 >= v166)
    {
      uint64_t v248 = *(void *)(v113 + 32);
      uint64_t v249 = ((uint64_t)v115 - v248) >> 3;
      unint64_t v119 = v249 + 1;
      if ((unint64_t)(v249 + 1) >> 61) {
        goto LABEL_681;
      }
      uint64_t v250 = v166 - v248;
      if (v250 >> 2 > v119) {
        unint64_t v119 = v250 >> 2;
      }
      if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v119)
      {
        uint64_t v251 = 8 * v119;
        uint64_t v252 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v113 + 56) + 16))(*(void *)(v113 + 56), 8 * v119, 8);
        uint64_t v123 = (void *)(v252 + 8 * v249);
        unint64_t v119 = v252 + v251;
        if (v252) {
          void *v123 = v34;
        }
      }
      else
      {
        uint64_t v123 = (void *)(8 * v249);
      }
      float64x2_t v167 = v123 + 1;
      uint64_t v325 = *(void *)(v113 + 32);
      uint64_t v287 = *(void *)(v113 + 40);
      if (v287 == v325) {
        goto LABEL_560;
      }
      unint64_t v326 = v287 - v325 - 8;
      if (v326 < 0x38)
      {
        uint64_t v328 = *(void *)(v113 + 40);
      }
      else if ((unint64_t)(v287 - (void)v123) < 0x20)
      {
        uint64_t v328 = *(void *)(v113 + 40);
      }
      else
      {
        uint64_t v327 = (v326 >> 3) + 1;
        uint64_t v328 = v287 - 8 * (v327 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v329 = v123 - 2;
        uint64_t v330 = (long long *)(v287 - 16);
        uint64_t v331 = v327 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v332 = *v330;
          *(v329 - 1) = *(v330 - 1);
          _OWORD *v329 = v332;
          v329 -= 2;
          v330 -= 2;
          v331 -= 4;
        }
        while (v331);
        v123 -= v327 & 0x3FFFFFFFFFFFFFFCLL;
        if (v327 == (v327 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_559;
        }
      }
      do
      {
        uint64_t v485 = *(void *)(v328 - 8);
        v328 -= 8;
        *--uint64_t v123 = v485;
      }
      while (v328 != v325);
      goto LABEL_559;
    }
  }
  else
  {
    uint64_t v33 = v28;
    uint64_t v34 = *(void **)(v114 - 8);
    *(void *)(v113 + 8) = v114 - 8;
    uint64_t v115 = *(void **)(v113 + 40);
    unint64_t v116 = *(void *)(v113 + 48);
    if ((unint64_t)v115 >= v116)
    {
      uint64_t v117 = *(void *)(v113 + 32);
      uint64_t v118 = ((uint64_t)v115 - v117) >> 3;
      unint64_t v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 61) {
        goto LABEL_681;
      }
      uint64_t v120 = v116 - v117;
      if (v120 >> 2 > v119) {
        unint64_t v119 = v120 >> 2;
      }
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v119)
      {
        uint64_t v121 = 8 * v119;
        uint64_t v122 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v113 + 56) + 16))(*(void *)(v113 + 56), 8 * v119, 8);
        uint64_t v123 = (void *)(v122 + 8 * v118);
        unint64_t v119 = v122 + v121;
        if (v122) {
          void *v123 = v34;
        }
      }
      else
      {
        uint64_t v123 = (void *)(8 * v118);
      }
      float64x2_t v167 = v123 + 1;
      uint64_t v288 = *(void *)(v113 + 32);
      uint64_t v287 = *(void *)(v113 + 40);
      if (v287 == v288) {
        goto LABEL_560;
      }
      unint64_t v289 = v287 - v288 - 8;
      if (v289 < 0x38)
      {
        uint64_t v291 = *(void *)(v113 + 40);
      }
      else if ((unint64_t)(v287 - (void)v123) < 0x20)
      {
        uint64_t v291 = *(void *)(v113 + 40);
      }
      else
      {
        uint64_t v290 = (v289 >> 3) + 1;
        uint64_t v291 = v287 - 8 * (v290 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v292 = v123 - 2;
        BOOL v293 = (long long *)(v287 - 16);
        uint64_t v294 = v290 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v295 = *v293;
          *(v292 - 1) = *(v293 - 1);
          _OWORD *v292 = v295;
          v292 -= 2;
          v293 -= 2;
          v294 -= 4;
        }
        while (v294);
        v123 -= v290 & 0x3FFFFFFFFFFFFFFCLL;
        if (v290 == (v290 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_559;
        }
      }
      do
      {
        uint64_t v390 = *(void *)(v291 - 8);
        v291 -= 8;
        *--uint64_t v123 = v390;
      }
      while (v291 != v288);
LABEL_559:
      uint64_t v287 = *(void *)(v113 + 32);
LABEL_560:
      *(void *)(v113 + 32) = v123;
      *(void *)(v113 + 40) = v167;
      uint64_t v486 = *(void *)(v113 + 48);
      *(void *)(v113 + 48) = v119;
      if (v287) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v113 + 56) + 40))(*(void *)(v113 + 56), v287, v486 - v287);
      }
      goto LABEL_562;
    }
  }
  if (v115) {
    void *v115 = v34;
  }
  float64x2_t v167 = v115 + 1;
LABEL_562:
  *(void *)(v113 + 40) = v167;
  long double v573 = v34;
  uint64_t v487 = *(void *)(v113 + 120);
  if (!v487) {
    goto LABEL_680;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v487 + 48))(v487, &v573);
  uint64_t v30 = a1;
  md::LabelPipelineStateManager<ggl::GlyphWithNormalHalo::DefaultPipelineState,std::shared_ptr<ggl::GlyphWithNormalHaloShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v573, a1 + 472, v11 == 0, v112 == 0, 0, a5, v11 != 0);
  long double v488 = v573;
  double v489 = v574;
  if (v574) {
    atomic_fetch_add_explicit(&v574->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = a2;
  if (!v488 || *(void *)v488[5] != v34[1])
  {
    double v490 = (std::__shared_weak_count *)v34[3];
    v34[2] = 0;
    v34[3] = 0;
    if (!v490) {
      goto LABEL_577;
    }
    goto LABEL_575;
  }
  __double2 v491 = (void *)v34[2];
  if (v491 && v491 != v488) {
    ggl::PipelineSetup::resetData((uint64_t)v34);
  }
  if (v489) {
    atomic_fetch_add_explicit(&v489->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v490 = (std::__shared_weak_count *)v34[3];
  v34[2] = v488;
  v34[3] = v489;
  if (v490)
  {
LABEL_575:
    if (!atomic_fetch_add(&v490->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
  }
LABEL_577:
  if (v489 && !atomic_fetch_add(&v489->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
    std::__shared_weak_count::__release_weak(v489);
  }
  long double v492 = v574;
  if (v574 && !atomic_fetch_add(&v574->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
    std::__shared_weak_count::__release_weak(v492);
  }
  uint64_t v493 = v34[8];
  *(void *)(v493 + 56) = 0;
  uint64_t v494 = *(void *)(a1 + 1408);
  *(void *)(v493 + 48) = v494;
  uint64_t v495 = v34[20];
  uint64_t v496 = *(void *)(a1 + 1416);
  if (v496) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v496 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v497 = *(std::__shared_weak_count **)(v495 + 56);
  *(void *)(v495 + 48) = v494;
  *(void *)(v495 + 56) = v496;
  if (v497 && !atomic_fetch_add(&v497->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
    std::__shared_weak_count::__release_weak(v497);
  }
  uint64_t v498 = (void *)v34[8];
  if (v11)
  {
    v498[1] = 0;
    uint64_t v499 = *(void *)(a1 + 1392);
    *uint64_t v498 = v499;
    long double v500 = (void *)v34[20];
    uint64_t v501 = *(void *)(a1 + 1400);
    if (v501) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v501 + 8), 1uLL, memory_order_relaxed);
    }
    double v502 = (std::__shared_weak_count *)v500[1];
    void *v500 = v499;
    v500[1] = v501;
    uint64_t v504 = v566;
    uint64_t v503 = v567;
    if (v502 && !atomic_fetch_add(&v502->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }
  else
  {
    v498[3] = 0;
    uint64_t v505 = *(void *)(a1 + 1496);
    v498[2] = v505;
    uint64_t v506 = v34[20];
    uint64_t v507 = *(void *)(a1 + 1504);
    if (v507) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v507 + 8), 1uLL, memory_order_relaxed);
    }
    float64x2_t v508 = *(std::__shared_weak_count **)(v506 + 24);
    *(void *)(v506 + 16) = v505;
    *(void *)(v506 + 24) = v507;
    uint64_t v504 = v566;
    uint64_t v503 = v567;
    if (v508 && !atomic_fetch_add(&v508->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
      std::__shared_weak_count::__release_weak(v508);
    }
    *(void *)(v34[12] + 8) = v568;
  }
  uint64_t v509 = v34[8];
  *(void *)(v509 + 40) = 0;
  uint64_t v510 = *(void *)(a1 + v504);
  *(void *)(v509 + 32) = v510;
  uint64_t v511 = v34[20];
  uint64_t v512 = *(void *)(v503 + 8);
  if (v512) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v512 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v234 = *(std::__shared_weak_count **)(v511 + 40);
  *(void *)(v511 + 32) = v510;
  *(void *)(v511 + 40) = v512;
  if (v234) {
    goto LABEL_423;
  }
LABEL_425:
  *(void *)v34[12] = v33;
  long double v378 = (void *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(void *)(v30 + 336));
  uint64_t v379 = *(void *)v29;
  int v380 = *(unsigned __int8 *)(*(void *)v29 + 8);
  if (v380 == 2)
  {
    int v382 = *(unsigned __int8 *)(v37 + 8);
    long double v384 = a4 + 2;
    long double v383 = a4 + 3;
LABEL_431:
    if (v382) {
      __double2 v381 = v384;
    }
    else {
      __double2 v381 = v383;
    }
    goto LABEL_434;
  }
  if (v380 == 1)
  {
    int v382 = *(unsigned __int8 *)(v37 + 8);
    long double v383 = a4;
    long double v384 = a4 + 1;
    goto LABEL_431;
  }
  if (!*(unsigned char *)(*(void *)v29 + 8))
  {
    __double2 v381 = a4;
LABEL_434:
    v378[3] = *v381;
  }
  v378[4] = v34;
  v378[8] = v30 + 1024;
  uint64_t v385 = *(unsigned __int16 *)(v379 + 38);
  uint64_t v386 = v29[2];
  v378[9] = 6 * v385;
  v378[10] = 6 * (v386 + v385);
  v378[11] = 0;
  v378[12] = 1;
  uint64_t result = ggl::CommandBuffer::pushRenderItem(*(void *)(v37 + 16), (uint64_t)v378);
  ++*(_DWORD *)(v30 + 1812);
  return result;
}

uint64_t ggl::PipelineSetup::resetData(uint64_t this)
{
  uint64_t v1 = (void *)this;
  uint64_t v2 = *(void **)(this + 32);
  uint64_t v3 = *(void *)(this + 40) - (void)v2;
  if (v3)
  {
    unint64_t v4 = v3 >> 4;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    do
    {
      if (*v2) {
        *uint64_t v2 = 0;
      }
      v2 += 2;
      --v4;
    }
    while (v4);
  }
  if (*(void *)(this + 72) != *(void *)(this + 64))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      this = (*(uint64_t (**)(void *, unint64_t))(*v1 + 16))(v1, v6);
      uint64_t v7 = v1[8];
      if ((this & 1) == 0 && *(void *)(v7 + v5)) {
        *(void *)(v7 + v5) = 0;
      }
      ++v6;
      v5 += 16;
    }
    while (v6 < (v1[9] - v7) >> 4);
  }
  if (v1[13] != v1[12])
  {
    unint64_t v8 = 0;
    do
    {
      this = (*(uint64_t (**)(void *, unint64_t))(*v1 + 24))(v1, v8);
      uint64_t v9 = v1[12];
      if ((this & 1) == 0)
      {
        if (*(void *)(v9 + 8 * v8))
        {
          *(void *)(v9 + 8 * v8) = 0;
          uint64_t v9 = v1[12];
        }
      }
      ++v8;
    }
    while (v8 < (v1[13] - v9) >> 3);
  }
  return this;
}

BOOL ggl::DaVinci::GroundPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 5:
    case 8:
    case 10:
    case 13:
    case 28:
      return result;
    case 2:
    case 18:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 309);
      goto LABEL_20;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 329);
      goto LABEL_20;
    case 6:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 330);
      goto LABEL_20;
    case 7:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 331);
      goto LABEL_20;
    case 9:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 335);
      goto LABEL_20;
    case 11:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 336);
      goto LABEL_20;
    case 12:
    case 21:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 326);
      goto LABEL_20;
    case 14:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 317);
      goto LABEL_20;
    case 15:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 318);
      goto LABEL_20;
    case 16:
    case 25:
    case 26:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 324);
      goto LABEL_20;
    case 17:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 343);
      goto LABEL_20;
    case 19:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 327);
      goto LABEL_20;
    case 20:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 320);
      goto LABEL_20;
    case 22:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 310);
      goto LABEL_20;
    case 23:
    case 24:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 311);
      goto LABEL_20;
    case 27:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 325);
      goto LABEL_20;
    case 29:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 315);
LABEL_20:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::GroundPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      return result;
    case 1:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 309);
      goto LABEL_11;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 315);
      goto LABEL_11;
    case 5:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 327);
      goto LABEL_11;
    case 6:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 324);
      goto LABEL_11;
    case 7:
    case 8:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 314);
      goto LABEL_11;
    case 9:
    case 10:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 338);
      goto LABEL_11;
    case 11:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 310);
      goto LABEL_11;
    case 12:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 311);
LABEL_11:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL ggl::GlyphWithNormalHalo::DefaultPipelineSetup::constantDataIsEnabled(ggl::GlyphWithNormalHalo::DefaultPipelineSetup *this, uint64_t a2)
{
  if ((unint64_t)(a2 - 2) < 2) {
    return 1;
  }
  if (a2 == 1)
  {
    int v2 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
    return v2 != 0;
  }
  if (!a2)
  {
    int v2 = *(unsigned __int8 *)(*((void *)this + 2) + 308);
    return v2 != 0;
  }
  return 0;
}

BOOL ggl::GlyphWithNormalHalo::DefaultPipelineSetup::textureIsEnabled(ggl::GlyphWithNormalHalo::DefaultPipelineSetup *this, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  if (a2 == 1) {
    return *(unsigned char *)(*((void *)this + 2) + 304) != 0;
  }
  return 0;
}

BOOL ggl::Icon::ShadowPipelineSetup::constantDataIsEnabled(ggl::Icon::ShadowPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 308);
      goto LABEL_5;
    case 1:
    case 3:
      return result;
    case 2:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
LABEL_5:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL ggl::Icon::ShadowPipelineSetup::textureIsEnabled(ggl::Icon::ShadowPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Icon::IconPipelineSetup::constantDataIsEnabled(ggl::Icon::IconPipelineSetup *this, uint64_t a2)
{
  switch(a2)
  {
    case 2:
      return 1;
    case 1:
      int v2 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
      return v2 != 0;
    case 0:
      int v2 = *(unsigned __int8 *)(*((void *)this + 2) + 308);
      return v2 != 0;
  }
  return 0;
}

BOOL ggl::Icon::IconPipelineSetup::textureIsEnabled(ggl::Icon::IconPipelineSetup *this, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  if (a2 == 1) {
    return *(unsigned char *)(*((void *)this + 2) + 304) != 0;
  }
  return 0;
}

void md::LabelPipelineStateManager<ggl::GlyphWithNormalHalo::DefaultPipelineState,std::shared_ptr<ggl::GlyphWithNormalHaloShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(void *a1, uint64_t a2, unsigned __int8 a3, char a4, char a5, char a6, char a7)
{
  unint64_t v8 = a3;
  BYTE2(v8) = a4;
  BYTE4(v8) = a7;
  BYTE5(v8) = a5;
  BYTE6(v8) = a6;
  int8x16_t v9 = vceqzq_s8((int8x16_t)v8);
  int16x8_t v10 = vmovl_s8(*(int8x8_t *)v9.i8);
  int32x4_t v11 = vmovl_high_s16(v10);
  v12.i64[0] = v11.u32[2];
  v12.i64[1] = v11.u32[3];
  int8x16_t v13 = v12;
  int16x8_t v14 = vmovl_high_s8(v9);
  int32x4_t v15 = vmovl_high_s16(v14);
  v12.i64[0] = v15.u32[2];
  v12.i64[1] = v15.u32[3];
  int8x16_t v16 = v12;
  int32x4_t v17 = vmovl_s16(*(int16x4_t *)v10.i8);
  v12.i64[0] = v17.u32[2];
  v12.i64[1] = v17.u32[3];
  int8x16_t v18 = v12;
  int32x4_t v19 = vmovl_s16(*(int16x4_t *)v14.i8);
  v12.i64[0] = v19.u32[2];
  v12.i64[1] = v19.u32[3];
  int8x16_t v20 = v12;
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  int8x16_t v21 = v12;
  v12.i64[0] = v15.u32[0];
  v12.i64[1] = v15.u32[1];
  int8x16_t v22 = v12;
  v12.i64[0] = v17.u32[0];
  v12.i64[1] = v17.u32[1];
  int8x16_t v23 = v12;
  v12.i64[0] = v19.u32[0];
  v12.i64[1] = v19.u32[1];
  unint64_t v24 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v23), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v12)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v22))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v18), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v20)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v13), vbicq_s8((int8x16_t)xmmword_1A28FC990, v16)))));
  unint64_t v25 = v24;
  uint64_t v27 = (uint64_t **)(a2 + 104);
  uint64_t v26 = *(void **)(a2 + 104);
  if (!v26) {
    goto LABEL_12;
  }
  uint64_t v28 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v29 = v26[4];
    BOOL v30 = v29 >= v24;
    if (v29 >= v24) {
      uint64_t v31 = v26;
    }
    else {
      uint64_t v31 = v26 + 1;
    }
    if (v30) {
      uint64_t v28 = (uint64_t **)v26;
    }
    uint64_t v26 = (void *)*v31;
  }
  while (*v31);
  if (v28 != v27 && v24 >= (unint64_t)v28[4])
  {
    *a1 = v28[5];
    uint64_t v43 = v28[6];
    a1[1] = v43;
    if (v43) {
      atomic_fetch_add_explicit(v43 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    uint64_t v45 = a2 + 48;
    unint64_t v36 = (std::__shared_weak_count *)operator new(0x198uLL);
    v36->__shared_weak_owners_ = 0;
    v36->__shared_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588248;
    long long v37 = *(_OWORD *)(a2 + 32);
    long long v47 = *(_OWORD *)(a2 + 16);
    long long v48 = v37;
    ggl::GlyphWithNormalHalo::DefaultPipelineState::DefaultPipelineState((uint64_t)&v36[1], (void *)a2, v45, &v47, a3, a4, 0, a7, a5, a6);
    *a1 = v36 + 1;
    a1[1] = v36;
    *(void *)&long long v47 = v25;
    *((void *)&v47 + 1) = v36 + 1;
    *(void *)&long long v48 = v36;
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v38 = *(uint64_t **)(a2 + 104);
    uint64_t v39 = v27;
    if (v38)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v39 = (uint64_t **)v38;
          unint64_t v40 = v38[4];
          if (v25 >= v40) {
            break;
          }
          uint64_t v38 = *v39;
          uint64_t v27 = v39;
          if (!*v39) {
            goto LABEL_19;
          }
        }
        if (v40 >= v25) {
          goto LABEL_22;
        }
        uint64_t v38 = v39[1];
        if (!v38)
        {
          uint64_t v27 = v39 + 1;
          break;
        }
      }
    }
LABEL_19:
    uint64_t v41 = (uint64_t *)operator new(0x38uLL);
    v41[4] = v25;
    v41[5] = (uint64_t)&v36[1];
    v41[6] = (uint64_t)v36;
    *((void *)&v47 + 1) = 0;
    *(void *)&long long v48 = 0;
    *uint64_t v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v39;
    *uint64_t v27 = v41;
    uint64_t v42 = **(void **)(a2 + 96);
    if (v42)
    {
      *(void *)(a2 + 96) = v42;
      uint64_t v41 = *v27;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v41);
    ++*(void *)(a2 + 112);
    unint64_t v36 = (std::__shared_weak_count *)v48;
    if ((void)v48)
    {
LABEL_22:
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
}

void sub_1A18CAAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5);
  _Unwind_Resume(a1);
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    BOOL result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    BOOL result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      BOOL result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  float v3 = *(uint64_t (****)(void))(a1 + 160);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 264))();
  }
  *a2 = 0;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::hideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  float v3 = *(uint64_t (****)(void))(a1 + 216);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 576))();
  }
  *a2 = 0;
  return result;
}

uint64_t grl::IconModifiers::setGlyphOnly(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2) = a2;
  return this;
}

uint64_t __Block_byref_object_copy__371(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *std::__function::__value_func<void ()(ggl::RenderItem *)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    float v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57C990;
  a2[1] = v2;
  return result;
}

void *md::LayerDataLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *this, uint64_t a3, void *a4)
{
  unint64_t v5 = (unint64_t)this;
  uint64_t v496 = *MEMORY[0x1E4F143B8];
  uint64_t v480 = (void (**)(void **))&unk_1EF5709F8;
  uint64_t v481 = this;
  uint64_t v482 = (void **)&v480;
  v478[0] = &unk_1EF570A40;
  v478[1] = this;
  uint64_t v479 = v478;
  uint64_t v484 = v483;
  v483[0] = &unk_1EF570A40;
  v483[1] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v6 = *((void *)v481 + 10);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v7 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "LayerDataLogicVariableRate", "", buf, 2u);
    }
  }
  if (v479 == v478)
  {
    (*(void (**)(void *))(v478[0] + 32))(v478);
  }
  else if (v479)
  {
    (*(void (**)(void))(*v479 + 40))();
  }
  if (v482 == (void **)&v480)
  {
    v480[4]((void **)&v480);
  }
  else if (v482)
  {
    (*((void (**)(void))*v482 + 5))();
  }
  *a4 = *(void *)(a1 + 120);
  BOOL v454 = (uint8_t *)(uint64_t)(*(double *)(md::LayoutContext::frameState((md::LayoutContext *)v5) + 88) * 1000.0);
  char v8 = *(void **)(a1 + 120);
  uint64_t v9 = v8[7];
  uint64_t v10 = *(void *)(v9 + 56);
  uint64_t v430 = *(void *)(v9 + 64);
  if (v10 != v430)
  {
    while (1)
    {
      uint64_t v434 = v10;
      uint64_t v12 = *(void *)(v10 + 8);
      int32x4_t v11 = *(std::__shared_weak_count **)(v10 + 16);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v432 = v11;
      std::mutex::lock((std::mutex *)(v12 + 128));
      int8x16_t v13 = *(void **)(v12 + 192);
      v465[0] = v13;
      long long v446 = *(_OWORD *)(v12 + 200);
      *(_OWORD *)&v465[1] = v446;
      uint64_t v474 = *(void **)(v12 + 216);
      int16x8_t v14 = (char *)v474;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 208) = 0u;
      long long v15 = *(_OWORD *)(v12 + 240);
      long long v475 = *(_OWORD *)(v12 + 224);
      uint64_t v455 = (char *)v475;
      *(_OWORD *)std::string __p = v15;
      *(_OWORD *)(v12 + 224) = 0u;
      *(_OWORD *)(v12 + 240) = 0u;
      uint64_t v471 = *(void **)(v12 + 256);
      *(void *)(v12 + 256) = 0;
      std::mutex::unlock((std::mutex *)(v12 + 128));
      if (v14 == v455)
      {
        long long v129 = (void *)v446;
        if (v13 == (void *)v446) {
          goto LABEL_372;
        }
LABEL_212:
        uint64_t v456 = (uint64_t *)(v12 + 264);
        uint64_t v448 = v129;
        uint64_t v436 = (void *)(v12 + 280);
LABEL_214:
        double v130 = (void *)*v13;
        v130[12] = v454;
        v130[13] = v454;
        uint64_t v131 = *(unsigned __int8 *)v130;
        uint64_t v132 = *((unsigned __int16 *)v130 + 1);
        unint64_t v133 = (v132
              - 0x61C8864680B583EBLL
              + ((v131 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v131 - 0x61C8864680B583EBLL) >> 2)) ^ (v131 - 0x61C8864680B583EBLL);
        uint64_t v134 = v130[9];
        unint64_t v135 = (v134 - 0x61C8864680B583EBLL + (v133 << 6) + (v133 >> 2)) ^ v133;
        unint64_t v136 = *(void *)(v12 + 272);
        if (!v136) {
          goto LABEL_245;
        }
        uint8x8_t v137 = (uint8x8_t)vcnt_s8((int8x8_t)v136);
        v137.i16[0] = vaddlv_u8(v137);
        if (v137.u32[0] > 1uLL)
        {
          uint64_t v138 = (v134 - 0x61C8864680B583EBLL + (v133 << 6) + (v133 >> 2)) ^ v133;
          if (v135 >= v136) {
            uint64_t v138 = v135 % v136;
          }
        }
        else
        {
          uint64_t v138 = v135 & (v136 - 1);
        }
        uint64_t v139 = *(void ***)(*v456 + 8 * v138);
        if (!v139 || (unint64_t v140 = (char *)*v139) == 0)
        {
LABEL_244:
          unint64_t v5 = v138;
LABEL_245:
          unint64_t v140 = (char *)operator new(0x80uLL);
          *(void *)unint64_t v140 = 0;
          *((void *)v140 + 1) = v135;
          uint64_t v154 = v140 + 56;
          *((void *)v140 + 2) = *v130;
          *((void *)v140 + 3) = v140 + 56;
          *((void *)v140 + 4) = v140 + 56;
          *((void *)v140 + 5) = v140 + 56;
          *((void *)v140 + 6) = 32;
          uint64_t v155 = (char *)v130[1];
          uint64_t v156 = (char *)v130[2];
          unint64_t v157 = v156 - v155;
          if ((unint64_t)(v156 - v155) < 0x21) {
            goto LABEL_266;
          }
          if (v157 <= 0x40) {
            size_t v158 = 64;
          }
          else {
            size_t v158 = v156 - v155;
          }
          size_t v441 = v158;
          uint64_t v154 = (char *)malloc_type_malloc(v158, 0x100004077774924uLL);
          uint64_t v159 = (char *)*((void *)v140 + 3);
          unint64_t v160 = (char *)*((void *)v140 + 4);
          if (v159 == v160) {
            goto LABEL_265;
          }
          unint64_t v161 = v160 - v159;
          if ((unint64_t)(v160 - v159) < 8)
          {
            uint64_t v162 = v154;
          }
          else
          {
            uint64_t v162 = v154;
            if ((unint64_t)(v154 - v159) >= 0x20)
            {
              if (v161 < 0x20)
              {
                uint64_t v163 = 0;
LABEL_259:
                unint64_t v168 = v161 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v162 = &v154[v161 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v169 = v163 - (v161 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v170 = (uint64_t *)&v159[v163];
                uint64_t v171 = &v154[v163];
                do
                {
                  uint64_t v172 = *v170++;
                  *(void *)uint64_t v171 = v172;
                  v171 += 8;
                  v169 += 8;
                }
                while (v169);
                if (v161 != v168)
                {
                  v159 += v168;
                  goto LABEL_264;
                }
LABEL_265:
                *((void *)v140 + 3) = v154;
                *((void *)v140 + 4) = v154;
                *((void *)v140 + 6) = v441;
LABEL_266:
                if (v155 == v156) {
                  goto LABEL_284;
                }
                if (v157 < 8)
                {
                  uint64_t v175 = v154;
                }
                else if ((unint64_t)(v154 - v155) < 0x20)
                {
                  uint64_t v175 = v154;
                }
                else
                {
                  if (v157 < 0x20)
                  {
                    uint64_t v174 = 0;
LABEL_277:
                    unint64_t v180 = v157 & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v175 = &v154[v157 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v181 = v174 - (v157 & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v182 = (uint64_t *)&v155[v174];
                    uint64_t v183 = &v154[v174];
                    do
                    {
                      uint64_t v184 = *v182++;
                      *(void *)uint64_t v183 = v184;
                      v183 += 8;
                      v181 += 8;
                    }
                    while (v181);
                    if (v157 != v180)
                    {
                      v155 += v180;
                      goto LABEL_282;
                    }
LABEL_283:
                    uint64_t v154 = (char *)*((void *)v140 + 4);
LABEL_284:
                    *((void *)v140 + 4) = &v154[v157];
                    *((void *)v140 + 11) = v130[9];
                    *((_OWORD *)v140 + 6) = *((_OWORD *)v130 + 5);
                    *((void *)v140 + 14) = 0;
                    *((void *)v140 + 15) = 0;
                    float v186 = (float)(unint64_t)(*(void *)(v12 + 288) + 1);
                    float v187 = *(float *)(v12 + 296);
                    if (!v136 || (float)(v187 * (float)v136) < v186)
                    {
                      BOOL v188 = v136 < 3 || (v136 & (v136 - 1)) != 0;
                      unint64_t v189 = v188 | (2 * v136);
                      unint64_t v190 = vcvtps_u32_f32(v186 / v187);
                      if (v189 <= v190) {
                        size_t prime = v190;
                      }
                      else {
                        size_t prime = v189;
                      }
                      if (prime == 1)
                      {
                        size_t prime = 2;
                      }
                      else if ((prime & (prime - 1)) != 0)
                      {
                        size_t prime = std::__next_prime(prime);
                      }
                      int8x8_t v192 = *(int8x8_t *)(v12 + 272);
                      if (prime > *(void *)&v192) {
                        goto LABEL_297;
                      }
                      if (prime < *(void *)&v192)
                      {
                        unint64_t v193 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 288) / *(float *)(v12 + 296));
                        if (*(void *)&v192 < 3uLL
                          || (uint8x8_t v194 = (uint8x8_t)vcnt_s8(v192), v194.i16[0] = vaddlv_u8(v194), v194.u32[0] > 1uLL))
                        {
                          unint64_t v193 = std::__next_prime(v193);
                        }
                        else
                        {
                          uint64_t v195 = 1 << -(char)__clz(v193 - 1);
                          if (v193 >= 2) {
                            unint64_t v193 = v195;
                          }
                        }
                        if (prime <= v193) {
                          size_t prime = v193;
                        }
                        if (prime < *(void *)&v192) {
LABEL_297:
                        }
                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v456, prime);
                      }
                      unint64_t v136 = *(void *)(v12 + 272);
                      if ((v136 & (v136 - 1)) != 0)
                      {
                        if (v135 >= v136) {
                          unint64_t v5 = v135 % v136;
                        }
                        else {
                          unint64_t v5 = v135;
                        }
                      }
                      else
                      {
                        unint64_t v5 = (v136 - 1) & v135;
                      }
                    }
                    uint64_t v196 = *v456;
                    long long v197 = *(void **)(*v456 + 8 * v5);
                    if (v197)
                    {
                      *(void *)unint64_t v140 = *v197;
                      uint64_t v152 = v448;
                      goto LABEL_321;
                    }
                    *(void *)unint64_t v140 = *v436;
                    *uint64_t v436 = v140;
                    *(void *)(v196 + 8 * v5) = v436;
                    uint64_t v152 = v448;
                    if (*(void *)v140)
                    {
                      unint64_t v198 = *(void *)(*(void *)v140 + 8);
                      if ((v136 & (v136 - 1)) != 0)
                      {
                        if (v198 >= v136) {
                          v198 %= v136;
                        }
                      }
                      else
                      {
                        v198 &= v136 - 1;
                      }
                      long long v197 = (void *)(*v456 + 8 * v198);
LABEL_321:
                      void *v197 = v140;
                    }
                    ++*(void *)(v12 + 288);
                    double v130 = (void *)*v13;
                    uint64_t v153 = v13[1];
                    if (!v153) {
                      goto LABEL_324;
                    }
LABEL_323:
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v153 + 16), 1uLL, memory_order_relaxed);
                    goto LABEL_324;
                  }
                  uint64_t v174 = v157 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v176 = (long long *)(v155 + 16);
                  uint64_t v177 = v154 + 16;
                  unint64_t v178 = v157 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v179 = *v176;
                    *(v177 - 1) = *(v176 - 1);
                    _OWORD *v177 = v179;
                    v176 += 2;
                    v177 += 2;
                    v178 -= 32;
                  }
                  while (v178);
                  if (v157 == v174) {
                    goto LABEL_283;
                  }
                  if ((v157 & 0x18) != 0) {
                    goto LABEL_277;
                  }
                  v155 += v174;
                  uint64_t v175 = &v154[v174];
                }
                do
                {
LABEL_282:
                  char v185 = *v155++;
                  *v175++ = v185;
                }
                while (v155 != v156);
                goto LABEL_283;
              }
              uint64_t v163 = v161 & 0xFFFFFFFFFFFFFFE0;
              double v164 = (long long *)(v159 + 16);
              uint64_t v165 = v154 + 16;
              unint64_t v166 = v161 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v167 = *v164;
                *(v165 - 1) = *(v164 - 1);
                *uint64_t v165 = v167;
                v164 += 2;
                v165 += 2;
                v166 -= 32;
              }
              while (v166);
              if (v161 == v163) {
                goto LABEL_265;
              }
              if ((v161 & 0x18) != 0) {
                goto LABEL_259;
              }
              v159 += v163;
              uint64_t v162 = &v154[v163];
            }
          }
          do
          {
LABEL_264:
            char v173 = *v159++;
            *v162++ = v173;
          }
          while (v159 != v160);
          goto LABEL_265;
        }
        if (v137.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v147 = *((void *)v140 + 1);
            if (v147 == v135)
            {
              if (v140[16] == v131
                && *((unsigned __int16 *)v140 + 9) == v132
                && *((void *)v140 + 11) == v134)
              {
                uint64_t v148 = (const void *)*((void *)v140 + 3);
                size_t v149 = *((void *)v140 + 4) - (void)v148;
                unint64_t v150 = (const void *)v130[1];
                if (v149 == v130[2] - (void)v150)
                {
                  uint64_t v440 = v138;
                  int v151 = memcmp(v148, v150, v149);
                  uint64_t v138 = v440;
                  if (!v151) {
                    goto LABEL_242;
                  }
                }
              }
            }
            else if ((v147 & (v136 - 1)) != v138)
            {
              goto LABEL_244;
            }
            unint64_t v140 = *(char **)v140;
            if (!v140) {
              goto LABEL_244;
            }
          }
        }
        while (1)
        {
          unint64_t v141 = *((void *)v140 + 1);
          if (v141 == v135)
          {
            if (v140[16] == v131
              && *((unsigned __int16 *)v140 + 9) == v132
              && *((void *)v140 + 11) == v134)
            {
              uint64_t v142 = (const void *)*((void *)v140 + 3);
              size_t v143 = *((void *)v140 + 4) - (void)v142;
              double v144 = (const void *)v130[1];
              if (v143 == v130[2] - (void)v144)
              {
                uint64_t v145 = v138;
                int v146 = memcmp(v142, v144, v143);
                uint64_t v138 = v145;
                if (!v146)
                {
LABEL_242:
                  uint64_t v152 = v448;
                  uint64_t v153 = v13[1];
                  if (v153) {
                    goto LABEL_323;
                  }
LABEL_324:
                  uint64_t v199 = (std::__shared_weak_count *)*((void *)v140 + 15);
                  *((void *)v140 + 14) = v130;
                  *((void *)v140 + 15) = v153;
                  if (v199) {
                    std::__shared_weak_count::__release_weak(v199);
                  }
                  unint64_t v200 = (void *)*v13;
                  uint64_t v201 = v490;
                  *(void *)long long buf = *(void *)*v13;
                  uint64_t v486 = (uint8_t *)v490;
                  uint64_t v487 = (uint8_t *)v490;
                  long double v488 = (uint8_t *)v490;
                  uint64_t v489 = 32;
                  uint64_t v202 = (char *)v200[1];
                  double v203 = (char *)v200[2];
                  unint64_t v5 = v203 - v202;
                  if ((unint64_t)(v203 - v202) < 0x21) {
                    goto LABEL_347;
                  }
                  if (v5 <= 0x40) {
                    size_t v204 = 64;
                  }
                  else {
                    size_t v204 = v203 - v202;
                  }
                  uint64_t v201 = malloc_type_malloc(v204, 0x100004077774924uLL);
                  uint64_t v205 = v486;
                  long long v206 = v487;
                  if (v486 == v487) {
                    goto LABEL_346;
                  }
                  unint64_t v207 = v487 - v486;
                  if ((unint64_t)(v487 - v486) < 8)
                  {
                    uint64_t v208 = v201;
                    goto LABEL_345;
                  }
                  uint64_t v208 = v201;
                  if ((unint64_t)((char *)v201 - (char *)v486) < 0x20) {
                    goto LABEL_345;
                  }
                  if (v207 >= 0x20)
                  {
                    unint64_t v209 = v207 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v210 = (long long *)(v486 + 16);
                    uint64_t v211 = v201 + 2;
                    unint64_t v212 = v207 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v213 = *v210;
                      *(v211 - 1) = *(v210 - 1);
                      *uint64_t v211 = v213;
                      v210 += 2;
                      v211 += 2;
                      v212 -= 32;
                    }
                    while (v212);
                    if (v207 == v209) {
                      goto LABEL_346;
                    }
                    if ((v207 & 0x18) != 0) {
                      goto LABEL_340;
                    }
                    v205 += v209;
                    uint64_t v208 = (char *)v201 + v209;
                    do
                    {
LABEL_345:
                      char v219 = *v205++;
                      *v208++ = v219;
                    }
                    while (v205 != v206);
                    goto LABEL_346;
                  }
                  unint64_t v209 = 0;
LABEL_340:
                  unint64_t v214 = v207 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v208 = (char *)v201 + (v207 & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v215 = v209 - (v207 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v216 = &v205[v209];
                  double v217 = (void *)((char *)v201 + v209);
                  do
                  {
                    uint64_t v218 = *(void *)v216;
                    v216 += 8;
                    *v217++ = v218;
                    v215 += 8;
                  }
                  while (v215);
                  if (v207 != v214)
                  {
                    v205 += v214;
                    goto LABEL_345;
                  }
LABEL_346:
                  uint64_t v486 = (uint8_t *)v201;
                  uint64_t v487 = (uint8_t *)v201;
                  uint64_t v489 = v204;
LABEL_347:
                  if (v202 == v203) {
                    goto LABEL_365;
                  }
                  if (v5 < 8)
                  {
                    uint64_t v221 = v201;
                    goto LABEL_363;
                  }
                  if ((unint64_t)((char *)v201 - v202) < 0x20)
                  {
                    uint64_t v221 = v201;
                    goto LABEL_363;
                  }
                  if (v5 >= 0x20)
                  {
                    unint64_t v220 = v5 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v222 = (long long *)(v202 + 16);
                    uint64_t v223 = v201 + 2;
                    unint64_t v224 = v5 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v225 = *v222;
                      *(v223 - 1) = *(v222 - 1);
                      *uint64_t v223 = v225;
                      v222 += 2;
                      v223 += 2;
                      v224 -= 32;
                    }
                    while (v224);
                    if (v5 == v220) {
                      goto LABEL_364;
                    }
                    if ((v5 & 0x18) != 0) {
                      goto LABEL_358;
                    }
                    v202 += v220;
                    uint64_t v221 = (char *)v201 + v220;
                    do
                    {
LABEL_363:
                      char v231 = *v202++;
                      *v221++ = v231;
                    }
                    while (v202 != v203);
                    goto LABEL_364;
                  }
                  unint64_t v220 = 0;
LABEL_358:
                  unint64_t v226 = v5 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v221 = (char *)v201 + (v5 & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v227 = v220 - (v5 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v228 = (uint64_t *)&v202[v220];
                  float64x2_t v229 = (void *)((char *)v201 + v220);
                  do
                  {
                    uint64_t v230 = *v228++;
                    *v229++ = v230;
                    v227 += 8;
                  }
                  while (v227);
                  if (v5 != v226)
                  {
                    v202 += v226;
                    goto LABEL_363;
                  }
LABEL_364:
                  uint64_t v201 = v487;
LABEL_365:
                  std::string::size_type v232 = v200[9];
                  uint64_t v487 = (uint8_t *)v201 + v5;
                  std::string::size_type v491 = v232;
                  long long v492 = *((_OWORD *)v200 + 5);
                  uint64_t v493 = (void *)*v13;
                  std::string::size_type v233 = v13[1];
                  v494.__r_.__value_.__r.__words[0] = v233;
                  if (v233) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v233 + 8), 1uLL, memory_order_relaxed);
                  }
                  geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::insert((uint64_t *)(v12 + 344), (uint64_t *)buf);
                  uint64_t v234 = (std::__shared_weak_count *)v494.__r_.__value_.__r.__words[0];
                  if (v494.__r_.__value_.__r.__words[0]
                    && !atomic_fetch_add((atomic_ullong *volatile)(v494.__r_.__value_.__r.__words[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                  if (v486 != v488) {
                    free(v486);
                  }
                  v13 += 2;
                  if (v13 == v152) {
                    goto LABEL_372;
                  }
                  goto LABEL_214;
                }
              }
            }
          }
          else
          {
            if (v141 >= v136) {
              v141 %= v136;
            }
            if (v141 != v138) {
              goto LABEL_244;
            }
          }
          unint64_t v140 = *(char **)v140;
          if (!v140) {
            goto LABEL_244;
          }
        }
      }
      uint64_t v447 = (std::string **)(v12 + 320);
      do
      {
        int8x16_t v16 = v490;
        *(void *)long long buf = *((void *)v14 + 1);
        uint64_t v486 = (uint8_t *)v490;
        uint64_t v487 = (uint8_t *)v490;
        long double v488 = (uint8_t *)v490;
        uint64_t v489 = 32;
        int32x4_t v17 = (char *)*((void *)v14 + 2);
        int8x16_t v18 = (char *)*((void *)v14 + 3);
        unint64_t v19 = v18 - v17;
        if ((unint64_t)(v18 - v17) < 0x21) {
          goto LABEL_43;
        }
        if (v19 <= 0x40) {
          size_t v20 = 64;
        }
        else {
          size_t v20 = v18 - v17;
        }
        int8x16_t v16 = malloc_type_malloc(v20, 0x100004077774924uLL);
        int8x16_t v21 = v486;
        int8x16_t v22 = v487;
        if (v486 != v487)
        {
          unint64_t v23 = v487 - v486;
          if ((unint64_t)(v487 - v486) < 8)
          {
            unint64_t v24 = v16;
          }
          else
          {
            unint64_t v24 = v16;
            if ((unint64_t)((char *)v16 - (char *)v486) >= 0x20)
            {
              if (v23 < 0x20)
              {
                unint64_t v25 = 0;
                goto LABEL_36;
              }
              unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v26 = (long long *)(v486 + 16);
              uint64_t v27 = v16 + 2;
              unint64_t v28 = v23 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v29 = *v26;
                *(v27 - 1) = *(v26 - 1);
                *uint64_t v27 = v29;
                v26 += 2;
                v27 += 2;
                v28 -= 32;
              }
              while (v28);
              if (v23 == v25) {
                goto LABEL_42;
              }
              if ((v23 & 0x18) != 0)
              {
LABEL_36:
                unint64_t v30 = v23 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v24 = (char *)v16 + (v23 & 0xFFFFFFFFFFFFFFF8);
                unint64_t v31 = v25 - (v23 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v32 = &v21[v25];
                uint64_t v33 = (void *)((char *)v16 + v25);
                do
                {
                  uint64_t v34 = *(void *)v32;
                  v32 += 8;
                  *v33++ = v34;
                  v31 += 8;
                }
                while (v31);
                if (v23 == v30) {
                  goto LABEL_42;
                }
                v21 += v30;
              }
              else
              {
                v21 += v25;
                unint64_t v24 = (char *)v16 + v25;
              }
            }
          }
          do
          {
            char v35 = *v21++;
            *v24++ = v35;
          }
          while (v21 != v22);
        }
LABEL_42:
        uint64_t v486 = (uint8_t *)v16;
        uint64_t v487 = (uint8_t *)v16;
        uint64_t v489 = v20;
LABEL_43:
        if (v17 == v18) {
          goto LABEL_61;
        }
        if (v19 < 8)
        {
          long long v37 = v16;
          goto LABEL_59;
        }
        if ((unint64_t)((char *)v16 - v17) < 0x20)
        {
          long long v37 = v16;
          goto LABEL_59;
        }
        if (v19 >= 0x20)
        {
          unint64_t v36 = v19 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v38 = (long long *)(v17 + 16);
          uint64_t v39 = v16 + 2;
          unint64_t v40 = v19 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v41 = *v38;
            *(v39 - 1) = *(v38 - 1);
            *uint64_t v39 = v41;
            v38 += 2;
            v39 += 2;
            v40 -= 32;
          }
          while (v40);
          if (v19 == v36) {
            goto LABEL_60;
          }
          if ((v19 & 0x18) == 0)
          {
            v17 += v36;
            long long v37 = (char *)v16 + v36;
            goto LABEL_59;
          }
        }
        else
        {
          unint64_t v36 = 0;
        }
        unint64_t v42 = v19 & 0xFFFFFFFFFFFFFFF8;
        long long v37 = (char *)v16 + (v19 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v43 = v36 - (v19 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v44 = (uint64_t *)&v17[v36];
        uint64_t v45 = (void *)((char *)v16 + v36);
        do
        {
          uint64_t v46 = *v44++;
          *v45++ = v46;
          v43 += 8;
        }
        while (v43);
        if (v19 == v42) {
          goto LABEL_60;
        }
        v17 += v42;
        do
        {
LABEL_59:
          char v47 = *v17++;
          *v37++ = v47;
        }
        while (v17 != v18);
LABEL_60:
        int8x16_t v16 = v487;
LABEL_61:
        std::string::size_type v48 = *((void *)v14 + 10);
        uint64_t v487 = (uint8_t *)v16 + v19;
        std::string::size_type v491 = v48;
        long long v492 = *(_OWORD *)(v14 + 88);
        uint64_t v493 = (void *)*((void *)v14 + 13);
        if (v14[135] < 0)
        {
          std::string::__init_copy_ctor_external(&v494, *((const std::string::value_type **)v14 + 14), *((void *)v14 + 15));
          if (v14[159] < 0)
          {
LABEL_65:
            std::string::__init_copy_ctor_external(&v495, *((const std::string::value_type **)v14 + 17), *((void *)v14 + 18));
            goto LABEL_66;
          }
        }
        else
        {
          long long v49 = *((_OWORD *)v14 + 7);
          v494.__r_.__value_.__r.__words[2] = *((void *)v14 + 16);
          *(_OWORD *)&v494.__r_.__value_.__l.__data_ = v49;
          if (v14[159] < 0) {
            goto LABEL_65;
          }
        }
        long long v50 = *(_OWORD *)(v14 + 136);
        v495.__r_.__value_.__r.__words[2] = *((void *)v14 + 19);
        *(_OWORD *)&v495.__r_.__value_.__l.__data_ = v50;
LABEL_66:
        unint64_t v5 = buf[0];
        int v51 = *(unsigned __int16 *)&buf[2];
        unint64_t v52 = (*(unsigned __int16 *)&buf[2]
             - 0x61C8864680B583EBLL
             + ((v5 - 0x61C8864680B583EBLL) << 6)
             + ((v5 - 0x61C8864680B583EBLL) >> 2)) ^ (v5 - 0x61C8864680B583EBLL);
        std::string::size_type v53 = v491;
        unint64_t v54 = (v491 - 0x61C8864680B583EBLL + (v52 << 6) + (v52 >> 2)) ^ v52;
        unint64_t v55 = *(void *)(v12 + 312);
        if (v55)
        {
          uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
          v56.i16[0] = vaddlv_u8(v56);
          if (v56.u32[0] > 1uLL)
          {
            unint64_t v19 = (v491 - 0x61C8864680B583EBLL + (v52 << 6) + (v52 >> 2)) ^ v52;
            if (v54 >= v55) {
              unint64_t v19 = v54 % v55;
            }
          }
          else
          {
            unint64_t v19 = v54 & (v55 - 1);
          }
          uint64_t v57 = *(uint64_t ****)(*(void *)(v12 + 304) + 8 * v19);
          if (v57)
          {
            unint64_t v58 = *v57;
            if (*v57)
            {
              float v59 = v486;
              size_t v60 = v487 - v486;
              if (v56.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v65 = v58[1];
                  if (v65 == (uint64_t *)v54)
                  {
                    if (*((unsigned __int8 *)v58 + 16) == v5
                      && *((unsigned __int16 *)v58 + 9) == v51
                      && v58[11] == (uint64_t *)v53)
                    {
                      unint64_t v66 = v58[3];
                      if ((char *)v58[4] - (char *)v66 == v60)
                      {
                        size_t v439 = v60;
                        double v444 = v59;
                        int v67 = memcmp(v66, v59, v60);
                        size_t v60 = v439;
                        float v59 = v444;
                        if (!v67) {
                          goto LABEL_94;
                        }
                      }
                    }
                  }
                  else if (((unint64_t)v65 & (v55 - 1)) != v19)
                  {
                    goto LABEL_98;
                  }
                  unint64_t v58 = (uint64_t **)*v58;
                  if (!v58) {
                    goto LABEL_98;
                  }
                }
              }
              do
              {
                unint64_t v61 = (unint64_t)v58[1];
                if (v61 == v54)
                {
                  if (*((unsigned __int8 *)v58 + 16) == v5
                    && *((unsigned __int16 *)v58 + 9) == v51
                    && v58[11] == (uint64_t *)v53)
                  {
                    __n128 v62 = v58[3];
                    if ((char *)v58[4] - (char *)v62 == v60)
                    {
                      uint64_t v443 = v59;
                      size_t v63 = v60;
                      int v64 = memcmp(v62, v59, v60);
                      size_t v60 = v63;
                      float v59 = v443;
                      if (!v64)
                      {
LABEL_94:
                        if ((SHIBYTE(v495.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                          goto LABEL_95;
                        }
LABEL_198:
                        operator delete(v495.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0) {
                          goto LABEL_199;
                        }
                        goto LABEL_96;
                      }
                    }
                  }
                }
                else
                {
                  if (v61 >= v55) {
                    v61 %= v55;
                  }
                  if (v61 != v19) {
                    break;
                  }
                }
                unint64_t v58 = (uint64_t **)*v58;
              }
              while (v58);
            }
          }
        }
LABEL_98:
        uint64_t v68 = (std::string *)operator new(0xA8uLL);
        v68->__r_.__value_.__r.__words[0] = 0;
        v68->__r_.__value_.__l.__size_ = v54;
        uint64_t v69 = &v68[2].__r_.__value_.__s.__data_[8];
        double v70 = v486;
        v68->__r_.__value_.__r.__words[2] = *(void *)buf;
        v68[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v68[2].__r_.__value_.__l.__size_;
        v68[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v68[2].__r_.__value_.__l.__size_;
        v68[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v68[2].__r_.__value_.__l.__size_;
        v68[2].__r_.__value_.__r.__words[0] = 32;
        uint64_t v71 = v487;
        unint64_t v5 = v487 - v70;
        if ((unint64_t)(v487 - v70) >= 0x21)
        {
          if (v5 <= 0x40) {
            size_t v72 = 64;
          }
          else {
            size_t v72 = v487 - v70;
          }
          uint64_t v69 = (std::string::value_type *)malloc_type_malloc(v72, 0x100004077774924uLL);
          std::string::pointer data = v68[1].__r_.__value_.__l.__data_;
          std::string::pointer size = (std::string::pointer)v68[1].__r_.__value_.__l.__size_;
          if (data == size) {
            goto LABEL_118;
          }
          unint64_t v75 = size - data;
          if ((unint64_t)(size - data) < 8)
          {
            uint64_t v76 = v69;
          }
          else
          {
            uint64_t v76 = v69;
            if ((unint64_t)(v69 - data) >= 0x20)
            {
              if (v75 < 0x20)
              {
                uint64_t v77 = 0;
LABEL_112:
                unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v76 = &v69[v75 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v83 = v77 - (v75 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v84 = &data[v77];
                uint64_t v85 = &v69[v77];
                do
                {
                  uint64_t v86 = *(void *)v84;
                  v84 += 8;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v83 += 8;
                }
                while (v83);
                if (v75 != v82)
                {
                  data += v82;
                  goto LABEL_117;
                }
LABEL_118:
                v68[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
                v68[1].__r_.__value_.__l.__size_ = (std::string::size_type)v69;
                v68[2].__r_.__value_.__r.__words[0] = v72;
                goto LABEL_119;
              }
              uint64_t v77 = v75 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v78 = (long long *)(data + 16);
              uint64_t v79 = v69 + 16;
              unint64_t v80 = v75 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v81 = *v78;
                *(v79 - 1) = *(v78 - 1);
                _OWORD *v79 = v81;
                v78 += 2;
                v79 += 2;
                v80 -= 32;
              }
              while (v80);
              if (v75 == v77) {
                goto LABEL_118;
              }
              if ((v75 & 0x18) != 0) {
                goto LABEL_112;
              }
              data += v77;
              uint64_t v76 = &v69[v77];
            }
          }
          do
          {
LABEL_117:
            char v87 = *data++;
            *v76++ = v87;
          }
          while (data != size);
          goto LABEL_118;
        }
LABEL_119:
        if (v70 != v71)
        {
          if (v5 < 8)
          {
            uint64_t v89 = v69;
          }
          else if ((unint64_t)(v69 - (std::string::value_type *)v70) < 0x20)
          {
            uint64_t v89 = v69;
          }
          else
          {
            if (v5 < 0x20)
            {
              uint64_t v88 = 0;
LABEL_130:
              unint64_t v94 = v5 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v89 = &v69[v5 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v95 = v88 - (v5 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v96 = &v70[v88];
              uint64_t v97 = &v69[v88];
              do
              {
                uint64_t v98 = *(void *)v96;
                v96 += 8;
                *(void *)uint64_t v97 = v98;
                v97 += 8;
                v95 += 8;
              }
              while (v95);
              if (v5 != v94)
              {
                v70 += v94;
                goto LABEL_135;
              }
LABEL_136:
              uint64_t v69 = (std::string::value_type *)v68[1].__r_.__value_.__l.__size_;
              goto LABEL_137;
            }
            uint64_t v88 = v5 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v90 = (long long *)(v70 + 16);
            unint64_t v91 = v69 + 16;
            unint64_t v92 = v5 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v93 = *v90;
              *(v91 - 1) = *(v90 - 1);
              *unint64_t v91 = v93;
              v90 += 2;
              v91 += 2;
              v92 -= 32;
            }
            while (v92);
            if (v5 == v88) {
              goto LABEL_136;
            }
            if ((v5 & 0x18) != 0) {
              goto LABEL_130;
            }
            v70 += v88;
            uint64_t v89 = &v69[v88];
          }
          do
          {
LABEL_135:
            char v99 = *v70++;
            *v89++ = v99;
          }
          while (v70 != v71);
          goto LABEL_136;
        }
LABEL_137:
        v68[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v69[v5];
        uint64_t v100 = v493;
        v68[3].__r_.__value_.__r.__words[2] = v491;
        *(_OWORD *)&v68[4].__r_.__value_.__l.__data_ = v492;
        v68[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v100;
        v68[5] = v494;
        memset(&v494, 0, sizeof(v494));
        v68[6] = v495;
        memset(&v495, 0, sizeof(v495));
        float v101 = (float)(unint64_t)(*(void *)(v12 + 328) + 1);
        float v102 = *(float *)(v12 + 336);
        if (!v55 || (float)(v102 * (float)v55) < v101)
        {
          BOOL v103 = v55 < 3 || (v55 & (v55 - 1)) != 0;
          unint64_t v104 = v103 | (2 * v55);
          unint64_t v105 = vcvtps_u32_f32(v101 / v102);
          if (v104 <= v105) {
            size_t v106 = v105;
          }
          else {
            size_t v106 = v104;
          }
          if (v106 == 1)
          {
            size_t v106 = 2;
          }
          else if ((v106 & (v106 - 1)) != 0)
          {
            size_t v106 = std::__next_prime(v106);
          }
          unint64_t v55 = *(void *)(v12 + 312);
          if (v106 <= v55)
          {
            if (v106 < v55)
            {
              unint64_t v118 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 328) / *(float *)(v12 + 336));
              if (v55 < 3
                || (uint8x8_t v119 = (uint8x8_t)vcnt_s8((int8x8_t)v55), v119.i16[0] = vaddlv_u8(v119), v119.u32[0] > 1uLL))
              {
                unint64_t v118 = std::__next_prime(v118);
              }
              else
              {
                uint64_t v120 = 1 << -(char)__clz(v118 - 1);
                if (v118 >= 2) {
                  unint64_t v118 = v120;
                }
              }
              if (v106 <= v118) {
                size_t v106 = v118;
              }
              if (v106 >= v55)
              {
                unint64_t v55 = *(void *)(v12 + 312);
              }
              else
              {
                if (v106) {
                  goto LABEL_150;
                }
                uint64_t v128 = *(void **)(v12 + 304);
                *(void *)(v12 + 304) = 0;
                if (v128) {
                  operator delete(v128);
                }
                unint64_t v55 = 0;
                *(void *)(v12 + 312) = 0;
              }
            }
LABEL_175:
            if ((v55 & (v55 - 1)) != 0)
            {
              if (v54 >= v55) {
                unint64_t v19 = v54 % v55;
              }
              else {
                unint64_t v19 = v54;
              }
            }
            else
            {
              unint64_t v19 = (v55 - 1) & v54;
            }
            goto LABEL_188;
          }
LABEL_150:
          if (v106 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v107 = operator new(8 * v106);
          uint64_t v108 = *(void **)(v12 + 304);
          *(void *)(v12 + 304) = v107;
          if (v108) {
            operator delete(v108);
          }
          uint64_t v109 = 0;
          *(void *)(v12 + 312) = v106;
          do
            *(void *)(*(void *)(v12 + 304) + 8 * v109++) = 0;
          while (v106 != v109);
          uint64_t v110 = *v447;
          if (!*v447) {
            goto LABEL_174;
          }
          size_t v111 = v110->__r_.__value_.__l.__size_;
          size_t v112 = v106 - 1;
          if ((v106 & (v106 - 1)) == 0)
          {
            size_t v113 = v111 & v112;
            *(void *)(*(void *)(v12 + 304) + 8 * v113) = v447;
            for (uint64_t i = (std::string *)v110->__r_.__value_.__r.__words[0];
                  v110->__r_.__value_.__r.__words[0];
                  uint64_t i = (std::string *)v110->__r_.__value_.__r.__words[0])
            {
              size_t v115 = i->__r_.__value_.__l.__size_ & v112;
              if (v115 == v113)
              {
                uint64_t v110 = i;
              }
              else
              {
                uint64_t v116 = *(void *)(v12 + 304);
                if (*(void *)(v116 + 8 * v115))
                {
                  v110->__r_.__value_.__r.__words[0] = i->__r_.__value_.__r.__words[0];
                  uint64_t v117 = 8 * v115;
                  i->__r_.__value_.__r.__words[0] = **(void **)(*(void *)(v12 + 304) + v117);
                  **(void **)(*(void *)(v12 + 304) + v117) = i;
                }
                else
                {
                  *(void *)(v116 + 8 * v115) = v110;
                  uint64_t v110 = i;
                  size_t v113 = v115;
                }
              }
            }
            goto LABEL_174;
          }
          if (v111 >= v106) {
            v111 %= v106;
          }
          *(void *)(*(void *)(v12 + 304) + 8 * v111) = v447;
          uint64_t v121 = (std::string *)v110->__r_.__value_.__r.__words[0];
          if (!v110->__r_.__value_.__r.__words[0])
          {
LABEL_174:
            unint64_t v55 = v106;
            goto LABEL_175;
          }
          while (2)
          {
            size_t v123 = v121->__r_.__value_.__l.__size_;
            if (v123 >= v106) {
              v123 %= v106;
            }
            if (v123 != v111)
            {
              uint64_t v124 = *(void *)(v12 + 304);
              if (!*(void *)(v124 + 8 * v123))
              {
                *(void *)(v124 + 8 * v123) = v110;
LABEL_179:
                uint64_t v110 = v121;
                uint64_t v121 = (std::string *)v121->__r_.__value_.__r.__words[0];
                size_t v111 = v123;
                if (!v121) {
                  goto LABEL_174;
                }
                continue;
              }
              v110->__r_.__value_.__r.__words[0] = v121->__r_.__value_.__r.__words[0];
              uint64_t v122 = 8 * v123;
              v121->__r_.__value_.__r.__words[0] = **(void **)(*(void *)(v12 + 304) + v122);
              **(void **)(*(void *)(v12 + 304) + v122) = v121;
              uint64_t v121 = v110;
            }
            break;
          }
          size_t v123 = v111;
          goto LABEL_179;
        }
LABEL_188:
        uint64_t v125 = *(void *)(v12 + 304);
        unint64_t v126 = *(std::string ***)(v125 + 8 * v19);
        if (v126)
        {
          v68->__r_.__value_.__r.__words[0] = (std::string::size_type)*v126;
        }
        else
        {
          v68->__r_.__value_.__r.__words[0] = (std::string::size_type)*v447;
          *uint64_t v447 = v68;
          *(void *)(v125 + 8 * v19) = v447;
          if (!v68->__r_.__value_.__r.__words[0]) {
            goto LABEL_197;
          }
          unint64_t v127 = *(void *)(v68->__r_.__value_.__r.__words[0] + 8);
          if ((v55 & (v55 - 1)) != 0)
          {
            if (v127 >= v55) {
              v127 %= v55;
            }
          }
          else
          {
            v127 &= v55 - 1;
          }
          unint64_t v126 = (std::string **)(*(void *)(v12 + 304) + 8 * v127);
        }
        *unint64_t v126 = v68;
LABEL_197:
        ++*(void *)(v12 + 328);
        if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_198;
        }
LABEL_95:
        if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0) {
LABEL_199:
        }
          operator delete(v494.__r_.__value_.__l.__data_);
LABEL_96:
        if (v486 != v488) {
          free(v486);
        }
        v14 += 160;
      }
      while (v14 != v455);
      int8x16_t v13 = v465[0];
      long long v129 = v465[1];
      if (v465[0] != v465[1]) {
        goto LABEL_212;
      }
LABEL_372:
      uint64_t v235 = *(void *)(v12 + 120);
      if (v235) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v235 + 48))(v235, v12 + 304);
      }
      uint64_t v236 = *(void *)(v12 + 56);
      if (!v236) {
        goto LABEL_379;
      }
      if ((void *)v475 != v474 || v465[1] != v465[0] || (long double v237 = __p[1], __p[1] != __p[0]))
      {
        (*(void (**)(uint64_t, void **, void **, void **))(*(void *)v236 + 48))(v236, v465, &v474, __p);
LABEL_379:
        long double v237 = __p[0];
      }
      if (!v237) {
        goto LABEL_392;
      }
      unint64_t v5 = (unint64_t)__p[1];
      uint64_t v238 = v237;
      if (__p[1] != v237)
      {
        while (1)
        {
          if (*(char *)(v5 - 1) < 0)
          {
            operator delete(*(void **)(v5 - 24));
            if (*(char *)(v5 - 25) < 0) {
LABEL_389:
            }
              operator delete(*(void **)(v5 - 48));
          }
          else if (*(char *)(v5 - 25) < 0)
          {
            goto LABEL_389;
          }
          uint64_t v239 = *(void **)(v5 - 144);
          if (v239 != *(void **)(v5 - 128)) {
            free(v239);
          }
          v5 -= 160;
          if ((void *)v5 == v237)
          {
            uint64_t v238 = __p[0];
            break;
          }
        }
      }
      __p[1] = v237;
      operator delete(v238);
LABEL_392:
      uint64_t v240 = v474;
      if (v474)
      {
        unint64_t v5 = v475;
        uint64_t v241 = v474;
        if ((void *)v475 == v474)
        {
LABEL_403:
          *(void *)&long long v475 = v240;
          operator delete(v241);
          goto LABEL_404;
        }
        while (1)
        {
          if (*(char *)(v5 - 1) < 0)
          {
            operator delete(*(void **)(v5 - 24));
            if (*(char *)(v5 - 25) < 0) {
LABEL_401:
            }
              operator delete(*(void **)(v5 - 48));
          }
          else if (*(char *)(v5 - 25) < 0)
          {
            goto LABEL_401;
          }
          uint64_t v242 = *(void **)(v5 - 144);
          if (v242 != *(void **)(v5 - 128)) {
            free(v242);
          }
          v5 -= 160;
          if ((void *)v5 == v240)
          {
            uint64_t v241 = v474;
            goto LABEL_403;
          }
        }
      }
LABEL_404:
      uint64_t v243 = v465[0];
      if (v465[0])
      {
        unint64_t v5 = (unint64_t)v465[1];
        uint64_t v244 = v465[0];
        if (v465[1] != v465[0])
        {
          do
          {
            uint64_t v245 = *(std::__shared_weak_count **)(v5 - 8);
            if (v245 && !atomic_fetch_add(&v245->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
            }
            v5 -= 16;
          }
          while ((void *)v5 != v243);
          uint64_t v244 = v465[0];
        }
        v465[1] = v243;
        operator delete(v244);
      }
      if (v432 && !atomic_fetch_add(&v432->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
        std::__shared_weak_count::__release_weak(v432);
      }
      uint64_t v10 = v434 + 24;
      if (v434 + 24 == v430)
      {
        char v8 = *(void **)(a1 + 120);
        break;
      }
    }
  }
  uint64_t v462 = 0;
  long double v463 = 0;
  unint64_t v464 = 0;
  uint64_t v459 = 0;
  uint64_t v460 = 0;
  unint64_t v461 = 0;
  uint64_t v246 = v8[1];
  uint64_t v431 = v8[2];
  if (v246 == v431) {
    goto LABEL_745;
  }
  do
  {
    uint64_t v435 = v246;
    uint64_t v442 = *(void *)(v246 + 8);
    uint64_t v247 = *(uint64_t **)(v442 + 16);
    std::mutex::lock((std::mutex *)(v247 + 10));
    uint64_t v248 = (void *)v247[18];
    unint64_t v249 = v247[19];
    v247[18] = 0;
    v247[19] = 0;
    uint64_t v474 = v248;
    *(void *)&long long v475 = v249;
    uint64_t v250 = v247[20];
    unint64_t v251 = v247[21];
    v247[20] = 0;
    v247[21] = 0;
    *((void *)&v475 + 1) = v250;
    unint64_t v476 = v251;
    int v477 = *((_DWORD *)v247 + 44);
    *((_DWORD *)v247 + 44) = 1065353216;
    if (v251)
    {
      unint64_t v252 = *(void *)(v250 + 8);
      if ((v249 & (v249 - 1)) != 0)
      {
        if (v252 >= v249) {
          v252 %= v249;
        }
      }
      else
      {
        v252 &= v249 - 1;
      }
      *((void *)v248 + v252) = (char *)&v475 + 8;
    }
    uint64_t v253 = (void *)v247[23];
    unint64_t v254 = v247[24];
    v247[23] = 0;
    v247[24] = 0;
    __p[0] = v253;
    __p[1] = (void *)v254;
    uint64_t v255 = (void *)v247[25];
    unint64_t v256 = v247[26];
    v247[25] = 0;
    v247[26] = 0;
    uint64_t v471 = v255;
    unint64_t v472 = v256;
    int v473 = *((_DWORD *)v247 + 54);
    *((_DWORD *)v247 + 54) = 1065353216;
    if (v256)
    {
      unint64_t v257 = v255[1];
      if ((v254 & (v254 - 1)) != 0)
      {
        if (v257 >= v254) {
          v257 %= v254;
        }
      }
      else
      {
        v257 &= v254 - 1;
      }
      *((void *)v253 + v257) = &v471;
    }
    std::mutex::unlock((std::mutex *)(v247 + 10));
    float64x2_t v258 = (char *)v247[28];
    uint64_t v452 = (std::string *)(v247 + 28);
    uint64_t v259 = (char *)v247[29];
    if (v259 != v258)
    {
      do
      {
        if (*(v259 - 16)) {
          *(v259 - 16) = 0;
        }
        long long v260 = (void *)*((void *)v259 - 12);
        if (v260 != *((void **)v259 - 10)) {
          free(v260);
        }
        v259 -= 112;
      }
      while (v259 != v258);
      uint64_t v259 = (char *)v452->__r_.__value_.__r.__words[0];
    }
    v247[29] = (uint64_t)v258;
    unint64_t v261 = 0x6DB6DB6DB6DB6DB7 * ((v258 - v259) >> 4);
    if (v476 <= v261)
    {
      if (v476 < v261)
      {
        unint64_t v262 = &v259[112 * v476];
        while (v258 != v262)
        {
          if (*(v258 - 16)) {
            *(v258 - 16) = 0;
          }
          uint64_t v263 = (void *)*((void *)v258 - 12);
          if (v263 != *((void **)v258 - 10)) {
            free(v263);
          }
          v258 -= 112;
        }
        v247[29] = (uint64_t)v262;
      }
    }
    else
    {
      std::vector<gdc::LayerDataRequestKey>::__append((void **)&v452->__r_.__value_.__l.__data_, v476 - v261);
    }
    uint64_t v264 = (uint64_t *)v462;
    for (std::string::size_type j = (std::string::size_type)v463; (uint64_t *)j != v264; j -= 120)
    {
      if (*(unsigned char *)(j - 16)) {
        *(unsigned char *)(j - 16) = 0;
      }
      double v266 = *(void **)(j - 96);
      if (v266 != *(void **)(j - 80)) {
        free(v266);
      }
    }
    long double v463 = v264;
    std::vector<gdc::LayerDataRequestKeyPair>::reserve((uint64_t)&v462, v476);
    uint64_t v267 = (uint64_t *)*((void *)&v475 + 1);
    if (*((void *)&v475 + 1))
    {
      uint64_t v457 = (gdc::LayerDataRequestKey *)(v247 + 3);
      uint64_t v445 = v247 + 5;
      do
      {
        LOBYTE(v465[0]) = *((unsigned char *)v267 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v465[1], (uint64_t)(v267 + 3));
        char v467 = 0;
        if (*((unsigned char *)v267 + 112))
        {
          int v468 = *((_DWORD *)v267 + 29);
          char v467 = 1;
        }
        std::string::size_type v268 = v267[16];
        v469.__r_.__value_.__r.__words[0] = v267[15];
        v469.__r_.__value_.__l.__size_ = v268;
        std::string::size_type v269 = v267[17];
        v469.__r_.__value_.__r.__words[2] = v269;
        if (v269)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v269 + 8), 1uLL, memory_order_relaxed);
          std::string::size_type v268 = v469.__r_.__value_.__l.__size_;
        }
        uint64_t v270 = (*(uint64_t (**)(std::string::size_type))(*(void *)v268 + 16))(v268);
        buf[0] = (uint8_t)v465[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v486, (uint64_t)&v465[1]);
        LOBYTE(v493) = 0;
        if (v467)
        {
          HIDWORD(v493) = v468;
          LOBYTE(v493) = 1;
        }
        std::string v494 = v469;
        if (v469.__r_.__value_.__r.__words[2]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v469.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
        }
        v495.__r_.__value_.__r.__words[0] = v270;
        unint64_t v271 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v457, buf);
        if (!v271)
        {
          uint64_t v281 = operator new(0x98uLL);
          void *v281 = 0;
          v281[1] = 0;
          *((unsigned char *)v281 + 16) = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v281 + 3), (uint64_t)&v486);
          *((unsigned char *)v281 + 112) = 0;
          if ((_BYTE)v493)
          {
            *((_DWORD *)v281 + 29) = HIDWORD(v493);
            *((unsigned char *)v281 + 112) = 1;
          }
          std::string::size_type v282 = v494.__r_.__value_.__l.__size_;
          v281[15] = v494.__r_.__value_.__r.__words[0];
          v281[16] = v282;
          std::string::size_type v283 = v494.__r_.__value_.__r.__words[2];
          v281[17] = *((void *)&v494.__r_.__value_.__l + 2);
          if (v283) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v283 + 8), 1uLL, memory_order_relaxed);
          }
          v281[18] = v495.__r_.__value_.__r.__words[0];
          uint64_t v284 = *v247;
          *(void *)(v284 + 8) = v281;
          void *v281 = v284;
          uint64_t *v247 = (uint64_t)v281;
          v281[1] = v247;
          ++v247[2];
          uint64_t v285 = (uint64_t *)v247[8];
          v247[9] += v495.__r_.__value_.__r.__words[0];
          if (v285 == v247) {
            v247[8] = (uint64_t)v281;
          }
          std::string::size_type v286 = v494.__r_.__value_.__r.__words[0];
          unint64_t v287 = v247[4];
          if (v287)
          {
            uint8x8_t v288 = (uint8x8_t)vcnt_s8((int8x8_t)v287);
            v288.i16[0] = vaddlv_u8(v288);
            if (v288.u32[0] > 1uLL)
            {
              std::string::size_type j = v494.__r_.__value_.__r.__words[0];
              if (v494.__r_.__value_.__r.__words[0] >= v287) {
                std::string::size_type j = v494.__r_.__value_.__r.__words[0] % v287;
              }
            }
            else
            {
              std::string::size_type j = (v287 - 1) & v494.__r_.__value_.__r.__words[0];
            }
            uint64_t v296 = *(uint64_t ****)(*(void *)v457 + 8 * j);
            if (v296)
            {
              uint64_t v297 = *v296;
              if (*v296)
              {
                int v298 = buf[0];
                int v299 = (unsigned __int16)v486;
                uint64_t v300 = (uint64_t *)v492;
                uint64_t v301 = v487;
                size_t v302 = v488 - v487;
                if (v288.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v307 = v297[1];
                    if (v307 == (uint64_t *)v286)
                    {
                      if (*((unsigned __int8 *)v297 + 16) == v298
                        && *((unsigned __int16 *)v297 + 12) == v299
                        && v297[12] == v300)
                      {
                        uint64_t v308 = v297[4];
                        if ((char *)v297[5] - (char *)v308 == v302)
                        {
                          uint64_t v450 = v301;
                          size_t v433 = v302;
                          uint64_t v438 = v300;
                          int v309 = memcmp(v308, v301, v302);
                          size_t v302 = v433;
                          uint64_t v301 = v450;
                          uint64_t v300 = v438;
                          if (!v309) {
                            goto LABEL_566;
                          }
                        }
                      }
                    }
                    else if (((unint64_t)v307 & (v287 - 1)) != j)
                    {
                      goto LABEL_525;
                    }
                    uint64_t v297 = (uint64_t **)*v297;
                    if (!v297) {
                      goto LABEL_525;
                    }
                  }
                }
                do
                {
                  unint64_t v303 = (unint64_t)v297[1];
                  if (v303 == v286)
                  {
                    if (*((unsigned __int8 *)v297 + 16) == v298
                      && *((unsigned __int16 *)v297 + 12) == v299
                      && v297[12] == v300)
                    {
                      uint64_t v304 = v297[4];
                      if ((char *)v297[5] - (char *)v304 == v302)
                      {
                        long double v449 = v301;
                        size_t v305 = v302;
                        uint64_t v437 = v300;
                        int v306 = memcmp(v304, v301, v302);
                        size_t v302 = v305;
                        uint64_t v301 = v449;
                        uint64_t v300 = v437;
                        if (!v306) {
                          goto LABEL_566;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v303 >= v287) {
                      v303 %= v287;
                    }
                    if (v303 != j) {
                      break;
                    }
                  }
                  uint64_t v297 = (uint64_t **)*v297;
                }
                while (v297);
              }
            }
          }
LABEL_525:
          unint64_t v310 = operator new(0x88uLL);
          *unint64_t v310 = 0;
          v310[1] = v286;
          *((unsigned char *)v310 + 16) = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v310 + 3), (uint64_t)&v486);
          *((unsigned char *)v310 + 112) = 0;
          if ((_BYTE)v493)
          {
            *((_DWORD *)v310 + 29) = HIDWORD(v493);
            *((unsigned char *)v310 + 112) = 1;
          }
          v310[15] = v494.__r_.__value_.__r.__words[0];
          v310[16] = v281;
          float v311 = (float)(unint64_t)(v247[6] + 1);
          float v312 = *((float *)v247 + 14);
          if (!v287 || (float)(v312 * (float)v287) < v311)
          {
            BOOL v313 = v287 < 3 || (v287 & (v287 - 1)) != 0;
            unint64_t v314 = v313 | (2 * v287);
            unint64_t v315 = vcvtps_u32_f32(v311 / v312);
            if (v314 <= v315) {
              size_t v316 = v315;
            }
            else {
              size_t v316 = v314;
            }
            if (v316 == 1)
            {
              size_t v316 = 2;
            }
            else if ((v316 & (v316 - 1)) != 0)
            {
              size_t v316 = std::__next_prime(v316);
            }
            int8x8_t v317 = (int8x8_t)v247[4];
            if (v316 > *(void *)&v317) {
              goto LABEL_540;
            }
            if (v316 < *(void *)&v317)
            {
              unint64_t v318 = vcvtps_u32_f32((float)(unint64_t)v247[6] / *((float *)v247 + 14));
              if (*(void *)&v317 < 3uLL
                || (uint8x8_t v319 = (uint8x8_t)vcnt_s8(v317), v319.i16[0] = vaddlv_u8(v319), v319.u32[0] > 1uLL))
              {
                unint64_t v318 = std::__next_prime(v318);
              }
              else
              {
                uint64_t v320 = 1 << -(char)__clz(v318 - 1);
                if (v318 >= 2) {
                  unint64_t v318 = v320;
                }
              }
              if (v316 <= v318) {
                size_t v316 = v318;
              }
              if (v316 < *(void *)&v317) {
LABEL_540:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v457, v316);
            }
            unint64_t v287 = v247[4];
            if ((v287 & (v287 - 1)) != 0)
            {
              if (v286 >= v287) {
                std::string::size_type j = v286 % v287;
              }
              else {
                std::string::size_type j = v286;
              }
            }
            else
            {
              std::string::size_type j = (v287 - 1) & v286;
            }
          }
          uint64_t v321 = *(void *)v457;
          double v322 = *(void **)(*(void *)v457 + 8 * j);
          if (v322)
          {
            *unint64_t v310 = *v322;
            goto LABEL_564;
          }
          *unint64_t v310 = *v445;
          *uint64_t v445 = v310;
          *(void *)(v321 + 8 * j) = v445;
          if (*v310)
          {
            unint64_t v323 = *(void *)(*v310 + 8);
            if ((v287 & (v287 - 1)) != 0)
            {
              if (v323 >= v287) {
                v323 %= v287;
              }
            }
            else
            {
              v323 &= v287 - 1;
            }
            double v322 = (void *)(*(void *)v457 + 8 * v323);
LABEL_564:
            *double v322 = v310;
          }
          ++v247[6];
          goto LABEL_566;
        }
        uint64_t v272 = v271;
        uint64_t v273 = v271[16];
        long double v274 = operator new(0x98uLL);
        void *v274 = 0;
        v274[1] = 0;
        *((unsigned char *)v274 + 16) = buf[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v274 + 3), (uint64_t)&v486);
        *((unsigned char *)v274 + 112) = 0;
        if ((_BYTE)v493)
        {
          *((_DWORD *)v274 + 29) = HIDWORD(v493);
          *((unsigned char *)v274 + 112) = 1;
        }
        std::string::size_type v275 = v494.__r_.__value_.__l.__size_;
        v274[15] = v494.__r_.__value_.__r.__words[0];
        v274[16] = v275;
        std::string::size_type v276 = v494.__r_.__value_.__r.__words[2];
        v274[17] = *((void *)&v494.__r_.__value_.__l + 2);
        if (v276) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v276 + 8), 1uLL, memory_order_relaxed);
        }
        v274[18] = v495.__r_.__value_.__r.__words[0];
        uint64_t v277 = *v247;
        *(void *)(v277 + 8) = v274;
        void *v274 = v277;
        uint64_t *v247 = (uint64_t)v274;
        v274[1] = v247;
        uint64_t v278 = v247[2];
        v247[2] = v278 + 1;
        uint64_t v279 = (uint64_t *)v247[8];
        if (v279 == v273)
        {
          unint64_t v280 = (void *)v273[1];
        }
        else
        {
          unint64_t v280 = v274;
          if (v279 != v247) {
            goto LABEL_488;
          }
        }
        v247[8] = (uint64_t)v280;
LABEL_488:
        unint64_t v289 = v273[18];
        unint64_t v290 = v247[9];
        BOOL v291 = v290 >= v289;
        unint64_t v292 = v290 - v289;
        if (!v291) {
          unint64_t v292 = 0;
        }
        v247[9] = v292 + v495.__r_.__value_.__r.__words[0];
        uint64_t v293 = *v273;
        *(void *)(v293 + 8) = v273[1];
        *(void *)v273[1] = v293;
        v247[2] = v278;
        uint64_t v294 = (std::__shared_weak_count *)v273[17];
        if (v294 && !atomic_fetch_add(&v294->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
          std::__shared_weak_count::__release_weak(v294);
          if (!*((unsigned char *)v273 + 112)) {
            goto LABEL_494;
          }
LABEL_493:
          *((unsigned char *)v273 + 112) = 0;
          goto LABEL_494;
        }
        if (*((unsigned char *)v273 + 112)) {
          goto LABEL_493;
        }
LABEL_494:
        long long v295 = (void *)v273[4];
        if (v295 != (void *)v273[6]) {
          free(v295);
        }
        operator delete(v273);
        v272[16] = v274;
LABEL_566:
        long long v324 = (std::__shared_weak_count *)v494.__r_.__value_.__r.__words[2];
        if (v494.__r_.__value_.__r.__words[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(v494.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
        if ((_BYTE)v493) {
          LOBYTE(v493) = 0;
        }
        if (v487 != (uint8_t *)v489) {
          free(v487);
        }
        std::string::size_type v325 = v469.__r_.__value_.__l.__size_;
        *(void *)(v469.__r_.__value_.__l.__size_ + 136) = v454;
        *(void *)(v325 + 144) = v454;
        unint64_t v326 = v247[29];
        if (v326 >= v247[30])
        {
          uint64_t v327 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)&v452->__r_.__value_.__l.__data_, (uint64_t)v465);
        }
        else
        {
          *(unsigned char *)unint64_t v326 = v465[0];
          gdc::LayerDataKey::LayerDataKey(v326 + 8, (uint64_t)&v465[1]);
          *(unsigned char *)(v326 + 96) = 0;
          if (v467)
          {
            *(_DWORD *)(v326 + 100) = v468;
            *(unsigned char *)(v326 + 96) = 1;
          }
          *(void *)(v326 + 104) = v469.__r_.__value_.__r.__words[0];
          uint64_t v327 = (unsigned char *)(v326 + 112);
        }
        v247[29] = (uint64_t)v327;
        *(void *)long long buf = *(void *)(v469.__r_.__value_.__l.__size_ + 128);
        LOBYTE(v486) = v465[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v487, (uint64_t)&v465[1]);
        v494.__r_.__value_.__s.__data_[0] = 0;
        if (v467)
        {
          HIDWORD(v494.__r_.__value_.__r.__words[0]) = v468;
          v494.__r_.__value_.__s.__data_[0] = 1;
        }
        v494.__r_.__value_.__l.__size_ = v469.__r_.__value_.__r.__words[0];
        uint64_t v328 = v463;
        if ((unint64_t)v463 >= v464)
        {
          uint64_t v329 = (uint64_t *)std::vector<gdc::LayerDataRequestKeyPair>::__push_back_slow_path<gdc::LayerDataRequestKeyPair>(&v462, (uint64_t)buf);
        }
        else
        {
          *long double v463 = *(void *)buf;
          *((unsigned char *)v328 + 8) = (_BYTE)v486;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v328 + 2), (uint64_t)&v487);
          *((unsigned char *)v328 + 104) = 0;
          if (v494.__r_.__value_.__s.__data_[0])
          {
            *((_DWORD *)v328 + 27) = HIDWORD(v494.__r_.__value_.__r.__words[0]);
            *((unsigned char *)v328 + 104) = 1;
          }
          v328[14] = v494.__r_.__value_.__l.__size_;
          uint64_t v329 = v328 + 15;
        }
        long double v463 = v329;
        if (v494.__r_.__value_.__s.__data_[0]) {
          v494.__r_.__value_.__s.__data_[0] = 0;
        }
        if (v488 != (uint8_t *)v490[0]) {
          free(v488);
        }
        uint64_t v330 = (std::__shared_weak_count *)v469.__r_.__value_.__r.__words[2];
        if (v469.__r_.__value_.__r.__words[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(v469.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
          std::__shared_weak_count::__release_weak(v330);
          if (!v467) {
            goto LABEL_593;
          }
LABEL_592:
          char v467 = 0;
          goto LABEL_593;
        }
        if (v467) {
          goto LABEL_592;
        }
LABEL_593:
        if (v465[2] != v466) {
          free(v465[2]);
        }
        uint64_t v267 = (uint64_t *)*v267;
      }
      while (v267);
    }
    uint64_t v331 = (uint64_t *)v459;
    for (uint64_t k = v460; k != v331; k -= 15)
    {
      if (*((unsigned char *)k - 16)) {
        *((unsigned char *)k - 16) = 0;
      }
      uint64_t v333 = (void *)*(k - 12);
      if (v333 != (void *)*(k - 10)) {
        free(v333);
      }
    }
    uint64_t v460 = v331;
    std::vector<gdc::LayerDataRequestKeyPair>::reserve((uint64_t)&v459, v472);
    uint64_t v334 = v471;
    if (v471)
    {
      do
      {
        *(void *)long long buf = v334[16];
        LOBYTE(v486) = *((unsigned char *)v334 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v487, (uint64_t)(v334 + 3));
        v494.__r_.__value_.__s.__data_[0] = 0;
        if (*((unsigned char *)v334 + 112))
        {
          HIDWORD(v494.__r_.__value_.__r.__words[0]) = *((_DWORD *)v334 + 29);
          v494.__r_.__value_.__s.__data_[0] = 1;
        }
        v494.__r_.__value_.__l.__size_ = v334[15];
        unint64_t v335 = v460;
        if ((unint64_t)v460 >= v461)
        {
          uint64_t v336 = (uint64_t *)std::vector<gdc::LayerDataRequestKeyPair>::__push_back_slow_path<gdc::LayerDataRequestKeyPair>(&v459, (uint64_t)buf);
        }
        else
        {
          *uint64_t v460 = *(void *)buf;
          *((unsigned char *)v335 + 8) = (_BYTE)v486;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v335 + 2), (uint64_t)&v487);
          *((unsigned char *)v335 + 104) = 0;
          if (v494.__r_.__value_.__s.__data_[0])
          {
            *((_DWORD *)v335 + 27) = HIDWORD(v494.__r_.__value_.__r.__words[0]);
            *((unsigned char *)v335 + 104) = 1;
          }
          v335[14] = v494.__r_.__value_.__l.__size_;
          uint64_t v336 = v335 + 15;
        }
        uint64_t v460 = v336;
        if (v494.__r_.__value_.__s.__data_[0]) {
          v494.__r_.__value_.__s.__data_[0] = 0;
        }
        if (v488 != (uint8_t *)v490[0]) {
          free(v488);
        }
        uint64_t v334 = (void *)*v334;
      }
      while (v334);
      uint64_t v337 = v471;
      if (v471)
      {
        do
        {
          if (v337[112]) {
            v337[112] = 0;
          }
          uint64_t v351 = *(unsigned char **)v337;
          uint64_t v352 = (void *)*((void *)v337 + 4);
          if (v352 != *((void **)v337 + 6)) {
            free(v352);
          }
          operator delete(v337);
          uint64_t v337 = v351;
        }
        while (v351);
      }
    }
    long double v338 = __p[0];
    __p[0] = 0;
    if (v338) {
      operator delete(v338);
    }
    long double v339 = (unsigned char *)*((void *)&v475 + 1);
    if (*((void *)&v475 + 1))
    {
      while (1)
      {
        uint64_t v346 = *(unsigned char **)v339;
        uint64_t v347 = (std::__shared_weak_count *)*((void *)v339 + 17);
        if (v347)
        {
          if (!atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v339[112]) {
          goto LABEL_630;
        }
LABEL_631:
        uint64_t v348 = (void *)*((void *)v339 + 4);
        if (v348 != *((void **)v339 + 6)) {
          free(v348);
        }
        operator delete(v339);
        long double v339 = v346;
        if (!v346) {
          goto LABEL_622;
        }
      }
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
      if (!v339[112]) {
        goto LABEL_631;
      }
LABEL_630:
      v339[112] = 0;
      goto LABEL_631;
    }
LABEL_622:
    uint64_t v340 = v474;
    uint64_t v474 = 0;
    if (v340) {
      operator delete(v340);
    }
    gdc::LayerDataSource::processNewLayerData(long long,std::vector<gdc::LayerDataRequestKeyPair> &,std::vector<gdc::LayerDataRequestKeyPair> &)::$_0::operator()(v442, (uint64_t *)v462, v463, 0);
    gdc::LayerDataSource::processNewLayerData(long long,std::vector<gdc::LayerDataRequestKeyPair> &,std::vector<gdc::LayerDataRequestKeyPair> &)::$_0::operator()(v442, (uint64_t *)v459, v460, 1);
    uint64_t v341 = *(void *)(v442 + 472);
    int v342 = *(unsigned __int16 *)(v442 + 32);
    uint64_t v343 = *(const gdc::LayerDataRequestKey **)(v442 + 16);
    uint64_t v344 = (unsigned __int8 *)v462;
    uint64_t v345 = v463;
    if (v462 != v463)
    {
      do
      {
        if (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(v341 + 24), v344 + 8))
        {
          gdc::LayerDataStore::get((gdc::LayerDataStore *)buf, v343, v344 + 8);
          *(uint8x8_t *)&double v349 = gdc::LayerDataRequestTracker::_processKey((void *)v341, v344 + 8, (uint64_t *)buf, 0);
          uint64_t v350 = (std::__shared_weak_count *)v486;
          if (v486)
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)v486 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, double))v350->__on_zero_shared)(v350, v349);
              std::__shared_weak_count::__release_weak(v350);
            }
          }
        }
        v344 += 120;
      }
      while (v344 != (unsigned __int8 *)v345);
    }
    memset(v465, 0, sizeof(v465));
    LODWORD(v466) = 1065353216;
    float64x2_t v353 = *(unsigned __int8 **)(v341 + 40);
    if (v353)
    {
      do
      {
        if (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(v442 + 80), v353 + 16))
        {
          std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v465, v353 + 16, (uint64_t)(v353 + 16));
        }
        float64x2_t v353 = *(unsigned __int8 **)v353;
      }
      while (v353);
      int64_t v354 = (unsigned __int8 *)v465[2];
      if (v465[2])
      {
        do
        {
          *(void *)long long buf = 0;
          uint64_t v486 = 0;
          gdc::LayerDataRequestTracker::_processKey((void *)v341, v354 + 16, (uint64_t *)buf, 0);
          int64_t v354 = *(unsigned __int8 **)v354;
        }
        while (v354);
      }
    }
    uint64_t v458 = v343;
    uint64_t v355 = *(void *)(v341 + 64);
    uint64_t v356 = *(void *)(v341 + 72);
    if (v356 != v355)
    {
      unint64_t v357 = 0;
      int v453 = v342;
      while (1)
      {
        uint64_t v358 = v355 + 112 * v357;
        if (*(unsigned __int16 *)(v358 + 8) == v342) {
          break;
        }
        ++v357;
LABEL_655:
        if (v357 >= 0x6DB6DB6DB6DB6DB7 * ((v356 - v355) >> 4)) {
          goto LABEL_728;
        }
      }
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v474, v458, (unsigned __int8 *)(v355 + 112 * v357));
      if (v474) {
        gdc::LayerDataRequestTracker::_processKey((void *)v341, (unsigned __int8 *)v358, (uint64_t *)&v474, 0);
      }
      uint64_t v360 = *(void *)(v341 + 64);
      uint64_t v359 = *(void *)(v341 + 72);
      uint64_t v361 = (uint8_t *)(v360 + 112 * v357);
      buf[0] = *v361;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v486, (uint64_t)(v361 + 8));
      LOBYTE(v493) = 0;
      if (v361[96])
      {
        HIDWORD(v493) = *(_DWORD *)(v360 + 112 * v357 + 100);
        LOBYTE(v493) = 1;
      }
      uint64_t v362 = 0x6DB6DB6DB6DB6DB7 * ((v359 - v360) >> 4) - 1;
      uint64_t v363 = v360 + 112 * v362;
      v494.__r_.__value_.__r.__words[0] = *(void *)(v360 + 112 * v357 + 104);
      gdc::LayerDataRequestKey::operator=(v360 + 112 * v357, v363);
      *(unsigned char *)uint64_t v363 = buf[0];
      *(_WORD *)(v363 + 8) = (_WORD)v486;
      if (buf == (uint8_t *)v363)
      {
LABEL_705:
        uint64_t v403 = v360 + 112 * v362;
        int v406 = *(unsigned __int8 *)(v403 + 96);
        uint64_t v404 = (unsigned char *)(v403 + 96);
        int v405 = v406;
        *((_OWORD *)v404 - 1) = v492;
        if ((_BYTE)v493)
        {
          int v407 = HIDWORD(v493);
          if (!v405) {
            *uint64_t v404 = 1;
          }
          uint64_t v408 = v360 + 112 * v362;
          *(_DWORD *)(v408 + 100) = v407;
          *(void *)(v408 + 104) = v494.__r_.__value_.__r.__words[0];
          LOBYTE(v493) = 0;
        }
        else
        {
          if (v405) {
            *uint64_t v404 = 0;
          }
          *(void *)(v360 + 112 * v362 + 104) = v494.__r_.__value_.__r.__words[0];
        }
        int v342 = v453;
        if (v487 != (uint8_t *)v489) {
          free(v487);
        }
        uint64_t v409 = *(void *)(v341 + 72);
        if (v409 == *(void *)(v341 + 64))
        {
          std::vector<gdc::LayerDataRequestKey>::__append((void **)(v341 + 64), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v412 = (std::__shared_weak_count *)v475;
          if (!(void)v475)
          {
LABEL_727:
            uint64_t v355 = *(void *)(v341 + 64);
            uint64_t v356 = *(void *)(v341 + 72);
            goto LABEL_655;
          }
        }
        else
        {
          uint64_t v410 = v409 - 112;
          while (v409 != v410)
          {
            if (*(unsigned char *)(v409 - 16)) {
              *(unsigned char *)(v409 - 16) = 0;
            }
            unint64_t v411 = *(void **)(v409 - 96);
            if (v411 != *(void **)(v409 - 80)) {
              free(v411);
            }
            v409 -= 112;
          }
          *(void *)(v341 + 72) = v410;
          uint64_t v412 = (std::__shared_weak_count *)v475;
          if (!(void)v475) {
            goto LABEL_727;
          }
        }
        if (!atomic_fetch_add(&v412->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
          std::__shared_weak_count::__release_weak(v412);
        }
        goto LABEL_727;
      }
      uint64_t v364 = (char **)(v363 + 16);
      uint64_t v365 = v360 + 112 * v362;
      uint64_t v367 = *(void *)(v365 + 32);
      uint64_t v366 = (void *)(v365 + 32);
      if (*(void *)(v363 + 16) != v367) {
        free(*(void **)(v363 + 16));
      }
      uint64_t v368 = (char *)(v366 + 2);
      uint64_t v369 = (char **)(v366 - 1);
      void *v366 = v366 + 2;
      *uint64_t v364 = (char *)(v366 + 2);
      *(v366 - 1) = v366 + 2;
      uint64_t v370 = v360 + 112 * v362;
      *(void *)(v370 + 40) = 32;
      uint64_t v371 = (size_t *)(v370 + 40);
      uint64_t v373 = v487;
      uint64_t v372 = v488;
      unint64_t v374 = v488 - v487;
      if ((unint64_t)(v488 - v487) < 0x21)
      {
LABEL_685:
        if (v373 == v372) {
          goto LABEL_704;
        }
        if (v374 < 8)
        {
          uint64_t v392 = v368;
          goto LABEL_702;
        }
        if ((unint64_t)(v368 - (char *)v373) < 0x20)
        {
          uint64_t v392 = v368;
          goto LABEL_702;
        }
        if (v374 >= 0x20)
        {
          unint64_t v391 = v374 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v393 = (long long *)(v373 + 16);
          uint64_t v394 = v368 + 16;
          unint64_t v395 = v374 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v396 = *v393;
            *(v394 - 1) = *(v393 - 1);
            *uint64_t v394 = v396;
            v393 += 2;
            v394 += 2;
            v395 -= 32;
          }
          while (v395);
          if (v374 == v391) {
            goto LABEL_703;
          }
          if ((v374 & 0x18) == 0)
          {
            v373 += v391;
            uint64_t v392 = &v368[v391];
            goto LABEL_702;
          }
        }
        else
        {
          unint64_t v391 = 0;
        }
        unint64_t v397 = v374 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v392 = &v368[v374 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v398 = v391 - (v374 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v399 = &v373[v391];
        uint64_t v400 = &v368[v391];
        do
        {
          uint64_t v401 = *(void *)v399;
          v399 += 8;
          *(void *)uint64_t v400 = v401;
          v400 += 8;
          v398 += 8;
        }
        while (v398);
        if (v374 == v397) {
          goto LABEL_703;
        }
        v373 += v397;
        do
        {
LABEL_702:
          char v402 = *v373++;
          *v392++ = v402;
        }
        while (v373 != v372);
LABEL_703:
        uint64_t v368 = *v369;
LABEL_704:
        *uint64_t v369 = &v368[v374];
        goto LABEL_705;
      }
      if (v374 <= 0x40) {
        size_t v375 = 64;
      }
      else {
        size_t v375 = v488 - v487;
      }
      size_t v451 = v375;
      uint64_t v368 = (char *)malloc_type_malloc(v375, 0x100004077774924uLL);
      uint64_t v376 = *v364;
      uint64_t v377 = *v369;
      if (*v364 == *v369)
      {
LABEL_684:
        *uint64_t v364 = v368;
        *uint64_t v369 = v368;
        *uint64_t v371 = v451;
        goto LABEL_685;
      }
      unint64_t v378 = v377 - v376;
      if ((unint64_t)(v377 - v376) < 8)
      {
        uint64_t v379 = v368;
      }
      else
      {
        uint64_t v379 = v368;
        if ((unint64_t)(v368 - v376) >= 0x20)
        {
          if (v378 < 0x20)
          {
            uint64_t v380 = 0;
LABEL_678:
            unint64_t v385 = v378 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v379 = &v368[v378 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v386 = v380 - (v378 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v387 = (uint64_t *)&v376[v380];
            uint64_t v388 = &v368[v380];
            do
            {
              uint64_t v389 = *v387++;
              *(void *)uint64_t v388 = v389;
              v388 += 8;
              v386 += 8;
            }
            while (v386);
            if (v378 == v385) {
              goto LABEL_684;
            }
            v376 += v385;
            goto LABEL_683;
          }
          uint64_t v380 = v378 & 0xFFFFFFFFFFFFFFE0;
          __double2 v381 = (long long *)(v376 + 16);
          int v382 = v368 + 16;
          unint64_t v383 = v378 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v384 = *v381;
            *(v382 - 1) = *(v381 - 1);
            *int v382 = v384;
            v381 += 2;
            v382 += 2;
            v383 -= 32;
          }
          while (v383);
          if (v378 == v380) {
            goto LABEL_684;
          }
          if ((v378 & 0x18) != 0) {
            goto LABEL_678;
          }
          v376 += v380;
          uint64_t v379 = &v368[v380];
        }
      }
      do
      {
LABEL_683:
        char v390 = *v376++;
        *v379++ = v390;
      }
      while (v376 != v377);
      goto LABEL_684;
    }
LABEL_728:
    uint64_t v413 = v465[2];
    if (v465[2])
    {
      do
      {
        if (v413[112]) {
          v413[112] = 0;
        }
        long double v415 = *(unsigned char **)v413;
        uint64_t v416 = (void *)*((void *)v413 + 4);
        if (v416 != *((void **)v413 + 6)) {
          free(v416);
        }
        operator delete(v413);
        uint64_t v413 = v415;
      }
      while (v415);
    }
    long double v414 = v465[0];
    v465[0] = 0;
    if (v414) {
      operator delete(v414);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v442 + 32))(v442, &v462);
    uint64_t v246 = v435 + 24;
  }
  while (v435 + 24 != v431);
  long long v417 = (uint64_t *)v459;
  if (v459)
  {
    for (uint64_t m = v460; m != v417; m -= 15)
    {
      if (*((unsigned char *)m - 16)) {
        *((unsigned char *)m - 16) = 0;
      }
      uint64_t v419 = (void *)*(m - 12);
      if (v419 != (void *)*(m - 10)) {
        free(v419);
      }
    }
    operator delete(v417);
  }
LABEL_745:
  unint64_t v420 = (uint64_t *)v462;
  if (v462)
  {
    uint64_t v421 = v463;
    uint64_t v422 = v462;
    if (v463 != v462)
    {
      do
      {
        if (*((unsigned char *)v421 - 16)) {
          *((unsigned char *)v421 - 16) = 0;
        }
        float64x2_t v423 = (void *)*(v421 - 12);
        if (v423 != (void *)*(v421 - 10)) {
          free(v423);
        }
        v421 -= 15;
      }
      while (v421 != v420);
      uint64_t v422 = v462;
    }
    long double v463 = v420;
    operator delete(v422);
  }
  float64x2_t v424 = *(uint8_t **)(*(void *)(a1 + 120) + 56);
  uint64_t v425 = *((void *)v424 + 38);
  long long v426 = (void (**)(uint8_t *))&unk_1EF57A460;
  *(void *)long long buf = &unk_1EF57A460;
  uint64_t v486 = v424;
  uint64_t v487 = v454;
  long double v488 = buf;
  uint64_t v427 = *(uint64_t **)(v425 + 24);
  if (!v427) {
    goto LABEL_765;
  }
  do
  {
    if (*((_DWORD *)v427 + 28) == 2)
    {
      if (!v488)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_774:
        std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(uint8_t *, uint64_t *))(*(void *)v488 + 48))(v488, v427 + 2);
    }
    uint64_t v427 = (uint64_t *)*v427;
  }
  while (v427);
  if (v488 == buf)
  {
    long long v426 = *(void (***)(uint8_t *))buf;
LABEL_765:
    v426[4](buf);
    goto LABEL_766;
  }
  if (v488) {
    (*(void (**)(void))(*(void *)v488 + 40))();
  }
LABEL_766:
  if (!v484) {
    goto LABEL_774;
  }
  (*(void (**)(void *))(*v484 + 48))(v484);
  uint64_t result = v484;
  if (v484 == v483) {
    return (void *)(*(uint64_t (**)(void *))(v483[0] + 32))(v483);
  }
  if (v484) {
    return (void *)(*(uint64_t (**)(void))(*v484 + 40))();
  }
  return result;
}

void sub_1A18CDE40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 232);
  if (v3 == v1 - 256)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 256) + 32))(v1 - 256);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<gdc::LayerDataRequestKeyPair>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223) {
      abort();
    }
    int v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 120 * a2;
    os_signpost_id_t v6 = (char *)operator new(120 * a2);
    uint64_t v7 = &v6[v5];
    char v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        int32x4_t v11 = &v4[v9];
        *((void *)v10 - 15) = *(void *)&v4[v9 - 120];
        *(v10 - 112) = v4[v9 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v9 - 104], (uint64_t)&v4[v9 - 104]);
        *(v10 - 16) = 0;
        if (v4[v9 - 16])
        {
          *((_DWORD *)v10 - 3) = *((_DWORD *)v11 - 3);
          *(v10 - 16) = 1;
        }
        *((void *)v10 - 1) = *((void *)v11 - 1);
        v9 -= 120;
      }
      while (&v4[v9] != v2);
      uint64_t v2 = *(char **)a1;
      uint64_t v12 = *(char **)(a1 + 8);
      *(void *)a1 = &v8[v9];
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        if (*(v12 - 16)) {
          *(v12 - 16) = 0;
        }
        int8x16_t v13 = (void *)*((void *)v12 - 12);
        if (v13 != *((void **)v12 - 10)) {
          free(v13);
        }
        v12 -= 120;
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void gdc::LayerDataSource::processNewLayerData(long long,std::vector<gdc::LayerDataRequestKeyPair> &,std::vector<gdc::LayerDataRequestKeyPair> &)::$_0::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (a2 != a3)
  {
    int v4 = a4;
    uint64_t v5 = a3;
    os_signpost_id_t v6 = (unsigned __int16 *)a2;
    char v8 = (void *)(a1 + 40);
    p_std::string buf = &buf;
    uint64_t v84 = (void *)(a1 + 176);
    uint64_t v88 = (uint64_t *)(a1 + 120);
    uint64_t v83 = (void *)(a1 + 136);
    uint64_t v10 = &qword_1EB31E000;
    uint64_t v85 = (void *)(a1 + 40);
    do
    {
      if (v10[400] != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      int32x4_t v11 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG)
        && ((gdc::LayerDataRequestKey::keysInt32Str(&buf, v6 + 4),
             (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          ? (uint64_t v12 = &buf)
          : (uint64_t v12 = (std::string *)buf.__r_.__value_.__r.__words[0]),
            *(_DWORD *)uint64_t v97 = 136315138,
            uint64_t v98 = v12,
            _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_DEBUG, "processNewLayerData: %s", v97, 0xCu),
            SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0))
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        int8x8_t v13 = *(int8x8_t *)(a1 + 168);
        if (!*(void *)&v13) {
          goto LABEL_35;
        }
      }
      else
      {
        int8x8_t v13 = *(int8x8_t *)(a1 + 168);
        if (!*(void *)&v13) {
          goto LABEL_35;
        }
      }
      unint64_t v14 = *(void *)v6;
      uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v16 = *(void *)v6;
        if (v14 >= *(void *)&v13) {
          unint64_t v16 = v14 % *(void *)&v13;
        }
      }
      else
      {
        unint64_t v16 = (*(void *)&v13 - 1) & v14;
      }
      uint64_t v17 = *(void *)(a1 + 160);
      int8x16_t v18 = *(void ***)(v17 + 8 * v16);
      if (!v18 || (unint64_t v19 = *v18) == 0)
      {
LABEL_35:
        unint64_t v23 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v8, (unsigned __int8 *)v6 + 8);
        if (!v23) {
          goto LABEL_5;
        }
        unint64_t v24 = v23;
        unint64_t v25 = v23[16];
        if (!*((unsigned char *)v25 + 209)) {
          goto LABEL_5;
        }
        int v26 = *((unsigned __int8 *)v25 + 208);
        if (v4)
        {
          if (!*((unsigned char *)v25 + 208))
          {
            *((unsigned char *)v25 + 209) = 0;
            goto LABEL_5;
          }
          if (v10[400] != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          uint64_t v27 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_ERROR))
          {
            gdc::LayerDataRequestKey::keysInt32Str(&buf, v6 + 4);
            unint64_t v28 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &buf
                : (std::string *)buf.__r_.__value_.__r.__words[0];
            *(_DWORD *)uint64_t v97 = 136315138;
            uint64_t v98 = v28;
            _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Failed to create layer data for request with all resources: %s", v97, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          buf.__r_.__value_.__s.__data_[0] = *((unsigned char *)v6 + 8);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&buf.__r_.__value_.__l.__size_, (uint64_t)(v6 + 8));
          char v93 = 0;
          if (*((unsigned char *)v6 + 104))
          {
            int v94 = *((_DWORD *)v6 + 27);
            char v93 = 1;
          }
          unint64_t v29 = *((void *)v6 + 14);
          unint64_t v31 = v24[16];
          unint64_t v30 = v24[17];
          unint64_t v95 = v29;
          *(void *)&long long v96 = v31;
          *((void *)&v96 + 1) = v30;
          if (v30)
          {
            atomic_fetch_add_explicit(v30 + 1, 1uLL, memory_order_relaxed);
            unint64_t v29 = v95;
          }
          unint64_t v32 = *(void *)(a1 + 128);
          if (v32)
          {
            uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              p_std::string buf = (std::string *)v29;
              if (v29 >= v32) {
                p_std::string buf = (std::string *)(v29 % v32);
              }
            }
            else
            {
              p_std::string buf = (std::string *)((v32 - 1) & v29);
            }
            long long v41 = *(uint64_t ****)(*v88 + 8 * (void)p_buf);
            if (v41)
            {
              unint64_t v42 = *v41;
              if (*v41)
              {
                int v43 = buf.__r_.__value_.__s.__data_[0];
                int v44 = LOWORD(buf.__r_.__value_.__r.__words[1]);
                uint64_t v45 = v92;
                uint64_t v46 = (const void *)buf.__r_.__value_.__r.__words[2];
                size_t v47 = v90 - buf.__r_.__value_.__r.__words[2];
                if (v33.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v52 = v42[1];
                    if (v52 == (uint64_t *)v29)
                    {
                      if (*((unsigned __int8 *)v42 + 16) == v43
                        && *((unsigned __int16 *)v42 + 12) == v44
                        && v42[12] == v45)
                      {
                        std::string::size_type v53 = v42[4];
                        if ((char *)v42[5] - (char *)v53 == v47)
                        {
                          unint64_t v80 = v45;
                          unint64_t v82 = v46;
                          size_t v78 = v47;
                          int v54 = memcmp(v53, v46, v47);
                          size_t v47 = v78;
                          uint64_t v45 = v80;
                          uint64_t v46 = v82;
                          if (!v54) {
                            goto LABEL_163;
                          }
                        }
                      }
                    }
                    else if ((std::string *)((unint64_t)v52 & (v32 - 1)) != p_buf)
                    {
                      goto LABEL_97;
                    }
                    unint64_t v42 = (uint64_t **)*v42;
                    if (!v42) {
                      goto LABEL_97;
                    }
                  }
                }
                do
                {
                  unint64_t v48 = (unint64_t)v42[1];
                  if (v48 == v29)
                  {
                    if (*((unsigned __int8 *)v42 + 16) == v43
                      && *((unsigned __int16 *)v42 + 12) == v44
                      && v42[12] == v45)
                    {
                      long long v49 = v42[4];
                      if ((char *)v42[5] - (char *)v49 == v47)
                      {
                        uint64_t v79 = v45;
                        long long v81 = v46;
                        size_t v50 = v47;
                        int v51 = memcmp(v49, v46, v47);
                        size_t v47 = v50;
                        uint64_t v45 = v79;
                        uint64_t v46 = v81;
                        if (!v51) {
                          goto LABEL_163;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v48 >= v32) {
                      v48 %= v32;
                    }
                    if ((std::string *)v48 != p_buf) {
                      break;
                    }
                  }
                  unint64_t v42 = (uint64_t **)*v42;
                }
                while (v42);
              }
            }
          }
LABEL_97:
          unint64_t v55 = operator new(0x90uLL);
          *unint64_t v55 = 0;
          v55[1] = v29;
          *((unsigned char *)v55 + 16) = buf.__r_.__value_.__s.__data_[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v55 + 3), (uint64_t)&buf.__r_.__value_.__l.__size_);
          *((unsigned char *)v55 + 112) = 0;
          if (v93)
          {
            *((_DWORD *)v55 + 29) = v94;
            *((unsigned char *)v55 + 112) = 1;
          }
          v55[15] = v95;
          *((_OWORD *)v55 + 8) = v96;
          long long v96 = 0uLL;
          float v56 = (float)(unint64_t)(*(void *)(a1 + 144) + 1);
          float v57 = *(float *)(a1 + 152);
          if (!v32 || (float)(v57 * (float)v32) < v56)
          {
            BOOL v58 = v32 < 3 || (v32 & (v32 - 1)) != 0;
            unint64_t v62 = v58 | (2 * v32);
            unint64_t v63 = vcvtps_u32_f32(v56 / v57);
            if (v62 <= v63) {
              size_t prime = v63;
            }
            else {
              size_t prime = v62;
            }
            if (prime == 1)
            {
              size_t prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              size_t prime = std::__next_prime(prime);
            }
            int8x8_t v65 = *(int8x8_t *)(a1 + 128);
            if (prime > *(void *)&v65) {
              goto LABEL_147;
            }
            if (prime < *(void *)&v65)
            {
              unint64_t v66 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 144) / *(float *)(a1 + 152));
              if (*(void *)&v65 < 3uLL
                || (uint8x8_t v67 = (uint8x8_t)vcnt_s8(v65), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
              {
                unint64_t v66 = std::__next_prime(v66);
              }
              else
              {
                uint64_t v68 = 1 << -(char)__clz(v66 - 1);
                if (v66 >= 2) {
                  unint64_t v66 = v68;
                }
              }
              if (prime <= v66) {
                size_t prime = v66;
              }
              if (prime < *(void *)&v65) {
LABEL_147:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v88, prime);
            }
            unint64_t v32 = *(void *)(a1 + 128);
            if ((v32 & (v32 - 1)) != 0)
            {
              if (v29 >= v32) {
                p_std::string buf = (std::string *)(v29 % v32);
              }
              else {
                p_std::string buf = (std::string *)v29;
              }
            }
            else
            {
              p_std::string buf = (std::string *)((v32 - 1) & v29);
            }
          }
          uint64_t v72 = *v88;
          long double v73 = *(void **)(*v88 + 8 * (void)p_buf);
          if (v73)
          {
            *unint64_t v55 = *v73;
            goto LABEL_161;
          }
          *unint64_t v55 = *v83;
          void *v83 = v55;
          *(void *)(v72 + 8 * (void)p_buf) = v83;
          if (*v55)
          {
            unint64_t v74 = *(void *)(*v55 + 8);
            if ((v32 & (v32 - 1)) != 0)
            {
              if (v74 >= v32) {
                v74 %= v32;
              }
            }
            else
            {
              v74 &= v32 - 1;
            }
            long double v73 = (void *)(*v88 + 8 * v74);
LABEL_161:
            *long double v73 = v55;
          }
          ++*(void *)(a1 + 144);
LABEL_163:
          unint64_t v75 = (std::__shared_weak_count *)*((void *)&v96 + 1);
          if (*((void *)&v96 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v96 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
          int v4 = a4;
          char v8 = v85;
          uint64_t v5 = a3;
          p_std::string buf = &buf;
          if (v93) {
            char v93 = 0;
          }
          if (buf.__r_.__value_.__r.__words[2] != v91) {
            free((void *)buf.__r_.__value_.__r.__words[2]);
          }
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          os_signpost_id_t v76 = v24[16][14];
          if (v76 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v77 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              uint64_t v38 = v77;
              os_signpost_id_t v39 = v76;
              unint64_t v40 = "status=failed";
LABEL_3:
              _os_signpost_emit_with_name_impl(&dword_1A1780000, v38, OS_SIGNPOST_INTERVAL_END, v39, "LayerDataRequest", v40, (uint8_t *)&buf, 2u);
            }
          }
        }
        else
        {
          *((unsigned char *)v25 + 209) = 0;
          if (!v26) {
            goto LABEL_5;
          }
          if (v10[400] != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          uint64_t v34 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
          {
            gdc::LayerDataRequestKey::keysInt32Str(&buf, v6 + 4);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v35 = &buf;
            }
            else {
              char v35 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v97 = 136315138;
            uint64_t v98 = v35;
            _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_DEBUG, "Finished layer data request: %s", v97, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
            }
          }
          os_signpost_id_t v36 = v24[16][14];
          if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v37 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              uint64_t v38 = v37;
              os_signpost_id_t v39 = v36;
              unint64_t v40 = "status=success";
              goto LABEL_3;
            }
          }
        }
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase(v8, v24);
        uint64_t v10 = &qword_1EB31E000;
        goto LABEL_5;
      }
      uint64_t v20 = *(void *)&v13 - 1;
      if (v15.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v21 = v19[1];
          if (v21 == v14)
          {
            if (v19[2] == v14) {
              goto LABEL_69;
            }
          }
          else if ((v21 & v20) != v16)
          {
            goto LABEL_35;
          }
          unint64_t v19 = (void *)*v19;
          if (!v19) {
            goto LABEL_35;
          }
        }
      }
      while (1)
      {
        unint64_t v22 = v19[1];
        if (v22 == v14) {
          break;
        }
        if (v22 >= *(void *)&v13) {
          v22 %= *(void *)&v13;
        }
        if (v22 != v16) {
          goto LABEL_35;
        }
LABEL_28:
        unint64_t v19 = (void *)*v19;
        if (!v19) {
          goto LABEL_35;
        }
      }
      if (v19[2] != v14) {
        goto LABEL_28;
      }
LABEL_69:
      if (v15.u32[0] > 1uLL)
      {
        if (v14 >= *(void *)&v13) {
          v14 %= *(void *)&v13;
        }
      }
      else
      {
        v14 &= v20;
      }
      float v59 = *(void **)(v17 + 8 * v14);
      do
      {
        size_t v60 = v59;
        float v59 = (void *)*v59;
      }
      while (v59 != v19);
      if (v60 == v84) {
        goto LABEL_133;
      }
      unint64_t v61 = v60[1];
      if (v15.u32[0] > 1uLL)
      {
        if (v61 >= *(void *)&v13) {
          v61 %= *(void *)&v13;
        }
      }
      else
      {
        v61 &= v20;
      }
      if (v61 != v14)
      {
LABEL_133:
        if (!*v19) {
          goto LABEL_134;
        }
        unint64_t v69 = *(void *)(*v19 + 8);
        if (v15.u32[0] > 1uLL)
        {
          if (v69 >= *(void *)&v13) {
            v69 %= *(void *)&v13;
          }
        }
        else
        {
          v69 &= v20;
        }
        if (v69 != v14) {
LABEL_134:
        }
          *(void *)(v17 + 8 * v14) = 0;
      }
      uint64_t v70 = *v19;
      if (*v19)
      {
        unint64_t v71 = *(void *)(v70 + 8);
        if (v15.u32[0] > 1uLL)
        {
          if (v71 >= *(void *)&v13) {
            v71 %= *(void *)&v13;
          }
        }
        else
        {
          v71 &= v20;
        }
        if (v71 != v14)
        {
          *(void *)(*(void *)(a1 + 160) + 8 * v71) = v60;
          uint64_t v70 = *v19;
        }
      }
      *size_t v60 = v70;
      --*(void *)(a1 + 184);
      operator delete(v19);
LABEL_5:
      v6 += 60;
    }
    while (v6 != (unsigned __int16 *)v5);
  }
}

uint64_t std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a2 + 16);
  if (!v3)
  {
LABEL_24:
    char v13 = 1;
    goto LABEL_25;
  }
  while (1)
  {
    if (v3[14] == (uint64_t *)-8) {
      goto LABEL_5;
    }
    GEOErrorDomain();
    id v5 = objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v6 = (const char *)[v5 UTF8String];
    uint64_t v7 = v6;
    int v8 = *((char *)v3 + 143);
    size_t v9 = v8 >= 0 ? *((unsigned __int8 *)v3 + 143) : (size_t)v3[16];
    if (v9 == strlen(v6))
    {
      uint64_t v10 = v8 >= 0 ? (uint64_t *)(v3 + 15) : v3[15];
      if (!memcmp(v10, v7, v9)) {
        break;
      }
    }

    int v4 = 0;
LABEL_4:

LABEL_5:
    uint64_t v3 = (uint64_t **)*v3;
    if (!v3) {
      goto LABEL_24;
    }
  }
  int v4 = [MEMORY[0x1E4F28C58] GEOErrorWithCode:v3[14]];

  if (!v4
    || (objc_msgSend(v4, "_geo_isNetworkError") & 1) == 0
    && [v4 code] != -15
    && [v4 code] != -19)
  {
    goto LABEL_4;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  int32x4_t v11 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = v3[14];
    int v20 = 134217984;
    uint64_t v21 = v12;
    _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_INFO, "Retry Resources Loading Due To Code: %lli", (uint8_t *)&v20, 0xCu);
  }

  char v13 = 0;
LABEL_25:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 368) + 56))(*(void *)(v2 + 368));
  if ((result & 1) == 0)
  {
    if (v13)
    {
      atomic_store(0, (unsigned __int8 *)(v2 + 376));
    }
    else
    {
      uint8x8_t v15 = (unsigned __int8 *)(v2 + 376);
      unsigned int v16 = atomic_load((unsigned __int8 *)(v2 + 376));
      if (v16 <= 4)
      {
        uint64_t v17 = *(void *)(v2 + 368);
        int v18 = atomic_load(v15);
        long double v19 = ldexp(1.0, v18);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, long double))(*(void *)v17 + 24))(v17, 0, v19 * 5.0);
        atomic_fetch_add((atomic_uchar *volatile)v15, 1u);
      }
    }
  }
  return result;
}

void sub_1A18CECC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Timer::isStarted(gdc::Timer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = *((unsigned __int8 *)this + 96);
  std::mutex::unlock(v2);
  return v3;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 432);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a1 + 8);
  os_signpost_id_t v6 = (int8x8_t **)v4[7];
  id v5 = (unsigned __int16 *)v4[8];
  if (v6 != (int8x8_t **)v5)
  {
    while (*(unsigned __int16 *)(a2 + 2) != *(unsigned __int16 *)v6)
    {
      v6 += 3;
      if (v6 == (int8x8_t **)v5) {
        return;
      }
    }
  }
  if (v6 != (int8x8_t **)v5)
  {
    gdc::ResourceStore::resource((gdc::ResourceStore *)&v17, v6[1], (unsigned __int8 *)a2);
    uint64_t v7 = v17;
    if (v17)
    {
      uint64_t v8 = *(void *)(v17 + 112);
      if (v8 >= 1 && *(void *)(v17 + 96) + v8 < *(void *)(a1 + 16))
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        size_t v9 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
          uint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string buf = 136315138;
          int v20 = v10;
          _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_DEBUG, "Requested resource expired: %s", buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }

        gdc::ResourceStore::erase(v6[1], (const gdc::ResourceKey *)a2);
        int32x4_t v11 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(v4[38] + 8), (unsigned __int8 *)a2);
        if (v11) {
          *((_DWORD *)v11 + 28) = 0;
        }
        uint64_t v12 = (char *)v4[4];
        char v13 = (char *)v4[5];
        uint64_t v14 = (uint64_t)(v4 + 4);
        if (v12 != v13)
        {
          while (*(unsigned __int16 *)(v7 + 2) != *(unsigned __int16 *)v12)
          {
            v12 += 16;
            if (v12 == v13) {
              goto LABEL_24;
            }
          }
        }
        if (v12 == v13)
        {
LABEL_24:
          LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)(v7 + 2);
          __p.__r_.__value_.__l.__size_ = 0;
          uint64_t v12 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert(v14, (unsigned __int16 *)&__p);
        }
        (*(void (**)(void, uint64_t))(**((void **)v12 + 1) + 48))(*((void *)v12 + 1), a2);
      }
    }
    uint8x8_t v15 = v18;
    if (v18)
    {
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1A18CEFB8(_Unwind_Exception *exception_object)
{
}

void sub_1A18CEFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::insert(uint64_t *a1, uint64_t *a2)
{
  id v5 = v135;
  os_signpost_id_t v6 = (char *)a2[1];
  uint64_t v130 = *a2;
  uint64_t v131 = v135;
  uint64_t v132 = v135;
  unint64_t v133 = v135;
  uint64_t v134 = 32;
  uint64_t v7 = (char *)a2[2];
  unint64_t v8 = v7 - v6;
  if ((unint64_t)(v7 - v6) >= 0x21)
  {
    if (v8 <= 0x40) {
      size_t v9 = 64;
    }
    else {
      size_t v9 = v7 - v6;
    }
    id v5 = malloc_type_malloc(v9, 0x100004077774924uLL);
    uint64_t v10 = (char *)v131;
    int32x4_t v11 = v132;
    if (v131 == v132) {
      goto LABEL_21;
    }
    unint64_t v12 = v132 - (unsigned char *)v131;
    if ((unint64_t)(v132 - (unsigned char *)v131) < 8)
    {
      char v13 = v5;
      goto LABEL_20;
    }
    char v13 = v5;
    if ((unint64_t)(v5 - (unsigned char *)v131) < 0x20) {
      goto LABEL_20;
    }
    if (v12 >= 0x20)
    {
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFE0;
      uint8x8_t v15 = (long long *)((char *)v131 + 16);
      unsigned int v16 = v5 + 16;
      unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *unsigned int v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v12 == v14) {
        goto LABEL_21;
      }
      if ((v12 & 0x18) == 0)
      {
        v10 += v14;
        char v13 = &v5[v14];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFF8;
    char v13 = &v5[v12 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (uint64_t *)&v10[v14];
    uint64_t v22 = &v5[v14];
    do
    {
      uint64_t v23 = *v21++;
      *v22++ = v23;
      v20 += 8;
    }
    while (v20);
    if (v12 == v19) {
      goto LABEL_21;
    }
    v10 += v19;
    do
    {
LABEL_20:
      char v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
LABEL_21:
    uint64_t v131 = v5;
    uint64_t v132 = v5;
    uint64_t v134 = v9;
  }
  if (v6 == v7) {
    goto LABEL_40;
  }
  if (v8 < 8)
  {
    int v26 = v5;
    goto LABEL_38;
  }
  if ((unint64_t)(v5 - v6) < 0x20)
  {
    int v26 = v5;
    goto LABEL_38;
  }
  if (v8 >= 0x20)
  {
    unint64_t v25 = v8 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v27 = (long long *)(v6 + 16);
    unint64_t v28 = v5 + 16;
    unint64_t v29 = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 32;
    }
    while (v29);
    if (v8 == v25) {
      goto LABEL_39;
    }
    if ((v8 & 0x18) == 0)
    {
      v6 += v25;
      int v26 = &v5[v25];
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v25 = 0;
  }
  unint64_t v31 = v8 & 0xFFFFFFFFFFFFFFF8;
  int v26 = &v5[v8 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v32 = v25 - (v8 & 0xFFFFFFFFFFFFFFF8);
  uint8x8_t v33 = (uint64_t *)&v6[v25];
  uint64_t v34 = &v5[v25];
  do
  {
    uint64_t v35 = *v33++;
    *v34++ = v35;
    v32 += 8;
  }
  while (v32);
  if (v8 == v31) {
    goto LABEL_39;
  }
  v6 += v31;
  do
  {
LABEL_38:
    char v36 = *v6++;
    *v26++ = v36;
  }
  while (v6 != v7);
LABEL_39:
  id v5 = v132;
LABEL_40:
  uint64_t v37 = (uint64_t *)a2[9];
  uint64_t v132 = &v5[v8];
  unint64_t v136 = v37;
  long long v137 = *((_OWORD *)a2 + 5);
  uint64_t v38 = (std::__shared_weak_count *)a2[13];
  uint64_t v138 = a2[12];
  uint64_t v139 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v140 = 0;
  os_signpost_id_t v39 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a1 + 3, (unsigned __int8 *)&v130);
  if (!v39)
  {
    long long v129 = a1 + 3;
    unint64_t v48 = std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>((uint64_t)&v130);
    long long v49 = v48;
    uint64_t v50 = *a1;
    *(void *)(v50 + 8) = v48;
    *unint64_t v48 = v50;
    *a1 = (uint64_t)v48;
    v48[1] = a1;
    ++a1[2];
    int v51 = (uint64_t *)a1[8];
    a1[9] += v140;
    if (v51 == a1) {
      a1[8] = (uint64_t)v48;
    }
    int v52 = v130;
    int v53 = WORD1(v130);
    unint64_t v54 = (WORD1(v130)
         + ((v130 - 0x61C8864680B583EBLL) << 6)
         + (((unint64_t)v130 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v130 - 0x61C8864680B583EBLL);
    unint64_t v55 = v136;
    unint64_t v56 = (unint64_t)&v136[8 * v54] + (v54 >> 2);
    unint64_t v57 = (v56 - 0x61C8864680B583EBLL) ^ v54;
    unint64_t v58 = a1[4];
    if (v58)
    {
      uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
      v59.i16[0] = vaddlv_u8(v59);
      if (v59.u32[0] > 1uLL)
      {
        uint64_t v2 = (v56 - 0x61C8864680B583EBLL) ^ v54;
        if (v57 >= v58) {
          uint64_t v2 = v57 % v58;
        }
      }
      else
      {
        uint64_t v2 = v57 & (v58 - 1);
      }
      uint8x8_t v67 = *(uint64_t ****)(*v129 + 8 * v2);
      if (v67)
      {
        uint64_t v68 = *v67;
        if (*v67)
        {
          unint64_t v69 = v131;
          size_t v70 = v132 - (unsigned char *)v131;
          if (v59.u32[0] < 2uLL)
          {
            while (1)
            {
              unint64_t v75 = v68[1];
              if (v75 == (uint64_t *)v57)
              {
                if (*((unsigned __int8 *)v68 + 16) == v52 && *((unsigned __int16 *)v68 + 9) == v53 && v68[11] == v55)
                {
                  os_signpost_id_t v76 = v68[3];
                  if ((char *)v68[4] - (char *)v76 == v70)
                  {
                    size_t v126 = v70;
                    uint64_t v128 = v69;
                    int v77 = memcmp(v76, v69, v70);
                    size_t v70 = v126;
                    unint64_t v69 = v128;
                    if (!v77) {
                      goto LABEL_165;
                    }
                  }
                }
              }
              else if (((unint64_t)v75 & (v58 - 1)) != v2)
              {
                goto LABEL_88;
              }
              uint64_t v68 = (uint64_t **)*v68;
              if (!v68) {
                goto LABEL_88;
              }
            }
          }
          do
          {
            unint64_t v71 = (unint64_t)v68[1];
            if (v71 == v57)
            {
              if (*((unsigned __int8 *)v68 + 16) == v52 && *((unsigned __int16 *)v68 + 9) == v53 && v68[11] == v55)
              {
                uint64_t v72 = v68[3];
                if ((char *)v68[4] - (char *)v72 == v70)
                {
                  unint64_t v127 = v69;
                  size_t v73 = v70;
                  int v74 = memcmp(v72, v69, v70);
                  size_t v70 = v73;
                  unint64_t v69 = v127;
                  if (!v74) {
                    goto LABEL_165;
                  }
                }
              }
            }
            else
            {
              if (v71 >= v58) {
                v71 %= v58;
              }
              if (v71 != v2) {
                break;
              }
            }
            uint64_t v68 = (uint64_t **)*v68;
          }
          while (v68);
        }
      }
    }
LABEL_88:
    size_t v78 = operator new(0x78uLL);
    void *v78 = 0;
    v78[1] = v57;
    uint64_t v79 = (char *)(v78 + 7);
    unint64_t v80 = (char *)v131;
    void v78[2] = v130;
    v78[3] = v78 + 7;
    v78[4] = v78 + 7;
    v78[5] = v78 + 7;
    v78[6] = 32;
    long long v81 = v132;
    unint64_t v82 = v132 - v80;
    if ((unint64_t)(v132 - v80) < 0x21)
    {
LABEL_109:
      if (v80 == v81)
      {
LABEL_127:
        v78[4] = &v79[v82];
        v78[11] = v136;
        *((_OWORD *)v78 + 6) = v137;
        v78[14] = v49;
        float v112 = (float)(unint64_t)(a1[6] + 1);
        float v113 = *((float *)a1 + 14);
        if (!v58 || (float)(v113 * (float)v58) < v112)
        {
          BOOL v114 = 1;
          if (v58 >= 3) {
            BOOL v114 = (v58 & (v58 - 1)) != 0;
          }
          unint64_t v115 = v114 | (2 * v58);
          unint64_t v116 = vcvtps_u32_f32(v112 / v113);
          if (v115 <= v116) {
            size_t prime = v116;
          }
          else {
            size_t prime = v115;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          int8x8_t v118 = (int8x8_t)a1[4];
          if (prime > *(void *)&v118) {
            goto LABEL_149;
          }
          if (prime < *(void *)&v118)
          {
            unint64_t v119 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
            if (*(void *)&v118 < 3uLL
              || (uint8x8_t v120 = (uint8x8_t)vcnt_s8(v118), v120.i16[0] = vaddlv_u8(v120), v120.u32[0] > 1uLL))
            {
              unint64_t v119 = std::__next_prime(v119);
            }
            else
            {
              uint64_t v121 = 1 << -(char)__clz(v119 - 1);
              if (v119 >= 2) {
                unint64_t v119 = v121;
              }
            }
            if (prime <= v119) {
              size_t prime = v119;
            }
            if (prime < *(void *)&v118) {
LABEL_149:
            }
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v129, prime);
          }
          unint64_t v58 = a1[4];
          if ((v58 & (v58 - 1)) != 0)
          {
            if (v57 >= v58) {
              uint64_t v2 = v57 % v58;
            }
            else {
              uint64_t v2 = v57;
            }
          }
          else
          {
            uint64_t v2 = (v58 - 1) & v57;
          }
        }
        uint64_t v122 = *v129;
        size_t v123 = *(void **)(*v129 + 8 * v2);
        if (v123)
        {
          void *v78 = *v123;
        }
        else
        {
          void *v78 = a1[5];
          a1[5] = (uint64_t)v78;
          *(void *)(v122 + 8 * v2) = a1 + 5;
          if (!*v78)
          {
LABEL_164:
            ++a1[6];
            goto LABEL_165;
          }
          unint64_t v124 = *(void *)(*v78 + 8);
          if ((v58 & (v58 - 1)) != 0)
          {
            if (v124 >= v58) {
              v124 %= v58;
            }
          }
          else
          {
            v124 &= v58 - 1;
          }
          size_t v123 = (void *)(*v129 + 8 * v124);
        }
        void *v123 = v78;
        goto LABEL_164;
      }
      if (v82 < 8)
      {
        float v101 = v79;
        goto LABEL_125;
      }
      if ((unint64_t)(v79 - v80) < 0x20)
      {
        float v101 = v79;
        goto LABEL_125;
      }
      if (v82 >= 0x20)
      {
        unint64_t v100 = v82 & 0xFFFFFFFFFFFFFFE0;
        float v102 = (long long *)(v80 + 16);
        BOOL v103 = v79 + 16;
        unint64_t v104 = v82 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v105 = *v102;
          *(v103 - 1) = *(v102 - 1);
          *BOOL v103 = v105;
          v102 += 2;
          v103 += 2;
          v104 -= 32;
        }
        while (v104);
        if (v82 == v100) {
          goto LABEL_126;
        }
        if ((v82 & 0x18) == 0)
        {
          v80 += v100;
          float v101 = &v79[v100];
          goto LABEL_125;
        }
      }
      else
      {
        unint64_t v100 = 0;
      }
      unint64_t v106 = v82 & 0xFFFFFFFFFFFFFFF8;
      float v101 = &v79[v82 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v107 = v100 - (v82 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v108 = (uint64_t *)&v80[v100];
      uint64_t v109 = &v79[v100];
      do
      {
        uint64_t v110 = *v108++;
        *(void *)uint64_t v109 = v110;
        v109 += 8;
        v107 += 8;
      }
      while (v107);
      if (v82 == v106) {
        goto LABEL_126;
      }
      v80 += v106;
      do
      {
LABEL_125:
        char v111 = *v80++;
        *v101++ = v111;
      }
      while (v80 != v81);
LABEL_126:
      uint64_t v79 = (char *)v78[4];
      goto LABEL_127;
    }
    if (v82 <= 0x40) {
      size_t v83 = 64;
    }
    else {
      size_t v83 = v132 - v80;
    }
    size_t v84 = v83;
    uint64_t v79 = (char *)malloc_type_malloc(v83, 0x100004077774924uLL);
    uint64_t v85 = (char *)v78[3];
    uint64_t v86 = (char *)v78[4];
    if (v85 == v86)
    {
LABEL_108:
      v78[3] = v79;
      v78[4] = v79;
      v78[6] = v84;
      goto LABEL_109;
    }
    unint64_t v87 = v86 - v85;
    if ((unint64_t)(v86 - v85) < 8)
    {
      uint64_t v88 = v79;
    }
    else
    {
      uint64_t v88 = v79;
      if ((unint64_t)(v79 - v85) >= 0x20)
      {
        if (v87 < 0x20)
        {
          uint64_t v89 = 0;
LABEL_102:
          unint64_t v94 = v87 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = &v79[v87 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v95 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
          long long v96 = (uint64_t *)&v85[v89];
          uint64_t v97 = &v79[v89];
          do
          {
            uint64_t v98 = *v96++;
            *(void *)uint64_t v97 = v98;
            v97 += 8;
            v95 += 8;
          }
          while (v95);
          if (v87 == v94) {
            goto LABEL_108;
          }
          v85 += v94;
          goto LABEL_107;
        }
        uint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v90 = (long long *)(v85 + 16);
        uint64_t v91 = v79 + 16;
        unint64_t v92 = v87 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v93 = *v90;
          *(v91 - 1) = *(v90 - 1);
          *uint64_t v91 = v93;
          v90 += 2;
          v91 += 2;
          v92 -= 32;
        }
        while (v92);
        if (v87 == v89) {
          goto LABEL_108;
        }
        if ((v87 & 0x18) != 0) {
          goto LABEL_102;
        }
        v85 += v89;
        uint64_t v88 = &v79[v89];
      }
    }
    do
    {
LABEL_107:
      char v99 = *v85++;
      *v88++ = v99;
    }
    while (v85 != v86);
    goto LABEL_108;
  }
  unint64_t v40 = v39;
  long long v41 = v39[14];
  unint64_t v42 = std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>((uint64_t)&v130);
  int v43 = v42;
  uint64_t v44 = *a1;
  *(void *)(v44 + 8) = v42;
  *unint64_t v42 = v44;
  *a1 = (uint64_t)v42;
  v42[1] = (uint64_t)a1;
  uint64_t v45 = a1[2];
  a1[2] = v45 + 1;
  uint64_t v46 = (uint64_t *)a1[8];
  if (v46 == v41)
  {
    size_t v47 = (uint64_t *)v41[1];
LABEL_52:
    a1[8] = (uint64_t)v47;
    goto LABEL_53;
  }
  size_t v47 = v42;
  if (v46 == a1) {
    goto LABEL_52;
  }
LABEL_53:
  unint64_t v60 = v41[16];
  unint64_t v61 = a1[9];
  BOOL v62 = v61 >= v60;
  unint64_t v63 = v61 - v60;
  if (!v62) {
    unint64_t v63 = 0;
  }
  a1[9] = v63 + v140;
  uint64_t v64 = *v41;
  *(void *)(v64 + 8) = v41[1];
  *(void *)v41[1] = v64;
  a1[2] = v45;
  int8x8_t v65 = (std::__shared_weak_count *)v41[15];
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  unint64_t v66 = (void *)v41[3];
  if (v66 != (void *)v41[5]) {
    free(v66);
  }
  operator delete(v41);
  v40[14] = v43;
LABEL_165:
  uint64_t v125 = v139;
  if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
  if (v131 != v133) {
    free(v131);
  }
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v2 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)int v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v2, "LayerDataLogicVariableRate", "", v4, 2u);
    }
  }
}

void md::DaVinciElevationRasterLayerDataSource::didProcessNewLayerData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 752);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    if (v3)
    {
      int v4 = *(void **)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *a2;
        uint64_t v6 = a2[1];
        if (*a2 != v6)
        {
          do
          {
            uint64_t v7 = *(int **)(v5 + 24);
            int v8 = v7[1];
            int v9 = *v7;
            LODWORD(v7) = 1 << *((unsigned char *)v7 + 8);
            double v10 = 1.0 / (double)(int)v7;
            double v11 = v10 * (double)v9;
            double v12 = v10 * (double)((int)v7 + ~v8);
            double v13 = v11 + v10;
            double v14 = v12 + v10;
            md::MercatorTerrainHeightCache::invalidateRect(v4, &v11);
            v5 += 120;
          }
          while (v5 != v6);
        }
      }
    }
  }
}

uint64_t md::MapTileData::estimatedCost(md::MapTileData *this)
{
  uint64_t v1 = *((void *)this + 85);
  if (v1) {
    return *(void *)(v1 + 40);
  }
  else {
    return 0;
  }
}

void std::vector<gdc::LayerDataRequestKey>::__append(void **a1, unint64_t a2)
{
  int v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      double v11 = &v4[56 * a2];
      do
      {
        *(unsigned char *)int v4 = 0;
        v4[4] = 0;
        *((void *)v4 + 2) = v4 + 24;
        *((void *)v4 + 3) = v4 + 24;
        *((void *)v4 + 4) = v4 + 24;
        *((void *)v4 + 5) = 32;
        *((void *)v4 + 13) = 0;
        *((void *)v4 + 10) = 0;
        *((void *)v4 + 11) = 0;
        *((unsigned char *)v4 + 96) = 0;
        v4 += 56;
      }
      while (v4 != v11);
      int v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x249249249249249) {
      abort();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x124924924924924) {
      unint64_t v9 = 0x249249249249249;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x249249249249249) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      double v10 = (char *)operator new(112 * v9);
    }
    else
    {
      double v10 = 0;
    }
    double v12 = &v10[112 * v6];
    double v13 = &v12[112 * a2];
    double v14 = v12;
    do
    {
      *double v14 = 0;
      *((_WORD *)v14 + 4) = 0;
      *((void *)v14 + 2) = v14 + 48;
      *((void *)v14 + 3) = v14 + 48;
      *((void *)v14 + 4) = v14 + 48;
      *((void *)v14 + 5) = 32;
      *((void *)v14 + 13) = 0;
      *((void *)v14 + 10) = 0;
      *((void *)v14 + 11) = 0;
      v14[96] = 0;
      v14 += 112;
    }
    while (v14 != v13);
    uint8x8_t v15 = &v10[112 * v9];
    unint64_t v17 = (char *)*a1;
    unsigned int v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        unint64_t v19 = &v12[v18];
        unint64_t v20 = &v16[v18];
        v12[v18 - 112] = v16[v18 - 112];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v12[v18 - 104], (uint64_t)&v16[v18 - 104]);
        v12[v18 - 16] = 0;
        if (v16[v18 - 16])
        {
          *((_DWORD *)v19 - 3) = *((_DWORD *)v20 - 3);
          *(v19 - 16) = 1;
        }
        *((void *)v19 - 1) = *((void *)v20 - 1);
        v18 -= 112;
      }
      while (&v16[v18] != v17);
      uint64_t v21 = &v12[v18];
      unsigned int v16 = (char *)*a1;
      uint64_t v22 = (char *)a1[1];
      *a1 = v21;
      a1[1] = v13;
      a1[2] = v15;
      while (v22 != v16)
      {
        if (*(v22 - 16)) {
          *(v22 - 16) = 0;
        }
        uint64_t v23 = (void *)*((void *)v22 - 12);
        if (v23 != *((void **)v22 - 10)) {
          free(v23);
        }
        v22 -= 112;
      }
    }
    if (v16)
    {
      operator delete(v16);
    }
  }
}

unsigned char *std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(void **a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = operator new(112 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[28 * v2];
  *unint64_t v8 = *(unsigned char *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v8 + 8), a2 + 8);
  v8[96] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    v7[28 * v2 + 25] = *(_DWORD *)(a2 + 100);
    v8[96] = 1;
  }
  unint64_t v9 = (char *)&v7[28 * v6];
  *(void *)&v7[28 * v2 + 26] = *(void *)(a2 + 104);
  double v10 = v8 + 112;
  double v12 = (char *)*a1;
  double v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      double v14 = &v8[v13];
      uint8x8_t v15 = &v11[v13];
      v8[v13 - 112] = v11[v13 - 112];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v13 - 104], (uint64_t)&v11[v13 - 104]);
      v8[v13 - 16] = 0;
      if (v11[v13 - 16])
      {
        *((_DWORD *)v14 - 3) = *((_DWORD *)v15 - 3);
        *(v14 - 16) = 1;
      }
      *((void *)v14 - 1) = *((void *)v15 - 1);
      v13 -= 112;
    }
    while (&v11[v13] != v12);
    unsigned int v16 = &v8[v13];
    double v11 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v9;
    while (v17 != v11)
    {
      if (*(v17 - 16)) {
        *(v17 - 16) = 0;
      }
      uint64_t v18 = (void *)*((void *)v17 - 12);
      if (v18 != *((void **)v17 - 10)) {
        free(v18);
      }
      v17 -= 112;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

uint64_t md::MaterialData::estimatedCost(md::MaterialData *this)
{
  return *((void *)this + 24);
}

unint64_t md::DaVinciCenterLineRoadsTileData::estimatedCost(md::DaVinciCenterLineRoadsTileData *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::flag, memory_order_acquire) != -1)
  {
    unint64_t v25 = &v23;
    char v24 = &v25;
    std::__call_once(md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::flag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::DaVinciCenterLineRoadsTileData::estimatedCost(void)::$_0 &&>>);
  }
  unint64_t v2 = *((void *)this + 93);
  if (!v2)
  {
LABEL_7:
    uint64_t v6 = *((void *)this + 91);
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  unint64_t v3 = *(uint64_t **)(v2 + 32);
  int v4 = *(uint64_t **)(v2 + 40);
  if (v3 != v4)
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v5 = *v3++;
      unint64_t v2 = *(void *)(**(void **)(v5 + 64) + 48)
         + v2
         + *(void *)(*(void *)(v5 + 96) + 48)
         - (*(void *)(**(void **)(v5 + 64) + 40)
          + *(void *)(*(void *)(v5 + 96) + 40));
    }
    while (v3 != v4);
    goto LABEL_7;
  }
  unint64_t v2 = 0;
  uint64_t v6 = *((void *)this + 91);
  if (!v6) {
    goto LABEL_10;
  }
LABEL_8:
  unint64_t v7 = *(uint64_t **)(v6 + 32);
  for (uint64_t i = *(uint64_t **)(v6 + 40);
        v7 != i;
        unint64_t v2 = *(void *)(**(void **)(v9 + 64) + 48)
           + v2
           + *(void *)(*(void *)(v9 + 96) + 48)
           - (*(void *)(**(void **)(v9 + 64) + 40)
            + *(void *)(*(void *)(v9 + 96) + 40)))
  {
    uint64_t v9 = *v7++;
  }
LABEL_10:
  uint64_t v10 = *((void *)this + 90);
  if (v10)
  {
    double v11 = *(uint64_t **)(v10 + 32);
    for (std::string::size_type j = *(uint64_t **)(v10 + 40);
          v11 != j;
          unint64_t v2 = *(void *)(**(void **)(v13 + 64) + 48)
             + v2
             + *(void *)(*(void *)(v13 + 96) + 48)
             - (*(void *)(**(void **)(v13 + 64) + 40)
              + *(void *)(*(void *)(v13 + 96) + 40)))
    {
      uint64_t v13 = *v11++;
    }
  }
  uint64_t v14 = *((void *)this + 92);
  if (v14)
  {
    uint8x8_t v15 = *(uint64_t **)(v14 + 32);
    for (uint64_t k = *(uint64_t **)(v14 + 40);
          v15 != k;
          unint64_t v2 = *(void *)(**(void **)(v17 + 64) + 48)
             + v2
             + *(void *)(*(void *)(v17 + 96) + 48)
             - (*(void *)(**(void **)(v17 + 64) + 40)
              + *(void *)(*(void *)(v17 + 96) + 40)))
    {
      uint64_t v17 = *v15++;
    }
  }
  uint64_t v18 = *((void *)this + 102);
  if (v18)
  {
    unint64_t v19 = *(uint64_t **)(v18 + 32);
    for (uint64_t m = *(uint64_t **)(v18 + 40);
          v19 != m;
          unint64_t v2 = *(void *)(**(void **)(v21 + 64) + 48)
             + v2
             + *(void *)(*(void *)(v21 + 96) + 48)
             - (*(void *)(**(void **)(v21 + 64) + 40)
              + *(void *)(*(void *)(v21 + 96) + 40)))
    {
      uint64_t v21 = *v19++;
    }
  }
  return (unint64_t)(float)((float)((float)((float)(unint64_t)(10 * *((void *)this + 94)) * 30720.0)
                                         / (float)(unint64_t)md::DaVinciCenterLineRoadsTileData::estimatedCost(void)const::metalBufferCacheCountMaximum)
                                 + (float)v2);
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::operator()(uint64_t a1, unsigned __int8 ***a2, uint64_t *a3, unsigned __int8 **a4)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      unint64_t v8 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&__p, *v6);
        uint64_t v9 = (uint64_t *)*((void *)*v6 + 16);
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        *(_DWORD *)std::string buf = 136315394;
        size_t v84 = p_p;
        __int16 v85 = 2048;
        uint64_t v86 = v9;
        _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_DEBUG, "Received resource: %s, rid: %llu", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      double v11 = *v6;
      double v12 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v5 + 11, *v6);
      uint64_t v13 = v12;
      uint64_t v14 = (uint64_t *)*((void *)v11 + 16);
      int8x8_t v15 = (int8x8_t)v5[22];
      if (!*(void *)&v15) {
        goto LABEL_32;
      }
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v17 = *((void *)v11 + 16);
        if ((unint64_t)v14 >= *(void *)&v15) {
          unint64_t v17 = (unint64_t)v14 % *(void *)&v15;
        }
      }
      else
      {
        unint64_t v17 = (*(void *)&v15 - 1) & (unint64_t)v14;
      }
      uint64_t v18 = *(void ***)(v5[21] + 8 * v17);
      if (!v18 || (unint64_t v19 = *v18) == 0)
      {
LABEL_32:
        if (v12 && v12[14] == v14)
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          char v23 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&__p, *v6);
            char v24 = (uint64_t *)*((void *)*v6 + 16);
            unint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v25 = &__p;
            }
            *(_DWORD *)std::string buf = 136315394;
            size_t v84 = v25;
            __int16 v85 = 2048;
            uint64_t v86 = v24;
            _os_log_impl(&dword_1A1780000, v23, OS_LOG_TYPE_DEBUG, "** Received resource: %s, rid: %llu", buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }

          int v26 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(v5[38] + 8), *v6);
          if (v26) {
            *((_DWORD *)v26 + 28) = 2;
          }
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 11, v13);
          uint64_t v27 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            if (__p.__r_.__value_.__s.__data_[16])
            {
              unint64_t v28 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
              if (v28 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40)) {
                free(v28);
              }
            }
            operator delete(v27);
          }
        }
        else
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          unint64_t v29 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&__p, *v6);
            long long v30 = (uint64_t *)*((void *)*v6 + 16);
            unint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v31 = &__p;
            }
            *(_DWORD *)std::string buf = 136315394;
            size_t v84 = v31;
            __int16 v85 = 2048;
            uint64_t v86 = v30;
            _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_DEBUG, "** Received esource should either be in progress or canceled: %s, rid: %llu", buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        goto LABEL_4;
      }
      if (v16.u32[0] < 2uLL)
      {
        uint64_t v20 = *(void *)&v15 - 1;
        while (1)
        {
          uint64_t v22 = (uint64_t *)v19[1];
          if (v22 == v14)
          {
            if ((uint64_t *)v19[2] == v14) {
              goto LABEL_55;
            }
          }
          else if (((unint64_t)v22 & v20) != v17)
          {
            goto LABEL_32;
          }
          unint64_t v19 = (void *)*v19;
          if (!v19) {
            goto LABEL_32;
          }
        }
      }
      while (1)
      {
        uint64_t v21 = (uint64_t *)v19[1];
        if (v21 == v14) {
          break;
        }
        if ((unint64_t)v21 >= *(void *)&v15) {
          uint64_t v21 = (uint64_t *)((unint64_t)v21 % *(void *)&v15);
        }
        if (v21 != (uint64_t *)v17) {
          goto LABEL_32;
        }
LABEL_22:
        unint64_t v19 = (void *)*v19;
        if (!v19) {
          goto LABEL_32;
        }
      }
      if ((uint64_t *)v19[2] != v14) {
        goto LABEL_22;
      }
LABEL_55:
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      unint64_t v32 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&__p, *v6);
        uint8x8_t v33 = (uint64_t *)*((void *)*v6 + 16);
        uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v34 = &__p;
        }
        *(_DWORD *)std::string buf = 136315394;
        size_t v84 = v34;
        __int16 v85 = 2048;
        uint64_t v86 = v33;
        _os_log_impl(&dword_1A1780000, v32, OS_LOG_TYPE_DEBUG, "Removing resource from cancelled list: %s, rid: %llu", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 21, v19);
      if (__p.__r_.__value_.__r.__words[0]) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_4:
      v6 += 2;
    }
    while (v6 != v7);
  }
  uint64_t v35 = *a3;
  uint64_t v36 = a3[1];
  while (v35 != v36)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint64_t v38 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)(v35 + 8));
      os_signpost_id_t v39 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        os_signpost_id_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unint64_t v40 = *(uint64_t **)v35;
      *(_DWORD *)std::string buf = 136315394;
      size_t v84 = v39;
      __int16 v85 = 2048;
      uint64_t v86 = v40;
      _os_log_impl(&dword_1A1780000, v38, OS_LOG_TYPE_DEBUG, "Received failed resource: %s, %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    long long v41 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v5 + 11, (unsigned __int8 *)(v35 + 8));
    int8x8_t v42 = (int8x8_t)v5[22];
    if (!*(void *)&v42) {
      goto LABEL_96;
    }
    int v43 = *(uint64_t **)v35;
    uint8x8_t v44 = (uint8x8_t)vcnt_s8(v42);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      uint64_t v45 = *(void *)v35;
      if ((unint64_t)v43 >= *(void *)&v42) {
        uint64_t v45 = (unint64_t)v43 % *(void *)&v42;
      }
    }
    else
    {
      uint64_t v45 = (*(void *)&v42 - 1) & (unint64_t)v43;
    }
    uint64_t v46 = *(void ***)(v5[21] + 8 * v45);
    if (v46)
    {
      size_t v47 = *v46;
      if (*v46)
      {
        if (v44.u32[0] < 2uLL)
        {
          uint64_t v48 = *(void *)&v42 - 1;
          while (1)
          {
            uint64_t v50 = (uint64_t *)v47[1];
            if (v50 == v43)
            {
              if ((uint64_t *)v47[2] == v43) {
                goto LABEL_97;
              }
            }
            else if (((unint64_t)v50 & v48) != v45)
            {
              goto LABEL_96;
            }
            size_t v47 = (void *)*v47;
            if (!v47) {
              goto LABEL_97;
            }
          }
        }
        do
        {
          unint64_t v49 = v47[1];
          if ((uint64_t *)v49 == v43)
          {
            if ((uint64_t *)v47[2] == v43) {
              break;
            }
          }
          else
          {
            if (v49 >= *(void *)&v42) {
              v49 %= *(void *)&v42;
            }
            if (v49 != v45) {
              goto LABEL_96;
            }
          }
          size_t v47 = (void *)*v47;
        }
        while (v47);
      }
    }
    else
    {
LABEL_96:
      size_t v47 = 0;
    }
LABEL_97:
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)(v5 + 16), (unsigned __int8 *)(v35 + 8), v35 + 8);
    if (v41 && v41[14] == *(uint64_t **)v35)
    {
      int v51 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(v5[38] + 8), (unsigned __int8 *)(v35 + 8));
      if (v51) {
        *((_DWORD *)v51 + 28) = 3;
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 11, v41);
      std::string::size_type v52 = __p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_68;
      }
      if (__p.__r_.__value_.__s.__data_[16])
      {
        int v53 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
        if (v53 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40)) {
          free(v53);
        }
      }
      uint64_t v37 = (void *)v52;
    }
    else
    {
      if (!v47) {
        goto LABEL_68;
      }
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      unint64_t v54 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)(v35 + 8));
        unint64_t v55 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unint64_t v56 = *(uint64_t **)v35;
        *(_DWORD *)std::string buf = 136315394;
        size_t v84 = v55;
        __int16 v85 = 2048;
        uint64_t v86 = v56;
        _os_log_impl(&dword_1A1780000, v54, OS_LOG_TYPE_DEBUG, "Removing fsailed resource from cancelled list: %s, rid: %llu", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 21, v47);
      uint64_t v37 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_68;
      }
    }
    operator delete(v37);
LABEL_68:
    v35 += 160;
  }
  unint64_t v57 = *a4;
  unint64_t v58 = (uint64_t **)a4[1];
  if (*a4 == (unsigned __int8 *)v58) {
    goto LABEL_164;
  }
  while (2)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    unint64_t v60 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, v57 + 8);
      unint64_t v61 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v62 = *(uint64_t **)v57;
      *(_DWORD *)std::string buf = 136315394;
      size_t v84 = v61;
      __int16 v85 = 2048;
      uint64_t v86 = v62;
      _os_log_impl(&dword_1A1780000, v60, OS_LOG_TYPE_DEBUG, "Received cancelled resource: %s, rid: %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    unint64_t v63 = *(uint64_t **)v57;
    int8x8_t v64 = (int8x8_t)v5[22];
    if (!*(void *)&v64) {
      goto LABEL_147;
    }
    uint8x8_t v65 = (uint8x8_t)vcnt_s8(v64);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      unint64_t v66 = *(void *)v57;
      if ((unint64_t)v63 >= *(void *)&v64) {
        unint64_t v66 = (unint64_t)v63 % *(void *)&v64;
      }
    }
    else
    {
      unint64_t v66 = (*(void *)&v64 - 1) & (unint64_t)v63;
    }
    uint8x8_t v67 = *(void ***)(v5[21] + 8 * v66);
    if (!v67 || (uint64_t v68 = *v67) == 0)
    {
LABEL_147:
      uint64_t v72 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v5 + 11, v57 + 8);
      if (!v72) {
        goto LABEL_119;
      }
      size_t v73 = v72;
      if (v72[14] != v63) {
        goto LABEL_119;
      }
      int v74 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(v5[38] + 8), v57 + 8);
      if (v74) {
        *((_DWORD *)v74 + 28) = 4;
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 11, v73);
      std::string::size_type v75 = __p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_119;
      }
      if (__p.__r_.__value_.__s.__data_[16])
      {
        os_signpost_id_t v76 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
        if (v76 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40)) {
          free(v76);
        }
      }
      uint8x8_t v59 = (void *)v75;
      goto LABEL_118;
    }
    if (v65.u32[0] < 2uLL)
    {
      uint64_t v69 = *(void *)&v64 - 1;
      while (1)
      {
        unint64_t v71 = (uint64_t *)v68[1];
        if (v71 == v63)
        {
          if ((uint64_t *)v68[2] == v63) {
            goto LABEL_155;
          }
        }
        else if (((unint64_t)v71 & v69) != v66)
        {
          goto LABEL_147;
        }
        uint64_t v68 = (void *)*v68;
        if (!v68) {
          goto LABEL_147;
        }
      }
    }
    while (1)
    {
      size_t v70 = (uint64_t *)v68[1];
      if (v70 == v63) {
        break;
      }
      if ((unint64_t)v70 >= *(void *)&v64) {
        size_t v70 = (uint64_t *)((unint64_t)v70 % *(void *)&v64);
      }
      if (v70 != (uint64_t *)v66) {
        goto LABEL_147;
      }
LABEL_137:
      uint64_t v68 = (void *)*v68;
      if (!v68) {
        goto LABEL_147;
      }
    }
    if ((uint64_t *)v68[2] != v63) {
      goto LABEL_137;
    }
LABEL_155:
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    int v77 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, v57 + 8);
      size_t v78 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v79 = *(uint64_t **)v57;
      *(_DWORD *)std::string buf = 136315394;
      size_t v84 = v78;
      __int16 v85 = 2048;
      uint64_t v86 = v79;
      _os_log_impl(&dword_1A1780000, v77, OS_LOG_TYPE_DEBUG, "Removing cancelled resource: %s, rid: %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 21, v68);
    uint8x8_t v59 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0]) {
LABEL_118:
    }
      operator delete(v59);
LABEL_119:
    v57 += 160;
    if (v57 != (unsigned __int8 *)v58) {
      continue;
    }
    break;
  }
LABEL_164:
  uint64_t result = v5[42];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  return result;
}

uint64_t md::DaVinciGroundTileData::estimatedCost(md::DaVinciGroundTileData *this)
{
  uint64_t v1 = (void *)*((void *)this + 134);
  unint64_t v2 = (void *)*((void *)this + 135);
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      int v4 = (uint64_t *)v1[1];
      for (uint64_t i = (uint64_t *)v1[2];
            v4 != i;
            uint64_t v3 = *(void *)(**(void **)(v6 + 64) + 48)
               + v3
               + *(void *)(*(void *)(v6 + 96) + 48)
               - (*(void *)(**(void **)(v6 + 64) + 40)
                + *(void *)(*(void *)(v6 + 96) + 40)))
      {
        uint64_t v6 = *v4;
        v4 += 3;
      }
      unint64_t v7 = (uint64_t *)v1[4];
      for (std::string::size_type j = (uint64_t *)v1[5];
            v7 != j;
            uint64_t v3 = *(void *)(**(void **)(v9 + 64) + 48)
               + v3
               + *(void *)(*(void *)(v9 + 96) + 48)
               - (*(void *)(**(void **)(v9 + 64) + 40)
                + *(void *)(*(void *)(v9 + 96) + 40)))
      {
        uint64_t v9 = *v7;
        v7 += 4;
      }
      v1 += 7;
    }
    while (v1 != v2);
  }
  uint64_t v10 = *((void *)this + 110);
  if (v10) {
    uint64_t v3 = *(void *)(v10 + 48) + v3 - *(void *)(v10 + 40);
  }
  uint64_t v11 = *((void *)this + 112);
  if (v11) {
    uint64_t v3 = *(void *)(v11 + 48) + v3 - *(void *)(v11 + 40);
  }
  uint64_t v12 = *((void *)this + 114);
  if (v12) {
    uint64_t v3 = *(void *)(v12 + 48) + v3 - *(void *)(v12 + 40);
  }
  uint64_t v13 = *((void *)this + 108);
  if (v13) {
    uint64_t v3 = *(void *)(v13 + 48) + v3 - *(void *)(v13 + 40);
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 119);
  for (uint64_t k = (uint64_t *)*((void *)this + 120);
        v14 != k;
        uint64_t v3 = *(void *)(**(void **)(v16 + 64) + 48)
           + v3
           + *(void *)(*(void *)(v16 + 96) + 48)
           - (*(void *)(**(void **)(v16 + 64) + 40)
            + *(void *)(*(void *)(v16 + 96) + 40)))
  {
    uint64_t v16 = *v14;
    v14 += 2;
  }
  unint64_t v17 = (uint64_t *)*((void *)this + 122);
  for (uint64_t m = (uint64_t *)*((void *)this + 123);
        v17 != m;
        uint64_t v3 = *(void *)(**(void **)(v19 + 64) + 48)
           + v3
           + *(void *)(*(void *)(v19 + 96) + 48)
           - (*(void *)(**(void **)(v19 + 64) + 40)
            + *(void *)(*(void *)(v19 + 96) + 40)))
  {
    uint64_t v19 = *v17;
    v17 += 2;
  }
  uint64_t v20 = (uint64_t *)*((void *)this + 125);
  for (uint64_t n = (uint64_t *)*((void *)this + 126);
        v20 != n;
        uint64_t v3 = *(void *)(**(void **)(v22 + 64) + 48)
           + v3
           + *(void *)(*(void *)(v22 + 96) + 48)
           - (*(void *)(**(void **)(v22 + 64) + 40)
            + *(void *)(*(void *)(v22 + 96) + 40)))
  {
    uint64_t v22 = *v20;
    v20 += 2;
  }
  uint64_t v23 = *((void *)this + 163);
  if (v23) {
    v3 += *(void *)(v23 + 80);
  }
  return v3;
}

uint64_t md::DaVinciElevationRaster::estimatedCost(md::DaVinciElevationRaster *this)
{
  return 2 * (*(void *)(*((void *)this + 90) + 16) - **((void **)this + 90));
}

void md::MercatorTerrainHeightCache::invalidateRect(void *a1, double *a2)
{
  unint64_t v2 = (void *)a1[2];
  if (!v2) {
    return;
  }
  int v4 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
  {
    uint64_t v9 = v2[2];
    double v10 = (*(double (**)(uint64_t))(*(void *)v9 + 56))(v9);
    if (v10 < *a2 || (v10 < a2[2] ? (BOOL v12 = v11 < a2[1]) : (BOOL v12 = 1), !v12 ? (v13 = v11 < a2[3]) : (v13 = 0), !v13))
    {
      unint64_t v8 = (void *)*v2;
      goto LABEL_4;
    }
    unint64_t v8 = (void *)*v2;
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v4, v2);
    if (__p) {
      operator delete(__p);
    }
    if (v6 < v7)
    {
      *(void *)uint64_t v6 = v9;
      v6 += 8;
      goto LABEL_4;
    }
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    if ((v7 - v5) >> 2 > v15) {
      unint64_t v15 = (v7 - v5) >> 2;
    }
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v17 = operator new(8 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v18 = &v17[8 * v14];
    *(void *)uint64_t v18 = v9;
    uint64_t v19 = v18 + 8;
    if (v6 != v5)
    {
      unint64_t v20 = v6 - 8 - v5;
      if (v20 >= 0x168)
      {
        if (&v17[v6 - v5 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v17[v6 - v5 - 8])
        {
          uint64_t v21 = v6;
        }
        else if (&v6[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
        {
          uint64_t v21 = v6;
        }
        else if ((unint64_t)(v5 - v17) >= 0x20)
        {
          uint64_t v23 = (v20 >> 3) + 1;
          uint64_t v21 = &v6[-8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
          char v24 = &v17[8 * v14 - 16];
          unint64_t v25 = v6 - 16;
          uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *char v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          v18 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v21 = v6;
        }
      }
      else
      {
        uint64_t v21 = v6;
      }
      do
      {
        uint64_t v22 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v21 != v5);
    }
LABEL_32:
    unint64_t v7 = &v17[8 * v16];
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = v19;
    uint64_t v5 = v18;
    int v4 = a1;
LABEL_4:
    unint64_t v2 = v8;
  }
  while (v8);
  if (v5 != v6)
  {
    unint64_t v28 = v5;
    do
    {
      uint64_t v29 = *(void *)v28;
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)v28 + 64));
      [WeakRetained anchorWorldPointDidChange:v29];

      v28 += 8;
    }
    while (v28 != v6);
  }
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_1A18D1188(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t md::DaVinciMetaTileData::estimatedCost(md::DaVinciMetaTileData *this)
{
  return *((void *)this + 99)
       - *((void *)this + 97)
       + vcvtpd_u64_f64((double)(unint64_t)(*((void *)this + 96) << 6) * 0.125)
       + vcvtpd_u64_f64((double)(unint64_t)(*((void *)this + 93) << 6) * 0.125);
}

void md::CommandBufferSelector::init(md::CommandBufferSelector *this, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (unsigned char *)*((void *)this + 1);
  uint64_t v6 = (unsigned char *)*((void *)this + 2);
  unint64_t v7 = (v6 - v5) >> 1;
  unint64_t v8 = *a2 - v7;
  if (*a2 > v7)
  {
    uint64_t v9 = *((void *)this + 3);
    if (v8 <= (v9 - (uint64_t)v6) >> 1)
    {
      bzero(*((void **)this + 2), 2 * v8);
      *((void *)this + 2) = &v6[2 * v8];
LABEL_25:
      unint64_t v4 = *a2;
      goto LABEL_26;
    }
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_60;
    }
    unint64_t v10 = v9 - (void)v5;
    if (v10 <= v4) {
      uint64_t v11 = *a2;
    }
    else {
      uint64_t v11 = v10;
    }
    BOOL v12 = v10 >= 0x7FFFFFFFFFFFFFFELL;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v12) {
      uint64_t v13 = v11;
    }
    if (v13 < 0) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = 2 * v13;
    unint64_t v15 = operator new(2 * v13);
    unint64_t v16 = &v15[2 * v7];
    bzero(v16, 2 * v8);
    unint64_t v17 = &v16[2 * v8];
    if (v6 == v5)
    {
      uint64_t v5 = v6;
      uint64_t v19 = &v15[v14];
      goto LABEL_23;
    }
    unint64_t v18 = v6 - v5 - 2;
    if (v18 >= 0x1E)
    {
      uint64_t v19 = &v15[v14];
      if ((unint64_t)(v5 - v15) >= 0x20)
      {
        uint64_t v20 = (v18 >> 1) + 1;
        uint64_t v21 = &v15[2 * v7 - 16];
        uint64_t v22 = (long long *)(v6 - 16);
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *uint64_t v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 16;
        }
        while (v23);
        v16 -= 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
        v6 -= 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v19 = &v15[v14];
    }
    do
    {
      __int16 v25 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v25;
      v16 -= 2;
    }
    while (v6 != v5);
    uint64_t v5 = (unsigned char *)*((void *)this + 1);
LABEL_23:
    *((void *)this + 1) = v16;
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v19;
    if (v5) {
      operator delete(v5);
    }
    goto LABEL_25;
  }
  if (*a2 < v7) {
    *((void *)this + 2) = &v5[2 * v4];
  }
LABEL_26:
  long long v27 = (char *)*((void *)this + 4);
  uint64_t v26 = (char *)*((void *)this + 5);
  unint64_t v28 = v26 - v27;
  size_t v29 = v4 - (v26 - v27);
  if (v4 > v26 - v27)
  {
    uint64_t v30 = *((void *)this + 6);
    if (v30 - (uint64_t)v26 >= v29)
    {
      bzero(*((void **)this + 5), v4 - (v26 - v27));
      *((void *)this + 5) = &v27[v4];
      goto LABEL_56;
    }
    if ((v4 & 0x8000000000000000) == 0)
    {
      unint64_t v31 = v30 - (void)v27;
      uint64_t v32 = 2 * v31;
      if (2 * v31 <= v4) {
        uint64_t v32 = v4;
      }
      if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v33 = v32;
      }
      uint64_t v34 = (char *)operator new(v33);
      uint64_t v35 = &v34[v28];
      uint64_t v36 = &v34[v33];
      uint64_t v37 = &v34[v4];
      bzero(&v34[v28], v29);
      if (v26 == v27) {
        goto LABEL_54;
      }
      if (v28 < 8 || (unint64_t)(v27 - v34) < 0x20) {
        goto LABEL_51;
      }
      if (v28 >= 0x20)
      {
        unint64_t v38 = v28 & 0xFFFFFFFFFFFFFFE0;
        os_signpost_id_t v39 = v26 - 16;
        unint64_t v40 = &v34[v26 - 16 - v27];
        unint64_t v41 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v42 = *(_OWORD *)v39;
          *((_OWORD *)v40 - 1) = *((_OWORD *)v39 - 1);
          *(_OWORD *)unint64_t v40 = v42;
          v40 -= 32;
          v39 -= 32;
          v41 -= 32;
        }
        while (v41);
        if (v28 == v38) {
          goto LABEL_53;
        }
        if ((v28 & 0x18) == 0)
        {
          v35 -= v38;
          v26 -= v38;
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v38 = 0;
      }
      unint64_t v43 = v38 - (v28 & 0xFFFFFFFFFFFFFFF8);
      uint8x8_t v44 = &v26[-v38 - 8];
      uint64_t v45 = (char *)(v44 - v27);
      do
      {
        uint64_t v46 = *(void *)v44;
        v44 -= 8;
        *(void *)&v45[(void)v34] = v46;
        v45 -= 8;
        v43 += 8;
      }
      while (v43);
      if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_53;
      }
      v35 -= v28 & 0xFFFFFFFFFFFFFFF8;
      v26 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_51:
      size_t v47 = v35 - 1;
      do
      {
        char v48 = *--v26;
        *v47-- = v48;
      }
      while (v26 != v27);
LABEL_53:
      uint64_t v26 = v27;
      uint64_t v35 = v34;
LABEL_54:
      *((void *)this + 4) = v35;
      *((void *)this + 5) = v37;
      *((void *)this + 6) = v36;
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_56;
    }
LABEL_60:
    abort();
  }
  if (v4 < v26 - v27) {
    *((void *)this + 5) = &v27[v4];
  }
LABEL_56:
  if (*a2)
  {
    uint64_t v49 = 0;
    int v50 = 0;
    do
    {
      __int16 v51 = (*(uint64_t (**)(md::CommandBufferSelector *, void, void))(*(void *)this + 16))(this, *((unsigned __int8 *)this + 56), v50);
      __int16 v52 = (*(uint64_t (**)(md::CommandBufferSelector *, void, void))(*(void *)this + 24))(this, *((unsigned __int8 *)this + 56), v50);
      *(unsigned char *)(*((void *)this + 4) + v49) = v52;
      *(_WORD *)(*((void *)this + 1) + 2 * v49) = v51 | (v52 << 8);
      uint64_t v49 = ++v50;
    }
    while (*a2 > v50);
  }
}

uint64_t md::StandardCommandBufferSelector::_getCommandBufferID(md::StandardCommandBufferSelector *this, char a2, uint64_t a3)
{
  uint64_t result = a3;
  if ((a2 & 1) == 0)
  {
    if ((a3 - 1) > 0x7B) {
      return 0;
    }
    else {
      return byte_1A29C38D0[(a3 - 1)];
    }
  }
  return result;
}

uint64_t md::StandardCommandBufferSelector::_getPassID(md::StandardCommandBufferSelector *this, char a2, int a3)
{
  if (a2) {
    return 9;
  }
  if ((a3 - 100) > 0x18) {
    return 10;
  }
  return byte_1A29C394C[(a3 - 100)];
}

uint64_t md::RealisticCommandBufferSelector::_getCommandBufferID(md::RealisticCommandBufferSelector *this, char a2, uint64_t a3)
{
  uint64_t result = a3;
  if ((a2 & 1) == 0)
  {
    if ((a3 - 1) > 0x13) {
      return 0;
    }
    else {
      return byte_1A2961CB4[(a3 - 1)];
    }
  }
  return result;
}

uint64_t md::RealisticCommandBufferSelector::_getPassID(md::RealisticCommandBufferSelector *this, char a2, int a3)
{
  unint64_t v3 = 0x4040404030201uLL >> (8 * (a3 - 14));
  if ((a3 - 14) > 6) {
    LOBYTE(v3) = 0;
  }
  if (a2) {
    LOBYTE(v3) = 0;
  }
  return v3;
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t gss::stringDecoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v11 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v35 = v11;
  if (v11 == 88) {
    return 1;
  }
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  if (a3)
  {
    memset(__p, 0, 24);
    if (geo::ibitstream::readString(a1, (std::string *)__p))
    {
      uint64_t v13 = *(void **)__p;
      *(_DWORD *)uint64_t v32 = *(_DWORD *)&__p[16];
      *(_DWORD *)&v32[3] = *(_DWORD *)&__p[19];
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
        *(_OWORD *)size_t v33 = *(_OWORD *)__p;
        uint64_t v34 = *(void *)&__p[16];
        operator delete(v13);
      }
      else
      {
        *(_DWORD *)&__p[16] = *(_DWORD *)v32;
        *(_DWORD *)&__p[19] = *(_DWORD *)&v32[3];
        *(_OWORD *)size_t v33 = *(_OWORD *)__p;
        uint64_t v34 = *(void *)&__p[16];
      }
      uint64_t v21 = (void *)HIBYTE(v34);
      char v22 = HIBYTE(v34);
      if (v34 < 0) {
        uint64_t v21 = v33[1];
      }
      uint64_t v23 = (a3 >> 3) - 1;
      BOOL v12 = v21 == (void *)v23;
      if (v21 == (void *)v23)
      {
        *(_WORD *)std::string __p = v35;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, __p, &__p[2]);
        uint64_t v24 = geo::intern_pool<std::string,geo::StdAllocator<std::string,gss::Allocator>,std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>>::emplace(*a5 + 352, (long long *)v33);
        uint64_t v25 = geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v35);
        *(unsigned char *)uint64_t v25 = 1;
        *(void *)(v25 + 8) = v24;
        char v22 = HIBYTE(v34);
      }
      else
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        }
        uint64_t v26 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 490;
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = "String property was an unexpected length.";
          _os_log_impl(&dword_1A1780000, v26, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", __p, 0x1Cu);
        }
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)":", 1);
        unint64_t v28 = (void *)std::ostream::operator<<();
        size_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" STYL Parse Error Here: ", 24);
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"String property was an unexpected length.", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
      }
      if (v22 < 0) {
        operator delete(v33[0]);
      }
    }
    else
    {
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unint64_t v16 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 488;
        *(_WORD *)&__p[18] = 2082;
        *(void *)&__p[20] = "Could not read string.";
        _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", __p, 0x1Cu);
      }
      unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
      unint64_t v18 = (void *)std::ostream::operator<<();
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read string.", 22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
      return 0;
    }
  }
  else
  {
    *(_WORD *)std::string __p = v11;
    uint64_t v14 = (gss *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, __p, &__p[2]);
    gss::PropertySetDefaultStringValue(v14);
    uint64_t v15 = geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 64, &v35);
    BOOL v12 = 1;
    *(unsigned char *)uint64_t v15 = 1;
    *(void *)(v15 + 8) = &unk_1EB34D308;
  }
  return v12;
}

void sub_1A18D1B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_pool<std::string,geo::StdAllocator<std::string,gss::Allocator>,std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>>::emplace(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4
    || (uint64_t v5 = *(uint64_t **)(v4 - 16),
        unint64_t v6 = v5[1],
        0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v5) >> 3) == *(_DWORD *)(a1 + 24)))
  {
    uint64_t v7 = gss::Allocator::instance((gss::Allocator *)a1);
    unint64_t v8 = (atomic_ullong *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, 64, 8);
    *unint64_t v8 = (atomic_ullong)&unk_1EF58B2D8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    v8[4] = 0;
    uint64_t v9 = (int64x2_t *)(v8 + 4);
    v8[5] = 0;
    v8[6] = 0;
    uint64_t v10 = gss::Allocator::instance((gss::Allocator *)v8);
    v8[7] = v10;
    unint64_t v11 = *(unsigned int *)(a1 + 24);
    atomic_ullong v12 = v8[4];
    if (0xAAAAAAAAAAAAAAABLL * ((v8[6] - v12) >> 3) < v11)
    {
      atomic_ullong v13 = v8[5];
      unint64_t v55 = v8 + 7;
      uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v10 + 16))(v10, 24 * v11, 8);
      atomic_ullong v15 = v8[4];
      unint64_t v16 = v8[5];
      if (v16 == v15)
      {
        int64x2_t v19 = vdupq_n_s64(v16);
        uint64_t v17 = v14 + 24 * ((v13 - v12) / 24);
      }
      else
      {
        uint64_t v17 = v14 + 24 * ((v13 - v12) / 24);
        do
        {
          long long v18 = *(_OWORD *)(v16 - 24);
          *(void *)(v17 - 8) = *(void *)(v16 - 8);
          *(_OWORD *)(v17 - 24) = v18;
          v17 -= 24;
          *(void *)(v16 - 16) = 0;
          *(void *)(v16 - 8) = 0;
          *(void *)(v16 - 24) = 0;
          v16 -= 24;
        }
        while (v16 != v15);
        int64x2_t v19 = *v9;
      }
      v8[4] = v17;
      v8[5] = v14 + 24 * ((v13 - v12) / 24);
      int64x2_t v53 = v19;
      atomic_ullong v20 = v8[6];
      v8[6] = v14 + 24 * v11;
      atomic_ullong v54 = v20;
      uint64_t v52 = v19.i64[0];
      std::__split_buffer<std::string,geo::StdAllocator<std::string,gss::Allocator> &>::~__split_buffer((uint64_t)&v52);
    }
    uint64_t v21 = *(int64x2_t ***)(a1 + 8);
    unint64_t v22 = *(void *)(a1 + 16);
    if ((unint64_t)v21 >= v22)
    {
      uint64_t v24 = ((uint64_t)v21 - *(void *)a1) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v22 - *(void *)a1;
      if (v26 >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v28 = (char *)operator new(16 * v27);
      size_t v29 = (int64x2_t **)&v28[16 * v24];
      uint64_t v30 = &v28[16 * v27];
      *size_t v29 = v9;
      v29[1] = (int64x2_t *)v8;
      atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
      unint64_t v31 = *(void **)a1;
      uint64_t v32 = *(void **)(a1 + 8);
      uint64_t v23 = v29 + 2;
      if (v32 == *(void **)a1)
      {
        *(void *)a1 = v29;
        *(void *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = v30;
      }
      else
      {
        do
        {
          long long v33 = *((_OWORD *)v32 - 1);
          v32 -= 2;
          *((_OWORD *)v29 - 1) = v33;
          v29 -= 2;
          *uint64_t v32 = 0;
          v32[1] = 0;
        }
        while (v32 != v31);
        uint64_t v32 = *(void **)a1;
        uint64_t v34 = *(void **)(a1 + 8);
        *(void *)a1 = v29;
        *(void *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = v30;
        while (v34 != v32)
        {
          unsigned __int8 v35 = (std::__shared_weak_count *)*(v34 - 1);
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          v34 -= 2;
        }
      }
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *uint64_t v21 = v9;
      v21[1] = (int64x2_t *)v8;
      atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
      uint64_t v23 = v21 + 2;
    }
    *(void *)(a1 + 8) = v23;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    uint64_t v5 = *(uint64_t **)(*(void *)(a1 + 8) - 16);
    unint64_t v6 = v5[1];
  }
  unint64_t v36 = v5[2];
  if (v6 >= v36)
  {
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v5) >> 3);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v5) >> 3);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    unint64_t v55 = v5 + 3;
    if (v40)
    {
      uint64_t v42 = 3 * v40;
      uint64_t v43 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v5[3] + 16))(v5[3], 24 * v40, 8);
      uint64_t v44 = v43 + 24 * v39;
      unint64_t v40 = v43 + 8 * v42;
      if (v43)
      {
        long long v45 = *a2;
        *(void *)(v44 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v44 = v45;
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
      }
    }
    else
    {
      uint64_t v44 = 24 * v39;
    }
    uint64_t v38 = v44 + 24;
    uint64_t v47 = *v5;
    uint64_t v46 = v5[1];
    if (v46 == *v5)
    {
      uint64_t v49 = v5[1];
    }
    else
    {
      do
      {
        long long v48 = *(_OWORD *)(v46 - 24);
        *(void *)(v44 - 8) = *(void *)(v46 - 8);
        *(_OWORD *)(v44 - 24) = v48;
        v44 -= 24;
        *(void *)(v46 - 16) = 0;
        *(void *)(v46 - 8) = 0;
        *(void *)(v46 - 24) = 0;
        v46 -= 24;
      }
      while (v46 != v47);
      uint64_t v49 = *v5;
      uint64_t v46 = v5[1];
    }
    *uint64_t v5 = v44;
    uint64_t v52 = v49;
    v53.i64[0] = v49;
    v5[1] = v38;
    v53.i64[1] = v46;
    atomic_ullong v50 = v5[2];
    v5[2] = v40;
    atomic_ullong v54 = v50;
    std::__split_buffer<std::string,geo::StdAllocator<std::string,gss::Allocator> &>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    if (v6)
    {
      long long v37 = *a2;
      *(void *)(v6 + 16) = *((void *)a2 + 2);
      *(_OWORD *)unint64_t v6 = v37;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
    }
    uint64_t v38 = v6 + 24;
  }
  v5[1] = v38;
  return v38 - 24;
}

void sub_1A18D1FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::string,geo::StdAllocator<std::string,gss::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      unint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = *a2;
  unsigned int v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    v7[8] = 0;
    uint64_t v8 = 0;
    geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,gss::StylePropertySetInternObject> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    uint64_t v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    uint64_t v5 = v4;
  }
  return *(void *)a1 + *(unsigned __int16 *)(a1 + 8) + 16 * v5;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,gss::StylePropertySetInternObject> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)(result + 14))
    {
      uint64_t v5 = a2;
      unsigned __int16 v6 = *(_WORD *)(result + 10);
      do
      {
        uint64_t result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)v3, *(unsigned char *)v5);
        if (result == v6)
        {
          uint64_t result = geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!result) {
            return result;
          }
          uint64_t v7 = *(unsigned __int16 *)(v3 + 10);
          uint64_t v8 = *(unsigned __int8 **)v3;
          v8[v7] = *(unsigned char *)v5;
          *(_OWORD *)&v8[16 * v7 + *(unsigned __int16 *)(v3 + 8)] = *(_OWORD *)(v5 + 8);
          unsigned __int16 v6 = *(_WORD *)(v3 + 10) + 1;
          *(_WORD *)(v3 + 10) = v6;
          *(unsigned char *)(v3 + 15) = 0;
        }
        v5 += 24;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(unsigned __int16 *a1)
{
  int v1 = a1[5];
  if (v1 != a1[6]) {
    return 1;
  }
  if (v1 == 0xFFFF) {
    return 0;
  }
  unsigned int v3 = 2 * (v1 & 0x7FFF);
  if (v3 <= 4) {
    __int16 v4 = 4;
  }
  else {
    __int16 v4 = v3;
  }
  unsigned __int16 v5 = (v4 & 0xFFF8) + 8;
  uint64_t v6 = gss::Allocator::instance((gss::Allocator *)a1);
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v6 + 16))(v6, (unsigned __int16)(v5 + 16 * v4) & 0xFFF8, 1);
  uint64_t v8 = v7;
  if (*(void *)a1)
  {
    if (a1[5])
    {
      uint64_t v7 = (char *)memmove(v7, *(const void **)a1, a1[5]);
      if (a1[5]) {
        uint64_t v7 = (char *)memmove(&v8[v5], (const void *)(*(void *)a1 + a1[4]), 16 * a1[5]);
      }
    }
    uint64_t v9 = gss::Allocator::instance((gss::Allocator *)v7);
    (*(void (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *(void *)a1, a1[6]);
  }
  a1[6] = v4;
  *(void *)a1 = v8;
  uint64_t result = 1;
  a1[4] = v5;
  return result;
}

{
  int v1;
  unsigned int v3;
  __int16 v4;
  uint64_t v5;
  unsigned __int16 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  int v1 = a1[5];
  if (v1 != a1[6]) {
    return 1;
  }
  if (v1 == 0xFFFF) {
    return 0;
  }
  unsigned int v3 = 2 * (v1 & 0x7FFF);
  if (v3 <= 4) {
    __int16 v4 = 4;
  }
  else {
    __int16 v4 = v3;
  }
  unsigned __int16 v5 = gss::Allocator::instance((gss::Allocator *)a1);
  uint64_t v6 = (v4 & 0xFFF8) + 8;
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v5 + 16))(v5, (unsigned __int16)(v6 + 16 * v4), 1);
  uint64_t v8 = v7;
  if (*(void *)a1)
  {
    if (a1[5])
    {
      uint64_t v7 = (char *)memmove(v7, *(const void **)a1, a1[5]);
      if (a1[5]) {
        uint64_t v7 = (char *)memmove(&v8[v6], (const void *)(*(void *)a1 + a1[4]), 16 * a1[5]);
      }
    }
    uint64_t v9 = gss::Allocator::instance((gss::Allocator *)v7);
    (*(void (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *(void *)a1, a1[6]);
  }
  a1[6] = v4;
  *(void *)a1 = v8;
  uint64_t result = 1;
  a1[4] = v6;
  return result;
}

uint64_t md::MapEngineMode::logicGraphWithSettings@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  atomic_ullong v20 = 0;
  if (!a2)
  {
    uint64_t v9 = 0;
    goto LABEL_35;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  if (*a2 != v6)
  {
    uint64_t v7 = *a2;
    while (*(unsigned char *)v7 != 11)
    {
      v7 += 16;
      if (v7 == v6) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == v6) {
LABEL_10:
  }
    int v8 = 0;
  else {
    int v8 = (*(void *)(v7 + 8) != 0) << 16;
  }
  uint64_t v10 = *a2;
  if (v5 != v6)
  {
    uint64_t v10 = *a2;
    while (*(unsigned char *)v10)
    {
      v10 += 16;
      if (v10 == v6) {
        goto LABEL_19;
      }
    }
  }
  if (v10 == v6)
  {
LABEL_19:
    uint64_t v11 = 0;
    if (v5 != v6)
    {
LABEL_20:
      while (*(unsigned char *)v5 != 19)
      {
        v5 += 16;
        if (v5 == v6) {
          goto LABEL_26;
        }
      }
    }
  }
  else
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v5 != v6) {
      goto LABEL_20;
    }
  }
  if (v5 == v6)
  {
LABEL_26:
    __int16 v13 = v11 != 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v5 + 8);
    __int16 v13 = v11 != 0;
    if (v12)
    {
      __int16 v14 = 256;
      goto LABEL_28;
    }
  }
  __int16 v14 = 0;
LABEL_28:
  uint64_t v21 = (void (**)(void **))&unk_1EF57D6C8;
  char v23 = BYTE2(v8);
  __int16 v22 = v8 | v13 | v14;
  uint64_t v24 = (void **)&v21;
  std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::__clone((uint64_t)&v21, (uint64_t)v19);
  atomic_ullong v15 = v20;
  uint64_t v24 = v20;
  atomic_ullong v20 = (void **)v19;
  if (v24 == (void **)&v21)
  {
    v21[4]((void **)&v21);
    uint64_t v9 = v20;
    if (v20) {
      goto LABEL_33;
    }
LABEL_35:
    long long v18 = v9;
    goto LABEL_37;
  }
  if (!v15) {
    goto LABEL_36;
  }
  (*((void (**)(void **))*v15 + 5))(v15);
  uint64_t v9 = v20;
  if (!v20) {
    goto LABEL_35;
  }
LABEL_33:
  if (v9 != v19)
  {
    uint64_t v9 = (void **)(*((uint64_t (**)(void **))*v9 + 2))(v9);
    goto LABEL_35;
  }
LABEL_36:
  long long v18 = (void **)v17;
  (*(void (**)(void *, void *))(v19[0] + 24))(v19, v17);
LABEL_37:
  gdc::LogicExecutionGraphBuilder::build(a3, a1 + 232, v17);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*((void (**)(void))*v18 + 5))();
  }
  uint64_t result = (uint64_t)v20;
  if (v20 == v19) {
    return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
  }
  if (v20) {
    return (*((uint64_t (**)(void))*v20 + 5))();
  }
  return result;
}

void sub_1A18D274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<BOOL ()(gdc::LogicExecutionNode const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D6C8;
  __int16 v2 = *(_WORD *)(result + 8);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(result + 10);
  *(_WORD *)(a2 + 8) = v2;
  return result;
}

void gdc::LogicExecutionGraphBuilder::build(void *a1, uint64_t a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 144)) {
    goto LABEL_2;
  }
  if (*(void *)(a2 + 104))
  {
    uint64_t v6 = *(void **)(a2 + 88);
    if (v6 != (void *)(a2 + 96))
    {
      while (1)
      {
        uint64_t v7 = v6[7];
        uint64_t v8 = v6[8];
        if (v7 != v8) {
          break;
        }
LABEL_8:
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
        if (v10 == (void *)(a2 + 96)) {
          goto LABEL_14;
        }
      }
      while (*(unsigned char *)(v7 + 32))
      {
        v7 += 40;
        if (v7 == v8) {
          goto LABEL_8;
        }
      }
LABEL_2:
      *a1 = 0;
      return;
    }
  }
LABEL_14:
  uint64_t v12 = *(void **)(a2 + 64);
  if (v12 != (void *)(a2 + 72))
  {
    while (v12[8] - v12[7] <= 0x3FuLL)
    {
      unint64_t v16 = (void *)v12[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v12[2];
          BOOL v11 = *v17 == (void)v12;
          uint64_t v12 = v17;
        }
        while (!v11);
      }
      uint64_t v12 = v17;
      if (v17 == (void *)(a2 + 72)) {
        goto LABEL_15;
      }
    }
    goto LABEL_2;
  }
LABEL_15:
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v45 = 0;
  __int16 v13 = (void *)(a2 + 8);
  __int16 v14 = *(void **)a2;
  if (*(void *)a2 == a2 + 8)
  {
    char v15 = 1;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v14 + 3);
      long long v46 = *((_OWORD *)v14 + 2);
      long long v47 = v18;
      int isAcyclicDFS = geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::isAcyclicDFS(a2, (unint64_t *)&v46, (char **)&v48, __p);
      char v15 = isAcyclicDFS;
      if (!isAcyclicDFS) {
        break;
      }
      atomic_ullong v20 = (void *)v14[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          atomic_ullong v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v14[2];
          BOOL v11 = *v21 == (void)v14;
          __int16 v14 = v21;
        }
        while (!v11);
      }
      __int16 v14 = v21;
    }
    while (v21 != v13);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v48) {
    operator delete(v48);
  }
  if ((v15 & 1) == 0) {
    goto LABEL_2;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v45 = 0;
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  __int16 v22 = *(void **)a2;
  if (*(void **)a2 != v13)
  {
    do
    {
      long long v23 = *((_OWORD *)v22 + 3);
      long long v46 = *((_OWORD *)v22 + 2);
      long long v47 = v23;
      geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(a2, (unint64_t *)&v46, (char **)&v48, (char **)__p);
      uint64_t v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v22[2];
          BOOL v11 = *v25 == (void)v22;
          __int16 v22 = v25;
        }
        while (!v11);
      }
      __int16 v22 = v25;
    }
    while (v25 != v13);
    if (v48) {
      operator delete(v48);
    }
  }
  uint64_t v26 = (void *)a3[3];
  if (!v26) {
LABEL_79:
  }
    operator new();
  unint64_t v27 = (long long *)__p[0];
  unint64_t v28 = (long long *)__p[1];
  if (v26 != a3)
  {
    uint64_t v52 = (void *)(*(uint64_t (**)(void *))(*v26 + 16))(v26);
    if (v27 != v28) {
      goto LABEL_56;
    }
LABEL_73:
    if (v52 == v51)
    {
      (*(void (**)(void *))(v51[0] + 32))(v51);
    }
    else if (v52)
    {
      (*(void (**)(void))(*v52 + 40))();
    }
    if (v27 != __p[1]) {
      __p[1] = v27;
    }
    goto LABEL_79;
  }
  uint64_t v52 = v51;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v51);
  if (v27 == v28) {
    goto LABEL_73;
  }
  while (1)
  {
LABEL_56:
    if (*((unsigned char *)v27 + 24) != 1) {
      goto LABEL_55;
    }
    if (!v52) {
      break;
    }
    if (((*(uint64_t (**)(void *, long long *))(*v52 + 48))(v52, v27) & 1) == 0)
    {
      size_t v29 = v28 - 2;
      do
      {
        uint64_t v30 = (char *)v29 - (char *)v27;
        if (v29 == v27) {
          goto LABEL_73;
        }
        unint64_t v31 = v29;
        if (*((unsigned char *)v29 + 24) != 1) {
          break;
        }
        if (!v52) {
          goto LABEL_83;
        }
        int v32 = (*(uint64_t (**)(void *, long long *))(*v52 + 48))(v52, v29);
        size_t v29 = v31 - 2;
      }
      while (!v32);
      uint64_t v33 = (v30 >> 5) + 1;
      if (v30 < 65)
      {
LABEL_71:
        uint64_t v38 = 0;
        unint64_t v34 = 0;
      }
      else
      {
        if (v33 >= 0x3FFFFFFFFFFFFFFLL) {
          unint64_t v34 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = (v30 >> 5) + 1;
        }
        unsigned __int8 v35 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
        while (1)
        {
          unint64_t v36 = (long long *)operator new(32 * v34, v35);
          if (v36) {
            break;
          }
          BOOL v37 = v34 > 1;
          v34 >>= 1;
          if (!v37) {
            goto LABEL_71;
          }
        }
        uint64_t v38 = v36;
      }
      std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(v27, v31, (uint64_t)v51, v33, v38, v34);
      unint64_t v27 = v39;
      if (v38) {
        operator delete(v38);
      }
      goto LABEL_73;
    }
LABEL_55:
    v27 += 2;
    if (v27 == v28)
    {
      unint64_t v27 = v28;
      goto LABEL_73;
    }
  }
LABEL_83:
  std::__throw_bad_function_call[abi:nn180100]();
  geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(v40, v41, v42, v43);
}

void geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(uint64_t a1, unint64_t *a2, char **a3, char **a4)
{
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v10 = *a3;
  if (*a3 != v8)
  {
    unint64_t v11 = *a2;
    unsigned int v12 = *((unsigned __int8 *)a2 + 24);
    uint64_t v10 = *a3;
    while (1)
    {
      unint64_t v13 = *(void *)v10;
      unsigned int v14 = v10[24];
      BOOL v15 = v11 >= *(void *)v10;
      if (v11 == *(void *)v10) {
        BOOL v15 = v12 >= v14;
      }
      BOOL v16 = v11 == v13 ? v14 >= v12 : *(void *)v10 >= v11;
      if (v15 && v16) {
        break;
      }
      BOOL v17 = v12 < v14;
      BOOL v41 = v11 == v13;
      BOOL v18 = v11 < v13;
      if (v41) {
        BOOL v18 = v17;
      }
      if (!v18)
      {
        v10 += 32;
        if (v10 != v8) {
          continue;
        }
      }
      goto LABEL_16;
    }
  }
  if (v10 == v8)
  {
LABEL_16:
    if (v9 != v8)
    {
      unint64_t v19 = *a2;
      unsigned int v20 = *((unsigned __int8 *)a2 + 24);
      while (1)
      {
        unint64_t v21 = *(void *)v9;
        unsigned int v22 = v9[24];
        BOOL v23 = v20 < v22;
        if (v19 != *(void *)v9) {
          BOOL v23 = v19 < *(void *)v9;
        }
        if (v23) {
          break;
        }
        BOOL v24 = v20 >= v22;
        BOOL v25 = v22 >= v20;
        BOOL v26 = v21 >= v19;
        BOOL v41 = v19 == v21;
        BOOL v27 = v19 >= v21;
        if (v41)
        {
          BOOL v28 = v25;
        }
        else
        {
          BOOL v24 = v27;
          BOOL v28 = v26;
        }
        if (v24 && v28) {
          break;
        }
        v9 += 32;
        if (v9 == v8) {
          goto LABEL_36;
        }
      }
    }
    if (v9 == v8
      || ((unsigned int v29 = v9[24],
           unsigned int v30 = *((unsigned __int8 *)a2 + 24),
           BOOL v31 = v29 >= v30,
           BOOL v32 = v30 >= v29,
           *(void *)v9 != *a2)
        ? (BOOL v33 = *(void *)v9 >= *a2)
        : (BOOL v33 = v31),
          *(void *)v9 != *a2 ? (BOOL v34 = *a2 >= *(void *)v9) : (BOOL v34 = v32),
          (uint64_t v8 = v9, !v33) || !v34))
    {
LABEL_36:
      std::vector<gdc::LogicExecutionNode>::insert((uint64_t)a3, v8, a2);
    }
    uint64_t v35 = *(void *)(a1 + 8);
    if (v35)
    {
      unint64_t v36 = *a2;
      unsigned int v37 = *((unsigned __int8 *)a2 + 24);
      uint64_t v38 = a1 + 8;
      do
      {
        unint64_t v39 = *(void *)(v35 + 32);
        BOOL v41 = v39 == v36;
        BOOL v40 = v39 < v36;
        if (v41) {
          BOOL v40 = *(unsigned __int8 *)(v35 + 56) < v37;
        }
        BOOL v41 = !v40;
        if (v40) {
          uint64_t v42 = (uint64_t *)(v35 + 8);
        }
        else {
          uint64_t v42 = (uint64_t *)v35;
        }
        if (v41) {
          uint64_t v38 = v35;
        }
        uint64_t v35 = *v42;
      }
      while (*v42);
      if (v38 != a1 + 8)
      {
        unint64_t v43 = *(void *)(v38 + 32);
        BOOL v44 = v37 >= *(unsigned __int8 *)(v38 + 56);
        BOOL v41 = v36 == v43;
        BOOL v45 = v36 >= v43;
        if (v41) {
          BOOL v45 = v44;
        }
        if (v45)
        {
          long long v46 = *(uint64_t **)(v38 + 64);
          for (uint64_t i = *(uint64_t **)(v38 + 72); v46 != i; v46 += 4)
          {
            unint64_t v50 = *v46;
            unsigned int v51 = *((unsigned __int8 *)v46 + 24);
            uint64_t v52 = *a3;
            uint64_t v53 = a3[1];
            if (*a3 != v53)
            {
              while (1)
              {
                unint64_t v54 = *(void *)v52;
                unsigned int v55 = v52[24];
                BOOL v56 = v50 >= *(void *)v52;
                if (v50 == *(void *)v52) {
                  BOOL v56 = v51 >= v55;
                }
                BOOL v57 = v50 == v54 ? v55 >= v51 : *(void *)v52 >= v50;
                if (v56 && v57) {
                  break;
                }
                BOOL v58 = v51 < v55;
                BOOL v41 = v50 == v54;
                BOOL v59 = v50 < v54;
                if (v41) {
                  BOOL v59 = v58;
                }
                if (!v59)
                {
                  v52 += 32;
                  if (v52 != v53) {
                    continue;
                  }
                }
                goto LABEL_54;
              }
            }
            if (v52 == v53)
            {
LABEL_54:
              unint64_t v73 = *v46;
              long long v74 = *(_OWORD *)(v46 + 1);
              char v75 = v51;
              char v48 = *((unsigned char *)v46 + 31);
              __int16 v49 = *(_WORD *)((char *)v46 + 29);
              int v76 = *(_DWORD *)((char *)v46 + 25);
              __int16 v77 = v49;
              char v78 = v48;
              geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(a1, (int)&v73, (int)a3);
            }
          }
        }
      }
    }
    unint64_t v61 = a4[1];
    unint64_t v60 = (unint64_t)a4[2];
    if ((unint64_t)v61 >= v60)
    {
      int8x8_t v64 = *a4;
      uint64_t v65 = (v61 - *a4) >> 5;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 59) {
        abort();
      }
      uint64_t v67 = v60 - (void)v64;
      if (v67 >> 4 > v66) {
        unint64_t v66 = v67 >> 4;
      }
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v68 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v66;
      }
      if (v68)
      {
        if (v68 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v69 = (char *)operator new(32 * v68);
      }
      else
      {
        uint64_t v69 = 0;
      }
      size_t v70 = &v69[32 * v65];
      long long v71 = *((_OWORD *)a2 + 1);
      *(_OWORD *)size_t v70 = *(_OWORD *)a2;
      *((_OWORD *)v70 + 1) = v71;
      unint64_t v63 = v70 + 32;
      if (v61 != v64)
      {
        do
        {
          long long v72 = *((_OWORD *)v61 - 2);
          *(_OWORD *)(v70 - 23) = *(_OWORD *)(v61 - 23);
          *((_OWORD *)v70 - 2) = v72;
          v70 -= 32;
          v61 -= 32;
        }
        while (v61 != v64);
        unint64_t v61 = *a4;
      }
      *a4 = v70;
      a4[1] = v63;
      a4[2] = &v69[32 * v68];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      long long v62 = *((_OWORD *)a2 + 1);
      *(_OWORD *)unint64_t v61 = *(_OWORD *)a2;
      *((_OWORD *)v61 + 1) = v62;
      unint64_t v63 = v61 + 32;
    }
    a4[1] = v63;
  }
}

uint64_t geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::isAcyclicDFS(uint64_t a1, unint64_t *a2, char **a3, void *a4)
{
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v10 = *a3;
  if (*a3 != v8)
  {
    unint64_t v11 = *a2;
    unsigned int v12 = *((unsigned __int8 *)a2 + 24);
    uint64_t v10 = *a3;
    while (1)
    {
      unint64_t v13 = *(void *)v10;
      unsigned int v14 = v10[24];
      BOOL v15 = v11 >= *(void *)v10;
      if (v11 == *(void *)v10) {
        BOOL v15 = v12 >= v14;
      }
      BOOL v16 = v11 == v13 ? v14 >= v12 : *(void *)v10 >= v11;
      if (v15 && v16) {
        break;
      }
      BOOL v17 = v12 < v14;
      BOOL v53 = v11 == v13;
      BOOL v18 = v11 < v13;
      if (v53) {
        BOOL v18 = v17;
      }
      if (!v18)
      {
        v10 += 32;
        if (v10 != v8) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  if (v10 == v8)
  {
LABEL_30:
    if (v9 != v8)
    {
      unint64_t v31 = *a2;
      unsigned int v32 = *((unsigned __int8 *)a2 + 24);
      while (1)
      {
        unint64_t v33 = *(void *)v9;
        unsigned int v34 = v9[24];
        BOOL v35 = v32 < v34;
        if (v31 != *(void *)v9) {
          BOOL v35 = v31 < *(void *)v9;
        }
        if (v35) {
          break;
        }
        BOOL v36 = v32 >= v34;
        BOOL v37 = v34 >= v32;
        BOOL v38 = v33 >= v31;
        BOOL v53 = v31 == v33;
        BOOL v39 = v31 >= v33;
        if (v53)
        {
          BOOL v40 = v37;
        }
        else
        {
          BOOL v36 = v39;
          BOOL v40 = v38;
        }
        if (v36 && v40) {
          break;
        }
        v9 += 32;
        if (v9 == v8) {
          goto LABEL_50;
        }
      }
    }
    if (v9 == v8
      || ((unsigned int v41 = v9[24],
           unsigned int v42 = *((unsigned __int8 *)a2 + 24),
           BOOL v43 = v41 >= v42,
           BOOL v44 = v42 >= v41,
           *(void *)v9 != *a2)
        ? (BOOL v45 = *(void *)v9 >= *a2)
        : (BOOL v45 = v43),
          *(void *)v9 != *a2 ? (BOOL v46 = *a2 >= *(void *)v9) : (BOOL v46 = v44),
          (uint64_t v8 = v9, !v45) || !v46))
    {
LABEL_50:
      std::vector<gdc::LogicExecutionNode>::insert((uint64_t)a3, v8, a2);
    }
    uint64_t v47 = *(void *)(a1 + 8);
    if (!v47) {
      return 1;
    }
    unint64_t v48 = *a2;
    unsigned int v49 = *((unsigned __int8 *)a2 + 24);
    uint64_t v50 = a1 + 8;
    do
    {
      unint64_t v51 = *(void *)(v47 + 32);
      BOOL v53 = v51 == v48;
      BOOL v52 = v51 < v48;
      if (v53) {
        BOOL v52 = *(unsigned __int8 *)(v47 + 56) < v49;
      }
      BOOL v53 = !v52;
      if (v52) {
        unint64_t v54 = (uint64_t *)(v47 + 8);
      }
      else {
        unint64_t v54 = (uint64_t *)v47;
      }
      if (v53) {
        uint64_t v50 = v47;
      }
      uint64_t v47 = *v54;
    }
    while (*v54);
    if (v50 == a1 + 8) {
      return 1;
    }
    unint64_t v55 = *(void *)(v50 + 32);
    BOOL v53 = v48 == v55;
    BOOL v56 = v48 >= v55;
    if (v53) {
      BOOL v56 = v49 >= *(unsigned __int8 *)(v50 + 56);
    }
    if (!v56) {
      return 1;
    }
    BOOL v57 = (unsigned __int8 *)*a4;
    BOOL v59 = a4 + 1;
    BOOL v58 = (char *)a4[1];
    if ((char *)*a4 != v58)
    {
      while (1)
      {
        unint64_t v60 = *(void *)v57;
        unsigned int v61 = v57[24];
        BOOL v62 = v49 < v61;
        if (v48 != *(void *)v57) {
          BOOL v62 = v48 < *(void *)v57;
        }
        if (v62) {
          break;
        }
        BOOL v63 = v49 >= v61;
        BOOL v64 = v61 >= v49;
        BOOL v65 = v60 >= v48;
        BOOL v53 = v48 == v60;
        BOOL v66 = v48 >= v60;
        if (v53)
        {
          BOOL v67 = v64;
        }
        else
        {
          BOOL v63 = v66;
          BOOL v67 = v65;
        }
        if (v63 && v67) {
          break;
        }
        v57 += 32;
        if (v57 == (unsigned __int8 *)v58) {
          goto LABEL_86;
        }
      }
    }
    if (v57 == (unsigned __int8 *)v58) {
      goto LABEL_86;
    }
    unsigned int v68 = v57[24];
    BOOL v69 = v68 >= v49;
    BOOL v70 = v49 >= v68;
    BOOL v71 = v48 >= *(void *)v57;
    BOOL v72 = *(void *)v57 == v48;
    BOOL v73 = *(void *)v57 >= v48;
    BOOL v74 = v72 ? v69 : v73;
    BOOL v75 = v72 ? v70 : v71;
    BOOL v58 = (char *)v57;
    if (!v74 || !v75) {
LABEL_86:
    }
      std::vector<gdc::LogicExecutionNode>::insert((uint64_t)a4, v58, a2);
    int v76 = *(uint64_t **)(v50 + 64);
    __int16 v77 = *(uint64_t **)(v50 + 72);
    if (v76 == v77)
    {
      unint64_t v19 = (unsigned __int8 *)*a4;
      uint64_t v90 = (unsigned __int8 *)a4[1];
      if ((unsigned __int8 *)*a4 == v90) {
        return 1;
      }
    }
    else
    {
      do
      {
        unint64_t v78 = *v76;
        unsigned int v79 = *((unsigned __int8 *)v76 + 24);
        unint64_t v80 = *a3;
        long long v81 = a3[1];
        if (*a3 != v81)
        {
          while (1)
          {
            unint64_t v82 = *(void *)v80;
            unsigned int v83 = v80[24];
            BOOL v84 = v78 >= *(void *)v80;
            if (v78 == *(void *)v80) {
              BOOL v84 = v79 >= v83;
            }
            BOOL v85 = v78 == v82 ? v83 >= v79 : *(void *)v80 >= v78;
            if (v84 && v85) {
              break;
            }
            BOOL v86 = v79 < v83;
            BOOL v53 = v78 == v82;
            BOOL v87 = v78 < v82;
            if (v53) {
              BOOL v87 = v86;
            }
            if (!v87)
            {
              v80 += 32;
              if (v80 != v81) {
                continue;
              }
            }
            goto LABEL_105;
          }
        }
        if (v80 == v81)
        {
LABEL_105:
          unint64_t v107 = *v76;
          long long v108 = *(_OWORD *)(v76 + 1);
          char v109 = v79;
          char v88 = *((unsigned char *)v76 + 31);
          __int16 v89 = *(_WORD *)((char *)v76 + 29);
          int v110 = *(_DWORD *)((char *)v76 + 25);
          __int16 v111 = v89;
          char v112 = v88;
          uint64_t result = geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::isAcyclicDFS(a1, &v107, a3, a4);
          if (!result) {
            return result;
          }
        }
        unint64_t v19 = (unsigned __int8 *)*a4;
        uint64_t v90 = (unsigned __int8 *)a4[1];
        uint64_t v91 = (unsigned __int8 *)*a4;
        if ((unsigned __int8 *)*a4 != v90)
        {
          uint64_t v91 = (unsigned __int8 *)*a4;
          while (1)
          {
            unint64_t v92 = *(void *)v91;
            unsigned int v93 = v91[24];
            BOOL v94 = v78 >= *(void *)v91;
            if (v78 == *(void *)v91) {
              BOOL v94 = v79 >= v93;
            }
            BOOL v95 = v78 == v92 ? v93 >= v79 : *(void *)v91 >= v78;
            if (v94 && v95) {
              break;
            }
            BOOL v96 = v79 < v93;
            BOOL v53 = v78 == v92;
            BOOL v97 = v78 < v92;
            if (v53) {
              BOOL v97 = v96;
            }
            if (!v97)
            {
              v91 += 32;
              if (v91 != v90) {
                continue;
              }
            }
            goto LABEL_90;
          }
        }
        if (v91 != v90) {
          return 0;
        }
LABEL_90:
        v76 += 4;
      }
      while (v76 != v77);
      BOOL v59 = a4 + 1;
      if (v19 == v90) {
        return 1;
      }
    }
    unint64_t v99 = *a2;
    unsigned int v100 = *((unsigned __int8 *)a2 + 24);
    uint64_t result = 1;
    while (1)
    {
      unint64_t v101 = *(void *)v19;
      unsigned int v102 = v19[24];
      BOOL v103 = v99 >= *(void *)v19;
      if (v99 == *(void *)v19) {
        BOOL v103 = v100 >= v102;
      }
      BOOL v104 = v99 == v101 ? v102 >= v100 : *(void *)v19 >= v99;
      if (v103 && v104) {
        break;
      }
      BOOL v105 = v100 < v102;
      BOOL v53 = v99 == v101;
      BOOL v106 = v99 < v101;
      if (v53) {
        BOOL v106 = v105;
      }
      if (!v106)
      {
        v19 += 32;
        if (v19 != v90) {
          continue;
        }
      }
      return result;
    }
    if (v19 == v90) {
      return 1;
    }
    int64_t v98 = v90 - (v19 + 32);
    if (v90 != v19 + 32) {
      memmove(v19, v19 + 32, v98 - 7);
    }
    unint64_t v21 = v59;
    goto LABEL_123;
  }
  unint64_t v19 = (unsigned __int8 *)*a4;
  unint64_t v21 = a4 + 1;
  unsigned int v20 = (unsigned __int8 *)a4[1];
  if ((unsigned __int8 *)*a4 != v20)
  {
    unint64_t v22 = *a2;
    unsigned int v23 = *((unsigned __int8 *)a2 + 24);
    uint64_t result = 1;
    while (1)
    {
      unint64_t v25 = *(void *)v19;
      unsigned int v26 = v19[24];
      BOOL v27 = v22 >= *(void *)v19;
      if (v22 == *(void *)v19) {
        BOOL v27 = v23 >= v26;
      }
      BOOL v28 = v22 == v25 ? v26 >= v23 : *(void *)v19 >= v22;
      if (v27 && v28) {
        break;
      }
      BOOL v29 = v23 < v26;
      BOOL v53 = v22 == v25;
      BOOL v30 = v22 < v25;
      if (v53) {
        BOOL v30 = v29;
      }
      if (!v30)
      {
        v19 += 32;
        if (v19 != v20) {
          continue;
        }
      }
      return result;
    }
  }
  if (v19 != v20)
  {
    int64_t v98 = v20 - (v19 + 32);
    if (v20 != v19 + 32) {
      memmove(v19, v19 + 32, v98 - 7);
    }
LABEL_123:
    *unint64_t v21 = &v19[v98];
  }
  return 1;
}

void std::vector<gdc::LogicExecutionNode>::insert(uint64_t a1, char *__src, _OWORD *a3)
{
  unsigned int v3 = a3;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      long long v19 = a3[1];
      *(_OWORD *)__src = *a3;
      *((_OWORD *)__src + 1) = v19;
      *(void *)(a1 + 8) = __src + 32;
    }
    else
    {
      uint64_t v8 = __src + 32;
      uint64_t v9 = v6 - 32;
      uint64_t v10 = *(_OWORD **)(a1 + 8);
      if ((unint64_t)v6 >= 0x20)
      {
        do
        {
          long long v11 = *(_OWORD *)v9;
          long long v12 = *((_OWORD *)v9 + 1);
          v9 += 32;
          _OWORD *v10 = v11;
          v10[1] = v12;
          v10 += 2;
        }
        while (v9 < v6);
      }
      *(void *)(a1 + 8) = v10;
      if (v6 != v8) {
        memmove(&v6[-32 * ((v6 - v8) >> 5)], __src, v6 - v8 - 7);
      }
      if (__src <= (char *)v3) {
        v3 += 2 * (*(void *)(a1 + 8) > (unint64_t)v3);
      }
      long long v13 = *v3;
      *(_OWORD *)(__src + 9) = *(_OWORD *)((char *)v3 + 9);
      *(_OWORD *)__src = v13;
    }
    return;
  }
  unsigned int v14 = *(char **)a1;
  unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 5) + 1;
  if (v15 >> 59) {
    abort();
  }
  uint64_t v16 = v7 - (void)v14;
  if (v16 >> 4 > v15) {
    unint64_t v15 = v16 >> 4;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 59) {
      goto LABEL_43;
    }
    BOOL v18 = (char *)operator new(32 * v17);
  }
  else
  {
    BOOL v18 = 0;
  }
  uint64_t v20 = __src - v14;
  uint64_t v21 = (__src - v14) >> 5;
  unint64_t v22 = &v18[32 * v21];
  unsigned int v23 = &v18[32 * v17];
  if (v21 == v17)
  {
    if (v20 >= 1)
    {
      if (v21 >= -1) {
        unint64_t v24 = v21 + 1;
      }
      else {
        unint64_t v24 = v21 + 2;
      }
      v22 -= 32 * (v24 >> 1);
      goto LABEL_32;
    }
    unint64_t v25 = v20 >> 4;
    if (v14 == __src) {
      unint64_t v25 = 1;
    }
    if (!(v25 >> 59))
    {
      uint64_t v26 = 32 * v25;
      unint64_t v22 = (char *)operator new(32 * v25);
      unsigned int v23 = &v22[v26];
      if (v18)
      {
        operator delete(v18);
        unsigned int v14 = *(char **)a1;
      }
      goto LABEL_32;
    }
LABEL_43:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_32:
  long long v27 = v3[1];
  *(_OWORD *)unint64_t v22 = *v3;
  *((_OWORD *)v22 + 1) = v27;
  BOOL v28 = v22;
  if (v14 != __src)
  {
    BOOL v29 = __src;
    BOOL v30 = v22;
    do
    {
      long long v31 = *((_OWORD *)v29 - 2);
      BOOL v28 = (char *)(v30 - 2);
      *(_OWORD *)((char *)v30 - 23) = *(_OWORD *)(v29 - 23);
      *(v30 - 2) = v31;
      v29 -= 32;
      v30 -= 2;
    }
    while (v29 != v14);
  }
  unsigned int v32 = v22 + 32;
  unint64_t v33 = *(char **)(a1 + 8);
  int64_t v34 = v33 - __src;
  if (v33 != __src) {
    memmove(v32, __src, v34 - 7);
  }
  BOOL v35 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = &v32[v34];
  *(void *)(a1 + 16) = v23;
  if (v35)
  {
    operator delete(v35);
  }
}

BOOL std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::operator()(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = 1;
  if (*a2 > (uint64_t)0xEC9B77B4222D22FELL)
  {
    if (v2 == 0xEC9B77B4222D22FFLL || v2 == 0x7F1D62124B97A26)
    {
      __int16 v4 = a1 + 8;
      return *v4 != 0;
    }
  }
  else
  {
    if (v2 == 0xA5031243356EEB30)
    {
      __int16 v4 = a1 + 10;
      return *v4 != 0;
    }
    if (v2 == 0xEA624BC935BAF297)
    {
      __int16 v4 = a1 + 9;
      return *v4 != 0;
    }
  }
  return v3;
}

void md::IdentifiedResourceLogic::reset(gdc::LayerDataCollector **this)
{
  gdc::LayerDataCollector::clear(this[15]);
  uint64_t v2 = this[16];
  gdc::LayerDataCollector::clear(v2);
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v396 = *MEMORY[0x1E4F143B8];
  v392[0] = &unk_1EF576560;
  v392[1] = a2;
  v390[0] = &unk_1EF5765A8;
  v390[1] = a2;
  unint64_t v391 = v390;
  unint64_t v395 = v394;
  uint64_t v393 = v392;
  v394[0] = &unk_1EF5765A8;
  v394[1] = a2;
  std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::operator()((uint64_t)v392);
  if (v391 == v390)
  {
    (*(void (**)(void *))(v390[0] + 32))(v390);
  }
  else if (v391)
  {
    (*(void (**)(void *))(*v391 + 40))(v391);
  }
  if (v393 == v392)
  {
    (*(void (**)(void *))(v392[0] + 32))(v392);
  }
  else if (v393)
  {
    (*(void (**)(void *))(*v393 + 40))(v393);
  }
  gdc::LayerDataCollector::clear(*(gdc::LayerDataCollector **)(a1 + 128));
  uint64_t v8 = **(gdc::LayerDataManager ***)(a3 + 8);
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)a3;
    uint64_t v356 = a3;
    uint64_t v10 = *(unsigned char **)(a3 + 24);
    float64x2_t v353 = v8;
    uint64_t v11 = *((void *)v8 + 7);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *(void *)(v11 + 40);
      if (v12 != v13)
      {
        while (*(_WORD *)v12 != 27)
        {
          v12 += 16;
          if (v12 == v13) {
            goto LABEL_17;
          }
        }
      }
      if (v12 == v13) {
LABEL_17:
      }
        uint64_t v14 = 0;
      else {
        uint64_t v14 = *(void *)(v12 + 8);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v14 + 72))(&v384);
      if ((_BYTE)v384) {
        int v15 = HIDWORD(v384);
      }
      else {
        int v15 = 512;
      }
      *(_DWORD *)(a4 + 264) = v15;
    }
    uint64_t v358 = v9;
    uint64_t v361 = (void *)a4;
    int64_t v354 = a2;
    if (*v10) {
      char v16 = 2;
    }
    else {
      char v16 = 1;
    }
    *(unsigned char *)(a1 + 216) = v16;
    if (!*(unsigned char *)(a1 + 192))
    {
      uint64_t v22 = *(void *)(a1 + 136);
      unint64_t v24 = *(int8x8_t ***)(v22 + 384);
      unsigned int v23 = *(int8x8_t ***)(v22 + 392);
      uint64_t v362 = v23;
      while (v24 != v23)
      {
        unint64_t v25 = (void *)a1;
        uint64_t v26 = *v24;
        long long v27 = (void *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(*v24);
        uint64_t v28 = gdc::Registry::storage<md::components::NonTiled>(v26);
        BOOL v29 = (void *)v28;
        uint64_t v30 = v28 + 32;
        uint64_t v31 = v27[7];
        uint64_t v32 = v27[8];
        if (*(void *)(v28 + 64) - *(void *)(v28 + 56) >= (unint64_t)(v32 - v31)) {
          unint64_t v33 = v27 + 4;
        }
        else {
          unint64_t v33 = (void *)(v28 + 32);
        }
        BOOL v34 = v32 != v31 && v27 + 4 == v33;
        if (v34)
        {
          unint64_t v51 = (unint64_t *)(v27[10] + 16);
          do
          {
            unint64_t v52 = *(unsigned int *)(v31 + 4);
            uint64_t v53 = v29[4];
            if (v52 >> 7 < (v29[5] - v53) >> 3)
            {
              uint64_t v54 = *(void *)(v53 + 8 * (v52 >> 7));
              if (v54)
              {
                unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * (v52 & 0x7F));
                uint64_t v57 = v29[7];
                uint64_t v56 = v29[8];
                if (v55 < (v56 - v57) >> 3)
                {
                  uint64_t v58 = v57 + 8 * v55;
                  if (v58 != v56 && *(_DWORD *)(v58 + 4) == v52) {
                    md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v25, *v51);
                  }
                }
              }
            }
            v31 += 8;
            v51 += 12;
          }
          while (v31 != v32);
        }
        if ((void *)v30 == v33)
        {
          unsigned int v61 = (unint64_t *)v29[7];
          unint64_t v60 = (uint64_t *)v29[8];
          while (v61 != (unint64_t *)v60)
          {
            unint64_t v63 = *((unsigned int *)v61 + 1);
            uint64_t v64 = v27[4];
            unint64_t v65 = (v27[5] - v64) >> 3;
            if (v63 >> 7 < v65)
            {
              uint64_t v66 = *(void *)(v64 + 8 * (v63 >> 7));
              if (v66)
              {
                unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * (v63 & 0x7F));
                uint64_t v69 = v27[7];
                uint64_t v68 = v27[8];
                unint64_t v70 = (v68 - v69) >> 3;
                if (v70 > v67)
                {
                  uint64_t v71 = v69 + 8 * v67;
                  if (v71 != v68 && *(_DWORD *)(v71 + 4) == v63)
                  {
                    unint64_t v73 = *v61;
                    unint64_t v74 = *v61 >> 39;
                    if (v74 < v65
                      && (uint64_t v75 = *(void *)(v64 + 8 * v74)) != 0
                      && (unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * (HIDWORD(v73) & 0x7F)), v70 > v76)
                      && ((unint64_t v77 = HIDWORD(v73), v78 = v69 + 8 * v76, v78 != v68)
                        ? (BOOL v79 = *(_DWORD *)(v78 + 4) == v77)
                        : (BOOL v79 = 0),
                          v79))
                    {
                      uint64_t v62 = v27[10] + 96 * v76;
                    }
                    else
                    {
                      uint64_t v62 = v27[11];
                    }
                    md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v25, *(void *)(v62 + 16));
                  }
                }
              }
            }
            ++v61;
          }
        }
        BOOL v35 = (void *)gdc::Registry::storage<md::components::Asset>(v26);
        uint64_t v36 = gdc::Registry::storage<md::components::NonTiled>(v26);
        BOOL v37 = (void *)v36;
        uint64_t v38 = v36 + 32;
        uint64_t v40 = v35[7];
        uint64_t v39 = v35[8];
        if (*(void *)(v36 + 64) - *(void *)(v36 + 56) >= (unint64_t)(v39 - v40)) {
          unsigned int v41 = v35 + 4;
        }
        else {
          unsigned int v41 = (void *)(v36 + 32);
        }
        if (v39 != v40 && v35 + 4 == v41)
        {
          unsigned int v42 = (unint64_t *)v35[10];
          do
          {
            unint64_t v43 = *(unsigned int *)(v40 + 4);
            uint64_t v44 = v37[4];
            if (v43 >> 7 < (v37[5] - v44) >> 3)
            {
              uint64_t v45 = *(void *)(v44 + 8 * (v43 >> 7));
              if (v45)
              {
                unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (v43 & 0x7F));
                uint64_t v48 = v37[7];
                uint64_t v47 = v37[8];
                if (v46 < (v47 - v48) >> 3)
                {
                  uint64_t v49 = v48 + 8 * v46;
                  if (v49 != v47 && *(_DWORD *)(v49 + 4) == v43) {
                    md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v25, *v42);
                  }
                }
              }
            }
            v42 += 9;
            v40 += 8;
          }
          while (v40 != v39);
        }
        a4 = (uint64_t)v361;
        a1 = (uint64_t)v25;
        if ((void *)v38 == v41)
        {
          long long v81 = (unint64_t *)v37[7];
          unint64_t v80 = (uint64_t *)v37[8];
          while (v81 != (unint64_t *)v80)
          {
            unint64_t v83 = *((unsigned int *)v81 + 1);
            uint64_t v84 = v35[4];
            unint64_t v85 = (v35[5] - v84) >> 3;
            if (v83 >> 7 < v85)
            {
              uint64_t v86 = *(void *)(v84 + 8 * (v83 >> 7));
              if (v86)
              {
                unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * (v83 & 0x7F));
                uint64_t v89 = v35[7];
                uint64_t v88 = v35[8];
                unint64_t v90 = (v88 - v89) >> 3;
                if (v90 > v87)
                {
                  uint64_t v91 = v89 + 8 * v87;
                  if (v91 != v88 && *(_DWORD *)(v91 + 4) == v83)
                  {
                    unint64_t v93 = *v81;
                    unint64_t v94 = *v81 >> 39;
                    if (v94 < v85
                      && (uint64_t v95 = *(void *)(v84 + 8 * v94)) != 0
                      && (unint64_t v96 = *(unsigned __int16 *)(v95 + 2 * (HIDWORD(v93) & 0x7F)), v90 > v96)
                      && ((v97 = HIDWORD(v93), uint64_t v98 = v89 + 8 * v96, v98 != v88)
                        ? (BOOL v99 = *(_DWORD *)(v98 + 4) == v97)
                        : (BOOL v99 = 0),
                          v99))
                    {
                      unint64_t v82 = (unint64_t *)(v35[10] + 72 * v96);
                    }
                    else
                    {
                      unint64_t v82 = (unint64_t *)v35[11];
                    }
                    md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v25, *v82);
                  }
                }
              }
            }
            ++v81;
          }
        }
        ++v24;
        unsigned int v23 = v362;
      }
    }
    uint64_t v17 = *v358;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    BOOL v18 = *(_WORD **)(v17 + 48);
    long long v19 = *(_WORD **)(v17 + 56);
    if (v18 == v19)
    {
      uint64_t v20 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      uint64_t v20 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      uint64_t v21 = *(_WORD **)(v17 + 48);
      while (*v21 != 33)
      {
        v21 += 16;
        if (v21 == v19) {
          goto LABEL_122;
        }
      }
      if (v21 == v19)
      {
        uint64_t v20 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v18 != 33)
        {
          v18 += 16;
          if (v18 == v19)
          {
            BOOL v18 = *(_WORD **)(v17 + 56);
            break;
          }
        }
        uint64_t v20 = (uint64_t *)(v18 + 4);
      }
    }
LABEL_122:
    uint64_t v102 = *v20;
    unint64_t v101 = v20 + 1;
    unsigned int v100 = (void *)v102;
    if ((uint64_t *)v102 != v101)
    {
      do
      {
        md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_2::operator()(a1, (void *)v100[4], (std::__shared_weak_count *)v100[5]);
        long long v108 = (uint64_t *)v100[1];
        if (v108)
        {
          do
          {
            char v109 = v108;
            long long v108 = (uint64_t *)*v108;
          }
          while (v108);
        }
        else
        {
          do
          {
            char v109 = (uint64_t *)v100[2];
            BOOL v34 = *v109 == (void)v100;
            unsigned int v100 = v109;
          }
          while (!v34);
        }
        unsigned int v100 = v109;
      }
      while (v109 != v101);
    }
    uint64_t v103 = *v358;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    BOOL v104 = *(_WORD **)(v103 + 48);
    BOOL v105 = *(_WORD **)(v103 + 56);
    BOOL v106 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    if (v104 != v105)
    {
      unint64_t v107 = v104;
      while (*v107 != 54)
      {
        v107 += 16;
        if (v107 == v105) {
          goto LABEL_142;
        }
      }
      if (v107 == v105)
      {
        BOOL v106 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v104 != 54)
        {
          v104 += 16;
          if (v104 == v105)
          {
            BOOL v104 = v105;
            break;
          }
        }
        BOOL v106 = (uint64_t *)(v104 + 4);
      }
    }
LABEL_142:
    uint64_t v112 = *v106;
    int v110 = v106 + 1;
    __int16 v111 = (void *)v112;
    if ((uint64_t *)v112 != v110)
    {
      do
      {
        md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_2::operator()(a1, (void *)v111[4], (std::__shared_weak_count *)v111[5]);
        unint64_t v115 = (uint64_t *)v111[1];
        if (v115)
        {
          do
          {
            unint64_t v116 = v115;
            unint64_t v115 = (uint64_t *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            unint64_t v116 = (uint64_t *)v111[2];
            BOOL v34 = *v116 == (void)v111;
            __int16 v111 = v116;
          }
          while (!v34);
        }
        __int16 v111 = v116;
      }
      while (v116 != v110);
    }
    uint64_t v113 = *(void *)(v356 + 32);
    if (v113)
    {
      for (uint64_t i = *(void **)(v113 + 16); i; uint64_t i = (void *)*i)
      {
        uint64_t v117 = (void *)i[2];
        unint64_t v378 = v382;
        uint64_t v379 = v382;
        uint64_t v380 = v382;
        uint64_t v381 = 32;
        unint64_t v383 = 0;
        long long v384 = v117;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v378, v382, (char *)&v384, (char *)&v385);
        long long v384 = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v378, v379, (char *)&v384, (char *)&v385);
        int8x8_t v118 = (unsigned __int8 *)v378;
        unint64_t v119 = v379 - (unsigned char *)v378;
        if (v379 == v378)
        {
          unint64_t v120 = 0;
        }
        else
        {
          unint64_t v120 = 0;
          if (v119 <= 1) {
            unint64_t v119 = 1;
          }
          do
          {
            unsigned int v121 = *v118++;
            v120 ^= (v120 << 6) - 0x61C8864680B583EBLL + (v120 >> 2) + v121;
            --v119;
          }
          while (v119);
        }
        unint64_t v383 = v120;
        gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v384, 0, 0x37u, (uint64_t)&v378, -1073741827);
        if (v378 != v380) {
          free(v378);
        }
        uint64_t v122 = *(gdc::LayerDataCollector **)(a1 + 120);
        *(_WORD *)&v389._type = 255;
        *(void *)&v389._yIdx = 0;
        gdc::LayerDataCollector::addDataKey(v122, (const gdc::LayerDataRequestKey *)&v384, &v389);
        if (v388) {
          char v388 = 0;
        }
        if (v386 != v387) {
          free(v386);
        }
      }
      for (std::string::size_type j = *(void **)(v113 + 56); j; std::string::size_type j = (void *)*j)
      {
        unint64_t v124 = (void *)j[2];
        uint64_t v372 = v376;
        uint64_t v373 = v376;
        unint64_t v374 = v376;
        uint64_t v375 = 32;
        unint64_t v377 = 0;
        long long v384 = v124;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v372, v376, (char *)&v384, (char *)&v385);
        long long v384 = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v372, v373, (char *)&v384, (char *)&v385);
        uint64_t v125 = (unsigned __int8 *)v372;
        unint64_t v126 = v373 - (unsigned char *)v372;
        if (v373 == v372)
        {
          unint64_t v127 = 0;
        }
        else
        {
          unint64_t v127 = 0;
          if (v126 <= 1) {
            unint64_t v126 = 1;
          }
          do
          {
            unsigned int v128 = *v125++;
            v127 ^= (v127 << 6) - 0x61C8864680B583EBLL + (v127 >> 2) + v128;
            --v126;
          }
          while (v126);
        }
        unint64_t v377 = v127;
        gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v384, 0, 0x38u, (uint64_t)&v372, -1073741827);
        if (v372 != v374) {
          free(v372);
        }
        long long v129 = *(gdc::LayerDataCollector **)(a1 + 128);
        *(_WORD *)&v389._type = 255;
        *(void *)&v389._yIdx = 0;
        gdc::LayerDataCollector::addDataKey(v129, (const gdc::LayerDataRequestKey *)&v384, &v389);
        if (v388) {
          char v388 = 0;
        }
        if (v386 != v387) {
          free(v386);
        }
      }
    }
    gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(a1 + 120));
    uint64_t v351 = (uint64_t)(*(double *)(md::LayoutContext::frameState(v354) + 88) * 1000.0);
    gdc::LayerDataManager::createDataRequests(v353, *(gdc::LayerDataCollector **)(a1 + 120), v351);
    gdc::LayerDataManager::getData(v353, *(gdc::LayerDataCollector **)(a1 + 120));
    if (*(void *)(a4 + 248))
    {
      uint64_t v130 = *(void **)(a4 + 240);
      while (v130)
      {
        uint64_t v131 = v130;
        uint64_t v130 = (void *)*v130;
        uint64_t v132 = (std::__shared_weak_count *)v131[4];
        if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
        operator delete(v131);
      }
      *(void *)(a4 + 240) = 0;
      uint64_t v133 = *(void *)(a4 + 232);
      if (v133)
      {
        for (uint64_t k = 0; k != v133; ++k)
          *(void *)(*(void *)(a4 + 224) + 8 * k) = 0;
      }
      *(void *)(a4 + 248) = 0;
    }
    else
    {
      uint64_t v133 = *(void *)(a4 + 232);
    }
    uint64_t v135 = *(void *)a4;
    unint64_t v136 = *(void *)(a4 + 8);
    *(void *)a4 = *(void *)(a4 + 224);
    *(void *)(a4 + 8) = v133;
    *(void *)(a4 + 224) = v135;
    *(void *)(a4 + 232) = v136;
    uint64_t v137 = *(void *)(a4 + 16);
    uint64_t v138 = (void *)(a4 + 240);
    uint64_t v350 = (void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a4 + 240);
    *(void *)(a4 + 240) = v137;
    uint64_t v139 = *(void *)(a4 + 24);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 248) = v139;
    int v140 = *(_DWORD *)(a4 + 32);
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a4 + 256);
    *(_DWORD *)(a4 + 256) = v140;
    if (v139)
    {
      unint64_t v141 = *(void *)(v137 + 8);
      if ((v136 & (v136 - 1)) != 0)
      {
        if (v141 >= v136) {
          v141 %= v136;
        }
      }
      else
      {
        v141 &= v136 - 1;
      }
      *(void *)(v135 + 8 * v141) = v138;
    }
    if (*(void *)(a4 + 104))
    {
      uint64_t v142 = *(void **)(a4 + 96);
      if (v142)
      {
        do
        {
          size_t v143 = (void *)*v142;
          operator delete(v142);
          uint64_t v142 = v143;
        }
        while (v143);
      }
      *(void *)(a4 + 96) = 0;
      uint64_t v144 = *(void *)(a4 + 88);
      if (v144)
      {
        for (uint64_t m = 0; m != v144; ++m)
          *(void *)(*(void *)(a4 + 80) + 8 * m) = 0;
      }
      *(void *)(a4 + 104) = 0;
    }
    *(void *)(a4 + 168) = *(void *)(a4 + 160);
    uint64_t v355 = (md::LayoutContext *)(a4 + 80);
    if (*(void *)(a4 + 208))
    {
      int v146 = *(void **)(a4 + 200);
      while (v146)
      {
        uint64_t v147 = v146;
        int v146 = (void *)*v146;
        uint64_t v148 = (std::__shared_weak_count *)v147[4];
        if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
        operator delete(v147);
      }
      *(void *)(a4 + 200) = 0;
      uint64_t v149 = *(void *)(a4 + 192);
      if (v149)
      {
        for (uint64_t n = 0; n != v149; ++n)
          *(void *)(*(void *)(a4 + 184) + 8 * n) = 0;
      }
      *(void *)(a4 + 208) = 0;
    }
    else
    {
      uint64_t v149 = *(void *)(a4 + 192);
    }
    uint64_t v152 = (void *)(a4 + 200);
    uint64_t v151 = *(void *)(a4 + 200);
    uint64_t v153 = *(void *)(a4 + 40);
    unint64_t v154 = *(void *)(a4 + 48);
    *(void *)(a4 + 40) = *(void *)(a4 + 184);
    *(void *)(a4 + 48) = v149;
    *(void *)(a4 + 184) = v153;
    *(void *)(a4 + 192) = v154;
    uint64_t v155 = *(void *)(a4 + 56);
    uint64_t v156 = *(void *)(a4 + 64);
    *(void *)(a4 + 56) = v151;
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 200) = v155;
    *(void *)(a4 + 208) = v156;
    int v157 = *(_DWORD *)(a4 + 72);
    *(_DWORD *)(a4 + 72) = *(_DWORD *)(a4 + 216);
    *(_DWORD *)(a4 + 216) = v157;
    if (v156)
    {
      unint64_t v158 = *(void *)(v155 + 8);
      if ((v154 & (v154 - 1)) != 0)
      {
        if (v158 >= v154) {
          v158 %= v154;
        }
      }
      else
      {
        v158 &= v154 - 1;
      }
      *(void *)(v153 + 8 * v158) = v152;
    }
    double v349 = (void *)(a4 + 120);
    if (*(void *)(a4 + 144))
    {
      uint64_t v159 = *(void **)(a4 + 136);
      if (v159)
      {
        do
        {
          unint64_t v160 = (void *)*v159;
          operator delete(v159);
          uint64_t v159 = v160;
        }
        while (v160);
      }
      *(void *)(a4 + 136) = 0;
      uint64_t v161 = *(void *)(a4 + 128);
      if (v161)
      {
        for (iuint64_t i = 0; ii != v161; ++ii)
          *(void *)(*v349 + 8 * ii) = 0;
      }
      *(void *)(a4 + 144) = 0;
    }
    uint64_t v163 = *(void *)(a1 + 120);
    uint64_t v164 = *(void *)(v163 + 24);
    uint64_t v165 = *(void *)(v163 + 32);
    if (v164 != v165)
    {
      while (*(_WORD *)v164 != 55)
      {
        v164 += 32;
        if (v164 == v165) {
          goto LABEL_238;
        }
      }
    }
    if (v164 == v165)
    {
LABEL_238:
      uint64_t v167 = 0;
      uint64_t v166 = 0;
      goto LABEL_237;
    }
    uint64_t v167 = *(void *)(v164 + 8);
    uint64_t v166 = *(void *)(v164 + 16);
    if (v167 == v166)
    {
LABEL_237:
      unint64_t v168 = 0;
      goto LABEL_252;
    }
    unint64_t v169 = v166 - v167 - 144;
    if (v169 > 0x8F)
    {
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      unint64_t v173 = v169 / 0x90 + 1;
      uint64_t v174 = (_DWORD *)(v167 + 272);
      uint64_t v175 = v173 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        if (*(v174 - 36) == 3) {
          ++v171;
        }
        if (*v174 == 3) {
          ++v172;
        }
        v174 += 72;
        v175 -= 2;
      }
      while (v175);
      unint64_t v168 = v172 + v171;
      if (v173 == (v173 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_252:
        unint64_t prime = vcvtps_u32_f32((float)v168 / *(float *)(a4 + 72));
        if (prime == 1)
        {
          unint64_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          unint64_t prime = std::__next_prime(prime);
        }
        uint64_t v359 = a4 + 40;
        int8x8_t v177 = *(int8x8_t *)(a4 + 48);
        if (prime > *(void *)&v177) {
          goto LABEL_257;
        }
        if (prime < *(void *)&v177)
        {
          unint64_t v178 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 64) / *(float *)(a4 + 72));
          if (*(void *)&v177 < 3uLL
            || (uint8x8_t v179 = (uint8x8_t)vcnt_s8(v177), v179.i16[0] = vaddlv_u8(v179), v179.u32[0] > 1uLL))
          {
            unint64_t v178 = std::__next_prime(v178);
          }
          else
          {
            uint64_t v180 = 1 << -(char)__clz(v178 - 1);
            if (v178 >= 2) {
              unint64_t v178 = v180;
            }
          }
          if (prime <= v178) {
            unint64_t prime = v178;
          }
          if (prime < *(void *)&v177) {
LABEL_257:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v359, prime);
        }
        if (v167 != v166)
        {
          int v363 = 0;
          int v357 = 0;
          while (1)
          {
            int v182 = *(_DWORD *)(v167 + 128);
            if (v182 == 2)
            {
              if ((v357 & 1) == 0)
              {
                int v357 = 1;
                goto LABEL_273;
              }
LABEL_270:
              int v181 = v363;
              if ((v363 & 1) == 0) {
                int v181 = 1;
              }
              int v363 = v181;
              goto LABEL_273;
            }
            if (v182 != 3) {
              goto LABEL_270;
            }
            uint64_t v183 = *(void **)(v167 + 112);
            uint64_t v184 = *(atomic_ullong **)(v167 + 120);
            uint64_t v370 = v183;
            uint64_t v371 = (std::__shared_weak_count *)v184;
            if (v184)
            {
              atomic_fetch_add_explicit(v184 + 1, 1uLL, memory_order_relaxed);
              unint64_t v185 = v183[21];
              atomic_fetch_add_explicit(v184 + 1, 1uLL, memory_order_relaxed);
            }
            else
            {
              unint64_t v185 = v183[21];
            }
            long long v384 = (void *)v185;
            unint64_t v385 = v183;
            uint64_t v386 = v184;
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::shared_ptr<md::AssetData>>>(v359, v185, (uint64_t)&v384);
            float v186 = (std::__shared_weak_count *)v386;
            if (v386 && !atomic_fetch_add((atomic_ullong *volatile)v386 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
            }
            float v187 = v370;
            int8x8_t v188 = (int8x8_t)v361[24];
            if (!*(void *)&v188) {
              goto LABEL_304;
            }
            unint64_t v189 = v370[21];
            uint8x8_t v190 = (uint8x8_t)vcnt_s8(v188);
            v190.i16[0] = vaddlv_u8(v190);
            if (v190.u32[0] > 1uLL)
            {
              unint64_t v191 = v370[21];
              int8x8_t v192 = v361;
              if (v189 >= *(void *)&v188) {
                unint64_t v191 = v189 % *(void *)&v188;
              }
            }
            else
            {
              unint64_t v191 = (*(void *)&v188 - 1) & v189;
              int8x8_t v192 = v361;
            }
            uint64_t v193 = v192[23];
            uint8x8_t v194 = *(void ***)(v193 + 8 * v191);
            if (!v194 || (uint64_t v195 = *v194) == 0)
            {
LABEL_304:
              if (!v370[42]) {
                goto LABEL_339;
              }
              goto LABEL_305;
            }
            uint64_t v196 = *(void *)&v188 - 1;
            if (v190.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v197 = v195[1];
                if (v197 == v189)
                {
                  if (v195[2] == v189) {
                    goto LABEL_309;
                  }
                }
                else if ((v197 & v196) != v191)
                {
                  goto LABEL_304;
                }
                uint64_t v195 = (void *)*v195;
                if (!v195) {
                  goto LABEL_304;
                }
              }
            }
            while (1)
            {
              unint64_t v198 = v195[1];
              if (v198 == v189) {
                break;
              }
              if (v198 >= *(void *)&v188) {
                v198 %= *(void *)&v188;
              }
              if (v198 != v191) {
                goto LABEL_304;
              }
LABEL_299:
              uint64_t v195 = (void *)*v195;
              if (!v195) {
                goto LABEL_304;
              }
            }
            if (v195[2] != v189) {
              goto LABEL_299;
            }
LABEL_309:
            if (v190.u32[0] > 1uLL)
            {
              if (v189 >= *(void *)&v188) {
                v189 %= *(void *)&v188;
              }
            }
            else
            {
              v189 &= v196;
            }
            unint64_t v200 = *(void **)(v193 + 8 * v189);
            do
            {
              uint64_t v201 = v200;
              unint64_t v200 = (void *)*v200;
            }
            while (v200 != v195);
            if (v201 == v152) {
              goto LABEL_326;
            }
            unint64_t v202 = v201[1];
            if (v190.u32[0] > 1uLL)
            {
              if (v202 >= *(void *)&v188) {
                v202 %= *(void *)&v188;
              }
            }
            else
            {
              v202 &= v196;
            }
            if (v202 != v189)
            {
LABEL_326:
              if (!*v195) {
                goto LABEL_327;
              }
              unint64_t v203 = *(void *)(*v195 + 8);
              if (v190.u32[0] > 1uLL)
              {
                if (v203 >= *(void *)&v188) {
                  v203 %= *(void *)&v188;
                }
              }
              else
              {
                v203 &= v196;
              }
              if (v203 != v189) {
LABEL_327:
              }
                *(void *)(v193 + 8 * v189) = 0;
            }
            uint64_t v204 = *v195;
            if (*v195)
            {
              unint64_t v205 = *(void *)(v204 + 8);
              if (v190.u32[0] > 1uLL)
              {
                if (v205 >= *(void *)&v188) {
                  v205 %= *(void *)&v188;
                }
              }
              else
              {
                v205 &= v196;
              }
              if (v205 != v189)
              {
                *(void *)(v361[23] + 8 * v205) = v201;
                uint64_t v204 = *v195;
              }
            }
            *uint64_t v201 = v204;
            *uint64_t v195 = 0;
            --v361[26];
            long long v206 = (atomic_ullong *)v195[4];
            if (v206 && !atomic_fetch_add(v206 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              uint64_t v348 = (std::__shared_weak_count *)v206;
              (*(void (**)(atomic_ullong *))(*v206 + 16))(v206);
              std::__shared_weak_count::__release_weak(v348);
            }
            operator delete(v195);
            if (!v187[42])
            {
LABEL_339:
              unint64_t v207 = (void *)v187[32];
              uint64_t v208 = v187 + 33;
              if (v207 != v208)
              {
                do
                {
                  unint64_t v209 = (void *)v207[4];
                  uint64_t v364 = v368;
                  uint64_t v365 = v368;
                  uint64_t v366 = v368;
                  uint64_t v367 = 32;
                  unint64_t v369 = 0;
                  long long v384 = v209;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v364, v368, (char *)&v384, (char *)&v385);
                  long long v384 = 0;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v364, v365, (char *)&v384, (char *)&v385);
                  uint64_t v210 = (unsigned __int8 *)v364;
                  unint64_t v211 = v365 - (unsigned char *)v364;
                  if (v365 == v364)
                  {
                    unint64_t v212 = 0;
                  }
                  else
                  {
                    unint64_t v212 = 0;
                    if (v211 <= 1) {
                      unint64_t v211 = 1;
                    }
                    do
                    {
                      unsigned int v213 = *v210++;
                      v212 ^= (v212 << 6) - 0x61C8864680B583EBLL + (v212 >> 2) + v213;
                      --v211;
                    }
                    while (v211);
                  }
                  unint64_t v369 = v212;
                  gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v384, 0, 0x38u, (uint64_t)&v364, -1073741827);
                  if (v364 != v366) {
                    free(v364);
                  }
                  unint64_t v214 = *(gdc::LayerDataCollector **)(a1 + 128);
                  *(_WORD *)&v389._type = 255;
                  *(void *)&v389._yIdx = 0;
                  gdc::LayerDataCollector::addDataKey(v214, (const gdc::LayerDataRequestKey *)&v384, &v389);
                  if (v388) {
                    char v388 = 0;
                  }
                  if (v386 != v387) {
                    free(v386);
                  }
                  unint64_t v215 = (void *)v207[1];
                  if (v215)
                  {
                    do
                    {
                      uint64_t v216 = v215;
                      unint64_t v215 = (void *)*v215;
                    }
                    while (v215);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v216 = (void *)v207[2];
                      BOOL v34 = *v216 == (void)v207;
                      unint64_t v207 = v216;
                    }
                    while (!v34);
                  }
                  unint64_t v207 = v216;
                }
                while (v216 != v208);
              }
            }
LABEL_305:
            uint64_t v199 = v371;
            if (v371 && !atomic_fetch_add(&v371->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
            a4 = (uint64_t)v361;
LABEL_273:
            v167 += 144;
            if (v167 == v166) {
              goto LABEL_361;
            }
          }
        }
        int v357 = 0;
        int v363 = 0;
LABEL_361:
        gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(a1 + 128));
        gdc::LayerDataManager::createDataRequests(v353, *(gdc::LayerDataCollector **)(a1 + 128), v351);
        gdc::LayerDataManager::getData(v353, *(gdc::LayerDataCollector **)(a1 + 128));
        double v217 = +[VKDebugSettings sharedSettings];
        unsigned int v352 = [v217 daVinciShowMissingMaterials];
        uint64_t v218 = (uint64_t)v355;

        uint64_t v219 = *(void *)(a1 + 128);
        uint64_t v220 = *(void *)(v219 + 24);
        uint64_t v221 = *(void *)(v219 + 32);
        if (v220 != v221)
        {
          while (*(_WORD *)v220 != 56)
          {
            v220 += 32;
            if (v220 == v221) {
              goto LABEL_386;
            }
          }
        }
        if (v220 == v221)
        {
LABEL_386:
          uint64_t v360 = 0;
          uint64_t v222 = 0;
          unint64_t v224 = 0;
          unint64_t v223 = 0;
          char v233 = 1;
        }
        else
        {
          uint64_t v222 = *(void *)(v220 + 8);
          uint64_t v360 = *(void *)(v220 + 16);
          if (v222 == v360)
          {
            unint64_t v224 = 0;
            unint64_t v223 = 0;
            char v233 = 1;
            uint64_t v360 = *(void *)(v220 + 8);
          }
          else
          {
            unint64_t v223 = 0;
            unint64_t v224 = 0;
            uint64_t v225 = *(void *)(v220 + 8);
            do
            {
              int v226 = *(_DWORD *)(v225 + 128);
              if (v226 == 2)
              {
                v224 += v352;
              }
              else if (v226 == 3)
              {
                uint64_t v227 = *(void *)(v225 + 112);
                uint64_t v228 = *(std::__shared_weak_count **)(v225 + 120);
                if (v228)
                {
                  atomic_fetch_add_explicit(&v228->__shared_owners_, 1uLL, memory_order_relaxed);
                  BOOL v229 = *(void *)(v227 + 176) == 0;
                  if (*(void *)(v227 + 176)) {
                    uint64_t v230 = 0;
                  }
                  else {
                    uint64_t v230 = v352;
                  }
                  v224 += v230;
                  if (!v229) {
                    ++v223;
                  }
                  if (!atomic_fetch_add(&v228->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                    std::__shared_weak_count::__release_weak(v228);
                  }
                }
                else
                {
                  BOOL v231 = *(void *)(v227 + 176) == 0;
                  if (*(void *)(v227 + 176)) {
                    uint64_t v232 = 0;
                  }
                  else {
                    uint64_t v232 = v352;
                  }
                  v224 += v232;
                  if (!v231) {
                    ++v223;
                  }
                }
              }
              v225 += 144;
            }
            while (v225 != v360);
            char v233 = 0;
            uint64_t v218 = (uint64_t)v355;
          }
        }
        unint64_t v234 = vcvtps_u32_f32((float)v223 / *(float *)(a4 + 32));
        if (v234 == 1)
        {
          unint64_t v234 = 2;
        }
        else if ((v234 & (v234 - 1)) != 0)
        {
          unint64_t v234 = std::__next_prime(v234);
        }
        int8x8_t v235 = *(int8x8_t *)(a4 + 8);
        if (v234 > *(void *)&v235) {
          goto LABEL_394;
        }
        if (v234 < *(void *)&v235)
        {
          unint64_t v236 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
          if (*(void *)&v235 < 3uLL
            || (uint8x8_t v237 = (uint8x8_t)vcnt_s8(v235), v237.i16[0] = vaddlv_u8(v237), v237.u32[0] > 1uLL))
          {
            unint64_t v236 = std::__next_prime(v236);
          }
          else
          {
            uint64_t v238 = 1 << -(char)__clz(v236 - 1);
            if (v236 >= 2) {
              unint64_t v236 = v238;
            }
          }
          if (v234 <= v236) {
            unint64_t v234 = v236;
          }
          if (v234 < *(void *)&v235) {
LABEL_394:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a4, v234);
        }
        uint64_t v239 = *(unsigned char **)(a4 + 160);
        if (v224 <= (uint64_t)(*(void *)(a4 + 176) - (void)v239) >> 3)
        {
LABEL_417:
          if (v233)
          {
LABEL_418:
            unint64_t v252 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 248) / *(float *)(a4 + 112));
            if (v252 == 1)
            {
              unint64_t v252 = 2;
            }
            else if ((v252 & (v252 - 1)) != 0)
            {
              unint64_t v252 = std::__next_prime(v252);
            }
            int8x8_t v338 = *(int8x8_t *)(a4 + 88);
            if (v252 > *(void *)&v338) {
              goto LABEL_610;
            }
            if (v252 < *(void *)&v338)
            {
              unint64_t v339 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 104) / *(float *)(a4 + 112));
              if (*(void *)&v338 < 3uLL
                || (uint8x8_t v340 = (uint8x8_t)vcnt_s8(v338), v340.i16[0] = vaddlv_u8(v340), v340.u32[0] > 1uLL))
              {
                unint64_t v339 = std::__next_prime(v339);
              }
              else
              {
                uint64_t v341 = 1 << -(char)__clz(v339 - 1);
                if (v339 >= 2) {
                  unint64_t v339 = v341;
                }
              }
              if (v252 <= v339) {
                unint64_t v252 = v339;
              }
              if (v252 < *(void *)&v338) {
LABEL_610:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v218, v252);
            }
            while (1)
            {
              uint64_t v138 = (void *)*v138;
              if (!v138) {
                break;
              }
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v218, v138[2], v138[2]);
            }
            unint64_t v342 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 208) / *(float *)(a4 + 152));
            if (v342 == 1)
            {
              unint64_t v342 = 2;
            }
            else if ((v342 & (v342 - 1)) != 0)
            {
              unint64_t v342 = std::__next_prime(v342);
            }
            int8x8_t v343 = *(int8x8_t *)(a4 + 128);
            if (v342 > *(void *)&v343) {
              goto LABEL_628;
            }
            if (v342 < *(void *)&v343)
            {
              unint64_t v344 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 144) / *(float *)(a4 + 152));
              if (*(void *)&v343 < 3uLL
                || (uint8x8_t v345 = (uint8x8_t)vcnt_s8(v343), v345.i16[0] = vaddlv_u8(v345), v345.u32[0] > 1uLL))
              {
                unint64_t v344 = std::__next_prime(v344);
              }
              else
              {
                uint64_t v346 = 1 << -(char)__clz(v344 - 1);
                if (v344 >= 2) {
                  unint64_t v344 = v346;
                }
              }
              if (v342 <= v344) {
                unint64_t v342 = v344;
              }
              if (v342 < *(void *)&v343) {
LABEL_628:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v349, v342);
            }
            while (1)
            {
              uint64_t v152 = (void *)*v152;
              if (!v152) {
                break;
              }
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v349, v152[2], v152[2]);
            }
            if (v357)
            {
              char v347 = 3;
            }
            else if (v363)
            {
              char v347 = 2;
            }
            else
            {
              char v347 = 1;
            }
            *(unsigned char *)(a4 + 268) = v347;
            goto LABEL_647;
          }
          while (1)
          {
            int v258 = *(_DWORD *)(v222 + 128);
            if (v258 == 3) {
              break;
            }
            BOOL v264 = v258 == 2;
            char v265 = v352 ^ 1;
            if (!v264) {
              char v265 = 1;
            }
            if (v265)
            {
              char v253 = !v264;
              int v254 = v357;
              char v255 = v253 | v357;
              int v256 = v363;
              if (v363) {
                int v257 = v363;
              }
              else {
                int v257 = 1;
              }
              if ((v255 & 1) == 0) {
                int v254 = 1;
              }
              int v357 = v254;
              if (v255) {
                int v256 = v257;
              }
              int v363 = v256;
              goto LABEL_432;
            }
            uint64_t v266 = **(void **)(v222 + 16);
            std::string::size_type v268 = *(char **)(a4 + 168);
            unint64_t v267 = *(void *)(a4 + 176);
            if ((unint64_t)v268 >= v267)
            {
              long double v274 = *(char **)(a4 + 160);
              uint64_t v275 = (v268 - v274) >> 3;
              unint64_t v276 = v275 + 1;
              if ((unint64_t)(v275 + 1) >> 61) {
                abort();
              }
              uint64_t v277 = v267 - (void)v274;
              if (v277 >> 2 > v276) {
                unint64_t v276 = v277 >> 2;
              }
              if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v278 = v276;
              }
              if (v278)
              {
                if (v278 >> 61) {
                  goto LABEL_654;
                }
                uint64_t v279 = operator new(8 * v278);
              }
              else
              {
                uint64_t v279 = 0;
              }
              uint64_t v300 = &v279[8 * v275];
              void *v300 = v266;
              uint64_t v301 = v300 + 1;
              if (v268 == v274)
              {
                a4 = (uint64_t)v361;
              }
              else
              {
                unint64_t v302 = v268 - 8 - v274;
                if (v302 < 0x58)
                {
                  a4 = (uint64_t)v361;
                  goto LABEL_511;
                }
                a4 = (uint64_t)v361;
                if ((unint64_t)(v274 - v279) < 0x20) {
                  goto LABEL_664;
                }
                uint64_t v303 = (v302 >> 3) + 1;
                uint64_t v304 = &v279[8 * v275 - 16];
                size_t v305 = v268 - 16;
                uint64_t v306 = v303 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v307 = *(_OWORD *)v305;
                  *(v304 - 1) = *((_OWORD *)v305 - 1);
                  _OWORD *v304 = v307;
                  v304 -= 2;
                  v305 -= 32;
                  v306 -= 4;
                }
                while (v306);
                v300 -= v303 & 0x3FFFFFFFFFFFFFFCLL;
                v268 -= 8 * (v303 & 0x3FFFFFFFFFFFFFFCLL);
                if (v303 != (v303 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_664:
                  do
                  {
LABEL_511:
                    uint64_t v308 = *((void *)v268 - 1);
                    v268 -= 8;
                    *--uint64_t v300 = v308;
                  }
                  while (v268 != v274);
                }
              }
              *(void *)(a4 + 160) = v300;
              *(void *)(a4 + 168) = v301;
              *(void *)(a4 + 176) = &v279[8 * v278];
              if (v274) {
                operator delete(v274);
              }
              uint64_t v218 = (uint64_t)v355;
              *(void *)(a4 + 168) = v301;
              goto LABEL_432;
            }
            *(void *)std::string::size_type v268 = v266;
            *(void *)(a4 + 168) = v268 + 8;
LABEL_432:
            v222 += 144;
            if (v222 == v360) {
              goto LABEL_418;
            }
          }
          uint64_t v259 = *(void *)(v222 + 112);
          long long v260 = *(std::__shared_weak_count **)(v222 + 120);
          *(void *)&v389._type = v259;
          *(void *)&v389._xIdx = v260;
          if (v260) {
            atomic_fetch_add_explicit(&v260->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!*(void *)(v259 + 176))
          {
            if (v352)
            {
              std::string::size_type v269 = (void *)a4;
              uint64_t v270 = *(void *)(v259 + 168);
              uint64_t v272 = (char *)v269[21];
              unint64_t v271 = v269[22];
              if ((unint64_t)v272 >= v271)
              {
                uint64_t v293 = (char *)v269[20];
                uint64_t v294 = (v272 - v293) >> 3;
                unint64_t v295 = v294 + 1;
                if ((unint64_t)(v294 + 1) >> 61) {
                  abort();
                }
                uint64_t v296 = v271 - (void)v293;
                if (v296 >> 2 > v295) {
                  unint64_t v295 = v296 >> 2;
                }
                if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v297 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v297 = v295;
                }
                if (v297)
                {
                  if (v297 >> 61) {
LABEL_654:
                  }
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  unint64_t v298 = v297;
                  int v299 = operator new(8 * v297);
                  unint64_t v297 = v298;
                }
                else
                {
                  int v299 = 0;
                }
                unint64_t v323 = &v299[8 * v294];
                void *v323 = v270;
                uint64_t v273 = v323 + 1;
                if (v272 == v293)
                {
                  a4 = (uint64_t)v361;
                }
                else
                {
                  unint64_t v324 = v272 - 8 - v293;
                  a4 = (uint64_t)v361;
                  if (v324 < 0x58) {
                    goto LABEL_665;
                  }
                  if ((unint64_t)(v293 - v299) < 0x20) {
                    goto LABEL_665;
                  }
                  uint64_t v325 = (v324 >> 3) + 1;
                  unint64_t v326 = &v299[8 * v294 - 16];
                  uint64_t v327 = v272 - 16;
                  uint64_t v328 = v325 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v329 = *(_OWORD *)v327;
                    *(v326 - 1) = *((_OWORD *)v327 - 1);
                    *unint64_t v326 = v329;
                    v326 -= 2;
                    v327 -= 32;
                    v328 -= 4;
                  }
                  while (v328);
                  v323 -= v325 & 0x3FFFFFFFFFFFFFFCLL;
                  v272 -= 8 * (v325 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v325 != (v325 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_665:
                    do
                    {
                      uint64_t v330 = *((void *)v272 - 1);
                      v272 -= 8;
                      *--unint64_t v323 = v330;
                    }
                    while (v272 != v293);
                  }
                }
                *(void *)(a4 + 160) = v323;
                *(void *)(a4 + 168) = v273;
                *(void *)(a4 + 176) = &v299[8 * v297];
                if (v293) {
                  operator delete(v293);
                }
              }
              else
              {
                *(void *)uint64_t v272 = v270;
                uint64_t v273 = v272 + 8;
                a4 = (uint64_t)v269;
              }
              uint64_t v218 = (uint64_t)v355;
              *(void *)(a4 + 168) = v273;
            }
            goto LABEL_604;
          }
          unint64_t v261 = *(void *)(v259 + 168);
          unint64_t v262 = *(void *)(a4 + 8);
          if (v262)
          {
            uint8x8_t v263 = (uint8x8_t)vcnt_s8((int8x8_t)v262);
            v263.i16[0] = vaddlv_u8(v263);
            if (v263.u32[0] > 1uLL)
            {
              uint64_t v218 = *(void *)(v259 + 168);
              if (v261 >= v262) {
                uint64_t v218 = v261 % v262;
              }
            }
            else
            {
              uint64_t v218 = (v262 - 1) & v261;
            }
            unint64_t v280 = *(void ***)(*(void *)a4 + 8 * v218);
            if (v280)
            {
              uint64_t v281 = *v280;
              if (*v280)
              {
                if (v263.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v283 = v281[1];
                    if (v283 == v261)
                    {
                      if (v281[2] == v261) {
                        goto LABEL_534;
                      }
                    }
                    else if ((v283 & (v262 - 1)) != v218)
                    {
                      goto LABEL_474;
                    }
                    uint64_t v281 = (void *)*v281;
                    if (!v281) {
                      goto LABEL_474;
                    }
                  }
                }
                do
                {
                  unint64_t v282 = v281[1];
                  if (v282 == v261)
                  {
                    if (v281[2] == v261) {
                      goto LABEL_534;
                    }
                  }
                  else
                  {
                    if (v282 >= v262) {
                      v282 %= v262;
                    }
                    if (v282 != v218) {
                      break;
                    }
                  }
                  uint64_t v281 = (void *)*v281;
                }
                while (v281);
              }
            }
          }
LABEL_474:
          uint64_t v281 = operator new(0x28uLL);
          long long v384 = v281;
          unint64_t v385 = v350;
          void *v281 = 0;
          v281[1] = v261;
          v281[3] = 0;
          v281[4] = 0;
          v281[2] = v261;
          LOBYTE(v386) = 1;
          float v284 = (float)(unint64_t)(*(void *)(a4 + 24) + 1);
          float v285 = *(float *)(a4 + 32);
          if (!v262 || (float)(v285 * (float)v262) < v284)
          {
            BOOL v286 = (v262 & (v262 - 1)) != 0;
            if (v262 < 3) {
              BOOL v286 = 1;
            }
            unint64_t v287 = v286 | (2 * v262);
            unint64_t v288 = vcvtps_u32_f32(v284 / v285);
            if (v287 <= v288) {
              size_t v289 = v288;
            }
            else {
              size_t v289 = v287;
            }
            if (v289 == 1)
            {
              size_t v289 = 2;
            }
            else if ((v289 & (v289 - 1)) != 0)
            {
              size_t v289 = std::__next_prime(v289);
              unint64_t v262 = *(void *)(a4 + 8);
            }
            if (v289 > v262) {
              goto LABEL_486;
            }
            if (v289 < v262)
            {
              unint64_t v290 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
              if (v262 < 3
                || (uint8x8_t v291 = (uint8x8_t)vcnt_s8((int8x8_t)v262), v291.i16[0] = vaddlv_u8(v291), v291.u32[0] > 1uLL))
              {
                unint64_t v290 = std::__next_prime(v290);
              }
              else
              {
                uint64_t v292 = 1 << -(char)__clz(v290 - 1);
                if (v290 >= 2) {
                  unint64_t v290 = v292;
                }
              }
              if (v289 <= v290) {
                size_t v289 = v290;
              }
              if (v289 < v262) {
LABEL_486:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a4, v289);
            }
            unint64_t v262 = *(void *)(a4 + 8);
            if ((v262 & (v262 - 1)) != 0)
            {
              if (v261 >= v262) {
                uint64_t v218 = v261 % v262;
              }
              else {
                uint64_t v218 = v261;
              }
            }
            else
            {
              uint64_t v218 = (v262 - 1) & v261;
            }
          }
          uint64_t v309 = *(void *)a4;
          unint64_t v310 = *(void **)(*(void *)a4 + 8 * v218);
          if (v310)
          {
            void *v281 = *v310;
          }
          else
          {
            void *v281 = *v350;
            void *v350 = v281;
            *(void *)(v309 + 8 * v218) = v350;
            if (!*v281) {
              goto LABEL_533;
            }
            unint64_t v311 = *(void *)(*v281 + 8);
            if ((v262 & (v262 - 1)) != 0)
            {
              if (v311 >= v262) {
                v311 %= v262;
              }
            }
            else
            {
              v311 &= v262 - 1;
            }
            unint64_t v310 = (void *)(*(void *)a4 + 8 * v311);
          }
          *unint64_t v310 = v281;
LABEL_533:
          ++*(void *)(a4 + 24);
LABEL_534:
          if (v260) {
            atomic_fetch_add_explicit(&v260->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v312 = (std::__shared_weak_count *)v281[4];
          v281[3] = v259;
          v281[4] = v260;
          if (v312 && !atomic_fetch_add(&v312->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
            std::__shared_weak_count::__release_weak(v312);
          }
          int8x8_t v313 = *(int8x8_t *)(a4 + 232);
          uint64_t v218 = (uint64_t)v355;
          if (v313)
          {
            unint64_t v314 = *(void *)(*(void *)&v389._type + 168);
            uint8x8_t v315 = (uint8x8_t)vcnt_s8(v313);
            v315.i16[0] = vaddlv_u8(v315);
            if (v315.u32[0] > 1uLL)
            {
              unint64_t v316 = *(void *)(*(void *)&v389._type + 168);
              if (v314 >= *(void *)&v313) {
                unint64_t v316 = v314 % *(void *)&v313;
              }
            }
            else
            {
              unint64_t v316 = (*(void *)&v313 - 1) & v314;
            }
            uint64_t v317 = *(void *)(a4 + 224);
            unint64_t v318 = *(void ***)(v317 + 8 * v316);
            if (v318)
            {
              uint8x8_t v319 = *v318;
              if (*v318)
              {
                uint64_t v320 = *(void *)&v313 - 1;
                if (v315.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v321 = v319[1];
                    if (v321 == v314)
                    {
                      if (v319[2] == v314) {
                        goto LABEL_560;
                      }
                    }
                    else if ((v321 & v320) != v316)
                    {
                      goto LABEL_603;
                    }
                    uint8x8_t v319 = (void *)*v319;
                    if (!v319) {
                      goto LABEL_603;
                    }
                  }
                }
                do
                {
                  unint64_t v322 = v319[1];
                  if (v322 == v314)
                  {
                    if (v319[2] == v314)
                    {
LABEL_560:
                      if (v315.u32[0] > 1uLL)
                      {
                        if (v314 >= *(void *)&v313) {
                          v314 %= *(void *)&v313;
                        }
                      }
                      else
                      {
                        v314 &= v320;
                      }
                      uint64_t v331 = *(void **)(v317 + 8 * v314);
                      do
                      {
                        long long v332 = v331;
                        uint64_t v331 = (void *)*v331;
                      }
                      while (v331 != v319);
                      if (v332 == v138) {
                        goto LABEL_590;
                      }
                      unint64_t v333 = v332[1];
                      if (v315.u32[0] > 1uLL)
                      {
                        if (v333 >= *(void *)&v313) {
                          v333 %= *(void *)&v313;
                        }
                      }
                      else
                      {
                        v333 &= v320;
                      }
                      if (v333 != v314)
                      {
LABEL_590:
                        if (!*v319) {
                          goto LABEL_591;
                        }
                        unint64_t v334 = *(void *)(*v319 + 8);
                        if (v315.u32[0] > 1uLL)
                        {
                          if (v334 >= *(void *)&v313) {
                            v334 %= *(void *)&v313;
                          }
                        }
                        else
                        {
                          v334 &= v320;
                        }
                        if (v334 != v314) {
LABEL_591:
                        }
                          *(void *)(v317 + 8 * v314) = 0;
                      }
                      uint64_t v335 = *v319;
                      if (*v319)
                      {
                        unint64_t v336 = *(void *)(v335 + 8);
                        if (v315.u32[0] > 1uLL)
                        {
                          if (v336 >= *(void *)&v313) {
                            v336 %= *(void *)&v313;
                          }
                        }
                        else
                        {
                          v336 &= v320;
                        }
                        if (v336 != v314)
                        {
                          *(void *)(*(void *)(a4 + 224) + 8 * v336) = v332;
                          uint64_t v335 = *v319;
                        }
                      }
                      *long long v332 = v335;
                      *uint8x8_t v319 = 0;
                      --*(void *)(a4 + 248);
                      uint64_t v337 = (std::__shared_weak_count *)v319[4];
                      if (v337 && !atomic_fetch_add(&v337->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                        std::__shared_weak_count::__release_weak(v337);
                      }
                      operator delete(v319);
                      break;
                    }
                  }
                  else
                  {
                    if (v322 >= *(void *)&v313) {
                      v322 %= *(void *)&v313;
                    }
                    if (v322 != v316) {
                      break;
                    }
                  }
                  uint8x8_t v319 = (void *)*v319;
                }
                while (v319);
              }
            }
          }
LABEL_603:
          long long v260 = *(std::__shared_weak_count **)&v389._xIdx;
LABEL_604:
          if (v260 && !atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
          }
          goto LABEL_432;
        }
        if (v224 >> 61) {
          abort();
        }
        uint64_t v240 = *(unsigned char **)(a4 + 168);
        uint64_t v241 = (char *)operator new(8 * v224);
        uint64_t v242 = v240 - v239;
        uint64_t v243 = &v241[(v240 - v239) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v244 = v243;
        if (v240 != v239)
        {
          if ((unint64_t)(v242 - 8) < 0x58)
          {
            uint64_t v244 = &v241[(v240 - v239) & 0xFFFFFFFFFFFFFFF8];
            do
            {
LABEL_414:
              uint64_t v251 = *((void *)v240 - 1);
              v240 -= 8;
              *((void *)v244 - 1) = v251;
              v244 -= 8;
            }
            while (v240 != v239);
            goto LABEL_415;
          }
          uint64_t v244 = &v241[(v240 - v239) & 0xFFFFFFFFFFFFFFF8];
          if (v240 - v241 - (v242 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
            goto LABEL_414;
          }
          uint64_t v245 = v242 >> 3;
          unint64_t v246 = ((unint64_t)(v242 - 8) >> 3) + 1;
          uint64_t v247 = &v241[8 * v245 - 16];
          uint64_t v248 = (long long *)(v240 - 16);
          uint64_t v249 = v246 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v250 = *v248;
            *((_OWORD *)v247 - 1) = *(v248 - 1);
            *(_OWORD *)uint64_t v247 = v250;
            v247 -= 32;
            v248 -= 2;
            v249 -= 4;
          }
          while (v249);
          uint64_t v244 = &v243[-8 * (v246 & 0x3FFFFFFFFFFFFFFCLL)];
          v240 -= 8 * (v246 & 0x3FFFFFFFFFFFFFFCLL);
          if (v246 != (v246 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_414;
          }
        }
LABEL_415:
        *(void *)(a4 + 160) = v244;
        *(void *)(a4 + 168) = v243;
        *(void *)(a4 + 176) = &v241[8 * v224];
        if (v239) {
          operator delete(v239);
        }
        goto LABEL_417;
      }
      uint64_t v170 = v167 + 144 * (v173 & 0x3FFFFFFFFFFFFFELL);
    }
    else
    {
      unint64_t v168 = 0;
      uint64_t v170 = v167;
    }
    do
    {
      if (*(_DWORD *)(v170 + 128) == 3) {
        ++v168;
      }
      v170 += 144;
    }
    while (v170 != v166);
    goto LABEL_252;
  }
LABEL_647:
  if (v395)
  {
    (*(void (**)(void *))(*v395 + 48))(v395);
    if (v395 == v394)
    {
      (*(void (**)(void *))(v394[0] + 32))(v394);
    }
    else if (v395)
    {
      (*(void (**)(void))(*v395 + 40))();
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A18D5C4C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 216);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::NonTiled>(int8x8_t *a1)
{
  unint64_t v10 = 0xCBD572B797B24F09;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCBD572B797B24F09;
    if (*(void *)&v1 <= 0xCBD572B797B24F09) {
      unint64_t v3 = 0xCBD572B797B24F09 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCBD572B797B24F09;
  }
  __int16 v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCBD572B797B24F09)
      {
        if (v5[2] == 0xCBD572B797B24F09) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCBD572B797B24F09) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCBD572B797B24F09) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A18D6020(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::ReferencedAssetInstance>(int8x8_t *a1)
{
  unint64_t v10 = 0xD7CF92E7713C257ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD7CF92E7713C257ALL;
    if (*(void *)&v1 <= 0xD7CF92E7713C257ALL) {
      unint64_t v3 = 0xD7CF92E7713C257ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD7CF92E7713C257ALL;
  }
  __int16 v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD7CF92E7713C257ALL)
      {
        if (v5[2] == 0xD7CF92E7713C257ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD7CF92E7713C257ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD7CF92E7713C257ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A18D6290(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Asset>(int8x8_t *a1)
{
  uint64_t v10 = 0x72409CF23030D770;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x72409CF23030D770;
    if (*(void *)&v1 <= 0x72409CF23030D770uLL) {
      uint64_t v3 = 0x72409CF23030D770uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x72409CF23030D770;
  }
  __int16 v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x72409CF23030D770)
      {
        if (v5[2] == 0x72409CF23030D770) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x72409CF23030D770) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x72409CF23030D770) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A18D6500(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::LayerDataManager::createDataRequests(gdc::LayerDataManager *this, gdc::LayerDataCollector *a2, uint64_t a3)
{
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6[29])
  {
    unint64_t v7 = (void *)v6[28];
    if (v7)
    {
      do
      {
        uint64_t v20 = (void *)*v7;
        uint64_t v21 = (void *)v7[3];
        if (v21 != (void *)v7[5]) {
          free(v21);
        }
        operator delete(v7);
        unint64_t v7 = v20;
      }
      while (v20);
    }
    v6[28] = 0;
    uint64_t v8 = v6[27];
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
        *(void *)(v6[26] + 8 * i) = 0;
    }
    v6[29] = 0;
  }
  uint64_t v10 = *((void *)a2 + 3);
  uint64_t v11 = *((void *)a2 + 4);
  uint64_t v12 = (unsigned __int16 **)((char *)a2 + 24);
  gdc::LayerDataCollector::layerDataTypes((gdc::LayerDataCollector *)&v25, v10, v11);
  uint64_t v13 = (unsigned __int16 *)__p;
  if (__p)
  {
    do
    {
      int v14 = v13[8];
      int v15 = (unsigned __int16 *)*((void *)this + 1);
      char v16 = (unsigned __int16 *)*((void *)this + 2);
      if (v15 != v16)
      {
        while (v14 != *v15)
        {
          v15 += 12;
          if (v15 == v16) {
            goto LABEL_9;
          }
        }
      }
      if (v15 != v16)
      {
        uint64_t v17 = *((void *)v15 + 1);
        uint64_t v18 = *(void *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v12, v13[8]);
        long long v19 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v12, v14);
        gdc::LayerDataSource::createLayerDataRequests(v17, v18, *((void *)v19 + 1), a3, *((void **)this + 7));
      }
LABEL_9:
      uint64_t v13 = *(unsigned __int16 **)v13;
    }
    while (v13);
    uint64_t v22 = __p;
    if (__p)
    {
      do
      {
        unsigned int v23 = (void *)*v22;
        operator delete(v22);
        uint64_t v22 = v23;
      }
      while (v23);
    }
  }
  unint64_t v24 = v25;
  unint64_t v25 = 0;
  if (v24) {
    operator delete(v24);
  }
  gdc::ResourceManager::finishBatch(*((gdc::ResourceManager **)this + 7));
}

void gdc::LayerDataCollector::layerDataTypes(gdc::LayerDataCollector *this, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    while (1)
    {
      unsigned __int16 v4 = *(_WORD *)v3;
      uint64_t v5 = *(void *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16);
      int64_t v7 = v6 - v5;
      if (v6 == v5)
      {
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)this, *(_WORD *)v3, *(_WORD *)v3);
        goto LABEL_4;
      }
      if (0x8E38E38E38E38E39 * (v7 >> 4) >= 0x1C71C71C71C71C8) {
        abort();
      }
      uint64_t v8 = operator new(v7);
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v5 + v9;
        uint64_t v11 = &v8[v9];
        v8[v9] = *(unsigned char *)(v5 + v9);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v9 + 8], v5 + v9 + 8);
        v8[v9 + 96] = 0;
        if (*(unsigned char *)(v5 + v9 + 96))
        {
          *((_DWORD *)v11 + 25) = *(_DWORD *)(v10 + 100);
          v11[96] = 1;
        }
        uint64_t v12 = *(void *)(v10 + 112);
        *((void *)v11 + 13) = *(void *)(v10 + 104);
        *((void *)v11 + 14) = v12;
        uint64_t v13 = *(void *)(v10 + 120);
        *((void *)v11 + 15) = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)&v8[v9 + 128] = *(_OWORD *)(v10 + 128);
        v9 += 144;
      }
      while (v10 + 144 != v6);
      uint64_t v14 = 144 * (v9 / 144);
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)this, v4, v4);
      if (v14) {
        break;
      }
LABEL_3:
      operator delete(v8);
LABEL_4:
      v3 += 32;
      if (v3 == a3) {
        return;
      }
    }
    while (1)
    {
      int v15 = &v8[v14];
      char v16 = *(std::__shared_weak_count **)&v8[v14 - 24];
      if (v16)
      {
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (*(v15 - 48)) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v17 = *(void **)&v8[v14 - 128];
      if (v17 != *(void **)&v8[v14 - 112]) {
        free(v17);
      }
      v14 -= 144;
      if (!v14) {
        goto LABEL_3;
      }
    }
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!*(v15 - 48)) {
      goto LABEL_20;
    }
LABEL_19:
    *(v15 - 48) = 0;
    goto LABEL_20;
  }
}

void md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_2::operator()(uint64_t a1, void *a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v6 = (void *)a2[140];
    int64_t v7 = a2 + 141;
    if (v6 != a2 + 141)
    {
      do
      {
        unint64_t v8 = v6[4];
        uint64_t v40 = v44;
        unsigned int v41 = v44;
        unsigned int v42 = v44;
        uint64_t v43 = 32;
        unint64_t v45 = 0;
        unint64_t v46 = v8;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v40, v44, (char *)&v46, v47);
        unint64_t v46 = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v40, v41, (char *)&v46, v47);
        uint64_t v9 = (unsigned __int8 *)v40;
        unint64_t v10 = v41 - (unsigned char *)v40;
        if (v41 == v40)
        {
          unint64_t v11 = 0;
        }
        else
        {
          unint64_t v11 = 0;
          if (v10 <= 1) {
            unint64_t v10 = 1;
          }
          do
          {
            unsigned int v12 = *v9++;
            v11 ^= (v11 << 6) - 0x61C8864680B583EBLL + (v11 >> 2) + v12;
            --v10;
          }
          while (v10);
        }
        unint64_t v45 = v11;
        gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v46, 0, 0x38u, (uint64_t)&v40, -1073741827);
        if (v40 != v42) {
          free(v40);
        }
        uint64_t v13 = *(gdc::LayerDataCollector **)(a1 + 128);
        *(_WORD *)&v51._type = 255;
        *(void *)&v51._yIdx = 0;
        gdc::LayerDataCollector::addDataKey(v13, (const gdc::LayerDataRequestKey *)&v46, &v51);
        if (v50) {
          char v50 = 0;
        }
        if (v48 != v49) {
          free(v48);
        }
        uint64_t v14 = (void *)v6[1];
        if (v14)
        {
          do
          {
            int v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = (void *)v6[2];
            BOOL v16 = *v15 == (void)v6;
            uint64_t v6 = v15;
          }
          while (!v16);
        }
        uint64_t v6 = v15;
      }
      while (v15 != v7);
    }
    if (!*(unsigned char *)(a1 + 192))
    {
      uint64_t v17 = (void *)a2[143];
      if (v17 != a2 + 144)
      {
        do
        {
          unint64_t v18 = v17[4];
          int8x8_t v19 = *(int8x8_t *)(a1 + 160);
          if (v19)
          {
            uint8x8_t v20 = (uint8x8_t)vcnt_s8(v19);
            v20.i16[0] = vaddlv_u8(v20);
            if (v20.u32[0] > 1uLL)
            {
              unint64_t v21 = v17[4];
              if (v18 >= *(void *)&v19) {
                unint64_t v21 = v18 % *(void *)&v19;
              }
            }
            else
            {
              unint64_t v21 = (*(void *)&v19 - 1) & v18;
            }
            uint64_t v22 = *(void **)(*(void *)(a1 + 152) + 8 * v21);
            if (v22)
            {
              unsigned int v23 = (void *)*v22;
              if (v23)
              {
                if (v20.u32[0] < 2uLL)
                {
                  uint64_t v24 = *(void *)&v19 - 1;
                  while (1)
                  {
                    uint64_t v26 = v23[1];
                    if (v18 == v26)
                    {
                      if (v23[2] == v18) {
                        goto LABEL_66;
                      }
                    }
                    else if ((v26 & v24) != v21)
                    {
                      goto LABEL_53;
                    }
                    unsigned int v23 = (void *)*v23;
                    if (!v23) {
                      goto LABEL_53;
                    }
                  }
                }
                do
                {
                  unint64_t v25 = v23[1];
                  if (v18 == v25)
                  {
                    if (v23[2] == v18) {
                      goto LABEL_66;
                    }
                  }
                  else
                  {
                    if (v25 >= *(void *)&v19) {
                      v25 %= *(void *)&v19;
                    }
                    if (v25 != v21) {
                      break;
                    }
                  }
                  unsigned int v23 = (void *)*v23;
                }
                while (v23);
              }
            }
          }
LABEL_53:
          if ((*(unsigned char *)(a1 + 216) & (_BYTE)v17[5]) != 0)
          {
            BOOL v34 = v38;
            BOOL v35 = v38;
            uint64_t v36 = v38;
            uint64_t v37 = 32;
            unint64_t v39 = 0;
            unint64_t v46 = v18;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v34, v38, (char *)&v46, v47);
            unint64_t v46 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v34, v35, (char *)&v46, v47);
            long long v27 = (unsigned __int8 *)v34;
            unint64_t v28 = v35 - (unsigned char *)v34;
            if (v35 == v34)
            {
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = 0;
              if (v28 <= 1) {
                unint64_t v28 = 1;
              }
              do
              {
                unsigned int v30 = *v27++;
                v29 ^= (v29 << 6) - 0x61C8864680B583EBLL + (v29 >> 2) + v30;
                --v28;
              }
              while (v28);
            }
            unint64_t v39 = v29;
            gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v46, 0, 0x37u, (uint64_t)&v34, -1073741827);
            if (v34 != v36) {
              free(v34);
            }
            uint64_t v31 = *(gdc::LayerDataCollector **)(a1 + 120);
            *(_WORD *)&v51._type = 255;
            *(void *)&v51._yIdx = 0;
            gdc::LayerDataCollector::addDataKey(v31, (const gdc::LayerDataRequestKey *)&v46, &v51);
            if (v50) {
              char v50 = 0;
            }
            if (v48 != v49) {
              free(v48);
            }
          }
LABEL_66:
          uint64_t v32 = (void *)v17[1];
          if (v32)
          {
            do
            {
              unint64_t v33 = v32;
              uint64_t v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              unint64_t v33 = (void *)v17[2];
              BOOL v16 = *v33 == (void)v17;
              uint64_t v17 = v33;
            }
            while (!v16);
          }
          uint64_t v17 = v33;
        }
        while (v33 != a2 + 144);
      }
    }
  }
  if (a3)
  {
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

unsigned __int8 *gdc::LayerDataRequestKey::LayerDataRequestKey(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int16 a3, uint64_t a4, int a5)
{
  *a1 = a2;
  uint64_t v9 = (unsigned __int16 *)(a1 + 8);
  unint64_t v10 = v48;
  uint64_t v44 = v48;
  unint64_t v45 = (char *)v48;
  unint64_t v46 = v48;
  uint64_t v47 = 32;
  unint64_t v11 = *(char **)a4;
  unsigned int v12 = *(char **)(a4 + 8);
  unint64_t v13 = (unint64_t)&v12[-*(void *)a4];
  if (v13 >= 0x21)
  {
    if (v13 <= 0x40) {
      size_t v14 = 64;
    }
    else {
      size_t v14 = (size_t)&v12[-*(void *)a4];
    }
    unint64_t v10 = malloc_type_malloc(v14, 0x100004077774924uLL);
    int v15 = (char *)v44;
    BOOL v16 = v45;
    if (v44 == v45) {
      goto LABEL_21;
    }
    unint64_t v17 = v45 - (unsigned char *)v44;
    if ((unint64_t)(v45 - (unsigned char *)v44) < 8)
    {
      unint64_t v18 = v10;
      goto LABEL_20;
    }
    unint64_t v18 = v10;
    if ((unint64_t)((char *)v10 - (unsigned char *)v44) < 0x20) {
      goto LABEL_20;
    }
    if (v17 >= 0x20)
    {
      unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFE0;
      uint8x8_t v20 = (long long *)((char *)v44 + 16);
      unint64_t v21 = v10 + 2;
      unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *unint64_t v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      if (v17 == v19) {
        goto LABEL_21;
      }
      if ((v17 & 0x18) == 0)
      {
        v15 += v19;
        unint64_t v18 = (char *)v10 + v19;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v24 = v17 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (char *)v10 + (v17 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = v19 - (v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = &v15[v19];
    long long v27 = (void *)((char *)v10 + v19);
    do
    {
      uint64_t v28 = *(void *)v26;
      v26 += 8;
      *v27++ = v28;
      v25 += 8;
    }
    while (v25);
    if (v17 == v24) {
      goto LABEL_21;
    }
    v15 += v24;
    do
    {
LABEL_20:
      char v29 = *v15++;
      *v18++ = v29;
    }
    while (v15 != v16);
LABEL_21:
    uint64_t v44 = v10;
    unint64_t v45 = (char *)v10;
    uint64_t v47 = v14;
  }
  if (v11 == v12) {
    goto LABEL_40;
  }
  if (v13 < 8)
  {
    uint64_t v31 = v10;
    goto LABEL_38;
  }
  if ((unint64_t)((char *)v10 - v11) < 0x20)
  {
    uint64_t v31 = v10;
    goto LABEL_38;
  }
  if (v13 >= 0x20)
  {
    unint64_t v30 = v13 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v32 = (long long *)(v11 + 16);
    unint64_t v33 = v10 + 2;
    unint64_t v34 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v35 = *v32;
      *(v33 - 1) = *(v32 - 1);
      *unint64_t v33 = v35;
      v32 += 2;
      v33 += 2;
      v34 -= 32;
    }
    while (v34);
    if (v13 == v30) {
      goto LABEL_39;
    }
    if ((v13 & 0x18) == 0)
    {
      v11 += v30;
      uint64_t v31 = (char *)v10 + v30;
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v30 = 0;
  }
  unint64_t v36 = v13 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (char *)v10 + (v13 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = v30 - (v13 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = (uint64_t *)&v11[v30];
  unint64_t v39 = (void *)((char *)v10 + v30);
  do
  {
    uint64_t v40 = *v38++;
    *v39++ = v40;
    v37 += 8;
  }
  while (v37);
  if (v13 == v36) {
    goto LABEL_39;
  }
  v11 += v36;
  do
  {
LABEL_38:
    char v41 = *v11++;
    *v31++ = v41;
  }
  while (v11 != v12);
LABEL_39:
  unint64_t v10 = v45;
LABEL_40:
  uint64_t v42 = *(void *)(a4 + 64);
  unint64_t v45 = (char *)v10 + v13;
  v48[4] = v42;
  gdc::LayerDataKey::LayerDataKey(v9, a3, (uint64_t)&v44);
  if (v44 != v46) {
    free(v44);
  }
  a1[96] = 1;
  *((_DWORD *)a1 + 25) = a5;
  *((void *)a1 + 13) = (*((void *)a1 + 11)
                        + ((*a1 - 0x61C8864680B583EBLL) << 6)
                        + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)
                        - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583EBLL);
  return a1;
}

unsigned __int16 *gdc::LayerDataKey::LayerDataKey(unsigned __int16 *a1, unsigned __int16 a2, uint64_t a3)
{
  *a1 = a2;
  uint64_t v5 = (char *)(a1 + 20);
  *((void *)a1 + 1) = v5;
  *((void *)a1 + 2) = v5;
  *((void *)a1 + 3) = v5;
  *((void *)a1 + 4) = 32;
  uint64_t v6 = *(char **)a3;
  int64_t v7 = *(char **)(a3 + 8);
  unint64_t v8 = (unint64_t)&v7[-*(void *)a3];
  if (v8 >= 0x21)
  {
    if (v8 <= 0x40) {
      size_t v9 = 64;
    }
    else {
      size_t v9 = (size_t)&v7[-*(void *)a3];
    }
    uint64_t v5 = (char *)malloc_type_malloc(v9, 0x100004077774924uLL);
    unint64_t v10 = (char *)*((void *)a1 + 1);
    unint64_t v11 = (char *)*((void *)a1 + 2);
    if (v10 == v11) {
      goto LABEL_21;
    }
    unint64_t v12 = v11 - v10;
    if ((unint64_t)(v11 - v10) < 8)
    {
      unint64_t v13 = v5;
      goto LABEL_20;
    }
    unint64_t v13 = v5;
    if ((unint64_t)(v5 - v10) < 0x20) {
      goto LABEL_20;
    }
    if (v12 >= 0x20)
    {
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFE0;
      int v15 = (long long *)(v10 + 16);
      BOOL v16 = v5 + 16;
      unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *BOOL v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v12 == v14) {
        goto LABEL_21;
      }
      if ((v12 & 0x18) == 0)
      {
        v10 += v14;
        unint64_t v13 = &v5[v14];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = &v5[v12 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v21 = (uint64_t *)&v10[v14];
    unint64_t v22 = &v5[v14];
    do
    {
      uint64_t v23 = *v21++;
      *(void *)unint64_t v22 = v23;
      v22 += 8;
      v20 += 8;
    }
    while (v20);
    if (v12 == v19) {
      goto LABEL_21;
    }
    v10 += v19;
    do
    {
LABEL_20:
      char v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
LABEL_21:
    *((void *)a1 + 1) = v5;
    *((void *)a1 + 2) = v5;
    *((void *)a1 + 4) = v9;
  }
  if (v6 != v7)
  {
    if (v8 < 8)
    {
      uint64_t v26 = v5;
      goto LABEL_38;
    }
    if ((unint64_t)(v5 - v6) < 0x20)
    {
      uint64_t v26 = v5;
      goto LABEL_38;
    }
    if (v8 >= 0x20)
    {
      unint64_t v25 = v8 & 0xFFFFFFFFFFFFFFE0;
      long long v27 = (long long *)(v6 + 16);
      uint64_t v28 = v5 + 16;
      unint64_t v29 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v30 = *v27;
        *(v28 - 1) = *(v27 - 1);
        *uint64_t v28 = v30;
        v27 += 2;
        v28 += 2;
        v29 -= 32;
      }
      while (v29);
      if (v8 == v25) {
        goto LABEL_39;
      }
      if ((v8 & 0x18) == 0)
      {
        v6 += v25;
        uint64_t v26 = &v5[v25];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v25 = 0;
    }
    unint64_t v31 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = &v5[v8 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v32 = v25 - (v8 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v33 = (uint64_t *)&v6[v25];
    unint64_t v34 = &v5[v25];
    do
    {
      uint64_t v35 = *v33++;
      *(void *)unint64_t v34 = v35;
      v34 += 8;
      v32 += 8;
    }
    while (v32);
    if (v8 == v31) {
      goto LABEL_39;
    }
    v6 += v31;
    do
    {
LABEL_38:
      char v36 = *v6++;
      *v26++ = v36;
    }
    while (v6 != v7);
LABEL_39:
    uint64_t v5 = (char *)*((void *)a1 + 2);
  }
  *((void *)a1 + 2) = &v5[v8];
  uint64_t v37 = *(void *)(a3 + 64);
  unint64_t v38 = (v37
       + ((*a1 - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583EBLL);
  *((void *)a1 + 9) = v37;
  *((void *)a1 + 10) = v38;
  return a1;
}

void md::SceneStateManager::clear(md::SceneStateManager *this)
{
  if (*((void *)this + 4))
  {
    uint8x8_t v2 = (void *)*((void *)this + 3);
    if (v2)
    {
      do
      {
        unint64_t v25 = (void *)*v2;
        uint64_t v26 = (void *)v2[16];
        if (v26 != (void *)v2[18]) {
          free(v26);
        }
        if (*((unsigned char *)v2 + 112)) {
          *((unsigned char *)v2 + 112) = 0;
        }
        long long v27 = (void *)v2[4];
        if (v27 != (void *)v2[6]) {
          free(v27);
        }
        operator delete(v2);
        uint8x8_t v2 = v25;
      }
      while (v25);
    }
    *((void *)this + 3) = 0;
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 1) + 8 * i) = 0;
    }
    *((void *)this + 4) = 0;
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::clear((void *)this + 9);
  uint64_t v5 = &md::TileSelectionTileSetTypeList;
  do
  {
    int v6 = (unsigned __int16)*v5;
    unint64_t v8 = (unsigned __int16 *)*((void *)this + 14);
    int64_t v7 = (unsigned __int16 *)*((void *)this + 15);
    if (v8 != v7)
    {
      while (v6 != *v8)
      {
        v8 += 56;
        if (v8 == v7)
        {
          unint64_t v8 = (unsigned __int16 *)*((void *)this + 15);
          break;
        }
      }
    }
    v8[4] = 0;
    *((unsigned char *)v8 + 10) = 0;
    if (*((void *)v8 + 11))
    {
      size_t v9 = (void *)*((void *)v8 + 10);
      if (v9)
      {
        do
        {
          unint64_t v10 = (void *)*v9;
          operator delete(v9);
          size_t v9 = v10;
        }
        while (v10);
      }
      *((void *)v8 + 10) = 0;
      uint64_t v11 = *((void *)v8 + 9);
      if (v11)
      {
        for (uint64_t j = 0; j != v11; ++j)
          *(void *)(*((void *)v8 + 8) + 8 * j) = 0;
      }
      *((void *)v8 + 11) = 0;
    }
    gdc::LayerDataCollector::clear(*((gdc::LayerDataCollector **)v8 + 13));
    unint64_t v14 = (unsigned __int16 *)*((void *)this + 17);
    unint64_t v13 = (unsigned __int16 *)*((void *)this + 18);
    if (v14 != v13)
    {
      while (v6 != *v14)
      {
        v14 += 56;
        if (v14 == v13)
        {
          unint64_t v14 = (unsigned __int16 *)*((void *)this + 18);
          break;
        }
      }
    }
    v14[4] = 0;
    *((unsigned char *)v14 + 10) = 0;
    if (*((void *)v14 + 11))
    {
      int v15 = (void *)*((void *)v14 + 10);
      if (v15)
      {
        do
        {
          BOOL v16 = (void *)*v15;
          operator delete(v15);
          int v15 = v16;
        }
        while (v16);
      }
      *((void *)v14 + 10) = 0;
      uint64_t v17 = *((void *)v14 + 9);
      if (v17)
      {
        for (uint64_t k = 0; k != v17; ++k)
          *(void *)(*((void *)v14 + 8) + 8 * k) = 0;
      }
      *((void *)v14 + 11) = 0;
    }
    gdc::LayerDataCollector::clear(*((gdc::LayerDataCollector **)v14 + 13));
    unint64_t v20 = (unsigned __int16 *)*((void *)this + 20);
    unint64_t v19 = (unsigned __int16 *)*((void *)this + 21);
    if (v20 != v19)
    {
      while (v6 != *v20)
      {
        v20 += 56;
        if (v20 == v19)
        {
          unint64_t v20 = (unsigned __int16 *)*((void *)this + 21);
          break;
        }
      }
    }
    v20[4] = 0;
    *((unsigned char *)v20 + 10) = 0;
    if (*((void *)v20 + 11))
    {
      unint64_t v21 = (void *)*((void *)v20 + 10);
      if (v21)
      {
        do
        {
          unint64_t v22 = (void *)*v21;
          operator delete(v21);
          unint64_t v21 = v22;
        }
        while (v22);
      }
      *((void *)v20 + 10) = 0;
      uint64_t v23 = *((void *)v20 + 9);
      if (v23)
      {
        for (uint64_t m = 0; m != v23; ++m)
          *(void *)(*((void *)v20 + 8) + 8 * m) = 0;
      }
      *((void *)v20 + 11) = 0;
    }
    gdc::LayerDataCollector::clear(*((gdc::LayerDataCollector **)v20 + 13));
    ++v5;
  }
  while (v5 != (__int16 *)&unk_1A29C5302);
  if (*((void *)this + 57))
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(*((void **)this + 56));
    *((void *)this + 56) = 0;
    uint64_t v28 = *((void *)this + 55);
    if (v28)
    {
      for (uint64_t n = 0; n != v28; ++n)
        *(void *)(*((void *)this + 54) + 8 * n) = 0;
    }
    *((void *)this + 57) = 0;
  }
}

void std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v4 - 24);
      if (!v6) {
        goto LABEL_5;
      }
      uint64_t v7 = *(void *)(v4 - 16);
      uint64_t v5 = *(void **)(v4 - 24);
      if (v7 != v6) {
        break;
      }
LABEL_4:
      *(void *)(v4 - 16) = v6;
      operator delete(v5);
LABEL_5:
      v4 -= 32;
      if (v4 == a2) {
        goto LABEL_18;
      }
    }
    while (1)
    {
      unint64_t v8 = *(std::__shared_weak_count **)(v7 - 24);
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (*(unsigned char *)(v7 - 48)) {
        goto LABEL_13;
      }
LABEL_14:
      size_t v9 = *(void **)(v7 - 128);
      if (v9 != *(void **)(v7 - 112)) {
        free(v9);
      }
      v7 -= 144;
      if (v7 == v6)
      {
        uint64_t v5 = *(void **)(v4 - 24);
        goto LABEL_4;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!*(unsigned char *)(v7 - 48)) {
      goto LABEL_14;
    }
LABEL_13:
    *(unsigned char *)(v7 - 48) = 0;
    goto LABEL_14;
  }
LABEL_18:
  *(void *)(a1 + 8) = a2;
}

void gdc::LayerDataCollector::clear(gdc::LayerDataCollector *this)
{
  if (*((void *)this + 9))
  {
    uint8x8_t v2 = (unsigned char *)*((void *)this + 8);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        unint64_t v8 = *(unsigned char **)v2;
        size_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        uint8x8_t v2 = v8;
      }
      while (v8);
    }
    *((void *)this + 8) = 0;
    uint64_t v3 = *((void *)this + 7);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 6) + 8 * i) = 0;
    }
    *((void *)this + 9) = 0;
  }
  uint64_t v5 = *(void *)this;
  for (uint64_t j = *((void *)this + 1); j != v5; j -= 144)
  {
    if (*(unsigned char *)(j - 48)) {
      *(unsigned char *)(j - 48) = 0;
    }
    uint64_t v7 = *(void **)(j - 128);
    if (v7 != *(void **)(j - 112)) {
      free(v7);
    }
  }
  uint64_t v12 = *((void *)this + 3);
  uint64_t v11 = (char *)this + 24;
  uint64_t v10 = v12;
  *((void *)v11 - 2) = v5;
  std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v11, v10);
}

void std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "IdentifiedResourceLogicVariableRate", "", v5, 2u);
  }
}

void std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "IdentifiedResourceLogicVariableRate", "", v5, 2u);
  }
}

void std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint8x8_t v2 = (void *)*v1;
      uint64_t v3 = (void *)v1[5];
      if (v3)
      {
        do
        {
          uint64_t v5 = (void *)*v3;
          uint64_t v6 = (void *)v3[5];
          if (v6)
          {
            do
            {
              uint64_t v7 = (void *)*v6;
              operator delete(v6);
              uint64_t v6 = v7;
            }
            while (v7);
          }
          unint64_t v8 = (void *)v3[3];
          v3[3] = 0;
          if (v8) {
            operator delete(v8);
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5);
      }
      os_signpost_id_t v4 = (void *)v1[3];
      v1[3] = 0;
      if (v4) {
        operator delete(v4);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t __Block_byref_object_copy__8664(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void ___ZN2md9MapEngine12setNeedsTickERKNS_15NeedsLayoutInfoE_block_invoke(uint64_t a1)
{
  uint8x8_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      os_signpost_id_t v4 = v3;
      uint64_t v5 = *(md::MapEngine ***)(a1 + 32);
      if (v5 && *v5) {
        md::MapEngine::updateRunLoopStatus(*v5);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1A18D7984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__init_with_size[abi:ne180100]<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*,std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x555555555555556) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = (uint64_t)operator new(48 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 48 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        *(_WORD *)(v8 + v9) = *(_WORD *)(a2 + v9);
        uint64_t result = std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(v8 + v9 + 8, a2 + v9 + 8);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1A18D7A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1A18D7A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v12)
  {
    do
    {
      unint64_t v14 = *(void **)(v11 - 24);
      if (v14)
      {
        do
        {
          int v15 = (void *)*v14;
          operator delete(v14);
          unint64_t v14 = v15;
        }
        while (v15);
      }
      BOOL v16 = *(void **)(v11 - 40);
      *(void *)(v11 - 40) = 0;
      if (v16) {
        operator delete(v16);
      }
      v11 -= 48;
    }
    while (v11 != v10);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  unint64_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    unint64_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      unint64_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = (void *)(a1 + 16);
    unint64_t v12 = *(void *)(a1 + 8);
    do
    {
      float v13 = *((float *)v10 + 4);
      if (v13 == 0.0) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = LODWORD(v13);
      }
      if (v12)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t prime = v14;
          if (v14 >= v12) {
            unint64_t prime = v14 % v12;
          }
        }
        else
        {
          unint64_t prime = v14 & (v12 + 0xFFFFFFFF);
        }
        BOOL v16 = *(float ***)(*(void *)a1 + 8 * prime);
        if (v16)
        {
          uint64_t v17 = *v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v19 = *((void *)v17 + 1);
                if (v19 == v14)
                {
                  if (v17[4] == v13) {
                    goto LABEL_81;
                  }
                }
                else if ((v19 & (v12 - 1)) != prime)
                {
                  goto LABEL_43;
                }
                uint64_t v17 = *(float **)v17;
                if (!v17) {
                  goto LABEL_43;
                }
              }
            }
            do
            {
              unint64_t v18 = *((void *)v17 + 1);
              if (v18 == v14)
              {
                if (v17[4] == v13) {
                  goto LABEL_81;
                }
              }
              else
              {
                if (v18 >= v12) {
                  v18 %= v12;
                }
                if (v18 != prime) {
                  break;
                }
              }
              uint64_t v17 = *(float **)v17;
            }
            while (v17);
          }
        }
      }
LABEL_43:
      unint64_t v20 = (char *)operator new(0x28uLL);
      *(void *)unint64_t v20 = 0;
      *((void *)v20 + 1) = v14;
      *((_DWORD *)v20 + 4) = *((_DWORD *)v10 + 4);
      *(_OWORD *)(v20 + 20) = *(_OWORD *)((char *)v10 + 20);
      float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v22 = *(float *)(a1 + 32);
      if (!v12 || (float)(v22 * (float)v12) < v21)
      {
        BOOL v23 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3) {
          BOOL v23 = 1;
        }
        unint64_t v24 = v23 | (2 * v12);
        unint64_t v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25) {
          size_t v26 = v25;
        }
        else {
          size_t v26 = v24;
        }
        if (v26 == 1)
        {
          size_t v26 = 2;
        }
        else if ((v26 & (v26 - 1)) != 0)
        {
          size_t v26 = std::__next_prime(v26);
          unint64_t v12 = *(void *)(a1 + 8);
        }
        if (v26 > v12) {
          goto LABEL_55;
        }
        if (v26 < v12)
        {
          unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
          {
            unint64_t v27 = std::__next_prime(v27);
          }
          else
          {
            uint64_t v29 = 1 << -(char)__clz(v27 - 1);
            if (v27 >= 2) {
              unint64_t v27 = v29;
            }
          }
          if (v26 <= v27) {
            size_t v26 = v27;
          }
          if (v26 < v12) {
LABEL_55:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v26);
        }
        unint64_t v12 = *(void *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v14 >= v12) {
            unint64_t prime = v14 % v12;
          }
          else {
            unint64_t prime = v14;
          }
        }
        else
        {
          unint64_t prime = (v12 - 1) & v14;
        }
      }
      uint64_t v30 = *(void *)a1;
      unint64_t v31 = *(void **)(*(void *)a1 + 8 * prime);
      if (v31)
      {
        *(void *)unint64_t v20 = *v31;
      }
      else
      {
        *(void *)unint64_t v20 = *v11;
        void *v11 = v20;
        *(void *)(v30 + 8 * prime) = v11;
        if (!*(void *)v20) {
          goto LABEL_80;
        }
        unint64_t v32 = *(void *)(*(void *)v20 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v32 >= v12) {
            v32 %= v12;
          }
        }
        else
        {
          v32 &= v12 - 1;
        }
        unint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
      }
      *unint64_t v31 = v20;
LABEL_80:
      ++*(void *)(a1 + 24);
LABEL_81:
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  float *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  unint64_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    unint64_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      unint64_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(float **)(a2 + 16); i; uint64_t i = *(float **)i)
    std::__hash_table<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::__unordered_map_hasher<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__emplace_unique_key_args<float,std::pair<float const,geo::Color<float,4,(geo::ColorSpace)0>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1A18D7E94(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A18D7FD8(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A18D7FEC(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

float *std::__hash_table<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::__unordered_map_hasher<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__emplace_unique_key_args<float,std::pair<float const,geo::Color<float,4,(geo::ColorSpace)0>> const&>(uint64_t a1, float *a2, uint64_t a3)
{
  float v6 = *a2;
  if (*a2 == 0.0) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *(unsigned int *)a2;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 + 0xFFFFFFFF);
    }
    uint64_t v10 = *(float ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = *((void *)v11 + 1);
            if (v13 == v7)
            {
              if (v11[4] == v6) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_26;
            }
            uint64_t v11 = *(float **)v11;
            if (!v11) {
              goto LABEL_26;
            }
          }
        }
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[4] == v6) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = *(float **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_26:
  uint8x8_t v15 = (char *)operator new(0x28uLL);
  *(void *)uint8x8_t v15 = 0;
  *((void *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v15 + 20) = *(_OWORD *)(a3 + 4);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
    if (v19)
    {
LABEL_29:
      *(void *)uint8x8_t v15 = *v19;
LABEL_64:
      *uint64_t v19 = v15;
      goto LABEL_65;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_40;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_40:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v3 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v3 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
      if (v19) {
        goto LABEL_29;
      }
    }
  }
  *(void *)uint8x8_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_64;
  }
LABEL_65:
  ++*(void *)(a1 + 24);
  return (float *)v15;
}

void sub_1A18D832C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void geo::codec::MaterialSheet::~MaterialSheet(geo::codec::MaterialSheet *this)
{
  uint64_t v2 = *((void *)this + 64);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 65);
    uint64_t v4 = *((void *)this + 64);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 65);
      do
      {
        uint64_t v7 = *(void *)(v5 - 40);
        v5 -= 40;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 32) = v6;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 16) + 40))(*(void *)(v3 - 16), v6, *(void *)(v3 - 24) - v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *((void *)this + 64);
    }
    *((void *)this + 65) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 67) + 40))(*((void *)this + 67), v4, *((void *)this + 66) - v4);
  }
  geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet *)((char *)this + 56));
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 5);
    uint64_t v10 = (void *)*((void *)this + 4);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 5);
      do
      {
        uint64_t v13 = *(void **)(v11 - 24);
        v11 -= 24;
        unint64_t v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v8;
    operator delete(v10);
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 2);
    float v16 = (void *)*((void *)this + 1);
    if (v15 != v14)
    {
      do
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v15 - 456));
      while (v15 != v14);
      float v16 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v14;
    operator delete(v16);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  uint64_t v2 = *((void *)this + 64);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 65);
    uint64_t v4 = *((void *)this + 64);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 65);
      do
      {
        uint64_t v7 = *(void *)(v5 - 40);
        v5 -= 40;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 32) = v6;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 16) + 40))(*(void *)(v3 - 16), v6, *(void *)(v3 - 24) - v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *((void *)this + 64);
    }
    *((void *)this + 65) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 67) + 40))(*((void *)this + 67), v4, *((void *)this + 66) - v4);
  }
  geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet *)((char *)this + 56));
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 5);
    uint64_t v10 = (void *)*((void *)this + 4);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 5);
      do
      {
        uint64_t v13 = *(void **)(v11 - 24);
        v11 -= 24;
        unint64_t v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v8;
    operator delete(v10);
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 2);
    float v16 = (void *)*((void *)this + 1);
    if (v15 != v14)
    {
      do
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v15 - 456));
      while (v15 != v14);
      float v16 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v14;
    operator delete(v16);
  }
}

char *std::vector<geo::codec::MaterialSheet::Material>::__push_back_slow_path<geo::codec::MaterialSheet::Material const&>(geo::codec::MaterialSheet::Material **a1, const geo::codec::MaterialSheet::Material *a2)
{
  unint64_t v3 = 0x823EE08FB823EE09 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8FB823EE08FB82) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  if (0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3);
  }
  if (0x823EE08FB823EE09 * ((a1[2] - *a1) >> 3) >= 0x47DC11F7047DC1) {
    unint64_t v6 = 0x8FB823EE08FB82;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8FB823EE08FB82) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(456 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v113 = (geo::codec::MaterialSheet::Material *)&v7[456 * v3];
  BOOL v114 = (geo::codec::MaterialSheet::Material *)&v7[456 * v6];
  geo::codec::MaterialSheet::Material::Material(v113, a2);
  uint64_t v8 = (geo::codec::MaterialSheet::Material *)((char *)v113 + 456);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v113;
    a1[1] = v8;
    a1[2] = v114;
    if (!v10) {
      return (char *)v113 + 456;
    }
    goto LABEL_83;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v13 = (char *)v113 + v11;
    uint64_t v14 = (char *)v10 + v11;
    uint64_t v15 = (char *)v10 + v11 - 456;
    uint64_t v16 = *(void *)v15;
    *(void *)uint64_t v15 = 0;
    float v17 = (char *)v10 + v11 - 448;
    *(void *)((char *)v113 + v11 - 456) = v16;
    uint64_t v18 = (unint64_t *)((char *)v113 + v11 - 448);
    *uint64_t v18 = *(void *)v17;
    *(void *)float v17 = 0;
    uint64_t v19 = (void *)((char *)v113 + v11 - 440);
    BOOL v20 = (char *)v10 + v11 - 440;
    uint64_t v21 = *(void *)v20;
    *uint64_t v19 = *(void *)v20;
    uint64_t v22 = *(void *)((char *)v10 + v11 - 432);
    *(void *)((char *)v113 + v11 - 432) = v22;
    *(_DWORD *)((char *)v113 + v11 - 424) = *(_DWORD *)((char *)v10 + v11 - 424);
    if (v22)
    {
      unint64_t v23 = *(void *)(v21 + 8);
      unint64_t v24 = *v18;
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v23 >= v24) {
          v23 %= v24;
        }
      }
      else
      {
        v23 &= v24 - 1;
      }
      *(void *)(v16 + 8 * v23) = v19;
      *(void *)BOOL v20 = 0;
      *(void *)((char *)v10 + v11 - 432) = 0;
    }
    uint64_t v25 = *((void *)v14 - 52);
    *((void *)v14 - 52) = 0;
    *((void *)v13 - 52) = v25;
    uint64_t v26 = v13 - 408;
    *((void *)v13 - 51) = *((void *)v14 - 51);
    *((void *)v14 - 51) = 0;
    unint64_t v27 = v13 - 400;
    uint8x8_t v28 = v14 - 400;
    uint64_t v29 = *((void *)v14 - 50);
    *((void *)v13 - 50) = v29;
    uint64_t v30 = *((void *)v14 - 49);
    *((void *)v13 - 49) = v30;
    *((_DWORD *)v13 - 96) = *((_DWORD *)v14 - 96);
    if (v30)
    {
      unint64_t v31 = *(void *)(v29 + 8);
      unint64_t v32 = *(void *)v26;
      uint64_t v33 = *(void *)v26 - 1;
      if ((v32 & v33) != 0)
      {
        if (v31 >= v32) {
          v31 %= v32;
        }
      }
      else
      {
        v31 &= v33;
      }
      *(void *)(v25 + 8 * v31) = v27;
      *(void *)uint8x8_t v28 = 0;
      *((void *)v28 + 1) = 0;
    }
    unint64_t v34 = (char *)v113 + v11;
    uint64_t v35 = (char *)v10 + v11;
    char v36 = (char *)v10 + v11 - 376;
    uint64_t v37 = *(void *)v36;
    *(void *)char v36 = 0;
    unint64_t v38 = (char *)v10 + v11 - 368;
    *(void *)((char *)v113 + v11 - 376) = v37;
    unint64_t v39 = (unint64_t *)((char *)v113 + v11 - 368);
    *unint64_t v39 = *(void *)v38;
    *(void *)unint64_t v38 = 0;
    uint64_t v40 = (void *)((char *)v113 + v11 - 360);
    char v41 = (char *)v10 + v11 - 360;
    uint64_t v42 = *(void *)v41;
    *uint64_t v40 = *(void *)v41;
    uint64_t v43 = *(void *)((char *)v10 + v11 - 352);
    *(void *)((char *)v113 + v11 - 352) = v43;
    *(_DWORD *)((char *)v113 + v11 - 344) = *(_DWORD *)((char *)v10 + v11 - 344);
    if (v43)
    {
      unint64_t v44 = *(void *)(v42 + 8);
      unint64_t v45 = *v39;
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v44 >= v45) {
          v44 %= v45;
        }
      }
      else
      {
        v44 &= v45 - 1;
      }
      *(void *)(v37 + 8 * v44) = v40;
      *(void *)char v41 = 0;
      *(void *)((char *)v10 + v11 - 352) = 0;
    }
    uint64_t v46 = *((void *)v35 - 42);
    *((void *)v35 - 42) = 0;
    *((void *)v34 - 42) = v46;
    uint64_t v47 = v34 - 328;
    *((void *)v34 - 41) = *((void *)v35 - 41);
    *((void *)v35 - 41) = 0;
    uint64_t v48 = v34 - 320;
    uint64_t v49 = v35 - 320;
    uint64_t v50 = *((void *)v35 - 40);
    *((void *)v34 - 40) = v50;
    uint64_t v51 = *((void *)v35 - 39);
    *((void *)v34 - 39) = v51;
    *((_DWORD *)v34 - 76) = *((_DWORD *)v35 - 76);
    if (v51)
    {
      unint64_t v52 = *(void *)(v50 + 8);
      unint64_t v53 = *(void *)v47;
      uint64_t v54 = *(void *)v47 - 1;
      if ((v53 & v54) != 0)
      {
        if (v52 >= v53) {
          v52 %= v53;
        }
      }
      else
      {
        v52 &= v54;
      }
      *(void *)(v46 + 8 * v52) = v48;
      *(void *)uint64_t v49 = 0;
      *((void *)v49 + 1) = 0;
    }
    unint64_t v55 = (char *)v113 + v11;
    uint64_t v56 = (char *)v10 + v11;
    uint64_t v57 = (char *)v10 + v11 - 296;
    uint64_t v58 = *(void *)v57;
    *(void *)uint64_t v57 = 0;
    BOOL v59 = (char *)v10 + v11 - 288;
    *(void *)((char *)v113 + v11 - 296) = v58;
    unint64_t v60 = (unint64_t *)((char *)v113 + v11 - 288);
    *unint64_t v60 = *(void *)v59;
    *(void *)BOOL v59 = 0;
    unsigned int v61 = (void *)((char *)v113 + v11 - 280);
    uint64_t v62 = (char *)v10 + v11 - 280;
    uint64_t v63 = *(void *)v62;
    *unsigned int v61 = *(void *)v62;
    uint64_t v64 = *(void *)((char *)v10 + v11 - 272);
    *(void *)((char *)v113 + v11 - 272) = v64;
    *(_DWORD *)((char *)v113 + v11 - 264) = *(_DWORD *)((char *)v10 + v11 - 264);
    if (v64)
    {
      unint64_t v65 = *(void *)(v63 + 8);
      unint64_t v66 = *v60;
      if ((v66 & (v66 - 1)) != 0)
      {
        if (v65 >= v66) {
          v65 %= v66;
        }
      }
      else
      {
        v65 &= v66 - 1;
      }
      *(void *)(v58 + 8 * v65) = v61;
      *(void *)uint64_t v62 = 0;
      *(void *)((char *)v10 + v11 - 272) = 0;
    }
    uint64_t v67 = *((void *)v56 - 32);
    *((void *)v56 - 32) = 0;
    *((void *)v55 - 32) = v67;
    *((void *)v55 - 31) = *((void *)v56 - 31);
    *((void *)v56 - 31) = 0;
    uint64_t v70 = *((void *)v56 - 30);
    uint64_t v68 = v56 - 240;
    uint64_t v69 = v70;
    *((void *)v55 - 30) = v70;
    uint64_t v71 = v55 - 240;
    uint64_t v72 = *((void *)v68 + 1);
    *((void *)v55 - 29) = v72;
    *((_DWORD *)v55 - 56) = *((_DWORD *)v68 + 4);
    if (v72)
    {
      unint64_t v73 = *(void *)(v69 + 8);
      unint64_t v74 = *((void *)v55 - 31);
      if ((v74 & (v74 - 1)) != 0)
      {
        if (v73 >= v74) {
          v73 %= v74;
        }
      }
      else
      {
        v73 &= v74 - 1;
      }
      *(void *)(v67 + 8 * v73) = v71;
      *(void *)uint64_t v68 = 0;
      *((void *)v68 + 1) = 0;
    }
    uint64_t v75 = (char *)v113 + v11;
    unint64_t v76 = (char *)v10 + v11;
    uint64_t v77 = *(void *)((char *)v10 + v11 - 216);
    *((void *)v76 - 27) = 0;
    *((void *)v75 - 27) = v77;
    *((void *)v75 - 26) = *(void *)((char *)v10 + v11 - 208);
    *((void *)v76 - 26) = 0;
    uint64_t v78 = *(void *)((char *)v10 + v11 - 200);
    *(void *)((char *)v113 + v11 - 200) = v78;
    uint64_t v79 = *(void *)((char *)v10 + v11 - 192);
    *((void *)v75 - 24) = v79;
    *((_DWORD *)v75 - 46) = *(_DWORD *)((char *)v10 + v11 - 184);
    if (v79)
    {
      unint64_t v80 = *(void *)(v78 + 8);
      unint64_t v81 = *((void *)v75 - 26);
      if ((v81 & (v81 - 1)) != 0)
      {
        if (v80 >= v81) {
          v80 %= v81;
        }
      }
      else
      {
        v80 &= v81 - 1;
      }
      *(void *)(v77 + 8 * v80) = (char *)v113 + v11 - 200;
      *(void *)((char *)v10 + v11 - 200) = 0;
      *(void *)((char *)v10 + v11 - 192) = 0;
    }
    uint64_t v82 = *((void *)v76 - 22);
    *((void *)v76 - 22) = 0;
    *((void *)v75 - 22) = v82;
    *((void *)v75 - 21) = *((void *)v76 - 21);
    *((void *)v76 - 21) = 0;
    uint64_t v85 = *((void *)v76 - 20);
    unint64_t v83 = v76 - 160;
    uint64_t v84 = v85;
    *((void *)v75 - 20) = v85;
    uint64_t v86 = v75 - 160;
    uint64_t v87 = *((void *)v83 + 1);
    *((void *)v75 - 19) = v87;
    *((_DWORD *)v75 - 36) = *((_DWORD *)v83 + 4);
    if (v87)
    {
      unint64_t v88 = *(void *)(v84 + 8);
      unint64_t v89 = *((void *)v75 - 21);
      if ((v89 & (v89 - 1)) != 0)
      {
        if (v88 >= v89) {
          v88 %= v89;
        }
      }
      else
      {
        v88 &= v89 - 1;
      }
      *(void *)(v82 + 8 * v88) = v86;
      *(void *)unint64_t v83 = 0;
      *((void *)v83 + 1) = 0;
    }
    unint64_t v90 = (char *)v113 + v11;
    uint64_t v91 = (char *)v10 + v11;
    uint64_t v92 = *(void *)((char *)v10 + v11 - 136);
    *((void *)v91 - 17) = 0;
    *((void *)v90 - 17) = v92;
    *((void *)v90 - 16) = *(void *)((char *)v10 + v11 - 128);
    *((void *)v91 - 16) = 0;
    uint64_t v93 = *(void *)((char *)v10 + v11 - 120);
    *(void *)((char *)v113 + v11 - 120) = v93;
    uint64_t v94 = *(void *)((char *)v10 + v11 - 112);
    *((void *)v90 - 14) = v94;
    *((_DWORD *)v90 - 26) = *(_DWORD *)((char *)v10 + v11 - 104);
    if (v94)
    {
      unint64_t v95 = *(void *)(v93 + 8);
      unint64_t v96 = *((void *)v90 - 16);
      if ((v96 & (v96 - 1)) != 0)
      {
        if (v95 >= v96) {
          v95 %= v96;
        }
      }
      else
      {
        v95 &= v96 - 1;
      }
      *(void *)(v92 + 8 * v95) = (char *)v113 + v11 - 120;
      *(void *)((char *)v10 + v11 - 120) = 0;
      *(void *)((char *)v10 + v11 - 112) = 0;
    }
    uint64_t v97 = *((void *)v91 - 12);
    *((void *)v91 - 12) = 0;
    *((void *)v90 - 12) = v97;
    *((void *)v90 - 11) = *((void *)v91 - 11);
    *((void *)v91 - 11) = 0;
    uint64_t v100 = *((void *)v91 - 10);
    uint64_t v98 = v91 - 80;
    uint64_t v99 = v100;
    *((void *)v90 - 10) = v100;
    unint64_t v101 = v90 - 80;
    uint64_t v102 = *((void *)v98 + 1);
    *((void *)v90 - 9) = v102;
    *((_DWORD *)v90 - 16) = *((_DWORD *)v98 + 4);
    if (v102)
    {
      unint64_t v103 = *(void *)(v99 + 8);
      unint64_t v104 = *((void *)v90 - 11);
      if ((v104 & (v104 - 1)) != 0)
      {
        if (v103 >= v104) {
          v103 %= v104;
        }
      }
      else
      {
        v103 &= v104 - 1;
      }
      *(void *)(v97 + 8 * v103) = v101;
      *(void *)uint64_t v98 = 0;
      *((void *)v98 + 1) = 0;
    }
    BOOL v105 = (char *)v113 + v11;
    BOOL v106 = (char *)v10 + v11;
    *((void *)v105 - 7) = *(void *)((char *)v10 + v11 - 56);
    uint64_t v107 = *(void *)((char *)v10 + v11 - 48);
    *((void *)v106 - 6) = 0;
    *((void *)v105 - 6) = v107;
    *((void *)v105 - 5) = *(void *)((char *)v10 + v11 - 40);
    *((void *)v106 - 5) = 0;
    uint64_t v108 = *(void *)((char *)v10 + v11 - 32);
    *(void *)((char *)v113 + v11 - 32) = v108;
    uint64_t v109 = *(void *)((char *)v10 + v11 - 24);
    *((void *)v105 - 3) = v109;
    *((_DWORD *)v105 - 4) = *(_DWORD *)((char *)v10 + v11 - 16);
    if (v109)
    {
      unint64_t v12 = *(void *)(v108 + 8);
      unint64_t v110 = *((void *)v105 - 5);
      if ((v110 & (v110 - 1)) != 0)
      {
        if (v12 >= v110) {
          v12 %= v110;
        }
      }
      else
      {
        v12 &= v110 - 1;
      }
      *(void *)(v107 + 8 * v12) = (char *)v113 + v11 - 32;
      *(void *)((char *)v10 + v11 - 32) = 0;
      *(void *)((char *)v10 + v11 - 24) = 0;
    }
    *((_WORD *)v105 - 4) = *((_WORD *)v106 - 4);
    v11 -= 456;
  }
  while ((geo::codec::MaterialSheet::Material *)((char *)v10 + v11) != v9);
  uint64_t v10 = *a1;
  __int16 v111 = a1[1];
  *a1 = (geo::codec::MaterialSheet::Material *)((char *)v113 + v11);
  a1[1] = v8;
  a1[2] = v114;
  while (v111 != v10)
    geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)((char *)v111 - 456));
  if (v10) {
LABEL_83:
  }
    operator delete(v10);
  return (char *)v113 + 456;
}

void sub_1A18D8D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<geo::codec::MaterialSheet::Material>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void geo::codec::MaterialSheet::Material::~Material(geo::codec::MaterialSheet::Material *this)
{
  uint64_t v2 = (void *)*((void *)this + 53);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 47);
  if (v5)
  {
    do
    {
      uint64_t v21 = (void *)*v5;
      uint64_t v22 = (void *)v5[3];
      if (v22)
      {
        v5[4] = v22;
        operator delete(v22);
      }
      operator delete(v5);
      uint64_t v5 = v21;
    }
    while (v21);
  }
  unint64_t v6 = (void *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v6) {
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table((uint64_t)this + 320);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table((uint64_t)this + 280);
  uint64_t v7 = (void *)*((void *)this + 32);
  if (v7)
  {
    do
    {
      unint64_t v23 = (void *)*v7;
      unint64_t v24 = (void *)v7[3];
      if (v24)
      {
        void v7[4] = v24;
        operator delete(v24);
      }
      operator delete(v7);
      uint64_t v7 = v23;
    }
    while (v23);
  }
  uint64_t v8 = (void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 27);
  if (v9)
  {
    do
    {
      uint64_t v25 = (void *)*v9;
      uint64_t v26 = (void *)v9[3];
      if (v26)
      {
        v9[4] = v26;
        operator delete(v26);
      }
      operator delete(v9);
      uint64_t v9 = v25;
    }
    while (v25);
  }
  uint64_t v10 = (void *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 22);
  if (v11)
  {
    do
    {
      unint64_t v27 = (void *)*v11;
      uint8x8_t v28 = (void *)v11[3];
      if (v28)
      {
        v11[4] = v28;
        operator delete(v28);
      }
      operator delete(v11);
      uint64_t v11 = v27;
    }
    while (v27);
  }
  unint64_t v12 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 17);
  if (v13)
  {
    do
    {
      uint64_t v29 = (void *)*v13;
      uint64_t v30 = (void *)v13[3];
      if (v30)
      {
        v13[4] = v30;
        operator delete(v30);
      }
      operator delete(v13);
      uint64_t v13 = v29;
    }
    while (v29);
  }
  uint64_t v14 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v14) {
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 12);
  if (v15)
  {
    do
    {
      unint64_t v31 = (void *)*v15;
      unint64_t v32 = (void *)v15[3];
      if (v32)
      {
        v15[4] = v32;
        operator delete(v32);
      }
      operator delete(v15);
      uint64_t v15 = v31;
    }
    while (v31);
  }
  uint64_t v16 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v16) {
    operator delete(v16);
  }
  float v17 = (void *)*((void *)this + 7);
  if (v17)
  {
    do
    {
      uint64_t v33 = (void *)*v17;
      unint64_t v34 = (void *)v17[3];
      if (v34)
      {
        v17[4] = v34;
        operator delete(v34);
      }
      operator delete(v17);
      float v17 = v33;
    }
    while (v33);
  }
  uint64_t v18 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 2);
  if (v19)
  {
    do
    {
      uint64_t v35 = (void *)*v19;
      char v36 = (void *)v19[3];
      if (v36)
      {
        v19[4] = v36;
        operator delete(v36);
      }
      operator delete(v19);
      uint64_t v19 = v35;
    }
    while (v35);
  }
  BOOL v20 = *(void **)this;
  *(void *)this = 0;
  if (v20) {
    operator delete(v20);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v6 = (void *)*v2;
      uint64_t v7 = v2[3];
      if (v7)
      {
        uint64_t v8 = v2[4];
        uint64_t v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            uint64_t v9 = *(void **)(v8 - 24);
            if (v9)
            {
              do
              {
                uint64_t v10 = (void *)*v9;
                operator delete(v9);
                uint64_t v9 = v10;
              }
              while (v10);
            }
            uint64_t v11 = *(void **)(v8 - 40);
            *(void *)(v8 - 40) = 0;
            if (v11) {
              operator delete(v11);
            }
            v8 -= 48;
          }
          while (v8 != v7);
          uint64_t v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18D9164(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18D9178(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18D92A8(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18D92BC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

geo::codec::MaterialSheet::Material *geo::codec::MaterialSheet::Material::Material(geo::codec::MaterialSheet::Material *this, const geo::codec::MaterialSheet::Material *a2)
{
  BOOL v6 = this;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  size_t prime = *((void *)a2 + 1);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_3:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6, prime);
    goto LABEL_4;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    int8x8_t v286 = *(int8x8_t *)((char *)v6 + 8);
    BOOL v287 = prime >= *(void *)&v286;
    if (prime > *(void *)&v286) {
      goto LABEL_3;
    }
  }
  else
  {
    int8x8_t v286 = 0;
    BOOL v287 = 1;
    if (prime) {
      goto LABEL_3;
    }
  }
  if (!v287)
  {
    unint64_t v298 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 3) / *((float *)v6 + 8));
    if (*(void *)&v286 < 3uLL || (uint8x8_t v299 = (uint8x8_t)vcnt_s8(v286), v299.i16[0] = vaddlv_u8(v299), v299.u32[0] > 1uLL))
    {
      unint64_t v298 = std::__next_prime(v298);
    }
    else
    {
      uint64_t v300 = 1 << -(char)__clz(v298 - 1);
      if (v298 >= 2) {
        unint64_t v298 = v300;
      }
    }
    if (prime <= v298) {
      size_t prime = v298;
    }
    if (prime < *(void *)&v286) {
      goto LABEL_3;
    }
  }
LABEL_4:
  unint64_t v8 = *((void *)a2 + 2);
  if (v8)
  {
    unint64_t v4 = *((void *)v6 + 1);
    do
    {
      unint64_t v5 = *(unsigned __int8 *)(v8 + 16);
      if (v4)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *(unsigned __int8 *)(v8 + 16);
          if (v4 <= v5) {
            unint64_t v2 = v5 % v4;
          }
        }
        else
        {
          unint64_t v2 = (v4 - 1) & v5;
        }
        uint64_t v10 = *(uint64_t ****)(*(void *)v6 + 8 * v2);
        if (v10)
        {
          uint64_t v11 = *v10;
          if (v11)
          {
            if (v9.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v13 = v11[1];
                if (v13 == (uint64_t *)v5)
                {
                  if (*((unsigned __int8 *)v11 + 16) == v5) {
                    goto LABEL_68;
                  }
                }
                else if (((unint64_t)v13 & (v4 - 1)) != v2)
                {
                  goto LABEL_26;
                }
                uint64_t v11 = (uint64_t **)*v11;
                if (!v11) {
                  goto LABEL_26;
                }
              }
            }
            do
            {
              unint64_t v12 = (unint64_t)v11[1];
              if (v12 == v5)
              {
                if (*((unsigned __int8 *)v11 + 16) == v5) {
                  goto LABEL_68;
                }
              }
              else
              {
                if (v12 >= v4) {
                  v12 %= v4;
                }
                if (v12 != v2) {
                  break;
                }
              }
              uint64_t v11 = (uint64_t **)*v11;
            }
            while (v11);
          }
        }
      }
LABEL_26:
      uint64_t v14 = operator new(0x30uLL);
      unint64_t v342 = v14;
      *uint64_t v14 = 0;
      v14[1] = v5;
      *((unsigned char *)v14 + 16) = *(unsigned char *)(v8 + 16);
      v14[4] = 0;
      v14[5] = 0;
      v14[3] = 0;
      uint64_t v15 = *(void *)(v8 + 24);
      unint64_t v3 = *(void *)(v8 + 32);
      int64_t v16 = v3 - v15;
      if (v3 != v15)
      {
        unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v16 >> 2);
        if (v17 >= 0xCCCCCCCCCCCCCCDLL) {
          abort();
        }
        uint64_t v18 = (char *)operator new(v16);
        v14[3] = v18;
        v14[4] = v18;
        v14[5] = &v18[20 * v17];
        do
        {
          *(_WORD *)uint64_t v18 = *(_WORD *)v15;
          *(_OWORD *)(v18 + 4) = *(_OWORD *)(v15 + 4);
          v18 += 20;
          v15 += 20;
        }
        while (v15 != v3);
        v14[4] = v18;
      }
      float v19 = (float)(unint64_t)(*((void *)v6 + 3) + 1);
      float v20 = *((float *)v6 + 8);
      if (!v4 || (float)(v20 * (float)v4) < v19)
      {
        BOOL v21 = (v4 & (v4 - 1)) != 0;
        if (v4 < 3) {
          BOOL v21 = 1;
        }
        unint64_t v22 = v21 | (2 * v4);
        unint64_t v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23) {
          size_t v24 = v23;
        }
        else {
          size_t v24 = v22;
        }
        if (v24 == 1)
        {
          size_t v24 = 2;
        }
        else if ((v24 & (v24 - 1)) != 0)
        {
          size_t v24 = std::__next_prime(v24);
          unint64_t v4 = *((void *)v6 + 1);
        }
        if (v24 > v4) {
          goto LABEL_43;
        }
        if (v24 < v4)
        {
          unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 3) / *((float *)v6 + 8));
          if (v4 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
          {
            unint64_t v25 = std::__next_prime(v25);
          }
          else
          {
            uint64_t v27 = 1 << -(char)__clz(v25 - 1);
            if (v25 >= 2) {
              unint64_t v25 = v27;
            }
          }
          if (v24 <= v25) {
            size_t v24 = v25;
          }
          if (v24 < v4) {
LABEL_43:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6, v24);
        }
        unint64_t v4 = *((void *)v6 + 1);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v4 <= v5) {
            unint64_t v2 = v5 % v4;
          }
          else {
            unint64_t v2 = v5;
          }
        }
        else
        {
          unint64_t v2 = (v4 - 1) & v5;
        }
      }
      uint8x8_t v28 = *(void **)(*(void *)v6 + 8 * v2);
      if (v28)
      {
        *unint64_t v342 = *v28;
        *uint8x8_t v28 = v342;
      }
      else
      {
        *unint64_t v342 = *((void *)v6 + 2);
        *((void *)v6 + 2) = v342;
        *(void *)(*(void *)v6 + 8 * v2) = (char *)v6 + 16;
        if (*v342)
        {
          unint64_t v29 = *(void *)(*v342 + 8);
          if ((v4 & (v4 - 1)) != 0)
          {
            if (v29 >= v4) {
              v29 %= v4;
            }
          }
          else
          {
            v29 &= v4 - 1;
          }
          *(void *)(*(void *)v6 + 8 * v29) = v342;
        }
      }
      ++*((void *)v6 + 3);
LABEL_68:
      unint64_t v8 = *(void *)v8;
    }
    while (v8);
  }
  *(_OWORD *)((char *)v6 + 40) = 0u;
  uint64_t v30 = (void *)((char *)v6 + 40);
  *(_OWORD *)((char *)v6 + 56) = 0u;
  *((_DWORD *)v6 + 18) = *((_DWORD *)a2 + 18);
  size_t v31 = *((void *)a2 + 6);
  if (v31 == 1)
  {
    size_t v31 = 2;
LABEL_71:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 40, v31);
    goto LABEL_72;
  }
  if ((v31 & (v31 - 1)) != 0)
  {
    size_t v31 = std::__next_prime(v31);
    unint64_t v8 = *((void *)v6 + 6);
    BOOL v288 = v31 >= v8;
    if (v31 > v8) {
      goto LABEL_71;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v288 = 1;
    if (v31) {
      goto LABEL_71;
    }
  }
  if (!v288)
  {
    unint64_t v301 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 8) / *((float *)v6 + 18));
    if (v8 < 3 || (uint8x8_t v302 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v302.i16[0] = vaddlv_u8(v302), v302.u32[0] > 1uLL))
    {
      unint64_t v301 = std::__next_prime(v301);
    }
    else
    {
      uint64_t v303 = 1 << -(char)__clz(v301 - 1);
      if (v301 >= 2) {
        unint64_t v301 = v303;
      }
    }
    if (v31 <= v301) {
      size_t v31 = v301;
    }
    if (v31 < v8) {
      goto LABEL_71;
    }
  }
LABEL_72:
  unint64_t v32 = (uint64_t *)*((void *)a2 + 7);
  if (v32)
  {
    uint64_t v33 = (void *)((char *)v6 + 56);
    unint64_t v34 = *((void *)v6 + 6);
    do
    {
      unint64_t v3 = *((unsigned __int8 *)v32 + 16);
      if (v34)
      {
        uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          unint64_t v4 = *((unsigned __int8 *)v32 + 16);
          if (v34 <= v3) {
            unint64_t v4 = v3 % v34;
          }
        }
        else
        {
          unint64_t v4 = (v34 - 1) & v3;
        }
        char v36 = *(uint64_t ****)(*v30 + 8 * v4);
        if (v36)
        {
          uint64_t v37 = *v36;
          if (v37)
          {
            if (v35.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v39 = v37[1];
                if (v39 == (uint64_t *)v3)
                {
                  if (*((unsigned __int8 *)v37 + 16) == v3) {
                    goto LABEL_137;
                  }
                }
                else if (((unint64_t)v39 & (v34 - 1)) != v4)
                {
                  goto LABEL_94;
                }
                uint64_t v37 = (uint64_t **)*v37;
                if (!v37) {
                  goto LABEL_94;
                }
              }
            }
            do
            {
              unint64_t v38 = (unint64_t)v37[1];
              if (v38 == v3)
              {
                if (*((unsigned __int8 *)v37 + 16) == v3) {
                  goto LABEL_137;
                }
              }
              else
              {
                if (v38 >= v34) {
                  v38 %= v34;
                }
                if (v38 != v4) {
                  break;
                }
              }
              uint64_t v37 = (uint64_t **)*v37;
            }
            while (v37);
          }
        }
      }
LABEL_94:
      uint64_t v40 = operator new(0x30uLL);
      int8x8_t v343 = v40;
      *uint64_t v40 = 0;
      v40[1] = v3;
      *((unsigned char *)v40 + 16) = *((unsigned char *)v32 + 16);
      v40[4] = 0;
      v40[5] = 0;
      v40[3] = 0;
      unint64_t v5 = v32[3];
      uint64_t v41 = v32[4];
      unint64_t v8 = v41 - v5;
      if (v41 != v5)
      {
        if ((v8 & 0x8000000000000000) != 0) {
          abort();
        }
        uint64_t v42 = (char *)operator new(v41 - v5);
        v40[3] = v42;
        v40[4] = v42;
        v40[5] = &v42[16 * ((uint64_t)v8 >> 4)];
        do
        {
          *(_WORD *)uint64_t v42 = *(_WORD *)v5;
          uint64_t v43 = *(void *)(v5 + 4);
          *((_DWORD *)v42 + 3) = *(_DWORD *)(v5 + 12);
          *(void *)(v42 + 4) = v43;
          v42 += 16;
          v5 += 16;
        }
        while (v5 != v41);
        v40[4] = v42;
      }
      float v44 = (float)(unint64_t)(*((void *)v6 + 8) + 1);
      float v45 = *((float *)v6 + 18);
      if (v34 && (float)(v45 * (float)v34) >= v44)
      {
        uint64_t v30 = (void *)((char *)v6 + 40);
      }
      else
      {
        BOOL v46 = (v34 & (v34 - 1)) != 0;
        if (v34 < 3) {
          BOOL v46 = 1;
        }
        unint64_t v47 = v46 | (2 * v34);
        unint64_t v48 = vcvtps_u32_f32(v44 / v45);
        if (v47 <= v48) {
          size_t v49 = v48;
        }
        else {
          size_t v49 = v47;
        }
        uint64_t v30 = (void *)((char *)v6 + 40);
        if (v49 == 1)
        {
          size_t v49 = 2;
        }
        else if ((v49 & (v49 - 1)) != 0)
        {
          size_t v49 = std::__next_prime(v49);
          unint64_t v34 = *((void *)v6 + 6);
        }
        if (v49 > v34) {
          goto LABEL_112;
        }
        if (v49 < v34)
        {
          unint64_t v50 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 8) / *((float *)v6 + 18));
          if (v34 < 3 || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
          {
            unint64_t v50 = std::__next_prime(v50);
          }
          else
          {
            uint64_t v52 = 1 << -(char)__clz(v50 - 1);
            if (v50 >= 2) {
              unint64_t v50 = v52;
            }
          }
          if (v49 <= v50) {
            size_t v49 = v50;
          }
          if (v49 < v34) {
LABEL_112:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 40, v49);
        }
        unint64_t v34 = *((void *)v6 + 6);
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v34 <= v3) {
            unint64_t v4 = v3 % v34;
          }
          else {
            unint64_t v4 = v3;
          }
        }
        else
        {
          unint64_t v4 = (v34 - 1) & v3;
        }
      }
      unint64_t v53 = *(void **)(*v30 + 8 * v4);
      if (v53)
      {
        *int8x8_t v343 = *v53;
        *unint64_t v53 = v343;
      }
      else
      {
        *int8x8_t v343 = *v33;
        *uint64_t v33 = v343;
        *(void *)(*v30 + 8 * v4) = v33;
        if (*v343)
        {
          unint64_t v54 = *(void *)(*v343 + 8);
          if ((v34 & (v34 - 1)) != 0)
          {
            if (v54 >= v34) {
              v54 %= v34;
            }
          }
          else
          {
            v54 &= v34 - 1;
          }
          *(void *)(*v30 + 8 * v54) = v343;
        }
      }
      ++*((void *)v6 + 8);
LABEL_137:
      unint64_t v32 = (uint64_t *)*v32;
    }
    while (v32);
  }
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_DWORD *)v6 + 28) = *((_DWORD *)a2 + 28);
  size_t v55 = *((void *)a2 + 11);
  uint64_t v341 = (void *)((char *)v6 + 80);
  if (v55 == 1)
  {
    size_t v55 = 2;
LABEL_140:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 80, v55);
    goto LABEL_141;
  }
  if ((v55 & (v55 - 1)) != 0)
  {
    size_t v55 = std::__next_prime(v55);
    unint64_t v8 = *((void *)v6 + 11);
    BOOL v289 = v55 >= v8;
    if (v55 > v8) {
      goto LABEL_140;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v289 = 1;
    if (v55) {
      goto LABEL_140;
    }
  }
  if (!v289)
  {
    unint64_t v304 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 13) / *((float *)v6 + 28));
    if (v8 < 3 || (uint8x8_t v305 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v305.i16[0] = vaddlv_u8(v305), v305.u32[0] > 1uLL))
    {
      unint64_t v304 = std::__next_prime(v304);
    }
    else
    {
      uint64_t v306 = 1 << -(char)__clz(v304 - 1);
      if (v304 >= 2) {
        unint64_t v304 = v306;
      }
    }
    if (v55 <= v304) {
      size_t v55 = v304;
    }
    if (v55 < v8) {
      goto LABEL_140;
    }
  }
LABEL_141:
  uint64_t v56 = (uint64_t *)*((void *)a2 + 12);
  if (v56)
  {
    uint64_t v57 = (void *)((char *)v6 + 96);
    unint64_t v4 = *((void *)v6 + 11);
    do
    {
      unint64_t v5 = *((unsigned __int8 *)v56 + 16);
      if (v4)
      {
        uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          unint64_t v3 = *((unsigned __int8 *)v56 + 16);
          if (v4 <= v5) {
            unint64_t v3 = v5 % v4;
          }
        }
        else
        {
          unint64_t v3 = (v4 - 1) & v5;
        }
        BOOL v59 = *(uint64_t ****)(*v341 + 8 * v3);
        if (v59)
        {
          unint64_t v60 = *v59;
          if (v60)
          {
            if (v58.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v62 = v60[1];
                if (v62 == (uint64_t *)v5)
                {
                  if (*((unsigned __int8 *)v60 + 16) == v5) {
                    goto LABEL_203;
                  }
                }
                else if (((unint64_t)v62 & (v4 - 1)) != v3)
                {
                  goto LABEL_163;
                }
                unint64_t v60 = (uint64_t **)*v60;
                if (!v60) {
                  goto LABEL_163;
                }
              }
            }
            do
            {
              unint64_t v61 = (unint64_t)v60[1];
              if (v61 == v5)
              {
                if (*((unsigned __int8 *)v60 + 16) == v5) {
                  goto LABEL_203;
                }
              }
              else
              {
                if (v61 >= v4) {
                  v61 %= v4;
                }
                if (v61 != v3) {
                  break;
                }
              }
              unint64_t v60 = (uint64_t **)*v60;
            }
            while (v60);
          }
        }
      }
LABEL_163:
      uint64_t v63 = operator new(0x30uLL);
      unint64_t v344 = v63;
      void *v63 = 0;
      v63[1] = v5;
      *((unsigned char *)v63 + 16) = *((unsigned char *)v56 + 16);
      v63[4] = 0;
      v63[5] = 0;
      v63[3] = 0;
      unint64_t v8 = v56[3];
      uint64_t v64 = v56[4];
      uint64_t v65 = v64 - v8;
      if (v64 != v8)
      {
        if (v65 < 0) {
          abort();
        }
        unint64_t v66 = (char *)operator new(v64 - v8);
        v63[3] = v66;
        v63[4] = v66;
        v63[5] = &v66[8 * (v65 >> 3)];
        size_t v67 = v65 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v66, (const void *)v8, v67);
        v63[4] = &v66[v67];
      }
      float v68 = (float)(unint64_t)(*((void *)v6 + 13) + 1);
      float v69 = *((float *)v6 + 28);
      if (!v4 || (float)(v69 * (float)v4) < v68)
      {
        BOOL v70 = (v4 & (v4 - 1)) != 0;
        if (v4 < 3) {
          BOOL v70 = 1;
        }
        unint64_t v71 = v70 | (2 * v4);
        unint64_t v72 = vcvtps_u32_f32(v68 / v69);
        if (v71 <= v72) {
          size_t v73 = v72;
        }
        else {
          size_t v73 = v71;
        }
        if (v73 == 1)
        {
          size_t v73 = 2;
        }
        else if ((v73 & (v73 - 1)) != 0)
        {
          size_t v73 = std::__next_prime(v73);
          unint64_t v4 = *((void *)v6 + 11);
        }
        if (v73 > v4) {
          goto LABEL_178;
        }
        if (v73 < v4)
        {
          unint64_t v74 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 13) / *((float *)v6 + 28));
          if (v4 < 3 || (uint8x8_t v75 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
          {
            unint64_t v74 = std::__next_prime(v74);
          }
          else
          {
            uint64_t v76 = 1 << -(char)__clz(v74 - 1);
            if (v74 >= 2) {
              unint64_t v74 = v76;
            }
          }
          if (v73 <= v74) {
            size_t v73 = v74;
          }
          if (v73 < v4) {
LABEL_178:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v341, v73);
        }
        unint64_t v4 = *((void *)v6 + 11);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v4 <= v5) {
            unint64_t v3 = v5 % v4;
          }
          else {
            unint64_t v3 = v5;
          }
        }
        else
        {
          unint64_t v3 = (v4 - 1) & v5;
        }
      }
      uint64_t v77 = *(void **)(*v341 + 8 * v3);
      if (v77)
      {
        *unint64_t v344 = *v77;
        *uint64_t v77 = v344;
      }
      else
      {
        *unint64_t v344 = *v57;
        *uint64_t v57 = v344;
        *(void *)(*v341 + 8 * v3) = v57;
        if (*v344)
        {
          unint64_t v78 = *(void *)(*v344 + 8);
          if ((v4 & (v4 - 1)) != 0)
          {
            if (v78 >= v4) {
              v78 %= v4;
            }
          }
          else
          {
            v78 &= v4 - 1;
          }
          *(void *)(*v341 + 8 * v78) = v344;
        }
      }
      ++*((void *)v6 + 13);
LABEL_203:
      uint64_t v56 = (uint64_t *)*v56;
    }
    while (v56);
  }
  *(_OWORD *)((char *)v6 + 120) = 0u;
  uint64_t v79 = (void *)((char *)v6 + 120);
  *(_OWORD *)((char *)v6 + 136) = 0u;
  *((_DWORD *)v6 + 38) = *((_DWORD *)a2 + 38);
  size_t v80 = *((void *)a2 + 16);
  long long v332 = (void *)((char *)v6 + 120);
  if (v80 == 1)
  {
    size_t v80 = 2;
LABEL_206:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 120, v80);
    goto LABEL_207;
  }
  if ((v80 & (v80 - 1)) != 0)
  {
    size_t v80 = std::__next_prime(v80);
    unint64_t v8 = *((void *)v6 + 16);
    BOOL v290 = v80 >= v8;
    if (v80 > v8) {
      goto LABEL_206;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v290 = 1;
    if (v80) {
      goto LABEL_206;
    }
  }
  if (!v290)
  {
    unint64_t v307 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 18) / *((float *)v6 + 38));
    if (v8 < 3 || (uint8x8_t v308 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v308.i16[0] = vaddlv_u8(v308), v308.u32[0] > 1uLL))
    {
      unint64_t v307 = std::__next_prime(v307);
    }
    else
    {
      uint64_t v309 = 1 << -(char)__clz(v307 - 1);
      if (v307 >= 2) {
        unint64_t v307 = v309;
      }
    }
    if (v80 <= v307) {
      size_t v80 = v307;
    }
    if (v80 < v8) {
      goto LABEL_206;
    }
  }
LABEL_207:
  unint64_t v81 = (uint64_t *)*((void *)a2 + 17);
  if (v81)
  {
    uint64_t v82 = (void *)((char *)v6 + 136);
    unint64_t v5 = *((void *)v6 + 16);
    do
    {
      unint64_t v3 = *((unsigned __int8 *)v81 + 16);
      if (v5)
      {
        uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          unint64_t v4 = *((unsigned __int8 *)v81 + 16);
          if (v5 <= v3) {
            unint64_t v4 = v3 % v5;
          }
        }
        else
        {
          unint64_t v4 = (v5 - 1) & v3;
        }
        uint64_t v84 = *(uint64_t ****)(*v79 + 8 * v4);
        if (v84)
        {
          uint64_t v85 = *v84;
          if (v85)
          {
            if (v83.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v87 = v85[1];
                if (v87 == (uint64_t *)v3)
                {
                  if (*((unsigned __int8 *)v85 + 16) == v3) {
                    goto LABEL_269;
                  }
                }
                else if (((unint64_t)v87 & (v5 - 1)) != v4)
                {
                  goto LABEL_229;
                }
                uint64_t v85 = (uint64_t **)*v85;
                if (!v85) {
                  goto LABEL_229;
                }
              }
            }
            do
            {
              unint64_t v86 = (unint64_t)v85[1];
              if (v86 == v3)
              {
                if (*((unsigned __int8 *)v85 + 16) == v3) {
                  goto LABEL_269;
                }
              }
              else
              {
                if (v86 >= v5) {
                  v86 %= v5;
                }
                if (v86 != v4) {
                  break;
                }
              }
              uint64_t v85 = (uint64_t **)*v85;
            }
            while (v85);
          }
        }
      }
LABEL_229:
      unint64_t v88 = operator new(0x30uLL);
      uint8x8_t v345 = v88;
      *unint64_t v88 = 0;
      v88[1] = v3;
      *((unsigned char *)v88 + 16) = *((unsigned char *)v81 + 16);
      v88[4] = 0;
      v88[5] = 0;
      v88[3] = 0;
      unint64_t v8 = v81[3];
      uint64_t v89 = v81[4];
      size_t v90 = v89 - v8;
      if (v89 != v8)
      {
        if (0xAAAAAAAAAAAAAAABLL * v90 >= 0x5555555555555556) {
          abort();
        }
        uint64_t v91 = (char *)operator new(v90);
        v88[3] = v91;
        v88[4] = v91;
        v88[5] = &v91[v90];
        size_t v92 = 3 * ((v90 - 3) / 3) + 3;
        memcpy(v91, (const void *)v8, v92);
        v88[4] = &v91[v92];
        BOOL v6 = this;
        uint64_t v79 = v332;
      }
      float v93 = (float)(unint64_t)(*((void *)v6 + 18) + 1);
      float v94 = *((float *)v6 + 38);
      if (!v5 || (float)(v94 * (float)v5) < v93)
      {
        BOOL v95 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3) {
          BOOL v95 = 1;
        }
        unint64_t v96 = v95 | (2 * v5);
        unint64_t v97 = vcvtps_u32_f32(v93 / v94);
        if (v96 <= v97) {
          size_t v98 = v97;
        }
        else {
          size_t v98 = v96;
        }
        if (v98 == 1)
        {
          size_t v98 = 2;
        }
        else if ((v98 & (v98 - 1)) != 0)
        {
          size_t v98 = std::__next_prime(v98);
          unint64_t v5 = *((void *)v6 + 16);
        }
        if (v98 > v5) {
          goto LABEL_244;
        }
        if (v98 < v5)
        {
          unint64_t v99 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 18) / *((float *)v6 + 38));
          if (v5 < 3 || (uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v100.i16[0] = vaddlv_u8(v100), v100.u32[0] > 1uLL))
          {
            unint64_t v99 = std::__next_prime(v99);
          }
          else
          {
            uint64_t v101 = 1 << -(char)__clz(v99 - 1);
            if (v99 >= 2) {
              unint64_t v99 = v101;
            }
          }
          if (v98 <= v99) {
            size_t v98 = v99;
          }
          if (v98 < v5) {
LABEL_244:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v79, v98);
        }
        unint64_t v5 = *((void *)v6 + 16);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v3) {
            unint64_t v4 = v3 % v5;
          }
          else {
            unint64_t v4 = v3;
          }
        }
        else
        {
          unint64_t v4 = (v5 - 1) & v3;
        }
      }
      uint64_t v102 = *(void **)(*v79 + 8 * v4);
      if (v102)
      {
        *uint8x8_t v345 = *v102;
        void *v102 = v345;
      }
      else
      {
        *uint8x8_t v345 = *v82;
        void *v82 = v345;
        *(void *)(*v79 + 8 * v4) = v82;
        if (*v345)
        {
          unint64_t v103 = *(void *)(*v345 + 8);
          if ((v5 & (v5 - 1)) != 0)
          {
            if (v103 >= v5) {
              v103 %= v5;
            }
          }
          else
          {
            v103 &= v5 - 1;
          }
          *(void *)(*v79 + 8 * v103) = v345;
        }
      }
      ++*((void *)v6 + 18);
LABEL_269:
      unint64_t v81 = (uint64_t *)*v81;
    }
    while (v81);
  }
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_DWORD *)v6 + 48) = *((_DWORD *)a2 + 48);
  size_t v104 = *((void *)a2 + 21);
  uint8x8_t v340 = (void *)((char *)v6 + 160);
  if (v104 == 1)
  {
    size_t v104 = 2;
LABEL_272:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 160, v104);
    goto LABEL_273;
  }
  if ((v104 & (v104 - 1)) != 0)
  {
    size_t v104 = std::__next_prime(v104);
    unint64_t v8 = *((void *)v6 + 21);
    BOOL v291 = v104 >= v8;
    if (v104 > v8) {
      goto LABEL_272;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v291 = 1;
    if (v104) {
      goto LABEL_272;
    }
  }
  if (!v291)
  {
    unint64_t v310 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 23) / *((float *)v6 + 48));
    if (v8 < 3 || (uint8x8_t v311 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v311.i16[0] = vaddlv_u8(v311), v311.u32[0] > 1uLL))
    {
      unint64_t v310 = std::__next_prime(v310);
    }
    else
    {
      uint64_t v312 = 1 << -(char)__clz(v310 - 1);
      if (v310 >= 2) {
        unint64_t v310 = v312;
      }
    }
    if (v104 <= v310) {
      size_t v104 = v310;
    }
    if (v104 < v8) {
      goto LABEL_272;
    }
  }
LABEL_273:
  unint64_t v105 = *((void *)a2 + 22);
  if (v105)
  {
    BOOL v106 = (void *)((char *)v6 + 176);
    unint64_t v107 = *((void *)v6 + 21);
    do
    {
      unint64_t v5 = *(unsigned __int8 *)(v105 + 16);
      if (v107)
      {
        uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v107);
        v108.i16[0] = vaddlv_u8(v108);
        if (v108.u32[0] > 1uLL)
        {
          unint64_t v3 = *(unsigned __int8 *)(v105 + 16);
          if (v107 <= v5) {
            unint64_t v3 = v5 % v107;
          }
        }
        else
        {
          unint64_t v3 = (v107 - 1) & v5;
        }
        uint64_t v109 = *(uint64_t ****)(*v340 + 8 * v3);
        if (v109)
        {
          unint64_t v110 = *v109;
          if (v110)
          {
            if (v108.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v112 = v110[1];
                if (v112 == (uint64_t *)v5)
                {
                  if (*((unsigned __int8 *)v110 + 16) == v5) {
                    goto LABEL_335;
                  }
                }
                else if (((unint64_t)v112 & (v107 - 1)) != v3)
                {
                  goto LABEL_295;
                }
                unint64_t v110 = (uint64_t **)*v110;
                if (!v110) {
                  goto LABEL_295;
                }
              }
            }
            do
            {
              unint64_t v111 = (unint64_t)v110[1];
              if (v111 == v5)
              {
                if (*((unsigned __int8 *)v110 + 16) == v5) {
                  goto LABEL_335;
                }
              }
              else
              {
                if (v111 >= v107) {
                  v111 %= v107;
                }
                if (v111 != v3) {
                  break;
                }
              }
              unint64_t v110 = (uint64_t **)*v110;
            }
            while (v110);
          }
        }
      }
LABEL_295:
      uint64_t v113 = operator new(0x30uLL);
      uint64_t v346 = v113;
      *uint64_t v113 = 0;
      v113[1] = v5;
      *((unsigned char *)v113 + 16) = *(unsigned char *)(v105 + 16);
      v113[4] = 0;
      v113[5] = 0;
      v113[3] = 0;
      unint64_t v8 = *(void *)(v105 + 24);
      uint64_t v114 = *(void *)(v105 + 32);
      uint64_t v115 = v114 - v8;
      if (v114 != v8)
      {
        if (v115 < 0) {
          abort();
        }
        unint64_t v116 = (char *)operator new(v114 - v8);
        v113[3] = v116;
        v113[4] = v116;
        v113[5] = &v116[8 * (v115 >> 3)];
        size_t v117 = v115 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v116, (const void *)v8, v117);
        v113[4] = &v116[v117];
      }
      float v118 = (float)(unint64_t)(*((void *)v6 + 23) + 1);
      float v119 = *((float *)v6 + 48);
      if (!v107 || (float)(v119 * (float)v107) < v118)
      {
        BOOL v120 = (v107 & (v107 - 1)) != 0;
        if (v107 < 3) {
          BOOL v120 = 1;
        }
        unint64_t v121 = v120 | (2 * v107);
        unint64_t v122 = vcvtps_u32_f32(v118 / v119);
        if (v121 <= v122) {
          size_t v123 = v122;
        }
        else {
          size_t v123 = v121;
        }
        if (v123 == 1)
        {
          size_t v123 = 2;
        }
        else if ((v123 & (v123 - 1)) != 0)
        {
          size_t v123 = std::__next_prime(v123);
          unint64_t v107 = *((void *)v6 + 21);
        }
        if (v123 > v107) {
          goto LABEL_310;
        }
        if (v123 < v107)
        {
          unint64_t v124 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 23) / *((float *)v6 + 48));
          if (v107 < 3
            || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v107), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
          {
            unint64_t v124 = std::__next_prime(v124);
          }
          else
          {
            uint64_t v126 = 1 << -(char)__clz(v124 - 1);
            if (v124 >= 2) {
              unint64_t v124 = v126;
            }
          }
          if (v123 <= v124) {
            size_t v123 = v124;
          }
          if (v123 < v107) {
LABEL_310:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v340, v123);
        }
        unint64_t v107 = *((void *)v6 + 21);
        if ((v107 & (v107 - 1)) != 0)
        {
          if (v107 <= v5) {
            unint64_t v3 = v5 % v107;
          }
          else {
            unint64_t v3 = v5;
          }
        }
        else
        {
          unint64_t v3 = (v107 - 1) & v5;
        }
      }
      unint64_t v127 = *(void **)(*v340 + 8 * v3);
      if (v127)
      {
        void *v346 = *v127;
        *unint64_t v127 = v346;
      }
      else
      {
        void *v346 = *v106;
        *BOOL v106 = v346;
        *(void *)(*v340 + 8 * v3) = v106;
        if (*v346)
        {
          unint64_t v128 = *(void *)(*v346 + 8);
          if ((v107 & (v107 - 1)) != 0)
          {
            if (v128 >= v107) {
              v128 %= v107;
            }
          }
          else
          {
            v128 &= v107 - 1;
          }
          *(void *)(*v340 + 8 * v128) = v346;
        }
      }
      ++*((void *)v6 + 23);
LABEL_335:
      unint64_t v105 = *(void *)v105;
    }
    while (v105);
  }
  *(_OWORD *)((char *)v6 + 200) = 0u;
  long long v129 = (void *)((char *)v6 + 200);
  *(_OWORD *)((char *)v6 + 216) = 0u;
  *((_DWORD *)v6 + 58) = *((_DWORD *)a2 + 58);
  size_t v130 = *((void *)a2 + 26);
  if (v130 == 1)
  {
    size_t v130 = 2;
LABEL_338:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 200, v130);
    goto LABEL_339;
  }
  if ((v130 & (v130 - 1)) != 0)
  {
    size_t v130 = std::__next_prime(v130);
    unint64_t v8 = *((void *)v6 + 26);
    BOOL v292 = v130 >= v8;
    if (v130 > v8) {
      goto LABEL_338;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v292 = 1;
    if (v130) {
      goto LABEL_338;
    }
  }
  if (!v292)
  {
    unint64_t v313 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 28) / *((float *)v6 + 58));
    if (v8 < 3 || (uint8x8_t v314 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v314.i16[0] = vaddlv_u8(v314), v314.u32[0] > 1uLL))
    {
      unint64_t v313 = std::__next_prime(v313);
    }
    else
    {
      uint64_t v315 = 1 << -(char)__clz(v313 - 1);
      if (v313 >= 2) {
        unint64_t v313 = v315;
      }
    }
    if (v130 <= v313) {
      size_t v130 = v313;
    }
    if (v130 < v8) {
      goto LABEL_338;
    }
  }
LABEL_339:
  uint64_t v131 = (uint64_t *)*((void *)a2 + 27);
  if (v131)
  {
    uint64_t v132 = (void *)((char *)v6 + 216);
    unint64_t v5 = *((void *)v6 + 26);
    do
    {
      unint64_t v133 = *((unsigned __int8 *)v131 + 16);
      if (v5)
      {
        uint8x8_t v134 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v134.i16[0] = vaddlv_u8(v134);
        if (v134.u32[0] > 1uLL)
        {
          unint64_t v105 = *((unsigned __int8 *)v131 + 16);
          if (v5 <= v133) {
            unint64_t v105 = v133 % v5;
          }
        }
        else
        {
          unint64_t v105 = (v5 - 1) & v133;
        }
        uint64_t v135 = *(uint64_t ****)(*v129 + 8 * v105);
        if (v135)
        {
          unint64_t v136 = *v135;
          if (v136)
          {
            if (v134.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v138 = v136[1];
                if (v138 == (uint64_t *)v133)
                {
                  if (*((unsigned __int8 *)v136 + 16) == v133) {
                    goto LABEL_402;
                  }
                }
                else if (((unint64_t)v138 & (v5 - 1)) != v105)
                {
                  goto LABEL_361;
                }
                unint64_t v136 = (uint64_t **)*v136;
                if (!v136) {
                  goto LABEL_361;
                }
              }
            }
            do
            {
              unint64_t v137 = (unint64_t)v136[1];
              if (v137 == v133)
              {
                if (*((unsigned __int8 *)v136 + 16) == v133) {
                  goto LABEL_402;
                }
              }
              else
              {
                if (v137 >= v5) {
                  v137 %= v5;
                }
                if (v137 != v105) {
                  break;
                }
              }
              unint64_t v136 = (uint64_t **)*v136;
            }
            while (v136);
          }
        }
      }
LABEL_361:
      uint64_t v139 = operator new(0x30uLL);
      char v347 = v139;
      void *v139 = 0;
      v139[1] = v133;
      *((unsigned char *)v139 + 16) = *((unsigned char *)v131 + 16);
      v139[4] = 0;
      v139[5] = 0;
      v139[3] = 0;
      unint64_t v8 = v131[3];
      uint64_t v140 = v131[4];
      uint64_t v337 = v131;
      size_t v141 = v140 - v8;
      if (v140 != v8)
      {
        if (0xAAAAAAAAAAAAAAABLL * v141 >= 0x5555555555555556) {
          abort();
        }
        uint64_t v142 = (char *)operator new(v141);
        v139[3] = v142;
        v139[4] = v142;
        v139[5] = &v142[v141];
        size_t v143 = 3 * ((v141 - 3) / 3) + 3;
        memcpy(v142, (const void *)v8, v143);
        v139[4] = &v142[v143];
        long long v129 = (void *)((char *)v6 + 200);
      }
      float v144 = (float)(unint64_t)(*((void *)v6 + 28) + 1);
      float v145 = *((float *)v6 + 58);
      if (v5 && (float)(v145 * (float)v5) >= v144)
      {
        uint64_t v131 = v337;
      }
      else
      {
        BOOL v146 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3) {
          BOOL v146 = 1;
        }
        unint64_t v147 = v146 | (2 * v5);
        unint64_t v148 = vcvtps_u32_f32(v144 / v145);
        if (v147 <= v148) {
          size_t v149 = v148;
        }
        else {
          size_t v149 = v147;
        }
        uint64_t v131 = v337;
        if (v149 == 1)
        {
          size_t v149 = 2;
        }
        else if ((v149 & (v149 - 1)) != 0)
        {
          size_t v149 = std::__next_prime(v149);
          unint64_t v5 = *((void *)v6 + 26);
        }
        if (v149 > v5) {
          goto LABEL_377;
        }
        if (v149 < v5)
        {
          unint64_t v150 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 28) / *((float *)v6 + 58));
          if (v5 < 3 || (uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v151.i16[0] = vaddlv_u8(v151), v151.u32[0] > 1uLL))
          {
            unint64_t v150 = std::__next_prime(v150);
          }
          else
          {
            uint64_t v152 = 1 << -(char)__clz(v150 - 1);
            if (v150 >= 2) {
              unint64_t v150 = v152;
            }
          }
          if (v149 <= v150) {
            size_t v149 = v150;
          }
          if (v149 < v5) {
LABEL_377:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v129, v149);
        }
        unint64_t v5 = *((void *)v6 + 26);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v133) {
            unint64_t v105 = v133 % v5;
          }
          else {
            unint64_t v105 = v133;
          }
        }
        else
        {
          unint64_t v105 = (v5 - 1) & v133;
        }
      }
      uint64_t v153 = *(void **)(*v129 + 8 * v105);
      if (v153)
      {
        *char v347 = *v153;
        void *v153 = v347;
      }
      else
      {
        *char v347 = *v132;
        void *v132 = v347;
        *(void *)(*v129 + 8 * v105) = v132;
        if (*v347)
        {
          unint64_t v154 = *(void *)(*v347 + 8);
          if ((v5 & (v5 - 1)) != 0)
          {
            if (v154 >= v5) {
              v154 %= v5;
            }
          }
          else
          {
            v154 &= v5 - 1;
          }
          *(void *)(*v129 + 8 * v154) = v347;
        }
      }
      ++*((void *)v6 + 28);
LABEL_402:
      uint64_t v131 = (uint64_t *)*v131;
    }
    while (v131);
  }
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  uint64_t v155 = (void *)((char *)v6 + 240);
  *((_DWORD *)v6 + 68) = *((_DWORD *)a2 + 68);
  size_t v156 = *((void *)a2 + 31);
  if (v156 == 1)
  {
    size_t v156 = 2;
LABEL_405:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 240, v156);
    goto LABEL_406;
  }
  if ((v156 & (v156 - 1)) != 0)
  {
    size_t v156 = std::__next_prime(v156);
    unint64_t v8 = *((void *)v6 + 31);
    BOOL v293 = v156 >= v8;
    if (v156 > v8) {
      goto LABEL_405;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v293 = 1;
    if (v156) {
      goto LABEL_405;
    }
  }
  if (!v293)
  {
    unint64_t v316 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 33) / *((float *)v6 + 68));
    if (v8 < 3 || (uint8x8_t v317 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v317.i16[0] = vaddlv_u8(v317), v317.u32[0] > 1uLL))
    {
      unint64_t v316 = std::__next_prime(v316);
    }
    else
    {
      uint64_t v318 = 1 << -(char)__clz(v316 - 1);
      if (v316 >= 2) {
        unint64_t v316 = v318;
      }
    }
    if (v156 <= v316) {
      size_t v156 = v316;
    }
    if (v156 < v8) {
      goto LABEL_405;
    }
  }
LABEL_406:
  int v157 = (uint64_t *)*((void *)a2 + 32);
  if (v157)
  {
    int8x8_t v338 = (void *)((char *)v6 + 256);
    unint64_t v158 = *((void *)v6 + 31);
    do
    {
      unint64_t v159 = *((unsigned __int8 *)v157 + 16);
      if (v158)
      {
        uint8x8_t v160 = (uint8x8_t)vcnt_s8((int8x8_t)v158);
        v160.i16[0] = vaddlv_u8(v160);
        if (v160.u32[0] > 1uLL)
        {
          unint64_t v5 = *((unsigned __int8 *)v157 + 16);
          if (v158 <= v159) {
            unint64_t v5 = v159 % v158;
          }
        }
        else
        {
          unint64_t v5 = (v158 - 1) & v159;
        }
        uint64_t v161 = *(uint64_t ****)(*v155 + 8 * v5);
        if (v161)
        {
          uint64_t v162 = *v161;
          if (v162)
          {
            if (v160.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v164 = v162[1];
                if (v164 == (uint64_t *)v159)
                {
                  if (*((unsigned __int8 *)v162 + 16) == v159) {
                    goto LABEL_468;
                  }
                }
                else if (((unint64_t)v164 & (v158 - 1)) != v5)
                {
                  goto LABEL_428;
                }
                uint64_t v162 = (uint64_t **)*v162;
                if (!v162) {
                  goto LABEL_428;
                }
              }
            }
            do
            {
              unint64_t v163 = (unint64_t)v162[1];
              if (v163 == v159)
              {
                if (*((unsigned __int8 *)v162 + 16) == v159) {
                  goto LABEL_468;
                }
              }
              else
              {
                if (v163 >= v158) {
                  v163 %= v158;
                }
                if (v163 != v5) {
                  break;
                }
              }
              uint64_t v162 = (uint64_t **)*v162;
            }
            while (v162);
          }
        }
      }
LABEL_428:
      uint64_t v165 = operator new(0x30uLL);
      uint64_t v348 = v165;
      *uint64_t v165 = 0;
      v165[1] = v159;
      *((unsigned char *)v165 + 16) = *((unsigned char *)v157 + 16);
      v165[4] = 0;
      v165[5] = 0;
      v165[3] = 0;
      unint64_t v8 = v157[3];
      uint64_t v166 = v157[4];
      int64_t v167 = v166 - v8;
      if (v166 != v8)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v167 >> 2) >= 0x1555555555555556) {
          abort();
        }
        unint64_t v168 = (char *)operator new(v167);
        v165[3] = v168;
        v165[4] = v168;
        v165[5] = &v168[4 * (v167 >> 2)];
        size_t v169 = 12 * ((v167 - 12) / 0xCuLL) + 12;
        memcpy(v168, (const void *)v8, v169);
        v165[4] = &v168[v169];
        uint64_t v155 = (void *)((char *)v6 + 240);
      }
      float v170 = (float)(unint64_t)(*((void *)v6 + 33) + 1);
      float v171 = *((float *)v6 + 68);
      if (!v158 || (float)(v171 * (float)v158) < v170)
      {
        BOOL v172 = (v158 & (v158 - 1)) != 0;
        if (v158 < 3) {
          BOOL v172 = 1;
        }
        unint64_t v173 = v172 | (2 * v158);
        unint64_t v174 = vcvtps_u32_f32(v170 / v171);
        if (v173 <= v174) {
          size_t v175 = v174;
        }
        else {
          size_t v175 = v173;
        }
        if (v175 == 1)
        {
          size_t v175 = 2;
        }
        else if ((v175 & (v175 - 1)) != 0)
        {
          size_t v175 = std::__next_prime(v175);
          unint64_t v158 = *((void *)v6 + 31);
        }
        if (v175 > v158) {
          goto LABEL_443;
        }
        if (v175 < v158)
        {
          unint64_t v176 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 33) / *((float *)v6 + 68));
          if (v158 < 3
            || (uint8x8_t v177 = (uint8x8_t)vcnt_s8((int8x8_t)v158), v177.i16[0] = vaddlv_u8(v177), v177.u32[0] > 1uLL))
          {
            unint64_t v176 = std::__next_prime(v176);
          }
          else
          {
            uint64_t v178 = 1 << -(char)__clz(v176 - 1);
            if (v176 >= 2) {
              unint64_t v176 = v178;
            }
          }
          if (v175 <= v176) {
            size_t v175 = v176;
          }
          if (v175 < v158) {
LABEL_443:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v155, v175);
        }
        unint64_t v158 = *((void *)v6 + 31);
        if ((v158 & (v158 - 1)) != 0)
        {
          if (v158 <= v159) {
            unint64_t v5 = v159 % v158;
          }
          else {
            unint64_t v5 = v159;
          }
        }
        else
        {
          unint64_t v5 = (v158 - 1) & v159;
        }
      }
      uint8x8_t v179 = *(void **)(*v155 + 8 * v5);
      if (v179)
      {
        *uint64_t v348 = *v179;
        void *v179 = v348;
      }
      else
      {
        *uint64_t v348 = *v338;
        *int8x8_t v338 = v348;
        *(void *)(*v155 + 8 * v5) = v338;
        if (*v348)
        {
          unint64_t v180 = *(void *)(*v348 + 8);
          if ((v158 & (v158 - 1)) != 0)
          {
            if (v180 >= v158) {
              v180 %= v158;
            }
          }
          else
          {
            v180 &= v158 - 1;
          }
          *(void *)(*v155 + 8 * v180) = v348;
        }
      }
      ++*((void *)v6 + 33);
LABEL_468:
      int v157 = (uint64_t *)*v157;
    }
    while (v157);
  }
  *(_OWORD *)((char *)v6 + 280) = 0u;
  *(_OWORD *)((char *)v6 + 296) = 0u;
  *((_DWORD *)v6 + 78) = *((_DWORD *)a2 + 78);
  size_t v181 = *((void *)a2 + 36);
  if (v181 == 1)
  {
    size_t v181 = 2;
LABEL_471:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 280, v181);
    goto LABEL_472;
  }
  if ((v181 & (v181 - 1)) != 0)
  {
    size_t v181 = std::__next_prime(*((void *)a2 + 36));
    unint64_t v8 = *((void *)v6 + 36);
    BOOL v294 = v181 >= v8;
    if (v181 > v8) {
      goto LABEL_471;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v294 = 1;
    if (v181) {
      goto LABEL_471;
    }
  }
  if (!v294)
  {
    unint64_t v319 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 38) / *((float *)v6 + 78));
    if (v8 < 3 || (uint8x8_t v320 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v320.i16[0] = vaddlv_u8(v320), v320.u32[0] > 1uLL))
    {
      unint64_t v319 = std::__next_prime(v319);
    }
    else
    {
      uint64_t v321 = 1 << -(char)__clz(v319 - 1);
      if (v319 >= 2) {
        unint64_t v319 = v321;
      }
    }
    if (v181 <= v319) {
      size_t v181 = v319;
    }
    if (v181 < v8) {
      goto LABEL_471;
    }
  }
LABEL_472:
  unint64_t v339 = (void *)((char *)v6 + 280);
  int v182 = (uint64_t *)*((void *)a2 + 37);
  if (v182)
  {
    uint64_t v335 = (void *)((char *)v6 + 296);
    do
    {
      unint64_t v183 = *((unsigned __int8 *)v182 + 16);
      unint64_t v184 = *((void *)v6 + 36);
      if (v184)
      {
        uint8x8_t v185 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
        v185.i16[0] = vaddlv_u8(v185);
        if (v185.u32[0] > 1uLL)
        {
          unint64_t v5 = *((unsigned __int8 *)v182 + 16);
          if (v184 <= v183) {
            unint64_t v5 = v183 % v184;
          }
        }
        else
        {
          unint64_t v5 = (v184 - 1) & v183;
        }
        float v186 = *(uint64_t ****)(*v339 + 8 * v5);
        if (v186)
        {
          float v187 = *v186;
          if (v187)
          {
            if (v185.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v189 = v187[1];
                if (v189 == (uint64_t *)v183)
                {
                  if (*((unsigned __int8 *)v187 + 16) == v183) {
                    goto LABEL_536;
                  }
                }
                else if (((unint64_t)v189 & (v184 - 1)) != v5)
                {
                  goto LABEL_494;
                }
                float v187 = (uint64_t **)*v187;
                if (!v187) {
                  goto LABEL_494;
                }
              }
            }
            do
            {
              unint64_t v188 = (unint64_t)v187[1];
              if (v188 == v183)
              {
                if (*((unsigned __int8 *)v187 + 16) == v183) {
                  goto LABEL_536;
                }
              }
              else
              {
                if (v188 >= v184) {
                  v188 %= v184;
                }
                if (v188 != v5) {
                  break;
                }
              }
              float v187 = (uint64_t **)*v187;
            }
            while (v187);
          }
        }
      }
LABEL_494:
      uint8x8_t v190 = operator new(0x30uLL);
      double v349 = v190;
      void *v190 = 0;
      v190[1] = v183;
      *((unsigned char *)v190 + 16) = *((unsigned char *)v182 + 16);
      v190[4] = 0;
      v190[5] = 0;
      v190[3] = 0;
      unint64_t v191 = (char *)v182[3];
      int8x8_t v192 = (char *)v182[4];
      int64_t v193 = v192 - v191;
      if (v192 != v191)
      {
        unint64_t v194 = 0xAAAAAAAAAAAAAAABLL * (v193 >> 4);
        if (v194 > 0x555555555555555) {
          abort();
        }
        uint64_t v195 = (char *)operator new(v193);
        v190[3] = v195;
        v190[4] = v195;
        v190[5] = &v195[48 * v194];
        unint64_t v8 = (unint64_t)v195;
        do
        {
          *(_WORD *)unint64_t v8 = *(_WORD *)v191;
          std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(v8 + 8, (uint64_t)(v191 + 8));
          v191 += 48;
          v8 += 48;
        }
        while (v191 != v192);
        v190[4] = v8;
      }
      float v196 = (float)(unint64_t)(*((void *)v6 + 38) + 1);
      float v197 = *((float *)v6 + 78);
      if (!v184 || (float)(v197 * (float)v184) < v196)
      {
        BOOL v198 = (v184 & (v184 - 1)) != 0;
        if (v184 < 3) {
          BOOL v198 = 1;
        }
        unint64_t v199 = v198 | (2 * v184);
        unint64_t v200 = vcvtps_u32_f32(v196 / v197);
        if (v199 <= v200) {
          size_t v201 = v200;
        }
        else {
          size_t v201 = v199;
        }
        if (v201 == 1)
        {
          size_t v201 = 2;
        }
        else if ((v201 & (v201 - 1)) != 0)
        {
          size_t v201 = std::__next_prime(v201);
        }
        unint64_t v8 = *((void *)v6 + 36);
        if (v201 > v8) {
          goto LABEL_511;
        }
        if (v201 < v8)
        {
          unint64_t v202 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 38) / *((float *)v6 + 78));
          if (v8 < 3 || (uint8x8_t v203 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v203.i16[0] = vaddlv_u8(v203), v203.u32[0] > 1uLL))
          {
            unint64_t v202 = std::__next_prime(v202);
          }
          else
          {
            uint64_t v204 = 1 << -(char)__clz(v202 - 1);
            if (v202 >= 2) {
              unint64_t v202 = v204;
            }
          }
          if (v201 <= v202) {
            size_t v201 = v202;
          }
          if (v201 < v8) {
LABEL_511:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v339, v201);
        }
        unint64_t v184 = *((void *)v6 + 36);
        if ((v184 & (v184 - 1)) != 0)
        {
          if (v184 <= v183) {
            unint64_t v5 = v183 % v184;
          }
          else {
            unint64_t v5 = v183;
          }
        }
        else
        {
          unint64_t v5 = (v184 - 1) & v183;
        }
      }
      unint64_t v205 = *(void **)(*v339 + 8 * v5);
      if (v205)
      {
        *double v349 = *v205;
        *unint64_t v205 = v349;
      }
      else
      {
        *double v349 = *v335;
        *uint64_t v335 = v349;
        *(void *)(*v339 + 8 * v5) = v335;
        if (*v349)
        {
          unint64_t v206 = *(void *)(*v349 + 8);
          if ((v184 & (v184 - 1)) != 0)
          {
            if (v206 >= v184) {
              v206 %= v184;
            }
          }
          else
          {
            v206 &= v184 - 1;
          }
          *(void *)(*v339 + 8 * v206) = v349;
        }
      }
      ++*((void *)v6 + 38);
LABEL_536:
      int v182 = (uint64_t *)*v182;
    }
    while (v182);
  }
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_DWORD *)v6 + 88) = *((_DWORD *)a2 + 88);
  size_t v207 = *((void *)a2 + 41);
  if (v207 == 1)
  {
    size_t v207 = 2;
LABEL_539:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 320, v207);
    goto LABEL_540;
  }
  if ((v207 & (v207 - 1)) != 0)
  {
    size_t v207 = std::__next_prime(*((void *)a2 + 41));
    unint64_t v8 = *((void *)v6 + 41);
    BOOL v295 = v207 >= v8;
    if (v207 > v8) {
      goto LABEL_539;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v295 = 1;
    if (v207) {
      goto LABEL_539;
    }
  }
  if (!v295)
  {
    unint64_t v322 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 43) / *((float *)v6 + 88));
    if (v8 < 3 || (uint8x8_t v323 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v323.i16[0] = vaddlv_u8(v323), v323.u32[0] > 1uLL))
    {
      unint64_t v322 = std::__next_prime(v322);
    }
    else
    {
      uint64_t v324 = 1 << -(char)__clz(v322 - 1);
      if (v322 >= 2) {
        unint64_t v322 = v324;
      }
    }
    if (v207 <= v322) {
      size_t v207 = v322;
    }
    if (v207 < v8) {
      goto LABEL_539;
    }
  }
LABEL_540:
  unint64_t v336 = (void *)((char *)v6 + 320);
  uint64_t v208 = (uint64_t *)*((void *)a2 + 42);
  if (v208)
  {
    unint64_t v334 = (void *)((char *)v6 + 336);
    do
    {
      unint64_t v209 = *((unsigned __int8 *)v208 + 16);
      unint64_t v210 = *((void *)v6 + 41);
      if (v210)
      {
        uint8x8_t v211 = (uint8x8_t)vcnt_s8((int8x8_t)v210);
        v211.i16[0] = vaddlv_u8(v211);
        if (v211.u32[0] > 1uLL)
        {
          unint64_t v5 = *((unsigned __int8 *)v208 + 16);
          if (v210 <= v209) {
            unint64_t v5 = v209 % v210;
          }
        }
        else
        {
          unint64_t v5 = (v210 - 1) & v209;
        }
        unint64_t v212 = *(uint64_t ****)(*v336 + 8 * v5);
        if (v212)
        {
          unsigned int v213 = *v212;
          if (v213)
          {
            if (v211.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v215 = v213[1];
                if (v215 == (uint64_t *)v209)
                {
                  if (*((unsigned __int8 *)v213 + 16) == v209) {
                    goto LABEL_604;
                  }
                }
                else if (((unint64_t)v215 & (v210 - 1)) != v5)
                {
                  goto LABEL_562;
                }
                unsigned int v213 = (uint64_t **)*v213;
                if (!v213) {
                  goto LABEL_562;
                }
              }
            }
            do
            {
              unint64_t v214 = (unint64_t)v213[1];
              if (v214 == v209)
              {
                if (*((unsigned __int8 *)v213 + 16) == v209) {
                  goto LABEL_604;
                }
              }
              else
              {
                if (v214 >= v210) {
                  v214 %= v210;
                }
                if (v214 != v5) {
                  break;
                }
              }
              unsigned int v213 = (uint64_t **)*v213;
            }
            while (v213);
          }
        }
      }
LABEL_562:
      uint64_t v216 = operator new(0x30uLL);
      uint64_t v350 = v216;
      *uint64_t v216 = 0;
      v216[1] = v209;
      *((unsigned char *)v216 + 16) = *((unsigned char *)v208 + 16);
      v216[4] = 0;
      v216[5] = 0;
      v216[3] = 0;
      uint64_t v218 = (char *)v208[3];
      double v217 = (char *)v208[4];
      int64_t v219 = v217 - v218;
      if (v217 != v218)
      {
        unint64_t v220 = 0xAAAAAAAAAAAAAAABLL * (v219 >> 4);
        if (v220 > 0x555555555555555) {
          abort();
        }
        uint64_t v221 = (char *)operator new(v219);
        v216[3] = v221;
        v216[4] = v221;
        v216[5] = &v221[48 * v220];
        unint64_t v8 = (unint64_t)v221;
        do
        {
          *(_WORD *)unint64_t v8 = *(_WORD *)v218;
          std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map(v8 + 8, (uint64_t)(v218 + 8));
          v218 += 48;
          v8 += 48;
        }
        while (v218 != v217);
        v216[4] = v8;
      }
      float v222 = (float)(unint64_t)(*((void *)v6 + 43) + 1);
      float v223 = *((float *)v6 + 88);
      if (!v210 || (float)(v223 * (float)v210) < v222)
      {
        BOOL v224 = (v210 & (v210 - 1)) != 0;
        if (v210 < 3) {
          BOOL v224 = 1;
        }
        unint64_t v225 = v224 | (2 * v210);
        unint64_t v226 = vcvtps_u32_f32(v222 / v223);
        if (v225 <= v226) {
          size_t v227 = v226;
        }
        else {
          size_t v227 = v225;
        }
        if (v227 == 1)
        {
          size_t v227 = 2;
        }
        else if ((v227 & (v227 - 1)) != 0)
        {
          size_t v227 = std::__next_prime(v227);
        }
        unint64_t v8 = *((void *)v6 + 41);
        if (v227 > v8) {
          goto LABEL_579;
        }
        if (v227 < v8)
        {
          unint64_t v228 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 43) / *((float *)v6 + 88));
          if (v8 < 3 || (uint8x8_t v229 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v229.i16[0] = vaddlv_u8(v229), v229.u32[0] > 1uLL))
          {
            unint64_t v228 = std::__next_prime(v228);
          }
          else
          {
            uint64_t v230 = 1 << -(char)__clz(v228 - 1);
            if (v228 >= 2) {
              unint64_t v228 = v230;
            }
          }
          if (v227 <= v228) {
            size_t v227 = v228;
          }
          if (v227 < v8) {
LABEL_579:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v336, v227);
        }
        unint64_t v210 = *((void *)v6 + 41);
        if ((v210 & (v210 - 1)) != 0)
        {
          if (v210 <= v209) {
            unint64_t v5 = v209 % v210;
          }
          else {
            unint64_t v5 = v209;
          }
        }
        else
        {
          unint64_t v5 = (v210 - 1) & v209;
        }
      }
      BOOL v231 = *(void **)(*v336 + 8 * v5);
      if (v231)
      {
        void *v350 = *v231;
        *BOOL v231 = v350;
      }
      else
      {
        void *v350 = *v334;
        *unint64_t v334 = v350;
        *(void *)(*v336 + 8 * v5) = v334;
        if (*v350)
        {
          unint64_t v232 = *(void *)(*v350 + 8);
          if ((v210 & (v210 - 1)) != 0)
          {
            if (v232 >= v210) {
              v232 %= v210;
            }
          }
          else
          {
            v232 &= v210 - 1;
          }
          *(void *)(*v336 + 8 * v232) = v350;
        }
      }
      ++*((void *)v6 + 43);
LABEL_604:
      uint64_t v208 = (uint64_t *)*v208;
    }
    while (v208);
  }
  char v233 = (void *)((char *)v6 + 360);
  *(_OWORD *)((char *)v6 + 360) = 0u;
  *(_OWORD *)((char *)v6 + 376) = 0u;
  *((_DWORD *)v6 + 98) = *((_DWORD *)a2 + 98);
  size_t v234 = *((void *)a2 + 46);
  if (v234 == 1)
  {
    size_t v234 = 2;
LABEL_607:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 360, v234);
    goto LABEL_608;
  }
  if ((v234 & (v234 - 1)) != 0)
  {
    size_t v234 = std::__next_prime(v234);
    unint64_t v8 = *((void *)v6 + 46);
    BOOL v296 = v234 >= v8;
    if (v234 > v8) {
      goto LABEL_607;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v296 = 1;
    if (v234) {
      goto LABEL_607;
    }
  }
  if (!v296)
  {
    unint64_t v325 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 48) / *((float *)v6 + 98));
    if (v8 < 3 || (uint8x8_t v326 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v326.i16[0] = vaddlv_u8(v326), v326.u32[0] > 1uLL))
    {
      unint64_t v325 = std::__next_prime(v325);
    }
    else
    {
      uint64_t v327 = 1 << -(char)__clz(v325 - 1);
      if (v325 >= 2) {
        unint64_t v325 = v327;
      }
    }
    if (v234 <= v325) {
      size_t v234 = v325;
    }
    if (v234 < v8) {
      goto LABEL_607;
    }
  }
LABEL_608:
  int8x8_t v235 = (uint64_t *)*((void *)a2 + 47);
  if (v235)
  {
    unint64_t v236 = (void *)((char *)v6 + 376);
    unint64_t v237 = *((void *)v6 + 46);
    do
    {
      unint64_t v238 = *((unsigned __int8 *)v235 + 16);
      if (v237)
      {
        uint8x8_t v239 = (uint8x8_t)vcnt_s8((int8x8_t)v237);
        v239.i16[0] = vaddlv_u8(v239);
        if (v239.u32[0] > 1uLL)
        {
          unint64_t v8 = *((unsigned __int8 *)v235 + 16);
          if (v237 <= v238) {
            unint64_t v8 = v238 % v237;
          }
        }
        else
        {
          unint64_t v8 = (v237 - 1) & v238;
        }
        uint64_t v240 = *(uint64_t ****)(*v233 + 8 * v8);
        if (v240)
        {
          uint64_t v241 = *v240;
          if (v241)
          {
            if (v239.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v243 = v241[1];
                if (v243 == (uint64_t *)v238)
                {
                  if (*((unsigned __int8 *)v241 + 16) == v238) {
                    goto LABEL_671;
                  }
                }
                else if (((unint64_t)v243 & (v237 - 1)) != v8)
                {
                  goto LABEL_630;
                }
                uint64_t v241 = (uint64_t **)*v241;
                if (!v241) {
                  goto LABEL_630;
                }
              }
            }
            do
            {
              unint64_t v242 = (unint64_t)v241[1];
              if (v242 == v238)
              {
                if (*((unsigned __int8 *)v241 + 16) == v238) {
                  goto LABEL_671;
                }
              }
              else
              {
                if (v242 >= v237) {
                  v242 %= v237;
                }
                if (v242 != v8) {
                  break;
                }
              }
              uint64_t v241 = (uint64_t **)*v241;
            }
            while (v241);
          }
        }
      }
LABEL_630:
      uint64_t v244 = operator new(0x30uLL);
      uint64_t v351 = v244;
      *uint64_t v244 = 0;
      v244[1] = v238;
      *((unsigned char *)v244 + 16) = *((unsigned char *)v235 + 16);
      v244[4] = 0;
      v244[5] = 0;
      v244[3] = 0;
      unint64_t v246 = (unsigned char *)v235[3];
      uint64_t v245 = (unsigned char *)v235[4];
      uint64_t v247 = v245 - v246;
      if (v245 != v246)
      {
        if (v247 < 0) {
          abort();
        }
        uint64_t v248 = (char *)operator new(v245 - v246);
        v244[3] = v248;
        v244[4] = v248;
        v244[5] = &v248[16 * (v247 >> 4)];
        size_t v249 = v247 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v248, v246, v249);
        v244[4] = &v248[v249];
      }
      float v250 = (float)(unint64_t)(*((void *)v6 + 48) + 1);
      float v251 = *((float *)v6 + 98);
      if (v237 && (float)(v251 * (float)v237) >= v250)
      {
        char v233 = (void *)((char *)v6 + 360);
      }
      else
      {
        BOOL v252 = (v237 & (v237 - 1)) != 0;
        if (v237 < 3) {
          BOOL v252 = 1;
        }
        unint64_t v253 = v252 | (2 * v237);
        unint64_t v254 = vcvtps_u32_f32(v250 / v251);
        if (v253 <= v254) {
          size_t v255 = v254;
        }
        else {
          size_t v255 = v253;
        }
        char v233 = (void *)((char *)v6 + 360);
        if (v255 == 1)
        {
          size_t v255 = 2;
        }
        else if ((v255 & (v255 - 1)) != 0)
        {
          size_t v255 = std::__next_prime(v255);
          unint64_t v237 = *((void *)v6 + 46);
        }
        if (v255 > v237) {
          goto LABEL_646;
        }
        if (v255 < v237)
        {
          unint64_t v256 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 48) / *((float *)v6 + 98));
          if (v237 < 3
            || (uint8x8_t v257 = (uint8x8_t)vcnt_s8((int8x8_t)v237), v257.i16[0] = vaddlv_u8(v257), v257.u32[0] > 1uLL))
          {
            unint64_t v256 = std::__next_prime(v256);
          }
          else
          {
            uint64_t v258 = 1 << -(char)__clz(v256 - 1);
            if (v256 >= 2) {
              unint64_t v256 = v258;
            }
          }
          if (v255 <= v256) {
            size_t v255 = v256;
          }
          if (v255 < v237) {
LABEL_646:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 360, v255);
        }
        unint64_t v237 = *((void *)v6 + 46);
        if ((v237 & (v237 - 1)) != 0)
        {
          if (v237 <= v238) {
            unint64_t v8 = v238 % v237;
          }
          else {
            unint64_t v8 = v238;
          }
        }
        else
        {
          unint64_t v8 = (v237 - 1) & v238;
        }
      }
      uint64_t v259 = *(void **)(*v233 + 8 * v8);
      if (v259)
      {
        *uint64_t v351 = *v259;
        void *v259 = v351;
      }
      else
      {
        *uint64_t v351 = *v236;
        *unint64_t v236 = v351;
        *(void *)(*v233 + 8 * v8) = v236;
        if (*v351)
        {
          unint64_t v260 = *(void *)(*v351 + 8);
          if ((v237 & (v237 - 1)) != 0)
          {
            if (v260 >= v237) {
              v260 %= v237;
            }
          }
          else
          {
            v260 &= v237 - 1;
          }
          *(void *)(*v233 + 8 * v260) = v351;
        }
      }
      ++*((void *)v6 + 48);
LABEL_671:
      int8x8_t v235 = (uint64_t *)*v235;
    }
    while (v235);
  }
  *((void *)v6 + 50) = *((void *)a2 + 50);
  unint64_t v261 = (uint64_t *)((char *)v6 + 408);
  *(_OWORD *)((char *)v6 + 408) = 0u;
  *(_OWORD *)((char *)v6 + 424) = 0u;
  *((_DWORD *)v6 + 110) = *((_DWORD *)a2 + 110);
  size_t v262 = *((void *)a2 + 52);
  if (v262 == 1)
  {
    size_t v262 = 2;
LABEL_674:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 408, v262);
    goto LABEL_675;
  }
  if ((v262 & (v262 - 1)) != 0)
  {
    size_t v262 = std::__next_prime(*((void *)a2 + 52));
    unint64_t v8 = *((void *)v6 + 52);
    BOOL v297 = v262 >= v8;
    if (v262 > v8) {
      goto LABEL_674;
    }
  }
  else
  {
    unint64_t v8 = 0;
    BOOL v297 = 1;
    if (v262) {
      goto LABEL_674;
    }
  }
  if (!v297)
  {
    unint64_t v328 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 54) / *((float *)v6 + 110));
    if (v8 < 3 || (uint8x8_t v329 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v329.i16[0] = vaddlv_u8(v329), v329.u32[0] > 1uLL))
    {
      unint64_t v328 = std::__next_prime(v328);
    }
    else
    {
      uint64_t v330 = 1 << -(char)__clz(v328 - 1);
      if (v328 >= 2) {
        unint64_t v328 = v330;
      }
    }
    if (v262 <= v328) {
      size_t v262 = v328;
    }
    if (v262 < v8) {
      goto LABEL_674;
    }
  }
LABEL_675:
  uint8x8_t v263 = (uint64_t *)*((void *)a2 + 53);
  if (v263)
  {
    BOOL v264 = (void *)((char *)v6 + 424);
    unint64_t v265 = *((void *)v6 + 52);
    do
    {
      unint64_t v266 = *((unsigned __int8 *)v263 + 16);
      if (v265)
      {
        uint8x8_t v267 = (uint8x8_t)vcnt_s8((int8x8_t)v265);
        v267.i16[0] = vaddlv_u8(v267);
        if (v267.u32[0] > 1uLL)
        {
          unint64_t v8 = *((unsigned __int8 *)v263 + 16);
          if (v265 <= v266) {
            unint64_t v8 = v266 % v265;
          }
        }
        else
        {
          unint64_t v8 = (v265 - 1) & v266;
        }
        std::string::size_type v268 = *(uint64_t ****)(*v261 + 8 * v8);
        if (v268)
        {
          std::string::size_type v269 = *v268;
          if (v269)
          {
            if (v267.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v271 = v269[1];
                if (v271 == (uint64_t *)v266)
                {
                  if (*((unsigned __int8 *)v269 + 16) == v266) {
                    goto LABEL_735;
                  }
                }
                else if (((unint64_t)v271 & (v265 - 1)) != v8)
                {
                  goto LABEL_697;
                }
                std::string::size_type v269 = (uint64_t **)*v269;
                if (!v269) {
                  goto LABEL_697;
                }
              }
            }
            do
            {
              unint64_t v270 = (unint64_t)v269[1];
              if (v270 == v266)
              {
                if (*((unsigned __int8 *)v269 + 16) == v266) {
                  goto LABEL_735;
                }
              }
              else
              {
                if (v270 >= v265) {
                  v270 %= v265;
                }
                if (v270 != v8) {
                  break;
                }
              }
              std::string::size_type v269 = (uint64_t **)*v269;
            }
            while (v269);
          }
        }
      }
LABEL_697:
      uint64_t v272 = operator new(0x18uLL);
      *uint64_t v272 = 0;
      v272[1] = v266;
      *((_WORD *)v272 + 8) = *((_WORD *)v263 + 8);
      float v273 = (float)(unint64_t)(*((void *)v6 + 54) + 1);
      float v274 = *((float *)v6 + 110);
      if (!v265 || (float)(v274 * (float)v265) < v273)
      {
        BOOL v275 = (v265 & (v265 - 1)) != 0;
        if (v265 < 3) {
          BOOL v275 = 1;
        }
        unint64_t v276 = v275 | (2 * v265);
        unint64_t v277 = vcvtps_u32_f32(v273 / v274);
        if (v276 <= v277) {
          size_t v278 = v277;
        }
        else {
          size_t v278 = v276;
        }
        if (v278 == 1)
        {
          size_t v278 = 2;
        }
        else if ((v278 & (v278 - 1)) != 0)
        {
          size_t v278 = std::__next_prime(v278);
          unint64_t v265 = *((void *)v6 + 52);
        }
        if (v278 > v265) {
          goto LABEL_709;
        }
        if (v278 < v265)
        {
          unint64_t v279 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 54) / *((float *)v6 + 110));
          if (v265 < 3
            || (uint8x8_t v280 = (uint8x8_t)vcnt_s8((int8x8_t)v265), v280.i16[0] = vaddlv_u8(v280), v280.u32[0] > 1uLL))
          {
            unint64_t v279 = std::__next_prime(v279);
          }
          else
          {
            uint64_t v281 = 1 << -(char)__clz(v279 - 1);
            if (v279 >= 2) {
              unint64_t v279 = v281;
            }
          }
          if (v278 <= v279) {
            size_t v278 = v279;
          }
          if (v278 < v265) {
LABEL_709:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v6 + 408, v278);
        }
        unint64_t v265 = *((void *)v6 + 52);
        if ((v265 & (v265 - 1)) != 0)
        {
          if (v265 <= v266) {
            unint64_t v8 = v266 % v265;
          }
          else {
            unint64_t v8 = v266;
          }
        }
        else
        {
          unint64_t v8 = (v265 - 1) & v266;
        }
      }
      uint64_t v282 = *v261;
      uint64_t v283 = *(void **)(*v261 + 8 * v8);
      if (v283)
      {
        *uint64_t v272 = *v283;
      }
      else
      {
        *uint64_t v272 = *v264;
        *BOOL v264 = v272;
        *(void *)(v282 + 8 * v8) = v264;
        if (!*v272) {
          goto LABEL_734;
        }
        unint64_t v284 = *(void *)(*v272 + 8);
        if ((v265 & (v265 - 1)) != 0)
        {
          if (v284 >= v265) {
            v284 %= v265;
          }
        }
        else
        {
          v284 &= v265 - 1;
        }
        uint64_t v283 = (void *)(*v261 + 8 * v284);
      }
      *uint64_t v283 = v272;
LABEL_734:
      ++*((void *)v6 + 54);
LABEL_735:
      uint8x8_t v263 = (uint64_t *)*v263;
    }
    while (v263);
  }
  *((_WORD *)v6 + 224) = *((_WORD *)a2 + 224);
  return v6;
}

{
  uint64_t v4;

  unint64_t v4 = std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>::unordered_map((uint64_t)this, (uint64_t)a2)+ 40;
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>::unordered_map(v4, (uint64_t)a2 + 40);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>::unordered_map((uint64_t)this + 80, (uint64_t)a2 + 80);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>::unordered_map((uint64_t)this + 120, (uint64_t)a2 + 120);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>::unordered_map((uint64_t)this + 160, (uint64_t)a2 + 160);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>::unordered_map((uint64_t)this + 200, (uint64_t)a2 + 200);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>::unordered_map((uint64_t)this + 240, (uint64_t)a2 + 240);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>::unordered_map((uint64_t)this + 280, (uint64_t)a2 + 280);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::unordered_map((uint64_t)this + 320, (uint64_t)a2 + 320);
  std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>::unordered_map((uint64_t)this + 360, (uint64_t)a2 + 360);
  *((void *)this + 50) = *((void *)a2 + 50);
  std::unordered_map<unsigned char,BOOL>::unordered_map((uint64_t)this + 408, (uint64_t)a2 + 408);
  *((_WORD *)this + 224) = *((_WORD *)a2 + 224);
  return this;
}

void sub_1A18DBFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, md::MeshRenderableContext *a9, md::MeshRenderableContext *a10, md::MeshRenderableContext *a11, md::MeshRenderableContext *a12, md::MeshRenderableContext *a13, uint64_t a14, md::MeshRenderableContext *a15, uint64_t a16, uint64_t a17, md::MeshRenderableContext *a18, md::MeshRenderableContext *a19, char a20)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v20);
  md::MeshRenderableContext::~MeshRenderableContext(a15);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(a16);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(a17);
  md::MeshRenderableContext::~MeshRenderableContext(a9);
  md::MeshRenderableContext::~MeshRenderableContext(a10);
  md::MeshRenderableContext::~MeshRenderableContext(a18);
  md::MeshRenderableContext::~MeshRenderableContext(a12);
  md::MeshRenderableContext::~MeshRenderableContext(a19);
  md::MeshRenderableContext::~MeshRenderableContext(a13);
  md::MeshRenderableContext::~MeshRenderableContext(a11);
  _Unwind_Resume(a1);
}

void sub_1A18DC3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::MeshRenderableContext *a10)
{
  md::MeshRenderableContext::~MeshRenderableContext(v11);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v18);
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v17);
  md::MeshRenderableContext::~MeshRenderableContext(v16);
  md::MeshRenderableContext::~MeshRenderableContext(v15);
  md::MeshRenderableContext::~MeshRenderableContext(v14);
  md::MeshRenderableContext::~MeshRenderableContext(v13);
  md::MeshRenderableContext::~MeshRenderableContext(v12);
  md::MeshRenderableContext::~MeshRenderableContext(a10);
  md::MeshRenderableContext::~MeshRenderableContext(v10);
  _Unwind_Resume(a1);
}

void sub_1A18DC44C()
{
}

void sub_1A18DC454()
{
}

void sub_1A18DC45C()
{
}

void sub_1A18DC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::MeshRenderableContext *a10)
{
  md::MeshRenderableContext::~MeshRenderableContext(a10);
  md::MeshRenderableContext::~MeshRenderableContext(v10);
  _Unwind_Resume(a1);
}

void sub_1A18DC480(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,BOOL>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,BOOL> const&>(a1, i + 16, (_WORD *)i + 8);
  return a1;
}

void sub_1A18DC5B0(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A18DC5C4(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14) {
    goto LABEL_50;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (prime > v7) {
    goto LABEL_34;
  }
  if (prime < v7)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      size_t prime = v20;
    }
    if (prime < v7) {
LABEL_34:
    }
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      unint64_t v3 = v6 % v7;
      uint64_t v23 = *(void *)a1;
      size_t v24 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
      if (!v24) {
        goto LABEL_53;
      }
LABEL_51:
      void *v10 = *v24;
LABEL_59:
      *size_t v24 = v10;
      goto LABEL_60;
    }
    unint64_t v3 = v6;
LABEL_50:
    uint64_t v23 = *(void *)a1;
    size_t v24 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v24) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v3 = (v7 - 1) & v6;
  uint64_t v23 = *(void *)a1;
  size_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24) {
    goto LABEL_51;
  }
LABEL_53:
  void *v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v23 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v25 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    size_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A18DC8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14) {
    goto LABEL_50;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (prime > v7) {
    goto LABEL_34;
  }
  if (prime < v7)
  {
    unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      unint64_t v20 = std::__next_prime(v20);
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        unint64_t v20 = v22;
      }
    }
    if (prime <= v20) {
      size_t prime = v20;
    }
    if (prime < v7) {
LABEL_34:
    }
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      unint64_t v3 = v6 % v7;
      uint64_t v23 = *(void *)a1;
      size_t v24 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
      if (!v24) {
        goto LABEL_53;
      }
LABEL_51:
      void *v10 = *v24;
LABEL_59:
      *size_t v24 = v10;
      goto LABEL_60;
    }
    unint64_t v3 = v6;
LABEL_50:
    uint64_t v23 = *(void *)a1;
    size_t v24 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v24) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v3 = (v7 - 1) & v6;
  uint64_t v23 = *(void *)a1;
  size_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24) {
    goto LABEL_51;
  }
LABEL_53:
  void *v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v23 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v25 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    size_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A18DCBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,unsigned char &,unsigned char &>(uint64_t a1, unsigned __int8 a2, char a3, char a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            float v14 = v12[1];
            if (v14 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v12 + 16) == a2) {
                return;
              }
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (uint64_t **)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == a2)
          {
            if (*((unsigned __int8 *)v12 + 16) == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  float v15 = operator new(0x18uLL);
  void *v15 = 0;
  v15[1] = v8;
  *((unsigned char *)v15 + 16) = a3;
  *((unsigned char *)v15 + 17) = a4 != 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16) {
    goto LABEL_50;
  }
  BOOL v18 = 1;
  if (v9 >= 3) {
    BOOL v18 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v9);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v9 = *(void *)(a1 + 8);
  }
  if (prime > v9) {
    goto LABEL_34;
  }
  if (prime < v9)
  {
    unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      unint64_t v22 = std::__next_prime(v22);
    }
    else
    {
      uint64_t v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2) {
        unint64_t v22 = v24;
      }
    }
    if (prime <= v22) {
      size_t prime = v22;
    }
    if (prime < v9) {
LABEL_34:
    }
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
    {
      unint64_t v4 = v8 % v9;
      uint64_t v25 = *(void *)a1;
      uint8x8_t v26 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
      if (!v26) {
        goto LABEL_53;
      }
LABEL_51:
      void *v15 = *v26;
LABEL_59:
      void *v26 = v15;
      goto LABEL_60;
    }
    unint64_t v4 = v8;
LABEL_50:
    uint64_t v25 = *(void *)a1;
    uint8x8_t v26 = *(void **)(*(void *)a1 + 8 * v4);
    if (!v26) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v4 = (v9 - 1) & v8;
  uint64_t v25 = *(void *)a1;
  uint8x8_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26) {
    goto LABEL_51;
  }
LABEL_53:
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint8x8_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
}

void sub_1A18DCEF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    float v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v4 = operator new(8 * a2);
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *unint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    float v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *unint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *float v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          float v16 = v7;
LABEL_25:
          unint64_t v7 = v16;
          float v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          unint64_t v7 = v16;
          float v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,BOOL> const&>(uint64_t a1, unsigned __int8 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v6) {
                return v10;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v6;
  *((_WORD *)v14 + 8) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *uint64_t v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_1A18DD3AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18DD4DC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DD4F0(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18DD620(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DD634(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18DD764(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DD778(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18DD8A8(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DD8BC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18DD9EC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DDA00(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1A18DDB30(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DDB44(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1A18DDC74(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DDC88(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>(a1, i + 16, (char *)i + 16);
  return a1;
}

void sub_1A18DDDB8(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

void sub_1A18DDDCC(_Unwind_Exception *a1)
{
  md::MeshRenderableContext::~MeshRenderableContext(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *uint64_t v14 = v24[0];
LABEL_61:
  uint64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DE0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *uint64_t v14 = v24[0];
LABEL_61:
  uint64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DE42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  uint64_t v10 = *((void *)a3 + 1);
  uint64_t v11 = *((void *)a3 + 2);
  uint64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    float v13 = result;
    if (v12 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = operator new(v11 - v10);
    unint64_t v14 = 0;
    v13[3] = result;
    v13[4] = result;
    v13[5] = &result[2 * (v12 >> 4)];
    do
    {
      uint64_t v15 = v10 + v14;
      unint64_t v16 = (char *)&result[v14 / 8];
      *(_WORD *)unint64_t v16 = *(_WORD *)(v10 + v14);
      uint64_t v17 = *(void *)(v10 + v14 + 4);
      *((_DWORD *)v16 + 3) = *(_DWORD *)(v10 + v14 + 12);
      *(void *)(v16 + 4) = v17;
      v14 += 16;
    }
    while (v15 + 16 != v11);
    v13[4] = &result[v14 / 8];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DE520(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

int64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  char v9 = *a3;
  v8[3] = 0;
  *((unsigned char *)v8 + 16) = v9;
  v8[4] = 0;
  v8[5] = 0;
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v10 = *((void *)a3 + 2);
  int64_t result = v10 - v11;
  if (v10 != v11)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (result >> 2);
    if (v13 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    int64_t result = (int64_t)operator new(result);
    uint64_t v14 = 0;
    v8[3] = result;
    v8[4] = result;
    v8[5] = result + 20 * v13;
    do
    {
      uint64_t v15 = v11 + v14;
      uint64_t v16 = result + v14;
      *(_WORD *)uint64_t v16 = *(_WORD *)(v11 + v14);
      *(_OWORD *)(v16 + 4) = *(_OWORD *)(v11 + v14 + 4);
      v14 += 20;
    }
    while (v15 + 20 != v10);
    v8[4] = result + v14;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DE638(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      int64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          int64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *uint64_t v14 = v24[0];
LABEL_61:
  int64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DE978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,3,1>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  uint64_t v11 = (unsigned char *)*((void *)a3 + 1);
  unint64_t v10 = (unsigned char *)*((void *)a3 + 2);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    float v13 = result;
    if (v12 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v10 - v11);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[16 * (v12 >> 4)];
    int64_t result = memcpy(v14, v11, v12 & 0xFFFFFFFFFFFFFFF0);
    v13[4] = &v14[v12 & 0xFFFFFFFFFFFFFFF0];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DEA4C(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      int64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          int64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *uint64_t v14 = v24[0];
LABEL_61:
  int64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DED8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,int>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,int>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  uint64_t v11 = (unsigned char *)*((void *)a3 + 1);
  unint64_t v10 = (unsigned char *)*((void *)a3 + 2);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    float v13 = result;
    if (v12 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v10 - v11);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[8 * (v12 >> 3)];
    int64_t result = memcpy(v14, v11, v12 & 0xFFFFFFFFFFFFFFF8);
    v13[4] = &v14[v12 & 0xFFFFFFFFFFFFFFF8];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DEE60(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      int64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          int64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *uint64_t v14 = v24[0];
LABEL_61:
  int64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DF1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,BOOL>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  uint64_t v11 = (unsigned char *)*((void *)a3 + 1);
  unint64_t v10 = (unsigned char *)*((void *)a3 + 2);
  size_t v12 = v10 - v11;
  if (v10 != v11)
  {
    float v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * v12 >= 0x5555555555555556) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v12);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[v12];
    int64_t result = memcpy(v14, v11, 3 * ((v12 - 3) / 3) + 3);
    v13[4] = &v14[3 * ((v12 - 3) / 3) + 3];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DF2AC(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      int64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          int64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  uint64_t v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *uint64_t v14 = v24[0];
LABEL_61:
  int64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DF5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  uint64_t v11 = (unsigned char *)*((void *)a3 + 1);
  unint64_t v10 = (unsigned char *)*((void *)a3 + 2);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    float v13 = result;
    if (v12 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v10 - v11);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[8 * (v12 >> 3)];
    int64_t result = memcpy(v14, v11, v12 & 0xFFFFFFFFFFFFFFF8);
    v13[4] = &v14[v12 & 0xFFFFFFFFFFFFFFF8];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DF6C0(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int64_t result = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (*((unsigned __int8 *)result + 16) == v6) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)result + 16) == v6) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  unint64_t v26 = operator new(0x30uLL);
  void *v26 = 0;
  v26[1] = v6;
  *((unsigned char *)v26 + 16) = *(unsigned char *)a3;
  v26[4] = 0;
  v26[5] = 0;
  v26[3] = 0;
  std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__init_with_size[abi:ne180100]<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*,std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*>((uint64_t)(v26 + 3), *(void *)(a3 + 8), *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4));
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v21) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v21)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v21 < 3uLL || (uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < *(void *)&v21) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        BOOL v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        unint64_t v16 = v26;
        if (v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        BOOL v15 = *(void **)(*(void *)a1 + 8 * v6);
        unint64_t v16 = v26;
        if (v15) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
      BOOL v15 = *(void **)(*(void *)a1 + 8 * v3);
      unint64_t v16 = v26;
      if (v15) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *unint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v26)
    {
      unint64_t v25 = *(void *)(*v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7) {
          v25 %= v7;
        }
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  BOOL v15 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v16 = v26;
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  *unint64_t v16 = *v15;
  void *v15 = v26;
LABEL_61:
  int64_t result = v26;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DFA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A18DFA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      int64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          int64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        float v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        float v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      float v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  float v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *float v14 = v24[0];
LABEL_61:
  int64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18DFD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  unint64_t v11 = (unsigned char *)*((void *)a3 + 1);
  unint64_t v10 = (unsigned char *)*((void *)a3 + 2);
  size_t v12 = v10 - v11;
  if (v10 != v11)
  {
    float v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * v12 >= 0x5555555555555556) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    float v14 = (char *)operator new(v12);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[v12];
    int64_t result = memcpy(v14, v11, 3 * ((v12 - 3) / 3) + 3);
    v13[4] = &v14[3 * ((v12 - 3) / 3) + 3];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18DFEA0(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      int64_t result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v11 = result[1];
            if (v11 == (uint64_t *)v5)
            {
              if (*((unsigned __int8 *)result + 16) == v5) {
                return result;
              }
            }
            else if (((unint64_t)v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int64_t result = (uint64_t **)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = (unint64_t)result[1];
          if (v10 == v5)
          {
            if (*((unsigned __int8 *)result + 16) == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          int64_t result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>(a1, *a2, a3, (uint64_t)v24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        unint64_t v3 = v5 % v6;
        float v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        float v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
      float v14 = *(void **)(*(void *)a1 + 8 * v3);
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v23 = *(void *)(*(void *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6) {
          v23 %= v6;
        }
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  float v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v24[0] = *v14;
  *float v14 = v24[0];
LABEL_61:
  int64_t result = (uint64_t **)v24[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1A18E01E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,gm::Matrix<float,2,1>>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int64_t result = 0;
  result[1] = a2;
  char v9 = *a3;
  result[3] = 0;
  *((unsigned char *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  unint64_t v11 = (unsigned char *)*((void *)a3 + 1);
  unint64_t v10 = (unsigned char *)*((void *)a3 + 2);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    float v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    float v14 = (char *)operator new(v12);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[4 * (v12 >> 2)];
    int64_t result = memcpy(v14, v11, 12 * ((v12 - 12) / 0xCuLL) + 12);
    v13[4] = &v14[12 * ((v12 - 12) / 0xCuLL) + 12];
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1A18E02F4(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::CartographicMapEngineConfiguration::CartographicMapEngineConfiguration(uint64_t a1, char a2)
{
}

void sub_1A18E0478(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  md::MapEngineConfiguration::~MapEngineConfiguration(v1);
  _Unwind_Resume(a1);
}

void md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A18E0738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  md::TileSelectionContext::~TileSelectionContext((md::TileSelectionContext *)va);
  MEMORY[0x1A6239270](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void sub_1A18E0824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::StyleLogicContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  uint8x8_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint8x8_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x1AF456233693CD46) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint8x8_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v12 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  float v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  float v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      float v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      float v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v18 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v18 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v18 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  int8x8_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  unint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0xE42D19AFCA302E68)
      {
        if (v20[2] == 0xE42D19AFCA302E68) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    unint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0xE42D19AFCA302E68) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0xE42D19AFCA302E68)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *int64_t result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::TileSelectionLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  v41[0] = &unk_1EF5740D0;
  v41[1] = a2;
  v39[0] = &unk_1EF574118;
  v39[1] = a2;
  uint64_t v40 = v39;
  float v44 = v43;
  uint64_t v42 = v41;
  v43[0] = &unk_1EF574118;
  v43[1] = a2;
  _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v41);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
  }
  else if (v40)
  {
    (*(void (**)(void))(*v40 + 40))();
  }
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
  }
  else if (v42)
  {
    (*(void (**)(void))(*v42 + 40))();
  }
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v10 = (unsigned char *)a3[2];
  *(unsigned char *)(a4 + 128) = 0;
  if (v10[82])
  {
    *(void *)unint64_t v38 = v8;
    uint64_t v11 = *(void **)(a1 + 288);
    unint64_t v12 = (void *)(a1 + 296);
    if (v11 != (void *)(a1 + 296))
    {
      do
      {
        if (*((unsigned char *)v11 + 25))
        {
          if (*((unsigned char *)v11 + 25) != 5) {
            goto LABEL_51;
          }
          uint64_t v13 = *(void *)v10;
          if (!*(void *)v10) {
            goto LABEL_51;
          }
        }
        else
        {
          *(unsigned char *)(a4 + 128) = 1;
          uint64_t v13 = *(void *)v10;
          if (!*(void *)v10) {
            goto LABEL_51;
          }
        }
        unsigned __int8 v14 = atomic_load((unsigned __int8 *)(*(void *)(v13 + 16) + 2784));
        if (v14)
        {
          uint64_t v15 = *(void *)(*(void *)v10 + 16);
          if (v15)
          {
            unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v15 + 2784));
            if ((v16 & 1) == 0) {
              std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v15 + 2808));
            }
            uint64_t v17 = *(void *)(v15 + 120);
            unint64_t v18 = *(std::__shared_weak_count **)(v15 + 128);
            if (v18
              && (atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed),
                  !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              if (v17)
              {
LABEL_25:
                uint64_t v19 = *(void *)(*(void *)v10 + 16);
                unsigned __int8 v20 = atomic_load((unsigned __int8 *)(v19 + 2784));
                if ((v20 & 1) == 0) {
                  std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v19 + 2808));
                }
                uint64_t v21 = *(void *)(v19 + 120);
                uint64_t v22 = *(std::__shared_weak_count **)(v19 + 128);
                if (v22)
                {
                  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                  float v23 = -*(float *)(v21 + 208);
                  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                    std::__shared_weak_count::__release_weak(v22);
                  }
                }
                else
                {
                  float v23 = -*(float *)(v21 + 208);
                }
                double v24 = v23;
                uint64_t v25 = *(void *)(a1 + 128);
                if (v25) {
                  *(double *)(v25 + 16) = v24;
                }
                uint64_t v26 = *(void *)(a1 + 136);
                if (v26) {
                  *(double *)(v26 + 16) = v24;
                }
                uint64_t v27 = *(void *)(a1 + 144);
                if (v27) {
                  *(double *)(v27 + 16) = v24;
                }
                uint64_t v28 = *(void *)(a1 + 152);
                if (v28) {
                  *(double *)(v28 + 16) = v24;
                }
                uint64_t v29 = *(void *)(a1 + 160);
                if (v29) {
                  *(double *)(v29 + 16) = v24;
                }
                uint64_t v30 = *(void *)(a1 + 168);
                if (v30) {
                  *(double *)(v30 + 16) = v24;
                }
                uint64_t v31 = *(void *)(a1 + 176);
                if (v31) {
                  *(double *)(v31 + 16) = v24;
                }
                uint64_t v32 = *(void *)(a1 + 184);
                if (v32) {
                  *(double *)(v32 + 16) = v24;
                }
                uint64_t v33 = *(void *)(a1 + 192);
                if (v33) {
                  *(double *)(v33 + 16) = v24;
                }
              }
            }
            else if (v17)
            {
              goto LABEL_25;
            }
          }
        }
LABEL_51:
        unint64_t v34 = (void *)v11[1];
        if (v34)
        {
          do
          {
            uint8x8_t v35 = v34;
            unint64_t v34 = (void *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            uint8x8_t v35 = (void *)v11[2];
            BOOL v36 = *v35 == (void)v11;
            uint64_t v11 = v35;
          }
          while (!v36);
        }
        uint64_t v11 = v35;
      }
      while (v35 != v12);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 296));
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 288) = v12;
    uint64_t v8 = *(void *)v38;
  }
  *(unsigned char *)(a1 + 316) = *(unsigned char *)v9;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(v9 + 20);
  *(unsigned char *)(a4 + 129) = *(unsigned char *)(a1 + 328);
  md::TileSelectionLogic::processActiveTileSelection(a1, (unsigned __int16 **)(a1 + 240), (uint64_t *)(a4 + 88), v8, a4, a2, v10);
  if (!v44)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v44 + 48))(v44);
  uint64_t result = (uint64_t)v44;
  if (v44 == v43) {
    return (*(uint64_t (**)(void *))(v43[0] + 32))(v43);
  }
  if (v44) {
    return (*(uint64_t (**)(void))(*v44 + 40))();
  }
  return result;
}

void sub_1A18E1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_1A18E12E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (a21) {
    (*(void (**)(void))(*a21 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TileSelectionLogicVariableRate", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TileSelectionLogicVariableRate", "", v5, 2u);
  }
}

uint64_t md::TileSelectionLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  v35[0] = &unk_1EF573F68;
  v35[1] = a2;
  v33[0] = &unk_1EF573FB0;
  v33[1] = a2;
  unint64_t v34 = v33;
  unint64_t v38 = v37;
  BOOL v36 = v35;
  v37[0] = &unk_1EF573FB0;
  v37[1] = a2;
  _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v35);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
  }
  else if (v36)
  {
    (*(void (**)(void))(*v36 + 40))();
  }
  uint64_t v8 = *a3;
  uint64_t v9 = a3[2];
  if (*(unsigned char *)(v9 + 82))
  {
    v31[0] = &unk_1EF573FF8;
    v31[1] = a1;
    uint64_t v32 = v31;
    uint64_t v10 = *(char **)(v9 + 48);
    uint64_t v11 = *(char **)(v9 + 56);
    if (v10 == v11) {
      goto LABEL_16;
    }
    do
    {
      char v30 = *v10;
      if (!v32) {
        goto LABEL_49;
      }
      (*(void (**)(void *, char *))(*v32 + 48))(v32, &v30);
      ++v10;
    }
    while (v10 != v11);
    if (v32 == v31)
    {
LABEL_16:
      (*(void (**)(void *))(v31[0] + 32))(v31);
    }
    else if (v32)
    {
      (*(void (**)(void))(*v32 + 40))();
    }
  }
  if (*(void *)(a4 + 112))
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*(void **)(a4 + 104));
    *(void *)(a4 + 104) = 0;
    uint64_t v12 = *(void *)(a4 + 96);
    if (v12)
    {
      for (uint64_t i = 0; i != v12; ++i)
        *(void *)(*(void *)(a4 + 88) + 8 * i) = 0;
    }
    *(void *)(a4 + 112) = 0;
  }
  if (*(void *)(a4 + 72))
  {
    std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(*(void **)(a4 + 64));
    *(void *)(a4 + 64) = 0;
    uint64_t v14 = *(void *)(a4 + 56);
    if (v14)
    {
      for (uint64_t j = 0; j != v14; ++j)
        *(void *)(*(void *)(a4 + 48) + 8 * j) = 0;
    }
    *(void *)(a4 + 72) = 0;
  }
  if (a4 + 24 != a1 + 264)
  {
    unsigned __int8 v16 = *(unsigned char **)(a1 + 264);
    unint64_t v17 = (uint64_t)(*(void *)(a1 + 272) - (void)v16) >> 1;
    uint64_t v18 = *(void *)(a4 + 24);
    unint64_t v19 = (*(void *)(a4 + 32) - v18) >> 1;
    BOOL v20 = v17 >= v19;
    unint64_t v21 = v17 - v19;
    if (v21 != 0 && v20)
    {
      std::vector<md::TileSelectionTileSetType>::__append(a4 + 24, v21);
      unsigned __int8 v16 = *(unsigned char **)(a1 + 264);
    }
    else if (!v20)
    {
      *(void *)(a4 + 32) = v18 + 2 * v17;
    }
    uint64_t v22 = *(unsigned char **)(a1 + 272);
    if (v22 != v16) {
      memmove(*(void **)(a4 + 24), v16, v22 - v16);
    }
  }
  if (a1 + 240 != a4)
  {
    float v23 = *(unsigned char **)(a1 + 240);
    unint64_t v24 = (uint64_t)(*(void *)(a1 + 248) - (void)v23) >> 1;
    unint64_t v25 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1;
    BOOL v26 = v24 >= v25;
    unint64_t v27 = v24 - v25;
    if (v27 != 0 && v26)
    {
      std::vector<md::TileSelectionTileSetType>::__append(a4, v27);
      float v23 = *(unsigned char **)(a1 + 240);
    }
    else if (!v26)
    {
      *(void *)(a4 + 8) = *(void *)a4 + 2 * v24;
    }
    uint64_t v28 = *(unsigned char **)(a1 + 248);
    if (v28 != v23) {
      memmove(*(void **)a4, v23, v28 - v23);
    }
  }
  md::TileSelectionLogic::processActiveTileSelection(a1, (unsigned __int16 **)(a1 + 264), (uint64_t *)(a4 + 48), v8, a4, a2, (unsigned char *)v9);
  if (!v38)
  {
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v38 + 48))(v38);
  uint64_t result = (uint64_t)v38;
  if (v38 == v37) {
    return (*(uint64_t (**)(void *))(v37[0] + 32))(v37);
  }
  if (v38) {
    return (*(uint64_t (**)(void))(*v38 + 40))();
  }
  return result;
}

void sub_1A18E1960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25 == v25)
  {
    (*(void (**)(uint64_t *))(a22 + 32))(&a22);
  }
  else if (a25)
  {
    (*(void (**)(void))(*(void *)a25 + 40))();
  }
  std::function<void ()(void)>::~function(&a14);
  std::function<void ()(void)>::~function(&a18);
  _Unwind_Resume(a1);
}

void sub_1A18E19E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,gdc::TileSelectionResults>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint8x8_t v3 = (void *)v1[12];
      if (v3)
      {
        do
        {
          os_signpost_id_t v4 = (void *)*v3;
          operator delete(v3);
          uint8x8_t v3 = v4;
        }
        while (v4);
      }
      uint64_t v5 = (void *)v1[10];
      v1[10] = 0;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v6 = (void *)v1[6];
      if (v6)
      {
        do
        {
          uint64_t v7 = (void *)*v6;
          operator delete(v6);
          uint64_t v6 = v7;
        }
        while (v7);
      }
      uint64_t v8 = (void *)v1[4];
      v1[4] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void md::TileSelectionLogic::processActiveTileSelection(uint64_t a1, unsigned __int16 **a2, uint64_t *a3, uint64_t a4, uint64_t a5, md::LayoutContext *this, unsigned char *a7)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = md::LayoutContext::frameState(this);
  if (a7[82])
  {
    if (*(unsigned char *)(*(void *)(*(void *)a7 + 16) + 60) == 1) {
      double v12 = 2.0;
    }
    else {
      double v12 = 1.0;
    }
  }
  else
  {
    double v12 = 1.0;
  }
  double v13 = *(double *)(v11 + 88);
  uint64_t v14 = a1;
  uint64_t v15 = *(void *)(a1 + 416);
  unsigned __int8 v16 = *a2;
  if (v15)
  {
    unint64_t v17 = a2[1];
    uint64_t v18 = *a2;
    if (v16 != v17)
    {
      uint64_t v18 = *a2;
      while (1)
      {
        unsigned int v19 = *v18;
        if (v19 == 8) {
          break;
        }
        ++v18;
        if (v19 > 8 || v18 == v17) {
          goto LABEL_20;
        }
      }
    }
    if (v18 != v17)
    {
      double v21 = *(double *)(v15 + 32);
      double v22 = *(double *)(v15 + 40);
      if (vabdd_f64(v21, v22) > 25.0)
      {
        *(double *)(v15 + 32) = v22;
        gdc::GlobeTileSelector::purgeCache(*(void **)(a1 + 192));
        double v21 = *(double *)(*(void *)(a1 + 416) + 32);
      }
      *(double *)(a5 + 136) = v21;
      *(unsigned char *)(a5 + 144) = 1;
      unsigned __int8 v16 = *a2;
    }
  }
LABEL_20:
  uint64_t v23 = *(void *)(a4 + 5584);
  if (!v23) {
    uint64_t v23 = a4;
  }
  uint64_t v134 = v23;
  size_t v149 = v153;
  unint64_t v150 = (unsigned __int16 *)v153;
  uint8x8_t v151 = v153;
  unint64_t v152 = 9;
  os_log_t log = (os_log_t)a2[1];
  if (v16 != (unsigned __int16 *)log)
  {
    uint64_t v131 = (uint64_t)(v13 * 1000.0);
    uint64_t v132 = (float *)(a1 + 200);
    unint64_t v133 = a3 + 2;
    unint64_t v24 = (unint64_t)v173;
    while (1)
    {
      *(_WORD *)std::string buf = *v16;
      unint64_t v25 = *(unsigned __int16 *)buf;
      uint64_t v26 = *(void *)(a1 + 128 + 8 * *(unsigned __int16 *)buf);
      if (v26) {
        break;
      }
LABEL_25:
      if (++v16 == (unsigned __int16 *)log)
      {
        if (v149 == v150) {
          goto LABEL_235;
        }
        if (GEOGetVectorKitTileSelectionLogicLog::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitTileSelectionLogicLog::onceToken, &__block_literal_global_23108);
        }
        size_t v104 = (id)GEOGetVectorKitTileSelectionLogicLog::log;
        if (!os_log_type_enabled(v104, OS_LOG_TYPE_ERROR)) {
          goto LABEL_234;
        }
        loga = v104;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v154);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)"Detected large tile selections [", 32);
        unint64_t v105 = (unsigned __int16 *)v149;
        BOOL v106 = v150;
        if (v149 != v150)
        {
          do
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)"{", 1);
            unint64_t v107 = *v105;
            uint8x8_t v108 = "<Invalid>";
            if (v107 <= 8) {
              uint8x8_t v108 = off_1E5A95718[v107];
            }
            size_t v109 = strlen(v108);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)v108, v109);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)":", 1);
            unint64_t v110 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v110, (uint64_t)"}", 1);
            BOOL v111 = *v105 == *(v150 - 8);
            BOOL v112 = *((void *)v105 + 1) == *((void *)v150 - 1);
            if (v111 && v112) {
              uint64_t v113 = "]";
            }
            else {
              uint64_t v113 = ", ";
            }
            if (v111 && v112) {
              uint64_t v114 = 1;
            }
            else {
              uint64_t v114 = 2;
            }
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)v113, v114);
            v105 += 8;
          }
          while (v105 != v106);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)" with camera:\n", 14);
        md::CameraContext::toString((md::CameraContext *)&v137, (double *)a4);
        if (v139 >= 0) {
          uint64_t v115 = &v137;
        }
        else {
          uint64_t v115 = v137;
        }
        if (v139 >= 0) {
          uint64_t v116 = HIBYTE(v139);
        }
        else {
          uint64_t v116 = (uint64_t)v138;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v156, (uint64_t)v115, v116);
        if (SHIBYTE(v139) < 0)
        {
          operator delete(v137);
          char v117 = v169;
          if ((v169 & 0x10) == 0) {
            goto LABEL_213;
          }
        }
        else
        {
          char v117 = v169;
          if ((v169 & 0x10) == 0)
          {
LABEL_213:
            if ((v117 & 8) == 0)
            {
              size_t v118 = 0;
              HIBYTE(v179) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_228;
            }
            unint64_t v121 = (void **)&v159;
            unint64_t v120 = v161;
LABEL_220:
            unint64_t v122 = *v121;
            size_t v118 = v120 - (void)*v121;
            if (v118 >= 0x7FFFFFFFFFFFFFF8) {
              abort();
            }
            if (v118 >= 0x17)
            {
              uint64_t v123 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v118 | 7) != 0x17) {
                uint64_t v123 = v118 | 7;
              }
              uint64_t v124 = v123 + 1;
              p_dst = (void **)operator new(v123 + 1);
              uint64_t v178 = (md::LayoutContext *)v118;
              int64_t v179 = v124 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v179) = v120 - *(unsigned char *)v121;
              p_dst = (void **)&__dst;
              if (!v118) {
                goto LABEL_228;
              }
            }
            memmove(p_dst, v122, v118);
LABEL_228:
            *((unsigned char *)p_dst + v118) = 0;
            uint64_t v154 = *MEMORY[0x1E4FBA408];
            uint8x8_t v125 = *(void **)(MEMORY[0x1E4FBA408] + 72);
            *(uint64_t *)((char *)&v154 + *(void *)(v154 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
            size_t v156 = v125;
            uint64_t v157 = MEMORY[0x1E4FBA470] + 16;
            if (v167 < 0) {
              operator delete(v165);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1A62391A0](&v170);
            uint64_t v126 = (void **)&__dst;
            if (v179 < 0) {
              uint64_t v126 = __dst;
            }
            *(_DWORD *)std::string buf = 136315138;
            BOOL v172 = v126;
            size_t v104 = loga;
            _os_log_impl(&dword_1A1780000, loga, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
            uint64_t v14 = a1;
            if (SHIBYTE(v179) < 0) {
              operator delete(__dst);
            }
LABEL_234:

            goto LABEL_235;
          }
        }
        unint64_t v120 = v168;
        if (v168 < v163)
        {
          unint64_t v168 = v163;
          unint64_t v120 = v163;
        }
        unint64_t v121 = &v162;
        goto LABEL_220;
      }
    }
    v175[0] = &unk_1EF51E068;
    v175[1] = this;
    v173[0] = &unk_1EF51E0B0;
    v173[1] = this;
    unint64_t v174 = v173;
    unint64_t v180 = (void **)&__dst;
    unint64_t v176 = v175;
    __dst = (void **)&unk_1EF51E0B0;
    uint64_t v178 = this;
    std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v175);
    if (v174 == v173)
    {
      (*(void (**)(void *))(v173[0] + 32))(v173);
    }
    else if (v174)
    {
      (*(void (**)(void *))(*v174 + 40))(v174);
    }
    if (v176 == v175)
    {
      (*(void (**)(void *))(v175[0] + 32))(v175);
      if (v25 == 4)
      {
LABEL_35:
        BOOL v27 = 0;
LABEL_38:
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, BOOL, double))(*(void *)v26 + 16))(&v137, v26, v134, v27, v12);
        if ((v141 > 0x7F || (unint64_t)v147 >= 0x80)
          && v131
           - std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,long long>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(v132, v25, buf)[3] >= 30001)
        {
          std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,long long>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,long long>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(v132, v25, buf)[3] = v131;
          if (v141 <= (unint64_t)v147) {
            unint64_t v28 = (unint64_t)v147;
          }
          else {
            unint64_t v28 = v141;
          }
          unint64_t v24 = (unint64_t)v149;
          uint64_t v29 = (char *)v150;
          uint64_t v30 = ((char *)v150 - (unsigned char *)v149) >> 4;
          if (v152 < v30 + 1)
          {
            uint64_t v31 = v151;
            unint64_t v32 = (1 << -(char)__clz(v152 + 1));
            if (v152 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v32 = 1;
            }
            if (v32 <= v30 + 1) {
              uint64_t v33 = v30 + 1;
            }
            else {
              uint64_t v33 = v32;
            }
            unint64_t v34 = (char *)malloc_type_malloc(16 * v33, 0x100004030AC6366uLL);
            uint8x8_t v35 = v34;
            BOOL v36 = (long long *)v149;
            uint64_t v37 = v150;
            if (v149 != v150)
            {
              unint64_t v38 = v34;
              do
              {
                long long v39 = *v36++;
                *(_OWORD *)unint64_t v38 = v39;
                v38 += 16;
              }
              while (v36 != (long long *)v37);
            }
            if ((void *)v24 != v31) {
              free(v149);
            }
            uint64_t v29 = &v35[16 * v30];
            size_t v149 = v35;
            unint64_t v152 = v33;
            uint64_t v14 = a1;
          }
          *(_WORD *)uint64_t v29 = v25;
          *((void *)v29 + 1) = v28;
          unint64_t v150 = (unsigned __int16 *)(v29 + 16);
        }
        LOWORD(v154) = v25;
        int v40 = (int)v137;
        int v155 = (int)v137;
        uint64_t v41 = v138;
        unint64_t v42 = v139;
        uint64_t v138 = 0;
        int64_t v139 = 0;
        size_t v156 = v41;
        uint64_t v157 = v42;
        unint64_t v158 = v140;
        unint64_t v159 = v141;
        int v160 = v142;
        if (v141)
        {
          unint64_t v43 = *((void *)v140 + 1);
          if ((v42 & (v42 - 1)) != 0)
          {
            if (v43 >= v42) {
              v43 %= v42;
            }
          }
          else
          {
            v43 &= v42 - 1;
          }
          *((void *)v41 + v43) = &v158;
          uint64_t v140 = 0;
          unint64_t v141 = 0;
        }
        int v44 = v143;
        LODWORD(v161) = v143;
        uint64_t v45 = v144;
        unint64_t v46 = v145;
        float v144 = 0;
        unint64_t v145 = 0;
        uint64_t v162 = v45;
        unint64_t v163 = v46;
        std::string __p = v146;
        uint64_t v165 = v147;
        int v166 = v148;
        if (v147)
        {
          unint64_t v47 = *((void *)v146 + 1);
          if ((v46 & (v46 - 1)) != 0)
          {
            if (v47 >= v46) {
              v47 %= v46;
            }
          }
          else
          {
            v47 &= v46 - 1;
          }
          *((void *)v45 + v47) = &__p;
          BOOL v146 = 0;
          unint64_t v147 = 0;
        }
        unint64_t v48 = a3[1];
        if (v48)
        {
          uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          if (v49.u32[0] > 1uLL)
          {
            unint64_t v24 = v25;
            if (v48 <= v25) {
              unint64_t v24 = v25 % v48;
            }
          }
          else
          {
            unint64_t v24 = (v48 - 1) & v25;
          }
          unint64_t v50 = *(uint64_t ****)(*a3 + 8 * v24);
          if (v50)
          {
            uint8x8_t v51 = *v50;
            if (v51)
            {
              if (v49.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v53 = v51[1];
                  if (v53 == (uint64_t *)v25)
                  {
                    if (*((unsigned __int16 *)v51 + 8) == v25) {
                      goto LABEL_162;
                    }
                  }
                  else if (((unint64_t)v53 & (v48 - 1)) != v24)
                  {
                    goto LABEL_89;
                  }
                  uint8x8_t v51 = (uint64_t **)*v51;
                  if (!v51) {
                    goto LABEL_89;
                  }
                }
              }
              do
              {
                unint64_t v52 = (unint64_t)v51[1];
                if (v52 == v25)
                {
                  if (*((unsigned __int16 *)v51 + 8) == v25) {
                    goto LABEL_162;
                  }
                }
                else
                {
                  if (v52 >= v48) {
                    v52 %= v48;
                  }
                  if (v52 != v24) {
                    break;
                  }
                }
                uint8x8_t v51 = (uint64_t **)*v51;
              }
              while (v51);
            }
          }
        }
LABEL_89:
        unint64_t v54 = operator new(0x78uLL);
        size_t v55 = v54;
        *unint64_t v54 = 0;
        v54[1] = v25;
        *((_WORD *)v54 + 8) = v154;
        *((_DWORD *)v54 + 6) = v40;
        uint64_t v56 = v156;
        unint64_t v57 = v157;
        size_t v156 = 0;
        uint64_t v157 = 0;
        v54[4] = v56;
        v54[5] = v57;
        uint8x8_t v58 = v158;
        unint64_t v59 = v159;
        v54[6] = v158;
        v54[7] = v59;
        *((_DWORD *)v54 + 16) = v160;
        if (v59)
        {
          unint64_t v60 = v58[1];
          if ((v57 & (v57 - 1)) != 0)
          {
            if (v60 >= v57) {
              v60 %= v57;
            }
          }
          else
          {
            v60 &= v57 - 1;
          }
          v56[v60] = v54 + 6;
          unint64_t v158 = 0;
          unint64_t v159 = 0;
        }
        unint64_t v61 = __p;
        uint64_t v62 = v165;
        v54[12] = __p;
        *((_DWORD *)v54 + 18) = v44;
        uint64_t v63 = v162;
        unint64_t v64 = v163;
        uint64_t v162 = 0;
        unint64_t v163 = 0;
        v54[10] = v63;
        v54[11] = v64;
        v54[13] = v62;
        *((_DWORD *)v54 + 28) = v166;
        if (v62)
        {
          unint64_t v65 = v61[1];
          if ((v64 & (v64 - 1)) != 0)
          {
            if (v65 >= v64) {
              v65 %= v64;
            }
          }
          else
          {
            v65 &= v64 - 1;
          }
          v63[v65] = v54 + 12;
          std::string __p = 0;
          uint64_t v165 = 0;
        }
        float v66 = (float)(unint64_t)(a3[3] + 1);
        float v67 = *((float *)a3 + 8);
        if (v48 && (float)(v67 * (float)v48) >= v66)
        {
          unint64_t v25 = v24;
          goto LABEL_152;
        }
        BOOL v68 = v48 < 3 || (v48 & (v48 - 1)) != 0;
        unint64_t v69 = v68 | (2 * v48);
        unint64_t v70 = vcvtps_u32_f32(v66 / v67);
        if (v69 <= v70) {
          size_t prime = v70;
        }
        else {
          size_t prime = v69;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v48 = a3[1];
        }
        if (prime <= v48)
        {
          if (prime >= v48) {
            goto LABEL_140;
          }
          unint64_t v82 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
          if (v48 < 3 || (uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
          {
            unint64_t v82 = std::__next_prime(v82);
          }
          else
          {
            uint64_t v84 = 1 << -(char)__clz(v82 - 1);
            if (v82 >= 2) {
              unint64_t v82 = v84;
            }
          }
          if (prime <= v82) {
            size_t prime = v82;
          }
          if (prime >= v48)
          {
            unint64_t v48 = a3[1];
LABEL_140:
            if ((v48 & (v48 - 1)) != 0)
            {
              if (v48 <= v25) {
                v25 %= v48;
              }
            }
            else
            {
              unint64_t v25 = (v48 - 1) & v25;
            }
LABEL_152:
            uint64_t v88 = *a3;
            uint64_t v89 = *(void **)(*a3 + 8 * v25);
            if (v89)
            {
              *size_t v55 = *v89;
            }
            else
            {
              *size_t v55 = *v133;
              void *v133 = v55;
              *(void *)(v88 + 8 * v25) = v133;
              if (!*v55) {
                goto LABEL_161;
              }
              unint64_t v90 = *(void *)(*v55 + 8);
              if ((v48 & (v48 - 1)) != 0)
              {
                if (v90 >= v48) {
                  v90 %= v48;
                }
              }
              else
              {
                v90 &= v48 - 1;
              }
              uint64_t v89 = (void *)(*a3 + 8 * v90);
            }
            *uint64_t v89 = v55;
LABEL_161:
            ++a3[3];
LABEL_162:
            uint64_t v91 = __p;
            if (__p)
            {
              do
              {
                size_t v92 = (void *)*v91;
                operator delete(v91);
                uint64_t v91 = v92;
              }
              while (v92);
            }
            float v93 = v162;
            uint64_t v162 = 0;
            unint64_t v24 = (unint64_t)v173;
            if (v93) {
              operator delete(v93);
            }
            float v94 = v158;
            if (v158)
            {
              do
              {
                BOOL v95 = (void *)*v94;
                operator delete(v94);
                float v94 = v95;
              }
              while (v95);
            }
            unint64_t v96 = v156;
            size_t v156 = 0;
            if (v96) {
              operator delete(v96);
            }
            unint64_t v97 = v146;
            if (v146)
            {
              do
              {
                size_t v98 = (void *)*v97;
                operator delete(v97);
                unint64_t v97 = v98;
              }
              while (v98);
            }
            unint64_t v99 = v144;
            float v144 = 0;
            if (v99) {
              operator delete(v99);
            }
            uint8x8_t v100 = v140;
            if (v140)
            {
              do
              {
                uint64_t v101 = (void *)*v100;
                operator delete(v100);
                uint8x8_t v100 = v101;
              }
              while (v101);
            }
            uint64_t v102 = v138;
            uint64_t v138 = 0;
            if (v102) {
              operator delete(v102);
            }
            if (!v180)
            {
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
              return;
            }
            (*((void (**)(void **))*v180 + 6))(v180);
            if (v180 == (void **)&__dst)
            {
              ((void (*)(void ***))__dst[4])(&__dst);
            }
            else if (v180)
            {
              (*((void (**)(void))*v180 + 5))();
            }
            goto LABEL_25;
          }
          if (!prime)
          {
            unint64_t v103 = (void *)*a3;
            *a3 = 0;
            if (v103) {
              operator delete(v103);
            }
            unint64_t v48 = 0;
            a3[1] = 0;
            goto LABEL_140;
          }
        }
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v72 = operator new(8 * prime);
        size_t v73 = (void *)*a3;
        *a3 = (uint64_t)v72;
        if (v73) {
          operator delete(v73);
        }
        uint64_t v74 = 0;
        a3[1] = prime;
        do
          *(void *)(*a3 + 8 * v74++) = 0;
        while (prime != v74);
        uint8x8_t v75 = (void *)*v133;
        if (!*v133)
        {
LABEL_139:
          unint64_t v48 = prime;
          goto LABEL_140;
        }
        size_t v76 = v75[1];
        size_t v77 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v78 = v76 & v77;
          *(void *)(*a3 + 8 * v78) = v133;
          for (uint64_t i = (void *)*v75; *v75; uint64_t i = (void *)*v75)
          {
            size_t v80 = i[1] & v77;
            if (v80 == v78)
            {
              uint8x8_t v75 = i;
            }
            else if (*(void *)(*a3 + 8 * v80))
            {
              *uint8x8_t v75 = *i;
              uint64_t v81 = 8 * v80;
              *uint64_t i = **(void **)(*a3 + v81);
              **(void **)(*a3 + v81) = i;
            }
            else
            {
              *(void *)(*a3 + 8 * v80) = v75;
              uint8x8_t v75 = i;
              size_t v78 = v80;
            }
          }
          goto LABEL_139;
        }
        if (v76 >= prime) {
          v76 %= prime;
        }
        *(void *)(*a3 + 8 * v76) = v133;
        uint64_t v85 = (void *)*v75;
        if (!*v75) {
          goto LABEL_139;
        }
        while (1)
        {
          size_t v87 = v85[1];
          if (v87 >= prime) {
            v87 %= prime;
          }
          if (v87 != v76)
          {
            if (!*(void *)(*a3 + 8 * v87))
            {
              *(void *)(*a3 + 8 * v87) = v75;
              goto LABEL_144;
            }
            *uint8x8_t v75 = *v85;
            uint64_t v86 = 8 * v87;
            *uint64_t v85 = **(void **)(*a3 + v86);
            **(void **)(*a3 + v86) = v85;
            uint64_t v85 = v75;
          }
          size_t v87 = v76;
LABEL_144:
          uint8x8_t v75 = v85;
          uint64_t v85 = (void *)*v85;
          size_t v76 = v87;
          if (!v85) {
            goto LABEL_139;
          }
        }
      }
    }
    else
    {
      if (v176) {
        (*(void (**)(void *))(*v176 + 40))(v176);
      }
      if (v25 == 4) {
        goto LABEL_35;
      }
    }
    BOOL v27 = *(unsigned char *)(v14 + 328) != 0;
    goto LABEL_38;
  }
LABEL_235:
  *(_WORD *)(a5 + 130) = 0;
  if (*(unsigned __int8 *)(md::LayoutContext::frameState(this) + 128) - 1 >= 3)
  {
    if (!*(unsigned char *)(v14 + 316)) {
      goto LABEL_240;
    }
    __int16 v127 = 4;
  }
  else
  {
    __int16 v127 = 1;
  }
  *(_WORD *)(a5 + 130) = v127;
LABEL_240:
  if (v149 != v151) {
    free(v149);
  }
}

void sub_1A18E2AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a59);

  if (a37 != a39)
  {
    free(a37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TileSelectionLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0,std::allocator<md::TileSelectionLogic::processActiveTileSelection(geo::linear_set<md::TileSelectionTileSetType,std::less<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>,std::vector<md::TileSelectionTileSetType>> const&,std::unordered_map<md::TileSelectionTileSetType,gdc::TileSelectionResults> &,md::CameraContext const&,md::TileSelectionContext &,md::LayoutContext const&,md::StyleLogicContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TileSelectionLogic", "", v5, 2u);
  }
}

void gdc::GlobeTileSelector::tilesInView(gdc::GlobeTileSelector *this@<X0>, const gdc::CameraView *a2@<X1>, double a3@<D0>, int a4@<W2>, _DWORD *a5@<X8>)
{
  uint64_t v10 = *((void *)this + 49);
  if (v10)
  {
    *(_DWORD *)unint64_t v28 = *((_DWORD *)this + 2);
    (*(void (**)(uint64_t, unsigned char *, char *))(*(void *)v10 + 48))(v10, v28, (char *)this + 272);
  }
  long long v73 = 0u;
  long long v74 = 0u;
  int v75 = 1065353216;
  long long v70 = 0u;
  long long v71 = 0u;
  int v72 = 1065353216;
  memset(v28, 0, 32);
  *(_DWORD *)&v28[32] = 1065353216;
  gdc::GlobeTileSelector::tilesInViewInternal((uint64_t)this, (double *)a2, (uint64_t)&v73, v28, a3);
  if (!a4 || !*((unsigned char *)this + 312)) {
    goto LABEL_13;
  }
  uint64_t v11 = *((void *)this + 38);
  if (!v11) {
    goto LABEL_22;
  }
  (*(void (**)(double *__return_ptr))(*(void *)v11 + 48))(&v65);
  __n128 v12 = (__n128)vceqzq_f64(v69);
  __n128 v13 = (__n128)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v68), (int32x4_t)v12));
  v13.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v13);
  v13.n128_u16[0] = vmaxv_u16((uint16x4_t)v13.n128_u64[0]);
  if ((v13.n128_u8[0] & 1) == 0)
  {
    v12.n128_f64[0] = v65;
    v13.n128_u64[0] = 0xC00921FB54442D18;
    if (v65 == -3.14159265)
    {
      v12.n128_f64[0] = v66;
      if (v66 == -3.14159265)
      {
        v13.n128_f64[0] = v67;
        if (v67 == 0.0) {
          goto LABEL_13;
        }
      }
    }
  }
  if (!*((unsigned char *)this + 312))
  {
LABEL_23:
    uint64_t v26 = (VKDebugSettings *)std::__throw_bad_optional_access[abi:nn180100]();
    [(VKDebugSettings *)v26 daVinciCameraController];
    return;
  }
  uint64_t v14 = *((void *)this + 38);
  if (!v14)
  {
LABEL_22:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_23;
  }
  (*(void (**)(unsigned char *__return_ptr, __n128, __n128))(*(void *)v14 + 48))(v28, v13, v12);
  uint64_t v15 = *((void *)a2 + 60);
  uint64_t v31 = *(void *)v28;
  long long v32 = *(_OWORD *)&v28[8];
  long long v33 = *(_OWORD *)&v28[24];
  long long v34 = v29;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int64x2_t v40 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v41 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v42 = v40;
  int64x2_t v43 = v41;
  int64x2_t v44 = v40;
  int64x2_t v45 = v41;
  int64x2_t v46 = v40;
  int64x2_t v47 = v41;
  int64x2_t v48 = v40;
  int64x2_t v49 = v41;
  int64x2_t v50 = v40;
  int64x2_t v51 = v41;
  char v52 = 1;
  char v53 = 0;
  char v54 = 0;
  long long v16 = *((_OWORD *)a2 + 24);
  long long v55 = *((_OWORD *)a2 + 23);
  long long v56 = v16;
  long long v17 = *((_OWORD *)a2 + 26);
  long long v57 = *((_OWORD *)a2 + 25);
  long long v58 = v17;
  long long v59 = *((_OWORD *)a2 + 27);
  int v60 = *((_DWORD *)a2 + 112);
  uint64_t v18 = *((void *)a2 + 57);
  long long v62 = *((_OWORD *)a2 + 29);
  uint64_t v61 = v18;
  uint64_t v63 = v15;
  uint64_t v64 = 0;
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)v28, (const Camera *)v30);
  gdc::GlobeTileSelector::tilesInViewInternal((uint64_t)this, (double *)v28, (uint64_t)&v70, &v73, a3);
LABEL_13:
  int v19 = *((_DWORD *)this + 2);
  *a5 = v19;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a5 + 2), (uint64_t)&v73);
  a5[12] = v19;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a5 + 14), (uint64_t)&v70);
  BOOL v20 = (void *)v71;
  if ((void)v71)
  {
    do
    {
      double v21 = (void *)*v20;
      operator delete(v20);
      BOOL v20 = v21;
    }
    while (v21);
  }
  double v22 = (void *)v70;
  *(void *)&long long v70 = 0;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = (void *)v74;
  if ((void)v74)
  {
    do
    {
      unint64_t v24 = (void *)*v23;
      operator delete(v23);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  unint64_t v25 = (void *)v73;
  *(void *)&long long v73 = 0;
  if (v25) {
    operator delete(v25);
  }
}

unsigned char *std::__optional_storage_base<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>,false> const&>(unsigned char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  v8[3] = *MEMORY[0x1E4F143B8];
  if (result[32] == a2[32])
  {
    if (result[32])
    {
      uint8x8_t v3 = (unsigned char *)*((void *)a2 + 3);
      if (v3)
      {
        if (v3 == a2)
        {
          uint64_t v7 = v6;
          (*(void (**)(unsigned char *, void *))(*(void *)a2 + 24))(a2, v6);
        }
        else
        {
          uint64_t v7 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 16))(v3);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      if (v6 != v2)
      {
        os_signpost_id_t v4 = v7;
        uint64_t v5 = (void *)v2[3];
        if (v7 == v6)
        {
          if (v5 == v2)
          {
            (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
            (*(void (**)(void *))(*v7 + 32))(v7);
            uint64_t v7 = 0;
            (*(void (**)(void, void *))(*(void *)v2[3] + 24))(v2[3], v6);
            (*(void (**)(void))(*(void *)v2[3] + 32))(v2[3]);
            v2[3] = 0;
            uint64_t v7 = v6;
            (*(void (**)(void *, void *))(v8[0] + 24))(v8, v2);
            (*(void (**)(void *))(v8[0] + 32))(v8);
          }
          else
          {
            (*(void (**)(void *, void *))(v6[0] + 24))(v6, v2);
            (*(void (**)(void *))(*v7 + 32))(v7);
            uint64_t v7 = (void *)v2[3];
          }
          v2[3] = v2;
        }
        else if (v5 == v2)
        {
          (*(void (**)(void *, void *))(*v2 + 24))(v2, v6);
          (*(void (**)(void))(*(void *)v2[3] + 32))(v2[3]);
          v2[3] = v7;
          uint64_t v7 = v6;
        }
        else
        {
          uint64_t v7 = (void *)v2[3];
          v2[3] = v4;
        }
      }
      uint64_t result = v7;
      if (v7 == v6)
      {
        return (unsigned char *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else if (v7)
      {
        return (unsigned char *)(*(uint64_t (**)(void))(*v7 + 40))();
      }
    }
  }
  else if (result[32])
  {
    uint64_t result = (unsigned char *)*((void *)result + 3);
    if (result == (unsigned char *)v2)
    {
      uint64_t result = (unsigned char *)(*(uint64_t (**)(void *))(*v2 + 32))(v2);
      *((unsigned char *)v2 + 32) = 0;
    }
    else
    {
      if (result) {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 40))(result);
      }
      *((unsigned char *)v2 + 32) = 0;
    }
  }
  else
  {
    uint64_t result = (unsigned char *)*((void *)a2 + 3);
    if (result)
    {
      if (result == a2)
      {
        v2[3] = v2;
        uint64_t result = (unsigned char *)(*(uint64_t (**)(void, void *))(**((void **)a2 + 3) + 24))(*((void *)a2 + 3), v2);
      }
      else
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
        v2[3] = result;
      }
    }
    else
    {
      v2[3] = 0;
    }
    *((unsigned char *)v2 + 32) = 1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TileSelectionLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TileSelectionLogic", "", v5, 2u);
  }
}

void gdc::S2TileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  *(_OWORD *)int v19 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v21 = 1065353216;
  os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = (double *)(a2 + 984);
    int64x2_t v18 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v17 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      char v6 = *((unsigned char *)v4 + 16);
      int32x2_t v38 = vrev64_s32(*(int32x2_t *)((char *)v4 + 20));
      unsigned __int8 v39 = *((unsigned char *)v4 + 17);
      char v40 = v6;
      double v7 = sqrt(ldexp(2.0943951, -2 * v39) * 4.0538689e13);
      double v8 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v38, 0.5, 0.5);
      v37[0] = -(v7 * 0.5);
      v37[1] = v37[0];
      v37[2] = v37[0];
      void v37[3] = v7 * 0.5;
      v37[4] = v7 * 0.5;
      v37[5] = v7 * 0.5;
      uint64_t v31 = 0;
      long long v28 = 0u;
      uint64_t v29 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      uint64_t v24 = 0x3FF0000000000000;
      *(void *)&long long v27 = 0x3FF0000000000000;
      uint64_t v30 = 0x3FF0000000000000;
      uint64_t v35 = 0x3FF0000000000000;
      double v32 = v8 * 6378137.0;
      double v33 = v9 * 6378137.0;
      double v34 = v10 * 6356752.31;
      v36[0] = v18;
      v36[1] = xmmword_1A28FC720;
      v36[2] = v17;
      v41[0] = &unk_1EF57D5A8;
      v41[1] = v36;
      v41[2] = &v24;
      int64x2_t v42 = v41;
      double v11 = gm::Box<double,3>::forEachCorner((uint64_t)v37, (uint64_t)v41);
      if (v42 == v41)
      {
        (*(void (**)(void *, double))(v41[0] + 32))(v41, v11);
      }
      else if (v42)
      {
        (*(void (**)(double))(*v42 + 40))(v11);
      }
      if (geo::Intersect::encloses<double>(v5, (double *)v36)) {
        std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v19, (unsigned __int8 *)v4 + 16, (uint64_t)(v4 + 2));
      }
      os_signpost_id_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  int v12 = *(_DWORD *)(a1 + 8);
  *a3 = v12;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 2), (uint64_t)v19);
  a3[12] = v12;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 14), (uint64_t)v22);
  __n128 v13 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      operator delete(v13);
      __n128 v13 = v14;
    }
    while (v14);
  }
  uint64_t v15 = v19[0];
  v19[0] = 0;
  if (v15) {
    operator delete(v15);
  }
}

double gm::Box<double,3>::forEachCorner(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(_OWORD *)int v23 = *(_OWORD *)(a1 + 24);
  *(void *)&v23[16] = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 48))(v4, v23);
  *(void *)int v23 = *(void *)a1;
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v23);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)int v23 = *(void *)(a1 + 24);
  *(void *)&v23[8] = v7;
  *(void *)&v23[16] = v8;
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v23);
  uint64_t v10 = *(void *)(a1 + 40);
  *(_OWORD *)int v23 = *(_OWORD *)a1;
  *(void *)&v23[16] = v10;
  uint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 48))(v11, v23);
  uint64_t v12 = *(void *)(a1 + 16);
  *(_OWORD *)int v23 = *(_OWORD *)(a1 + 24);
  *(void *)&v23[16] = v12;
  uint64_t v13 = *(void *)(a2 + 24);
  if (!v13) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 48))(v13, v23);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 16);
  *(void *)int v23 = *(void *)a1;
  *(void *)&v23[8] = v14;
  *(void *)&v23[16] = v15;
  uint64_t v16 = *(void *)(a2 + 24);
  if (!v16) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v16 + 48))(v16, v23);
  *(void *)int v23 = *(void *)(a1 + 24);
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 8);
  uint64_t v17 = *(void *)(a2 + 24);
  if (!v17) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 48))(v17, v23);
  uint64_t v18 = *(void *)(a1 + 16);
  *(_OWORD *)int v23 = *(_OWORD *)a1;
  *(void *)&v23[16] = v18;
  uint64_t v19 = *(void *)(a2 + 24);
  if (v19)
  {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v19 + 48))(v19, v23);
  }
  else
  {
LABEL_10:
    std::__throw_bad_function_call[abi:nn180100]();
    *(void *)&double result = *(_OWORD *)&std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::operator()(v21, v22);
  }
  return result;
}

float64x2_t std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(float64x2_t **)(a1 + 16);
  double v4 = a2[1];
  double v5 = a2[2];
  float64x2_t v7 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v3[6], *v3, *a2), v3[2], v4), v3[4], v5);
  v8.f64[1] = *(float64_t *)(v2 + 24);
  v8.f64[0] = v3[7].f64[0] + v3[1].f64[0] * *a2 + v3[3].f64[0] * v4 + v3[5].f64[0] * v5;
  float64_t v6 = v8.f64[0];
  float64x2_t v9 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
  v10.f64[1] = v9.f64[1];
  v10.f64[0] = *(float64_t *)(v2 + 16);
  int8x16_t v11 = (int8x16_t)vcgtq_f64(v10, v8);
  v10.f64[1] = v9.f64[1];
  v10.f64[0] = v6;
  int8x16_t v12 = vbslq_s8(v11, (int8x16_t)v10, *(int8x16_t *)(v2 + 16));
  *(float64x2_t *)uint64_t v2 = vminnmq_f64(v7, *(float64x2_t *)v2);
  *(int8x16_t *)(v2 + 16) = v12;
  v9.f64[1] = v6;
  float64x2_t result = vmaxnmq_f64(*(float64x2_t *)(v2 + 32), v9);
  *(float64x2_t *)(v2 + 32) = result;
  return result;
}

uint64_t gdc::S2TileSelector::S2TileSelector(unsigned int,double)::$_0::operator()(char *a1)
{
  int32x2_t v40 = vrev64_s32(*(int32x2_t *)(a1 + 4));
  char v41 = a1[1];
  char v42 = *a1;
  double v1 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 0.0, 0.0);
  double v4 = v3 * 6356752.31;
  double v5 = sqrt(v1 * 6378137.0 * (v1 * 6378137.0) + v2 * 6378137.0 * (v2 * 6378137.0));
  double v6 = atan2(v3 * 6356752.31, v5 * 0.996647189);
  __double2 v7 = __sincos_stret(v6);
  long double v39 = atan2(v4 + v7.__sinval * v7.__sinval * 42841.3115 * v7.__sinval, v5 - v7.__cosval * v7.__cosval * 42697.6727 * v7.__cosval);
  double v8 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 1.0, 0.0);
  double v11 = v10 * 6356752.31;
  double v12 = sqrt(v8 * 6378137.0 * (v8 * 6378137.0) + v9 * 6378137.0 * (v9 * 6378137.0));
  double v13 = atan2(v10 * 6356752.31, v12 * 0.996647189);
  __double2 v14 = __sincos_stret(v13);
  long double v38 = atan2(v11 + v14.__sinval * v14.__sinval * 42841.3115 * v14.__sinval, v12 - v14.__cosval * v14.__cosval * 42697.6727 * v14.__cosval);
  double v15 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 1.0, 1.0);
  double v18 = v17 * 6356752.31;
  double v19 = sqrt(v15 * 6378137.0 * (v15 * 6378137.0) + v16 * 6378137.0 * (v16 * 6378137.0));
  double v20 = atan2(v17 * 6356752.31, v19 * 0.996647189);
  __double2 v21 = __sincos_stret(v20);
  long double v37 = atan2(v18 + v21.__sinval * v21.__sinval * 42841.3115 * v21.__sinval, v19 - v21.__cosval * v21.__cosval * 42697.6727 * v21.__cosval);
  double v22 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 0.0, 1.0);
  double v25 = v24 * 6356752.31;
  double v26 = sqrt(v22 * 6378137.0 * (v22 * 6378137.0) + v23 * 6378137.0 * (v23 * 6378137.0));
  double v27 = atan2(v24 * 6356752.31, v26 * 0.996647189);
  __double2 v28 = __sincos_stret(v27);
  long double v29 = atan2(v25 + v28.__sinval * v28.__sinval * 42841.3115 * v28.__sinval, v26 - v28.__cosval * v28.__cosval * 42697.6727 * v28.__cosval);
  v31.f64[0] = v37;
  v30.f64[0] = v38;
  v31.f64[1] = v29;
  v30.f64[1] = v39;
  float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
  float64x2_t v33 = vmulq_f64(v30, v32);
  float64x2_t v34 = vabsq_f64(vmulq_f64(v31, v32));
  float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x4055400000000000uLL);
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgeq_f64(v34, v35), (int32x4_t)vcgeq_f64(vabsq_f64(v33), v35)))) & 1;
}

double geo::S2CellCoordinates::xyzFromTileLocalST<double>(uint64_t a1, double a2, double a3)
{
  double v3 = 1.0 / (double)(1 << *(unsigned char *)(a1 + 8));
  double v4 = (double)*(unsigned int *)a1 * v3
     + -((double)*(unsigned int *)a1 * v3 - (double)(*(_DWORD *)a1 + 1) * v3) * a2;
  double v5 = (double)*(unsigned int *)(a1 + 4) * v3
     + -((double)*(unsigned int *)(a1 + 4) * v3 - (double)(*(_DWORD *)(a1 + 4) + 1) * v3) * a3;
  BOOL v6 = v4 < 0.5;
  double v7 = (1.0 - v4) * (1.0 - v4) * -1.33333333 + 0.333333333;
  double v8 = v4 * v4 * 1.33333333 + -0.333333333;
  if (!v6) {
    double v7 = v8;
  }
  BOOL v6 = v5 < 0.5;
  double v9 = (1.0 - v5) * (1.0 - v5) * -1.33333333 + 0.333333333;
  double v10 = v5 * v5 * 1.33333333 + -0.333333333;
  if (v6) {
    double v11 = v9;
  }
  else {
    double v11 = v10;
  }
  double v12 = 1.0;
  double v13 = 1.0;
  double v14 = 1.0;
  switch(*(unsigned char *)(a1 + 9))
  {
    case 0:
      double v13 = v7;
      double v14 = v11;
      break;
    case 1:
      double v12 = -v7;
      double v14 = v11;
      break;
    case 2:
      double v12 = -v7;
      double v13 = -v11;
      break;
    case 3:
      double v13 = -v11;
      double v14 = -v7;
      double v12 = -1.0;
      break;
    case 4:
      double v14 = -v7;
      double v13 = -1.0;
      double v12 = v11;
      break;
    case 5:
      double v14 = -1.0;
      double v12 = v11;
      double v13 = v7;
      break;
    default:
      return 1.0 / sqrt(v12 * v12 + v13 * v13 + v14 * v14) * v12;
  }
  return 1.0 / sqrt(v12 * v12 + v13 * v13 + v14 * v14) * v12;
}

uint64_t *_ZNSt3__110__function6__funcIZN2md18TileSelectionLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20TileSelectionContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEEclEOSO_(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t v2 = result[1];
  unsigned int v3 = *a2;
  double v4 = *(uint64_t **)(v2 + 296);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        BOOL v6 = (uint64_t **)v4;
        unsigned int v7 = *((unsigned __int8 *)v4 + 25);
        if (v7 <= v3) {
          break;
        }
        double v4 = *v6;
        double v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= v3) {
        break;
      }
      double v4 = v6[1];
      if (!v4)
      {
        double v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    double v5 = (uint64_t **)(v2 + 296);
    BOOL v6 = (uint64_t **)(v2 + 296);
LABEL_8:
    double v8 = operator new(0x20uLL);
    v8[25] = v3;
    *(void *)double v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v6;
    *double v5 = (uint64_t *)v8;
    uint64_t v9 = **(void **)(v2 + 288);
    if (v9)
    {
      *(void *)(v2 + 288) = v9;
      double v10 = *v5;
    }
    else
    {
      double v10 = (uint64_t *)v8;
    }
    float64x2_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 296), v10);
    ++*(void *)(v2 + 304);
  }
  return result;
}

void std::vector<md::TileSelectionTileSetType>::__append(uint64_t a1, unint64_t a2)
{
  double v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      BOOL v6 = &v5[2 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unsigned int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      abort();
    }
    unint64_t v11 = v4 - (void)v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      double v13 = operator new(2 * v12);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    double v16 = &v13[2 * v12];
    bzero(v14, v15);
    double v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      BOOL v6 = &v5[-2 * (v19 & 0xFFFFFFFFFFFFFFF0)];
      double v20 = &v13[2 * v9 - 16];
      __double2 v21 = v5 - 16;
      unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *double v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 16;
      }
      while (v22);
      v14 -= 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_31:
        do
        {
          __int16 v24 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v24;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

double md::Logic<md::TileSelectionLogic,md::TileSelectionContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::StyleLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(unsigned char *)(a1 + 136) = 0;
  return result;
}

void md::MapEngineConfiguration::MapEngineConfiguration(uint64_t a1, char a2, char a3)
{
  *(void *)a1 = &unk_1EF5416A8;
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  operator new();
}

void sub_1A18E4468(_Unwind_Exception *a1)
{
  gdc::Registry::~Registry(v1);
  MEMORY[0x1A6239270]();
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundRenderLayer::prepare(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 33))
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 104))(result);
    double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 96))(v3, a2);
    if (*(void *)result != *(void *)(result + 8)) {
      **(unsigned char **)(a2 + 736) = 1;
    }
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  size_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  double v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  double v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    float64x2_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    float64x2_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            int32x2_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            char v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        float64x2_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            long double v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        float64x2_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    int64x2_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          int64x2_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    int64x2_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *int64x2_t v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    int64x2_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      char v52 = v51;
      int64x2_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    unint64_t *v52 = v55;
    *float64x2_t v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    long long v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    long long v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        long long v59 = v58;
        long long v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        long long v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        double v26 = v59;
      }
      while (!v60);
    }
    double v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    uint64_t v61 = (void *)a1[34];
    for (uint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  uint64_t v84 = v63;
  uint64_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          uint64_t v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)uint64_t v63 = v68;
            goto LABEL_131;
          }
        }
        uint64_t v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    uint64_t v84 = v63;
    uint64_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  float64x2_t v69 = v84;
  if (v84 != v85)
  {
    long long v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  int v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *long long v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    int v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  int v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  size_t v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A18E5084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *md::DaVinciGroundRenderLayer::renderablesInView(void *a1)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 200))(a1)) {
    return a1 + 34;
  }
  double result = a1 + 455;
  a1[456] = a1[455];
  return result;
}

uint64_t md::DaVinciGroundRenderLayer::useNewRenderableCollector(md::DaVinciGroundRenderLayer *this)
{
  uint64_t result = GEOConfigGetBOOL();
  if (result) {
    return *((unsigned char *)this + 3632) != 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  size_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  double v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  double v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    float64x2_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    float64x2_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            int32x2_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            char v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        float64x2_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            long double v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        float64x2_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    int64x2_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          int64x2_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    int64x2_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *int64x2_t v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    int64x2_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      char v52 = v51;
      int64x2_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    unint64_t *v52 = v55;
    *float64x2_t v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    long long v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    long long v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        long long v59 = v58;
        long long v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        long long v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        double v26 = v59;
      }
      while (!v60);
    }
    double v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    uint64_t v61 = (void *)a1[34];
    for (uint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  uint64_t v84 = v63;
  uint64_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          uint64_t v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)uint64_t v63 = v68;
            goto LABEL_131;
          }
        }
        uint64_t v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    uint64_t v84 = v63;
    uint64_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  float64x2_t v69 = v84;
  if (v84 != v85)
  {
    long long v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  int v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *long long v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    int v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  int v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  size_t v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A18E5CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(unint64_t *a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = a5 - 1;
  if (a5 < 1) {
    return;
  }
  unint64_t v7 = __src;
  unint64_t v10 = *a1;
  uint64_t v9 = (char *)a1[1];
  uint64_t v11 = a2 - *a1;
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (char *)a1[2];
  if (a5 > (v14 - v9) >> 3)
  {
    unint64_t v15 = a5 + ((uint64_t)&v9[-v10] >> 3);
    if (v15 >> 61) {
      abort();
    }
    uint64_t v16 = (uint64_t)&v14[-v10];
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v18 = v17;
      uint64_t v19 = operator new(8 * v17);
      unint64_t v17 = v18;
      uint64_t v12 = v11 >> 3;
    }
    else
    {
      uint64_t v19 = 0;
    }
    int64x2_t v44 = &v19[8 * v12];
    int64_t v45 = &v44[8 * a5];
    uint64_t v46 = v5 & 0x1FFFFFFFFFFFFFFFLL;
    int8x8_t v47 = v44;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) >= 7)
    {
      int8x8_t v47 = &v19[8 * v12];
      if ((unint64_t)(&v19[v11 & 0xFFFFFFFFFFFFFFF8] - v7) >= 0x20)
      {
        unint64_t v48 = (char *)v10;
        uint64_t v49 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        int8x8_t v47 = &v44[8 * v49];
        unint64_t v50 = (long long *)(v7 + 16);
        int64x2_t v51 = &v19[8 * v12 + 16];
        uint64_t v52 = v49;
        do
        {
          long long v53 = *v50;
          *(v51 - 1) = *(v50 - 1);
          *int64x2_t v51 = v53;
          v50 += 2;
          v51 += 2;
          v52 -= 4;
        }
        while (v52);
        if (v46 + 1 == v49) {
          goto LABEL_45;
        }
        v7 += 8 * v49;
      }
    }
    do
    {
      uint64_t v54 = *(void *)v7;
      v7 += 8;
      *(void *)int8x8_t v47 = v54;
      v47 += 8;
    }
    while (v47 != v45);
    unint64_t v48 = (char *)*a1;
LABEL_45:
    if (v48 != v13)
    {
      unint64_t v55 = (char *)((v11 & 0xFFFFFFFFFFFFFFF8) + v10);
      unint64_t v56 = v55 - v48 - 8;
      if (v56 < 0x68)
      {
        long long v57 = v13;
        goto LABEL_52;
      }
      long long v57 = v13;
      if ((unint64_t)(v55 - &v19[v11 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
        goto LABEL_65;
      }
      uint64_t v58 = (v56 >> 3) + 1;
      long long v57 = &v13[-8 * (v58 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v59 = 8 * v12 - 16;
      BOOL v60 = (long long *)(v10 + v59);
      uint64_t v61 = &v19[v59];
      uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v63 = *v60;
        *(v61 - 1) = *(v60 - 1);
        *uint64_t v61 = v63;
        v60 -= 2;
        v61 -= 2;
        v62 -= 4;
      }
      while (v62);
      v44 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
LABEL_52:
          uint64_t v64 = *((void *)v57 - 1);
          v57 -= 8;
          *((void *)v44 - 1) = v64;
          v44 -= 8;
        }
        while (v57 != v48);
        uint64_t v9 = (char *)a1[1];
      }
    }
    double v65 = &v19[8 * v17];
    if (v9 != v13) {
      memmove(v45, v13, v9 - v13);
    }
    double v66 = (void *)*a1;
    *a1 = (unint64_t)v44;
    a1[1] = (unint64_t)&v45[v9 - v13];
    a1[2] = (unint64_t)v65;
    if (v66)
    {
      operator delete(v66);
    }
    return;
  }
  uint64_t v20 = v9 - v13;
  uint64_t v21 = (v9 - v13) >> 3;
  if (v21 >= a5)
  {
    unint64_t v22 = &__src[8 * a5];
    uint64_t v25 = (char *)a1[1];
LABEL_18:
    double v26 = &v13[8 * a5];
    size_t v27 = v25 - v26;
    uint64_t v28 = (v25 - v26) >> 3;
    unint64_t v29 = &v25[-8 * a5];
    uint8x8_t v30 = v25;
    if (v29 < v9)
    {
      unint64_t v31 = (v11 & 0xFFFFFFFFFFFFFFF8) + v27;
      float64x2_t v32 = (char *)(v31 + v10);
      unint64_t v33 = v31 + v10 + 8;
      if ((unint64_t)v9 > v33) {
        unint64_t v33 = (unint64_t)v9;
      }
      unint64_t v34 = v33 + ~v10 - v31;
      unint64_t v35 = v25 - v32;
      BOOL v36 = v34 >= 0x58 && v35 > 0x1F;
      uint8x8_t v30 = v25;
      if (!v36) {
        goto LABEL_66;
      }
      uint64_t v37 = (v34 >> 3) + 1;
      uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v29 += v38;
      unint64_t v39 = v25 + 16;
      int32x2_t v40 = (long long *)(8 * v28 + 8 * v12 + v10 + 16);
      uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *unint64_t v39 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 4;
      }
      while (v41);
      uint8x8_t v30 = &v25[v38];
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_66:
        do
        {
          uint64_t v43 = *(void *)v29;
          v29 += 8;
          *(void *)uint8x8_t v30 = v43;
          v30 += 8;
        }
        while (v29 < v9);
      }
    }
    a1[1] = (unint64_t)v30;
    if (v25 != v26) {
      memmove(&v25[-8 * v28], v13, v27);
    }
    if (v22 != v7)
    {
      memmove(v13, v7, v22 - v7);
    }
    return;
  }
  unint64_t v22 = &__src[8 * v21];
  int64_t v23 = a4 - v22;
  if (a4 != v22)
  {
    unint64_t v67 = *a1 + (v11 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = &__src[8 * v21];
    memmove((void *)a1[1], v24, a4 - v22);
    uint64_t v12 = v11 >> 3;
    unint64_t v22 = v24;
    uint64_t v13 = (char *)v67;
  }
  uint64_t v25 = &v9[v23];
  a1[1] = (unint64_t)&v9[v23];
  if (v20 >= 1) {
    goto LABEL_18;
  }
}

uint64_t *md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  double v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    uint64_t v4 = v1 - 1;
    while (v4 != v2)
    {
      double v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *double v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

BOOL md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 384);
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 392);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    int v4 = *(unsigned __int8 *)(a2 + 48);
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = v2;
    uint64_t v6 = (uint64_t **)a1[17];
    if (v6) {
      goto LABEL_9;
    }
LABEL_5:
    int8x8_t v7 = (int8x8_t)a1[12];
    if (!*(void *)&v7) {
      goto LABEL_43;
    }
    unint64_t v8 = *(void *)(v3 + 120);
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = *(void *)(v3 + 120);
      if (v8 >= *(void *)&v7) {
        unint64_t v10 = v8 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v8;
    }
    uint64_t v16 = *(uint64_t ****)(a1[11] + 8 * v10);
    if (v16)
    {
      unint64_t v17 = *v16;
      if (*v16)
      {
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v18 = *(void *)&v7 - 1;
          while (1)
          {
            int64_t v23 = v17[1];
            if ((uint64_t *)v8 == v23)
            {
              if (*((unsigned __int8 *)v17 + 16) == *(unsigned __int8 *)(v3 + 16)
                && *((unsigned __int16 *)v17 + 12) == *(unsigned __int16 *)(v3 + 24)
                && v17[12] == *(uint64_t **)(v3 + 96))
              {
                uint64_t v24 = v17[4];
                size_t v25 = (char *)v17[5] - (char *)v24;
                double v26 = *(const void **)(v3 + 32);
                if (v25 == *(void *)(v3 + 40) - (void)v26 && !memcmp(v24, v26, v25)) {
                  goto LABEL_44;
                }
              }
            }
            else if (((unint64_t)v23 & v18) != v10)
            {
              goto LABEL_43;
            }
            unint64_t v17 = (uint64_t **)*v17;
            if (!v17) {
              goto LABEL_44;
            }
          }
        }
        do
        {
          unint64_t v19 = (unint64_t)v17[1];
          if (v8 == v19)
          {
            if (*((unsigned __int8 *)v17 + 16) == *(unsigned __int8 *)(v3 + 16)
              && *((unsigned __int16 *)v17 + 12) == *(unsigned __int16 *)(v3 + 24)
              && v17[12] == *(uint64_t **)(v3 + 96))
            {
              uint64_t v20 = v17[4];
              size_t v21 = (char *)v17[5] - (char *)v20;
              unint64_t v22 = *(const void **)(v3 + 32);
              if (v21 == *(void *)(v3 + 40) - (void)v22 && !memcmp(v20, v22, v21)) {
                break;
              }
            }
          }
          else
          {
            if (v19 >= *(void *)&v7) {
              v19 %= *(void *)&v7;
            }
            if (v19 != v10) {
              goto LABEL_43;
            }
          }
          unint64_t v17 = (uint64_t **)*v17;
        }
        while (v17);
      }
    }
    else
    {
LABEL_43:
      unint64_t v17 = 0;
    }
LABEL_44:
    BOOL v27 = v17 != 0;
    if (!v5) {
      goto LABEL_49;
    }
LABEL_47:
    p_uint64_t shared_owners = &v5->__shared_owners_;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_49;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_49;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v2) {
      goto LABEL_50;
    }
    return v27;
  }
  uint64_t v5 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v6 = (uint64_t **)a1[17];
  if (!v6) {
    goto LABEL_5;
  }
  while (1)
  {
LABEL_9:
    int v11 = *((unsigned __int8 *)v6 + 48);
    BOOL v12 = *((char *)v6 + 48) > (char)v4;
    unint64_t v13 = (unint64_t)v6[4];
    if (v4 == v11) {
      BOOL v12 = v3 < v13;
    }
    if (v12) {
      goto LABEL_8;
    }
    BOOL v14 = v13 < v3;
    int v15 = v4 == v11 ? v14 : (char)v11 < (char)v4;
    if (v15 != 1) {
      break;
    }
    ++v6;
LABEL_8:
    uint64_t v6 = (uint64_t **)*v6;
    if (!v6) {
      goto LABEL_5;
    }
  }
  BOOL v27 = 1;
  if (v5) {
    goto LABEL_47;
  }
LABEL_49:
  if (v2)
  {
LABEL_50:
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v27;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::renderableDidChange()
{
  return 0;
}

void md::DaVinciCenterLineRoadsRenderLayer::renderablesWillLeaveView(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v5 = *(void **)(*(void *)v2 + 384);
      uint64_t v6 = v5[92];
      if (v6) {
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 400), v6);
      }
      uint64_t v7 = v5[102];
      if (v7) {
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 400), v7);
      }
      uint64_t v8 = v5[93];
      if (v8) {
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 400), v8);
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::DaVinciCenterLineRoadsRenderLayer::renderablesWillEnterView(uint64_t a1, __n128 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      uint64_t v7 = *(void **)(*(void *)v4 + 384);
      uint64_t v8 = (md::RoadLayer *)v7[92];
      if (v8) {
        a2 = md::RoadStyling::subscribeLayer((__n128 **)*(void *)(a1 + 400), v8, a2);
      }
      uint8x8_t v9 = (md::RoadLayer *)v7[102];
      if (v9) {
        a2 = md::RoadStyling::subscribeLayer((__n128 **)*(void *)(a1 + 400), v9, a2);
      }
      unint64_t v10 = (md::RoadLayer *)v7[93];
      if (v10) {
        a2 = md::RoadStyling::subscribeLayer((__n128 **)*(void *)(a1 + 400), v10, a2);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void md::DaVinciCenterLineRoadsRenderLayer::updateWithContext(int a1, uint64_t **a2, md::LayoutContext *this)
{
  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::updateZScaleAndOffset(a2, this, 0.0);
  md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::updateWithContext(v5, a2, (uint64_t)this);
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_determineEnteringRenderables(uint64_t a1@<X0>, md::LayoutContext *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    return;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v8 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v8 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint8x8_t v9 = *(void **)(*v3 + 8 * v8);
  if (!v9) {
    return;
  }
  unint64_t v10 = (void *)*v9;
  if (!v10) {
    return;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == 0x3070CB6B3C7F21D3)
      {
        if (v10[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v13 & v11) != v8)
      {
        return;
      }
      unint64_t v10 = (void *)*v10;
      if (!v10) {
        return;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
    if (v12 != v8) {
      return;
    }
LABEL_11:
    unint64_t v10 = (void *)*v10;
    if (!v10) {
      return;
    }
  }
  if (v10[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = v10[5];
  if (*(void *)(v14 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v68 = *(uint64_t **)(v14 + 32);
    if (v68)
    {
      unint64_t v15 = *(void *)(a1 + 192);
      if (v15)
      {
        if (v15 >> 61) {
          abort();
        }
        uint64_t v16 = 8 * v15;
        unint64_t v17 = (char *)operator new(8 * v15);
        *a3 = v17;
        a3[1] = v17;
        a3[2] = &v17[v16];
      }
      uint64_t v18 = *(void **)(a1 + 176);
      if (v18 != (void *)(a1 + 184))
      {
        do
        {
          uint64_t v19 = v18[4];
          uint64_t v20 = (std::__shared_weak_count *)v18[5];
          float64x2_t v69 = v18;
          uint64_t v77 = v19;
          uint64_t v78 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v75[0] = *(_WORD *)(v19 + 168);
          uint64_t v76 = *(void *)(v19 + 172);
          double v21 = *(double *)(v19 + 600);
          double v22 = *(double *)(v19 + 608);
          int v23 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128);
          md::GeometryContext::transformConstantData((double *)&v73, v68, (unsigned __int8 *)v75, v23, v21, v22);
          char v24 = *((unsigned char *)v69 + 48);
          if (*(void *)(a1 + 264))
          {
            size_t v25 = *(void **)(a1 + 264);
          }
          else
          {
            double v26 = (char *)malloc_type_malloc(*(void *)(a1 + 256), 0x160B39uLL);
            BOOL v27 = v26;
            uint64_t v28 = (uint64_t **)(a1 + 232);
            while (1)
            {
              unint64_t v29 = *v28;
              uint8x8_t v30 = v28;
              if (!*v28) {
                break;
              }
              while (1)
              {
                uint64_t v28 = (uint64_t **)v29;
                unint64_t v31 = v29[4];
                if ((unint64_t)v26 < v31) {
                  break;
                }
                if (v31 >= (unint64_t)v26) {
                  goto LABEL_43;
                }
                unint64_t v29 = v28[1];
                if (!v29)
                {
                  uint8x8_t v30 = v28 + 1;
                  goto LABEL_40;
                }
              }
            }
LABEL_40:
            float64x2_t v32 = (uint64_t *)operator new(0x28uLL);
            v32[4] = (uint64_t)v27;
            *float64x2_t v32 = 0;
            v32[1] = 0;
            v32[2] = (uint64_t)v28;
            *uint8x8_t v30 = v32;
            uint64_t v33 = **(void **)(a1 + 224);
            if (v33)
            {
              *(void *)(a1 + 224) = v33;
              float64x2_t v32 = *v30;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), v32);
            ++*(void *)(a1 + 240);
LABEL_43:
            uint64_t v34 = 408 * *(void *)(a1 + 248) - 408;
            if (v34 < 0)
            {
              size_t v25 = *(void **)(a1 + 264);
            }
            else
            {
              unint64_t v35 = &v27[v34];
              BOOL v36 = *(char **)(a1 + 264);
              do
              {
                *(void *)unint64_t v35 = v36;
                uint64_t v37 = v35 - 408;
                BOOL v36 = v35;
                unint64_t v35 = v37;
              }
              while (v37 >= v27);
              size_t v25 = v37 + 408;
            }
            *(void *)(a1 + 264) = v25;
            uint64_t v19 = v77;
            uint64_t v20 = v78;
          }
          int64_t v71 = v25;
          *(void *)(a1 + 264) = *v25;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v25, v19, (uint64_t)v20, v24, (v23 - 1) < 3u, &v73);
          if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          *int64_t v71 = &unk_1EF513688;
          uint64_t v38 = v77;
          unint64_t v39 = v78;
          v71[48] = v77;
          v71[49] = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *int64_t v71 = &unk_1EF513D20;
          v71[50] = 0;
          if (*(void *)(v38 + 800))
          {
            v79[0] = 0;
            v79[1] = 0;
            {
              operator new();
            }
            v79[2] = mdm::Allocator::instance(void)::alloc;
            v79[3] = 0;
            {
              operator new();
            }
            v79[4] = mdm::Allocator::instance(void)::alloc;
            v79[5] = 0;
            int v80 = 1065353216;
            int32x2_t v40 = *(void **)(v77 + 784);
            if (v40)
            {
              do
              {
                unint64_t v44 = v40[2];
                uint64_t v81 = v40 + 2;
                std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>((uint64_t)v79, v44, &v81);
                int v72 = v40;
                int64_t v45 = (uint64_t *)v40[4];
                if (v45 != (uint64_t *)v40[5])
                {
                  uint64_t v46 = operator new(0x98uLL);
                  v46[1] = 0;
                  v46[2] = 0;
                  *uint64_t v46 = &unk_1EF5818A0;
                  md::TrailJunctionRenderable::TrailJunctionRenderable((uint64_t)(v46 + 3), v45);
                }
                int32x2_t v40 = (void *)*v40;
              }
              while (*v72);
            }
            operator new();
          }
          long long v42 = (void *)a3[1];
          unint64_t v41 = a3[2];
          if ((unint64_t)v42 >= v41)
          {
            int8x8_t v47 = (unsigned char *)*a3;
            uint64_t v48 = (uint64_t)v42 - *a3;
            uint64_t v49 = v48 >> 3;
            unint64_t v50 = (v48 >> 3) + 1;
            if (v50 >> 61) {
              abort();
            }
            uint64_t v51 = v41 - (void)v47;
            if (v51 >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v53 = operator new(8 * v52);
            }
            else
            {
              long long v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            *uint64_t v54 = v71;
            uint64_t v43 = v54 + 1;
            if (v42 == (void *)v47)
            {
              int8x8_t v47 = v42;
            }
            else
            {
              unint64_t v55 = (char *)(v42 - 1) - v47;
              if (v55 < 0x58) {
                goto LABEL_109;
              }
              if ((unint64_t)((char *)v42 - &v53[v48]) < 0x20) {
                goto LABEL_109;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              long long v57 = &v53[8 * v49 - 16];
              uint64_t v58 = (long long *)(v42 - 2);
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *v58;
                *(v57 - 1) = *(v58 - 1);
                *long long v57 = v60;
                v57 -= 2;
                v58 -= 2;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v42 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_109:
                do
                {
                  uint64_t v61 = *--v42;
                  *--uint64_t v54 = v61;
                }
                while (v42 != (void *)v47);
                int8x8_t v47 = (unsigned char *)*a3;
              }
            }
            *a3 = v54;
            a3[1] = v43;
            a3[2] = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *long long v42 = v71;
            uint64_t v43 = v42 + 1;
          }
          a3[1] = v43;
          uint64_t v62 = v74;
          if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
          long long v63 = v78;
          if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
          uint64_t v64 = v69;
          double v65 = (void *)v69[1];
          if (v65)
          {
            do
            {
              double v66 = v65;
              double v65 = (void *)*v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              double v66 = (void *)v64[2];
              BOOL v67 = *v66 == (void)v64;
              uint64_t v64 = v66;
            }
            while (!v67);
          }
          uint64_t v18 = v66;
        }
        while (v66 != (void *)(a1 + 184));
      }
    }
  }
}

void sub_1A18E7114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, md::BaseMapTileDataRenderable *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a26);
  uint64_t v34 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        double v21 = a2;
        uint64_t v22 = result;
        uint64_t v20 = v2;
        int v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      uint8x8_t v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint8x8_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint8x8_t v9 = (uint64_t *)(v6 + 4);
      }
      unint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          unint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              unint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint8x8_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    unsigned __int8 v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  unsigned __int8 v13 = 0;
LABEL_25:
  unsigned __int8 v14 = *a2;
  unint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      BOOL v27 = (float32x2_t *)v25[9];
      *BOOL v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

void md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unsigned __int8 v4 = *(unsigned char *)(a3 + 48);
  unint64_t v90 = 0;
  uint64_t v91 = 0;
  unint64_t v88 = 0;
  uint64_t v89 = 0;
  unint64_t v6 = *(void *)(a3 + 400);
  uint8x8_t v5 = *(std::__shared_weak_count **)(a3 + 408);
  unint64_t v86 = v6;
  size_t v87 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *(void *)(a3 + 384);
  uint8x8_t v7 = *(std::__shared_weak_count **)(a3 + 392);
  unint64_t v84 = v8;
  uint64_t v85 = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (*(unsigned __int8 *)(v6 + 169) <= *(unsigned __int8 *)(v8 + 169))
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_11;
    }
LABEL_7:
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v90 = v6;
    uint64_t v91 = v5;
    unint64_t v9 = v8;
    unint64_t v10 = v5;
    if (!v7) {
      goto LABEL_12;
    }
LABEL_10:
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v88 = v9;
    uint64_t v89 = v7;
    char v11 = *(unsigned char *)(v9 + 169);
    unint64_t v79 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    int v80 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(v6 + 169) > *(unsigned __int8 *)(v8 + 169)) {
    goto LABEL_7;
  }
LABEL_11:
  unint64_t v90 = v8;
  uint64_t v91 = v7;
  unint64_t v9 = v6;
  unint64_t v10 = v7;
  unint64_t v6 = v8;
  uint8x8_t v7 = v5;
  if (v5) {
    goto LABEL_10;
  }
LABEL_12:
  unint64_t v88 = v9;
  uint64_t v89 = 0;
  char v11 = *(unsigned char *)(v9 + 169);
  unint64_t v79 = 0;
  int v80 = 0;
LABEL_13:
  uint64_t v12 = *a2;
  unsigned __int8 v13 = md::SceneContext::subtileClipMask(*a2, v9, v4);
  char v14 = *(unsigned char *)(v6 + 169);
  uint64_t v77 = v10;
  uint64_t v74 = *(void *)(v6 + 172);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v78 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = *a2;
  }
  else
  {
    uint64_t v78 = 0;
  }
  uint64_t v15 = (uint64_t)md::SceneContext::subtileClipMask(v12, v6, v4);
  if (!((unint64_t)v13 | v15))
  {
    __src = operator new(8uLL);
    int64x2_t v16 = vdupq_n_s64(1uLL);
    int64x2_t v82 = v16;
    *(void *)__src = 1;
    int64x2_t v83 = v16;
    goto LABEL_80;
  }
  uint64_t v17 = v15;
  if (!v13)
  {
    std::vector<BOOL>::vector(&__src, v15);
    int64x2_t v83 = *(int64x2_t *)(v17 + 24);
    goto LABEL_80;
  }
  uint64_t v18 = v13[3];
  unint64_t v19 = v18 >> (v14 - v11);
  int v20 = -1 << (v14 - v11);
  int v21 = (HIDWORD(v74) & ~v20) * v19;
  int v22 = (v74 & ~v20) * v19;
  if (!v15)
  {
    __src = 0;
    int64x2_t v82 = 0uLL;
    if (!v19)
    {
      v83.i64[0] = v19;
      goto LABEL_79;
    }
    unint64_t v45 = v19 * (unint64_t)v19;
    if ((v45 & 0x8000000000000000) != 0) {
LABEL_122:
    }
      abort();
    unint64_t v46 = (v45 - 1) >> 6;
    int8x8_t v47 = operator new(8 * (v46 + 1));
    uint64_t v48 = v47;
    v82.i64[0] = v19 * (unint64_t)v19;
    v82.i64[1] = v46 + 1;
    __src = v47;
    if (v45 >= 0x41) {
      unint64_t v49 = (v45 - 1) >> 6;
    }
    else {
      unint64_t v49 = 0;
    }
    v47[v49] = 0;
    if (v45 >= 0x40) {
      bzero(v47, 8 * (v45 >> 6));
    }
    if ((v45 & 0x3F) != 0) {
      v48[v45 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v45 & 0x3F));
    }
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    int64x2_t v83 = (int64x2_t)v19;
    uint64_t v54 = *v13;
LABEL_63:
    unint64_t v55 = 0;
    while (1)
    {
      unint64_t v56 = v18 * (v22 + v53) + (v21 + v55);
      if ((*(void *)(v54 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v56))
      {
        if (v55 >= v19) {
          goto LABEL_65;
        }
        if (v52 == v45) {
          goto LABEL_65;
        }
        if (v53 >= v19) {
          goto LABEL_65;
        }
        unint64_t v57 = (v50 + v55) >> 6;
        uint64_t v58 = 1 << (v50 + v55);
        uint64_t v59 = v48[v57];
        if ((v59 & v58) != 0) {
          goto LABEL_65;
        }
        v48[v57] = v59 | v58;
        uint64_t v60 = 1;
      }
      else
      {
        if (!v52) {
          goto LABEL_65;
        }
        if (v55 >= v19) {
          goto LABEL_65;
        }
        if (v53 >= v19) {
          goto LABEL_65;
        }
        unint64_t v61 = (v50 + v55) >> 6;
        uint64_t v62 = 1 << (v50 + v55);
        uint64_t v63 = v48[v61];
        if ((v63 & v62) == 0) {
          goto LABEL_65;
        }
        v48[v61] = v63 & ~v62;
        uint64_t v60 = -1;
      }
      v51 += v60;
      v83.i64[1] = v51;
      uint64_t v52 = v51;
LABEL_65:
      if (v19 == ++v55)
      {
        ++v53;
        v50 += v19;
        if (v53 == v19) {
          goto LABEL_80;
        }
        goto LABEL_63;
      }
    }
  }
  uint64_t v23 = *(void *)(v15 + 24);
  if (v19 <= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v19;
  }
  int64x2_t v82 = 0uLL;
  __src = 0;
  if (!v24)
  {
    v83.i64[0] = v24;
LABEL_79:
    v83.i64[1] = 0;
    goto LABEL_80;
  }
  unint64_t v25 = v24 * (unint64_t)v24;
  if ((v25 & 0x8000000000000000) != 0) {
    goto LABEL_122;
  }
  unint64_t v75 = (v25 - 1) >> 6;
  unint64_t v26 = operator new(8 * (v75 + 1));
  BOOL v27 = v26;
  v82.i64[0] = v24 * (unint64_t)v24;
  v82.i64[1] = v75 + 1;
  __src = v26;
  unint64_t v28 = v75;
  if (v25 < 0x41) {
    unint64_t v28 = 0;
  }
  v26[v28] = 0;
  uint64_t v29 = v25 >> 6;
  if (v25 >= 0x40)
  {
    bzero(v26, 8 * (v25 >> 6));
    uint64_t v29 = v25 >> 6;
  }
  if ((v25 & 0x3F) != 0) {
    v27[v29] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v25 & 0x3F));
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  int64x2_t v83 = (int64x2_t)v24;
  uint64_t v34 = *(void *)v17;
  while (2)
  {
    for (unint64_t i = 0; i != v24; ++i)
    {
      uint64_t v36 = v31;
      if (((*(void *)(v34
                       + (((v23 * (v33 / (v24 / v23))
                          + (unint64_t)(i / (v24 / v23))) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v23 * (v33 / (v24 / v23)) + (i / (v24 / v23)))) & 1) != 0)
      {
        unint64_t v37 = i / (v24 / v19)
            + v21
            + v18 * (v33 / (v24 / v19) + v22);
        if ((*(void *)(*v13 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37))
        {
          if (i < v24 && v32 != v25 && v33 < v24)
          {
            unint64_t v38 = (v30 + i) >> 6;
            uint64_t v39 = 1 << (v30 + i);
            uint64_t v40 = v27[v38];
            if ((v40 & v39) == 0)
            {
              v27[v38] = v40 | v39;
              uint64_t v41 = 1;
LABEL_49:
              v31 += v41;
              v83.i64[1] = v31;
              uint64_t v32 = v31;
              continue;
            }
          }
          continue;
        }
        uint64_t v36 = v32;
      }
      if (v36)
      {
        if (i >= v24
          || v33 >= v24
          || (unint64_t v42 = (v30 + i) >> 6,
              uint64_t v43 = 1 << (v30 + i),
              uint64_t v44 = v27[v42],
              (v44 & v43) == 0))
        {
          uint64_t v32 = v36;
          continue;
        }
        v27[v42] = v44 & ~v43;
        uint64_t v41 = -1;
        goto LABEL_49;
      }
      uint64_t v32 = 0;
    }
    ++v33;
    v30 += v24;
    if (v33 != v24) {
      continue;
    }
    break;
  }
LABEL_80:
  if ((void **)(a3 + 416) != &__src)
  {
    uint64_t v64 = v82.i64[0];
    if (v82.i64[0])
    {
      double v65 = *(void **)(a3 + 416);
      if (v82.i64[0] <= *(void *)(a3 + 432) << 6)
      {
        unint64_t v66 = v82.i64[0] - 1;
      }
      else
      {
        if (v65)
        {
          operator delete(v65);
          *(void *)(a3 + 416) = 0;
          *(void *)(a3 + 424) = 0;
          *(void *)(a3 + 432) = 0;
          uint64_t v64 = v82.i64[0];
        }
        if (v64 < 0) {
          abort();
        }
        unint64_t v66 = v64 - 1;
        unint64_t v67 = ((unint64_t)(v64 - 1) >> 6) + 1;
        double v65 = operator new(8 * v67);
        *(void *)(a3 + 416) = v65;
        *(void *)(a3 + 424) = 0;
        *(void *)(a3 + 432) = v67;
      }
      memmove(v65, __src, ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v64 = v82.i64[0];
    }
    *(void *)(a3 + 424) = v64;
  }
  *(int64x2_t *)(a3 + 440) = v83;
  uint64_t v68 = v83.i64[1];
  *(unsigned char *)(a3 + 456) = v83.i64[1] != 0;
  if (v68)
  {
    if (*(void *)(a3 + 448) == *(void *)(a3 + 440) * *(void *)(a3 + 440)) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = a3 + 416;
    }
    md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v69);
  }
  if (__src) {
    operator delete(__src);
  }
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  long long v70 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  int64_t v71 = v87;
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  int v72 = v89;
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
  uint64_t v73 = v91;
  if (v91)
  {
    if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1A18E7FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a17);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a22);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v25 - 152);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v25 - 136);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v25 - 120);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v25 - 104);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  unint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  unint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A18E8174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::SceneContext::subtileClipMask(int8x8_t *a1, unint64_t a2, unsigned __int8 a3)
{
  int8x8_t v3 = a1[10];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = ((a2 << 6) + (a2 >> 2) + (char)a3 - 0x61C8864680B583EBLL) ^ a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = ((a2 << 6) + (a2 >> 2) + (char)a3 - 0x61C8864680B583EBLL) ^ a2;
    if (v4 >= *(void *)&v3) {
      uint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v6 = v4 & (*(void *)&v3 - 1);
  }
  unsigned __int8 v7 = *(uint64_t ****)(*(void *)&a1[9] + 8 * v6);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = *v7;
  if (!v8) {
    return 0;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v3 - 1;
    while (1)
    {
      unsigned __int8 v13 = v8[1];
      if ((uint64_t *)v4 == v13)
      {
        if (*((unsigned __int8 *)v8 + 32) == a3 && v8[2] == (uint64_t *)a2) {
          return v8[5];
        }
      }
      else if (((unint64_t)v13 & v9) != v6)
      {
        return 0;
      }
      unint64_t v8 = (uint64_t **)*v8;
      if (!v8) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = (unint64_t)v8[1];
    if (v4 == v11) {
      break;
    }
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
    if (v11 != v6) {
      return 0;
    }
LABEL_14:
    unint64_t v8 = (uint64_t **)*v8;
    if (!v8) {
      return 0;
    }
  }
  if (*((unsigned __int8 *)v8 + 32) != a3 || v8[2] != (uint64_t *)a2) {
    goto LABEL_14;
  }
  return v8[5];
}

void md::BaseMapTileDataRenderable::setSubtileClipMask(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!*(void *)(a1 + 248))
    {
      uint64_t v9 = operator new(0xE8uLL);
      v9[1] = 0;
      v9[2] = 0;
      void *v9 = &unk_1EF586DF0;
      uint64_t v10 = ggl::BufferData::BufferData((uint64_t)(v9 + 3), qword_1E9552268, 2, 1, 6, 1);
      v9[28] = ggl::Tile::Clipping::reflection(void)::reflection;
      v9[3] = &unk_1EF55E278;
      unint64_t v11 = *(std::__shared_weak_count **)(a1 + 256);
      *(void *)(a1 + 248) = v10;
      *(void *)(a1 + 256) = v9;
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    unint64_t v4 = *(void **)(a1 + 248);
    unint64_t v5 = v4[1];
    if (v5)
    {
      uint64_t v6 = (_DWORD *)v4[9];
      unint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        goto LABEL_36;
      }
    }
    uint64_t v12 = *(_DWORD **)a2;
    if (v7 == 1)
    {
      v6[1] = *v12 & 1;
    }
    else if (!v7 || (v7 - 1) >> 32)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = 0;
        int v21 = 0;
        do
        {
          v21 |= ((*(void *)((char *)v12 + (((unint64_t)(v18 + v20) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v18 + v20)) & 1) << v20;
          ++v20;
        }
        while (v7 > v20);
        v6[++v19] = v21;
        v18 += v7;
      }
      while (v7 > v19);
    }
    else if (v7 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = 0;
        int v16 = 0;
        int v17 = 0;
        do
        {
          v16 |= ((*(void *)((char *)v12 + (((unint64_t)(v13 + v15) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + v15)) & 1) << v15;
          v17 |= ((*(void *)((char *)v12 + (((unint64_t)(v13 + v15 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + v15 + 1)) & 1) << (v15 + 1);
          v15 += 2;
        }
        while (v7 != v15);
        v6[++v14] = v17 | v16;
        v13 += v7;
      }
      while (v7 > v14);
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = 0;
        int v25 = 0;
        int v26 = 0;
        do
        {
          v25 |= ((*(void *)((char *)v12 + (((unint64_t)(v22 + v24) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v22 + v24)) & 1) << v24;
          v26 |= ((*(void *)((char *)v12 + (((unint64_t)(v22 + v24 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v22 + v24 + 1)) & 1) << (v24 + 1);
          v24 += 2;
        }
        while ((v7 & 0xFFFFFFFFFFFFFFFELL) != v24);
        int v27 = v26 | v25;
        unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFFELL;
        unsigned int v29 = v7 & 0xFFFFFFFE;
        do
        {
          v27 |= ((*(void *)((char *)v12 + (((v28 + v7 * v23) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v28
                                                                                                 + v7
                                                                                                 * v23)) & 1) << v29++;
          unint64_t v28 = v29;
        }
        while (v7 > v29);
        v6[++v23] = v27;
        v22 += v7;
      }
      while (v7 > v23);
    }
LABEL_36:
    *uint64_t v6 = v7;
    if (v5)
    {
      if (v4[8] > v5) {
        unint64_t v5 = v4[8];
      }
      v4[7] = 0;
      v4[8] = v5;
    }
    return;
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int8x8_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          unint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          int v16 = *(uint64_t **)(v15 + 32);
          if (v16)
          {
            unint64_t v17 = *(void *)(a2 + 192);
            unint64_t v53 = *(uint64_t **)(v15 + 32);
            if (v17)
            {
              if (v17 >> 61) {
                abort();
              }
              uint64_t v18 = 8 * v17;
              uint64_t v19 = (char *)operator new(8 * v17);
              *a3 = v19;
              a3[1] = v19;
              a3[2] = &v19[v18];
              int v16 = v53;
            }
            uint64_t v20 = *(void **)(v6 + 176);
            uint64_t v54 = (void *)(v6 + 184);
            if (v20 != (void *)(v6 + 184))
            {
              uint64_t v51 = (uint64_t **)(v6 + 224);
              uint64_t v52 = v6;
              do
              {
                uint64_t v21 = v20[4];
                uint64_t v22 = (std::__shared_weak_count *)v20[5];
                uint64_t v59 = v21;
                uint64_t v60 = v22;
                if (v22) {
                  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v57[0] = *(_WORD *)(v21 + 168);
                uint64_t v58 = *(void *)(v21 + 172);
                double v23 = *(double *)(v21 + 600);
                double v24 = *(double *)(v21 + 608);
                int v25 = *(unsigned __int8 *)(md::LayoutContext::frameState(this) + 128);
                md::GeometryContext::transformConstantData((double *)&v55, v16, (unsigned __int8 *)v57, v25, v23, v24);
                char v26 = *((unsigned char *)v20 + 48);
                int v27 = *(void **)(v6 + 264);
                if (!v27)
                {
                  geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(v51);
                  int v27 = *(void **)(v6 + 264);
                }
                *(void *)(v6 + 264) = *v27;
                md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v27, &v59, v26, (v25 - 1) < 3u, &v55);
                unsigned int v29 = (void *)a3[1];
                unint64_t v28 = a3[2];
                if ((unint64_t)v29 >= v28)
                {
                  uint64_t v31 = (unsigned char *)*a3;
                  uint64_t v32 = (uint64_t)v29 - *a3;
                  uint64_t v33 = v32 >> 3;
                  unint64_t v34 = (v32 >> 3) + 1;
                  if (v34 >> 61) {
                    abort();
                  }
                  uint64_t v35 = v28 - (void)v31;
                  if (v35 >> 2 > v34) {
                    unint64_t v34 = v35 >> 2;
                  }
                  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v36 = v34;
                  }
                  if (v36)
                  {
                    if (v36 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    unint64_t v37 = operator new(8 * v36);
                  }
                  else
                  {
                    unint64_t v37 = 0;
                  }
                  unint64_t v38 = &v37[8 * v33];
                  *unint64_t v38 = v27;
                  uint64_t v30 = v38 + 1;
                  if (v29 == (void *)v31)
                  {
                    uint64_t v31 = v29;
                  }
                  else
                  {
                    unint64_t v39 = (char *)(v29 - 1) - v31;
                    if (v39 < 0x58) {
                      goto LABEL_76;
                    }
                    if ((unint64_t)((char *)v29 - &v37[v32]) < 0x20) {
                      goto LABEL_76;
                    }
                    uint64_t v40 = (v39 >> 3) + 1;
                    uint64_t v41 = &v37[8 * v33 - 16];
                    unint64_t v42 = (long long *)(v29 - 2);
                    uint64_t v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v44 = *v42;
                      *(v41 - 1) = *(v42 - 1);
                      *uint64_t v41 = v44;
                      v41 -= 2;
                      v42 -= 2;
                      v43 -= 4;
                    }
                    while (v43);
                    v38 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
                    v29 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_76:
                      do
                      {
                        uint64_t v45 = *--v29;
                        *--unint64_t v38 = v45;
                      }
                      while (v29 != (void *)v31);
                      uint64_t v31 = (unsigned char *)*a3;
                    }
                  }
                  *a3 = v38;
                  a3[1] = v30;
                  a3[2] = &v37[8 * v36];
                  if (v31) {
                    operator delete(v31);
                  }
                  uint64_t v6 = v52;
                  int v16 = v53;
                }
                else
                {
                  *unsigned int v29 = v27;
                  uint64_t v30 = v29 + 1;
                }
                a3[1] = v30;
                unint64_t v46 = v56;
                if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
                int8x8_t v47 = v60;
                if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                  uint64_t v48 = (void *)v20[1];
                  if (!v48)
                  {
                    do
                    {
LABEL_67:
                      unint64_t v49 = (void *)v20[2];
                      BOOL v50 = *v49 == (void)v20;
                      uint64_t v20 = v49;
                    }
                    while (!v50);
                    goto LABEL_29;
                  }
                }
                else
                {
                  uint64_t v48 = (void *)v20[1];
                  if (!v48) {
                    goto LABEL_67;
                  }
                }
                do
                {
                  unint64_t v49 = v48;
                  uint64_t v48 = (void *)*v48;
                }
                while (v48);
LABEL_29:
                uint64_t v20 = v49;
              }
              while (v49 != v54);
            }
          }
        }
      }
    }
  }
}

void sub_1A18E8A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  double v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int8x8_t v4 = v1 - 1;
    while (v4 != v2)
    {
      double v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *double v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int8x8_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint8x8_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint8x8_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint8x8_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      int v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      int v27 = (float32x2_t *)v25[9];
      *int v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

void md::DaVinciGroundRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint8x8_t v5 = *(uint64_t **)(a3 + 8);
  int8x8_t v6 = (int8x8_t)v5[1];
  if (!*(void *)&v6)
  {
    uint64_t v9 = 0;
    float v10 = MEMORY[0x10];
    float v11 = MEMORY[0x14];
    goto LABEL_43;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v6 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v8 = 0x8BD499FBD96FBB9ELL % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v12 = *v5;
  uint64_t v13 = *(void **)(v12 + 8 * v8);
  if (v13 && (uint64_t v14 = (void *)*v13) != 0)
  {
    if (v7.u32[0] >= 2uLL)
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        uint64_t v14 = (void *)*v14;
    }
    else
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        uint64_t v14 = (void *)*v14;
    }
    uint64_t v15 = *(void *)(v14[5] + 32);
    uint64_t v16 = v15 + 16;
    uint64_t v17 = v15 + 20;
  }
  else
  {
    uint64_t v16 = 16;
    uint64_t v17 = 20;
  }
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x1AF456233693CD46;
    if (*(void *)&v6 <= 0x1AF456233693CD46uLL) {
      uint64_t v18 = 0x1AF456233693CD46uLL % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v18 = (*(void *)&v6 - 1) & 0x1AF456233693CD46;
  }
  float v10 = *(float *)v16;
  float v11 = *(float *)v17;
  float32x2_t v19 = *(void **)(v12 + 8 * v18);
  if (!v19) {
    goto LABEL_42;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_42;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v6 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46) {
          goto LABEL_40;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_42;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_42;
      }
    }
  }
  while (1)
  {
    unint64_t v22 = v20[1];
    if (v22 == 0x1AF456233693CD46) {
      break;
    }
    if (v22 >= *(void *)&v6) {
      v22 %= *(void *)&v6;
    }
    if (v22 != v18) {
      goto LABEL_42;
    }
LABEL_29:
    float32x2_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_42;
    }
  }
  if (v20[2] != 0x1AF456233693CD46) {
    goto LABEL_29;
  }
LABEL_40:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v9 = *(double **)(v24 + 32);
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v9 = 0;
LABEL_43:
  int v25 = *a2;
  unint64_t v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      uint64_t v27 = *v25++;
      a1 = md::BaseMapTileDataRenderable::adjustZScale(v27, v10, v11);
      unint64_t v28 = *(void **)(v27 + 448);
      unint64_t v29 = v28[1];
      double v30 = v9[62];
      double v31 = v9[63];
      double v32 = v9[64];
      float32_t v33 = *(double *)(v27 + 576)
          + *(double *)(v27 + 480) * v30
          + *(double *)(v27 + 512) * v31
          + *(double *)(v27 + 544) * v32;
      unint64_t v35 = v28[8];
      unint64_t v34 = (float32x2_t *)v28[9];
      float32x2_t *v34 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v27 + 560), *(float64x2_t *)(v27 + 464), v30), *(float64x2_t *)(v27 + 496), v31), *(float64x2_t *)(v27 + 528), v32));
      v34[1].f32[0] = v33;
      if (v35 > v29) {
        unint64_t v29 = v35;
      }
      v28[7] = 0;
      float64x2_t v28[8] = v29;
    }
    while (v25 != v26);
  }
  md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::updateWithContext(a1, a2, a3);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    int8x8_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        uint64_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        uint64_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        int8x8_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          int8x8_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      int8x8_t v6 = *(unsigned __int16 **)(v5 + 48);
      uint8x8_t v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      unint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            int8x8_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      float v10 = v9 + 1;
      float v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              float v11 = v16;
            }
            while (!v17);
          }
          float v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  int8x8_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  unint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A18E9354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(uint64_t **a1)
{
  uint64_t result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  int8x8_t v3 = result;
  unint64_t v5 = a1 + 1;
  int v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        int8x8_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if ((unint64_t)result >= v7) {
          break;
        }
        int v4 = *v6;
        unint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= (unint64_t)result) {
        break;
      }
      int v4 = v6[1];
      if (!v4)
      {
        unint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int8x8_t v6 = a1 + 1;
LABEL_8:
    unint64_t v8 = (uint64_t *)operator new(0x28uLL);
    void v8[4] = (uint64_t)v3;
    *unint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *unint64_t v5 = v8;
    uint64_t v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      float v10 = *v5;
    }
    else
    {
      float v10 = v8;
    }
    uint64_t result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  float v11 = a1[5];
  uint64_t v12 = 816 * (void)a1[3] - 816;
  if ((v12 & 0x8000000000000000) == 0)
  {
    unsigned __int8 v13 = &v3[v12];
    do
    {
      *(void *)unsigned __int8 v13 = v11;
      unsigned __int8 v14 = v13 - 816;
      float v11 = (uint64_t *)v13;
      unsigned __int8 v13 = v14;
    }
    while (v14 >= v3);
    float v11 = (uint64_t *)(v14 + 816);
  }
  a1[5] = v11;
  return result;
}

void *md::LayerDataLogic::runAfterLayoutAtVariableRate(uint64_t a1, md::LayoutContext *this, uint64_t a3, void *a4)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  unint64_t v161 = (void (**)(void **))&unk_1EF570968;
  uint64_t v162 = this;
  unint64_t v163 = (void **)&v161;
  v159[0] = &unk_1EF5709B0;
  v159[1] = this;
  int v160 = v159;
  uint64_t v165 = v164;
  v164[0] = &unk_1EF5709B0;
  v164[1] = this;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v7 = *((void *)v162 + 10);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v8 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v7, "LayerDataLogicAfterVariableRate", "", (uint8_t *)&buf, 2u);
    }
  }
  if (v160 == v159)
  {
    (*(void (**)(void *))(v159[0] + 32))(v159);
  }
  else if (v160)
  {
    (*(void (**)(void))(*v160 + 40))();
  }
  if (v163 == (void **)&v161)
  {
    v161[4]((void **)&v161);
  }
  else if (v163)
  {
    (*((void (**)(void))*v163 + 5))();
  }
  uint64_t v9 = md::LayoutContext::frameState(this);
  float v10 = *(void **)(a1 + 120);
  uint64_t v11 = v10[1];
  uint64_t v137 = v10[2];
  if (v11 == v137) {
    goto LABEL_268;
  }
  uint64_t v134 = a4;
  uint64_t v135 = a1;
  uint64_t v12 = (uint64_t)(*(double *)(v9 + 88) * 1000.0);
  unint64_t v136 = *(void **)(a1 + 120);
  while (2)
  {
    std::string::size_type v13 = *(void *)(v11 + 8);
    uint64_t v141 = v11;
    int v142 = (gdc::ResourceManager *)v10[7];
    unint64_t v145 = (void *)(v13 + 80);
    uint64_t v14 = *(void *)(v13 + 96);
    if (!v14) {
      goto LABEL_67;
    }
    do
    {
      while (1)
      {
        uint64_t v15 = *(void **)(v14 + 128);
        if (v15[25] >= v12) {
          break;
        }
LABEL_19:
        uint64_t v14 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase(v145, (void *)v14);
        if (!v14) {
          goto LABEL_67;
        }
      }
      uint64_t v16 = v15[15];
      uint64_t v17 = v15[16];
      if (v16 == v17)
      {
LABEL_46:
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        os_signpost_id_t v28 = *(void *)(*(void *)(v14 + 128) + 112);
        if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v29 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
          {
            double v30 = *(int **)(v14 + 32);
            int v31 = *v30;
            int v32 = v30[1];
            int v33 = v30[2];
            int v34 = *(unsigned __int16 *)(v14 + 24);
            int v35 = *(unsigned __int8 *)(v14 + 16);
            unint64_t v36 = "<Invalid>";
            if (v35 == 1) {
              unint64_t v36 = "Preliminary";
            }
            BOOL v37 = v35 == 0;
            unint64_t v38 = "Standard";
            if (!v37) {
              unint64_t v38 = v36;
            }
            *(_DWORD *)unint64_t v168 = 67110146;
            *(_DWORD *)&v168[4] = v31;
            *(_WORD *)&v168[8] = 1024;
            *(_DWORD *)&v168[10] = v32;
            *(_WORD *)&v168[14] = 1024;
            *(_DWORD *)&v168[16] = v33;
            *(_WORD *)&v168[20] = 1024;
            *(_DWORD *)&v168[22] = v34;
            *(_WORD *)&v168[26] = 2080;
            *(void *)&v168[28] = v38;
            _os_signpost_emit_with_name_impl(&dword_1A1780000, v29, OS_SIGNPOST_INTERVAL_BEGIN, v28, "LayerDataRequest", "tileKey=%d.%d.%d tileType=%d requestType=%s retry=true", v168, 0x24u);
          }
        }
        v168[0] = *(unsigned char *)(v14 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v168[8], v14 + 24);
        char v173 = 0;
        if (*(unsigned char *)(v14 + 112))
        {
          int v174 = *(_DWORD *)(v14 + 116);
          char v173 = 1;
        }
        uint64_t v39 = *(void *)(v14 + 128);
        uint64_t v175 = *(void *)(v14 + 120);
        uint64_t v176 = v39;
        uint64_t v40 = *(std::__shared_weak_count **)(v14 + 136);
        uint8x8_t v177 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>(v13 + 40, v168, (uint64_t)v168);
        uint64_t v41 = v177;
        if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          if (!v173)
          {
LABEL_63:
            if (*(void *)&v168[16] != *(void *)&v168[32]) {
              free(*(void **)&v168[16]);
            }
            goto LABEL_19;
          }
        }
        else if (!v173)
        {
          goto LABEL_63;
        }
        char v173 = 0;
        goto LABEL_63;
      }
      int v18 = 2;
      do
      {
        while (1)
        {
          int v19 = *(unsigned __int8 **)(v16 + 24);
          if (!v19) {
            goto LABEL_24;
          }
          float32x2_t v20 = (void *)(*(void *)(v13 + 272) + 8);
          uint64_t v21 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v20, v19 + 16);
          if (v21)
          {
            if (*((_DWORD *)v21 + 29) == 2) {
              break;
            }
          }
          uint64_t v22 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v20, v19 + 16);
          if (v22)
          {
            unsigned int v23 = *((_DWORD *)v22 + 28);
            if (v23 < 2)
            {
LABEL_23:
              int v18 = 0;
              goto LABEL_24;
            }
            if (v23 - 3 < 2) {
              goto LABEL_31;
            }
            break;
          }
LABEL_31:
          v16 += 48;
          int v18 = 1;
          if (v16 == v17) {
            goto LABEL_44;
          }
        }
        if (v18 == 2)
        {
          int v24 = *(unsigned __int8 **)v19;
          if (v24)
          {
            while (1)
            {
              uint64_t v25 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v20, v24 + 16);
              if (!v25 || *((_DWORD *)v25 + 29) != 2)
              {
                unint64_t v26 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v20, v24 + 16);
                if (!v26) {
                  goto LABEL_31;
                }
                unsigned int v27 = *((_DWORD *)v26 + 28);
                if (v27 < 2) {
                  goto LABEL_23;
                }
                if (v27 - 3 < 2) {
                  goto LABEL_31;
                }
              }
              int v24 = *(unsigned __int8 **)v24;
              int v18 = 2;
              if (!v24) {
                goto LABEL_24;
              }
            }
          }
          int v18 = 2;
        }
LABEL_24:
        v16 += 48;
      }
      while (v16 != v17);
      if (v18 != 1) {
        goto LABEL_46;
      }
LABEL_44:
      uint64_t v14 = *(void *)v14;
    }
    while (v14);
LABEL_67:
    uint64_t v42 = *(void *)(v13 + 56);
    if (v42)
    {
      while (1)
      {
        long long v44 = (unsigned __int16 ***)(v42 + 128);
        uint64_t v43 = *(void *)(v42 + 128);
        if (*(void *)(v43 + 200) < v12 || *(unsigned char *)(v43 + 209)) {
          goto LABEL_70;
        }
        int v143 = (unsigned __int16 *)(v42 + 16);
        uint64_t v45 = *(void *)(v43 + 120);
        uint64_t v46 = *(void *)(v43 + 128);
        if (v45 == v46) {
          break;
        }
        int v47 = 2;
        do
        {
          uint64_t v48 = *(unsigned __int8 **)(v45 + 24);
          if (!v48) {
            goto LABEL_76;
          }
          unint64_t v49 = (void *)(*(void *)(v13 + 272) + 8);
          BOOL v50 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v49, v48 + 16);
          if (v50 && *((_DWORD *)v50 + 29) == 2) {
            goto LABEL_85;
          }
          uint64_t v51 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v49, v48 + 16);
          if (v51)
          {
            unsigned int v52 = *((_DWORD *)v51 + 28);
            if (v52 >= 5) {
              goto LABEL_85;
            }
          }
          else
          {
            unsigned int v52 = 3;
          }
          if (((0x1Bu >> v52) & 1) == 0)
          {
LABEL_85:
            if (v47 != 2) {
              goto LABEL_76;
            }
            unint64_t v53 = *(unsigned __int8 **)v48;
            if (!*(void *)v48)
            {
LABEL_75:
              int v47 = 2;
              goto LABEL_76;
            }
            while (1)
            {
              uint64_t v54 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v49, v53 + 16);
              if (!v54 || *((_DWORD *)v54 + 29) != 2)
              {
                uint64_t v55 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v49, v53 + 16);
                if (!v55)
                {
                  int v47 = 1;
                  goto LABEL_76;
                }
                unsigned int v56 = *((_DWORD *)v55 + 28);
                if (v56 < 5 && ((0x1Bu >> v56) & 1) != 0)
                {
                  unint64_t v57 = (char *)&unk_1A29CD250 + 4 * (int)v56;
                  goto LABEL_96;
                }
              }
              unint64_t v53 = *(unsigned __int8 **)v53;
              if (!v53) {
                goto LABEL_75;
              }
            }
          }
          unint64_t v57 = (char *)&unk_1A29CB1F8 + 4 * v52;
LABEL_96:
          int v47 = *(_DWORD *)v57;
LABEL_76:
          v45 += 48;
        }
        while (v45 != v46);
        if (v47 == 2) {
          break;
        }
        if (v47 == 1)
        {
          v168[0] = *(unsigned char *)(v42 + 16);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v168[8], v42 + 24);
          char v173 = 0;
          if (*(unsigned char *)(v42 + 112))
          {
            int v174 = *(_DWORD *)(v42 + 116);
            char v173 = 1;
          }
          uint64_t v74 = *(void *)(v42 + 128);
          uint64_t v175 = *(void *)(v42 + 120);
          uint64_t v176 = v74;
          unint64_t v75 = *(std::__shared_weak_count **)(v42 + 136);
          uint8x8_t v177 = v75;
          if (v75) {
            atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>((uint64_t)v145, v168, (uint64_t)v168);
          uint64_t v76 = v177;
          if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
            if (v173) {
LABEL_138:
            }
              char v173 = 0;
          }
          else if (v173)
          {
            goto LABEL_138;
          }
          if (*(void *)&v168[16] != *(void *)&v168[32]) {
            free(*(void **)&v168[16]);
          }
          if (*(unsigned char *)v143 == 1)
          {
LABEL_150:
            if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
            }
          }
          else
          {
            if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
              dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
            }
            uint64_t v77 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
            {
              gdc::LayerDataRequestKey::keysInt32Str((std::string *)v168, v143);
              if (v168[23] >= 0) {
                uint64_t v78 = v168;
              }
              else {
                uint64_t v78 = *(unsigned char **)v168;
              }
              *(_DWORD *)blocuint64_t k = 136315138;
              *(void *)&block[4] = v78;
              _os_log_impl(&dword_1A1780000, v77, OS_LOG_TYPE_DEBUG, "Failed layer data request: %s", block, 0xCu);
              if ((v168[23] & 0x80000000) != 0) {
                operator delete(*(void **)v168);
              }
              goto LABEL_150;
            }
          }
          os_signpost_id_t v79 = (os_signpost_id_t)(*v44)[14];
          if (v79 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            int v80 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            {
              *(_WORD *)unint64_t v168 = 0;
              _os_signpost_emit_with_name_impl(&dword_1A1780000, v80, OS_SIGNPOST_INTERVAL_END, v79, "LayerDataRequest", "status=failed", v168, 2u);
            }
          }
          uint64_t v42 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase((void *)(v13 + 40), (void *)v42);
          goto LABEL_71;
        }
        if (!v47) {
          goto LABEL_70;
        }
LABEL_71:
        if (!v42) {
          goto LABEL_16;
        }
      }
      if (!(*(unsigned int (**)(std::string::size_type))(*(void *)v13 + 56))(v13)) {
        goto LABEL_70;
      }
      char v58 = gdc::LayerDataRequest::collectResources(*v44, v142);
      uint64_t v59 = *v44;
      if ((v58 & 1) == 0 && !*((unsigned char *)v59 + 208) && (!*(unsigned char *)(v13 + 296) || *((unsigned char *)v59 + 209))) {
        goto LABEL_70;
      }
      if (!(*(unsigned int (**)(std::string::size_type, uint64_t, gdc::ResourceManager *, unsigned __int16 **))(*(void *)v13 + 120))(v13, v42 + 128, v142, v59 + 21))goto LABEL_158; {
      uint64_t v60 = *v44;
      }
      uint64_t v62 = (*v44)[15];
      unint64_t v61 = (*v44)[16];
      if (v62 != v61)
      {
        int64_t v139 = *v44;
        int v63 = 2;
        do
        {
          uint64_t v64 = (unsigned __int8 *)*((void *)v62 + 3);
          if (!v64) {
            goto LABEL_109;
          }
          double v65 = (void *)(*(void *)(v13 + 272) + 8);
          unint64_t v66 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v65, v64 + 16);
          if (v66 && *((_DWORD *)v66 + 29) == 2) {
            goto LABEL_118;
          }
          unint64_t v67 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v65, v64 + 16);
          if (v67)
          {
            unsigned int v68 = *((_DWORD *)v67 + 28);
            if (v68 >= 5) {
              goto LABEL_118;
            }
          }
          else
          {
            unsigned int v68 = 3;
          }
          if (((0x1Bu >> v68) & 1) == 0)
          {
LABEL_118:
            if (v63 != 2) {
              goto LABEL_109;
            }
            uint64_t v69 = *(unsigned __int8 **)v64;
            if (!*(void *)v64)
            {
LABEL_108:
              int v63 = 2;
              goto LABEL_109;
            }
            while (1)
            {
              long long v70 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v65, v69 + 16);
              if (!v70 || *((_DWORD *)v70 + 29) != 2)
              {
                int64_t v71 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v65, v69 + 16);
                if (!v71)
                {
                  int v63 = 1;
                  goto LABEL_109;
                }
                unsigned int v72 = *((_DWORD *)v71 + 28);
                if (v72 < 5 && ((0x1Bu >> v72) & 1) != 0)
                {
                  uint64_t v73 = (char *)&unk_1A29CD264 + 4 * (int)v72;
                  goto LABEL_129;
                }
              }
              uint64_t v69 = *(unsigned __int8 **)v69;
              if (!v69) {
                goto LABEL_108;
              }
            }
          }
          uint64_t v73 = (char *)&unk_1A29CB1F8 + 4 * v68;
LABEL_129:
          int v63 = *(_DWORD *)v73;
LABEL_109:
          v62 += 24;
        }
        while (v62 != v61);
        uint64_t v60 = v139;
        if (v63 != 2) {
          goto LABEL_70;
        }
      }
      gdc::LayerDataRequest::collectResources(v60, v142);
LABEL_158:
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      uint64_t v81 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str((std::string *)v168, (unsigned __int16 *)*v44);
        int64x2_t v82 = v168[23] >= 0 ? v168 : *(unsigned char **)v168;
        *(_DWORD *)blocuint64_t k = 136315394;
        *(void *)&block[4] = v82;
        *(_WORD *)&block[12] = 2048;
        *(void *)&block[14] = v12;
        _os_log_impl(&dword_1A1780000, v81, OS_LOG_TYPE_DEBUG, "Queuing creation of: %s timestamp: %lld", block, 0x16u);
        if ((v168[23] & 0x80000000) != 0) {
          operator delete(*(void **)v168);
        }
      }
      *((unsigned char *)*v44 + 209) = 1;
      uint64_t v83 = *(void *)(v13 + 8);
      uint64_t v84 = (*(uint64_t (**)(std::string::size_type))(*(void *)v13 + 64))(v13);
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      std::string::size_type v85 = os_signpost_id_generate((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log);
      uint64_t v140 = (gdc::LayerDataRequest *)(*v44)[14];
      int v138 = *((unsigned __int8 *)*v44 + 208);
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      unint64_t v86 = v85 - 1;
      if (v85 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      {
        if (!v83)
        {
          uint64_t v90 = v42 + 16;
          goto LABEL_228;
        }
      }
      else
      {
        size_t v87 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
        {
          unint64_t v88 = "yes";
          if (!*((unsigned char *)*v44 + 208)) {
            unint64_t v88 = "no";
          }
          uint64_t v89 = (*v44)[14];
          *(_DWORD *)unint64_t v168 = 134218498;
          *(void *)&v168[4] = v140;
          *(_WORD *)&v168[12] = 2080;
          *(void *)&v168[14] = v88;
          *(_WORD *)&v168[22] = 2048;
          *(void *)&v168[24] = v89;
          _os_signpost_emit_with_name_impl(&dword_1A1780000, v87, OS_SIGNPOST_INTERVAL_BEGIN, v85, "LayerDataDecode", "requestId=%zu hasAllResources=%s parent_signpost=%zu", v168, 0x20u);
        }
        if (!v83)
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          uint64_t v90 = v42 + 16;
          uint64_t v91 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
          {
            *(_WORD *)unint64_t v168 = 0;
            _os_signpost_emit_with_name_impl(&dword_1A1780000, v91, OS_SIGNPOST_INTERVAL_BEGIN, v85, "LayerDataDecodeDispatched", "", v168, 2u);
          }
LABEL_228:
          gdc::LayerDataSource::updateLayerData(v13, (uint64_t)v140, v90, (uint64_t *)*v44 + 21, v12, v138 != 0);
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken == -1)
          {
            if (v86 <= 0xFFFFFFFFFFFFFFFDLL)
            {
LABEL_230:
              unint64_t v121 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
              if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
              {
                *(_WORD *)unint64_t v168 = 0;
                _os_signpost_emit_with_name_impl(&dword_1A1780000, v121, OS_SIGNPOST_INTERVAL_END, v85, "LayerDataDecodeDispatched", "", v168, 2u);
                if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
                  dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
                }
              }
              unint64_t v122 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
              if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
              {
                *(_WORD *)unint64_t v168 = 0;
                _os_signpost_emit_with_name_impl(&dword_1A1780000, v122, OS_SIGNPOST_INTERVAL_END, v85, "LayerDataDecode", "", v168, 2u);
              }
            }
          }
          else
          {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
            if (v86 <= 0xFFFFFFFFFFFFFFFDLL) {
              goto LABEL_230;
            }
          }
LABEL_70:
          uint64_t v42 = *(void *)v42;
          goto LABEL_71;
        }
      }
      uint64_t v92 = *(void *)(v42 + 128);
      buf.__r_.__value_.__r.__words[0] = v85;
      buf.__r_.__value_.__l.__size_ = v13;
      buf.__r_.__value_.__s.__data_[16] = *(unsigned char *)(v42 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v148, v42 + 24);
      char v151 = 0;
      if (*(unsigned char *)(v42 + 112))
      {
        int v152 = *(_DWORD *)(v42 + 116);
        char v151 = 1;
      }
      uint64_t v153 = *(void *)(v42 + 120);
      int v155 = 0;
      size_t v156 = 0;
      std::string __p = 0;
      float v93 = *(char **)(v92 + 168);
      float v94 = *(char **)(v92 + 176);
      int64_t v95 = v94 - v93;
      if (v94 != v93)
      {
        unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * (v95 >> 4);
        if (v96 > 0x555555555555555) {
          goto LABEL_274;
        }
        unint64_t v97 = operator new(v95);
        std::string __p = v97;
        int v155 = (char *)v97;
        size_t v156 = &v97[24 * v96];
        do
        {
          uint64_t v98 = (uint64_t)(v93 + 8);
          __int16 v99 = *(_WORD *)v93;
          v93 += 48;
          uint64_t v100 = (uint64_t)(v97 + 4);
          _WORD *v97 = v99;
          v97 += 24;
          std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v100, v98);
        }
        while (v93 != v94);
        int v155 = (char *)v97;
      }
      *(void *)&long long v157 = v12;
      *((void *)&v157 + 1) = v140;
      char v158 = v138;
      char v167 = 0;
      uint64_t v101 = (char *)operator new(0xB8uLL);
      *(void *)uint64_t v101 = &unk_1EF57A340;
      *(_OWORD *)(v101 + 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      v101[24] = buf.__r_.__value_.__s.__data_[16];
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v101 + 32), (uint64_t)&v148);
      v101[120] = 0;
      if (v151)
      {
        *((_DWORD *)v101 + 31) = v152;
        v101[120] = 1;
      }
      uint64_t v102 = (char *)__p;
      *((void *)v101 + 16) = v153;
      *((void *)v101 + 17) = 0;
      *((void *)v101 + 18) = 0;
      *((void *)v101 + 19) = 0;
      unint64_t v103 = v155;
      int64_t v104 = v155 - v102;
      if (v155 != v102)
      {
        uint64_t v144 = v83;
        uint64_t v105 = v84;
        unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * (v104 >> 4);
        if (v106 > 0x555555555555555) {
LABEL_274:
        }
          abort();
        unint64_t v107 = operator new(v104);
        *((void *)v101 + 17) = v107;
        *((void *)v101 + 18) = v107;
        *((void *)v101 + 19) = &v107[24 * v106];
        do
        {
          uint64_t v108 = (uint64_t)(v102 + 8);
          __int16 v109 = *(_WORD *)v102;
          v102 += 48;
          uint64_t v110 = (uint64_t)(v107 + 4);
          *unint64_t v107 = v109;
          v107 += 24;
          std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v110, v108);
        }
        while (v102 != v103);
        *((void *)v101 + 18) = v107;
        uint64_t v84 = v105;
        uint64_t v83 = v144;
      }
      *((_OWORD *)v101 + 10) = v157;
      v101[176] = v158;
      char v167 = v101;
      BOOL v111 = (std::__shared_weak_count *)operator new(0x40uLL);
      v111->__shared_owners_ = 0;
      p_uint64_t shared_owners = &v111->__shared_owners_;
      v111->__shared_weak_owners_ = 0;
      v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582E48;
      v111[2].__vftable = (std::__shared_weak_count_vtbl *)(*(uint64_t (**)(char *))(*(void *)v101 + 16))(v101);
      LOWORD(v111[2].__shared_owners_) = 0;
      atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v84)
      {
        uint64_t v113 = *(NSObject **)(v84 + 8);
        if (*(unsigned char *)(v83 + 58)) {
          goto LABEL_197;
        }
LABEL_202:
        uint64_t v114 = 0;
      }
      else
      {
        uint64_t v113 = 0;
        if (!*(unsigned char *)(v83 + 58)) {
          goto LABEL_202;
        }
LABEL_197:
        uint64_t v114 = *(void *)(v83 + 72);
      }
      char v115 = *(unsigned char *)(v83 + 56);
      *(void *)unint64_t v168 = MEMORY[0x1E4F143A8];
      *(void *)&v168[8] = 1174405120;
      *(void *)&v168[16] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke;
      *(void *)&v168[24] = &__block_descriptor_tmp_54606;
      char v172 = v115;
      *(void *)&v168[32] = v114;
      int v169 = v111 + 1;
      uint64_t v170 = v111;
      atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      int v116 = *(unsigned __int8 *)(v83 + 56);
      float v171 = v113;
      if (v116)
      {
        *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
        *(void *)&block[8] = 0x40000000;
        *(void *)&block[16] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke_28;
        int64_t v179 = &unk_1E5A99F58;
        uint64_t v181 = v83;
        uint64_t v182 = v114;
        unint64_t v180 = v168;
        if (v113) {
          dispatch_group_enter(v113);
        }
        char v117 = *(NSObject **)(v83 + 40);
        size_t v118 = block;
LABEL_207:
        dispatch_async(v117, v118);
      }
      else
      {
        if (!v113)
        {
          size_t v118 = v168;
          char v117 = *(NSObject **)(v83 + 16);
          goto LABEL_207;
        }
        dispatch_group_async(v113, *(dispatch_queue_t *)(v83 + 16), v168);
      }
      float v119 = v170;
      if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_236;
        }
LABEL_213:
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_237:
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      else
      {
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_213;
        }
LABEL_236:
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_237;
        }
      }
      if (v167 == (char *)v166)
      {
        (*(void (**)(void *))(v166[0] + 32))(v166);
        unint64_t v120 = __p;
        if (__p) {
          goto LABEL_218;
        }
      }
      else
      {
        if (v167) {
          (*(void (**)(void))(*(void *)v167 + 40))();
        }
        unint64_t v120 = __p;
        if (__p)
        {
LABEL_218:
          std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)&__p, (uint64_t)v120);
          operator delete(__p);
        }
      }
      if (v151) {
        char v151 = 0;
      }
      if (v149 != v150) {
        free(v149);
      }
      goto LABEL_70;
    }
LABEL_16:
    uint64_t v11 = v141 + 24;
    float v10 = v136;
    if (v141 + 24 != v137) {
      continue;
    }
    break;
  }
  float v10 = *(void **)(v135 + 120);
  uint64_t v123 = v10[1];
  *(void *)BOOL v146 = v10[2];
  if (v123 != *(void *)v146)
  {
    do
    {
      uint64_t v124 = *(void **)(v123 + 8);
      for (uint64_t i = v124[7];
            i;
            uint64_t i = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase(v124 + 5, (void *)i))
      {
        while (*(void *)(*(void *)(i + 128) + 200) >= v12)
        {
          uint64_t i = *(void *)i;
          if (!i) {
            goto LABEL_243;
          }
        }
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        uint64_t v126 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
        {
          gdc::LayerDataRequestKey::keysInt32Str(&buf, *(unsigned __int16 **)(i + 128));
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          unint64_t v128 = "y";
          if (!*(unsigned char *)(*(void *)(i + 128) + 209)) {
            unint64_t v128 = "n";
          }
          *(_DWORD *)unint64_t v168 = 136315394;
          *(void *)&v168[4] = p_buf;
          *(_WORD *)&v168[12] = 2080;
          *(void *)&v168[14] = v128;
          _os_log_impl(&dword_1A1780000, v126, OS_LOG_TYPE_DEBUG, "Auto cancelling layer data request: %s, pendingCreation: %s", v168, 0x16u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
        }
        uint64_t v129 = *(void *)(i + 128);
        os_signpost_id_t v130 = *(void *)(v129 + 112);
        if (v130 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v131 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1A1780000, v131, OS_SIGNPOST_INTERVAL_END, v130, "LayerDataRequest", "status=cancelled", (uint8_t *)&buf, 2u);
            uint64_t v129 = *(void *)(i + 128);
          }
        }
        if (*(unsigned char *)(v129 + 209)) {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)(v124 + 20), *(void *)(v129 + 112), *(void *)(v129 + 112));
        }
        uint64_t v132 = (void *)v124[59];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        gdc::LayerDataRequestTracker::_processKey(v132, (unsigned __int8 *)(i + 16), (uint64_t *)&buf, 1);
      }
LABEL_243:
      v124[35] = v12;
      v123 += 24;
    }
    while (v123 != *(void *)v146);
    float v10 = *(void **)(v135 + 120);
  }
  a4 = v134;
LABEL_268:
  *a4 = v10;
  if (!v165) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(void *))(*v165 + 48))(v165);
  uint64_t result = v165;
  if (v165 == v164) {
    return (void *)(*(uint64_t (**)(void *))(v164[0] + 32))(v164);
  }
  if (v165) {
    return (void *)(*(uint64_t (**)(void))(*v165 + 40))();
  }
  return result;
}

uint64_t std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void std::__hash_table<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int16 *)a2 + 1);
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = (uint64_t *)*((void *)a2 + 9);
  unint64_t v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    std::string::size_type v13 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v15 = (const void *)*((void *)a2 + 1);
        size_t v16 = *((void *)a2 + 2) - (void)v15;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == v6
                && *((unsigned __int16 *)v14 + 9) == v7
                && v14[11] == v9)
              {
                uint64_t v22 = v14[3];
                if ((char *)v14[4] - (char *)v22 == v16)
                {
                  size_t v71 = v16;
                  uint64_t v73 = v15;
                  int v23 = memcmp(v22, v15, v16);
                  size_t v16 = v71;
                  uint64_t v15 = v73;
                  if (!v23) {
                    return;
                  }
                }
              }
            }
            else if (((unint64_t)v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t **)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v17 = (unint64_t)v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == v6
              && *((unsigned __int16 *)v14 + 9) == v7
              && v14[11] == v9)
            {
              int v18 = v14[3];
              if ((char *)v14[4] - (char *)v18 == v16)
              {
                unsigned int v72 = v15;
                size_t v19 = v16;
                int v20 = memcmp(v18, v15, v16);
                size_t v16 = v19;
                uint64_t v15 = v72;
                if (!v20) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  int v24 = operator new(0x80uLL);
  *int v24 = 0;
  v24[1] = v10;
  uint64_t v25 = (char *)(v24 + 7);
  unint64_t v26 = *(char **)(a3 + 8);
  v24[2] = *(void *)a3;
  void v24[3] = v24 + 7;
  v24[4] = v24 + 7;
  v24[5] = v24 + 7;
  v24[6] = 32;
  unsigned int v27 = *(char **)(a3 + 16);
  unint64_t v28 = v27 - v26;
  if ((unint64_t)(v27 - v26) >= 0x21)
  {
    if (v28 <= 0x40) {
      size_t v29 = 64;
    }
    else {
      size_t v29 = v27 - v26;
    }
    uint64_t v25 = (char *)malloc_type_malloc(v29, 0x100004077774924uLL);
    double v30 = (char *)v24[3];
    int v31 = (char *)v24[4];
    if (v30 == v31) {
      goto LABEL_51;
    }
    unint64_t v32 = v31 - v30;
    if ((unint64_t)(v31 - v30) < 8)
    {
      int v33 = v25;
      goto LABEL_50;
    }
    int v33 = v25;
    if ((unint64_t)(v25 - v30) < 0x20) {
      goto LABEL_50;
    }
    if (v32 >= 0x20)
    {
      unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFE0;
      int v35 = (long long *)(v30 + 16);
      unint64_t v36 = v25 + 16;
      unint64_t v37 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v38 = *v35;
        *(v36 - 1) = *(v35 - 1);
        *unint64_t v36 = v38;
        v35 += 2;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      if (v32 == v34) {
        goto LABEL_51;
      }
      if ((v32 & 0x18) == 0)
      {
        v30 += v34;
        int v33 = &v25[v34];
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v34 = 0;
    }
    unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFF8;
    int v33 = &v25[v32 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v40 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = (uint64_t *)&v30[v34];
    uint64_t v42 = &v25[v34];
    do
    {
      uint64_t v43 = *v41++;
      *(void *)uint64_t v42 = v43;
      v42 += 8;
      v40 += 8;
    }
    while (v40);
    if (v32 == v39) {
      goto LABEL_51;
    }
    v30 += v39;
    do
    {
LABEL_50:
      char v44 = *v30++;
      *v33++ = v44;
    }
    while (v30 != v31);
LABEL_51:
    void v24[3] = v25;
    v24[4] = v25;
    v24[6] = v29;
  }
  if (v26 == v27) {
    goto LABEL_70;
  }
  if (v28 < 8)
  {
    uint64_t v46 = v25;
    goto LABEL_68;
  }
  if ((unint64_t)(v25 - v26) < 0x20)
  {
    uint64_t v46 = v25;
    goto LABEL_68;
  }
  if (v28 >= 0x20)
  {
    unint64_t v45 = v28 & 0xFFFFFFFFFFFFFFE0;
    int v47 = (long long *)(v26 + 16);
    uint64_t v48 = v25 + 16;
    unint64_t v49 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v50 = *v47;
      *(v48 - 1) = *(v47 - 1);
      *uint64_t v48 = v50;
      v47 += 2;
      v48 += 2;
      v49 -= 32;
    }
    while (v49);
    if (v28 == v45) {
      goto LABEL_69;
    }
    if ((v28 & 0x18) == 0)
    {
      v26 += v45;
      uint64_t v46 = &v25[v45];
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v45 = 0;
  }
  unint64_t v51 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = &v25[v28 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v52 = v45 - (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v53 = (uint64_t *)&v26[v45];
  uint64_t v54 = &v25[v45];
  do
  {
    uint64_t v55 = *v53++;
    *(void *)uint64_t v54 = v55;
    v54 += 8;
    v52 += 8;
  }
  while (v52);
  if (v28 == v51) {
    goto LABEL_69;
  }
  v26 += v51;
  do
  {
LABEL_68:
    char v56 = *v26++;
    *v46++ = v56;
  }
  while (v26 != v27);
LABEL_69:
  uint64_t v25 = (char *)v24[4];
LABEL_70:
  v24[4] = &v25[v28];
  v24[11] = *(void *)(a3 + 72);
  *((_OWORD *)v24 + 6) = *(_OWORD *)(a3 + 80);
  uint64_t v57 = *(void *)(a3 + 104);
  v24[14] = *(void *)(a3 + 96);
  v24[15] = v57;
  if (v57) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  float v58 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v59 = *(float *)(a1 + 32);
  if (!v11 || (float)(v59 * (float)v11) < v58)
  {
    BOOL v60 = 1;
    if (v11 >= 3) {
      BOOL v60 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v61 = v60 | (2 * v11);
    unint64_t v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62) {
      size_t prime = v62;
    }
    else {
      size_t prime = v61;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v64 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v64) {
      goto LABEL_94;
    }
    if (prime < *(void *)&v64)
    {
      unint64_t v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v64 < 3uLL || (uint8x8_t v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
      {
        unint64_t v65 = std::__next_prime(v65);
      }
      else
      {
        uint64_t v67 = 1 << -(char)__clz(v65 - 1);
        if (v65 >= 2) {
          unint64_t v65 = v67;
        }
      }
      if (prime <= v65) {
        size_t prime = v65;
      }
      if (prime < *(void *)&v64) {
LABEL_94:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    else
    {
      uint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v68 = *(void *)a1;
  uint64_t v69 = *(void **)(*(void *)a1 + 8 * v3);
  if (v69)
  {
    *int v24 = *v69;
LABEL_108:
    void *v69 = v24;
    goto LABEL_109;
  }
  *int v24 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v24;
  *(void *)(v68 + 8 * v3) = a1 + 16;
  if (*v24)
  {
    unint64_t v70 = *(void *)(*v24 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v70 >= v11) {
        v70 %= v11;
      }
    }
    else
    {
      v70 &= v11 - 1;
    }
    uint64_t v69 = (void *)(*(void *)a1 + 8 * v70);
    goto LABEL_108;
  }
LABEL_109:
  ++*(void *)(a1 + 24);
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v3 = (void **)(__p + 17);
  uint64_t v2 = __p[17];
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)(__p + 17), v2);
    operator delete(*v3);
  }
  if (*((unsigned char *)__p + 120)) {
    *((unsigned char *)__p + 120) = 0;
  }
  int v4 = (void *)__p[5];
  if (v4 != (void *)__p[7]) {
    free(v4);
  }
  operator delete(__p);
}

void std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 48)
  {
    int8x8_t v5 = *(void **)(i - 24);
    if (v5)
    {
      do
      {
        uint64_t v7 = (void *)*v5;
        unint64_t v8 = (std::__shared_weak_count *)v5[15];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        uint64_t v9 = (void *)v5[3];
        if (v9 != (void *)v5[5]) {
          free(v9);
        }
        operator delete(v5);
        int8x8_t v5 = v7;
      }
      while (v7);
    }
    uint64_t v6 = *(void **)(i - 40);
    *(void *)(i - 40) = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t gdc::LayerDataRequest::collectResources(unsigned __int16 **this, gdc::ResourceManager *a2)
{
  uint64_t v2 = (gdc::LayerDataRequest *)this;
  *((unsigned char *)this + 208) = 1;
  unsigned __int8 v66 = 0;
  v65[0] = &v66;
  v65[1] = a2;
  v65[2] = this;
  gdc::LayerDataRequest::collectResources(gdc::ResourceManager *)::$_0::operator()((uint64_t)v65, this[15], this[16]);
  gdc::LayerDataRequest::collectResources(gdc::ResourceManager *)::$_0::operator()((uint64_t)v65, *((unsigned __int16 **)v2 + 18), *((unsigned __int16 **)v2 + 19));
  uint64_t v3 = (void *)*((void *)v2 + 21);
  unint64_t v61 = (void *)*((void *)v2 + 22);
  if (v3 != v61)
  {
    int8x8_t v64 = v2;
    do
    {
      int v4 = (unsigned __int16 *)v3[3];
      if (!v4) {
        goto LABEL_3;
      }
      while (1)
      {
LABEL_5:
        uint64_t v5 = v4[9];
        uint64_t v6 = (unsigned __int16 *)*((void *)v2 + 15);
        uint64_t v7 = (unsigned __int16 *)*((void *)v2 + 16);
        if (v6 != v7)
        {
          while (v5 != *v6)
          {
            v6 += 24;
            if (v6 == v7)
            {
              uint64_t v6 = (unsigned __int16 *)*((void *)v2 + 16);
              break;
            }
          }
        }
        unint64_t v8 = (unsigned __int16 *)*((void *)v2 + 18);
        uint64_t v9 = (unsigned __int16 *)*((void *)v2 + 19);
        if (v8 != v9)
        {
          while (v5 != *v8)
          {
            v8 += 24;
            if (v8 == v9)
            {
              unint64_t v8 = (unsigned __int16 *)*((void *)v2 + 19);
              break;
            }
          }
        }
        if (v6 == v7) {
          break;
        }
        int8x8_t v10 = *(int8x8_t *)(v6 + 8);
        if (!*(void *)&v10) {
          break;
        }
        uint64_t v11 = *((unsigned __int8 *)v4 + 16);
        unint64_t v12 = (v5
             - 0x61C8864680B583EBLL
             + ((v11 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v11 - 0x61C8864680B583EBLL) >> 2)) ^ (v11 - 0x61C8864680B583EBLL);
        std::string::size_type v13 = (uint64_t *)*((void *)v4 + 11);
        unint64_t v14 = ((unint64_t)&v13[8 * v12 - 0xC3910C8D016B07DLL] + (v12 >> 2) - 3) ^ v12;
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(v10);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          uint64_t v16 = ((unint64_t)&v13[8 * v12 - 0xC3910C8D016B07DLL] + (v12 >> 2) - 3) ^ v12;
          if (v14 >= *(void *)&v10) {
            uint64_t v16 = v14 % *(void *)&v10;
          }
        }
        else
        {
          uint64_t v16 = v14 & (*(void *)&v10 - 1);
        }
        unint64_t v17 = *(uint64_t ****)(*((void *)v6 + 1) + 8 * v16);
        if (!v17) {
          break;
        }
        int v18 = *v17;
        if (!*v17) {
          break;
        }
        if (v15.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v10 - 1;
          while (1)
          {
            uint64_t v25 = v18[1];
            if ((uint64_t *)v14 == v25)
            {
              if (*((unsigned __int8 *)v18 + 16) == v11
                && *((unsigned __int16 *)v18 + 9) == v5
                && v18[11] == v13)
              {
                unint64_t v26 = v18[3];
                size_t v27 = (char *)v18[4] - (char *)v26;
                unint64_t v28 = (const void *)*((void *)v4 + 3);
                if (v27 == *((void *)v4 + 4) - (void)v28)
                {
                  int v63 = v13;
                  int v29 = memcmp(v26, v28, v27);
                  std::string::size_type v13 = v63;
                  if (!v29) {
                    goto LABEL_72;
                  }
                }
              }
            }
            else if (((unint64_t)v25 & v19) != v16)
            {
              goto LABEL_43;
            }
            int v18 = (uint64_t **)*v18;
            if (!v18) {
              goto LABEL_43;
            }
          }
        }
        while (1)
        {
          unint64_t v20 = (unint64_t)v18[1];
          if (v14 == v20) {
            break;
          }
          if (v20 >= *(void *)&v10) {
            v20 %= *(void *)&v10;
          }
          if (v20 != v16) {
            goto LABEL_43;
          }
LABEL_24:
          int v18 = (uint64_t **)*v18;
          if (!v18) {
            goto LABEL_43;
          }
        }
        if (*((unsigned __int8 *)v18 + 16) != v11) {
          goto LABEL_24;
        }
        if (*((unsigned __int16 *)v18 + 9) != v5) {
          goto LABEL_24;
        }
        if (v18[11] != v13) {
          goto LABEL_24;
        }
        uint64_t v21 = v18[3];
        size_t v22 = (char *)v18[4] - (char *)v21;
        int v23 = (const void *)*((void *)v4 + 3);
        if (v22 != *((void *)v4 + 4) - (void)v23) {
          goto LABEL_24;
        }
        unint64_t v62 = v13;
        int v24 = memcmp(v21, v23, v22);
        std::string::size_type v13 = v62;
        if (v24) {
          goto LABEL_24;
        }
LABEL_72:
        uint64_t v2 = v64;
        int v4 = *(unsigned __int16 **)v4;
        if (!v4) {
          goto LABEL_3;
        }
      }
LABEL_43:
      if (v8 != v9)
      {
        int8x8_t v30 = *(int8x8_t *)(v8 + 8);
        if (v30)
        {
          uint64_t v31 = *((unsigned __int8 *)v4 + 16);
          unint64_t v32 = (v5
               - 0x61C8864680B583EBLL
               + ((v31 - 0x61C8864680B583EBLL) << 6)
               + ((unint64_t)(v31 - 0x61C8864680B583EBLL) >> 2)) ^ (v31 - 0x61C8864680B583EBLL);
          int v33 = (uint64_t *)*((void *)v4 + 11);
          unint64_t v34 = ((unint64_t)&v33[8 * v32 - 0xC3910C8D016B07DLL] + (v32 >> 2) - 3) ^ v32;
          uint8x8_t v35 = (uint8x8_t)vcnt_s8(v30);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            uint64_t v36 = ((unint64_t)&v33[8 * v32 - 0xC3910C8D016B07DLL] + (v32 >> 2) - 3) ^ v32;
            if (v34 >= *(void *)&v30) {
              uint64_t v36 = v34 % *(void *)&v30;
            }
          }
          else
          {
            uint64_t v36 = v34 & (*(void *)&v30 - 1);
          }
          unint64_t v37 = *(uint64_t ****)(*((void *)v8 + 1) + 8 * v36);
          if (v37)
          {
            long long v38 = *v37;
            if (*v37)
            {
              if (v35.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v43 = v38[1];
                  if ((uint64_t *)v34 == v43)
                  {
                    if (*((unsigned __int8 *)v38 + 16) == v31
                      && *((unsigned __int16 *)v38 + 9) == v5
                      && v38[11] == v33)
                    {
                      char v44 = v38[3];
                      size_t v45 = (char *)v38[4] - (char *)v44;
                      uint64_t v46 = (const void *)*((void *)v4 + 3);
                      if (v45 == *((void *)v4 + 4) - (void)v46 && !memcmp(v44, v46, v45)) {
                        goto LABEL_72;
                      }
                    }
                  }
                  else if (((unint64_t)v43 & (*(void *)&v30 - 1)) != v36)
                  {
                    goto LABEL_74;
                  }
                  long long v38 = (uint64_t **)*v38;
                  if (!v38) {
                    goto LABEL_74;
                  }
                }
              }
              do
              {
                unint64_t v39 = (unint64_t)v38[1];
                if (v34 == v39)
                {
                  if (*((unsigned __int8 *)v38 + 16) == v31
                    && *((unsigned __int16 *)v38 + 9) == v5
                    && v38[11] == v33)
                  {
                    unint64_t v40 = v38[3];
                    size_t v41 = (char *)v38[4] - (char *)v40;
                    uint64_t v42 = (const void *)*((void *)v4 + 3);
                    if (v41 == *((void *)v4 + 4) - (void)v42 && !memcmp(v40, v42, v41)) {
                      goto LABEL_72;
                    }
                  }
                }
                else
                {
                  if (v39 >= *(void *)&v30) {
                    v39 %= *(void *)&v30;
                  }
                  if (v39 != v36) {
                    break;
                  }
                }
                long long v38 = (uint64_t **)*v38;
              }
              while (v38);
            }
          }
        }
      }
LABEL_74:
      int8x8_t v47 = (int8x8_t)v3[2];
      unint64_t v48 = *((void *)v4 + 1);
      uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        if (v48 >= *(void *)&v47) {
          v48 %= *(void *)&v47;
        }
      }
      else
      {
        v48 &= *(void *)&v47 - 1;
      }
      long long v50 = *(unsigned __int16 **)v4;
      uint64_t v51 = v3[1];
      unint64_t v52 = *(unsigned __int16 **)(v51 + 8 * v48);
      do
      {
        unint64_t v53 = v52;
        unint64_t v52 = *(unsigned __int16 **)v52;
      }
      while (v52 != v4);
      uint64_t v2 = v64;
      if (v53 == (unsigned __int16 *)(v3 + 3)) {
        goto LABEL_111;
      }
      unint64_t v54 = *((void *)v53 + 1);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      uint64_t v55 = *(void *)v4;
      if (v54 == v48)
      {
LABEL_93:
        if (v55)
        {
          unint64_t v56 = *(void *)(v55 + 8);
          goto LABEL_95;
        }
      }
      else
      {
LABEL_111:
        if (!v50) {
          goto LABEL_92;
        }
        unint64_t v56 = *((void *)v50 + 1);
        if (v49.u32[0] > 1uLL)
        {
          unint64_t v57 = *((void *)v50 + 1);
          if (v56 >= *(void *)&v47) {
            unint64_t v57 = v56 % *(void *)&v47;
          }
        }
        else
        {
          unint64_t v57 = v56 & (*(void *)&v47 - 1);
        }
        uint64_t v55 = *(void *)v4;
        if (v57 != v48)
        {
LABEL_92:
          *(void *)(v51 + 8 * v48) = 0;
          uint64_t v55 = *(void *)v4;
          goto LABEL_93;
        }
LABEL_95:
        if (v49.u32[0] > 1uLL)
        {
          if (v56 >= *(void *)&v47) {
            v56 %= *(void *)&v47;
          }
        }
        else
        {
          v56 &= *(void *)&v47 - 1;
        }
        if (v56 != v48)
        {
          *(void *)(v3[1] + 8 * v56) = v53;
          uint64_t v55 = *(void *)v4;
        }
      }
      *(void *)unint64_t v53 = v55;
      *(void *)int v4 = 0;
      --v3[4];
      float v58 = (std::__shared_weak_count *)*((void *)v4 + 15);
      if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      float v59 = (void *)*((void *)v4 + 3);
      if (v59 != *((void **)v4 + 5)) {
        free(v59);
      }
      operator delete(v4);
      int v4 = v50;
      if (v50) {
        goto LABEL_5;
      }
LABEL_3:
      v3 += 6;
    }
    while (v3 != v61);
  }
  return v66;
}

void gdc::LayerDataRequest::collectResources(gdc::ResourceManager *)::$_0::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a1;
    uint64_t v4 = *(void *)(a1 + 16);
    uint8x8_t v125 = (char **)(v4 + 168);
    uint64_t v122 = v4;
    while (1)
    {
      size_t v118 = a2;
      uint64_t v5 = (unsigned __int8 *)*((void *)a2 + 3);
      if (v5) {
        break;
      }
LABEL_3:
      a2 = v118 + 24;
      if (v118 + 24 == a3) {
        return;
      }
    }
    int v6 = *a2;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 8);
      unint64_t v8 = *(int8x8_t ***)(v7 + 56);
      uint64_t v9 = *(unsigned __int16 **)(v7 + 64);
      if (v8 != (int8x8_t **)v9)
      {
        while (*((unsigned __int16 *)v5 + 9) != *(unsigned __int16 *)v8)
        {
          v8 += 3;
          if (v8 == (int8x8_t **)v9) {
            goto LABEL_18;
          }
        }
      }
      if (v8 == (int8x8_t **)v9)
      {
LABEL_18:
        uint64_t v126 = 0;
        __int16 v127 = 0;
LABEL_222:
        *(unsigned char *)(v4 + 208) = 0;
        goto LABEL_223;
      }
      gdc::ResourceStore::resource((gdc::ResourceStore *)&v126, v8[1], v5 + 16);
      uint64_t v10 = v126;
      if (!v126) {
        goto LABEL_222;
      }
      uint64_t v11 = *(char **)(v4 + 168);
      unint64_t v12 = *(char **)(v4 + 176);
      std::string::size_type v13 = v11;
      if (v11 != v12)
      {
        std::string::size_type v13 = *(char **)(v4 + 168);
        while (v6 != *(unsigned __int16 *)v13)
        {
          v13 += 48;
          if (v13 == v12) {
            goto LABEL_23;
          }
        }
      }
      if (v13 == v12)
      {
LABEL_23:
        __int16 v128 = v6;
        long long v129 = 0u;
        long long __p = 0u;
        int v131 = 1065353216;
        if (v11 != v12)
        {
          while (v6 != *(unsigned __int16 *)v11)
          {
            v11 += 48;
            if (v11 == v12) {
              goto LABEL_28;
            }
          }
        }
        if (v11 == v12)
        {
LABEL_28:
          if ((unint64_t)v12 >= *(void *)(v4 + 184))
          {
            unint64_t v12 = std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(v125, &v128);
          }
          else
          {
            *(_WORD *)unint64_t v12 = v6;
            *(_OWORD *)(v12 + 8) = 0u;
            *(_OWORD *)(v12 + 24) = 0u;
            *((_DWORD *)v12 + 10) = 1065353216;
            v12 += 48;
          }
          *(void *)(v4 + 176) = v12;
          uint64_t v11 = v12 - 48;
        }
        std::string::size_type v13 = v11;
        int8x8_t v14 = *(int8x8_t *)(v11 + 16);
        if (!*(void *)&v14)
        {
LABEL_61:
          int v23 = 0;
          goto LABEL_62;
        }
      }
      else
      {
        int8x8_t v14 = *(int8x8_t *)(v13 + 16);
        if (!*(void *)&v14) {
          goto LABEL_61;
        }
      }
      uint64_t v15 = v5[16];
      uint64_t v16 = *((unsigned __int16 *)v5 + 9);
      unint64_t v17 = (v16
           - 0x61C8864680B583EBLL
           + ((v15 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)) ^ (v15 - 0x61C8864680B583EBLL);
      int v18 = (uint64_t *)*((void *)v5 + 11);
      unint64_t v19 = ((unint64_t)&v18[8 * v17 - 0xC3910C8D016B07DLL] + (v17 >> 2) - 3) ^ v17;
      uint8x8_t v20 = (uint8x8_t)vcnt_s8(v14);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        uint64_t v21 = ((unint64_t)&v18[8 * v17 - 0xC3910C8D016B07DLL] + (v17 >> 2) - 3) ^ v17;
        if (v19 >= *(void *)&v14) {
          uint64_t v21 = v19 % *(void *)&v14;
        }
      }
      else
      {
        uint64_t v21 = v19 & (*(void *)&v14 - 1);
      }
      size_t v22 = *(uint64_t ****)(*((void *)v13 + 1) + 8 * v21);
      if (v22)
      {
        int v23 = *v22;
        if (*v22)
        {
          if (v20.u32[0] < 2uLL)
          {
            uint64_t v24 = *(void *)&v14 - 1;
            while (1)
            {
              int8x8_t v30 = v23[1];
              if (v30 == (uint64_t *)v19)
              {
                if (*((unsigned __int8 *)v23 + 16) == v15
                  && *((unsigned __int16 *)v23 + 9) == v16
                  && v23[11] == v18)
                {
                  uint64_t v31 = v23[3];
                  size_t v32 = (char *)v23[4] - (char *)v31;
                  int v33 = (const void *)*((void *)v5 + 3);
                  if (v32 == *((void *)v5 + 4) - (void)v33)
                  {
                    uint64_t v124 = v18;
                    int v34 = memcmp(v31, v33, v32);
                    int v18 = v124;
                    if (!v34) {
                      goto LABEL_57;
                    }
                  }
                }
              }
              else if (((unint64_t)v30 & v24) != v21)
              {
                goto LABEL_56;
              }
              int v23 = (uint64_t **)*v23;
              if (!v23) {
                goto LABEL_57;
              }
            }
          }
          do
          {
            unint64_t v25 = (unint64_t)v23[1];
            if (v25 == v19)
            {
              if (*((unsigned __int8 *)v23 + 16) == v15
                && *((unsigned __int16 *)v23 + 9) == v16
                && v23[11] == v18)
              {
                unint64_t v26 = v23[3];
                size_t v27 = (char *)v23[4] - (char *)v26;
                unint64_t v28 = (const void *)*((void *)v5 + 3);
                if (v27 == *((void *)v5 + 4) - (void)v28)
                {
                  uint64_t v123 = v18;
                  int v29 = memcmp(v26, v28, v27);
                  int v18 = v123;
                  if (!v29) {
                    break;
                  }
                }
              }
            }
            else
            {
              if (v25 >= *(void *)&v14) {
                v25 %= *(void *)&v14;
              }
              if (v25 != v21) {
                goto LABEL_56;
              }
            }
            int v23 = (uint64_t **)*v23;
          }
          while (v23);
        }
      }
      else
      {
LABEL_56:
        int v23 = 0;
      }
LABEL_57:
      uint64_t v3 = a1;
      uint64_t v4 = v122;
LABEL_62:
      uint8x8_t v35 = *v125;
      uint64_t v36 = *v125;
      if (*v125 == v12)
      {
        __int16 v128 = v6;
        long long v129 = 0u;
        long long __p = 0u;
        int v131 = 1065353216;
LABEL_67:
        if ((unint64_t)v12 >= *(void *)(v4 + 184))
        {
          unint64_t v12 = std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(v125, &v128);
        }
        else
        {
          *(_WORD *)unint64_t v12 = v6;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *((_DWORD *)v12 + 10) = v131;
          v12 += 48;
        }
        *(void *)(v4 + 176) = v12;
        goto LABEL_77;
      }
      while (v6 != *(unsigned __int16 *)v36)
      {
        v36 += 48;
        if (v36 == v12) {
          goto LABEL_72;
        }
      }
      if (v36 != v12) {
        goto LABEL_77;
      }
LABEL_72:
      __int16 v128 = v6;
      long long v129 = 0u;
      long long __p = 0u;
      int v131 = 1065353216;
      if (v35 == v12) {
        goto LABEL_67;
      }
      while (v6 != *(unsigned __int16 *)v35)
      {
        v35 += 48;
        if (v35 == v12) {
          goto LABEL_67;
        }
      }
      if (v35 == v12) {
        goto LABEL_67;
      }
LABEL_77:
      if (v23 && (v23[14] == (uint64_t *)v10 || *(unsigned char *)(v10 + 136))) {
        goto LABEL_221;
      }
      unint64_t v37 = *v125;
      long long v38 = *v125;
      if (*v125 == v12)
      {
        __int16 v128 = v6;
        long long v129 = 0u;
        long long __p = 0u;
        int v131 = 1065353216;
      }
      else
      {
        while (v6 != *(unsigned __int16 *)v38)
        {
          v38 += 48;
          if (v38 == v12) {
            goto LABEL_86;
          }
        }
        if (v38 != v12) {
          goto LABEL_104;
        }
LABEL_86:
        __int16 v128 = v6;
        long long v129 = 0u;
        long long __p = 0u;
        int v131 = 1065353216;
        if (v37 != v12)
        {
          long long v38 = v37;
          while (v6 != *(unsigned __int16 *)v38)
          {
            v38 += 48;
            if (v38 == v12) {
              goto LABEL_92;
            }
          }
          if (v38 != v12) {
            goto LABEL_102;
          }
        }
      }
LABEL_92:
      if ((unint64_t)v12 >= *(void *)(v4 + 184))
      {
        uint64_t v43 = std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(v125, &v128);
        *(void *)(v4 + 176) = v43;
        long long v38 = v43 - 48;
LABEL_102:
        char v44 = (void *)v129;
        if ((void)v129) {
          goto LABEL_103;
        }
        goto LABEL_104;
      }
      *(_WORD *)unint64_t v12 = v6;
      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map((uint64_t)(v12 + 8), (uint64_t)&v129);
      unint64_t v39 = (void *)__p;
      *(void *)(v4 + 176) = v12 + 48;
      if (v39)
      {
        do
        {
          unint64_t v40 = (void *)*v39;
          size_t v41 = (std::__shared_weak_count *)v39[15];
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          uint64_t v42 = (void *)v39[3];
          if (v42 != (void *)v39[5]) {
            free(v42);
          }
          operator delete(v39);
          unint64_t v39 = v40;
        }
        while (v40);
      }
      long long v38 = v12;
      char v44 = (void *)v129;
      if ((void)v129) {
LABEL_103:
      }
        operator delete(v44);
LABEL_104:
      uint64_t v45 = v5[16];
      uint64_t v46 = *((unsigned __int16 *)v5 + 9);
      unint64_t v47 = (v46
           - 0x61C8864680B583EBLL
           + ((v45 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v45 - 0x61C8864680B583EBLL) >> 2)) ^ (v45 - 0x61C8864680B583EBLL);
      uint64_t v48 = *((void *)v5 + 11);
      unint64_t v49 = (v48 - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
      unint64_t v50 = *((void *)v38 + 2);
      if (v50)
      {
        uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
        v51.i16[0] = vaddlv_u8(v51);
        if (v51.u32[0] > 1uLL)
        {
          uint64_t v52 = (v48 - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
          if (v49 >= v50) {
            uint64_t v52 = v49 % v50;
          }
        }
        else
        {
          uint64_t v52 = v49 & (v50 - 1);
        }
        unint64_t v53 = *(void ***)(*((void *)v38 + 1) + 8 * v52);
        uint64_t v121 = v52;
        if (v53)
        {
          unint64_t v54 = (unsigned __int8 *)*v53;
          if (*v53)
          {
            if (v51.u32[0] >= 2uLL)
            {
              while (1)
              {
                unint64_t v55 = *((void *)v54 + 1);
                if (v55 == v49)
                {
                  if (v54[16] == v45
                    && *((unsigned __int16 *)v54 + 9) == v46
                    && *((void *)v54 + 11) == v48)
                  {
                    unint64_t v56 = (const void *)*((void *)v54 + 3);
                    size_t v57 = *((void *)v54 + 4) - (void)v56;
                    float v58 = (const void *)*((void *)v5 + 3);
                    if (v57 == *((void *)v5 + 4) - (void)v58)
                    {
                      int v59 = memcmp(v56, v58, v57);
                      uint64_t v52 = v121;
                      if (!v59)
                      {
                        uint64_t v4 = v122;
                        goto LABEL_215;
                      }
                    }
                  }
                }
                else
                {
                  if (v55 >= v50) {
                    v55 %= v50;
                  }
                  if (v55 != v52) {
                    goto LABEL_136;
                  }
                }
                unint64_t v54 = *(unsigned __int8 **)v54;
                if (!v54) {
                  goto LABEL_136;
                }
              }
            }
            do
            {
              uint64_t v60 = *((void *)v54 + 1);
              if (v60 == v49)
              {
                if (v54[16] == v45
                  && *((unsigned __int16 *)v54 + 9) == v46
                  && *((void *)v54 + 11) == v48)
                {
                  unint64_t v61 = (const void *)*((void *)v54 + 3);
                  size_t v62 = *((void *)v54 + 4) - (void)v61;
                  int v63 = (const void *)*((void *)v5 + 3);
                  if (v62 == *((void *)v5 + 4) - (void)v63)
                  {
                    int v64 = memcmp(v61, v63, v62);
                    uint64_t v52 = v121;
                    if (!v64)
                    {
                      uint64_t v3 = a1;
                      uint64_t v4 = v122;
                      goto LABEL_215;
                    }
                  }
                }
              }
              else if ((v60 & (v50 - 1)) != v52)
              {
                break;
              }
              unint64_t v54 = *(unsigned __int8 **)v54;
            }
            while (v54);
            uint64_t v3 = a1;
          }
        }
      }
LABEL_136:
      unint64_t v54 = (unsigned __int8 *)operator new(0x80uLL);
      *(void *)unint64_t v54 = 0;
      *((void *)v54 + 1) = v49;
      unint64_t v65 = (char *)(v54 + 56);
      *((void *)v54 + 2) = *((void *)v5 + 2);
      *((void *)v54 + 3) = v54 + 56;
      *((void *)v54 + 4) = v54 + 56;
      *((void *)v54 + 5) = v54 + 56;
      *((void *)v54 + 6) = 32;
      unsigned __int8 v66 = (char *)*((void *)v5 + 3);
      uint64_t v67 = (char *)*((void *)v5 + 4);
      unint64_t v68 = v67 - v66;
      if ((unint64_t)(v67 - v66) >= 0x21)
      {
        if (v68 <= 0x40) {
          size_t v69 = 64;
        }
        else {
          size_t v69 = v67 - v66;
        }
        size_t v119 = v69;
        unint64_t v65 = (char *)malloc_type_malloc(v69, 0x100004077774924uLL);
        unint64_t v70 = (char *)*((void *)v54 + 3);
        size_t v71 = (char *)*((void *)v54 + 4);
        if (v70 == v71) {
          goto LABEL_156;
        }
        unint64_t v72 = v71 - v70;
        if ((unint64_t)(v71 - v70) < 8)
        {
          uint64_t v73 = v65;
        }
        else
        {
          uint64_t v73 = v65;
          if ((unint64_t)(v65 - v70) >= 0x20)
          {
            if (v72 < 0x20)
            {
              uint64_t v74 = 0;
LABEL_150:
              unint64_t v79 = v72 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v73 = &v65[v72 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v80 = v74 - (v72 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v81 = (uint64_t *)&v70[v74];
              int64x2_t v82 = &v65[v74];
              do
              {
                uint64_t v83 = *v81++;
                *(void *)int64x2_t v82 = v83;
                v82 += 8;
                v80 += 8;
              }
              while (v80);
              if (v72 != v79)
              {
                v70 += v79;
                goto LABEL_155;
              }
LABEL_156:
              *((void *)v54 + 3) = v65;
              *((void *)v54 + 4) = v65;
              *((void *)v54 + 6) = v119;
              goto LABEL_157;
            }
            uint64_t v74 = v72 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v75 = (long long *)(v70 + 16);
            uint64_t v76 = v65 + 16;
            unint64_t v77 = v72 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v78 = *v75;
              *(v76 - 1) = *(v75 - 1);
              *uint64_t v76 = v78;
              v75 += 2;
              v76 += 2;
              v77 -= 32;
            }
            while (v77);
            if (v72 == v74) {
              goto LABEL_156;
            }
            if ((v72 & 0x18) != 0) {
              goto LABEL_150;
            }
            v70 += v74;
            uint64_t v73 = &v65[v74];
          }
        }
        do
        {
LABEL_155:
          char v84 = *v70++;
          *v73++ = v84;
        }
        while (v70 != v71);
        goto LABEL_156;
      }
LABEL_157:
      if (v66 != v67)
      {
        std::string::size_type v85 = (uint64_t *)(v38 + 8);
        unint64_t v86 = v121;
        if (v68 < 8)
        {
          unint64_t v88 = v65;
        }
        else if ((unint64_t)(v65 - v66) < 0x20)
        {
          unint64_t v88 = v65;
        }
        else
        {
          if (v68 < 0x20)
          {
            uint64_t v87 = 0;
LABEL_169:
            unint64_t v93 = v68 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v88 = &v65[v68 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v94 = v87 - (v68 & 0xFFFFFFFFFFFFFFF8);
            int64_t v95 = (uint64_t *)&v66[v87];
            unint64_t v96 = &v65[v87];
            do
            {
              uint64_t v97 = *v95++;
              *(void *)unint64_t v96 = v97;
              v96 += 8;
              v94 += 8;
            }
            while (v94);
            if (v68 != v93)
            {
              v66 += v93;
              goto LABEL_174;
            }
LABEL_175:
            unint64_t v65 = (char *)*((void *)v54 + 4);
            goto LABEL_176;
          }
          uint64_t v87 = v68 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v89 = (long long *)(v66 + 16);
          uint64_t v90 = v65 + 16;
          unint64_t v91 = v68 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v92 = *v89;
            *(v90 - 1) = *(v89 - 1);
            *uint64_t v90 = v92;
            v89 += 2;
            v90 += 2;
            v91 -= 32;
          }
          while (v91);
          if (v68 == v87) {
            goto LABEL_175;
          }
          if ((v68 & 0x18) != 0) {
            goto LABEL_169;
          }
          v66 += v87;
          unint64_t v88 = &v65[v87];
        }
        do
        {
LABEL_174:
          char v98 = *v66++;
          *v88++ = v98;
        }
        while (v66 != v67);
        goto LABEL_175;
      }
      std::string::size_type v85 = (uint64_t *)(v38 + 8);
      unint64_t v86 = v121;
LABEL_176:
      *((void *)v54 + 4) = &v65[v68];
      *((void *)v54 + 11) = *((void *)v5 + 11);
      *((_OWORD *)v54 + 6) = *((_OWORD *)v5 + 6);
      *((void *)v54 + 14) = 0;
      *((void *)v54 + 15) = 0;
      float v99 = (float)(unint64_t)(*((void *)v38 + 4) + 1);
      float v100 = *((float *)v38 + 10);
      uint64_t v4 = v122;
      if (!v50 || (float)(v100 * (float)v50) < v99)
      {
        BOOL v101 = v50 < 3 || (v50 & (v50 - 1)) != 0;
        unint64_t v102 = v101 | (2 * v50);
        unint64_t v103 = vcvtps_u32_f32(v99 / v100);
        if (v102 <= v103) {
          size_t v104 = v103;
        }
        else {
          size_t v104 = v102;
        }
        if (v104 == 1)
        {
          size_t v104 = 2;
        }
        else if ((v104 & (v104 - 1)) != 0)
        {
          size_t prime = std::__next_prime(v104);
          std::string::size_type v85 = (uint64_t *)(v38 + 8);
          size_t v104 = prime;
        }
        int8x8_t v106 = *(int8x8_t *)(v38 + 16);
        if (v104 > *(void *)&v106) {
          goto LABEL_189;
        }
        if (v104 < *(void *)&v106)
        {
          unint64_t v107 = vcvtps_u32_f32((float)*((unint64_t *)v38 + 4) / *((float *)v38 + 10));
          if (*(void *)&v106 < 3uLL
            || (uint8x8_t v108 = (uint8x8_t)vcnt_s8(v106), v108.i16[0] = vaddlv_u8(v108), v108.u32[0] > 1uLL))
          {
            unint64_t v107 = std::__next_prime(v107);
            std::string::size_type v85 = (uint64_t *)(v38 + 8);
          }
          else
          {
            uint64_t v109 = 1 << -(char)__clz(v107 - 1);
            if (v107 >= 2) {
              unint64_t v107 = v109;
            }
          }
          if (v104 <= v107) {
            size_t v104 = v107;
          }
          if (v104 < *(void *)&v106)
          {
LABEL_189:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v85, v104);
            std::string::size_type v85 = (uint64_t *)(v38 + 8);
          }
        }
        unint64_t v50 = *((void *)v38 + 2);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v49 >= v50) {
            unint64_t v86 = v49 % v50;
          }
          else {
            unint64_t v86 = v49;
          }
        }
        else
        {
          unint64_t v86 = (v50 - 1) & v49;
        }
      }
      uint64_t v110 = *v85;
      BOOL v111 = *(void **)(*v85 + 8 * v86);
      if (v111)
      {
        *(void *)unint64_t v54 = *v111;
      }
      else
      {
        *(void *)unint64_t v54 = *((void *)v38 + 3);
        *((void *)v38 + 3) = v54;
        *(void *)(v110 + 8 * v86) = v38 + 24;
        if (!*(void *)v54) {
          goto LABEL_214;
        }
        unint64_t v112 = *(void *)(*(void *)v54 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v112 >= v50) {
            v112 %= v50;
          }
        }
        else
        {
          v112 &= v50 - 1;
        }
        BOOL v111 = (void *)(*v85 + 8 * v112);
      }
      *BOOL v111 = v54;
LABEL_214:
      ++*((void *)v38 + 4);
LABEL_215:
      uint64_t v114 = v126;
      uint64_t v113 = v127;
      if (v127) {
        atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v115 = (std::__shared_weak_count *)*((void *)v54 + 15);
      *((void *)v54 + 14) = v114;
      *((void *)v54 + 15) = v113;
      if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
      **(unsigned char **)uint64_t v3 = 1;
      uint64_t v10 = v126;
LABEL_221:
      if (*(unsigned char *)(v10 + 136)) {
        goto LABEL_222;
      }
LABEL_223:
      int v116 = v127;
      if (v127)
      {
        if (!atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      uint64_t v5 = *(unsigned __int8 **)v5;
      if (!v5) {
        goto LABEL_3;
      }
    }
  }
}

void gdc::ResourceStore::resource(gdc::ResourceStore *this, int8x8_t *a2, unsigned __int8 *a3)
{
  int8x8_t v4 = a2[34];
  if (!*(void *)&v4) {
    goto LABEL_43;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = *((unsigned __int16 *)a3 + 1);
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = (uint64_t *)*((void *)a3 + 9);
  unint64_t v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v4);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    uint64_t v12 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
    if (v10 >= *(void *)&v4) {
      uint64_t v12 = v10 % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v12 = v10 & (*(void *)&v4 - 1);
  }
  std::string::size_type v13 = *(uint64_t ****)(*(void *)&a2[33] + 8 * v12);
  if (!v13 || (int8x8_t v14 = *v13) == 0)
  {
LABEL_43:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return;
  }
  uint64_t v15 = (const void *)*((void *)a3 + 1);
  size_t v16 = *((void *)a3 + 2) - (void)v15;
  if (v11.u32[0] < 2uLL)
  {
    uint64_t v17 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v21 = v14[1];
      if ((uint64_t *)v10 == v21)
      {
        if (*((unsigned __int8 *)v14 + 16) == v6
          && *((unsigned __int16 *)v14 + 9) == v7
          && v14[11] == v9)
        {
          size_t v22 = v14[3];
          if ((char *)v14[4] - (char *)v22 == v16)
          {
            size_t v68 = v16;
            size_t v69 = a3;
            int v23 = memcmp(v22, v15, v16);
            size_t v16 = v68;
            a3 = v69;
            if (!v23) {
              goto LABEL_29;
            }
          }
        }
      }
      else if (((unint64_t)v21 & v17) != v12)
      {
        goto LABEL_43;
      }
      int8x8_t v14 = (uint64_t **)*v14;
      if (!v14) {
        goto LABEL_43;
      }
    }
  }
  while (1)
  {
    unint64_t v18 = (unint64_t)v14[1];
    if (v10 == v18) {
      break;
    }
    if (v18 >= *(void *)&v4) {
      v18 %= *(void *)&v4;
    }
    if (v18 != v12) {
      goto LABEL_43;
    }
LABEL_11:
    int8x8_t v14 = (uint64_t **)*v14;
    if (!v14) {
      goto LABEL_43;
    }
  }
  if (*((unsigned __int8 *)v14 + 16) != v6) {
    goto LABEL_11;
  }
  if (*((unsigned __int16 *)v14 + 9) != v7) {
    goto LABEL_11;
  }
  if (v14[11] != v9) {
    goto LABEL_11;
  }
  unint64_t v19 = v14[3];
  if ((char *)v14[4] - (char *)v19 != v16) {
    goto LABEL_11;
  }
  size_t v67 = v16;
  size_t v69 = a3;
  int v20 = memcmp(v19, v15, v16);
  size_t v16 = v67;
  a3 = v69;
  if (v20) {
    goto LABEL_11;
  }
LABEL_29:
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v24 = (std::__shared_weak_count *)v14[15];
  if (!v24) {
    return;
  }
  unint64_t v25 = std::__shared_weak_count::lock(v24);
  *((void *)this + 1) = v25;
  if (!v25) {
    return;
  }
  unint64_t v26 = v14[14];
  *(void *)this = v26;
  if (!v26) {
    return;
  }
  size_t v27 = v25;
  unint64_t v28 = (uint64_t *)&a2[43];
  int v29 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(&a2[46], v69);
  if (v29)
  {
    int8x8_t v30 = v29;
    uint64_t v31 = geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::_elementAccessed(v28, v29[14]);
    v30[14] = v31;
    if (v28 != v31) {
      return;
    }
  }
  size_t v32 = v75;
  int v33 = v69;
  int v34 = (char *)*((void *)v69 + 1);
  uint64_t v70 = *(void *)v69;
  size_t v71 = v75;
  unint64_t v72 = (char *)v75;
  uint64_t v73 = v75;
  uint64_t v74 = 32;
  uint8x8_t v35 = (char *)*((void *)v69 + 2);
  unint64_t v36 = v35 - v34;
  if ((unint64_t)(v35 - v34) < 0x21) {
    goto LABEL_57;
  }
  if (v36 <= 0x40) {
    size_t v37 = 64;
  }
  else {
    size_t v37 = v35 - v34;
  }
  size_t v32 = malloc_type_malloc(v37, 0x100004077774924uLL);
  long long v38 = (char *)v71;
  unint64_t v39 = v72;
  if (v71 == v72) {
    goto LABEL_56;
  }
  unint64_t v40 = v72 - (unsigned char *)v71;
  if ((unint64_t)(v72 - (unsigned char *)v71) < 8)
  {
    size_t v41 = v32;
    goto LABEL_55;
  }
  size_t v41 = v32;
  if ((unint64_t)((char *)v32 - (unsigned char *)v71) < 0x20) {
    goto LABEL_55;
  }
  if (v40 >= 0x20)
  {
    unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v43 = (long long *)((char *)v71 + 16);
    char v44 = v32 + 2;
    unint64_t v45 = v40 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v46 = *v43;
      *(v44 - 1) = *(v43 - 1);
      *char v44 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 32;
    }
    while (v45);
    if (v40 == v42) {
      goto LABEL_56;
    }
    if ((v40 & 0x18) != 0) {
      goto LABEL_50;
    }
    v38 += v42;
    size_t v41 = (char *)v32 + v42;
    do
    {
LABEL_55:
      char v52 = *v38++;
      *v41++ = v52;
    }
    while (v38 != v39);
    goto LABEL_56;
  }
  unint64_t v42 = 0;
LABEL_50:
  unint64_t v47 = v40 & 0xFFFFFFFFFFFFFFF8;
  size_t v41 = (char *)v32 + (v40 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v48 = v42 - (v40 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v49 = &v38[v42];
  unint64_t v50 = (void *)((char *)v32 + v42);
  do
  {
    uint64_t v51 = *(void *)v49;
    v49 += 8;
    *v50++ = v51;
    v48 += 8;
  }
  while (v48);
  if (v40 != v47)
  {
    v38 += v47;
    goto LABEL_55;
  }
LABEL_56:
  size_t v71 = v32;
  unint64_t v72 = (char *)v32;
  uint64_t v74 = v37;
  int v33 = v69;
LABEL_57:
  if (v34 == v35) {
    goto LABEL_75;
  }
  if (v36 < 8)
  {
    unint64_t v54 = v32;
    goto LABEL_73;
  }
  if ((unint64_t)((char *)v32 - v34) < 0x20)
  {
    unint64_t v54 = v32;
    goto LABEL_73;
  }
  if (v36 >= 0x20)
  {
    unint64_t v53 = v36 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v55 = (long long *)(v34 + 16);
    unint64_t v56 = v32 + 2;
    unint64_t v57 = v36 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v58 = *v55;
      *(v56 - 1) = *(v55 - 1);
      _OWORD *v56 = v58;
      v55 += 2;
      v56 += 2;
      v57 -= 32;
    }
    while (v57);
    if (v36 == v53) {
      goto LABEL_74;
    }
    if ((v36 & 0x18) != 0) {
      goto LABEL_68;
    }
    v34 += v53;
    unint64_t v54 = (char *)v32 + v53;
    do
    {
LABEL_73:
      char v64 = *v34++;
      *v54++ = v64;
    }
    while (v34 != v35);
    goto LABEL_74;
  }
  unint64_t v53 = 0;
LABEL_68:
  unint64_t v59 = v36 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (char *)v32 + (v36 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v60 = v53 - (v36 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v61 = (uint64_t *)&v34[v53];
  size_t v62 = (void *)((char *)v32 + v53);
  do
  {
    uint64_t v63 = *v61++;
    *v62++ = v63;
    v60 += 8;
  }
  while (v60);
  if (v36 != v59)
  {
    v34 += v59;
    goto LABEL_73;
  }
LABEL_74:
  size_t v32 = v72;
LABEL_75:
  uint64_t v65 = *((void *)v33 + 9);
  unint64_t v72 = (char *)v32 + v36;
  v75[4] = v65;
  long long v76 = *((_OWORD *)v33 + 5);
  unint64_t v77 = v26;
  long long v78 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::insert(v28, &v70);
  unsigned __int8 v66 = v78;
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
  if (v71 != v73) {
    free(v71);
  }
}

void *geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::_elementAccessed(uint64_t *a1, uint64_t *a2)
{
  int8x8_t v4 = std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>((uint64_t)(a2 + 2));
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  *(void *)(v6 + 8) = v4;
  *int8x8_t v4 = v6;
  *a1 = (uint64_t)v4;
  v4[1] = a1;
  uint64_t v7 = a1[2];
  unint64_t v8 = (uint64_t *)a1[8];
  if (v8 == a2)
  {
    uint64_t v9 = (void *)a2[1];
LABEL_5:
    a1[8] = (uint64_t)v9;
    goto LABEL_6;
  }
  uint64_t v9 = v4;
  if (v8 == a1) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v10 = *a2;
  *(void *)(v10 + 8) = a2[1];
  *(void *)a2[1] = v10;
  a1[2] = v7;
  uint8x8_t v11 = (std::__shared_weak_count *)a2[15];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (void *)a2[3];
  if (v12 != (void *)a2[5]) {
    free(v12);
  }
  operator delete(a2);
  return v5;
}

void *std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>(uint64_t a1)
{
  uint64_t v2 = operator new(0x88uLL);
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v3 = (char *)(v2 + 7);
  int8x8_t v4 = *(char **)(a1 + 8);
  v2[2] = *(void *)a1;
  v2[3] = v2 + 7;
  v2[4] = v2 + 7;
  v2[5] = v2 + 7;
  v2[6] = 32;
  uint64_t v5 = *(char **)(a1 + 16);
  unint64_t v6 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x21)
  {
    if (v6 <= 0x40) {
      size_t v7 = 64;
    }
    else {
      size_t v7 = v5 - v4;
    }
    uint64_t v3 = (char *)malloc_type_malloc(v7, 0x100004077774924uLL);
    unint64_t v8 = (char *)v2[3];
    uint64_t v9 = (char *)v2[4];
    if (v8 == v9) {
      goto LABEL_21;
    }
    unint64_t v10 = v9 - v8;
    if ((unint64_t)(v9 - v8) < 8)
    {
      uint8x8_t v11 = v3;
      goto LABEL_20;
    }
    uint8x8_t v11 = v3;
    if ((unint64_t)(v3 - v8) < 0x20) {
      goto LABEL_20;
    }
    if (v10 >= 0x20)
    {
      unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFE0;
      std::string::size_type v13 = (long long *)(v8 + 16);
      int8x8_t v14 = v3 + 16;
      unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *int8x8_t v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v10 == v12) {
        goto LABEL_21;
      }
      if ((v10 & 0x18) == 0)
      {
        v8 += v12;
        uint8x8_t v11 = &v3[v12];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v11 = &v3[v10 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v18 = v12 - (v10 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (uint64_t *)&v8[v12];
    int v20 = &v3[v12];
    do
    {
      uint64_t v21 = *v19++;
      *(void *)int v20 = v21;
      v20 += 8;
      v18 += 8;
    }
    while (v18);
    if (v10 == v17) {
      goto LABEL_21;
    }
    v8 += v17;
    do
    {
LABEL_20:
      char v22 = *v8++;
      *v11++ = v22;
    }
    while (v8 != v9);
LABEL_21:
    v2[3] = v3;
    v2[4] = v3;
    v2[6] = v7;
  }
  if (v4 == v5) {
    goto LABEL_40;
  }
  if (v6 < 8)
  {
    uint64_t v24 = v3;
    goto LABEL_38;
  }
  if ((unint64_t)(v3 - v4) < 0x20)
  {
    uint64_t v24 = v3;
    goto LABEL_38;
  }
  if (v6 >= 0x20)
  {
    unint64_t v23 = v6 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v25 = (long long *)(v4 + 16);
    unint64_t v26 = v3 + 16;
    unint64_t v27 = v6 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      _OWORD *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 32;
    }
    while (v27);
    if (v6 == v23) {
      goto LABEL_39;
    }
    if ((v6 & 0x18) == 0)
    {
      v4 += v23;
      uint64_t v24 = &v3[v23];
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v23 = 0;
  }
  unint64_t v29 = v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = &v3[v6 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v30 = v23 - (v6 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (uint64_t *)&v4[v23];
  size_t v32 = &v3[v23];
  do
  {
    uint64_t v33 = *v31++;
    *(void *)size_t v32 = v33;
    v32 += 8;
    v30 += 8;
  }
  while (v30);
  if (v6 == v29) {
    goto LABEL_39;
  }
  v4 += v29;
  do
  {
LABEL_38:
    char v34 = *v4++;
    *v24++ = v34;
  }
  while (v4 != v5);
LABEL_39:
  uint64_t v3 = (char *)v2[4];
LABEL_40:
  v2[4] = &v3[v6];
  v2[11] = *(void *)(a1 + 72);
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 80);
  uint64_t v35 = *(void *)(a1 + 104);
  v2[14] = *(void *)(a1 + 96);
  v2[15] = v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  v2[16] = *(void *)(a1 + 112);
  return v2;
}

uint64_t gdc::LayerDataSource::isReadyToDecode(gdc::LayerDataSource *this)
{
  return 1;
}

uint64_t std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase(void *a1, void *__p)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v5 = *__p;
  unint64_t v4 = __p[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  size_t v7 = *(void **)(*a1 + 8 * v4);
  do
  {
    unint64_t v8 = v7;
    size_t v7 = (void *)*v7;
  }
  while (v7 != __p);
  if (v8 != a1 + 2)
  {
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    uint64_t v10 = *__p;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v5) {
    goto LABEL_19;
  }
  unint64_t v11 = *(void *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  uint64_t v10 = *__p;
  if (v11 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v10 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v12 = *(void *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v3) {
      v12 %= *(void *)&v3;
    }
  }
  else
  {
    v12 &= *(void *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(void *)(*a1 + 8 * v12) = v8;
    uint64_t v10 = *__p;
  }
LABEL_27:
  *unint64_t v8 = v10;
  *long long __p = 0;
  --a1[3];
  std::string::size_type v13 = (std::__shared_weak_count *)__p[17];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (*((unsigned char *)__p + 112)) {
    *((unsigned char *)__p + 112) = 0;
  }
  int8x8_t v14 = (void *)__p[4];
  if (v14 != (void *)__p[6]) {
    free(v14);
  }
  operator delete(__p);
  return v5;
}

char *std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0xB8uLL);
  *(void *)uint64_t v2 = &unk_1EF57A340;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v2[24] = *(unsigned char *)(a1 + 24);
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v2 + 32), a1 + 32);
  v2[120] = 0;
  if (*(unsigned char *)(a1 + 120))
  {
    *((_DWORD *)v2 + 31) = *(_DWORD *)(a1 + 124);
    v2[120] = 1;
  }
  int8x8_t v3 = *(char **)(a1 + 136);
  *((void *)v2 + 16) = *(void *)(a1 + 128);
  *((void *)v2 + 17) = 0;
  *((void *)v2 + 18) = 0;
  *((void *)v2 + 19) = 0;
  unint64_t v4 = *(char **)(a1 + 144);
  int64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    if (v6 >= 0x555555555555556) {
      abort();
    }
    size_t v7 = operator new(v5);
    *((void *)v2 + 17) = v7;
    *((void *)v2 + 18) = v7;
    *((void *)v2 + 19) = &v7[24 * v6];
    do
    {
      uint64_t v8 = (uint64_t)(v3 + 8);
      __int16 v9 = *(_WORD *)v3;
      v3 += 48;
      uint64_t v10 = (uint64_t)(v7 + 4);
      *size_t v7 = v9;
      v7 += 24;
      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v10, v8);
    }
    while (v3 != v4);
    *((void *)v2 + 18) = v7;
  }
  *((_OWORD *)v2 + 10) = *(_OWORD *)(a1 + 160);
  v2[176] = *(unsigned char *)(a1 + 176);
  return v2;
}

uint64_t gdc::LayerDataSource::taskGroup(gdc::LayerDataSource *this)
{
  return 0;
}

uint64_t gdc::LayerDataSource::updateRequest()
{
  return 0;
}

char *std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(char **a1, _WORD *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  __int16 v9 = &v7[48 * v6];
  uint64_t v8 = &v7[48 * v2];
  *(_WORD *)uint64_t v8 = *a2;
  uint64_t v10 = v8 + 48;
  std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map((uint64_t)(v8 + 8), (uint64_t)(a2 + 4));
  unint64_t v12 = *a1;
  unint64_t v11 = (unint64_t)a1[1];
  if ((char *)v11 == *a1)
  {
    int64x2_t v21 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      unint64_t v15 = &v8[v13];
      uint64_t v16 = v11 + v13;
      *((_WORD *)v15 - 24) = *(_WORD *)(v11 + v13 - 48);
      uint64_t v17 = *(void *)(v11 + v13 - 40);
      *(void *)(v16 - 40) = 0;
      *((void *)v15 - 5) = v17;
      *((void *)v15 - 4) = *(void *)(v11 + v13 - 32);
      *(void *)(v16 - 32) = 0;
      uint64_t v18 = *(void *)(v11 + v13 - 24);
      *(void *)&v8[v13 - 24] = v18;
      uint64_t v19 = *(void *)(v11 + v13 - 16);
      *((void *)v15 - 2) = v19;
      *((_DWORD *)v15 - 2) = *(_DWORD *)(v11 + v13 - 8);
      if (v19)
      {
        unint64_t v14 = *(void *)(v18 + 8);
        unint64_t v20 = *((void *)v15 - 4);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v14 >= v20) {
            v14 %= v20;
          }
        }
        else
        {
          v14 &= v20 - 1;
        }
        *(void *)(v17 + 8 * v14) = &v8[v13 - 24];
        *(void *)(v11 + v13 - 24) = 0;
        *(void *)(v11 + v13 - 16) = 0;
      }
      v13 -= 48;
    }
    while ((char *)(v11 + v13) != v12);
    v8 += v13;
    int64x2_t v21 = *(int64x2_t *)a1;
  }
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  unint64_t v23 = (char *)v21.i64[1];
  for (uint64_t i = (char *)v21.i64[0]; v23 != i; v23 -= 48)
  {
    uint64_t v24 = (void *)*((void *)v23 - 3);
    if (v24)
    {
      do
      {
        unint64_t v26 = (void *)*v24;
        unint64_t v27 = (std::__shared_weak_count *)v24[15];
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        long long v28 = (void *)v24[3];
        if (v28 != (void *)v24[5]) {
          free(v28);
        }
        operator delete(v24);
        uint64_t v24 = v26;
      }
      while (v26);
    }
    unint64_t v25 = (void *)*((void *)v23 - 5);
    *((void *)v23 - 5) = 0;
    if (v25) {
      operator delete(v25);
    }
  }
  if (i) {
    operator delete(i);
  }
  return v10;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v2 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v2, "LayerDataLogicAfterVariableRate", "", v4, 2u);
    }
  }
}

uint64_t md::DaVinciCenterLineRoadsLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 824);
  if (result) {
    return md::ElevationRequestUpdater::updateRequest(result, a2, a4);
  }
  return result;
}

uint64_t md::DaVinciGroundLayerDataSource::isReadyToDecode(md::DaVinciGroundLayerDataSource *this)
{
  sp_mut = std::__get_sp_mut((char *)this + 776);
  std::__sp_mut::lock(sp_mut);
  uint64_t v3 = *((void *)this + 97);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  if (v3)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(*(void *)(v3 + 16) + 2786));
    uint64_t v6 = v5 & 1;
    if (!v4) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!v4) {
      return v6;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t md::DaVinciGroundLayerDataSource::updateRequest()
{
  return 1;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x90B6813830DCB581)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::TextDataStore::addString(unsigned __int8 **a1, long long *a2, long long *a3, int a4)
{
  if (a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (*((void *)a2 + 1))
      {
        uint64_t v18 = *((void *)a2 + 3);
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, *(void **)a2, *((void *)a2 + 1));
        if (a3)
        {
LABEL_5:
          uint64_t v21 = *((void *)a3 + 3);
          if (*((char *)a3 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v19, *(void **)a3, *((void *)a3 + 1));
          }
          else
          {
            long long v19 = *a3;
            uint64_t v20 = *((void *)a3 + 2);
          }
          goto LABEL_13;
        }
LABEL_9:
        {
          operator new();
        }
        uint64_t v21 = mdm::Allocator::instance(void)::alloc;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
LABEL_13:
        uint64_t v10 = *a1;
        unint64_t v11 = a1[1];
        if (*a1 == v11)
        {
          unint64_t v11 = *a1;
LABEL_19:
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 3)) <= 0x63)
          {
            {
              operator new();
            }
            {
              operator new();
            }
            uint64_t v13 = mdm::Allocator::instance(void)::alloc;
            uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 168, 8);
            *(void *)uint64_t v14 = &unk_1EF52E1E8;
            *(void *)(v14 + 8) = 0;
            *(void *)(v14 + 16) = 0;
            *(void *)(v14 + 24) = v13;
            md::TextDataStringInfo::TextDataStringInfo((char *)(v14 + 32), a2, a3, a4);
          }
          uint64_t v9 = 255;
        }
        else
        {
          unint64_t v12 = (unsigned __int8 **)*a1;
          while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v12[1], (unsigned __int8 *)&__dst) & 1) == 0)
          {
            v12 += 7;
            if (v12 == (unsigned __int8 **)v11) {
              goto LABEL_19;
            }
          }
          uint64_t v9 = *(unsigned __int8 *)v12;
        }
        if (SHIBYTE(v20) < 0)
        {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v21 + 40))(v21, v19, v20 & 0x7FFFFFFFFFFFFFFFLL);
          if ((SHIBYTE(v17) & 0x80000000) == 0) {
            return v9;
          }
        }
        else if ((SHIBYTE(v17) & 0x80000000) == 0)
        {
          return v9;
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v18 + 40))(v18, __dst, v17 & 0x7FFFFFFFFFFFFFFFLL);
        return v9;
      }
    }
    else if (*((unsigned char *)a2 + 23))
    {
      long long __dst = *a2;
      uint64_t v8 = *((void *)a2 + 3);
      uint64_t v17 = *((void *)a2 + 2);
      uint64_t v18 = v8;
      if (a3) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  return 255;
}

void sub_1A18EDEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  unint64_t v4 = *v2;
  if (*v2)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::__split_buffer<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator> &>::~__split_buffer((uint64_t)va2);
  md::TextDataEntry::~TextDataEntry((md::TextDataEntry *)va);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::TextDataStringInfo::TextDataStringInfo(char *__dst, long long *a2, long long *a3, int a4)
{
  if (a2)
  {
    uint64_t v22 = *((void *)a2 + 3);
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dsta, *(void **)a2, *((void *)a2 + 1));
      if (a3)
      {
LABEL_4:
        uint64_t v19 = *((void *)a3 + 3);
        if (*((char *)a3 + 23) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v17, *(void **)a3, *((void *)a3 + 1));
        }
        else
        {
          long long v17 = *a3;
          uint64_t v18 = *((void *)a3 + 2);
        }
        goto LABEL_13;
      }
    }
    else
    {
      long long __dsta = *a2;
      uint64_t v21 = *((void *)a2 + 2);
      if (a3) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    {
      operator new();
    }
    uint64_t v22 = mdm::Allocator::instance(void)::alloc;
    HIBYTE(v21) = 0;
    LOBYTE(__dsta) = 0;
    if (a3) {
      goto LABEL_4;
    }
  }
  {
    operator new();
  }
  uint64_t v19 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
LABEL_13:
  uint64_t v7 = v22;
  *((void *)__dst + 3) = v22;
  int v8 = SHIBYTE(v21);
  if (SHIBYTE(v21) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)__dst, (void *)__dsta, *((unint64_t *)&__dsta + 1));
  }
  else
  {
    *(_OWORD *)long long __dst = __dsta;
    *((void *)__dst + 2) = v21;
  }
  uint64_t v9 = (const char **)(__dst + 32);
  uint64_t v10 = v19;
  *((void *)__dst + 7) = v19;
  if (SHIBYTE(v18) < 0)
  {
    uint64_t v13 = v17;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)__dst + 4, (void *)v17, *((unint64_t *)&v17 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v13, v18 & 0x7FFFFFFFFFFFFFFFLL);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v9 = v17;
    *((void *)__dst + 6) = v18;
    if ((v8 & 0x80000000) == 0)
    {
LABEL_19:
      *((void *)__dst + 8) = 0;
      *((void *)__dst + 9) = 0;
      *((void *)__dst + 10) = 0;
      {
        operator new();
      }
      uint64_t v11 = mdm::Allocator::instance(void)::alloc;
      *((void *)__dst + 12) = 0;
      *((void *)__dst + 11) = v11;
      *((void *)__dst + 13) = 0;
      *((void *)__dst + 14) = 0;
      {
        operator new();
      }
      *((void *)__dst + 15) = mdm::Allocator::instance(void)::alloc;
      *((_DWORD *)__dst + 32) = 0x1000000;
      __dst[132] = 0;
      if (__dst[55] < 0)
      {
        if (*((void *)__dst + 5))
        {
          uint64_t v14 = *v9;
          if (strncasecmp(*v9, "zh-hans", 7uLL))
          {
            if (strncasecmp(v14, "zh-tw", 5uLL))
            {
              if (strncasecmp(v14, "ja", 2uLL))
              {
                if (strncasecmp(v14, "de", 2uLL))
                {
                  if (strncasecmp(v14, "hi", 2uLL))
                  {
                    if (strncasecmp(v14, "ar", 2uLL))
                    {
                      if (strncasecmp(v14, "fa", 2uLL))
                      {
                        if (strncasecmp(v14, "ur", 2uLL))
                        {
                          uint64_t v12 = v14;
                          goto LABEL_44;
                        }
                        goto LABEL_58;
                      }
                      goto LABEL_57;
                    }
                    goto LABEL_56;
                  }
                  goto LABEL_55;
                }
                goto LABEL_54;
              }
              goto LABEL_53;
            }
            goto LABEL_50;
          }
LABEL_49:
          uint64_t v15 = &md::TextDataStringInfo::TextDataStringInfo(std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const*,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const*,gss::Country)::localeTraits;
LABEL_59:
          *((_WORD *)__dst + 64) = *((_WORD *)v15 + 4);
          *(_WORD *)(__dst + 131) = *((_WORD *)v15 + 5);
          goto LABEL_60;
        }
      }
      else if (__dst[55])
      {
        if (strncasecmp(__dst + 32, "zh-hans", 7uLL))
        {
          if (strncasecmp(__dst + 32, "zh-tw", 5uLL))
          {
            if (strncasecmp(__dst + 32, "ja", 2uLL))
            {
              if (strncasecmp(__dst + 32, "de", 2uLL))
              {
                if (strncasecmp(__dst + 32, "hi", 2uLL))
                {
                  if (strncasecmp(__dst + 32, "ar", 2uLL))
                  {
                    if (strncasecmp(__dst + 32, "fa", 2uLL))
                    {
                      if (strncasecmp(__dst + 32, "ur", 2uLL))
                      {
                        uint64_t v12 = __dst + 32;
LABEL_44:
                        if (strncasecmp(v12, "th", 2uLL)) {
                          goto LABEL_60;
                        }
                        uint64_t v15 = &off_1E5A91230;
                        goto LABEL_59;
                      }
LABEL_58:
                      uint64_t v15 = &off_1E5A91220;
                      goto LABEL_59;
                    }
LABEL_57:
                    uint64_t v15 = &off_1E5A91210;
                    goto LABEL_59;
                  }
LABEL_56:
                  uint64_t v15 = &off_1E5A91200;
                  goto LABEL_59;
                }
LABEL_55:
                uint64_t v15 = &off_1E5A911F0;
                goto LABEL_59;
              }
LABEL_54:
              uint64_t v15 = &off_1E5A911E0;
              goto LABEL_59;
            }
LABEL_53:
            uint64_t v15 = &off_1E5A911D0;
            goto LABEL_59;
          }
LABEL_50:
          uint64_t v15 = &off_1E5A911C0;
          goto LABEL_59;
        }
        goto LABEL_49;
      }
      if (a4 == 10)
      {
        char v16 = 2;
      }
      else
      {
        if (a4 != 4) {
          goto LABEL_60;
        }
        char v16 = 1;
      }
      __dst[128] = v16;
LABEL_60:
      long long __dsta = 0uLL;
      uint64_t v21 = 0;
      {
          operator new();
      }
      uint64_t v22 = mdm::Allocator::instance(void)::alloc;
      md::TextDataStringInfo::widenText();
    }
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 40))(v7, __dsta, v21 & 0x7FFFFFFFFFFFFFFFLL);
  goto LABEL_19;
}

void sub_1A18EF000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0) {
    (*(void (**)(void))(*(void *)a25 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void md::TextDataStringInfo::widenText()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  uint64_t v0 = mdm::Allocator::instance(void)::alloc;
  {
      operator new();
  }
  double v1 = (void *)mdm::Allocator::instance(void)::alloc;
  uint64_t v5 = mdm::Allocator::instance(void)::alloc;
  os_signpost_id_t v2 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 32, 2);
  uint64_t v3 = v2;
  long long v4 = xmmword_1A28FE7C0;
  *(_OWORD *)os_signpost_id_t v2 = *(_OWORD *)"U";
  *(_OWORD *)(v2 + 14) = *(_OWORD *)L"ertError";
  *((_WORD *)v2 + 15) = 0;
  uint64_t v6 = 0x65766E6F43667455;
  long long v7 = xmmword_1A28FE7D0;
  uint64_t v8 = v0;
  __src[3] = v1;
  std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__init_copy_ctor_external((void **)__src, v2, 0xFuLL);
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  operator new();
}

void sub_1A18EFFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (SHIBYTE(a14) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a15 + 40))(a15, a12, 2 * a14);
  }
  if (SHIBYTE(a4) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a5 + 40))(a5, a2, 2 * a4);
  }
  std::wstring_convert<std::codecvt_utf8_utf16<char16_t,1114111ul,(std::codecvt_mode)0>,char16_t,geo::StdAllocator<char16_t,mdm::Allocator>,geo::StdAllocator<char,mdm::Allocator>>::~wstring_convert((uint64_t)va);
  if (SHIBYTE(a8) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a9 + 40))(a9, a6, 2 * a8);
  }
  _Unwind_Resume(a1);
}

void std::codecvt_utf8_utf16<char16_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:nn180100]()
{
  MEMORY[0x1A6239070]();
  JUMPOUT(0x1A6239270);
}

void *std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__init_copy_ctor_external(void **__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0xA)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v6 = a3 | 3;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], 2 * (v6 + 1), 2);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = (void *)v8;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
  }
  return memmove(v5, __src, 2 * a3 + 2);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20) {
      unint64_t v4 = 0x9F2276D081C2CB20 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  uint64_t v8 = *(void **)(a2 + 8 * v4);
  if (!v8) {
    goto LABEL_25;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v9[2] == 0x9F2276D081C2CB20) {
          goto LABEL_23;
        }
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v10 >= a3) {
      v10 %= a3;
    }
    if (v10 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (v9[2] != 0x9F2276D081C2CB20) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v6 = *(void *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v13 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v13 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v13 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  long long v14 = *(void **)(a2 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  long long v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0x8BD499FBD96FBB9ELL)
      {
        if (v15[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      long long v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 0x8BD499FBD96FBB9ELL)
    {
      if (v16 >= a3) {
        v16 %= a3;
      }
      if (v16 != v13) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v15[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      long long v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v7 = *(void *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v19 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v19 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v19 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v20 = *(void **)(a2 + 8 * v19);
  if (!v20) {
    goto LABEL_71;
  }
  uint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v21[2] == 0x1AF456233693CD46) {
          goto LABEL_69;
        }
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x1AF456233693CD46)
    {
      if (v22 >= a3) {
        v22 %= a3;
      }
      if (v22 != v19) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v21[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v5 = *(void *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v25 = 0xA8300AA8F44B09FFLL;
    if (a3 <= 0xA8300AA8F44B09FFLL) {
      unint64_t v25 = 0xA8300AA8F44B09FFLL % a3;
    }
  }
  else
  {
    unint64_t v25 = (a3 - 1) & 0xA8300AA8F44B09FFLL;
  }
  unint64_t v26 = *(void **)(a2 + 8 * v25);
  if (!v26) {
    goto LABEL_94;
  }
  unint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0xA8300AA8F44B09FFLL)
      {
        if (v27[2] == 0xA8300AA8F44B09FFLL) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      unint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0xA8300AA8F44B09FFLL) {
      break;
    }
    if (v28 >= a3) {
      v28 %= a3;
    }
    if (v28 != v25) {
      goto LABEL_94;
    }
LABEL_81:
    unint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_94;
    }
  }
  if (v27[2] != 0xA8300AA8F44B09FFLL) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0xA8300AA8F44B09FFLL)
  {
LABEL_94:
    uint64_t v31 = 0;
    goto LABEL_95;
  }
  uint64_t v31 = *(void *)(v30 + 32);
LABEL_95:
  *uint64_t result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

void md::OverlaysLogic::runAfterLayout(void *a1, md::LayoutContext *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[93];
  v11[0] = &unk_1EF56FF90;
  uint64_t v12 = v11;
  geo::TaskQueue::barrierSync(v4, v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  uint64_t v5 = md::LayoutContext::frameState(a2);
  uint64_t v6 = a1 + 118;
  uint64_t v7 = (uint64_t *)a1[119];
  if (v7 != a1 + 118)
  {
    unint64_t v8 = *(void *)(v5 + 624);
    do
    {
      while (v7[20] >= v8)
      {
        uint64_t v7 = (uint64_t *)v7[1];
        if (v7 == v6) {
          return;
        }
      }
      uint64_t v9 = *v7;
      unint64_t v10 = (uint64_t *)v7[1];
      *(void *)(v9 + 8) = v10;
      *(void *)v7[1] = v9;
      --a1[120];
      md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v10;
    }
    while (v10 != v6);
  }
}

void sub_1A18F0934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x1AF456233693CD46) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v12 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  long long v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      long long v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      long long v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v18 = 0x1B8B241A8D896A1DLL % a3;
    }
  }
  else
  {
    uint64_t v18 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  uint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x1B8B241A8D896A1DLL)
      {
        if (v20[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x1B8B241A8D896A1DLL)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *uint64_t result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::AnchorLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v20[0] = &unk_1EF56D758;
  v20[1] = a2;
  v18[0] = &unk_1EF56D7A0;
  v18[1] = a2;
  uint64_t v19 = v18;
  uint64_t v23 = v22;
  unint64_t v21 = v20;
  v22[0] = &unk_1EF56D7A0;
  v22[1] = a2;
  std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::operator()((uint64_t)v20);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  unint64_t v9 = *(unsigned __int8 **)(a3 + 8);
  uint64_t v8 = *(void *)(a3 + 16);
  int v10 = *(unsigned __int8 *)(a1 + 136);
  if (v10 != *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 116)
    || *(unsigned __int8 *)(a1 + 120) != *v9
    || (int v11 = *(unsigned __int8 *)(a1 + 121),
        v11 != *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1 < 3))
  {
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(md::LayoutContext::frameState(a2) + 116);
    *(unsigned char *)(a1 + 120) = *v9;
    *(unsigned char *)(a1 + 121) = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1 < 3;
    md::AnchorLogic::_resetExternalAnchors(*(md::AnchorLogic **)(a1 + 192));
    uint64_t v12 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    switch(*(unsigned char *)(a1 + 136))
    {
      case 0:
      case 5:
        if (!*(unsigned char *)(a1 + 120)) {
          operator new();
        }
        goto LABEL_16;
      case 1:
        operator new();
      case 2:
      case 3:
        operator new();
      case 4:
LABEL_16:
        md::AnchorLogic::createMercatorElevationCache((md::AnchorLogic *)a1);
      case 6:
        md::AnchorLogic::createMercatorElevationCache((md::AnchorLogic *)a1);
      default:
        break;
    }
  }
  uint64_t v13 = *(void *)(a1 + 128);
  *a4 = v13;
  if (v13)
  {
    if (!*(unsigned char *)(a1 + 120))
    {
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v9 + 5);
      long long v14 = *(uint64_t ***)(a1 + 192);
      if (!v14) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    *(float *)(v13 + 72) = *((float *)v9 + 5) * *((float *)v9 + 4);
    if (v8) {
      *(_DWORD *)(v13 + 76) = *(_DWORD *)(v8 + 88);
    }
  }
  long long v14 = *(uint64_t ***)(a1 + 192);
  if (!v14) {
    goto LABEL_27;
  }
  do
  {
LABEL_26:
    uint64_t v17 = v14[3];
    unint64_t v15 = v17;
    objc_msgSend(v15, "layoutWithContext:", a2, &unk_1EF5595F8);

    long long v14 = (uint64_t **)*v14;
  }
  while (v14);
LABEL_27:
  if (!v23)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v23 + 48))(v23);
  uint64_t result = (uint64_t)v23;
  if (v23 == v22) {
    return (*(uint64_t (**)(void *))(v22[0] + 32))(v22);
  }
  if (v23) {
    return (*(uint64_t (**)(void *))(*v23 + 40))(v23);
  }
  return result;
}

void sub_1A18F1390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AnchorLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_signpost_id_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "AnchorLogic", "", v5, 2u);
  }
}

void md::ElevationLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v342 = *MEMORY[0x1E4F143B8];
  v338[0] = &unk_1EF5707B8;
  v338[1] = a2;
  v336[0] = &unk_1EF570800;
  v336[1] = a2;
  uint64_t v337 = v336;
  uint64_t v341 = v340;
  unint64_t v339 = v338;
  v340[0] = &unk_1EF570800;
  v340[1] = a2;
  std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::operator()((uint64_t)v338);
  if (v337 == v336)
  {
    (*(void (**)(void *))(v336[0] + 32))(v336);
  }
  else if (v337)
  {
    (*(void (**)(void *))(*v337 + 40))(v337);
  }
  if (v339 == v338)
  {
    (*(void (**)(void *))(v338[0] + 32))(v338);
  }
  else if (v339)
  {
    (*(void (**)(void *))(*v339 + 40))(v339);
  }
  BOOL v9 = *(float *)(a4 + 16) <= 0.01 && *(unsigned char *)(a4 + 3) != 0;
  BOOL v320 = v9;
  int v10 = *(uint64_t **)(*(void *)(a1 + 280) + 1128);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v11;
  if (v11 != v12)
  {
    uint64_t v13 = v11;
    while (*(unsigned char *)v13 != 20)
    {
      v13 += 16;
      if (v13 == v12) {
        goto LABEL_23;
      }
    }
  }
  if (v13 == v12)
  {
LABEL_23:
    LODWORD(v14) = 0;
    if (v11 != v12)
    {
LABEL_24:
      while (*(unsigned char *)v11 != 29)
      {
        v11 += 16;
        if (v11 == v12) {
          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if (v11 != v12) {
      goto LABEL_24;
    }
  }
  if (v11 == v12) {
LABEL_29:
  }
    uint64_t v15 = 0;
  else {
    uint64_t v15 = *(void *)(v11 + 8);
  }
  uint64_t v16 = *a3;
  uint64_t v17 = a3[1];
  *(unsigned char *)(a4 + 5) = *(unsigned char *)(a1 + 352);
  if (v14 > 8 || ((1 << v14) & 0x121) == 0)
  {
    *(unsigned char *)a4 = 0;
    *(_WORD *)(a4 + 2) = 0;
    *(_OWORD *)(a4 + 8) = xmmword_1A28FD460;
    goto LABEL_82;
  }
  uint64_t v18 = +[VKDebugSettings sharedSettings];
  uint64_t v19 = (double *)md::LayoutContext::frameState(a2);
  double v20 = v19[20];
  double v21 = v19[17];
  double v22 = v19[62];
  double v23 = v19[63];
  if (v22 >= v23)
  {
    double v29 = v19[73];
  }
  else
  {
    double v24 = v23 * v22;
    double v25 = v22 / v23;
    if (v24 <= 0.0) {
      double v26 = 1.0;
    }
    else {
      double v26 = v25;
    }
    long double v27 = tan(v19[73] * 0.5);
    long double v28 = atan(v26 * v27);
    double v29 = v28 + v28;
  }
  long double v30 = tan(v21 * 0.5 + 0.789761487);
  double v31 = log(v30);
  long double v32 = tan(v21 * 0.5 + 0.78103484);
  double v33 = fabs((v31 - log(v32)) * 0.159154943);
  long double v34 = cos(v21 + v21) * -559.82 + 111132.92;
  long double v35 = v34 + cos(v21 * 4.0) * 1.175;
  long double v36 = v35 + cos(v21 * 6.0) * -0.0023;
  long double v37 = tan(v29 * 0.5);
  double v38 = log2(v20 * (v37 + v37) * v33 / v36);
  float v39 = *(float *)(v16 + 100);
  LOBYTE(v321[0]) = 0;
  LOBYTE(v334.f64[0]) = 0;
  gss::ClientStyleState<gss::PropertyID>::queryNightMode(*(void *)(v16 + 32), (BOOL *)v321, (BOOL *)&v334);
  float v40 = v38;
  float v41 = v39 - v40;
  float v42 = 1.0;
  if (v14 != 5)
  {
    uint64_t v43 = +[VKDebugSettings sharedSettings];
    if ([v43 daVinciOverrideElevationScaling])
    {
      unsigned int v44 = [v43 daVinciElevationScalingMaxZ];
      if (v44 <= [v43 daVinciElevationScalingMinZ])
      {
LABEL_45:

        goto LABEL_46;
      }
      unsigned int v45 = [v43 daVinciElevationScalingMinZ];
      unsigned int v46 = [v43 daVinciElevationScalingMaxZ];
      [v43 daVinciElevationScalingMinZFactor];
      float v48 = v47;
      [v43 daVinciElevationScalingMaxZFactor];
      float v50 = fminf(fmaxf((float)(v41 - (float)v45) / (float)((float)v46 - (float)v45), 0.0), 1.0);
    }
    else
    {
      uint64_t v51 = *(void **)(v17 + 48);
      float v48 = md::DaVinciGroundSettings::valueForZoomLevel<float>(v51, (int)v41);
      float v49 = md::DaVinciGroundSettings::valueForZoomLevel<float>(v51, ((int)v41 + 1));
      float v50 = v41 - truncf(v41);
    }
    float v42 = v48 + (float)((float)(v49 - v48) * v50);
    goto LABEL_45;
  }
LABEL_46:
  int v52 = [v18 daVinciElevationScalingNormalsOnly];
  uint64_t v53 = *(void *)(a1 + 160);
  float v54 = 1.0;
  if (!v52) {
    float v54 = v42;
  }
  BOOL v55 = *(_DWORD *)(v53 + 76) != 0;
  float v56 = *(float *)(v53 + 48);
  float v57 = v56 * v54;
  *(float *)(a4 + 16) = v57;
  int v58 = *(unsigned __int8 *)(v53 + 80);
  *(unsigned char *)a4 = v58;
  *(float *)(a4 + 8) = v56;
  *(unsigned char *)(a4 + 2) = v55;
  BOOL v60 = v14 == 8 || v15 == 3;
  int v61 = *(unsigned __int8 *)(a4 + 1);
  if (v58 && !*(unsigned char *)(a4 + 1) && v60)
  {
    size_t v62 = *(void **)(a1 + 144);
    if (v62) {
      [v62 stop];
    }
    *(void *)(a1 + 168) = 0x3F800000BF800000;
    [v18 daVinciTransitionDuration];
    md::ElevationLogic::_startFlatteningScaleAnimation((md::ElevationLogic *)a1, v63);
    char v64 = 1;
  }
  else
  {
    if (!*(unsigned char *)(a4 + 1)) {
      LOBYTE(v60) = 1;
    }
    if (!v58 || v60) {
      goto LABEL_68;
    }
    uint64_t v65 = *(void **)(a1 + 144);
    if (v65) {
      [v65 stop];
    }
    *(void *)(a1 + 168) = 1065353216;
    [v18 daVinciTransitionDuration];
    md::ElevationLogic::_startFlatteningScaleAnimation((md::ElevationLogic *)a1, v66);
    char v64 = 0;
  }
  *(unsigned char *)(a4 + 1) = v64;
  float v56 = *(float *)(*(void *)(a1 + 160) + 48);
  float v57 = *(float *)(a4 + 16);
LABEL_68:
  float v67 = *(float *)(a1 + 172);
  *(float *)(a4 + 12) = fmaxf(v56 + (float)((float)-(float)(v67 - (float)(v42 * v67)) * v56), 0.01);
  *(float *)(a4 + 16) = v57 * v67;
  float v68 = 1.0;
  if (v14 != 5 && (!*(unsigned char *)a4 || [v18 daVinciPitchScaleEnabled]))
  {
    [v18 buildingPOIPitchScaleMinZoom];
    float v70 = v69;
    [v18 buildingPOIPitchScaleMaxZoom];
    float v72 = v71;
    double v73 = *(double *)(md::LayoutContext::frameState(a2) + 168);
    [v18 buildingPOIPitchScaleMaxZoomFactor];
    float v75 = v74;
    [v18 buildingPOIPitchScaleFullHeightAngle];
    float v77 = fminf((float)((float)(v75 + -1.0) * fminf((float)(v41 - v70) / (float)(v72 - v70), 1.0)) + 1.0, 1.0);
    float v76 = v73 * 0.636619772;
    float v68 = fminf((float)((float)(v76 - (float)(v77 * v76)) / sinf(v78 * 0.017453)) + v77, 1.0);
  }
  *(float *)(a4 + 20) = v68;
  BOOL v80 = v41 > 11.0 || v61 != 0;
  *(unsigned char *)(a4 + 3) = v80;
  *(unsigned char *)(a4 + 4) = 0;
  if (*(unsigned char *)(*(void *)(a1 + 280) + 1240) && !*(unsigned char *)(md::LayoutContext::frameState(a2) + 128))
  {
    uint64_t v81 = md::LayoutContext::frameState(a2);
    double v82 = *(float *)(a4 + 20);
    float v83 = v82 / cos(*(long double *)(v81 + 136));
    *(float *)(a4 + 20) = v83;
    *(unsigned char *)(a4 + 4) = 1;
  }

LABEL_82:
  double v84 = *(double *)(md::LayoutContext::frameState(a2) + 88);
  double v85 = *(double *)(a1 + 240);
  *(void *)(a1 + 240) = *(void *)(md::LayoutContext::frameState(a2) + 88);
  if (!*(void *)(a1 + 256)
    || (+[VKDebugSettings sharedSettings],
        unint64_t v86 = objc_claimAutoreleasedReturnValue(),
        int v87 = [v86 toursCorrectElevation],
        v86,
        !v87))
  {
    if (!*(unsigned char *)a4)
    {
      uint64_t v208 = *(void *)(a1 + 280);
      unint64_t v209 = *(uint64_t **)(v208 + 1128);
      uint64_t v210 = *v209;
      uint64_t v211 = v209[1];
      if (v210 != v211)
      {
        while (*(unsigned char *)v210 != 20)
        {
          v210 += 16;
          if (v210 == v211) {
            goto LABEL_123;
          }
        }
      }
      if (v210 == v211
        || ((unsigned int v212 = *(_DWORD *)(v210 + 8) - 2, *(unsigned char *)(v208 + 1241)) ? (v213 = v212 > 2) : (v213 = 1), v213))
      {
LABEL_123:
        *(void *)(a1 + 176) = 0;
        *(void *)(a1 + 248) = 0;
        uint64_t v214 = md::LayoutContext::frameState(a2);
        if ((*(_DWORD *)(a1 + 288) & 0xFFFFFFFE) == 2)
        {
          *(void *)(v214 + 152) = 0;
          if (!*(unsigned char *)(a1 + 328)) {
            goto LABEL_132;
          }
          goto LABEL_129;
        }
        goto LABEL_128;
      }
    }
    uint64_t v99 = md::LayoutContext::frameState(a2);
    double v100 = *(double *)(a1 + 176);
    BOOL v101 = (double *)(v99 + 136);
    *(double *)&unint64_t v102 = COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((void *)a1, v99 + 136));
    LOBYTE(v104) = v103;
    double v105 = *(double *)&v102;
    if ((v14 - 2) > 2
      || (+[VKDebugSettings sharedSettings],
          int8x8_t v106 = objc_claimAutoreleasedReturnValue(),
          int v107 = [v106 correctBumpiness],
          v106,
          !v107))
    {
      uint64_t v104 = v104;
      if ((_BYTE)v104) {
        double v182 = v105;
      }
      else {
        double v182 = 0.0;
      }
      *(void *)(a1 + 232) = 0;
      double v194 = v105;
      double v195 = *(double *)(v99 + 144);
      double v196 = *(double *)(v99 + 152);
      __double2 v197 = __sincos_stret(*(double *)(v99 + 136));
      double v198 = 6378137.0 / sqrt(v197.__sinval * v197.__sinval * -0.00669437999 + 1.0);
      double v199 = (v198 + v196) * v197.__cosval;
      double v200 = v195;
      double v201 = v194;
      __double2 v202 = __sincos_stret(v200);
      *(double *)(a1 + 184) = v199 * v202.__cosval;
      *(double *)(a1 + 192) = v199 * v202.__sinval;
      *(double *)(a1 + 200) = (v196 + v198 * 0.99330562) * v197.__sinval;
      gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v321, v101);
      double v203 = v322;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v321;
      *(double *)(a1 + 224) = v203;
      goto LABEL_105;
    }
    double v307 = v100;
    double v318 = v105;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v321, v101);
    double v108 = *(double *)(v99 + 144);
    double v109 = *(double *)(v99 + 152);
    __double2 v110 = __sincos_stret(*(double *)(v99 + 136));
    double v111 = 6378137.0 / sqrt(v110.__sinval * v110.__sinval * -0.00669437999 + 1.0);
    double v112 = (v111 + v109) * v110.__cosval;
    __double2 v113 = __sincos_stret(v108);
    double v114 = v112 * v113.__cosval;
    double v115 = v112 * v113.__sinval;
    double v116 = (v109 + v111 * 0.99330562) * v110.__sinval;
    char v117 = v321[0];
    size_t v118 = v321[1];
    double v120 = v324;
    double v119 = v325;
    double v122 = v322;
    double v121 = *(double *)&v323;
    double v123 = v326;
    double v124 = *(double *)(v99 + 160);
    double v125 = sqrt((*(double *)v321 - *(double *)(a1 + 208)) * (*(double *)v321 - *(double *)(a1 + 208))+ (*(double *)&v321[1] - *(double *)(a1 + 216)) * (*(double *)&v321[1] - *(double *)(a1 + 216))+ (v322 - *(double *)(a1 + 224)) * (v322 - *(double *)(a1 + 224)));
    *(void **)(a1 + 208) = v321[0];
    *(double *)(a1 + 216) = *(double *)&v118;
    *(double *)(a1 + 224) = v122;
    if (v125 <= 0.00001 || v124 >= 5000.0)
    {
LABEL_191:
      double v201 = v318;
      if ((_BYTE)v104)
      {
        double v283 = sqrt((*(double *)(a1 + 184) - v114) * (*(double *)(a1 + 184) - v114)+ (*(double *)(a1 + 192) - v115) * (*(double *)(a1 + 192) - v115)+ (*(double *)(a1 + 200) - v116) * (*(double *)(a1 + 200) - v116));
        double v182 = v318;
        if (v283 < 1000.0)
        {
          double v284 = *(double *)(a1 + 176);
          double v285 = fmin(fmax(fmin(fmax((v318 - v284) / fmax(v283, 0.00001) - *(double *)(a1 + 232), -((v84 - v85) * 0.2)), (v84 - v85) * 0.2)+ *(double *)(a1 + 232), -0.2), 0.2);
          *(double *)(a1 + 232) = v285;
          double v182 = v284 + v285 * v283;
        }
        if (v125 <= 0.00001) {
          *(void *)(a1 + 232) = 0;
        }
        *(double *)(a1 + 184) = v114;
        *(double *)(a1 + 192) = v115;
        uint64_t v104 = 1;
        *(double *)(a1 + 200) = v116;
      }
      else
      {
        uint64_t v104 = 0;
        *(void *)(a1 + 232) = 0;
        double v182 = v307;
      }
      goto LABEL_105;
    }
    double v288 = v125;
    double v292 = v85;
    double v293 = v84;
    double v127 = -(v119 * -2.0 * v120 - (v121 + v121) * v123);
    double v128 = v114 - *(double *)&v117 + (v121 + v121) * v120 + v123 * (v119 * -2.0);
    double v286 = *(double *)(v99 + 592);
    double v287 = sqrt(*(double *)&v117 * *(double *)&v117 + *(double *)&v118 * *(double *)&v118 + v122 * v122);
    double v129 = 1.0 / v287 * *(double *)&v117;
    double v291 = v114;
    double v130 = 1.0 / v287 * *(double *)&v118;
    double v131 = 1.0 / v287 * v122;
    double v310 = *(double *)&v117;
    double v132 = 1.0 - *(double *)&v118 + v119 * -2.0 * v119 + v115 - (v121 + v121) * v121;
    double v133 = v127 + v116 - v122;
    double v134 = -(v133 * v130 - v132 * v131);
    double v135 = -(v128 * v131 - v133 * v129);
    double v136 = -(v132 * v129 - v128 * v130);
    double v137 = -(v135 * v131 - v136 * v130);
    double v138 = -(v136 * v129 - v134 * v131);
    double v139 = -(v134 * v130 - v135 * v129);
    double v140 = 1.0 / sqrt(v137 * v137 + v138 * v138 + v139 * v139);
    double v311 = v140 * v137;
    double v309 = v140 * v138;
    double v313 = v140 * v139;
    double v296 = *(double *)&v118 + v140 * v138 * 5.0;
    double v299 = *(double *)&v117 + v140 * v137 * 5.0;
    double v294 = v122 + v140 * v139 * 5.0;
    double v141 = 5.0 / sqrt(v135 * v135 + v134 * v134 + v136 * v136);
    double v142 = v141 * v135;
    double v290 = v115;
    double v301 = v141 * v136;
    double v303 = v141 * v134;
    long double v143 = v299 + v141 * v134;
    long double v144 = v296 + v141 * v135;
    long double v145 = v294 + v141 * v136;
    double v146 = sqrt(v143 * v143 + v144 * v144);
    double v308 = *(double *)&v118;
    double v312 = v122;
    double v289 = v116;
    double v147 = atan2(v145, v146 * 0.996647189);
    double v306 = atan2(v144, v143);
    __double2 v148 = __sincos_stret(v147);
    double v305 = atan2(v145 + v148.__sinval * v148.__sinval * 42841.3115 * v148.__sinval, v146 - v148.__cosval * v148.__cosval * 42697.6727 * v148.__cosval);
    long double v149 = v296 - v142;
    double v150 = sqrt((v299 - v303) * (v299 - v303) + v149 * v149);
    double v151 = atan2(v294 - v301, v150 * 0.996647189);
    long double v304 = atan2(v149, v299 - v303);
    __double2 v152 = __sincos_stret(v151);
    long double v302 = atan2(v294 - v301 + v152.__sinval * v152.__sinval * 42841.3115 * v152.__sinval, v150 - v152.__cosval * v152.__cosval * 42697.6727 * v152.__cosval);
    long double v153 = v310 - v311 * 2.5;
    long double v154 = v308 - v309 * 2.5;
    double v297 = sqrt(v153 * v153 + v154 * v154);
    double v155 = atan2(v312 - v313 * 2.5, v297 * 0.996647189);
    long double v300 = atan2(v154, v153);
    __double2 v156 = __sincos_stret(v155);
    long double v298 = atan2(v312 - v313 * 2.5 + v156.__sinval * v156.__sinval * 42841.3115 * v156.__sinval, v297 - v156.__cosval * v156.__cosval * 42697.6727 * v156.__cosval);
    long double v157 = v310 + v311 * 15.0;
    long double v158 = v308 + v309 * 15.0;
    double v159 = sqrt(v157 * v157 + v158 * v158);
    double v160 = atan2(v312 + v313 * 15.0, v159 * 0.996647189);
    long double v295 = atan2(v158, v157);
    __double2 v161 = __sincos_stret(v160);
    long double v162 = atan2(v312 + v313 * 15.0 + v161.__sinval * v161.__sinval * 42841.3115 * v161.__sinval, v159 - v161.__cosval * v161.__cosval * 42697.6727 * v161.__cosval);
    long double v163 = v310 + v311 * 30.0;
    long double v164 = v308 + v309 * 30.0;
    long double v165 = v312 + v313 * 30.0;
    double v166 = sqrt(v163 * v163 + v164 * v164);
    double v167 = atan2(v165, v166 * 0.996647189);
    long double v168 = atan2(v164, v163);
    __double2 v169 = __sincos_stret(v167);
    long double v170 = atan2(v165 + v169.__sinval * v169.__sinval * 42841.3115 * v169.__sinval, v166 - v169.__cosval * v169.__cosval * 42697.6727 * v169.__cosval);
    double v322 = COERCE_DOUBLE(&v324);
    uint64_t v323 = 5;
    double v324 = v305;
    double v325 = v306;
    long double v326 = v302;
    long double v327 = v304;
    long double v328 = v298;
    long double v329 = v300;
    long double v330 = v162;
    long double v331 = v295;
    long double v332 = v170;
    long double v333 = v168;
    v321[0] = &v324;
    v321[1] = &v334;
    uint64_t v171 = *(void *)(a1 + 272);
    if (!v171)
    {
      double v85 = v292;
      double v84 = v293;
      double v116 = v289;
      double v115 = v290;
      double v114 = v291;
      double v125 = v288;
      goto LABEL_191;
    }
    double v115 = v290;
    double v116 = v289;
    double v172 = sqrt(v291 * v291 + v115 * v115 + v116 * v116) - v287 + fmax(v286 + v286, 35.0);
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v319 = _Q0;
    double v85 = v292;
    double v84 = v293;
    if (!*(unsigned char *)(*(void *)(a1 + 160) + 80))
    {
      uint64_t v177 = *(void *)(a1 + 280);
      int v178 = md::MapEngine::mapType(**(md::MapEngine ***)(v177 + 1128), *(md::MapEngine **)(*(void *)(v177 + 1128) + 8));
      int v179 = 0;
      int v180 = *(unsigned __int8 *)(v177 + 1241);
      int v181 = 1;
      double v182 = 0.0;
      if (!v180)
      {
LABEL_148:
        double v114 = v291;
LABEL_149:
        uint64_t v219 = *(void *)(a1 + 272);
        if (v219)
        {
          double v220 = v326;
          double v314 = v327;
          if (*(unsigned char *)(*(void *)(a1 + 160) + 80)
            || (uint64_t v221 = *(void *)(a1 + 280),
                int v222 = md::MapEngine::mapType(**(md::MapEngine ***)(v221 + 1128), *(md::MapEngine **)(*(void *)(v221 + 1128) + 8)), *(unsigned char *)(v221 + 1241))&& (v222 - 2) <= 2)
          {
            long double v223 = tan(v220 * 0.5 + 0.785398163);
            long double v224 = log(v223);
            v225.f64[0] = v314;
            v225.f64[1] = v224;
            float64x2_t v226 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
            float64x2_t v334 = vmlaq_f64(v319, v226, v225);
            uint64_t v335 = 0;
            double v232 = COERCE_DOUBLE(md::World::getElevation(v219, &v334, v226.f64[0], v334.f64[0], v314, v227, v228, v229, v230, v231));
            if (v233)
            {
              if (v181) {
                double v234 = v172 + v232;
              }
              else {
                double v234 = v182;
              }
              double v182 = fmax(v172 + v232, v234);
              int v179 = 1;
            }
          }
          uint64_t v235 = *(void *)(a1 + 272);
          if (v235)
          {
            double v236 = v328;
            double v315 = v329;
            if (*(unsigned char *)(*(void *)(a1 + 160) + 80)
              || (uint64_t v237 = *(void *)(a1 + 280),
                  int v238 = md::MapEngine::mapType(**(md::MapEngine ***)(v237 + 1128), *(md::MapEngine **)(*(void *)(v237 + 1128) + 8)), *(unsigned char *)(v237 + 1241))&& (v238 - 2) <= 2)
            {
              long double v239 = tan(v236 * 0.5 + 0.785398163);
              long double v240 = log(v239);
              v241.f64[0] = v315;
              v241.f64[1] = v240;
              float64x2_t v242 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
              float64x2_t v334 = vmlaq_f64(v319, v242, v241);
              uint64_t v335 = 0;
              double v248 = COERCE_DOUBLE(md::World::getElevation(v235, &v334, v242.f64[0], v334.f64[0], v315, v243, v244, v245, v246, v247));
              if (v249)
              {
                if (v179) {
                  double v250 = v182;
                }
                else {
                  double v250 = v172 + v248;
                }
                double v182 = fmax(v172 + v248, v250);
                int v179 = 1;
              }
            }
            double v114 = v291;
            uint64_t v251 = *(void *)(a1 + 272);
            if (!v251) {
              goto LABEL_186;
            }
            double v252 = v330;
            double v316 = v331;
            if (*(unsigned char *)(*(void *)(a1 + 160) + 80)
              || (uint64_t v253 = *(void *)(a1 + 280),
                  int v254 = md::MapEngine::mapType(**(md::MapEngine ***)(v253 + 1128), *(md::MapEngine **)(*(void *)(v253 + 1128) + 8)), *(unsigned char *)(v253 + 1241))&& (v254 - 2) <= 2)
            {
              long double v255 = tan(v252 * 0.5 + 0.785398163);
              long double v256 = log(v255);
              v257.f64[0] = v316;
              v257.f64[1] = v256;
              float64x2_t v258 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
              float64x2_t v334 = vmlaq_f64(v319, v258, v257);
              uint64_t v335 = 0;
              double v264 = COERCE_DOUBLE(md::World::getElevation(v251, &v334, v258.f64[0], v334.f64[0], v316, v259, v260, v261, v262, v263));
              if (v265)
              {
                if (v179) {
                  double v266 = v182;
                }
                else {
                  double v266 = v172 + v264;
                }
                double v182 = fmax(v172 + v264, v266);
                int v179 = 1;
              }
            }
            double v114 = v291;
            uint64_t v267 = *(void *)(a1 + 272);
            if (!v267) {
              goto LABEL_186;
            }
            double v268 = v332;
            double v317 = v333;
            if (*(unsigned char *)(*(void *)(a1 + 160) + 80)
              || (uint64_t v269 = *(void *)(a1 + 280),
                  int v270 = md::MapEngine::mapType(**(md::MapEngine ***)(v269 + 1128), *(md::MapEngine **)(*(void *)(v269 + 1128) + 8)), *(unsigned char *)(v269 + 1241))&& (v270 - 2) <= 2)
            {
              long double v271 = tan(v268 * 0.5 + 0.785398163);
              long double v272 = log(v271);
              v273.f64[0] = v317;
              v273.f64[1] = v272;
              float64x2_t v274 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
              float64x2_t v334 = vmlaq_f64(v319, v274, v273);
              uint64_t v335 = 0;
              double v280 = COERCE_DOUBLE(md::World::getElevation(v267, &v334, v274.f64[0], v334.f64[0], v317, v275, v276, v277, v278, v279));
              if (v281)
              {
                if (v179) {
                  double v282 = v182;
                }
                else {
                  double v282 = v172 + v280;
                }
                double v182 = fmax(v172 + v280, v282);
                int v179 = 1;
              }
            }
          }
          double v114 = v291;
        }
LABEL_186:
        if (v321[0] != *(void **)&v322)
        {
          free(v321[0]);
          double v114 = v291;
        }
        double v125 = v288;
        if (!v179 || v182 <= *(double *)(a1 + 176)) {
          goto LABEL_191;
        }
        *(void *)(a1 + 232) = 0;
        *(double *)(a1 + 184) = v114;
        *(double *)(a1 + 192) = v290;
        uint64_t v104 = v104;
        *(double *)(a1 + 200) = v289;
        double v201 = v318;
LABEL_105:
        double v204 = (float)(*(float *)(a4 + 16) * *(float *)(a4 + 20));
        double v205 = v182 * v204;
        *(double *)(a1 + 176) = v182 * v204;
        if (v104) {
          double v206 = v201;
        }
        else {
          double v206 = v182;
        }
        *(double *)(a1 + 248) = (v182 - v206) * v204;
        int v207 = *(_DWORD *)(a1 + 288);
        if (v207 != 3)
        {
          if (v207 != 2)
          {
            if (v207 == 1)
            {
              *(double *)(v99 + 152) = *(double *)(v99 + 152) + v205;
              if (!*(unsigned char *)(a1 + 328)) {
                goto LABEL_132;
              }
              goto LABEL_129;
            }
            goto LABEL_128;
          }
          double v205 = *(double *)(v99 + 152) * v204;
        }
        *(double *)(v99 + 152) = v205;
LABEL_128:
        if (!*(unsigned char *)(a1 + 328)) {
          goto LABEL_132;
        }
        goto LABEL_129;
      }
      double v114 = v291;
      if ((v178 - 2) > 2) {
        goto LABEL_149;
      }
    }
    long double v183 = tan(v305 * 0.5 + 0.785398163);
    long double v184 = log(v183);
    v185.f64[0] = v306;
    v185.f64[1] = v184;
    float64x2_t v186 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    float64x2_t v334 = vmlaq_f64(v319, v186, v185);
    uint64_t v335 = 0;
    double v192 = COERCE_DOUBLE(md::World::getElevation(v171, &v334, v186.f64[0], v334.f64[0], v306, v187, v188, v189, v190, v191));
    if (v193)
    {
      int v181 = 0;
      double v182 = v172 + v192;
      int v179 = 1;
    }
    else
    {
      int v179 = 0;
      int v181 = 1;
      double v182 = 0.0;
    }
    goto LABEL_148;
  }
  uint64_t v88 = md::LayoutContext::frameState(a2);
  double v89 = *(double *)(*(void *)(a1 + 256) + 152);
  double v90 = COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((void *)a1, v88 + 136));
  char v92 = v91;
  *(double *)(v88 + 152) = v89;
  *(double *)(a1 + 176) = v89;
  double v93 = *(double *)(v88 + 144);
  __double2 v94 = __sincos_stret(*(double *)(v88 + 136));
  double v95 = 6378137.0 / sqrt(v94.__sinval * v94.__sinval * -0.00669437999 + 1.0);
  double v96 = (v95 + v89) * v94.__cosval;
  __double2 v97 = __sincos_stret(v93);
  *(double *)(a1 + 184) = v96 * v97.__cosval;
  *(double *)(a1 + 192) = v96 * v97.__sinval;
  *(double *)(a1 + 200) = (v89 + v95 * 0.99330562) * v94.__sinval;
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v321, (double *)(v88 + 136));
  double v98 = v322;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)v321;
  *(double *)(a1 + 224) = v98;
  *(void *)(a1 + 232) = 0;
  if (v92)
  {
    *(double *)(a1 + 248) = *(double *)(v88 + 152) - v90;
    if (!*(unsigned char *)(a1 + 328)) {
      goto LABEL_132;
    }
  }
  else
  {
    *(void *)(a1 + 248) = 0;
    if (!*(unsigned char *)(a1 + 328)) {
      goto LABEL_132;
    }
  }
LABEL_129:
  uint64_t v215 = md::LayoutContext::frameState(a2);
  if (!*(unsigned char *)(a1 + 328))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_201:
    __break(1u);
    return;
  }
  v321[0] = *(void **)(v215 + 152);
  LOBYTE(v321[1]) = 1;
  uint64_t v216 = *(void *)(a1 + 320);
  if (!v216)
  {
LABEL_200:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_201;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v216 + 48))(v216, v321);
LABEL_132:
  BOOL v218 = *(float *)(a4 + 16) <= 0.01 && *(unsigned char *)(a4 + 3) != 0;
  *(unsigned char *)(a4 + 6) = v320 ^ v218;
  if (!v341) {
    goto LABEL_200;
  }
  (*(void (**)(void *))(*v341 + 48))(v341);
  if (v341 == v340)
  {
    (*(void (**)(void *))(v340[0] + 32))(v340);
  }
  else if (v341)
  {
    (*(void (**)(void))(*v341 + 40))();
  }
}

void sub_1A18F2AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45)
{
  if (a43 != a45) {
    free(a43);
  }
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v45 - 192));
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::updateZScaleAndOffset(uint64_t **a1, md::LayoutContext *this, float a3)
{
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  int8x8_t v6 = (int8x8_t)v5[1];
  if (!*(void *)&v6)
  {
    BOOL v9 = 0;
    float v10 = MEMORY[0x10];
    float v11 = MEMORY[0x14];
    goto LABEL_43;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v6 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v8 = 0x8BD499FBD96FBB9ELL % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v12 = *v5;
  uint64_t v13 = *(void **)(v12 + 8 * v8);
  if (v13 && (uint64_t v14 = (void *)*v13) != 0)
  {
    if (v7.u32[0] >= 2uLL)
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        uint64_t v14 = (void *)*v14;
    }
    else
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        uint64_t v14 = (void *)*v14;
    }
    uint64_t v15 = *(void *)(v14[5] + 32);
    uint64_t v16 = v15 + 16;
    uint64_t v17 = v15 + 20;
  }
  else
  {
    uint64_t v16 = 16;
    uint64_t v17 = 20;
  }
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x1AF456233693CD46;
    if (*(void *)&v6 <= 0x1AF456233693CD46uLL) {
      uint64_t v18 = 0x1AF456233693CD46uLL % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v18 = (*(void *)&v6 - 1) & 0x1AF456233693CD46;
  }
  float v10 = *(float *)v16;
  float v11 = *(float *)v17;
  uint64_t v19 = *(void **)(v12 + 8 * v18);
  if (!v19) {
    goto LABEL_42;
  }
  double v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_42;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v6 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46) {
          goto LABEL_40;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_42;
      }
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_42;
      }
    }
  }
  while (1)
  {
    unint64_t v22 = v20[1];
    if (v22 == 0x1AF456233693CD46) {
      break;
    }
    if (v22 >= *(void *)&v6) {
      v22 %= *(void *)&v6;
    }
    if (v22 != v18) {
      goto LABEL_42;
    }
LABEL_29:
    double v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_42;
    }
  }
  if (v20[2] != 0x1AF456233693CD46) {
    goto LABEL_29;
  }
LABEL_40:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) == 0x1AF456233693CD46)
  {
    BOOL v9 = *(double **)(v24 + 32);
    goto LABEL_43;
  }
LABEL_42:
  BOOL v9 = 0;
LABEL_43:
  uint64_t v25 = md::LayoutContext::frameState(this);
  double v26 = v9[64];
  if (*(unsigned __int8 *)(v25 + 128) - 1 > 2)
  {
    double v32 = v26 * 40075017.0;
  }
  else
  {
    double v27 = sqrt(v9[62] * v9[62] + v9[63] * v9[63]);
    double v28 = atan2(v9[64], v27 * 0.996647189);
    __double2 v29 = __sincos_stret(v28);
    double v30 = atan2(v26 + v29.__sinval * v29.__sinval * 42841.3115 * v29.__sinval, v27 + v29.__cosval * v29.__cosval * -42697.6727 * v29.__cosval);
    __double2 v31 = __sincos_stret(v30);
    double v32 = v27 / v31.__cosval + -6378137.0 / sqrt(v31.__sinval * v31.__sinval * -0.00669437999 + 1.0);
  }
  double v33 = *a1;
  long double v34 = a1[1];
  if (*a1 != v34)
  {
    float v35 = v32;
    float v36 = (float)(fmaxf(v35 * 0.002, 1.0) + a3) * v11;
    do
    {
      uint64_t v37 = *v33++;
      uint64_t v38 = *(void *)(v37 + 384);
      md::BaseMapTileDataRenderable::adjustZScale(v37, v10, v11);
      md::BaseMapTileDataRenderable::adjustZOffset(*(void **)(v37 + 232), v36 * *(float *)(v38 + 624));
    }
    while (v33 != v34);
  }
}

uint64_t md::LayoutContext::frameState(md::LayoutContext *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 728)) {
    return (uint64_t)this + 96;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  os_signpost_id_t v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315650;
    unint64_t v8 = "_frameState.has_value()";
    __int16 v9 = 2080;
    float v10 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MDLayoutContext.mm";
    __int16 v11 = 1024;
    int v12 = 82;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_ERROR, "Requesting frameState on context in undefined state: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v7, 0x1Cu);
  }

  if (*((unsigned char *)this + 728)) {
    return (uint64_t)this + 96;
  }
  uint64_t v4 = std::__throw_bad_optional_access[abi:nn180100]();
  return md::BaseMapTileDataRenderable::adjustZScale(v4, v5, v6);
}

uint64_t md::BaseMapTileDataRenderable::adjustZScale(uint64_t this, float a2, float a3)
{
  if (!*(unsigned char *)(this + 376))
  {
    float v3 = *(double *)(this + 72) - *(double *)(this + 56);
    *(double *)(this + 168) = v3;
    *(void *)(this + 200) = 0;
  }
  uint64_t v4 = *(void **)(this + 232);
  unint64_t v5 = v4[1];
  unint64_t v7 = v4[8];
  uint64_t v6 = v4[9];
  *(float *)(v6 + 348) = a2;
  *(float *)(v6 + 344) = a3;
  if (v7 > v5) {
    unint64_t v5 = v7;
  }
  v4[7] = 0;
  v4[8] = v5;
  return this;
}

void *md::BaseMapTileDataRenderable::adjustZOffset(void *this, float a2)
{
  unint64_t v2 = this[1];
  unint64_t v3 = this[8];
  *(float *)(this[9] + 336) = a2;
  if (v3 > v2) {
    unint64_t v2 = v3;
  }
  this[7] = 0;
  this[8] = v2;
  return this;
}

float md::DaVinciGroundSettings::valueForZoomLevel<float>(void *a1, unsigned int a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  float v3 = 1.0;
  if (v2)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      uint64_t v5 = 4;
      if (*(void *)&v2 <= 4uLL) {
        uint64_t v5 = 4uLL % *(void *)&v2;
      }
    }
    else
    {
      uint64_t v5 = (v2.i8[0] - 1) & 4;
    }
    uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      unint64_t v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          uint64_t v8 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v10 = v7[1];
            if (v10 == 4)
            {
              if (*((_DWORD *)v7 + 4) == 4) {
                goto LABEL_22;
              }
            }
            else if ((v10 & v8) != v5)
            {
              return v3;
            }
            unint64_t v7 = (uint64_t *)*v7;
            if (!v7) {
              return v3;
            }
          }
        }
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == 4)
          {
            if (*((_DWORD *)v7 + 4) == 4)
            {
LABEL_22:
              if (!*((_DWORD *)v7 + 8))
              {
                (**(void (***)(uint64_t *__return_ptr, float))v7[3])(&v12, (float)a2);
                if ((_BYTE)v12) {
                  return *((float *)&v12 + 1);
                }
              }
              return v3;
            }
          }
          else
          {
            if (v9 >= *(void *)&v2) {
              v9 %= *(void *)&v2;
            }
            if (v9 != v5) {
              return v3;
            }
          }
          unint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
  return v3;
}

void *gms::ZoomablePropertyStore<float>::getProperty@<X0>(void *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(unsigned char *)a2 = 0;
  unsigned int v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17) {
    unsigned int v5 = 23;
  }
  else {
    unsigned int v5 = v4;
  }
  uint64_t v6 = (void *)result[5];
  unint64_t v7 = result + 6;
  uint64_t v8 = v6;
  if (v6 != result + 6)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (void *)result[5];
    do
    {
      __int16 v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      uint64_t v10 = v12;
    }
    while (v12 != v7);
    uint64_t v8 = (void *)result[5];
    do
    {
      unint64_t v14 = v9 >> 1;
      uint64_t v15 = v8;
      if (v9 != 1)
      {
        uint64_t v17 = v9 >> 1;
        uint64_t v18 = v8;
        do
        {
          double v20 = (void *)v18[1];
          if (v20)
          {
            do
            {
              uint64_t v15 = v20;
              double v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v18[2];
              BOOL v13 = *v15 == (void)v18;
              uint64_t v18 = v15;
            }
            while (!v13);
          }
          uint64_t v18 = v15;
          BOOL v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        uint64_t v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            uint64_t v8 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v15[2];
            BOOL v13 = *v8 == (void)v15;
            uint64_t v15 = v8;
          }
          while (!v13);
        }
        unint64_t v14 = v9 + ~v14;
      }
      unint64_t v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (BOOL v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (BOOL v21 = 1), v21)) {
    uint64_t v8 = result + 6;
  }
  unsigned __int8 v22 = v5 + 1;
  uint64_t v23 = (void *)result[5];
  if (v6 != v7)
  {
    unint64_t v24 = 0;
    uint64_t v25 = (void *)result[5];
    do
    {
      double v26 = (void *)v25[1];
      if (v26)
      {
        do
        {
          double v27 = v26;
          double v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          double v27 = (void *)v25[2];
          BOOL v13 = *v27 == (void)v25;
          uint64_t v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      uint64_t v25 = v27;
    }
    while (v27 != v7);
    uint64_t v23 = (void *)result[5];
    do
    {
      unint64_t v28 = v24 >> 1;
      __double2 v29 = v23;
      if (v24 != 1)
      {
        uint64_t v31 = v24 >> 1;
        double v32 = v23;
        do
        {
          double v33 = (void *)v32[1];
          if (v33)
          {
            do
            {
              __double2 v29 = v33;
              double v33 = (void *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              __double2 v29 = (void *)v32[2];
              BOOL v13 = *v29 == (void)v32;
              double v32 = v29;
            }
            while (!v13);
          }
          double v32 = v29;
          BOOL v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        double v30 = (void *)v29[1];
        if (v30)
        {
          do
          {
            uint64_t v23 = v30;
            double v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            uint64_t v23 = (void *)v29[2];
            BOOL v13 = *v23 == (void)v29;
            __double2 v29 = v23;
          }
          while (!v13);
        }
        unint64_t v28 = v24 + ~v28;
      }
      unint64_t v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    uint64_t v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (void *)result[4]) == 0 || (float v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        unint64_t v40 = 0;
        float v41 = v6;
        do
        {
          float v42 = (void *)v41[1];
          if (v42)
          {
            do
            {
              uint64_t v43 = v42;
              float v42 = (void *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              uint64_t v43 = (void *)v41[2];
              BOOL v13 = *v43 == (void)v41;
              float v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          float v41 = v43;
        }
        while (v43 != v7);
        do
        {
          unint64_t v44 = v40 >> 1;
          uint64_t v45 = v6;
          if (v40 != 1)
          {
            uint64_t v47 = v40 >> 1;
            float v48 = v6;
            do
            {
              float v49 = (void *)v48[1];
              if (v49)
              {
                do
                {
                  uint64_t v45 = v49;
                  float v49 = (void *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  uint64_t v45 = (void *)v48[2];
                  BOOL v13 = *v45 == (void)v48;
                  float v48 = v45;
                }
                while (!v13);
              }
              float v48 = v45;
              BOOL v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 29))
          {
            unsigned int v46 = (void *)v45[1];
            if (v46)
            {
              do
              {
                uint64_t v6 = v46;
                unsigned int v46 = (void *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                uint64_t v6 = (void *)v45[2];
                BOOL v13 = *v6 == (void)v45;
                uint64_t v45 = v6;
              }
              while (!v13);
            }
            unint64_t v44 = v40 + ~v44;
          }
          unint64_t v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (BOOL v50 = v5 >= *((unsigned __int8 *)v6 + 29)) : (BOOL v50 = 1), v50))
      {
        uint64_t v6 = v7;
      }
      *(unsigned char *)a2 = 1;
      int v51 = *((_DWORD *)v6 + 8);
    }
    else
    {
      float v35 = v6;
      if (v6 != v7)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v6;
        do
        {
          uint64_t v38 = (void *)v37[1];
          if (v38)
          {
            do
            {
              float v39 = v38;
              uint64_t v38 = (void *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              float v39 = (void *)v37[2];
              BOOL v13 = *v39 == (void)v37;
              uint64_t v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          uint64_t v37 = v39;
        }
        while (v39 != v7);
        float v35 = v6;
        do
        {
          unint64_t v52 = v36 >> 1;
          uint64_t v53 = v35;
          if (v36 != 1)
          {
            uint64_t v55 = v36 >> 1;
            float v56 = v35;
            do
            {
              float v57 = (void *)v56[1];
              if (v57)
              {
                do
                {
                  uint64_t v53 = v57;
                  float v57 = (void *)*v57;
                }
                while (v57);
              }
              else
              {
                do
                {
                  uint64_t v53 = (void *)v56[2];
                  BOOL v13 = *v53 == (void)v56;
                  float v56 = v53;
                }
                while (!v13);
              }
              float v56 = v53;
              BOOL v19 = v55-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v53 + 29))
          {
            float v54 = (void *)v53[1];
            if (v54)
            {
              do
              {
                float v35 = v54;
                float v54 = (void *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                float v35 = (void *)v53[2];
                BOOL v13 = *v35 == (void)v53;
                uint64_t v53 = v35;
              }
              while (!v13);
            }
            unint64_t v52 = v36 + ~v52;
          }
          unint64_t v36 = v52;
        }
        while (v52);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 28) ? (BOOL v58 = v5 >= *((unsigned __int8 *)v35 + 29)) : (BOOL v58 = 1), v58))
      {
        float v35 = v7;
      }
      int v70 = *((_DWORD *)v35 + 8);
      if (v6 != v7)
      {
        unint64_t v59 = 0;
        BOOL v60 = v6;
        do
        {
          int v61 = (void *)v60[1];
          if (v61)
          {
            do
            {
              size_t v62 = v61;
              int v61 = (void *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              size_t v62 = (void *)v60[2];
              BOOL v13 = *v62 == (void)v60;
              BOOL v60 = v62;
            }
            while (!v13);
          }
          ++v59;
          BOOL v60 = v62;
        }
        while (v62 != v7);
        do
        {
          unint64_t v63 = v59 >> 1;
          char v64 = v6;
          if (v59 != 1)
          {
            uint64_t v66 = v59 >> 1;
            float v67 = v6;
            do
            {
              float v68 = (void *)v67[1];
              if (v68)
              {
                do
                {
                  char v64 = v68;
                  float v68 = (void *)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  char v64 = (void *)v67[2];
                  BOOL v13 = *v64 == (void)v67;
                  float v67 = v64;
                }
                while (!v13);
              }
              float v67 = v64;
              BOOL v19 = v66-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v64 + 29) <= v22)
          {
            uint64_t v65 = (void *)v64[1];
            if (v65)
            {
              do
              {
                uint64_t v6 = v65;
                uint64_t v65 = (void *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                uint64_t v6 = (void *)v64[2];
                BOOL v13 = *v6 == (void)v64;
                char v64 = v6;
              }
              while (!v13);
            }
            unint64_t v63 = v59 + ~v63;
          }
          unint64_t v59 = v63;
        }
        while (v63);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        uint64_t v6 = v7;
      }
      int v69 = *((_DWORD *)v6 + 8);
      float v71 = v34;
      uint64_t result = (void *)(*(uint64_t (**)(void *, float *, int *, int *))(*result + 48))(result, &v71, &v70, &v69);
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = v51;
  }
  return result;
}

uint64_t std::__function::__func<float (*)(float,float const&,float const&),std::allocator<float (*)(float,float const&,float const&)>,float ()(float,float const&,float const&)>::operator()(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(a1 + 8))(a3, a4, *a2);
}

float gms::lerp<float>(float *a1, float *a2, float a3)
{
  return *a1 + (float)((float)(*a2 - *a1) * a3);
}

void std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  float v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ElevationLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  float v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ElevationLogic", "", v5, 2u);
  }
}

void gss::ClientStyleState<gss::PropertyID>::queryNightMode(uint64_t a1, BOOL *a2, BOOL *a3)
{
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 16);
  unint64_t v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  }
  *a2 = *(unsigned char *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 216), 0x10001u) == 1;
  *a3 = *(unsigned char *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)(a1 + 232), 0x10001u) == 1;
  unint64_t v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if (v9)
  {
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  }
}

void sub_1A18F3B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void md::AnchorManager::~AnchorManager(md::AnchorManager *this)
{
  md::AnchorManager::~AnchorManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t **i;
  void **v3;
  char *j;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1EF531EE0;
  if (*((void *)this + 2))
  {
    *((void *)this + 2) = 0;
    for (uint64_t i = (uint64_t **)*((void *)this + 6); i; uint64_t i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[2] + 104))(i[2]);
  }
  float v3 = (void **)((char *)this + 48);
  for (uint64_t j = (char *)this + 48; ; (*(void (**)(void))(**((void **)j + 2) + 96))(*((void *)j + 2)))
  {
    uint64_t j = *(char **)j;
    if (!j) {
      break;
    }
  }
  unsigned int v5 = *v3;
  if (*v3)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      unsigned int v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    operator delete(v7);
  }
}

void sub_1A18F3CF4(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 32);
  _Unwind_Resume(a1);
}

void md::AnchorLogic::createMercatorElevationCache(md::AnchorLogic *this)
{
}

void md::AnchorLogic::_resetExternalAnchors(md::AnchorLogic *this)
{
  if (this)
  {
    uint64_t v1 = this;
    do
    {
      id v3 = *((id *)v1 + 3);
      id v2 = v3;
      [v2 destroyAnchor];

      uint64_t v1 = *(md::AnchorLogic **)v1;
    }
    while (v1);
  }
}

void sub_1A18F3E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A18F4350(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  id v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  os_signpost_id_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(v3);
  unsigned int v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  uint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    __int16 v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      float v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        int v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      __int16 v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  *uint64_t v12 = 0xFFFFFFFF00000000;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x561A1640388A2320;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x561A1640388A2320;
    if (*(void *)&v1 <= 0x561A1640388A2320uLL) {
      uint64_t v3 = 0x561A1640388A2320uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x561A1640388A2320;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unsigned int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x561A1640388A2320)
      {
        if (v5[2] == 0x561A1640388A2320) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unsigned int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x561A1640388A2320) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unsigned int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x561A1640388A2320) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A18F48D0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A18F510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::function<void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &)>::~function((void *)(v6 - 104));
  md::DaVinciGroundRenderLayer::MaterialConstants::~MaterialConstants((md::DaVinciGroundRenderLayer::MaterialConstants *)va);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::MaterialConstants::~MaterialConstants(md::DaVinciGroundRenderLayer::MaterialConstants *this)
{
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  os_signpost_id_t v4 = (void *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 22);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 17);
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v10) {
    operator delete(v10);
  }
  __int16 v11 = (void *)*((void *)this + 12);
  if (v11)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      __int16 v11 = v12;
    }
    while (v12);
  }
  unint64_t v13 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v13) {
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 7);
  if (v14)
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 2);
  if (v17)
  {
    do
    {
      unint64_t v18 = (void *)*v17;
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = *(void **)this;
  *(void *)this = 0;
  if (v19) {
    operator delete(v19);
  }
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::~Model()
{
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  os_signpost_id_t v4 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::RampMaterialData>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v2);
  v98[0] = (uint64_t)v3;
  v98[1] = (uint64_t)v4;
  v98[2] = (uint64_t)v5;
  v98[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v96, v98);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] < v7[4] - v7[3]) {
    unint64_t v7 = v5 + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v97;
  if (v8 == v97)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v10 = (void *)result;
LABEL_97:
    void *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v96[0];
    uint64_t v12 = (void *)v96[1];
    unint64_t v13 = (void *)v96[2];
    double v93 = (void *)v96[4];
    __double2 v94 = (void *)v96[3];
    while (1)
    {
      void *v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 4 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 32 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      uint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      BOOL v60 = *(unint64_t **)(v11 + 32);
      unint64_t v14 = v9 + 1;
      __double2 v97 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v94[4];
                          if (v63 < (v94[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v94[7];
                              uint64_t v81 = v94[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v93[4];
                                  if (v63 < (v93[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v93[7];
                                      uint64_t v88 = v93[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            unint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        BOOL v60 = v14;
LABEL_10:
        __double2 v97 = v14;
      }
      uint64_t v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::RampMaterialData>(v92);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RampMaterialData>(int8x8_t *a1)
{
  uint64_t v10 = 0x741786E98487217CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x741786E98487217CLL;
    if (*(void *)&v1 <= 0x741786E98487217CuLL) {
      uint64_t v3 = 0x741786E98487217CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x741786E98487217CLL;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x741786E98487217CLL)
      {
        if (v5[2] == 0x741786E98487217CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x741786E98487217CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x741786E98487217CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A18F5928(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A18F5DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::~Model()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A18F6098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::PassToCommandBuffers &)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>,std::allocator<ecs2::ForwardToExecute<md::ita::PushLegacyRibbons>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A18F67D8(_Unwind_Exception *a1)
{
  std::function<void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::~function((void *)(v2 - 104));
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::RenderLayerProviderWrapper::mapPassID(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 == 9)
  {
    uint64_t v3 = 10;
    if (a3 == 4) {
      uint64_t v3 = 12;
    }
    if (*(unsigned char *)(a1 + 56)) {
      return 9;
    }
    else {
      return v3;
    }
  }
  return a2;
}

void ecs2::Query<md::ls::PassToCommandBuffers &>::Model<ecs2::RuntimeQuery<md::ls::PassToCommandBuffers &>>::~Model()
{
}

void *ecs2::Query<md::ls::PassToCommandBuffers &>::Model<ecs2::RuntimeQuery<md::ls::PassToCommandBuffers &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PassToCommandBuffers>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  uint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((unint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      uint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *uint64_t v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 8 * v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            uint64_t v22 = v39 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    unint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      uint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            uint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              uint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0,std::allocator<md::ita::PrepareMainPassCommandBuffers::operator()(ecs2::Query<md::ls::PassToCommandBuffers &>)::$_0>,void ()(md::ls::PassToCommandBuffers &)>::operator()(uint64_t result, void *a2)
{
  if (**(void **)(result + 8) == *a2)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(void))(***(void ***)(result + 16) + 32))(**(void **)(result + 16));
    if (result)
    {
      uint64_t v3 = result;
      uint64_t result = (*(uint64_t (**)(void))(***(void ***)(v2 + 16) + 48))(**(void **)(v2 + 16));
      *(void *)(v3 + 32) = *(void *)(result + 2608);
    }
  }
  return result;
}

uint64_t md::RenderLayerProviderWrapper::legacyRenderResources(md::RenderLayerProviderWrapper *this)
{
  return *((void *)this + 1) + 136;
}

uint64_t md::RenderLayerProviderWrapper::getCommandBuffer(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (result)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = v3[3];
    if (result < (unint64_t)((v3[4] - v4) >> 3)
      && ((uint64_t v5 = *(void *)(v4 + 8 * result)) != 0 ? (v6 = HIDWORD(result) == HIDWORD(v5)) : (v6 = 0), v6))
    {
      uint64_t v7 = v3[6] + 8 * v5;
    }
    else
    {
      uint64_t v7 = v3[7];
    }
    return *(void *)v7;
  }
  return result;
}

uint64_t md::RenderLayerProviderWrapper::getCommandBufferHandle(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(int8x8_t **)(a1 + 8);
  int8x8_t v5 = v4[13];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v9 = a3 ^ a2;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v5);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a3 ^ a2;
    if (v9 >= *(void *)&v5) {
      unint64_t v11 = v9 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v5 - 1) & v9;
  }
  unint64_t v12 = *(uint64_t ****)(*(void *)&v4[12] + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (!*v12) {
    return 0;
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v14 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v18 = v13[1];
      if (v18 == (uint64_t *)v9)
      {
        if (v13[2] == (uint64_t *)a2 && *((unsigned __int8 *)v13 + 24) == a3) {
          goto LABEL_28;
        }
      }
      else if (((unint64_t)v18 & v14) != v11)
      {
        return 0;
      }
      unint64_t v13 = (uint64_t **)*v13;
      if (!v13) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = (unint64_t)v13[1];
    if (v16 == v9) {
      break;
    }
    if (v16 >= *(void *)&v5) {
      v16 %= *(void *)&v5;
    }
    if (v16 != v11) {
      return 0;
    }
LABEL_14:
    unint64_t v13 = (uint64_t **)*v13;
    if (!v13) {
      return 0;
    }
  }
  if (v13[2] != (uint64_t *)a2 || *((unsigned __int8 *)v13 + 24) != a3) {
    goto LABEL_14;
  }
LABEL_28:
  uint64_t v19 = v13[4];
  if (a4 < v13[5] - v19) {
    return v19[a4];
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v21 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = v13[5] - v13[4];
    int v23 = 134219522;
    unint64_t v24 = a4;
    __int16 v25 = 2048;
    unint64_t v26 = a2;
    __int16 v27 = 1024;
    unsigned int v28 = a3;
    __int16 v29 = 2048;
    uint64_t v30 = v22;
    __int16 v31 = 2080;
    BOOL v32 = "false";
    __int16 v33 = 2080;
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RenderLayerProvider.hpp";
    __int16 v35 = 1024;
    int v36 = 92;
    _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "Attempting to access commandbuffer at offset:%zu for key:(%zu,%d) but only max offset of %zu is available: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v23, 0x40u);
  }

  return 0;
}

void ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>::Model<ecs2::RuntimeQuery<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>>::~Model()
{
}

uint64_t std::__function::__func<md::MapEngine::runUpdatePhase(double,BOOL)::$_1,std::allocator<md::MapEngine::runUpdatePhase(double,BOOL)::$_1>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 8) + 896);
  uint64_t v2 = v1[10];
  for (uint64_t i = v1[11]; v2 != i; v2 += 16)
    *(void *)(*(void *)(v2 + 8) + 64) = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v1[3] + 56);
  uint64_t v5 = *(void *)(v4 + 56);
  for (uint64_t j = *(void *)(v4 + 64); v5 != j; v5 += 24)
    *(void *)(*(void *)(v5 + 8) + 408) = *(void *)(v5 + 8) + 344;
  return result;
}

uint64_t md::CompositeLabeler::isBackgroundLayoutDisabled(md::CompositeLabeler *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 80))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::Labeler::isBackgroundLayoutDisabled(md::Labeler *this)
{
  return 0;
}

BOOL md::MapNavLabeler::isBackgroundLayoutDisabled(md::MapNavLabeler *this)
{
  if ((*(uint64_t (**)(md::MapNavLabeler *))(*(void *)this + 352))(this)) {
    return 1;
  }
  if (*((void *)this + 13) && *(void *)(*((void *)this + 86) + 24)) {
    return *((unsigned char *)this + 580) != 0;
  }
  return 0;
}

void *std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xB0uLL);
  *uint64_t v2 = &unk_1EF56F330;
  std::__compressed_pair_elem<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__compressed_pair_elem<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0 const&,0ul>(uint64_t result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(void *)(result + 112) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(result + 120) = *(void *)(a2 + 120);
  *(void *)(result + 128) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(result + 136) = *(void *)(a2 + 136);
  *(void *)(result + 144) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(result + 152) = *(void *)(a2 + 152);
  *(void *)(result + 160) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke_6(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v4 = *(NSObject **)(v2 + 16);
  uint64_t v5 = (void *)a1[5];
  dispatch_async(v4, v5);
}

uint64_t md::CompositeLabeler::checkNeedsOcclusionTests(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 - 8) + 112))(*(void *)(v5 - 8), a2);
    if (result) {
      break;
    }
    BOOL v7 = v5 == v3;
    v5 += 8;
  }
  while (!v7);
  return result;
}

BOOL md::MapStandardLabeler::checkNeedsOcclusionTests(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(v1 + 432);
  if (*(unsigned char *)(v2 + 20)) {
    BOOL v3 = *(float *)(v2 + 424) <= 15.0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL result = 1;
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 1232);
    BOOL v5 = !*(unsigned char *)(v1 + 3348) || v4 == 0;
    if ((v5 || !*(void *)(v4 + 272)) && (!*(unsigned char *)(v2 + 11) || *(float *)(v2 + 32) < 17.0)) {
      return 0;
    }
  }
  return result;
}

uint64_t md::MapNavLabeler::checkNeedsOcclusionTests(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 352))();
}

void std::__function::__func<md::MapEngine::prune(md::PruneLevel)::$_0,std::allocator<md::MapEngine::prune(md::PruneLevel)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 896);
  uint64_t v4 = *(gdc::LayerDataStore ***)(v3 + 80);
  for (uint64_t i = *(unsigned __int16 **)(v3 + 88); v4 != (gdc::LayerDataStore **)i; v4 += 2)
  {
    unsigned int v7 = *(unsigned __int16 *)v4 - 11;
    BOOL v8 = v7 > 0x3D;
    uint64_t v9 = (1 << v7) & 0x3000000000000003;
    if (v8 || v9 == 0) {
      double v6 = 31457280.0;
    }
    else {
      double v6 = 41943040.0;
    }
    gdc::LayerDataStore::purge(v4[1], 0, (unint64_t)(v6 * *(double *)(v3 + 384)));
  }
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*(void *)(v3 + 24) + 56));
  uint64_t v11 = *(void *)(v2 + 1120);
  char v12 = *(unsigned char *)(a1 + 16);
  unint64_t v13 = (void (**)(void **))&unk_1EF56F528;
  unint64_t v17 = (void (**)(void **))&unk_1EF56F528;
  char v18 = v12;
  uint64_t v19 = (void **)&v17;
  uint64_t v14 = *(void **)(v11 + 24);
  if (!v14) {
    goto LABEL_19;
  }
  uint64_t v16 = v14[5];
  unint64_t v15 = (void **)&v17;
  while (1)
  {
    (*((void (**)(void **, uint64_t *))*v15 + 6))(v15, &v16);
    uint64_t v14 = (void *)*v14;
    unint64_t v15 = v19;
    if (!v14) {
      break;
    }
    uint64_t v16 = v14[5];
    if (!v19)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      break;
    }
  }
  if (v15 == (void **)&v17)
  {
    unint64_t v13 = v17;
LABEL_19:
    v13[4]((void **)&v17);
    return;
  }
  if (v15) {
    (*((void (**)(void **))*v15 + 5))(v15);
  }
}

void sub_1A18F743C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t std::__function::__func<md::MapEngine::_postRender(double)::$_0,std::allocator<md::MapEngine::_postRender(double)::$_0>,void ()(void)>::operator()(uint64_t a1, const Camera *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 1120);
  if (!*(unsigned char *)(v4 + 82)
    || (float v5 = gdc::DisplayZoomLevel::centerZoomLevel(*(gdc::DisplayZoomLevel **)(v3 + 1064), a2),
        unint64_t v6 = *(void *)(v4 + 88),
        v6 == 1)
    || (v6 % *(void *)(v4 + 112) ? (BOOL v7 = v5 < 2.0) : (BOOL v7 = 1), v7))
  {
    uint64_t v8 = *(void *)(v3 + 896);
    unint64_t v9 = *(void *)(v8 + 312);
    double v10 = 9.0;
    if (v9 >= 0x201) {
      double v10 = (double)(2 * (4 / (v9 >> 9))) + 1.0;
    }
    uint64_t v11 = *(gdc::LayerDataStore ***)(v8 + 80);
    char v12 = *(unsigned __int16 **)(v8 + 88);
    if (v11 != (gdc::LayerDataStore **)v12)
    {
      if (v9 <= 0x200) {
        unint64_t v9 = 512;
      }
      double v13 = (double)((unint64_t)(v10 + *(double *)(a1 + 24) / (double)v9)
                   * (unint64_t)(v10 + *(double *)(a1 + 32) / (double)v9));
      do
      {
        unsigned int v15 = *(unsigned __int16 *)v11 - 11;
        BOOL v16 = v15 > 0x3D;
        uint64_t v17 = (1 << v15) & 0x3000000000000003;
        if (v16 || v17 == 0) {
          double v14 = 31457280.0;
        }
        else {
          double v14 = 41943040.0;
        }
        gdc::LayerDataStore::purge(v11[1], (unint64_t)(*(double *)(v8 + 384) * v13), (unint64_t)(v14 * *(double *)(v8 + 384)));
        v11 += 2;
      }
      while (v11 != (gdc::LayerDataStore **)v12);
    }
    gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*(void *)(v8 + 24) + 56));
  }
  v64[0] = &unk_1EF57EE20;
  v64[1] = v3;
  uint64_t v65 = v64;
  v62[0] = &unk_1EF57EDD8;
  v62[1] = v3;
  unint64_t v63 = v62;
  uint64_t v67 = v66;
  v66[0] = &unk_1EF57EDD8;
  v66[1] = v3;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v19 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v20 = v19;
  os_signpost_id_t v21 = *(void *)(v3 + 1216);
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v21, "RunLogicAfter", "", buf, 2u);
  }

  if (v63 == v62)
  {
    (*(void (**)(void *))(v62[0] + 32))(v62);
  }
  else if (v63)
  {
    (*(void (**)(void))(*v63 + 40))();
  }
  if (v65 == v64)
  {
    (*(void (**)(void *))(v64[0] + 32))(v64);
  }
  else if (v65)
  {
    (*(void (**)(void))(*v65 + 40))();
  }
  uint64_t v22 = *(void *)(v3 + 1120);
  int v23 = *(md::LayoutContext **)(v3 + 1088);
  unint64_t v24 = *(void **)(v3 + 920);
  v70[0] = &unk_1EF56F498;
  v70[1] = v23;
  uint64_t v71 = v70;
  v68[0] = &unk_1EF56F4E0;
  v68[1] = v23;
  uint64_t v69 = v68;
  uint64_t v74 = buf;
  *(void *)std::string buf = &unk_1EF56F4E0;
  unint64_t v73 = v23;
  std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()((uint64_t)v70);
  if (v69 == v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
  }
  else if (v69)
  {
    (*(void (**)(void))(*v69 + 40))();
  }
  if (v71 == v70)
  {
    (*(void (**)(void *))(v70[0] + 32))(v70);
  }
  else if (v71)
  {
    (*(void (**)(void))(*v71 + 40))();
  }
  uint64_t v25 = md::LayoutContext::frameState(v23);
  float v27 = gdc::DisplayZoomLevel::centerZoomLevel((gdc::DisplayZoomLevel *)(v25 + 128), v26);
  if (*(unsigned char *)(v22 + 82))
  {
    unint64_t v28 = *(void *)(v22 + 88);
    BOOL v30 = v28 == 1 || v28 % *(void *)(v22 + 112) == 0;
  }
  else
  {
    BOOL v30 = 1;
  }
  char v31 = v27 < 2.0 || v30;
  {
    __cxa_atexit((void (*)(void *))std::vector<md::LogicBase *>::~vector[abi:nn180100], &md::LogicManager::executionOrder(void)const::empty, &dword_1A1780000);
  }
  BOOL v32 = (void *)(v22 + 48);
  if (!*(unsigned char *)(v22 + 72)) {
    BOOL v32 = &md::LogicManager::executionOrder(void)const::empty;
  }
  __int16 v33 = (void *)*v32;
  uint64_t v34 = (void *)v32[1];
  if ((void *)*v32 != v34)
  {
    if (v31)
    {
      do
      {
        uint64_t v45 = (void *)*v33;
        if (*(unsigned char *)(*v33 + 56))
        {
          int8x8_t v46 = (int8x8_t)v24[1];
          if (v46)
          {
            unint64_t v47 = v45[4];
            uint8x8_t v48 = (uint8x8_t)vcnt_s8(v46);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              unint64_t v49 = v45[4];
              if (v47 >= *(void *)&v46) {
                unint64_t v49 = v47 % *(void *)&v46;
              }
            }
            else
            {
              unint64_t v49 = (*(void *)&v46 - 1) & v47;
            }
            unint64_t v50 = *(void **)(*v24 + 8 * v49);
            if (v50)
            {
              uint64_t v51 = (void *)*v50;
              if (v51)
              {
                if (v48.u32[0] < 2uLL)
                {
                  uint64_t v52 = *(void *)&v46 - 1;
                  while (1)
                  {
                    uint64_t v53 = v51[1];
                    if (v47 == v53)
                    {
                      if (v51[2] == v47) {
                        goto LABEL_108;
                      }
                    }
                    else if ((v53 & v52) != v49)
                    {
                      goto LABEL_85;
                    }
                    uint64_t v51 = (void *)*v51;
                    if (!v51) {
                      goto LABEL_85;
                    }
                  }
                }
                do
                {
                  unint64_t v54 = v51[1];
                  if (v47 == v54)
                  {
                    if (v51[2] == v47)
                    {
LABEL_108:
                      uint64_t v55 = v51[5];
                      if (v55)
                      {
                        (*(void (**)(void *, md::LayoutContext *, void))(*v45 + 96))(v45, v23, v51[5]);
                        (*(void (**)(void, md::LayoutContext *, uint64_t))(*(void *)*v33 + 80))(*v33, v23, v55);
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v54 >= *(void *)&v46) {
                      v54 %= *(void *)&v46;
                    }
                    if (v54 != v49) {
                      break;
                    }
                  }
                  uint64_t v51 = (void *)*v51;
                }
                while (v51);
              }
            }
          }
        }
LABEL_85:
        ++v33;
      }
      while (v33 != v34);
    }
    else
    {
      do
      {
        __int16 v35 = (void *)*v33;
        if (*(unsigned char *)(*v33 + 56))
        {
          int8x8_t v36 = (int8x8_t)v24[1];
          if (v36)
          {
            unint64_t v37 = v35[4];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              unint64_t v39 = v35[4];
              if (v37 >= *(void *)&v36) {
                unint64_t v39 = v37 % *(void *)&v36;
              }
            }
            else
            {
              unint64_t v39 = (*(void *)&v36 - 1) & v37;
            }
            unint64_t v40 = *(void **)(*v24 + 8 * v39);
            if (v40)
            {
              uint64_t v41 = (void *)*v40;
              if (v41)
              {
                if (v38.u32[0] < 2uLL)
                {
                  uint64_t v42 = *(void *)&v36 - 1;
                  while (1)
                  {
                    uint64_t v44 = v41[1];
                    if (v37 == v44)
                    {
                      if (v41[2] == v37) {
                        goto LABEL_83;
                      }
                    }
                    else if ((v44 & v42) != v39)
                    {
                      goto LABEL_60;
                    }
                    uint64_t v41 = (void *)*v41;
                    if (!v41) {
                      goto LABEL_60;
                    }
                  }
                }
                do
                {
                  unint64_t v43 = v41[1];
                  if (v37 == v43)
                  {
                    if (v41[2] == v37)
                    {
LABEL_83:
                      if (v41[5]) {
                        (*(void (**)(void *, md::LayoutContext *))(*v35 + 96))(v35, v23);
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v43 >= *(void *)&v36) {
                      v43 %= *(void *)&v36;
                    }
                    if (v43 != v39) {
                      break;
                    }
                  }
                  uint64_t v41 = (void *)*v41;
                }
                while (v41);
              }
            }
          }
        }
LABEL_60:
        ++v33;
      }
      while (v33 != v34);
    }
  }
  unint64_t v56 = *(void *)(v22 + 88) + 1;
  *(void *)(v22 + 88) = v56;
  if (v56 > 0x78)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v57 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_1A1780000, v57, OS_LOG_TYPE_DEBUG, "[VLR] Reset Frame Counter", v61, 2u);
    }

    *(void *)(v22 + 88) = 1;
  }
  if (!v74) {
    goto LABEL_133;
  }
  (*(void (**)(uint8_t *))(*(void *)v74 + 48))(v74);
  if (v74 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
  }
  else if (v74)
  {
    (*(void (**)(void))(*(void *)v74 + 40))();
  }
  uint64_t v58 = *(void *)(v3 + 1136);
  if (*(unsigned char *)(v58 + 90))
  {
    if (*(unsigned char *)(v58 + 88))
    {
      *(unsigned char *)(v58 + 90) = 0;
      uint64_t v59 = *(void *)(v58 + 216);
      if (v59)
      {
        buf[0] = *(unsigned char *)(v58 + 89);
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v59 + 48))(v59, buf);
      }
    }
  }
  if (!v67)
  {
LABEL_133:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x1A18F7FECLL);
  }
  (*(void (**)(void *))(*v67 + 48))(v67);
  uint64_t result = (uint64_t)v67;
  if (v67 == v66) {
    return (*(uint64_t (**)(void *))(v66[0] + 32))(v66);
  }
  if (v67) {
    return (*(uint64_t (**)(void))(*v67 + 40))();
  }
  return result;
}

void gdc::LayerDataStore::purge(gdc::LayerDataStore *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 6);
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (v4) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v8 = (unsigned char *)*((void *)this + 8);
  unint64_t v7 = *((void *)this + 9);
  BOOL v4 = v7 >= a3;
  unint64_t v9 = v7 - a3;
  if (v4) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = *((void *)this + 1);
  if ((unsigned char *)v11 != v8)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unsigned int v15 = (void *)((char *)this + 24);
    while (v14 < v6 || v13 < v10)
    {
      uint64_t v16 = *(void *)(v11 + 144);
      uint64_t v17 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v15, (unsigned __int8 *)(v11 + 16));
      if (v17)
      {
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v15, v17);
        char v18 = __p;
        if (__p)
        {
          if (v29)
          {
            if (*((unsigned char *)__p + 112)) {
              *((unsigned char *)__p + 112) = 0;
            }
            uint64_t v19 = (void *)v18[4];
            if (v19 != (void *)v18[6]) {
              free(v19);
            }
          }
          operator delete(v18);
        }
        uint64_t v8 = (unsigned char *)*((void *)this + 8);
      }
      v13 += v16;
      uint64_t v11 = *(void *)(v11 + 8);
      ++v14;
      if ((unsigned char *)v11 == v8) {
        goto LABEL_22;
      }
    }
    uint64_t v8 = (unsigned char *)v11;
LABEL_22:
    uint64_t v20 = (unsigned char *)*((void *)this + 1);
    if (v20 != v8)
    {
      uint64_t v21 = *(void *)v8;
      uint64_t v22 = *(void *)v20;
      *(void *)(v22 + 8) = *(void *)(*(void *)v8 + 8);
      **(void **)(v21 + 8) = v22;
      while (1)
      {
        int v23 = (unsigned char *)*((void *)v20 + 1);
        --*((void *)this + 2);
        unint64_t v24 = (std::__shared_weak_count *)*((void *)v20 + 17);
        if (v24)
        {
          if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v20[112]) {
          goto LABEL_28;
        }
LABEL_29:
        uint64_t v25 = (void *)*((void *)v20 + 4);
        if (v25 != *((void **)v20 + 6)) {
          free(v25);
        }
        operator delete(v20);
        uint64_t v20 = v23;
        if (v23 == v8) {
          goto LABEL_33;
        }
      }
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (!v20[112]) {
        goto LABEL_29;
      }
LABEL_28:
      v20[112] = 0;
      goto LABEL_29;
    }
LABEL_33:
    unint64_t v26 = *((void *)this + 9);
    BOOL v4 = v26 >= v13;
    unint64_t v27 = v26 - v13;
    if (!v4) {
      unint64_t v27 = 0;
    }
    *((void *)this + 9) = v27;
  }
}

float gdc::DisplayZoomLevel::centerZoomLevel(gdc::DisplayZoomLevel *this, const Camera *a2)
{
  switch(*(unsigned char *)this)
  {
    case 0:
    case 1:
    case 3:
      double v3 = *((double *)this + 4) * 0.0000000249532021;
      break;
    case 2:
      double v4 = fmin(fmax(*((double *)this + 1), -1.48352986), 1.48352986);
      double v5 = *((double *)this + 4);
      long double v6 = cos(v4 + v4) * -559.82 + 111132.92;
      long double v7 = v6 + cos(v4 * 4.0) * 1.175;
      long double v8 = v7 + cos(v4 * 6.0) * -0.0023;
      double v9 = v4 * 0.5;
      long double v10 = tan(v4 * 0.5 + 0.78103484);
      double v11 = log(v10);
      long double v12 = tan(v9 + 0.789761487);
      double v3 = fabs((log(v12) - v11) * 0.159154943) * v5 / v8;
      break;
    default:
      double v3 = 0.0;
      break;
  }
  double v13 = *((double *)this + 46);
  double v14 = *((double *)this + 47);
  if (v13 >= v14)
  {
    double v20 = *((double *)this + 57);
  }
  else
  {
    double v15 = v14 * v13;
    double v16 = v13 / v14;
    if (v15 <= 0.0) {
      double v17 = 1.0;
    }
    else {
      double v17 = v16;
    }
    long double v18 = tan(*((double *)this + 57) * 0.5);
    long double v19 = atan(v17 * v18);
    double v20 = v19 + v19;
  }
  long double v21 = tan(v20 * 0.5);
  float v22 = log2(v3 * (v21 + v21));
  return fminf(fmaxf(-v22, 1.0), 25.0);
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v4 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  long double v8 = *(void **)(a2 + 8 * v4);
  if (!v8) {
    goto LABEL_25;
  }
  double v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0xE42D19AFCA302E68)
      {
        if (v9[2] == 0xE42D19AFCA302E68) {
          goto LABEL_23;
        }
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      double v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v10 >= a3) {
      v10 %= a3;
    }
    if (v10 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    double v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (v9[2] != 0xE42D19AFCA302E68) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v13 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v13 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v13 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  double v14 = *(void **)(a2 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  double v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0x8BD499FBD96FBB9ELL)
      {
        if (v15[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      double v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 0x8BD499FBD96FBB9ELL)
    {
      if (v16 >= a3) {
        v16 %= a3;
      }
      if (v16 != v13) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v15[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      double v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v6 = *(void *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v19 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v19 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v19 = (a3 - 1) & 0x1AF456233693CD46;
  }
  double v20 = *(void **)(a2 + 8 * v19);
  if (!v20) {
    goto LABEL_71;
  }
  long double v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v21[2] == 0x1AF456233693CD46) {
          goto LABEL_69;
        }
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      long double v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x1AF456233693CD46)
    {
      if (v22 >= a3) {
        v22 %= a3;
      }
      if (v22 != v19) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v21[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      long double v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v5 = *(void *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v25 = 0x13043386C0978CC2;
    if (a3 <= 0x13043386C0978CC2) {
      uint64_t v25 = 0x13043386C0978CC2 % a3;
    }
  }
  else
  {
    uint64_t v25 = (a3 - 1) & 0x13043386C0978CC2;
  }
  unint64_t v26 = *(void **)(a2 + 8 * v25);
  if (!v26) {
    goto LABEL_94;
  }
  unint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0x13043386C0978CC2)
      {
        if (v27[2] == 0x13043386C0978CC2) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      unint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0x13043386C0978CC2) {
      break;
    }
    if (v28 >= a3) {
      v28 %= a3;
    }
    if (v28 != v25) {
      goto LABEL_94;
    }
LABEL_81:
    unint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_94;
    }
  }
  if (v27[2] != 0x13043386C0978CC2) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0x13043386C0978CC2)
  {
LABEL_94:
    uint64_t v31 = 0;
    goto LABEL_95;
  }
  uint64_t v31 = *(void *)(v30 + 32);
LABEL_95:
  *uint64_t result = v7;
  result[1] = v6;
  result[2] = v5;
  result[3] = v31;
  return result;
}

void std::__function::__func<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::MapEngine::_postRender(double)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(v1 + 1216);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RunLogicAfter", "", v5, 2u);
  }
}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LogicManagerRunLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LogicManagerRunLogic", "", v5, 2u);
  }
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_209;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  unint64_t v13 = *(void **)(a2 + 8 * v4);
  if (!v13) {
    goto LABEL_25;
  }
  double v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v16 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      double v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == 0x1AF456233693CD46) {
      break;
    }
    if (v15 >= a3) {
      v15 %= a3;
    }
    if (v15 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    double v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_25;
    }
  }
  if (v14[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v9 = *(void *)(v17 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v9 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v18 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v18 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_48;
  }
  double v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x8BD499FBD96FBB9ELL)
      {
        if (v20[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_48;
      }
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v21 = v20[1];
    if (v21 != 0x8BD499FBD96FBB9ELL)
    {
      if (v21 >= a3) {
        v21 %= a3;
      }
      if (v21 != v18) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v20[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v8 = *(void *)(v23 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v8 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v24 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v24 = 0x1B8B241A8D896A1DLL % a3;
    }
  }
  else
  {
    uint64_t v24 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  uint64_t v25 = *(void **)(a2 + 8 * v24);
  if (!v25) {
    goto LABEL_71;
  }
  unint64_t v26 = (void *)*v25;
  if (!v26) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v28 = v26[1];
      if (v28 == 0x1B8B241A8D896A1DLL)
      {
        if (v26[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_69;
        }
      }
      else if ((v28 & (a3 - 1)) != v24)
      {
        goto LABEL_71;
      }
      unint64_t v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v27 = v26[1];
    if (v27 != 0x1B8B241A8D896A1DLL)
    {
      if (v27 >= a3) {
        v27 %= a3;
      }
      if (v27 != v24) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v26[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_58:
      unint64_t v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v29 = v26[5];
  if (*(void *)(v29 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v10 = *(void *)(v29 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v10 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v30 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v30 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v30 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v31 = *(void **)(a2 + 8 * v30);
  if (!v31) {
    goto LABEL_94;
  }
  BOOL v32 = (void *)*v31;
  if (!v32) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v34 = v32[1];
      if (v34 == 0xE42D19AFCA302E68)
      {
        if (v32[2] == 0xE42D19AFCA302E68) {
          goto LABEL_92;
        }
      }
      else if ((v34 & (a3 - 1)) != v30)
      {
        goto LABEL_94;
      }
      BOOL v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v33 = v32[1];
    if (v33 != 0xE42D19AFCA302E68)
    {
      if (v33 >= a3) {
        v33 %= a3;
      }
      if (v33 != v30) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v32[2] != 0xE42D19AFCA302E68)
    {
LABEL_81:
      BOOL v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v35 = v32[5];
  if (*(void *)(v35 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v7 = *(void *)(v35 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v7 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v36 = 0xA60DDA5A69582425;
    if (a3 <= 0xA60DDA5A69582425) {
      unint64_t v36 = 0xA60DDA5A69582425 % a3;
    }
  }
  else
  {
    unint64_t v36 = (a3 - 1) & 0xA60DDA5A69582425;
  }
  unint64_t v37 = *(void **)(a2 + 8 * v36);
  if (!v37) {
    goto LABEL_117;
  }
  uint8x8_t v38 = (void *)*v37;
  if (!v38) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v40 = v38[1];
      if (v40 == 0xA60DDA5A69582425)
      {
        if (v38[2] == 0xA60DDA5A69582425) {
          goto LABEL_115;
        }
      }
      else if ((v40 & (a3 - 1)) != v36)
      {
        goto LABEL_117;
      }
      uint8x8_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_117;
      }
    }
  }
  while (2)
  {
    unint64_t v39 = v38[1];
    if (v39 != 0xA60DDA5A69582425)
    {
      if (v39 >= a3) {
        v39 %= a3;
      }
      if (v39 != v36) {
        goto LABEL_117;
      }
      goto LABEL_104;
    }
    if (v38[2] != 0xA60DDA5A69582425)
    {
LABEL_104:
      uint8x8_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_117;
      }
      continue;
    }
    break;
  }
LABEL_115:
  uint64_t v41 = v38[5];
  if (*(void *)(v41 + 8) == 0xA60DDA5A69582425)
  {
    uint64_t v11 = *(void *)(v41 + 32);
    goto LABEL_118;
  }
LABEL_117:
  uint64_t v11 = 0;
LABEL_118:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v42 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v42 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v42 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  unint64_t v43 = *(void **)(a2 + 8 * v42);
  if (!v43) {
    goto LABEL_140;
  }
  uint64_t v44 = (void *)*v43;
  if (!v44) {
    goto LABEL_140;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v46 = v44[1];
      if (v46 == 0xFBD83FDA8879FF7ELL)
      {
        if (v44[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_138;
        }
      }
      else if ((v46 & (a3 - 1)) != v42)
      {
        goto LABEL_140;
      }
      uint64_t v44 = (void *)*v44;
      if (!v44) {
        goto LABEL_140;
      }
    }
  }
  while (2)
  {
    unint64_t v45 = v44[1];
    if (v45 != 0xFBD83FDA8879FF7ELL)
    {
      if (v45 >= a3) {
        v45 %= a3;
      }
      if (v45 != v42) {
        goto LABEL_140;
      }
      goto LABEL_127;
    }
    if (v44[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_127:
      uint64_t v44 = (void *)*v44;
      if (!v44) {
        goto LABEL_140;
      }
      continue;
    }
    break;
  }
LABEL_138:
  uint64_t v47 = v44[5];
  if (*(void *)(v47 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v6 = *(void *)(v47 + 32);
    goto LABEL_141;
  }
LABEL_140:
  uint64_t v6 = 0;
LABEL_141:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v48 = 0x12B1E486D3040E2CLL;
    if (a3 <= 0x12B1E486D3040E2CLL) {
      uint64_t v48 = 0x12B1E486D3040E2CLL % a3;
    }
  }
  else
  {
    uint64_t v48 = (a3 - 1) & 0x12B1E486D3040E2CLL;
  }
  unint64_t v49 = *(void **)(a2 + 8 * v48);
  if (!v49) {
    goto LABEL_163;
  }
  unint64_t v50 = (void *)*v49;
  if (!v50) {
    goto LABEL_163;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v52 = v50[1];
      if (v52 == 0x12B1E486D3040E2CLL)
      {
        if (v50[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_161;
        }
      }
      else if ((v52 & (a3 - 1)) != v48)
      {
        goto LABEL_163;
      }
      unint64_t v50 = (void *)*v50;
      if (!v50) {
        goto LABEL_163;
      }
    }
  }
  while (2)
  {
    unint64_t v51 = v50[1];
    if (v51 != 0x12B1E486D3040E2CLL)
    {
      if (v51 >= a3) {
        v51 %= a3;
      }
      if (v51 != v48) {
        goto LABEL_163;
      }
      goto LABEL_150;
    }
    if (v50[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_150:
      unint64_t v50 = (void *)*v50;
      if (!v50) {
        goto LABEL_163;
      }
      continue;
    }
    break;
  }
LABEL_161:
  uint64_t v53 = v50[5];
  if (*(void *)(v53 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v12 = *(void *)(v53 + 32);
    goto LABEL_164;
  }
LABEL_163:
  uint64_t v12 = 0;
LABEL_164:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v54 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v54 = 0x99BED48DEFBBD82BLL % a3;
    }
  }
  else
  {
    unint64_t v54 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v55 = *(void **)(a2 + 8 * v54);
  if (!v55) {
    goto LABEL_186;
  }
  unint64_t v56 = (void *)*v55;
  if (!v56) {
    goto LABEL_186;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v58 = v56[1];
      if (v58 == 0x99BED48DEFBBD82BLL)
      {
        if (v56[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_184;
        }
      }
      else if ((v58 & (a3 - 1)) != v54)
      {
        goto LABEL_186;
      }
      unint64_t v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_186;
      }
    }
  }
  while (2)
  {
    unint64_t v57 = v56[1];
    if (v57 != 0x99BED48DEFBBD82BLL)
    {
      if (v57 >= a3) {
        v57 %= a3;
      }
      if (v57 != v54) {
        goto LABEL_186;
      }
      goto LABEL_173;
    }
    if (v56[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_173:
      unint64_t v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_186;
      }
      continue;
    }
    break;
  }
LABEL_184:
  uint64_t v59 = v56[5];
  if (*(void *)(v59 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v5 = *(void *)(v59 + 32);
    goto LABEL_187;
  }
LABEL_186:
  uint64_t v5 = 0;
LABEL_187:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v60 = 0x932EE29454ABDC4ELL;
    if (a3 <= 0x932EE29454ABDC4ELL) {
      unint64_t v60 = 0x932EE29454ABDC4ELL % a3;
    }
  }
  else
  {
    unint64_t v60 = (a3 - 1) & 0x932EE29454ABDC4ELL;
  }
  uint64_t v61 = *(void **)(a2 + 8 * v60);
  if (!v61) {
    goto LABEL_209;
  }
  unint64_t v62 = (void *)*v61;
  if (!v62) {
    goto LABEL_209;
  }
  if (v3.u32[0] < 2uLL)
  {
    unint64_t v63 = a3 - 1;
    while (1)
    {
      uint64_t v65 = v62[1];
      if (v65 == 0x932EE29454ABDC4ELL)
      {
        if (v62[2] == 0x932EE29454ABDC4ELL) {
          goto LABEL_207;
        }
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_209;
      }
      unint64_t v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_209;
      }
    }
  }
  while (1)
  {
    unint64_t v64 = v62[1];
    if (v64 == 0x932EE29454ABDC4ELL) {
      break;
    }
    if (v64 >= a3) {
      v64 %= a3;
    }
    if (v64 != v60) {
      goto LABEL_209;
    }
LABEL_196:
    unint64_t v62 = (void *)*v62;
    if (!v62) {
      goto LABEL_209;
    }
  }
  if (v62[2] != 0x932EE29454ABDC4ELL) {
    goto LABEL_196;
  }
LABEL_207:
  uint64_t v66 = v62[5];
  if (*(void *)(v66 + 8) != 0x932EE29454ABDC4ELL)
  {
LABEL_209:
    uint64_t v67 = 0;
    goto LABEL_210;
  }
  uint64_t v67 = *(void *)(v66 + 32);
LABEL_210:
  *uint64_t result = v9;
  result[1] = v8;
  result[2] = v10;
  result[3] = v7;
  result[4] = v11;
  result[5] = v6;
  result[6] = v12;
  result[7] = v5;
  result[8] = v67;
  return result;
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x336A901A15BB7353)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x336A901A15BB7353)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68) {
      unint64_t v3 = 0xE42D19AFCA302E68 % a2;
    }
  }
  else
  {
    unint64_t v3 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0xE42D19AFCA302E68)
      {
        if (v6[2] == 0xE42D19AFCA302E68) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0xE42D19AFCA302E68) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x64780CBD71DF7CF5;
    if (a2 <= 0x64780CBD71DF7CF5) {
      uint64_t v11 = 0x64780CBD71DF7CF5 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x64780CBD71DF7CF5;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  unint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x64780CBD71DF7CF5)
      {
        if (v13[2] == 0x64780CBD71DF7CF5) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      unint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x64780CBD71DF7CF5)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x64780CBD71DF7CF5)
    {
LABEL_35:
      unint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x64780CBD71DF7CF5) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v4 = 0x99BED48DEFBBD82BLL % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v12 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v12 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v12 = (a3 - 1) & 0x1AF456233693CD46;
  }
  unint64_t v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  unint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      unint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x1AF456233693CD46)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      unint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v18 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v18 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  double v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x8BD499FBD96FBB9ELL)
      {
        if (v20[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      double v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    double v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *uint64_t result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint8x8_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v4 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v6 = 0x1B8B241A8D896A1DuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint8x8_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v4 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v6 = 0x1B8B241A8D896A1DuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v8 = *(void **)(a2 + 8 * v4);
  if (!v8) {
    goto LABEL_25;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= a3) {
      v10 %= a3;
    }
    if (v10 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v6 = *(void *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v13 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v13 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v13 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  uint64_t v14 = *(void **)(a2 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  unint64_t v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0xFBD83FDA8879FF7ELL)
      {
        if (v15[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_46;
        }
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 0xFBD83FDA8879FF7ELL)
    {
      if (v16 >= a3) {
        v16 %= a3;
      }
      if (v16 != v13) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v15[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_35:
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v7 = *(void *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v19 = 0x3070CB6B3C7F21D3;
    if (a3 <= 0x3070CB6B3C7F21D3) {
      uint64_t v19 = 0x3070CB6B3C7F21D3 % a3;
    }
  }
  else
  {
    uint64_t v19 = (a3 - 1) & 0x3070CB6B3C7F21D3;
  }
  double v20 = *(void **)(a2 + 8 * v19);
  if (!v20) {
    goto LABEL_71;
  }
  unint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x3070CB6B3C7F21D3)
      {
        if (v21[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_69;
        }
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x3070CB6B3C7F21D3)
    {
      if (v22 >= a3) {
        v22 %= a3;
      }
      if (v22 != v19) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v21[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_58:
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v5 = *(void *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v25 = 0xD2404CDD1F9A6950;
    if (a3 <= 0xD2404CDD1F9A6950) {
      unint64_t v25 = 0xD2404CDD1F9A6950 % a3;
    }
  }
  else
  {
    unint64_t v25 = (a3 - 1) & 0xD2404CDD1F9A6950;
  }
  unint64_t v26 = *(void **)(a2 + 8 * v25);
  if (!v26) {
    goto LABEL_94;
  }
  unint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0xD2404CDD1F9A6950)
      {
        if (v27[2] == 0xD2404CDD1F9A6950) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      unint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0xD2404CDD1F9A6950) {
      break;
    }
    if (v28 >= a3) {
      v28 %= a3;
    }
    if (v28 != v25) {
      goto LABEL_94;
    }
LABEL_81:
    unint64_t v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_94;
    }
  }
  if (v27[2] != 0xD2404CDD1F9A6950) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0xD2404CDD1F9A6950)
  {
LABEL_94:
    uint64_t v31 = 0;
    goto LABEL_95;
  }
  uint64_t v31 = *(void *)(v30 + 32);
LABEL_95:
  *uint64_t result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x64780CBD71DF7CF5;
    if (a2 <= 0x64780CBD71DF7CF5) {
      uint64_t v3 = 0x64780CBD71DF7CF5 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x64780CBD71DF7CF5;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x64780CBD71DF7CF5)
      {
        if (v6[2] == 0x64780CBD71DF7CF5) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x64780CBD71DF7CF5) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x64780CBD71DF7CF5) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x479E84E48468DB70;
    if (a2 <= 0x479E84E48468DB70) {
      uint64_t v11 = 0x479E84E48468DB70 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x479E84E48468DB70;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  unint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x479E84E48468DB70)
      {
        if (v13[2] == 0x479E84E48468DB70) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      unint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x479E84E48468DB70)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x479E84E48468DB70)
    {
LABEL_35:
      unint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x479E84E48468DB70) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_117;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v4 = 0x99BED48DEFBBD82BLL % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v9 = *(void **)(a2 + 8 * v4);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v10[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= a3) {
      v11 %= a3;
    }
    if (v11 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v8 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v8 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v14 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988) {
      uint64_t v14 = 0x7851AF310F49C988 % a3;
    }
  }
  else
  {
    uint64_t v14 = (a3 - 1) & 0x7851AF310F49C988;
  }
  uint64_t v15 = *(void **)(a2 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  unint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0x7851AF310F49C988)
      {
        if (v16[2] == 0x7851AF310F49C988) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      unint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0x7851AF310F49C988)
    {
      if (v17 >= a3) {
        v17 %= a3;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0x7851AF310F49C988)
    {
LABEL_35:
      unint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0x7851AF310F49C988)
  {
    uint64_t v7 = *(void *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v20 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v20 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v20 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  unint64_t v21 = *(void **)(a2 + 8 * v20);
  if (!v21) {
    goto LABEL_71;
  }
  unint64_t v22 = (void *)*v21;
  if (!v22) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0xFBD83FDA8879FF7ELL)
      {
        if (v22[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_69;
        }
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      unint64_t v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = v22[1];
    if (v23 != 0xFBD83FDA8879FF7ELL)
    {
      if (v23 >= a3) {
        v23 %= a3;
      }
      if (v23 != v20) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v22[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_58:
      unint64_t v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v25 = v22[5];
  if (*(void *)(v25 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v6 = *(void *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v6 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v26 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v26 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v26 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  unint64_t v27 = *(void **)(a2 + 8 * v26);
  if (!v27) {
    goto LABEL_94;
  }
  unint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0x8BD499FBD96FBB9ELL)
      {
        if (v28[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_92;
        }
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v29 = v28[1];
    if (v29 != 0x8BD499FBD96FBB9ELL)
    {
      if (v29 >= a3) {
        v29 %= a3;
      }
      if (v29 != v26) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v28[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_81:
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v5 = *(void *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v32 = 0xD77FB76AFC10A710;
    if (a3 <= 0xD77FB76AFC10A710) {
      unint64_t v32 = 0xD77FB76AFC10A710 % a3;
    }
  }
  else
  {
    unint64_t v32 = (a3 - 1) & 0xD77FB76AFC10A710;
  }
  unint64_t v33 = *(void **)(a2 + 8 * v32);
  if (!v33) {
    goto LABEL_117;
  }
  uint64_t v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0xD77FB76AFC10A710)
      {
        if (v34[2] == 0xD77FB76AFC10A710) {
          goto LABEL_115;
        }
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0xD77FB76AFC10A710) {
      break;
    }
    if (v35 >= a3) {
      v35 %= a3;
    }
    if (v35 != v32) {
      goto LABEL_117;
    }
LABEL_104:
    uint64_t v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_117;
    }
  }
  if (v34[2] != 0xD77FB76AFC10A710) {
    goto LABEL_104;
  }
LABEL_115:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) != 0xD77FB76AFC10A710)
  {
LABEL_117:
    uint64_t v38 = 0;
    goto LABEL_118;
  }
  uint64_t v38 = *(void *)(v37 + 32);
LABEL_118:
  *uint64_t result = v8;
  result[1] = v7;
  result[2] = v6;
  result[3] = v5;
  result[4] = v38;
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46) {
      uint64_t v3 = 0x1AF456233693CD46 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x1AF456233693CD46)
      {
        if (v6[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x1AF456233693CD46) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v11 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68) {
      unint64_t v11 = 0xE42D19AFCA302E68 % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0xE42D19AFCA302E68)
      {
        if (v13[2] == 0xE42D19AFCA302E68) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0xE42D19AFCA302E68)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0xE42D19AFCA302E68)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0xE42D19AFCA302E68) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x9F2276D081C2CB20;
    if (*(void *)&v4 <= 0x9F2276D081C2CB20) {
      unint64_t v6 = 0x9F2276D081C2CB20 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x9F2276D081C2CB20) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x9F2276D081C2CB20;
    if (*(void *)&v4 <= 0x9F2276D081C2CB20) {
      unint64_t v6 = 0x9F2276D081C2CB20 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x9F2276D081C2CB20) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x1AF456233693CD46 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v4 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v6 = 0x8BD499FBD96FBB9ELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x1AF456233693CD46 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v4 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v6 = 0x8BD499FBD96FBB9ELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x4927EB92E562CC46)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x88B81689974D86F3 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x12B1E486D3040E2CLL;
    if (*(void *)&v4 <= 0x12B1E486D3040E2CuLL) {
      uint64_t v6 = 0x12B1E486D3040E2CuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x12B1E486D3040E2CLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x88B81689974D86F3 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x12B1E486D3040E2CLL;
    if (*(void *)&v4 <= 0x12B1E486D3040E2CuLL) {
      uint64_t v6 = 0x12B1E486D3040E2CuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x12B1E486D3040E2CLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

void md::MeshRenderableLogic::prune(uint64_t a1)
{
  if (*(void *)(a1 + 320))
  {
    uint8x8_t v2 = *(void **)(a1 + 312);
    if (v2)
    {
      do
      {
        uint8x8_t v5 = (void *)*v2;
        uint64_t v6 = (void *)v2[3];
        if (v6)
        {
          v2[4] = v6;
          operator delete(v6);
        }
        operator delete(v2);
        uint8x8_t v2 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 312) = 0;
    uint64_t v3 = *(void *)(a1 + 304);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 296) + 8 * i) = 0;
    }
    *(void *)(a1 + 320) = 0;
  }
  *(unsigned char *)(a1 + 416) = 1;
}

void md::PendingSceneLogic::prune(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  unint64_t prime = vcvtps_u32_f32(256.0 / *(float *)(v1 + 56));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v3 = *(int8x8_t *)(v1 + 32);
  if (prime > *(void *)&v3) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v3)
  {
    unint64_t v4 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 48) / *(float *)(v1 + 56));
    if (*(void *)&v3 < 3uLL || (uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      unint64_t v4 = std::__next_prime(v4);
    }
    else
    {
      uint64_t v6 = 1 << -(char)__clz(v4 - 1);
      if (v4 >= 2) {
        unint64_t v4 = v6;
      }
    }
    if (prime <= v4) {
      unint64_t prime = v4;
    }
    if (prime < *(void *)&v3)
    {
LABEL_16:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v1 + 24, prime);
    }
  }
}

void md::OverlaysLogic::prune(uint64_t a1, int a2)
{
  uint8x8_t v2 = *(void **)(a1 + 688);
  if (a2)
  {
    for (; v2; uint8x8_t v2 = (void *)*v2)
    {
      uint64_t v3 = v2[3];
      uint64_t v4 = v2[4];
      while (v3 != v4)
      {
        uint64_t v5 = *(void *)(v3 + 24);
        if (!v5) {
          return;
        }
        do
        {
          unint64_t v7 = *(uint64_t **)(v3 + 16);
          uint64_t v6 = *(void *)(v3 + 24);
          uint64_t v8 = *v7;
          *(void *)(v8 + 8) = v7[1];
          *(void *)v7[1] = v8;
          *(void *)(v3 + 24) = v6 - 1;
          uint64_t v9 = (std::__shared_weak_count *)v7[3];
          if (v9)
          {
            if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          --v5;
          operator delete(v7);
        }
        while (v5);
        v3 += 32;
      }
    }
  }
  else
  {
    for (; v2; uint8x8_t v2 = (void *)*v2)
    {
      uint64_t v10 = v2[3];
      uint64_t v11 = v2[4];
      while (v10 != v11)
      {
        unint64_t v12 = *(void *)(v10 + 24);
        if (v12 < 0xB) {
          return;
        }
        unint64_t v13 = v12 - 10;
        do
        {
          uint64_t v15 = *(uint64_t **)(v10 + 16);
          uint64_t v14 = *(void *)(v10 + 24);
          uint64_t v16 = *v15;
          *(void *)(v16 + 8) = v15[1];
          *(void *)v15[1] = v16;
          *(void *)(v10 + 24) = v14 - 1;
          unint64_t v17 = (std::__shared_weak_count *)v15[3];
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          --v13;
          operator delete(v15);
        }
        while (v13);
        v10 += 32;
      }
    }
  }
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6D730E769EC7123)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::components::MeshInstance::MeshInstance(uint64_t a1, uint64_t a2, long long *a3, char a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 36) = xmmword_1A28FC710;
  *(void *)(a1 + 52) = 0x80000000800000;
  long long v6 = *a3;
  long long v7 = a3[1];
  *(_OWORD *)(a1 + 92) = a3[2];
  *(_OWORD *)(a1 + 76) = v7;
  *(_OWORD *)(a1 + 60) = v6;
  if (*(unsigned char *)(a5 + 8))
  {
    *(void *)(a1 + 8) = *(void *)a5;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  if (a2)
  {
    uint64_t v8 = *(void *)a3;
    int v14 = *((_DWORD *)a3 + 2);
    uint64_t v13 = v8;
    uint64_t v9 = *(void *)((char *)a3 + 12);
    int v17 = *((_DWORD *)a3 + 5);
    uint64_t v16 = v9;
    uint64_t v10 = *((void *)a3 + 3);
    int v20 = *((_DWORD *)a3 + 8);
    uint64_t v19 = v10;
    uint64_t v11 = *(void *)((char *)a3 + 36);
    int v23 = *((_DWORD *)a3 + 11);
    uint64_t v22 = v11;
    int v15 = 0;
    int v18 = 0;
    int v21 = 0;
    int v24 = 1065353216;
    long long v25 = xmmword_1A28FC710;
    uint64_t v26 = 0x80000000800000;
    v27[0] = &unk_1EF57D5F0;
    v27[1] = &v25;
    v27[2] = &v13;
    unint64_t v28 = v27;
    gm::Box<float,3>::forEachCorner((uint64_t *)(a2 + 36), (uint64_t)v27);
    if (v28 == v27)
    {
      (*(void (**)(void *))(v27[0] + 32))(v27);
    }
    else if (v28)
    {
      (*(void (**)(void *))(*v28 + 40))(v28);
    }
    *(_OWORD *)(a1 + 36) = v25;
    *(void *)(a1 + 52) = v26;
  }
  return a1;
}

void md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)const::$_0::operator()(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v3 = a3;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  long long v7 = (uint64_t *)v6;
  if (v6[3] >= *v6 && v6[4] >= v6[1] && v6[5] >= v6[2])
  {
    if (*(unsigned __int8 *)(*(void *)a1 + 3776) - 1 > 2)
    {
      unint64_t v27 = *(double **)(a1 + 8);
      int v28 = 1 << *(unsigned char *)(a2 + 169);
      double v29 = 1.0 / (double)v28;
      uint64_t v30 = *(int *)(a2 + 176);
      int v31 = ~*(_DWORD *)(a2 + 172);
      long long v52 = 0u;
      double v54 = 0.0;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v53 = 0u;
      uint64_t v56 = 0;
      double v49 = v29;
      *(double *)&long long v52 = v29;
      double v55 = v29;
      *(double *)&long long v57 = v29 * (double)v30;
      *((double *)&v57 + 1) = v29 * (double)(v28 + v31);
      long long v58 = xmmword_1A28FCCC0;
      uint64_t v26 = &v49;
    }
    else
    {
      double v8 = *(double *)(a2 + 600);
      double v9 = *(double *)(a2 + 608);
      int v10 = 1 << *(unsigned char *)(a2 + 169);
      double v11 = 1.0 / (double)v10;
      uint64_t v12 = *(int *)(a2 + 176);
      int v13 = v10 + ~*(_DWORD *)(a2 + 172);
      *(double *)uint64_t v59 = v11 * (double)v12;
      *(double *)&v59[8] = v11 * (double)v13;
      *(double *)&v59[16] = v11 + (double)v12 * v11;
      *(double *)&v59[24] = v11 + (double)v13 * v11;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v35, (double *)v59, v8, v9);
      int v14 = *(double **)(a1 + 8);
      *((void *)&v60 + 1) = 0;
      memset(&v59[8], 0, 72);
      long long v61 = v41;
      *(double *)&long long v62 = v42;
      *((void *)&v62 + 1) = 0x3FF0000000000000;
      *(double *)uint64_t v59 = v43 - *(double *)&v41;
      *(double *)&v59[40] = v44 - *((double *)&v41 + 1);
      *(double *)&long long v60 = v45 - v42;
      double v15 = v38;
      double v16 = v39;
      double v17 = v15 + v15;
      double v18 = (v15 + v15) * v15;
      double v19 = (v16 + v16) * v16;
      double v20 = v37;
      double v21 = v20 + v20;
      double v22 = (v20 + v20) * v38;
      double v23 = (v16 + v16) * v40;
      double v24 = v39 * (v20 + v20);
      double v25 = 1.0 - (v20 + v20) * v20;
      double v49 = 1.0 - (v18 + v19);
      *(double *)&long long v50 = v23 + v22;
      *((double *)&v51 + 1) = v22 - v23;
      *(double *)&long long v52 = v25 - v19;
      *((double *)&v53 + 1) = v40 * v17 + v24;
      double v54 = v17 * v39 - v40 * v21;
      *((double *)&v50 + 1) = v24 - v40 * v17;
      *((double *)&v52 + 1) = v40 * v21 + v17 * v39;
      double v55 = v25 - v18;
      *(void *)&long long v51 = 0;
      *(void *)&long long v53 = 0;
      uint64_t v56 = 0;
      long long v57 = v35;
      *(void *)&long long v58 = v36;
      *((void *)&v58 + 1) = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v34, &v49, (double *)v59);
      uint64_t v26 = v34;
      unint64_t v27 = v14;
    }
    gm::operator*<double,4,4,4>((double *)v59, v27, v26);
    v46[0] = *(_OWORD *)v59;
    v46[1] = *(_OWORD *)&v59[16];
    v46[2] = *(_OWORD *)&v59[32];
    v46[3] = *(_OWORD *)&v59[48];
    v46[4] = *(_OWORD *)&v59[64];
    v46[5] = v60;
    v46[6] = v61;
    v46[7] = v62;
    long long v33 = *(_OWORD *)(a1 + 16);
    unint64_t v32 = (char *)operator new(0x20uLL);
    *(void *)unint64_t v32 = &unk_1EF57F018;
    *(_OWORD *)(v32 + 8) = v33;
    *((void *)v32 + 3) = v46;
    unint64_t v64 = v32;
    gm::Box<float,3>::forEachCorner(v7, (uint64_t)v63);
    (*(void (**)(char *))(*(void *)v32 + 40))(v32);
    uint64_t v3 = v48;
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A18FD7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t md::DaVinciGroundTileData::bounds(md::DaVinciGroundTileData *this)
{
  return (uint64_t)this + 1180;
}

void *gm::Box<float,3>::forEachCorner(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t *)((char *)a1 + 12);
  *(_DWORD *)&v23[8] = *((_DWORD *)a1 + 5);
  *(void *)double v23 = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 48))(v4, v23);
    *(_DWORD *)double v23 = *(_DWORD *)a1;
    *(void *)&v23[4] = a1[2];
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v23);
      int v7 = *((_DWORD *)a1 + 1);
      int v8 = *((_DWORD *)a1 + 5);
      *(_DWORD *)double v23 = *((_DWORD *)a1 + 3);
      *(_DWORD *)&v23[4] = v7;
      *(_DWORD *)&v23[8] = v8;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v23);
        int v10 = *((_DWORD *)a1 + 5);
        *(void *)double v23 = *a1;
        *(_DWORD *)&v23[8] = v10;
        uint64_t v11 = *(void *)(a2 + 24);
        if (v11)
        {
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 48))(v11, v23);
          int v12 = *((_DWORD *)a1 + 2);
          *(void *)double v23 = *(uint64_t *)((char *)a1 + 12);
          *(_DWORD *)&v23[8] = v12;
          uint64_t v13 = *(void *)(a2 + 24);
          if (v13)
          {
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 48))(v13, v23);
            int v14 = *((_DWORD *)a1 + 4);
            int v15 = *((_DWORD *)a1 + 2);
            *(_DWORD *)double v23 = *(_DWORD *)a1;
            *(_DWORD *)&v23[4] = v14;
            *(_DWORD *)&v23[8] = v15;
            uint64_t v16 = *(void *)(a2 + 24);
            if (v16)
            {
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v16 + 48))(v16, v23);
              *(_DWORD *)double v23 = *((_DWORD *)a1 + 3);
              *(void *)&v23[4] = *(uint64_t *)((char *)a1 + 4);
              uint64_t v17 = *(void *)(a2 + 24);
              if (v17)
              {
                (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 48))(v17, v23);
                uint64_t v18 = *a1;
                *(_DWORD *)&v23[8] = *((_DWORD *)a1 + 2);
                *(void *)double v23 = v18;
                uint64_t v19 = *(void *)(a2 + 24);
                if (v19) {
                  return (void *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v19 + 48))(v19, v23);
                }
              }
            }
          }
        }
      }
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::operator()(v21, v22);
}

void *std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::operator()(void *result, float *a2)
{
  double v2 = *(double *)(result[3] + 112)
     + *(double *)(result[3] + 16) * *a2
     + *(double *)(result[3] + 48) * a2[1]
     + *(double *)(result[3] + 80) * a2[2];
  uint64_t v3 = (double *)result[1];
  if (v2 < *v3 || (uint64_t v3 = (double *)result[2], v2 > *v3)) {
    *uint64_t v3 = v2;
  }
  return result;
}

float32x2_t std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::operator()(uint64_t a1, float *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  float v4 = a2[1];
  float v5 = a2[2];
  v6.i32[3] = HIDWORD(*(_OWORD *)v2);
  v6.f32[0] = (float)((float)(*(float *)(v3 + 48) + (float)(*(float *)v3 * *a2)) + (float)(*(float *)(v3 + 16) * v4))
            + (float)(*(float *)(v3 + 32) * v5);
  *(float32x2_t *)&v6.i32[1] = vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)(v3 + 52), *(float32x2_t *)(v3 + 4), *a2), *(float32x2_t *)(v3 + 20), v4), *(float32x2_t *)(v3 + 36), v5);
  float32x4_t v7 = *(float32x4_t *)v2;
  v7.f32[3] = v6.f32[0];
  int8x16_t v8 = (int8x16_t)vcgtq_f32(v7, v6);
  v6.f32[3] = v6.f32[0];
  *(int8x16_t *)uint64_t v2 = vbslq_s8(v8, (int8x16_t)v6, *(int8x16_t *)v2);
  float32x2_t result = vmaxnm_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)&v6.i32[1]);
  *(float32x2_t *)(v2 + 16) = result;
  return result;
}

uint64_t ___ZN3ggl20MetalResourceManager20onRenderDataReleasedEPNS_14RenderResourceE_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void **)(v2 + 288);
  unint64_t v4 = *(void *)(v2 + 296);
  if ((unint64_t)v3 < v4)
  {
    if (v3) {
      *uint64_t v3 = *(void *)(result + 40);
    }
    float v5 = v3 + 1;
    goto LABEL_27;
  }
  uint64_t v6 = *(void *)(v2 + 280);
  uint64_t v7 = ((uint64_t)v3 - v6) >> 3;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61) {
    abort();
  }
  uint64_t v9 = v4 - v6;
  if (v9 >> 2 > v8) {
    unint64_t v8 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    float32x2_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v2 + 304) + 16))(*(void *)(v2 + 304), 8 * v8, 8);
    uint64_t v11 = (void *)(result + 8 * v7);
    unint64_t v8 = result + v10;
    if (result) {
      void *v11 = *(void *)(v1 + 40);
    }
  }
  else
  {
    uint64_t v11 = (void *)(8 * v7);
  }
  float v5 = v11 + 1;
  uint64_t v13 = *(void *)(v2 + 280);
  uint64_t v12 = *(void *)(v2 + 288);
  if (v12 != v13)
  {
    unint64_t v14 = v12 - v13 - 8;
    if (v14 < 0x38)
    {
      uint64_t v16 = *(void *)(v2 + 288);
    }
    else if ((unint64_t)(v12 - (void)v11) < 0x20)
    {
      uint64_t v16 = *(void *)(v2 + 288);
    }
    else
    {
      uint64_t v15 = (v14 >> 3) + 1;
      uint64_t v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v17 = v11 - 2;
      uint64_t v18 = (long long *)(v12 - 16);
      uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *uint64_t v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v21 = *(void *)(v16 - 8);
      v16 -= 8;
      *--uint64_t v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    uint64_t v12 = *(void *)(v2 + 280);
  }
  *(void *)(v2 + 280) = v11;
  *(void *)(v2 + 288) = v5;
  uint64_t v22 = *(void *)(v2 + 296);
  *(void *)(v2 + 296) = v8;
  if (v12) {
    float32x2_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 304) + 40))(*(void *)(v2 + 304), v12, v22 - v12);
  }
LABEL_27:
  *(void *)(v2 + 288) = v5;
  return result;
}

void md::LabelStyle::shieldIcon(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, char a6, int a7)
{
  uint64_t v11 = (uint64_t)operator new(0x148uLL);
  uint64_t v12 = v11;
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = (atomic_ullong *)(v11 + 8);
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = &unk_1EF57FB50;
  *(_OWORD *)(v11 + 24) = 0u;
  unint64_t v14 = (md::LabelImageKey *)(v11 + 24);
  *(_OWORD *)(v11 + 40) = 0u;
  *(void *)(v11 + 56) = 0;
  {
    if (v11) {
      operator new();
    }
  }
  uint64_t v15 = mdm::Allocator::instance(void)::alloc;
  *(void *)(v12 + 144) = 0;
  uint64_t v16 = (void **)(v12 + 144);
  *(void *)(v12 + 72) = 0;
  *(void *)(v12 + 80) = 0;
  *(void *)(v12 + 64) = v15;
  *(_WORD *)(v12 + 88) = 0;
  *(void *)(v12 + 96) = v12 + 128;
  *(void *)(v12 + 104) = v12 + 128;
  *(void *)(v12 + 112) = v12 + 128;
  *(void *)(v12 + 120) = 2;
  *(unsigned char *)(v12 + 136) = 0;
  *(_DWORD *)(v12 + 137) = 16843008;
  *(unsigned char *)(v12 + 141) = 0;
  *(void *)(v12 + 152) = 0;
  *(void *)(v12 + 160) = 0;
  {
    if (v11) {
      operator new();
    }
  }
  *(void *)(v12 + 168) = mdm::Allocator::instance(void)::alloc;
  *(void *)(v12 + 176) = 0;
  *(void *)(v12 + 181) = 0;
  *(unsigned char *)(v12 + 192) = 4;
  *(void *)(v12 + 196) = 0;
  *(unsigned char *)(v12 + 204) = 0;
  *(void *)(v12 + 212) = 0xFFFF3F800000;
  *(_WORD *)(v12 + 220) = 0;
  *(_DWORD *)(v12 + 224) = 1065353216;
  *(void *)(v12 + 320) = 0;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(void *)(v12 + 288) = 0;
  v34[2] = v14;
  long long v35 = (std::__shared_weak_count *)v12;
  *(unsigned char *)(v12 + 136) = 1;
  *(_DWORD *)(v12 + 80) = *(_DWORD *)(a2 + 88);
  int v17 = *(unsigned __int8 *)(a3 + 3360);
  if (a7 == -1)
  {
    uint64_t v18 = *(void *)(a2 + 296);
    if (!v18)
    {
      uint64_t v11 = md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
      uint64_t v18 = *(void *)v11;
      *(void *)(a2 + 296) = *(void *)v11;
    }
    LOBYTE(a7) = *(unsigned char *)(v18 + 91);
  }
  if ((a7 - 1) > 8u) {
    int v19 = 0;
  }
  else {
    int v19 = dword_1A29003B0[(a7 - 1)];
  }
  long long v20 = (grl *)grl::SizeGroupMin((grl *)v11);
  int v21 = (int)v20;
  int v22 = grl::SizeGroupMax(v20);
  int v23 = v19 + v17;
  if (v19 + v17 >= v22) {
    int v23 = v22;
  }
  if (v23 <= v21) {
    LOBYTE(v23) = v21;
  }
  *(unsigned char *)(v12 + 192) = v23;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a4 + 112);
  if (v16 != a5)
  {
    char v24 = *((unsigned char *)a5 + 23);
    if (*(char *)(v12 + 167) < 0)
    {
      if (v24 >= 0) {
        double v25 = a5;
      }
      else {
        double v25 = *a5;
      }
      if (v24 >= 0) {
        size_t v26 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v26 = (size_t)a5[1];
      }
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)(v12 + 144), v25, v26);
    }
    else if ((*((unsigned char *)a5 + 23) & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)(v12 + 144), *a5, (size_t)a5[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a5;
      *(void *)(v12 + 160) = a5[2];
    }
  }
  *(void *)(v12 + 176) = a5[4];
  *(_DWORD *)(v12 + 184) = *((_DWORD *)a5 + 10);
  *(unsigned char *)(v12 + 188) = *((unsigned char *)a5 + 44);
  *(unsigned char *)(v12 + 139) = a6;
  uint64_t v27 = *(void *)(a2 + 296);
  if (!v27)
  {
    int v28 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    uint64_t v27 = *v28;
    *(void *)(a2 + 296) = *v28;
  }
  *(void *)(v12 + 196) = *(void *)(v27 + 56);
  uint64_t v29 = *(void *)(a3 + 264);
  v34[0] = v14;
  v34[1] = (md::LabelImageKey *)v12;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  md::LabelImageLoader::loadImage(a1, v29, v34);
  if (atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v30 = v35;
    if (!v35) {
      return;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    uint64_t v30 = v35;
    if (!v35) {
      return;
    }
  }
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
}

void sub_1A18FE0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::LabelStyle::pointIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, int *a7, int a8, uint64_t a9, char a10, char a11, char a12, uint64_t a13)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a3 + 3032))
  {
    uint64_t v21 = *((void *)a2 + 34);
    if (v21)
    {
      if (*(unsigned char *)(v21 + 72)) {
        goto LABEL_4;
      }
LABEL_29:
      *a1 = 0;
      a1[1] = 0;
      return;
    }
    size_t v26 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)a2);
    uint64_t v27 = *v26;
    *((void *)a2 + 34) = *v26;
    if (!*(unsigned char *)(v27 + 72)) {
      goto LABEL_29;
    }
  }
LABEL_4:
  LOBYTE(v29) = 0;
  char v30 = 0;
  if (*((unsigned char *)a7 + 4))
  {
    int v29 = *a7;
    char v30 = 1;
  }
  if (*(char *)(a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a13, *(void *)(a13 + 8));
  }
  else
  {
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)a13;
    v33.__r_.__value_.__r.__words[2] = *(void *)(a13 + 16);
  }
  uint64_t v22 = *(void *)(a13 + 48);
  if (!v22) {
    goto LABEL_12;
  }
  if (v22 != a13 + 24)
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
LABEL_12:
    long long v35 = (void *)v22;
    goto LABEL_14;
  }
  long long v35 = v34;
  (*(void (**)(uint64_t, void *))(*(void *)v22 + 24))(v22, v34);
LABEL_14:
  md::LabelStyle::pointIconImageKey(&v31, a2, a3, a4, a5, a6, (uint64_t)&v29, a8, a9, a10, a11, a12, (md::CustomImageData *)&v33);
  if (v35 != v34)
  {
    if (v35) {
      (*(void (**)(void))(*v35 + 40))();
    }
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_27;
  }
  (*(void (**)(void *))(v34[0] + 32))(v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
LABEL_27:
  }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_18:
  uint64_t v23 = *(void *)(a3 + 264);
  char v24 = (std::__shared_weak_count *)v32;
  v28[0] = v31;
  v28[1] = (md::LabelImageKey *)v32;
  if (v32) {
    atomic_fetch_add_explicit(v32 + 1, 1uLL, memory_order_relaxed);
  }
  md::LabelImageLoader::loadImage(a1, v23, v28);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  double v25 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    if (!atomic_fetch_add(v32 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1A18FE3E0(_Unwind_Exception *exception_object)
{
}

void sub_1A18FE3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A18FE408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A18FE424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void md::LabelStyle::pointIconImageKey(md::LabelImageKey **a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, char a12, md::CustomImageData *a13)
{
  int v19 = (char *)operator new(0x148uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)int v19 = &unk_1EF57FB50;
  *(_OWORD *)(v19 + 24) = 0u;
  long long v20 = (md::LabelImageKey *)(v19 + 24);
  *(_OWORD *)(v19 + 40) = 0u;
  *((void *)v19 + 7) = 0;
  {
    operator new();
  }
  uint64_t v21 = mdm::Allocator::instance(void)::alloc;
  *((void *)v19 + 9) = 0;
  *((void *)v19 + 10) = 0;
  *((void *)v19 + 8) = v21;
  *((_WORD *)v19 + 44) = 0;
  *((void *)v19 + 12) = v19 + 128;
  *((void *)v19 + 13) = v19 + 128;
  *((void *)v19 + 14) = v19 + 128;
  *((void *)v19 + 15) = 2;
  v19[136] = 0;
  *(_DWORD *)(v19 + 137) = 16843008;
  v19[141] = 0;
  *((void *)v19 + 19) = 0;
  *((void *)v19 + 20) = 0;
  *((void *)v19 + 18) = 0;
  {
    operator new();
  }
  *((void *)v19 + 21) = mdm::Allocator::instance(void)::alloc;
  *((void *)v19 + 22) = 0;
  *(void *)(v19 + 181) = 0;
  v19[192] = 4;
  *(void *)(v19 + 196) = 0;
  v19[204] = 0;
  *(void *)(v19 + 212) = 0xFFFF3F800000;
  *((_WORD *)v19 + 110) = 0;
  *((_DWORD *)v19 + 56) = 1065353216;
  *((void *)v19 + 40) = 0;
  *((_OWORD *)v19 + 15) = 0u;
  *((_OWORD *)v19 + 16) = 0u;
  *((_OWORD *)v19 + 17) = 0u;
  *((void *)v19 + 36) = 0;
  *a1 = v20;
  a1[1] = (md::LabelImageKey *)v19;
  v19[136] = 4;
  char v22 = a11;
  *((float *)v19 + 20) = md::LabelStyle::iconContentScale(a2);
  if (a12)
  {
    int v24 = *(unsigned __int8 *)(a3 + 3360);
    if (a11 == -1)
    {
      uint64_t v25 = *((void *)a2 + 37);
      if (!v25)
      {
        uint64_t v23 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
        uint64_t v25 = *(void *)v23;
        *((void *)a2 + 37) = *(void *)v23;
      }
      char v22 = *(unsigned char *)(v25 + 91);
    }
    if ((v22 - 1) > 8u) {
      int v26 = 0;
    }
    else {
      int v26 = dword_1A29003B0[(v22 - 1)];
    }
    int v29 = (grl *)grl::SizeGroupMin(v23);
    int v30 = (int)v29;
    int v31 = grl::SizeGroupMax(v29);
    int v32 = v26 + v24;
    if (v26 + v24 >= v31) {
      int v32 = v31;
    }
    if (v32 <= v30) {
      LOBYTE(v32) = v30;
    }
    unsigned __int8 v33 = v32 - 4;
    if (v33 >= 6u) {
      LOBYTE(v34) = 1;
    }
    else {
      unint64_t v34 = 0x70707060302uLL >> (8 * v33);
    }
    goto LABEL_32;
  }
  uint64_t v27 = *((void *)a2 + 37);
  if (!v27)
  {
    uint64_t v23 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    uint64_t v27 = *(void *)v23;
    *((void *)a2 + 37) = *(void *)v23;
  }
  if (*(unsigned char *)(v27 + 88) == 8)
  {
    int v28 = 4;
    if (a11 == -1) {
      goto LABEL_23;
    }
  }
  else
  {
    int v28 = *(unsigned __int8 *)(a3 + 3360);
    if (a11 == -1) {
LABEL_23:
    }
      char v22 = *(unsigned char *)(v27 + 92);
  }
  if ((v22 - 1) > 8u) {
    int v35 = 0;
  }
  else {
    int v35 = dword_1A29003B0[(v22 - 1)];
  }
  uint64_t v36 = (grl *)grl::SizeGroupMin(v23);
  int v37 = (int)v36;
  int v38 = grl::SizeGroupMax(v36);
  LODWORD(v34) = v35 + v28;
  if (v35 + v28 >= v38) {
    LODWORD(v34) = v38;
  }
  if ((int)v34 <= v37) {
    LOBYTE(v34) = v37;
  }
LABEL_32:
  v19[192] = v34;
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(a4 + 112);
  uint64_t v39 = *((void *)a2 + 37);
  if (!v39)
  {
    double v40 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    uint64_t v39 = *v40;
    *((void *)a2 + 37) = *v40;
  }
  *(void *)(v19 + 196) = *(void *)(v39 + 56);
  v19[140] = *(unsigned char *)(v39 + 88);
  uint64_t v41 = *a5;
  if (!*a5 || (unint64_t v42 = *(unsigned __int8 *)(v41 + 33), !*(unsigned char *)(v41 + 33)))
  {
    *((_DWORD *)v19 + 54) = 0xFFFF;
    goto LABEL_41;
  }
  double v43 = *(_DWORD **)v41;
  if (*v43 == 4)
  {
    unint64_t v44 = 0;
LABEL_38:
    *((_DWORD *)v19 + 54) = LOWORD(v43[2 * v44 + 1]);
    if (!v39)
    {
LABEL_50:
      double v49 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
      uint64_t v39 = *v49;
      *((void *)a2 + 37) = *v49;
    }
  }
  else
  {
    unint64_t v44 = 0;
    uint64_t v47 = v43 + 2;
    while (v42 - 1 != v44)
    {
      int v48 = *v47;
      v47 += 2;
      ++v44;
      if (v48 == 4)
      {
        if (v44 < v42) {
          goto LABEL_38;
        }
        break;
      }
    }
    *((_DWORD *)v19 + 54) = 0xFFFF;
    if (!v39) {
      goto LABEL_50;
    }
  }
LABEL_41:
  *((_DWORD *)v19 + 56) = *(_DWORD *)(v39 + 32);
  md::LabelImageKey::setCustomImageData(v20, a13);
  int v45 = a8;
  if (!a8)
  {
    uint64_t v46 = *((void *)a2 + 37);
    if (v46)
    {
      int v45 = *(_DWORD *)(v46 + 64);
      if (!v45) {
        goto LABEL_84;
      }
    }
    else
    {
      long long v50 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
      uint64_t v51 = *v50;
      *((void *)a2 + 37) = *v50;
      int v45 = *(_DWORD *)(v51 + 64);
      if (!v45) {
        goto LABEL_84;
      }
    }
  }
  uint64_t v52 = *a5;
  if (*a5)
  {
    unint64_t v53 = *(unsigned __int8 *)(v52 + 33);
    if (*(unsigned char *)(v52 + 33))
    {
      double v54 = *(_DWORD **)v52;
      if (*v54 == v45)
      {
        unint64_t v55 = 0;
LABEL_56:
        int v56 = v54[2 * v55 + 1];
        *((_DWORD *)v19 + 21) = v45;
        *((_WORD *)v19 + 44) = v56;
        v19[138] = a8 == 0;
      }
      else
      {
        unint64_t v55 = 0;
        uint64_t v99 = v54 + 2;
        while (v53 - 1 != v55)
        {
          int v100 = *v99;
          v99 += 2;
          ++v55;
          if (v100 == v45)
          {
            if (v55 < v53) {
              goto LABEL_56;
            }
            break;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(a9 + 24))
  {
    long long v57 = (char *)*((void *)v19 + 12);
    *((void *)v19 + 13) = v57;
    long long v58 = *(int16x8_t **)a9;
    uint64_t v59 = *(int16x8_t **)(a9 + 8);
    uint64_t v60 = (uint64_t)v59->i64 - *(void *)a9;
    unint64_t v61 = v60 >> 2;
    unint64_t v62 = *((void *)v19 + 15);
    unint64_t v63 = v57;
    if (v60 >> 2 <= v62) {
      goto LABEL_76;
    }
    double v109 = a1;
    unint64_t v64 = (char *)*((void *)v19 + 14);
    unint64_t v65 = (1 << -(char)__clz(v62 + 1));
    if (v62 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v66 = 1;
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66 <= v61) {
      uint64_t v67 = v60 >> 2;
    }
    else {
      uint64_t v67 = v66;
    }
    unint64_t v63 = (char *)malloc_type_malloc(2 * v67, 0x1000040BDFB0063uLL);
    uint64_t v68 = (char *)*((void *)v19 + 12);
    uint64_t v69 = (char *)*((void *)v19 + 13);
    if (v68 != v69)
    {
      unint64_t v70 = v69 - v68 - 2;
      uint64_t v71 = v63;
      uint64_t v72 = (char *)*((void *)v19 + 12);
      if (v70 >= 0x1E)
      {
        uint64_t v71 = v63;
        uint64_t v72 = (char *)*((void *)v19 + 12);
        if ((unint64_t)(v63 - v68) >= 0x20)
        {
          uint64_t v73 = (v70 >> 1) + 1;
          unint64_t v74 = 2 * (v73 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v71 = &v63[v74];
          uint64_t v75 = (long long *)(v68 + 16);
          uint64_t v76 = v63 + 16;
          unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v78 = *v75;
            *(v76 - 1) = *(v75 - 1);
            *uint64_t v76 = v78;
            v75 += 2;
            v76 += 2;
            v77 -= 16;
          }
          while (v77);
          if (v73 == (v73 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_73;
          }
          uint64_t v72 = &v68[v74];
        }
      }
      do
      {
        __int16 v79 = *(_WORD *)v72;
        v72 += 2;
        *(_WORD *)uint64_t v71 = v79;
        v71 += 2;
      }
      while (v72 != v69);
    }
LABEL_73:
    if (v57 != v64) {
      free(v68);
    }
    *((void *)v19 + 12) = v63;
    *((void *)v19 + 15) = v67;
    a1 = v109;
LABEL_76:
    if (v58 != v59)
    {
      unint64_t v80 = v63;
      if ((unint64_t)(v60 - 4) >= 0x3C)
      {
        unint64_t v81 = ((unint64_t)(v60 - 4) >> 2) + 1;
        uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF0);
        uint64_t v83 = v58 + 2;
        double v84 = (int16x8_t *)(v63 + 16);
        uint64_t v85 = v81 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v87 = v83[-2];
          int16x8_t v86 = v83[-1];
          int16x8_t v89 = *v83;
          int16x8_t v88 = v83[1];
          v83 += 4;
          v84[-1] = vuzp1q_s16(v87, v86);
          *double v84 = vuzp1q_s16(v89, v88);
          v84 += 2;
          v85 -= 16;
        }
        while (v85);
        if (v81 == (v81 & 0x7FFFFFFFFFFFFFF0)) {
          goto LABEL_83;
        }
        unint64_t v80 = &v63[2 * (v81 & 0x7FFFFFFFFFFFFFF0)];
        long long v58 = (int16x8_t *)((char *)v58 + v82);
      }
      do
      {
        __int32 v90 = v58->i32[0];
        long long v58 = (int16x8_t *)((char *)v58 + 4);
        *(_WORD *)unint64_t v80 = v90;
        v80 += 2;
      }
      while (v58 != v59);
    }
LABEL_83:
    *((void *)v19 + 13) = &v63[2 * v61];
  }
LABEL_84:
  uint64_t v91 = *((void *)a2 + 34);
  if (!v91)
  {
    char v92 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)a2);
    uint64_t v91 = *v92;
    *((void *)a2 + 34) = *v92;
  }
  size_t v93 = *(unsigned __int8 *)(v91 + 103);
  if (*(char *)(v91 + 103) < 0)
  {
    uint64_t v94 = *(void *)(v91 + 88);
    if (a10) {
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v94 = *(unsigned __int8 *)(v91 + 103);
    if (a10) {
      goto LABEL_110;
    }
  }
  double v95 = (void **)(v91 + 80);
  double v96 = (void **)(v19 + 40);
  if (v94) {
    BOOL v97 = v96 == v95;
  }
  else {
    BOOL v97 = 1;
  }
  if (!v97)
  {
    if (v19[63] < 0)
    {
      unint64_t v102 = *(void ***)(v91 + 80);
      size_t v101 = *(void *)(v91 + 88);
      if ((v93 & 0x80u) == 0) {
        char v103 = v95;
      }
      else {
        char v103 = v102;
      }
      if ((v93 & 0x80u) == 0) {
        size_t v104 = v93;
      }
      else {
        size_t v104 = v101;
      }
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v96, v103, v104);
    }
    else if ((v93 & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v96, *(void **)(v91 + 80), *(void *)(v91 + 88));
    }
    else
    {
      long long v98 = *(_OWORD *)v95;
      *((void *)v19 + 7) = *(void *)(v91 + 96);
      *(_OWORD *)double v96 = v98;
    }
  }
LABEL_110:
  if (a6 || *(unsigned char *)(a7 + 4))
  {
    long long v112 = 0uLL;
    uint64_t v113 = 0;
    {
      operator new();
    }
    uint64_t v114 = mdm::Allocator::instance(void)::alloc;
    memset(v115, 0, 13);
    if (a6) {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v112, a6);
    }
    if (*(unsigned char *)(a7 + 4)) {
      LODWORD(v115[1]) = *(_DWORD *)a7;
    }
    double v105 = *a1;
    uint64_t v106 = (uint64_t)*a1 + 120;
    if ((long long *)v106 != &v112)
    {
      if (*((char *)v105 + 143) < 0)
      {
        if (v113 >= 0) {
          int v107 = &v112;
        }
        else {
          int v107 = (long long *)v112;
        }
        if (v113 >= 0) {
          size_t v108 = HIBYTE(v113);
        }
        else {
          size_t v108 = *((void *)&v112 + 1);
        }
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)v106, v107, v108);
      }
      else if (v113 < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v106, (void *)v112, *((size_t *)&v112 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v106 = v112;
        *(void *)(v106 + 16) = v113;
      }
    }
    *((void *)v105 + 19) = v115[0];
    *((_DWORD *)v105 + 40) = v115[1];
    *((unsigned char *)v105 + 164) = BYTE4(v115[1]);
    if (SHIBYTE(v113) < 0) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v114 + 40))(v114, v112, v113 & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_1A18FEC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t grl::SizeGroupMin(grl *this)
{
  return 0;
}

uint64_t grl::SizeGroupMax(grl *this)
{
  return 9;
}

float md::LabelStyle::iconContentScale(md::LabelStyle *this)
{
  uint64_t v2 = *(std::__shared_weak_count **)this;
  if (!*(void *)this) {
    goto LABEL_11;
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v2->__shared_weak_owners_;
  if (!shared_weak_owners || (unint64_t v4 = std::__shared_weak_count::lock(shared_weak_owners)) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = v4;
  uint64_t shared_owners = v2->__shared_owners_;
  if (shared_owners)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(shared_owners + 16);
    if (v2)
    {
      unsigned __int8 v7 = atomic_load((unsigned __int8 *)&v2[116]);
      if ((v7 & 1) == 0) {
        std::__assoc_sub_state::wait((std::__assoc_sub_state *)v2[117].__vftable);
      }
      uint64_t v8 = v2[5].__vftable;
      uint64_t v2 = (std::__shared_weak_count *)v2[5].__shared_owners_;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v2 = 0;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (!v8)
  {
LABEL_11:
    float v9 = *((float *)this + 22);
    if (!v2) {
      return v9;
    }
    goto LABEL_12;
  }
  float v12 = *(float *)&v8[5].__on_zero_shared;
  p_on_zero_shared = (float *)&v8[5].__on_zero_shared;
  uint64_t v13 = (float *)((char *)this + 88);
  if (v12 > 0.0) {
    uint64_t v13 = p_on_zero_shared;
  }
  float v9 = *v13;
  if (v2)
  {
LABEL_12:
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v9;
}

void sub_1A18FEE64(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelImageKey::setCustomImageData(md::LabelImageKey *this, const md::CustomImageData *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (uint64_t *)a2;
  }
  else {
    uint64_t v5 = *(uint64_t **)a2;
  }
  if (v4 >= 0) {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v6 = *((void *)a2 + 1);
  }
  *((void *)this + 33) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unsigned __int8 v7 = (void *)((char *)this + 272);
  uint64_t v8 = (const md::CustomImageData *)*((void *)a2 + 6);
  if (v8)
  {
    if (v8 == (const md::CustomImageData *)((char *)a2 + 24))
    {
      uint64_t v11 = v10;
      (*(void (**)(char *, void *))(*((void *)a2 + 3) + 24))((char *)a2 + 24, v10);
    }
    else
    {
      uint64_t v11 = (void *)(*(uint64_t (**)(const md::CustomImageData *))(*(void *)v8 + 16))(v8);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::swap[abi:nn180100](v10, v7);
  float32x2_t result = v11;
  if (v11 == v10) {
    return (void *)(*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (void *)(*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void *std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float32x2_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<md::LabelImageKey>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = a1 + 296;
  uint64_t v3 = *(void *)(a1 + 320);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if ((*(char *)(a1 + 287) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 263) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
  }
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
LABEL_6:
    if (!*(unsigned char *)(a1 + 204)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 240));
  if (*(unsigned char *)(a1 + 204)) {
LABEL_7:
  }
    *(unsigned char *)(a1 + 204) = 0;
LABEL_8:
  if (*(char *)(a1 + 167) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 168) + 40))(*(void *)(a1 + 168), *(void *)(a1 + 144), *(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFLL);
  }
  int v4 = *(void **)(a1 + 96);
  if (v4 != *(void **)(a1 + 112)) {
    free(v4);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v5 = *(void (**)(void))(**(void **)(a1 + 64) + 40);
    v5();
  }
}

void md::LabelImageLoader::loadImage(uint64_t *a1, uint64_t a2, md::LabelImageKey **a3)
{
  uint64_t v3 = a1;
  uint64_t v246 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(a2 + 112) + 3393));
  if (v4)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v5 = (uint64_t *)a3;
  unsigned __int8 v7 = (uint64_t *)(a2 + 32);
  uint64_t shared_weak_owners = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<md::LabelImageKey const>>((void *)(a2 + 32), *a3);
  double v204 = v5;
  if (shared_weak_owners)
  {
    float v9 = shared_weak_owners;
    uint64_t v10 = shared_weak_owners[2].__vftable;
    if (v10 != (std::__shared_weak_count_vtbl *)a2)
    {
      uint64_t v11 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(a2 + 8);
      if ((char *)v11 != (char *)v10)
      {
        uint64_t v12 = v10->~__shared_weak_count_0;
        if (v12 != v11)
        {
          uint64_t v13 = v10->~__shared_weak_count;
          *((void *)v13 + 1) = v12;
          *(void *)v10->~__shared_weak_count_0 = v13;
          uint64_t v14 = *(void *)v11;
          *(void *)(v14 + 8) = v10;
          v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
          *(void *)uint64_t v11 = v10;
          v10->~__shared_weak_count_0 = v11;
        }
      }
      ++*(_DWORD *)(a2 + 92);
      on_zero_shared_weauint64_t k = v10->__on_zero_shared_weak;
      uint64_t v15 = (std::__shared_weak_count *)v10[1].~__shared_weak_count;
      uint64_t v205 = (uint64_t)on_zero_shared_weak;
      double v206 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_12;
    }
    if (LOBYTE(shared_weak_owners[2].__shared_owners_))
    {
      ++*(_DWORD *)(a2 + 92);
      uint64_t v205 = 0;
      double v206 = 0;
LABEL_12:
      char v207 = 1;
LABEL_13:
      *uint64_t v3 = v205;
      v3[1] = (uint64_t)v206;
      if (!v206) {
        goto LABEL_335;
      }
      atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_336:
      if (v206)
      {
        if (!atomic_fetch_add(&v206->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      return;
    }
    uint64_t shared_weak_owners = (std::__shared_weak_count *)shared_weak_owners[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      uint64_t shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
      float v231 = shared_weak_owners;
      if (shared_weak_owners)
      {
        int v17 = shared_weak_owners;
        uint64_t shared_owners = v9[1].__shared_owners_;
        uint64_t v230 = shared_owners;
        if (shared_owners)
        {
          int v19 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 48, 8);
          *int v19 = 0;
          v19[1] = 0;
          v19[2] = *v204;
          uint64_t v20 = v204[1];
          void v19[3] = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          v19[4] = shared_owners;
          v19[5] = (uint64_t)v17;
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          *int v19 = a2;
          uint64_t v21 = *(uint64_t ***)(a2 + 8);
          v19[1] = (uint64_t)v21;
          *uint64_t v21 = v19;
          uint64_t v22 = *(void *)(a2 + 16) + 1;
          *(void *)(a2 + 8) = v19;
          *(void *)(a2 + 16) = v22;
          v9[2].__vftable = (std::__shared_weak_count_vtbl *)v19;
          ++*(_DWORD *)(a2 + 92);
          uint64_t v205 = shared_owners;
          double v206 = v17;
          char v207 = 1;
          goto LABEL_13;
        }
        uint64_t v5 = v204;
        if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  uint64_t v23 = 0;
  ++*(_DWORD *)(a2 + 96);
  char v207 = 0;
  *uint64_t v3 = 0;
  v3[1] = 0;
  std::string::size_type size = *v5;
  double v203 = v7;
  double v199 = v3;
  switch(*(unsigned char *)(*v5 + 112))
  {
    case 1:
      uint64_t v230 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      float v231 = _D0;
      char v232 = 0;
      __int16 v233 = 0;
      char v234 = 0;
      char v235 = 0;
      char v236 = 0;
      char v237 = 0;
      uint64_t v239 = 0;
      uint64_t v240 = grl::Allocator::instance((grl::Allocator *)shared_weak_owners);
      uint64_t v241 = 0;
      int v238 = &v239;
      uint64_t v245 = 0;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      uint64_t v36 = *v204;
      if (*(unsigned char *)(*v204 + 180))
      {
        grl::IconModifiers::setTailDirection((uint64_t)&v230, *(float *)(v36 + 184));
        uint64_t v36 = *v204;
      }
      grl::IconModifiers::setScale((grl::IconModifiers *)&v230, *(float *)(v36 + 188));
      int v37 = (long long *)(size + 120);
      if (*(char *)(size + 143) < 0)
      {
        size_t v38 = *(void *)(size + 128);
        if (v38 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        uint64_t v39 = *(const void **)(size + 120);
        if (v38 < 0x17)
        {
LABEL_35:
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v38;
          p_dst = &__dst;
          if (!v38)
          {
LABEL_90:
            p_dst->__r_.__value_.__s.__data_[v38] = 0;
            double v77 = grl::IconModifiers::setText(&v230, &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            LOBYTE(v77) = *(unsigned char *)(size + 160);
            float v78 = (float)LODWORD(v77);
            LOBYTE(v77) = *(unsigned char *)(size + 161);
            float v79 = (float)LODWORD(v77);
            LOBYTE(v77) = *(unsigned char *)(size + 162);
            float v80 = (float)LODWORD(v77);
            int v81 = *(unsigned __int8 *)(size + 163);
            if ((float)(v78 * 0.0039216) >= 0.0031308) {
              float v82 = (float)(powf(v78 * 0.0039216, 0.41667) * 1.055) + -0.055;
            }
            else {
              float v82 = v78 * 0.050667;
            }
            if ((float)(v79 * 0.0039216) >= 0.0031308) {
              float v83 = (float)(powf(v79 * 0.0039216, 0.41667) * 1.055) + -0.055;
            }
            else {
              float v83 = v79 * 0.050667;
            }
            if ((float)(v80 * 0.0039216) >= 0.0031308) {
              float v84 = (float)(powf(v80 * 0.0039216, 0.41667) * 1.055) + -0.055;
            }
            else {
              float v84 = v80 * 0.050667;
            }
            LODWORD(__dst.__r_.__value_.__l.__data_) = (v81 << 24) | ((int)(float)(v84 * 255.0) << 16) | ((int)(float)(v83 * 255.0) << 8) | (int)(float)(v82 * 255.0);
            grl::IconModifiers::setTransitLineColor((uint64_t)&v230, &__dst);
            int64_t v85 = (int64_t)(*(void *(**)(long long *__return_ptr))(**(void **)(*(void *)(*(void *)(a2 + 112) + 168)
                                                                                                  + 64)
                                                                                    + 48))(&v229);
            if ((void)v229)
            {
              unsigned int v212 = 0;
              BOOL v213 = 0;
              uint64_t v214 = 0;
              uint64_t v86 = *(void *)v229;
              uint64_t v87 = *(void *)(v229 + 8);
              int64_t v85 = v87 - *(void *)v229;
              if (v87 != *(void *)v229)
              {
                unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * (v85 >> 3);
                if (v88 > 0xAAAAAAAAAAAAAAALL) {
                  abort();
                }
                int16x8_t v89 = (char *)operator new(v85);
                uint64_t v90 = 0;
                unsigned int v212 = v89;
                BOOL v213 = v89;
                uint64_t v214 = &v89[24 * v88];
                int v37 = (long long *)(size + 120);
                do
                {
                  char v92 = (long long *)(v86 + v90);
                  int64_t v85 = (int64_t)&v89[v90];
                  if (*(char *)(v86 + v90 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v85, *(const std::string::value_type **)v92, *((void *)v92 + 1));
                  }
                  else
                  {
                    long long v91 = *v92;
                    *(void *)(v85 + 16) = *((void *)v92 + 2);
                    *(_OWORD *)int64_t v85 = v91;
                  }
                  v90 += 24;
                }
                while (v86 + v90 != v87);
                BOOL v213 = &v89[v90];
              }
            }
            else
            {
              unsigned int v212 = 0;
              BOOL v213 = 0;
              uint64_t v214 = 0;
            }
            int v217 = 1065353216;
            char v218 = 4;
            __int16 v220 = -1;
            int v219 = 0;
            char v221 = 0;
            uint64_t v223 = 0;
            uint64_t v224 = 0;
            uint64_t v222 = 0;
            uint64_t v225 = grl::Allocator::instance((grl::Allocator *)v85);
            grl::IconRequestOptions::setContentScale((float *)&v217, *(float *)(*v204 + 56));
            grl::IconRequestOptions::setSizeGroup((uint64_t)&v217, *(unsigned char *)(*v204 + 168));
            grl::IconRequestOptions::setVariant((uint64_t)&v217, *(_WORD *)(*v204 + 172));
            grl::IconRequestOptions::setDataVariant((uint64_t)&v217, *(_WORD *)(*v204 + 176));
            grl::IconRequestOptions::setCountryCode((uint64_t)&v217, *(_WORD *)(*v204 + 192));
            grl::IconRequestOptions::setResourceNames((uint64_t)&v217, (long long **)&v212);
            long long v228 = 0u;
            long long v227 = 0u;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0u;
            uint64_t v3 = v199;
            uint64_t v102 = [*(id *)(*(void *)(a2 + 112) + 96) grlIconManager];
            uint64_t v103 = *(void *)(size + 152);
            if (*(char *)(size + 143) < 0)
            {
              size_t v104 = *(void *)(size + 128);
              if (v104 > 0x7FFFFFFFFFFFFFF7) {
                abort();
              }
              double v105 = *(long long **)(size + 120);
              if (v104 < 0x17)
              {
LABEL_123:
                HIBYTE(v210) = v104;
                p_p = &__p;
                if (!v104)
                {
LABEL_133:
                  p_p[v104] = 0;
                  grl::IconManager::imageForDataIDAndText(v102, v103, (char *)&__p, (uint64_t)&v230, (float *)&v217, (unsigned int *)&__dst, &v215);
                  if (SHIBYTE(v210) < 0) {
                    operator delete(__p);
                  }
                  if (v215)
                  {
                    md::LabelImageKey::setDebugInfo((void **)*v204, (uint64_t)&__dst);
                    *(unsigned char *)(*v204 + 113) = 1;
                    double v109 = operator new(0xE0uLL);
                    v109[1] = 0;
                    v109[2] = 0;
                    *double v109 = &unk_1EF580058;
                    *(void *)&long long v110 = std::__construct_at[abi:nn180100]<md::ShieldLabelIcon,std::shared_ptr<md::LabelImageKey const> const&,std::shared_ptr<grl::IconImage> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&,md::ShieldLabelIcon*>((uint64_t)(v109 + 3), v204, (uint64_t)v215, v216, v37);
                    *((void *)&v110 + 1) = v109;
                  }
                  else
                  {
                    long long v110 = 0uLL;
                  }
                  long long v201 = v110;
                  double v111 = v216;
                  if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                  if (SHIBYTE(v228) < 0)
                  {
                    operator delete(*((void **)&v227 + 1));
                    if ((SBYTE7(v227) & 0x80000000) == 0)
                    {
LABEL_143:
                      uint64_t v112 = v222;
                      if (!v222) {
                        goto LABEL_154;
                      }
                      goto LABEL_147;
                    }
                  }
                  else if ((SBYTE7(v227) & 0x80000000) == 0)
                  {
                    goto LABEL_143;
                  }
                  operator delete((void *)__dst.__r_.__value_.__l.__size_);
                  uint64_t v112 = v222;
                  if (!v222) {
                    goto LABEL_154;
                  }
LABEL_147:
                  uint64_t v113 = v223;
                  uint64_t v114 = v112;
                  if (v223 != v112)
                  {
                    do
                    {
                      if (*(char *)(v113 - 1) < 0) {
                        operator delete(*(void **)(v113 - 24));
                      }
                      v113 -= 24;
                    }
                    while (v113 != v112);
                    uint64_t v114 = v222;
                  }
                  uint64_t v223 = v112;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v225 + 40))(v225, v114, v224 - v114);
LABEL_154:
                  double v115 = (void **)v212;
                  if (v212)
                  {
                    double v116 = (void **)v213;
                    char v117 = v212;
                    if (v213 != v212)
                    {
                      do
                      {
                        if (*((char *)v116 - 1) < 0) {
                          operator delete(*(v116 - 3));
                        }
                        v116 -= 3;
                      }
                      while (v116 != v115);
                      char v117 = v212;
                    }
                    BOOL v213 = (char *)v115;
                    operator delete(v117);
                  }
                  size_t v118 = (std::__shared_weak_count *)*((void *)&v229 + 1);
                  if (*((void *)&v229 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v229 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&v230);
                  std::string::size_type size = v199[1];
                  *(_OWORD *)double v199 = v201;
                  unsigned __int8 v7 = v203;
                  uint64_t v5 = v204;
                  if (size) {
                    goto LABEL_219;
                  }
                  goto LABEL_221;
                }
LABEL_132:
                memmove(p_p, v105, v104);
                goto LABEL_133;
              }
            }
            else
            {
              size_t v104 = *(unsigned __int8 *)(size + 143);
              double v105 = v37;
              if (v104 < 0x17) {
                goto LABEL_123;
              }
            }
            uint64_t v107 = (v104 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v104 | 7) != 0x17) {
              uint64_t v107 = v104 | 7;
            }
            uint64_t v108 = v107 + 1;
            p_p = operator new(v107 + 1);
            size_t v209 = v104;
            unint64_t v210 = v108 | 0x8000000000000000;
            long long __p = p_p;
            goto LABEL_132;
          }
LABEL_89:
          memmove(p_dst, v39, v38);
          goto LABEL_90;
        }
      }
      else
      {
        size_t v38 = *(unsigned __int8 *)(size + 143);
        uint64_t v39 = (const void *)(size + 120);
        if (v38 < 0x17) {
          goto LABEL_35;
        }
      }
      uint64_t v75 = (v38 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v75 = v38 | 7;
      }
      uint64_t v76 = v75 + 1;
      p_dst = (std::string *)operator new(v75 + 1);
      __dst.__r_.__value_.__l.__size_ = v38;
      __dst.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      goto LABEL_89;
    case 4:
    case 6:
      md::LabelImageLoader::loadIconImage((grl::Allocator *)&v230, a2, v5);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v25 = v230;
      if (v230)
      {
        int v26 = (char *)md::LabelSettingsStyleCache::styleCaps(*(md::LabelSettingsStyleCache **)(*(void *)(*(void *)(a2 + 112) + 336)
                                                                                             + 200));
        uint64_t v27 = (char *)operator new(0xC8uLL);
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        *(void *)uint64_t v27 = &unk_1EF57FD80;
        char v28 = *v26;
        *((void *)v27 + 3) = &unk_1EF554088;
        *((void *)v27 + 4) = &unk_1EF559EB8;
        *((void *)v27 + 5) = 0;
        uint64_t v29 = v204[1];
        *((void *)v27 + 7) = *v204;
        *((void *)v27 + 8) = v29;
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v27 + 72) = xmmword_1A28FC750;
        *(_OWORD *)(v27 + 88) = xmmword_1A28FC750;
        *((void *)v27 + 13) = 0;
        *((void *)v27 + 14) = 0;
        *((void *)v27 + 15) = v25 + 136;
        *((void *)v27 + 16) = v25 + 24;
        *((void *)v27 + 17) = 0;
        *((void *)v27 + 18) = 0;
        *((void *)v27 + 19) = 0;
        *((void *)v27 + 20) = 1065353216;
        v27[168] = 0;
        *((void *)v27 + 3) = &unk_1EF5343E8;
        int v30 = v231;
        *((void *)v27 + 22) = v25;
        *((void *)v27 + 23) = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v27[192] = v28;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 24);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
        uint64_t v5 = v204;
        if (!v30)
        {
LABEL_50:
          long long v55 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
          int v56 = (std::__shared_weak_count *)v3[1];
          *(_OWORD *)uint64_t v3 = v55;
          if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_) {
            goto LABEL_221;
          }
          goto LABEL_219;
        }
      }
      else
      {
        int v30 = v231;
        uint64_t v5 = v204;
        if (!v231) {
          goto LABEL_50;
        }
      }
      if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      goto LABEL_50;
    case 5:
      uint64_t v41 = (const void *)(size + 120);
      uint64_t v230 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      float v231 = _D0;
      char v232 = 0;
      __int16 v233 = 0;
      char v234 = 0;
      char v235 = 0;
      char v236 = 0;
      char v237 = 0;
      uint64_t v239 = 0;
      uint64_t v240 = grl::Allocator::instance((grl::Allocator *)shared_weak_owners);
      uint64_t v241 = 0;
      int v238 = &v239;
      uint64_t v245 = 0;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      double v198 = (long long *)(size + 120);
      if (*(char *)(size + 143) < 0)
      {
        size_t v43 = *(void *)(size + 128);
        if (v43 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        uint64_t v41 = *(const void **)(size + 120);
        if (v43 < 0x17)
        {
LABEL_39:
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43;
          unint64_t v44 = &__dst;
          if (!v43) {
            goto LABEL_71;
          }
LABEL_70:
          memmove(v44, v41, v43);
LABEL_71:
          v44->__r_.__value_.__s.__data_[v43] = 0;
          double v65 = grl::IconModifiers::setText(&v230, &__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          LOBYTE(v65) = *(unsigned char *)(size + 160);
          float v66 = (float)LODWORD(v65);
          LOBYTE(v65) = *(unsigned char *)(size + 161);
          float v67 = (float)LODWORD(v65);
          LOBYTE(v65) = *(unsigned char *)(size + 162);
          float v68 = (float)LODWORD(v65);
          int v69 = *(unsigned __int8 *)(size + 163);
          if ((float)(v66 * 0.0039216) >= 0.0031308) {
            float v70 = (float)(powf(v66 * 0.0039216, 0.41667) * 1.055) + -0.055;
          }
          else {
            float v70 = v66 * 0.050667;
          }
          if ((float)(v67 * 0.0039216) >= 0.0031308) {
            float v71 = (float)(powf(v67 * 0.0039216, 0.41667) * 1.055) + -0.055;
          }
          else {
            float v71 = v67 * 0.050667;
          }
          if ((float)(v68 * 0.0039216) >= 0.0031308) {
            float v72 = (float)(powf(v68 * 0.0039216, 0.41667) * 1.055) + -0.055;
          }
          else {
            float v72 = v68 * 0.050667;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = (v69 << 24) | ((int)(float)(v72 * 255.0) << 16) | ((int)(float)(v71 * 255.0) << 8) | (int)(float)(v70 * 255.0);
          uint64_t v73 = (grl::Allocator *)grl::IconModifiers::setTransitLineColor((uint64_t)&v230, &__dst);
          long long v229 = 0uLL;
          long long v228 = 0u;
          long long v227 = 0u;
          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0u;
          uint64_t v5 = v204;
          if (*(char *)(*v204 + 39) < 0) {
            uint64_t v74 = *(void *)(*v204 + 24);
          }
          else {
            uint64_t v74 = *(unsigned __int8 *)(*v204 + 39);
          }
          long long v200 = 0uLL;
          if (!v74)
          {
LABEL_209:
            if (SHIBYTE(v228) < 0)
            {
              operator delete(*((void **)&v227 + 1));
              if ((SBYTE7(v227) & 0x80000000) == 0)
              {
LABEL_211:
                double v139 = (std::__shared_weak_count *)*((void *)&v229 + 1);
                if (!*((void *)&v229 + 1)) {
                  goto LABEL_217;
                }
                goto LABEL_215;
              }
            }
            else if ((SBYTE7(v227) & 0x80000000) == 0)
            {
              goto LABEL_211;
            }
            operator delete((void *)__dst.__r_.__value_.__l.__size_);
            double v139 = (std::__shared_weak_count *)*((void *)&v229 + 1);
            if (!*((void *)&v229 + 1))
            {
LABEL_217:
              grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&v230);
              goto LABEL_218;
            }
LABEL_215:
            if (!atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
            goto LABEL_217;
          }
          int v217 = 1065353216;
          char v218 = 4;
          __int16 v220 = -1;
          int v219 = 0;
          char v221 = 0;
          uint64_t v223 = 0;
          uint64_t v224 = 0;
          uint64_t v222 = 0;
          uint64_t v225 = grl::Allocator::instance(v73);
          grl::IconRequestOptions::setContentScale((float *)&v217, *(float *)(*v204 + 56));
          grl::IconRequestOptions::setSizeGroup((uint64_t)&v217, *(unsigned char *)(*v204 + 168));
          grl::IconRequestOptions::setVariant((uint64_t)&v217, *(_WORD *)(*v204 + 172));
          grl::IconRequestOptions::setDataVariant((uint64_t)&v217, *(_WORD *)(*v204 + 176));
          grl::IconRequestOptions::setCountryCode((uint64_t)&v217, *(_WORD *)(*v204 + 192));
          (*(void (**)(uint64_t **__return_ptr))(**(void **)(*(void *)(*(void *)(a2 + 112) + 168)
                                                                       + 64)
                                                         + 48))(&v215);
          if (v215)
          {
            unsigned int v212 = 0;
            BOOL v213 = 0;
            uint64_t v214 = 0;
            uint64_t v93 = *v215;
            uint64_t v94 = v215[1];
            int64_t v95 = v94 - *v215;
            if (v94 != *v215)
            {
              unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * (v95 >> 3);
              if (v96 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              BOOL v97 = (char *)operator new(v95);
              uint64_t v98 = 0;
              unsigned int v212 = v97;
              BOOL v213 = v97;
              uint64_t v214 = &v97[24 * v96];
              do
              {
                int v100 = (long long *)(v93 + v98);
                size_t v101 = (std::string *)&v97[v98];
                if (*(char *)(v93 + v98 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v101, *(const std::string::value_type **)v100, *((void *)v100 + 1));
                }
                else
                {
                  long long v99 = *v100;
                  v101->__r_.__value_.__r.__words[2] = *((void *)v100 + 2);
                  *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v99;
                }
                v98 += 24;
              }
              while (v93 + v98 != v94);
              BOOL v213 = &v97[v98];
            }
          }
          else
          {
            unsigned int v212 = 0;
            BOOL v213 = 0;
            uint64_t v214 = 0;
          }
          grl::IconRequestOptions::setResourceNames((uint64_t)&v217, (long long **)&v212);
          uint64_t v3 = v199;
          uint64_t v119 = [*(id *)(*(void *)(a2 + 112) + 96) grlIconManager];
          double v120 = (void **)*v204;
          if (*(char *)(*v204 + 39) < 0)
          {
            size_t v122 = (size_t)v120[3];
            if (v122 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            double v121 = v120[2];
          }
          else
          {
            double v121 = v120 + 2;
            size_t v122 = *(unsigned __int8 *)(*v204 + 39);
          }
          if (v122 >= 0x17)
          {
            uint64_t v124 = (v122 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v122 | 7) != 0x17) {
              uint64_t v124 = v122 | 7;
            }
            uint64_t v125 = v124 + 1;
            double v123 = operator new(v124 + 1);
            size_t v209 = v122;
            unint64_t v210 = v125 | 0x8000000000000000;
            long long __p = v123;
          }
          else
          {
            HIBYTE(v210) = v122;
            double v123 = &__p;
            if (!v122)
            {
LABEL_180:
              *((unsigned char *)v123 + v122) = 0;
              grl::IconManager::imageForName(v119, (uint64_t)&__p, (uint64_t)&v230, (float *)&v217, &__dst, &v211);
              long long v126 = v211;
              long long v211 = 0uLL;
              double v127 = (std::__shared_weak_count *)*((void *)&v229 + 1);
              long long v229 = v126;
              if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
              double v128 = (std::__shared_weak_count *)*((void *)&v211 + 1);
              if (*((void *)&v211 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v211 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
              if (SHIBYTE(v210) < 0) {
                operator delete(__p);
              }
              double v129 = (void **)v212;
              if (v212)
              {
                double v130 = (void **)v213;
                double v131 = v212;
                if (v213 != v212)
                {
                  do
                  {
                    if (*((char *)v130 - 1) < 0) {
                      operator delete(*(v130 - 3));
                    }
                    v130 -= 3;
                  }
                  while (v130 != v129);
                  double v131 = v212;
                }
                BOOL v213 = (char *)v129;
                operator delete(v131);
              }
              double v132 = v216;
              if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
              uint64_t v133 = v222;
              if (v222)
              {
                uint64_t v134 = v223;
                uint64_t v135 = v222;
                if (v223 != v222)
                {
                  do
                  {
                    if (*(char *)(v134 - 1) < 0) {
                      operator delete(*(void **)(v134 - 24));
                    }
                    v134 -= 24;
                  }
                  while (v134 != v133);
                  uint64_t v135 = v222;
                }
                uint64_t v223 = v133;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v225 + 40))(v225, v135, v224 - v135);
              }
              uint64_t v136 = v229;
              unsigned __int8 v7 = v203;
              uint64_t v5 = v204;
              if ((void)v229)
              {
                md::LabelImageKey::setDebugInfo((void **)*v204, (uint64_t)&__dst);
                *(unsigned char *)(*v204 + 113) = 5;
                double v137 = operator new(0xE0uLL);
                v137[1] = 0;
                v137[2] = 0;
                *double v137 = &unk_1EF580058;
                *(void *)&long long v138 = std::__construct_at[abi:nn180100]<md::ShieldLabelIcon,std::shared_ptr<md::LabelImageKey const> const&,std::shared_ptr<grl::IconImage> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&,md::ShieldLabelIcon*>((uint64_t)(v137 + 3), v204, v136, *((std::__shared_weak_count **)&v229 + 1), v198);
                *((void *)&v138 + 1) = v137;
                long long v200 = v138;
              }
              goto LABEL_209;
            }
          }
          memmove(v123, v121, v122);
          goto LABEL_180;
        }
      }
      else
      {
        size_t v43 = *(unsigned __int8 *)(size + 143);
        if (v43 < 0x17) {
          goto LABEL_39;
        }
      }
      uint64_t v63 = (v43 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v63 = v43 | 7;
      }
      uint64_t v64 = v63 + 1;
      unint64_t v44 = (std::string *)operator new(v63 + 1);
      __dst.__r_.__value_.__l.__size_ = v43;
      __dst.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      goto LABEL_70;
    case 7:
      int v45 = [VKImage alloc];
      uint64_t v46 = (void *)(*v5 + 16);
      if (*(char *)(*v5 + 39) < 0) {
        uint64_t v46 = (void *)*v46;
      }
      uint64_t v47 = [NSString stringWithUTF8String:v46];
      float v48 = *(float *)(*v5 + 56);
      id v49 = *(id *)(*(void *)(a2 + 112) + 96);
      long long v50 = [v49 resourceManager];
      double v51 = v48;
      uint64_t v52 = *(void *)(*(void *)(a2 + 112) + 112);
      unint64_t v53 = *(void **)v52;
      double v54 = *(void **)(v52 + 8);
      if (v53 == v54) {
        goto LABEL_55;
      }
      while (*v53 != 0x6F66BE14E10A8F81)
      {
        v53 += 5;
        if (v53 == v54) {
          goto LABEL_59;
        }
      }
LABEL_55:
      if (v53 == v54)
      {
LABEL_59:
        uint64_t v57 = 0;
        goto LABEL_60;
      }
      uint64_t v57 = v53[3];
      long long v58 = (std::__shared_weak_count *)v53[4];
      if (!v58)
      {
LABEL_60:
        uint64_t v230 = v57;
        float v231 = 0;
        goto LABEL_61;
      }
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v230 = v57;
      float v231 = v58;
      atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
LABEL_61:
      uint64_t v59 = [(VKImage *)v45 initWithName:v47 scale:v50 resourceManager:&v230 resourceStore:v51];
      if (v231) {
        std::__shared_weak_count::__release_weak(v231);
      }

      if (v59)
      {
        *(unsigned char *)(*v5 + 113) = 4;
        uint64_t v60 = (char *)operator new(0xD0uLL);
        *((void *)v60 + 1) = 0;
        *((void *)v60 + 2) = 0;
        *(void *)uint64_t v60 = &unk_1EF52E2C8;
        unint64_t v61 = v59;
        *((void *)v60 + 4) = &unk_1EF559EB8;
        *((void *)v60 + 5) = 0;
        *((void *)v60 + 7) = 0;
        *((void *)v60 + 8) = 0;
        *(_OWORD *)(v60 + 72) = xmmword_1A28FC750;
        *(_OWORD *)(v60 + 88) = xmmword_1A28FC750;
        *(_OWORD *)(v60 + 104) = 0u;
        *(_OWORD *)(v60 + 120) = 0u;
        *(_OWORD *)(v60 + 136) = 0u;
        *((void *)v60 + 19) = 0;
        *((void *)v60 + 20) = 1065353216;
        v60[168] = 0;
        *((void *)v60 + 3) = &unk_1EF5136A8;
        *((void *)v60 + 22) = &unk_1EF559EB8;
        *((void *)v60 + 23) = v61;
        v60[200] = 0;
        *(void *)&long long v62 = v60 + 24;
        *((void *)&v62 + 1) = v60;
        long long v200 = v62;
        uint64_t v5 = v204;
      }
      else
      {
        long long v200 = 0u;
      }

LABEL_218:
      std::string::size_type size = v3[1];
      *(_OWORD *)uint64_t v3 = v200;
      if (size)
      {
LABEL_219:
        if (!atomic_fetch_add((atomic_ullong *volatile)(size + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(std::string::size_type))(*(void *)size + 16))(size);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
        }
      }
LABEL_221:
      uint64_t v23 = *v3;
      if (*v3)
      {
        *(_DWORD *)(v23 + 136) = *(_DWORD *)(*(void *)(*(void *)(a2 + 112) + 432) + 44);
        md::LabelImageLoader::enqueueIconForRendering(a2, v3);
      }
LABEL_223:
      double v140 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 48, 8);
      double v141 = v140;
      uint64_t *v140 = 0;
      v140[1] = 0;
      v140[2] = *v5;
      uint64_t v142 = v5[1];
      v140[3] = v142;
      if (v142) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v142 + 8), 1uLL, memory_order_relaxed);
      }
      v140[4] = v23;
      uint64_t v143 = v3[1];
      v140[5] = v143;
      if (v143) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v143 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t *v140 = a2;
      long double v144 = *(uint64_t ***)(a2 + 8);
      v140[1] = (uint64_t)v144;
      void *v144 = v140;
      uint64_t v145 = *(void *)(a2 + 16) + 1;
      *(void *)(a2 + 8) = v140;
      *(void *)(a2 + 16) = v145;
      if (v143) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v143 + 16), 1uLL, memory_order_relaxed);
      }
      BOOL v146 = v23 == 0;
      uint64_t v147 = *v5;
      unint64_t v148 = md::LabelImageKey::hash((md::LabelImageKey *)*v5);
      std::string::size_type v149 = v148;
      unint64_t v150 = *(void *)(a2 + 40);
      if (!v150) {
        goto LABEL_251;
      }
      uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)v150);
      v151.i16[0] = vaddlv_u8(v151);
      if (v151.u32[0] > 1uLL)
      {
        std::string::size_type size = v148;
        if (v148 >= v150) {
          std::string::size_type size = v148 % v150;
        }
      }
      else
      {
        std::string::size_type size = (v150 - 1) & v148;
      }
      __double2 v152 = *(uint64_t ***)(*v7 + 8 * size);
      if (!v152) {
        goto LABEL_251;
      }
      long double v153 = *v152;
      if (!*v152)
      {
LABEL_250:
        BOOL v146 = v23 == 0;
LABEL_251:
        *(void *)&long long v156 = v23;
        *((void *)&v156 + 1) = v143;
        long long v202 = v156;
        uint64_t v157 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 64) + 16))(*(void *)(a2 + 64), 64, 8);
        uint64_t v158 = v157;
        uint64_t v230 = v157;
        float v231 = (std::__shared_weak_count *)(a2 + 64);
        *(void *)uint64_t v157 = 0;
        *(void *)(v157 + 8) = v149;
        *(void *)(v157 + 16) = *v204;
        uint64_t v159 = v204[1];
        *(void *)(v157 + 24) = v159;
        if (v159) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v159 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v157 + 32) = v202;
        *(void *)(v157 + 48) = v141;
        *(unsigned char *)(v157 + 56) = v146;
        char v232 = 1;
        float v160 = (float)(unint64_t)(*(void *)(a2 + 72) + 1);
        float v161 = *(float *)(a2 + 80);
        long double v162 = v203;
        if (v150 && (float)(v161 * (float)v150) >= v160)
        {
LABEL_302:
          long double v184 = *(uint64_t **)(*v203 + 8 * size);
          if (v184)
          {
            *(void *)uint64_t v158 = *v184;
          }
          else
          {
            *(void *)uint64_t v158 = *(void *)(a2 + 56);
            *(void *)(a2 + 56) = v158;
            *(void *)(*(void *)(a2 + 32) + 8 * size) = a2 + 56;
            if (!*(void *)v158)
            {
LABEL_311:
              ++*(void *)(a2 + 72);
              goto LABEL_312;
            }
            unint64_t v185 = *(void *)(*(void *)v158 + 8);
            if ((v150 & (v150 - 1)) != 0)
            {
              if (v185 >= v150) {
                v185 %= v150;
              }
            }
            else
            {
              v185 &= v150 - 1;
            }
            long double v184 = (uint64_t *)(*v203 + 8 * v185);
          }
          uint64_t *v184 = v158;
          goto LABEL_311;
        }
        BOOL v163 = 1;
        if (v150 >= 3) {
          BOOL v163 = (v150 & (v150 - 1)) != 0;
        }
        unint64_t v164 = v163 | (2 * v150);
        unint64_t v165 = vcvtps_u32_f32(v160 / v161);
        if (v164 <= v165) {
          size_t prime = v165;
        }
        else {
          size_t prime = v164;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v150 = *(void *)(a2 + 40);
        if (prime <= v150)
        {
          if (prime >= v150) {
            goto LABEL_289;
          }
          unint64_t v178 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 72) / *(float *)(a2 + 80));
          if (v150 < 3
            || (uint8x8_t v179 = (uint8x8_t)vcnt_s8((int8x8_t)v150), v179.i16[0] = vaddlv_u8(v179), v179.u32[0] > 1uLL))
          {
            unint64_t v178 = std::__next_prime(v178);
          }
          else
          {
            uint64_t v180 = 1 << -(char)__clz(v178 - 1);
            if (v178 >= 2) {
              unint64_t v178 = v180;
            }
          }
          if (prime <= v178) {
            size_t prime = v178;
          }
          if (prime >= v150)
          {
            unint64_t v150 = *(void *)(a2 + 40);
LABEL_289:
            if ((v150 & (v150 - 1)) != 0)
            {
              if (v149 >= v150) {
                std::string::size_type size = v149 % v150;
              }
              else {
                std::string::size_type size = v149;
              }
            }
            else
            {
              std::string::size_type size = (v150 - 1) & v149;
            }
            goto LABEL_302;
          }
          if (!prime)
          {
            uint64_t v197 = *v203;
            *double v203 = 0;
            if (v197) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v197, 8 * *(void *)(a2 + 40));
            }
            unint64_t v150 = 0;
            *(void *)(a2 + 40) = 0;
            goto LABEL_289;
          }
        }
        uint64_t v167 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a2 + 48) + 16))(*(void *)(a2 + 48), 8 * prime, 8);
        uint64_t v168 = *v203;
        *double v203 = v167;
        if (v168) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v168, 8 * *(void *)(a2 + 40));
        }
        uint64_t v169 = 0;
        *(void *)(a2 + 40) = prime;
        do
          *(void *)(*v203 + 8 * v169++) = 0;
        while (prime != v169);
        uint64_t v171 = a2 + 56;
        long double v170 = *(void **)(a2 + 56);
        if (!v170)
        {
LABEL_288:
          unint64_t v150 = prime;
          goto LABEL_289;
        }
        size_t v172 = v170[1];
        size_t v173 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v174 = v172 & v173;
          *(void *)(*v203 + 8 * v174) = v171;
          for (uint64_t i = (void *)*v170; *v170; uint64_t i = (void *)*v170)
          {
            size_t v176 = i[1] & v173;
            if (v176 == v174)
            {
              long double v170 = i;
            }
            else if (*(void *)(*v203 + 8 * v176))
            {
              void *v170 = *i;
              uint64_t v177 = 8 * v176;
              *uint64_t i = **(void **)(*v203 + v177);
              **(void **)(*v203 + v177) = i;
            }
            else
            {
              *(void *)(*v203 + 8 * v176) = v170;
              long double v170 = i;
              size_t v174 = v176;
            }
          }
          goto LABEL_288;
        }
        if (v172 >= prime) {
          v172 %= prime;
        }
        *(void *)(*v203 + 8 * v172) = v171;
        int v181 = (void *)*v170;
        if (!*v170) {
          goto LABEL_288;
        }
        while (1)
        {
          size_t v183 = v181[1];
          if (v183 >= prime) {
            v183 %= prime;
          }
          if (v183 != v172)
          {
            if (!*(void *)(*v203 + 8 * v183))
            {
              *(void *)(*v203 + 8 * v183) = v170;
              goto LABEL_293;
            }
            void *v170 = *v181;
            uint64_t v182 = 8 * v183;
            *int v181 = **(void **)(*v203 + v182);
            **(void **)(*v203 + v182) = v181;
            int v181 = v170;
          }
          size_t v183 = v172;
LABEL_293:
          long double v170 = v181;
          int v181 = (void *)*v181;
          size_t v172 = v183;
          if (!v181) {
            goto LABEL_288;
          }
        }
      }
      if (v151.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v155 = v153[1];
          if (v155 == v149)
          {
            if (md::LabelImageKey::operator==(v153[2], v147)) {
              goto LABEL_341;
            }
          }
          else if ((v155 & (v150 - 1)) != size)
          {
            goto LABEL_250;
          }
          long double v153 = (uint64_t *)*v153;
          if (!v153) {
            goto LABEL_250;
          }
        }
      }
      while (1)
      {
        unint64_t v154 = v153[1];
        if (v154 == v149) {
          break;
        }
        if (v154 >= v150) {
          v154 %= v150;
        }
        if (v154 != size) {
          goto LABEL_250;
        }
LABEL_240:
        long double v153 = (uint64_t *)*v153;
        if (!v153) {
          goto LABEL_250;
        }
      }
      if (!md::LabelImageKey::operator==(v153[2], v147)) {
        goto LABEL_240;
      }
LABEL_341:
      double v196 = (std::__shared_weak_count *)v153[5];
      v153[4] = v23;
      v153[5] = v143;
      long double v162 = v203;
      if (v196) {
        std::__shared_weak_count::__release_weak(v196);
      }
      v153[6] = (uint64_t)v141;
      *((unsigned char *)v153 + 56) = v23 == 0;
LABEL_312:
      unint64_t v186 = *(void *)(a2 + 16);
      if (v186 > *(unsigned int *)(a2 + 88))
      {
        while (2)
        {
          double v187 = *(uint64_t **)a2;
          double v188 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<md::LabelImageKey const>>(v162, *(md::LabelImageKey **)(*(void *)a2 + 16));
          if (v188 && (uint64_t *)v188[6] == v187)
          {
            v188[6] = a2;
            double v187 = *(uint64_t **)a2;
          }
          uint64_t v189 = *v187;
          *(void *)(v189 + 8) = v187[1];
          *(void *)v187[1] = v189;
          *(void *)(a2 + 16) = v186 - 1;
          double v190 = (std::__shared_weak_count *)v187[5];
          if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
            float v191 = (std::__shared_weak_count *)v187[3];
            if (v191) {
              goto LABEL_321;
            }
          }
          else
          {
            float v191 = (std::__shared_weak_count *)v187[3];
            if (v191)
            {
LABEL_321:
              if (!atomic_fetch_add(&v191->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
          }
          (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24), v187, 48);
          unint64_t v186 = *(void *)(a2 + 16);
          if (v186 <= *(unsigned int *)(a2 + 88)) {
            break;
          }
          continue;
        }
      }
      unsigned int v192 = *(_DWORD *)(a2 + 104) + 1;
      *(_DWORD *)(a2 + 104) = v192;
      if (v192 < 0x65)
      {
LABEL_335:
        if (!v207) {
          return;
        }
        goto LABEL_336;
      }
      *(_DWORD *)(a2 + 104) = 0;
      uint64_t v193 = *(void *)(a2 + 56);
      if (v193)
      {
        int v194 = 0;
        do
        {
          if (*(unsigned char *)(v193 + 56) || (uint64_t v195 = *(void *)(v193 + 40)) != 0 && *(void *)(v195 + 8) != -1)
          {
            uint64_t v193 = *(void *)v193;
            ++v194;
          }
          else
          {
            uint64_t v193 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::erase((uint64_t)v162, (uint64_t *)v193);
          }
        }
        while (v193);
        *(_DWORD *)(a2 + 100) = v194;
        goto LABEL_335;
      }
      *(_DWORD *)(a2 + 100) = 0;
      return;
    default:
      goto LABEL_223;
  }
}

void sub_1A19011E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1A19011F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50,std::__shared_weak_count *a51)
{
  std::__shared_weak_count::~__shared_weak_count(v51);
  operator delete(v53);
  gdc::Error::~Error(&a37);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a48);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a50);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  std::optional<std::shared_ptr<md::StandardLabelMapTile>>::~optional((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<md::LabelImageKey const>>(void *a1, md::LabelImageKey *this)
{
  unint64_t v4 = md::LabelImageKey::hash(this);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  float v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v13 = v10[1];
        if (v13 == v6)
        {
          if (md::LabelImageKey::operator==(v10[2], (uint64_t)this)) {
            return v10;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v12 = v10[1];
      if (v12 == v6)
      {
        if (md::LabelImageKey::operator==(v10[2], (uint64_t)this)) {
          return v10;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  return v10;
}

unint64_t md::LabelImageKey::hash(md::LabelImageKey *this)
{
  unint64_t v2 = *((unsigned __int8 *)this + 39);
  unint64_t v3 = *((void *)this + 3);
  if ((v2 & 0x80u) == 0) {
    unint64_t v4 = (uint64_t *)((char *)this + 16);
  }
  else {
    unint64_t v4 = (uint64_t *)*((void *)this + 2);
  }
  if ((v2 & 0x80u) == 0) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = v3;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  uint64_t v61 = *((void *)this + 6);
  unint64_t v62 = v6;
  float v8 = *((float *)this + 14);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v60 = v9;
  uint64_t v10 = *((unsigned int *)this + 15);
  uint64_t v11 = *((unsigned __int16 *)this + 32);
  uint64_t v12 = *((unsigned __int8 *)this + 112);
  uint64_t v13 = *((unsigned __int8 *)this + 114);
  uint64_t v14 = *((unsigned __int8 *)this + 115);
  uint64_t v15 = *((unsigned __int8 *)this + 116);
  uint64_t v16 = *((unsigned __int8 *)this + 117);
  int v17 = *((char *)this + 143);
  if (v17 >= 0) {
    uint64_t v18 = (uint64_t *)((char *)this + 120);
  }
  else {
    uint64_t v18 = (uint64_t *)*((void *)this + 15);
  }
  if (v17 >= 0) {
    unint64_t v19 = *((unsigned __int8 *)this + 143);
  }
  else {
    unint64_t v19 = *((void *)this + 16);
  }
  unint64_t v20 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v18, v19);
  unint64_t v21 = (*((unsigned __int8 *)this + 161)
       + ((*((unsigned __int8 *)this + 160) - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)*((unsigned __int8 *)this + 160) - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (*((unsigned __int8 *)this + 160) - 0x61C8864680B583EBLL);
  unint64_t v22 = (*((unsigned __int8 *)this + 162) + (v21 << 6) + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
  unint64_t v23 = (*((unsigned __int8 *)this + 163) + (v22 << 6) + (v22 >> 2) - 0x61C8864680B583EBLL) ^ v22;
  if (*((unsigned char *)this + 180))
  {
    float v24 = *((float *)this + 46);
    uint64_t v25 = (LODWORD(v24) - 0x61C8864680B583ABLL) ^ 1;
    if (v24 == 0.0) {
      uint64_t v25 = 0x9E3779B97F4A7C54;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  float v26 = *((float *)this + 47);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  float v28 = *((float *)this + 50);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  uint8x8_t v7 = (char *)this + 120;
  unint64_t result = v61 ^ v62 ^ v10 ^ v60 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v20 ^ *((void *)v7 + 4) ^ v7[44] ^ v7[48] ^ *((unsigned int *)v7 + 13) ^ *((unsigned int *)v7 + 14) ^ v25 ^ *((unsigned int *)this + 48) ^ v27 ^ *((unsigned __int8 *)this + 196) ^ v29 ^ (*((void *)this + 37) != 0) ^ v23 ^ ((v23 << 6) + (v23 >> 2) - 0x61C8864680B583EBLL);
  int v31 = (uint16x4_t *)*((void *)this + 9);
  int v32 = (unsigned __int16 *)*((void *)this + 10);
  if (v31 != (uint16x4_t *)v32)
  {
    unint64_t v33 = (char *)v32 - (char *)v31 - 2;
    if (v33 <= 0x1D) {
      goto LABEL_30;
    }
    int8x16_t v34 = (int8x16_t)result;
    int8x16_t v35 = 0uLL;
    uint64_t v36 = (v33 >> 1) + 1;
    int v37 = v31 + 2;
    unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFF0;
    int8x16_t v39 = 0uLL;
    int8x16_t v40 = 0uLL;
    int8x16_t v41 = 0uLL;
    int8x16_t v42 = 0uLL;
    int8x16_t v43 = 0uLL;
    int8x16_t v44 = 0uLL;
    do
    {
      uint16x8_t v45 = *(uint16x8_t *)v37[-2].i8;
      uint32x4_t v46 = vmovl_u16(*(uint16x4_t *)v45.i8);
      v47.i64[0] = v46.u32[0];
      v47.i64[1] = v46.u32[1];
      int8x16_t v48 = v47;
      v47.i64[0] = v46.u32[2];
      v47.i64[1] = v46.u32[3];
      int8x16_t v49 = v47;
      uint32x4_t v50 = vmovl_high_u16(v45);
      v47.i64[0] = v50.u32[0];
      v47.i64[1] = v50.u32[1];
      int8x16_t v51 = v47;
      v47.i64[0] = v50.u32[2];
      v47.i64[1] = v50.u32[3];
      int8x16_t v52 = v47;
      uint32x4_t v53 = vmovl_u16(*v37);
      v47.i64[0] = v53.u32[0];
      v47.i64[1] = v53.u32[1];
      int8x16_t v54 = v47;
      v47.i64[0] = v53.u32[2];
      v47.i64[1] = v53.u32[3];
      int8x16_t v55 = v47;
      uint32x4_t v56 = vmovl_high_u16(*(uint16x8_t *)v37->i8);
      v47.i64[0] = v56.u32[0];
      v47.i64[1] = v56.u32[1];
      int8x16_t v57 = v47;
      v47.i64[0] = v56.u32[2];
      v47.i64[1] = v56.u32[3];
      int8x16_t v40 = veorq_s8(v40, v52);
      int8x16_t v39 = veorq_s8(v39, v51);
      int8x16_t v35 = veorq_s8(v35, v49);
      int8x16_t v34 = veorq_s8(v34, v48);
      int8x16_t v44 = veorq_s8(v44, v47);
      int8x16_t v43 = veorq_s8(v43, v57);
      int8x16_t v42 = veorq_s8(v42, v55);
      int8x16_t v41 = veorq_s8(v41, v54);
      v37 += 4;
      v38 -= 16;
    }
    while (v38);
    int8x16_t v58 = veorq_s8(veorq_s8(veorq_s8(v41, v34), veorq_s8(v43, v39)), veorq_s8(veorq_s8(v42, v35), veorq_s8(v44, v40)));
    unint64_t result = (unint64_t)veor_s8(*(int8x8_t *)v58.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
    {
      int v31 = (uint16x4_t *)((char *)v31 + 2 * (v36 & 0xFFFFFFFFFFFFFFF0));
      do
      {
LABEL_30:
        unsigned int v59 = v31->u16[0];
        int v31 = (uint16x4_t *)((char *)v31 + 2);
        result ^= v59;
      }
      while (v31 != (uint16x4_t *)v32);
    }
  }
  return result;
}

BOOL md::LabelImageKey::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 39);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 24);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 39);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if (v3 != v4) {
    return 0;
  }
  float v8 = (const void **)(a1 + 16);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 24))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      float v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*(void *)(a1 + 48) != *(void *)(a2 + 48)) {
    return 0;
  }
  if (*(float *)(a1 + 56) != *(float *)(a2 + 56)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 64) != *(unsigned __int16 *)(a2 + 64)) {
    return 0;
  }
  uint64_t v11 = *(unsigned __int16 **)(a1 + 72);
  uint64_t v10 = *(unsigned __int16 **)(a1 + 80);
  unint64_t v12 = v10 - v11;
  uint64_t v13 = *(unsigned __int16 **)(a2 + 72);
  if (v12 != (uint64_t)(*(void *)(a2 + 80) - (void)v13) >> 1) {
    return 0;
  }
  if (v10 != v11)
  {
    if (v12 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v10 - v11;
    }
    if (*v11 != *v13) {
      return 0;
    }
    unint64_t v15 = 0;
    uint64_t v16 = v11 + 1;
    int v17 = v13 + 1;
    uint64_t v18 = v14 - 1;
    while (v18 != v15)
    {
      int v19 = v16[v15];
      int v20 = v17[v15++];
      if (v19 != v20)
      {
        if (v15 < v12) {
          return 0;
        }
        break;
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)
    || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114)
    || *(unsigned __int8 *)(a1 + 115) != *(unsigned __int8 *)(a2 + 115)
    || *(unsigned __int8 *)(a1 + 116) != *(unsigned __int8 *)(a2 + 116)
    || *(unsigned __int8 *)(a1 + 117) != *(unsigned __int8 *)(a2 + 117)
    || md::LabelShieldEntry::operator!=((unsigned __int8 *)(a1 + 120), (unsigned __int8 *)(a2 + 120))
    || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168)
    || *(_DWORD *)(a2 + 172) != *(_DWORD *)(a1 + 172)
    || *(_DWORD *)(a2 + 176) != *(_DWORD *)(a1 + 176))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 180) && *(unsigned char *)(a2 + 180))
  {
    if (*(float *)(a1 + 184) == *(float *)(a2 + 184)) {
      goto LABEL_44;
    }
    return 0;
  }
  if ((*(unsigned char *)(a1 + 180) != 0) != (*(unsigned char *)(a2 + 180) != 0)) {
    return 0;
  }
LABEL_44:
  if (*(float *)(a1 + 188) != *(float *)(a2 + 188)
    || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)
    || *(unsigned __int8 *)(a1 + 196) != *(unsigned __int8 *)(a2 + 196)
    || *(float *)(a1 + 200) != *(float *)(a2 + 200))
  {
    return 0;
  }
  return *(void *)(a1 + 264) == *(void *)(a2 + 264);
}

BOOL md::LabelShieldEntry::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  unint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 1;
    }
  }
  else if (a1[23])
  {
    float v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 1;
  }
LABEL_16:
  if (*((void *)a1 + 4) != *((void *)v6 + 4) || *((_DWORD *)a1 + 10) != *((_DWORD *)v6 + 10)) {
    return 1;
  }
  return a1[44] != v6[44];
}

void **std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>(void **__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      abort();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    uint64_t v8 = (v7 | 7) + 1;
    unint64_t v6 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], v8, 1);
    memmove(v6, __src, __len);
    __dst[1] = (void *)__len;
    __dst[2] = (void *)(v8 | 0x8000000000000000);
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      unint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void md::LabelImageLoader::enqueueIconForRendering(uint64_t a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*(unsigned char *)(*a2 + 140)) {
    return;
  }
  uint64_t v5 = *(void *)(v2 + 112);
  uint64_t v6 = *(void *)(v2 + 120);
  if (v5 == v6)
  {
LABEL_11:
    *(unsigned char *)(v2 + 140) = 1;
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v2 + 142));
    if (v9) {
      return;
    }
    uint64_t v10 = *(void *)(a1 + 112);
    uint64_t v11 = *(void *)(v10 + 256);
    if (*(unsigned char *)(v11 + 40)) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(v10 + 112);
    uint64_t v14 = *(void **)v13;
    unint64_t v15 = *(void **)(v13 + 8);
    if (v14 != v15)
    {
      while (*v14 != 0x6F66BE14E10A8F81)
      {
        v14 += 5;
        if (v14 == v15) {
          goto LABEL_23;
        }
      }
    }
    if (v14 == v15)
    {
LABEL_23:
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = v14[3];
      uint64_t v16 = (std::__shared_weak_count *)v14[4];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 112) + 3383))
    {
      uint64_t v18 = *a2;
      uint64_t v43 = v17;
      int8x16_t v44 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, 0, v12, &v43);
      int v19 = v44;
      if (!v44) {
        goto LABEL_56;
      }
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)(a1 + 140), 1u);
      uint64_t v21 = *a2;
      int v20 = (std::__shared_weak_count *)a2[1];
      uint64_t v41 = *a2;
      int8x16_t v42 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = *(void *)(a1 + 120);
      unint64_t v23 = *(std::__shared_weak_count **)(a1 + 128);
      uint64_t v39 = v22;
      int8x16_t v40 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = *(void *)(a1 + 112);
      uint64_t v26 = *(void *)(v24 + 8);
      uint64_t v25 = *(std::__shared_weak_count **)(v24 + 16);
      uint64_t v37 = v26;
      if (!v25 || (uint64_t v27 = std::__shared_weak_count::lock(v25), (v38 = v27) == 0))
      {
        std::__throw_bad_weak_ptr[abi:nn180100]();
        __break(1u);
        return;
      }
      float v28 = v27;
      uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 112) + 152) + 96);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v30 = operator new(0x50uLL);
      *int v30 = &unk_1EF572078;
      v30[1] = v21;
      v30[2] = v20;
      v30[3] = v12;
      v30[4] = v17;
      v30[5] = v16;
      v30[6] = v26;
      v30[7] = v28;
      char v30[8] = v22;
      v30[9] = v23;
      uint32x4_t v46 = v30;
      geo::TaskQueue::async(&v35, v29, v45);
      int v31 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
      }
      else if (v46)
      {
        (*(void (**)(void *))(*v46 + 40))(v46);
      }
      int v32 = v38;
      if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      unint64_t v33 = v40;
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      int8x16_t v34 = v42;
      if (!v42 || atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_56;
      }
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      int v19 = v34;
    }
    std::__shared_weak_count::__release_weak(v19);
LABEL_56:
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  int v7 = 0;
  do
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*(void *)v5 + 142));
    if ((v8 & 1) == 0)
    {
      ++v7;
      if (!*(unsigned char *)(*(void *)v5 + 140)) {
        md::LabelImageLoader::enqueueIconForRendering(a1, v5);
      }
    }
    v5 += 16;
  }
  while (v5 != v6);
  if (!v7)
  {
    uint64_t v2 = *a2;
    goto LABEL_11;
  }
}

void sub_1A19021FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::function<void ()(void)>::~function((void *)(v29 - 128));
  md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::~$_0(&a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__construct_at[abi:nn180100]<md::ShieldLabelIcon,std::shared_ptr<md::LabelImageKey const> const&,std::shared_ptr<grl::IconImage> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&,md::ShieldLabelIcon*>(uint64_t a1, void *a2, uint64_t a3, std::__shared_weak_count *a4, long long *a5)
{
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1EF554088;
  *(void *)(a1 + 8) = &unk_1EF559EB8;
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 32) = *a2;
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 48) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 64) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 1065353216;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EF535478;
  *(void *)(a1 + 152) = a3;
  *(void *)(a1 + 160) = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v8 = (void **)(a1 + 168);
  *(void *)(a1 + 192) = *((void *)a5 + 3);
  if (*((char *)a5 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v8, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v9 = *a5;
    *(void *)(a1 + 184) = *((void *)a5 + 2);
    *(_OWORD *)unsigned __int8 v8 = v9;
  }
  if (a4 && !atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
  }
  return a1;
}

void sub_1A19023D4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  md::LabelIcon::~LabelIcon(v2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

float grl::IconModifiers::setScale(grl::IconModifiers *this, float a2)
{
  float result = fmaxf(a2, 0.0);
  *((float *)this + 3) = result;
  return result;
}

uint64_t md::LabelSettingsStyleCache::styleCaps(md::LabelSettingsStyleCache *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1A190278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(a19);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a28);
  int v30 = *(std::__shared_weak_count **)(v28 - 88);
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

void md::DaVinciTrafficRenderLayer::DaVinciTrafficRenderLayer(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a2 == 47) {
    __int16 v8 = 53;
  }
  else {
    __int16 v8 = 52;
  }
  [*(id *)(a3 + 104) format];
  if (v7)
  {
    [v7 standardCommandBufferSelector];
    uint64_t v9 = v22;
    if (a2 != 47)
    {
LABEL_6:
      uint64_t v10 = *(void *)(v9 + 8);
      int v11 = *(unsigned __int16 *)(v10 + 66);
      int v12 = *(unsigned __int16 *)(v10 + 214);
      uint64_t v13 = operator new(4uLL);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a2 != 47) {
      goto LABEL_6;
    }
  }
  uint64_t v14 = *(void *)(v9 + 8);
  int v11 = *(unsigned __int16 *)(v14 + 68);
  int v12 = *(unsigned __int16 *)(v14 + 216);
  uint64_t v13 = operator new(4uLL);
LABEL_9:
  unint64_t v15 = v13;
  *uint64_t v13 = v11 | (v12 << 16);
  id v16 = v7;
  uint64_t v17 = operator new(2uLL);
  *uint64_t v17 = v8;
  uint64_t v18 = v17 + 1;
  *(void *)&long long v19 = v17;
  *((void *)&v19 + 1) = v17 + 1;
  long long v21 = v19;
  *(void *)a1 = &unk_1EF530C60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v20 = operator new(4uLL);
  *(void *)(a1 + 8) = v20;
  *v20++ = *v15;
  *(void *)(a1 + 16) = v20;
  *(void *)(a1 + 24) = v20;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = a2;
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_1A28FE5D0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v21;
  *(void *)(a1 + 336) = v18;
  *(_DWORD *)(a1 + 344) = 2;
  *(void *)a1 = &unk_1EF54E5A0;
  *(void *)(a1 + 352) = 0;
  operator new();
}

void sub_1A1902CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v14 = v12[46];
  v12[46] = 0;
  if (v14) {
    MEMORY[0x1A6239270](v14, 0x1000C4049ECCB0CLL);
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(v12);

  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::DaVinciGroundRenderLayer(uint64_t a1, uint64_t a2, void *a3, char a4, int a5)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  if (a5 == 1)
  {
    int v98 = 2228257;
    __src = &v98;
    uint64_t v9 = 2;
  }
  else
  {
    if (a5 == 2)
    {
      __int16 v97 = 54;
      uint64_t v10 = &v97;
    }
    else
    {
      __int16 v96 = 62;
      uint64_t v10 = &v96;
    }
    __src = (int *)v10;
    uint64_t v9 = 1;
  }
  uint64_t v95 = v9;
  uint64_t v92 = a2;
  [*(id *)(a2 + 104) format];
  id v11 = v8;
  int v12 = v11;
  uint64_t v94 = v11;
  switch(a5)
  {
    case 2:
      if (v11)
      {
        [v11 standardCommandBufferSelector];
        __int16 v40 = *(_WORD *)(*(void *)(v121 + 8) + 232);
        [v12 standardCommandBufferSelector];
        __int16 v41 = *(_WORD *)(*(void *)(v119 + 8) + 70);
        [v12 standardCommandBufferSelector];
        __int16 v42 = *(_WORD *)(*(void *)(v117 + 8) + 76);
        [v12 standardCommandBufferSelector];
        __int16 v43 = *(_WORD *)(*(void *)(v115 + 8) + 82);
        [v12 standardCommandBufferSelector];
        __int16 v44 = *(_WORD *)(*(void *)(v113 + 8) + 132);
        [v12 standardCommandBufferSelector];
        __int16 v90 = *(_WORD *)(*(void *)(v111 + 8) + 126);
        [v12 standardCommandBufferSelector];
        __int16 v86 = *(_WORD *)(*(void *)(v109 + 8) + 176);
        __int16 v88 = v44;
        [v12 standardCommandBufferSelector];
        __int16 v84 = v43;
        __int16 v45 = *(_WORD *)(*(void *)(v107 + 8) + 178);
        [v12 standardCommandBufferSelector];
        __int16 v82 = v40;
        __int16 v46 = *(_WORD *)(*(void *)(v105 + 8) + 180);
        [v12 standardCommandBufferSelector];
        __int16 v47 = *(_WORD *)(*(void *)(v103 + 8) + 166);
        [v12 standardCommandBufferSelector];
        __int16 v48 = *(_WORD *)(*(void *)(v101 + 8) + 168);
        [v12 standardCommandBufferSelector];
        uint64_t v49 = *(void *)(v99 + 8);
      }
      else
      {
        uint64_t v121 = 0;
        size_t v122 = 0;
        uint64_t v49 = MEMORY[8];
        __int16 v82 = *(_WORD *)(MEMORY[8] + 232);
        uint64_t v119 = 0;
        double v120 = 0;
        __int16 v41 = *(_WORD *)(MEMORY[8] + 70);
        uint64_t v117 = 0;
        size_t v118 = 0;
        __int16 v42 = *(_WORD *)(MEMORY[8] + 76);
        uint64_t v115 = 0;
        double v116 = 0;
        __int16 v56 = *(_WORD *)(MEMORY[8] + 82);
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        __int16 v57 = *(_WORD *)(MEMORY[8] + 132);
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        __int16 v88 = v57;
        __int16 v90 = *(_WORD *)(MEMORY[8] + 126);
        uint64_t v109 = 0;
        long long v110 = 0;
        __int16 v84 = v56;
        __int16 v86 = *(_WORD *)(MEMORY[8] + 176);
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        __int16 v45 = *(_WORD *)(MEMORY[8] + 178);
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        __int16 v46 = *(_WORD *)(MEMORY[8] + 180);
        uint64_t v103 = 0;
        size_t v104 = 0;
        __int16 v47 = *(_WORD *)(MEMORY[8] + 166);
        uint64_t v101 = 0;
        uint64_t v102 = 0;
        __int16 v48 = *(_WORD *)(MEMORY[8] + 168);
        uint64_t v99 = 0;
        int v100 = 0;
      }
      __int16 v58 = *(_WORD *)(v49 + 170);
      uint64_t v29 = (char *)operator new(0x1CuLL);
      *(_WORD *)uint64_t v29 = v82;
      *((_WORD *)v29 + 1) = v41;
      *((_WORD *)v29 + 2) = v42;
      *((_WORD *)v29 + 3) = v84;
      *((_WORD *)v29 + 4) = v88;
      *((_WORD *)v29 + 5) = v90;
      *((_DWORD *)v29 + 3) = 50529024;
      *((_WORD *)v29 + 8) = v86;
      *((_WORD *)v29 + 9) = v45;
      *((_WORD *)v29 + 10) = v46;
      *((_WORD *)v29 + 11) = v47;
      *((_WORD *)v29 + 12) = v48;
      *((_WORD *)v29 + 13) = v58;
      unsigned int v59 = v100;
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      uint64_t v60 = v102;
      if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
      uint64_t v61 = v104;
      if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      unint64_t v62 = v106;
      if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      uint64_t v63 = v108;
      if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      uint64_t v64 = v110;
      if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      double v65 = v112;
      if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      float v66 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      float v67 = v116;
      if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      float v68 = v118;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
      int v69 = v120;
      if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      unint64_t v38 = v29 + 28;
      uint64_t v39 = v122;
      if (!v122) {
        goto LABEL_114;
      }
      goto LABEL_112;
    case 3:
      if (v11)
      {
        [v11 standardCommandBufferSelector];
        __int16 v50 = *(_WORD *)(*(void *)(v121 + 8) + 238);
        [v12 standardCommandBufferSelector];
        __int16 v51 = *(_WORD *)(*(void *)(v119 + 8) + 72);
        [v12 standardCommandBufferSelector];
        __int16 v52 = *(_WORD *)(*(void *)(v117 + 8) + 78);
        [v12 standardCommandBufferSelector];
        __int16 v53 = *(_WORD *)(*(void *)(v115 + 8) + 88);
        [v12 standardCommandBufferSelector];
        __int16 v54 = *(_WORD *)(*(void *)(v113 + 8) + 134);
        [v12 standardCommandBufferSelector];
        uint64_t v55 = *(void *)(v111 + 8);
      }
      else
      {
        uint64_t v121 = 0;
        size_t v122 = 0;
        uint64_t v55 = MEMORY[8];
        __int16 v50 = *(_WORD *)(MEMORY[8] + 238);
        uint64_t v119 = 0;
        double v120 = 0;
        __int16 v51 = *(_WORD *)(MEMORY[8] + 72);
        uint64_t v117 = 0;
        size_t v118 = 0;
        __int16 v52 = *(_WORD *)(MEMORY[8] + 78);
        uint64_t v115 = 0;
        double v116 = 0;
        __int16 v53 = *(_WORD *)(MEMORY[8] + 88);
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        __int16 v54 = *(_WORD *)(MEMORY[8] + 134);
        uint64_t v111 = 0;
        uint64_t v112 = 0;
      }
      __int16 v70 = *(_WORD *)(v55 + 128);
      uint64_t v29 = (char *)operator new(0x10uLL);
      *(_WORD *)uint64_t v29 = v50;
      *((_WORD *)v29 + 1) = v51;
      *((_WORD *)v29 + 2) = v52;
      *((_WORD *)v29 + 3) = v53;
      *((_WORD *)v29 + 4) = v54;
      *((_WORD *)v29 + 5) = v70;
      *((_DWORD *)v29 + 3) = 67306496;
      float v71 = v112;
      if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      float v72 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      uint64_t v73 = v116;
      if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
      uint64_t v74 = v118;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
      uint64_t v75 = v120;
      if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      unint64_t v38 = v29 + 16;
      uint64_t v39 = v122;
      if (v122) {
        goto LABEL_112;
      }
      goto LABEL_114;
    default:
      if (v11)
      {
        [v11 standardCommandBufferSelector];
        __int16 v13 = *(_WORD *)(*(void *)(v121 + 8) + 4);
        [v12 standardCommandBufferSelector];
        char v14 = 8 * a5;
        __int16 v15 = *(_WORD *)(*(void *)(v119 + 8) + 2 * ((0x7377747373uLL >> (8 * a5)) & 0x77));
        [v12 standardCommandBufferSelector];
        __int16 v89 = *(_WORD *)(*(void *)(v117 + 8) + 2 * ((0x1D24231D1DuLL >> (8 * a5)) & 0x3F));
        [v12 standardCommandBufferSelector];
        __int16 v87 = *(_WORD *)(*(void *)(v115 + 8) + 2 * ((0x2527262525uLL >> (8 * a5)) & 0x27));
        [v12 standardCommandBufferSelector];
        uint64_t v16 = 40;
        if (a5 == 2) {
          uint64_t v16 = 41;
        }
        if (a5 == 3) {
          uint64_t v16 = 44;
        }
        __int16 v17 = *(_WORD *)(*(void *)(v113 + 8) + 2 * v16);
        [v12 standardCommandBufferSelector];
        __int16 v85 = v15;
        __int16 v18 = *(_WORD *)(*(void *)(v111 + 8) + 2 * ((0x4143424141uLL >> v14) & 0x43));
        [v12 standardCommandBufferSelector];
        __int16 v83 = v13;
        __int16 v19 = *(_WORD *)(*(void *)(v109 + 8) + 2 * ((0x3E403F3E3EuLL >> v14) & 0x7F));
        if (a5 == 2) {
          int v20 = 50529024;
        }
        else {
          int v20 = 33751552;
        }
        if (a5 == 3) {
          unsigned int v21 = 67306496;
        }
        else {
          unsigned int v21 = v20;
        }
        [v12 standardCommandBufferSelector];
        __int16 v22 = *(_WORD *)(*(void *)(v107 + 8) + 92);
        [v12 standardCommandBufferSelector];
        unsigned int v23 = HIWORD(v21);
        uint64_t v24 = *(void *)(v105 + 8);
      }
      else
      {
        uint64_t v121 = 0;
        size_t v122 = 0;
        __int16 v83 = *(_WORD *)(MEMORY[8] + 4);
        uint64_t v119 = 0;
        double v120 = 0;
        char v25 = 8 * a5;
        __int16 v85 = *(_WORD *)(MEMORY[8] + 2 * ((0x7377747373uLL >> (8 * a5)) & 0x77));
        uint64_t v117 = 0;
        size_t v118 = 0;
        __int16 v89 = *(_WORD *)(MEMORY[8] + 2 * ((0x1D24231D1DuLL >> (8 * a5)) & 0x3F));
        uint64_t v115 = 0;
        double v116 = 0;
        __int16 v87 = *(_WORD *)(MEMORY[8] + 2 * ((0x2527262525uLL >> (8 * a5)) & 0x27));
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        uint64_t v26 = 40;
        if (a5 == 2)
        {
          uint64_t v26 = 41;
          int v27 = 50529024;
        }
        else
        {
          int v27 = 33751552;
        }
        if (a5 == 3) {
          uint64_t v26 = 44;
        }
        __int16 v17 = *(_WORD *)(MEMORY[8] + 2 * v26);
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        __int16 v18 = *(_WORD *)(MEMORY[8] + 2 * ((0x4143424141uLL >> v25) & 0x43));
        uint64_t v109 = 0;
        long long v110 = 0;
        __int16 v19 = *(_WORD *)(MEMORY[8] + 2 * ((0x3E403F3E3EuLL >> v25) & 0x7F));
        if (a5 == 3) {
          unsigned int v21 = 67306496;
        }
        else {
          unsigned int v21 = v27;
        }
        unsigned int v23 = HIWORD(v21);
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        uint64_t v24 = MEMORY[8];
        __int16 v22 = *(_WORD *)(MEMORY[8] + 92);
        uint64_t v105 = 0;
        uint64_t v106 = 0;
      }
      __int16 v28 = *(_WORD *)(v24 + 140);
      uint64_t v29 = (char *)operator new(0x16uLL);
      *(_WORD *)uint64_t v29 = v83;
      *((_WORD *)v29 + 1) = v85;
      *((_WORD *)v29 + 2) = v89;
      *((_WORD *)v29 + 3) = v87;
      *((_WORD *)v29 + 4) = v17;
      *((_WORD *)v29 + 5) = v18;
      *((_WORD *)v29 + 6) = v19;
      *((_WORD *)v29 + 7) = v21;
      *((_WORD *)v29 + 8) = v23;
      *((_WORD *)v29 + 9) = v22;
      *((_WORD *)v29 + 10) = v28;
      int v30 = v106;
      if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      int v31 = v108;
      if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      int v32 = v110;
      if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      unint64_t v33 = v112;
      if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      int8x16_t v34 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      int8x16_t v35 = v116;
      if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      uint64_t v36 = v118;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      uint64_t v37 = v120;
      if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      unint64_t v38 = v29 + 22;
      uint64_t v39 = v122;
      if (!v122) {
        goto LABEL_114;
      }
LABEL_112:
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
LABEL_114:

      id v76 = v94;
      double v77 = (char *)operator new(2 * v95);
      memcpy(v77, __src, 2 * v95);
      *(void *)a1 = &unk_1EF530C60;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      uint64_t v78 = v38 - v29;
      if (v38 != v29)
      {
        if (v78 < 0) {
          abort();
        }
        float v79 = (char *)operator new(v38 - v29);
        *(void *)(a1 + 8) = v79;
        float v80 = &v79[2 * (v78 >> 1)];
        *(void *)(a1 + 24) = v80;
        memcpy(v79, v29, v38 - v29);
        *(void *)(a1 + 16) = v80;
      }
      *(void *)&long long v81 = v77;
      *((void *)&v81 + 1) = &v77[2 * v95];
      *(_WORD *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 34) = a4;
      *(void *)(a1 + 40) = v92;
      *(_WORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 52) = 0;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(void *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 1065353216;
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 128) = a1 + 136;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = a1 + 160;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = a1 + 184;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = a1 + 208;
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      *(void *)(a1 + 224) = a1 + 232;
      *(_OWORD *)(a1 + 248) = xmmword_1A28FED60;
      *(void *)(a1 + 312) = 0;
      *(_OWORD *)(a1 + 264) = 0u;
      *(_OWORD *)(a1 + 280) = 0u;
      *(_OWORD *)(a1 + 296) = 0u;
      *(_OWORD *)(a1 + 320) = v81;
      *(void *)(a1 + 336) = *((void *)&v81 + 1);
      *(_DWORD *)(a1 + 344) = 2 * (a5 != 3);
      *(void *)a1 = &unk_1EF54E770;
      *(void *)(a1 + 352) = 0;
      operator new();
  }
}

void sub_1A190480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,md::DaVinciGroundRenderResources *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a26 && !atomic_fetch_add(&a26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
    std::__shared_weak_count::__release_weak(a26);
  }
  if (a28 && !atomic_fetch_add(&a28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
    std::__shared_weak_count::__release_weak(a28);
  }
  if (a30 && !atomic_fetch_add(&a30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a32 && !atomic_fetch_add(&a32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
    std::__shared_weak_count::__release_weak(a32);
  }
  if (a34 && !atomic_fetch_add(&a34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v34 - 184);
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v34 - 168);
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  unint64_t v38 = *(std::__shared_weak_count **)(v34 - 152);
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v34 - 136);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  __int16 v40 = *(std::__shared_weak_count **)(v34 - 120);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  __int16 v41 = *(std::__shared_weak_count **)(v34 - 104);
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xC94DD89A7B09BE9CLL)
  {
    uint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xC94DD89A7B09BE9CLL);
    uint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  id v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  id v8 = (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  [v8 standardCommandBufferSelector];
  __int16 v9 = *(_WORD *)(*(void *)(v66 + 8) + 80);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v10 = *(_WORD *)(*(void *)(v66 + 8) + 82);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v11 = *(_WORD *)(*(void *)(v66 + 8) + 88);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v12 = *(_WORD *)(*(void *)(v66 + 8) + 58);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v13 = *(_WORD *)(*(void *)(v66 + 8) + 70);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v14 = *(_WORD *)(*(void *)(v66 + 8) + 72);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  __int16 v52 = v13;
  [v8 standardCommandBufferSelector];
  __int16 v15 = *(_WORD *)(*(void *)(v66 + 8) + 74);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v16 = *(_WORD *)(*(void *)(v66 + 8) + 76);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v63 = *(_WORD *)(*(void *)(v66 + 8) + 78);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v51 = *(_WORD *)(*(void *)(v66 + 8) + 176);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v50 = *(_WORD *)(*(void *)(v66 + 8) + 178);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v49 = *(_WORD *)(*(void *)(v66 + 8) + 180);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v48 = *(_WORD *)(*(void *)(v66 + 8) + 166);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  HIDWORD(v45) = *(unsigned __int16 *)(*(void *)(v66 + 8) + 168);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  LODWORD(v45) = *(unsigned __int16 *)(*(void *)(v66 + 8) + 170);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  objc_msgSend(v8, "standardCommandBufferSelector", v45);
  __int16 v62 = *(_WORD *)(*(void *)(v66 + 8) + 230);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v61 = *(_WORD *)(*(void *)(v66 + 8) + 232);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v60 = *(_WORD *)(*(void *)(v66 + 8) + 238);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v59 = *(_WORD *)(*(void *)(v66 + 8) + 130);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v58 = *(_WORD *)(*(void *)(v66 + 8) + 132);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v57 = *(_WORD *)(*(void *)(v66 + 8) + 134);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v56 = *(_WORD *)(*(void *)(v66 + 8) + 124);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  [v8 standardCommandBufferSelector];
  __int16 v54 = *(_WORD *)(*(void *)(v66 + 8) + 126);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  __int16 v55 = v15;
  __int16 v17 = v14;
  __int16 v18 = v12;
  __int16 v19 = v11;
  __int16 v20 = v9;
  [v8 standardCommandBufferSelector];
  __int16 v53 = *(_WORD *)(*(void *)(v66 + 8) + 128);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v67->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v67);
  }
  unsigned int v21 = ***(uint64_t ****)(a1 + 8);
  if (v21 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v21 != 0x22D45F5AAD4BF408)
  {
    __int16 v22 = v21 + 5;
    do
    {
      uint64_t v23 = *v22;
      v22 += 5;
    }
    while (v23 != 0x22D45F5AAD4BF408);
    unsigned int v21 = v22 - 5;
  }
  uint64_t v24 = (uint64_t (***)(void))v21[3];
  char v25 = (std::__shared_weak_count *)v21[4];
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  uint64_t v26 = *(uint64_t **)((**v24)(v24) + 8);
  int8x8_t v27 = (int8x8_t)v26[1];
  if (v27)
  {
    __int16 v28 = v16;
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      uint64_t v30 = 0x41E8D6E445F4145;
      if (*(void *)&v27 <= 0x41E8D6E445F4145uLL) {
        uint64_t v30 = 0x41E8D6E445F4145uLL % *(void *)&v27;
      }
    }
    else
    {
      uint64_t v30 = (*(void *)&v27 - 1) & 0x41E8D6E445F4145;
    }
    uint64_t v31 = *v26;
    int v32 = *(void **)(v31 + 8 * v30);
    if (v32)
    {
      unint64_t v33 = (void *)*v32;
      if (*v32)
      {
        uint64_t v34 = *(void *)&v27 - 1;
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v35 = v33[1];
            if (v35 == 0x41E8D6E445F4145)
            {
              if (v33[2] == 0x41E8D6E445F4145) {
                goto LABEL_110;
              }
            }
            else if ((v35 & v34) != v30)
            {
              goto LABEL_137;
            }
            unint64_t v33 = (void *)*v33;
            if (!v33) {
              goto LABEL_137;
            }
          }
        }
        do
        {
          unint64_t v36 = v33[1];
          if (v36 == 0x41E8D6E445F4145)
          {
            if (v33[2] == 0x41E8D6E445F4145)
            {
LABEL_110:
              uint64_t v37 = v33[5];
              if (*(void *)(v37 + 8) == 0x41E8D6E445F4145)
              {
                uint64_t v38 = *(void *)(v37 + 32);
                if (v38)
                {
                  if (*(unsigned char *)(v38 + 224))
                  {
                    __int16 v39 = v52;
                  }
                  else
                  {
                    if (v29.u32[0] >= 2uLL)
                    {
                      unint64_t v41 = 0x1AF456233693CD46;
                      if (*(void *)&v27 <= 0x1AF456233693CD46uLL) {
                        unint64_t v41 = 0x1AF456233693CD46uLL % *(void *)&v27;
                      }
                      __int16 v40 = *(void **)(v31 + 8 * v41);
                      do
                      {
                        do
                          __int16 v40 = (void *)*v40;
                        while (v40[1] != 0x1AF456233693CD46);
                      }
                      while (v40[2] != 0x1AF456233693CD46);
                    }
                    else
                    {
                      __int16 v40 = *(void **)(v31 + 8 * (v34 & 0x1AF456233693CD46));
                      do
                      {
                        do
                          __int16 v40 = (void *)*v40;
                        while (v40[1] != 0x1AF456233693CD46);
                      }
                      while (v40[2] != 0x1AF456233693CD46);
                    }
                    float v42 = *(double *)(*(void *)(v40[5] + 32) + 40);
                    if (v42 >= 0.0001)
                    {
                      __int16 v10 = v49;
                      __int16 v28 = v50;
                      __int16 v39 = v51;
                    }
                    else
                    {
                      __int16 v39 = v47;
                      __int16 v10 = v48;
                      __int16 v28 = v46;
                    }
                  }
                  __int16 v68 = v39;
                  __int16 v69 = v28;
                  __int16 v70 = v28;
                  if (v8)
                  {
                    [v8 standardCommandBufferSelector];
                    __int16 v71 = *(_WORD *)(*(void *)(v73 + 8) + 84);
                    [v8 standardCommandBufferSelector];
                    uint64_t v43 = *(void *)(v64 + 8);
                  }
                  else
                  {
                    uint64_t v74 = 0;
                    uint64_t v43 = MEMORY[8];
                    __int16 v71 = *(_WORD *)(MEMORY[8] + 84);
                    double v65 = 0;
                  }
                  __int16 v72 = *(_WORD *)(v43 + 86);
                  __int16 v44 = (char *)operator new(0x45uLL);
                  *(_WORD *)__int16 v44 = v20;
                  v44[2] = 0;
                  *(_WORD *)(v44 + 3) = v10;
                  v44[5] = 0;
                  *((_WORD *)v44 + 3) = v19;
                  v44[8] = 0;
                  v44[11] = 1;
                  *(_WORD *)(v44 + 9) = v18;
                  v44[14] = 1;
                  *((_WORD *)v44 + 6) = v68;
                  v44[17] = 1;
                  *(_WORD *)(v44 + 15) = v17;
                  v44[20] = 3;
                  *((_WORD *)v44 + 9) = v55;
                  v44[23] = 3;
                  *(_WORD *)(v44 + 21) = v69;
                  v44[26] = 3;
                  *((_WORD *)v44 + 12) = v63;
                  v44[29] = 2;
                  *(_WORD *)(v44 + 27) = v55;
                  char v44[32] = 2;
                  *((_WORD *)v44 + 15) = v70;
                  v44[35] = 2;
                  *(_WORD *)(v44 + 33) = v63;
                  v44[38] = 4;
                  *((_WORD *)v44 + 18) = v62;
                  v44[41] = 4;
                  *(_WORD *)(v44 + 39) = v61;
                  v44[44] = 4;
                  *((_WORD *)v44 + 21) = v60;
                  v44[47] = 0;
                  *(_WORD *)(v44 + 45) = v59;
                  v44[50] = 0;
                  *((_WORD *)v44 + 24) = v58;
                  v44[53] = 0;
                  *(_WORD *)(v44 + 51) = v57;
                  v44[56] = 3;
                  *((_WORD *)v44 + 27) = v56;
                  v44[59] = 3;
                  *(_WORD *)(v44 + 57) = v54;
                  v44[62] = 3;
                  *((_WORD *)v44 + 30) = v53;
                  v44[65] = 1;
                  *(_WORD *)(v44 + 63) = v71;
                  v44[68] = 3;
                  *((_WORD *)v44 + 33) = v72;
                  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                  gdc::Registry::create(*(gdc::Registry **)(*(void *)(a1 + 8) + 8));
                }
              }
              break;
            }
          }
          else
          {
            if (v36 >= *(void *)&v27) {
              v36 %= *(void *)&v27;
            }
            if (v36 != v30) {
              break;
            }
          }
          unint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
    }
  }
LABEL_137:

  *(void *)(a1 + 8) = 0;
}