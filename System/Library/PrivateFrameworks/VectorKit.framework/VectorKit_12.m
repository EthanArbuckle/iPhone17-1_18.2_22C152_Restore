void _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x13043386C0978CC2 && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t gdc::ObjectHolder<md::RouteOverlayContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::RouteOverlayContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5557D0;
  v1 = (md::RouteOverlayContext *)a1[4];
  if (v1)
  {
    md::RouteOverlayContext::~RouteOverlayContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::RouteOverlayContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5557D0;
  uint64_t v2 = (md::RouteOverlayContext *)a1[4];
  if (v2)
  {
    md::RouteOverlayContext::~RouteOverlayContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::RouteOverlayLogic::~RouteOverlayLogic(md::RouteOverlayLogic *this)
{
  md::RouteOverlayLogic::~RouteOverlayLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF537CE8;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }

  *((void *)this + 19) = &unk_1EF5595D8;
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5595D8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5595D8;

  return a1;
}

void md::MuninJunctionIntersection::createLabels(md::MuninJunctionIntersection *this, double **a2)
{
  uint64_t v4 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*((void *)*a2 + 42) + 200));
  v5 = (double *)*((void *)this + 1);
  double v6 = v5[1];
  double v7 = v5[2];
  double v8 = v5[3];
  *((double *)this + 6) = v6;
  *((double *)this + 7) = v7;
  *((double *)this + 8) = v8;
  long double v9 = v6 * 6.28318531;
  long double v10 = exp(v7 * 6.28318531 + -3.14159265);
  double v11 = atan(v10) * 2.0 + -1.57079633;
  long double v12 = fmod(v9, 6.28318531);
  double v13 = fmod(v12 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v14 = __sincos_stret(v11);
  __double2 v15 = __sincos_stret(v13);
  v16 = a2[6];
  double v18 = v16[17];
  double v17 = v16[18];
  double v19 = v16[19];
  int v73 = 0;
  __int16 v75 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  char v69 = 2;
  uint64_t v20 = *(void *)(*(void *)v5 + 8);
  if (v20) {
    v21 = *(uint64_t **)(v20 + 8);
  }
  else {
    v21 = 0;
  }
  unsigned __int8 v22 = atomic_load((unsigned __int8 *)*a2 + 3392);
  v23 = operator new(0x70uLL);
  v23[1] = 0;
  v23[2] = 0;
  void *v23 = &unk_1EF5802C0;
  uint64_t v24 = md::MuninRoadFeature::MuninRoadFeature((uint64_t)(v23 + 3), v21, v22 & 1);
  double v25 = 6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
  double v26 = (v25 + v8) * v14.__cosval;
  double v27 = v26 * v15.__cosval;
  double v28 = v26 * v15.__sinval;
  double v29 = v18 - v26 * v15.__cosval;
  double v30 = (v8 + v25 * 0.99330562) * v14.__sinval;
  double v31 = 1.0 / sqrt(v27 * v27 + v28 * v28 + v30 * v30);
  double v32 = 1.0 / sqrt(v29 * v29 + (v17 - v28) * (v17 - v28) + (v19 - v30) * (v19 - v30));
  double v33 = v31 * v27;
  double v34 = v31 * v28;
  double v35 = v31 * v30;
  double v36 = v32 * v29;
  double v37 = v32 * (v17 - v28);
  double v38 = v32 * (v19 - v30);
  double v39 = -(v37 * v35 - v38 * v34);
  double v40 = -(v38 * v33 - v36 * v35);
  double v41 = -(v36 * v34 - v37 * v33);
  double v42 = -(v41 * v34 - v40 * v35);
  double v43 = -(v39 * v35 - v41 * v33);
  v44 = (std::__shared_weak_count *)*((void *)&v58 + 1);
  double v45 = -(v40 * v33 - v39 * v34);
  *(void *)&long long v58 = v24;
  *((void *)&v58 + 1) = v23;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    double v55 = -(v41 * v34 - v40 * v35);
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    double v42 = v55;
  }
  double v61 = v27;
  double v62 = v28;
  double v63 = v30;
  double v64 = *(float *)(v4 + 32);
  double v65 = v39;
  double v66 = v40;
  double v67 = v41;
  float v46 = v42;
  float v47 = v43;
  float v48 = v45;
  float v70 = v46;
  float v71 = v47;
  float v72 = v48;
  __int16 v68 = 2049;
  char v74 = *(unsigned char *)v4;
  md::MuninRoadLabelGenerator::createLabel((md::MuninRoadLabelGenerator *)&v57, *((md::MuninRoadLabelCreationParams **)a2[1] + 3), (uint64_t *)&v58);
  if (!v57.n128_u64[0])
  {
    v50 = (std::__shared_weak_count *)v57.n128_u64[1];
    if (!v57.n128_u64[1]) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  v49 = (__n128 *)*((void *)this + 3);
  if ((unint64_t)v49 >= *((void *)this + 4))
  {
    unint64_t v56 = v57.n128_u64[1];
    v51 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 16, v57);
    v50 = (std::__shared_weak_count *)v56;
  }
  else
  {
    v49->n128_u64[0] = v57.n128_u64[0];
    v50 = (std::__shared_weak_count *)v57.n128_u64[1];
    v49->n128_u64[1] = v57.n128_u64[1];
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v51 = v49 + 1;
  }
  *((void *)this + 3) = v51;
  if (v50)
  {
LABEL_16:
    if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_18:
  v52 = (std::__shared_weak_count *)*((void *)&v60 + 1);
  if (*((void *)&v60 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v60 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  v53 = (std::__shared_weak_count *)*((void *)&v59 + 1);
  if (*((void *)&v59 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v54 = (std::__shared_weak_count *)*((void *)&v58 + 1);
    if (!*((void *)&v58 + 1)) {
      return;
    }
  }
  else
  {
    v54 = (std::__shared_weak_count *)*((void *)&v58 + 1);
    if (!*((void *)&v58 + 1)) {
      return;
    }
  }
  if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
}

void sub_1A1DB88E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)va1);
  _Unwind_Resume(a1);
}

void md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams(md::MuninRoadLabelCreationParams *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__shared_ptr_emplace<md::MuninRoadFeature>::__on_zero_shared(uint64_t a1)
{
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 64) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2) {
      return;
    }
    goto LABEL_7;
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), *(void *)(a1 + 80), *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2) {
    return;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<md::MuninRoadFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5802C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MuninRoadFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5802C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::MuninJunctionIntersection::mercatorPosition(md::MuninJunctionIntersection *this)
{
  return (uint64_t)this + 48;
}

void md::MuninJunctionIntersection::~MuninJunctionIntersection(md::MuninJunctionIntersection *this)
{
  *(void *)this = &unk_1EF53D9C8;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EF53D9C8;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
}

uint64_t non-virtual thunk to'altitude::TileManager::onChildTileRemoved(uint64_t this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3 = *(void *)(this + 104);
  if (*(void *)(this + 112) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      this = (*(uint64_t (**)(void, altitude::Tile *, altitude::Tile *))(**(void **)(v3 + 8 * v7) + 40))(*(void *)(v3 + 8 * v7), a2, a3);
      unint64_t v7 = v8;
      uint64_t v3 = *(void *)(v6 + 104);
      ++v8;
    }
    while (v7 < (*(void *)(v6 + 112) - v3) >> 3);
  }
  return this;
}

uint64_t non-virtual thunk to'altitude::TileManager::onChildTileAdded(uint64_t this, altitude::Tile *a2, altitude::Tile *a3)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 104);
    if (*(void *)(this + 112) != v4)
    {
      unint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        this = (*(uint64_t (**)(void, altitude::Tile *, altitude::Tile *))(**(void **)(v4 + 8 * v7) + 32))(*(void *)(v4 + 8 * v7), a2, a3);
        unint64_t v7 = v8;
        uint64_t v4 = *(void *)(v3 + 104);
        ++v8;
      }
      while (v7 < (*(void *)(v3 + 112) - v4) >> 3);
    }
  }
  return this;
}

uint64_t non-virtual thunk to'altitude::TileManager::onTileComponentDataRelease(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ++*(_DWORD *)(result + 156);
  uint64_t v4 = *(void *)(result + 104);
  if (*(void *)(result + 112) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 24))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      unint64_t v9 = v10;
      uint64_t v4 = *(void *)(v8 + 104);
      ++v10;
    }
    while (v9 < (*(void *)(v8 + 112) - v4) >> 3);
  }
  return result;
}

uint64_t non-virtual thunk to'altitude::TileManager::onTileComponentDataLoaded(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ++*(_DWORD *)(result + 156);
  uint64_t v4 = *(void *)(result + 104);
  if (*(void *)(result + 112) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 16))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      unint64_t v9 = v10;
      uint64_t v4 = *(void *)(v8 + 104);
      ++v10;
    }
    while (v9 < (*(void *)(v8 + 112) - v4) >> 3);
  }
  return result;
}

void non-virtual thunk to'altitude::TileManager::~TileManager(altitude::TileManager *this)
{
  altitude::TileManager::~TileManager((altitude::TileManager *)((char *)this - 40));
  JUMPOUT(0x1A6239270);
}

{
  altitude::TileManager::~TileManager((altitude::TileManager *)((char *)this - 40));
}

void altitude::TileManager::~TileManager(altitude::TileManager *this)
{
  *(void *)this = &unk_1EF568838;
  *((void *)this + 5) = &unk_1EF568890;
  uint64_t v3 = *((void *)this + 9);
  uint64_t v2 = *((void *)this + 10);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      if (*(void *)(*(void *)(v3 + 8 * v4) + 32))
      {
        (*(void (**)(altitude::TileManager *, void))(*(void *)this + 48))(this, 0);
        uint64_t v3 = *((void *)this + 9);
        uint64_t v2 = *((void *)this + 10);
      }
      unint64_t v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 7));
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v6 = *((void *)this + 9);
  uint64_t v7 = *((void *)this + 10);
  if (v7 == v6)
  {
    uint64_t v6 = *((void *)this + 10);
  }
  else
  {
    unint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      unsigned int v10 = *(altitude::RootTileData **)(v6 + 8 * v8);
      if (v10)
      {
        altitude::RootTileData::~RootTileData(v10);
        MEMORY[0x1A6239270]();
        uint64_t v6 = *((void *)this + 9);
        uint64_t v7 = *((void *)this + 10);
      }
      unint64_t v8 = v9++;
    }
    while (v8 < (v7 - v6) >> 3);
  }
  double v11 = (void *)*((void *)this + 22);
  *((void *)this + 10) = v6;
  *((void *)this + 13) = *((void *)this + 12);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v11);
  *((void *)this + 21) = (char *)this + 176;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  long double v12 = (void *)*((void *)this + 27);
  if (v12)
  {
    *((void *)this + 28) = v12;
    operator delete(v12);
    long double v12 = (void *)*((void *)this + 22);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v12);
  double v13 = (void *)*((void *)this + 18);
  if (v13)
  {
    *((void *)this + 19) = v13;
    operator delete(v13);
  }
  __double2 v14 = (void *)*((void *)this + 15);
  if (v14)
  {
    *((void *)this + 16) = v14;
    operator delete(v14);
  }
  __double2 v15 = (void *)*((void *)this + 12);
  if (v15)
  {
    *((void *)this + 13) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((void *)this + 9);
  if (v16)
  {
    *((void *)this + 10) = v16;
    operator delete(v16);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 7));
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  altitude::TileManager::~TileManager(this);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::TileManager::preRenderUpdate(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 120);
  if (*(void *)(this + 128) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3));
      unint64_t v3 = v4;
      uint64_t v1 = *(void *)(v2 + 120);
      ++v4;
    }
    while (v3 < (*(void *)(v2 + 128) - v1) >> 3);
  }
  return this;
}

uint64_t altitude::TileManager::updateSceneGraph(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 192) = a2;
  uint64_t v2 = *(void *)(this + 120);
  if (*(void *)(this + 128) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 24))(*(void *)(v2 + 8 * v5), a2);
      unint64_t v5 = v6;
      uint64_t v2 = *(void *)(v4 + 120);
      ++v6;
    }
    while (v5 < (*(void *)(v4 + 128) - v2) >> 3);
  }
  return this;
}

uint64_t altitude::TileManager::onChildTileRemoved(uint64_t this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3 = *(void *)(this + 144);
  if (*(void *)(this + 152) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      this = (*(uint64_t (**)(void, altitude::Tile *, altitude::Tile *))(**(void **)(v3 + 8 * v7) + 40))(*(void *)(v3 + 8 * v7), a2, a3);
      unint64_t v7 = v8;
      uint64_t v3 = *(void *)(v6 + 144);
      ++v8;
    }
    while (v7 < (*(void *)(v6 + 152) - v3) >> 3);
  }
  return this;
}

uint64_t altitude::TileManager::onChildTileAdded(uint64_t this, altitude::Tile *a2, altitude::Tile *a3)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 144);
    if (*(void *)(this + 152) != v4)
    {
      unint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        this = (*(uint64_t (**)(void, altitude::Tile *, altitude::Tile *))(**(void **)(v4 + 8 * v7) + 32))(*(void *)(v4 + 8 * v7), a2, a3);
        unint64_t v7 = v8;
        uint64_t v4 = *(void *)(v3 + 144);
        ++v8;
      }
      while (v7 < (*(void *)(v3 + 152) - v4) >> 3);
    }
  }
  return this;
}

uint64_t altitude::TileManager::onTileComponentDataRelease(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ++*(_DWORD *)(result + 196);
  uint64_t v4 = *(void *)(result + 144);
  if (*(void *)(result + 152) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 24))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      unint64_t v9 = v10;
      uint64_t v4 = *(void *)(v8 + 144);
      ++v10;
    }
    while (v9 < (*(void *)(v8 + 152) - v4) >> 3);
  }
  return result;
}

uint64_t altitude::TileManager::onTileComponentDataLoaded(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ++*(_DWORD *)(result + 196);
  uint64_t v4 = *(void *)(result + 144);
  if (*(void *)(result + 152) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 16))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      unint64_t v9 = v10;
      uint64_t v4 = *(void *)(v8 + 144);
      ++v10;
    }
    while (v9 < (*(void *)(v8 + 152) - v4) >> 3);
  }
  return result;
}

uint64_t altitude::TileManager::needsUpdate(altitude::TileManager *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (*((void *)this + 16) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  unsigned int v4 = 1;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 40))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    unint64_t v3 = v4;
    uint64_t v1 = *((void *)this + 15);
    ++v4;
  }
  while (v3 < (*((void *)this + 16) - v1) >> 3);
  return result;
}

void altitude::TileManager::clear(altitude::TileManager *this)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v2 = *((void *)this + 10);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      if (*(void *)(*(void *)(v3 + 8 * v4) + 32))
      {
        (*(void (**)(altitude::TileManager *, void))(*(void *)this + 48))(this, 0);
        uint64_t v3 = *((void *)this + 9);
        uint64_t v2 = *((void *)this + 10);
      }
      unint64_t v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = *((void *)this + 15);
  if (*((void *)this + 16) != v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 48))(*(void *)(v6 + 8 * v7));
      unint64_t v7 = v8;
      uint64_t v6 = *((void *)this + 15);
      ++v8;
    }
    while (v7 < (*((void *)this + 16) - v6) >> 3);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 7));
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v9 = *((void *)this + 9);
  uint64_t v10 = *((void *)this + 10);
  if (v10 == v9)
  {
    uint64_t v9 = *((void *)this + 10);
  }
  else
  {
    unint64_t v11 = 0;
    unsigned int v12 = 1;
    do
    {
      double v13 = *(altitude::RootTileData **)(v9 + 8 * v11);
      if (v13)
      {
        altitude::RootTileData::~RootTileData(v13);
        MEMORY[0x1A6239270]();
        uint64_t v9 = *((void *)this + 9);
        uint64_t v10 = *((void *)this + 10);
      }
      unint64_t v11 = v12++;
    }
    while (v11 < (v10 - v9) >> 3);
  }
  __double2 v15 = (void *)*((void *)this + 22);
  __double2 v14 = (void *)((char *)this + 176);
  *(v14 - 12) = v9;
  *(v14 - 9) = *(v14 - 10);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v15);
  *(v14 - 1) = v14;
  *__double2 v14 = 0;
  v14[1] = 0;
}

void altitude::TileManager::addRootTileData(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = a1;
  unsigned int v5 = *(char **)(a1 + 80);
  unint64_t v4 = *(void *)(a1 + 88);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v8 = *(char **)(a1 + 72);
    uint64_t v9 = (v5 - v8) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      goto LABEL_103;
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        goto LABEL_104;
      }
      double v13 = operator new(8 * v12);
    }
    else
    {
      double v13 = 0;
    }
    __double2 v14 = &v13[8 * v9];
    __double2 v15 = &v13[8 * v12];
    *__double2 v14 = a2;
    unint64_t v7 = v14 + 1;
    if (v5 == v8)
    {
      unsigned int v8 = v5;
    }
    else
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_107;
      }
      if ((unint64_t)(v8 - v13) < 0x20) {
        goto LABEL_107;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      double v18 = &v13[8 * v9 - 16];
      double v19 = v5 - 16;
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *double v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_107:
        do
        {
          uint64_t v22 = *((void *)v6 - 1);
          v6 -= 8;
          *--__double2 v14 = v22;
        }
        while (v6 != v8);
        unsigned int v8 = *(char **)(a1 + 72);
      }
    }
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 88) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unsigned int v5 = a2;
    unint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 80) = v7;
  if (!*(unsigned char *)(a2 + 164)) {
    goto LABEL_48;
  }
  v23 = (_OWORD *)(a2 + 8);
  double v25 = (uint64_t **)(a1 + 56);
  uint64_t v24 = *(uint64_t **)(a1 + 56);
  if (!v24)
  {
    double v30 = (uint64_t *)(a1 + 56);
LABEL_40:
    double v35 = operator new(0x38uLL);
    v35[2] = *v23;
    *((void *)v35 + 6) = 0;
    *(void *)double v35 = 0;
    *((void *)v35 + 1) = 0;
    *((void *)v35 + 2) = v30;
    *double v25 = (uint64_t *)v35;
    uint64_t v36 = **(void **)(a1 + 48);
    double v37 = (uint64_t *)v35;
    if (v36)
    {
      *(void *)(a1 + 48) = v36;
      double v37 = *v25;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v37);
    ++*(void *)(a1 + 64);
    int v38 = *(unsigned __int8 *)(a2 + 164);
    *((void *)v35 + 6) = a2;
    if (v38) {
      goto LABEL_43;
    }
LABEL_48:
    float v46 = *(char **)(a1 + 104);
    unint64_t v45 = *(void *)(a1 + 112);
    if ((unint64_t)v46 < v45)
    {
      *(void *)float v46 = a2;
      float v47 = v46 + 8;
LABEL_83:
      *(void *)(a1 + 104) = v47;
      return;
    }
    float v48 = *(char **)(a1 + 96);
    uint64_t v49 = (v46 - v48) >> 3;
    unint64_t v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      uint64_t v51 = v45 - (void)v48;
      if (v51 >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 61) {
          goto LABEL_104;
        }
        v53 = operator new(8 * v52);
      }
      else
      {
        v53 = 0;
      }
      long long v60 = &v53[8 * v49];
      double v61 = &v53[8 * v52];
      *long long v60 = a2;
      float v47 = v60 + 1;
      if (v46 == v48)
      {
        float v48 = v46;
      }
      else
      {
        unint64_t v62 = v46 - v48 - 8;
        if (v62 < 0x58) {
          goto LABEL_108;
        }
        if ((unint64_t)(v48 - v53) < 0x20) {
          goto LABEL_108;
        }
        uint64_t v63 = (v62 >> 3) + 1;
        double v64 = &v53[8 * v49 - 16];
        double v65 = v46 - 16;
        uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *(_OWORD *)v65;
          *(v64 - 1) = *((_OWORD *)v65 - 1);
          *double v64 = v67;
          v64 -= 2;
          v65 -= 32;
          v66 -= 4;
        }
        while (v66);
        v60 -= v63 & 0x3FFFFFFFFFFFFFFCLL;
        v46 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_108:
          do
          {
            uint64_t v68 = *((void *)v46 - 1);
            v46 -= 8;
            *--long long v60 = v68;
          }
          while (v46 != v48);
          float v48 = *(char **)(a1 + 96);
        }
      }
      *(void *)(a1 + 96) = v60;
      *(void *)(a1 + 104) = v47;
      *(void *)(a1 + 112) = v61;
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_83;
    }
LABEL_103:
    abort();
  }
  unsigned int v26 = *(_DWORD *)(a2 + 8);
  unsigned int v27 = *(_DWORD *)(a2 + 12);
  unsigned int v28 = *(_DWORD *)(a2 + 16);
  unsigned int v29 = *(_DWORD *)(a2 + 20);
  while (1)
  {
    while (1)
    {
      double v30 = v24;
      unsigned int v31 = *((_DWORD *)v24 + 8);
      if (v26 < v31) {
        goto LABEL_27;
      }
      if (v26 <= v31) {
        break;
      }
LABEL_32:
      uint64_t v24 = (uint64_t *)v30[1];
      if (!v24)
      {
        double v25 = (uint64_t **)(v30 + 1);
        goto LABEL_40;
      }
    }
    unsigned int v32 = *((_DWORD *)v30 + 9);
    if (v27 >= v32)
    {
      if (v27 > v32) {
        goto LABEL_32;
      }
      unsigned int v33 = *((_DWORD *)v30 + 10);
      if (v28 >= v33)
      {
        if (v28 > v33) {
          goto LABEL_32;
        }
        unsigned int v34 = *((_DWORD *)v30 + 11);
        if (v29 >= v34) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v24 = (uint64_t *)*v30;
    double v25 = (uint64_t **)v30;
    if (!*v30) {
      goto LABEL_40;
    }
  }
  if (v34 < v29) {
    goto LABEL_32;
  }
  v30[6] = a2;
LABEL_43:
  double v39 = *(char **)(a1 + 96);
  double v40 = *(char **)(a1 + 104);
  unint64_t v41 = (v40 - v39) >> 3;
  if (v40 != v39)
  {
    unint64_t v42 = 0;
    unsigned int v43 = 1;
    while (1)
    {
      uint64_t v44 = *(void *)&v39[8 * v42];
      if (*(unsigned char *)(v44 + 164)) {
        break;
      }
      unint64_t v42 = v43++;
      if (v41 <= v42) {
        goto LABEL_60;
      }
    }
    unsigned int v54 = *(_DWORD *)(v44 + 8);
    if (*(_DWORD *)v23 != v54)
    {
      if (*(_DWORD *)v23 < v54)
      {
        unint64_t v69 = 0;
        unsigned int v70 = 1;
        do
        {
          if (*(unsigned char *)(*(void *)&v39[8 * v69] + 164))
          {
            *(void *)&v39[8 * v69] = a2;
            double v39 = *(char **)(a1 + 96);
            double v40 = *(char **)(a1 + 104);
          }
          unint64_t v69 = v70++;
        }
        while (v69 < (v40 - v39) >> 3);
      }
      return;
    }
  }
LABEL_60:
  unint64_t v55 = *(void *)(a1 + 112);
  if ((unint64_t)v40 < v55)
  {
    *(void *)double v40 = a2;
    *(void *)(a1 + 104) = v40 + 8;
    return;
  }
  unint64_t v56 = v41 + 1;
  if ((v41 + 1) >> 61) {
    goto LABEL_103;
  }
  uint64_t v57 = v55 - (void)v39;
  if (v57 >> 2 > v56) {
    unint64_t v56 = v57 >> 2;
  }
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v58 = v56;
  }
  if (v58)
  {
    if (!(v58 >> 61))
    {
      long long v59 = operator new(8 * v58);
      goto LABEL_90;
    }
LABEL_104:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  long long v59 = 0;
LABEL_90:
  float v71 = &v59[8 * v41];
  float v72 = &v59[8 * v58];
  *float v71 = a2;
  int v73 = v71 + 1;
  if (v40 == v39)
  {
    double v39 = v40;
  }
  else
  {
    unint64_t v74 = v40 - v39 - 8;
    if (v74 < 0x58) {
      goto LABEL_109;
    }
    if (v40 - v59 - ((v40 - v39) & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_109;
    }
    uint64_t v75 = (v74 >> 3) + 1;
    v76 = &v59[8 * v41 - 16];
    v77 = v40 - 16;
    uint64_t v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      _OWORD *v76 = v79;
      v76 -= 2;
      v77 -= 32;
      v78 -= 4;
    }
    while (v78);
    v71 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
    v40 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
    if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        uint64_t v80 = *((void *)v40 - 1);
        v40 -= 8;
        *--float v71 = v80;
      }
      while (v40 != v39);
      double v39 = *(char **)(a1 + 96);
    }
  }
  *(void *)(a1 + 96) = v71;
  *(void *)(a1 + 104) = v73;
  *(void *)(a1 + 112) = v72;
  if (v39) {
    operator delete(v39);
  }
  *(void *)(a1 + 104) = v73;
}

void altitude::TileManager::registerTileListener(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1[18];
  unsigned int v5 = (char *)a1[19];
  uint64_t v6 = v5;
  unint64_t v7 = v4;
  if (v4 != v5)
  {
    while (*(void *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v5)
      {
        unint64_t v7 = (char *)a1[19];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    unint64_t v8 = a1[20];
    if ((unint64_t)v5 >= v8)
    {
      int64_t v10 = v5 - v4;
      uint64_t v11 = (v5 - v4) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v8 - (void)v4;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        __double2 v15 = operator new(8 * v14);
      }
      else
      {
        __double2 v15 = 0;
      }
      unint64_t v16 = &v15[8 * v11];
      uint64_t v17 = &v15[8 * v14];
      void *v16 = a2;
      uint64_t v9 = v16 + 1;
      if (v4 != v5)
      {
        if ((unint64_t)(v10 - 8) < 0x58) {
          goto LABEL_34;
        }
        if ((unint64_t)(v4 - v15) < 0x20) {
          goto LABEL_34;
        }
        unint64_t v18 = ((unint64_t)(v10 - 8) >> 3) + 1;
        uint64_t v6 = &v5[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
        double v19 = &v15[8 * v11 - 16];
        uint64_t v20 = v5 - 16;
        uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *double v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v16 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            uint64_t v23 = *((void *)v6 - 1);
            v6 -= 8;
            *--unint64_t v16 = v23;
          }
          while (v6 != v4);
          unint64_t v4 = (char *)a1[18];
        }
      }
      a1[18] = v16;
      a1[19] = v9;
      a1[20] = v17;
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(void *)unsigned int v5 = a2;
      uint64_t v9 = v5 + 8;
    }
    a1[19] = v9;
  }
}

void altitude::TileManager::unregisterTileListener(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 152) - (void)v3;
  unint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0) {
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  while (v3[v7] != a2)
  {
    if (v6 == ++v7) {
      goto LABEL_21;
    }
  }
  unint64_t v6 = (v5 - 1);
  v3[v7] = v3[v6];
  uint64_t v3 = *(void **)(a1 + 144);
  unint64_t v8 = *(unsigned char **)(a1 + 152);
  unint64_t v5 = (v8 - (unsigned char *)v3) >> 3;
  unint64_t v9 = v6 - v5;
  if (v6 <= v5)
  {
LABEL_21:
    if (v5 <= v6) {
      return;
    }
    uint64_t v23 = (char *)&v3[v6];
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 160);
  if (v9 <= (v10 - (uint64_t)v8) >> 3)
  {
    bzero(*(void **)(a1 + 152), 8 * v9);
    uint64_t v23 = &v8[8 * v9];
LABEL_23:
    *(void *)(a1 + 152) = v23;
    return;
  }
  uint64_t v11 = v10 - (void)v3;
  if (v11 >> 2 > v6) {
    unint64_t v6 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = 8 * v6;
  uint64_t v13 = operator new(8 * v6);
  unint64_t v14 = &v13[8 * v5];
  bzero(v14, 8 * v9);
  __double2 v15 = &v14[8 * v9];
  if (v8 == (unsigned char *)v3)
  {
    uint64_t v3 = v8;
  }
  else
  {
    unint64_t v16 = v8 - (unsigned char *)v3 - 8;
    if (v16 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)((char *)v3 - v13) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    unint64_t v18 = &v13[8 * v5 - 16];
    double v19 = (long long *)(v8 - 16);
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *unint64_t v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v14 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v8 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v22 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v14 - 1) = v22;
        v14 -= 8;
      }
      while (v8 != (unsigned char *)v3);
      uint64_t v3 = *(void **)(a1 + 144);
    }
  }
  *(void *)(a1 + 144) = v14;
  *(void *)(a1 + 152) = v15;
  *(void *)(a1 + 160) = &v13[v12];
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t md::LabelPart::clone(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::featureID(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::partIntersectsDisplayFrustum(void *a1, uint64_t a2)
{
  uint64_t result = md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(a1[3] + 312), a2);
  if (result)
  {
    unint64_t v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 488);
    return v5(a1, a2);
  }
  return result;
}

BOOL md::CollisionObject::intersectsWorldFrustum(float32x2_t *a1, uint64_t a2)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (!*(void *)&a1[14] && !*(void *)&a1[15]) {
    return 0;
  }
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  double v7 = *(double *)(a2 + 64);
  double v8 = *(double *)(a2 + 72);
  double v9 = *(double *)(a2 + 96);
  double v10 = *(double *)(a2 + 104);
  double v11 = *(double *)(a2 + 16);
  double v12 = *(double *)(a2 + 24);
  v2.i64[0] = *(void *)(a2 + 48);
  v13.f64[0] = *(float64_t *)(a2 + 56);
  double v14 = *(double *)(a2 + 88);
  double v15 = *(double *)(a2 + 120);
  double v16 = v12 + *(double *)a2;
  float64_t v17 = v13.f64[0] + v5;
  double v18 = v14 + v7;
  double v19 = v15 + v9;
  double v20 = v12 - *(double *)a2;
  float64_t v21 = v13.f64[0] - v5;
  double v22 = v14 - v7;
  double v23 = v15 - v9;
  double v24 = v12 + v4;
  float64_t v25 = v13.f64[0] + v6;
  double v26 = v14 + v8;
  double v27 = v15 + v10;
  double v28 = v12 - v4;
  float64_t v29 = v13.f64[0] - v6;
  double v30 = v14 - v8;
  double v31 = v15 - v10;
  double v32 = v12 - v11;
  v33.f64[0] = v11;
  v33.f64[1] = v32;
  double v34 = v15 - *(double *)(a2 + 112);
  float64x2_t v35 = vmulq_f64(v33, v33);
  v33.f64[0] = *(float64_t *)(a2 + 112);
  v13.f64[1] = v14;
  *(void *)&v36.f64[0] = v2.i64[0];
  v36.f64[1] = *(float64_t *)(a2 + 80);
  float64x2_t v37 = vsubq_f64(v13, v36);
  float64x2_t v38 = (float64x2_t)vzip1q_s64(v2, (int64x2_t)v37);
  float64x2_t v39 = vmlaq_f64(v35, v38, v38);
  v38.f64[1] = v37.f64[1];
  v38.f64[0] = *(float64_t *)(a2 + 80);
  __asm { FMOV            V27.2D, #1.0 }
  float64x2_t v45 = vdivq_f64(_Q27, vsqrtq_f64(vmlaq_f64(v39, v38, v38)));
  double v46 = *(double *)(a2 + 80) * v45.f64[0];
  v128[0] = v11 * v45.f64[0];
  v128[1] = *(double *)v2.i64 * v45.f64[0];
  float64x2_t v47 = vmulq_f64(v45, v33);
  float64x2_t v48 = vmulq_laneq_f64(v37, v45, 1);
  v37.f64[0] = vmuld_lane_f64(v34, v45, 1);
  float64x2_t v129 = v47;
  float64x2_t v130 = v48;
  v128[2] = v46;
  double v49 = 1.0 / sqrt(v24 * v24 + v25 * v25 + v26 * v26);
  double v50 = v49 * v27;
  float64_t v131 = v37.f64[0];
  double v132 = v49 * v24;
  double v133 = v49 * v25;
  double v134 = v49 * v26;
  double v51 = 1.0 / sqrt(v28 * v28 + v29 * v29 + v30 * v30);
  double v135 = v50;
  double v136 = v51 * v28;
  double v137 = v51 * v29;
  double v138 = v51 * v30;
  double v52 = 1.0 / sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  double v139 = v51 * v31;
  double v140 = v52 * v16;
  double v141 = v52 * v17;
  double v142 = v52 * v18;
  double v53 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  double v143 = v52 * v19;
  double v144 = v53 * v20;
  double v145 = v53 * v21;
  double v146 = v53 * v22;
  double v147 = v53 * v23;
  geo::Frustum<double>::calculateCorners(v128, (double *)a2, 0.0);
  float32x2_t v54 = a1[14];
  if (v54)
  {
    float64x2_t v55 = *(float64x2_t *)*(void *)&v54;
    long long v56 = *(_OWORD *)(*(void *)&v54 + 16);
    long long v57 = *(_OWORD *)(*(void *)&v54 + 48);
    float64x2_t v122 = *(float64x2_t *)(*(void *)&v54 + 32);
    long long v123 = v57;
    float64x2_t v120 = v55;
    long long v121 = v56;
    long long v58 = *(_OWORD *)(*(void *)&v54 + 64);
    long long v59 = *(_OWORD *)(*(void *)&v54 + 80);
    long long v60 = *(_OWORD *)(*(void *)&v54 + 112);
    float64x2_t v126 = *(float64x2_t *)(*(void *)&v54 + 96);
    long long v127 = v60;
    long long v124 = v58;
    long long v125 = v59;
    if (a1[19].i8[0]) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v81 = 25;
    if (!a1[24].i8[7]) {
      uint64_t v81 = 24;
    }
    float v82 = a1[1].f32[0];
    float v83 = a1->f32[0];
    if (v82 >= a1->f32[0])
    {
      float v84 = a1[1].f32[1];
      float v86 = a1->f32[1];
      if (v84 >= v86)
      {
        float v87 = a1->f32[v81];
        float v83 = v83 - v87;
        float v82 = v82 + v87;
        float v116 = v86 - v87;
        float v84 = v84 + v87;
      }
      else
      {
        float v116 = a1->f32[1];
      }
    }
    else
    {
      float v116 = a1->f32[1];
      float v84 = a1[1].f32[1];
    }
    double v88 = v82;
    double v89 = v84;
    long long v90 = v123;
    double v111 = *(double *)&v121 * v88;
    long long v91 = v127;
    double v92 = *(double *)&v123 * v89 + *(double *)&v121 * v88 + *(double *)&v127;
    double v110 = *((double *)&v121 + 1) * v88;
    double v93 = 1.0 / (*((double *)&v123 + 1) * v89 + *((double *)&v121 + 1) * v88 + *((double *)&v127 + 1));
    float64x2_t v94 = vmulq_n_f64(v120, v88);
    float64x2_t v114 = v122;
    float64x2_t v95 = vmulq_n_f64(v122, v89);
    float64x2_t v109 = v94;
    double v96 = v93 * v92;
    *(void *)v148 = 0;
    v165[0] = 0.0;
    double v97 = v83;
    double v98 = *(double *)&v121 * v97;
    double v99 = *((double *)&v121 + 1) * v97;
    double v100 = 1.0 / (*((double *)&v123 + 1) * v89 + *((double *)&v121 + 1) * v97 + *((double *)&v127 + 1));
    float64x2_t v112 = vmulq_n_f64(v120, v97);
    float64x2_t v118 = v126;
    double v101 = v100 * (*(double *)&v123 * v89 + *(double *)&v121 * v97 + *(double *)&v127);
    float64x2_t v113 = vmulq_n_f64(vaddq_f64(vaddq_f64(v95, v112), v126), v100);
    float64x2_t v108 = vmulq_n_f64(vaddq_f64(vaddq_f64(v95, v94), v126), v93);
    int64x2_t v154 = (int64x2_t)v108;
    *(float64x2_t *)&v155[8] = vsubq_f64(v113, v108);
    *(double *)v155 = v93 * v92;
    *(double *)&v155[24] = v101 - v93 * v92;
    if ((geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v128, (double *)v154.i64, 2u, (double *)v148, v165) & 1) == 0)
    {
      double v102 = *(double *)&v90 * v116;
      double v103 = *((double *)&v90 + 1) * v116;
      double v104 = 1.0 / (v103 + v99 + *((double *)&v91 + 1));
      float64x2_t v115 = vmulq_n_f64(v114, v116);
      double v105 = v104 * (v102 + v98 + *(double *)&v91);
      float64x2_t v117 = vmulq_n_f64(vaddq_f64(vaddq_f64(v115, v112), v118), v104);
      int64x2_t v154 = (int64x2_t)v113;
      *(float64x2_t *)&v155[8] = vsubq_f64(v117, v113);
      *(double *)v155 = v101;
      *(double *)&v155[24] = v105 - v101;
      if ((geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v128, (double *)v154.i64, 2u, (double *)v148, v165) & 1) == 0)
      {
        double v106 = 1.0 / (v103 + v110 + *((double *)&v91 + 1));
        double v107 = v106 * (v102 + v111 + *(double *)&v91);
        float64x2_t v119 = vmulq_n_f64(vaddq_f64(vaddq_f64(v115, v109), v118), v106);
        int64x2_t v154 = (int64x2_t)v117;
        *(float64x2_t *)&v155[8] = vsubq_f64(v119, v117);
        *(double *)v155 = v105;
        *(double *)&v155[24] = v107 - v105;
        if ((geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v128, (double *)v154.i64, 2u, (double *)v148, v165) & 1) == 0)
        {
          int64x2_t v154 = (int64x2_t)v119;
          *(float64x2_t *)&v155[8] = vsubq_f64(v108, v119);
          *(double *)v155 = v107;
          *(double *)&v155[24] = v96 - v107;
          if (!geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(v128, (double *)v154.i64, 2u, (double *)v148, v165))return 0; {
        }
          }
      }
    }
    return 1;
  }
  float32x2_t v63 = a1[15];
  double v64 = *(double *)(*(void *)&v63 + 24);
  double v65 = *(double *)(*(void *)&v63 + 32);
  double v66 = *(double *)(*(void *)&v63 + 40);
  double v67 = *(double *)(*(void *)&v63 + 48);
  double v68 = v65 + v65;
  double v69 = (v65 + v65) * v65;
  double v70 = (v66 + v66) * v66;
  double v71 = v64 + v64;
  double v72 = (v64 + v64) * v65;
  double v73 = (v66 + v66) * v67;
  double v74 = v66 * (v64 + v64);
  double v75 = v67 * v68;
  double v76 = v67 * v68 + v74;
  double v77 = 1.0 - (v64 + v64) * v64;
  double v78 = v68 * v66;
  double v79 = v67 * v71;
  *(double *)v154.i64 = 1.0 - (v69 + v70);
  *(double *)&v154.i64[1] = v73 + v72;
  *(double *)&v155[16] = v72 - v73;
  *(double *)&v155[24] = v77 - v70;
  double v158 = v76;
  double v159 = v78 - v79;
  *(double *)v155 = v74 - v75;
  double v156 = v79 + v78;
  double v160 = v77 - v69;
  *(void *)&v155[8] = 0;
  uint64_t v157 = 0;
  uint64_t v161 = 0;
  long long v162 = *(_OWORD *)*(void *)&v63;
  uint64_t v163 = *(void *)(*(void *)&v63 + 16);
  uint64_t v164 = 0x3FF0000000000000;
  *(_OWORD *)&v148[40] = 0u;
  long long v150 = 0u;
  long long v152 = 0u;
  long long v151 = 0u;
  long long v149 = 0u;
  memset(&v148[8], 0, 32);
  uint64_t v153 = 0x3FF0000000000000;
  uint64_t v80 = *(void *)(*(void *)&v63 + 64);
  *(void *)v148 = *(void *)(*(void *)&v63 + 56);
  *(void *)&v148[40] = v80;
  *((void *)&v150 + 1) = *(void *)(*(void *)&v63 + 72);
  gm::operator*<double,4,4,4>(v120.f64, (double *)v154.i64, (double *)v148);
  if (!a1[19].i8[0]) {
    goto LABEL_9;
  }
LABEL_5:
  float64x2_t v61 = vcvtq_f64_f32(a1[17]);
  *(float64x2_t *)v148 = vcvtq_f64_f32(a1[16]);
  *(float64x2_t *)&v148[16] = v61;
  *(float64x2_t *)&v148[32] = vcvtq_f64_f32(a1[18]);
  int64x2_t v154 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)v155 = xmmword_1A28FC720;
  *(int64x2_t *)&v155[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)&v165[0] = &unk_1EF57D5A8;
  *(void *)&v165[1] = &v154;
  *(void *)&v165[2] = &v120;
  v166 = v165;
  double v62 = gm::Box<double,3>::forEachCorner((uint64_t)v148, (uint64_t)v165);
  if (v166 == v165)
  {
    (*(void (**)(double *, double))(*(void *)&v165[0] + 32))(v165, v62);
  }
  else if (v166)
  {
    (*(void (**)(double *, double))(*(void *)v166 + 40))(v166, v62);
  }
  return geo::Intersect::encloses<double>(v128, (double *)v154.i64) != 0;
}

uint64_t geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>(double *a1, double *a2, unsigned int a3, double *a4, double *a5)
{
  uint64_t v5 = 8 * a3;
  double v6 = *(double *)((char *)&unk_1A28FFD60 + v5);
  *a4 = *(double *)((char *)&unk_1A28FFD48 + v5);
  *a5 = v6;
  double v7 = a1[1];
  double v8 = a1[2];
  double v9 = a2[3] * *a1 + a2[4] * v7 + a2[5] * v8;
  double v10 = a1[3] + *a2 * *a1 + a2[1] * v7 + a2[2] * v8;
  BOOL v11 = v9 <= 0.0;
  if (v9 == 0.0)
  {
    if (v10 < 0.0) {
      return 0;
    }
  }
  else
  {
    double v12 = -v10 / v9;
    if (v11)
    {
      double v6 = fmin(v12, v6);
      *a5 = v6;
    }
    else
    {
      *a4 = fmax(*a4, v12);
      double v6 = *a5;
    }
  }
  double v13 = *a4;
  if (*a4 <= v6)
  {
    double v14 = a1[4];
    double v15 = a1[5];
    double v16 = a1[6];
    double v17 = a2[3] * v14 + a2[4] * v15 + a2[5] * v16;
    double v18 = a1[7] + *a2 * v14 + a2[1] * v15 + a2[2] * v16;
    BOOL v19 = v17 <= 0.0;
    if (v17 == 0.0)
    {
      if (v18 < 0.0) {
        return 0;
      }
    }
    else
    {
      double v20 = -v18 / v17;
      if (v19)
      {
        double v6 = fmin(v20, v6);
        *a5 = v6;
        double v13 = *a4;
        if (*a4 > v6) {
          return 0;
        }
LABEL_16:
        double v21 = a1[8];
        double v22 = a1[9];
        double v23 = a1[10];
        double v24 = a2[3] * v21 + a2[4] * v22 + a2[5] * v23;
        double v25 = a1[11] + *a2 * v21 + a2[1] * v22 + a2[2] * v23;
        BOOL v26 = v24 <= 0.0;
        if (v24 == 0.0)
        {
          if (v25 < 0.0) {
            return 0;
          }
        }
        else
        {
          double v27 = -v25 / v24;
          if (v26)
          {
            double v6 = fmin(v27, v6);
            *a5 = v6;
            double v13 = *a4;
            if (*a4 > v6) {
              return 0;
            }
            goto LABEL_24;
          }
          double v13 = fmax(v13, v27);
          *a4 = v13;
          double v6 = *a5;
        }
        if (v13 > v6) {
          return 0;
        }
LABEL_24:
        double v28 = a1[12];
        double v29 = a1[13];
        double v30 = a1[14];
        double v31 = a2[3] * v28 + a2[4] * v29 + a2[5] * v30;
        double v32 = a1[15] + *a2 * v28 + a2[1] * v29 + a2[2] * v30;
        BOOL v33 = v31 <= 0.0;
        if (v31 == 0.0)
        {
          if (v32 < 0.0) {
            return 0;
          }
        }
        else
        {
          double v34 = -v32 / v31;
          if (v33)
          {
            double v6 = fmin(v34, v6);
            *a5 = v6;
            double v13 = *a4;
          }
          else
          {
            double v13 = fmax(v13, v34);
            *a4 = v13;
            double v6 = *a5;
          }
        }
        if (v13 <= v6)
        {
          double v35 = a1[16];
          double v36 = a1[17];
          double v37 = a1[18];
          double v38 = a2[3] * v35 + a2[4] * v36 + a2[5] * v37;
          double v39 = a1[19] + *a2 * v35 + a2[1] * v36 + a2[2] * v37;
          BOOL v40 = v38 <= 0.0;
          if (v38 == 0.0)
          {
            if (v39 < 0.0) {
              return 0;
            }
          }
          else
          {
            double v41 = -v39 / v38;
            if (v40)
            {
              double v6 = fmin(v41, v6);
              *a5 = v6;
              double v13 = *a4;
            }
            else
            {
              double v13 = fmax(v13, v41);
              *a4 = v13;
              double v6 = *a5;
            }
          }
          if (v13 <= v6)
          {
            double v42 = a1[20];
            double v43 = a1[21];
            double v44 = a1[22];
            double v45 = a2[3] * v42 + a2[4] * v43 + a2[5] * v44;
            double v46 = a1[23] + *a2 * v42 + a2[1] * v43 + a2[2] * v44;
            BOOL v47 = v45 <= 0.0;
            if (v45 == 0.0)
            {
              if (v46 < 0.0) {
                return 0;
              }
            }
            else
            {
              double v48 = -v46 / v45;
              if (v47)
              {
                double v6 = fmin(v48, v6);
                *a5 = v6;
                double v13 = *a4;
              }
              else
              {
                double v13 = fmax(v13, v48);
                *a4 = v13;
                double v6 = *a5;
              }
            }
            if (v13 <= v6) {
              return 1;
            }
          }
        }
        return 0;
      }
      double v13 = fmax(v13, v20);
      *a4 = v13;
      double v6 = *a5;
    }
    if (v13 > v6) {
      return 0;
    }
    goto LABEL_16;
  }
  return 0;
}

uint64_t md::LabelPart::partIntersectsStagingFrustum(void *a1, uint64_t a2)
{
  uint64_t result = md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(a1[3] + 72), a2);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t))(*a1 + 480);
    return v5(a1, a2);
  }
  return result;
}

uint64_t md::LabelPart::partCollidesWithDisplayObject(md::LabelPart *this, const md::CollisionObject *a2)
{
  int64x2_t v2 = (float *)*((void *)this + 3);
  if (v2[100] <= *((float *)a2 + 20)
    || v2[98] >= *((float *)a2 + 22)
    || v2[101] <= *((float *)a2 + 21)
    || v2[99] >= *((float *)a2 + 23))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(void))(*(void *)this + 472))();
  }
}

uint64_t md::ExternalMeshLabelPart::publicName(md::ExternalMeshLabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::setRenderOrder(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 558) = a2;
  return this;
}

uint64_t md::LabelPart::setRenderPass(uint64_t result, char a2)
{
  *(unsigned char *)(result + 557) = a2;
  return result;
}

void md::ExternalMeshLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "ExternalMeshLabelPart");
}

uint64_t md::LabelPart::needsCrossfade()
{
  return 0;
}

uint64_t md::LabelPart::isTextRequired(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isTextVisible(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::visible()
{
  return 1;
}

uint64_t md::LabelPart::isNullLabelPart(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isCrossFading(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isCrossFadeNode(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isTextRTL(md::LabelPart *this)
{
  return 0;
}

float md::LabelPart::calloutAnchorRect(md::LabelPart *this)
{
  return 3.4028e38;
}

uint64_t md::LabelPart::selectionBehavior(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isSelectable(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::hasSelectableParts(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::isInterruptibleAnimation(md::LabelPart *this)
{
  return 1;
}

uint64_t md::LabelPart::findAlternatePlacement()
{
  return 0;
}

uint64_t md::LabelPart::snapToDefaultPlacement()
{
  return 0;
}

uint64_t md::LabelPart::reserveSpaceLabelPart(md::LabelPart *this, BOOL *a2)
{
  return 0;
}

uint64_t md::LabelPart::optionalTextHidden(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::setPartRotation(uint64_t result, float *a2)
{
  float v2 = *a2;
  *(float *)(result + 288) = *a2;
  float v3 = a2[1];
  *(float *)(result + 292) = v3;
  float v4 = *(float *)(result + 296);
  float v5 = *(float *)(result + 300);
  float v6 = v4 * v3;
  float v7 = -(float)((float)(v5 * v3) - (float)(v4 * v2));
  *(float *)(result + 88) = v7;
  *(float *)(result + 92) = v6 + (float)(v5 * v2);
  *(unsigned char *)(result + 268) = fabsf(v7 + -1.0) > 0.000001;
  float v8 = *a2;
  *(float *)(result + 528) = *a2;
  float v9 = a2[1];
  *(float *)(result + 532) = v9;
  float v10 = *(float *)(result + 536);
  float v11 = *(float *)(result + 540);
  float v12 = v10 * v9;
  float v13 = -(float)((float)(v11 * v9) - (float)(v10 * v8));
  *(float *)(result + 328) = v13;
  *(float *)(result + 332) = v12 + (float)(v11 * v8);
  *(unsigned char *)(result + 508) = fabsf(v13 + -1.0) > 0.000001;
  return result;
}

uint64_t md::LabelPart::checkResourcesReady(md::LabelPart *this, LabelManager *a2)
{
  return 37;
}

double md::LabelPart::hikerWidth()
{
  return 0.0;
}

double md::LabelPart::bottomAlignInset()
{
  return 0.0;
}

double md::LabelPart::topRightAlignInset()
{
  return 0.0;
}

double md::LabelPart::topLeftAlignInset()
{
  return 0.0;
}

double md::LabelPart::partAnimationOrigin(md::LabelPart *this)
{
  return 0.0;
}

float md::LabelPart::animationSize(md::LabelPart *this)
{
  uint64_t v1 = (float *)*((void *)this + 3);
  float v2 = v1[20];
  float v3 = v1[18];
  float result = 0.0;
  if (v2 >= v3 && v1[21] >= v1[19]) {
    return v2 - v3;
  }
  return result;
}

double md::LabelPart::bottomLayoutMargin()
{
  return 0.0;
}

double md::LabelPart::topLayoutMargin()
{
  return 0.0;
}

double md::LabelPart::localBoundsOffset()
{
  return 0.0;
}

uint64_t md::LabelPart::isVisuallySimilar(md::LabelPart *this, const md::LabelPart *a2)
{
  return 0;
}

uint64_t md::LabelPart::partType(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::clearLabelAnimationIDs(uint64_t this)
{
  *(unsigned char *)(this + 564) = -1;
  return this;
}

uint64_t md::LabelPart::modelMatrix(md::LabelPart *this)
{
  return 0;
}

uint64_t md::LabelPart::stagingModelMatrix(md::LabelPart *this)
{
  return 0;
}

uint64_t md::ExternalMeshLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3 = *(void *)(result + 576);
  if (v3)
  {
    *(float *)(v3 + 112) = a3;
    *(float *)(result + 552) = fmaxf(fminf(a3, 1.0), 0.0);
    float v5 = *(void **)(a2 + 48);
    unint64_t v6 = *(void *)(a2 + 56);
    if ((unint64_t)v5 < v6)
    {
      if (v5) {
        void *v5 = v3;
      }
      float v7 = v5 + 1;
LABEL_28:
      *(void *)(a2 + 48) = v7;
      return result;
    }
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v6 - v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      float result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a2 + 64) + 16))(*(void *)(a2 + 64), 8 * v10, 8);
      float v13 = (void *)(result + 8 * v9);
      unint64_t v10 = result + v12;
      if (result) {
        *float v13 = v3;
      }
    }
    else
    {
      float v13 = (void *)(8 * v9);
    }
    float v7 = v13 + 1;
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    if (v14 == v15)
    {
LABEL_26:
      *(void *)(a2 + 40) = v13;
      *(void *)(a2 + 48) = v7;
      uint64_t v24 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = v10;
      if (v14) {
        float result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 64) + 40))(*(void *)(a2 + 64), v14, v24 - v14);
      }
      goto LABEL_28;
    }
    unint64_t v16 = v14 - v15 - 8;
    if (v16 < 0x38)
    {
      uint64_t v18 = *(void *)(a2 + 48);
    }
    else if ((unint64_t)(v14 - (void)v13) < 0x20)
    {
      uint64_t v18 = *(void *)(a2 + 48);
    }
    else
    {
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = v14 - 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v19 = v13 - 2;
      double v20 = (long long *)(v14 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *BOOL v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v13 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_25;
      }
    }
    do
    {
      uint64_t v23 = *(void *)(v18 - 8);
      v18 -= 8;
      *--float v13 = v23;
    }
    while (v18 != v15);
LABEL_25:
    uint64_t v14 = *(void *)(a2 + 40);
    goto LABEL_26;
  }
  return result;
}

uint64_t md::ExternalMeshLabelPart::layoutForDisplay(uint64_t a1)
{
  if (*(void *)(a1 + 576)) {
    return 37;
  }
  else {
    return 26;
  }
}

uint64_t md::ExternalMeshLabelPart::layoutForStaging(void *a1)
{
  uint64_t v1 = a1[74];
  uint64_t v2 = a1[72];
  if (!v1)
  {
    if (v2) {
      return 37;
    }
    return 26;
  }
  if (v2) {
    return 37;
  }
  float v4 = (std::mutex *)(v1 + 96);
  std::mutex::lock((std::mutex *)(v1 + 96));
  unsigned int v5 = *(unsigned __int8 *)(v1 + 176);
  std::mutex::unlock(v4);
  if (v5 < 2) {
    return 25;
  }
  if (v5 - 3 < 2) {
    return 26;
  }
  if (v5 != 2) {
    return 37;
  }
  uint64_t v6 = a1[74];
  std::mutex::lock((std::mutex *)(v6 + 96));
  long long v7 = *(_OWORD *)(v6 + 160);
  long long v10 = v7;
  if (*((void *)&v7 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock((std::mutex *)(v6 + 96));
  uint64_t v8 = (std::__shared_weak_count *)a1[73];
  *((_OWORD *)a1 + 36) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (a1[72]) {
    return 37;
  }
  else {
    return 26;
  }
}

uint64_t md::LabelPart::setInWorldSpace(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 565) = a2;
  *(unsigned char *)(this + 566) = a3;
  return this;
}

uint64_t md::LabelPart::setPreviousModelChainTransform(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t md::LabelPart::setPreviousStagingModelChainTransform(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t md::LabelPart::setPreviousModelChainMatrix(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t md::LabelPart::setPreviousStagingModelChainMatrix(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

void md::ExternalMeshLabelPart::~ExternalMeshLabelPart(md::ExternalMeshLabelPart *this)
{
  md::ExternalMeshLabelPart::~ExternalMeshLabelPart(this);
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EF53F508;
  uint64_t v2 = *((void *)this + 72);
  if (v2)
  {
    atomic_store(1u, (unsigned __int8 *)(v2 + 116));
    int v3 = (std::__shared_weak_count *)*((void *)this + 75);
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  float v4 = *((void *)this + 74);
  std::mutex::lock((std::mutex *)(v4 + 96));
  *(unsigned char *)(v4 + 176) = 4;
  unsigned int v5 = *(void *)(v4 + 160);
  if (v5) {
    atomic_store(1u, (unsigned __int8 *)(v5 + 116));
  }
  std::mutex::unlock((std::mutex *)(v4 + 96));
  int v3 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v3)
  {
LABEL_7:
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_9:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)this = &unk_1EF5540C8;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

void sub_1A1DBB390(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  md::LabelPart::~LabelPart(v1);
  _Unwind_Resume(a1);
}

void md::LabelPart::~LabelPart(void **this)
{
  *this = &unk_1EF5540C8;
  free(this[59]);
  free(this[60]);
  free(this[62]);
  free(this[29]);
  free(this[30]);
  free(this[32]);
}

float std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2 = *(float64x2_t **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int32x2_t v4 = (int32x2_t)vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v2[60], v2[54], *a2), v2[56], a2[1]), v2[58], a2[2]), 1.0 / (v2[61].f64[1] + v2[55].f64[1] * *a2 + v2[57].f64[1] * a2[1] + v2[59].f64[1] * a2[2])));
  *(float *)uint64_t v3 = fminf(*(float *)v4.i32, *(float *)v3);
  int8x8_t v5 = (int8x8_t)vrev64_s32(v4);
  v6.i32[0] = v5.i32[0];
  v6.i32[1] = HIDWORD(*(void *)(v3 + 4));
  v7.i32[1] = v5.i32[1];
  v7.i32[0] = *(void *)(v3 + 4);
  *(int8x8_t *)(v3 + 4) = vbsl_s8((int8x8_t)vcgt_f32(v7, v6), v5, *(int8x8_t *)(v3 + 4));
  float result = fmaxf(*(float *)(v3 + 12), *(float *)&v4.i32[1]);
  *(float *)(v3 + 12) = result;
  return result;
}

__n128 std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DD40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57DD40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::ExternalMeshLabelPart::screenBoundsForWorldBounds(md::LabelLayoutContext const&,gm::Box<double,3> const&)::$_0>,void ()(gm::Matrix<double,3,1> &)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::ManeuverPoint::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5839E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5839E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::RenderState::~RenderState(ggl::RenderState *this)
{
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::ManeuverPoint::Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ManeuverPoint::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

void ggl::BufferData::~BufferData(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  this->__m_.__sig = (uint64_t)&unk_1EF55A1F0;
  std::mutex::~mutex(this + 2);
  uint64_t v2 = *(void *)this[1].__m_.__opaque;
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&this[1].__m_.__opaque[24] + 40))(*(void *)&this[1].__m_.__opaque[24], v2, *(void *)&this[1].__m_.__opaque[16] - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ManeuverPoint::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Tile::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::IndexDataTyped<unsigned short>::~IndexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::IndexDataTyped<unsigned short>::~IndexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::IndexDataTyped<unsigned short>::~IndexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::IndexDataTyped<unsigned short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::IndexDataTyped<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::IndexDataTyped<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5847E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ManeuverPoint::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5847E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void gss::QueryOverrides::~QueryOverrides(gss::QueryOverrides *this)
{
  if (!*((unsigned char *)this + 14))
  {
    if (*(void *)this)
    {
      uint64_t v2 = gss::Allocator::instance(this);
      (*(void (**)(uint64_t, void, void))(*(void *)v2 + 40))(v2, *(void *)this, *((unsigned __int16 *)this + 6));
      *(void *)this = 0;
    }
  }
}

void std::__throw_bad_weak_ptr[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  gss::StyleKey::~StyleKey(v0);
}

void gss::StyleKey::~StyleKey(gss::StyleKey *this)
{
  if (!*((unsigned char *)this + 46) && *((void *)this + 4))
  {
    uint64_t v2 = gss::Allocator::instance(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v2 + 40))(v2, *((void *)this + 4), *((unsigned __int16 *)this + 22));
    *((void *)this + 4) = 0;
  }
  uint64_t v3 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v3, *((void *)this + 2) - v3);
  }
}

uint64_t std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,gss::Allocator>>::operator()[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 8))
  {
    int32x2_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    if (!*(unsigned char *)(a2 + 62) && *(void *)(a2 + 48))
    {
      uint64_t v5 = gss::Allocator::instance((gss::Allocator *)v4);
      (*(void (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *(void *)(a2 + 48), *(unsigned __int16 *)(a2 + 60));
      *(void *)(a2 + 48) = 0;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      *(void *)(a2 + 24) = v6;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 40) + 40))(*(void *)(a2 + 40), v6, *(void *)(a2 + 32) - v6);
    }
  }
  else if (!a2)
  {
    return result;
  }
  float32x2_t v7 = *(uint64_t (**)(void))(***(void ***)v3 + 40);
  return v7();
}

void gss::FeatureAttributeSet::~FeatureAttributeSet(gss::FeatureAttributeSet *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v1;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v1, *((void *)this + 2) - v1);
  }
}

uint64_t gss::Queryable<gss::PropertyID>::~Queryable(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5674D0;
  uint64_t v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(void *)a1 = &unk_1EF5674D0;
  uint64_t v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t std::unordered_map<gss::StylePropertySet<gss::PropertyID>,unsigned char>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(unsigned __int16 *)(*a3 + 2 * v4) < *(unsigned __int16 *)(*a3 + 2 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(unsigned __int16 *)(*a3 + 2 * v17);
      unsigned int v20 = *(unsigned __int16 *)(*a3 + 2 * v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(unsigned __int16 *)(*a3 + 2 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v46 = *a1;
          uint64_t v45 = a1[1];
          if (*(unsigned __int16 *)(v18 + 2 * v45) < *(unsigned __int16 *)(v18 + 2 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v47 = *(a2 - 1);
        if (*(unsigned __int16 *)(v18 + 2 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      double v25 = a1 + 2;
      uint64_t v26 = a1[2];
      uint64_t v27 = *a1;
      uint64_t v28 = *a3;
      unsigned int v29 = *(unsigned __int16 *)(*a3 + 2 * v24);
      unsigned int v30 = *(unsigned __int16 *)(*a3 + 2 * v27);
      int v31 = v26;
      unsigned int v32 = *(unsigned __int16 *)(*a3 + 2 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          BOOL v33 = a1;
          _DWORD *v23 = v26;
          *double v25 = v24;
          double v34 = a1 + 1;
          uint64_t v35 = v24;
          uint64_t v26 = v24;
          if (v32 >= v30) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          BOOL v33 = a1;
          double v34 = a1 + 2;
          uint64_t v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *BOOL v33 = v31;
          *double v34 = v27;
          uint64_t v26 = v35;
          goto LABEL_39;
        }
        BOOL v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        double v34 = a1 + 2;
        uint64_t v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30) {
          goto LABEL_37;
        }
      }
      LODWORD(v24) = v26;
LABEL_39:
      uint64_t v48 = *(a2 - 1);
      if (*(unsigned __int16 *)(v28 + 2 * v48) < *(unsigned __int16 *)(v28 + 2 * v26))
      {
        *double v25 = v48;
        *(a2 - 1) = v24;
        uint64_t v49 = *v25;
        uint64_t v50 = *v23;
        unsigned int v51 = *(unsigned __int16 *)(v28 + 2 * v49);
        if (v51 < *(unsigned __int16 *)(v28 + 2 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          uint64_t v52 = *a1;
          if (v51 < *(unsigned __int16 *)(v28 + 2 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      float32x2_t v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(unsigned __int16 *)(*a3 + 2 * v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      unsigned int v13 = *(unsigned __int16 *)(v9 + 2 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        *float32x2_t v7 = v8;
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        uint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      *uint64_t v15 = v11;
LABEL_18:
      double v36 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v37 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v40 = *v36;
        uint64_t v41 = *v7;
        unsigned int v42 = *(unsigned __int16 *)(v9 + 2 * v40);
        if (v42 < *(unsigned __int16 *)(v9 + 2 * v41))
        {
          uint64_t v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            uint64_t v44 = v43 - 4;
            if (v43 == 4)
            {
              double v39 = a1;
              goto LABEL_21;
            }
            uint64_t v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(unsigned __int16 *)(v9 + 2 * v41));
          double v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *double v39 = v40;
          if (++v37 == 8) {
            break;
          }
        }
        float32x2_t v7 = v36++;
        if (v36 == a2) {
          return 1;
        }
      }
      return v36 + 1 == a2;
  }
}

uint64_t std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v6 = v2;
    uint64_t v3 = a1[4];
    if (!v3)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
  }
  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(a1[1] + 32))(a1 + 1);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t *))(*v4 + 40))(v4);
  }
  return (uint64_t)a1;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(gss::Allocator *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)gss::Allocator::instance(a1) + 40);
  return v1();
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1EF57A808;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(gss::Allocator *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)gss::Allocator::instance(a1) + 40);
  return v1();
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1EF57A7C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(gss::Allocator *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)gss::Allocator::instance(a1) + 40);
  return v1();
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1EF57A778;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(unsigned __int16 *)(*a3 + 2 * v4) < *(unsigned __int16 *)(*a3 + 2 * v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(unsigned __int16 *)(*a3 + 2 * v17);
      unsigned int v20 = *(unsigned __int16 *)(*a3 + 2 * v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(unsigned __int16 *)(*a3 + 2 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v46 = *a1;
          uint64_t v45 = a1[1];
          if (*(unsigned __int16 *)(v18 + 2 * v45) < *(unsigned __int16 *)(v18 + 2 * v46))
          {
            *a1 = v45;
            a1[1] = v46;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v47 = *(a2 - 1);
        if (*(unsigned __int16 *)(v18 + 2 * v47) < v20)
        {
          a1[1] = v47;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      double v25 = a1 + 2;
      uint64_t v26 = a1[2];
      uint64_t v27 = *a1;
      uint64_t v28 = *a3;
      unsigned int v29 = *(unsigned __int16 *)(*a3 + 2 * v24);
      unsigned int v30 = *(unsigned __int16 *)(*a3 + 2 * v27);
      int v31 = v26;
      unsigned int v32 = *(unsigned __int16 *)(*a3 + 2 * v26);
      if (v29 >= v30)
      {
        if (v32 < v29)
        {
          BOOL v33 = a1;
          _DWORD *v23 = v26;
          *double v25 = v24;
          double v34 = a1 + 1;
          uint64_t v35 = v24;
          uint64_t v26 = v24;
          if (v32 >= v30) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          BOOL v33 = a1;
          double v34 = a1 + 2;
          uint64_t v35 = *a1;
          LODWORD(v24) = *a1;
LABEL_37:
          *BOOL v33 = v31;
          *double v34 = v27;
          uint64_t v26 = v35;
          goto LABEL_39;
        }
        BOOL v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v27;
        double v34 = a1 + 2;
        uint64_t v35 = v27;
        LODWORD(v24) = v27;
        if (v32 < v30) {
          goto LABEL_37;
        }
      }
      LODWORD(v24) = v26;
LABEL_39:
      uint64_t v48 = *(a2 - 1);
      if (*(unsigned __int16 *)(v28 + 2 * v48) < *(unsigned __int16 *)(v28 + 2 * v26))
      {
        *double v25 = v48;
        *(a2 - 1) = v24;
        uint64_t v49 = *v25;
        uint64_t v50 = *v23;
        unsigned int v51 = *(unsigned __int16 *)(v28 + 2 * v49);
        if (v51 < *(unsigned __int16 *)(v28 + 2 * v50))
        {
          a1[1] = v49;
          a1[2] = v50;
          uint64_t v52 = *a1;
          if (v51 < *(unsigned __int16 *)(v28 + 2 * v52))
          {
            *a1 = v49;
            a1[1] = v52;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      float32x2_t v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(unsigned __int16 *)(*a3 + 2 * v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(unsigned __int16 *)(v9 + 2 * v11);
      unsigned int v13 = *(unsigned __int16 *)(v9 + 2 * v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        *float32x2_t v7 = v8;
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        uint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        uint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      *uint64_t v15 = v11;
LABEL_18:
      double v36 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v37 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v40 = *v36;
        uint64_t v41 = *v7;
        unsigned int v42 = *(unsigned __int16 *)(v9 + 2 * v40);
        if (v42 < *(unsigned __int16 *)(v9 + 2 * v41))
        {
          uint64_t v43 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v43) = v41;
            uint64_t v44 = v43 - 4;
            if (v43 == 4)
            {
              double v39 = a1;
              goto LABEL_21;
            }
            uint64_t v41 = *(unsigned int *)((char *)a1 + v43 - 8);
            v43 -= 4;
          }
          while (v42 < *(unsigned __int16 *)(v9 + 2 * v41));
          double v39 = (unsigned int *)((char *)a1 + v44);
LABEL_21:
          *double v39 = v40;
          if (++v37 == 8) {
            break;
          }
        }
        float32x2_t v7 = v36++;
        if (v36 == a2) {
          return 1;
        }
      }
      return v36 + 1 == a2;
  }
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 72);
}

gss::Allocator *std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared(gss::Allocator *result)
{
  uint64_t v1 = (char *)result + 32;
  if (!*((unsigned char *)result + 44))
  {
    uint64_t v2 = result;
    __n128 result = *(gss::Allocator **)v1;
    if (*(void *)v1)
    {
      if (*((_WORD *)v2 + 20))
      {
        uint64_t v3 = 80 * *((unsigned __int16 *)v2 + 20);
        do
        {
          __n128 result = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)result) + 80);
          v3 -= 80;
        }
        while (v3);
      }
      uint64_t v4 = gss::Allocator::instance(result);
      __n128 result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v4 + 40))(v4, *((void *)v2 + 4), 80 * *((unsigned __int16 *)v2 + 21));
    }
  }
  *(void *)(v1 + 5) = 0;
  *(void *)uint64_t v1 = 0;
  return result;
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::PropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void gss::Queryable<gss::PropertyID>::targetCartoStyle(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void gss::Queryable<gss::PropertyID>::sourceCartoStyle(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void gss::Queryable<gss::PropertyID>::~Queryable(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5674D0;
  uint64_t v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x1A6239270);
}

gss::Allocator *std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,void *>,gss::Allocator>>::operator()[abi:nn180100](gss::Allocator *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (!*((unsigned char *)result + 8))
  {
    if (!a2) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*(unsigned char *)(a2 + 30)) {
      goto LABEL_9;
    }
  }
  else if (!*(unsigned char *)(a2 + 30))
  {
LABEL_9:
    if (*(void *)(a2 + 16))
    {
      uint64_t v5 = gss::Allocator::instance(result);
      (*(void (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *(void *)(a2 + 16), *(unsigned __int16 *)(a2 + 28));
      *(void *)(a2 + 16) = 0;
    }
  }
LABEL_11:
  uint64_t v6 = *(uint64_t (**)(void))(***(void ***)v3 + 40);
  return (gss::Allocator *)v6();
}

_DWORD *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *result;
  unsigned int v8 = *(_DWORD *)(a6 + 4 * v6);
  unsigned int v9 = *(_DWORD *)(a6 + 4 * v7);
  int v10 = *a3;
  unsigned int v11 = *(_DWORD *)(a6 + 4 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      uint64_t v7 = *a3;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    uint64_t v12 = *a2;
    uint64_t v13 = *result;
    if (*(_DWORD *)(a6 + 4 * v12) >= *(_DWORD *)(a6 + 4 * v13))
    {
      uint64_t v7 = v6;
      int v10 = v6;
      goto LABEL_14;
    }
    *__n128 result = v12;
    *a2 = v13;
    uint64_t v7 = *a3;
  }
  else
  {
    if (v11 >= v8)
    {
      *__n128 result = v6;
      *a2 = v7;
      int v10 = *a3;
      if (*(_DWORD *)(a6 + 4 * *a3) >= v9)
      {
        uint64_t v7 = *a3;
        goto LABEL_14;
      }
      *a2 = v10;
    }
    else
    {
      *__n128 result = v10;
    }
    *a3 = v7;
  }
  int v10 = v7;
LABEL_14:
  uint64_t v14 = *a4;
  if (*(_DWORD *)(a6 + 4 * v14) < *(_DWORD *)(a6 + 4 * v7))
  {
    *a3 = v14;
    *a4 = v10;
    uint64_t v15 = *a3;
    uint64_t v16 = *a2;
    if (*(_DWORD *)(a6 + 4 * v15) < *(_DWORD *)(a6 + 4 * v16))
    {
      *a2 = v15;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v18 = *result;
      if (*(_DWORD *)(a6 + 4 * v17) < *(_DWORD *)(a6 + 4 * v18))
      {
        *__n128 result = v17;
        *a2 = v18;
      }
    }
  }
  uint64_t v19 = *a5;
  uint64_t v20 = *a4;
  if (*(_DWORD *)(a6 + 4 * v19) < *(_DWORD *)(a6 + 4 * v20))
  {
    *a4 = v19;
    *a5 = v20;
    uint64_t v21 = *a4;
    uint64_t v22 = *a3;
    if (*(_DWORD *)(a6 + 4 * v21) < *(_DWORD *)(a6 + 4 * v22))
    {
      *a3 = v21;
      *a4 = v22;
      uint64_t v23 = *a3;
      uint64_t v24 = *a2;
      if (*(_DWORD *)(a6 + 4 * v23) < *(_DWORD *)(a6 + 4 * v24))
      {
        *a2 = v23;
        *a3 = v24;
        uint64_t v25 = *a2;
        uint64_t v26 = *result;
        if (*(_DWORD *)(a6 + 4 * v25) < *(_DWORD *)(a6 + 4 * v26))
        {
          *__n128 result = v25;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

void gss::StylesheetQuery<gss::PropertyID>::~StylesheetQuery(uint64_t a1)
{
  gss::StylesheetQuery<gss::PropertyID>::~StylesheetQuery(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
}

void std::__shared_ptr_emplace<md::SharedTexture2D>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

void std::__shared_ptr_emplace<md::SharedTexture2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::SharedTexture2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t md::MaterialRenderable::hash2(md::MaterialRenderable *this)
{
  unint64_t v2 = md::MeshRenderable::hash(this);
  return (*((void *)this + 30) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583EBLL) ^ v2;
}

unint64_t md::MeshRenderable::hash(md::MeshRenderable *this)
{
  unint64_t v1 = (*((void *)this + 2)
      + ((unint64_t)*((unsigned __int8 *)this + 8) << 6)
      + ((unint64_t)*((unsigned __int8 *)this + 8) >> 2)
      - 0x61C8864680B583EBLL) ^ *((unsigned __int8 *)this + 8);
  unint64_t v2 = (*((void *)this + 3) + (v1 << 6) + (v1 >> 2) - 0x61C8864680B583EBLL) ^ v1;
  unint64_t v3 = *((void *)this + 4);
  unint64_t v4 = HIDWORD(v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
  unint64_t v6 = ((v2 << 6)
      + (v2 >> 2)
      - 0x622015F714C7D297
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47))
      - 0x61C8864680B583EBLL) ^ v2;
  unint64_t v7 = ((*((unsigned __int8 *)this + 64) | (v6 << 6)) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  if (*((unsigned char *)this + 64))
  {
    unint64_t v8 = (*((void *)this + 6)
        - 0x61C8864680B583EBLL
        + (*((void *)this + 6) >> 34)
        + (HIDWORD(*((void *)this + 6)) << 6)) ^ HIDWORD(*((void *)this + 6));
    v7 ^= (v7 << 6)
        - 0x61C8864680B583EBLL
        + (v7 >> 2)
        + ((*((unsigned __int8 *)this + 56) - 0x61C8864680B583EBLL + (v8 << 6) + (v8 >> 2)) ^ v8);
  }
  float v9 = *((float *)this + 19);
  float v10 = *((float *)this + 20);
  unint64_t v11 = LODWORD(v9) - 0x61C8864680B583EBLL;
  if (v9 == 0.0) {
    unint64_t v11 = 0x9E3779B97F4A7C15;
  }
  uint64_t v12 = LODWORD(v10) - 0x61C8864680B583EBLL;
  if (v10 == 0.0) {
    uint64_t v12 = 0x9E3779B97F4A7C15;
  }
  float v13 = *((float *)this + 21);
  float v14 = *((float *)this + 22);
  uint64_t v15 = LODWORD(v13) - 0x61C8864680B583EBLL;
  if (v13 == 0.0) {
    uint64_t v15 = 0x9E3779B97F4A7C15;
  }
  unint64_t v16 = LODWORD(v14) - 0x61C8864680B583EBLL;
  if (v14 == 0.0) {
    unint64_t v16 = 0x9E3779B97F4A7C15;
  }
  float v17 = *((float *)this + 23);
  float v18 = *((float *)this + 24);
  unint64_t v19 = ((v7 << 6) - 0x61C8864680B583EBLL + (v7 >> 2) + *((unsigned __int8 *)this + 72)) ^ v7;
  unint64_t v20 = ((v19 << 6)
       - 0x61C8864680B583EBLL
       + (v19 >> 2)
       + ((v15 + ((((v11 >> 2) + (v11 << 6) + v12) ^ v11) << 6) + ((((v11 >> 2) + (v11 << 6) + v12) ^ v11) >> 2)) ^ ((v11 >> 2) + (v11 << 6) + v12) ^ v11)) ^ v19;
  uint64_t v21 = LODWORD(v17) - 0x61C8864680B583EBLL;
  if (v17 == 0.0) {
    uint64_t v21 = 0x9E3779B97F4A7C15;
  }
  unint64_t v22 = ((v16 >> 2) + (v16 << 6) + v21) ^ v16;
  uint64_t v23 = LODWORD(v18) - 0x61C8864680B583EBLL;
  if (v18 == 0.0) {
    uint64_t v23 = 0x9E3779B97F4A7C15;
  }
  unint64_t v24 = ((v20 << 6) - 0x61C8864680B583EBLL + (v20 >> 2) + ((v23 + (v22 << 6) + (v22 >> 2)) ^ v22)) ^ v20;
  unint64_t v25 = (*((unsigned __int8 *)this + 144) - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
  unint64_t v26 = (*((unsigned __int8 *)this + 145) - 0x61C8864680B583EBLL + (v25 << 6) + (v25 >> 2)) ^ v25;
  unint64_t v27 = (*((unsigned __int8 *)this + 146) - 0x61C8864680B583EBLL + (v26 << 6) + (v26 >> 2)) ^ v26;
  unint64_t v28 = (*((unsigned __int8 *)this + 147) - 0x61C8864680B583EBLL + (v27 << 6) + (v27 >> 2)) ^ v27;
  unint64_t v29 = *((void *)this + 27);
  unint64_t v30 = HIDWORD(v29);
  unint64_t v31 = 0x9DDFEA08EB382D69 * (((8 * v29) + 8) ^ HIDWORD(v29));
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v30 ^ (v31 >> 47) ^ v31)) ^ ((0x9DDFEA08EB382D69 * (v30 ^ (v31 >> 47) ^ v31)) >> 47))
        - 0x61C8864680B583EBLL
        + (v28 << 6)
        + (v28 >> 2)) ^ v28;
}

__n128 md::MeshRenderableBuilder::buildRenderable(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5)
{
  *(void *)a1 = &unk_1EF534030;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  *(void *)(a1 + 142) = *(void *)(a2 + 142);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  long long v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v12;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    uint64_t v13 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = 1;
  }
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = 0;
  if (*(unsigned char *)(a2 + 193))
  {
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(unsigned char *)(a1 + 193) = 1;
  }
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  long long v14 = *(_OWORD *)(a2 + 208);
  *(void *)a1 = &unk_1EF53AD58;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    float v17 = *(std::__shared_weak_count **)(a1 + 232);
    *(void *)(a1 + 224) = v15;
    *(void *)(a1 + 232) = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    *(void *)(a1 + 224) = v15;
    *(void *)(a1 + 232) = 0;
  }
  if ((uint64_t **)(a1 + 240) != a4) {
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(a1 + 240, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  }
  long long v18 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 280) = v18;
  __n128 result = *(__n128 *)(a5 + 32);
  *(__n128 *)(a1 + 296) = result;
  *(_WORD *)(a1 + 144) = 1;
  *(unsigned char *)(a1 + 147) = 1;
  return result;
}

void sub_1A1DBDFA0(_Unwind_Exception *a1)
{
  md::TexturedRenderable::~TexturedRenderable(v1);
  _Unwind_Resume(a1);
}

void md::TexturedRenderable::~TexturedRenderable(md::TexturedRenderable *this)
{
  *(void *)this = &unk_1EF53AD58;
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 31);
    unint64_t v4 = (void *)*((void *)this + 30);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 30);
    }
    *((void *)this + 31) = v2;
    operator delete(v4);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)this = &unk_1EF534030;
  if (*((unsigned char *)this + 176))
  {
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t vars8;

  *(void *)this = &unk_1EF53AD58;
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 31);
    unint64_t v4 = (void *)*((void *)this + 30);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 30);
    }
    *((void *)this + 31) = v2;
    operator delete(v4);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)this = &unk_1EF534030;
  if (*((unsigned char *)this + 176))
  {
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t md::TexturedRenderable::hash2(md::TexturedRenderable *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

uint64_t md::TexturedRenderable::hash(md::TexturedRenderable *this)
{
  return *((void *)this + 26);
}

void md::DaVinciMaterialResourceFetcher::~DaVinciMaterialResourceFetcher(md::DaVinciMaterialResourceFetcher *this)
{
  md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciMaterialResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RenderQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RenderQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void karo::media::Image::~Image(karo::media::Image *this)
{
  karo::media::Image::~Image(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  *(void *)this = &unk_1EF568050;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      unint64_t v4 = *(void *)(v2 + 24);
      unint64_t v5 = *(void **)(v2 + 16);
      if (v4 != v3)
      {
        do
        {
          unint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 16;
        }
        while (v4 != v3);
        unint64_t v5 = *(void **)(v2 + 16);
      }
      *(void *)(v2 + 24) = v3;
      operator delete(v5);
    }
    MEMORY[0x1A6239270](v2, 0x1020C4081634310);
  }
  *((void *)this + 1) = 0;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8) {
      goto LABEL_18;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_18:
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    long long v10 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v10) {
      goto LABEL_24;
    }
  }
  else
  {
    long long v10 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v10) {
      goto LABEL_24;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_24:
  long long v11 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t karo::media::Image::setFormat(uint64_t result, int a2)
{
  uint64_t v2 = result;
  *(_DWORD *)(result + 16) = a2;
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(v3 + 24);
      unint64_t v6 = *(void **)(v3 + 16);
      if (v5 != v4)
      {
        do
        {
          unint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          v5 -= 16;
        }
        while (v5 != v4);
        unint64_t v6 = *(void **)(v3 + 16);
      }
      *(void *)(v3 + 24) = v4;
      operator delete(v6);
    }
    __n128 result = MEMORY[0x1A6239270](v3, 0x1020C4081634310);
    a2 = *(_DWORD *)(v2 + 16);
  }
  *(void *)(v2 + 8) = 0;
  if (a2 <= 28) {
    operator new();
  }
  return result;
}

BOOL karo::media::Image::convertToFormat(uint64_t a1, int a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  BOOL result = 1;
  if (a2 == 29) {
    return result;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  if (v5 == a2) {
    return result;
  }
  BOOL v6 = v5 > 6;
  int v7 = (1 << v5) & 0x43;
  if (!v6 && v7 != 0)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_23;
    }
    long long v10 = *(uint64_t **)(v9 + 16);
    uint64_t v11 = *v10;
    long long v12 = (std::__shared_weak_count *)v10[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v11)
    {
      uint64_t v13 = *(uint64_t **)(*(void *)(a1 + 8) + 16);
      uint64_t v14 = *v13;
      uint64_t v15 = (std::__shared_weak_count *)v13[1];
      if (!v15)
      {
        BOOL v16 = *(void *)(v14 + 8) == 0;
        if (!v12) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v16 = *(void *)(v14 + 8) == 0;
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (!v12) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else
    {
      BOOL v16 = 1;
    }
    if (!v12) {
      goto LABEL_22;
    }
LABEL_21:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v16)
      {
LABEL_23:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v22 = GEOGetVectorKitVKDefaultLog_log;
        BOOL result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          unint64_t v19 = "Tried to convert image without base data.";
          unint64_t v20 = v22;
          uint32_t v21 = 2;
          goto LABEL_27;
        }
        return result;
      }
      goto LABEL_31;
    }
LABEL_22:
    if (v16) {
      goto LABEL_23;
    }
LABEL_31:
    unsigned int v23 = 0;
    unint64_t v24 = *(int **)(a1 + 8);
    int v26 = *v24;
    int v25 = v24[1];
    unsigned int v27 = 1;
    char v28 = 0;
    switch(v24[2])
    {
      case 0:
      case 22:
      case 23:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        unsigned int v23 = 0;
        unsigned int v27 = 0;
        goto LABEL_37;
      case 6:
      case 7:
      case 8:
      case 9:
      case 26:
      case 42:
      case 43:
        unsigned int v23 = 0;
        unsigned int v27 = 2;
        goto LABEL_37;
      case 10:
      case 11:
      case 24:
        unsigned int v27 = 3;
        goto LABEL_36;
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 27:
      case 58:
        unsigned int v27 = 4;
LABEL_36:
        unsigned int v23 = 1;
LABEL_37:
        char v28 = 1;
        break;
      default:
        break;
    }
    unint64_t v29 = (uint64_t *)*((void *)v24 + 2);
    uint64_t v30 = *v29;
    unint64_t v31 = (std::__shared_weak_count *)v29[1];
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned int v32 = *(unsigned char **)(v30 + 8);
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      unsigned int v32 = *(unsigned char **)(v30 + 8);
    }
    uint64_t v33 = (v25 * v26);
    switch(a2)
    {
      case 0:
        if (*(_DWORD *)(a1 + 16) != 1)
        {
          double v38 = (std::__shared_weak_count *)operator new(0x30uLL);
          v38->__shared_owners_ = 0;
          p_unint64_t shared_owners = &v38->__shared_owners_;
          v38->__shared_weak_owners_ = 0;
          v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
          uint64_t v40 = v38 + 1;
          ggl::Data::Data((ggl::Data *)&v38[1], (3 * v33));
          if (v33)
          {
            long long v58 = (unsigned char *)(v38[1].__shared_owners_ + 2);
            do
            {
              *(v58 - 2) = *v32;
              *(v58 - 1) = v32[v23];
              *long long v58 = v32[2 * v23];
              v58 += 3;
              v32 += v27;
              --v33;
            }
            while (v33);
          }
          karo::media::Image::setFormat(a1, 0);
          uint64_t v42 = *(void *)(a1 + 8);
          int v43 = v25;
          if (!v42) {
            goto LABEL_84;
          }
          goto LABEL_80;
        }
        double v34 = *(uint64_t **)(*(void *)(a1 + 8) + 16);
        uint64_t v35 = *v34;
        double v36 = (std::__shared_weak_count *)v34[1];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v37 = *(void *)(v35 + 8);
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        else
        {
          uint64_t v37 = *(void *)(v35 + 8);
        }
        if (v33)
        {
          float64x2_t v61 = (unsigned char *)(v37 + 2);
          do
          {
            *(v61 - 2) = *v32;
            *(v61 - 1) = v32[v23];
            *float64x2_t v61 = v32[2 * v23];
            v61 += 3;
            v32 += v27;
            --v33;
          }
          while (v33);
        }
        *(_DWORD *)(a1 + 16) = 0;
        *(_DWORD *)(*(void *)(a1 + 8) + 8) = 10;
        return 1;
      case 1:
        double v38 = (std::__shared_weak_count *)operator new(0x30uLL);
        v38->__shared_owners_ = 0;
        p_unint64_t shared_owners = &v38->__shared_owners_;
        v38->__shared_weak_owners_ = 0;
        v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
        uint64_t v40 = v38 + 1;
        ggl::Data::Data((ggl::Data *)&v38[1], (4 * v26 * v25));
        if (v33)
        {
          uint64_t v41 = (unsigned char *)(v38[1].__shared_owners_ + 3);
          do
          {
            *(v41 - 3) = *v32;
            *(v41 - 2) = v32[v23];
            *(v41 - 1) = v32[2 * v23];
            *uint64_t v41 = -1;
            v41 += 4;
            v32 += v27;
            --v33;
          }
          while (v33);
        }
        karo::media::Image::setFormat(a1, 1);
        uint64_t v42 = *(void *)(a1 + 8);
        if (!v42) {
          goto LABEL_84;
        }
        int v43 = v25;
LABEL_80:
        *(_DWORD *)uint64_t v42 = v26;
        *(_DWORD *)(v42 + 4) = v43;
        goto LABEL_81;
      case 8:
        double v38 = (std::__shared_weak_count *)operator new(0x30uLL);
        v38->__shared_owners_ = 0;
        p_unint64_t shared_owners = &v38->__shared_owners_;
        v38->__shared_weak_owners_ = 0;
        v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
        uint64_t v40 = v38 + 1;
        ggl::Data::Data((ggl::Data *)&v38[1], 2 * (v25 * v26));
        if (v33)
        {
          uint64_t v44 = (unsigned char *)(v38[1].__shared_owners_ + 1);
          do
          {
            *(v44 - 1) = *v32;
            unsigned char *v44 = v32[v23];
            v44 += 2;
            v32 += v27;
            --v33;
          }
          while (v33);
        }
        karo::media::Image::setFormat(a1, 8);
        uint64_t v42 = *(void *)(a1 + 8);
        if (v42)
        {
          *(_DWORD *)uint64_t v42 = v26;
          *(_DWORD *)(v42 + 4) = v25;
LABEL_81:
          long long v59 = *(std::__shared_weak_count ***)(v42 + 16);
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v60 = v59[1];
          *long long v59 = v40;
          v59[1] = v38;
          if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
LABEL_84:
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          return 1;
        }
        goto LABEL_75;
      case 14:
        double v38 = (std::__shared_weak_count *)operator new(0x30uLL);
        v38->__shared_owners_ = 0;
        v38->__shared_weak_owners_ = 0;
        v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
        ggl::Data::Data((ggl::Data *)&v38[1], (2 * v33));
        if (!v33) {
          goto LABEL_70;
        }
        unint64_t shared_owners = v38[1].__shared_owners_;
        int v47 = 2 * v23;
        if v33 <= 7 || (__CFADD__(v47, v33 - 1) ? (char v48 = 1) : (char v48 = v28), (v48))
        {
          uint64_t v49 = 0;
          goto LABEL_68;
        }
        uint64_t v49 = 0;
        unint64_t v62 = shared_owners + 2 * v33;
        uint64_t v63 = 2 * v23;
        double v64 = &v32[v63];
        double v65 = &v32[v33 + v63];
        BOOL v67 = shared_owners < (unint64_t)&v32[v33 + v23] && (unint64_t)&v32[v23] < v62;
        BOOL v69 = shared_owners < (unint64_t)&v32[v33] && (unint64_t)v32 < v62;
        BOOL v70 = (unint64_t)v64 >= v62 || shared_owners >= (unint64_t)v65;
        if (!v70 || v67 || v69) {
          goto LABEL_68;
        }
        if (v33 >= 0x10)
        {
          uint64_t v71 = 0;
          uint64_t v49 = v33 & 0xFFFFFFF0;
          v72.i64[0] = 0xF8F8F8F8F8F8F8F8;
          v72.i64[1] = 0xF8F8F8F8F8F8F8F8;
          v73.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
          v73.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
          double v74 = (int8x16_t *)v38[1].__shared_owners_;
          do
          {
            _Q2 = vandq_s8(*(int8x16_t *)&v32[v71 & 0xFFFFFFF0], v72);
            int8x16_t v76 = (int8x16_t)vshll_n_s8(*(int8x8_t *)_Q2.i8, 8uLL);
            __asm { SHLL2           V2.8H, V2.16B, #8 }
            uint8x16_t v79 = (uint8x16_t)vandq_s8(*(int8x16_t *)&v32[v23 + v71], v73);
            int8x16_t v80 = vorrq_s8((int8x16_t)vshll_high_n_u8(v79, 3uLL), _Q2);
            int8x16_t v81 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v79.i8, 3uLL), v76);
            uint8x16_t v82 = vshrq_n_u8(*(uint8x16_t *)&v32[2 * v23 + v71], 3uLL);
            *double v74 = vorrq_s8(v81, (int8x16_t)vmovl_u8(*(uint8x8_t *)v82.i8));
            v74[1] = vorrq_s8(v80, (int8x16_t)vmovl_high_u8(v82));
            v74 += 2;
            v71 += 16;
          }
          while (v49 != v71);
          if (v49 == v33) {
            goto LABEL_70;
          }
          if ((((_BYTE)v25 * (_BYTE)v26) & 8) == 0)
          {
LABEL_68:
            uint64_t v50 = v33 - v49;
            int v51 = v27 * v49;
            uint64_t v52 = (_WORD *)(shared_owners + 2 * v49);
            do
            {
              _WORD *v52 = 0;
              int v53 = (v32[v51] & 0xF8) << 8;
              _WORD *v52 = v53;
              unsigned int v54 = v53 & 0xFFFFF81F | (32 * (((v32[v23 + v51] & 0xFC) >> 2) & 0x3F));
              _WORD *v52 = v54;
              *v52++ = v54 | (v32[v47 + v51] >> 3);
              v51 += v27;
              --v50;
            }
            while (v50);
            goto LABEL_70;
          }
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v83 = v49;
        uint64_t v49 = v33 & 0xFFFFFFF8;
        float v84 = (int8x16_t *)(shared_owners + 2 * v83);
        do
        {
          *v84++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)&v32[v23 + v83], (int8x8_t)0xFCFCFCFCFCFCFCFCLL), 3uLL), (int8x16_t)vshll_n_s8(vand_s8(*(int8x8_t *)&v32[v83 & 0xFFFFFFF8], (int8x8_t)0xF8F8F8F8F8F8F8F8), 8uLL)), (int8x16_t)vmovl_u8(vshr_n_u8(*(uint8x8_t *)&v32[2 * v23 + v83], 3uLL)));
          v83 += 8;
        }
        while (v49 != v83);
        if (v49 != v33) {
          goto LABEL_68;
        }
LABEL_70:
        karo::media::Image::setFormat(a1, 14);
        uint64_t v55 = *(void *)(a1 + 8);
        if (v55)
        {
          *(_DWORD *)uint64_t v55 = v26;
          *(_DWORD *)(v55 + 4) = v25;
          long long v56 = *(void **)(v55 + 16);
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v57 = (std::__shared_weak_count *)v56[1];
          *long long v56 = v38 + 1;
          v56[1] = v38;
          if (v57)
          {
            if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        if (atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return 1;
        }
LABEL_75:
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        return 1;
      default:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v45 = GEOGetVectorKitVKDefaultLog_log;
        BOOL result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        *(_DWORD *)buf = 67109120;
        int v86 = a2;
        unint64_t v19 = "Unable to convert to %d";
        unint64_t v20 = v45;
        uint32_t v21 = 8;
        goto LABEL_27;
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v17 = GEOGetVectorKitVKDefaultLog_log;
  BOOL result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v18 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109376;
    int v86 = v18;
    __int16 v87 = 1024;
    int v88 = a2;
    unint64_t v19 = "Failed to convert image from: %d to %d";
    unint64_t v20 = v17;
    uint32_t v21 = 14;
LABEL_27:
    _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
    return 0;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::Data>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void karo::media::Image::mipmapAndCompress(uint64_t a1, unsigned int a2)
{
  uint64_t v538 = *MEMORY[0x1E4F143B8];
  if (a2 > 0xE) {
    return;
  }
  uint64_t v2 = a1;
  if (((1 << a2) & 0x177) != 0)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 16);
    BOOL v4 = v3 > 8 || ((1 << v3) & 0x177) == 0;
    if (!v4)
    {
      if (v3 == a2 || karo::media::Image::convertToFormat(a1, a2))
      {
        unsigned int v5 = *(uint64_t **)(v2 + 8);
        if (v5) {
          uint64_t v6 = *v5;
        }
        else {
          uint64_t v6 = 0;
        }
        unsigned int v10 = v6;
        if (v6 <= HIDWORD(v6)) {
          unsigned int v10 = HIDWORD(v6);
        }
        int v11 = 1;
        if (v10 >= 2)
        {
          do
          {
            ++v11;
            BOOL v22 = v10 > 3;
            v10 >>= 1;
          }
          while (v22);
        }
        uint64_t v12 = *(void *)(v5[2] + 8);
        if (v12)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          operator new[]();
        }
        operator new[]();
      }
      return;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    int v18 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      unsigned int v19 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)buf = 67109120;
      unsigned int v523 = v19;
LABEL_57:
      _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_ERROR, "Unsupported pixel format: %d", buf, 8u);
      return;
    }
    return;
  }
  if (a2 == 13)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (v13 == 6)
    {
      karo::media::Image::convertToFormat(a1, 1);
      unsigned int v13 = *(_DWORD *)(v2 + 16);
    }
    if (v13 > 4 || ((1 << v13) & 0x13) == 0)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      int v18 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        unsigned int v28 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)buf = 67109120;
        unsigned int v523 = v28;
        goto LABEL_57;
      }
      return;
    }
    uint64_t v15 = *(unsigned int **)(v2 + 8);
    if (v15)
    {
      unsigned int v17 = *v15;
      unsigned int v16 = v15[1];
    }
    else
    {
      unsigned int v17 = 0;
      unsigned int v16 = 0;
    }
    LODWORD(v21) = 0;
    do
    {
      unint64_t v21 = (v21 + 1);
      BOOL v22 = v17 >> v21 >= 5 && v16 >> v21 > 4;
    }
    while (v22);
    if (!v15)
    {
      unsigned int v497 = v13;
      uint64_t v493 = 0;
      v492 = 0;
      goto LABEL_83;
    }
    unsigned int v23 = (char *)*((void *)v15 + 2);
    unint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 1);
    uint64_t v493 = *(void *)v23;
    v492 = v24;
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned int v13 = *(_DWORD *)(v2 + 16);
      uint64_t v15 = *(unsigned int **)(v2 + 8);
      if (!v15)
      {
        unsigned int v497 = *(_DWORD *)(v2 + 16);
        goto LABEL_83;
      }
      unsigned int v23 = (char *)*((void *)v15 + 2);
    }
    *uint64_t v15 = v17;
    v15[1] = v16;
    int v25 = (char *)*((void *)v15 + 3);
    unint64_t v26 = (v25 - v23) >> 4;
    unint64_t v27 = v21 - v26;
    unsigned int v497 = v13;
    if (v21 <= v26)
    {
      if (v21 < v26)
      {
        unsigned int v35 = v16;
        unint64_t v36 = v21;
        for (uint64_t i = &v23[16 * v21]; v25 != i; v25 -= 16)
        {
          double v38 = (std::__shared_weak_count *)*((void *)v25 - 1);
          if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v38->__on_zero_shared)(v38, v27);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        *((void *)v15 + 3) = i;
        unsigned int v16 = v35;
        unint64_t v21 = v36;
      }
    }
    else
    {
      std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)(v15 + 4), v27);
    }
LABEL_83:
    uint64_t v42 = 0;
    unsigned int v496 = v17;
    unsigned int v495 = v16;
    unint64_t v494 = v21;
    while (1)
    {
      unint64_t v43 = v17 >> v42;
      unint64_t v44 = v16 >> v42;
      unint64_t v45 = v43 >> 2;
      if ((v43 & 3) != 0) {
        LODWORD(v45) = v45 + 1;
      }
      BOOL v4 = (v44 & 3) == 0;
      uint64_t v520 = v16 >> v42;
      unint64_t v46 = v44 >> 2;
      if (!v4) {
        LODWORD(v46) = v46 + 1;
      }
      uint64_t v47 = 8 * v45 * (unint64_t)v46;
      char v48 = (std::__shared_weak_count *)operator new(0x30uLL);
      v48->__shared_owners_ = 0;
      v48->__shared_weak_owners_ = 0;
      v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
      v502 = &v48[1].__vftable;
      p_uint64_t shared_owners = &v48->__shared_owners_;
      ggl::Data::Data((ggl::Data *)&v48[1], v47);
      v504 = v48;
      uint64_t shared_owners = v48[1].__shared_owners_;
      uint64_t v506 = v42;
      if (v42)
      {
        uint64_t v57 = *(void *)(a1 + 8);
        if (v57) {
          break;
        }
      }
LABEL_94:
      v62.i64[0] = 0x100000001;
      v62.i64[1] = 0x100000001;
      v63.i64[0] = 0x200000002;
      v63.i64[1] = 0x200000002;
      if (v497)
      {
        uint64_t v64 = v506;
        if (v497 == 4)
        {
          if ((int)v520 >= 1 && (int)v43 >= 1)
          {
            int v255 = 0;
            uint64_t v256 = *(void *)(v493 + 8);
            uint64_t v257 = 4 * (int)v43 - 16;
            do
            {
              int v518 = v255;
              for (unint64_t j = 0; j < v43; j += 4)
              {
                v259 = (unsigned __int8 *)(v256 + 4 * j);
                *(_DWORD *)buf = (v259[1] << 8) | (*v259 << 16) | v259[2] | 0xFF000000;
                unsigned int v523 = (v259[5] << 8) | (v259[4] << 16) | v259[6] | 0xFF000000;
                unsigned int v524 = (v259[9] << 8) | (v259[8] << 16) | v259[10] | 0xFF000000;
                unsigned int v525 = (v259[13] << 8) | (v259[12] << 16) | v259[14] | 0xFF000000;
                v260 = &v259[v257];
                int v261 = v260[16];
                v260 += 16;
                unsigned int v526 = (v260[1] << 8) | (v261 << 16) | v260[2] | 0xFF000000;
                unsigned int v527 = (v260[5] << 8) | (v260[4] << 16) | v260[6] | 0xFF000000;
                unsigned int v528 = (v260[9] << 8) | (v260[8] << 16) | v260[10] | 0xFF000000;
                unsigned int v529 = (v260[13] << 8) | (v260[12] << 16) | v260[14] | 0xFF000000;
                v262 = &v260[v257];
                int v263 = v262[16];
                v262 += 16;
                unsigned int v530 = (v262[1] << 8) | (v263 << 16) | v262[2] | 0xFF000000;
                unsigned int v531 = (v262[5] << 8) | (v262[4] << 16) | v262[6] | 0xFF000000;
                unsigned int v532 = (v262[9] << 8) | (v262[8] << 16) | v262[10] | 0xFF000000;
                unsigned int v264 = v262[14];
                unsigned int v533 = (v262[13] << 8) | (v262[12] << 16) | v264 | 0xFF000000;
                v265 = &v262[v257];
                unsigned int v266 = v262[v257 + 16];
                unsigned int v267 = v262[v257 + 17];
                unsigned int v268 = v262[v257 + 18];
                unsigned int v534 = v268 | (v266 << 16) | (v267 << 8) | 0xFF000000;
                unsigned int v269 = v262[v257 + 20];
                unsigned int v270 = v262[v257 + 21];
                unsigned int v271 = v262[v257 + 22];
                unsigned int v535 = v271 | (v269 << 16) | (v270 << 8) | 0xFF000000;
                unsigned int v272 = v262[v257 + 24];
                unsigned int v273 = v262[v257 + 25];
                unsigned int v274 = v262[v257 + 26];
                unsigned int v536 = v274 | (v272 << 16) | (v273 << 8) | 0xFF000000;
                unsigned int v275 = v262[v257 + 28];
                unsigned int v276 = v265[29];
                unsigned int v277 = v265[30];
                *(int8x8x4_t *)v284.i8 = vld4_s8((const char *)buf);
                unsigned int v537 = v277 | (v275 << 16) | (v276 << 8) | 0xFF000000;
                v49.i8[0] = vminv_u8(v278);
                unsigned int v279 = v49.i32[0];
                v49.i8[0] = vminv_u8(v284);
                unsigned int v280 = v49.i32[0];
                v49.i8[0] = vminv_u8(v281);
                unsigned int v282 = v49.i32[0];
                v49.i8[0] = vmaxv_u8(v281);
                unsigned int v283 = v49.i32[0];
                v49.i8[0] = vmaxv_u8(v278);
                v284.i8[0] = vmaxv_u8(v284);
                unsigned int v285 = v284.i32[0];
                if (v530 < v280) {
                  unsigned int v280 = v530;
                }
                unsigned int v286 = BYTE1(v530);
                if (BYTE1(v530) < v279) {
                  unsigned int v279 = BYTE1(v530);
                }
                unsigned int v287 = BYTE2(v530);
                if (BYTE2(v530) < v282) {
                  unsigned int v282 = BYTE2(v530);
                }
                if (v530 > v284.i32[0]) {
                  unsigned int v285 = v530;
                }
                if (BYTE1(v530) <= v49.i32[0]) {
                  unsigned int v286 = v49.i32[0];
                }
                if (BYTE2(v530) <= v283) {
                  unsigned int v287 = v283;
                }
                unsigned int v288 = v531;
                if (v531 < v280) {
                  unsigned int v280 = v531;
                }
                if (BYTE1(v531) < v279) {
                  unsigned int v279 = BYTE1(v531);
                }
                if (BYTE2(v531) < v282) {
                  unsigned int v282 = BYTE2(v531);
                }
                if (v531 <= v285) {
                  unsigned int v288 = v285;
                }
                if (BYTE1(v531) > v286) {
                  unsigned int v286 = BYTE1(v531);
                }
                if (BYTE2(v531) > v287) {
                  unsigned int v287 = BYTE2(v531);
                }
                if (v532 < v280) {
                  unsigned int v280 = v532;
                }
                if (BYTE1(v532) < v279) {
                  unsigned int v279 = BYTE1(v532);
                }
                if (BYTE2(v532) < v282) {
                  unsigned int v282 = BYTE2(v532);
                }
                if (v532 > v288) {
                  unsigned int v288 = v532;
                }
                if (BYTE1(v532) > v286) {
                  unsigned int v286 = BYTE1(v532);
                }
                if (BYTE2(v532) > v287) {
                  unsigned int v287 = BYTE2(v532);
                }
                if (v264 < v280) {
                  unsigned int v280 = v264;
                }
                if (BYTE1(v533) < v279) {
                  unsigned int v279 = BYTE1(v533);
                }
                if (BYTE2(v533) < v282) {
                  unsigned int v282 = BYTE2(v533);
                }
                if (v264 <= v288) {
                  unsigned int v264 = v288;
                }
                if (BYTE1(v533) > v286) {
                  unsigned int v286 = BYTE1(v533);
                }
                if (BYTE2(v533) > v287) {
                  unsigned int v287 = BYTE2(v533);
                }
                if (v268 < v280) {
                  unsigned int v280 = v268;
                }
                if (v267 < v279) {
                  unsigned int v279 = v267;
                }
                if (v266 < v282) {
                  unsigned int v282 = v266;
                }
                if (v268 <= v264) {
                  unsigned int v268 = v264;
                }
                if (v267 > v286) {
                  unsigned int v286 = v267;
                }
                if (v266 > v287) {
                  unsigned int v287 = v266;
                }
                if (v271 >= v280) {
                  unsigned int v289 = v280;
                }
                else {
                  unsigned int v289 = v271;
                }
                if (v270 >= v279) {
                  unsigned int v290 = v279;
                }
                else {
                  unsigned int v290 = v270;
                }
                if (v269 >= v282) {
                  unsigned int v291 = v282;
                }
                else {
                  unsigned int v291 = v269;
                }
                if (v271 <= v268) {
                  unsigned int v271 = v268;
                }
                if (v270 > v286) {
                  unsigned int v286 = v270;
                }
                if (v269 > v287) {
                  unsigned int v287 = v269;
                }
                if (v274 >= v289) {
                  unsigned int v292 = v289;
                }
                else {
                  unsigned int v292 = v274;
                }
                if (v273 >= v290) {
                  unsigned int v293 = v290;
                }
                else {
                  unsigned int v293 = v273;
                }
                if (v272 >= v291) {
                  unsigned int v294 = v291;
                }
                else {
                  unsigned int v294 = v272;
                }
                if (v274 <= v271) {
                  unsigned int v274 = v271;
                }
                if (v273 > v286) {
                  unsigned int v286 = v273;
                }
                if (v272 > v287) {
                  unsigned int v287 = v272;
                }
                if (v277 >= v292) {
                  unsigned int v295 = v292;
                }
                else {
                  unsigned int v295 = v277;
                }
                if (v276 >= v293) {
                  unsigned int v296 = v293;
                }
                else {
                  unsigned int v296 = v276;
                }
                if (v275 >= v294) {
                  unsigned int v297 = v294;
                }
                else {
                  unsigned int v297 = v275;
                }
                if (v277 <= v274) {
                  unsigned int v277 = v274;
                }
                if (v276 > v286) {
                  unsigned int v286 = v276;
                }
                if (v275 > v287) {
                  unsigned int v287 = v275;
                }
                int v298 = (int)(v277 - v295) >> 4;
                int v299 = (int)(v286 - v296) >> 4;
                int v300 = (int)(v287 - v297) >> 4;
                unsigned int v301 = v298;
                unsigned int v302 = v298 + v295;
                if (v302 >= 0x100) {
                  unsigned int v302 = -1;
                }
                unsigned int v303 = ((int)(v286 - v296) >> 4);
                unsigned int v304 = v303 + v296;
                if (v304 >= 0x100) {
                  unsigned int v304 = -1;
                }
                unsigned int v305 = ((int)(v287 - v297) >> 4) + v297;
                if (v305 >= 0x100) {
                  LOBYTE(v305) = -1;
                }
                __int16 v306 = v277 - v298;
                if (v301 > v277) {
                  __int16 v306 = 0;
                }
                __int16 v307 = v286 - v299;
                if (v303 <= v286) {
                  __int16 v308 = v307;
                }
                else {
                  __int16 v308 = 0;
                }
                unsigned __int8 v309 = v287 - v300;
                __int16 v310 = 8 * v308;
                if (v300 > v287) {
                  unsigned __int8 v309 = 0;
                }
                *(unsigned char *)uint64_t shared_owners = v310 & 0xE0 | (v309 >> 3);
                *(unsigned char *)(shared_owners + 1) = (unsigned __int16)((v306 << 8) & 0xF800 | v310 & 0x7FF) >> 8;
                *(unsigned char *)(shared_owners + 2) = (8 * v304) & 0xE0 | (v305 >> 3);
                unsigned int v311 = ((v302 << 8) & 0xFFFFF800 | (8 * v304) & 0x7FF) >> 8;
                unsigned int v312 = v305 & 0xF8 | (v305 >> 5);
                unsigned int v313 = v309 & 0xF8 | (v309 >> 5);
                unsigned int v314 = v304 & 0xFC | (v304 >> 6);
                unsigned int v315 = v308 & 0xFC | (v308 >> 6);
                unsigned int v316 = v302 & 0xF8 | (v302 >> 5);
                unsigned int v317 = v306 & 0xF8 | (v306 >> 5);
                uint32x4_t v318 = (uint32x4_t)vdupq_n_s32(v317);
                uint32x4_t v319 = (uint32x4_t)vdupq_n_s32(v315);
                uint32x4_t v320 = (uint32x4_t)vdupq_n_s32(v313);
                uint32x4_t v321 = (uint32x4_t)vdupq_n_s32(v316);
                int16x8_t v49 = (int16x8_t)vdupq_n_s32(v314);
                uint32x4_t v322 = (uint32x4_t)vdupq_n_s32(v312);
                uint32x4_t v323 = (uint32x4_t)vdupq_n_s32((21846 * (v316 + 2 * v317)) >> 16);
                uint32x4_t v324 = (uint32x4_t)vdupq_n_s32((21846 * (v314 + 2 * v315)) >> 16);
                uint32x4_t v325 = (uint32x4_t)vdupq_n_s32((21846 * (v312 + 2 * v313)) >> 16);
                uint32x4_t v326 = (uint32x4_t)vdupq_n_s32((21846 * (v317 + 2 * v316)) >> 16);
                uint32x4_t v327 = (uint32x4_t)vdupq_n_s32((21846 * (v315 + 2 * v314)) >> 16);
                uint32x4_t v328 = (uint32x4_t)vdupq_n_s32((21846 * (v313 + 2 * v312)) >> 16);
                *(unsigned char *)(shared_owners + 3) = v311;
                int32x4_t v329 = (int32x4_t)xmmword_1A28FC840;
                int32x4_t v330 = (int32x4_t)xmmword_1A28FC850;
                int8x16_t v331 = 0uLL;
                uint64_t v332 = 32;
                int8x16_t v333 = 0uLL;
                do
                {
                  v50.i8[0] = *((unsigned char *)&v529 + v332);
                  v50.i8[4] = *((unsigned char *)&v528 + v332);
                  v50.i8[8] = *((unsigned char *)&v527 + v332);
                  v51.i8[0] = *((unsigned char *)&v525 + v332);
                  v51.i8[4] = *((unsigned char *)&v524 + v332);
                  v50.i8[12] = *((unsigned char *)&v526 + v332);
                  v51.i8[8] = buf[v332 + 4];
                  v51.i8[12] = buf[v332];
                  v52.i8[0] = *((unsigned char *)&v525 + v332 + 1);
                  v52.i8[4] = *((unsigned char *)&v524 + v332 + 1);
                  v52.i8[8] = *((unsigned char *)&v523 + v332 + 1);
                  v53.i8[0] = *((unsigned char *)&v529 + v332 + 1);
                  v53.i8[4] = *((unsigned char *)&v528 + v332 + 1);
                  v53.i8[8] = *((unsigned char *)&v527 + v332 + 1);
                  v54.i8[0] = *((unsigned char *)&v529 + v332 + 2);
                  v53.i8[12] = *((unsigned char *)&v526 + v332 + 1);
                  v54.i8[4] = *((unsigned char *)&v528 + v332 + 2);
                  v54.i8[8] = *((unsigned char *)&v527 + v332 + 2);
                  v52.i8[12] = buf[v332 + 1];
                  v55.i8[0] = *((unsigned char *)&v525 + v332 + 2);
                  v55.i8[4] = *((unsigned char *)&v524 + v332 + 2);
                  v54.i8[12] = *((unsigned char *)&v526 + v332 + 2);
                  v55.i8[8] = *((unsigned char *)&v523 + v332 + 2);
                  v55.i8[12] = buf[v332 + 2];
                  uint32x4_t v334 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v319), (uint32x4_t)v50, v318), (uint32x4_t)v54, v320);
                  uint32x4_t v335 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v319), (uint32x4_t)v51, v318), (uint32x4_t)v55, v320);
                  uint32x4_t v336 = vabaq_u32(vabaq_u32(vabdq_u32(v53, (uint32x4_t)v49), (uint32x4_t)v50, v321), (uint32x4_t)v54, v322);
                  uint32x4_t v337 = vabaq_u32(vabaq_u32(vabdq_u32(v52, (uint32x4_t)v49), (uint32x4_t)v51, v321), (uint32x4_t)v55, v322);
                  uint32x4_t v338 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v324), (uint32x4_t)v50, v323), (uint32x4_t)v54, v325);
                  uint32x4_t v339 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v324), (uint32x4_t)v51, v323), (uint32x4_t)v55, v325);
                  uint32x4_t v340 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v327), (uint32x4_t)v51, v326), (uint32x4_t)v55, v328);
                  uint32x4_t v341 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v327), (uint32x4_t)v50, v326), (uint32x4_t)v54, v328);
                  int8x16_t v342 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v334, v341), (int16x8_t)vcgtq_u32(v335, v340));
                  int8x16_t v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v334, v338), (int16x8_t)vcgtq_u32(v335, v339));
                  int8x16_t v55 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v336, v341), (int16x8_t)vcgtq_u32(v337, v340));
                  int8x16_t v343 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v338, v341), (int16x8_t)vcgtq_u32(v339, v340));
                  int8x16_t v344 = vandq_s8(v342, v55);
                  *(int8x8_t *)v342.i8 = vmovn_s16((int16x8_t)vandq_s8(v342, v343));
                  int8x16_t v345 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v342.i8, *(int8x8_t *)v318.i8)), v62);
                  int8x8_t v346 = vmovn_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v336, v338), (int16x8_t)vcgtq_u32(v337, v339)), v54), v344));
                  uint32x4_t v347 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v346, *(int8x8_t *)v318.i8)), 0x1FuLL)), v63), vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v342.i8, *(int8x8_t *)v318.i8)), v62));
                  uint32x4_t v348 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v346, *(int8x8_t *)v318.i8)), 0x1FuLL)), v63), v345);
                  uint32x4_t v52 = (uint32x4_t)vaddq_s32(v329, v329);
                  uint32x4_t v53 = (uint32x4_t)vaddq_s32(v330, v330);
                  int8x16_t v51 = (int8x16_t)vshlq_u32(v348, v53);
                  int8x16_t v333 = vorrq_s8((int8x16_t)vshlq_u32(v347, v52), v333);
                  v50.i64[0] = 0x700000007;
                  v50.i64[1] = 0x700000007;
                  int8x16_t v331 = vorrq_s8(v51, v331);
                  int32x4_t v330 = vaddq_s32(v330, v50);
                  int32x4_t v329 = vaddq_s32(v329, v50);
                  v332 -= 32;
                }
                while (v332 != -32);
                int8x16_t v349 = vorrq_s8(v331, v333);
                *(int8x8_t *)v349.i8 = vorr_s8(*(int8x8_t *)v349.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v349, v349, 8uLL));
                *(_DWORD *)(shared_owners + 4) = v349.i32[0] | v349.i32[1];
                shared_owners += 8;
              }
              int v255 = v518 + 4;
              v256 += 16 * (int)v43;
            }
            while (v518 + 4 < (int)v520);
          }
        }
        else
        {
          if (v497 != 1) {
            goto LABEL_478;
          }
          if ((int)v520 >= 1 && (int)v43 >= 1)
          {
            int v65 = 0;
            uint64_t v66 = *(void *)(v493 + 8);
            uint64_t v67 = 4 * (int)v43 - 16;
            do
            {
              int v516 = v65;
              for (unint64_t k = 0; k < v43; k += 4)
              {
                BOOL v69 = (unsigned __int8 *)(v66 + 4 * k);
                *(_DWORD *)buf = (v69[1] << 8) | (v69[2] << 16) | *v69 | 0xFF000000;
                unsigned int v523 = (v69[5] << 8) | (v69[6] << 16) | v69[4] | 0xFF000000;
                unsigned int v524 = (v69[9] << 8) | (v69[10] << 16) | v69[8] | 0xFF000000;
                unsigned int v525 = (v69[13] << 8) | (v69[14] << 16) | v69[12] | 0xFF000000;
                BOOL v70 = &v69[v67];
                int v71 = v70[16];
                v70 += 16;
                unsigned int v526 = (v70[1] << 8) | (v70[2] << 16) | v71 | 0xFF000000;
                unsigned int v527 = (v70[5] << 8) | (v70[6] << 16) | v70[4] | 0xFF000000;
                unsigned int v528 = (v70[9] << 8) | (v70[10] << 16) | v70[8] | 0xFF000000;
                unsigned int v529 = (v70[13] << 8) | (v70[14] << 16) | v70[12] | 0xFF000000;
                int8x16_t v72 = &v70[v67];
                int v73 = v72[16];
                v72 += 16;
                unsigned int v530 = (v72[1] << 8) | (v72[2] << 16) | v73 | 0xFF000000;
                unsigned int v531 = (v72[5] << 8) | (v72[6] << 16) | v72[4] | 0xFF000000;
                unsigned int v532 = (v72[9] << 8) | (v72[10] << 16) | v72[8] | 0xFF000000;
                unsigned int v74 = v72[12];
                unsigned int v533 = (v72[13] << 8) | (v72[14] << 16) | v74 | 0xFF000000;
                double v75 = &v72[v67];
                unsigned int v76 = v72[v67 + 18];
                unsigned int v77 = v72[v67 + 17];
                unsigned int v78 = v72[v67 + 16];
                unsigned int v534 = v78 | (v76 << 16) | (v77 << 8) | 0xFF000000;
                unsigned int v79 = v72[v67 + 22];
                unsigned int v80 = v72[v67 + 21];
                unsigned int v81 = v72[v67 + 20];
                unsigned int v535 = v81 | (v79 << 16) | (v80 << 8) | 0xFF000000;
                unsigned int v82 = v72[v67 + 26];
                unsigned int v83 = v72[v67 + 25];
                unsigned int v84 = v72[v67 + 24];
                unsigned int v536 = v84 | (v82 << 16) | (v83 << 8) | 0xFF000000;
                unsigned int v85 = v72[v67 + 30];
                unsigned int v86 = v75[29];
                unsigned int v87 = v75[28];
                *(int8x8x4_t *)v94.i8 = vld4_s8((const char *)buf);
                unsigned int v537 = v87 | (v85 << 16) | (v86 << 8) | 0xFF000000;
                v49.i8[0] = vminv_u8(v88);
                unsigned int v89 = v49.i32[0];
                v49.i8[0] = vminv_u8(v94);
                unsigned int v90 = v49.i32[0];
                v49.i8[0] = vminv_u8(v91);
                unsigned int v92 = v49.i32[0];
                v49.i8[0] = vmaxv_u8(v91);
                unsigned int v93 = v49.i32[0];
                v49.i8[0] = vmaxv_u8(v88);
                v94.i8[0] = vmaxv_u8(v94);
                unsigned int v95 = v94.i32[0];
                if (v530 < v90) {
                  unsigned int v90 = v530;
                }
                unsigned int v96 = BYTE1(v530);
                if (BYTE1(v530) < v89) {
                  unsigned int v89 = BYTE1(v530);
                }
                unsigned int v97 = BYTE2(v530);
                if (BYTE2(v530) < v92) {
                  unsigned int v92 = BYTE2(v530);
                }
                if (v530 > v94.i32[0]) {
                  unsigned int v95 = v530;
                }
                if (BYTE1(v530) <= v49.i32[0]) {
                  unsigned int v96 = v49.i32[0];
                }
                if (BYTE2(v530) <= v93) {
                  unsigned int v97 = v93;
                }
                unsigned int v98 = v531;
                if (v531 < v90) {
                  unsigned int v90 = v531;
                }
                if (BYTE1(v531) < v89) {
                  unsigned int v89 = BYTE1(v531);
                }
                if (BYTE2(v531) < v92) {
                  unsigned int v92 = BYTE2(v531);
                }
                if (v531 <= v95) {
                  unsigned int v98 = v95;
                }
                if (BYTE1(v531) > v96) {
                  unsigned int v96 = BYTE1(v531);
                }
                if (BYTE2(v531) > v97) {
                  unsigned int v97 = BYTE2(v531);
                }
                if (v532 < v90) {
                  unsigned int v90 = v532;
                }
                if (BYTE1(v532) < v89) {
                  unsigned int v89 = BYTE1(v532);
                }
                if (BYTE2(v532) < v92) {
                  unsigned int v92 = BYTE2(v532);
                }
                if (v532 > v98) {
                  unsigned int v98 = v532;
                }
                if (BYTE1(v532) > v96) {
                  unsigned int v96 = BYTE1(v532);
                }
                if (BYTE2(v532) > v97) {
                  unsigned int v97 = BYTE2(v532);
                }
                if (v74 < v90) {
                  unsigned int v90 = v74;
                }
                if (BYTE1(v533) < v89) {
                  unsigned int v89 = BYTE1(v533);
                }
                if (BYTE2(v533) < v92) {
                  unsigned int v92 = BYTE2(v533);
                }
                if (v74 <= v98) {
                  unsigned int v74 = v98;
                }
                if (BYTE1(v533) > v96) {
                  unsigned int v96 = BYTE1(v533);
                }
                if (BYTE2(v533) > v97) {
                  unsigned int v97 = BYTE2(v533);
                }
                if (v78 < v90) {
                  unsigned int v90 = v78;
                }
                if (v77 < v89) {
                  unsigned int v89 = v77;
                }
                if (v76 < v92) {
                  unsigned int v92 = v76;
                }
                if (v78 <= v74) {
                  unsigned int v78 = v74;
                }
                if (v77 > v96) {
                  unsigned int v96 = v77;
                }
                if (v76 > v97) {
                  unsigned int v97 = v76;
                }
                if (v81 >= v90) {
                  unsigned int v99 = v90;
                }
                else {
                  unsigned int v99 = v81;
                }
                if (v80 >= v89) {
                  unsigned int v100 = v89;
                }
                else {
                  unsigned int v100 = v80;
                }
                if (v79 >= v92) {
                  unsigned int v101 = v92;
                }
                else {
                  unsigned int v101 = v79;
                }
                if (v81 <= v78) {
                  unsigned int v81 = v78;
                }
                if (v80 > v96) {
                  unsigned int v96 = v80;
                }
                if (v79 > v97) {
                  unsigned int v97 = v79;
                }
                if (v84 >= v99) {
                  unsigned int v102 = v99;
                }
                else {
                  unsigned int v102 = v84;
                }
                if (v83 >= v100) {
                  unsigned int v103 = v100;
                }
                else {
                  unsigned int v103 = v83;
                }
                if (v82 >= v101) {
                  unsigned int v104 = v101;
                }
                else {
                  unsigned int v104 = v82;
                }
                if (v84 <= v81) {
                  unsigned int v84 = v81;
                }
                if (v83 > v96) {
                  unsigned int v96 = v83;
                }
                if (v82 > v97) {
                  unsigned int v97 = v82;
                }
                if (v87 >= v102) {
                  unsigned int v105 = v102;
                }
                else {
                  unsigned int v105 = v87;
                }
                if (v86 >= v103) {
                  unsigned int v106 = v103;
                }
                else {
                  unsigned int v106 = v86;
                }
                if (v85 >= v104) {
                  unsigned int v107 = v104;
                }
                else {
                  unsigned int v107 = v85;
                }
                if (v87 <= v84) {
                  unsigned int v87 = v84;
                }
                if (v86 > v96) {
                  unsigned int v96 = v86;
                }
                if (v85 > v97) {
                  unsigned int v97 = v85;
                }
                int v108 = (int)(v87 - v105) >> 4;
                int v109 = (int)(v96 - v106) >> 4;
                int v110 = (int)(v97 - v107) >> 4;
                unsigned int v111 = v108;
                unsigned int v112 = v108 + v105;
                if (v112 >= 0x100) {
                  unsigned int v112 = -1;
                }
                unsigned int v113 = ((int)(v96 - v106) >> 4);
                unsigned int v114 = v113 + v106;
                if (v114 >= 0x100) {
                  unsigned int v114 = -1;
                }
                unsigned int v115 = ((int)(v97 - v107) >> 4) + v107;
                if (v115 >= 0x100) {
                  LOBYTE(v115) = -1;
                }
                __int16 v116 = v87 - v108;
                if (v111 > v87) {
                  __int16 v116 = 0;
                }
                __int16 v117 = v96 - v109;
                if (v113 <= v96) {
                  __int16 v118 = v117;
                }
                else {
                  __int16 v118 = 0;
                }
                unsigned __int8 v119 = v97 - v110;
                __int16 v120 = 8 * v118;
                if (v110 > v97) {
                  unsigned __int8 v119 = 0;
                }
                *(unsigned char *)uint64_t shared_owners = v120 & 0xE0 | (v119 >> 3);
                *(unsigned char *)(shared_owners + 1) = (unsigned __int16)((v116 << 8) & 0xF800 | v120 & 0x7FF) >> 8;
                *(unsigned char *)(shared_owners + 2) = (8 * v114) & 0xE0 | (v115 >> 3);
                unsigned int v121 = ((v112 << 8) & 0xFFFFF800 | (8 * v114) & 0x7FF) >> 8;
                unsigned int v122 = v115 & 0xF8 | (v115 >> 5);
                unsigned int v123 = v119 & 0xF8 | (v119 >> 5);
                unsigned int v124 = v114 & 0xFC | (v114 >> 6);
                unsigned int v125 = v118 & 0xFC | (v118 >> 6);
                unsigned int v126 = v112 & 0xF8 | (v112 >> 5);
                unsigned int v127 = v116 & 0xF8 | (v116 >> 5);
                uint32x4_t v128 = (uint32x4_t)vdupq_n_s32(v127);
                uint32x4_t v129 = (uint32x4_t)vdupq_n_s32(v125);
                uint32x4_t v130 = (uint32x4_t)vdupq_n_s32(v123);
                uint32x4_t v131 = (uint32x4_t)vdupq_n_s32(v126);
                int16x8_t v49 = (int16x8_t)vdupq_n_s32(v124);
                uint32x4_t v132 = (uint32x4_t)vdupq_n_s32(v122);
                uint32x4_t v133 = (uint32x4_t)vdupq_n_s32((21846 * (v126 + 2 * v127)) >> 16);
                uint32x4_t v134 = (uint32x4_t)vdupq_n_s32((21846 * (v124 + 2 * v125)) >> 16);
                uint32x4_t v135 = (uint32x4_t)vdupq_n_s32((21846 * (v122 + 2 * v123)) >> 16);
                uint32x4_t v136 = (uint32x4_t)vdupq_n_s32((21846 * (v127 + 2 * v126)) >> 16);
                uint32x4_t v137 = (uint32x4_t)vdupq_n_s32((21846 * (v125 + 2 * v124)) >> 16);
                uint32x4_t v138 = (uint32x4_t)vdupq_n_s32((21846 * (v123 + 2 * v122)) >> 16);
                *(unsigned char *)(shared_owners + 3) = v121;
                int32x4_t v139 = (int32x4_t)xmmword_1A28FC840;
                int32x4_t v140 = (int32x4_t)xmmword_1A28FC850;
                int8x16_t v141 = 0uLL;
                uint64_t v142 = 32;
                int8x16_t v143 = 0uLL;
                do
                {
                  v50.i8[0] = *((unsigned char *)&v529 + v142);
                  v50.i8[4] = *((unsigned char *)&v528 + v142);
                  v50.i8[8] = *((unsigned char *)&v527 + v142);
                  v51.i8[0] = *((unsigned char *)&v525 + v142);
                  v51.i8[4] = *((unsigned char *)&v524 + v142);
                  v50.i8[12] = *((unsigned char *)&v526 + v142);
                  v51.i8[8] = buf[v142 + 4];
                  v51.i8[12] = buf[v142];
                  v52.i8[0] = *((unsigned char *)&v525 + v142 + 1);
                  v52.i8[4] = *((unsigned char *)&v524 + v142 + 1);
                  v52.i8[8] = *((unsigned char *)&v523 + v142 + 1);
                  v53.i8[0] = *((unsigned char *)&v529 + v142 + 1);
                  v53.i8[4] = *((unsigned char *)&v528 + v142 + 1);
                  v53.i8[8] = *((unsigned char *)&v527 + v142 + 1);
                  v54.i8[0] = *((unsigned char *)&v529 + v142 + 2);
                  v53.i8[12] = *((unsigned char *)&v526 + v142 + 1);
                  v54.i8[4] = *((unsigned char *)&v528 + v142 + 2);
                  v54.i8[8] = *((unsigned char *)&v527 + v142 + 2);
                  v52.i8[12] = buf[v142 + 1];
                  v55.i8[0] = *((unsigned char *)&v525 + v142 + 2);
                  v55.i8[4] = *((unsigned char *)&v524 + v142 + 2);
                  v54.i8[12] = *((unsigned char *)&v526 + v142 + 2);
                  v55.i8[8] = *((unsigned char *)&v523 + v142 + 2);
                  v55.i8[12] = buf[v142 + 2];
                  uint32x4_t v144 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v129), (uint32x4_t)v50, v128), (uint32x4_t)v54, v130);
                  uint32x4_t v145 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v129), (uint32x4_t)v51, v128), (uint32x4_t)v55, v130);
                  uint32x4_t v146 = vabaq_u32(vabaq_u32(vabdq_u32(v53, (uint32x4_t)v49), (uint32x4_t)v50, v131), (uint32x4_t)v54, v132);
                  uint32x4_t v147 = vabaq_u32(vabaq_u32(vabdq_u32(v52, (uint32x4_t)v49), (uint32x4_t)v51, v131), (uint32x4_t)v55, v132);
                  uint32x4_t v148 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v134), (uint32x4_t)v50, v133), (uint32x4_t)v54, v135);
                  uint32x4_t v149 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v134), (uint32x4_t)v51, v133), (uint32x4_t)v55, v135);
                  uint32x4_t v150 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v137), (uint32x4_t)v51, v136), (uint32x4_t)v55, v138);
                  uint32x4_t v151 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v137), (uint32x4_t)v50, v136), (uint32x4_t)v54, v138);
                  int8x16_t v152 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v144, v151), (int16x8_t)vcgtq_u32(v145, v150));
                  int8x16_t v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v144, v148), (int16x8_t)vcgtq_u32(v145, v149));
                  int8x16_t v55 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v146, v151), (int16x8_t)vcgtq_u32(v147, v150));
                  int8x16_t v153 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v148, v151), (int16x8_t)vcgtq_u32(v149, v150));
                  int8x16_t v154 = vandq_s8(v152, v55);
                  *(int8x8_t *)v152.i8 = vmovn_s16((int16x8_t)vandq_s8(v152, v153));
                  int8x16_t v155 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v152.i8, *(int8x8_t *)v128.i8)), v62);
                  int8x8_t v156 = vmovn_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v146, v148), (int16x8_t)vcgtq_u32(v147, v149)), v54), v154));
                  uint32x4_t v157 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v156, *(int8x8_t *)v128.i8)), 0x1FuLL)), v63), vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v152.i8, *(int8x8_t *)v128.i8)), v62));
                  uint32x4_t v158 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v156, *(int8x8_t *)v128.i8)), 0x1FuLL)), v63), v155);
                  uint32x4_t v52 = (uint32x4_t)vaddq_s32(v139, v139);
                  uint32x4_t v53 = (uint32x4_t)vaddq_s32(v140, v140);
                  int8x16_t v51 = (int8x16_t)vshlq_u32(v158, v53);
                  int8x16_t v143 = vorrq_s8((int8x16_t)vshlq_u32(v157, v52), v143);
                  v50.i64[0] = 0x700000007;
                  v50.i64[1] = 0x700000007;
                  int8x16_t v141 = vorrq_s8(v51, v141);
                  int32x4_t v140 = vaddq_s32(v140, v50);
                  int32x4_t v139 = vaddq_s32(v139, v50);
                  v142 -= 32;
                }
                while (v142 != -32);
                int8x16_t v159 = vorrq_s8(v141, v143);
                *(int8x8_t *)v159.i8 = vorr_s8(*(int8x8_t *)v159.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL));
                *(_DWORD *)(shared_owners + 4) = v159.i32[0] | v159.i32[1];
                shared_owners += 8;
              }
              int v65 = v516 + 4;
              v66 += 16 * (int)v43;
            }
            while (v516 + 4 < (int)v520);
          }
        }
      }
      else if ((int)v520 >= 1 && (int)v43 >= 1)
      {
        int v160 = 0;
        uint64_t v161 = *(void *)(v493 + 8);
        uint64_t v162 = 3 * (int)v43 - 12;
        do
        {
          int v517 = v160;
          for (unint64_t m = 0; m < v43; m += 4)
          {
            uint64_t v164 = (unsigned __int8 *)(v161 + 3 * m);
            *(_DWORD *)buf = (v164[1] << 8) | (v164[2] << 16) | *v164 | 0xFF000000;
            unsigned int v523 = (v164[4] << 8) | (v164[5] << 16) | v164[3] | 0xFF000000;
            unsigned int v524 = (v164[7] << 8) | (v164[8] << 16) | v164[6] | 0xFF000000;
            unsigned int v525 = (v164[10] << 8) | (v164[11] << 16) | v164[9] | 0xFF000000;
            v165 = &v164[v162];
            int v166 = v165[12];
            v165 += 12;
            unsigned int v526 = (v165[1] << 8) | (v165[2] << 16) | v166 | 0xFF000000;
            unsigned int v527 = (v165[4] << 8) | (v165[5] << 16) | v165[3] | 0xFF000000;
            unsigned int v528 = (v165[7] << 8) | (v165[8] << 16) | v165[6] | 0xFF000000;
            unsigned int v529 = (v165[10] << 8) | (v165[11] << 16) | v165[9] | 0xFF000000;
            uint64_t v167 = &v165[v162];
            int v168 = v167[12];
            v167 += 12;
            unsigned int v530 = (v167[1] << 8) | (v167[2] << 16) | v168 | 0xFF000000;
            unsigned int v531 = (v167[4] << 8) | (v167[5] << 16) | v167[3] | 0xFF000000;
            unsigned int v532 = (v167[7] << 8) | (v167[8] << 16) | v167[6] | 0xFF000000;
            unsigned int v169 = v167[9];
            unsigned int v533 = (v167[10] << 8) | (v167[11] << 16) | v169 | 0xFF000000;
            v170 = &v167[v162];
            unsigned int v171 = v167[v162 + 14];
            unsigned int v172 = v167[v162 + 13];
            unsigned int v173 = v167[v162 + 12];
            unsigned int v534 = v173 | (v171 << 16) | (v172 << 8) | 0xFF000000;
            unsigned int v174 = v167[v162 + 17];
            unsigned int v175 = v167[v162 + 16];
            unsigned int v176 = v167[v162 + 15];
            unsigned int v535 = v176 | (v174 << 16) | (v175 << 8) | 0xFF000000;
            unsigned int v177 = v167[v162 + 20];
            unsigned int v178 = v167[v162 + 19];
            unsigned int v179 = v167[v162 + 18];
            unsigned int v536 = v179 | (v177 << 16) | (v178 << 8) | 0xFF000000;
            unsigned int v180 = v167[v162 + 23];
            unsigned int v181 = v170[22];
            unsigned int v182 = v170[21];
            *(int8x8x4_t *)v189.i8 = vld4_s8((const char *)buf);
            unsigned int v537 = v182 | (v180 << 16) | (v181 << 8) | 0xFF000000;
            v49.i8[0] = vminv_u8(v183);
            unsigned int v184 = v49.i32[0];
            v49.i8[0] = vminv_u8(v189);
            unsigned int v185 = v49.i32[0];
            v49.i8[0] = vminv_u8(v186);
            unsigned int v187 = v49.i32[0];
            v49.i8[0] = vmaxv_u8(v186);
            unsigned int v188 = v49.i32[0];
            v49.i8[0] = vmaxv_u8(v183);
            v189.i8[0] = vmaxv_u8(v189);
            unsigned int v190 = v189.i32[0];
            if (v530 < v185) {
              unsigned int v185 = v530;
            }
            unsigned int v191 = BYTE1(v530);
            if (BYTE1(v530) < v184) {
              unsigned int v184 = BYTE1(v530);
            }
            unsigned int v192 = BYTE2(v530);
            if (BYTE2(v530) < v187) {
              unsigned int v187 = BYTE2(v530);
            }
            if (v530 > v189.i32[0]) {
              unsigned int v190 = v530;
            }
            if (BYTE1(v530) <= v49.i32[0]) {
              unsigned int v191 = v49.i32[0];
            }
            if (BYTE2(v530) <= v188) {
              unsigned int v192 = v188;
            }
            unsigned int v193 = v531;
            if (v531 < v185) {
              unsigned int v185 = v531;
            }
            if (BYTE1(v531) < v184) {
              unsigned int v184 = BYTE1(v531);
            }
            if (BYTE2(v531) < v187) {
              unsigned int v187 = BYTE2(v531);
            }
            if (v531 <= v190) {
              unsigned int v193 = v190;
            }
            if (BYTE1(v531) > v191) {
              unsigned int v191 = BYTE1(v531);
            }
            if (BYTE2(v531) > v192) {
              unsigned int v192 = BYTE2(v531);
            }
            if (v532 < v185) {
              unsigned int v185 = v532;
            }
            if (BYTE1(v532) < v184) {
              unsigned int v184 = BYTE1(v532);
            }
            if (BYTE2(v532) < v187) {
              unsigned int v187 = BYTE2(v532);
            }
            if (v532 > v193) {
              unsigned int v193 = v532;
            }
            if (BYTE1(v532) > v191) {
              unsigned int v191 = BYTE1(v532);
            }
            if (BYTE2(v532) > v192) {
              unsigned int v192 = BYTE2(v532);
            }
            if (v169 < v185) {
              unsigned int v185 = v169;
            }
            if (BYTE1(v533) < v184) {
              unsigned int v184 = BYTE1(v533);
            }
            if (BYTE2(v533) < v187) {
              unsigned int v187 = BYTE2(v533);
            }
            if (v169 <= v193) {
              unsigned int v169 = v193;
            }
            if (BYTE1(v533) > v191) {
              unsigned int v191 = BYTE1(v533);
            }
            if (BYTE2(v533) > v192) {
              unsigned int v192 = BYTE2(v533);
            }
            if (v173 < v185) {
              unsigned int v185 = v173;
            }
            if (v172 < v184) {
              unsigned int v184 = v172;
            }
            if (v171 < v187) {
              unsigned int v187 = v171;
            }
            if (v173 <= v169) {
              unsigned int v173 = v169;
            }
            if (v172 > v191) {
              unsigned int v191 = v172;
            }
            if (v171 > v192) {
              unsigned int v192 = v171;
            }
            if (v176 >= v185) {
              unsigned int v194 = v185;
            }
            else {
              unsigned int v194 = v176;
            }
            if (v175 >= v184) {
              unsigned int v195 = v184;
            }
            else {
              unsigned int v195 = v175;
            }
            if (v174 >= v187) {
              unsigned int v196 = v187;
            }
            else {
              unsigned int v196 = v174;
            }
            if (v176 <= v173) {
              unsigned int v176 = v173;
            }
            if (v175 > v191) {
              unsigned int v191 = v175;
            }
            if (v174 > v192) {
              unsigned int v192 = v174;
            }
            if (v179 >= v194) {
              unsigned int v197 = v194;
            }
            else {
              unsigned int v197 = v179;
            }
            if (v178 >= v195) {
              unsigned int v198 = v195;
            }
            else {
              unsigned int v198 = v178;
            }
            if (v177 >= v196) {
              unsigned int v199 = v196;
            }
            else {
              unsigned int v199 = v177;
            }
            if (v179 <= v176) {
              unsigned int v179 = v176;
            }
            if (v178 > v191) {
              unsigned int v191 = v178;
            }
            if (v177 > v192) {
              unsigned int v192 = v177;
            }
            if (v182 >= v197) {
              unsigned int v200 = v197;
            }
            else {
              unsigned int v200 = v182;
            }
            if (v181 >= v198) {
              unsigned int v201 = v198;
            }
            else {
              unsigned int v201 = v181;
            }
            if (v180 >= v199) {
              unsigned int v202 = v199;
            }
            else {
              unsigned int v202 = v180;
            }
            if (v182 <= v179) {
              unsigned int v182 = v179;
            }
            if (v181 > v191) {
              unsigned int v191 = v181;
            }
            if (v180 > v192) {
              unsigned int v192 = v180;
            }
            int v203 = (int)(v182 - v200) >> 4;
            int v204 = (int)(v191 - v201) >> 4;
            int v205 = (int)(v192 - v202) >> 4;
            unsigned int v206 = v203;
            unsigned int v207 = v203 + v200;
            if (v207 >= 0x100) {
              unsigned int v207 = -1;
            }
            unsigned int v208 = ((int)(v191 - v201) >> 4);
            unsigned int v209 = v208 + v201;
            if (v209 >= 0x100) {
              unsigned int v209 = -1;
            }
            unsigned int v210 = ((int)(v192 - v202) >> 4) + v202;
            if (v210 >= 0x100) {
              LOBYTE(v210) = -1;
            }
            __int16 v211 = v182 - v203;
            if (v206 > v182) {
              __int16 v211 = 0;
            }
            __int16 v212 = v191 - v204;
            if (v208 <= v191) {
              __int16 v213 = v212;
            }
            else {
              __int16 v213 = 0;
            }
            unsigned __int8 v214 = v192 - v205;
            __int16 v215 = 8 * v213;
            if (v205 > v192) {
              unsigned __int8 v214 = 0;
            }
            *(unsigned char *)uint64_t shared_owners = v215 & 0xE0 | (v214 >> 3);
            *(unsigned char *)(shared_owners + 1) = (unsigned __int16)((v211 << 8) & 0xF800 | v215 & 0x7FF) >> 8;
            *(unsigned char *)(shared_owners + 2) = (8 * v209) & 0xE0 | (v210 >> 3);
            unsigned int v216 = ((v207 << 8) & 0xFFFFF800 | (8 * v209) & 0x7FF) >> 8;
            unsigned int v217 = v210 & 0xF8 | (v210 >> 5);
            unsigned int v218 = v214 & 0xF8 | (v214 >> 5);
            unsigned int v219 = v209 & 0xFC | (v209 >> 6);
            unsigned int v220 = v213 & 0xFC | (v213 >> 6);
            unsigned int v221 = v207 & 0xF8 | (v207 >> 5);
            unsigned int v222 = v211 & 0xF8 | (v211 >> 5);
            uint32x4_t v223 = (uint32x4_t)vdupq_n_s32(v222);
            uint32x4_t v224 = (uint32x4_t)vdupq_n_s32(v220);
            uint32x4_t v225 = (uint32x4_t)vdupq_n_s32(v218);
            uint32x4_t v226 = (uint32x4_t)vdupq_n_s32(v221);
            int16x8_t v49 = (int16x8_t)vdupq_n_s32(v219);
            uint32x4_t v227 = (uint32x4_t)vdupq_n_s32(v217);
            uint32x4_t v228 = (uint32x4_t)vdupq_n_s32((21846 * (v221 + 2 * v222)) >> 16);
            uint32x4_t v229 = (uint32x4_t)vdupq_n_s32((21846 * (v219 + 2 * v220)) >> 16);
            uint32x4_t v230 = (uint32x4_t)vdupq_n_s32((21846 * (v217 + 2 * v218)) >> 16);
            uint32x4_t v231 = (uint32x4_t)vdupq_n_s32((21846 * (v222 + 2 * v221)) >> 16);
            uint32x4_t v232 = (uint32x4_t)vdupq_n_s32((21846 * (v220 + 2 * v219)) >> 16);
            uint32x4_t v233 = (uint32x4_t)vdupq_n_s32((21846 * (v218 + 2 * v217)) >> 16);
            *(unsigned char *)(shared_owners + 3) = v216;
            int8x16_t v234 = 0uLL;
            uint64_t v235 = 32;
            int8x16_t v236 = 0uLL;
            int32x4_t v237 = (int32x4_t)xmmword_1A28FC850;
            int32x4_t v238 = (int32x4_t)xmmword_1A28FC840;
            do
            {
              v50.i8[0] = *((unsigned char *)&v529 + v235);
              v50.i8[4] = *((unsigned char *)&v528 + v235);
              v50.i8[8] = *((unsigned char *)&v527 + v235);
              v51.i8[0] = *((unsigned char *)&v525 + v235);
              v51.i8[4] = *((unsigned char *)&v524 + v235);
              v50.i8[12] = *((unsigned char *)&v526 + v235);
              v51.i8[8] = buf[v235 + 4];
              v51.i8[12] = buf[v235];
              v52.i8[0] = *((unsigned char *)&v525 + v235 + 1);
              v52.i8[4] = *((unsigned char *)&v524 + v235 + 1);
              v52.i8[8] = *((unsigned char *)&v523 + v235 + 1);
              v53.i8[0] = *((unsigned char *)&v529 + v235 + 1);
              v53.i8[4] = *((unsigned char *)&v528 + v235 + 1);
              v53.i8[8] = *((unsigned char *)&v527 + v235 + 1);
              v54.i8[0] = *((unsigned char *)&v529 + v235 + 2);
              v53.i8[12] = *((unsigned char *)&v526 + v235 + 1);
              v54.i8[4] = *((unsigned char *)&v528 + v235 + 2);
              v54.i8[8] = *((unsigned char *)&v527 + v235 + 2);
              v52.i8[12] = buf[v235 + 1];
              v55.i8[0] = *((unsigned char *)&v525 + v235 + 2);
              v55.i8[4] = *((unsigned char *)&v524 + v235 + 2);
              v54.i8[12] = *((unsigned char *)&v526 + v235 + 2);
              v55.i8[8] = *((unsigned char *)&v523 + v235 + 2);
              v55.i8[12] = buf[v235 + 2];
              uint32x4_t v239 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v224), (uint32x4_t)v50, v223), (uint32x4_t)v54, v225);
              uint32x4_t v240 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v224), (uint32x4_t)v51, v223), (uint32x4_t)v55, v225);
              uint32x4_t v241 = vabaq_u32(vabaq_u32(vabdq_u32(v53, (uint32x4_t)v49), (uint32x4_t)v50, v226), (uint32x4_t)v54, v227);
              uint32x4_t v242 = vabaq_u32(vabaq_u32(vabdq_u32(v52, (uint32x4_t)v49), (uint32x4_t)v51, v226), (uint32x4_t)v55, v227);
              uint32x4_t v243 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v229), (uint32x4_t)v50, v228), (uint32x4_t)v54, v230);
              uint32x4_t v244 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v229), (uint32x4_t)v51, v228), (uint32x4_t)v55, v230);
              uint32x4_t v245 = vabaq_u32(vabaq_u32(vabdq_u32(v52, v232), (uint32x4_t)v51, v231), (uint32x4_t)v55, v233);
              uint32x4_t v246 = vabaq_u32(vabaq_u32(vabdq_u32(v53, v232), (uint32x4_t)v50, v231), (uint32x4_t)v54, v233);
              int8x16_t v247 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v239, v246), (int16x8_t)vcgtq_u32(v240, v245));
              int8x16_t v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v239, v243), (int16x8_t)vcgtq_u32(v240, v244));
              int8x16_t v55 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v241, v246), (int16x8_t)vcgtq_u32(v242, v245));
              int8x16_t v248 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v243, v246), (int16x8_t)vcgtq_u32(v244, v245));
              int8x16_t v249 = vandq_s8(v247, v55);
              *(int8x8_t *)v247.i8 = vmovn_s16((int16x8_t)vandq_s8(v247, v248));
              int8x16_t v250 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v247.i8, *(int8x8_t *)v223.i8)), v62);
              int8x8_t v251 = vmovn_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v241, v243), (int16x8_t)vcgtq_u32(v242, v244)), v54), v249));
              uint32x4_t v252 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v251, *(int8x8_t *)v223.i8)), 0x1FuLL)), v63), vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v247.i8, *(int8x8_t *)v223.i8)), v62));
              uint32x4_t v253 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v251, *(int8x8_t *)v223.i8)), 0x1FuLL)), v63), v250);
              uint32x4_t v52 = (uint32x4_t)vaddq_s32(v238, v238);
              uint32x4_t v53 = (uint32x4_t)vaddq_s32(v237, v237);
              int8x16_t v51 = (int8x16_t)vshlq_u32(v253, v53);
              int8x16_t v236 = vorrq_s8((int8x16_t)vshlq_u32(v252, v52), v236);
              v50.i64[0] = 0x700000007;
              v50.i64[1] = 0x700000007;
              int8x16_t v234 = vorrq_s8(v51, v234);
              int32x4_t v237 = vaddq_s32(v237, v50);
              int32x4_t v238 = vaddq_s32(v238, v50);
              v235 -= 32;
            }
            while (v235 != -32);
            int8x16_t v254 = vorrq_s8(v234, v236);
            *(int8x8_t *)v254.i8 = vorr_s8(*(int8x8_t *)v254.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v254, v254, 8uLL));
            *(_DWORD *)(shared_owners + 4) = v254.i32[0] | v254.i32[1];
            shared_owners += 8;
          }
          int v160 = v517 + 4;
          v161 += 12 * (int)v43;
        }
        while (v517 + 4 < (int)v520);
      }
      uint64_t v64 = v506;
LABEL_478:
      uint64_t v350 = *(void *)(a1 + 8);
      if (v350)
      {
        v351 = (void *)(*(void *)(v350 + 16) + 16 * v64);
        atomic_fetch_add_explicit(&v504->__shared_owners_, 1uLL, memory_order_relaxed);
        v352 = (std::__shared_weak_count *)v351[1];
        void *v351 = v502;
        v351[1] = v504;
        if (v352)
        {
          if (!atomic_fetch_add(&v352->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
            std::__shared_weak_count::__release_weak(v352);
          }
        }
      }
      unsigned int v17 = v496;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
        std::__shared_weak_count::__release_weak(v504);
      }
      uint64_t v42 = v64 + 1;
      unsigned int v16 = v495;
      if (v42 == v494)
      {
        *(_DWORD *)(a1 + 16) = 13;
        *(_DWORD *)(*(void *)(a1 + 8) + 8) = 22;
        if (v492 && !atomic_fetch_add(&v492->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
          std::__shared_weak_count::__release_weak(v492);
        }
        return;
      }
    }
    unint64_t v58 = *(void *)(v493 + 8);
    int v59 = 1;
    char v60 = 1;
    unsigned int v61 = 1;
    switch(*(_DWORD *)(v57 + 8))
    {
      case 0:
      case 0x16:
      case 0x17:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
        goto LABEL_94;
      case 3:
      case 4:
      case 6:
      case 0x13:
      case 0x18:
      case 0x1B:
      case 0x2A:
      case 0x2B:
        unsigned int v61 = 2;
        goto LABEL_487;
      case 5:
      case 7:
      case 8:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x14:
      case 0x1A:
        unsigned int v61 = 4;
        goto LABEL_487;
      case 9:
      case 0x10:
      case 0x11:
        int v59 = 0;
        unsigned int v61 = 8;
        goto LABEL_487;
      case 0xA:
      case 0xB:
        unsigned int v61 = 3;
        goto LABEL_487;
      case 0x12:
      case 0x15:
        int v59 = 0;
        char v60 = 0;
        unsigned int v61 = 16;
        goto LABEL_487;
      default:
LABEL_487:
        if ((int)v520 < 1 || (int)v43 < 1) {
          goto LABEL_94;
        }
        uint64_t v353 = v61;
        uint64_t v354 = 4 * v61 * v43;
        int v355 = 2 * v61;
        uint64_t v356 = 2 * v61 * v43;
        int v357 = (2 * v43) | 1;
        uint64_t v358 = v61 * v357;
        if (v59)
        {
          int v359 = 0;
          uint64_t v360 = 0;
          v361 = *(unsigned char **)(v493 + 8);
          do
          {
            uint64_t v362 = 0;
            int v363 = v359;
            signed int v364 = v61;
            int v365 = v356;
            int v366 = v358;
            int v367 = v358;
            v368 = v361;
            do
            {
              v369 = (unsigned __int8 *)(v58 + v367);
              v370 = (unsigned __int8 *)(v58 + (int)v356);
              v371 = (unsigned __int8 *)(v58 + v364);
              v372 = v368;
              uint64_t v373 = v353;
              v374 = (unsigned __int8 *)(v58 + v363);
              do
              {
                int v376 = *v374++;
                int v375 = v376;
                int v377 = *v371++;
                int v378 = v377 + v375;
                int v380 = *v370++;
                int v379 = v380;
                int v381 = *v369++;
                *v372++ = (v378 + v379 + v381) >> 2;
                --v373;
              }
              while (v373);
              ++v362;
              v368 += v353;
              v367 += v355;
              LODWORD(v356) = v356 + v355;
              v364 += v355;
              v363 += v355;
            }
            while (v362 != v43);
            ++v360;
            v361 += v353 * (unint64_t)v43;
            LODWORD(v358) = v366 + v354;
            LODWORD(v356) = v365 + v354;
            v61 += v354;
            v359 += v354;
          }
          while (v360 != v520);
          goto LABEL_94;
        }
        int v382 = 0;
        uint64_t v383 = 0;
        unint64_t __dst = v43 * (unint64_t)v61;
        uint64_t v501 = v61 * v357;
        int v384 = 2 * v61;
        uint64_t v385 = v61 & 0x18;
        int64x2_t v386 = vdupq_n_s64(v58);
        int v387 = v61 + v61 * 2 * v43;
        unsigned int v498 = 4 * v61 * v43;
        int v388 = v355 * v43;
        v389 = *(int8x16_t **)(v493 + 8);
        break;
    }
LABEL_499:
    uint64_t v390 = 0;
    v391.i64[0] = v383 * v354 + v356;
    v391.i64[1] = v383 * v354 + v358;
    v392.i64[0] = v383 * v354 + v353;
    v392.i64[1] = v383 * v354;
    int v514 = v382;
    unsigned int v519 = v61;
    signed int v393 = v61;
    int v510 = v388;
    int v394 = v388;
    int v512 = v387;
    v508 = v389;
    while (1)
    {
      unint64_t v395 = v58 + v387;
      unint64_t v396 = v58 + v394;
      unint64_t v397 = v58 + v393;
      unint64_t v398 = v58 + v382;
      int64x2_t v399 = (int64x2_t)vdupq_n_s32(v384 * (int)v390);
      int64x2_t v400 = vsraq_n_s64(v386, vshlq_n_s64(vaddq_s64(v391, v399), 0x20uLL), 0x20uLL);
      int64x2_t v401 = vsraq_n_s64(v386, vshlq_n_s64(vaddq_s64(v392, v399), 0x20uLL), 0x20uLL);
      int64x2_t v402 = vdupq_n_s64(v58 + __dst * v383 + v390 * v353);
      uint64x2_t v403 = (uint64x2_t)vsubq_s64(v402, v401);
      uint64x2_t v404 = (uint64x2_t)vsubq_s64(v402, v400);
      uint64x2_t v405 = (uint64x2_t)vdupq_n_s64(0x10uLL);
      int16x8_t v49 = (int16x8_t)vcgtq_u64(v405, v403);
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)v49, (int32x4_t)vcgtq_u64(v405, v404)))))
      {
        uint64_t v406 = 0;
      }
      else
      {
        if (v60)
        {
          uint64_t v407 = 0;
          do
          {
LABEL_511:
            v49.i64[0] = *(void *)(v395 + v407);
            *(int8x8_t *)&v389->i8[v407] = vshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)(v397 + v407), *(uint8x8_t *)(v398 + v407)), *(uint8x8_t *)(v396 + v407)), *(uint8x8_t *)v49.i8), 2uLL);
            v407 += 8;
          }
          while (v385 != v407);
          uint64_t v406 = v353 & 0x18;
          if (v385 == v353) {
            goto LABEL_500;
          }
          goto LABEL_503;
        }
        v408 = (uint8x16_t *)(v58 + v382);
        v409 = (uint8x16_t *)(v58 + v393);
        v410 = (uint8x16_t *)(v58 + v394);
        v411 = (uint8x16_t *)(v58 + v387);
        v412 = v389;
        uint64_t v413 = v353 & 0x10;
        do
        {
          uint8x16_t v414 = *v408++;
          uint8x16_t v415 = v414;
          uint8x16_t v416 = *v409++;
          uint8x8_t v417 = *(uint8x8_t *)v416.i8;
          uint16x8_t v418 = vaddl_high_u8(v416, v415);
          uint8x16_t v419 = *v410++;
          uint16x8_t v420 = vaddw_u8(vaddl_u8(v417, *(uint8x8_t *)v415.i8), *(uint8x8_t *)v419.i8);
          uint16x8_t v421 = vaddw_high_u8(v418, v419);
          uint8x16_t v422 = *v411++;
          int16x8_t v49 = (int16x8_t)vaddw_high_u8(v421, v422);
          *v412++ = vshrn_high_n_s16(vshrn_n_s16((int16x8_t)vaddw_u8(v420, *(uint8x8_t *)v422.i8), 2uLL), v49, 2uLL);
          v413 -= 16;
        }
        while (v413);
        if ((v353 & 0x10) == v353) {
          goto LABEL_500;
        }
        uint64_t v407 = v353 & 0x10;
        uint64_t v406 = v407;
        if ((v353 & 8) != 0) {
          goto LABEL_511;
        }
      }
      do
      {
LABEL_503:
        v389->i8[v406] = (*(unsigned __int8 *)(v397 + v406)
                        + *(unsigned __int8 *)(v398 + v406)
                        + *(unsigned __int8 *)(v396 + v406)
                        + *(unsigned __int8 *)(v395 + v406)) >> 2;
        ++v406;
      }
      while (v353 != v406);
LABEL_500:
      ++v390;
      v389 = (int8x16_t *)((char *)v389 + v353);
      v387 += v355;
      v394 += v355;
      v393 += v355;
      v382 += v355;
      if (v390 == v43)
      {
        ++v383;
        v389 = (int8x16_t *)((char *)v508 + v353 * (unint64_t)v43);
        int v387 = v512 + v498;
        int v388 = v510 + v498;
        unsigned int v61 = v519 + v498;
        int v382 = v514 + v498;
        uint64_t v356 = (v355 * v43);
        uint64_t v354 = v498;
        uint64_t v358 = v501;
        if (v383 == v520) {
          goto LABEL_94;
        }
        goto LABEL_499;
      }
    }
  }
  if (a2 != 14) {
    return;
  }
  if (*(_DWORD *)(a1 + 16) == 14)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      unsigned int v8 = *(_DWORD *)v7;
      unsigned int v9 = *(_DWORD *)(v7 + 4);
    }
    else
    {
      unsigned int v8 = 0;
      unsigned int v9 = 0;
    }
    if (v8 <= v9) {
      unsigned int v29 = v9;
    }
    else {
      unsigned int v29 = v8;
    }
    unsigned int v30 = 1;
    if (v29 >= 2)
    {
      do
      {
        ++v30;
        BOOL v22 = v29 > 3;
        v29 >>= 1;
      }
      while (v22);
    }
    if (v7)
    {
      uint64_t v31 = *(void *)(v7 + 16);
      uint64_t v32 = *(void *)(v7 + 24);
      unint64_t v33 = (v32 - v31) >> 4;
      unint64_t v34 = v30 - v33;
      if (v30 <= v33)
      {
        if (v30 < v33)
        {
          unsigned int v39 = v9;
          for (uint64_t n = v31 + 16 * v30; v32 != n; v32 -= 16)
          {
            uint64_t v41 = *(std::__shared_weak_count **)(v32 - 8);
            if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v41->__on_zero_shared)(v41, v34);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          *(void *)(v7 + 24) = n;
          uint64_t v2 = a1;
          unsigned int v9 = v39;
        }
      }
      else
      {
        std::vector<std::shared_ptr<ggl::Data>>::__append(v7 + 16, v34);
      }
    }
    if (v30 < 2) {
      return;
    }
    uint64_t v511 = v30;
    int8x16_t v507 = (int8x16_t)vdupq_n_s32(0x1F80u);
    int8x16_t v509 = (int8x16_t)vdupq_n_s32(0x7E0u);
    int8x16_t v505 = (int8x16_t)vdupq_n_s32(0x3E000u);
    uint64_t v423 = 1;
    unsigned int v515 = v8;
    unsigned int v513 = v9;
LABEL_525:
    if (v8 >> (v423 - 1) <= 1) {
      int v424 = 1;
    }
    else {
      int v424 = v8 >> (v423 - 1);
    }
    if (v8 >> v423 <= 1) {
      uint64_t v425 = 1;
    }
    else {
      uint64_t v425 = v8 >> v423;
    }
    uint64_t v521 = v423;
    uint64_t v426 = v2;
    if (v9 >> v423 <= 1) {
      uint64_t v427 = 1;
    }
    else {
      uint64_t v427 = v9 >> v423;
    }
    v428 = (uint64_t *)(*(void *)(*(void *)(v426 + 8) + 16) + 16 * (v423 - 1));
    uint64_t v429 = *v428;
    v430 = (std::__shared_weak_count *)v428[1];
    if (v430)
    {
      atomic_fetch_add_explicit(&v430->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v431 = *(void *)(v429 + 8);
      if (!atomic_fetch_add(&v430->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
        std::__shared_weak_count::__release_weak(v430);
      }
    }
    else
    {
      uint64_t v431 = *(void *)(v429 + 8);
    }
    v432 = (std::__shared_weak_count *)operator new(0x30uLL);
    v432->__shared_owners_ = 0;
    v432->__shared_weak_owners_ = 0;
    v432->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
    v433 = ggl::Data::Data((ggl::Data *)&v432[1], (2 * v427 * v425));
    unsigned int v434 = 0;
    unsigned int v435 = 0;
    uint64_t v436 = 0;
    uint64_t v437 = v432[1].__shared_owners_;
    unint64_t v438 = v425 - 1;
    int v439 = 2 * v424;
    uint64_t v440 = v431 + 4 * v425;
    uint64_t v441 = v440 - 2;
    unsigned int v442 = 2 * (v425 - 1);
    v443.i64[0] = 0xF8000000F800;
    v443.i64[1] = 0xF8000000F800;
    v444.i64[0] = 0x1F0000001FLL;
    v444.i64[1] = 0x1F0000001FLL;
    while (1)
    {
      if (v425 > 0xF)
      {
        uint64_t v445 = 0;
        int v453 = v439 * v436;
        BOOL v454 = __CFADD__(v425 * v436, v438);
        BOOL v455 = __CFADD__(v453, v442);
        BOOL v456 = __CFADD__(v424 + v439 * v436, v442);
        if (!__CFADD__(v424 + 1 + v439 * v436, v442)
          && !v456
          && (v453 ^ 0xFFFFFFFE) >= v442
          && !v454
          && !v455
          && !(v438 >> 31))
        {
          uint64_t v445 = 0;
          uint64_t v457 = 2 * (v425 * v436);
          unint64_t v458 = v437 + v457;
          unint64_t v459 = v437 + 2 * v425 + v457;
          uint64_t v460 = 2 * (v424 + 1 + v439 * v436);
          unint64_t v461 = v431 + v460;
          unint64_t v462 = v441 + v460;
          uint64_t v463 = 2 * (v424 + v439 * v436);
          unint64_t v464 = v431 + v463;
          uint64_t v465 = 2 * (v439 * v436);
          BOOL v468 = v458 >= v441 + v463;
          unint64_t v466 = v431 + v465;
          unint64_t v467 = v440 + v465;
          BOOL v468 = v468 || v464 >= v459;
          BOOL v469 = !v468;
          BOOL v470 = v458 >= v467 || v466 >= v459;
          BOOL v471 = !v470;
          if ((v461 >= v459 || v458 >= v462) && !v469 && !v471)
          {
            unsigned int v473 = v434;
            unsigned int v474 = v435;
            uint64_t v475 = v425 & 0xFFFFFFF8;
            do
            {
              v476 = (const __int16 *)(v431 + 2 * v473);
              int16x8x2_t v540 = vld2q_s16(v476);
              v477.i16[0] = *(_WORD *)(v431 + 2 * (v424 + v473));
              v477.i16[1] = *(_WORD *)(v431 + 2 * (v424 + v473 + 2));
              v478.i16[0] = *(_WORD *)(v431 + 2 * (v424 + v473 + 8));
              v477.i16[2] = *(_WORD *)(v431 + 2 * (v424 + v473 + 4));
              v478.i16[1] = *(_WORD *)(v431 + 2 * (v424 + v473 + 10));
              v478.i16[2] = *(_WORD *)(v431 + 2 * (v424 + v473 + 12));
              v477.i16[3] = *(_WORD *)(v431 + 2 * (v424 + v473 + 6));
              v478.i16[3] = *(_WORD *)(v431 + 2 * (v424 + v473 + 14));
              int8x16_t v479 = (int8x16_t)vmovl_high_u16((uint16x8_t)v540.val[0]);
              int8x16_t v480 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v540.val[0].i8);
              v481.i16[0] = *(_WORD *)(v431 + 2 * (v424 + v473 + 9));
              int8x16_t v482 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v540.val[1].i8);
              v481.i16[1] = *(_WORD *)(v431 + 2 * (v424 + v473 + 11));
              v481.i16[2] = *(_WORD *)(v431 + 2 * (v424 + v473 + 13));
              int8x16_t v483 = (int8x16_t)vmovl_high_u16((uint16x8_t)v540.val[1]);
              v481.i16[3] = *(_WORD *)(v431 + 2 * (v424 + v473 + 15));
              v484.i16[0] = *(_WORD *)(v431 + 2 * (v424 + v473 + 1));
              int8x16_t v485 = (int8x16_t)vmovl_u16(v477);
              v484.i16[1] = *(_WORD *)(v431 + 2 * (v424 + v473 + 3));
              v484.i16[2] = *(_WORD *)(v431 + 2 * (v424 + v473 + 5));
              int8x16_t v486 = (int8x16_t)vmovl_u16(v478);
              int8x16_t v487 = (int8x16_t)vmovl_u16(v481);
              v484.i16[3] = *(_WORD *)(v431 + 2 * (v424 + v473 + 7));
              int8x16_t v488 = (int8x16_t)vmovl_u16(v484);
              *(int16x8_t *)(v437 + 2 * v474) = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v482, v444), (int32x4_t)vandq_s8(v480, v444)), (int32x4_t)vandq_s8(v485, v444)), (int32x4_t)vandq_s8(v488, v444)), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v482, v509), (int32x4_t)vandq_s8(v480, v509)), (int32x4_t)vandq_s8(v485, v509)), (int32x4_t)vandq_s8(v488, v509)), v507)),
                                                                   vandq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vandq_s8(v480, v443), *(uint16x4_t *)v540.val[1].i8), (int32x4_t)vandq_s8(v485, v443)), (int32x4_t)vandq_s8(v488, v443)), v505)), 2uLL), (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v483, v444), (int32x4_t)vandq_s8(v479, v444)), (int32x4_t)vandq_s8(v486, v444)), (int32x4_t)vandq_s8(v487, v444)), vandq_s8(
                                                                     (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v483, v509), (int32x4_t)vandq_s8(v479, v509)), (int32x4_t)vandq_s8(v486, v509)), (int32x4_t)vandq_s8(v487, v509)), v507)), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vandq_s8(v479, v443), (uint16x8_t)v540.val[1]), (int32x4_t)vandq_s8(v486, v443)), (int32x4_t)vandq_s8(v487, v443)), v505)), 2uLL);
              v474 += 8;
              v473 += 16;
              v475 -= 8;
            }
            while (v475);
            uint64_t v445 = v425 & 0xFFFFFFF8;
            if (v445 == v425) {
              goto LABEL_543;
            }
          }
        }
      }
      else
      {
        uint64_t v445 = 0;
      }
      uint64_t v446 = v425 - v445;
      unsigned int v447 = v435 + v445;
      unsigned int v448 = v434 + 2 * v445;
      do
      {
        __int16 v449 = *(_WORD *)(v431 + 2 * v448);
        int v450 = *(unsigned __int16 *)(v431 + 2 * (v448 + 1));
        __int16 v451 = *(_WORD *)(v431 + 2 * (v424 + v448));
        __int16 v452 = *(_WORD *)(v431 + 2 * (v424 + v448 + 1));
        *(_WORD *)(v437 + 2 * v447++) = (((v450 & 0x1F) + (v449 & 0x1F) + (v451 & 0x1F) + (v452 & 0x1F)) | ((v449 & 0xF800) + v450 + (v451 & 0xF800) + (v452 & 0xF800)) & 0x3E000 | ((v450 & 0x7E0) + (v449 & 0x7E0) + (v451 & 0x7E0) + (v452 & 0x7E0)) & 0x1F80u) >> 2;
        v448 += 2;
        --v446;
      }
      while (v446);
LABEL_543:
      ++v436;
      v435 += v425;
      v434 += v439;
      if (v436 == v427)
      {
        uint64_t v2 = a1;
        uint64_t v489 = *(void *)(a1 + 8);
        if (v489)
        {
          v490 = (ggl::Data **)(*(void *)(v489 + 16) + 16 * v521);
          atomic_fetch_add_explicit(&v432->__shared_owners_, 1uLL, memory_order_relaxed);
          v491 = (std::__shared_weak_count *)v490[1];
          *v490 = v433;
          v490[1] = (ggl::Data *)v432;
          if (v491)
          {
            if (!atomic_fetch_add(&v491->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
              std::__shared_weak_count::__release_weak(v491);
            }
          }
        }
        unsigned int v8 = v515;
        if (!atomic_fetch_add(&v432->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
          std::__shared_weak_count::__release_weak(v432);
        }
        uint64_t v423 = v521 + 1;
        unsigned int v9 = v513;
        if (v521 + 1 == v511) {
          return;
        }
        goto LABEL_525;
      }
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  int v18 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    unsigned int v20 = *(_DWORD *)(v2 + 16);
    *(_DWORD *)buf = 67109120;
    unsigned int v523 = v20;
    goto LABEL_57;
  }
}

void ggl::Glyph3d::DefaultPipelineState::~DefaultPipelineState(ggl::Glyph3d::DefaultPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Glyph3d::DefaultPipelineSetup::textureIsEnabled(ggl::Glyph3d::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::Glyph3d::DefaultPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::Glyph3d::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::Glyph3d::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Glyph3d::LowPrecisionPipelineState::~LowPrecisionPipelineState(ggl::Glyph3d::LowPrecisionPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Glyph3d::LowPrecisionPipelineSetup::textureIsEnabled(ggl::Glyph3d::LowPrecisionPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::Glyph3d::LowPrecisionPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::LowPrecisionPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::Glyph3d::LowPrecisionPipelineSetup::~LowPrecisionPipelineSetup(ggl::Glyph3d::LowPrecisionPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Glyph3d::LowPrecisionHaloPipelineState::~LowPrecisionHaloPipelineState(ggl::Glyph3d::LowPrecisionHaloPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Glyph3d::LowPrecisionHaloPipelineSetup::textureIsEnabled(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::Glyph3d::LowPrecisionHaloPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::Glyph3d::LowPrecisionHaloPipelineSetup::~LowPrecisionHaloPipelineSetup(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Glyph3d::RaymarchPipelineState::~RaymarchPipelineState(ggl::Glyph3d::RaymarchPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Glyph3d::RaymarchPipelineSetup::textureIsEnabled(ggl::Glyph3d::RaymarchPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::Glyph3d::RaymarchPipelineSetup::constantDataIsEnabled(ggl::Glyph3d::RaymarchPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::Glyph3d::RaymarchPipelineSetup::~RaymarchPipelineSetup(ggl::Glyph3d::RaymarchPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::DaVinciTrafficLayerDataSource::useOptionalResources(md::DaVinciTrafficLayerDataSource *this)
{
  return 0;
}

uint64_t md::DaVinciTrafficLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, unsigned __int16 **a4)
{
  BOOL v4 = *a2;
  if (*(unsigned __int8 *)(*((void *)*a2 + 2) + 8) < 7u) {
    return 0;
  }
  uint64_t v7 = *a4;
  unsigned int v8 = a4[1];
  if (*a4 != v8)
  {
    while (*v7 != 16)
    {
      v7 += 24;
      if (v7 == v8) {
        goto LABEL_7;
      }
    }
  }
  if (v7 != v8) {
    return 0;
  }
LABEL_7:
  unsigned int v9 = (_WORD *)*((void *)v4 + 15);
  unsigned int v10 = (_WORD *)*((void *)v4 + 16);
  if (v9 != v10)
  {
    int v11 = v9;
    while (*v11 != 16)
    {
      v11 += 24;
      if (v11 == v10) {
        goto LABEL_17;
      }
    }
    if (v11 != v10)
    {
      while (*v9 != 16)
      {
        v9 += 24;
        if (v9 == v10)
        {
          unsigned int v9 = v10;
          break;
        }
      }
      if (*((void *)v9 + 4)) {
        return 0;
      }
    }
  }
LABEL_17:
  uint64_t v12 = *(void *)(a1 + 24);
  if (!v12) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 24))(&v59);
  uint64_t v13 = (_BYTE)v59 != 0;
  if (!(_BYTE)v59) {
    return v13;
  }
  unsigned int v14 = HIDWORD(v59);
  uint64_t v15 = *a4;
  unsigned int v16 = a4[1];
  if (*a4 != v16)
  {
    while (*v15 != *(unsigned __int16 *)(a1 + 788))
    {
      v15 += 24;
      if (v15 == v16) {
        goto LABEL_30;
      }
    }
  }
  if (v15 == v16 || *((void *)v15 + 4) != 1)
  {
LABEL_30:
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v18 = *((void *)v15 + 3);
    uint64_t v19 = *(void *)(v18 + 112);
    unsigned int v20 = *(std::__shared_weak_count **)(v18 + 120);
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v57 = v19;
      unint64_t v58 = v20;
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      goto LABEL_32;
    }
  }
  uint64_t v57 = v19;
  unint64_t v58 = 0;
LABEL_32:
  unint64_t v21 = *(int32x2_t **)(v57 + 8);
  __int32 v22 = v21[1].i32[0];
  v55[0] = v21[1].i32[1];
  v55[1] = v22;
  int32x2_t v56 = vrev64_s32(*v21);
  char v41 = **a2;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 32))(&v44);
  unint64_t v23 = HIDWORD(v44);
  __p = 0;
  uint32x4_t v53 = 0;
  uint64_t v54 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 32))(&v44);
  int v24 = 0;
  if (v23)
  {
    unint64_t v25 = HIDWORD(v44);
    if (HIDWORD(v44))
    {
      if (v23 >= HIDWORD(v44))
      {
        int v24 = 0;
      }
      else
      {
        int v24 = 0;
        do
        {
          ++v24;
          v23 *= 2;
        }
        while (v23 < HIDWORD(v44));
      }
      while (v23 > v25)
      {
        --v24;
        v25 *= 2;
      }
    }
  }
  uint64_t v40 = (uint64_t)a4;
  if (v24 + v22 >= v14) {
    int v26 = -v24;
  }
  else {
    int v26 = v22 - v14;
  }
  md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v26, 16, *(void *)(a1 + 24), v55, 0, (unint64_t *)&__p);
  unsigned int v28 = (unsigned __int8 *)__p;
  unint64_t v27 = v53;
  if (__p != v53)
  {
    do
    {
      unsigned int v29 = *a2;
      uint64_t v30 = *((void *)*a2 + 14);
      uint64_t v31 = *(void *)(v28 + 4);
      int v43 = v31;
      int v32 = v28[1];
      int v33 = *v28;
      LOBYTE(v44) = v41;
      WORD1(v44) = 16;
      HIDWORD(v44) = 2147483646;
      unint64_t v45 = v49;
      unint64_t v46 = v49;
      uint64_t v47 = v49;
      uint64_t v48 = 32;
      unint64_t v50 = 0;
      int v60 = HIDWORD(v31);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v49, (char *)&v60, v61);
      int v60 = v43;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v46, (char *)&v60, v61);
      int v60 = v32;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v46, (char *)&v60, v61);
      int v60 = v33;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v46, (char *)&v60, v61);
      unint64_t v34 = (unsigned __int8 *)v45;
      unint64_t v35 = v46 - (unsigned char *)v45;
      if (v46 == v45)
      {
        unint64_t v36 = 0;
      }
      else
      {
        unint64_t v36 = 0;
        if (v35 <= 1) {
          unint64_t v35 = 1;
        }
        do
        {
          unsigned int v37 = *v34++;
          v36 ^= (v36 << 6) + (v36 >> 2) - 0x61C8864680B583EBLL + v37;
          --v35;
        }
        while (v35);
      }
      unint64_t v50 = v36;
      uint64_t v51 = v30;
      gdc::LayerDataRequest::request(v29, (uint64_t)&v44, 0);
      if (v45 != v47) {
        free(v45);
      }
      v28 += 24;
    }
    while (v28 != v27);
  }
  uint64_t v38 = *(void *)(a1 + 792);
  if (v38) {
    md::ElevationRequestUpdater::updateRequest(v38, a2, v40);
  }
  uint64_t v13 = v13;
  if (__p)
  {
    uint32x4_t v53 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
  unsigned int v39 = v58;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  return v13;
}

void sub_1A1DC3968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v31 - 120);
  _Unwind_Resume(a1);
}

void md::DaVinciTrafficLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v310 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (unsigned __int16 *)*a3;
  unsigned int v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 788))
    {
      v8 += 24;
      if (v8 == v9) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == v9 || *((void *)v8 + 4) != 1)
  {
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = *((void *)v8 + 3);
  uint64_t v11 = *(void *)(v10 + 112);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_11:
    uint64_t v306 = v11;
    __int16 v307 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v306 = v11;
  __int16 v307 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_12:
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  if (*a3 != v14)
  {
    while (*(_WORD *)v13 != 16)
    {
      v13 += 48;
      if (v13 == v14) {
        goto LABEL_29;
      }
    }
  }
  if (v13 == v14)
  {
LABEL_29:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_202;
  }
  uint64_t v171 = a1;
  uint64_t v15 = *(void *)(v13 + 24);
  unsigned int v16 = *(int8x8_t **)(v15 + 112);
  unsigned int v17 = *(std::__shared_weak_count **)(v15 + 120);
  unsigned int v304 = v16;
  unsigned int v305 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v306 || !v16)
  {
    *a4 = 0;
    a4[1] = 0;
    if (!v17) {
      goto LABEL_202;
    }
    goto LABEL_200;
  }
  uint64_t v170 = a2;
  unsigned int v301 = 0;
  unsigned int v302 = 0;
  uint64_t v303 = 0;
  for (uint64_t i = *(void **)(v13 + 24); i; uint64_t i = (void *)*i)
  {
    uint64_t v19 = (std::__shared_weak_count *)i[15];
    *(void *)&long long v234 = i[14];
    *((void *)&v234 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    md::DynamicTrafficTileList::addDynamicTile((uint64_t)&v301, &v234);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
  std::__sp_mut::lock(sp_mut);
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 768);
  uint64_t v299 = *(void *)(a1 + 760);
  int v300 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[*(id *)(a1 + 776) gglDevice] + 24))(&v298);
  __int32 v22 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  uint64_t v23 = ggl::BufferData::BufferData((uint64_t)&v22[1], qword_1E9552208, 2, 1, 6, 1);
  v22[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E258;
  uint64_t v296 = v23;
  unsigned int v297 = v22;
  int v24 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586E28;
  uint64_t v25 = ggl::BufferData::BufferData((uint64_t)&v24[1], qword_1E95523C8, 2, 1, 6, 1);
  v24[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E298;
  uint64_t v294 = v25;
  unsigned int v295 = v24;
  memset(v293, 0, sizeof(v293));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v293);
  uint64_t v290 = 0;
  unsigned int v289 = 0;
  uint64_t v291 = 0;
  uint64_t v27 = gss::Allocator::instance(v26);
  uint64_t v292 = v27;
  unsigned int v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 8, 4);
  unsigned int v29 = v28;
  if (v28)
  {
    *unsigned int v28 = 0xA00000005;
    uint64_t v30 = (uint64_t)(v28 + 1);
    uint64_t v291 = (uint64_t)(v28 + 1);
    unsigned int v289 = v28;
    uint64_t v290 = (uint64_t)(v28 + 1);
  }
  else
  {
    uint64_t v30 = 8;
    uint64_t v291 = 8;
    unsigned int v289 = 0;
    uint64_t v290 = 8;
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 16, 4);
  int v32 = (void *)(v31 + 8);
  if (v31) {
    *int v32 = 65543;
  }
  uint64_t v33 = v31 + 16;
  do
  {
    uint64_t v34 = *(void *)(v30 - 8);
    v30 -= 8;
    *--int v32 = v34;
  }
  while ((void *)v30 != v29);
  unint64_t v35 = v289;
  uint64_t v36 = v291;
  unsigned int v289 = v32;
  uint64_t v290 = v31 + 16;
  uint64_t v291 = v31 + 16;
  if (v35) {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v292 + 40))(v292, v35, v36 - (void)v35);
  }
  uint64_t v290 = v33;
  memset_pattern16(&__b, &unk_1A28FFCC0, 0x10uLL);
  unsigned int v37 = +[VKDebugSettings sharedSettings];
  uint64_t v38 = v170;
  char v39 = [v37 loadGreenTraffic];

  uint64_t v279 = 0;
  unsigned int v280 = &v279;
  uint64_t v281 = 0x4812000000;
  unsigned int v282 = __Block_byref_object_copy_;
  unsigned int v283 = __Block_byref_object_dispose_;
  uint8x8_t v284 = "";
  uint64_t v40 = *(int32x2_t **)(v170 + 16);
  __int32 v41 = v40[1].i32[0];
  char v285 = v40[1].i32[1];
  char v286 = v41;
  int32x2_t v287 = vrev64_s32(*v40);
  uint64_t v275 = 0;
  unsigned int v276 = &v275;
  uint64_t v277 = 0x2020000000;
  uint64_t v278 = 0;
  uint64_t v271 = 0;
  unsigned int v272 = &v271;
  uint64_t v273 = 0x2020000000;
  uint64_t v274 = 0;
  uint64_t v263 = 0;
  unsigned int v264 = &v263;
  uint64_t v265 = 0x5012000000;
  unsigned int v266 = __Block_byref_object_copy__7;
  unsigned int v267 = __Block_byref_object_dispose__8;
  uint64_t v268 = 0;
  char v269 = 0;
  char v270 = 0;
  uint64_t v255 = 0;
  uint64_t v256 = &v255;
  uint64_t v257 = 0x4012000000;
  v258 = __Block_byref_object_copy__9;
  v259 = __Block_byref_object_dispose__10;
  v260 = "";
  uint64_t v42 = *(atomic_uchar **)(v171 + 792);
  char v169 = v39;
  if (v42)
  {
    md::ElevationRequestUpdater::getDsmResource(&v261, v42, a3);
  }
  else
  {
    uint64_t v261 = 0;
    v262 = 0;
  }
  if (atomic_load_explicit((atomic_uchar *volatile)(v171 + 786), memory_order_acquire))
  {
    if ([*(id *)(v171 + 776) undulationModel])
    {
      int v43 = v280;
      uint64_t v44 = [*(id *)(v171 + 776) undulationModel];
      int v45 = 1 << *((unsigned char *)v43 + 49);
      double v46 = (double)*((int *)v43 + 14);
      double v47 = (double)(v45 + ~*((_DWORD *)v43 + 13));
      double v48 = 6.28318531 / (double)v45;
      long double v49 = exp(v48 * v47 + -3.14159265);
      long double v176 = atan(v49);
      long double v50 = fmod(v48 * v46, 6.28318531);
      long double v174 = fmod(v50 + 6.28318531, 6.28318531);
      long double v51 = exp((v47 + 1.0) * v48 + -3.14159265);
      long double v172 = atan(v51);
      long double v52 = fmod(v48 + v46 * v48, 6.28318531);
      long double v53 = fmod(v52 + 6.28318531, 6.28318531);
      uint64_t v54 = v264;
      v56.f64[0] = v174;
      v55.f64[0] = v176;
      v56.f64[1] = v53;
      int v57 = *((unsigned __int8 *)v264 + 72);
      v55.f64[1] = v172;
      v264[6] = v44;
      *(float32x4_t *)(v54 + 7) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64((float64x2_t)vdupq_n_s64(0xC066800000000000), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL), v56)), vmlaq_f64((float64x2_t)vdupq_n_s64(0xC056800000000000), (float64x2_t)vdupq_n_s64(0x405CA5DC1A63C1F8uLL), v55));
      uint64_t v38 = v170;
      if (!v57) {
        *((unsigned char *)v54 + 72) = 1;
      }
    }
  }
  v58.i64[0] = 0x500000005;
  v58.i64[1] = 0x500000005;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(__b, v58)))))
  {
    uint64_t v60 = *(void *)(v306 + 144);
    uint64_t v59 = *(std::__shared_weak_count **)(v306 + 152);
    uint64_t v253 = v60;
    int8x16_t v254 = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v61 = *(char **)(v60 + 2920);
    int8x16_t v62 = *(char **)(v60 + 2928);
    int v168 = a4;
    if (v61 == v62) {
      goto LABEL_63;
    }
    unint64_t v63 = v62 - v61 - 40;
    if (v63 > 0x27)
    {
      int v65 = 0;
      int v66 = 0;
      unint64_t v67 = v63 / 0x28 + 1;
      double v68 = v61 + 56;
      uint64_t v69 = v67 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v65 += (*(v68 - 5) - *(v68 - 6)) >> 5;
        v66 += (*v68 - *(v68 - 1)) >> 5;
        v68 += 10;
        v69 -= 2;
      }
      while (v69);
      unsigned int v64 = v66 + v65;
      if (v67 == (v67 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_61:
        if (v64)
        {
          unint64_t v70 = v64;
          int v71 = (char *)operator new(40 * v64);
          int8x16_t v72 = &v71[40 * v70];
LABEL_64:
          unint64_t v251 = 0;
          int8x16_t v250 = 0;
          uint64_t v252 = 0;
          std::vector<BOOL>::reserve((uint64_t)&v250, v70);
          int v73 = *(int **)(v60 + 2920);
          unsigned int v74 = *(int **)(v60 + 2928);
          unsigned int v173 = v74;
          double v75 = v71;
          while (v73 != v74)
          {
            unsigned int v76 = (int *)*((void *)v73 + 1);
            unsigned int v177 = (int *)*((void *)v73 + 2);
            for (unint64_t j = v73; v76 != v177; v76 += 8)
            {
              int v80 = *v73;
              int v81 = v73[1];
              int v83 = *v76;
              int v82 = v76[1];
              uint64_t v84 = *((void *)v76 + 1);
              int v85 = *((unsigned __int8 *)v76 + 24);
              int v87 = v76[4];
              int v86 = v76[5];
              if (*((unsigned char *)v76 + 27)) {
                int v88 = 3;
              }
              else {
                int v88 = 4;
              }
              if (v75 >= v72)
              {
                unint64_t v89 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v71) >> 3) + 1;
                if (v89 > 0x666666666666666) {
                  abort();
                }
                if (0x999999999999999ALL * ((v72 - v71) >> 3) > v89) {
                  unint64_t v89 = 0x999999999999999ALL * ((v72 - v71) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((v72 - v71) >> 3) >= 0x333333333333333) {
                  unint64_t v90 = 0x666666666666666;
                }
                else {
                  unint64_t v90 = v89;
                }
                if (v90)
                {
                  if (v90 > 0x666666666666666) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  uint8x8_t v91 = (char *)operator new(40 * v90);
                }
                else
                {
                  uint8x8_t v91 = 0;
                }
                unsigned int v92 = &v91[8 * ((v75 - v71) >> 3)];
                *(_DWORD *)unsigned int v92 = v80;
                *((_DWORD *)v92 + 1) = v81;
                *((_DWORD *)v92 + 2) = v83;
                *((_DWORD *)v92 + 3) = v82;
                *((void *)v92 + 2) = v84;
                *((_DWORD *)v92 + 6) = v85;
                *((_DWORD *)v92 + 7) = v87;
                *((_DWORD *)v92 + 8) = v86;
                *((_DWORD *)v92 + 9) = v88;
                if (v75 == v71)
                {
                  unsigned int v96 = &v91[8 * ((v75 - v71) >> 3)];
                }
                else
                {
                  unsigned int v93 = &v91[8 * ((v75 - v71) >> 3)];
                  do
                  {
                    long long v94 = *(_OWORD *)(v75 - 40);
                    long long v95 = *(_OWORD *)(v75 - 24);
                    unsigned int v96 = v93 - 40;
                    *((void *)v93 - 1) = *((void *)v75 - 1);
                    *(_OWORD *)(v93 - 24) = v95;
                    *(_OWORD *)(v93 - 40) = v94;
                    v75 -= 40;
                    v93 -= 40;
                  }
                  while (v75 != v71);
                }
                int8x16_t v72 = &v91[40 * v90];
                double v75 = v92 + 40;
                if (v71) {
                  operator delete(v71);
                }
                int v71 = v96;
                int v73 = j;
              }
              else
              {
                *(_DWORD *)double v75 = v80;
                *((_DWORD *)v75 + 1) = v81;
                *((_DWORD *)v75 + 2) = v83;
                *((_DWORD *)v75 + 3) = v82;
                *((void *)v75 + 2) = v84;
                *((_DWORD *)v75 + 6) = v85;
                *((_DWORD *)v75 + 7) = v87;
                *((_DWORD *)v75 + 8) = v86;
                *((_DWORD *)v75 + 9) = v88;
                v75 += 40;
              }
              int v97 = *((unsigned __int8 *)v76 + 25);
              unint64_t v98 = v251;
              if (v251 == v252 << 6)
              {
                if ((uint64_t)(v251 + 1) < 0) {
                  abort();
                }
                unint64_t v99 = v252 << 7;
                if (v252 << 7 <= (v251 & 0xFFFFFFFFFFFFFFC0) + 64) {
                  unint64_t v99 = (v251 & 0xFFFFFFFFFFFFFFC0) + 64;
                }
                if (v251 <= 0x3FFFFFFFFFFFFFFELL) {
                  unint64_t v100 = v99;
                }
                else {
                  unint64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
                }
                std::vector<BOOL>::reserve((uint64_t)&v250, v100);
                unint64_t v98 = v251;
                int v73 = j;
              }
              unint64_t v251 = v98 + 1;
              unint64_t v77 = v98 >> 6;
              uint64_t v78 = 1 << v98;
              if (v97) {
                uint64_t v79 = *((void *)v250 + v77) | v78;
              }
              else {
                uint64_t v79 = *((void *)v250 + v77) & ~v78;
              }
              *((void *)v250 + v77) = v79;
            }
            v73 += 10;
            unsigned int v74 = v173;
          }
          *(void *)&long long v234 = 0;
          *((void *)&v234 + 1) = &v234;
          uint64_t v235 = 0x11812000000;
          int8x16_t v236 = __Block_byref_object_copy__12;
          int32x4_t v237 = __Block_byref_object_dispose__13;
          int32x4_t v238 = "";
          memset(v239, 0, 96);
          v239[96] = 3;
          uint64_t v240 = 0;
          unint64_t v241 = 0xC120000000000000;
          uint64_t v242 = 0;
          unint64_t v243 = 0xFFFFFFF6FFFFFFFFLL;
          int v244 = -1054867456;
          long long v245 = 0u;
          long long v246 = 0u;
          uint64_t v247 = 0;
          unint64_t v248 = 0xFFFFFFFF00000000;
          __int16 v249 = 0;
          uint64_t v213 = 0;
          unsigned __int8 v214 = &v213;
          uint64_t v215 = 0x11812000000;
          unsigned int v216 = __Block_byref_object_copy__12;
          unsigned int v217 = __Block_byref_object_dispose__13;
          unsigned int v218 = "";
          memset(v219, 0, sizeof(v219));
          char v220 = 3;
          uint64_t v221 = 0;
          unint64_t v222 = 0xC120000000000000;
          uint64_t v223 = 0;
          unint64_t v224 = 0xFFFFFFF6FFFFFFFFLL;
          int v225 = -1054867456;
          long long v226 = 0u;
          long long v227 = 0u;
          uint64_t v228 = 0;
          unint64_t v229 = 0xFFFFFFFF00000000;
          __int16 v233 = 0;
          char v101 = *((unsigned char *)v280 + 49);
          double v102 = 1.0 / (double)(1 << v101);
          long double v103 = exp(v102 * 6.28318531 * ((double)((1 << v101) + ~*((_DWORD *)v280 + 13)) + 0.5) + -3.14159265);
          long double v104 = atan(v103) * 114.591559 + -90.0;
          long double v105 = cos(v104 * 0.034906585) * -559.82 + 111132.92;
          long double v106 = v105 + cos(v104 * 0.0698131701) * 1.175;
          long double v107 = v106 + cos(v104 * 0.104719755) * -0.0023;
          long double v108 = v104 * 0.00872664626;
          long double v109 = tan(v104 * 0.00872664626 + 0.78103484);
          double v110 = log(v109);
          long double v111 = tan(v108 + 0.789761487);
          double v112 = fabs((log(v111) - v110) * 0.159154943) / (v107 * v102);
          __powidf2();
          double v114 = v113 * 0.0000000249532021;
          uint64_t v115 = *((void *)&v234 + 1);
          *(double *)(*((void *)&v234 + 1) + 248) = v112;
          *(double *)(v115 + 256) = v112;
          *(double *)(v115 + 264) = v114;
          double v230 = v112;
          double v231 = v112;
          double v232 = v114;
          double v204 = 0.0;
          int v205 = &v204;
          uint64_t v206 = 0x5812000000;
          unsigned int v207 = __Block_byref_object_copy__16;
          long long v209 = 0u;
          long long v210 = 0u;
          unsigned int v208 = __Block_byref_object_dispose__17;
          uint64_t v211 = 0;
          int v212 = 1065353216;
          uint64_t v195 = 0;
          unsigned int v196 = &v195;
          uint64_t v197 = 0x5812000000;
          unsigned int v198 = __Block_byref_object_copy__16;
          long long v200 = 0u;
          long long v201 = 0u;
          unsigned int v199 = __Block_byref_object_dispose__17;
          uint64_t v202 = 0;
          int v203 = 1065353216;
          v188[0] = MEMORY[0x1E4F143A8];
          v188[1] = 3321888768;
          v188[2] = ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke;
          v188[3] = &unk_1EF52E918;
          uint8x8_t v189 = 0;
          unsigned int v190 = 0;
          unsigned int v191 = 0;
          uint64_t v192 = v292;
          __int16 v116 = v289;
          __int16 v117 = (void *)v290;
          uint64_t v118 = v290 - (void)v289;
          if ((void *)v290 != v289)
          {
            if (v118 < 0) {
              abort();
            }
            unsigned __int8 v119 = (void *)(*(uint64_t (**)(void))(*(void *)v292 + 16))();
            uint8x8_t v189 = v119;
            unsigned int v190 = v119;
            unsigned int v191 = (char *)&v119[v118 >> 3];
            do
            {
              if (v119) {
                *unsigned __int8 v119 = *v116;
              }
              ++v116;
              ++v119;
            }
            while (v116 != v117);
            unsigned int v190 = v119;
          }
          v188[4] = &v234;
          v188[5] = &v204;
          v188[6] = &v213;
          v188[7] = &v195;
          int32x4_t v194 = __b;
          v188[8] = &v263;
          v188[9] = &v255;
          uint64_t v38 = v170;
          uint64_t v193 = v170;
          a4 = v168;
          __int16 v120 = (void *)MEMORY[0x1A6239EB0](v188);
          md::buildTrafficMesh(v306, (uint64_t)&__b, v306, (uint64_t)v71, &v250, 0xCCCCCCCCCCCCCCCDLL * ((v75 - v71) >> 3), v304, v120, &v299, v169, 4 * (*(unsigned char *)(v171 + 785) == 0));
          uint64_t v121 = *((void *)&v234 + 1);
          unsigned int v122 = v205;
          long long v123 = *((_OWORD *)v264 + 4);
          v187[0] = *((_OWORD *)v264 + 3);
          v187[1] = v123;
          unsigned int v124 = (std::__shared_weak_count *)v256[7];
          v186[0] = v256[6];
          v186[1] = (uint64_t)v124;
          if (v124) {
            atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v125 = *(int32x2_t **)(v170 + 16);
          __int32 v126 = v125[1].i32[0];
          LOBYTE(v308) = v125[1].i32[1];
          BYTE1(v308) = v126;
          *(int32x2_t *)((char *)&v308 + 4) = vrev64_s32(*v125);
          md::TrafficAccum::flushToRibbonCollection(v121 + 48, (uint64_t)(v122 + 6), (uint64_t)v187, v186, (uint64_t)&v308);
          if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
          unsigned int v127 = v214;
          uint32x4_t v128 = v196;
          long long v129 = *((_OWORD *)v264 + 4);
          v185[0] = *((_OWORD *)v264 + 3);
          v185[1] = v129;
          uint32x4_t v130 = (std::__shared_weak_count *)v256[7];
          v184[0] = v256[6];
          v184[1] = (uint64_t)v130;
          if (v130) {
            atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint32x4_t v131 = *(int32x2_t **)(v170 + 16);
          __int32 v132 = v131[1].i32[0];
          LOBYTE(v308) = v131[1].i32[1];
          BYTE1(v308) = v132;
          *(int32x2_t *)((char *)&v308 + 4) = vrev64_s32(*v131);
          md::TrafficAccum::flushToRibbonCollection((uint64_t)(v127 + 6), (uint64_t)(v128 + 6), (uint64_t)v185, v184, (uint64_t)&v308);
          if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
          v180[0] = MEMORY[0x1E4F143A8];
          v180[1] = 3321888768;
          v180[2] = ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_19;
          v180[3] = &unk_1EF58DBC0;
          v180[4] = &v275;
          v180[5] = &v204;
          v180[9] = v171;
          v180[10] = v296;
          unsigned int v181 = v297;
          if (v297) {
            atomic_fetch_add_explicit(&v297->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = v294;
          uint8x8_t v183 = v295;
          if (v295) {
            atomic_fetch_add_explicit(&v295->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v180[6] = &v279;
          v180[7] = &v271;
          v180[8] = &v195;
          unsigned __int8 v309 = 0;
          *(void *)&long long v308 = &unk_1EF56BC58;
          *((void *)&v308 + 1) = MEMORY[0x1A6239EB0](v180);
          unsigned __int8 v309 = &v308;
          uint64_t v178 = 0;
          unsigned int v179 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t *))(*(void *)v298 + 16))(v298, &v308, &v178);
          uint32x4_t v133 = v179;
          if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
          if (v309 == &v308)
          {
            (*(void (**)(long long *))(v308 + 32))(&v308);
            uint32x4_t v134 = v183;
            if (!v183)
            {
LABEL_136:
              uint32x4_t v135 = v181;
              if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }

              if (v189)
              {
                unsigned int v190 = v189;
                (*(void (**)(uint64_t, void *, int64_t))(*(void *)v192 + 40))(v192, v189, v191 - (char *)v189);
              }
              _Block_object_dispose(&v195, 8);
              uint32x4_t v136 = (void *)*((void *)&v201 + 1);
              if (*((void *)&v201 + 1))
              {
                do
                {
                  uint32x4_t v137 = (void *)*v136;
                  std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v136 + 2));
                  operator delete(v136);
                  uint32x4_t v136 = v137;
                }
                while (v137);
              }
              uint32x4_t v138 = (void *)*((void *)&v200 + 1);
              *((void *)&v200 + 1) = 0;
              if (v138) {
                operator delete(v138);
              }
              _Block_object_dispose(&v204, 8);
              int32x4_t v139 = (void *)*((void *)&v210 + 1);
              if (*((void *)&v210 + 1))
              {
                do
                {
                  int32x4_t v140 = (void *)*v139;
                  std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v139 + 2));
                  operator delete(v139);
                  int32x4_t v139 = v140;
                }
                while (v140);
              }
              int8x16_t v141 = (void *)*((void *)&v209 + 1);
              *((void *)&v209 + 1) = 0;
              if (v141) {
                operator delete(v141);
              }
              _Block_object_dispose(&v213, 8);
              md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)v219);
              _Block_object_dispose(&v234, 8);
              md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)v239);
              if (v250) {
                operator delete(v250);
              }
              if (v71) {
                operator delete(v71);
              }
              uint64_t v142 = v254;
              if (v254 && !atomic_fetch_add(&v254->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v142);
              }
              goto LABEL_156;
            }
          }
          else
          {
            if (v309) {
              (*(void (**)(void))(*(void *)v309 + 40))();
            }
            uint32x4_t v134 = v183;
            if (!v183) {
              goto LABEL_136;
            }
          }
          if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
          goto LABEL_136;
        }
LABEL_63:
        unint64_t v70 = 0;
        int8x16_t v72 = 0;
        int v71 = 0;
        goto LABEL_64;
      }
      v61 += 40 * (v67 & 0xFFFFFFFFFFFFFFELL);
    }
    else
    {
      unsigned int v64 = 0;
    }
    do
    {
      v64 += (*((void *)v61 + 2) - *((void *)v61 + 1)) >> 5;
      v61 += 40;
    }
    while (v61 != v62);
    goto LABEL_61;
  }
LABEL_156:
  uint64_t v143 = v276[3];
  uint64_t v144 = v272[3];
  uint32x4_t v145 = (char *)operator new(0x350uLL);
  *((void *)v145 + 1) = 0;
  *((void *)v145 + 2) = 0;
  *(void *)uint32x4_t v145 = &unk_1EF5814B0;
  gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v234, (uint64_t)&v289);
  unsigned __int8 v214 = 0;
  uint64_t v213 = 0;
  uint32x4_t v146 = (gss::Allocator *)md::MapTileData::MapTileData((uint64_t)(v145 + 24), v38, (uint64_t)v293, &v213, 1);
  uint64_t v147 = v296;
  uint32x4_t v148 = v297;
  *((void *)v145 + 3) = &unk_1EF5413B0;
  *((void *)v145 + 82) = &unk_1EF5413F0;
  *((void *)v145 + 93) = v147;
  *((void *)v145 + 94) = v148;
  if (v148) {
    atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint32x4_t v149 = v295;
  *((void *)v145 + 95) = v294;
  *((void *)v145 + 96) = v149;
  if (v149) {
    atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v145 + 97) = v143;
  *((void *)v145 + 98) = v144;
  *((void *)v145 + 99) = 0;
  *((void *)v145 + 101) = 0;
  *((void *)v145 + 100) = 0;
  *((void *)v145 + 102) = gss::Allocator::instance(v146);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)v145 + 99, v234, *((void **)&v234 + 1), (uint64_t)(*((void *)&v234 + 1) - v234) >> 3);
  *((void *)v145 + 105) = 0;
  *(_OWORD *)(v145 + 824) = 0u;
  uint32x4_t v150 = v301;
  uint32x4_t v151 = v302;
  uint64_t v152 = (char *)v302 - (char *)v301;
  if (v302 != v301)
  {
    if (v152 < 0) {
      abort();
    }
    int8x16_t v153 = operator new((char *)v302 - (char *)v301);
    *((void *)v145 + 103) = v153;
    *((void *)v145 + 104) = v153;
    *((void *)v145 + 105) = &v153[2 * (v152 >> 4)];
    do
    {
      *int8x16_t v153 = *v150;
      uint64_t v154 = v150[1];
      v153[1] = v154;
      if (v154) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v154 + 8), 1uLL, memory_order_relaxed);
      }
      v153 += 2;
      v150 += 2;
    }
    while (v150 != v151);
    *((void *)v145 + 104) = v153;
  }
  float v155 = *((float *)v145 + 162);
  uint64_t v213 = 0;
  double v204 = 1.0 / v155;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)v145 + 192, (double *)&v213, &v204);
  if ((void)v234)
  {
    *((void *)&v234 + 1) = v234;
    (*(void (**)(__n128 (*)(uint64_t, uint64_t), void, void))(*(void *)v236 + 40))(v236, v234, v235 - v234);
  }
  *a4 = v145 + 24;
  a4[1] = v145;
  _Block_object_dispose(&v255, 8);
  int8x8_t v156 = v262;
  if (v262 && !atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
  }
  _Block_object_dispose(&v263, 8);
  _Block_object_dispose(&v271, 8);
  _Block_object_dispose(&v275, 8);
  _Block_object_dispose(&v279, 8);
  if (v289)
  {
    uint64_t v290 = (uint64_t)v289;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v292 + 40))(v292, v289, v291 - (void)v289);
  }
  if (v293[0]) {
    operator delete(v293[0]);
  }
  uint32x4_t v157 = v295;
  if (v295 && !atomic_fetch_add(&v295->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
    std::__shared_weak_count::__release_weak(v157);
  }
  uint32x4_t v158 = v297;
  if (v297 && !atomic_fetch_add(&v297->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
  }
  if (v298)
  {
    uint64_t v159 = (*(uint64_t (**)(uint64_t))(*(void *)v298 + 24))(v298);
    uint64_t v160 = v298;
    uint64_t v298 = 0;
    *(void *)&long long v234 = v160;
    (*(void (**)(uint64_t, long long *))(*(void *)v159 + 48))(v159, &v234);
    uint64_t v161 = v234;
    *(void *)&long long v234 = 0;
    if (v161) {
      (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
    }
    uint64_t v162 = v298;
    uint64_t v298 = 0;
    if (v162) {
      (*(void (**)(uint64_t))(*(void *)v162 + 8))(v162);
    }
  }
  uint64_t v163 = v300;
  if (v300 && !atomic_fetch_add(&v300->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
  }
  uint64_t v164 = (char *)v301;
  if (v301)
  {
    v165 = (char *)v302;
    if (v302 != v301)
    {
      do
      {
        int v166 = (std::__shared_weak_count *)*((void *)v165 - 1);
        if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
        v165 -= 16;
      }
      while (v165 != v164);
      uint64_t v164 = (char *)v301;
    }
    operator delete(v164);
  }
  unsigned int v17 = v305;
  if (v305)
  {
LABEL_200:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_202:
  uint64_t v167 = v307;
  if (v307)
  {
    if (!atomic_fetch_add(&v307->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
}

void sub_1A1DC53B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x4D8]);
  _Block_object_dispose(&STACK[0x4E8], 8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  _Block_object_dispose(&STACK[0x528], 8);
  _Block_object_dispose(&STACK[0x578], 8);
  _Block_object_dispose(&STACK[0x598], 8);
  _Block_object_dispose(&STACK[0x5B8], 8);
  unint64_t v14 = STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = v14;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)STACK[0x628] + 40))(STACK[0x628], v14, STACK[0x620] - v14);
  }
  if (STACK[0x630]) {
    operator delete((void *)STACK[0x630]);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x648]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x658]);
  ggl::Loader::~Loader((ggl::Loader *)&STACK[0x668]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v12 - 256);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v12 - 240));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v12 - 216);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v12 - 200);
  _Unwind_Resume(a1);
}

double __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  double result = *(double *)(a2 + 52);
  *(double *)(a1 + 52) = result;
  return result;
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

__n128 __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v2 = *(_OWORD *)(a2 + 144);
  long long v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  __n128 result = *(__n128 *)(a2 + 224);
  long long v5 = *(_OWORD *)(a2 + 240);
  long long v6 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v5;
  *(_OWORD *)(a1 + 256) = v6;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__16(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6, uint64_t *a7, int a8, float a9, float a10, char *a11, char *a12, uint64_t a13, int a14, unsigned __int8 a15, float *a16, char a17)
{
  if (vabds_f32(a10, a9) < 1.0e-10) {
    return;
  }
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)(*a7 + 240), (unsigned int **)(a1 + 80), v81);
  uint64_t v26 = *a7;
  long long v74 = 0uLL;
  uint64_t v27 = *(std::__shared_weak_count **)(v26 + 16);
  if (!v27)
  {
    unsigned int v28 = 0;
    goto LABEL_6;
  }
  unsigned int v28 = std::__shared_weak_count::lock(v27);
  *((void *)&v74 + 1) = v28;
  if (!v28)
  {
LABEL_6:
    uint64_t v29 = 0;
    goto LABEL_7;
  }
  uint64_t v29 = *(void *)(v26 + 8);
  *(void *)&long long v74 = v29;
LABEL_7:
  memset(v77, 0, sizeof(v77));
  char v78 = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v80, v29, (gss::FeatureAttributeSet *)v81, (gss::QueryOverrides *)v77);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  long long v30 = v80;
  long long v74 = v80;
  if (*((void *)&v80 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v77, v30, *((uint64_t *)&v30 + 1));
  if (!*((void *)&v30 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v31 = v79;
    if (!v79) {
      goto LABEL_71;
    }
LABEL_15:
    if (!md::trafficVisibleAtSpeed((uint64_t)v77, a8, v31)) {
      goto LABEL_71;
    }
    uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 8) + 48;
    uint64_t v71 = *(void *)(*(void *)(a1 + 40) + 8) + 48;
    uint64_t v33 = *(void *)(*(void *)v77 + 24);
    uint64_t v34 = *(float **)v33;
    if (*(void *)v33)
    {
      float v35 = *v34;
      BOOL v36 = *v34 == 1.0;
      if (*(unsigned char *)(v33 + 10))
      {
        if (v35 != 0.0 && v35 != 1.0)
        {
LABEL_28:
          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)v77 + 24), 0x1C3u, 0)) {
            goto LABEL_31;
          }
          unsigned int v38 = 1;
LABEL_30:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v33, 0x1C3u, v38))
          {
LABEL_46:
            float v48 = fminf(a9, a10);
            if ((a17 & 1) == 0
              && *(unsigned __int8 *)(v32 + 96) == a8
              && *(_DWORD *)(v32 + 100) == a5
              && *(unsigned __int8 *)(v32 + 224) == a15
              && *(_DWORD *)(v32 + 104) == a6)
            {
              uint64_t v49 = *(void *)(v32 + 120);
              if ((!v49 || *(unsigned __int8 *)(a2 + 153) == *(unsigned __int8 *)(v49 + 153))
                && (!*(unsigned char *)(v32 + 225) || *a7 == *(void *)(v32 + 144))
                && (void)v80 == *(void *)(v32 + 160))
              {
                uint64_t v62 = *(void *)(v32 + 8);
                if (*(void *)v32 == v62)
                {
LABEL_70:
                  float v60 = fmaxf(a9, a10);
                  *(void *)(v32 + 120) = a2;
                  *(_DWORD *)(v32 + 128) = a3;
                  *(_DWORD *)(v32 + 132) = a4;
                  *(float *)(v32 + 136) = v60;
                  md::TrafficAccum::addPoints((float32x2_t **)v32, a11, a12, a13, a14, a16, v48, v60, v39, v40);
                  goto LABEL_71;
                }
                if (v49 == a2 && *(_DWORD *)(v32 + 132) == (unint64_t)a4)
                {
                  float v63 = *(float *)(v32 + 136);
                  if (a6 < 0)
                  {
                    if (v63 >= v48)
                    {
                      float v64 = v63 - v48;
                      goto LABEL_87;
                    }
                  }
                  else if (v63 <= v48)
                  {
                    float v64 = v48 - v63;
LABEL_87:
                    if (v64 <= 1.0)
                    {
                      float v65 = ceilf(v48);
                      float v66 = floorf(v48);
                      if (a6 <= 0) {
                        float v65 = v66;
                      }
                      double v39 = vabds_f32(v65, v48);
                      uint64_t v67 = *(void *)(v32 + 176);
                      v40.i64[0] = 0x3F847AE147AE147BLL;
                      if (v39 <= 0.01)
                      {
                        float32x2_t v69 = *(float32x2_t *)(v67 + 8 * (int)v65);
                      }
                      else
                      {
                        double v68 = (float32x2_t *)(v67 + 8 * (int)v66);
                        double v39 = COERCE_DOUBLE(vsub_f32(v68[1], *v68));
                        float32x2_t v69 = vmla_n_f32(*v68, *(float32x2_t *)&v39, v48 - v66);
                      }
                      float32x2_t v70 = vsub_f32(*(float32x2_t *)(v62 - 8), v69);
                      if (vaddv_f32(vmul_f32(v70, v70)) < 0.0001) {
                        goto LABEL_70;
                      }
                    }
                  }
                }
              }
            }
            uint64_t v50 = *(void *)(a1 + 72);
            uint64_t v51 = *(void *)(*(void *)(a1 + 64) + 8);
            long long v52 = *(_OWORD *)(v51 + 64);
            v76[0] = *(_OWORD *)(v51 + 48);
            v76[1] = v52;
            uint64_t v53 = *(void *)(v50 + 8);
            uint64_t v54 = *(std::__shared_weak_count **)(v53 + 56);
            v75[0] = *(void *)(v53 + 48);
            v75[1] = (uint64_t)v54;
            if (v54) {
              atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            float64x2_t v55 = *(int32x2_t **)(*(void *)(a1 + 112) + 16);
            __int32 v56 = v55[1].i32[0];
            LOBYTE(v74) = v55[1].i32[1];
            BYTE1(v74) = v56;
            *(int32x2_t *)((char *)&v74 + 4) = vrev64_s32(*v55);
            md::TrafficAccum::flushToRibbonCollection(v32, v71, (uint64_t)v76, v75, (uint64_t)&v74);
            if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
            uint64_t v57 = *a7;
            int32x4_t v58 = (std::__shared_weak_count *)a7[1];
            if (v58) {
              atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v59 = (std::__shared_weak_count *)*((void *)&v80 + 1);
            long long v73 = v80;
            if (*((void *)&v80 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
              md::TrafficAccum::reset(v32, a2, a3, a8, a5, a6, v57, (uint64_t)v58, (uint64_t *)&v73, *(_DWORD *)(v32 + 196), a15);
              if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            else
            {
              md::TrafficAccum::reset(v32, a2, a3, a8, a5, a6, v57, (uint64_t)v58, (uint64_t *)&v73, *(_DWORD *)(v32 + 196), a15);
            }
            if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
            goto LABEL_70;
          }
LABEL_31:
          if (v34)
          {
            float v41 = *v34;
            BOOL v42 = *v34 == 1.0;
            if (*(unsigned char *)(v33 + 10))
            {
              if (v41 != 0.0 && v41 != 1.0) {
                goto LABEL_41;
              }
            }
          }
          else
          {
            BOOL v42 = 0;
          }
          unsigned int v44 = *(unsigned __int8 *)(v33 + v42 + 11);
          float v41 = 0.0;
          if (v44 != 2)
          {
            if (*(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v33, 0x1C3u, v44, 0)) {
              goto LABEL_46;
            }
            goto LABEL_45;
          }
LABEL_41:
          LOBYTE(v74) = 1;
          v83[0] = 1;
          uint64_t v45 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v33, 0x1C3u, 0, &v74);
          uint64_t v46 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v33, 0x1C3u, 1u, v83);
          if (v41 >= 1.0) {
            double v47 = (_DWORD *)v46;
          }
          else {
            double v47 = (_DWORD *)v45;
          }
          if (*v47) {
            goto LABEL_46;
          }
LABEL_45:
          uint64_t v32 = *(void *)(*(void *)(a1 + 48) + 8) + 48;
          uint64_t v71 = *(void *)(*(void *)(a1 + 56) + 8) + 48;
          goto LABEL_46;
        }
      }
    }
    else
    {
      BOOL v36 = 0;
    }
    unsigned int v38 = *(unsigned __int8 *)(v33 + v36 + 11);
    if (v38 != 2) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  (*(void (**)(void))(**((void **)&v30 + 1) + 16))(*((void *)&v30 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
  char v31 = v79;
  if (v79) {
    goto LABEL_15;
  }
LABEL_71:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v77);
  unsigned int v61 = (std::__shared_weak_count *)*((void *)&v80 + 1);
  if (*((void *)&v80 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    (*(void (**)(uint64_t, unsigned int *, int64_t))(*(void *)v82 + 40))(v82, v81[0], (char *)v81[2] - (char *)v81[0]);
  }
}

void sub_1A1DC61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a19);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a26);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  uint64_t v33 = *(void *)(v31 - 160);
  if (v33)
  {
    *(void *)(v31 - 152) = v33;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v31 - 136) + 40))(*(void *)(v31 - 136), v33, *(void *)(v31 - 144) - v33);
  }
  _Unwind_Resume(a1);
}

void ___ZNK2md29DaVinciTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_19()
{
}

void sub_1A1DC63A8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10E1C408A8CA7F7);
  _Unwind_Resume(a1);
}

uint64_t std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    long long v3 = *(void **)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void (***)(void, uint64_t))*--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6)
        {
          (**v5)(v5, v4);
          {
            operator new();
          }
          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v5, 128);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), v4, *(void *)(a1 + 64) - v4);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

void md::TrafficAccum::~TrafficAccum(md::TrafficAccum *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

uint64_t std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::pair<md::DaVinciTrafficBatchKey const,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void md::DynamicTrafficTileList::~DynamicTrafficTileList(md::DynamicTrafficTileList *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)this;
    }
    *((void *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_emplace<md::DaVinciTrafficTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciTrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5814B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciTrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5814B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56BC58;
  uint64_t result = MEMORY[0x1A6239EB0](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::__clone()
{
  return 0;
}

void std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(ggl::ResourceAccessor *),std::allocator<void({block_pointer} {__strong})(ggl::ResourceAccessor *)>,void ()(ggl::ResourceAccessor *)>::~__func(uint64_t a1)
{
  return a1;
}

void __destroy_helper_block_ea8_80c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE96c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_ea8_80c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE96c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[11];
  result[10] = a2[10];
  result[11] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, int a7)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    int v91 = a6[24];
    if (a6[24])
    {
      char v7 = a6[1];
      char v92 = *a6;
      uint64_t v9 = *(void *)(a6 + 4);
    }
    else
    {
      char v92 = 0;
    }
    *(void *)a1 = &unk_1EF553BF0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(unsigned char *)(a1 + 64) = a7;
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    if (v91)
    {
      *(unsigned char *)(a1 + 80) = v92;
      *(unsigned char *)(a1 + 81) = v7;
      *(void *)(a1 + 84) = v9;
      *(unsigned char *)(a1 + 104) = 1;
    }
    if (a7) {
      operator new();
    }
    unsigned int v93 = operator new(0xF8uLL);
    v93[1] = 0;
    v93[2] = 0;
    *unsigned int v93 = &unk_1EF5848C0;
    ggl::BufferData::BufferData((uint64_t)(v93 + 3), 32, 0, 0, 1, 0);
    v93[29] = "BatchType/VData";
    v93[30] = &ggl::DaVinciTraffic::defaultVboReflection;
    v93[3] = &unk_1EF55C488;
    v93[28] = &unk_1EF55C4A8;
    long long v94 = operator new(0xF8uLL);
    v94[1] = 0;
    v94[2] = 0;
    *long long v94 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v94 + 3), 2, 1, 0, 1, 0);
    *((_DWORD *)v94 + 60) = 0;
    v94[3] = &unk_1EF55B630;
    v94[4] = 2;
    v94[28] = &unk_1EF55B650;
    v94[29] = "BatchType/IData";
    operator new();
  }
  long long v97 = 0uLL;
  {
    operator new();
  }
  uint64_t v98 = mdm::Allocator::instance(void)::alloc;
  uint64_t v99 = 0;
  {
    operator new();
  }
  uint64_t v100 = mdm::Allocator::instance(void)::alloc;
  unint64_t v101 = 0;
  float v102 = 1.0;
  uint64_t v10 = *(uint64_t **)(a3 + 64);
  uint64_t v11 = *(uint64_t **)(a3 + 72);
  if (v10 == v11) {
LABEL_5:
  }
    operator new();
  while (1)
  {
    unint64_t v13 = *(void *)(*v10 + 88);
    unint64_t v14 = *(void **)(*v10 + 72);
    if (a7)
    {
      if (v13)
      {
        if (v13 >= 8)
        {
          unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v17 = (__int32 *)(v14 + 6);
          int8x16_t v18 = 0uLL;
          unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFF8;
          int8x16_t v20 = 0uLL;
          v21.i64[0] = 0x300000003;
          v21.i64[1] = 0x300000003;
          v22.i64[0] = 0x100000001;
          v22.i64[1] = 0x100000001;
          do
          {
            v23.i32[0] = *(v17 - 12);
            v24.i32[0] = *(v17 - 11);
            v23.i32[1] = *(v17 - 9);
            v23.i32[2] = *(v17 - 6);
            v23.i32[3] = *(v17 - 3);
            v25.i32[0] = *v17;
            v26.i32[0] = v17[1];
            v25.i32[1] = v17[3];
            v25.i32[2] = v17[6];
            v25.i32[3] = v17[9];
            v24.i32[1] = *(v17 - 8);
            v24.i32[2] = *(v17 - 5);
            v24.i32[3] = *(v17 - 2);
            v26.i32[1] = v17[4];
            v26.i32[2] = v17[7];
            v26.i32[3] = v17[10];
            int8x16_t v18 = vorrq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v24, 2uLL), v21), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v23, 2uLL), v21))), v18);
            int8x16_t v20 = vorrq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v26, 2uLL), v21), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v25, 2uLL), v21))), v20);
            v17 += 24;
            v19 -= 8;
          }
          while (v19);
          int8x16_t v27 = vorrq_s8(v20, v18);
          *(int8x8_t *)v27.i8 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
          unsigned int v16 = v27.i32[0] | v27.i32[1];
          if (v13 == v15) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v15 = 0;
          unsigned int v16 = 0;
        }
        unint64_t v28 = v13 - v15;
        uint64_t v29 = (float *)v14 + 3 * v15 + 1;
        do
        {
          unsigned int v30 = vcvts_n_u32_f32(*(v29 - 1), 2uLL);
          if (v30 >= 3) {
            LOBYTE(v30) = 3;
          }
          float v31 = *v29;
          v29 += 3;
          unsigned int v32 = vcvts_n_u32_f32(v31, 2uLL);
          if (v32 >= 3) {
            LOBYTE(v32) = 3;
          }
          v16 |= 1 << (v30 | (4 * v32));
          --v28;
        }
        while (v28);
      }
      else
      {
        unsigned int v16 = 0;
      }
    }
    else
    {
      unsigned int v16 = ggl::CullingGrid::intersectedCellsForRibbon(v13, v14);
    }
LABEL_23:
    unint64_t v33 = *((void *)&v97 + 1);
    if (*((void *)&v97 + 1))
    {
      uint8x8_t v34 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v97 + 8));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        unint64_t v8 = v16;
        if (*((void *)&v97 + 1) <= (unint64_t)v16) {
          unint64_t v8 = (unint64_t)v16 % *((void *)&v97 + 1);
        }
      }
      else
      {
        unint64_t v8 = (DWORD2(v97) - 1) & v16;
      }
      float v35 = *(uint64_t **)(v97 + 8 * v8);
      if (v35)
      {
        uint64_t v36 = *v35;
        if (*v35)
        {
          if (v34.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v38 = *(void *)(v36 + 8);
              if (v38 == v16)
              {
                if (*(_DWORD *)(v36 + 16) == v16) {
                  goto LABEL_103;
                }
              }
              else if ((v38 & (*((void *)&v97 + 1) - 1)) != v8)
              {
                goto LABEL_43;
              }
              uint64_t v36 = *(void *)v36;
              if (!v36) {
                goto LABEL_43;
              }
            }
          }
          do
          {
            unint64_t v37 = *(void *)(v36 + 8);
            if (v37 == v16)
            {
              if (*(_DWORD *)(v36 + 16) == v16) {
                goto LABEL_103;
              }
            }
            else
            {
              if (v37 >= *((void *)&v97 + 1)) {
                v37 %= *((void *)&v97 + 1);
              }
              if (v37 != v8) {
                break;
              }
            }
            uint64_t v36 = *(void *)v36;
          }
          while (v36);
        }
      }
    }
LABEL_43:
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v100 + 16))(v100, 56, 8);
    *(void *)uint64_t v36 = 0;
    *(void *)(v36 + 8) = v16;
    *(_DWORD *)(v36 + 16) = v16;
    *(void *)(v36 + 32) = 0;
    *(void *)(v36 + 40) = 0;
    *(void *)(v36 + 24) = 0;
    {
      operator new();
    }
    *(void *)(v36 + 48) = mdm::Allocator::instance(void)::alloc;
    float v39 = (float)(v101 + 1);
    if (!*((void *)&v97 + 1) || (float)(v102 * (float)*((unint64_t *)&v97 + 1)) < v39)
    {
      BOOL v40 = (*((void *)&v97 + 1) & (*((void *)&v97 + 1) - 1)) != 0;
      if (*((void *)&v97 + 1) < 3uLL) {
        BOOL v40 = 1;
      }
      unint64_t v41 = v40 | (2 * *((void *)&v97 + 1));
      unint64_t v42 = vcvtps_u32_f32(v39 / v102);
      if (v41 <= v42) {
        size_t prime = v42;
      }
      else {
        size_t prime = v41;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
      }
      unint64_t v33 = *((void *)&v97 + 1);
      if (prime <= *((void *)&v97 + 1))
      {
        if (prime < *((void *)&v97 + 1))
        {
          unint64_t v54 = vcvtps_u32_f32((float)v101 / v102);
          if (*((void *)&v97 + 1) < 3uLL
            || (uint8x8_t v55 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v97 + 8)), v55.i16[0] = vaddlv_u8(v55),
                                                                           v55.u32[0] > 1uLL))
          {
            unint64_t v54 = std::__next_prime(v54);
          }
          else
          {
            uint64_t v56 = 1 << -(char)__clz(v54 - 1);
            if (v54 >= 2) {
              unint64_t v54 = v56;
            }
          }
          if (prime <= v54) {
            size_t prime = v54;
          }
          if (prime >= *((void *)&v97 + 1))
          {
            unint64_t v33 = *((void *)&v97 + 1);
          }
          else
          {
            if (prime) {
              goto LABEL_56;
            }
            uint64_t v90 = v97;
            *(void *)&long long v97 = 0;
            if (v90) {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v98 + 40))(v98, v90, 8 * *((void *)&v97 + 1));
            }
            unint64_t v33 = 0;
            *((void *)&v97 + 1) = 0;
          }
        }
LABEL_80:
        if ((v33 & (v33 - 1)) != 0)
        {
          if (v33 <= v16) {
            unint64_t v8 = v16 % v33;
          }
          else {
            unint64_t v8 = v16;
          }
        }
        else
        {
          unint64_t v8 = (v33 - 1) & v16;
        }
        goto LABEL_93;
      }
LABEL_56:
      uint64_t v44 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v98 + 16))(v98, 8 * prime, 8);
      uint64_t v45 = v97;
      *(void *)&long long v97 = v44;
      if (v45) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v98 + 40))(v98, v45, 8 * *((void *)&v97 + 1));
      }
      uint64_t v46 = 0;
      *((void *)&v97 + 1) = prime;
      do
        *(void *)(v97 + 8 * v46++) = 0;
      while (prime != v46);
      double v47 = (void **)v99;
      if (!v99) {
        goto LABEL_79;
      }
      size_t v48 = *(void *)(v99 + 8);
      size_t v49 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v50 = v48 & v49;
        *(void *)(v97 + 8 * v50) = &v99;
        for (uint64_t i = *v47; *v47; uint64_t i = *v47)
        {
          size_t v52 = i[1] & v49;
          if (v52 == v50)
          {
            double v47 = (void **)i;
          }
          else if (*(void *)(v97 + 8 * v52))
          {
            *double v47 = (void *)*i;
            uint64_t v53 = 8 * v52;
            *uint64_t i = **(void **)(v97 + v53);
            **(void **)(v97 + v53) = i;
          }
          else
          {
            *(void *)(v97 + 8 * v52) = v47;
            double v47 = (void **)i;
            size_t v50 = v52;
          }
        }
        goto LABEL_79;
      }
      if (v48 >= prime) {
        v48 %= prime;
      }
      *(void *)(v97 + 8 * v48) = &v99;
      uint64_t v57 = *v47;
      if (!*v47)
      {
LABEL_79:
        unint64_t v33 = prime;
        goto LABEL_80;
      }
      while (2)
      {
        size_t v59 = v57[1];
        if (v59 >= prime) {
          v59 %= prime;
        }
        if (v59 != v48)
        {
          if (!*(void *)(v97 + 8 * v59))
          {
            *(void *)(v97 + 8 * v59) = v47;
LABEL_84:
            double v47 = (void **)v57;
            uint64_t v57 = (void *)*v57;
            size_t v48 = v59;
            if (!v57) {
              goto LABEL_79;
            }
            continue;
          }
          *double v47 = (void *)*v57;
          uint64_t v58 = 8 * v59;
          *uint64_t v57 = **(void **)(v97 + v58);
          **(void **)(v97 + v58) = v57;
          uint64_t v57 = v47;
        }
        break;
      }
      size_t v59 = v48;
      goto LABEL_84;
    }
LABEL_93:
    float v60 = *(uint64_t **)(v97 + 8 * v8);
    if (v60)
    {
      *(void *)uint64_t v36 = *v60;
LABEL_101:
      *float v60 = v36;
      goto LABEL_102;
    }
    *(void *)uint64_t v36 = v99;
    uint64_t v99 = v36;
    *(void *)(v97 + 8 * v8) = &v99;
    if (*(void *)v36)
    {
      unint64_t v61 = *(void *)(*(void *)v36 + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v61 >= v33) {
          v61 %= v33;
        }
      }
      else
      {
        v61 &= v33 - 1;
      }
      float v60 = (uint64_t *)(v97 + 8 * v61);
      goto LABEL_101;
    }
LABEL_102:
    ++v101;
LABEL_103:
    uint64_t v62 = *(void **)(v36 + 32);
    unint64_t v63 = *(void *)(v36 + 40);
    if ((unint64_t)v62 < v63)
    {
      if (v62)
      {
        uint64_t v64 = *v10;
        *uint64_t v10 = 0;
        *uint64_t v62 = v64;
      }
      uint64_t v12 = v62 + 1;
      goto LABEL_7;
    }
    uint64_t v65 = *(void *)(v36 + 24);
    uint64_t v66 = ((uint64_t)v62 - v65) >> 3;
    unint64_t v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 61) {
      abort();
    }
    uint64_t v68 = v63 - v65;
    if (v68 >> 2 > v67) {
      unint64_t v67 = v68 >> 2;
    }
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v69 = v67;
    }
    if (v69)
    {
      uint64_t v70 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v36 + 48) + 16))(*(void *)(v36 + 48), 8 * v69, 8);
      uint64_t v71 = (void *)(v70 + 8 * v66);
      uint64_t v72 = v70 + 8 * v69;
      if (v70)
      {
        uint64_t v73 = *v10;
        *uint64_t v10 = 0;
        *uint64_t v71 = v73;
      }
    }
    else
    {
      uint64_t v72 = 0;
      uint64_t v71 = (void *)(8 * v66);
    }
    uint64_t v12 = v71 + 1;
    long long v74 = *(void **)(v36 + 24);
    unint64_t v75 = *(void *)(v36 + 32);
    if ((void *)v75 == v74)
    {
      *(void *)(v36 + 24) = v71;
      *(void *)(v36 + 32) = v12;
      uint64_t v81 = *(void *)(v36 + 40);
      *(void *)(v36 + 40) = v72;
      if (!v75) {
        goto LABEL_7;
      }
      goto LABEL_130;
    }
    unint64_t v76 = v75 - (void)v74 - 8;
    if (v76 > 0x47
      && ((unint64_t v77 = v76 >> 3, v75 - 8 * v77 - 8 >= (unint64_t)v71) || (unint64_t)&v71[-v77 - 1] >= v75))
    {
      unint64_t v83 = v77 + 1;
      uint64_t v84 = (v77 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      char v78 = (void *)(v75 - 8 * v84);
      int v85 = v71 - 2;
      int v86 = (long long *)(v75 - 32);
      uint64_t v87 = v84;
      do
      {
        long long v89 = *v86;
        long long v88 = v86[1];
        *int v86 = 0uLL;
        v86[1] = 0uLL;
        v86 -= 2;
        *(v85 - 1) = v89;
        *int v85 = v88;
        v85 -= 2;
        v87 -= 4;
      }
      while (v87);
      v71 -= v84;
      if (v83 == v84) {
        goto LABEL_122;
      }
    }
    else
    {
      char v78 = *(void **)(v36 + 32);
    }
    do
    {
      uint64_t v79 = *--v78;
      *char v78 = 0;
      *--uint64_t v71 = v79;
    }
    while (v78 != v74);
LABEL_122:
    unint64_t v75 = *(void *)(v36 + 24);
    long long v80 = *(void **)(v36 + 32);
    *(void *)(v36 + 24) = v71;
    *(void *)(v36 + 32) = v12;
    uint64_t v81 = *(void *)(v36 + 40);
    *(void *)(v36 + 40) = v72;
    while (v80 != (void *)v75)
    {
      unint64_t v82 = *--v80;
      unint64_t v8 = v82;
      *long long v80 = 0;
      if (v82)
      {
        (**(void (***)(unint64_t))v8)(v8);
        {
          operator new();
        }
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
      }
    }
    if (!v75) {
      goto LABEL_7;
    }
LABEL_130:
    (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v36 + 48) + 40))(*(void *)(v36 + 48), v75, v81 - v75);
LABEL_7:
    *(void *)(v36 + 32) = v12;
    if (++v10 == v11) {
      goto LABEL_5;
    }
  }
}

void sub_1A1DCB9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x1A6239270](v68, 0x1020C4007FF0C4BLL);
  if (STACK[0x200]) {
    operator delete((void *)STACK[0x200]);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a68);
  uint64_t v70 = *a59;
  if (*a59)
  {
    *(void *)(a20 + 40) = v70;
    operator delete(v70);
  }
  uint64_t v71 = *a56;
  if (*a56)
  {
    *(void *)(a20 + 16) = v71;
    operator delete(v71);
  }
  if (a67) {
    operator delete(a67);
  }
  _Unwind_Resume(a1);
}

void md::DaVinciTrafficLayer::~DaVinciTrafficLayer(md::DaVinciTrafficLayer *this)
{
  *(void *)this = &unk_1EF5310B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF5310B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553BF0;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  unint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF5310B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF5310B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

uint64_t *std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 2584);
    if (v3) {
      MEMORY[0x1A6239250](v3, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v2, 0x1020C4007FF0C4BLL);
  }
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5848C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinciTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5848C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = (int8x16_t *)result;
LABEL_2:
  uint64_t v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *uint64_t v160 = v66;
          }
          break;
        case 3:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          unint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *uint64_t v160 = v69;
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      uint64_t v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          long long v74 = (uint64_t *)v7;
          do
          {
            unint64_t v76 = v71;
            uint64_t v77 = v74[1];
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              char v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *char v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (i = v78; ; uint64_t v79 = *i)
              {
                *uint64_t i = v80;
                uint64_t i = v74;
                *long long v74 = 0;
                if (v79)
                {
                  uint64_t v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    unint64_t v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        int v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        *unint64_t v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 128);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                long long v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              uint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              unint64_t v76 = (int8x16_t *)v163;
            }
            uint64_t v71 = (int8x16_t *)&v76->u64[1];
            long long v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          uint32x4_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            int32x4_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *int32x4_t v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            uint64_t v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              *unint64_t j = v142;
              unint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                uint64_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  uint32x4_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      uint32x4_t v148 = (void (***)(void, uint64_t))*--v145;
                      uint64_t v147 = v148;
                      *uint32x4_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 128);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              uint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            uint32x4_t v138 = (int8x16_t *)v164;
          }
          uint64_t v71 = (int8x16_t *)&v138->u64[1];
          uint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    uint64_t v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      unint64_t v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      *unint64_t v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unsigned int v16 = v7;
      do
      {
        unsigned int v17 = v16;
        uint64_t v19 = v16->i64[1];
        unsigned int v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      int8x16_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        int8x16_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        float32x4_t v24 = (uint64_t *)v16;
        float32x4_t v25 = v20;
        do
        {
          *float32x4_t v24 = v23;
          *float32x4_t v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          unsigned int v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        uint64_t v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          uint64_t v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      uint64_t v45 = a2;
      if (v7 < a2)
      {
        uint64_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          uint64_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            uint64_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      unint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *unint64_t v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        uint64_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        long double v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *long double v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            long double v111 = v100;
            *uint64_t v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            uint64_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            long double v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        __int16 v120 = (uint64_t *)v6;
        do
        {
          unsigned int v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *unsigned int v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          __int16 v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        uint32x4_t v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          __int16 v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *uint32x4_t v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          uint32x4_t v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *unsigned int v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              uint32x4_t v136 = v133;
              *uint32x4_t v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint32x4_t v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              unsigned int v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            __int16 v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      char v4 = *(void **)(v2 + 64);
      uint64_t v5 = *(void *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = (void (***)(void, uint64_t))*--v4;
          uint64_t v6 = v7;
          *char v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
          }
        }
        while (v4 != v3);
        uint64_t v5 = *(void *)(v2 + 56);
      }
      *(void *)(v2 + 64) = v3;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 80) + 40))(*(void *)(v2 + 80), v5, *(void *)(v2 + 72) - v5);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v5 = (uint64_t *)*v2;
      uint64_t v6 = (void *)v2[3];
      if (v6)
      {
        uint64_t v7 = (void *)v2[4];
        uint64_t v4 = v2[3];
        if (v7 != v6)
        {
          do
          {
            uint64_t v9 = (void (***)(void, uint64_t))*--v7;
            uint64_t v8 = v9;
            *uint64_t v7 = 0;
            if (v9)
            {
              (**v8)(v8, v4);
              {
                  operator new();
              }
              (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
            }
          }
          while (v7 != v6);
          uint64_t v4 = v2[3];
        }
        v2[4] = (uint64_t)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[6] + 40))(v2[6], v4, v2[5] - v4);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v2, 56);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  return result;
}

BOOL md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = 3;
  if ((a1 & 0xF000) == 0) {
    uint64_t v2 = 0;
  }
  if ((a1 & 0xF00) != 0) {
    uint64_t v2 = 2;
  }
  if ((a1 & 0xF0) != 0) {
    uint64_t v2 = 1;
  }
  if ((a1 & 0xF) != 0) {
    uint64_t v2 = 0;
  }
  int v3 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v2];
  unint64_t v4 = *(unsigned int *)(a2 + 96);
  uint64_t v5 = 3;
  if ((v4 & 0xF000) == 0) {
    uint64_t v5 = 0;
  }
  if ((v4 & 0xF00) != 0) {
    uint64_t v5 = 2;
  }
  if ((v4 & 0xF0) != 0) {
    uint64_t v5 = 1;
  }
  if ((v4 & 0xF) != 0) {
    uint64_t v5 = 0;
  }
  return ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)a1 >> 12] << 12) | (v3 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(a1 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[a1 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[a1 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v4 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v5] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v4 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v4 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v4 & 0xF]);
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  BOOL v8 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1);
  uint64_t v9 = *a3;
  BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      uint64_t v13 = *a3;
      BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), v7);
      if (!result) {
        return result;
      }
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1, a2, a3);
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a4 + 96), *a3))
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v12 = *a3;
    uint64_t v13 = *a2;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), *a2))
    {
      *a2 = v12;
      *a3 = v13;
      uint64_t v14 = *a2;
      uint64_t v15 = *a1;
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1))
      {
        *a1 = v14;
        *a2 = v15;
      }
    }
  }
  uint64_t v16 = *a5;
  uint64_t v17 = *a4;
  BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a5 + 96), *a4);
  if (result)
  {
    *a4 = v16;
    *a5 = v17;
    uint64_t v19 = *a4;
    uint64_t v20 = *a3;
    BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a4 + 96), *a3);
    if (result)
    {
      *a3 = v19;
      *a4 = v20;
      uint64_t v21 = *a3;
      uint64_t v22 = *a2;
      BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a3 + 96), *a2);
      if (result)
      {
        *a2 = v21;
        *a3 = v22;
        uint64_t v23 = *a2;
        uint64_t v24 = *a1;
        BOOL result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*a2 + 96), *a1);
        if (result)
        {
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      uint64_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      BOOL v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  *BOOL v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

uint64_t std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 8))
  {
    BOOL v4 = *(void **)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void **)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v5 != v4)
      {
        do
        {
          BOOL v8 = (void (***)(void, uint64_t))*--v5;
          uint64_t v7 = v8;
          void *v5 = 0;
          if (v8)
          {
            (**v7)(v7, v6);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
          }
        }
        while (v5 != v4);
        uint64_t v6 = *(void *)(a2 + 24);
      }
      *(void *)(a2 + 32) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v6, *(void *)(a2 + 40) - v6);
    }
  }
  else if (!a2)
  {
    return result;
  }
  uint64_t v9 = *(uint64_t (**)(void))(***(void ***)v3 + 40);
  return v9();
}

uint64_t __destroy_helper_block_ea8_80c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (v1)
  {
    *(void *)(result + 88) = v1;
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 104) + 40))(*(void *)(result + 104), v1, *(void *)(result + 96) - v1);
  }
  return result;
}

uint64_t __copy_helper_block_ea8_80c95_ZTSNSt3__16vectorINS_4pairIN3gss14StyleAttributeEtEEN3geo12StdAllocatorIS4_NS2_9AllocatorEEEEE(void *a1, void *a2)
{
  a1[10] = 0;
  a1[11] = 0;
  uint64_t result = a2[13];
  a1[12] = 0;
  a1[13] = result;
  BOOL v4 = (char *)a2[10];
  uint64_t v5 = (char *)a2[11];
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = v6 >> 3;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    a1[10] = result;
    a1[11] = result;
    a1[12] = result + 8 * v7;
    do
    {
      if (result) {
        *(void *)uint64_t result = *(void *)v4;
      }
      v4 += 8;
      result += 8;
    }
    while (v4 != v5);
    a1[11] = result;
  }
  return result;
}

BOOL md::trafficVisibleAtSpeed@<W0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W8>)
{
  uint64_t v48 = v6;
  uint64_t v49 = v5;
  uint64_t v50 = v3;
  uint64_t v51 = v4;
  switch(a2)
  {
    case 0:
      unint64_t v7 = *(void *)(*(void *)a1 + 24);
      BOOL v8 = *(float **)v7;
      if (*(void *)v7)
      {
        float v9 = *v8;
        BOOL v10 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v9 != 0.0 && v9 != 1.0) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        BOOL v10 = 0;
      }
      unsigned int v22 = *(unsigned __int8 *)(v7 + v10 + 11);
      if (v22 != 2) {
        goto LABEL_39;
      }
LABEL_37:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)a1 + 24), 0x2Au, 0)) {
        goto LABEL_40;
      }
      unsigned int v22 = 1;
LABEL_39:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v7, 0x2Au, v22)) {
        goto LABEL_87;
      }
LABEL_40:
      if (v8)
      {
        float v23 = *v8;
        BOOL v24 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v23 != 0.0 && v23 != 1.0) {
            goto LABEL_101;
          }
        }
      }
      else
      {
        BOOL v24 = 0;
      }
      unsigned int v37 = *(unsigned __int8 *)(v7 + v24 + 11);
      float v23 = 0.0;
      if (v37 == 2)
      {
LABEL_101:
        char v47 = 1;
        char v46 = 1;
        unint64_t v38 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v7, 0x2Au, 0, &v47);
        unint64_t v39 = v7;
        unsigned int v40 = 42;
        goto LABEL_111;
      }
      unint64_t v41 = v7;
      unsigned int v42 = 42;
      goto LABEL_119;
    case 1:
      unint64_t v7 = *(void *)(*(void *)a1 + 24);
      BOOL v8 = *(float **)v7;
      if (*(void *)v7)
      {
        float v13 = *v8;
        BOOL v14 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v13 != 0.0 && v13 != 1.0) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        BOOL v14 = 0;
      }
      unsigned int v26 = *(unsigned __int8 *)(v7 + v14 + 11);
      if (v26 != 2) {
        goto LABEL_52;
      }
LABEL_50:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)a1 + 24), 0x35u, 0)) {
        goto LABEL_53;
      }
      unsigned int v26 = 1;
LABEL_52:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v7, 0x35u, v26)) {
        goto LABEL_87;
      }
LABEL_53:
      if (v8)
      {
        float v23 = *v8;
        BOOL v27 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v23 != 0.0 && v23 != 1.0) {
            goto LABEL_104;
          }
        }
      }
      else
      {
        BOOL v27 = 0;
      }
      unsigned int v37 = *(unsigned __int8 *)(v7 + v27 + 11);
      float v23 = 0.0;
      if (v37 == 2)
      {
LABEL_104:
        char v47 = 1;
        char v46 = 1;
        unint64_t v38 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v7, 0x35u, 0, &v47);
        unint64_t v39 = v7;
        unsigned int v40 = 53;
        goto LABEL_111;
      }
      unint64_t v41 = v7;
      unsigned int v42 = 53;
      goto LABEL_119;
    case 2:
      unint64_t v7 = *(void *)(*(void *)a1 + 24);
      BOOL v8 = *(float **)v7;
      if (*(void *)v7)
      {
        float v16 = *v8;
        BOOL v17 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v16 != 0.0 && v16 != 1.0) {
            goto LABEL_63;
          }
        }
      }
      else
      {
        BOOL v17 = 0;
      }
      unsigned int v29 = *(unsigned __int8 *)(v7 + v17 + 11);
      if (v29 != 2) {
        goto LABEL_65;
      }
LABEL_63:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)a1 + 24), 0x40u, 0)) {
        goto LABEL_66;
      }
      unsigned int v29 = 1;
LABEL_65:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v7, 0x40u, v29)) {
        goto LABEL_87;
      }
LABEL_66:
      if (v8)
      {
        float v23 = *v8;
        BOOL v30 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v23 != 0.0 && v23 != 1.0) {
            goto LABEL_107;
          }
        }
      }
      else
      {
        BOOL v30 = 0;
      }
      unsigned int v37 = *(unsigned __int8 *)(v7 + v30 + 11);
      float v23 = 0.0;
      if (v37 == 2)
      {
LABEL_107:
        char v47 = 1;
        char v46 = 1;
        unint64_t v38 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v7, 0x40u, 0, &v47);
        unint64_t v39 = v7;
        unsigned int v40 = 64;
        goto LABEL_111;
      }
      unint64_t v41 = v7;
      unsigned int v42 = 64;
LABEL_119:
      char v45 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v41, v42, v37, 0);
      return v45 != 0;
    case 3:
      unint64_t v7 = *(void *)(*(void *)a1 + 24);
      BOOL v8 = *(float **)v7;
      if (*(void *)v7)
      {
        float v19 = *v8;
        BOOL v20 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v19 != 0.0 && v19 != 1.0) {
            goto LABEL_76;
          }
        }
      }
      else
      {
        BOOL v20 = 0;
      }
      unsigned int v32 = *(unsigned __int8 *)(v7 + v20 + 11);
      if (v32 != 2) {
        goto LABEL_78;
      }
LABEL_76:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)a1 + 24), 0x4Bu, 0)) {
        goto LABEL_79;
      }
      unsigned int v32 = 1;
LABEL_78:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v7, 0x4Bu, v32))
      {
LABEL_87:
        if (v8)
        {
          float v23 = *v8;
          BOOL v35 = *v8 == 1.0;
          if (*(unsigned char *)(v7 + 10))
          {
            if (v23 != 0.0 && v23 != 1.0)
            {
LABEL_97:
              char v47 = 1;
              char v46 = 1;
              unint64_t v38 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v7, 0xA5u, 0, &v47);
              unint64_t v39 = v7;
              unsigned int v40 = 165;
              goto LABEL_111;
            }
          }
        }
        else
        {
          BOOL v35 = 0;
        }
        unsigned int v37 = *(unsigned __int8 *)(v7 + v35 + 11);
        float v23 = 0.0;
        if (v37 != 2)
        {
          unint64_t v41 = v7;
          unsigned int v42 = 165;
          goto LABEL_119;
        }
        goto LABEL_97;
      }
LABEL_79:
      if (v8)
      {
        float v23 = *v8;
        BOOL v33 = *v8 == 1.0;
        if (*(unsigned char *)(v7 + 10))
        {
          if (v23 != 0.0 && v23 != 1.0) {
            goto LABEL_110;
          }
        }
      }
      else
      {
        BOOL v33 = 0;
      }
      unsigned int v37 = *(unsigned __int8 *)(v7 + v33 + 11);
      float v23 = 0.0;
      if (v37 != 2)
      {
        unint64_t v41 = v7;
        unsigned int v42 = 75;
        goto LABEL_119;
      }
LABEL_110:
      char v47 = 1;
      char v46 = 1;
      unint64_t v38 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v7, 0x4Bu, 0, &v47);
      unint64_t v39 = v7;
      unsigned int v40 = 75;
LABEL_111:
      unint64_t v43 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v39, v40, 1u, &v46);
      if (v23 >= 1.0) {
        uint64_t v44 = (char *)v43;
      }
      else {
        uint64_t v44 = (char *)v38;
      }
      char v45 = *v44;
      return v45 != 0;
    default:
      return a3 & 1;
  }
}

void ggl::ConstantDataTyped<ggl::Tile::Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciTrafficLayerDataSource::~DaVinciTrafficLayerDataSource(md::DaVinciTrafficLayerDataSource *this)
{
  md::DaVinciTrafficLayerDataSource::~DaVinciTrafficLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF54B270;
  uint64_t v2 = *((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40509EF904);
  }

  *(void *)this = &unk_1EF5426D8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void ggl::Flyover::FlyoverPipelineState::~FlyoverPipelineState(ggl::Flyover::FlyoverPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Flyover::FlyoverPipelineSetup::textureIsEnabled(ggl::Flyover::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Flyover::FlyoverPipelineSetup::constantDataIsEnabled(ggl::Flyover::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::Flyover::FlyoverPipelineSetup::~FlyoverPipelineSetup(ggl::Flyover::FlyoverPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::Flyover::FlyoverPipelineSetup::FlyoverPipelineSetup(ggl::Flyover::FlyoverPipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      unk_1E958CB20 = 1;
    }
    ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
    *(void *)algn_1E958CA98 = &ggl::Flyover::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
    qword_1E958CAA0 = 0;
    {
      ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      unk_1E958CAD0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
      qword_1E958CAD8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
      unk_1E958CAE0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
      qword_1E958CAE8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
    }
    qword_1E958CAA8 = (uint64_t)&ggl::Flyover::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
    unk_1E958CAB0 = xmmword_1A28FC930;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::Flyover::FlyoverPipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF5614C8;
  return result;
}

void ggl::Flyover::FlyoverPolarPipelineState::~FlyoverPolarPipelineState(ggl::Flyover::FlyoverPolarPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Flyover::FlyoverPolarPipelineSetup::textureIsEnabled(ggl::Flyover::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Flyover::FlyoverPolarPipelineSetup::constantDataIsEnabled(ggl::Flyover::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::Flyover::FlyoverPolarPipelineSetup::~FlyoverPolarPipelineSetup(ggl::Flyover::FlyoverPolarPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A1DCF9DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}::~function(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2()
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  uint64_t v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke()
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  uint64_t v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;
}

uint64_t std::__split_buffer<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 32;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v6(v2);
  }
  else if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v5();
  }
  return result;
}

uint64_t std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(void *a1, void *a2)
{
  *a2 = &unk_1EF57CE10;
  uint64_t v4 = a2 + 1;
  uint64_t result = a1[4];
  if (result)
  {
    if ((void *)result == a1 + 1)
    {
      a2[4] = v4;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1[4] + 24))(a1[4]);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  uint64_t v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CE10;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CE10;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

uint64_t non-virtual thunk to'karo::graphics::View::setFrame(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 40) + 32))();
}

void karo::graphics::View::setFrame(karo::graphics::View *a1, void *a2, int a3)
{
  *((void *)a1 + 9) = a2[3];
  *((void *)a1 + 10) = a2[4];
  *((void *)a1 + 11) = a2[5];
  *((void *)a1 + 12) = a2[6];
  *((void *)a1 + 6) = *a2;
  *((void *)a1 + 7) = a2[1];
  *((void *)a1 + 8) = a2[2];
  karo::graphics::View::orientationUpdate(a1, a3);
}

void karo::graphics::View::orientationUpdate(karo::graphics::View *this, int a2)
{
  double v5 = *((double *)this + 10);
  double v4 = *((double *)this + 11);
  double v6 = *((double *)this + 12);
  double v7 = *((double *)this + 113);
  double v8 = *((double *)this + 112);
  double v9 = *((double *)this + 111);
  double v11 = *((double *)this + 8);
  double v10 = *((double *)this + 9);
  double v12 = -(v8 * v4 - v7 * v5) - (v8 * v4 - v7 * v5);
  double v13 = -(v7 * v10 - v9 * v4) - (v7 * v10 - v9 * v4);
  double v14 = -(v9 * v5 - v8 * v10) - (v9 * v5 - v8 * v10);
  double v15 = *((double *)this + 6);
  double v16 = *((double *)this + 7);
  *((double *)this + 114) = v15 + v9 + v12 * v6 + v14 * v5 - v13 * v4;
  *((double *)this + 115) = v16 + v8 + v12 * v4 + v13 * v6 - v14 * v10;
  *((double *)this + 116) = v11 + v7 - v12 * v5 + v13 * v10 + v14 * v6;
  double v17 = -(v11 * v5 - v16 * v4) - (v11 * v5 - v16 * v4);
  double v18 = -(v15 * v4 - v11 * v10) - (v15 * v4 - v11 * v10);
  double v19 = -(v16 * v10 - v15 * v5) - (v16 * v10 - v15 * v5);
  double v20 = -(v19 * v10 - (-(v16 - v17 * v4) - v18 * v6));
  double v21 = -(v15 + v17 * v6 + v18 * v4 - v19 * v5);
  double v22 = v11 + v17 * v5 + v19 * v6;
  double v23 = v5 * -2.0;
  double v24 = -(v5 * (v5 * -2.0));
  double v25 = 1.0 - (v24 - v4 * (v4 * -2.0));
  double v26 = -(v5 * (v10 * -2.0));
  double v27 = v4 * -2.0 * v6;
  double v28 = v26 - v27;
  double v29 = -(v4 * (v10 * -2.0));
  double v30 = v6 * v23;
  double v31 = v27 + v26;
  double v32 = v6 * v23 - v4 * (v10 * -2.0);
  double v33 = v10 * -2.0 * v10 + 1.0;
  double v34 = v33 - -(v4 * (v4 * -2.0));
  double v35 = -(v4 * v23);
  double v36 = v6 * (v10 * -2.0);
  *((double *)this + 31) = v25;
  *((double *)this + 32) = v31;
  *((double *)this + 33) = v29 - v30;
  *((void *)this + 34) = 0;
  *((double *)this + 35) = v28;
  *((double *)this + 36) = v34;
  *((double *)this + 37) = v36 + v35;
  *((void *)this + 38) = 0;
  *((double *)this + 39) = v32;
  *((double *)this + 40) = v35 - v36;
  *((double *)this + 41) = v33 - v24;
  *((void *)this + 42) = 0;
  *((double *)this + 43) = v21;
  *((double *)this + 44) = v20;
  *((double *)this + 45) = -(v22 - v18 * v10);
  *((void *)this + 46) = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v43, (double *)this + 47, (double *)this + 31);
  long long v37 = v43[1];
  *(_OWORD *)((char *)this + 120) = v43[0];
  *(_OWORD *)((char *)this + 136) = v37;
  long long v38 = v43[3];
  *(_OWORD *)((char *)this + 152) = v43[2];
  *(_OWORD *)((char *)this + 168) = v38;
  long long v39 = v43[5];
  *(_OWORD *)((char *)this + 184) = v43[4];
  *(_OWORD *)((char *)this + 200) = v39;
  long long v40 = v43[7];
  *(_OWORD *)((char *)this + 216) = v43[6];
  *(_OWORD *)((char *)this + 232) = v40;
  karo::graphics::View::updatePlanesAndCorners(this);
  if (a2)
  {
    int v41 = *((_DWORD *)this + 28);
    if (v41 == -2) {
      int v42 = v41 + 2;
    }
    else {
      int v42 = v41 + 1;
    }
    *((_DWORD *)this + 28) = v42;
  }
}

void karo::graphics::View::updatePlanesAndCorners(karo::graphics::View *this)
{
  uint64_t v335 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_OWORD *)((char *)this + 1032);
  double v3 = *((double *)this + 10);
  double v4 = *((double *)this + 11);
  double v5 = *((double *)this + 12);
  double v6 = v3 + v3;
  double v7 = (v3 + v3) * v3;
  double v8 = (v4 + v4) * v4;
  uint64_t v10 = *((void *)this + 8);
  double v9 = *((double *)this + 9);
  double v11 = v9 + v9;
  double v12 = (v9 + v9) * v3;
  double v13 = (v4 + v4) * v5;
  double v14 = v4 * (v9 + v9);
  double v15 = 1.0 - (v9 + v9) * v9;
  double v16 = v6 * v4;
  v328[0] = 1.0 - (v7 + v8);
  v328[1] = v13 + v12;
  v328[4] = v12 - v13;
  v328[5] = v15 - v8;
  v328[8] = v5 * v6 + v14;
  v328[9] = v16 - v5 * v11;
  v328[2] = v14 - v5 * v6;
  v328[6] = v5 * v11 + v16;
  v328[10] = v15 - v7;
  v328[3] = 0.0;
  v328[7] = 0.0;
  v328[11] = 0.0;
  long long v329 = *((_OWORD *)this + 3);
  uint64_t v330 = v10;
  uint64_t v331 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)&v332, v328, (double *)this + 145);
  long long v17 = *(_OWORD *)v333;
  *uint64_t v2 = v332;
  v2[1] = v17;
  long long v18 = *(_OWORD *)v334;
  v2[2] = *(_OWORD *)&v333[16];
  v2[3] = v18;
  long long v19 = *(_OWORD *)&v334[32];
  v2[4] = *(_OWORD *)&v334[16];
  v2[5] = v19;
  long long v20 = *(_OWORD *)&v334[64];
  v2[6] = *(_OWORD *)&v334[48];
  v2[7] = v20;
  if (*((unsigned char *)this + 1016))
  {
    uint64_t v22 = *((void *)this + 5);
    double v21 = (double *)((char *)this + 40);
    double v23 = (double *)(*(uint64_t (**)(double *))(v22 + 24))(v21);
    double v24 = v21[117];
    double v25 = v21[116];
    double v26 = v21[114];
    double v27 = v23[4];
    double v28 = v23[5];
    double v29 = v23[6];
    double v30 = v23[3];
    double v31 = -(v30 * v26 - v28 * v24);
    double v32 = *v23 + v24;
    double v33 = -(v27 * v24 - v30 * v25);
    double v34 = v23[1] + v25;
    double v35 = -(v28 * v25 - v27 * v26) - (v28 * v25 - v27 * v26);
    double v36 = v31 + v31;
    double v37 = v33 + v33;
    double v38 = v32 + v37 * v27 + v35 * v29 - v36 * v28;
    double v39 = v34 - v37 * v30 + v35 * v28 + v36 * v29;
    double v40 = v26 + v37 * v29 + v23[2] + v36 * v30 - v35 * v27;
    v21[82] = v38;
    v21[83] = v39;
    v21[84] = v40;
    int v41 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v42 = v21[117];
    double v43 = v21[116];
    double v44 = v21[113];
    double v45 = v41[4];
    double v46 = v41[5];
    double v47 = v41[6];
    double v48 = v41[3];
    double v49 = -(v48 * v44 - v46 * v42);
    double v50 = *v41 + v42;
    double v51 = -(v45 * v42 - v48 * v43);
    double v52 = v41[1] + v43;
    double v53 = -(v46 * v43 - v45 * v44) - (v46 * v43 - v45 * v44);
    double v54 = v49 + v49;
    double v55 = v51 + v51;
    double v56 = v50 + v55 * v45 + v53 * v47 - v54 * v46;
    double v57 = v52 - v55 * v48 + v53 * v46 + v54 * v47;
    double v58 = v44 + v55 * v47 + v41[2] + v54 * v48 - v53 * v45;
    v21[85] = v56;
    v21[86] = v57;
    v21[87] = v58;
    uint64_t v59 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v60 = v21[117];
    double v61 = v21[115];
    double v62 = v21[114];
    double v63 = v59[4];
    double v64 = v59[5];
    double v65 = v59[6];
    double v66 = v59[3];
    double v67 = -(v66 * v62 - v64 * v60);
    double v68 = *v59 + v60;
    double v69 = -(v63 * v60 - v66 * v61);
    double v70 = v59[1] + v61;
    double v71 = -(v64 * v61 - v63 * v62) - (v64 * v61 - v63 * v62);
    double v72 = v67 + v67;
    double v73 = v69 + v69;
    double v74 = v68 + v73 * v63 + v71 * v65 - v72 * v64;
    double v75 = v70 - v73 * v66 + v71 * v64 + v72 * v65;
    double v76 = v62 + v73 * v65 + v59[2] + v72 * v66 - v71 * v63;
    v21[88] = v74;
    v21[89] = v75;
    v21[90] = v76;
    uint64_t v77 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v78 = v21[117];
    double v79 = v21[115];
    double v80 = v21[113];
    double v81 = v77[4];
    double v82 = v77[5];
    double v83 = v77[6];
    double v84 = v77[3];
    double v85 = -(v84 * v80 - v82 * v78);
    double v86 = *v77 + v78;
    double v87 = -(v81 * v78 - v84 * v79);
    double v88 = v77[1] + v79;
    double v89 = -(v82 * v79 - v81 * v80) - (v82 * v79 - v81 * v80);
    double v90 = v85 + v85;
    double v91 = v87 + v87;
    double v92 = v86 + v91 * v81 + v89 * v83 - v90 * v82;
    double v93 = v88 - v91 * v84 + v89 * v82 + v90 * v83;
    double v94 = v80 + v91 * v83 + v77[2] + v90 * v84 - v89 * v81;
    v21[91] = v92;
    v21[92] = v93;
    v21[93] = v94;
    uint64_t v95 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v96 = v21[118];
    double v97 = v21[116];
    double v98 = v21[114];
    double v99 = v95[4];
    double v100 = v95[5];
    double v101 = v95[6];
    double v102 = v95[3];
    double v103 = -(v102 * v98 - v100 * v96);
    double v104 = *v95 + v96;
    double v105 = -(v99 * v96 - v102 * v97);
    double v106 = v95[1] + v97;
    double v107 = -(v100 * v97 - v99 * v98) - (v100 * v97 - v99 * v98);
    double v108 = v103 + v103;
    double v109 = v105 + v105;
    double v110 = v104 + v109 * v99 + v107 * v101 - v108 * v100;
    double v111 = v106 - v109 * v102 + v107 * v100 + v108 * v101;
    double v112 = v98 + v109 * v101 + v95[2] + v108 * v102 - v107 * v99;
    v21[94] = v110;
    v21[95] = v111;
    v21[96] = v112;
    uint64_t v113 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v114 = v21[118];
    double v115 = v21[116];
    double v116 = v21[113];
    double v117 = v113[4];
    double v118 = v113[5];
    double v119 = v113[6];
    double v120 = v113[3];
    double v121 = -(v120 * v116 - v118 * v114);
    double v122 = *v113 + v114;
    double v123 = -(v117 * v114 - v120 * v115);
    double v124 = v113[1] + v115;
    double v125 = -(v118 * v115 - v117 * v116) - (v118 * v115 - v117 * v116);
    double v126 = v121 + v121;
    double v127 = v123 + v123;
    double v128 = v122 + v127 * v117 + v125 * v119 - v126 * v118;
    double v129 = v124 - v127 * v120 + v125 * v118 + v126 * v119;
    double v130 = v116 + v127 * v119 + v113[2] + v126 * v120 - v125 * v117;
    v21[97] = v128;
    v21[98] = v129;
    v21[99] = v130;
    uint64_t v131 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v132 = v21[118];
    double v133 = v21[115];
    double v134 = v21[114];
    double v135 = v131[4];
    double v136 = v131[5];
    double v137 = v131[6];
    double v138 = v131[3];
    double v139 = -(v138 * v134 - v136 * v132);
    double v140 = *v131 + v132;
    double v141 = -(v135 * v132 - v138 * v133);
    double v142 = v131[1] + v133;
    double v143 = -(v136 * v133 - v135 * v134) - (v136 * v133 - v135 * v134);
    double v144 = v139 + v139;
    double v145 = v141 + v141;
    double v146 = v140 + v145 * v135 + v143 * v137 - v144 * v136;
    double v147 = v142 - v145 * v138 + v143 * v136 + v144 * v137;
    double v148 = v134 + v145 * v137 + v131[2] + v144 * v138 - v143 * v135;
    v21[100] = v146;
    v21[101] = v147;
    v21[102] = v148;
    uint64_t v149 = (double *)(*(uint64_t (**)(double *))(*(void *)v21 + 24))(v21);
    double v150 = v21[118];
    double v151 = v21[115];
    double v152 = v21[113];
    double v154 = v149[4];
    double v153 = v149[5];
    double v155 = v149[6];
    double v156 = v149[3];
    double v157 = -(v153 * v151 - v154 * v152) - (v153 * v151 - v154 * v152);
    double v158 = -(v156 * v152 - v153 * v150) - (v156 * v152 - v153 * v150);
    double v159 = -(v154 * v150 - v156 * v151) - (v154 * v150 - v156 * v151);
    double v160 = *v149 + v150 + v159 * v154 + v157 * v155 - v158 * v153;
    double v161 = v149[1] + v151 - v159 * v156 + v157 * v153 + v158 * v155;
    double v162 = v21[85];
    double v163 = v21[82];
    double v164 = v21[86];
    double v165 = v21[83];
    double v166 = v21[87];
    double v167 = v21[84];
    double v168 = sqrt((v162 - v163) * (v162 - v163) + (v164 - v165) * (v164 - v165) + (v166 - v167) * (v166 - v167));
    double v169 = v152 + v159 * v155 + v149[2] + v158 * v156 - v157 * v154;
    v21[103] = v160;
    v21[104] = v161;
    v21[105] = v169;
    double v170 = 1.0 / v168 * (v162 - v163);
    double v171 = 1.0 / v168 * (v164 - v165);
    double v172 = 1.0 / v168 * (v166 - v167);
    double v173 = v21[91];
    double v174 = v21[92];
    double v175 = v21[93];
    double v176 = 1.0 / sqrt((v173 - v163) * (v173 - v163) + (v174 - v165) * (v174 - v165) + (v175 - v167) * (v175 - v167));
    double v177 = v176 * (v173 - v163);
    double v178 = v176 * (v174 - v165);
    double v179 = v176 * (v175 - v167);
    double v180 = -(v178 * v172 - v179 * v171);
    double v181 = -(v179 * v170 - v177 * v172);
    double v182 = -(v177 * v171 - v178 * v170);
    double v183 = 1.0 / sqrt(v180 * v180 + v181 * v181 + v182 * v182);
    double v184 = v183 * v181;
    double v185 = v183 * v182;
    v21[58] = v183 * v180;
    v21[59] = v184;
    v21[60] = v185;
    v21[61] = -(v183 * v180 * v163 + v184 * v165 + v185 * v167);
    double v186 = v21[94];
    double v187 = v21[97];
    double v188 = v21[95];
    double v189 = v21[98];
    double v190 = v21[96];
    double v191 = v21[99];
    double v192 = 1.0 / sqrt((v186 - v187) * (v186 - v187) + (v188 - v189) * (v188 - v189) + (v190 - v191) * (v190 - v191));
    double v193 = v192 * (v186 - v187);
    double v194 = v192 * (v188 - v189);
    double v195 = v192 * (v190 - v191);
    double v196 = v21[100];
    double v197 = v21[101];
    double v198 = v21[102];
    double v199 = 1.0 / sqrt((v196 - v187) * (v196 - v187) + (v197 - v189) * (v197 - v189) + (v198 - v191) * (v198 - v191));
    double v200 = v199 * (v196 - v187);
    double v201 = v199 * (v197 - v189);
    double v202 = v199 * (v198 - v191);
    double v203 = -(v201 * v195 - v202 * v194);
    double v204 = -(v202 * v193 - v200 * v195);
    double v205 = -(v200 * v194 - v201 * v193);
    double v206 = 1.0 / sqrt(v203 * v203 + v204 * v204 + v205 * v205);
    double v207 = v206 * v204;
    double v208 = v206 * v205;
    v21[62] = v206 * v203;
    v21[63] = v207;
    v21[64] = v208;
    v21[65] = -(v206 * v203 * v187 + v207 * v189 + v208 * v191);
    double v209 = 1.0 / sqrt((v163 - v162) * (v163 - v162) + (v165 - v164) * (v165 - v164) + (v167 - v166) * (v167 - v166));
    double v210 = v209 * (v163 - v162);
    double v211 = v209 * (v165 - v164);
    double v212 = v209 * (v167 - v166);
    double v213 = 1.0 / sqrt((v186 - v162) * (v186 - v162) + (v188 - v164) * (v188 - v164) + (v190 - v166) * (v190 - v166));
    double v214 = v213 * (v186 - v162);
    double v215 = v213 * (v188 - v164);
    double v216 = v213 * (v190 - v166);
    double v217 = -(v215 * v212 - v216 * v211);
    double v218 = -(v216 * v210 - v214 * v212);
    double v219 = -(v214 * v211 - v215 * v210);
    double v220 = 1.0 / sqrt(v217 * v217 + v218 * v218 + v219 * v219);
    double v221 = v220 * v218;
    double v222 = v220 * v219;
    v21[66] = v220 * v217;
    v21[67] = v221;
    v21[68] = v222;
    v21[69] = -(v220 * v217 * v162 + v221 * v164 + v222 * v166);
    double v223 = v21[88];
    double v224 = v173 - v223;
    double v225 = v21[89];
    double v226 = v174 - v225;
    double v227 = v21[90];
    double v228 = v175 - v227;
    double v229 = 1.0 / sqrt(v224 * v224 + v226 * v226 + v228 * v228);
    double v230 = v229 * v224;
    double v231 = v229 * v226;
    double v232 = v229 * v228;
    double v233 = 1.0 / sqrt((v160 - v223) * (v160 - v223) + (v161 - v225) * (v161 - v225) + (v169 - v227) * (v169 - v227));
    double v234 = v233 * (v160 - v223);
    double v235 = v233 * (v161 - v225);
    double v236 = v233 * (v169 - v227);
    double v237 = -(v235 * v232 - v236 * v231);
    double v238 = -(v236 * v230 - v234 * v232);
    double v239 = -(v234 * v231 - v235 * v230);
    double v240 = 1.0 / sqrt(v237 * v237 + v238 * v238 + v239 * v239);
    double v241 = v240 * v238;
    double v242 = v240 * v239;
    v21[70] = v240 * v237;
    v21[71] = v241;
    v21[72] = v242;
    v21[73] = -(v240 * v237 * v223 + v241 * v225 + v242 * v227);
    double v243 = v163 - v186;
    double v244 = v165 - v188;
    double v245 = v167 - v190;
    double v246 = 1.0 / sqrt(v243 * v243 + v244 * v244 + v245 * v245);
    double v247 = v246 * v243;
    double v248 = v246 * v244;
    double v249 = v246 * v245;
    double v250 = v196 - v186;
    double v251 = v197 - v188;
    double v252 = v198 - v190;
    double v253 = 1.0 / sqrt(v250 * v250 + v251 * v251 + v252 * v252);
    double v254 = v253 * v250;
    double v255 = v253 * v251;
    double v256 = v253 * v252;
    double v257 = -(v255 * v249 - v256 * v248);
    double v258 = -(v256 * v247 - v254 * v249);
    double v259 = -(v254 * v248 - v255 * v247);
    double v260 = 1.0 / sqrt(v257 * v257 + v258 * v258 + v259 * v259);
    double v261 = v260 * v258;
    double v262 = v260 * v259;
    v21[74] = v260 * v257;
    v21[75] = v261;
    v21[76] = v262;
    v21[77] = -(v260 * v257 * v186 + v261 * v188 + v262 * v190);
    double v263 = v187 - v162;
    double v264 = 1.0 / sqrt(v263 * v263 + (v189 - v164) * (v189 - v164) + (v191 - v166) * (v191 - v166));
    double v265 = v264 * v263;
    double v266 = v264 * (v189 - v164);
    double v267 = v264 * (v191 - v166);
    double v268 = v160 - v162;
    double v269 = v161 - v164;
    double v270 = v169 - v166;
    double v271 = 1.0 / sqrt(v268 * v268 + v269 * v269 + v270 * v270);
    double v272 = v271 * v268;
    double v273 = v271 * v269;
    double v274 = v271 * v270;
    double v275 = -(v267 * v273 - v266 * v274);
    double v276 = -(v265 * v274 - v267 * v272);
    double v277 = -(v266 * v272 - v265 * v273);
    double v278 = 1.0 / sqrt(v275 * v275 + v276 * v276 + v277 * v277);
    double v279 = v278 * v276;
    double v280 = v278 * v277;
    v21[78] = v278 * v275;
    v21[79] = v279;
    v21[80] = v280;
    v21[81] = -(v278 * v275 * v162 + v279 * v164 + v280 * v166);
  }
  else
  {
    long long v332 = 0x3FF0000000000000uLL;
    *(_OWORD *)&v333[8] = xmmword_1A28FCBC0;
    *(void *)int8x16_t v333 = 0;
    *(void *)&v333[24] = 0;
    *(void *)uint32x4_t v334 = 0;
    *(_OWORD *)&v334[8] = xmmword_1A28FCBD0;
    *(_OWORD *)&v334[24] = xmmword_1A28FCBD0;
    *(_OWORD *)&v334[40] = xmmword_1A28FCBD0;
    *(_OWORD *)&v334[56] = xmmword_1A28FB030;
    *(void *)&v334[72] = 0x3FF0000000000000;
    double v281 = *((double *)this + 29);
    uint64_t v282 = *((void *)this + 30);
    double v284 = *((double *)this + 27);
    double v283 = *((double *)this + 28);
    double v285 = *((double *)this + 25);
    uint64_t v286 = *((void *)this + 26);
    double v288 = *((double *)this + 23);
    double v287 = *((double *)this + 24);
    double v290 = *((double *)this + 21);
    uint64_t v289 = *((void *)this + 22);
    double v292 = *((double *)this + 19);
    double v291 = *((double *)this + 20);
    double v294 = *((double *)this + 17);
    uint64_t v293 = *((void *)this + 18);
    double v296 = *((double *)this + 15);
    double v295 = *((double *)this + 16);
    float64x2x4_t v338 = vld4q_f64((const double *)&v332);
    unsigned int v297 = (const double *)&v334[16];
    float64x2_t v298 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v296), v338.val[1], v295), v338.val[2], v294), v338.val[3], *(double *)&v293);
    float64x2_t v299 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v292), v338.val[1], v291), v338.val[2], v290), v338.val[3], *(double *)&v289);
    float64x2_t v300 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v288), v338.val[1], v287), v338.val[2], v285), v338.val[3], *(double *)&v286);
    float64x2_t v301 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v338.val[0], v284), v338.val[1], v283), v338.val[2], v281), v338.val[3], *(double *)&v282);
    v338.val[0] = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v298, v298), v299, v299), v300, v300));
    __asm { FMOV            V22.2D, #1.0 }
    v338.val[1] = vdivq_f64(_Q22, v338.val[0]);
    v337.val[0] = vmulq_f64(v338.val[1], v298);
    v337.val[1] = vmulq_f64(v338.val[1], v299);
    v337.val[2] = vmulq_f64(v338.val[1], v300);
    v337.val[3] = vdivq_f64(v301, v338.val[0]);
    __int16 v307 = (double *)((char *)this + 504);
    vst4q_f64(v307, v337);
    v307 += 8;
    float64x2x4_t v339 = vld4q_f64(v297);
    float64x2_t v308 = (float64x2_t)vdupq_lane_s64(v282, 0);
    float64x2_t v309 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v296), v339.val[1], v295), v339.val[2], v294), v339.val[3], *(double *)&v293);
    float64x2_t v310 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v292), v339.val[1], v291), v339.val[2], v290), v339.val[3], *(double *)&v289);
    float64x2_t v311 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v288), v339.val[1], v287), v339.val[2], v285), v339.val[3], *(double *)&v286);
    float64x2_t v312 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v339.val[0], v284), v339.val[1], v283), v339.val[2], v281), v339.val[3], *(double *)&v282);
    float64x2_t v313 = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v309, v309), v310, v310), v311, v311));
    float64x2_t v314 = vdivq_f64(_Q22, v313);
    float64x2_t v315 = vmulq_f64(v314, v309);
    float64x2_t v316 = vmulq_f64(v314, v310);
    v339.val[0] = vmulq_f64(v314, v311);
    v339.val[1] = vdivq_f64(v312, v313);
    vst4q_f64(v307, v339);
    unsigned int v317 = (double *)((char *)this + 632);
    float64x2_t v318 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v293, 0), (float64x2_t)xmmword_1A28FCBC0, v294);
    float64x2_t v319 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v289, 0), (float64x2_t)xmmword_1A28FCBC0, v290);
    float64x2_t v320 = vmlaq_n_f64((float64x2_t)vdupq_lane_s64(v286, 0), (float64x2_t)xmmword_1A28FCBC0, v285);
    float64x2_t v321 = vmlaq_n_f64(v308, (float64x2_t)xmmword_1A28FCBC0, v281);
    float64x2_t v322 = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v318, v318), v319, v319), v320, v320));
    float64x2_t v323 = vdivq_f64(_Q22, v322);
    v336.val[0] = vmulq_f64(v323, v318);
    v336.val[1] = vmulq_f64(v323, v319);
    v336.val[2] = vmulq_f64(v323, v320);
    v336.val[3] = vdivq_f64(v321, v322);
    vst4q_f64(v317, v336);
    v336.val[0].f64[0] = *((float64_t *)this + 132);
    v336.val[1].f64[0] = *((float64_t *)this + 136);
    v322.f64[0] = v336.val[1].f64[0] + v336.val[0].f64[0];
    v323.f64[0] = *((float64_t *)this + 140);
    double v324 = *((double *)this + 144);
    v336.val[2].f64[0] = 1.0 / (v324 - (v323.f64[0] + v336.val[1].f64[0] + v336.val[0].f64[0]));
    v319.f64[0] = v324 + v323.f64[0];
    v336.val[3].f64[0] = 1.0 / (v324 + v323.f64[0] - (v336.val[1].f64[0] + v336.val[0].f64[0]));
    v312.f64[0] = 1.0 / (v336.val[1].f64[0] - v336.val[0].f64[0] - v323.f64[0] + v324);
    double v325 = *((double *)this + 129);
    double v326 = *((double *)this + 133);
    double v327 = *((double *)this + 137);
    _Q22.f64[0] = *((float64_t *)this + 141);
    v321.f64[0] = *((float64_t *)this + 130);
    v320.f64[0] = *((float64_t *)this + 134);
    v316.f64[0] = *((float64_t *)this + 138);
    v339.val[0].f64[0] = *((float64_t *)this + 142);
    v339.val[2].f64[0] = *((float64_t *)this + 131);
    v339.val[3].f64[0] = *((float64_t *)this + 135);
    v301.f64[0] = *((float64_t *)this + 139);
    v337.val[0].f64[0] = *((float64_t *)this + 143);
    *((double *)this + 87) = v336.val[2].f64[0] * (_Q22.f64[0] - (v327 + v326 + v325));
    *((double *)this + 88) = v336.val[2].f64[0] * (v339.val[0].f64[0] - (v316.f64[0] + v320.f64[0] + v321.f64[0]));
    *((double *)this + 89) = v336.val[2].f64[0]
                           * (v337.val[0].f64[0] - (v301.f64[0] + v339.val[3].f64[0] + v339.val[2].f64[0]));
    *((double *)this + 90) = v336.val[3].f64[0] * (_Q22.f64[0] + v327 - (v326 + v325));
    *((double *)this + 91) = v336.val[3].f64[0] * (v339.val[0].f64[0] + v316.f64[0] - (v320.f64[0] + v321.f64[0]));
    *((double *)this + 92) = v336.val[3].f64[0]
                           * (v337.val[0].f64[0] + v301.f64[0] - (v339.val[3].f64[0] + v339.val[2].f64[0]));
    *((double *)this + 93) = v312.f64[0] * (v326 - v325 - v327 + _Q22.f64[0]);
    *((double *)this + 94) = v312.f64[0] * (v320.f64[0] - v321.f64[0] - v316.f64[0] + v339.val[0].f64[0]);
    *((double *)this + 95) = v312.f64[0] * (v339.val[3].f64[0] - v339.val[2].f64[0] - v301.f64[0] + v337.val[0].f64[0]);
    v314.f64[0] = 1.0 / (v324 + v323.f64[0] + v336.val[1].f64[0] - v336.val[0].f64[0]);
    *((double *)this + 96) = v314.f64[0] * (_Q22.f64[0] + v327 + v326 - v325);
    *((double *)this + 97) = v314.f64[0] * (v339.val[0].f64[0] + v316.f64[0] + v320.f64[0] - v321.f64[0]);
    *((double *)this + 98) = v314.f64[0] * (v337.val[0].f64[0] + v301.f64[0] + v339.val[3].f64[0] - v339.val[2].f64[0]);
    v336.val[0].f64[0] = v336.val[0].f64[0] - v336.val[1].f64[0];
    v336.val[1].f64[0] = 1.0 / (v336.val[0].f64[0] - v323.f64[0] + v324);
    *((double *)this + 99) = v336.val[1].f64[0] * (v325 - v326 - v327 + _Q22.f64[0]);
    *((double *)this + 100) = v336.val[1].f64[0] * (v321.f64[0] - v320.f64[0] - v316.f64[0] + v339.val[0].f64[0]);
    *((double *)this + 101) = v336.val[1].f64[0]
                            * (v339.val[2].f64[0] - v339.val[3].f64[0] - v301.f64[0] + v337.val[0].f64[0]);
    v336.val[0].f64[0] = 1.0 / (v324 + v323.f64[0] + v336.val[0].f64[0]);
    *((double *)this + 102) = v336.val[0].f64[0] * (_Q22.f64[0] + v327 + v325 - v326);
    *((double *)this + 103) = v336.val[0].f64[0] * (v339.val[0].f64[0] + v316.f64[0] + v321.f64[0] - v320.f64[0]);
    *((double *)this + 104) = v336.val[0].f64[0]
                            * (v337.val[0].f64[0] + v301.f64[0] + v339.val[2].f64[0] - v339.val[3].f64[0]);
    v323.f64[0] = 1.0 / (v322.f64[0] - v323.f64[0] + v324);
    *((double *)this + 105) = v323.f64[0] * (v326 + v325 - v327 + _Q22.f64[0]);
    *((double *)this + 106) = v323.f64[0] * (v320.f64[0] + v321.f64[0] - v316.f64[0] + v339.val[0].f64[0]);
    *((double *)this + 107) = v323.f64[0] * (v339.val[3].f64[0] + v339.val[2].f64[0] - v301.f64[0] + v337.val[0].f64[0]);
    v322.f64[0] = 1.0 / (v319.f64[0] + v322.f64[0]);
    *((double *)this + 108) = v322.f64[0] * (_Q22.f64[0] + v327 + v326 + v325);
    *((double *)this + 109) = v322.f64[0] * (v339.val[0].f64[0] + v316.f64[0] + v320.f64[0] + v321.f64[0]);
    *((double *)this + 110) = v322.f64[0] * (v337.val[0].f64[0] + v301.f64[0] + v339.val[3].f64[0] + v339.val[2].f64[0]);
  }
}

uint64_t karo::graphics::View::setFrame(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, 1);
}

double karo::graphics::View::copyView(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  long long v3 = *(_OWORD *)(a2 + 504);
  long long v4 = *(_OWORD *)(a2 + 520);
  long long v5 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 552) = v5;
  *(_OWORD *)(a1 + 504) = v3;
  *(_OWORD *)(a1 + 520) = v4;
  long long v6 = *(_OWORD *)(a2 + 568);
  long long v7 = *(_OWORD *)(a2 + 584);
  long long v8 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v8;
  *(_OWORD *)(a1 + 568) = v6;
  *(_OWORD *)(a1 + 584) = v7;
  long long v9 = *(_OWORD *)(a2 + 632);
  long long v10 = *(_OWORD *)(a2 + 648);
  long long v11 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v11;
  *(_OWORD *)(a1 + 632) = v9;
  *(_OWORD *)(a1 + 648) = v10;
  long long v12 = *(_OWORD *)(a2 + 696);
  long long v13 = *(_OWORD *)(a2 + 712);
  long long v14 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 744) = v14;
  *(_OWORD *)(a1 + 696) = v12;
  *(_OWORD *)(a1 + 712) = v13;
  long long v15 = *(_OWORD *)(a2 + 760);
  long long v16 = *(_OWORD *)(a2 + 776);
  long long v17 = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
  *(_OWORD *)(a1 + 808) = v17;
  *(_OWORD *)(a1 + 760) = v15;
  *(_OWORD *)(a1 + 776) = v16;
  long long v18 = *(_OWORD *)(a2 + 824);
  long long v19 = *(_OWORD *)(a2 + 840);
  long long v20 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 872) = v20;
  *(_OWORD *)(a1 + 824) = v18;
  *(_OWORD *)(a1 + 840) = v19;
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(unsigned char *)(a1 + 1016) = *(unsigned char *)(a2 + 1016);
  uint64_t v21 = a2 + 40;
  uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a2 + 40) + 24))(a2 + 40);
  *(void *)(a1 + 72) = v22[3];
  *(void *)(a1 + 80) = v22[4];
  *(void *)(a1 + 88) = v22[5];
  *(void *)(a1 + 96) = v22[6];
  *(void *)(a1 + 48) = *v22;
  *(void *)(a1 + 56) = v22[1];
  *(void *)(a1 + 64) = v22[2];
  *(void *)(a1 + 32) = *(void *)(v21 - 8);
  *(void *)(a1 + 1032) = *(void *)(v21 + 992);
  *(void *)(a1 + 1040) = *(void *)(v21 + 1000);
  *(void *)(a1 + 1048) = *(void *)(v21 + 1008);
  *(void *)(a1 + 1056) = *(void *)(v21 + 1016);
  *(void *)(a1 + 1064) = *(void *)(v21 + 1024);
  *(void *)(a1 + 1072) = *(void *)(v21 + 1032);
  *(void *)(a1 + 1080) = *(void *)(v21 + 1040);
  *(void *)(a1 + 1088) = *(void *)(v21 + 1048);
  *(void *)(a1 + 1096) = *(void *)(v21 + 1056);
  *(void *)(a1 + 1104) = *(void *)(v21 + 1064);
  *(void *)(a1 + 1112) = *(void *)(v21 + 1072);
  *(void *)(a1 + 1120) = *(void *)(v21 + 1080);
  *(void *)(a1 + 1128) = *(void *)(v21 + 1088);
  *(void *)(a1 + 1136) = *(void *)(v21 + 1096);
  *(void *)(a1 + 1144) = *(void *)(v21 + 1104);
  *(void *)(a1 + 1152) = *(void *)(v21 + 1112);
  *(void *)(a1 + 1160) = *(void *)(v21 + 1120);
  *(void *)(a1 + 1168) = *(void *)(v21 + 1128);
  *(void *)(a1 + 1176) = *(void *)(v21 + 1136);
  *(void *)(a1 + 1184) = *(void *)(v21 + 1144);
  *(void *)(a1 + 1192) = *(void *)(v21 + 1152);
  *(void *)(a1 + 1200) = *(void *)(v21 + 1160);
  *(void *)(a1 + 1208) = *(void *)(v21 + 1168);
  *(void *)(a1 + 1216) = *(void *)(v21 + 1176);
  *(void *)(a1 + 1224) = *(void *)(v21 + 1184);
  *(void *)(a1 + 1232) = *(void *)(v21 + 1192);
  *(void *)(a1 + 1240) = *(void *)(v21 + 1200);
  *(void *)(a1 + 1248) = *(void *)(v21 + 1208);
  *(void *)(a1 + 1256) = *(void *)(v21 + 1216);
  *(void *)(a1 + 1264) = *(void *)(v21 + 1224);
  *(void *)(a1 + 1272) = *(void *)(v21 + 1232);
  double result = *(double *)(v21 + 1240);
  *(double *)(a1 + 1280) = result;
  return result;
}

void karo::graphics::View::projectionUpdate(karo::graphics::View *this, int a2)
{
  double v4 = *((double *)this + 10);
  double v5 = *((double *)this + 11);
  double v6 = *((double *)this + 12);
  double v8 = *((double *)this + 8);
  double v7 = *((double *)this + 9);
  double v10 = *((double *)this + 6);
  double v9 = *((double *)this + 7);
  double v11 = -(v8 * v4 - v9 * v5) - (v8 * v4 - v9 * v5);
  double v12 = -(v10 * v5 - v8 * v7) - (v10 * v5 - v8 * v7);
  double v13 = -(v9 * v7 - v10 * v4) - (v9 * v7 - v10 * v4);
  double v14 = -(v13 * v7 - (-(v9 - v11 * v5) - v12 * v6));
  double v15 = -(v10 + v11 * v6 + v12 * v5 - v13 * v4);
  double v16 = v8 + v11 * v4 + v13 * v6;
  double v17 = v4 * -2.0;
  double v18 = -(v4 * (v4 * -2.0));
  double v19 = 1.0 - (v18 - v5 * (v5 * -2.0));
  double v20 = -(v4 * (v7 * -2.0));
  double v21 = v5 * -2.0 * v6;
  double v22 = v20 - v21;
  double v23 = -(v5 * (v7 * -2.0));
  double v24 = v6 * v17;
  double v25 = v21 + v20;
  double v26 = v6 * v17 - v5 * (v7 * -2.0);
  double v27 = v7 * -2.0 * v7 + 1.0;
  double v28 = v27 - -(v5 * (v5 * -2.0));
  double v29 = -(v5 * v17);
  double v30 = v6 * (v7 * -2.0);
  *((double *)this + 31) = v19;
  *((double *)this + 32) = v25;
  *((double *)this + 33) = v23 - v24;
  *((void *)this + 34) = 0;
  *((double *)this + 35) = v22;
  *((double *)this + 36) = v28;
  *((double *)this + 37) = v30 + v29;
  *((void *)this + 38) = 0;
  *((double *)this + 39) = v26;
  *((double *)this + 40) = v29 - v30;
  *((double *)this + 41) = v27 - v18;
  *((void *)this + 42) = 0;
  *((double *)this + 43) = v15;
  *((double *)this + 44) = v14;
  *((double *)this + 45) = -(v16 - v12 * v7);
  *((void *)this + 46) = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v78, (double *)this + 47, (double *)this + 31);
  long long v31 = v78[1];
  *(_OWORD *)((char *)this + 120) = v78[0];
  *(_OWORD *)((char *)this + 136) = v31;
  long long v32 = v78[3];
  *(_OWORD *)((char *)this + 152) = v78[2];
  *(_OWORD *)((char *)this + 168) = v32;
  long long v33 = v78[5];
  *(_OWORD *)((char *)this + 184) = v78[4];
  *(_OWORD *)((char *)this + 200) = v33;
  long long v34 = v78[7];
  *(_OWORD *)((char *)this + 216) = v78[6];
  *(_OWORD *)((char *)this + 232) = v34;
  karo::graphics::View::updatePlanesAndCorners(this);
  double v35 = *((double *)this + 87);
  double v36 = *((double *)this + 108);
  double v37 = v35 - v36;
  double v38 = *((double *)this + 88);
  double v39 = *((double *)this + 109);
  double v40 = v38 - v39;
  double v41 = *((double *)this + 89);
  double v42 = *((double *)this + 110);
  double v43 = v41 - v42;
  double v44 = (v35 - v36) * 0.5;
  double v45 = (v38 - v39) * 0.5;
  double v46 = (v41 - v42) * 0.5;
  double v47 = v44 * v44 + v45 * v45 + v46 * v46;
  double v48 = v44 + v36;
  double v49 = v45 + v39;
  double v50 = v46 + v42;
  double v51 = fmax((v35 - v48) * 0.5 * ((v35 - v48) * 0.5)+ (v38 - v49) * 0.5 * ((v38 - v49) * 0.5)+ (v41 - (v46 + v42)) * 0.5 * ((v41 - (v46 + v42)) * 0.5), v47);
  double v52 = (*((double *)this + 92) - (v46 + v42)) * 0.5;
  double v53 = fmax((*((double *)this + 99) - v48) * 0.5 * ((*((double *)this + 99) - v48) * 0.5)+ (*((double *)this + 100) - v49) * 0.5 * ((*((double *)this + 100) - v49) * 0.5)+ (*((double *)this + 101) - v50) * 0.5 * ((*((double *)this + 101) - v50) * 0.5), fmax((*((double *)this + 96) - v48) * 0.5 * ((*((double *)this + 96) - v48) * 0.5)+ (*((double *)this + 97) - v49) * 0.5 * ((*((double *)this + 97) - v49) * 0.5)+ (*((double *)this + 98) - v50) * 0.5 * ((*((double *)this + 98) - v50) * 0.5), fmax((*((double *)this + 93) - v48) * 0.5 * ((*((double *)this + 93) - v48) * 0.5)+ (*((double *)this + 94) - v49) * 0.5 * ((*((double *)this + 94) - v49) * 0.5)+ (*((double *)this + 95) - v50) * 0.5 * ((*((double *)this + 95) - v50) * 0.5), fmax((*((double *)this + 90) - v48) * 0.5 * ((*((double *)this + 90) - v48) * 0.5)+ (*((double *)this + 91) - v49) * 0.5 * ((*((double *)this + 91) - v49) * 0.5)+ v52 * v52, v51))));
  double v54 = fmax(v37 * -0.25 * (v37 * -0.25) + v40 * -0.25 * (v40 * -0.25) + v43 * -0.25 * (v43 * -0.25), fmax((*((double *)this + 105) - v48) * 0.5 * ((*((double *)this + 105) - v48) * 0.5)+ (*((double *)this + 106) - v49) * 0.5 * ((*((double *)this + 106) - v49) * 0.5)+ (*((double *)this + 107) - v50) * 0.5 * ((*((double *)this + 107) - v50) * 0.5), fmax((*((double *)this + 102) - v48) * 0.5 * ((*((double *)this + 102) - v48) * 0.5)+ (*((double *)this + 103) - v49) * 0.5 * ((*((double *)this + 103) - v49) * 0.5)+ (*((double *)this + 104) - v50) * 0.5 * ((*((double *)this + 104) - v50) * 0.5), v53)));
  double v55 = *((double *)this + 10);
  double v56 = *((double *)this + 11);
  double v57 = *((double *)this + 12);
  double v59 = *((double *)this + 8);
  double v58 = *((double *)this + 9);
  double v61 = *((double *)this + 6);
  double v60 = *((double *)this + 7);
  double v62 = -(v59 * v55 - v60 * v56) - (v59 * v55 - v60 * v56);
  double v63 = -(v61 * v56 - v59 * v58) - (v61 * v56 - v59 * v58);
  double v64 = -(v60 * v58 - v61 * v55) - (v60 * v58 - v61 * v55);
  double v65 = -(v55 * v50 - v56 * v49) - (v55 * v50 - v56 * v49);
  double v66 = -(v56 * v48 - v58 * v50) - (v56 * v48 - v58 * v50);
  double v67 = -(v58 * v49 - v55 * v48) - (v58 * v49 - v55 * v48);
  double v68 = v48 - v61 + v65 * v57 + v66 * v56 + v64 * v55 - (v67 * v55 + v62 * v57 + v63 * v56);
  double v69 = v49 - v60 + v67 * v58 + v66 * v57 + v62 * v56 - (v65 * v56 + v63 * v57 + v64 * v58);
  double v70 = v50 - v59 + v67 * v57 + v65 * v55 + v63 * v58 - (v66 * v58 + v62 * v55 + v64 * v57);
  *((double *)this + 111) = v68;
  *((double *)this + 112) = v69;
  *((double *)this + 113) = v70;
  double v71 = -(v69 * v56 - v70 * v55) - (v69 * v56 - v70 * v55);
  double v72 = -(v70 * v58 - v68 * v56) - (v70 * v58 - v68 * v56);
  double v73 = -(v68 * v55 - v69 * v58) - (v68 * v55 - v69 * v58);
  *(double *)&long long v74 = v68 + v61 + v71 * v57 + v73 * v55 - v72 * v56;
  *(double *)&long long v75 = v70 + v59 + v72 * v58 + v73 * v57 - v71 * v55;
  *((double *)&v74 + 1) = v69 + v60 + v71 * v56 + v72 * v57 - v73 * v58;
  *((void *)&v75 + 1) = sqrt(v54);
  *((_OWORD *)this + 57) = v74;
  *((_OWORD *)this + 58) = v75;
  if (a2)
  {
    int v76 = *((_DWORD *)this + 28);
    if (v76 == -2) {
      int v77 = v76 + 2;
    }
    else {
      int v77 = v76 + 1;
    }
    *((_DWORD *)this + 28) = v77;
  }
}

void karo::graphics::View::setFar(karo::graphics::View *this, double a2, double a3, int a4)
{
  if (*((unsigned char *)this + 1016))
  {
    double v7 = *((double *)this + 122);
    double v8 = *((double *)this + 123);
    double v9 = *((double *)this + 121);
    double v10 = *((double *)this + 120);
    double v11 = *((double *)this + 119);
    *((double *)this + 118) = a2;
    *((double *)this + 126) = a3;
    double v12 = v8 - v7;
    double v13 = 2.0 / (v8 - v7);
    double v14 = a3 + -1.0;
    double v15 = 1.0;
    if (!a4) {
      double v14 = 1.0 - a3;
    }
    double v16 = v8 + v7;
    *((double *)this + 47) = v13;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((double *)this + 52) = 2.0 / (v10 - v9);
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v14 / (a2 - v11);
    *((void *)this + 58) = 0;
    *((double *)this + 59) = -v16 / v12;
    *((double *)this + 60) = -(v10 + v9) / (v10 - v9);
    *((double *)this + 61) = (a3 * a2 - v11) / (a2 - v11);
    *((void *)this + 62) = 0x3FF0000000000000;
    *((double *)this + 145) = v12 * 0.5;
    *((void *)this + 154) = 0;
    *((_OWORD *)this + 76) = 0u;
    *((_OWORD *)this + 75) = 0u;
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((double *)this + 155) = (a2 - v11) / v14;
    *((double *)this + 157) = v16 * 0.5;
    *((double *)this + 158) = v9;
    *((unsigned char *)this + 1016) = 1;
    double v17 = 0.0;
    double v18 = (v11 - a3 * a2) / v14;
  }
  else
  {
    double v19 = *((double *)this + 124);
    double v20 = *((double *)this + 119);
    long double v21 = tan(*((double *)this + 125) * 0.5);
    *((double *)this + 118) = a2;
    *((long double *)this + 122) = -(v21 * v20 * v19);
    *((long double *)this + 123) = v21 * v20 * v19;
    *((long double *)this + 121) = -(v21 * v20);
    *((long double *)this + 120) = v21 * v20;
    *((double *)this + 126) = a3;
    *((unsigned char *)this + 1016) = 0;
    long double v22 = (v20 + v20) * v19 * v21;
    double v23 = -(a2 - v20 * a3);
    double v24 = -(a2 - a3 * a2) * v20;
    *((long double *)this + 47) = (v20 + v20) / v22;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((long double *)this + 52) = 1.0 / v21;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v23 / (a2 - v20);
    *((void *)this + 59) = 0;
    *((void *)this + 60) = 0;
    *((void *)this + 58) = 0xBFF0000000000000;
    *((double *)this + 61) = v24 / (a2 - v20);
    *((void *)this + 62) = 0;
    double v17 = (a2 - v20) / v24;
    *((long double *)this + 145) = v22 / (v20 + v20);
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((long double *)this + 150) = v21;
    *(_OWORD *)((char *)this + 1208) = 0u;
    *(_OWORD *)((char *)this + 1224) = 0u;
    *((void *)this + 155) = 0;
    *((void *)this + 157) = 0;
    *((void *)this + 158) = 0;
    double v18 = -1.0;
    double v15 = v23 / v24;
  }
  *((double *)this + 156) = v17;
  *((double *)this + 159) = v18;
  *((double *)this + 160) = v15;
  karo::graphics::View::projectionUpdate(this, 1);
}

void karo::graphics::View::setNear(karo::graphics::View *this, double a2, double a3, int a4)
{
  if (*((unsigned char *)this + 1016))
  {
    double v7 = *((double *)this + 122);
    double v8 = *((double *)this + 123);
    double v9 = *((double *)this + 121);
    double v10 = *((double *)this + 120);
    double v11 = *((double *)this + 118);
    *((double *)this + 119) = a2;
    *((double *)this + 126) = a3;
    double v12 = v8 - v7;
    double v13 = 2.0 / (v8 - v7);
    double v14 = a3 + -1.0;
    double v15 = 1.0;
    if (!a4) {
      double v14 = 1.0 - a3;
    }
    double v16 = v11 - a2;
    double v17 = v14 / (v11 - a2);
    double v18 = v8 + v7;
    double v19 = v11 * a3;
    *((double *)this + 47) = v13;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((double *)this + 52) = 2.0 / (v10 - v9);
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v17;
    *((void *)this + 58) = 0;
    *((double *)this + 59) = -v18 / v12;
    *((double *)this + 60) = -(v10 + v9) / (v10 - v9);
    *((double *)this + 61) = (v19 - a2) / v16;
    *((void *)this + 62) = 0x3FF0000000000000;
    *((double *)this + 145) = v12 * 0.5;
    *((void *)this + 154) = 0;
    *((_OWORD *)this + 76) = 0u;
    *((_OWORD *)this + 75) = 0u;
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((double *)this + 155) = v16 / v14;
    *((double *)this + 157) = v18 * 0.5;
    *((double *)this + 158) = v9;
    *((unsigned char *)this + 1016) = 1;
    double v20 = 0.0;
    double v21 = (a2 - v19) / v14;
  }
  else
  {
    double v22 = *((double *)this + 124);
    double v23 = *((double *)this + 118);
    long double v24 = tan(*((double *)this + 125) * 0.5);
    *((double *)this + 119) = a2;
    *((long double *)this + 122) = -(v24 * a2 * v22);
    *((long double *)this + 123) = v24 * a2 * v22;
    *((long double *)this + 121) = -(v24 * a2);
    *((long double *)this + 120) = v24 * a2;
    *((double *)this + 126) = a3;
    *((unsigned char *)this + 1016) = 0;
    long double v25 = v22 * (a2 + a2) * v24;
    double v26 = -(v23 - a3 * a2);
    double v27 = -(a2 - a3 * a2) * v23;
    *((long double *)this + 47) = (a2 + a2) / v25;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((long double *)this + 52) = 1.0 / v24;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *((double *)this + 57) = v26 / (v23 - a2);
    *((void *)this + 59) = 0;
    *((void *)this + 60) = 0;
    *((void *)this + 58) = 0xBFF0000000000000;
    *((double *)this + 61) = v27 / (v23 - a2);
    *((void *)this + 62) = 0;
    double v20 = (v23 - a2) / v27;
    *((long double *)this + 145) = v25 / (a2 + a2);
    *((_OWORD *)this + 74) = 0u;
    *((_OWORD *)this + 73) = 0u;
    *((long double *)this + 150) = v24;
    *(_OWORD *)((char *)this + 1208) = 0u;
    *(_OWORD *)((char *)this + 1224) = 0u;
    *((void *)this + 155) = 0;
    *((void *)this + 157) = 0;
    *((void *)this + 158) = 0;
    double v21 = -1.0;
    double v15 = v26 / v27;
  }
  *((double *)this + 156) = v20;
  *((double *)this + 159) = v21;
  *((double *)this + 160) = v15;
  karo::graphics::View::projectionUpdate(this, 1);
}

uint64_t karo::graphics::View::relates(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  float64x2_t v3 = *(float64x2_t *)(a2 + 8);
  float64x2_t v4 = vsubq_f64(v3, *(float64x2_t *)(a1 + 920));
  float64x2_t v5 = vmulq_f64(v4, v4);
  double v6 = *(double *)(a2 + 24);
  if (sqrt(v5.f64[0] + (*(double *)a2 - *(double *)(a1 + 912)) * (*(double *)a2 - *(double *)(a1 + 912)) + v5.f64[1]) > v6 + *(double *)(a1 + 936)) {
    return 0;
  }
  float64x2_t v7 = vmulq_f64(*(float64x2_t *)(a1 + 512), v3);
  double v8 = v7.f64[0] + *(double *)(a1 + 504) * v2 + v7.f64[1] + *(double *)(a1 + 528);
  double v9 = -v6;
  if (v8 <= -v6) {
    return 0;
  }
  float64x2_t v10 = vmulq_f64(*(float64x2_t *)(a1 + 544), v3);
  double v11 = v10.f64[0] + *(double *)(a1 + 536) * v2 + v10.f64[1] + *(double *)(a1 + 560);
  if (v11 <= v9) {
    return 0;
  }
  float64x2_t v12 = vmulq_f64(*(float64x2_t *)(a1 + 576), v3);
  double v13 = v12.f64[0] + *(double *)(a1 + 568) * v2 + v12.f64[1] + *(double *)(a1 + 592);
  if (v13 <= v9) {
    return 0;
  }
  float64x2_t v14 = vmulq_f64(*(float64x2_t *)(a1 + 608), v3);
  double v15 = v14.f64[0] + *(double *)(a1 + 600) * v2 + v14.f64[1] + *(double *)(a1 + 624);
  if (v15 <= v9) {
    return 0;
  }
  float64x2_t v16 = vmulq_f64(*(float64x2_t *)(a1 + 640), v3);
  double v17 = v16.f64[0] + *(double *)(a1 + 632) * v2 + v16.f64[1] + *(double *)(a1 + 656);
  if (v17 <= v9) {
    return 0;
  }
  float64x2_t v18 = vmulq_f64(*(float64x2_t *)(a1 + 672), v3);
  double v19 = v18.f64[0] + *(double *)(a1 + 664) * v2 + v18.f64[1] + *(double *)(a1 + 688);
  if (v19 <= v9) {
    return 0;
  }
  int v20 = v11 >= v6;
  if (v8 >= v6) {
    ++v20;
  }
  if (v13 >= v6) {
    ++v20;
  }
  if (v15 >= v6) {
    ++v20;
  }
  if (v17 >= v6) {
    ++v20;
  }
  if (v19 >= v6) {
    ++v20;
  }
  if (v20 == 6) {
    return 2;
  }
  else {
    return 1;
  }
}

void karo::graphics::View::lookAt(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = *a2;
  a1[6] = *a2;
  double v5 = a2[1];
  a1[7] = v5;
  double v6 = a2[2];
  a1[8] = v6;
  double v7 = *a3 - v4;
  double v8 = a3[1] - v5;
  double v9 = a3[2] - v6;
  double v10 = 1.0 / sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  double v11 = -(v7 * v10);
  double v12 = -(v8 * v10);
  double v13 = -(v9 * v10);
  double v14 = a4[1];
  double v15 = a4[2];
  double v16 = 1.0 / sqrt(*a4 * *a4 + v14 * v14 + v15 * v15);
  double v17 = v16 * *a4;
  double v18 = v16 * v14;
  double v19 = v16 * v15;
  double v20 = -(v19 * v12 - v18 * v13);
  double v21 = -(v17 * v13 - v19 * v11);
  double v22 = -(v18 * v11 - v17 * v12);
  double v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  double v24 = v23 * v20;
  double v25 = v23 * v21;
  double v26 = v23 * v22;
  double v27 = -(v23 * v21 * v13 - v26 * v12);
  double v28 = -(v26 * v11 - v23 * v20 * v13);
  double v29 = -(v24 * v12 - v25 * v11);
  double v30 = v24 - (v26 * v11 - v24 * v13);
  if (v30 + v13 <= 0.0)
  {
    if (v24 > v28)
    {
      BOOL v36 = v24 == v13;
      BOOL v37 = v24 < v13;
    }
    else
    {
      BOOL v36 = 1;
      BOOL v37 = 0;
    }
    if (v37 || v36)
    {
      BOOL v38 = v28 == v13;
      BOOL v39 = v28 < v13;
      double v40 = sqrt(v13 + 1.0 - v30);
      double v41 = 1.0 / (v40 + v40);
      double v42 = (v26 + v11) * v41;
      double v43 = v12 - (v24 * v12 - v25 * v11);
      double v44 = v43 * v41;
      double v45 = v40 * 0.5;
      double v46 = (v25 - v27) * v41;
      double v47 = sqrt(1.0 - (v13 + v24) - (v26 * v11 - v24 * v13));
      double v48 = v27 + v25;
      double v49 = 1.0 / (v47 + v47);
      double v50 = v48 * v49;
      double v33 = v47 * 0.5;
      double v51 = v43 * v49;
      double v52 = (v11 - v26) * v49;
      if (v39 || v38) {
        double v32 = v42;
      }
      else {
        double v32 = v50;
      }
      if (v39 || v38)
      {
        double v33 = v44;
        double v34 = v45;
      }
      else
      {
        double v34 = v51;
      }
      if (v39 || v38) {
        double v35 = v46;
      }
      else {
        double v35 = v52;
      }
    }
    else
    {
      double v53 = sqrt(v24 + 1.0 - (v13 - (v26 * v11 - v24 * v13)));
      double v54 = v53 + v53;
      double v32 = v53 * 0.5;
      double v33 = (v27 + v25) * (1.0 / v54);
      double v34 = (v26 + v11) * (1.0 / v54);
      double v35 = (v29 - v12) * (1.0 / v54);
    }
  }
  else
  {
    double v31 = 0.5 / sqrt(v30 + v13 + 1.0);
    double v32 = v31 * (v29 - v12);
    double v33 = v31 * (v11 - v26);
    double v34 = v31 * (v25 - v27);
    double v35 = 0.25 / v31;
  }
  a1[9] = v32;
  a1[10] = v33;
  a1[11] = v34;
  a1[12] = v35;
  karo::graphics::View::orientationUpdate((karo::graphics::View *)a1, 1);
}

void md::StandardLabeler::labelMarkerForSelectionAtPixel(void *a1@<X0>, float *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  int v4 = a3;
  double v5 = a2;
  uint64_t v32 = 0;
  char v33 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = mdm::Allocator::instance(void)::alloc;
    int v38 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v39 = 0;
    if ((atomic_load_explicit(v8, memory_order_acquire) & 1) == 0)
    {
      int v26 = v4;
      double v24 = v5;
      double v5 = v24;
      int v4 = v26;
      if (v20) {
        operator new();
      }
    }
    uint64_t v42 = mdm::Allocator::instance(void)::alloc;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    if ((atomic_load_explicit(v8, memory_order_acquire) & 1) == 0)
    {
      int v27 = v4;
      double v21 = v5;
      double v5 = v21;
      int v4 = v27;
      if (v22) {
        operator new();
      }
    }
    uint64_t v46 = mdm::Allocator::instance(void)::alloc;
    double v31 = 0;
    md::StandardLabeler::labelAtPixel(&v29, a1, v5, v4, (uint64_t *)&v31);
    if (!v29)
    {
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_16;
    }
    uint64_t v9 = a1[30];
    if (v9 && !*(unsigned char *)(v9 + 224) && *(md::Label **)(v9 + 288) == v29)
    {
      uint64_t v18 = a1[31];
      *a4 = v9;
      a4[1] = v18;
      if (!v18) {
        goto LABEL_16;
      }
LABEL_33:
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_16;
    }
    uint64_t v10 = a1[32];
    if (v10 && !*(unsigned char *)(v10 + 224) && *(md::Label **)(v10 + 288) == v29)
    {
      uint64_t v18 = a1[33];
      *a4 = v10;
      a4[1] = v18;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_33;
    }
    md::Label::populateFeatureInfo(v29, (md::LabelFeatureInfo *)&v32, v31);
    uint64_t v11 = a1[3];
    double v8 = *(atomic_uchar **)(v11 + 8);
    double v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12)
    {
      double v13 = std::__shared_weak_count::lock(v12);
      if (v13) {
        break;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_35:
    int v25 = v4;
    double v23 = v5;
    double v5 = v23;
    int v4 = v25;
    if (v19) {
      operator new();
    }
  }
  double v14 = v13;
  std::allocate_shared[abi:nn180100]<md::StandardLabelMarker,std::allocator<md::StandardLabelMarker>,std::shared_ptr<md::LabelManager>,std::shared_ptr<md::Label> &,float,md::LabelFeatureInfo &,void>((uint64_t *)&v28, (uint64_t)v8, v13, (uint64_t *)&v29, (uint64_t)&v32, *(float *)(a1[3] + 176));
  *(_OWORD *)a4 = v28;
  long long v28 = 0uLL;
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_16:
  double v15 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v41) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 40))(v46, v43, v45 & 0x7FFFFFFFFFFFFFFFLL);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
LABEL_20:
    uint64_t v16 = v35;
    if (!(void)v35) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 40))(v42, v39, v41 & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v16 = v35;
  if ((void)v35)
  {
LABEL_21:
    *((void *)&v35 + 1) = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 40))(v37, v16, v36 - v16);
  }
LABEL_22:
  double v17 = (std::__shared_weak_count *)*((void *)&v34 + 1);
  if (*((void *)&v34 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1A1DD33BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)va2);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::labelAtPixel(void *a1, void *a2, float *a3, int a4, uint64_t *a5)
{
  *a1 = 0;
  a1[1] = 0;
  if (a5) {
    *a5 = 0;
  }
  uint64_t v9 = (void *)a2[13];
  uint64_t v10 = (void *)a2[14];
  if (v9 != v10)
  {
    float v11 = *(float *)(a2[3] + 176);
    float v12 = INFINITY;
    do
    {
      uint64_t v13 = *v9;
      if ((*(unsigned char *)(*v9 + 1072) & 0xFD) == 1)
      {
        if (!a4)
        {
          uint64_t v15 = 0;
          float v14 = 22.0;
          goto LABEL_12;
        }
        float v14 = 15.0;
        if (*(unsigned char *)(v13 + 1076))
        {
          uint64_t v15 = 0;
LABEL_12:
          float v26 = 0.0;
          float v16 = *a3;
          float v17 = a3[1];
          *(unsigned char *)(v13 + 1212) = 0;
          uint64_t v18 = *(void *)(v13 + 272);
          if (v18)
          {
            uint64_t v19 = (*(uint64_t (**)(uint64_t, float *, uint64_t, float, float, float))(*(void *)v18 + 632))(v18, &v26, v15, v16, v17, v14 * v11);
            uint64_t v20 = v19;
            if (v19)
            {
              *(unsigned char *)(v13 + 1212) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 656))(v19);
              float v21 = v26;
              if (v26 < v12)
              {
                uint64_t v23 = *v9;
                uint64_t v22 = v9[1];
                if (v22) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
                }
                double v24 = (std::__shared_weak_count *)a1[1];
                *a1 = v23;
                a1[1] = v22;
                if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
                if (a5) {
                  *a5 = v20;
                }
                float v12 = v21;
              }
            }
          }
          goto LABEL_6;
        }
        uint64_t v25 = *(void *)(v13 + 272);
        if (v25 && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 640))(v25))
        {
          uint64_t v13 = *v9;
          uint64_t v15 = 1;
          goto LABEL_12;
        }
      }
LABEL_6:
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_1A1DD3608(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<md::StandardLabelMarker,std::allocator<md::StandardLabelMarker>,std::shared_ptr<md::LabelManager>,std::shared_ptr<md::Label> &,float,md::LabelFeatureInfo &,void>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5, float a6)
{
  float v12 = (std::__shared_weak_count *)operator new(0x170uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D78;
  uint64_t v13 = md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v12[1], a2, a3, a4, a5, a6);
  *a1 = v13;
  a1[1] = (uint64_t)v12;
  shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v12[1].__shared_owners_ = v13;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v12[1].__shared_owners_ = v13;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A1DD3778(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::LabelFeatureInfo::~LabelFeatureInfo(md::LabelFeatureInfo *this)
{
  if (*((char *)this + 127) < 0)
  {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), *((void *)this + 13), *((void *)this + 15) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 4);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(void, void, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), *((void *)this + 9), *((void *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
LABEL_4:
    *((void *)this + 5) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v2, *((void *)this + 6) - v2);
  }
LABEL_5:
  float64x2_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t std::__shared_ptr_emplace<md::StandardLabelMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::StandardLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StandardLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::StandardLabeler::labelMarkerForCustomFeatureAnnotation(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v7 = a2;
  id v8 = a3;
  long long v39 = 0uLL;
  md::LabelCustomFeatureSupport::featureForAnnotation(&v37, a1[4], v8, v7);
  uint64_t v9 = v37;
  if (!v37
    || !*(void *)(*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)v37 + 552))(v37, 0, 0, 0, 0)&& *(_DWORD *)(v9 + 128)|| (uint64_t v10 = a1[6], v11 = a1[3], LODWORD(v22) = 1, md::LabelPool::labelForCustomFeature(&v23, v10, v11, &v37, (unsigned int *)&v22, 0), v12 = v23, *((void *)&v23 + 1) = 0, v39 = v12, !(void)v12))
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_19;
  }
  *(void *)&long long v23 = 0;
  BYTE8(v23) = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  while (1)
  {
    uint64_t v27 = mdm::Allocator::instance(void)::alloc;
    int v28 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = 0;
    if ((atomic_load_explicit(v13, memory_order_acquire) & 1) == 0
    {
      operator new();
    }
    uint64_t v32 = mdm::Allocator::instance(void)::alloc;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if ((atomic_load_explicit(v13, memory_order_acquire) & 1) == 0
    {
      operator new();
    }
    uint64_t v36 = mdm::Allocator::instance(void)::alloc;
    md::Label::populateFeatureInfo((md::Label *)v39, (md::LabelFeatureInfo *)&v23, 0);
    uint64_t v14 = a1[3];
    uint64_t v13 = *(atomic_uchar **)(v14 + 8);
    uint64_t v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15)
    {
      float v16 = std::__shared_weak_count::lock(v15);
      if (v16) {
        break;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_31:
      operator new();
  }
  float v17 = v16;
  std::allocate_shared[abi:nn180100]<md::StandardLabelMarker,std::allocator<md::StandardLabelMarker>,std::shared_ptr<md::LabelManager>,std::shared_ptr<md::Label> &,float,md::LabelFeatureInfo &,void>((uint64_t *)&v22, (uint64_t)v13, v16, (uint64_t *)&v39, (uint64_t)&v23, *(float *)(a1[3] + 176));
  *(_OWORD *)a4 = v22;
  long long v22 = 0uLL;
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_28:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 40))(v32, v29, v31 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v18 = v25;
      if (!(void)v25) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36 + 40))(v36, v33, v35 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v31) < 0) {
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v18 = v25;
  if ((void)v25)
  {
LABEL_13:
    *((void *)&v25 + 1) = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 40))(v27, v18, v26 - v18);
  }
LABEL_14:
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_19:
  uint64_t v20 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  float v21 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
}

void sub_1A1DD3E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v15 - 96);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v15 - 80);

  _Unwind_Resume(a1);
}

void md::StandardLabeler::labelMarkerForLabel(uint64_t a1@<X0>, md::Label **a2@<X1>, void *a3@<X8>)
{
  if (!*a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v21 = 0;
  char v22 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0;
  uint64_t v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  while (1)
  {
    uint64_t v26 = *((void *)v6 + 91);
    int v27 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    {
      operator new();
    }
    uint64_t v31 = *((void *)v6 + 91);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    {
      operator new();
    }
    uint64_t v35 = *((void *)v6 + 91);
    md::Label::populateFeatureInfo(*a2, (md::LabelFeatureInfo *)&v21, 0);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(float **)(v7 + 8);
    id v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      uint64_t v20 = v9;
      if (v9) {
        break;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_29:
      operator new();
  }
  uint64_t v10 = v9;
  float v11 = *(float *)(*(void *)(a1 + 24) + 176);
  long long v12 = (std::__shared_weak_count *)operator new(0x170uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D78;
  uint64_t v13 = md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v12[1], (uint64_t)v6, v10, (uint64_t *)a2, (uint64_t)&v21, v11);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v12;
  shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v12[1].__shared_owners_ = v13;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
    long long v18 = v14;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    long long v14 = v18;
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v12[1].__shared_owners_ = v13;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v19 = v14;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v14 = v19;
  }
LABEL_14:
  *(_OWORD *)a3 = v14;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v30) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 40))(v35, v32, v34 & 0x7FFFFFFFFFFFFFFFLL);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_18:
    uint64_t v16 = v24;
    if (!(void)v24) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_26:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31 + 40))(v31, v28, v30 & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v16 = v24;
  if ((void)v24)
  {
LABEL_19:
    *((void *)&v24 + 1) = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v16, v25 - v16);
  }
LABEL_20:
  float v17 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1A1DD429C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a12);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&a14);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::setSelectedLabelMarker(uint64_t a1, uint64_t *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (!*(unsigned char *)(v3 + 224))
    {
      uint64_t v4 = a2[1];
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      double v5 = *(std::__shared_weak_count **)(a1 + 248);
      *(void *)(a1 + 240) = v3;
      *(void *)(a1 + 248) = v4;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      uint64_t v6 = *(void *)(a1 + 240);
      md::Label::setSelected(*(md::Label **)(v6 + 288), *(LabelManager **)(a1 + 24), 1);
      md::StandardLabeler::monitorSelectedLabelState((md::StandardLabeler *)a1, 1);
      if ((*(unsigned int (**)(void))(**(void **)(*(void *)(v6 + 288) + 8) + 216))(*(void *)(*(void *)(v6 + 288) + 8)))
      {
        (*(void (**)(void))(**(void **)(*(void *)(v6 + 288) + 8) + 232))(*(void *)(*(void *)(v6 + 288) + 8));
        id v32 = (id)objc_claimAutoreleasedReturnValue();
        if (v32)
        {
          uint64_t v7 = *(void *)(a1 + 32);
          id v8 = v32;
          uint64_t v9 = [v8 feature];
          uint64_t v10 = [v9 dataSource];

          if (v10)
          {
            uint64_t v13 = *(void **)(v7 + 80);
            long long v12 = (void *)(v7 + 80);
            float v11 = v13;
            if (v13)
            {
              long long v14 = v12;
              do
              {
                unint64_t v15 = v11[4];
                BOOL v16 = v15 >= (unint64_t)v10;
                if (v15 >= (unint64_t)v10) {
                  float v17 = v11;
                }
                else {
                  float v17 = v11 + 1;
                }
                if (v16) {
                  long long v14 = v11;
                }
                float v11 = (void *)*v17;
              }
              while (*v17);
              if (v14 != v12 && (unint64_t)v10 >= v14[4])
              {
                id v18 = v8;
                long long v19 = [v18 feature];
                int v20 = [v19 isGlobalFeature];

                if (v20)
                {
                  uint64_t v21 = v14[5];
                  uint64_t v33 = (void (**)(void **))&unk_1EF577760;
                  uint64_t v34 = v21;
                  uint64_t v35 = (uint64_t *)&v33;
                  md::LabelCustomFeatureSupport::queueCommand(v21, 3, &v33);
                  if (v35 == (uint64_t *)&v33)
                  {
                    v33[4]((void **)&v33);
                  }
                  else if (v35)
                  {
                    (*(void (**)(void))(*v35 + 40))();
                  }
                }
                else
                {
                  [v18 coordinate];
                  double v30 = v29;
                  [v18 coordinate];
                  long double v31 = tan(v30 * 0.00872664626 + 0.785398163);
                  log(v31);
                  md::LabelCustomFeatureProvider::featuresDidChangeForRect((uint64_t)(v14 + 5));
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
    char v22 = *(uint64_t **)(a1 + 240);
    if (v22)
    {
      long long v23 = *(unsigned char **)(v22[36] + 8);
      if (!v23[143] && !(*(unsigned int (**)(void))(*(void *)v23 + 320))(*(void *)(v22[36] + 8))
        || v23[144])
      {
        uint64_t v24 = *(void *)(a1 + 240);
        uint64_t v25 = *(void *)(a1 + 248);
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = *(std::__shared_weak_count **)(a1 + 264);
        *(void *)(a1 + 256) = v24;
        *(void *)(a1 + 264) = v25;
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        md::LabelPool::setPreviouslySelectedLabel(*(void *)(a1 + 48), v22 + 36);
        md::Label::setPreviouslySelected((md::Label *)v22[36], *(LabelManager **)(a1 + 24), 1);
      }
      (*(void (**)(uint64_t *, void))(*v22 + 512))(v22, 0);
      md::Label::setSelected((md::Label *)v22[36], *(LabelManager **)(a1 + 24), 0);
      int v27 = *(std::__shared_weak_count **)(a1 + 248);
      *(void *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      uint64_t v28 = *(void *)(a1 + 48);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      md::LabelPool::setAdoptedLabel(v28, (uint64_t *)&v33);
    }
  }
}

void sub_1A1DD47E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::StandardLabeler::monitorSelectedLabelState(md::StandardLabeler *this, int a2)
{
  char v2 = a2;
  if (a2)
  {
    *((_WORD *)this + 180) = 0;
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
  }
  else
  {
    int v4 = *((unsigned __int8 *)this + 360);
    if (v4 == (*(unsigned int (**)(void))(**((void **)this + 30) + 464))(*((void *)this + 30)))
    {
      int v5 = 0;
      goto LABEL_7;
    }
  }
  *((unsigned char *)this + 360) = (*(uint64_t (**)(void))(**((void **)this + 30) + 464))(*((void *)this + 30));
  if (v2)
  {
LABEL_8:
    *((unsigned char *)this + 361) = (*(uint64_t (**)(void))(**((void **)this + 30) + 648))(*((void *)this + 30));
    int v5 = 1;
    goto LABEL_9;
  }
  int v5 = 1;
LABEL_7:
  int v6 = *((unsigned __int8 *)this + 361);
  if (v6 != (*(unsigned int (**)(void))(**((void **)this + 30) + 648))(*((void *)this + 30))) {
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 360)) {
    goto LABEL_19;
  }
LABEL_9:
  float v7 = *(float *)(*((void *)this + 3) + 176);
  float v8 = (*(float (**)(void, void))(**((void **)this + 30) + 560))(*((void *)this + 30), 0);
  if (vabds_f32(v8, *((float *)this + 82)) >= v7
    || vabds_f32(v9, *((float *)this + 83)) >= v7
    || vabds_f32(v10, *((float *)this + 84)) >= v7
    || vabds_f32(v11, *((float *)this + 85)) >= v7)
  {
    *((float *)this + 82) = v8;
    *((float *)this + 83) = v9;
    *((float *)this + 84) = v10;
    int v5 = 1;
    *((float *)this + 85) = v11;
  }
  float v12 = (*(float (**)(void))(**((void **)this + 30) + 576))(*((void *)this + 30));
  if (vabds_f32(v12, *((float *)this + 86)) >= v7
    || vabds_f32(v13, *((float *)this + 87)) >= v7
    || vabds_f32(v14, *((float *)this + 88)) >= v7
    || vabds_f32(v15, *((float *)this + 89)) >= v7)
  {
    *((float *)this + 86) = v12;
    *((float *)this + 87) = v13;
    *((float *)this + 88) = v14;
    *((float *)this + 89) = v15;
  }
  else
  {
LABEL_19:
    if (!v5) {
      return;
    }
  }
  uint64_t v16 = *((void *)this + 3);
  if (*((void *)this + 30) == *(void *)(v16 + 3504))
  {
    uint64_t v17 = *(void *)(v16 + 136);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 184);
      if (v18)
      {
        uint64_t v19 = *((void *)this + 3);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v18 + 48))(v18, &v19, v16 + 3400);
      }
    }
  }
}

void *md::StandardLabeler::setPreviouslySelectedLabelMarker(void *result, uint64_t *a2)
{
  if (*a2 != result[32])
  {
    uint64_t v3 = result;
    double result = (void *)(*(uint64_t (**)(void *))(*result + 200))(result);
    uint64_t v4 = *a2;
    if (*a2)
    {
      if (v4 != v3[30] && !*(unsigned char *)(v4 + 224))
      {
        if ((int v5 = *(unsigned char **)(*(void *)(v4 + 288) + 8), !v5[143])
          && (double result = (void *)(*(uint64_t (**)(void))(*(void *)v5 + 320))(*(void *)(*(void *)(v4 + 288) + 8)),
              !result)
          || v5[144])
        {
          uint64_t v6 = *a2;
          uint64_t v7 = a2[1];
          if (v7) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
          }
          float v8 = (std::__shared_weak_count *)v3[33];
          v3[32] = v6;
          v3[33] = v7;
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
          md::LabelPool::setPreviouslySelectedLabel(v3[6], (uint64_t *)(v4 + 288));
          float v9 = *(md::Label **)(v4 + 288);
          float v10 = (LabelManager *)v3[3];
          return md::Label::setPreviouslySelected(v9, v10, 1);
        }
      }
    }
  }
  return result;
}

void md::StandardLabeler::getLabelMarkers(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  uint64_t v47 = *(void *)(v3 + 8);
  if (!v4 || (uint64_t v6 = std::__shared_weak_count::lock(v4), (v48 = v6) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    double v30 = v29;
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v32);
    md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&v33);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v47);
    _Unwind_Resume(v30);
  }
  uint64_t v7 = (md::Label **)a1[13];
  float v8 = (md::Label **)a1[14];
  if (v7 != v8)
  {
    float v9 = &v44;
    float v11 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    while (1)
    {
      float v12 = (float *)a1[3];
      uint64_t v13 = *((void *)*v7 + 34);
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 256))(v13);
      }
      else
      {
        float v16 = -3.4028e38;
        float v14 = 3.4028e38;
        float v15 = 3.4028e38;
        float v17 = -3.4028e38;
      }
      if (v12[380] > v14 && v12[378] < v16 && v12[381] > v15 && v12[379] < v17 && (*((unsigned char *)*v7 + 1072) & 0xFD) == 1) {
        break;
      }
LABEL_6:
      v7 += 2;
      if (v7 == v8)
      {
        uint64_t v28 = v48;
        if (!v48) {
          return;
        }
        goto LABEL_50;
      }
    }
    uint64_t v33 = 0;
    char v34 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v37 = 0;
    if ((atomic_load_explicit(v10, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire((__guard *)v10)) {
      operator new();
    }
    uint64_t v38 = *((void *)v11 + 91);
    int v39 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    if ((atomic_load_explicit(v10, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire((__guard *)v10)) {
      operator new();
    }
    uint64_t v43 = *((void *)v11 + 91);
    v9[1] = 0;
    v9[2] = 0;
    *float v9 = 0;
    if ((atomic_load_explicit(v10, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire((__guard *)v10)) {
      operator new();
    }
    long double v31 = v9;
    uint64_t v46 = *((void *)v11 + 91);
    md::Label::populateFeatureInfo(*v7, (md::LabelFeatureInfo *)&v33, 0);
    uint64_t v18 = v10;
    float v19 = *(float *)(a1[3] + 176);
    int v20 = (std::__shared_weak_count *)operator new(0x170uLL);
    v20->__shared_owners_ = 0;
    p_uint64_t shared_owners = &v20->__shared_owners_;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D78;
    char v22 = v20 + 1;
    md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v20[1], v47, v48, (uint64_t *)v7, (uint64_t)&v33, v19);
    shared_weak_owners = (std::__shared_weak_count *)v20[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1) {
        goto LABEL_24;
      }
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v20[1].__shared_owners_ = (uint64_t)v22;
      v20[1].__shared_weak_owners_ = (uint64_t)v20;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v20[1].__shared_owners_ = (uint64_t)v22;
      v20[1].__shared_weak_owners_ = (uint64_t)v20;
    }
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_24:
    *(void *)&long long v32 = v20 + 1;
    *((void *)&v32 + 1) = v20;
    uint64_t v24 = *(std::__shared_weak_count ***)(a2 + 8);
    if ((unint64_t)v24 >= *(void *)(a2 + 16))
    {
      uint64_t v25 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v32);
    }
    else
    {
      if (v24)
      {
        *uint64_t v24 = v22;
        v24[1] = v20;
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = v24 + 2;
    }
    float v10 = v18;
    *(void *)(a2 + 8) = v25;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if ((SHIBYTE(v45) & 0x80000000) == 0)
      {
LABEL_31:
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_32;
        }
        goto LABEL_39;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 40))(v46, v44, v45 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_32:
      uint64_t v26 = v36;
      if (!(void)v36) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
LABEL_39:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v40, v42 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v26 = v36;
    if (!(void)v36)
    {
LABEL_34:
      int v27 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      float v9 = v31;
      float v11 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      goto LABEL_6;
    }
LABEL_33:
    *((void *)&v36 + 1) = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38 + 40))(v38, v26, v37 - v26);
    goto LABEL_34;
  }
  uint64_t v28 = v6;
LABEL_50:
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
}

uint64_t md::StandardLabeler::isLabelHitAtPixel(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  if (*(unsigned char *)(a2 + 224)) {
    return 0;
  }
  float v7 = *(float *)(*(void *)(a1 + 24) + 176);
  uint64_t v8 = *(void *)(a2 + 288);
  if (a4)
  {
    float v9 = 15.0;
    if (*(unsigned char *)(v8 + 1076))
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t result = *(void *)(v8 + 272);
      if (!result) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 640))(result);
      if (!result) {
        return result;
      }
      uint64_t v8 = *(void *)(a2 + 288);
      uint64_t v10 = 1;
    }
  }
  else
  {
    uint64_t v10 = 0;
    float v9 = 22.0;
  }
  int v13 = 0;
  float v11 = *a3;
  float v12 = a3[1];
  *(unsigned char *)(v8 + 1212) = 0;
  uint64_t result = *(void *)(v8 + 272);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, int *, uint64_t, float, float, float))(*(void *)result + 632))(result, &v13, v10, v11, v12, v9 * v7);
    if (result)
    {
      *(unsigned char *)(v8 + 1212) = (*(uint64_t (**)(uint64_t))(*(void *)result + 656))(result);
      return 1;
    }
  }
  return result;
}

void md::StandardLabeler::roadMarkerForSelectionAtPixel(void *a1@<X0>, float *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v25 = 0;
  md::StandardLabeler::labelAtPixel(&v23, a1, a2, 0, &v25);
  if (v23) {
    goto LABEL_2;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  int v21 = -1;
  uint64_t v20 = -1;
  uint64_t v22 = 0;
  md::StandardLabeler::hitRoadFeatureAtPixel(v5, (uint64_t)a2, (uint64_t)&v23, (uint64_t)&v17, 0);
  uint64_t v8 = v17;
  if (v17)
  {
    uint64_t v9 = *(void *)(v5 + 24);
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t v10 = *(std::__shared_weak_count **)(v9 + 16);
    if (v10 && (float v12 = std::__shared_weak_count::lock(v10)) != 0)
    {
      int v13 = v12;
      float v14 = (char *)operator new(0x98uLL);
      uint64_t v5 = (uint64_t)v14;
      *((void *)v14 + 1) = 0;
      *(void *)float v14 = &unk_1EF580838;
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 6) = 0;
      *((void *)v14 + 4) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = &unk_1EF5391C0;
      float v15 = v18;
      *((void *)v14 + 7) = v8;
      *((void *)v14 + 8) = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)v14 + 9) = v11;
      *((void *)v14 + 10) = v13;
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(_OWORD *)(v14 + 88) = 0u;
      *(_OWORD *)(v14 + 104) = 0u;
      uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
LABEL_12:
        *(void *)(v5 + 120) = *((void *)v3 + 91);
        (*(void (**)(void))(**(void **)(v5 + 56) + 264))(*(void *)(v5 + 56));
        operator new();
      }
    }
    else
    {
      std::__throw_bad_weak_ptr[abi:nn180100]();
      __break(1u);
    }
      operator new();
    goto LABEL_12;
  }
  float v16 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_2:
  *a3 = 0;
  a3[1] = 0;
  float v7 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1A1DD58B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (SHIBYTE(a25) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a26 + 40))(a26, a23, a25 & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (*(char *)(v26 + 119) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v26 + 120) + 40))(*(void *)(v26 + 120), *(void *)(v26 + 96), *(void *)(v26 + 112) & 0x7FFFFFFFFFFFFFFFLL);
  }
  uint64_t v29 = *v27;
  *int v27 = 0;
  if (v29)
  {
    long long v32 = *(std::__shared_weak_count **)(v29 + 56);
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    MEMORY[0x1A6239270](v29, 0x1060C4018558911);
    double v30 = *(std::__shared_weak_count **)(v26 + 80);
    if (!v30)
    {
LABEL_7:
      long double v31 = *(std::__shared_weak_count **)(v26 + 64);
      if (!v31) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v30 = *(std::__shared_weak_count **)(v26 + 80);
    if (!v30) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v30);
  long double v31 = *(std::__shared_weak_count **)(v26 + 64);
  if (!v31) {
    goto LABEL_16;
  }
LABEL_14:
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_16:
  uint64_t v33 = *(std::__shared_weak_count **)(v26 + 40);
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v34);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::hitRoadFeatureAtPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  double v169 = 0;
  double v170 = 0;
  uint64_t v171 = 0;
  {
    operator new();
  }
  uint64_t v172 = mdm::Allocator::instance(void)::alloc;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v168 = a4;
  BOOL v10 = a5 == 1 && *(unsigned char *)(v9 + 3644) != 0;
  int v167 = a5;
  float v173 = *(float *)(v9 + 176) * 22.0;
  uint64_t v11 = *(void *)(a1 + 48);
  float v12 = *(uint64_t **)(v11 + 16);
  int v13 = *(uint64_t **)(v11 + 24);
  if (v10)
  {
    if (v12 != v13)
    {
LABEL_10:
      uint64_t v14 = *v12;
      float v15 = (long long *)operator new(0x28uLL);
      float v16 = v13;
      *(void *)float v15 = &unk_1EF5719B8;
      *((void *)v15 + 1) = &v173;
      *((void *)v15 + 2) = a1;
      *((void *)v15 + 3) = a2;
      *((void *)v15 + 4) = &v169;
      double v180 = v15;
      uint64_t v17 = *(void *)(v14 + 216);
      if (!v17 || (uint64_t v18 = *(void **)(v17 + 168), v19 = (void *)(v17 + 176), v18 == (void *)(v17 + 176)))
      {
LABEL_8:
        (*(void (**)(long long *))(*(void *)v15 + 40))(v15);
        goto LABEL_9;
      }
      while (1)
      {
        uint64_t v20 = (std::__shared_weak_count *)v18[5];
        if (v20)
        {
          int v21 = std::__shared_weak_count::lock(v20);
          double v177 = v21;
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = v18[4];
            uint64_t v176 = v23;
            if (!v23) {
              goto LABEL_21;
            }
            uint64_t v174 = v23;
            double v175 = v21;
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!v180) {
              goto LABEL_318;
            }
            (*(void (**)(long long *, uint64_t *))(*(void *)v180 + 48))(v180, &v174);
            uint64_t v24 = v175;
            if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
              uint64_t v22 = v177;
              if (v177)
              {
LABEL_21:
                if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
            }
            else
            {
              uint64_t v22 = v177;
              if (v177) {
                goto LABEL_21;
              }
            }
          }
        }
        uint64_t v25 = (void *)v18[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            uint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void *)v18[2];
            BOOL v27 = *v26 == (void)v18;
            uint64_t v18 = v26;
          }
          while (!v27);
        }
        uint64_t v18 = v26;
        if (v26 == v19)
        {
          float v15 = v180;
          if (v180 == &v178)
          {
            (*(void (**)(long long *))(v178 + 32))(&v178);
            goto LABEL_9;
          }
          if (v180) {
            goto LABEL_8;
          }
LABEL_9:
          v12 += 2;
          int v13 = v16;
          if (v12 == v16) {
            goto LABEL_164;
          }
          goto LABEL_10;
        }
      }
    }
    goto LABEL_164;
  }
  if (v12 == v13) {
    goto LABEL_164;
  }
  while (2)
  {
    uint64_t v28 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v28 + 3637))
    {
      if (!*(unsigned char *)(v28 + 3639)) {
        goto LABEL_159;
      }
      goto LABEL_38;
    }
    uint64_t v29 = *v12;
    double v30 = (long long *)operator new(0x28uLL);
    *(void *)double v30 = &unk_1EF571850;
    *((void *)v30 + 1) = &v173;
    *((void *)v30 + 2) = a1;
    *((void *)v30 + 3) = a2;
    *((void *)v30 + 4) = &v169;
    double v180 = v30;
    md::LabelMapTile::enumerateLineFeatures(v29, (uint64_t)&v178);
    if (v180 == &v178)
    {
      (*(void (**)(long long *))(v178 + 32))(&v178);
    }
    else if (v180)
    {
      (*(void (**)(void))(*(void *)v180 + 40))();
    }
    long double v31 = (void *)*v12;
    long long v32 = (long long *)operator new(0x28uLL);
    *(void *)long long v32 = &unk_1EF571898;
    *((void *)v32 + 1) = &v173;
    *((void *)v32 + 2) = a1;
    *((void *)v32 + 3) = a2;
    *((void *)v32 + 4) = &v169;
    double v180 = v32;
    uint64_t v33 = v31[25];
    if (v33)
    {
      char v34 = *(void **)(v33 + 72);
      long long v35 = (void *)(v33 + 80);
      if (v34 != (void *)(v33 + 80))
      {
        do
        {
          uint64_t v42 = (std::__shared_weak_count *)v34[5];
          if (v42)
          {
            uint64_t v43 = std::__shared_weak_count::lock(v42);
            double v177 = v43;
            if (v43)
            {
              uint64_t v44 = v43;
              uint64_t v45 = v34[4];
              uint64_t v176 = v45;
              if (!v45) {
                goto LABEL_63;
              }
              uint64_t v174 = v45;
              double v175 = v43;
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!v180)
              {
LABEL_318:
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
                return;
              }
              (*(void (**)(long long *, uint64_t *))(*(void *)v180 + 48))(v180, &v174);
              uint64_t v46 = v175;
              if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
                uint64_t v44 = v177;
                if (v177)
                {
LABEL_63:
                  if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
              }
              else
              {
                uint64_t v44 = v177;
                if (v177) {
                  goto LABEL_63;
                }
              }
            }
          }
          uint64_t v47 = (void *)v34[1];
          if (v47)
          {
            do
            {
              double v48 = v47;
              uint64_t v47 = (void *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              double v48 = (void *)v34[2];
              BOOL v27 = *v48 == (void)v34;
              char v34 = v48;
            }
            while (!v27);
          }
          char v34 = v48;
        }
        while (v48 != v35);
      }
    }
    uint64_t v36 = v31[23];
    if (v36)
    {
      uint64_t v37 = *(void **)(v36 + 72);
      uint64_t v38 = (void *)(v36 + 80);
      if (v37 != (void *)(v36 + 80))
      {
        do
        {
          double v49 = (std::__shared_weak_count *)v37[5];
          if (v49)
          {
            double v50 = std::__shared_weak_count::lock(v49);
            double v177 = v50;
            if (v50)
            {
              double v51 = v50;
              uint64_t v52 = v37[4];
              uint64_t v176 = v52;
              if (!v52) {
                goto LABEL_81;
              }
              uint64_t v174 = v52;
              double v175 = v50;
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!v180) {
                goto LABEL_318;
              }
              (*(void (**)(long long *, uint64_t *))(*(void *)v180 + 48))(v180, &v174);
              double v53 = v175;
              if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
                double v51 = v177;
                if (v177)
                {
LABEL_81:
                  if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
              }
              else
              {
                double v51 = v177;
                if (v177) {
                  goto LABEL_81;
                }
              }
            }
          }
          double v54 = (void *)v37[1];
          if (v54)
          {
            do
            {
              double v55 = v54;
              double v54 = (void *)*v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              double v55 = (void *)v37[2];
              BOOL v27 = *v55 == (void)v37;
              uint64_t v37 = v55;
            }
            while (!v27);
          }
          uint64_t v37 = v55;
        }
        while (v55 != v38);
      }
    }
    uint64_t v39 = v31[21];
    if (v39)
    {
      uint64_t v40 = *(void **)(v39 + 72);
      uint64_t v41 = (void *)(v39 + 80);
      if (v40 != (void *)(v39 + 80))
      {
        do
        {
          double v56 = (std::__shared_weak_count *)v40[5];
          if (v56)
          {
            double v57 = std::__shared_weak_count::lock(v56);
            double v177 = v57;
            if (v57)
            {
              double v58 = v57;
              uint64_t v59 = v40[4];
              uint64_t v176 = v59;
              if (!v59) {
                goto LABEL_99;
              }
              uint64_t v174 = v59;
              double v175 = v57;
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!v180) {
                goto LABEL_318;
              }
              (*(void (**)(long long *, uint64_t *))(*(void *)v180 + 48))(v180, &v174);
              double v60 = v175;
              if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
                double v58 = v177;
                if (v177)
                {
LABEL_99:
                  if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
              }
              else
              {
                double v58 = v177;
                if (v177) {
                  goto LABEL_99;
                }
              }
            }
          }
          double v61 = (void *)v40[1];
          if (v61)
          {
            do
            {
              double v62 = v61;
              double v61 = (void *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              double v62 = (void *)v40[2];
              BOOL v27 = *v62 == (void)v40;
              uint64_t v40 = v62;
            }
            while (!v27);
          }
          uint64_t v40 = v62;
        }
        while (v62 != v41);
      }
    }
    if (v180 == &v178)
    {
      (*(void (**)(long long *))(v178 + 32))(&v178);
    }
    else if (v180)
    {
      (*(void (**)(void))(*(void *)v180 + 40))();
    }
    uint64_t v63 = *v12;
    double v64 = (long long *)operator new(0x28uLL);
    *(void *)double v64 = &unk_1EF5718E0;
    *((void *)v64 + 1) = &v173;
    *((void *)v64 + 2) = a1;
    *((void *)v64 + 3) = a2;
    *((void *)v64 + 4) = &v169;
    double v180 = v64;
    uint64_t v65 = *(void *)(v63 + 264);
    if (!v65 || (double v66 = *(void **)(v65 + 136), v67 = (void *)(v65 + 144), v66 == (void *)(v65 + 144)))
    {
LABEL_133:
      (*(void (**)(long long *))(*(void *)v64 + 40))(v64);
      goto LABEL_134;
    }
    do
    {
      double v68 = (std::__shared_weak_count *)v66[5];
      if (!v68) {
        goto LABEL_123;
      }
      double v69 = std::__shared_weak_count::lock(v68);
      double v177 = v69;
      if (!v69) {
        goto LABEL_123;
      }
      double v70 = v69;
      uint64_t v71 = v66[4];
      uint64_t v176 = v71;
      if (v71)
      {
        uint64_t v174 = v71;
        double v175 = v69;
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v180) {
          goto LABEL_318;
        }
        (*(void (**)(long long *, uint64_t *))(*(void *)v180 + 48))(v180, &v174);
        double v72 = v175;
        if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
          double v70 = v177;
          if (!v177) {
            goto LABEL_123;
          }
        }
        else
        {
          double v70 = v177;
          if (!v177) {
            goto LABEL_123;
          }
        }
      }
      if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
LABEL_123:
      double v73 = (void *)v66[1];
      if (v73)
      {
        do
        {
          long long v74 = v73;
          double v73 = (void *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          long long v74 = (void *)v66[2];
          BOOL v27 = *v74 == (void)v66;
          double v66 = v74;
        }
        while (!v27);
      }
      double v66 = v74;
    }
    while (v74 != v67);
    double v64 = v180;
    if (v180 == &v178)
    {
      (*(void (**)(long long *))(v178 + 32))(&v178);
    }
    else if (v180)
    {
      goto LABEL_133;
    }
LABEL_134:
    uint64_t v75 = *v12;
    int v76 = (long long *)operator new(0x28uLL);
    *(void *)int v76 = &unk_1EF571928;
    *((void *)v76 + 1) = &v173;
    *((void *)v76 + 2) = a1;
    *((void *)v76 + 3) = a2;
    *((void *)v76 + 4) = &v169;
    double v180 = v76;
    uint64_t v77 = *(void *)(v75 + 248);
    if (!v77 || (double v78 = *(void **)(v77 + 232), v79 = (void *)(v77 + 240), v78 == (void *)(v77 + 240)))
    {
LABEL_157:
      (*(void (**)(long long *))(*(void *)v76 + 40))(v76);
      goto LABEL_158;
    }
    while (2)
    {
      double v80 = (std::__shared_weak_count *)v78[5];
      if (v80)
      {
        double v81 = std::__shared_weak_count::lock(v80);
        double v177 = v81;
        if (v81)
        {
          double v82 = v81;
          uint64_t v83 = v78[4];
          uint64_t v176 = v83;
          if (v83)
          {
            uint64_t v174 = v83;
            double v175 = v81;
            atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!v180) {
              goto LABEL_318;
            }
            (*(void (**)(long long *, uint64_t *))(*(void *)v180 + 48))(v180, &v174);
            double v84 = v175;
            if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              double v82 = v177;
              if (v177) {
                goto LABEL_145;
              }
            }
            else
            {
              double v82 = v177;
              if (v177) {
                goto LABEL_145;
              }
            }
          }
          else
          {
LABEL_145:
            if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
        }
      }
      double v85 = (void *)v78[1];
      if (v85)
      {
        do
        {
          double v86 = v85;
          double v85 = (void *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          double v86 = (void *)v78[2];
          BOOL v27 = *v86 == (void)v78;
          double v78 = v86;
        }
        while (!v27);
      }
      double v78 = v86;
      if (v86 != v79) {
        continue;
      }
      break;
    }
    int v76 = v180;
    if (v180 == &v178)
    {
      (*(void (**)(long long *))(v178 + 32))(&v178);
    }
    else if (v180)
    {
      goto LABEL_157;
    }
LABEL_158:
    if (!*(unsigned char *)(*(void *)(a1 + 24) + 3639))
    {
LABEL_159:
      uint64_t v87 = *v12;
      double v88 = (long long *)operator new(0x28uLL);
      *(void *)double v88 = &unk_1EF571970;
      *((void *)v88 + 1) = &v173;
      *((void *)v88 + 2) = a1;
      *((void *)v88 + 3) = a2;
      *((void *)v88 + 4) = &v169;
      double v180 = v88;
      md::LabelMapTile::enumeratePhysicalLineFeatures(*(void *)(v87 + 184), (uint64_t)&v178);
      if (v180 == &v178)
      {
        (*(void (**)(long long *))(v178 + 32))(&v178);
      }
      else if (v180)
      {
        (*(void (**)(void))(*(void *)v180 + 40))();
      }
    }
LABEL_38:
    v12 += 2;
    if (v12 != v13) {
      continue;
    }
    break;
  }
LABEL_164:
  double v89 = v169;
  uint64_t v90 = v168;
  if (v170 != v169)
  {
    if (v167)
    {
      long long v178 = 0uLL;
      unint64_t v179 = 0;
      {
        operator new();
      }
      double v180 = (long long *)mdm::Allocator::instance(void)::alloc;
      double v91 = v169;
      double v92 = v170;
      if (v169 != v170)
      {
        while (1)
        {
          if ((*(unsigned char *)(*(void *)v91 + 147) & 0xFE) != 4) {
            goto LABEL_172;
          }
          uint64_t v95 = *((void *)&v178 + 1);
          unint64_t v96 = v179;
          if (*((void *)&v178 + 1) < v179)
          {
            if (*((void *)&v178 + 1))
            {
              **((void **)&v178 + 1) = *(void *)v91;
              uint64_t v97 = *((void *)v91 + 1);
              *(void *)(v95 + 8) = v97;
              if (v97) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
              }
              long long v93 = *((_OWORD *)v91 + 1);
              *(void *)(v95 + 32) = *((void *)v91 + 4);
              *(_OWORD *)(v95 + 16) = v93;
              *(void *)(v95 + 40) = *((void *)v91 + 5);
            }
            uint64_t v94 = v95 + 48;
            goto LABEL_171;
          }
          uint64_t v98 = v178;
          unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v178 + 1) - v178) >> 4);
          unint64_t v100 = v99 + 1;
          if (v99 + 1 > 0x555555555555555) {
            abort();
          }
          if (0x5555555555555556 * ((uint64_t)(v179 - v178) >> 4) > v100) {
            unint64_t v100 = 0x5555555555555556 * ((uint64_t)(v179 - v178) >> 4);
          }
          uint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v178) >> 4) >= 0x2AAAAAAAAAAAAAALL
               ? 0x555555555555555
               : v100;
          if (v101)
          {
            uint64_t v102 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(*(void *)v180 + 16))(v180, 48 * v101, 8);
            uint64_t v103 = v102 + 48 * v99;
            uint64_t v104 = v102 + 48 * v101;
            if (v102)
            {
              *(void *)uint64_t v103 = *(void *)v91;
              uint64_t v105 = *((void *)v91 + 1);
              *(void *)(v103 + 8) = v105;
              if (v105) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v105 + 8), 1uLL, memory_order_relaxed);
              }
              long long v106 = *((_OWORD *)v91 + 1);
              *(void *)(v103 + 32) = *((void *)v91 + 4);
              *(_OWORD *)(v103 + 16) = v106;
              *(void *)(v102 + 48 * v99 + 40) = *((void *)v91 + 5);
            }
          }
          else
          {
            uint64_t v104 = 0;
            uint64_t v103 = 16 * ((uint64_t)(*((void *)&v178 + 1) - v178) >> 4);
          }
          uint64_t v94 = v103 + 48;
          if (v95 != v98) {
            break;
          }
          *(void *)&long long v178 = v103;
          unint64_t v179 = v104;
          if (v95) {
            goto LABEL_201;
          }
LABEL_171:
          *((void *)&v178 + 1) = v94;
LABEL_172:
          v91 += 48;
          if (v91 == v92) {
            goto LABEL_202;
          }
        }
        uint64_t v107 = 0;
        do
        {
          uint64_t v108 = v103 + v107;
          uint64_t v109 = v95 + v107;
          *(_OWORD *)(v108 - 48) = *(_OWORD *)(v95 + v107 - 48);
          *(void *)(v109 - 48) = 0;
          *(void *)(v109 - 40) = 0;
          long long v110 = *(_OWORD *)(v95 + v107 - 32);
          *(void *)(v108 - 16) = *(void *)(v95 + v107 - 16);
          *(_OWORD *)(v108 - 32) = v110;
          *(void *)(v108 - 8) = *(void *)(v95 + v107 - 8);
          v107 -= 48;
        }
        while (v95 + v107 != v98);
        *(void *)&long long v178 = v103 + v107;
        *((void *)&v178 + 1) = v103 + 48;
        unint64_t v179 = v104;
        do
        {
          double v111 = *(std::__shared_weak_count **)(v95 - 40);
          if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
          v95 -= 48;
        }
        while (v95 != v98);
        uint64_t v95 = v98;
        if (!v98) {
          goto LABEL_171;
        }
LABEL_201:
        (*(void (**)(long long *, uint64_t, unint64_t))(*(void *)v180 + 40))(v180, v95, v96 - v95);
        goto LABEL_171;
      }
LABEL_202:
      double v112 = (uint64_t *)*((void *)&v178 + 1);
      uint64_t v113 = (uint64_t *)v178;
      if ((void)v178 == *((void *)&v178 + 1))
      {
        uint64_t v116 = (uint64_t)v170;
        uint64_t v90 = v168;
      }
      else
      {
        unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v178 + 1) - v178) >> 4);
        uint64_t v115 = v171;
        uint64_t v90 = v168;
        uint64_t v116 = (uint64_t)v169;
        uint64_t v117 = v171 - (void)v169;
        if (0xAAAAAAAAAAAAAAABLL * ((v171 - (uint64_t)v169) >> 4) >= v114)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v170 - v169) >> 4) >= v114)
          {
            do
            {
              uint64_t v132 = *v113;
              uint64_t v131 = v113[1];
              if (v131) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
              }
              double v133 = *(std::__shared_weak_count **)(v116 + 8);
              *(void *)uint64_t v116 = v132;
              *(void *)(v116 + 8) = v131;
              if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
              *(_DWORD *)(v116 + 16) = *((_DWORD *)v113 + 4);
              long long v130 = *(_OWORD *)((char *)v113 + 20);
              *(_DWORD *)(v116 + 36) = *((_DWORD *)v113 + 9);
              *(_OWORD *)(v116 + 20) = v130;
              *(void *)(v116 + 40) = v113[5];
              v116 += 48;
              v113 += 6;
            }
            while (v113 != v112);
            for (uint64_t i = v170; i != (char *)v116; i -= 48)
            {
              double v135 = (std::__shared_weak_count *)*((void *)i - 5);
              if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
          else
          {
            uint64_t v125 = v178 + 16 * ((v170 - v169) >> 4);
            if (v170 != v169)
            {
              do
              {
                uint64_t v128 = *v113;
                uint64_t v127 = v113[1];
                if (v127) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v127 + 8), 1uLL, memory_order_relaxed);
                }
                double v129 = *(std::__shared_weak_count **)(v116 + 8);
                *(void *)uint64_t v116 = v128;
                *(void *)(v116 + 8) = v127;
                if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
                *(_DWORD *)(v116 + 16) = *((_DWORD *)v113 + 4);
                long long v126 = *(_OWORD *)((char *)v113 + 20);
                *(_DWORD *)(v116 + 36) = *((_DWORD *)v113 + 9);
                *(_OWORD *)(v116 + 20) = v126;
                *(void *)(v116 + 40) = v113[5];
                v113 += 6;
                v116 += 48;
              }
              while (v113 != (uint64_t *)v125);
              uint64_t v116 = (uint64_t)v170;
            }
            uint64_t v137 = v116;
            if ((uint64_t *)v125 != v112)
            {
              uint64_t v137 = v116;
              do
              {
                if (v137)
                {
                  *(void *)uint64_t v137 = *(void *)v125;
                  uint64_t v139 = *(void *)(v125 + 8);
                  *(void *)(v137 + 8) = v139;
                  if (v139) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v139 + 8), 1uLL, memory_order_relaxed);
                  }
                  long long v138 = *(_OWORD *)(v125 + 16);
                  *(void *)(v137 + 32) = *(void *)(v125 + 32);
                  *(_OWORD *)(v137 + 16) = v138;
                  *(void *)(v137 + 40) = *(void *)(v125 + 40);
                }
                v125 += 48;
                v137 += 48;
              }
              while ((uint64_t *)v125 != v112);
            }
            uint64_t v116 = v137;
          }
        }
        else
        {
          if (v169)
          {
            double v118 = v170;
            if (v170 == v169)
            {
              double v136 = v169;
            }
            else
            {
              do
              {
                double v119 = (std::__shared_weak_count *)*((void *)v118 - 5);
                if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
                v118 -= 48;
              }
              while (v118 != (char *)v116);
              double v136 = v169;
              uint64_t v117 = v171 - (void)v169;
            }
            double v170 = (char *)v116;
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v172 + 40))(v172, v136, v117);
            uint64_t v115 = 0;
            double v169 = 0;
            double v170 = 0;
            uint64_t v171 = 0;
          }
          if (v114 > 0x555555555555555) {
            goto LABEL_326;
          }
          unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * (v115 >> 4);
          uint64_t v162 = 2 * v161;
          if (2 * v161 <= v114) {
            uint64_t v162 = 0xAAAAAAAAAAAAAAABLL * (((char *)v112 - (char *)v113) >> 4);
          }
          unint64_t v163 = v161 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v162;
          if (v163 > 0x555555555555555) {
LABEL_326:
          }
            abort();
          uint64_t v116 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v172 + 16))(v172, 48 * v163, 8);
          double v169 = (char *)v116;
          double v170 = (char *)v116;
          uint64_t v171 = v116 + 48 * v163;
          do
          {
            if (v116)
            {
              *(void *)uint64_t v116 = *v113;
              uint64_t v165 = v113[1];
              *(void *)(v116 + 8) = v165;
              if (v165) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v165 + 8), 1uLL, memory_order_relaxed);
              }
              long long v164 = *((_OWORD *)v113 + 1);
              *(void *)(v116 + 32) = v113[4];
              *(_OWORD *)(v116 + 16) = v164;
              *(void *)(v116 + 40) = v113[5];
            }
            v113 += 6;
            v116 += 48;
          }
          while (v113 != v112);
        }
        double v170 = (char *)v116;
      }
      double v140 = v169;
      if (v169 == (char *)v116) {
        goto LABEL_271;
      }
      double v141 = v169;
      while (*v141 != *(void *)(a1 + 200)
           || *((_DWORD *)v141 + 4) != *(_DWORD *)(a1 + 216)
           || *((_DWORD *)v141 + 5) != *(_DWORD *)(a1 + 220)
           || *((_DWORD *)v141 + 6) != *(_DWORD *)(a1 + 224)
           || *((_DWORD *)v141 + 7) != *(_DWORD *)(a1 + 228))
      {
        v141 += 6;
        if (v141 == (void *)v116) {
          goto LABEL_271;
        }
      }
      if (v141 == (void *)v116 || v141 + 6 == (void *)v116)
      {
LABEL_271:
        uint64_t v148 = *(void *)v169;
        uint64_t v147 = *((void *)v169 + 1);
        if (v147) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v147 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v149 = *(std::__shared_weak_count **)(v90 + 8);
        *(void *)uint64_t v90 = v148;
        *(void *)(v90 + 8) = v147;
        if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
        *(_DWORD *)(v90 + 16) = *((_DWORD *)v140 + 4);
        long long v145 = *(_OWORD *)((char *)v140 + 20);
        int v146 = *((_DWORD *)v140 + 9);
      }
      else
      {
        uint64_t v143 = v141[6];
        uint64_t v142 = v141[7];
        if (v142) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v142 + 8), 1uLL, memory_order_relaxed);
        }
        double v144 = *(std::__shared_weak_count **)(v90 + 8);
        *(void *)uint64_t v90 = v143;
        *(void *)(v90 + 8) = v142;
        if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
        *(_DWORD *)(v90 + 16) = *((_DWORD *)v141 + 16);
        long long v145 = *(_OWORD *)((char *)v141 + 68);
        int v146 = *((_DWORD *)v141 + 21);
      }
      *(_DWORD *)(v90 + 36) = v146;
      *(_OWORD *)(v90 + 20) = v145;
      uint64_t v150 = v178;
      if ((void)v178)
      {
        uint64_t v151 = *((void *)&v178 + 1);
        uint64_t v152 = v178;
        if (*((void *)&v178 + 1) != (void)v178)
        {
          do
          {
            double v153 = *(std::__shared_weak_count **)(v151 - 40);
            if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v153->__on_zero_shared)(v153, v152);
              std::__shared_weak_count::__release_weak(v153);
            }
            v151 -= 48;
          }
          while (v151 != v150);
          uint64_t v152 = v178;
        }
        *((void *)&v178 + 1) = v150;
        (*(void (**)(long long *, uint64_t, unint64_t))(*(void *)v180 + 40))(v180, v152, v179 - v152);
      }
    }
    else
    {
      double v120 = v169;
      do
      {
        if (*((double *)v120 + 5) < *((double *)v89 + 5)) {
          double v89 = v120;
        }
        v120 += 48;
      }
      while (v120 != v170);
      double v122 = *(double *)v89;
      uint64_t v121 = v89[1];
      if (v121) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v121 + 8), 1uLL, memory_order_relaxed);
      }
      double v123 = *(std::__shared_weak_count **)(v168 + 8);
      *(double *)uint64_t v168 = v122;
      *(void *)(v168 + 8) = v121;
      if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
      *(_DWORD *)(v168 + 16) = *((_DWORD *)v89 + 4);
      long long v124 = *(_OWORD *)((char *)v89 + 20);
      *(_DWORD *)(v168 + 36) = *((_DWORD *)v89 + 9);
      *(_OWORD *)(v168 + 20) = v124;
    }
  }
  if (*(void *)v90)
  {
    md::LabelPool::labelForFeature((md::LabelBase **)&v178, *(md::LabelPool **)(a1 + 48), *(void *)(a1 + 24), (void *)v90, (unsigned int *)(v90 + 16), 0);
    long long v154 = v178;
    long long v178 = 0uLL;
    double v155 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v154;
    if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
    double v156 = (std::__shared_weak_count *)*((void *)&v178 + 1);
    if (*((void *)&v178 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v178 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  double v157 = v169;
  if (v169)
  {
    double v158 = v170;
    double v159 = v169;
    if (v170 != v169)
    {
      do
      {
        double v160 = (std::__shared_weak_count *)*((void *)v158 - 5);
        if (v160)
        {
          if (!atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, char *))v160->__on_zero_shared)(v160, v159);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        v158 -= 48;
      }
      while (v158 != v157);
      double v159 = v169;
    }
    double v170 = v157;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v172 + 40))(v172, v159, v171 - (void)v159);
  }
}

void sub_1A1DD7350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va1);
  std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::LabelFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::LabelFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void *std::function<void ()(std::shared_ptr<md::LabelFeature> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, void *a2)
{
  long long v14 = xmmword_1A28FC740;
  uint64_t v15 = 0;
  float v13 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 432))())
  {
    uint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v14;
    uint64_t v12 = v15;
    unint64_t v7 = v4[1];
    if (v7 >= v4[2])
    {
      uint64_t v9 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v4, (uint64_t)v10, &v13);
    }
    else
    {
      if (v7)
      {
        double v8 = v13;
        *(void *)unint64_t v7 = v5;
        *(void *)(v7 + 8) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        *(double *)(v7 + 40) = v8;
      }
      uint64_t v9 = v7 + 48;
    }
    v4[1] = v9;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A1DD7778(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(uint64_t *a1, uint64_t a2, float *a3)
{
  uint64_t v3 = 0x555555555555555;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < 0x2AAAAAAAAAAAAAALL) {
    uint64_t v3 = v5;
  }
  if (v3)
  {
    uint64_t v9 = 48 * v3;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 48 * v3, 8);
    uint64_t v11 = v10 + 48 * v4;
    uint64_t v3 = v10 + v9;
    if (v10)
    {
      double v12 = *a3;
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)uint64_t v11 = *(void *)a2;
      *(void *)(v11 + 8) = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(a2 + 16);
      *(void *)(v11 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(v11 + 16) = v14;
      *(double *)(v10 + 48 * v4 + 40) = v12;
    }
  }
  else
  {
    uint64_t v11 = 16 * ((a1[1] - *a1) >> 4);
  }
  uint64_t v15 = v11 + 48;
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v11;
    a1[1] = v15;
    uint64_t v23 = a1[2];
    a1[2] = v3;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = v11 + v18;
      uint64_t v20 = v17 + v18;
      *(_OWORD *)(v19 - 48) = *(_OWORD *)(v17 + v18 - 48);
      *(void *)(v20 - 48) = 0;
      *(void *)(v20 - 40) = 0;
      long long v21 = *(_OWORD *)(v17 + v18 - 32);
      *(void *)(v19 - 16) = *(void *)(v17 + v18 - 16);
      *(_OWORD *)(v19 - 32) = v21;
      *(void *)(v19 - 8) = *(void *)(v17 + v18 - 8);
      v18 -= 48;
    }
    while (v17 + v18 != v16);
    uint64_t v17 = *a1;
    uint64_t v22 = a1[1];
    *a1 = v11 + v18;
    a1[1] = v15;
    uint64_t v23 = a1[2];
    for (a1[2] = v3; v22 != v17; v22 -= 48)
    {
      uint64_t v24 = *(std::__shared_weak_count **)(v22 - 40);
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  if (v17) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v17, v23 - v17);
  }
  return v15;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5719B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF5719B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_5>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, void *a2)
{
  long long v14 = xmmword_1A28FC740;
  uint64_t v15 = 0;
  float v13 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 432))())
  {
    unint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v14;
    uint64_t v12 = v15;
    unint64_t v7 = v4[1];
    if (v7 >= v4[2])
    {
      uint64_t v9 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v4, (uint64_t)v10, &v13);
    }
    else
    {
      if (v7)
      {
        double v8 = v13;
        *(void *)unint64_t v7 = v5;
        *(void *)(v7 + 8) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        *(double *)(v7 + 40) = v8;
      }
      uint64_t v9 = v7 + 48;
    }
    v4[1] = v9;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A1DD7C14(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF571970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF571970;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_4>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, void *a2)
{
  long long v14 = xmmword_1A28FC740;
  uint64_t v15 = 0;
  float v13 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 432))())
  {
    unint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v14;
    uint64_t v12 = v15;
    unint64_t v7 = v4[1];
    if (v7 >= v4[2])
    {
      uint64_t v9 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v4, (uint64_t)v10, &v13);
    }
    else
    {
      if (v7)
      {
        double v8 = v13;
        *(void *)unint64_t v7 = v5;
        *(void *)(v7 + 8) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        *(double *)(v7 + 40) = v8;
      }
      uint64_t v9 = v7 + 48;
    }
    v4[1] = v9;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A1DD7E74(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF571928;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF571928;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_3>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, void *a2)
{
  long long v14 = xmmword_1A28FC740;
  uint64_t v15 = 0;
  float v13 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 432))())
  {
    unint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v14;
    uint64_t v12 = v15;
    unint64_t v7 = v4[1];
    if (v7 >= v4[2])
    {
      uint64_t v9 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v4, (uint64_t)v10, &v13);
    }
    else
    {
      if (v7)
      {
        double v8 = v13;
        *(void *)unint64_t v7 = v5;
        *(void *)(v7 + 8) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        *(double *)(v7 + 40) = v8;
      }
      uint64_t v9 = v7 + 48;
    }
    v4[1] = v9;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A1DD80D4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5718E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF5718E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_2>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, void *a2)
{
  long long v14 = xmmword_1A28FC740;
  uint64_t v15 = 0;
  float v13 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 432))())
  {
    unint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v14;
    uint64_t v12 = v15;
    unint64_t v7 = v4[1];
    if (v7 >= v4[2])
    {
      uint64_t v9 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v4, (uint64_t)v10, &v13);
    }
    else
    {
      if (v7)
      {
        double v8 = v13;
        *(void *)unint64_t v7 = v5;
        *(void *)(v7 + 8) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        *(double *)(v7 + 40) = v8;
      }
      uint64_t v9 = v7 + 48;
    }
    v4[1] = v9;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A1DD8334(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF571898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF571898;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, void *a2)
{
  long long v14 = xmmword_1A28FC740;
  uint64_t v15 = 0;
  float v13 = **(float **)(a1 + 8);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 432))())
  {
    unint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v14;
    uint64_t v12 = v15;
    unint64_t v7 = v4[1];
    if (v7 >= v4[2])
    {
      uint64_t v9 = std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>>::__emplace_back_slow_path<md::LabelFeatureSelection,float &>(v4, (uint64_t)v10, &v13);
    }
    else
    {
      if (v7)
      {
        double v8 = v13;
        *(void *)unint64_t v7 = v5;
        *(void *)(v7 + 8) = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        *(double *)(v7 + 40) = v8;
      }
      uint64_t v9 = v7 + 48;
    }
    v4[1] = v9;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1A1DD8594(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF571850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF571850;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0,std::allocator<md::StandardLabeler::hitLineFeaturesAtPixel(gm::Matrix<float,2,1> const&,std::vector<md::LabelFeatureHitResult,geo::StdAllocator<md::LabelFeatureHitResult,mdm::Allocator>> &,BOOL)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

uint64_t md::StandardLabeler::adoptSelectedLabelMarker(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(*a2 + 224))
  {
    uint64_t v5 = a1 + 296;
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 304);
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v7 = *(std::__shared_weak_count **)(a1 + 320);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    double v8 = (uint64_t *)(v5 + 16);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v9 = *(void **)(a1 + 280);
    if (v9)
    {
      *(void *)(a1 + 280) = 0;
    }
    uint64_t v10 = (*(void (**)(void))(*(void *)*a2 + 424))(*a2);
    if (v10)
    {
      objc_storeStrong((id *)(a1 + 280), v10);
LABEL_54:
      uint64_t v43 = *a2;
      uint64_t v42 = a2[1];
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v44 = *(std::__shared_weak_count **)(a1 + 304);
      *(void *)(a1 + 296) = v43;
      *(void *)(a1 + 304) = v42;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      uint64_t v2 = 1;
      goto LABEL_60;
    }
    long long v11 = (unsigned char *)*a2;
    double v49 = 0.0;
    double v50 = 0.0;
    if (v11[225] == 1 || (*(unsigned int (**)(unsigned char *))(*(void *)v11 + 160))(v11))
    {
      *(double *)&uint64_t v12 = COERCE_DOUBLE(operator new(0x1D8uLL));
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581CC8;
      *(void *)&long long v51 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v12[1]);
      *((void *)&v51 + 1) = v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      double v49 = *(double *)&v51;
      double v50 = *(double *)&v12;
      (*(void (**)(double *__return_ptr, unsigned char *))(*(void *)v11 + 592))(&v54, v11);
      long long v14 = v12[9].__vftable;
      if ((std::__shared_weak_count_vtbl *)v12[9].__shared_owners_ != v14)
      {
        if (fabs(v54) <= 85.0511169)
        {
          float64_t v47 = v55;
          long double v19 = tan(v54 * 0.00872664626 + 0.785398163);
          v13.n128_f64[0] = log(v19);
          v20.f64[0] = v47;
          *(void *)&v20.f64[1] = v13.n128_u64[0];
          v13.n128_u64[1] = 0x3FC45F306DC9C883;
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)&v14->__get_deleter = vmlaq_f64(_Q1, (float64x2_t)xmmword_1A28FCBE0, v20);
          *(_WORD *)((char *)&v14[1].~__shared_weak_count + 5) = 257;
        }
        else
        {
          double v15 = v55 * 0.0174532925;
          __double2 v16 = __sincos_stret(v54 * 0.0174532925);
          double v17 = 6378137.0 / sqrt(v16.__sinval * v16.__sinval * -0.00669437999 + 1.0);
          __double2 v18 = __sincos_stret(v15);
          *(double *)&v14->~__shared_weak_count = v17 * v16.__cosval * v18.__cosval;
          *(double *)&v14->~__shared_weak_count_0 = v17 * v16.__cosval * v18.__sinval;
          *(double *)&v14->__on_zero_shared = v16.__sinval * 0.99330562 * v17;
          BYTE4(v14[1].~__shared_weak_count) = 1;
        }
        v13.n128_f64[0] = v56;
        if (v56 != 1.79769313e308)
        {
          v13.n128_f32[0] = v56;
          LODWORD(v14[1].~__shared_weak_count) = v13.n128_u32[0];
        }
      }
      if ((*(unsigned int (**)(unsigned char *, __n128))(*(void *)v11 + 160))(v11, v13))
      {
        (*(void (**)(unsigned char *))(*(void *)v11 + 384))(v11);
        uint64_t v26 = (std::__shared_weak_count_vtbl *)(id)objc_claimAutoreleasedReturnValue();
        BOOL v27 = v26;
        if (v26) {
          uint64_t v28 = v26;
        }
        uint64_t v29 = v12[15].__vftable;
        v12[15].__vftable = v27;
      }
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      double v30 = *(int64x2_t **)&v49;
      if (v49 == 0.0) {
        goto LABEL_51;
      }
      (*(void (**)(double *__return_ptr, unsigned char *))(*(void *)v11 + 128))(&v54, v11);
      int v31 = SHIBYTE(v56);
      double v32 = v54;
      (*(void (**)(long long *__return_ptr, unsigned char *))(*(void *)v11 + 144))(&v51, v11);
      if (v31 >= 0) {
        uint64_t v33 = (const char *)&v54;
      }
      else {
        uint64_t v33 = *(const char **)&v32;
      }
      if (v52 >= 0) {
        char v34 = (const char *)&v51;
      }
      else {
        char v34 = (const char *)v51;
      }
      md::LabelExternalFeature::addTextForZoom(*(int64x2_t **)&v49, 0, 0, v33, v34);
      if (SHIBYTE(v52) < 0) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v53 + 40))(v53, v51, v52 & 0x7FFFFFFFFFFFFFFFLL);
      }
      if (SHIBYTE(v56) < 0) {
        (*(void (**)(uint64_t, double, uint64_t))(*(void *)v57 + 40))(v57, COERCE_DOUBLE(*(void *)&v54), *(void *)&v56 & 0x7FFFFFFFFFFFFFFFLL);
      }
      *(void *)(*(void *)&v49 + 16) = (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 304))(v11);
      (*(void (**)(double *__return_ptr, unsigned char *))(*(void *)v11 + 96))(&v54, v11);
      double v36 = v54;
      double v35 = v55;
      if (v55 != 0.0) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v55 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = (std::__shared_weak_count *)v30[2].i64[1];
      *(double *)v30[2].i64 = v36;
      *(double *)&v30[2].i64[1] = v35;
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      uint64_t v38 = *(std::__shared_weak_count **)&v55;
      if (v55 != 0.0 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v49 == 0.0) {
      goto LABEL_51;
    }
    if (*(unsigned char *)(*(void *)&v49 + 8))
    {
LABEL_48:
      if (*v8)
      {
        int v40 = 1;
        uint64_t v39 = *v8;
        *(void *)(v39 + 72) = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 24) + 288) + 680), 1uLL)+ 1;
        uint64_t v41 = *(std::__shared_weak_count **)&v50;
        if (v50 == 0.0) {
          goto LABEL_53;
        }
        goto LABEL_52;
      }
LABEL_51:
      int v40 = 0;
      uint64_t v41 = *(std::__shared_weak_count **)&v50;
      if (v50 == 0.0) {
        goto LABEL_53;
      }
LABEL_52:
      if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        if (v40) {
          goto LABEL_54;
        }
        goto LABEL_63;
      }
LABEL_53:
      if (v40) {
        goto LABEL_54;
      }
LABEL_63:
      uint64_t v2 = 0;
LABEL_60:

      return v2;
    }
    uint64_t v46 = *(std::__shared_weak_count **)&v50;
    double v54 = v49;
    double v55 = v50;
    if (v50 != 0.0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v50 + 8), 1uLL, memory_order_relaxed);
    }
    if (*(void *)(*(void *)&v49 + 336))
    {
      if (!*(unsigned char *)(*(void *)(a1 + 24) + 3568))
      {
LABEL_74:
        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        goto LABEL_48;
      }
      std::make_shared[abi:nn180100]<md::TrafficIncidentLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,void>(&v51, &v54);
      long long v48 = v51;
      if (*((void *)&v51 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      std::make_shared[abi:nn180100]<md::PointLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,BOOL,md::LabelManager *&,void>((md::PointLabelFeatureBase **)&v51, (uint64_t *)&v54, 0, *(void *)(a1 + 24));
      long long v48 = v51;
      if (*((void *)&v51 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
    std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)v8, &v48);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v48);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v51);
    goto LABEL_74;
  }
  return 0;
}

void sub_1A1DD8E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::make_shared[abi:nn180100]<md::TrafficIncidentLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,void>(void *a1, void *a2)
{
  unint64_t v4 = operator new(0x1A0uLL);
  v4[1] = 0;
  unsigned char v4[2] = 0;
  *unint64_t v4 = &unk_1EF582240;
  uint64_t v5 = *(void **)(*a2 + 336);
  v9[0] = 0;
  v9[1] = 0;
  md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature((uint64_t)(v4 + 3), v5, v9);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)v4[36];
  v4[35] = v7;
  v4[36] = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1A1DD905C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

md::PointLabelFeatureBase *std::make_shared[abi:nn180100]<md::PointLabelFeature,std::shared_ptr<md::LabelExternalPointFeature> &,BOOL,md::LabelManager *&,void>(md::PointLabelFeatureBase **a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x2B8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EF580480;
  __n128 result = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v8 + 3), a2, a3 != 0, a4);
  *a1 = result;
  a1[1] = (md::PointLabelFeatureBase *)v8;
  return result;
}

void sub_1A1DD90FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::PointLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::PointLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TrafficIncidentLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::StandardLabeler::releaseAdoptedSelectedLabelMarker(md::StandardLabeler *this)
{
  uint64_t v2 = *((void *)this + 30);
  if (v2) {
    atomic_store(0, (unsigned __int8 *)(*(void *)(v2 + 288) + 1243));
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(md::StandardLabeler *, uint64_t *))(*(void *)this + 176))(this, &v5);
  uint64_t v3 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return (*(uint64_t (**)(md::StandardLabeler *))(*(void *)this + 200))(this);
}

void sub_1A1DD9300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::ARWalkingFeatureSet::~ARWalkingFeatureSet(md::ARWalkingFeatureSet *this)
{
  uint64_t v2 = *((void *)this + 36);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 37);
    unint64_t v4 = (void *)*((void *)this + 36);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 8);
        v3 -= 8;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 36);
    }
    *((void *)this + 37) = v2;
    operator delete(v4);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table((uint64_t)this + 248);
  uint64_t v6 = (void *)*((void *)this + 28);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v6 + 2);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *((void *)this + 22);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 23);
    uint64_t v11 = *((void *)this + 22);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v12->__on_zero_shared)(v12, v11);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 16;
      }
      while (v10 != v9);
      uint64_t v11 = *((void *)this + 22);
    }
    *((void *)this + 23) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 25) + 40))(*((void *)this + 25), v11, *((void *)this + 24) - v11);
  }
  uint64_t v13 = *((void *)this + 18);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 19);
    uint64_t v15 = *((void *)this + 18);
    if (v14 != v13)
    {
      do
      {
        __double2 v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v15);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      uint64_t v15 = *((void *)this + 18);
    }
    *((void *)this + 19) = v13;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 21) + 40))(*((void *)this + 21), v15, *((void *)this + 20) - v15);
  }
  uint64_t v17 = *((void *)this + 14);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 15);
    uint64_t v19 = *((void *)this + 14);
    if (v18 != v17)
    {
      do
      {
        float64x2_t v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v20->__on_zero_shared)(v20, v19);
          std::__shared_weak_count::__release_weak(v20);
        }
        v18 -= 16;
      }
      while (v18 != v17);
      uint64_t v19 = *((void *)this + 14);
    }
    *((void *)this + 15) = v17;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 17) + 40))(*((void *)this + 17), v19, *((void *)this + 16) - v19);
  }
  uint64_t v21 = *((void *)this + 10);
  if (v21)
  {
    uint64_t v22 = *((void *)this + 11);
    uint64_t v23 = *((void *)this + 10);
    if (v22 != v21)
    {
      do
      {
        uint64_t v24 = *(std::__shared_weak_count **)(v22 - 8);
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v24->__on_zero_shared)(v24, v23);
          std::__shared_weak_count::__release_weak(v24);
        }
        v22 -= 16;
      }
      while (v22 != v21);
      uint64_t v23 = *((void *)this + 10);
    }
    *((void *)this + 11) = v21;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), v23, *((void *)this + 12) - v23);
  }
  uint64_t v25 = *((void *)this + 6);
  if (v25)
  {
    *((void *)this + 7) = v25;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 9) + 40))(*((void *)this + 9), v25, *((void *)this + 8) - v25);
  }
  uint64_t v26 = *((void *)this + 3);
  if (v26)
  {
    uint64_t v27 = *((void *)this + 4);
    uint64_t v28 = (void *)*((void *)this + 3);
    if (v27 != v26)
    {
      do
      {
        uint64_t v29 = *(std::__shared_weak_count **)(v27 - 8);
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }

        v27 -= 24;
      }
      while (v27 != v26);
      uint64_t v28 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v26;
    operator delete(v28);
  }
  *(void *)this = &unk_1EF5599B8;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      uint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5) {
        goto LABEL_7;
      }
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[4];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = (void *)a1[2];
  a1[2] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5599B8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5599B8;

  return a1;
}

uint64_t *std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 32);
  }
  uint64_t v5 = *a1;
  *a1 = 0;
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v5, 8 * a1[1]);
  }
  return a1;
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = **(md::LabelManager ***)(a1 + 8);
  uint64_t v2 = [[VKARWalkingElevationRequestFailureInfo alloc] initWithReason:1];
  md::LabelManager::arWalkingElevationRequestFailure(v1, v2);
}

void sub_1A1DD9B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571DF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF571DF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::~__func()
{
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = **(md::LabelManager ***)(a1 + 8);
  uint64_t v2 = [[VKARWalkingElevationRequestFailureInfo alloc] initWithReason:2];
  md::LabelManager::arWalkingElevationRequestFailure(v1, v2);
}

void sub_1A1DD9C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571DA8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF571DA8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::~__func()
{
}

void ___ZL34GEOGetVectorKitARWalkingSupportLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "ARWalkingSupport");
  uint64_t v1 = (void *)GEOGetVectorKitARWalkingSupportLog(void)::log;
  GEOGetVectorKitARWalkingSupportLog(void)::log = (uint64_t)v0;
}

void md::ARWalkingSupport::shouldUseHighPrecisionAltitude(md::ARWalkingSupport *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 9) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    unint64_t v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Should use high precision altitude:%d", (uint8_t *)v5, 8u);
    }
    *((unsigned char *)this + 9) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void md::ARWalkingSupport::setARWalkingFeatures(md::ARWalkingSupport *this, VKARWalkingFeatureSet *a2, char a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = v5;
  if ((a3 & 1) == 0 && *((VKARWalkingFeatureSet **)this + 56) == v5) {
    goto LABEL_10;
  }
  id v13 = 0;
  if (*((unsigned char *)this + 88)) {
    id v13 = *((id *)this + 8);
  }
  uint64_t v7 = v6;
  uint64_t v12 = v7;
  if (*((unsigned char *)this + 88))
  {
    uint64_t v8 = v7;
    uint64_t v9 = (void *)*((void *)this + 8);
    *((void *)this + 8) = v8;

    *((unsigned char *)this + 80) = a3;
  }
  else
  {
    *((void *)this + 7) = &unk_1EF5599B8;
    *((void *)this + 8) = 0;
    uint64_t v10 = v7;
    uint64_t v11 = (void *)*((void *)this + 8);
    *((void *)this + 8) = v10;

    *((unsigned char *)this + 80) = a3;
    *((unsigned char *)this + 88) = 1;
  }

  md::ARWalkingSupport::updateFeatureSetState((uint64_t)this, v13, 5);
  if (*((unsigned char *)this + 88))
  {
    md::ARWalkingSupport::updateFeatureSetState((uint64_t)this, *((void **)this + 8), 1);

LABEL_10:
    return;
  }
  std::__throw_bad_optional_access[abi:nn180100]();
  __break(1u);
}

void sub_1A1DD9FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::updateFeatureSetState(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v6 || [v6 state] == a3) {
    goto LABEL_89;
  }
  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
  }
  uint64_t v8 = (void *)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *((void *)&off_1E5A8BBF8 + a3 - 1);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v7;
    uint64_t v10 = v8;
    _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "Updating feature set state to %@ - %@", buf, 0x16u);
  }
  [v7 setState:a3];
  double v50 = &unk_1EF5599B8;
  obunint64_t j = v7;
  unint64_t v11 = [obj hash];
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 912);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v3 = v11;
      if (v11 >= v13) {
        unint64_t v3 = v11 % v13;
      }
    }
    else
    {
      unint64_t v3 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ****)(*(void *)(a1 + 904) + 8 * v3);
    if (v15)
    {
      __double2 v16 = *v15;
      if (*v15)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v16[1];
            if (v18 == (uint64_t *)v12)
            {
              if (geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v16[3], (uint64_t)&v50))goto LABEL_88; {
            }
              }
            else if (((unint64_t)v18 & (v13 - 1)) != v3)
            {
              goto LABEL_29;
            }
            __double2 v16 = (uint64_t **)*v16;
            if (!v16) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v17 = (unint64_t)v16[1];
          if (v17 == v12)
          {
            if (geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v16[3], (uint64_t)&v50))goto LABEL_88; {
          }
            }
          else
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
            if (v17 != v3) {
              break;
            }
          }
          __double2 v16 = (uint64_t **)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_29:
  uint64_t v19 = operator new(0x28uLL);
  float64x2_t v20 = (void *)(a1 + 920);
  *(void *)buf = v19;
  *(void *)&buf[8] = a1 + 920;
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = v12;
  *((void *)v19 + 2) = &unk_1EF5599B8;
  *((void *)v19 + 3) = 0;
  objc_storeStrong((id *)v19 + 3, obj);
  id v21 = obj;
  obunint64_t j = 0;

  float v22 = (float)(unint64_t)(*(void *)(a1 + 928) + 1);
  buf[16] = 1;
  float v23 = *(float *)(a1 + 936);
  if ((((float)(v23 * (float)v13) >= v22) & ~(v13 == 0)) == 0)
  {
    BOOL v24 = 1;
    if (v13 >= 3) {
      BOOL v24 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v13);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v13 = *(void *)(a1 + 912);
    if (prime <= v13)
    {
      if (prime >= v13) {
        goto LABEL_65;
      }
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 928) / *(float *)(a1 + 936));
      if (v13 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime >= v13)
      {
        unint64_t v13 = *(void *)(a1 + 912);
LABEL_65:
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13) {
            unint64_t v3 = v12 % v13;
          }
          else {
            unint64_t v3 = v12;
          }
        }
        else
        {
          unint64_t v3 = (v13 - 1) & v12;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        double v49 = *(void **)(a1 + 904);
        *(void *)(a1 + 904) = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v13 = 0;
        *(void *)(a1 + 912) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v28 = operator new(8 * prime);
    uint64_t v29 = *(void **)(a1 + 904);
    *(void *)(a1 + 904) = v28;
    if (v29) {
      operator delete(v29);
    }
    uint64_t v30 = 0;
    *(void *)(a1 + 912) = prime;
    do
      *(void *)(*(void *)(a1 + 904) + 8 * v30++) = 0;
    while (prime != v30);
    int v31 = (void *)*v20;
    if (!*v20)
    {
LABEL_64:
      unint64_t v13 = prime;
      goto LABEL_65;
    }
    size_t v32 = v31[1];
    size_t v33 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v34 = v32 & v33;
      *(void *)(*(void *)(a1 + 904) + 8 * v34) = v20;
      for (uint64_t i = (void *)*v31; *v31; uint64_t i = (void *)*v31)
      {
        size_t v36 = i[1] & v33;
        if (v36 == v34)
        {
          int v31 = i;
        }
        else
        {
          uint64_t v37 = *(void *)(a1 + 904);
          if (*(void *)(v37 + 8 * v36))
          {
            *int v31 = *i;
            uint64_t v38 = 8 * v36;
            *uint64_t i = **(void **)(*(void *)(a1 + 904) + v38);
            **(void **)(*(void *)(a1 + 904) + v38) = i;
          }
          else
          {
            *(void *)(v37 + 8 * v36) = v31;
            int v31 = i;
            size_t v34 = v36;
          }
        }
      }
      goto LABEL_64;
    }
    if (v32 >= prime) {
      v32 %= prime;
    }
    *(void *)(*(void *)(a1 + 904) + 8 * v32) = v20;
    uint64_t v42 = (void *)*v31;
    if (!*v31) {
      goto LABEL_64;
    }
    while (1)
    {
      size_t v44 = v42[1];
      if (v44 >= prime) {
        v44 %= prime;
      }
      if (v44 != v32)
      {
        uint64_t v45 = *(void *)(a1 + 904);
        if (!*(void *)(v45 + 8 * v44))
        {
          *(void *)(v45 + 8 * v44) = v31;
          goto LABEL_69;
        }
        *int v31 = *v42;
        uint64_t v43 = 8 * v44;
        *uint64_t v42 = **(void **)(*(void *)(a1 + 904) + v43);
        **(void **)(*(void *)(a1 + 904) + v43) = v42;
        uint64_t v42 = v31;
      }
      size_t v44 = v32;
LABEL_69:
      int v31 = v42;
      uint64_t v42 = (void *)*v42;
      size_t v32 = v44;
      if (!v42) {
        goto LABEL_64;
      }
    }
  }
LABEL_78:
  uint64_t v46 = *(void *)(a1 + 904);
  float64_t v47 = *(void **)(v46 + 8 * v3);
  if (v47)
  {
    *(void *)uint64_t v19 = *v47;
  }
  else
  {
    *(void *)uint64_t v19 = *v20;
    *float64x2_t v20 = v19;
    *(void *)(v46 + 8 * v3) = v20;
    if (!*(void *)v19) {
      goto LABEL_87;
    }
    unint64_t v48 = *(void *)(*(void *)v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v48 >= v13) {
        v48 %= v13;
      }
    }
    else
    {
      v48 &= v13 - 1;
    }
    float64_t v47 = (void *)(*(void *)(a1 + 904) + 8 * v48);
  }
  *float64_t v47 = v19;
LABEL_87:
  ++*(void *)(a1 + 928);
LABEL_88:
  double v50 = &unk_1EF5599B8;

LABEL_89:
}

void sub_1A1DDA5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_ptr<std::__hash_node<geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = *(id *)(a2 + 8);
  id v5 = v3;
  id v6 = v4;
  if (v6 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = [v5 isEqual:v6];
  }

  return v7;
}

void sub_1A1DDA684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<geo::_retain_ptr<VKARWalkingFeatureSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void (****)(void))a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v2[2])();
    }
    operator delete(v2);
  }
  return a1;
}

void md::ARWalkingSupport::setHighPrecisionAltitudeDistanceThreshold(uint64_t a1, double *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*a2 != *(double *)(a1 + 16))
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    id v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      double v5 = *a2;
      int v7 = 134217984;
      double v8 = v5;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "high precision altitude distance threshold:%f", (uint8_t *)&v7, 0xCu);
    }
    double v6 = *a2;
    *(double *)(a1 + 16) = *a2;
    *(double *)(a1 + 24) = v6 * v6;
    md::ARWalkingSupport::setARWalkingFeatures((md::ARWalkingSupport *)a1, *(VKARWalkingFeatureSet **)(a1 + 448), 1);
  }
}

void md::ARWalkingSupport::setHighPrecisionZLevel(md::ARWalkingSupport *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 48) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    id v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "high precision zLevel:%d", (uint8_t *)v5, 8u);
    }
    *((unsigned char *)this + 48) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void md::ARWalkingSupport::prepareContinueFeaturePlacementsForRegion(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = (unint64_t)&v124;
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  id v105 = *(id *)(*a2 + 200);
  uint64_t v9 = *(uint64_t ***)(*v6 + 304);
  if (!v9)
  {
    unint64_t v12 = 0;
    uint64_t v10 = 0;
    goto LABEL_155;
  }
  uint64_t v10 = 0;
  double v11 = 0.0;
  unint64_t v12 = 0;
  unint64_t v13 = (double *)(a3 + 8);
  long long v106 = v6;
  do
  {
    uint8x8_t v14 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v9[2]);
    double v15 = *v14;
    if (*v14 < *(double *)(a3 + 24) || v15 >= *(double *)(a3 + 40)) {
      goto LABEL_5;
    }
    double v17 = v14[1];
    uint64_t v18 = *(double **)a3;
    BOOL v19 = v17 >= *(double *)(a3 + 32) && v17 < *(double *)(a3 + 48);
    BOOL v20 = !v19 || v18 == v13;
    if (v20) {
      goto LABEL_5;
    }
    while (v15 < v18[4] || v15 >= v18[6] || v17 < v18[5] || v17 >= v18[7])
    {
      id v21 = (double *)*((void *)v18 + 1);
      if (v21)
      {
        do
        {
          float v22 = v21;
          id v21 = *(double **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          float v22 = (double *)*((void *)v18 + 2);
          BOOL v20 = *(void *)v22 == (void)v18;
          uint64_t v18 = v22;
        }
        while (!v20);
      }
      uint64_t v18 = v22;
      if (v22 == v13) {
        goto LABEL_5;
      }
    }
    float v23 = v9[2];
    if ((unint64_t)v10 < *(void *)&v11)
    {
      *(_DWORD *)uint64_t v10 = *((_DWORD *)v23 + 40);
      v10 += 4;
      unint64_t v8 = (unint64_t)&v124;
      goto LABEL_5;
    }
    BOOL v24 = v12;
    unint64_t v25 = v10;
    uint64_t v26 = v10 - v12;
    uint64_t v27 = v26 >> 2;
    unint64_t v28 = (v26 >> 2) + 1;
    __p = v24;
    if (v28 >> 62) {
      abort();
    }
    unint64_t v29 = *(void *)&v11 - (void)v24;
    unint64_t v30 = (uint64_t)(*(void *)&v11 - (void)v24) >> 1;
    if (v30 > v28) {
      unint64_t v28 = v30;
    }
    if (v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v28;
    }
    uint64_t v104 = a1;
    if (v31)
    {
      if (v31 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v32 = (char *)operator new(4 * v31);
    }
    else
    {
      size_t v32 = 0;
    }
    size_t v33 = &v32[4 * v27];
    *(_DWORD *)size_t v33 = *((_DWORD *)v23 + 40);
    size_t v34 = v33 + 4;
    double v35 = __p;
    if (v25 != __p)
    {
      unint64_t v36 = v25 - 4 - __p;
      if (v36 >= 0x2C)
      {
        if ((unint64_t)(v25 - &v32[v26]) >= 0x20)
        {
          uint64_t v39 = (v36 >> 2) + 1;
          uint64_t v37 = &v25[-4 * (v39 & 0x7FFFFFFFFFFFFFF8)];
          uint8x8_t v40 = &v32[4 * v27 - 16];
          uint64_t v41 = v25 - 16;
          uint64_t v42 = v39 & 0x7FFFFFFFFFFFFFF8;
          double v35 = __p;
          do
          {
            long long v43 = *(_OWORD *)v41;
            *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
            *(_OWORD *)uint8x8_t v40 = v43;
            v40 -= 32;
            v41 -= 32;
            v42 -= 8;
          }
          while (v42);
          v33 -= 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v6 = v106;
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
        uint64_t v37 = v25;
      }
      else
      {
        uint64_t v37 = v25;
      }
      double v35 = __p;
      uint64_t v6 = v106;
      do
      {
LABEL_49:
        int v38 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v33 - 1) = v38;
        v33 -= 4;
      }
      while (v37 != v35);
      goto LABEL_50;
    }
    uint64_t v6 = v106;
LABEL_50:
    *(void *)&double v11 = &v32[4 * v31];
    if (v35) {
      operator delete(v35);
    }
    uint64_t v10 = v34;
    unint64_t v12 = v33;
    unint64_t v8 = (unint64_t)&v124;
    a1 = v104;
LABEL_5:
    uint64_t v9 = (uint64_t **)*v9;
  }
  while (v9);
  if (v12 != v10)
  {
    uint64_t v107 = (void *)(a4 + 16);
    size_t v44 = (unsigned int *)v12;
    __pa = v12;
    while (1)
    {
      unsigned int v45 = *v44;
      unsigned int __val = *v44;
      uint64_t v46 = *v6;
      uint64_t v47 = *(void *)(*v6 + 272);
      if (v47)
      {
        uint64_t v48 = v46 + 272;
        do
        {
          unsigned int v49 = *(_DWORD *)(v47 + 32);
          BOOL v50 = v49 >= v45;
          if (v49 >= v45) {
            long long v51 = (uint64_t *)v47;
          }
          else {
            long long v51 = (uint64_t *)(v47 + 8);
          }
          if (v50) {
            uint64_t v48 = v47;
          }
          uint64_t v47 = *v51;
        }
        while (*v51);
        if (v48 != v46 + 272 && *(_DWORD *)(v48 + 32) <= v45)
        {
          uint64_t v52 = *(void *)(v48 + 40);
          if (v52)
          {
            if (*(unsigned char *)(v52 + 136)) {
              goto LABEL_60;
            }
          }
        }
      }
      if (!*(unsigned char *)(a1 + 9))
      {
        *(void *)unint64_t v114 = 0;
        *(void *)&v114[8] = 0;
        *(void *)&v11 &= 0xFFFFFFFFFFFFFF00;
        md::ARWalkingContinueLabelFeature::setHighPrecisionAltitudeForPlacement(v46, v45, (uint64_t *)v114, 0, v11);
        goto LABEL_60;
      }
      uint64_t v53 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v46 + 112))(v46, &__val);
      *(_OWORD *)unint64_t v114 = *(_OWORD *)v53;
      *(void *)&v114[16] = *(void *)(v53 + 16);
      *(_OWORD *)uint64_t v115 = *(_OWORD *)(v53 + 24);
      *(_DWORD *)&v115[16] = *(_DWORD *)(v53 + 40);
      *(_DWORD *)&v115[19] = *(_DWORD *)(v53 + 43);
      uint64_t v54 = a1;
      double v55 = *(uint64_t **)(a1 + 776);
      md::LabelPoint::coordinate((md::LabelPoint *)&buf, (uint64_t)v114);
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      md::HighPrecisionAltitudeRequestor::requestAltitude(&v111, v55, (double *)&v124);
      uint64_t v56 = v111;
      if (!v111)
      {
        if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
        }
        double v61 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          if (__val)
          {
            std::to_string(&v124, __val);
            double v62 = &v124;
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              double v62 = (std::string *)v124.__r_.__value_.__r.__words[0];
            }
          }
          else
          {
            *((unsigned char *)&v124.__r_.__value_.__s + 23) = 7;
            strcpy((char *)&v124, "UNKNOWN");
            double v62 = &v124;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v105;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          long long v126 = "false";
          __int16 v127 = 2080;
          uint64_t v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARWalkingSupport.mm";
          __int16 v129 = 1024;
          int v130 = 667;
          _os_log_impl(&dword_1A1780000, v61, OS_LOG_TYPE_ERROR, "Failed to request high precision altitude for placement:%s of Continue %@: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&buf, 0x30u);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
        }

LABEL_150:
        double v81 = v112;
        if (v112) {
          goto LABEL_151;
        }
        goto LABEL_59;
      }
      uint64_t v57 = v10;
      unint64_t v58 = __val;
      unint64_t v59 = *(void *)(a4 + 8);
      if (v59)
      {
        uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
        v60.i16[0] = vaddlv_u8(v60);
        if (v60.u32[0] > 1uLL)
        {
          unint64_t v8 = __val;
          if (v59 <= __val) {
            unint64_t v8 = __val % v59;
          }
        }
        else
        {
          unint64_t v8 = (v59 - 1) & __val;
        }
        uint64_t v63 = *(void ***)(*(void *)a4 + 8 * v8);
        if (v63)
        {
          double v64 = *v63;
          if (*v63)
          {
            if (v60.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v66 = *((void *)v64 + 1);
                if (v66 == __val)
                {
                  if (*((_DWORD *)v64 + 4) == __val) {
                    goto LABEL_146;
                  }
                }
                else if ((v66 & (v59 - 1)) != v8)
                {
                  goto LABEL_104;
                }
                double v64 = *(void **)v64;
                if (!v64) {
                  goto LABEL_104;
                }
              }
            }
            do
            {
              unint64_t v65 = *((void *)v64 + 1);
              if (v65 == __val)
              {
                if (*((_DWORD *)v64 + 4) == __val) {
                  goto LABEL_146;
                }
              }
              else
              {
                if (v65 >= v59) {
                  v65 %= v59;
                }
                if (v65 != v8) {
                  goto LABEL_104;
                }
              }
              double v64 = *(void **)v64;
            }
            while (v64);
          }
        }
      }
      double v64 = operator new(0x28uLL);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
      buf.__r_.__value_.__l.__size_ = a4 + 16;
      *(void *)double v64 = 0;
      *((void *)v64 + 1) = v58;
      *((_DWORD *)v64 + 4) = v58;
      *((void *)v64 + 3) = 0;
      *((void *)v64 + 4) = 0;
      buf.__r_.__value_.__s.__data_[16] = 1;
      float v67 = (float)(unint64_t)(*(void *)(a4 + 24) + 1);
      float v68 = *(float *)(a4 + 32);
      if (!v59) {
        goto LABEL_107;
      }
LABEL_104:
      if ((float)(v68 * (float)v59) >= v67)
      {
        unint64_t v58 = v8;
      }
      else
      {
LABEL_107:
        BOOL v69 = (v59 & (v59 - 1)) != 0;
        if (v59 < 3) {
          BOOL v69 = 1;
        }
        unint64_t v70 = v69 | (2 * v59);
        unint64_t v71 = vcvtps_u32_f32(v67 / v68);
        size_t prime = v70 <= v71 ? v71 : v70;
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v59 = *(void *)(a4 + 8);
        }
        if (prime > v59) {
          goto LABEL_117;
        }
        if (prime < v59)
        {
          unint64_t v73 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
          if (v59 < 3 || (uint8x8_t v74 = (uint8x8_t)vcnt_s8((int8x8_t)v59), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
          {
            unint64_t v73 = std::__next_prime(v73);
          }
          else
          {
            uint64_t v75 = 1 << -(char)__clz(v73 - 1);
            if (v73 >= 2) {
              unint64_t v73 = v75;
            }
          }
          if (prime <= v73) {
            size_t prime = v73;
          }
          if (prime < v59) {
LABEL_117:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a4, prime);
        }
        unint64_t v59 = *(void *)(a4 + 8);
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v59 <= v58) {
            v58 %= v59;
          }
        }
        else
        {
          unint64_t v58 = (v59 - 1) & v58;
        }
      }
      uint64_t v76 = *(void *)a4;
      uint64_t v77 = *(void **)(*(void *)a4 + 8 * v58);
      if (v77) {
        break;
      }
      *(void *)double v64 = *v107;
      *uint64_t v107 = v64;
      *(void *)(v76 + 8 * v58) = v107;
      if (*(void *)v64)
      {
        unint64_t v78 = *(void *)(*(void *)v64 + 8);
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v78 >= v59) {
            v78 %= v59;
          }
        }
        else
        {
          v78 &= v59 - 1;
        }
        uint64_t v77 = (void *)(*(void *)a4 + 8 * v78);
        goto LABEL_144;
      }
LABEL_145:
      ++*(void *)(a4 + 24);
      uint64_t v56 = v111;
LABEL_146:
      double v79 = v112;
      unint64_t v12 = __pa;
      uint64_t v10 = v57;
      if (v112) {
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v80 = (std::__shared_weak_count *)*((void *)v64 + 4);
      *((void *)v64 + 3) = v56;
      *((void *)v64 + 4) = v79;
      uint64_t v6 = v106;
      if (!v80 || atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_150;
      }
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      double v81 = v112;
      if (v112)
      {
LABEL_151:
        if (!atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
LABEL_59:
      unint64_t v8 = (unint64_t)&v124;
      a1 = v54;
LABEL_60:
      if (++v44 == (unsigned int *)v10) {
        goto LABEL_155;
      }
    }
    *(void *)double v64 = *v77;
LABEL_144:
    void *v77 = v64;
    goto LABEL_145;
  }
LABEL_155:
  if (!*(void *)(a4 + 24))
  {
    long double v90 = (*(double *)(a3 + 24) + (*(double *)(a3 + 40) - *(double *)(a3 + 24)) * 0.5) * 6.28318531;
    long double v91 = exp((*(double *)(a3 + 32) + (*(double *)(a3 + 48) - *(double *)(a3 + 32)) * 0.5) * 6.28318531 + -3.14159265);
    double v92 = atan(v91);
    long double v93 = fmod(v90, 6.28318531);
    double v94 = fmod(v93 + 6.28318531, 6.28318531);
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    uint64_t v95 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
    {
      uint64_t v96 = *(void *)(a3 + 16);
      *(_DWORD *)unint64_t v114 = 134219011;
      *(void *)&v114[4] = (v10 - v12) >> 2;
      *(_WORD *)&v114[12] = 2049;
      *(double *)&v114[14] = v92 * 114.591559 + -90.0;
      *(_WORD *)&v114[22] = 2049;
      *(double *)uint64_t v115 = v94 * 57.2957795 + -180.0;
      *(_WORD *)&v115[8] = 2048;
      *(void *)&v115[10] = v96;
      *(_WORD *)&v115[18] = 2112;
      *(void *)&v115[20] = v105;
      _os_log_impl(&dword_1A1780000, v95, OS_LOG_TYPE_INFO, "None of the %lu placements in the region(center:%{private}f,%{private}f count:%lu) need high precision altitude for Continue in %@", v114, 0x34u);
    }

    if (!v12) {
      goto LABEL_182;
    }
LABEL_181:
    operator delete(v12);
    goto LABEL_182;
  }
  __pb = v12;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v114);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v114[16], (uint64_t)"[", 1);
  for (uint64_t i = *(uint64_t **)(a4 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v83 = *((_DWORD *)i + 4);
    if (v83)
    {
      std::to_string(&buf, v83);
      uint64_t v84 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&buf, "UNKNOWN");
      uint64_t v84 = 7;
    }
    if ((v84 & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((v84 & 0x80u) == 0) {
      std::string::size_type size = v84;
    }
    else {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v114[16], (uint64_t)p_buf, size);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v114[16], (uint64_t)",", 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v114[16], (uint64_t)"]", 1);
  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
  }
  uint64_t v87 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
  {
    if ((v122 & 0x10) != 0)
    {
      unint64_t v97 = v121;
      if (v121 < v118)
      {
        unint64_t v121 = v118;
        unint64_t v97 = v118;
      }
      uint64_t v98 = (const void **)&v117;
    }
    else
    {
      if ((v122 & 8) == 0)
      {
        std::string::size_type v88 = 0;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
        double v89 = &buf;
        goto LABEL_195;
      }
      uint64_t v98 = (const void **)&v115[16];
      unint64_t v97 = v116;
    }
    unint64_t v99 = *v98;
    std::string::size_type v88 = v97 - (void)*v98;
    if (v88 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v88 >= 0x17)
    {
      uint64_t v100 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v88 | 7) != 0x17) {
        uint64_t v100 = v88 | 7;
      }
      uint64_t v101 = v100 + 1;
      double v89 = (std::string *)operator new(v100 + 1);
      buf.__r_.__value_.__l.__size_ = v88;
      buf.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v97 - *(unsigned char *)v98;
      double v89 = &buf;
      if (!v88)
      {
LABEL_195:
        v89->__r_.__value_.__s.__data_[v88] = 0;
        uint64_t v102 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v102 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(v124.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = (std::string::size_type)v102;
        WORD2(v124.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v105;
        _os_log_impl(&dword_1A1780000, v87, OS_LOG_TYPE_INFO, "Requesting high precision altitude for placements:%s of Continue %@", (uint8_t *)&v124, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        unint64_t v12 = __pb;
        goto LABEL_200;
      }
    }
    memmove(v89, v99, v88);
    goto LABEL_195;
  }
LABEL_200:

  *(void *)unint64_t v114 = *MEMORY[0x1E4FBA408];
  uint64_t v103 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&v114[*(void *)(*(void *)v114 - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v114[16] = v103;
  *(void *)uint64_t v115 = MEMORY[0x1E4FBA470] + 16;
  if (v120 < 0) {
    operator delete(v119);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](&v123);
  if (v12) {
    goto LABEL_181;
  }
LABEL_182:
}

void sub_1A1DDB6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingContinueLabelFeature> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    double v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  double v15 = (void *)(a1 + 16);
  __double2 v16 = operator new(0x48uLL);
  unint64_t v12 = v16;
  void *v16 = 0;
  v16[1] = v8;
  uint64_t v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_36:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v28 = *(void *)a1;
  unint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  if (v29)
  {
    *unint64_t v12 = *v29;
LABEL_60:
    *unint64_t v29 = v12;
    goto LABEL_61;
  }
  *unint64_t v12 = *v15;
  *double v15 = v12;
  *(void *)(v28 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v30 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9) {
        v30 %= v9;
      }
    }
    else
    {
      v30 &= v9 - 1;
    }
    unint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1A1DDBAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    id v4 = *(void **)(a1 + 16);
    while (v4)
    {
      double v5 = v4;
      id v4 = (void *)*v4;
      unint64_t v6 = (std::__shared_weak_count *)v5[4];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v9 = *a2;
  *a2 = 0;
  uint8x8_t v10 = *(void **)a1;
  *(void *)a1 = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v13 = a2[2];
  unint64_t v12 = a2 + 2;
  uint64_t v11 = v13;
  uint64_t v14 = *(v12 - 1);
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 8) = v14;
  *(v12 - 1) = 0;
  uint64_t v15 = v12[1];
  *(void *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 + 4);
  if (v15)
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(a1 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17) {
        v16 %= v17;
      }
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
    *unint64_t v12 = 0;
    v12[1] = 0;
  }
}

uint64_t std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    unint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    id v4 = (std::__shared_weak_count *)v3[4];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  double v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingManeuverLabelFeature> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v15 = (void *)(a1 + 16);
  unint64_t v16 = operator new(0x30uLL);
  unint64_t v12 = v16;
  void *v16 = 0;
  v16[1] = v8;
  uint64_t v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v16[4] = 0;
  v16[5] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_36:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v28 = *(void *)a1;
  unint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  if (v29)
  {
    *unint64_t v12 = *v29;
LABEL_60:
    *unint64_t v29 = v12;
    goto LABEL_61;
  }
  *unint64_t v12 = *v15;
  *uint64_t v15 = v12;
  *(void *)(v28 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v30 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9) {
        v30 %= v9;
      }
    }
    else
    {
      v30 &= v9 - 1;
    }
    unint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1A1DDBFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::updateFeatureSet(md::ARWalkingSupport *this, md::ARWalkingFeatureSet *a2)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  if (*((void *)a2 + 29) + *((void *)a2 + 34))
  {
    md::LabelLayoutContext::mercatorEyePos(*(md::LabelLayoutContext **)(*(void *)this + 432));
    double v7 = v6;
    unint64_t v8 = (uint64_t **)*((void *)a2 + 33);
    if (v8)
    {
      int v125 = 0;
      while (1)
      {
        while ((md::HighPrecisionAltitudeRequest::resolveResults((md::HighPrecisionAltitudeRequest *)v8[4]) & 1) == 0)
        {
          unint64_t v8 = (uint64_t **)*v8;
          if (!v8) {
            goto LABEL_106;
          }
        }
        uint64_t v129 = 0;
        int v130 = 0;
        id v9 = (id)v8[2][85];
        LOBYTE(__val) = 0;
        char v134 = 0;
        uint8x8_t v10 = v8[4];
        if (!v10) {
          goto LABEL_16;
        }
        *(void *)&v2 &= 0xFFFFFFFFFFFFFF00;
        uint64_t v11 = (double *)v10[4];
        unint64_t v12 = (double *)v10[5];
        if (v11 == v12) {
          goto LABEL_16;
        }
        char v13 = 0;
        int v14 = 0;
        double v15 = 1.79769313e308;
        do
        {
          double v16 = vabdd_f64(v7, *v11);
          if (v16 < v15)
          {
            if (!v14) {
              char v13 = 1;
            }
            int v14 = 1;
            double v2 = *v11;
            double v15 = v16;
          }
          ++v11;
        }
        while (v11 != v12);
        if (v13)
        {
          char v17 = 0;
          double __val = v2;
          char v134 = 1;
        }
        else
        {
LABEL_16:
          char v17 = 1;
        }
        if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
        }
        float v18 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
          break;
        }
LABEL_34:

        md::ARWalkingManeuverLabelFeature::updateWithHighPrecisionAltitude(v8[2], (uint64_t)&__val, (uint64_t)v8[4], (uint64_t)v8[5]);
        uint64_t v24 = (uint64_t)v8[2];
        float v23 = v8[3];
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v129 = v24;
        int v130 = (std::__shared_weak_count *)v23;
        unint64_t v25 = (uint64_t *)*((void *)a2 + 7);
        unint64_t v26 = *((void *)a2 + 8);
        if ((unint64_t)v25 < v26)
        {
          if (v25) {
            *unint64_t v25 = v24;
          }
          uint64_t v27 = v25 + 1;
          goto LABEL_63;
        }
        uint64_t v28 = *((void *)a2 + 6);
        uint64_t v29 = ((uint64_t)v25 - v28) >> 3;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61) {
          abort();
        }
        uint64_t v31 = v26 - v28;
        if (v31 >> 2 > v30) {
          unint64_t v30 = v31 >> 2;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v32 = v30;
        }
        if (v32)
        {
          uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 9) + 16))(*((void *)a2 + 9), 8 * v32, 8);
          size_t v34 = (uint64_t *)(v33 + 8 * v29);
          uint64_t v35 = v33 + 8 * v32;
          if (v33) {
            *size_t v34 = v24;
          }
        }
        else
        {
          uint64_t v35 = 0;
          size_t v34 = (uint64_t *)(8 * v29);
        }
        uint64_t v37 = *((void *)a2 + 6);
        uint64_t v36 = *((void *)a2 + 7);
        uint64_t v38 = v36 - v37;
        if (v36 == v37)
        {
          uint8x8_t v40 = v34;
          goto LABEL_61;
        }
        unint64_t v39 = v38 - 8;
        if ((unint64_t)(v38 - 8) < 0x38)
        {
          uint8x8_t v40 = v34;
        }
        else
        {
          uint8x8_t v40 = v34;
          if ((unint64_t)(v36 - (void)v34) >= 0x20)
          {
            uint64_t v41 = (v39 >> 3) + 1;
            uint64_t v42 = v34 - 2;
            long long v43 = (long long *)(v36 - 16);
            uint64_t v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v45 = *v43;
              *((_OWORD *)v42 - 1) = *(v43 - 1);
              *(_OWORD *)uint64_t v42 = v45;
              v42 -= 4;
              v43 -= 2;
              v44 -= 4;
            }
            while (v44);
            uint8x8_t v40 = &v34[-(v41 & 0x3FFFFFFFFFFFFFFCLL)];
            v36 -= 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_60;
            }
          }
        }
        do
        {
          uint64_t v46 = *(void *)(v36 - 8);
          v36 -= 8;
          *--uint8x8_t v40 = v46;
        }
        while (v36 != v37);
LABEL_60:
        uint64_t v36 = *((void *)a2 + 6);
LABEL_61:
        uint64_t v27 = v34 + 1;
        *((void *)a2 + 6) = v40;
        *((void *)a2 + 7) = v34 + 1;
        uint64_t v47 = *((void *)a2 + 8);
        *((void *)a2 + 8) = v35;
        if (v36) {
          (*(void (**)(void, uint64_t, uint64_t))(**((void **)a2 + 9) + 40))(*((void *)a2 + 9), v36, v47 - v36);
        }
LABEL_63:
        *((void *)a2 + 7) = v27;
        id v128 = (id)v8[2][85];
        uint64_t v48 = geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::operator[]((char **)a2 + 3, &v128);
        unsigned int v49 = v130;
        if (v130) {
          atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v50 = (std::__shared_weak_count *)*((void *)v48 + 1);
        *(void *)uint64_t v48 = v24;
        *((void *)v48 + 1) = v49;
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }

        md::ARWalkingSupport::addLabelFeature(&v129, (uint64_t)a2);
        int8x8_t v51 = *(int8x8_t *)((char *)a2 + 256);
        unint64_t v52 = (unint64_t)v8[1];
        uint8x8_t v53 = (uint8x8_t)vcnt_s8(v51);
        v53.i16[0] = vaddlv_u8(v53);
        if (v53.u32[0] > 1uLL)
        {
          if (v52 >= *(void *)&v51) {
            v52 %= *(void *)&v51;
          }
        }
        else
        {
          v52 &= *(void *)&v51 - 1;
        }
        uint64_t v54 = *v8;
        uint64_t v55 = *((void *)a2 + 31);
        uint64_t v56 = *(uint64_t ***)(v55 + 8 * v52);
        do
        {
          uint64_t v57 = v56;
          uint64_t v56 = (uint64_t **)*v56;
        }
        while (v56 != v8);
        if (v57 != (uint64_t **)((char *)a2 + 264))
        {
          unint64_t v58 = v57[1];
          if (v53.u32[0] > 1uLL)
          {
            if ((unint64_t)v58 >= *(void *)&v51) {
              unint64_t v58 = (uint64_t *)((unint64_t)v58 % *(void *)&v51);
            }
          }
          else
          {
            unint64_t v58 = (uint64_t *)((unint64_t)v58 & (*(void *)&v51 - 1));
          }
          unint64_t v59 = *v8;
          if (v58 == (uint64_t *)v52) {
            goto LABEL_87;
          }
        }
        if (!v54) {
          goto LABEL_86;
        }
        uint8x8_t v60 = (uint64_t *)v54[1];
        if (v53.u32[0] > 1uLL)
        {
          if ((unint64_t)v60 >= *(void *)&v51) {
            uint8x8_t v60 = (uint64_t *)((unint64_t)v60 % *(void *)&v51);
          }
        }
        else
        {
          uint8x8_t v60 = (uint64_t *)((unint64_t)v60 & (*(void *)&v51 - 1));
        }
        unint64_t v59 = *v8;
        if (v60 != (uint64_t *)v52)
        {
LABEL_86:
          *(void *)(v55 + 8 * v52) = 0;
          unint64_t v59 = *v8;
LABEL_87:
          if (!v59) {
            goto LABEL_94;
          }
        }
        double v61 = (uint64_t *)v59[1];
        if (v53.u32[0] > 1uLL)
        {
          if ((unint64_t)v61 >= *(void *)&v51) {
            double v61 = (uint64_t *)((unint64_t)v61 % *(void *)&v51);
          }
        }
        else
        {
          double v61 = (uint64_t *)((unint64_t)v61 & (*(void *)&v51 - 1));
        }
        if (v61 != (uint64_t *)v52)
        {
          *(void *)(*((void *)a2 + 31) + 8 * (void)v61) = v57;
          unint64_t v59 = *v8;
        }
LABEL_94:
        *uint64_t v57 = v59;
        *unint64_t v8 = 0;
        --*((void *)a2 + 34);
        double v62 = (std::__shared_weak_count *)v8[5];
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          uint64_t v63 = (std::__shared_weak_count *)v8[3];
          if (v63)
          {
LABEL_97:
            if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
        }
        else
        {
          uint64_t v63 = (std::__shared_weak_count *)v8[3];
          if (v63) {
            goto LABEL_97;
          }
        }
        operator delete(v8);
        double v64 = v130;
        if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        ++v125;
        unint64_t v8 = (uint64_t **)v54;
        if (!v54) {
          goto LABEL_106;
        }
      }
      uint64_t v19 = *((void *)a2 + 41);
      BOOL v20 = v8[4];
      if (v20)
      {
        md::HighPrecisionAltitudeRequest::to_string((md::HighPrecisionAltitudeRequest *)__p, v8[4]);
        if (v132 >= 0) {
          unint64_t v21 = __p;
        }
        else {
          unint64_t v21 = (void **)__p[0];
        }
        if (v17) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v21 = (void **)"";
        if (v17)
        {
LABEL_25:
          *(_DWORD *)std::string buf = 134219010;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v138 = 2080;
          *(void *)uint64_t v139 = v21;
          *(_WORD *)&v139[8] = 2080;
          *(void *)&v139[10] = "NONE";
          __int16 v140 = 2048;
          double v141 = v7;
          __int16 v142 = 2112;
          double v143 = *(double *)&v9;
          _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_INFO, "Updating Maneuver Feature for FeatureSet(version:%llu) with high precision altitude request:(%s) resolvedAltitude:%s eyeAltitude:%f feature:%@", buf, 0x34u);
LABEL_31:
          if (v20 && v132 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_34;
        }
      }
      std::to_string(&v136, __val);
      unint64_t v22 = &v136;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v22 = (std::string *)v136.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 134219010;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v138 = 2080;
      *(void *)uint64_t v139 = v21;
      *(_WORD *)&v139[8] = 2080;
      *(void *)&v139[10] = v22;
      __int16 v140 = 2048;
      double v141 = v7;
      __int16 v142 = 2112;
      double v143 = *(double *)&v9;
      _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_INFO, "Updating Maneuver Feature for FeatureSet(version:%llu) with high precision altitude request:(%s) resolvedAltitude:%s eyeAltitude:%f feature:%@", buf, 0x34u);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v136.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
    int v125 = 0;
LABEL_106:
    long long v126 = a2;
    unint64_t v65 = (char *)a2 + 224;
    uint64_t v66 = (void *)*((void *)a2 + 28);
    uint64_t v123 = v65;
    if (v66)
    {
      while (1)
      {
        float v67 = v66;
        std::string v124 = v66 + 2;
        float v68 = (std::__shared_weak_count *)v66[3];
        uint64_t v129 = v66[2];
        int v130 = v68;
        if (v68) {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v69 = (md::HighPrecisionAltitudeRequest *)v66[6];
        __int16 v127 = v66 + 6;
        int v70 = 0;
        if (v69)
        {
          unint64_t v71 = v126;
          while (1)
          {
            while (1)
            {
              double v72 = (uint64_t **)((char *)v69 + 24);
              if (md::HighPrecisionAltitudeRequest::resolveResults(*((md::HighPrecisionAltitudeRequest **)v69 + 3))) {
                break;
              }
              BOOL v69 = *(md::HighPrecisionAltitudeRequest **)v69;
              if (!v69) {
                goto LABEL_184;
              }
            }
            unint64_t v73 = *(void *)&v4 & 0xFFFFFFFFFFFFFF00;
            uint8x8_t v74 = *v72;
            if (!*v72) {
              break;
            }
            *(void *)&v3 &= 0xFFFFFFFFFFFFFF00;
            uint64_t v75 = (double *)v74[4];
            uint64_t v76 = (double *)v74[5];
            if (v75 == v76) {
              break;
            }
            char v77 = 0;
            int v78 = 0;
            double v79 = 1.79769313e308;
            do
            {
              double v80 = vabdd_f64(v7, *v75);
              if (v80 < v79)
              {
                if (!v78) {
                  char v77 = 1;
                }
                int v78 = 1;
                double v3 = *v75;
                double v79 = v80;
              }
              ++v75;
            }
            while (v75 != v76);
            double v4 = v3;
            if (!v77) {
              goto LABEL_124;
            }
LABEL_126:
            double v81 = (unsigned int *)((char *)v69 + 16);
            float v82 = *(float *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v129 + 112))(v129, (uint64_t)v69 + 16)+ 40);
            if (v82 == 3.4028e38)
            {
              std::__throw_bad_optional_access[abi:nn180100]();
              __break(1u);
            }
            uint64_t v83 = v129;
            if (v77) {
              double v2 = v4;
            }
            else {
              *(void *)&v2 &= 0xFFFFFFFFFFFFFF00;
            }
            md::ARWalkingContinueLabelFeature::setHighPrecisionAltitudeForPlacement(v129, *v81, (uint64_t *)v69 + 3, v77 != 0, v2);
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
            }
            uint64_t v84 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
            {
              if (*v81)
              {
                std::to_string(&v136, *v81);
                if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  double v85 = &v136;
                }
                else {
                  double v85 = (std::string *)v136.__r_.__value_.__r.__words[0];
                }
              }
              else
              {
                *((unsigned char *)&v136.__r_.__value_.__s + 23) = 7;
                strcpy((char *)&v136, "UNKNOWN");
                double v85 = &v136;
              }
              uint64_t v86 = *((void *)v71 + 41);
              uint64_t v87 = *v72;
              if (*v72)
              {
                md::HighPrecisionAltitudeRequest::to_string((md::HighPrecisionAltitudeRequest *)&__val, *v72);
                if (v135 >= 0) {
                  p_val = (const char *)&__val;
                }
                else {
                  p_val = *(const char **)&__val;
                }
              }
              else
              {
                p_val = "";
              }
              double v89 = v82;
              if (v77) {
                double v90 = v4;
              }
              else {
                double v90 = v89;
              }
              id v91 = *(id *)(v83 + 200);
              *(_DWORD *)std::string buf = 136316674;
              *(void *)&uint8_t buf[4] = v85;
              __int16 v138 = 2048;
              *(void *)uint64_t v139 = v86;
              *(_WORD *)&v139[8] = 2080;
              *(void *)&v139[10] = p_val;
              __int16 v140 = 2048;
              double v141 = v89;
              __int16 v142 = 2048;
              double v143 = v90;
              __int16 v144 = 2048;
              double v145 = v7;
              __int16 v146 = 2112;
              id v147 = v91;
              _os_log_impl(&dword_1A1780000, v84, OS_LOG_TYPE_INFO, "Updating Continue placement:%s for FeatureSet(version:%llu) with high precision altitude request:(%s) previousAltitude:%f resolvedAltitude:%f eyeAltitude:%f feature:%@", buf, 0x48u);
              unint64_t v71 = v126;
              if (v87 && v135 < 0)
              {
                operator delete(*(void **)&__val);
                if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
LABEL_149:
                }
                  operator delete(v136.__r_.__value_.__l.__data_);
              }
              else if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
              {
                goto LABEL_149;
              }
            }
            int8x8_t v92 = (int8x8_t)v67[5];
            unint64_t v93 = *((void *)v69 + 1);
            uint8x8_t v94 = (uint8x8_t)vcnt_s8(v92);
            v94.i16[0] = vaddlv_u8(v94);
            if (v94.u32[0] > 1uLL)
            {
              if (v93 >= *(void *)&v92) {
                v93 %= *(void *)&v92;
              }
            }
            else
            {
              v93 &= *(void *)&v92 - 1;
            }
            uint64_t v95 = *(md::HighPrecisionAltitudeRequest **)v69;
            uint64_t v96 = v67[4];
            unint64_t v97 = *(md::HighPrecisionAltitudeRequest **)(v96 + 8 * v93);
            do
            {
              uint64_t v98 = v97;
              unint64_t v97 = *(md::HighPrecisionAltitudeRequest **)v97;
            }
            while (v97 != v69);
            if (v98 == v127) {
              goto LABEL_230;
            }
            unint64_t v99 = v98[1];
            if (v94.u32[0] > 1uLL)
            {
              if (v99 >= *(void *)&v92) {
                v99 %= *(void *)&v92;
              }
            }
            else
            {
              v99 &= *(void *)&v92 - 1;
            }
            uint64_t v100 = *(md::HighPrecisionAltitudeRequest **)v69;
            if (v99 != v93)
            {
LABEL_230:
              if (v95)
              {
                unint64_t v101 = *((void *)v95 + 1);
                if (v94.u32[0] > 1uLL)
                {
                  if (v101 >= *(void *)&v92) {
                    v101 %= *(void *)&v92;
                  }
                }
                else
                {
                  v101 &= *(void *)&v92 - 1;
                }
                uint64_t v100 = *(md::HighPrecisionAltitudeRequest **)v69;
                if (v101 == v93)
                {
LABEL_171:
                  unint64_t v102 = *((void *)v100 + 1);
                  if (v94.u32[0] > 1uLL)
                  {
                    if (v102 >= *(void *)&v92) {
                      v102 %= *(void *)&v92;
                    }
                  }
                  else
                  {
                    v102 &= *(void *)&v92 - 1;
                  }
                  if (v102 != v93)
                  {
                    *(void *)(v67[4] + 8 * v102) = v98;
                    uint64_t v100 = *(md::HighPrecisionAltitudeRequest **)v69;
                  }
                  goto LABEL_177;
                }
              }
              *(void *)(v96 + 8 * v93) = 0;
              uint64_t v100 = *(md::HighPrecisionAltitudeRequest **)v69;
            }
            if (v100) {
              goto LABEL_171;
            }
LABEL_177:
            *uint64_t v98 = v100;
            *(void *)BOOL v69 = 0;
            --v67[7];
            uint64_t v103 = (std::__shared_weak_count *)*((void *)v69 + 4);
            if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
            operator delete(v69);
            ++v70;
            BOOL v69 = v95;
            if (!v95) {
              goto LABEL_184;
            }
          }
          char v77 = 0;
LABEL_124:
          double v4 = *(double *)&v73;
          goto LABEL_126;
        }
LABEL_184:
        uint64_t v66 = (void *)*v67;
        if (v67[7])
        {
          uint64_t v104 = v130;
          if (v130) {
            goto LABEL_214;
          }
          goto LABEL_108;
        }
        int8x8_t v105 = *(int8x8_t *)((char *)v126 + 216);
        unint64_t v106 = v67[1];
        uint8x8_t v107 = (uint8x8_t)vcnt_s8(v105);
        v107.i16[0] = vaddlv_u8(v107);
        if (v107.u32[0] > 1uLL)
        {
          if (v106 >= *(void *)&v105) {
            v106 %= *(void *)&v105;
          }
        }
        else
        {
          v106 &= *(void *)&v105 - 1;
        }
        uint64_t v108 = *((void *)v126 + 26);
        uint64_t v109 = *(void **)(v108 + 8 * v106);
        do
        {
          long long v110 = v109;
          uint64_t v109 = (void *)*v109;
        }
        while (v109 != v67);
        if (v110 != v123)
        {
          unint64_t v111 = v110[1];
          if (v107.u32[0] > 1uLL)
          {
            if (v111 >= *(void *)&v105) {
              v111 %= *(void *)&v105;
            }
          }
          else
          {
            v111 &= *(void *)&v105 - 1;
          }
          double v112 = (void *)*v67;
          if (v111 == v106) {
            goto LABEL_206;
          }
        }
        if (!v66) {
          break;
        }
        unint64_t v113 = v66[1];
        if (v107.u32[0] > 1uLL)
        {
          if (v113 >= *(void *)&v105) {
            v113 %= *(void *)&v105;
          }
        }
        else
        {
          v113 &= *(void *)&v105 - 1;
        }
        double v112 = (void *)*v67;
        if (v113 != v106) {
          break;
        }
LABEL_207:
        unint64_t v114 = v112[1];
        if (v107.u32[0] > 1uLL)
        {
          if (v114 >= *(void *)&v105) {
            v114 %= *(void *)&v105;
          }
        }
        else
        {
          v114 &= *(void *)&v105 - 1;
        }
        if (v114 != v106)
        {
          *(void *)(*((void *)v126 + 26) + 8 * v114) = v110;
          double v112 = (void *)*v67;
        }
LABEL_213:
        *long long v110 = v112;
        *float v67 = 0;
        --*((void *)v126 + 29);
        std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v124);
        operator delete(v67);
        uint64_t v104 = v130;
        if (v130)
        {
LABEL_214:
          if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
LABEL_108:
        v125 += v70;
        if (!v66) {
          goto LABEL_216;
        }
      }
      *(void *)(v108 + 8 * v106) = 0;
      double v112 = (void *)*v67;
LABEL_206:
      if (!v112) {
        goto LABEL_213;
      }
      goto LABEL_207;
    }
LABEL_216:
    if (v125)
    {
      if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
      }
      uint64_t v115 = GEOGetVectorKitARWalkingSupportLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
      {
        uint64_t v116 = *((void *)v126 + 41);
        uint64_t v117 = *((void *)v126 + 29) + *((void *)v126 + 34);
        *(_DWORD *)std::string buf = 134218496;
        *(void *)&uint8_t buf[4] = v116;
        __int16 v138 = 1024;
        *(_DWORD *)uint64_t v139 = v125;
        *(_WORD *)&v139[4] = 2048;
        *(void *)&v139[6] = v117;
        _os_log_impl(&dword_1A1780000, v115, OS_LOG_TYPE_INFO, "FeatureSet(version:%llu) processed %d requests - awaiting %lu requests", buf, 0x1Cu);
      }
      uint64_t v118 = *(void *)this;
      *(unsigned char *)(v118 + 3041) = 1;
      unsigned __int8 v119 = atomic_load((unsigned __int8 *)(v118 + 3058));
      if (v119)
      {
        uint64_t v120 = *(void *)(v118 + 136);
        if (v120)
        {
          uint64_t v121 = *(void *)(v120 + 56);
          if (v121)
          {
            *(void *)std::string buf = v118;
            v136.__r_.__value_.__s.__data_[0] = 9;
            (*(void (**)(uint64_t, unsigned char *, std::string *))(*(void *)v121 + 48))(v121, buf, &v136);
          }
        }
      }
    }
  }
}

void sub_1A1DDCF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v27)
  {
    if (a27 < 0) {
      operator delete(__p);
    }
  }

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1A1DDCF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

char *geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::operator[](char **a1, id *a2)
{
  double v4 = *a1;
  if (*a1 == a1[1]) {
    goto LABEL_4;
  }
  while (1)
  {
    char v5 = [*a2 isEqual:*(void *)v4];
    double v6 = a1[1];
    if (v5) {
      break;
    }
    v4 += 24;
    if (v4 == v6) {
      goto LABEL_4;
    }
  }
  if (v4 == v6)
  {
LABEL_4:
    id v7 = *a2;
    uint64_t v27 = v7;
    double v4 = *a1;
    if (*a1 == a1[1]) {
      goto LABEL_11;
    }
    while (1)
    {
      char v8 = [v7 isEqual:*(void *)v4];
      id v9 = a1[1];
      if (v8) {
        break;
      }
      v4 += 24;
      if (v4 == v9)
      {
        double v4 = a1[1];
        goto LABEL_11;
      }
    }
    if (v4 == v9)
    {
LABEL_11:
      unint64_t v10 = (unint64_t)a1[2];
      if ((unint64_t)v4 >= v10)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
        uint64_t v15 = 2 * v14;
        if (2 * v14 <= v13 + 1) {
          uint64_t v15 = v13 + 1;
        }
        if (v14 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          char v17 = (char *)operator new(24 * v16);
        }
        else
        {
          char v17 = 0;
        }
        float v18 = &v17[24 * v13];
        uint64_t v19 = &v17[24 * v16];
        id v20 = v7;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)float v18 = v20;
        unint64_t v12 = v18 + 24;
        unint64_t v21 = *a1;
        unint64_t v22 = a1[1];
        if (v22 == *a1)
        {
          *a1 = v18;
          a1[1] = v12;
          a1[2] = v19;
        }
        else
        {
          do
          {
            long long v23 = *(_OWORD *)(v22 - 24);
            v22 -= 24;
            *(void *)unint64_t v22 = 0;
            *(_OWORD *)(v18 - 24) = v23;
            v18 -= 24;
            *((void *)v18 + 2) = *((void *)v22 + 2);
            *((void *)v22 + 1) = 0;
            *((void *)v22 + 2) = 0;
          }
          while (v22 != v21);
          unint64_t v22 = *a1;
          uint64_t v24 = a1[1];
          *a1 = v18;
          a1[1] = v12;
          for (a1[2] = v19; v24 != v22; v24 -= 24)
          {
            unint64_t v25 = (std::__shared_weak_count *)*((void *)v24 - 1);
            if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        id v11 = v7;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)double v4 = v11;
        unint64_t v12 = v4 + 24;
      }
      a1[1] = v12;
      double v4 = v12 - 24;
    }
  }
  return v4 + 8;
}

void sub_1A1DDD290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>::~pair((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::addLabelFeature(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 264))(*a1) == 25)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    *(void *)&long long v77 = v4;
    *((void *)&v77 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v6 = *(void **)(a2 + 152);
    unint64_t v7 = *(void *)(a2 + 160);
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v13 = *(void *)(a2 + 144);
      uint64_t v14 = ((uint64_t)v6 - v13) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        abort();
      }
      uint64_t v16 = v7 - v13;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v17 = v15;
      }
      if (v17)
      {
        uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 168) + 16))(*(void *)(a2 + 168), 16 * v17, 8);
        uint64_t v19 = (_OWORD *)(v18 + 16 * v14);
        uint64_t v20 = v18 + 16 * v17;
        if (v18)
        {
          *uint64_t v19 = v77;
          long long v77 = 0uLL;
        }
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v19 = (_OWORD *)(16 * v14);
      }
      char v8 = v19 + 1;
      uint64_t v37 = *(void **)(a2 + 144);
      uint64_t v38 = *(void **)(a2 + 152);
      if (v38 == v37)
      {
        *(void *)(a2 + 144) = v19;
        *(void *)(a2 + 152) = v8;
        uint64_t v41 = *(void *)(a2 + 160);
        *(void *)(a2 + 160) = v20;
      }
      else
      {
        do
        {
          long long v39 = *((_OWORD *)v38 - 1);
          v38 -= 2;
          *--uint64_t v19 = v39;
          *uint64_t v38 = 0;
          v38[1] = 0;
        }
        while (v38 != v37);
        uint64_t v38 = *(void **)(a2 + 144);
        uint8x8_t v40 = *(void **)(a2 + 152);
        *(void *)(a2 + 144) = v19;
        *(void *)(a2 + 152) = v8;
        uint64_t v41 = *(void *)(a2 + 160);
        for (*(void *)(a2 + 160) = v20; v40 != v38; v40 -= 2)
        {
          uint64_t v42 = (std::__shared_weak_count *)*(v40 - 1);
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      if (v38) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(a2 + 168) + 40))(*(void *)(a2 + 168), v38, v41 - (void)v38);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)&v77 + 1);
    }
    else
    {
      if (v6)
      {
        *double v6 = v4;
        v6[1] = v5;
        uint64_t v5 = 0;
      }
      char v8 = v6 + 2;
    }
    *(void *)(a2 + 152) = v8;
    if (!v5) {
      return;
    }
LABEL_124:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    return;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 264))(*a1) == 24)
  {
    uint64_t v9 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    *(void *)&long long v78 = v9;
    *((void *)&v78 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = *(void **)(a2 + 88);
    unint64_t v11 = *(void *)(a2 + 96);
    if ((unint64_t)v10 >= v11)
    {
      uint64_t v25 = *(void *)(a2 + 80);
      uint64_t v26 = ((uint64_t)v10 - v25) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        abort();
      }
      uint64_t v28 = v11 - v25;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v29 = v27;
      }
      if (v29)
      {
        uint64_t v30 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 104) + 16))(*(void *)(a2 + 104), 16 * v29, 8);
        uint64_t v31 = (_OWORD *)(v30 + 16 * v26);
        uint64_t v32 = v30 + 16 * v29;
        if (v30)
        {
          *uint64_t v31 = v78;
          long long v78 = 0uLL;
        }
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v31 = (_OWORD *)(16 * v26);
      }
      unint64_t v12 = v31 + 1;
      int8x8_t v51 = *(void **)(a2 + 80);
      unint64_t v52 = *(void **)(a2 + 88);
      if (v52 == v51)
      {
        *(void *)(a2 + 80) = v31;
        *(void *)(a2 + 88) = v12;
        uint64_t v55 = *(void *)(a2 + 96);
        *(void *)(a2 + 96) = v32;
      }
      else
      {
        do
        {
          long long v53 = *((_OWORD *)v52 - 1);
          v52 -= 2;
          *--uint64_t v31 = v53;
          void *v52 = 0;
          v52[1] = 0;
        }
        while (v52 != v51);
        unint64_t v52 = *(void **)(a2 + 80);
        uint64_t v54 = *(void **)(a2 + 88);
        *(void *)(a2 + 80) = v31;
        *(void *)(a2 + 88) = v12;
        uint64_t v55 = *(void *)(a2 + 96);
        for (*(void *)(a2 + 96) = v32; v54 != v52; v54 -= 2)
        {
          uint64_t v56 = (std::__shared_weak_count *)*(v54 - 1);
          if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
      if (v52) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(a2 + 104) + 40))(*(void *)(a2 + 104), v52, v55 - (void)v52);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)&v78 + 1);
    }
    else
    {
      if (v10)
      {
        *unint64_t v10 = v9;
        v10[1] = v5;
        uint64_t v5 = 0;
      }
      unint64_t v12 = v10 + 2;
    }
    *(void *)(a2 + 88) = v12;
    if (v5) {
      goto LABEL_124;
    }
  }
  else if ((*(unsigned int (**)(void))(*(void *)*a1 + 264))(*a1) == 26)
  {
    uint64_t v21 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    *(void *)&long long v79 = v21;
    *((void *)&v79 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v22 = *(void **)(a2 + 120);
    unint64_t v23 = *(void *)(a2 + 128);
    if ((unint64_t)v22 >= v23)
    {
      uint64_t v43 = *(void *)(a2 + 112);
      uint64_t v44 = ((uint64_t)v22 - v43) >> 4;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 60) {
        abort();
      }
      uint64_t v46 = v23 - v43;
      if (v46 >> 3 > v45) {
        unint64_t v45 = v46 >> 3;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v47 = v45;
      }
      if (v47)
      {
        uint64_t v48 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 136) + 16))(*(void *)(a2 + 136), 16 * v47, 8);
        unsigned int v49 = (_OWORD *)(v48 + 16 * v44);
        uint64_t v50 = v48 + 16 * v47;
        if (v48)
        {
          _OWORD *v49 = v79;
          long long v79 = 0uLL;
        }
      }
      else
      {
        uint64_t v50 = 0;
        unsigned int v49 = (_OWORD *)(16 * v44);
      }
      uint64_t v24 = v49 + 1;
      unint64_t v65 = *(void **)(a2 + 112);
      uint64_t v66 = *(void **)(a2 + 120);
      if (v66 == v65)
      {
        *(void *)(a2 + 112) = v49;
        *(void *)(a2 + 120) = v24;
        uint64_t v69 = *(void *)(a2 + 128);
        *(void *)(a2 + 128) = v50;
      }
      else
      {
        do
        {
          long long v67 = *((_OWORD *)v66 - 1);
          v66 -= 2;
          *--unsigned int v49 = v67;
          *uint64_t v66 = 0;
          v66[1] = 0;
        }
        while (v66 != v65);
        uint64_t v66 = *(void **)(a2 + 112);
        float v68 = *(void **)(a2 + 120);
        *(void *)(a2 + 112) = v49;
        *(void *)(a2 + 120) = v24;
        uint64_t v69 = *(void *)(a2 + 128);
        for (*(void *)(a2 + 128) = v50; v68 != v66; v68 -= 2)
        {
          int v70 = (std::__shared_weak_count *)*(v68 - 1);
          if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      if (v66) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(a2 + 136) + 40))(*(void *)(a2 + 136), v66, v69 - (void)v66);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)&v79 + 1);
    }
    else
    {
      if (v22)
      {
        *unint64_t v22 = v21;
        v22[1] = v5;
        uint64_t v5 = 0;
      }
      uint64_t v24 = v22 + 2;
    }
    *(void *)(a2 + 120) = v24;
    if (v5) {
      goto LABEL_124;
    }
  }
  else if ((*(unsigned int (**)(void))(*(void *)*a1 + 264))(*a1) == 27)
  {
    uint64_t v33 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    *(void *)&long long v80 = v33;
    *((void *)&v80 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v34 = *(void **)(a2 + 184);
    unint64_t v35 = *(void *)(a2 + 192);
    if ((unint64_t)v34 >= v35)
    {
      uint64_t v57 = *(void *)(a2 + 176);
      uint64_t v58 = ((uint64_t)v34 - v57) >> 4;
      unint64_t v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 60) {
        abort();
      }
      uint64_t v60 = v35 - v57;
      if (v60 >> 3 > v59) {
        unint64_t v59 = v60 >> 3;
      }
      uint64_t v61 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v59;
      if (v61)
      {
        uint64_t v62 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 200) + 16))(*(void *)(a2 + 200), 16 * v61, 8);
        uint64_t v63 = (_OWORD *)(v62 + 16 * v58);
        uint64_t v64 = v62 + 16 * v61;
        if (v62)
        {
          *uint64_t v63 = v80;
          long long v80 = 0uLL;
        }
      }
      else
      {
        uint64_t v64 = 0;
        uint64_t v63 = (_OWORD *)(16 * v58);
      }
      uint64_t v36 = v63 + 1;
      unint64_t v71 = *(void **)(a2 + 176);
      double v72 = *(void **)(a2 + 184);
      if (v72 == v71)
      {
        *(void *)(a2 + 176) = v63;
        *(void *)(a2 + 184) = v36;
        uint64_t v75 = *(void *)(a2 + 192);
        *(void *)(a2 + 192) = v64;
      }
      else
      {
        do
        {
          long long v73 = *((_OWORD *)v72 - 1);
          v72 -= 2;
          *--uint64_t v63 = v73;
          *double v72 = 0;
          v72[1] = 0;
        }
        while (v72 != v71);
        double v72 = *(void **)(a2 + 176);
        uint8x8_t v74 = *(void **)(a2 + 184);
        *(void *)(a2 + 176) = v63;
        *(void *)(a2 + 184) = v36;
        uint64_t v75 = *(void *)(a2 + 192);
        for (*(void *)(a2 + 192) = v64; v74 != v72; v74 -= 2)
        {
          uint64_t v76 = (std::__shared_weak_count *)*(v74 - 1);
          if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }
      if (v72) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(a2 + 200) + 40))(*(void *)(a2 + 200), v72, v75 - (void)v72);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)&v80 + 1);
    }
    else
    {
      if (v34)
      {
        *size_t v34 = v33;
        v34[1] = v5;
        uint64_t v5 = 0;
      }
      uint64_t v36 = v34 + 2;
    }
    *(void *)(a2 + 184) = v36;
    if (v5) {
      goto LABEL_124;
    }
  }
}

void sub_1A1DDDB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1DDDB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1DDDB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1DDDB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>::~pair(uint64_t a1)
{
  double v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  double v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[5];
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  double v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  double v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void md::ARWalkingSupport::processSetFeatureRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v424 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 896);
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 432) + 336);
  v369 = &unk_1EF5599B8;
  id v370 = 0;
  long long v371 = 0u;
  long long v372 = 0u;
  long long v373 = 0u;
  {
    operator new();
  }
  uint64_t v374 = mdm::Allocator::instance(void)::alloc;
  int v375 = 0;
  uint64_t v377 = 0;
  int v376 = 0;
  {
    operator new();
  }
  uint64_t v378 = mdm::Allocator::instance(void)::alloc;
  int v379 = 0;
  uint64_t v381 = 0;
  int v380 = 0;
  {
    operator new();
  }
  uint64_t v382 = mdm::Allocator::instance(void)::alloc;
  uint64_t v383 = 0;
  uint64_t v385 = 0;
  int v384 = 0;
  {
    operator new();
  }
  uint64_t v386 = mdm::Allocator::instance(void)::alloc;
  int v387 = 0;
  uint64_t v389 = 0;
  int v388 = 0;
  {
    operator new();
  }
  uint64_t v390 = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)__uint64_t n = 0u;
  long long v392 = 0u;
  long long v395 = 0u;
  long long v394 = 0u;
  int v393 = 1065353216;
  int v396 = 1065353216;
  unint64_t v397 = 0;
  unint64_t v398 = 0;
  uint64_t v399 = 0;
  *(void *)&long long v400 = v3;
  *((void *)&v400 + 1) = v4;
  unint64_t v401 = atomic_fetch_add(&md::ARWalkingFeatureSet::nextVersion(void)::next, 1uLL) + 1;
  int v346 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v5 = *(void *)(*(void *)a1 + 432);
  if (*(unsigned char *)(v5 + 8))
  {
    md::LabelLayoutContext::mercatorEyePos((md::LabelLayoutContext *)v5);
    double v7 = v6;
    long double v9 = v8 * 6.28318531;
    long double v11 = exp(v10 * 6.28318531 + -3.14159265);
    double v12 = atan(v11) * 2.0 + -1.57079633;
    long double v13 = fmod(v9, 6.28318531);
    double v14 = fmod(v13 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v15 = __sincos_stret(v12);
    double v16 = 6378137.0 / sqrt(v15.__sinval * v15.__sinval * -0.00669437999 + 1.0);
    double v17 = (v16 + v7) * v15.__cosval;
    __double2 v18 = __sincos_stret(v14);
    double v343 = v17 * v18.__sinval;
    double v344 = v17 * v18.__cosval;
    double v19 = (v7 + v16 * 0.99330562) * v15.__sinval;
  }
  else
  {
    double v343 = *(double *)(v5 + 144);
    double v344 = *(double *)(v5 + 136);
    double v19 = *(double *)(v5 + 152);
  }
  double v342 = v19;
  id v20 = *(id *)(a2 + 8);
  uint64_t v21 = v20;
  if (v20) {
    id v22 = v20;
  }
  id v23 = v370;
  id v370 = v21;

  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
  }
  uint64_t v24 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    int v25 = *(unsigned __int8 *)(a2 + 24);
    id v26 = *(id *)(a2 + 8);
    unint64_t v27 = [v26 features];
    uint64_t v28 = [v27 count];
    id v29 = *(id *)(a2 + 8);
    uint64_t v30 = [v29 features];
    *(_DWORD *)std::string buf = 134219010;
    *(void *)&uint8_t buf[4] = v401;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = *((void *)&v400 + 1);
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)__p_8 = v25;
    *(_WORD *)&__p_8[4] = 2048;
    *(void *)&__p_8[6] = v28;
    *(_WORD *)&__p_8[14] = 2112;
    *(void *)&__p_8[16] = v30;
    _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_INFO, "Begin Preparing FeatureSet(version:%llu timestamp:%f) - force:%d features(%lu):%@", buf, 0x30u);
  }
  long long v364 = 0u;
  long long v365 = 0u;
  long long v366 = 0u;
  long long v367 = 0u;
  obuint64_t j = [v370 features];
  uint64_t v31 = [obj countByEnumeratingWithState:&v364 objects:v411 count:16];
  if (v31)
  {
    uint64_t v347 = *(void *)v365;
    do
    {
      uint64_t v348 = v31;
      for (uint64_t i = 0; i != v348; ++i)
      {
        if (*(void *)v365 != v347) {
          objc_enumerationMutation(obj);
        }
        uint64_t v353 = *(void **)(*((void *)&v364 + 1) + 8 * i);
        id v368 = v353;
        unint64_t v362 = 0;
        int v363 = 0;
        uint64_t v32 = *(uint64_t **)(a1 + 464);
        if (v32 == *(uint64_t **)(a1 + 472))
        {
          size_t v34 = *(uint64_t **)(a1 + 464);
        }
        else
        {
          while (1)
          {
            char v33 = [v353 isEqual:*v32];
            size_t v34 = *(uint64_t **)(a1 + 472);
            if (v33) {
              break;
            }
            v32 += 3;
            unint64_t v35 = *(uint64_t **)(a1 + 472);
            if (v32 == v34) {
              goto LABEL_27;
            }
          }
        }
        unint64_t v35 = v32;
LABEL_27:
        uint64_t v36 = [v353 type];
        switch(v36)
        {
          case 0:
            id v56 = v353;
            if (v35 == v34)
            {
              unint64_t v57 = 0;
              unint64_t v360 = 0;
              v361 = 0;
            }
            else
            {
              unint64_t v57 = v35[1];
              uint64_t v58 = (std::__shared_weak_count *)v35[2];
              unint64_t v360 = v57;
              v361 = v58;
              if (v58)
              {
                char v354 = 0;
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                goto LABEL_65;
              }
            }
            uint64_t v58 = 0;
            char v354 = 1;
LABEL_65:
            id v64 = v56;
            unint64_t v65 = v64;
            unint64_t v358 = 0;
            int v359 = 0;
            if (v64)
            {
              [v64 coordinate];
              double v66 = v412;
              double v67 = v413;
              double v68 = v414;
            }
            else
            {
              double v413 = 0.0;
              double v412 = 0.0;
              double v68 = 0.0;
              double v67 = 0.0;
              double v66 = 0.0;
              double v414 = 0.0;
            }
            double v69 = v67 * 0.0174532925;
            __double2 v70 = __sincos_stret(v66 * 0.0174532925);
            double v71 = 6378137.0 / sqrt(v70.__sinval * v70.__sinval * -0.00669437999 + 1.0);
            __double2 v72 = __sincos_stret(v69);
            double v73 = sqrt((v344 - (v71 + v68) * v70.__cosval * v72.__cosval)* (v344 - (v71 + v68) * v70.__cosval * v72.__cosval)+ (v343 - (v71 + v68) * v70.__cosval * v72.__sinval)* (v343 - (v71 + v68) * v70.__cosval * v72.__sinval)+ (v342 - (v68 + v71 * 0.99330562) * v70.__sinval) * (v342 - (v68 + v71 * 0.99330562) * v70.__sinval));
            double v74 = *(double *)(a1 + 16);
            if (v57)
            {
              BOOL v75 = *(unsigned char *)(v57 + 776) != 0;
              if (*(unsigned char *)(v57 + 776)) {
                BOOL v76 = 0;
              }
              else {
                BOOL v76 = v73 <= v74;
              }
            }
            else
            {
              BOOL v75 = 0;
              BOOL v76 = 0;
            }
            if (v57) {
              BOOL v77 = v346 == 0;
            }
            else {
              BOOL v77 = 0;
            }
            int v78 = !v77 || v76;
            if (*(unsigned char *)(a1 + 9)) {
              int v79 = v78;
            }
            else {
              int v79 = 0;
            }
            if (v73 > v74) {
              int v79 = 0;
            }
            int v356 = v79;
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
            }
            long long v80 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
            {
              int v81 = *(unsigned __int8 *)(a1 + 9);
              *(_DWORD *)std::string buf = 134219776;
              *(double *)&uint8_t buf[4] = v73;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v81;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v73 <= v74;
              *(_WORD *)__p_8 = 1024;
              *(_DWORD *)&__p_8[2] = v75;
              *(_WORD *)&__p_8[6] = 1024;
              *(_DWORD *)&__p_8[8] = v76;
              *(_WORD *)&__p_8[12] = 1024;
              *(_DWORD *)&__p_8[14] = v78;
              *(_WORD *)&__p_8[18] = 1024;
              *(_DWORD *)&__p_8[20] = v57 != 0;
              *(_WORD *)&__p_8[24] = 1024;
              *(_DWORD *)&__p_8[26] = v356;
              _os_log_impl(&dword_1A1780000, v80, OS_LOG_TYPE_INFO, "Incoming Maneuver feature - distance:%f shouldUseHighPrecisionAltitude:%d featureWithinHighPrecisionThreshold:%d alreadyHasHighPrecisionAltitude:%d shouldRebuildExistingFeatureForUpdatedAltitude:%d shouldBuildNewFeature:%d hasExistingLabelFeature:%d shouldRequestHighPrecisionAltitude:%d", buf, 0x36u);
              BOOL v82 = GEOGetVectorKitARWalkingSupportLog(void)::onceToken == -1;
              if (v78) {
                goto LABEL_98;
              }
            }
            else
            {
              BOOL v82 = 1;
              if (v78)
              {
LABEL_98:
                if (!v82) {
                  dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
                }
                std::string::size_type v88 = GEOGetVectorKitARWalkingSupportLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)std::string buf = 138412290;
                  *(void *)&uint8_t buf[4] = v65;
                  _os_log_impl(&dword_1A1780000, v88, OS_LOG_TYPE_INFO, "Building Maneuver LabelFeature for %@", buf, 0xCu);
                }
                double v89 = (char *)operator new(0x360uLL);
                *((void *)v89 + 1) = 0;
                *((void *)v89 + 2) = 0;
                *(void *)double v89 = &unk_1EF582470;
                uint64_t v90 = *(void *)a1;
                int v351 = *(unsigned __int8 *)(a1 + 11);
                id v91 = v65;
                memset(buf, 0, sizeof(buf));
                {
                  operator new();
                }
                *(void *)__p_8 = mdm::Allocator::instance(void)::alloc;
                md::ARWalkingManeuverLabelFeature::attributesForFeature((uint64_t)buf, 0);
                _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v402);
                uint64_t v92 = v402;
                uint64_t v93 = *(void *)buf;
                if (((*(void *)&buf[8] - *(void *)buf) & 0x7FFFFFFF8) != 0)
                {
                  uint64_t v94 = 0;
                  char v95 = 0;
                  uint64_t v96 = ((*(void *)&buf[8] - *(void *)buf) >> 3);
                  unsigned __int8 v97 = *(unsigned char *)(v402 + 33);
                  while (1)
                  {
                    size_t v98 = v97;
                    unint64_t v99 = *(int **)v92;
                    if (v97) {
                      break;
                    }
LABEL_105:
                    *(void *)&v99[2 * v98] = *(void *)(v93 + 8 * v94);
                    unsigned __int8 v97 = *(unsigned char *)(v92 + 33) + 1;
                    *(unsigned char *)(v92 + 33) = v97;
                    ++v94;
                    char v95 = 1;
                    if (v94 == v96)
                    {
                      unint64_t v99 = *(int **)v92;
                      size_t v98 = v97;
                      goto LABEL_135;
                    }
                  }
                  if (v97 > 0x1Fu)
                  {
                    do
                    {
                      uint64_t v103 = 0;
                      uint64_t v104 = v99;
                      while (1)
                      {
                        int v105 = *v104;
                        v104 += 2;
                        if (v105 == *(_DWORD *)(v93 + 8 * v94)) {
                          break;
                        }
                        if (v98 == ++v103) {
                          goto LABEL_116;
                        }
                      }
                      v99[2 * v103 + 1] = *(_DWORD *)(v93 + 8 * v94 + 4);
LABEL_116:
                      ++v94;
                    }
                    while (v94 != v96);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v100 = 0;
                      unint64_t v101 = v99;
                      while (1)
                      {
                        int v102 = *v101;
                        v101 += 2;
                        if (v102 == *(_DWORD *)(v93 + 8 * v94)) {
                          break;
                        }
                        if (v98 == ++v100) {
                          goto LABEL_105;
                        }
                      }
                      v99[2 * v100 + 1] = *(_DWORD *)(v93 + 8 * v94++ + 4);
                    }
                    while (v94 != v96);
                  }
                  if (v95) {
LABEL_135:
                  }
                    qsort(v99, v98, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                }
                unint64_t v113 = (std::__shared_weak_count *)operator new(0x1D8uLL);
                v113->__shared_owners_ = 0;
                v113->__shared_weak_owners_ = 0;
                v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581CC8;
                uint8x16_t v422 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v113[1]);
                uint64_t v423 = v113;
                v113[1].__shared_weak_owners_ = 0;
                unint64_t v114 = (std::__shared_weak_count *)*((void *)&v402 + 1);
                if (*((void *)&v402 + 1))
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v402 + 1) + 8), 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                shared_weak_owners = (std::__shared_weak_count *)v113[2].__shared_weak_owners_;
                v113[2].__shared_owners_ = v92;
                v113[2].__shared_weak_owners_ = (uint64_t)v114;
                if (shared_weak_owners
                  && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                  std::__shared_weak_count::__release_weak(shared_weak_owners);
                  if (v114) {
                    goto LABEL_141;
                  }
                }
                else if (v114)
                {
LABEL_141:
                  if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                long long v407 = 0uLL;
                *(void *)&long long v408 = 0;
                WORD4(v408) = 1;
                BYTE10(v408) = 0;
                std::string v136 = (char *)operator new(5uLL);
                *(_WORD *)std::string v136 = 5;
                v136[2] = 0;
                *(_WORD *)(v136 + 3) = 8;
                *(void *)&long long v408 = v136 + 5;
                *(void *)&long long v407 = v136;
                *((void *)&v407 + 1) = v136 + 5;
                uint64_t v137 = v422;
                unint64_t v138 = *((void *)v422 + 48);
                if (v138 >= *((void *)v422 + 49))
                {
                  __int16 v140 = std::vector<md::LabelFeaturePlacementInfo>::__emplace_back_slow_path<md::LabelFeaturePlacementInfo const&>((void *)v422 + 47, (uint64_t)&v407);
                }
                else
                {
                  *(void *)unint64_t v138 = 0;
                  *(void *)(v138 + 8) = 0;
                  *(void *)(v138 + 16) = 0;
                  uint64_t v139 = (char *)operator new(5uLL);
                  *(void *)(v138 + 8) = v139 + 5;
                  *(void *)(v138 + 16) = v139 + 5;
                  *(_WORD *)uint64_t v139 = 5;
                  v139[2] = 0;
                  *(_WORD *)(v139 + 3) = 8;
                  *(void *)unint64_t v138 = v139;
                  *(unsigned char *)(v138 + 26) = BYTE10(v408);
                  *(_WORD *)(v138 + 24) = WORD4(v408);
                  __int16 v140 = (char *)(v138 + 32);
                  *((void *)v137 + 48) = v138 + 32;
                }
                *((void *)v137 + 48) = v140;
                if (v65)
                {
                  [v91 coordinate];
                }
                else
                {
                  long long v403 = 0uLL;
                  uint64x2_t v404 = 0;
                }
                md::LabelExternalPointFeature::addLocation(v137, (double *)&v403);
                if (v351) {
                  md::LabelExternalPointFeature::addLocation(v137, (double *)&v403);
                }
                operator delete(v136);
                double v141 = (std::__shared_weak_count *)*((void *)&v402 + 1);
                if (*((void *)&v402 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v402 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                  uint64_t v142 = *(void *)buf;
                  if (*(void *)buf) {
LABEL_173:
                  }
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)__p_8 + 40))(*(void *)__p_8, v142, *(void *)&buf[16] - v142);
                }
                else
                {
                  uint64_t v142 = *(void *)buf;
                  if (*(void *)buf) {
                    goto LABEL_173;
                  }
                }

                md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v89 + 24), (uint64_t *)&v422, 0, v90);
                double v143 = v423;
                if (v423 && !atomic_fetch_add(&v423->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
                *((void *)v89 + 3) = &unk_1EF54AF60;
                id v144 = v91;
                *((void *)v89 + 87) = &unk_1EF559C38;
                *((void *)v89 + 88) = v144;
                double v145 = [v144 displayText];
                if (v145)
                {
                  id v350 = [v144 displayText];
                  __int16 v146 = (const char *)[v350 UTF8String];
                }
                else
                {
                  __int16 v146 = "";
                }
                {
                  operator new();
                }
                uint64_t v147 = mdm::Allocator::instance(void)::alloc;
                *((void *)v89 + 93) = mdm::Allocator::instance(void)::alloc;
                size_t v148 = strlen(v146);
                if (v148 >= 0x7FFFFFFFFFFFFFF8) {
                  abort();
                }
                size_t v149 = v148;
                if (v148 >= 0x17)
                {
                  uint64_t v151 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v148 | 7) != 0x17) {
                    uint64_t v151 = v148 | 7;
                  }
                  uint64_t v152 = v151 + 1;
                  uint64_t v150 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v147 + 16))(v147, v151 + 1, 1);
                  *((void *)v89 + 90) = v150;
                  *((void *)v89 + 92) = v152 | 0x8000000000000000;
                  *((void *)v89 + 91) = v149;
                }
                else
                {
                  uint64_t v150 = v89 + 720;
                  v89[743] = v148;
                  if (!v148)
                  {
                    *uint64_t v150 = 0;
                    if (!v145)
                    {
LABEL_191:

                      [v144 maneuverHeading];
                      long double v154 = fmod(360.0 - v153, 360.0);
                      float v155 = fmod(v154 + 360.0, 360.0) * 0.0174532925;
                      __float2 v156 = __sincosf_stret(v155);
                      *((float *)v89 + 188) = -v156.__sinval;
                      *((_DWORD *)v89 + 189) = LODWORD(v156.__cosval);
                      *((_DWORD *)v89 + 190) = 0;
                      v89[764] = 1;
                      float v157 = 1.0
                           / sqrtf((float)(v156.__cosval * v156.__cosval) + (float)(v156.__sinval * v156.__sinval));
                      *((float *)v89 + 192) = v157 * v156.__cosval;
                      *((float *)v89 + 193) = v157 * v156.__sinval;
                      *((_DWORD *)v89 + 194) = 0;
                      v89[780] = 1;
                      v89[784] = 0;
                      v89[800] = 0;
                      *((void *)v89 + 101) = [v144 routeCoordinate];
                      operator new();
                    }
LABEL_190:

                    goto LABEL_191;
                  }
                }
                memmove(v150, v146, v149);
                v150[v149] = 0;
                if (!v145) {
                  goto LABEL_191;
                }
                goto LABEL_190;
              }
            }
            if (!v82) {
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
            }
            uint64_t v83 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 138412290;
              *(void *)&uint8_t buf[4] = v65;
              _os_log_impl(&dword_1A1780000, v83, OS_LOG_TYPE_INFO, "Reusing previous Maneuver LabelFeature for external feature %@", buf, 0xCu);
            }
            if (v58) {
              atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v358 = v57;
            int v359 = v58;
            id v84 = v65;
            double v85 = v84;
            if (v65) {
              id v86 = v84;
            }
            uint64_t v87 = *(void **)(v57 + 680);
            *(void *)(v57 + 680) = v85;

            long long v403 = 0uLL;
            if (v356)
            {
              double v158 = *(uint64_t **)(a1 + 776);
              if (v65)
              {
                [v65 coordinate];
                long long v159 = *(_OWORD *)buf;
              }
              else
              {
                memset(buf, 0, sizeof(buf));
                long long v159 = 0uLL;
              }
              long long v407 = v159;
              md::HighPrecisionAltitudeRequestor::requestAltitude(&v402, v158, (double *)&v407);
              unint64_t v161 = (std::__shared_weak_count *)*((void *)&v402 + 1);
              uint64_t v160 = v402;
              long long v403 = v402;
              if ((void)v402)
              {
                if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
                }
                uint64_t v162 = GEOGetVectorKitARWalkingSupportLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)std::string buf = 138412290;
                  *(void *)&uint8_t buf[4] = v65;
                  _os_log_impl(&dword_1A1780000, v162, OS_LOG_TYPE_INFO, "Requesting high precision altitude for Maneuver %@", buf, 0xCu);
                }
                unint64_t v163 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingManeuverLabelFeature> const&>,std::tuple<>>((uint64_t)&v394, v358, &v358);
                if (v161) {
                  atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                long long v164 = (std::__shared_weak_count *)v163[5];
                v163[4] = v160;
                v163[5] = v161;
                if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
                goto LABEL_206;
              }
            }
            else
            {
LABEL_206:
              unint64_t v161 = (std::__shared_weak_count *)*((void *)&v403 + 1);
            }
            if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }

            if ((v354 & 1) == 0 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
            unint64_t v165 = v358;
            double v166 = v359;
            if (v358) {
              BOOL v167 = v360 == v358;
            }
            else {
              BOOL v167 = 1;
            }
            int v107 = !v167;
            if (v359) {
              atomic_fetch_add_explicit(&v359->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v168 = v363;
            unint64_t v362 = v165;
            int v363 = v166;
            if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
              double v169 = v359;
              if (v359) {
                goto LABEL_224;
              }
            }
            else
            {
              double v169 = v359;
              if (v359)
              {
LABEL_224:
                if (!atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
            }
            double v170 = v361;
            if (v361 && !atomic_fetch_add(&v361->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
            goto LABEL_264;
          case 1:
            id v45 = v353;
            uint64_t v46 = [v45 storeFronts];
            BOOL v47 = [v46 count] == 0;

            if (v47)
            {
              if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
                dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
              }
              unint64_t v106 = GEOGetVectorKitARWalkingSupportLog(void)::log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string buf = 138413058;
                *(void *)&uint8_t buf[4] = v45;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "false";
                *(_WORD *)&unsigned char buf[22] = 2080;
                *(void *)__p_8 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARWalkingSupport.mm";
                *(_WORD *)&__p_8[8] = 1024;
                *(_DWORD *)&__p_8[10] = 336;
                _os_log_impl(&dword_1A1780000, v106, OS_LOG_TYPE_ERROR, "Arrival features should have at least 1 storefront - dropping %@: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
              }
            }
            else
            {
              if (v346 || v35 == v34)
              {
                if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
                }
                uint64_t v108 = GEOGetVectorKitARWalkingSupportLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)std::string buf = 138412290;
                  *(void *)&uint8_t buf[4] = v45;
                  _os_log_impl(&dword_1A1780000, v108, OS_LOG_TYPE_INFO, "Building Arrival LabelFeature for %@", buf, 0xCu);
                }
                if (*(unsigned char *)(a1 + 10))
                {
                  uint64_t v109 = (char *)operator new(0x138uLL);
                  *((void *)v109 + 1) = 0;
                  *((void *)v109 + 2) = 0;
                  *(void *)uint64_t v109 = &unk_1EF5822E8;
                  id v110 = v45;
                  *((void *)v109 + 3) = &unk_1EF5313F8;
                  *((void *)v109 + 4) = 850045863;
                  long long v111 = 0uLL;
                  *(_OWORD *)(v109 + 40) = 0u;
                  *(_OWORD *)(v109 + 56) = 0u;
                  *(_OWORD *)(v109 + 72) = 0u;
                  *(_OWORD *)(v109 + 88) = 0u;
                  *(_OWORD *)(v109 + 104) = 0u;
                  *(_OWORD *)(v109 + 120) = 0u;
                  *((void *)v109 + 17) = 0;
                  {
                    long long v111 = 0uLL;
                    if (v215) {
                      operator new();
                    }
                  }
                  *((void *)v109 + 18) = mdm::Allocator::instance(void)::alloc;
                  *((void *)v109 + 19) = 0x100000000;
                  *((void *)v109 + 20) = 0;
                  *((_DWORD *)v109 + 42) = 0;
                  *((_OWORD *)v109 + 11) = v111;
                  *((_OWORD *)v109 + 12) = v111;
                  {
                    long long v111 = 0uLL;
                    if (v216) {
                      operator new();
                    }
                  }
                  *((void *)v109 + 26) = mdm::Allocator::instance(void)::alloc;
                  *((void *)v109 + 3) = &unk_1EF5491B8;
                  *(_OWORD *)(v109 + 216) = v111;
                  *(_OWORD *)(v109 + 232) = v111;
                  id v112 = v110;
                  *((void *)v109 + 31) = &unk_1EF559BD8;
                  *((void *)v109 + 32) = v112;
                  operator new();
                }
                uint64_t v116 = operator new(0x318uLL);
                v116[1] = 0;
                v116[2] = 0;
                *uint64_t v116 = &unk_1EF582668;
                uint64_t v117 = *(void *)a1;
                id v118 = v45;
                int v357 = v116;
                _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v402);
                uint64_t v119 = v402;
                uint64_t v120 = [v118 styleAttributes];
                uint64_t v121 = [v120 v];
                int v122 = [v118 styleAttributes];
                unsigned int v123 = [v122 countAttrs];
                if (v123)
                {
                  uint64_t v124 = 0;
                  char v125 = 0;
                  uint64_t v126 = v123;
                  unsigned __int8 v127 = *(unsigned char *)(v119 + 33);
                  while (1)
                  {
                    size_t v128 = v127;
                    uint64_t v129 = *(int **)v119;
                    if (v127) {
                      break;
                    }
LABEL_145:
                    *(void *)&v129[2 * v128] = *(void *)(v121 + 8 * v124);
                    unsigned __int8 v127 = *(unsigned char *)(v119 + 33) + 1;
                    *(unsigned char *)(v119 + 33) = v127;
                    ++v124;
                    char v125 = 1;
                    if (v124 == v126)
                    {
                      uint64_t v129 = *(int **)v119;
                      size_t v128 = v127;
                      goto LABEL_233;
                    }
                  }
                  if (v127 > 0x1Fu)
                  {
                    do
                    {
                      uint64_t v133 = 0;
                      char v134 = v129;
                      while (1)
                      {
                        int v135 = *v134;
                        v134 += 2;
                        if (v135 == *(_DWORD *)(v121 + 8 * v124)) {
                          break;
                        }
                        if (v128 == ++v133) {
                          goto LABEL_156;
                        }
                      }
                      v129[2 * v133 + 1] = *(_DWORD *)(v121 + 8 * v124 + 4);
LABEL_156:
                      ++v124;
                    }
                    while (v124 != v126);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v130 = 0;
                      uint64_t v131 = v129;
                      while (1)
                      {
                        int v132 = *v131;
                        v131 += 2;
                        if (v132 == *(_DWORD *)(v121 + 8 * v124)) {
                          break;
                        }
                        if (v128 == ++v130) {
                          goto LABEL_145;
                        }
                      }
                      v129[2 * v130 + 1] = *(_DWORD *)(v121 + 8 * v124++ + 4);
                    }
                    while (v124 != v126);
                  }
                  if (v125) {
LABEL_233:
                  }
                    qsort(v129, v128, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                }

                uint64_t v171 = (std::__shared_weak_count *)operator new(0x1D8uLL);
                v171->__shared_owners_ = 0;
                v171->__shared_weak_owners_ = 0;
                v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581CC8;
                uint8x16_t v422 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v171[1]);
                uint64_t v423 = v171;
                uint64_t v172 = [v118 storeFronts];
                BOOL v173 = [v172 count] == 0;

                uint64_t v174 = (std::__shared_weak_count *)*((void *)&v402 + 1);
                if (!v173)
                {
                  v171[1].__shared_weak_owners_ = 0;
                  if (v174)
                  {
                    atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  double v175 = (std::__shared_weak_count *)v171[2].__shared_weak_owners_;
                  v171[2].__shared_owners_ = v119;
                  v171[2].__shared_weak_owners_ = (uint64_t)v174;
                  if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                    if (v174) {
                      goto LABEL_240;
                    }
                  }
                  else if (v174)
                  {
LABEL_240:
                    if (!atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  long long v403 = 0uLL;
                  uint64x2_t v404 = 0;
                  __int16 v405 = 1;
                  char v406 = 0;
                  uint64_t v176 = (char *)operator new(5uLL);
                  *(_WORD *)uint64_t v176 = 5;
                  v176[2] = 0;
                  *(_WORD *)(v176 + 3) = 8;
                  uint64x2_t v404 = v176 + 5;
                  *(void *)&long long v403 = v176;
                  *((void *)&v403 + 1) = v176 + 5;
                  double v177 = v422;
                  unint64_t v178 = *((void *)v422 + 48);
                  if (v178 >= *((void *)v422 + 49))
                  {
                    double v180 = std::vector<md::LabelFeaturePlacementInfo>::__emplace_back_slow_path<md::LabelFeaturePlacementInfo const&>((void *)v422 + 47, (uint64_t)&v403);
                  }
                  else
                  {
                    *(void *)unint64_t v178 = 0;
                    *(void *)(v178 + 8) = 0;
                    *(void *)(v178 + 16) = 0;
                    unint64_t v179 = (char *)operator new(5uLL);
                    *(void *)(v178 + 8) = v179 + 5;
                    *(void *)(v178 + 16) = v179 + 5;
                    *(_WORD *)unint64_t v179 = *(_WORD *)v176;
                    v179[2] = 0;
                    *(_WORD *)(v179 + 3) = *(_WORD *)(v176 + 3);
                    *(void *)unint64_t v178 = v179;
                    *(_WORD *)(v178 + 24) = v405;
                    *(unsigned char *)(v178 + 26) = v406;
                    double v180 = (char *)(v178 + 32);
                    *((void *)v177 + 48) = v178 + 32;
                  }
                  *((void *)v177 + 48) = v180;
                  long long v407 = 0u;
                  long long v408 = 0u;
                  long long v409 = 0u;
                  long long v410 = 0u;
                  uint64_t v181 = [v118 storeFronts];
                  uint64_t v182 = [v181 countByEnumeratingWithState:&v407 objects:buf count:16];
                  if (v182)
                  {
                    uint64_t v183 = *(void *)v408;
                    do
                    {
                      for (uint64_t j = 0; j != v182; ++j)
                      {
                        if (*(void *)v408 != v183) {
                          objc_enumerationMutation(v181);
                        }
                        double v185 = *(void **)(*((void *)&v407 + 1) + 8 * j);
                        if (v185)
                        {
                          [v185 bottomCenterCoordinate];
                        }
                        else
                        {
                          double v413 = 0.0;
                          double v412 = 0.0;
                          double v414 = 0.0;
                        }
                        md::LabelExternalPointFeature::addLocation(v177, &v412);
                      }
                      uint64_t v182 = [v181 countByEnumeratingWithState:&v407 objects:buf count:16];
                    }
                    while (v182);
                  }

                  operator delete(v176);
                  uint64_t v174 = (std::__shared_weak_count *)*((void *)&v402 + 1);
                }
                if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                  std::__shared_weak_count::__release_weak(v174);
                }

                md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v357 + 3), (uint64_t *)&v422, 0, v117);
                v357[3] = &unk_1EF542320;
                v357[87] = 0;
                v357[89] = 0;
                v357[88] = 0;
                double v186 = v423;
                if (v423 && !atomic_fetch_add(&v423->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
                v357[3] = &unk_1EF54CDF8;
                id v187 = v118;
                v357[90] = &unk_1EF559BD8;
                v357[91] = v187;
                *((unsigned char *)v357 + 744) = 0;
                *(_OWORD *)(v357 + 95) = 0u;
                v357[94] = v357 + 95;
                operator new();
              }
              if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
                dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
              }
              uint64_t v48 = GEOGetVectorKitARWalkingSupportLog(void)::log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
              {
                uint64_t v49 = *v35;
                *(_DWORD *)std::string buf = 134218242;
                *(void *)&uint8_t buf[4] = v49;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = v45;
                _os_log_impl(&dword_1A1780000, v48, OS_LOG_TYPE_INFO, "Reusing previous Arrival LabelFeature for external feature (%p) %@", buf, 0x16u);
              }
              unint64_t v51 = v35[1];
              uint64_t v50 = (std::__shared_weak_count *)v35[2];
              if (v50) {
                atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v362 = v51;
              int v363 = v50;
              id v52 = v45;
              long long v53 = v52;
              if (v52) {
                id v54 = v52;
              }
              uint64_t v55 = *(void **)(v51 + 704);
              *(void *)(v51 + 704) = v53;
            }
            break;
          case 2:
            id v355 = v353;
            if (v346 || v35 == v34)
            {
              if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
                dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
              }
              unint64_t v59 = GEOGetVectorKitARWalkingSupportLog(void)::log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)std::string buf = 138412290;
                *(void *)&uint8_t buf[4] = v355;
                _os_log_impl(&dword_1A1780000, v59, OS_LOG_TYPE_INFO, "Building Continue LabelFeature for %@", buf, 0xCu);
              }
              uint64_t v60 = (char *)operator new(0x1C8uLL);
              *((void *)v60 + 1) = 0;
              *((void *)v60 + 2) = 0;
              *(void *)uint64_t v60 = &unk_1EF582438;
              id v61 = v355;
              *((void *)v60 + 3) = &unk_1EF5313F8;
              *((void *)v60 + 4) = 850045863;
              long long v62 = 0uLL;
              *(_OWORD *)(v60 + 40) = 0u;
              *(_OWORD *)(v60 + 56) = 0u;
              *(_OWORD *)(v60 + 72) = 0u;
              *(_OWORD *)(v60 + 88) = 0u;
              *(_OWORD *)(v60 + 104) = 0u;
              *(_OWORD *)(v60 + 120) = 0u;
              *((void *)v60 + 17) = 0;
              {
                long long v62 = 0uLL;
                if (v214) {
                  operator new();
                }
              }
              *((void *)v60 + 18) = mdm::Allocator::instance(void)::alloc;
              *((void *)v60 + 19) = 0x100000000;
              *((void *)v60 + 20) = 0;
              *((_DWORD *)v60 + 42) = 0;
              *((_OWORD *)v60 + 11) = v62;
              *((_OWORD *)v60 + 12) = v62;
              {
                operator new();
              }
              *((void *)v60 + 26) = mdm::Allocator::instance(void)::alloc;
              *((void *)v60 + 3) = &unk_1EF54ACD8;
              id v63 = v61;
              *((void *)v60 + 31) = 0;
              *((void *)v60 + 27) = &unk_1EF559C18;
              *((void *)v60 + 28) = v63;
              *((void *)v60 + 32) = 0;
              *((void *)v60 + 30) = v60 + 248;
              *(_OWORD *)(v60 + 264) = xmmword_1A28FCC10;
              *((void *)v60 + 37) = 0;
              *((void *)v60 + 38) = 0;
              *((void *)v60 + 35) = 0;
              *((void *)v60 + 36) = v60 + 296;
              *(_OWORD *)(v60 + 312) = 0u;
              *(_OWORD *)(v60 + 328) = 0u;
              *((_DWORD *)v60 + 86) = 1065353216;
              *((void *)v60 + 44) = v60 + 360;
              *((void *)v60 + 45) = 0;
              *((void *)v60 + 48) = 0;
              *((void *)v60 + 49) = 0;
              *((void *)v60 + 46) = 0;
              *((void *)v60 + 47) = v60 + 384;
              v60[400] = 0;
              operator new();
            }
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
            }
            uint64_t v37 = GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
            {
              uint64_t v38 = *v35;
              *(_DWORD *)std::string buf = 134218242;
              *(void *)&uint8_t buf[4] = v38;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v355;
              _os_log_impl(&dword_1A1780000, v37, OS_LOG_TYPE_INFO, "Reusing previous Continue LabelFeature for external feature (%p) %@", buf, 0x16u);
            }
            unint64_t v40 = v35[1];
            long long v39 = (std::__shared_weak_count *)v35[2];
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v362 = v40;
            int v363 = v39;
            id v41 = v355;
            uint64_t v42 = v41;
            if (v41) {
              id v43 = v41;
            }
            uint64_t v44 = *(void **)(v40 + 200);
            *(void *)(v40 + 200) = v42;

            break;
          default:
            goto LABEL_300;
        }
        int v107 = 0;
LABEL_264:

        unint64_t v188 = v362;
        if (!v362) {
          goto LABEL_300;
        }
        if (!v107) {
          goto LABEL_294;
        }
        uint64_t v189 = v373;
        if ((unint64_t)v373 >= *((void *)&v373 + 1))
        {
          uint64_t v191 = (uint64_t)(v373 - *((void *)&v372 + 1)) >> 3;
          unint64_t v192 = v191 + 1;
          if ((unint64_t)(v191 + 1) >> 61) {
            abort();
          }
          uint64_t v193 = *((void *)&v373 + 1) - *((void *)&v372 + 1);
          if ((uint64_t)(*((void *)&v373 + 1) - *((void *)&v372 + 1)) >> 2 > v192) {
            unint64_t v192 = v193 >> 2;
          }
          if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v194 = v192;
          }
          if (v194)
          {
            uint64_t v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v374 + 16))(v374, 8 * v194, 8);
            double v196 = (unint64_t *)(v195 + 8 * v191);
            uint64_t v197 = v195 + 8 * v194;
            if (v195) {
              *double v196 = v188;
            }
          }
          else
          {
            uint64_t v197 = 0;
            double v196 = (unint64_t *)(8 * v191);
          }
          uint64_t v198 = v373;
          uint64_t v199 = *((void *)&v372 + 1);
          uint64_t v200 = v373 - *((void *)&v372 + 1);
          if ((void)v373 != *((void *)&v372 + 1))
          {
            unint64_t v201 = v200 - 8;
            if ((unint64_t)(v200 - 8) < 0x38)
            {
              double v202 = v196;
            }
            else
            {
              double v202 = v196;
              if ((void)v373 - (void)v196 >= 0x20uLL)
              {
                uint64_t v203 = (v201 >> 3) + 1;
                double v204 = v196 - 2;
                double v205 = (long long *)(v373 - 16);
                uint64_t v206 = v203 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v207 = *v205;
                  *((_OWORD *)v204 - 1) = *(v205 - 1);
                  *(_OWORD *)double v204 = v207;
                  v204 -= 4;
                  v205 -= 2;
                  v206 -= 4;
                }
                while (v206);
                double v202 = &v196[-(v203 & 0x3FFFFFFFFFFFFFFCLL)];
                v198 -= 8 * (v203 & 0x3FFFFFFFFFFFFFFCLL);
                if (v203 == (v203 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_290:
                  uint64_t v198 = *((void *)&v372 + 1);
LABEL_291:
                  double v190 = v196 + 1;
                  *((void *)&v372 + 1) = v202;
                  *(void *)&long long v373 = v196 + 1;
                  uint64_t v209 = *((void *)&v373 + 1);
                  *((void *)&v373 + 1) = v197;
                  if (v198) {
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v374 + 40))(v374, v198, v209 - v198);
                  }
                  goto LABEL_293;
                }
              }
            }
            do
            {
              unint64_t v208 = *(void *)(v198 - 8);
              v198 -= 8;
              *--double v202 = v208;
            }
            while (v198 != v199);
            goto LABEL_290;
          }
          double v202 = v196;
          goto LABEL_291;
        }
        if ((void)v373) {
          *(void *)long long v373 = v362;
        }
        double v190 = (void *)(v189 + 8);
LABEL_293:
        *(void *)&long long v373 = v190;
LABEL_294:
        double v210 = geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::operator[]((char **)&v371, &v368);
        double v211 = v363;
        if (v363) {
          atomic_fetch_add_explicit(&v363->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v212 = (std::__shared_weak_count *)*((void *)v210 + 1);
        *(void *)double v210 = v188;
        *((void *)v210 + 1) = v211;
        if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }
        md::ARWalkingSupport::addLabelFeature(&v362, (uint64_t)&v369);
LABEL_300:
        double v213 = v363;
        if (v363 && !atomic_fetch_add(&v363->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
      }
      uint64_t v31 = [obj countByEnumeratingWithState:&v364 objects:v411 count:16];
    }
    while (v31);
  }

  if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
  }
  double v217 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
  if (os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
  {
    unint64_t v218 = v401;
    id v219 = v370;
    double v220 = [v219 features];
    uint64_t v221 = [v220 count];
    *(_DWORD *)std::string buf = 134219776;
    *(void *)&uint8_t buf[4] = v218;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v221;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)__p_8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v371 + 1) - v371) >> 3);
    *(_WORD *)&__p_8[8] = 2048;
    *(void *)&__p_8[10] = (v384 - v383) >> 4;
    *(_WORD *)&__p_8[18] = 2048;
    *(void *)&__p_8[20] = (v376 - v375) >> 4;
    *(_WORD *)&__p_8[28] = 2048;
    uint64_t v417 = (v380 - v379) >> 4;
    __int16 v418 = 2048;
    uint64_t v419 = *((void *)&v395 + 1);
    __int16 v420 = 2048;
    uint64_t v421 = *((void *)&v392 + 1);
    _os_log_impl(&dword_1A1780000, v217, OS_LOG_TYPE_INFO, "Done preparing FeatureSet(version:%llu) external:%lu internal:%lu (arrival:%lu maneuver:%lu continue:%lu pendingManeuvers:%lu pendingContinues:%lu)", buf, 0x52u);
  }
  int v222 = *(unsigned __int8 *)(a1 + 432);
  if (*(unsigned char *)(a1 + 432))
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    double v223 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled(v223, OS_LOG_TYPE_INFO))
    {
      if (!*(unsigned char *)(a1 + 432)) {
        goto LABEL_568;
      }
      uint64_t v224 = *(void *)(a1 + 424);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v224;
      _os_log_impl(&dword_1A1780000, v223, OS_LOG_TYPE_INFO, "Dropped PendingFeatureSet(version:%llu)", buf, 0xCu);
    }

    uint64_t v225 = a1;
    int v222 = *(unsigned __int8 *)(a1 + 432);
  }
  else
  {
    uint64_t v225 = a1;
  }
  uint64_t v226 = v225 + 96;
  *(void *)&long long v407 = &unk_1EF5599B8;
  *((void *)&v407 + 1) = 0;
  if (v222)
  {
    id v227 = *(id *)(v225 + 104);
    double v228 = (void *)*((void *)&v407 + 1);
    *((void *)&v407 + 1) = v227;

    uint64_t v225 = a1;
    if (*(unsigned char *)(a1 + 432))
    {
      md::ARWalkingFeatureSet::operator=(v226, (uint64_t)&v369);
      goto LABEL_516;
    }
  }
  *(void *)(v225 + 96) = &unk_1EF5599B8;
  *(void *)(v225 + 104) = 0;
  id v229 = v370;
  double v230 = *(void **)(v225 + 104);
  *(void *)(v225 + 104) = v229;

  uint64_t v231 = a1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v233 = *((void *)&v371 + 1);
  uint64_t v232 = v371;
  int64_t v234 = *((void *)&v371 + 1) - v371;
  if (*((void *)&v371 + 1) != (void)v371)
  {
    unint64_t v235 = 0xAAAAAAAAAAAAAAABLL * (v234 >> 3);
    if (v235 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    double v236 = operator new(v234);
    *(void *)(a1 + 120) = v236;
    *(void *)(a1 + 128) = v236;
    *(void *)(a1 + 136) = &v236[3 * v235];
    do
    {
      *double v236 = *(id *)v232;
      v236[1] = *(void *)(v232 + 8);
      uint64_t v237 = *(void *)(v232 + 16);
      v236[2] = v237;
      if (v237) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v237 + 8), 1uLL, memory_order_relaxed);
      }
      v236 += 3;
      v232 += 24;
    }
    while (v232 != v233);
    uint64_t v231 = a1;
    *(void *)(a1 + 128) = v236;
  }
  *(void *)(v231 + 144) = 0;
  *(void *)(v231 + 152) = 0;
  uint64_t v238 = v374;
  *(void *)(v231 + 160) = 0;
  *(void *)(v231 + 168) = v238;
  double v239 = (void *)*((void *)&v372 + 1);
  double v240 = (void *)v373;
  uint64_t v241 = v373 - *((void *)&v372 + 1);
  if ((void)v373 != *((void *)&v372 + 1))
  {
    if (v241 < 0) {
      abort();
    }
    double v242 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v238 + 16))(v238, v373 - *((void *)&v372 + 1), 8);
    *(void *)(a1 + 144) = v242;
    *(void *)(a1 + 152) = v242;
    *(void *)(a1 + 160) = &v242[v241 >> 3];
    do
    {
      if (v242) {
        *double v242 = *v239;
      }
      ++v239;
      ++v242;
    }
    while (v239 != v240);
    uint64_t v231 = a1;
    *(void *)(a1 + 152) = v242;
  }
  *(void *)(v231 + 176) = 0;
  *(void *)(v231 + 184) = 0;
  uint64_t v243 = v378;
  *(void *)(v231 + 192) = 0;
  *(void *)(v231 + 200) = v243;
  double v244 = v375;
  double v245 = v376;
  uint64_t v246 = v376 - v375;
  if (v376 != v375)
  {
    if (v246 < 0) {
      abort();
    }
    double v247 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v243 + 16))(v243, v376 - v375, 8);
    *(void *)(a1 + 176) = v247;
    *(void *)(a1 + 184) = v247;
    *(void *)(a1 + 192) = &v247[2 * (v246 >> 4)];
    do
    {
      if (v247)
      {
        *double v247 = *(void *)v244;
        uint64_t v248 = *((void *)v244 + 1);
        v247[1] = v248;
        if (v248) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v248 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v244 += 16;
      v247 += 2;
    }
    while (v244 != v245);
    uint64_t v231 = a1;
    *(void *)(a1 + 184) = v247;
  }
  *(void *)(v231 + 208) = 0;
  *(void *)(v231 + 216) = 0;
  unint64_t v249 = v231 + 208;
  uint64_t v250 = v382;
  *(void *)(v231 + 224) = 0;
  *(void *)(v231 + 232) = v250;
  double v251 = v379;
  double v252 = v380;
  uint64_t v253 = v380 - v379;
  if (v380 != v379)
  {
    if (v253 < 0) {
      abort();
    }
    double v254 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v250 + 16))(v250, v380 - v379, 8);
    *(void *)(a1 + 208) = v254;
    *(void *)(a1 + 216) = v254;
    *(void *)(a1 + 224) = &v254[2 * (v253 >> 4)];
    do
    {
      if (v254)
      {
        *double v254 = *(void *)v251;
        uint64_t v255 = *((void *)v251 + 1);
        v254[1] = v255;
        if (v255) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v255 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v251 += 16;
      v254 += 2;
    }
    while (v251 != v252);
    uint64_t v231 = a1;
    *(void *)(a1 + 216) = v254;
  }
  *(void *)(v231 + 240) = 0;
  *(void *)(v231 + 248) = 0;
  uint64_t v256 = v386;
  *(void *)(v231 + 256) = 0;
  *(void *)(v231 + 264) = v256;
  double v257 = v383;
  double v258 = v384;
  uint64_t v259 = v384 - v383;
  if (v384 != v383)
  {
    if (v259 < 0) {
      abort();
    }
    double v260 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v256 + 16))(v256, v384 - v383, 8);
    *(void *)(a1 + 240) = v260;
    *(void *)(a1 + 248) = v260;
    *(void *)(a1 + 256) = &v260[2 * (v259 >> 4)];
    do
    {
      if (v260)
      {
        void *v260 = *(void *)v257;
        uint64_t v261 = *((void *)v257 + 1);
        v260[1] = v261;
        if (v261) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v261 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v257 += 16;
      v260 += 2;
    }
    while (v257 != v258);
    uint64_t v231 = a1;
    *(void *)(a1 + 248) = v260;
  }
  *(void *)(v231 + 272) = 0;
  *(void *)(v231 + 280) = 0;
  uint64_t v262 = v390;
  *(void *)(v231 + 288) = 0;
  *(void *)(v231 + 296) = v262;
  double v263 = v387;
  double v264 = v388;
  uint64_t v265 = (char *)v388 - (char *)v387;
  if (v388 != v387)
  {
    if (v265 < 0) {
      abort();
    }
    double v266 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v262 + 16))(v262, (char *)v388 - (char *)v387, 8);
    *(void *)(a1 + 272) = v266;
    *(void *)(a1 + 280) = v266;
    *(void *)(a1 + 288) = &v266[2 * (v265 >> 4)];
    do
    {
      if (v266)
      {
        *double v266 = *v263;
        uint64_t v267 = v263[1];
        v266[1] = v267;
        if (v267) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v267 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v263 += 2;
      v266 += 2;
    }
    while (v263 != v264);
    uint64_t v231 = a1;
    *(void *)(a1 + 280) = v266;
  }
  double v268 = (void *)(v231 + 304);
  *(_OWORD *)(v231 + 304) = 0u;
  *(_OWORD *)(v231 + 320) = 0u;
  *(_DWORD *)(v231 + 336) = v393;
  size_t prime = __n[1];
  if (__n[1] == 1)
  {
    size_t prime = 2;
LABEL_379:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v268, prime);
    goto LABEL_380;
  }
  if ((__n[1] & (__n[1] - 1)) != 0)
  {
    size_t prime = std::__next_prime(__n[1]);
    int8x8_t v332 = *(int8x8_t *)(a1 + 312);
    BOOL v333 = prime >= *(void *)&v332;
    if (prime > *(void *)&v332) {
      goto LABEL_379;
    }
  }
  else
  {
    int8x8_t v332 = 0;
    BOOL v333 = 1;
    if (__n[1]) {
      goto LABEL_379;
    }
  }
  if (!v333)
  {
    unint64_t v336 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 328) / *(float *)(a1 + 336));
    if (*(void *)&v332 < 3uLL || (uint8x8_t v337 = (uint8x8_t)vcnt_s8(v332), v337.i16[0] = vaddlv_u8(v337), v337.u32[0] > 1uLL))
    {
      unint64_t v336 = std::__next_prime(v336);
    }
    else
    {
      uint64_t v338 = 1 << -(char)__clz(v336 - 1);
      if (v336 >= 2) {
        unint64_t v336 = v338;
      }
    }
    if (prime <= v336) {
      size_t prime = v336;
    }
    if (prime < *(void *)&v332) {
      goto LABEL_379;
    }
  }
LABEL_380:
  double v270 = (void *)v392;
  if ((void)v392)
  {
    double v271 = (void *)(a1 + 320);
    do
    {
      unint64_t v272 = v270[2];
      unint64_t v273 = 0x9DDFEA08EB382D69 * (((8 * v272) + 8) ^ HIDWORD(v272));
      unint64_t v274 = 0x9DDFEA08EB382D69 * (HIDWORD(v272) ^ (v273 >> 47) ^ v273);
      unint64_t v275 = 0x9DDFEA08EB382D69 * (v274 ^ (v274 >> 47));
      unint64_t v276 = *(void *)(a1 + 312);
      if (v276)
      {
        uint8x8_t v277 = (uint8x8_t)vcnt_s8((int8x8_t)v276);
        v277.i16[0] = vaddlv_u8(v277);
        if (v277.u32[0] > 1uLL)
        {
          unint64_t v249 = 0x9DDFEA08EB382D69 * (v274 ^ (v274 >> 47));
          if (v275 >= v276) {
            unint64_t v249 = v275 % v276;
          }
        }
        else
        {
          unint64_t v249 = v275 & (v276 - 1);
        }
        double v278 = *(void **)(*v268 + 8 * v249);
        if (v278)
        {
          double v279 = (void *)*v278;
          if (v279)
          {
            if (v277.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v281 = v279[1];
                if (v281 == v275)
                {
                  if (v279[2] == v272) {
                    goto LABEL_441;
                  }
                }
                else if ((v281 & (v276 - 1)) != v249)
                {
                  goto LABEL_402;
                }
                double v279 = (void *)*v279;
                if (!v279) {
                  goto LABEL_402;
                }
              }
            }
            do
            {
              unint64_t v280 = v279[1];
              if (v280 == v275)
              {
                if (v279[2] == v272) {
                  goto LABEL_441;
                }
              }
              else
              {
                if (v280 >= v276) {
                  v280 %= v276;
                }
                if (v280 != v249) {
                  break;
                }
              }
              double v279 = (void *)*v279;
            }
            while (v279);
          }
        }
      }
LABEL_402:
      uint64_t v282 = operator new(0x48uLL);
      *(void *)std::string buf = v282;
      *(void *)&buf[8] = a1 + 320;
      buf[16] = 0;
      *uint64_t v282 = 0;
      v282[1] = v275;
      v282[2] = v270[2];
      uint64_t v283 = v270[3];
      v282[3] = v283;
      if (v283) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v283 + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::unordered_map((uint64_t)(v282 + 4), (uint64_t)(v270 + 4));
      buf[16] = 1;
      float v284 = (float)(unint64_t)(*(void *)(a1 + 328) + 1);
      float v285 = *(float *)(a1 + 336);
      if (!v276 || (float)(v285 * (float)v276) < v284)
      {
        BOOL v286 = (v276 & (v276 - 1)) != 0;
        if (v276 < 3) {
          BOOL v286 = 1;
        }
        unint64_t v287 = v286 | (2 * v276);
        unint64_t v288 = vcvtps_u32_f32(v284 / v285);
        if (v287 <= v288) {
          size_t v289 = v288;
        }
        else {
          size_t v289 = v287;
        }
        if (v289 == 1)
        {
          size_t v289 = 2;
        }
        else if ((v289 & (v289 - 1)) != 0)
        {
          size_t v289 = std::__next_prime(v289);
        }
        int8x8_t v290 = *(int8x8_t *)(a1 + 312);
        if (v289 > *(void *)&v290) {
          goto LABEL_416;
        }
        if (v289 < *(void *)&v290)
        {
          unint64_t v291 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 328) / *(float *)(a1 + 336));
          if (*(void *)&v290 < 3uLL
            || (uint8x8_t v292 = (uint8x8_t)vcnt_s8(v290), v292.i16[0] = vaddlv_u8(v292), v292.u32[0] > 1uLL))
          {
            unint64_t v291 = std::__next_prime(v291);
          }
          else
          {
            uint64_t v293 = 1 << -(char)__clz(v291 - 1);
            if (v291 >= 2) {
              unint64_t v291 = v293;
            }
          }
          if (v289 <= v291) {
            size_t v289 = v291;
          }
          if (v289 < *(void *)&v290) {
LABEL_416:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v268, v289);
        }
        unint64_t v276 = *(void *)(a1 + 312);
        if ((v276 & (v276 - 1)) != 0)
        {
          if (v275 >= v276) {
            unint64_t v249 = v275 % v276;
          }
          else {
            unint64_t v249 = v275;
          }
        }
        else
        {
          unint64_t v249 = (v276 - 1) & v275;
        }
      }
      double v294 = *(void **)(*v268 + 8 * v249);
      if (v294)
      {
        **(void **)std::string buf = *v294;
        *double v294 = *(void *)buf;
      }
      else
      {
        **(void **)std::string buf = *v271;
        *double v271 = *(void *)buf;
        *(void *)(*v268 + 8 * v249) = v271;
        if (**(void **)buf)
        {
          unint64_t v295 = *(void *)(**(void **)buf + 8);
          if ((v276 & (v276 - 1)) != 0)
          {
            if (v295 >= v276) {
              v295 %= v276;
            }
          }
          else
          {
            v295 &= v276 - 1;
          }
          *(void *)(*v268 + 8 * v295) = *(void *)buf;
        }
      }
      ++*(void *)(a1 + 328);
LABEL_441:
      double v270 = (void *)*v270;
    }
    while (v270);
  }
  double v296 = (uint64_t *)(a1 + 344);
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = v396;
  size_t v297 = *((void *)&v394 + 1);
  if (*((void *)&v394 + 1) == 1)
  {
    size_t v297 = 2;
LABEL_444:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v296, v297);
    goto LABEL_445;
  }
  if ((*((void *)&v394 + 1) & (*((void *)&v394 + 1) - 1)) != 0)
  {
    size_t v297 = std::__next_prime(*((size_t *)&v394 + 1));
    int8x8_t v334 = *(int8x8_t *)(a1 + 352);
    BOOL v335 = v297 >= *(void *)&v334;
    if (v297 > *(void *)&v334) {
      goto LABEL_444;
    }
  }
  else
  {
    int8x8_t v334 = 0;
    BOOL v335 = 1;
    if (*((void *)&v394 + 1)) {
      goto LABEL_444;
    }
  }
  if (!v335)
  {
    unint64_t v339 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 368) / *(float *)(a1 + 376));
    if (*(void *)&v334 < 3uLL || (uint8x8_t v340 = (uint8x8_t)vcnt_s8(v334), v340.i16[0] = vaddlv_u8(v340), v340.u32[0] > 1uLL))
    {
      unint64_t v339 = std::__next_prime(v339);
    }
    else
    {
      uint64_t v341 = 1 << -(char)__clz(v339 - 1);
      if (v339 >= 2) {
        unint64_t v339 = v341;
      }
    }
    if (v297 <= v339) {
      size_t v297 = v339;
    }
    if (v297 < *(void *)&v334) {
      goto LABEL_444;
    }
  }
LABEL_445:
  float64x2_t v298 = (void *)v395;
  if ((void)v395)
  {
    float64x2_t v299 = (void *)(a1 + 360);
    do
    {
      unint64_t v300 = v298[2];
      unint64_t v301 = 0x9DDFEA08EB382D69 * (((8 * v300) + 8) ^ HIDWORD(v300));
      unint64_t v302 = 0x9DDFEA08EB382D69 * (HIDWORD(v300) ^ (v301 >> 47) ^ v301);
      unint64_t v303 = 0x9DDFEA08EB382D69 * (v302 ^ (v302 >> 47));
      unint64_t v304 = *(void *)(a1 + 352);
      if (v304)
      {
        uint8x8_t v305 = (uint8x8_t)vcnt_s8((int8x8_t)v304);
        v305.i16[0] = vaddlv_u8(v305);
        if (v305.u32[0] > 1uLL)
        {
          unint64_t v249 = 0x9DDFEA08EB382D69 * (v302 ^ (v302 >> 47));
          if (v303 >= v304) {
            unint64_t v249 = v303 % v304;
          }
        }
        else
        {
          unint64_t v249 = v303 & (v304 - 1);
        }
        uint64_t v306 = *(void **)(*v296 + 8 * v249);
        if (v306)
        {
          __int16 v307 = (void *)*v306;
          if (v307)
          {
            if (v305.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v309 = v307[1];
                if (v309 == v303)
                {
                  if (v307[2] == v300) {
                    goto LABEL_509;
                  }
                }
                else if ((v309 & (v304 - 1)) != v249)
                {
                  goto LABEL_467;
                }
                __int16 v307 = (void *)*v307;
                if (!v307) {
                  goto LABEL_467;
                }
              }
            }
            do
            {
              unint64_t v308 = v307[1];
              if (v308 == v303)
              {
                if (v307[2] == v300) {
                  goto LABEL_509;
                }
              }
              else
              {
                if (v308 >= v304) {
                  v308 %= v304;
                }
                if (v308 != v249) {
                  break;
                }
              }
              __int16 v307 = (void *)*v307;
            }
            while (v307);
          }
        }
      }
LABEL_467:
      float64x2_t v310 = operator new(0x30uLL);
      float64x2_t v311 = v310;
      *(void *)std::string buf = v310;
      *(void *)&buf[8] = a1 + 360;
      *float64x2_t v310 = 0;
      v310[1] = v303;
      v310[2] = v298[2];
      uint64_t v312 = v298[3];
      v310[3] = v312;
      if (v312) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v312 + 8), 1uLL, memory_order_relaxed);
      }
      v310[4] = v298[4];
      uint64_t v313 = v298[5];
      v310[5] = v313;
      if (v313) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v313 + 8), 1uLL, memory_order_relaxed);
      }
      buf[16] = 1;
      float v314 = (float)(unint64_t)(*(void *)(a1 + 368) + 1);
      float v315 = *(float *)(a1 + 376);
      if (!v304 || (float)(v315 * (float)v304) < v314)
      {
        BOOL v316 = (v304 & (v304 - 1)) != 0;
        if (v304 < 3) {
          BOOL v316 = 1;
        }
        unint64_t v317 = v316 | (2 * v304);
        unint64_t v318 = vcvtps_u32_f32(v314 / v315);
        if (v317 <= v318) {
          size_t v319 = v318;
        }
        else {
          size_t v319 = v317;
        }
        if (v319 == 1)
        {
          size_t v319 = 2;
        }
        else if ((v319 & (v319 - 1)) != 0)
        {
          size_t v319 = std::__next_prime(v319);
        }
        int8x8_t v320 = *(int8x8_t *)(a1 + 352);
        if (v319 > *(void *)&v320) {
          goto LABEL_483;
        }
        if (v319 < *(void *)&v320)
        {
          unint64_t v321 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 368) / *(float *)(a1 + 376));
          if (*(void *)&v320 < 3uLL
            || (uint8x8_t v322 = (uint8x8_t)vcnt_s8(v320), v322.i16[0] = vaddlv_u8(v322), v322.u32[0] > 1uLL))
          {
            unint64_t v321 = std::__next_prime(v321);
          }
          else
          {
            uint64_t v323 = 1 << -(char)__clz(v321 - 1);
            if (v321 >= 2) {
              unint64_t v321 = v323;
            }
          }
          if (v319 <= v321) {
            size_t v319 = v321;
          }
          if (v319 < *(void *)&v320) {
LABEL_483:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v296, v319);
        }
        unint64_t v304 = *(void *)(a1 + 352);
        if ((v304 & (v304 - 1)) != 0)
        {
          if (v303 >= v304) {
            unint64_t v249 = v303 % v304;
          }
          else {
            unint64_t v249 = v303;
          }
        }
        else
        {
          unint64_t v249 = (v304 - 1) & v303;
        }
      }
      uint64_t v324 = *v296;
      double v325 = *(void **)(*v296 + 8 * v249);
      if (v325)
      {
        *float64x2_t v311 = *v325;
      }
      else
      {
        *float64x2_t v311 = *v299;
        *float64x2_t v299 = v311;
        *(void *)(v324 + 8 * v249) = v299;
        if (!*v311) {
          goto LABEL_508;
        }
        unint64_t v326 = *(void *)(*v311 + 8);
        if ((v304 & (v304 - 1)) != 0)
        {
          if (v326 >= v304) {
            v326 %= v304;
          }
        }
        else
        {
          v326 &= v304 - 1;
        }
        double v325 = (void *)(*v296 + 8 * v326);
      }
      *double v325 = v311;
LABEL_508:
      ++*(void *)(a1 + 368);
LABEL_509:
      float64x2_t v298 = (void *)*v298;
    }
    while (v298);
  }
  uint64_t v225 = a1;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  double v327 = v397;
  uint32x4_t v328 = v398;
  uint64_t v329 = (char *)v398 - (char *)v397;
  if (v398 != v397)
  {
    if (v329 < 0) {
      abort();
    }
    uint64_t v330 = operator new((char *)v398 - (char *)v397);
    *(void *)(a1 + 384) = v330;
    *(void *)(a1 + 392) = v330;
    *(void *)(a1 + 400) = &v330[v329 >> 3];
    do
    {
      uint64_t v331 = *v327++;
      *v330++ = v331;
    }
    while (v327 != v328);
    uint64_t v225 = a1;
    *(void *)(a1 + 392) = v330;
  }
  *(_OWORD *)(v225 + 408) = v400;
  *(void *)(v225 + 424) = v401;
  *(unsigned char *)(v225 + 432) = 1;
LABEL_516:
  md::ARWalkingSupport::updateFeatureSetState(v225, *((void **)&v407 + 1), 5);
  if (*(unsigned char *)(v225 + 432))
  {
    md::ARWalkingSupport::updateFeatureSetState(v225, *(void **)(v225 + 104), 2);
    *(void *)&long long v407 = &unk_1EF5599B8;

    md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingFeatureSet *)&v369);
    return;
  }
LABEL_568:
  std::__throw_bad_optional_access[abi:nn180100]();
  __break(1u);
}

void sub_1A1DE22D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, md::LabelFeature *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_Unwind_Exception *exception_objecta,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,gss::FeatureAttributeSet *a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingFeatureSet *)&a71);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingFeatureSet::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  id v4 = *(id *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;

  if (a1 == v2) {
    goto LABEL_413;
  }
  double v6 = (void **)(a1 + 24);
  double v7 = *(char **)(a1 + 24);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
  uint64_t v11 = *(void *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3) < v10)
  {
    if (v7)
    {
      double v12 = *(char **)(a1 + 32);
      long double v13 = *(void **)(a1 + 24);
      if (v12 != v7)
      {
        do
        {
          double v14 = (std::__shared_weak_count *)*((void *)v12 - 1);
          if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }

          v12 -= 24;
        }
        while (v12 != v7);
        long double v13 = *v6;
      }
      *(void *)(a1 + 32) = v7;
      operator delete(v13);
      uint64_t v11 = 0;
      *double v6 = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_414;
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    uint64_t v24 = 2 * v23;
    if (2 * v23 <= v10) {
      uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    }
    unint64_t v25 = v23 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v24;
    if (v25 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_414;
    }
    uint64_t v26 = 24 * v25;
    double v7 = (char *)operator new(24 * v25);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v7;
    for (*(void *)(a1 + 40) = &v7[v26]; v9 != v8; v9 += 24)
    {
      id v27 = *(id *)v9;
      uint64_t v29 = *(void *)(v9 + 8);
      uint64_t v28 = *(void *)(v9 + 16);
      *(void *)double v7 = v27;
      *((void *)v7 + 1) = v29;
      *((void *)v7 + 2) = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 24;
    }
    goto LABEL_55;
  }
  __double2 v15 = *(char **)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v7) >> 3) >= v10)
  {
    if (v9 != v8)
    {
      do
      {
        objc_storeStrong((id *)v7, *(id *)v9);
        uint64_t v21 = *(void *)(v9 + 8);
        uint64_t v20 = *(void *)(v9 + 16);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        id v22 = (std::__shared_weak_count *)*((void *)v7 + 2);
        *((void *)v7 + 1) = v21;
        *((void *)v7 + 2) = v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v7 += 24;
        v9 += 24;
      }
      while (v9 != v8);
      __double2 v15 = *(char **)(a1 + 32);
    }
    for (; v15 != v7; v15 -= 24)
    {
      size_t v34 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
LABEL_55:
    *(void *)(a1 + 32) = v7;
    goto LABEL_56;
  }
  uint64_t v16 = v9 + 8 * ((v15 - v7) >> 3);
  if (v15 != v7)
  {
    do
    {
      objc_storeStrong((id *)v7, *(id *)v9);
      uint64_t v18 = *(void *)(v9 + 8);
      uint64_t v17 = *(void *)(v9 + 16);
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      double v19 = (std::__shared_weak_count *)*((void *)v7 + 2);
      *((void *)v7 + 1) = v18;
      *((void *)v7 + 2) = v17;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      v9 += 24;
      v7 += 24;
    }
    while (v9 != v16);
    double v7 = *(char **)(a1 + 32);
  }
  uint64_t v30 = v7;
  if (v16 != v8)
  {
    uint64_t v30 = v7;
    do
    {
      id v31 = *(id *)v16;
      uint64_t v33 = *(void *)(v16 + 8);
      uint64_t v32 = *(void *)(v16 + 16);
      *uint64_t v30 = v31;
      v30[1] = v33;
      v30[2] = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      v30 += 3;
      v16 += 24;
    }
    while (v16 != v8);
  }
  *(void *)(a1 + 32) = v30;
LABEL_56:
  uint64_t v35 = *(void *)(a1 + 48);
  uint64_t v37 = *(char **)(v2 + 48);
  uint64_t v36 = *(char **)(v2 + 56);
  int64_t v38 = v36 - v37;
  unint64_t v39 = (v36 - v37) >> 3;
  uint64_t v40 = *(void *)(a1 + 64);
  if (v39 > (v40 - v35) >> 3)
  {
    if (v35)
    {
      *(void *)(a1 + 56) = v35;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), v35);
      uint64_t v40 = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
    }
    if (v38 < 0) {
      goto LABEL_414;
    }
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= v39) {
      uint64_t v41 = (v36 - v37) >> 3;
    }
    BOOL v42 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v43 = v41;
    }
    if (v43 >> 61) {
      goto LABEL_414;
    }
    uint64_t v44 = 8 * v43;
    uint64_t v45 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), 8 * v43, 8);
    uint64_t v35 = v45;
    *(void *)(a1 + 48) = v45;
    *(void *)(a1 + 56) = v45;
    *(void *)(a1 + 64) = v45 + v44;
    uint64_t v46 = (char *)v45;
    if (v37 != v36)
    {
      uint64_t v46 = (char *)v45;
      do
      {
        if (v46) {
          *(void *)uint64_t v46 = *(void *)v37;
        }
        v37 += 8;
        v46 += 8;
      }
      while (v37 != v36);
    }
    goto LABEL_78;
  }
  BOOL v47 = *(void **)(a1 + 56);
  unint64_t v48 = ((uint64_t)v47 - v35) >> 3;
  if (v48 < v39)
  {
    uint64_t v49 = &v37[8 * v48];
    if (v47 != (void *)v35)
    {
      memmove(*(void **)(a1 + 48), *(const void **)(v2 + 48), (size_t)v47 - v35);
      uint64_t v35 = *(void *)(a1 + 56);
    }
    uint64_t v46 = (char *)v35;
    if (v49 != v36)
    {
      uint64_t v46 = (char *)v35;
      do
      {
        if (v46) {
          *(void *)uint64_t v46 = *(void *)v49;
        }
        v49 += 8;
        v46 += 8;
      }
      while (v49 != v36);
    }
LABEL_78:
    int64_t v38 = (int64_t)&v46[-v35];
    goto LABEL_79;
  }
  if (v36 != v37) {
    memmove(*(void **)(a1 + 48), *(const void **)(v2 + 48), v36 - v37);
  }
LABEL_79:
  uint64_t v50 = (char *)(v35 + v38);
  unint64_t v51 = *(char **)(a1 + 80);
  *(void *)(a1 + 56) = v50;
  long long v53 = *(char **)(v2 + 80);
  id v52 = *(char **)(v2 + 88);
  unint64_t v54 = (v52 - v53) >> 4;
  uint64_t v55 = *(void *)(a1 + 96);
  uint64_t v56 = v55 - (void)v51;
  uint64_t v236 = v2;
  if (v54 <= (v55 - (uint64_t)v51) >> 4)
  {
    unint64_t v59 = *(char **)(a1 + 88);
    unint64_t v60 = (v59 - v51) >> 4;
    if (v60 >= v54)
    {
      if (v53 != v52)
      {
        do
        {
          uint64_t v66 = *(void *)v53;
          uint64_t v65 = *((void *)v53 + 1);
          if (v65) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
          }
          double v67 = (std::__shared_weak_count *)*((void *)v51 + 1);
          *(void *)unint64_t v51 = v66;
          *((void *)v51 + 1) = v65;
          if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          v51 += 16;
          v53 += 16;
        }
        while (v53 != v52);
        unint64_t v59 = *(char **)(a1 + 88);
      }
      for (; v59 != v51; v59 -= 16)
      {
        double v71 = (std::__shared_weak_count *)*((void *)v59 - 1);
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      *(void *)(a1 + 88) = v51;
    }
    else
    {
      id v61 = &v53[16 * v60];
      if (v59 != v51)
      {
        do
        {
          uint64_t v63 = *(void *)v53;
          uint64_t v62 = *((void *)v53 + 1);
          if (v62) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
          }
          id v64 = (std::__shared_weak_count *)*((void *)v51 + 1);
          *(void *)unint64_t v51 = v63;
          *((void *)v51 + 1) = v62;
          if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          v53 += 16;
          v51 += 16;
        }
        while (v53 != v61);
        unint64_t v51 = *(char **)(a1 + 88);
      }
      double v69 = v51;
      if (v61 != v52)
      {
        double v69 = v51;
        do
        {
          if (v69)
          {
            uint64_t v70 = *((void *)v61 + 1);
            *(void *)double v69 = *(void *)v61;
            *((void *)v69 + 1) = v70;
            if (v70) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
            }
          }
          v61 += 16;
          v69 += 16;
        }
        while (v61 != v52);
      }
      *(void *)(a1 + 88) = v69;
    }
  }
  else
  {
    if (v51)
    {
      unint64_t v57 = *(char **)(a1 + 88);
      if (v57 == v51)
      {
        double v68 = v51;
      }
      else
      {
        do
        {
          uint64_t v58 = (std::__shared_weak_count *)*((void *)v57 - 1);
          if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
          v57 -= 16;
        }
        while (v57 != v51);
        double v68 = *(char **)(a1 + 80);
        uint64_t v56 = *(void *)(a1 + 96) - (void)v68;
      }
      *(void *)(a1 + 88) = v51;
      (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), v68, v56);
      uint64_t v55 = 0;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
    }
    if (v52 - v53 < 0) {
      goto LABEL_414;
    }
    uint64_t v72 = v55 >> 3;
    if (v55 >> 3 <= v54) {
      uint64_t v72 = (v52 - v53) >> 4;
    }
    BOOL v42 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v73 = v72;
    }
    if (v73 >> 60) {
      goto LABEL_414;
    }
    uint64_t v74 = 2 * v73;
    BOOL v75 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), 16 * v73, 8);
    *(void *)(a1 + 80) = v75;
    *(void *)(a1 + 88) = v75;
    for (*(void *)(a1 + 96) = &v75[v74]; v53 != v52; v75 += 2)
    {
      if (v75)
      {
        uint64_t v76 = *((void *)v53 + 1);
        *BOOL v75 = *(void *)v53;
        v75[1] = v76;
        if (v76) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v53 += 16;
    }
    *(void *)(a1 + 88) = v75;
  }
  BOOL v77 = *(char **)(a1 + 112);
  int v79 = *(char **)(v2 + 112);
  int v78 = *(char **)(v2 + 120);
  unint64_t v80 = (v78 - v79) >> 4;
  uint64_t v81 = *(void *)(a1 + 128);
  uint64_t v82 = v81 - (void)v77;
  if (v80 <= (v81 - (uint64_t)v77) >> 4)
  {
    double v85 = *(char **)(a1 + 120);
    unint64_t v86 = (v85 - v77) >> 4;
    if (v86 >= v80)
    {
      if (v79 != v78)
      {
        do
        {
          uint64_t v92 = *(void *)v79;
          uint64_t v91 = *((void *)v79 + 1);
          if (v91) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v93 = (std::__shared_weak_count *)*((void *)v77 + 1);
          *(void *)BOOL v77 = v92;
          *((void *)v77 + 1) = v91;
          if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
          v77 += 16;
          v79 += 16;
        }
        while (v79 != v78);
        double v85 = *(char **)(a1 + 120);
      }
      for (; v85 != v77; v85 -= 16)
      {
        unsigned __int8 v97 = (std::__shared_weak_count *)*((void *)v85 - 1);
        if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      *(void *)(a1 + 120) = v77;
    }
    else
    {
      uint64_t v87 = &v79[16 * v86];
      if (v85 != v77)
      {
        do
        {
          uint64_t v89 = *(void *)v79;
          uint64_t v88 = *((void *)v79 + 1);
          if (v88) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v90 = (std::__shared_weak_count *)*((void *)v77 + 1);
          *(void *)BOOL v77 = v89;
          *((void *)v77 + 1) = v88;
          if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
          v79 += 16;
          v77 += 16;
        }
        while (v79 != v87);
        BOOL v77 = *(char **)(a1 + 120);
      }
      char v95 = v77;
      if (v87 != v78)
      {
        char v95 = v77;
        do
        {
          if (v95)
          {
            uint64_t v96 = *((void *)v87 + 1);
            *(void *)char v95 = *(void *)v87;
            *((void *)v95 + 1) = v96;
            if (v96) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
            }
          }
          v87 += 16;
          v95 += 16;
        }
        while (v87 != v78);
      }
      *(void *)(a1 + 120) = v95;
    }
  }
  else
  {
    if (v77)
    {
      uint64_t v83 = *(char **)(a1 + 120);
      if (v83 == v77)
      {
        uint64_t v94 = *(void *)(a1 + 112);
      }
      else
      {
        do
        {
          id v84 = (std::__shared_weak_count *)*((void *)v83 - 1);
          if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
          v83 -= 16;
        }
        while (v83 != v77);
        uint64_t v94 = *(void *)(a1 + 112);
        uint64_t v82 = *(void *)(a1 + 128) - v94;
      }
      *(void *)(a1 + 120) = v77;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 136) + 40))(*(void *)(a1 + 136), v94, v82);
      uint64_t v81 = 0;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
    }
    if (v78 - v79 < 0) {
      goto LABEL_414;
    }
    uint64_t v98 = v81 >> 3;
    if (v81 >> 3 <= v80) {
      uint64_t v98 = (v78 - v79) >> 4;
    }
    BOOL v42 = (unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v99 = v98;
    }
    if (v99 >> 60) {
      goto LABEL_414;
    }
    uint64_t v100 = 2 * v99;
    unint64_t v101 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136), 16 * v99, 8);
    *(void *)(a1 + 112) = v101;
    *(void *)(a1 + 120) = v101;
    for (*(void *)(a1 + 128) = &v101[v100]; v79 != v78; v101 += 2)
    {
      if (v101)
      {
        uint64_t v102 = *((void *)v79 + 1);
        *unint64_t v101 = *(void *)v79;
        v101[1] = v102;
        if (v102) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v102 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v79 += 16;
    }
    *(void *)(a1 + 120) = v101;
  }
  uint64_t v103 = *(char **)(a1 + 144);
  int v105 = *(char **)(v2 + 144);
  uint64_t v104 = *(char **)(v2 + 152);
  unint64_t v106 = (v104 - v105) >> 4;
  uint64_t v107 = *(void *)(a1 + 160);
  uint64_t v108 = v107 - (void)v103;
  if (v106 <= (v107 - (uint64_t)v103) >> 4)
  {
    long long v111 = *(char **)(a1 + 152);
    unint64_t v112 = (v111 - v103) >> 4;
    if (v112 >= v106)
    {
      if (v105 != v104)
      {
        do
        {
          uint64_t v118 = *(void *)v105;
          uint64_t v117 = *((void *)v105 + 1);
          if (v117) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v119 = (std::__shared_weak_count *)*((void *)v103 + 1);
          *(void *)uint64_t v103 = v118;
          *((void *)v103 + 1) = v117;
          if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
          v103 += 16;
          v105 += 16;
        }
        while (v105 != v104);
        long long v111 = *(char **)(a1 + 152);
      }
      for (; v111 != v103; v111 -= 16)
      {
        unsigned int v123 = (std::__shared_weak_count *)*((void *)v111 - 1);
        if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      *(void *)(a1 + 152) = v103;
    }
    else
    {
      unint64_t v113 = &v105[16 * v112];
      if (v111 != v103)
      {
        do
        {
          uint64_t v115 = *(void *)v105;
          uint64_t v114 = *((void *)v105 + 1);
          if (v114) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v114 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v116 = (std::__shared_weak_count *)*((void *)v103 + 1);
          *(void *)uint64_t v103 = v115;
          *((void *)v103 + 1) = v114;
          if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
          v105 += 16;
          v103 += 16;
        }
        while (v105 != v113);
        uint64_t v103 = *(char **)(a1 + 152);
      }
      uint64_t v121 = v103;
      if (v113 != v104)
      {
        uint64_t v121 = v103;
        do
        {
          if (v121)
          {
            uint64_t v122 = *((void *)v113 + 1);
            *(void *)uint64_t v121 = *(void *)v113;
            *((void *)v121 + 1) = v122;
            if (v122) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 8), 1uLL, memory_order_relaxed);
            }
          }
          v113 += 16;
          v121 += 16;
        }
        while (v113 != v104);
      }
      *(void *)(a1 + 152) = v121;
    }
  }
  else
  {
    if (v103)
    {
      uint64_t v109 = *(char **)(a1 + 152);
      if (v109 == v103)
      {
        uint64_t v120 = *(void *)(a1 + 144);
      }
      else
      {
        do
        {
          id v110 = (std::__shared_weak_count *)*((void *)v109 - 1);
          if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
          v109 -= 16;
        }
        while (v109 != v103);
        uint64_t v120 = *(void *)(a1 + 144);
        uint64_t v108 = *(void *)(a1 + 160) - v120;
      }
      *(void *)(a1 + 152) = v103;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 40))(*(void *)(a1 + 168), v120, v108);
      uint64_t v107 = 0;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
    }
    if (v104 - v105 < 0) {
      goto LABEL_414;
    }
    uint64_t v124 = v107 >> 3;
    if (v107 >> 3 <= v106) {
      uint64_t v124 = (v104 - v105) >> 4;
    }
    BOOL v42 = (unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v125 = 0xFFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v125 = v124;
    }
    if (v125 >> 60) {
      goto LABEL_414;
    }
    uint64_t v126 = 2 * v125;
    unsigned __int8 v127 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168), 16 * v125, 8);
    *(void *)(a1 + 144) = v127;
    *(void *)(a1 + 152) = v127;
    for (*(void *)(a1 + 160) = &v127[v126]; v105 != v104; v127 += 2)
    {
      if (v127)
      {
        uint64_t v128 = *((void *)v105 + 1);
        *unsigned __int8 v127 = *(void *)v105;
        v127[1] = v128;
        if (v128) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v128 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v105 += 16;
    }
    *(void *)(a1 + 152) = v127;
  }
  uint64_t v129 = *(char **)(a1 + 176);
  uint64_t v131 = *(char **)(v2 + 176);
  uint64_t v130 = *(char **)(v2 + 184);
  unint64_t v132 = (v130 - v131) >> 4;
  uint64_t v133 = *(void *)(a1 + 192);
  uint64_t v134 = v133 - (void)v129;
  if (v132 <= (v133 - (uint64_t)v129) >> 4)
  {
    uint64_t v137 = *(char **)(a1 + 184);
    unint64_t v138 = (v137 - v129) >> 4;
    if (v138 >= v132)
    {
      if (v131 != v130)
      {
        do
        {
          uint64_t v144 = *(void *)v131;
          uint64_t v143 = *((void *)v131 + 1);
          if (v143) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v143 + 8), 1uLL, memory_order_relaxed);
          }
          double v145 = (std::__shared_weak_count *)*((void *)v129 + 1);
          *(void *)uint64_t v129 = v144;
          *((void *)v129 + 1) = v143;
          if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
          v129 += 16;
          v131 += 16;
        }
        while (v131 != v130);
        uint64_t v137 = *(char **)(a1 + 184);
      }
      for (; v137 != v129; v137 -= 16)
      {
        size_t v149 = (std::__shared_weak_count *)*((void *)v137 - 1);
        if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      *(void *)(a1 + 184) = v129;
    }
    else
    {
      uint64_t v139 = &v131[16 * v138];
      if (v137 != v129)
      {
        do
        {
          uint64_t v141 = *(void *)v131;
          uint64_t v140 = *((void *)v131 + 1);
          if (v140) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v140 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v142 = (std::__shared_weak_count *)*((void *)v129 + 1);
          *(void *)uint64_t v129 = v141;
          *((void *)v129 + 1) = v140;
          if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
          v131 += 16;
          v129 += 16;
        }
        while (v131 != v139);
        uint64_t v129 = *(char **)(a1 + 184);
      }
      uint64_t v147 = v129;
      if (v139 != v130)
      {
        uint64_t v147 = v129;
        do
        {
          if (v147)
          {
            uint64_t v148 = *((void *)v139 + 1);
            *(void *)uint64_t v147 = *(void *)v139;
            *((void *)v147 + 1) = v148;
            if (v148) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v148 + 8), 1uLL, memory_order_relaxed);
            }
          }
          v139 += 16;
          v147 += 16;
        }
        while (v139 != v130);
      }
      *(void *)(a1 + 184) = v147;
    }
  }
  else
  {
    if (v129)
    {
      int v135 = *(char **)(a1 + 184);
      if (v135 == v129)
      {
        uint64_t v146 = *(void *)(a1 + 176);
      }
      else
      {
        do
        {
          std::string v136 = (std::__shared_weak_count *)*((void *)v135 - 1);
          if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
          v135 -= 16;
        }
        while (v135 != v129);
        uint64_t v146 = *(void *)(a1 + 176);
        uint64_t v134 = *(void *)(a1 + 192) - v146;
      }
      *(void *)(a1 + 184) = v129;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 200) + 40))(*(void *)(a1 + 200), v146, v134);
      uint64_t v133 = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
    }
    if (v130 - v131 < 0) {
      goto LABEL_414;
    }
    uint64_t v150 = v133 >> 3;
    if (v133 >> 3 <= v132) {
      uint64_t v150 = (v130 - v131) >> 4;
    }
    BOOL v42 = (unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v151 = 0xFFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v151 = v150;
    }
    if (v151 >> 60) {
      goto LABEL_414;
    }
    uint64_t v152 = 2 * v151;
    double v153 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 200) + 16))(*(void *)(a1 + 200), 16 * v151, 8);
    *(void *)(a1 + 176) = v153;
    *(void *)(a1 + 184) = v153;
    for (*(void *)(a1 + 192) = &v153[v152]; v131 != v130; v153 += 2)
    {
      if (v153)
      {
        uint64_t v154 = *((void *)v131 + 1);
        *double v153 = *(void *)v131;
        v153[1] = v154;
        if (v154) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v154 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v131 += 16;
    }
    *(void *)(a1 + 184) = v153;
  }
  float v155 = (void *)(a1 + 208);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(v2 + 240);
  __float2 v156 = *(uint64_t **)(v2 + 224);
  uint64_t v157 = *(void *)(a1 + 216);
  if (v157)
  {
    for (uint64_t i = 0; i != v157; ++i)
      *(void *)(*v155 + 8 * i) = 0;
    long long v159 = *(uint64_t **)(a1 + 224);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    if (v159)
    {
      do
      {
        if (!v156)
        {
          do
          {
            uint64_t v183 = (uint64_t *)*v159;
            std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v159 + 2);
            operator delete(v159);
            long long v159 = v183;
          }
          while (v183);
          goto LABEL_349;
        }
        uint64_t v162 = v156[2];
        uint64_t v161 = v156[3];
        if (v161) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v161 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v163 = (std::__shared_weak_count *)v159[3];
        v159[2] = v162;
        v159[3] = v161;
        if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
          if (v159 != v156)
          {
LABEL_321:
            *((_DWORD *)v159 + 16) = *((_DWORD *)v156 + 16);
            long long v164 = (uint64_t *)v156[6];
            uint64_t v165 = v159[5];
            if (!v165) {
              goto LABEL_325;
            }
            for (uint64_t j = 0; j != v165; ++j)
              *(void *)(v159[4] + 8 * j) = 0;
            uint64_t v167 = v159[6];
            v159[6] = 0;
            v159[7] = 0;
            if (v167)
            {
              while (v164)
              {
                *(_DWORD *)(v167 + 16) = *((_DWORD *)v164 + 4);
                uint64_t v173 = v164[3];
                uint64_t v172 = v164[4];
                if (v172) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v172 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v174 = *(std::__shared_weak_count **)(v167 + 32);
                *(void *)(v167 + 24) = v173;
                *(void *)(v167 + 32) = v172;
                if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                  std::__shared_weak_count::__release_weak(v174);
                }
                uint64_t v171 = *(void *)v167;
                std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__node_insert_multi((uint64_t)(v159 + 4), v167);
                long long v164 = (uint64_t *)*v164;
                uint64_t v167 = v171;
                if (!v171) {
                  goto LABEL_325;
                }
              }
              do
              {
                double v175 = (void *)v167;
                uint64_t v167 = *(void *)v167;
                uint64_t v176 = (std::__shared_weak_count *)v175[4];
                if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
                operator delete(v175);
              }
              while (v167);
            }
            else
            {
LABEL_325:
              while (v164)
              {
                uint64_t v168 = operator new(0x28uLL);
                *uint64_t v168 = 0;
                v168[1] = 0;
                uint64_t v169 = *((unsigned int *)v164 + 4);
                *((_DWORD *)v168 + 4) = v169;
                uint64_t v170 = v164[4];
                v168[3] = v164[3];
                v168[4] = v170;
                if (v170) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v170 + 8), 1uLL, memory_order_relaxed);
                }
                v168[1] = v169;
                std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__node_insert_multi((uint64_t)(v159 + 4), (uint64_t)v168);
                long long v164 = (uint64_t *)*v164;
              }
            }
          }
        }
        else if (v159 != v156)
        {
          goto LABEL_321;
        }
        uint64_t v160 = (uint64_t *)*v159;
        std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)v155, v159);
        __float2 v156 = (uint64_t *)*v156;
        long long v159 = v160;
      }
      while (v160);
    }
  }
  for (; v156; __float2 v156 = (uint64_t *)*v156)
  {
    double v177 = operator new(0x48uLL);
    unint64_t v178 = v177;
    *double v177 = 0;
    v177[1] = 0;
    uint64_t v179 = v156[3];
    v177[2] = v156[2];
    v177[3] = v179;
    if (v179) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v179 + 8), 1uLL, memory_order_relaxed);
    }
    std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::unordered_map((uint64_t)(v177 + 4), (uint64_t)(v156 + 4));
    unint64_t v180 = v178[2];
    unint64_t v181 = HIDWORD(v180);
    unint64_t v182 = 0x9DDFEA08EB382D69 * (((8 * v180) + 8) ^ HIDWORD(v180));
    v178[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v181 ^ (v182 >> 47) ^ v182)) ^ ((0x9DDFEA08EB382D69
                                                                       * (v181 ^ (v182 >> 47) ^ v182)) >> 47));
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi((uint64_t)v155, v178);
  }
LABEL_349:
  uint64_t v2 = v236;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(v236 + 280);
  double v184 = *(void **)(v236 + 264);
  uint64_t v185 = *(void *)(a1 + 256);
  if (v185)
  {
    for (uint64_t k = 0; k != v185; ++k)
      *(void *)(*(void *)(a1 + 248) + 8 * k) = 0;
    id v187 = *(void **)(a1 + 264);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    if (v187)
    {
      while (v184)
      {
        uint64_t v190 = v184[2];
        uint64_t v189 = v184[3];
        if (v189) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v189 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v191 = (std::__shared_weak_count *)v187[3];
        _OWORD v187[2] = v190;
        v187[3] = v189;
        if (!v191 || atomic_fetch_add(&v191->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v193 = v184[4];
          uint64_t v192 = v184[5];
          if (!v192) {
            goto LABEL_362;
          }
LABEL_361:
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v192 + 8), 1uLL, memory_order_relaxed);
          goto LABEL_362;
        }
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
        uint64_t v193 = v184[4];
        uint64_t v192 = v184[5];
        if (v192) {
          goto LABEL_361;
        }
LABEL_362:
        uint64_t v194 = (std::__shared_weak_count *)v187[5];
        v187[4] = v193;
        v187[5] = v192;
        if (v194 && !atomic_fetch_add(&v194->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
        unint64_t v188 = (void *)*v187;
        std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(a1 + 248, v187);
        double v184 = (void *)*v184;
        id v187 = v188;
        if (!v188) {
          goto LABEL_367;
        }
      }
      while (1)
      {
        id v227 = v187;
        id v187 = (void *)*v187;
        double v228 = (std::__shared_weak_count *)v227[5];
        if (v228 && !atomic_fetch_add(&v228->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
          id v229 = (std::__shared_weak_count *)v227[3];
          if (v229)
          {
LABEL_403:
            if (!atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
              std::__shared_weak_count::__release_weak(v229);
            }
          }
        }
        else
        {
          id v229 = (std::__shared_weak_count *)v227[3];
          if (v229) {
            goto LABEL_403;
          }
        }
        operator delete(v227);
        if (!v187) {
          goto LABEL_373;
        }
      }
    }
  }
LABEL_367:
  while (v184)
  {
    uint64_t v195 = operator new(0x30uLL);
    *uint64_t v195 = 0;
    v195[1] = 0;
    uint64_t v196 = v184[3];
    v195[2] = v184[2];
    v195[3] = v196;
    if (v196) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v196 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v197 = v184[5];
    v195[4] = v184[4];
    v195[5] = v197;
    if (v197) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v197 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v198 = v195[2];
    unint64_t v199 = HIDWORD(v198);
    unint64_t v200 = 0x9DDFEA08EB382D69 * (((8 * v198) + 8) ^ HIDWORD(v198));
    v195[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v199 ^ (v200 >> 47) ^ v200)) ^ ((0x9DDFEA08EB382D69
                                                                       * (v199 ^ (v200 >> 47) ^ v200)) >> 47));
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>>>::__node_insert_multi(a1 + 248, v195);
    double v184 = (void *)*v184;
  }
LABEL_373:
  if (a1 != v236)
  {
    uint64_t v201 = *(void *)(v236 + 296) - *(void *)(v236 + 288);
    unint64_t v202 = v201 >> 3;
    uint64_t v203 = *(char **)(a1 + 288);
    double v204 = *(char **)(a1 + 296);
    unint64_t v205 = (v204 - v203) >> 3;
    unint64_t v206 = (v201 >> 3) - v205;
    if (v201 >> 3 <= v205)
    {
      uint64_t v2 = v236;
      if (v201 >> 3 < v205)
      {
        uint64_t v225 = &v203[8 * v202];
        while (v204 != v225)
        {
          uint64_t v226 = (void *)*((void *)v204 - 1);
          v204 -= 8;
        }
        *(void *)(a1 + 296) = v225;
      }
      goto LABEL_410;
    }
    uint64_t v207 = *(void *)(a1 + 304);
    if (v206 <= (v207 - (uint64_t)v204) >> 3)
    {
      bzero(*(void **)(a1 + 296), 8 * v206);
      *(void *)(a1 + 296) = &v204[8 * v206];
      uint64_t v2 = v236;
      goto LABEL_410;
    }
    if ((v201 & 0x8000000000000000) == 0)
    {
      unint64_t v208 = v207 - (void)v203;
      unint64_t v209 = (v207 - (uint64_t)v203) >> 2;
      if (v209 > v202) {
        unint64_t v202 = v209;
      }
      if (v208 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v202 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v210 = 8 * v202;
      double v211 = (char *)operator new(8 * v202);
      double v212 = &v211[8 * v205];
      double v213 = &v211[v210];
      bzero(v212, 8 * v206);
      int v214 = &v212[8 * v206];
      if (v204 == v203)
      {
        *(void *)(a1 + 288) = v212;
        *(void *)(a1 + 296) = v214;
        *(void *)(a1 + 304) = v213;
        uint64_t v2 = v236;
        if (!v204) {
          goto LABEL_410;
        }
      }
      else
      {
        unint64_t v215 = v204 - v203 - 8;
        uint64_t v2 = v236;
        if (v215 <= 0x77
          || &v204[-(v215 & 0xFFFFFFFFFFFFFFF8) - 8] < v212
          && &v211[v204 - v203 - (v215 & 0xFFFFFFFFFFFFFFF8) - 8] < v204)
        {
          goto LABEL_418;
        }
        uint64_t v216 = (v215 >> 3) + 1;
        double v217 = &v211[8 * v205 - 16];
        unint64_t v218 = v204 - 32;
        uint64_t v219 = v216 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v221 = *(_OWORD *)v218;
          long long v220 = *((_OWORD *)v218 + 1);
          *(_OWORD *)unint64_t v218 = 0uLL;
          *((_OWORD *)v218 + 1) = 0uLL;
          v218 -= 32;
          *((_OWORD *)v217 - 1) = v221;
          *(_OWORD *)double v217 = v220;
          v217 -= 32;
          v219 -= 4;
        }
        while (v219);
        v212 -= 8 * (v216 & 0x3FFFFFFFFFFFFFFCLL);
        v204 -= 8 * (v216 & 0x3FFFFFFFFFFFFFFCLL);
        if (v216 != (v216 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_418:
          do
          {
            uint64_t v222 = *((void *)v204 - 1);
            v204 -= 8;
            *(void *)double v204 = 0;
            *((void *)v212 - 1) = v222;
            v212 -= 8;
          }
          while (v204 != v203);
        }
        double v204 = *(char **)(a1 + 288);
        double v223 = *(char **)(a1 + 296);
        *(void *)(a1 + 288) = v212;
        *(void *)(a1 + 296) = v214;
        *(void *)(a1 + 304) = v213;
        while (v223 != v204)
        {
          uint64_t v224 = (void *)*((void *)v223 - 1);
          v223 -= 8;
        }
        if (!v204) {
          goto LABEL_410;
        }
      }
      operator delete(v204);
LABEL_410:
      double v230 = *(void ***)(v2 + 288);
      uint64_t v231 = *(void ***)(v2 + 296);
      if (v230 != v231)
      {
        uint64_t v232 = *(id **)(a1 + 288);
        do
        {
          uint64_t v233 = *v230++;
          objc_storeStrong(v232++, v233);
        }
        while (v230 != v231);
      }
      goto LABEL_413;
    }
LABEL_414:
    abort();
  }
LABEL_413:
  long long v234 = *(_OWORD *)(v2 + 312);
  *(void *)(a1 + 328) = *(void *)(v2 + 328);
  *(_OWORD *)(a1 + 312) = v234;
  return a1;
}

void sub_1A1DE4AE4(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  id v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v6 = *(int8x8_t *)(a1 + 8);
    BOOL v7 = prime >= *(void *)&v6;
    if (prime > *(void *)&v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime < *(void *)&v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v11 = *(uint64_t **)(a2 + 16);
  if (v11)
  {
    double v12 = (void *)(a1 + 16);
    do
    {
      unint64_t v13 = *((unsigned int *)v11 + 4);
      unint64_t v14 = *(void *)(a1 + 8);
      if (v14)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v11 + 4);
          if (v14 <= v13) {
            unint64_t v2 = v13 % v14;
          }
        }
        else
        {
          unint64_t v2 = (v14 - 1) & v13;
        }
        uint64_t v16 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v16)
        {
          uint64_t v17 = *v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v19 = v17[1];
                if (v19 == v13)
                {
                  if (*((_DWORD *)v17 + 4) == v13) {
                    goto LABEL_80;
                  }
                }
                else if ((v19 & (v14 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                uint64_t v17 = (uint64_t *)*v17;
                if (!v17) {
                  goto LABEL_40;
                }
              }
            }
            do
            {
              unint64_t v18 = v17[1];
              if (v18 == v13)
              {
                if (*((_DWORD *)v17 + 4) == v13) {
                  goto LABEL_80;
                }
              }
              else
              {
                if (v18 >= v14) {
                  v18 %= v14;
                }
                if (v18 != v2) {
                  break;
                }
              }
              uint64_t v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_40:
      uint64_t v20 = operator new(0x28uLL);
      *uint64_t v20 = 0;
      v20[1] = v13;
      *((_DWORD *)v20 + 4) = *((_DWORD *)v11 + 4);
      v20[3] = v11[3];
      uint64_t v21 = v11[4];
      v20[4] = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v23 = *(float *)(a1 + 32);
      if (!v14 || (float)(v23 * (float)v14) < v22)
      {
        BOOL v24 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v24 = 1;
        }
        unint64_t v25 = v24 | (2 * v14);
        unint64_t v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26) {
          size_t v27 = v26;
        }
        else {
          size_t v27 = v25;
        }
        if (v27 == 1)
        {
          size_t v27 = 2;
        }
        else if ((v27 & (v27 - 1)) != 0)
        {
          size_t v27 = std::__next_prime(v27);
        }
        int8x8_t v28 = *(int8x8_t *)(a1 + 8);
        if (v27 > *(void *)&v28) {
          goto LABEL_54;
        }
        if (v27 < *(void *)&v28)
        {
          unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
          {
            unint64_t v29 = std::__next_prime(v29);
          }
          else
          {
            uint64_t v31 = 1 << -(char)__clz(v29 - 1);
            if (v29 >= 2) {
              unint64_t v29 = v31;
            }
          }
          if (v27 <= v29) {
            size_t v27 = v29;
          }
          if (v27 < *(void *)&v28) {
LABEL_54:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v27);
        }
        unint64_t v14 = *(void *)(a1 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v14 <= v13) {
            unint64_t v2 = v13 % v14;
          }
          else {
            unint64_t v2 = v13;
          }
        }
        else
        {
          unint64_t v2 = (v14 - 1) & v13;
        }
      }
      uint64_t v32 = *(void *)a1;
      uint64_t v33 = *(void **)(*(void *)a1 + 8 * v2);
      if (v33)
      {
        *uint64_t v20 = *v33;
      }
      else
      {
        *uint64_t v20 = *v12;
        *double v12 = v20;
        *(void *)(v32 + 8 * v2) = v12;
        if (!*v20) {
          goto LABEL_79;
        }
        unint64_t v34 = *(void *)(*v20 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v34 >= v14) {
            v34 %= v14;
          }
        }
        else
        {
          v34 &= v14 - 1;
        }
        uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
      }
      *uint64_t v33 = v20;
LABEL_79:
      ++*(void *)(a1 + 24);
LABEL_80:
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return a1;
}

void sub_1A1DE4F84(_Unwind_Exception *a1)
{
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 16);
  *(void *)(a2 + 8) = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      size_t prime = v10;
    }
    else {
      size_t prime = v9;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (prime > v5) {
      goto LABEL_105;
    }
    if (prime >= v5) {
      goto LABEL_40;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (prime <= v25) {
      size_t prime = v25;
    }
    if (prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      double v12 = operator new(8 * prime);
      unint64_t v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      uint64_t v16 = a1 + 16;
      uint8x8_t v15 = *(uint64_t ***)(a1 + 16);
      if (v15)
      {
        size_t v17 = (size_t)v15[1];
        size_t v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime) {
            v17 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v17) = v16;
          for (uint64_t i = *v15; *v15; uint64_t i = *v15)
          {
            size_t v37 = i[1];
            if (v37 >= prime) {
              v37 %= prime;
            }
            if (v37 == v17)
            {
              uint8x8_t v15 = (uint64_t **)i;
            }
            else
            {
              int64_t v38 = i;
              if (*(void *)(*(void *)a1 + 8 * v37))
              {
                do
                {
                  unint64_t v39 = v38;
                  int64_t v38 = (uint64_t *)*v38;
                }
                while (v38 && *((_DWORD *)i + 4) == *((_DWORD *)v38 + 4));
                *uint8x8_t v15 = v38;
                uint64_t v40 = 8 * v37;
                *unint64_t v39 = **(void **)(*(void *)a1 + v40);
                **(void **)(*(void *)a1 + v40) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v37) = v15;
                uint8x8_t v15 = (uint64_t **)i;
                size_t v17 = v37;
              }
            }
          }
        }
        else
        {
          size_t v19 = v17 & v18;
          *(void *)(*(void *)a1 + 8 * v19) = v16;
          for (uint64_t j = *v15; *v15; uint64_t j = *v15)
          {
            size_t v21 = j[1] & v18;
            if (v21 == v19)
            {
              uint8x8_t v15 = (uint64_t **)j;
            }
            else
            {
              float v22 = j;
              if (*(void *)(*(void *)a1 + 8 * v21))
              {
                do
                {
                  float v23 = v22;
                  float v22 = (uint64_t *)*v22;
                }
                while (v22 && *((_DWORD *)j + 4) == *((_DWORD *)v22 + 4));
                *uint8x8_t v15 = v22;
                uint64_t v24 = 8 * v21;
                void *v23 = **(void **)(*(void *)a1 + v24);
                **(void **)(*(void *)a1 + v24) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v21) = v15;
                uint8x8_t v15 = (uint64_t **)j;
                size_t v19 = v21;
              }
            }
          }
        }
      }
      unint64_t v5 = prime;
    }
    else
    {
      uint64_t v50 = *(void **)a1;
      *(void *)a1 = 0;
      if (v50) {
        operator delete(v50);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    unint64_t v41 = v4;
    if (v5 <= v4) {
      unint64_t v41 = v4 % v5;
    }
    BOOL v42 = *(uint64_t **)(*(void *)a1 + 8 * v41);
    if (!v42)
    {
      uint64_t v35 = 0;
      unint64_t v48 = *(void *)(a2 + 8);
      if (v48 < v5) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    int v43 = 0;
    do
    {
      uint64_t v35 = v42;
      BOOL v42 = (uint64_t *)*v42;
      if (!v42) {
        break;
      }
      unint64_t v46 = v42[1];
      unint64_t v47 = v46;
      if (v46 >= v5) {
        unint64_t v47 = v46 % v5;
      }
      if (v47 != v41) {
        break;
      }
      BOOL v44 = v46 == v4 && *((_DWORD *)v42 + 4) == *(_DWORD *)(a2 + 16);
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    uint64_t v30 = (v5 - 1) & v4;
    uint64_t v31 = *(uint64_t **)(*(void *)a1 + 8 * v30);
    if (!v31)
    {
      uint64_t v35 = 0;
      unint64_t v48 = *(void *)(a2 + 8);
      goto LABEL_75;
    }
    int v32 = 0;
    do
    {
      uint64_t v35 = v31;
      uint64_t v31 = (uint64_t *)*v31;
      if (!v31) {
        break;
      }
      uint64_t v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30) {
        break;
      }
      BOOL v33 = v36 == v4 && *((_DWORD *)v31 + 4) == *(_DWORD *)(a2 + 16);
      char v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  unint64_t v48 = *(void *)(a2 + 8);
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5) {
LABEL_77:
  }
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *(void *)a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v48) = a1 + 16;
    if (!*(void *)a2) {
      goto LABEL_92;
    }
    unint64_t v49 = *(void *)(*(void *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5) {
        v49 %= v5;
      }
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(void *)(*(void *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *(void *)a2 = *v35;
  *uint64_t v35 = a2;
  if (*(void *)a2)
  {
    unint64_t v49 = *(void *)(*(void *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5) {
        v49 %= v5;
      }
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48) {
      goto LABEL_91;
    }
  }
LABEL_92:
  ++*(void *)(a1 + 24);
}

uint64_t std::unordered_map<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::ARWalkingContinueLabelFeature> const,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,0>(v2 + 2);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void **geo::linear_map<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>,md::VKARWalkingFeatureEqualTo,std::allocator<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>,std::vector<std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>>>::~linear_map(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }

        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingContinueLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARWalkingContinueLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARWalkingContinueLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingManeuverLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARWalkingManeuverLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARWalkingManeuverLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingStorefrontLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARWalkingStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARWalkingStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingArrivalLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARWalkingArrivalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5822E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARWalkingArrivalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5822E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::ARWalkingSupport::setShouldUse3DArrival(md::ARWalkingSupport *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 10) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    unint64_t v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Should use 3d arrival:%d", (uint8_t *)v5, 8u);
    }
    *((unsigned char *)this + 10) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void md::ARWalkingSupport::setPerpendicularLayoutEnabled(md::ARWalkingSupport *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 11) != a2)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    unint64_t v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Should use perpendicular layout:%d", (uint8_t *)v5, 8u);
    }
    *((unsigned char *)this + 11) = a2;
    md::ARWalkingSupport::setARWalkingFeatures(this, *((VKARWalkingFeatureSet **)this + 56), 1);
  }
}

void sub_1A1DE6464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A1DE664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double VKCameraDistanceForDisplayZoomLevel(float a1, VKCamera *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = v3;
  if (v3)
  {
    [(VKCamera *)v3 verticalFieldOfView];
    double v5 = v18 * 0.5;
  }
  else
  {
    double v5 = 0.0;
  }
  [(VKCamera *)v4 maxPitch];
  double v7 = v6;
  [(VKCamera *)v4 depthForViewWidth:(double)exp2(-a1)];
  double v9 = v8;
  [(VKCamera *)v4 maxPitch];
  double v11 = v10;
  *(float *)&double v10 = v5;
  double v12 = cosf(*(float *)&v10);
  float v13 = v7;
  double v14 = cosf(v13);
  float v15 = v11 - v5;
  double v16 = v9 * cosf(v15) / (v14 * v12);

  return v16;
}

void sub_1A1DE6778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*a1);
    std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(a1[1]);

    operator delete(a1);
  }
}

void sub_1A1DE6AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKPolylineGroupOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559A38;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKPolylineGroupOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559A38;

  return a1;
}

void sub_1A1DE6DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v10 = v9;

  a9.super_class = (Class)RouteRenderLayerObserverProxy;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

md::SharedDeviceResources **std::unique_ptr<md::SharedDeviceResources>::~unique_ptr[abi:nn180100](md::SharedDeviceResources **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<ggl::Device *,std::shared_ptr<ggl::Device>::__shared_ptr_default_delete<ggl::Device,ggl::Device>,std::allocator<ggl::Device>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Device *,std::shared_ptr<ggl::Device>::__shared_ptr_default_delete<ggl::Device,ggl::Device>,std::allocator<ggl::Device>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<ggl::VSLibraryBundleMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VSLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VSLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverLibraryBundleMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardLibraryBundleMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::StandardLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::StandardLibraryBundleMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonLibraryMTLData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::CommonLibraryMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::CommonLibraryMTLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalSurface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::MetalSurface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::MetalSurface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalSwapchain>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void std::__shared_ptr_emplace<ggl::MetalSwapchain>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchain>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double md::FlyoverTileDataRequester::resolveTile@<D0>(md::FlyoverTileDataRequester *this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 15);
  if (*(unsigned char *)(v5 + 704))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 624));
    int level = a2->_level;
    *(unsigned char *)a3 = a2->_type;
    *(unsigned char *)(a3 + 1) = level;
    int32x2_t v7 = *(int32x2_t *)&a2->_yIdx;
    *(int32x2_t *)(a3 + 4) = v7;
    if (level)
    {
      do
      {
        double v8 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(v5 + 640), (unsigned __int8 *)a3);
        if (!v8) {
          break;
        }
        double v9 = *(uint64_t **)(v5 + 688);
        double v10 = (uint64_t *)v8[5];
        if (v9 != v10)
        {
          double v11 = (uint64_t *)v10[1];
          if (v11 != v9)
          {
            uint64_t v12 = *v10;
            *(void *)(v12 + 8) = v11;
            *(void *)v10[1] = v12;
            uint64_t v13 = *v9;
            *(void *)(v13 + 8) = v10;
            *double v10 = v13;
            *double v9 = (uint64_t)v10;
            v10[1] = (uint64_t)v9;
            double v9 = *(uint64_t **)(v5 + 688);
          }
        }
        if (v9 == (uint64_t *)(v5 + 680)) {
          break;
        }
        *(unsigned char *)(a3 + 1) = --level;
        int32x2_t v7 = vshr_n_s32(v7, 1uLL);
        *(int32x2_t *)(a3 + 4) = v7;
      }
      while ((_BYTE)level);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 624));
  }
  else
  {
    *(_WORD *)a3 = *(_WORD *)&a2->_type;
    double result = *(double *)&a2->_yIdx;
    *(double *)(a3 + 4) = result;
  }
  return result;
}

void md::FlyoverTileDataRequester::requestDataKeys(md::FlyoverTileDataRequester *this, const gdc::SelectionContext *a2, int a3)
{
  uint64_t v5 = this;
  int v6 = *((unsigned __int16 *)this + 12);
  BOOL v7 = v6 == 50 || v6 == 20;
  double v8 = (char *)this + 8;
  if (v7) {
    double v8 = (char *)this + 112;
  }
  if (*(void *)v8)
  {
    double v9 = (gdc::LayerDataCollector *)*((void *)a2 + 1);
    uint64_t v111 = *(void *)v8;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v8 + 24))(&v129);
    if ((_BYTE)v129)
    {
      double v10 = (unsigned int *)*((void *)a2 + 8);
      double v11 = (unsigned int *)((char *)v5 + 32);
      if (!*((unsigned char *)v5 + 28)) {
        double v11 = (unsigned int *)&v129 + 1;
      }
      if (*((unsigned char *)v5 + 36)) {
        uint64_t v12 = (unsigned int *)((char *)v5 + 40);
      }
      else {
        uint64_t v12 = (unsigned int *)&v130;
      }
      if ((a3 & 1) != 0 || *((unsigned char *)a2 + 82) == 1)
      {
        uint64_t v13 = 0x100000001;
        double v14 = (uint64_t *)*((void *)v10 + 3);
        if (!v14) {
          return;
        }
        goto LABEL_19;
      }
      uint64_t v13 = *((unsigned int *)v5 + 4) | 0x100000000;
      double v14 = (uint64_t *)*((void *)v10 + 3);
      if (v14)
      {
LABEL_19:
        unint64_t v109 = *v10;
        unsigned int v110 = *v11;
        int v105 = (unint64_t *)((char *)v5 + 88);
        unsigned int v106 = *v12;
        uint64_t v119 = (float *)((char *)v5 + 48);
        uint64_t v114 = v5;
        while (1)
        {
          uint64_t v115 = (uint64_t **)v14;
          unsigned __int8 v16 = *((unsigned char *)v14 + 16);
          float v15 = (const QuadTile *)(v14 + 2);
          int level = v15->_level;
          int v18 = (v15->_yIdx % (1 << level) + (1 << level)) % (1 << level);
          int v19 = v15->_xIdx % (1 << level) + (1 << level);
          v126[0] = v16;
          v126[1] = level;
          int v127 = v18;
          int v128 = v19 % (1 << level);
          md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)&v131, *((const QuadTile **)a2 + 17), v126, 0, 1);
          if ((_BYTE)v135)
          {
            unsigned int v20 = BYTE1(v131);
            unsigned __int8 v21 = v131;
            int32x2_t v22 = *(int32x2_t *)((char *)&v131 + 4);
            uint64_t v23 = v111;
            if (BYTE4(__p) == 2)
            {
              (*(void (**)(long long *__return_ptr))(*(void *)v111 + 24))(&v131);
              if (!(_BYTE)v131) {
                goto LABEL_34;
              }
              unsigned int v24 = DWORD1(v131);
              if (DWORD1(v131) <= v20) {
                unsigned int v24 = v20;
              }
              if (DWORD2(v131) < v24) {
                unsigned int v24 = DWORD2(v131);
              }
              if (v24 < v20)
              {
                uint64_t v23 = v111;
                if (v20)
                {
                  unsigned int v25 = (v20 - v24);
                  if (v20 < v25) {
                    unsigned int v25 = v20;
                  }
                  LOBYTE(v20) = v20 - v25;
                  int32x2_t v22 = vshl_s32(v22, vneg_s32(vdup_n_s32(v25)));
                }
              }
              else
              {
LABEL_34:
                uint64_t v23 = v111;
              }
              int v26 = level - v110;
              uint64_t v27 = 4;
            }
            else
            {
              int v26 = level - v110;
              uint64_t v27 = *((unsigned __int16 *)v5 + 12);
            }
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v23 + 32))(&v125);
            if ((_BYTE)v125)
            {
              int v28 = 0;
              unsigned int v29 = HIDWORD(v125);
              if (v109 && HIDWORD(v125))
              {
                if (HIDWORD(v125) >= v109)
                {
                  int v28 = 0;
                  unint64_t v30 = HIDWORD(v125);
                }
                else
                {
                  int v28 = 0;
                  unint64_t v30 = HIDWORD(v125);
                  do
                  {
                    ++v28;
                    v30 *= 2;
                  }
                  while (v30 < v109);
                }
                for (unint64_t i = v109; v30 > i; i *= 2)
                  --v28;
              }
              if ((_BYTE)v20)
              {
                int v32 = -v28 & ~(-v28 >> 31);
                if (v32 >= v26) {
                  LOBYTE(v32) = v26;
                }
                unsigned int v33 = v20;
                if (v20 >= v32) {
                  unsigned int v33 = v32;
                }
                unsigned __int8 v34 = v20 - v33;
                int32x2_t v22 = vshl_s32(v22, vneg_s32(vdup_n_s32(v33)));
              }
              else
              {
                unsigned __int8 v34 = 0;
              }
              v123[0] = v21;
              v123[1] = v34;
              int32x2_t v124 = v22;
              if (v110 <= v34 && v106 >= v34) {
                break;
              }
            }
          }
LABEL_20:
          double v14 = *v115;
          if (!*v115) {
            return;
          }
        }
        *((void *)v5 + 12) = *((void *)v5 + 11);
        unint64_t v107 = v107 & 0xFFFFFFFFFF000000 | *((unsigned __int16 *)v5 + 22) | ((unint64_t)*((unsigned __int8 *)v5
                                                                                                 + 46) << 16);
        md::TileAdjustmentHelpers::adjustTileForSizeAndResourceType(v109, v29, v27, v111, v123, v107, v105);
        uint64_t v36 = (const QuadTile *)*((void *)v5 + 11);
        uint64_t v35 = (const QuadTile *)*((void *)v5 + 12);
        for (j = v35; ; uint64_t v35 = j)
        {
          if (v36 == v35) {
            goto LABEL_20;
          }
          (*(void (**)(QuadTile *__return_ptr, md::FlyoverTileDataRequester *, const QuadTile *))(*(void *)v5 + 80))(&v122, v5, v36);
          uint64_t v116 = v36;
          if (!*(unsigned char *)(*((void *)v5 + 15) + 704)) {
            goto LABEL_152;
          }
          uint64_t v37 = v122._level;
          unsigned int v38 = v36->_level;
          unsigned int v39 = *((unsigned __int8 *)v115 + 17);
          if (v122._level >= v38 && v122._level >= v39) {
            goto LABEL_152;
          }
          unint64_t v41 = v38 <= v39 ? v15 : v36;
          *(_WORD *)float v155 = *(_WORD *)&v41->_type;
          uint64_t v156 = *(void *)&v41->_yIdx;
          BOOL v42 = (void *)*((void *)a2 + 20);
          if (!v42) {
            goto LABEL_152;
          }
          double v43 = COERCE_DOUBLE(std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(*((void **)a2 + 20), &v122._type));
          if (v43 != 0.0) {
            goto LABEL_151;
          }
          *(double *)&uint64_t v147 = 0.0;
          double v148 = 0.0;
          LODWORD(v149) = 1065353216;
          BOOL v44 = v42;
          uint64_t type = v122._type;
          LOBYTE(v131) = v122._type;
          BYTE1(v131) = v37;
          *(void *)((char *)&v131 + 4) = *(void *)&v122._yIdx;
          double v146 = 0.0;
          double v145 = 0.0;
          long long __p = 0uLL;
          uint64_t v134 = 0;
          uint64_t v135 = 0;
          int v136 = 1065353216;
          unint64_t v46 = (v37
               - 0x61C8864680B583EBLL
               + ((type - 0x61C8864680B583EBLL) << 6)
               + ((unint64_t)(type - 0x61C8864680B583EBLL) >> 2)) ^ (type - 0x61C8864680B583EBLL);
          uint64_t v117 = *(void *)&v122._yIdx;
          unint64_t v47 = (v122._yIdx - 0x61C8864680B583EBLL + (v46 << 6) + (v46 >> 2)) ^ v46;
          unint64_t v120 = (v122._xIdx - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
          unint64_t v48 = v44;
          unint64_t v49 = v44[1];
          if (v49)
          {
            uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
            v50.i16[0] = vaddlv_u8(v50);
            if (v50.u32[0] > 1uLL)
            {
              begiuint64_t n = (v122._xIdx - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
              if (v120 >= v49) {
                begiuint64_t n = v120 % v49;
              }
            }
            else
            {
              begiuint64_t n = v120 & (v49 - 1);
            }
            unint64_t v51 = *(void ***)(*v44 + 8 * begin);
            if (v51)
            {
              double v43 = *(double *)v51;
              if (*v51)
              {
                if (v50.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v53 = *(void *)(*(void *)&v43 + 8);
                    if (v53 == v120)
                    {
                      if (__PAIR64__(*(unsigned __int8 *)(*(void *)&v43 + 17), *(unsigned __int8 *)(*(void *)&v43 + 16)) == __PAIR64__(v37, v122._type)&& *(void *)(*(void *)&v43 + 20) == *(void *)&v122._yIdx)
                      {
                        goto LABEL_90;
                      }
                    }
                    else if ((v53 & (v49 - 1)) != begin)
                    {
                      goto LABEL_91;
                    }
                    double v43 = **(double **)&v43;
                    if (v43 == 0.0) {
                      goto LABEL_91;
                    }
                  }
                }
                do
                {
                  unint64_t v52 = *(void *)(*(void *)&v43 + 8);
                  if (v52 == v120)
                  {
                    if (__PAIR64__(*(unsigned __int8 *)(*(void *)&v43 + 17), *(unsigned __int8 *)(*(void *)&v43 + 16)) == __PAIR64__(v37, v122._type)&& *(void *)(*(void *)&v43 + 20) == *(void *)&v122._yIdx)
                    {
LABEL_90:
                      uint64_t v5 = v114;
                      goto LABEL_151;
                    }
                  }
                  else
                  {
                    if (v52 >= v49) {
                      v52 %= v49;
                    }
                    if (v52 != begin) {
                      break;
                    }
                  }
                  double v43 = **(double **)&v43;
                }
                while (v43 != 0.0);
              }
            }
          }
LABEL_91:
          double v43 = COERCE_DOUBLE(operator new(0x50uLL));
          double v138 = v43;
          uint64_t v108 = v48 + 2;
          *(void *)&double v139 = v48 + 2;
          **(void **)&double v43 = 0;
          *(void *)(*(void *)&v43 + 8) = v120;
          *(unsigned char *)(*(void *)&v43 + 16) = type;
          unint64_t v54 = v48;
          *(unsigned char *)(*(void *)&v43 + 17) = v37;
          *(void *)(*(void *)&v43 + 20) = v117;
          long long __p = 0uLL;
          *(void *)(*(void *)&v43 + 40) = 0;
          *(void *)(*(void *)&v43 + 48) = 0;
          *(void *)(*(void *)&v43 + 56) = 0;
          *(void *)(*(void *)&v43 + 64) = 0;
          *(_DWORD *)(*(void *)&v43 + 72) = 1065353216;
          LOBYTE(v140) = 1;
          float v55 = (float)(unint64_t)(v48[3] + 1);
          float v56 = *((float *)v48 + 8);
          if (!v49 || (float)(v56 * (float)v49) < v55) {
            break;
          }
LABEL_140:
          uint64_t v77 = *v48;
          int v78 = *(void **)(*v48 + 8 * begin);
          if (v78)
          {
            **(void **)&double v43 = *v78;
            uint64_t v5 = v114;
LABEL_148:
            *(double *)int v78 = v43;
            goto LABEL_149;
          }
          **(void **)&double v43 = *v108;
          *(double *)uint64_t v108 = v43;
          *(void *)(v77 + 8 * begin) = v108;
          uint64_t v5 = v114;
          if (**(void **)&v43)
          {
            unint64_t v79 = *(void *)(**(void **)&v43 + 8);
            if ((v49 & (v49 - 1)) != 0)
            {
              if (v79 >= v49) {
                v79 %= v49;
              }
            }
            else
            {
              v79 &= v49 - 1;
            }
            int v78 = (void *)(*v54 + 8 * v79);
            goto LABEL_148;
          }
LABEL_149:
          ++v54[3];
          if ((void)__p) {
            operator delete((void *)__p);
          }
LABEL_151:
          std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(*(void *)&v43 + 40, v155, (uint64_t)v155);
LABEL_152:
          if (*((void *)v5 + 9))
          {
            unint64_t v80 = (void *)*((void *)v5 + 8);
            if (v80)
            {
              do
              {
                uint64_t v81 = (void *)*v80;
                operator delete(v80);
                unint64_t v80 = v81;
              }
              while (v81);
            }
            *((void *)v5 + 8) = 0;
            uint64_t v82 = *((void *)v5 + 7);
            if (v82)
            {
              for (uint64_t k = 0; k != v82; ++k)
                *(void *)(*(void *)v119 + 8 * k) = 0;
            }
            *((void *)v5 + 9) = 0;
          }
          unsigned int v84 = HIDWORD(v125);
          if (a3) {
            unsigned int v84 = 0;
          }
          unsigned int v118 = v84;
          memset(&v163, 0, sizeof(v163));
          md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)&v131, *((const QuadTile **)a2 + 17), &v122._type, 0, 0);
          if ((_BYTE)v135) {
            uint64_t v85 = *((void *)&__p + 1);
          }
          else {
            uint64_t v85 = 0;
          }
          uint64_t v121 = v85;
          md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)&v131, *((const QuadTile **)a2 + 17), &v122._type, 0, 0);
          if ((_BYTE)v135)
          {
            if (v131 == v122._type && BYTE1(v131) == v122._level && DWORD1(v131) == v122._yIdx)
            {
              if (DWORD2(v131) == v122._xIdx) {
                char v86 = v134;
              }
              else {
                char v86 = 0;
              }
            }
            else
            {
              char v86 = 0;
            }
          }
          else
          {
            char v86 = 2;
          }
          RegionAreas = md::FlyoverRegionManager::getRegionAreas(***((md::FlyoverRegionManager ****)a2 + 17), &v122);
          uint64_t v88 = RegionAreas[1];
          if (*RegionAreas == v88)
          {
            begiuint64_t n = (unint64_t)v163.__begin_;
            std::vector<unsigned int>::pointer end = v163.__end_;
            if (v163.__begin_ == v163.__end_) {
              goto LABEL_183;
            }
          }
          else
          {
            uint64_t v89 = *RegionAreas + 24;
            do
            {
              *(void *)&long long v131 = v122._level | ((unint64_t)(~(-1 << v122._level) - v122._yIdx) << 32);
              *((void *)&v131 + 1) = v122._xIdx;
              geo::c3mm::C3mmArea::getHeightIndices(*(void *)(v89 - 24), (unsigned int *)&v131, &v163);
              begiuint64_t n = (unint64_t)v163.__begin_;
              std::vector<unsigned int>::pointer end = v163.__end_;
              BOOL v91 = v163.__begin_ != v163.__end_ || v89 == v88;
              v89 += 24;
            }
            while (!v91);
            if (v163.__begin_ == v163.__end_)
            {
LABEL_183:
              LOWORD(v131) = *(_WORD *)&v122._type;
              *(void *)((char *)&v131 + 4) = *(void *)&v122._yIdx;
              LOBYTE(__p) = v86;
              *(void *)((char *)&__p + 4) = v121;
              HIDWORD(__p) = 0;
              if (v86) {
                std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(v119, (unsigned __int8 *)&v131, (uint64_t)&v131);
              }
              goto LABEL_185;
            }
          }
          do
          {
            uint64_t v93 = *(unsigned int *)begin;
            md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)&v131, *((const QuadTile **)a2 + 17), &v122._type, v93, 0);
            if ((_BYTE)v135)
            {
              if (v131 == v122._type && BYTE1(v131) == v122._level && DWORD1(v131) == v122._yIdx) {
                char v94 = DWORD2(v131) == v122._xIdx ? v134 : 0;
              }
              else {
                char v94 = 0;
              }
              char v95 = md::FlyoverRegionManager::getRegionAreas(***((md::FlyoverRegionManager ****)a2 + 17), &v122);
              uint64_t v96 = *v95;
              uint64_t v97 = v95[1];
              if (*v95 != v97)
              {
                *(void *)&double v145 = v122._level | ((unint64_t)(~(-1 << v122._level) - v122._yIdx) << 32);
                *(void *)&double v146 = v122._xIdx | (unint64_t)(v93 << 32);
                long long v131 = 0uLL;
                LODWORD(v132) = 1;
                WORD2(v132) = 0;
                uint64_t v98 = v96 + 24;
                while (geo::c3mm::C3mmArea::getEntry(*(_WORD **)(v98 - 24), &v145, (uint64_t)&v131) == -1)
                {
                  BOOL v99 = *((float *)&v131 + 1) > *(float *)&v131 || v98 == v97;
                  v98 += 24;
                  if (v99)
                  {
                    v160[0] = 1;
                    double v161 = *(float *)&v131;
                    double v162 = *((float *)&v131 + 1);
                    uint64_t v100 = (const double *)((char *)a2 + 168);
                    if (*((unsigned char *)a2 + 82) != 1) {
                      uint64_t v100 = (const double *)*((void *)a2 + 18);
                    }
                    if (*(unsigned __int8 *)v100 - 1 > 2)
                    {
                      LOWORD(v131) = *(_WORD *)&v122._type;
                      *(void *)((char *)&v131 + 4) = *(void *)&v122._yIdx;
                      LOBYTE(__p) = v94;
                      *(void *)((char *)&__p + 4) = v121;
                      HIDWORD(__p) = v93;
                      if (v94) {
                        std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(v119, (unsigned __int8 *)&v131, (uint64_t)&v131);
                      }
                    }
                    else
                    {
                      *(_WORD *)float v155 = *(_WORD *)&v122._type;
                      uint64_t v156 = *(void *)&v122._yIdx;
                      char v157 = v94;
                      uint64_t v158 = v121;
                      int v159 = v93;
                      md::FlyoverSelectionContext::getTileBound((uint64_t)&v145, *((void *)a2 + 19), v155, (uint64_t)v160);
                      if (!v154) {
                        goto LABEL_221;
                      }
                      double v101 = -(*(double *)&v147 * *(double *)&v149 - v146 * v150)
                           - (*(double *)&v147 * *(double *)&v149
                            - v146 * v150);
                      double v102 = -(v145 * v150 - *(double *)&v147 * v148) - (v145 * v150 - *(double *)&v147 * v148);
                      double v103 = -(v146 * v148 - v145 * *(double *)&v149) - (v146 * v148 - v145 * *(double *)&v149);
                      double v138 = -(v145 + v101 * v151 + v102 * v150 - v103 * *(double *)&v149);
                      double v139 = -(v103 * v148 - (-(v146 - v101 * v150) - v102 * v151));
                      double v140 = -(*(double *)&v147 + v101 * *(double *)&v149 + v103 * v151 - v102 * v148);
                      double v141 = -v148;
                      double v142 = -*(double *)&v149;
                      double v143 = -v150;
                      double v144 = v151;
                      geo::Frustum<double>::transformed((double *)&v131, v100 + 123, (uint64_t)&v138);
                      if (geo::Intersect::encloses<double>((double *)&v131, &v152)) {
LABEL_221:
                      }
                        md::FlyoverSelectionContext::selectBestFitOctiles((uint64_t)a2, (uint64_t)v155, v119, v118);
                    }
                    break;
                  }
                }
              }
            }
            begin += 4;
          }
          while ((std::vector<unsigned int>::pointer)begin != end);
LABEL_185:
          if (v163.__begin_)
          {
            v163.__end_ = v163.__begin_;
            operator delete(v163.__begin_);
          }
          uint64_t v5 = v114;
          for (unint64_t m = (unsigned __int8 *)*((void *)v114 + 8); m; unint64_t m = *(unsigned __int8 **)m)
          {
            md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v131, m + 16, 0, v13);
            gdc::LayerDataCollector::addDataKey(v9, (const gdc::LayerDataRequestKey *)&v131, v15);
            if (*((unsigned char *)v114 + 20))
            {
              md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v145, m + 16, 1u, v13);
              gdc::LayerDataCollector::addDataKey(v9, (const gdc::LayerDataRequestKey *)&v145, v15);
              if (v153) {
                char v153 = 0;
              }
              if (v147 != v149) {
                free(v147);
              }
            }
            if (v137) {
              char v137 = 0;
            }
            if (v132 != *((void **)&__p + 1)) {
              free(v132);
            }
          }
          uint64_t v36 = v116 + 1;
        }
        BOOL v57 = (v49 & (v49 - 1)) != 0;
        if (v49 < 3) {
          BOOL v57 = 1;
        }
        unint64_t v58 = v57 | (2 * v49);
        unint64_t v59 = vcvtps_u32_f32(v55 / v56);
        if (v58 <= v59) {
          size_t prime = v59;
        }
        else {
          size_t prime = v58;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v49 = v48[1];
        if (prime <= v49)
        {
          if (prime >= v49)
          {
LABEL_127:
            begiuint64_t n = v120;
LABEL_128:
            if ((v49 & (v49 - 1)) != 0)
            {
              if (begin >= v49) {
                begin %= v49;
              }
            }
            else
            {
              begin &= v49 - 1;
            }
            goto LABEL_140;
          }
          unint64_t v71 = vcvtps_u32_f32((float)(unint64_t)v48[3] / *((float *)v48 + 8));
          if (v49 < 3 || (uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
          {
            unint64_t v71 = std::__next_prime(v71);
          }
          else
          {
            uint64_t v73 = 1 << -(char)__clz(v71 - 1);
            if (v71 >= 2) {
              unint64_t v71 = v73;
            }
          }
          if (prime <= v71) {
            size_t prime = v71;
          }
          if (prime >= v49)
          {
            unint64_t v49 = v48[1];
            goto LABEL_127;
          }
          if (!prime)
          {
            uint64_t v104 = (void *)*v48;
            *unint64_t v48 = 0;
            begiuint64_t n = v120;
            if (v104) {
              operator delete(v104);
            }
            unint64_t v49 = 0;
            v48[1] = 0;
            goto LABEL_128;
          }
        }
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        id v61 = operator new(8 * prime);
        uint64_t v62 = (void *)*v48;
        *unint64_t v48 = v61;
        if (v62) {
          operator delete(v62);
        }
        uint64_t v63 = 0;
        v48[1] = prime;
        do
          *(void *)(*v48 + 8 * v63++) = 0;
        while (prime != v63);
        id v64 = (void *)*v108;
        if (!*v108)
        {
LABEL_126:
          unint64_t v49 = prime;
          goto LABEL_127;
        }
        size_t v65 = v64[1];
        size_t v66 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v67 = v65 & v66;
          *(void *)(*v48 + 8 * v67) = v108;
          while (1)
          {
            double v68 = (void *)*v64;
            if (!*v64) {
              break;
            }
            size_t v69 = v68[1] & v66;
            if (v69 == v67)
            {
              id v64 = (void *)*v64;
            }
            else if (*(void *)(*v48 + 8 * v69))
            {
              *id v64 = *v68;
              uint64_t v70 = 8 * v69;
              *double v68 = **(void **)(*v48 + v70);
              **(void **)(*v48 + v70) = v68;
            }
            else
            {
              *(void *)(*v48 + 8 * v69) = v64;
              id v64 = v68;
              size_t v67 = v69;
            }
          }
          goto LABEL_126;
        }
        if (v65 >= prime) {
          v65 %= prime;
        }
        *(void *)(*v48 + 8 * v65) = v108;
        uint64_t v74 = (void *)*v64;
        if (!*v64) {
          goto LABEL_126;
        }
        while (1)
        {
          size_t v76 = v74[1];
          if (v76 >= prime) {
            v76 %= prime;
          }
          if (v76 != v65)
          {
            if (!*(void *)(*v48 + 8 * v76))
            {
              *(void *)(*v48 + 8 * v76) = v64;
              goto LABEL_132;
            }
            *id v64 = *v74;
            uint64_t v75 = 8 * v76;
            *uint64_t v74 = **(void **)(*v48 + v75);
            **(void **)(*v48 + v75) = v74;
            uint64_t v74 = v64;
          }
          size_t v76 = v65;
LABEL_132:
          id v64 = v74;
          uint64_t v74 = (void *)*v74;
          size_t v65 = v76;
          if (!v74) {
            goto LABEL_126;
          }
        }
      }
    }
  }
}

void sub_1A1DE82DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_1A1DE8308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  float v56 = *(void **)(v54 - 128);
  if (!v56) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v54 - 120) = v56;
  operator delete(v56);
  _Unwind_Resume(exception_object);
}

void md::FlyoverTileDataRequester::~FlyoverTileDataRequester(md::FlyoverTileDataRequester *this)
{
  *(void *)this = &unk_1EF545080;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  int v6 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    operator delete(v6);
  }
  *(void *)this = &unk_1EF54C560;
  if (*((unsigned char *)this + 36)) {
    *((unsigned char *)this + 36) = 0;
  }
  if (*((unsigned char *)this + 28)) {
    *((unsigned char *)this + 28) = 0;
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(void *)this = &unk_1EF545080;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  int v6 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    operator delete(v6);
  }
  *(void *)this = &unk_1EF54C560;
  if (*((unsigned char *)this + 36)) {
    *((unsigned char *)this + 36) = 0;
  }
  if (*((unsigned char *)this + 28)) {
    *((unsigned char *)this + 28) = 0;
  }
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::CommonMesh::Pos2Mesh::~Pos2Mesh(ggl::CommonMesh::Pos2Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2Mesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2Mesh *)((char *)this - 16));
}

void ggl::CommonMesh::Pos2Mesh::~Pos2Mesh(ggl::CommonMesh::Pos2Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

ggl::CommonMesh::Pos2Mesh *ggl::CommonMesh::Pos2Mesh::Pos2Mesh(ggl::CommonMesh::Pos2Mesh *this, const char *a2)
{
  {
    {
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
    }
    ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
    unk_1EB32B400 = 1;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)this = &unk_1EF5606B0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1EF5606D0;
  *((void *)this + 3) = 0;
  *((void *)this + 7) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
  *((void *)this + 8) = 0;
  unint64_t v4 = (char *)this + 64;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  {
    operator new();
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = v5;
  {
    operator new();
  }
  *((void *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *(void *)this = &unk_1EF561BE0;
  *((void *)this + 2) = &unk_1EF561C00;
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = *(void *)(*((void *)this + 7) + 8);
  uint64_t v8 = *((void *)this + 9);
  unint64_t v9 = (v8 - v6) >> 4;
  unint64_t v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      for (uint64_t i = v6 + 16 * v7; v8 != i; v8 -= 16)
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *((void *)this + 9) = i;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v10);
  }
  *(void *)this = &unk_1EF55A290;
  *((void *)this + 2) = &unk_1EF55A2B0;
  if (a2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = "/VertexData";
  }
  {
    operator new();
  }
  uint64_t v14 = ggl::Allocator::instance(void)::alloc;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(void *)uint64_t v15 = &unk_1EF584348;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = &unk_1EF55A1F0;
  *(void *)(v15 + 40) = 8;
  *(_DWORD *)(v15 + 48) = 6;
  long long v16 = 0uLL;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(void *)(v15 + 120) = 0;
  {
    long long v16 = 0uLL;
    if (v20) {
      operator new();
    }
  }
  *(void *)(v15 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v15 + 136) = 0;
  *(_OWORD *)(v15 + 200) = v16;
  *(_OWORD *)(v15 + 184) = v16;
  *(_OWORD *)(v15 + 168) = v16;
  *(void *)(v15 + 216) = 0;
  *(void *)(v15 + 224) = -1;
  *(_OWORD *)(v15 + 152) = xmmword_1A28FCCA0;
  *(_DWORD *)(v15 + 144) = 0;
  *(void *)(v15 + 240) = v13;
  *(void *)(v15 + 248) = &ggl::CommonMesh::bufferPos2Reflection;
  *(void *)(v15 + 32) = &unk_1EF55BF88;
  *(void *)(v15 + 232) = &unk_1EF55BFA8;
  size_t v17 = *(void **)v4;
  int v18 = *(std::__shared_weak_count **)(*(void *)v4 + 8);
  *size_t v17 = v15 + 32;
  v17[1] = v15;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return this;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5843B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5843B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::CommonMesh::Pos4Mesh::~Pos4Mesh(ggl::CommonMesh::Pos4Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4Mesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4Mesh *)((char *)this - 16));
}

void ggl::CommonMesh::Pos4Mesh::~Pos4Mesh(ggl::CommonMesh::Pos4Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::CommonMesh::Pos4Mesh::Pos4Mesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v15 = a3;
    uint64_t v22 = a2;
    a2 = v22;
    a3 = v15;
    if (v16)
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
      unk_1EB32B428 = 1;
      a3 = v15;
      a2 = v22;
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    int v20 = a3;
    a3 = v20;
    uint64_t v6 = a1 + 64;
    if (v17) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 120) = 0;
  uint64_t v8 = a1 + 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v7;
  {
    unsigned __int8 v21 = a3;
    uint64_t v23 = v6;
    uint64_t v8 = a1 + 120;
    a3 = v21;
    int v19 = v18;
    uint64_t v6 = v23;
    if (v19) {
      operator new();
    }
  }
  *(void *)(a1 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = v8;
  *(void *)a1 = &unk_1EF561C20;
  *(void *)(a1 + 16) = &unk_1EF561C40;
  uint64_t v9 = a3[1];
  uint64_t v24 = *a3;
  unsigned int v25 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v6, &v24, &v26, 1uLL);
  unint64_t v10 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_1EF55A2D0;
  *(void *)(a1 + 16) = &unk_1EF55A2F0;
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::CommonMesh::Pos2UVMesh::~Pos2UVMesh(ggl::CommonMesh::Pos2UVMesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2UVMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos2UVMesh *)((char *)this - 16));
}

void ggl::CommonMesh::Pos2UVMesh::~Pos2UVMesh(ggl::CommonMesh::Pos2UVMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::CommonMesh::Pos4UVMesh::~Pos4UVMesh(ggl::CommonMesh::Pos4UVMesh *this)
{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4UVMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::CommonMesh::Pos4UVMesh *)((char *)this - 16));
}

void ggl::CommonMesh::Pos4UVMesh::~Pos4UVMesh(ggl::CommonMesh::Pos4UVMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v15 = a3;
    uint64_t v22 = a2;
    a2 = v22;
    a3 = v15;
    if (v16)
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      unk_1E958CB20 = 1;
      a3 = v15;
      a2 = v22;
    }
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF5606B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF5606D0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    int v20 = a3;
    a3 = v20;
    uint64_t v6 = a1 + 64;
    if (v17) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 120) = 0;
  uint64_t v8 = a1 + 120;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v7;
  {
    unsigned __int8 v21 = a3;
    uint64_t v23 = v6;
    uint64_t v8 = a1 + 120;
    a3 = v21;
    int v19 = v18;
    uint64_t v6 = v23;
    if (v19) {
      operator new();
    }
  }
  *(void *)(a1 + 128) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = v8;
  *(void *)a1 = &unk_1EF561CE0;
  *(void *)(a1 + 16) = &unk_1EF561D00;
  uint64_t v9 = a3[1];
  uint64_t v24 = *a3;
  unsigned int v25 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v6, &v24, &v26, 1uLL);
  unint64_t v10 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_1EF55A250;
  *(void *)(a1 + 16) = &unk_1EF55A270;
  return a1;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, void *a4)
{
  uint64_t v6 = a1;
  char v153 = *a3;
  char v7 = *(int8x8_t **)(a1 + 120);
  uint64_t v8 = (md::VKMRenderResourcesStore *)*((void *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v165 = 0;
  char v9 = *(uint64_t **)v8;
  if (*(void *)v8 != *((void *)v8 + 1) && *v9 != 0x22D45F5AAD4BF408)
  {
    unint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    char v9 = v10 - 5;
  }
  uint64_t v12 = (void (***)(void))v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  int v159 = v8;
  (**v12)(v12);
  uint64_t v156 = a2;
  uint64_t v158 = v7;
  double v148 = a4;
  uint64_t v14 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(v7);
  uint64_t v15 = v14[7];
  uint64_t v161 = v14[8];
  uint64_t v155 = v6;
  if (v15 != v161)
  {
    uint64_t v16 = v6 + 168;
    uint64_t v17 = v14[10];
    double v162 = (char **)(v6 + 232);
    uint64_t v160 = v6 + 168;
    while (1)
    {
      uint64_t v23 = *(uint64_t **)(v6 + 144);
      uint64_t v24 = *(uint64_t **)(v6 + 152);
      *(void *)&v168[0] = v17;
      *((void *)&v168[0] + 1) = v16;
LABEL_17:
      while (v23 != v24)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v23))
        {
          while (1)
          {
            v24 -= 2;
            if (v24 == v23) {
              goto LABEL_23;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v24))
            {
              uint64_t v25 = *v23;
              uint64_t *v23 = *v24;
              *uint64_t v24 = v25;
              uint64_t v26 = v23[1];
              v23[1] = v24[1];
              v24[1] = v26;
              v23 += 2;
              goto LABEL_17;
            }
          }
        }
        v23 += 2;
      }
LABEL_23:
      int v28 = *(char **)(v6 + 144);
      uint64_t v27 = *(char **)(v6 + 152);
      *(void *)&v168[0] = v17;
      *((void *)&v168[0] + 1) = v16;
LABEL_24:
      while (v28 != v27)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v28))
        {
          while (1)
          {
            v27 -= 16;
            if (v27 == v28) {
              break;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v27))
            {
              uint64_t v29 = *(void *)v28;
              *(void *)int v28 = *(void *)v27;
              *(void *)uint64_t v27 = v29;
              uint64_t v30 = *((void *)v28 + 1);
              *((void *)v28 + 1) = *((void *)v27 + 1);
              *((void *)v27 + 1) = v30;
              v28 += 16;
              goto LABEL_24;
            }
          }
          uint64_t v27 = v28;
          break;
        }
        v28 += 16;
      }
      uint64_t v31 = *(long long **)(v6 + 152);
      int64_t v32 = (char *)v31 - v27;
      uint64_t v33 = ((char *)v31 - v27) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v162, *(void *)(v6 + 240), (unint64_t)v27, v31, v33);
      if (v27 != (char *)v31) {
        break;
      }
LABEL_38:
      BOOL v42 = *(char **)(v6 + 232);
      int v18 = *(char **)(v6 + 240);
      if (v18 != v42)
      {
        while (1)
        {
          double v43 = (char *)__p[1];
          if (__p[1] >= (void *)v165) {
            break;
          }
          *(void *)__p[1] = *((void *)v42 + 1);
          BOOL v44 = v43 + 8;
LABEL_65:
          __p[1] = v44;
          id v61 = *(void (****)(void))v42;
          if (*(void *)v42)
          {
            uint64_t v62 = *(void *)(v6 + 136);
            if (*(void *)(v62 + 16))
            {
              (**v61)(*(void *)v42);
              *id v61 = *(void (***)(void))(v62 + 40);
              *(void *)(v62 + 40) = v61;
            }
          }
          v42 += 16;
          if (v42 == v18)
          {
            int v18 = *v162;
            goto LABEL_12;
          }
        }
        int v45 = (char *)__p[0];
        int64_t v46 = (char *)__p[1] - (char *)__p[0];
        int64_t v47 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61) {
          abort();
        }
        uint64_t v49 = v165 - (unint64_t)__p[0];
        if ((uint64_t)(v165 - (unint64_t)__p[0]) >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v51 = operator new(8 * v50);
        }
        else
        {
          unint64_t v51 = 0;
        }
        unint64_t v52 = &v51[8 * v47];
        void *v52 = *((void *)v42 + 1);
        BOOL v44 = v52 + 1;
        if (v43 == v45)
        {
          int v45 = v43;
          uint64_t v6 = v155;
        }
        else
        {
          unint64_t v53 = v43 - 8 - v45;
          if (v53 >= 0x58)
          {
            unint64_t v54 = v43 - &v51[v46];
            uint64_t v6 = v155;
            if (v54 < 0x20) {
              goto LABEL_61;
            }
            uint64_t v55 = (v53 >> 3) + 1;
            float v56 = &v51[8 * v47 - 16];
            BOOL v57 = v43 - 16;
            uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *float v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 4;
            }
            while (v58);
            v52 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
            v43 -= 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
            if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_61;
            }
          }
          else
          {
            uint64_t v6 = v155;
            do
            {
LABEL_61:
              uint64_t v60 = *((void *)v43 - 1);
              v43 -= 8;
              *--unint64_t v52 = v60;
            }
            while (v43 != v45);
            int v45 = (char *)__p[0];
          }
        }
        __p[0] = v52;
        __p[1] = v44;
        *(void *)&long long v165 = &v51[8 * v50];
        if (v45) {
          operator delete(v45);
        }
        goto LABEL_65;
      }
LABEL_12:
      unint64_t v19 = *(void *)(v6 + 144);
      int v20 = *(uint64_t **)(v6 + 152);
      unint64_t v21 = 126 - 2 * __clz((uint64_t)((uint64_t)v20 - v19) >> 4);
      *(void *)(v6 + 240) = v18;
      if (v20 == (uint64_t *)v19) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v21;
      }
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v19, v20, v22, 1);
      v17 += 24;
      v15 += 8;
      uint64_t v16 = v160;
      if (v15 == v161) {
        goto LABEL_109;
      }
    }
    uint64_t v35 = *(void *)(v6 + 144);
    unsigned __int8 v34 = *(double **)(v6 + 152);
    unint64_t v36 = (unint64_t)&v27[-v35];
    uint64_t v37 = (double *)(v35 + ((unint64_t)&v27[-v35] & 0xFFFFFFFFFFFFFFF0));
    unsigned int v38 = &v37[2 * v33];
    if (v38 == v34)
    {
LABEL_37:
      *(void *)(v6 + 152) = v37;
      goto LABEL_38;
    }
    unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v40 = (unint64_t)v34 + -(v36 & 0xFFFFFFFFFFFFFFF0) - v35 - v32 - 16;
    if (v40 >= 0x270)
    {
      unint64_t v63 = v39 + (v40 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v64 = v35 + (v63 | 8);
      unint64_t v65 = v35 + (v39 | 8);
      unint64_t v66 = v63 + v35 + 16;
      uint64_t v67 = v32 + v39 + v35;
      uint64_t v68 = v67 + (v40 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v69 = v68 + 8;
      unint64_t v70 = v67 + 8;
      unint64_t v71 = v68 + 16;
      BOOL v73 = (unint64_t)v37 < v68 + 8 && (unint64_t)v38 < v64;
      BOOL v75 = (unint64_t)v37 < v71 && v70 < v64;
      BOOL v77 = v65 < v69 && (unint64_t)v38 < v66;
      BOOL v79 = v65 < v71 && v70 < v66;
      if (v65 >= v64 || (unint64_t)v37 >= v66)
      {
        if (v73)
        {
          unint64_t v41 = v37;
        }
        else if (v75)
        {
          unint64_t v41 = v37;
        }
        else if (v77)
        {
          unint64_t v41 = v37;
        }
        else if (v79)
        {
          unint64_t v41 = v37;
        }
        else
        {
          uint64_t v81 = (v40 >> 4) + 1;
          uint64_t v82 = 2 * (v81 & 0x1FFFFFFFFFFFFFFCLL);
          unint64_t v41 = &v37[v82];
          uint64_t v83 = v81 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            unsigned int v84 = &v37[2 * v33];
            float64x2x2_t v170 = vld2q_f64(v84);
            v84 += 4;
            float64x2x2_t v172 = vld2q_f64(v84);
            uint64_t v85 = v37 + 8;
            vst2q_f64(v37, v170);
            char v86 = v37 + 4;
            vst2q_f64(v86, v172);
            uint64_t v37 = v85;
            v83 -= 4;
          }
          while (v83);
          if (v81 == (v81 & 0x1FFFFFFFFFFFFFFCLL)) {
            goto LABEL_36;
          }
          unsigned int v38 = (double *)((char *)v38 + v82 * 8);
        }
      }
      else
      {
        unint64_t v41 = v37;
      }
    }
    else
    {
      unint64_t v41 = (double *)(v35 + ((unint64_t)&v27[-v35] & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *unint64_t v41 = *v38;
      v41[1] = v38[1];
      v41 += 2;
      v38 += 2;
    }
    while (v38 != v34);
LABEL_36:
    uint64_t v37 = v41;
    goto LABEL_37;
  }
LABEL_109:
  uint64_t v87 = *(void **)v159;
  uint64_t v88 = (void *)*((void *)v159 + 1);
  if (*(void **)v159 == v88)
  {
    uint64_t v89 = v158;
  }
  else
  {
    uint64_t v89 = v158;
    while (*v87 != 0x41D4E9297E100630)
    {
      v87 += 5;
      if (v87 == v88) {
        goto LABEL_119;
      }
    }
  }
  if (v87 != v88)
  {
    uint64_t v90 = (std::__shared_weak_count *)v87[4];
    if (v90)
    {
      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
LABEL_119:
  BOOL v91 = *(void **)v159;
  uint64_t v92 = (void *)*((void *)v159 + 1);
  if (*(void **)v159 != v92)
  {
    while (*v91 != 0x4EDAD23DFB014132)
    {
      v91 += 5;
      if (v91 == v92) {
        goto LABEL_127;
      }
    }
  }
  if (v91 != v92)
  {
    uint64_t v93 = (std::__shared_weak_count *)v91[4];
    if (v93)
    {
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }
LABEL_127:
  char v94 = *(void **)v159;
  char v95 = (void *)*((void *)v159 + 1);
  if (*(void **)v159 != v95)
  {
    while (*v94 != 0x348A0B0E758C07C2)
    {
      v94 += 5;
      if (v94 == v95) {
        goto LABEL_135;
      }
    }
  }
  if (v94 != v95)
  {
    uint64_t v96 = (std::__shared_weak_count *)v94[4];
    if (v96)
    {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
LABEL_135:
  uint64_t v97 = __p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v98 = 0;
    BOOL v99 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v159, v89, v97[v98++]);
      uint64_t v97 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v98);
    while (v99 != __p[1])
    {
      unint64_t v100 = *v99++;
      gdc::Registry::destroy((uint64_t)v89, v100);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v89);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v89);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v154 = *(unsigned __int8 *)(md::LayoutContext::frameState(v156) + 128);
  uint64_t v150 = *((void *)v156 + 2);
  std::vector<unsigned int> v163 = *(gdc::Registry **)(v6 + 120);
  double v101 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>((int8x8_t *)v163);
  uint64_t v102 = v101[7];
  uint64_t v149 = v101[8];
  if (v102 != v149)
  {
    double v103 = (void *)v101[10];
    char v157 = (md::LayoutContext *)(v6 + 168);
    while (1)
    {
      uint64_t v104 = *(void **)(v6 + 208);
      *(void *)(v6 + 216) = v104;
      double v152 = v103;
      unint64_t v105 = v103[2];
      if (v105 > (uint64_t)(*(void *)(v6 + 224) - (void)v104) >> 4)
      {
        if (v105 >> 60) {
          abort();
        }
        uint64_t v106 = 16 * v105;
        unint64_t v107 = (char *)operator new(16 * v105);
        *(void *)(v6 + 208) = v107;
        *(void *)(v6 + 216) = v107;
        *(void *)(v6 + 224) = &v107[v106];
        if (v104) {
          operator delete(v104);
        }
      }
      uint64_t v108 = *(void **)v150;
      unint64_t v109 = *(void **)(v150 + 8);
      uint64_t v151 = v102;
      if (*(void **)v150 != v109)
      {
        while (*v108 != 0x41D4E9297E100630)
        {
          v108 += 5;
          if (v108 == v109) {
            goto LABEL_158;
          }
        }
      }
      if (v108 != v109)
      {
        unsigned int v110 = (std::__shared_weak_count *)v108[4];
        if (v110)
        {
          atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
      }
LABEL_158:
      uint64_t v111 = (void *)*v152;
      if ((void *)*v152 != v152 + 1) {
        break;
      }
      double v103 = v152 + 3;
      uint64_t v102 = v151 + 8;
      if (v151 + 8 == v149) {
        goto LABEL_193;
      }
    }
    uint64_t v112 = v111[4];
    unint64_t v113 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v157, (unsigned __int8 *)(v112 + 16));
    if (!v113)
    {
LABEL_188:
      uint64_t v132 = v111[5];
      v169[0] = v112;
      v169[1] = v132;
      if (v132) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
      }
      LOWORD(v168[0]) = *(_WORD *)(v112 + 168);
      *(void *)((char *)v168 + 4) = *(void *)(v112 + 172);
      md::GeometryContext::transformConstantData((double *)&v167, v153, (unsigned __int8 *)v168, v154, *(double *)(v112 + 600), *(double *)(v112 + 608));
      uint64_t v133 = *(void *)(v6 + 136);
      char v134 = *((unsigned char *)v111 + 48);
      uint64_t v135 = *(void **)(v133 + 40);
      if (!v135)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(*(uint64_t ***)(v6 + 136));
        uint64_t v135 = *(void **)(v133 + 40);
      }
      *(void *)(v133 + 40) = *v135;
      md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v135, v169, v134, (v154 - 1) < 3u, &v167);
      gdc::Registry::create(v163);
    }
    uint64_t v114 = v113;
    uint64_t v116 = *(void **)(v6 + 144);
    uint64_t v115 = *(void **)(v6 + 152);
    if (v116 == v115)
    {
      uint64_t v117 = *(void *)(v6 + 144);
    }
    else
    {
      uint64_t v117 = *(void *)(v6 + 144);
      do
      {
        if (*(uint64_t **)v117 == v113[16]
          && *(unsigned __int16 *)(v117 + 8) == *((unsigned __int16 *)v113 + 68)
          && *(unsigned __int16 *)(v117 + 10) == *((unsigned __int16 *)v113 + 69)
          && *(_DWORD *)(v117 + 12) == *((_DWORD *)v113 + 35))
        {
          goto LABEL_170;
        }
        v117 += 16;
      }
      while ((void *)v117 != v115);
      uint64_t v117 = *(void *)(v6 + 152);
    }
LABEL_170:
    unsigned int v118 = (void *)(v117 + 16);
    if ((void *)(v117 + 16) != v115)
    {
      unint64_t v119 = (unint64_t)v115 - v117 - 32;
      if (v119 >= 0x30)
      {
        uint64_t v120 = (v117 - (uint64_t)v116) >> 4;
        uint64_t v121 = (v119 >> 4) + 1;
        uint64_t v122 = 16 * (v121 & 0x1FFFFFFFFFFFFFFCLL);
        v117 += v122;
        unsigned int v123 = (double *)&v116[2 * v120 + 4];
        uint64_t v124 = v121 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v125 = v123 - 2;
          float64x2x2_t v171 = vld2q_f64(v125);
          uint64_t v126 = v123 + 2;
          float64x2x2_t v173 = vld2q_f64(v126);
          int v127 = v123 - 4;
          vst2q_f64(v127, v171);
          vst2q_f64(v123, v173);
          v123 += 8;
          v124 -= 4;
        }
        while (v124);
        if (v121 == (v121 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_177;
        }
        unsigned int v118 = (void *)((char *)v118 + v122);
      }
      do
      {
        *(void *)uint64_t v117 = *v118;
        *(void *)(v117 + 8) = v118[1];
        v117 += 16;
        v118 += 2;
      }
      while (v118 != v115);
    }
LABEL_177:
    *(void *)(v6 + 152) = v117;
    int v128 = v113[16];
    if (v128)
    {
      uint64_t v129 = *(void *)(v6 + 136);
      if (*(void *)(v129 + 16))
      {
        (*(void (**)(uint64_t *))*v128)(v113[16]);
        *int v128 = *(void *)(v129 + 40);
        *(void *)(v129 + 40) = v128;
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v157, v114);
    int v130 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v165)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        long long v131 = (void *)v130[4];
        if (v131 != (void *)v130[6]) {
          free(v131);
        }
      }
      operator delete(v130);
    }
    uint64_t v112 = v111[4];
    goto LABEL_188;
  }
LABEL_193:
  double v166 = *(int8x8_t **)(v6 + 120);
  uint64_t v136 = gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(v166);
  if (*(void *)(v136 + 56) != *(void *)(v136 + 64))
  {
    double v139 = *(void **)(v6 + 144);
    char v137 = *(void **)(v6 + 152);
    __p[0] = *(void **)(v136 + 80);
    __p[1] = (void *)(v6 + 168);
    if (v139 == v137)
    {
LABEL_195:
      char v137 = v139;
    }
    else
    {
      do
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v139))
        {
          do
          {
            v137 -= 2;
            if (v137 == v139) {
              goto LABEL_195;
            }
          }
          while (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v137));
          uint64_t v140 = *v139;
          *double v139 = *v137;
          *char v137 = v140;
          uint64_t v141 = v139[1];
          v139[1] = v137[1];
          v137[1] = v141;
        }
        v139 += 2;
      }
      while (v139 != v137);
    }
    double v138 = *(void **)(v6 + 152);
    __p[0] = v137;
    __p[1] = v138;
    v168[0] = *(_OWORD *)(v6 + 208);
    gdc::Registry::create((gdc::Registry *)v166);
  }
  uint64_t result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(*(int8x8_t **)(v6 + 120));
  if (*(void *)(result + 88) != *(void *)(result + 80))
  {
    double v143 = **(uint64_t ***)(v6 + 128);
    if (v143 != *(uint64_t **)(*(void *)(v6 + 128) + 8) && *v143 != 0x22D45F5AAD4BF408)
    {
      double v144 = v143 + 5;
      do
      {
        uint64_t v145 = *v144;
        v144 += 5;
      }
      while (v145 != 0x22D45F5AAD4BF408);
      double v143 = v144 - 5;
    }
    double v146 = (uint64_t (***)(void))v143[3];
    uint64_t v147 = (std::__shared_weak_count *)v143[4];
    if (v147)
    {
      atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    uint64_t result = (**v146)(v146);
    **(unsigned char **)(result + 736) = 1;
  }
  *double v148 = *(void *)(v6 + 120);
  return result;
}

void sub_1A1DECC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC6D75D77A851F6C9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC6D75D77A851F6C9;
    if (*(void *)&v1 <= 0xC6D75D77A851F6C9) {
      unint64_t v3 = 0xC6D75D77A851F6C9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC6D75D77A851F6C9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC6D75D77A851F6C9)
      {
        if (v5[2] == 0xC6D75D77A851F6C9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC6D75D77A851F6C9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC6D75D77A851F6C9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DED184(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(int8x8_t *a1)
{
  uint64_t v10 = 0x10C1AF6504FA13A0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x10C1AF6504FA13A0;
    if (*(void *)&v1 <= 0x10C1AF6504FA13A0uLL) {
      uint64_t v3 = 0x10C1AF6504FA13A0uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x10C1AF6504FA13A0;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x10C1AF6504FA13A0)
      {
        if (v5[2] == 0x10C1AF6504FA13A0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x10C1AF6504FA13A0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x10C1AF6504FA13A0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DED3F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)a2 + 384);
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)a2 + 392);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    int v4 = *(unsigned __int8 *)(*(void *)a2 + 48);
    uint64_t v5 = *a1;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(uint64_t ***)(v5 + 8);
    if (v6) {
      goto LABEL_8;
    }
LABEL_5:
    BOOL v7 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)a1[1], (unsigned __int8 *)(v2 + 16)) != 0;
    if (v3) {
      goto LABEL_17;
    }
    return v7;
  }
  int v4 = *(unsigned __int8 *)(*(void *)a2 + 48);
  uint64_t v6 = *(uint64_t ***)(*a1 + 8);
  if (!v6) {
    goto LABEL_5;
  }
  while (1)
  {
LABEL_8:
    int v8 = *((unsigned __int8 *)v6 + 48);
    BOOL v9 = *((char *)v6 + 48) > (char)v4;
    unint64_t v10 = (unint64_t)v6[4];
    if (v4 == v8) {
      BOOL v9 = v2 < v10;
    }
    if (v9) {
      goto LABEL_7;
    }
    BOOL v11 = v10 < v2;
    int v12 = v4 == v8 ? v11 : (char)v8 < (char)v4;
    if (v12 != 1) {
      break;
    }
    ++v6;
LABEL_7:
    uint64_t v6 = (uint64_t **)*v6;
    if (!v6) {
      goto LABEL_5;
    }
  }
  BOOL v7 = 1;
  if (v3)
  {
LABEL_17:
    p_uint64_t shared_owners = &v3->__shared_owners_;
    if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        return v7;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        return v7;
      }
    }
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7;
}

uint64_t gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(int8x8_t *a1)
{
  uint64_t v10 = 0x2B8F0D3A6E65567BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2B8F0D3A6E65567BLL;
    if (*(void *)&v1 <= 0x2B8F0D3A6E65567BuLL) {
      uint64_t v3 = 0x2B8F0D3A6E65567BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2B8F0D3A6E65567BLL;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2B8F0D3A6E65567BLL)
      {
        if (v5[2] == 0x2B8F0D3A6E65567BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2B8F0D3A6E65567BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2B8F0D3A6E65567BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DED968(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::emplace(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v23 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v23);
  if (v6)
  {
    int v12 = (_OWORD *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (_OWORD *)a1[10];
      uint64_t v15 = v12 - v14;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        goto LABEL_30;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(16 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      int v20 = &v19[16 * v15];
      *(_OWORD *)int v20 = *a3;
      uint64_t v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *(v12 - 1);
          v20 -= 16;
          --v12;
        }
        while (v12 != v14);
        int v12 = (_OWORD *)a1[10];
      }
      a1[10] = v20;
      a1[11] = v13;
      a1[12] = &v19[16 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *int v12 = *a3;
      uint64_t v13 = v12 + 1;
    }
    a1[11] = v13;
    uint64_t v8 = a1[31];
  }
  else
  {
    unint64_t v7 = (_OWORD *)(a1[10] + 2 * ((void)v5 - a1[7]));
    *unint64_t v7 = *a3;
    uint64_t v8 = a1[31];
    if (v7 != (_OWORD *)a1[11])
    {
      BOOL v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v25 = &v23;
          uint64_t v26 = 1;
          uint64_t v24 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v24, &v25);
          BOOL v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v21 = (void *)a1[22];
  if (v21)
  {
    while (1)
    {
      uint64_t v25 = &v23;
      uint64_t v26 = 1;
      uint64_t v24 = v8;
      uint64_t v22 = v21[6];
      if (!v22) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v24, &v25);
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        return;
      }
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4E187DDCBE232848;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4E187DDCBE232848;
    if (*(void *)&v1 <= 0x4E187DDCBE232848uLL) {
      uint64_t v3 = 0x4E187DDCBE232848uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4E187DDCBE232848;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4E187DDCBE232848)
      {
        if (v5[2] == 0x4E187DDCBE232848) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4E187DDCBE232848) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4E187DDCBE232848) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DEDDD0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v22 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (*(_DWORD *)(v11 + 4) == v10 && v11 != v8)
        {
          uint64_t v13 = (uint64_t **)(a1[10] + 24 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          if (v13 != (uint64_t **)(v14 - 24))
          {
            std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v13, *(void **)(v14 - 24), (void *)(v14 - 16));
            uint64_t v14 = a1[11];
          }
          uint64_t v15 = v14 - 24;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v14 - 16));
          a1[11] = v15;
          uint64_t v16 = (void *)a1[28];
          if (v16)
          {
            uint64_t v17 = a1[31];
            while (1)
            {
              v24[0] = &v22;
              v24[1] = 1;
              uint64_t v23 = v17;
              uint64_t v18 = v16[6];
              if (!v18) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v23, v24);
              uint64_t v16 = (void *)*v16;
              if (!v16) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v19, v20, v21);
          }
        }
      }
    }
  }
}

void std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (a1[2])
  {
    uint64_t v6 = (uint64_t **)*a1;
    uint64_t v8 = a1 + 1;
    unint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    uint64_t v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      unint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *unint64_t v10 = 0;
          while (1)
          {
            double v43 = (void *)v10[1];
            if (!v43) {
              break;
            }
            do
            {
              unint64_t v10 = v43;
              double v43 = (void *)*v43;
            }
            while (v43);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              unint64_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        int v12 = v9;
        uint64_t v13 = a2;
        do
        {
          uint64_t v9 = v10;
          uint64_t v15 = v13[4];
          uint64_t v14 = v13[5];
          if (v14) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = (std::__shared_weak_count *)v12[5];
          v12[4] = v15;
          v12[5] = v14;
          if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          int v17 = *((char *)v13 + 48);
          *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
          uint64_t v18 = *v8;
          uint64_t v19 = a1 + 1;
          int v20 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v19 = v18;
                int v21 = *((char *)v18 + 48);
                if (!(v17 == v21 ? v12[4] < (unint64_t)v18[4] : v17 < v21)) {
                  break;
                }
                uint64_t v18 = (uint64_t *)*v18;
                int v20 = (uint64_t **)v19;
                if (!*v19) {
                  goto LABEL_28;
                }
              }
              uint64_t v18 = (uint64_t *)v18[1];
            }
            while (v18);
            int v20 = (uint64_t **)(v19 + 1);
          }
LABEL_28:
          *int v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v19;
          *int v20 = v12;
          uint64_t v23 = (uint64_t *)**a1;
          if (v23)
          {
            *a1 = v23;
            int v12 = *v20;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            unint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v26 = (void *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *unint64_t v10 = 0;
                while (1)
                {
                  uint64_t v27 = (void *)v10[1];
                  if (!v27) {
                    break;
                  }
                  do
                  {
                    unint64_t v10 = v27;
                    uint64_t v27 = (void *)*v27;
                  }
                  while (v27);
                }
              }
              else
              {
                for (v10[1] = 0; v26; uint64_t v26 = (void *)v10[1])
                {
                  do
                  {
                    unint64_t v10 = v26;
                    uint64_t v26 = (void *)*v26;
                  }
                  while (v26);
                }
              }
            }
          }
          else
          {
            unint64_t v10 = 0;
          }
          uint64_t v24 = (void *)v13[1];
          if (v24)
          {
            do
            {
              uint64_t v4 = v24;
              uint64_t v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v13[2];
              BOOL v25 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v25);
          }
          if (!v9) {
            break;
          }
          int v12 = v9;
          uint64_t v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<gdc::LayerDataWithWorld>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
          unint64_t v10 = i;
        std::__tree<gdc::LayerDataWithWorld>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    uint64_t v29 = (uint64_t ***)(a1 + 1);
    do
    {
      uint64_t v30 = (uint64_t *)operator new(0x38uLL);
      uint64_t v31 = v30;
      unint64_t v32 = v4[4];
      uint64_t v33 = v4[5];
      v30[4] = v32;
      v30[5] = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      int v34 = *((char *)v4 + 48);
      *((unsigned char *)v30 + 48) = *((unsigned char *)v4 + 48);
      uint64_t v35 = *v29;
      unint64_t v36 = a1 + 1;
      uint64_t v37 = a1 + 1;
      if (*v29)
      {
        do
        {
          while (1)
          {
            unint64_t v36 = v35;
            int v38 = *((char *)v35 + 48);
            if (!(v34 == v38 ? v32 < (unint64_t)v35[4] : v34 < v38)) {
              break;
            }
            uint64_t v35 = (uint64_t **)*v35;
            uint64_t v37 = v36;
            if (!*v36) {
              goto LABEL_69;
            }
          }
          uint64_t v35 = (uint64_t **)v35[1];
        }
        while (v35);
        uint64_t v37 = v36 + 1;
      }
LABEL_69:
      *uint64_t v30 = 0;
      v30[1] = 0;
      v30[2] = (uint64_t)v36;
      *uint64_t v37 = v30;
      unint64_t v40 = (uint64_t *)**a1;
      if (v40)
      {
        *a1 = v40;
        uint64_t v31 = *v37;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v31);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      unint64_t v41 = (void *)v4[1];
      if (v41)
      {
        do
        {
          BOOL v42 = v41;
          unint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          BOOL v42 = (void *)v4[2];
          BOOL v25 = *v42 == (void)v4;
          uint64_t v4 = v42;
        }
        while (!v25);
      }
      uint64_t v4 = v42;
    }
    while (v42 != a3);
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v3 - 16));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[4];
  if (v7)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = (void *)a1[4];
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::emplace(void *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if (v6)
  {
    int v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (char *)a1[10];
      uint64_t v15 = v12 - v14;
      if (v12 - v14 <= -3) {
        goto LABEL_35;
      }
      uint64_t v16 = v15 >> 1;
      unint64_t v17 = v11 - (void)v14;
      if (v17 <= (v15 >> 1) + 1) {
        unint64_t v18 = v16 + 1;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v19)
      {
        if (v19 < 0) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int v20 = operator new(2 * v19);
      }
      else
      {
        int v20 = 0;
      }
      int v21 = &v20[2 * v16];
      _WORD *v21 = *a3;
      uint64_t v13 = v21 + 1;
      if (v12 != v14)
      {
        unint64_t v22 = v12 - v14 - 2;
        if (v22 < 0x1E) {
          goto LABEL_39;
        }
        if (v12 - v20 - (v15 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
          goto LABEL_39;
        }
        uint64_t v23 = (v22 >> 1) + 1;
        uint64_t v24 = &v20[2 * v16 - 16];
        BOOL v25 = v12 - 16;
        unint64_t v26 = v23 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *uint64_t v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 16;
        }
        while (v26);
        v21 -= v23 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v23 & 0xFFFFFFFFFFFFFFF0);
        if (v23 != (v23 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_39:
          do
          {
            __int16 v28 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--int v21 = v28;
          }
          while (v12 != v14);
        }
      }
      a1[10] = v21;
      a1[11] = v13;
      a1[12] = &v20[2 * v19];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_WORD *)int v12 = *a3;
      uint64_t v13 = v12 + 2;
    }
    a1[11] = v13;
    uint64_t v8 = a1[31];
  }
  else
  {
    unint64_t v7 = (_WORD *)(a1[10] + (((uint64_t)v5 - a1[7]) >> 2));
    *unint64_t v7 = *a3;
    uint64_t v8 = a1[31];
    if (v7 != (_WORD *)a1[11])
    {
      uint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v33 = &v31;
          uint64_t v34 = 1;
          uint64_t v32 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v32, &v33);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_34:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      return;
    }
  }
  uint64_t v29 = (void *)a1[22];
  if (v29)
  {
    while (1)
    {
      uint64_t v33 = &v31;
      uint64_t v34 = 1;
      uint64_t v32 = v8;
      uint64_t v30 = v29[6];
      if (!v30) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v30 + 48))(v30, &v32, &v33);
      uint64_t v29 = (void *)*v29;
      if (!v29) {
        return;
      }
    }
    goto LABEL_34;
  }
}

void gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v46);
  if (v6)
  {
    unint64_t v16 = a1[12];
    unint64_t v17 = (char *)a1[11];
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v24 = (char *)a1[10];
      uint64_t v25 = (v17 - v24) >> 5;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59) {
        goto LABEL_44;
      }
      uint64_t v27 = v16 - (void)v24;
      if (v27 >> 4 > v26) {
        unint64_t v26 = v27 >> 4;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      unint64_t v51 = a1 + 12;
      if (v28)
      {
        if (v28 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v29 = (uint64_t *)operator new(32 * v28);
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = (char *)&v29[4 * v25];
      unint64_t v48 = v29;
      uint64_t v49 = (uint64_t)v30;
      uint64_t v31 = (char *)&v29[4 * v28];
      *(void *)&long long v50 = v30;
      *((void *)&v50 + 1) = v31;
      *(_DWORD *)uint64_t v30 = *(_DWORD *)a3;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = 0;
      uint64_t v32 = (char **)(v30 + 16);
      *((void *)v30 + 3) = 0;
      uint64_t v34 = *(unsigned char **)(a3 + 8);
      uint64_t v33 = *(unsigned char **)(a3 + 16);
      int64_t v35 = v33 - v34;
      if (v33 != v34)
      {
        if (v35 < 0) {
          abort();
        }
        unint64_t v36 = (char *)operator new(v33 - v34);
        *((void *)v30 + 1) = v36;
        *uint64_t v32 = v36;
        uint64_t v37 = &v36[8 * (v35 >> 3)];
        *((void *)v30 + 3) = v37;
        memcpy(v36, v34, v35);
        *uint64_t v32 = v37;
      }
      uint64_t v23 = v30 + 32;
      *(void *)&long long v50 = v30 + 32;
      if (v17 == v24)
      {
        a1[10] = v30;
        a1[11] = v23;
        a1[12] = v31;
      }
      else
      {
        uint64_t v38 = 0;
        do
        {
          unint64_t v39 = &v30[v38];
          unint64_t v40 = &v17[v38];
          *((_DWORD *)v39 - 8) = *(_DWORD *)&v17[v38 - 32];
          *((void *)v39 - 2) = 0;
          *((void *)v39 - 1) = 0;
          *(_OWORD *)(v39 - 24) = *(_OWORD *)&v17[v38 - 24];
          *((void *)v39 - 1) = *(void *)&v17[v38 - 8];
          *((void *)v40 - 3) = 0;
          *((void *)v40 - 2) = 0;
          *((void *)v40 - 1) = 0;
          v38 -= 32;
        }
        while (&v17[v38] != v24);
        unint64_t v17 = (char *)a1[10];
        unint64_t v41 = (char *)a1[11];
        a1[10] = &v30[v38];
        BOOL v42 = (void *)v50;
        *(_OWORD *)(a1 + 11) = v50;
        uint64_t v23 = v42;
        while (v41 != v17)
        {
          double v43 = (void *)*((void *)v41 - 3);
          if (v43)
          {
            *((void *)v41 - 2) = v43;
            operator delete(v43);
          }
          v41 -= 32;
        }
      }
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v17 = *(_DWORD *)a3;
      *((void *)v17 + 2) = 0;
      *((void *)v17 + 3) = 0;
      *((void *)v17 + 1) = 0;
      uint64_t v19 = *(unsigned char **)(a3 + 8);
      unint64_t v18 = *(unsigned char **)(a3 + 16);
      int64_t v20 = v18 - v19;
      if (v18 != v19)
      {
        if (v20 < 0) {
          abort();
        }
        int v21 = (char *)operator new(v18 - v19);
        *((void *)v17 + 1) = v21;
        *((void *)v17 + 2) = v21;
        unint64_t v22 = &v21[8 * (v20 >> 3)];
        *((void *)v17 + 3) = v22;
        memcpy(v21, v19, v20);
        *((void *)v17 + 2) = v22;
      }
      uint64_t v23 = v17 + 32;
      a1[11] = v17 + 32;
    }
    a1[11] = v23;
    uint64_t v13 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10];
    uint64_t v8 = (uint64_t)v5 - a1[7];
    uint64_t v9 = v8 >> 3;
    uint64_t v10 = v7 + 4 * v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)a3;
    int v12 = (void *)(v10 + 8);
    unint64_t v11 = *(void **)(v10 + 8);
    if (v11)
    {
      *(void *)(v7 + 32 * v9 + 16) = v11;
      operator delete(v11);
      *int v12 = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
    }
    *(_OWORD *)int v12 = *(_OWORD *)(a3 + 8);
    *(void *)(v7 + 32 * v9 + 24) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    uint64_t v13 = a1[31];
    if (v10 != a1[11])
    {
      uint64_t v14 = (void *)a1[16];
      if (v14)
      {
        while (1)
        {
          unint64_t v48 = &v46;
          uint64_t v49 = 1;
          uint64_t v47 = v13;
          uint64_t v15 = v14[6];
          if (!v15) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v47, &v48);
          uint64_t v14 = (void *)*v14;
          if (!v14) {
            return;
          }
        }
LABEL_43:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_44:
        abort();
      }
      return;
    }
  }
  BOOL v44 = (void *)a1[22];
  if (v44)
  {
    while (1)
    {
      unint64_t v48 = &v46;
      uint64_t v49 = 1;
      uint64_t v47 = v13;
      uint64_t v45 = v44[6];
      if (!v45) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v45 + 48))(v45, &v47, &v48);
      BOOL v44 = (void *)*v44;
      if (!v44) {
        return;
      }
    }
    goto LABEL_43;
  }
}

void sub_1A1DEED54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<md::ls::RenderablesCount>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1DEED68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)33>>(int8x8_t *a1)
{
  unint64_t v10 = 0xEC8639AAD8F442E0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEC8639AAD8F442E0;
    if (*(void *)&v1 <= 0xEC8639AAD8F442E0) {
      unint64_t v3 = 0xEC8639AAD8F442E0 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEC8639AAD8F442E0;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEC8639AAD8F442E0)
      {
        if (v5[2] == 0xEC8639AAD8F442E0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEC8639AAD8F442E0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEC8639AAD8F442E0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DEEFAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::__unordered_map_hasher<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,md::VKMRenderResourcesStore::VKMSplineKeyHash,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,true>,std::__unordered_map_equal<md::VKMRenderResourcesStore::VKMSplineKey,std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<md::VKMRenderResourcesStore::VKMSplineKey>,md::VKMRenderResourcesStore::VKMSplineKeyHash,true>,std::allocator<std::__hash_value_type<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>>::__emplace_unique_key_args<md::VKMRenderResourcesStore::VKMSplineKey,std::pair<md::VKMRenderResourcesStore::VKMSplineKey,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>>(float *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *((unsigned __int8 *)a2 + 8);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  unint64_t v10 = (v8 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
  unint64_t v15 = *((void *)a1 + 1);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v3 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
      if (v14 >= v15) {
        uint64_t v3 = v14 % v15;
      }
    }
    else
    {
      uint64_t v3 = v14 & (v15 - 1);
    }
    unint64_t v17 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v17)
    {
      unint64_t v18 = *v17;
      if (v18)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v18[1];
            if (v20 == v14)
            {
              if (*((_DWORD *)v18 + 4) == v7
                && __PAIR64__(*((unsigned __int8 *)v18 + 24), *((_DWORD *)v18 + 5)) == __PAIR64__(v6, v8)
                && *(uint64_t *)((char *)v18 + 28) == __PAIR64__(v12, v11))
              {
                return;
              }
            }
            else if ((v20 & (v15 - 1)) != v3)
            {
              goto LABEL_27;
            }
            unint64_t v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_27;
            }
          }
        }
        do
        {
          unint64_t v19 = v18[1];
          if (v19 == v14)
          {
            if (*((_DWORD *)v18 + 4) == v7
              && __PAIR64__(*((unsigned __int8 *)v18 + 24), *((_DWORD *)v18 + 5)) == __PAIR64__(v6, v8)
              && *(uint64_t *)((char *)v18 + 28) == __PAIR64__(v12, v11))
            {
              return;
            }
          }
          else
          {
            if (v19 >= v15) {
              v19 %= v15;
            }
            if (v19 != v3) {
              break;
            }
          }
          unint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_27:
  int v21 = operator new(0x30uLL);
  void *v21 = 0;
  v21[1] = v14;
  *((_OWORD *)v21 + 1) = *(_OWORD *)a3;
  uint64_t v22 = *(void *)(a3 + 24);
  v21[4] = *(void *)(a3 + 16);
  v21[5] = v22;
  float v23 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v24 = a1[8];
  if (!v15 || (float)(v24 * (float)v15) < v23)
  {
    BOOL v25 = 1;
    if (v15 >= 3) {
      BOOL v25 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v15);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v15 = *((void *)a1 + 1);
    }
    if (prime <= v15)
    {
      if (prime >= v15) {
        goto LABEL_64;
      }
      unint64_t v40 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v15 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime >= v15)
      {
        unint64_t v15 = *((void *)a1 + 1);
LABEL_64:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15) {
            uint64_t v3 = v14 % v15;
          }
          else {
            uint64_t v3 = v14;
          }
        }
        else
        {
          uint64_t v3 = (v15 - 1) & v14;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        uint64_t v49 = *(void **)a1;
        *(void *)a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v15 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v29 = operator new(8 * prime);
    uint64_t v30 = *(void **)a1;
    *(void *)a1 = v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v31++) = 0;
    while (prime != v31);
    uint64_t v33 = (uint64_t *)(a1 + 4);
    uint64_t v32 = (void *)*((void *)a1 + 2);
    if (!v32)
    {
LABEL_63:
      unint64_t v15 = prime;
      goto LABEL_64;
    }
    size_t v34 = v32[1];
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(*(void *)a1 + 8 * v36) = v33;
      for (uint64_t i = (void *)*v32; *v32; uint64_t i = (void *)*v32)
      {
        size_t v38 = i[1] & v35;
        if (v38 == v36)
        {
          uint64_t v32 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v38))
        {
          *uint64_t v32 = *i;
          uint64_t v39 = 8 * v38;
          *uint64_t i = **(void **)(*(void *)a1 + v39);
          **(void **)(*(void *)a1 + v39) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v38) = v32;
          uint64_t v32 = i;
          size_t v36 = v38;
        }
      }
      goto LABEL_63;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v34) = v33;
    double v43 = (void *)*v32;
    if (!*v32) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v45 = v43[1];
      if (v45 >= prime) {
        v45 %= prime;
      }
      if (v45 != v34)
      {
        if (!*(void *)(*(void *)a1 + 8 * v45))
        {
          *(void *)(*(void *)a1 + 8 * v45) = v32;
          goto LABEL_68;
        }
        *uint64_t v32 = *v43;
        uint64_t v44 = 8 * v45;
        *double v43 = **(void **)(*(void *)a1 + v44);
        **(void **)(*(void *)a1 + v44) = v43;
        double v43 = v32;
      }
      size_t v45 = v34;
LABEL_68:
      uint64_t v32 = v43;
      double v43 = (void *)*v43;
      size_t v34 = v45;
      if (!v43) {
        goto LABEL_63;
      }
    }
  }
LABEL_77:
  uint64_t v46 = *(void **)a1;
  uint64_t v47 = *(void **)(*(void *)a1 + 8 * v3);
  if (v47)
  {
    void *v21 = *v47;
LABEL_85:
    *uint64_t v47 = v21;
    goto LABEL_86;
  }
  void *v21 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v21;
  v46[v3] = a1 + 4;
  if (*v21)
  {
    unint64_t v48 = *(void *)(*v21 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v48 >= v15) {
        v48 %= v15;
      }
    }
    else
    {
      v48 &= v15 - 1;
    }
    uint64_t v47 = (void *)(*(void *)a1 + 8 * v48);
    goto LABEL_85;
  }
LABEL_86:
  ++*((void *)a1 + 3);
}

void sub_1A1DEF4F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::emplace(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v25);
  if (v6)
  {
    uint64_t v12 = (_DWORD *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v15 = (_DWORD *)a1[10];
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v12 - v15) + 1;
      if (v16 > 0x1555555555555555) {
        goto LABEL_30;
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v15) >> 2);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x1555555555555555;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(12 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[4 * (v12 - v15)];
      *(void *)uint64_t v20 = *a3;
      *((_DWORD *)v20 + 2) = *((_DWORD *)a3 + 2);
      unint64_t v14 = v20 + 12;
      if (v12 != v15)
      {
        do
        {
          uint64_t v21 = *(void *)(v12 - 3);
          v12 -= 3;
          int v22 = v12[2];
          *(void *)(v20 - 12) = v21;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v22;
        }
        while (v12 != v15);
        uint64_t v12 = (_DWORD *)a1[10];
      }
      a1[10] = v20;
      a1[11] = v14;
      a1[12] = &v19[12 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v13 = *a3;
      v12[2] = *((_DWORD *)a3 + 2);
      *(void *)uint64_t v12 = v13;
      unint64_t v14 = v12 + 3;
    }
    a1[11] = v14;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = (_DWORD *)(a1[10] + 12 * (((uint64_t)v5 - a1[7]) >> 3));
    *uint64_t v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    v7[2] = *((_DWORD *)a3 + 2);
    uint64_t v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      unint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          unint64_t v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v26, &v27);
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  float v23 = (void *)a1[22];
  if (v23)
  {
    while (1)
    {
      unint64_t v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v8;
      uint64_t v24 = v23[6];
      if (!v24) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 48))(v24, &v26, &v27);
      float v23 = (void *)*v23;
      if (!v23) {
        return;
      }
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::HasTileSharedStyleCameraLighting>(int8x8_t *a1)
{
  unint64_t v10 = 0xDF3D07954D3A7200;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDF3D07954D3A7200;
    if (*(void *)&v1 <= 0xDF3D07954D3A7200) {
      unint64_t v3 = 0xDF3D07954D3A7200 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDF3D07954D3A7200;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDF3D07954D3A7200)
      {
        if (v5[2] == 0xDF3D07954D3A7200) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDF3D07954D3A7200) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDF3D07954D3A7200) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DEF988(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v26);
  if (v6)
  {
    uint64_t v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v15 = (char *)a1[10];
      uint64_t v16 = (v12 - v15) >> 5;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59) {
        goto LABEL_30;
      }
      uint64_t v18 = v11 - (void)v15;
      if (v18 >> 4 > v17) {
        unint64_t v17 = v18 >> 4;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = (char *)operator new(32 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[32 * v16];
      long long v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)a3;
      *((_OWORD *)v21 + 1) = v22;
      unint64_t v14 = v21 + 32;
      if (v12 != v15)
      {
        do
        {
          long long v23 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v21 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v21 - 1) = v23;
          v21 -= 32;
          v12 -= 32;
        }
        while (v12 != v15);
        uint64_t v12 = (char *)a1[10];
      }
      a1[10] = v21;
      a1[11] = v14;
      a1[12] = &v20[32 * v19];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
      *((_OWORD *)v12 + 1) = v13;
      unint64_t v14 = v12 + 32;
    }
    a1[11] = v14;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 4 * ((void)v5 - a1[7]);
    *(void *)uint64_t v7 = *(void *)a3;
    *(void *)(v7 + 8) = *(void *)(a3 + 8);
    *(void *)(v7 + 16) = *(void *)(a3 + 16);
    *(unsigned char *)(v7 + 24) = *(unsigned char *)(a3 + 24);
    uint64_t v8 = a1[31];
    if (v7 != a1[11])
    {
      unint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v24 = (void *)a1[22];
  if (v24)
  {
    while (1)
    {
      uint64_t v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v25 = v24[6];
      if (!v25) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v25 + 48))(v25, &v27, &v28);
      uint64_t v24 = (void *)*v24;
      if (!v24) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v30 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v30);
  if (v6)
  {
    uint64_t v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = (char *)a1[10];
      uint64_t v15 = (v12 - v14) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = operator new(4 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[4 * v15];
      *uint64_t v20 = *a3;
      long long v13 = v20 + 1;
      if (v12 != v14)
      {
        unint64_t v21 = v12 - v14 - 4;
        if (v21 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v14 - v19) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v22 = (v21 >> 2) + 1;
        long long v23 = &v19[4 * v15 - 16];
        uint64_t v24 = v12 - 16;
        uint64_t v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          _OWORD *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        v20 -= v22 & 0x7FFFFFFFFFFFFFF8;
        v12 -= 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v27 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--uint64_t v20 = v27;
          }
          while (v12 != v14);
        }
      }
      a1[10] = v20;
      a1[11] = v13;
      a1[12] = &v19[4 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v12 = *a3;
      long long v13 = v12 + 4;
    }
    a1[11] = v13;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = (_DWORD *)(a1[10] + (((uint64_t)v5 - a1[7]) >> 1));
    *uint64_t v7 = *a3;
    uint64_t v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      unint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v32 = &v30;
          uint64_t v33 = 1;
          uint64_t v31 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v31, &v32);
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  uint64_t v28 = (void *)a1[22];
  if (v28)
  {
    while (1)
    {
      uint64_t v32 = &v30;
      uint64_t v33 = 1;
      uint64_t v31 = v8;
      uint64_t v29 = v28[6];
      if (!v29) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v29 + 48))(v29, &v31, &v32);
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        return;
      }
    }
    goto LABEL_33;
  }
}

void gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v26);
  if (v6)
  {
    uint64_t v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v15 = (char *)a1[10];
      uint64_t v16 = (v12 - v15) >> 5;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59) {
        goto LABEL_30;
      }
      uint64_t v18 = v11 - (void)v15;
      if (v18 >> 4 > v17) {
        unint64_t v17 = v18 >> 4;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = (char *)operator new(32 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      unint64_t v21 = &v20[32 * v16];
      long long v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)unint64_t v21 = *(_OWORD *)a3;
      *((_OWORD *)v21 + 1) = v22;
      unint64_t v14 = v21 + 32;
      if (v12 != v15)
      {
        do
        {
          long long v23 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v21 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v21 - 1) = v23;
          v21 -= 32;
          v12 -= 32;
        }
        while (v12 != v15);
        uint64_t v12 = (char *)a1[10];
      }
      a1[10] = v21;
      a1[11] = v14;
      a1[12] = &v20[32 * v19];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
      *((_OWORD *)v12 + 1) = v13;
      unint64_t v14 = v12 + 32;
    }
    a1[11] = v14;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = (void *)(a1[10] + 4 * ((void)v5 - a1[7]));
    *uint64_t v7 = *(void *)a3;
    v7[1] = *(void *)(a3 + 8);
    v7[2] = *(void *)(a3 + 16);
    v7[3] = *(void *)(a3 + 24);
    uint64_t v8 = a1[31];
    if (v7 != (void *)a1[11])
    {
      unint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v24 = (void *)a1[22];
  if (v24)
  {
    while (1)
    {
      uint64_t v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v25 = v24[6];
      if (!v25) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v25 + 48))(v25, &v27, &v28);
      uint64_t v24 = (void *)*v24;
      if (!v24) {
        return;
      }
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF08DF3F52DDCD66BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF08DF3F52DDCD66BLL;
    if (*(void *)&v1 <= 0xF08DF3F52DDCD66BLL) {
      unint64_t v3 = 0xF08DF3F52DDCD66BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF08DF3F52DDCD66BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF08DF3F52DDCD66BLL)
      {
        if (v5[2] == 0xF08DF3F52DDCD66BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF08DF3F52DDCD66BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF08DF3F52DDCD66BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DF026C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v33 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v33);
  if (v6)
  {
    unint64_t v16 = a1[11];
    unint64_t v15 = a1[12];
    if (v16 >= v15)
    {
      unint64_t v19 = (char *)a1[10];
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v19) >> 3);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_43;
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v19) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v24 = operator new(24 * v23);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = *((void *)a3 + 1);
      uint64_t v26 = &v24[8 * ((uint64_t)(v16 - (void)v19) >> 3)];
      *(void *)uint64_t v26 = *(void *)a3;
      *((void *)v26 + 1) = v25;
      if (v25)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        unint64_t v19 = (char *)a1[10];
        unint64_t v16 = a1[11];
      }
      uint64_t v27 = &v24[24 * v23];
      v24[24 * v20 + 16] = *((unsigned char *)a3 + 16);
      uint64_t v18 = v26 + 24;
      if ((char *)v16 == v19)
      {
        a1[10] = v26;
        a1[11] = v18;
        a1[12] = v27;
      }
      else
      {
        do
        {
          long long v28 = *(_OWORD *)(v16 - 24);
          v16 -= 24;
          *(_OWORD *)(v26 - 24) = v28;
          v26 -= 24;
          *(void *)unint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
          v26[16] = *(unsigned char *)(v16 + 16);
        }
        while ((char *)v16 != v19);
        unint64_t v19 = (char *)a1[10];
        uint64_t v29 = (char *)a1[11];
        a1[10] = v26;
        a1[11] = v18;
        for (a1[12] = v27; v29 != v19; v29 -= 24)
        {
          uint64_t v30 = (std::__shared_weak_count *)*((void *)v29 - 2);
          if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)unint64_t v16 = *(void *)a3;
      uint64_t v17 = *((void *)a3 + 1);
      *(void *)(v16 + 8) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v16 + 16) = *((unsigned char *)a3 + 16);
      uint64_t v18 = (char *)(v16 + 24);
    }
    a1[11] = v18;
    uint64_t v12 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10];
    uint64_t v8 = ((uint64_t)v5 - a1[7]) >> 3;
    uint64_t v9 = v7 + 24 * v8;
    long long v10 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    unint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
    *(_OWORD *)uint64_t v9 = v10;
    if (v11)
    {
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(unsigned char *)(v7 + 24 * v8 + 16) = *((unsigned char *)a3 + 16);
    uint64_t v12 = a1[31];
    if (v9 != a1[11])
    {
      long long v13 = (void *)a1[16];
      if (v13)
      {
        while (1)
        {
          size_t v35 = &v33;
          uint64_t v36 = 1;
          uint64_t v34 = v12;
          uint64_t v14 = v13[6];
          if (!v14) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v14 + 48))(v14, &v34, &v35);
          long long v13 = (void *)*v13;
          if (!v13) {
            return;
          }
        }
LABEL_42:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
        abort();
      }
      return;
    }
  }
  uint64_t v31 = (void *)a1[22];
  if (v31)
  {
    while (1)
    {
      size_t v35 = &v33;
      uint64_t v36 = 1;
      uint64_t v34 = v12;
      uint64_t v32 = v31[6];
      if (!v32) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v32 + 48))(v32, &v34, &v35);
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        return;
      }
    }
    goto LABEL_42;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SupportsRebuildingRenderables>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  uint64_t v18 = *(void *)(v16 - 24);
  uint64_t v17 = *(void *)(v16 - 16);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(unsigned char *)(v14 + 24 * v7 + 16) = *(unsigned char *)(v16 - 8);
  uint64_t v20 = a1[11];
  unint64_t v21 = *(std::__shared_weak_count **)(v20 - 16);
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  a1[11] = v20 - 24;
  unint64_t v22 = (void *)a1[28];
  if (!v22) {
    return 1;
  }
  uint64_t v23 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    uint64_t v26 = v23;
    uint64_t v24 = v22[6];
    if (!v24) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v24 + 48))(v24, &v26, v27);
    unint64_t v22 = (void *)*v22;
    if (!v22) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::LayerDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TransferStyleAttributeRasterSet>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<md::ls::TileRenderableDataHandle>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileMatrix>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileMatrix>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileMatrix>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileMatrix>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (void *)a1[11];
  uint64_t v16 = *(v15 - 4);
  v15 -= 4;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileBounds>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileBounds>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 32 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 32);
  v15 -= 32;
  *(void *)uint64_t v14 = v16;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(unsigned char *)(v14 + 24) = *(unsigned char *)(v15 + 24);
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NeedsTileRenderableDataHandleUpdate>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileStyleCameraConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileClippingConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SupportsFragmentClip>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileShadowConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SupportsShadows>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::HasTileSharedStyleCameraLighting>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 12 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 12);
  v15 -= 12;
  *uint64_t v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  v14[2] = *(_DWORD *)(v15 + 8);
  a1[11] = v15;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileType>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileType>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileType>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileType>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WillEnterView>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::WillEnterView>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          long long v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              long long v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::WillEnterView>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::WillEnterView>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__split_buffer<md::ls::RenderablesCount>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 32;
        *(void *)(a1 + 16) = v2 - 32;
        uint64_t v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::remove(void *a1, unint64_t a2)
{
  unint64_t v45 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = v14 + 32 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)(v16 - 32);
  if (v15 != v16 - 32)
  {
    uint64_t v19 = *(char **)(v15 + 8);
    uint64_t v18 = (void *)(v15 + 8);
    unint64_t v17 = v19;
    uint64_t v20 = *(char **)(v16 - 24);
    uint64_t v21 = *(unsigned char **)(v16 - 16);
    size_t v22 = v21 - v20;
    unint64_t v23 = (v21 - v20) >> 3;
    uint64_t v24 = v18[2];
    if (v23 > (v24 - (uint64_t)v19) >> 3)
    {
      if (v17)
      {
        *(void *)(v14 + 32 * v7 + 16) = v17;
        operator delete(v17);
        uint64_t v24 = 0;
        *uint64_t v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      if ((v22 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      uint64_t v25 = v24 >> 2;
      if (v24 >> 2 <= v23) {
        uint64_t v25 = (v21 - v20) >> 3;
      }
      BOOL v26 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v26) {
        unint64_t v27 = v25;
      }
      if (v27 >> 61) {
        goto LABEL_40;
      }
      uint64_t v28 = 8 * v27;
      uint64_t v29 = (char *)operator new(8 * v27);
      unint64_t v17 = v29;
      *uint64_t v18 = v29;
      uint64_t v30 = v14 + 32 * v7;
      *(void *)(v30 + 16) = v29;
      uint64_t v31 = (char **)(v30 + 16);
      v18[2] = &v29[v28];
      if (v21 != v20) {
        memcpy(v29, v20, v21 - v20);
      }
      goto LABEL_31;
    }
    uint64_t v32 = v14 + 32 * v7;
    uint64_t v34 = *(char **)(v32 + 16);
    uint64_t v31 = (char **)(v32 + 16);
    uint64_t v33 = v34;
    size_t v35 = v34 - v17;
    unint64_t v36 = (v34 - v17) >> 3;
    if (v36 >= v23)
    {
      if (v21 == v20)
      {
LABEL_31:
        *uint64_t v31 = &v17[v22];
        goto LABEL_32;
      }
      size_t v38 = v17;
      uint64_t v39 = v20;
    }
    else
    {
      uint64_t v37 = &v20[8 * v36];
      if (v33 != v17)
      {
        memmove(v17, v20, v35);
        unint64_t v17 = *v31;
      }
      size_t v22 = v21 - v37;
      if (v21 == v37) {
        goto LABEL_31;
      }
      size_t v38 = v17;
      uint64_t v39 = v37;
    }
    memmove(v38, v39, v22);
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v40 = a1[11];
  uint8x8_t v41 = *(void **)(v40 - 24);
  if (v41)
  {
    *(void *)(v40 - 16) = v41;
    operator delete(v41);
  }
  a1[11] = v40 - 32;
  uint64_t v42 = (void *)a1[28];
  if (v42)
  {
    uint64_t v43 = a1[31];
    while (1)
    {
      v47[0] = &v45;
      v47[1] = 1;
      uint64_t v46 = v43;
      uint64_t v44 = v42[6];
      if (!v44) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v44 + 48))(v44, &v46, v47);
      uint64_t v42 = (void *)*v42;
      if (!v42) {
        return 1;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_40:
    abort();
  }
  return 1;
}

void gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ComponentStorageWrapper<md::ls::RenderablesCount>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[4];
  if (v7)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = (void *)a1[4];
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeV>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void cleanup(uint64_t a1, int8x8_t *a2, unint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  unint64_t v7 = *(void **)(a1 + 8);
  if (*(void **)a1 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7) {
        goto LABEL_9;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_9:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = (int8x8_t *)v6[3];
    uint64_t v9 = (std::__shared_weak_count *)v6[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  unint64_t v10 = *(void **)a1;
  uint64_t v11 = *(void **)(a1 + 8);
  if (*(void **)a1 != v11)
  {
    while (*v10 != 0x4EDAD23DFB014132)
    {
      v10 += 5;
      if (v10 == v11) {
        goto LABEL_18;
      }
    }
  }
  if (v10 != v11)
  {
    uint64_t v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
LABEL_18:
  long long v13 = *(void **)a1;
  uint64_t v14 = *(void **)(a1 + 8);
  if (*(void **)a1 != v14)
  {
    while (*v13 != 0x348A0B0E758C07C2)
    {
      v13 += 5;
      if (v13 == v14) {
        goto LABEL_26;
      }
    }
  }
  if (v13 != v14)
  {
    uint64_t v15 = (std::__shared_weak_count *)v13[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
LABEL_26:
  uint64_t v16 = (void *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(a2);
  unint64_t v17 = a3 >> 39;
  uint64_t v18 = v16[4];
  if (a3 >> 39 < (v16[5] - v18) >> 3
    && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
    && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(a3) & 0x7F)), v22 = v16[7], v21 = v16[8], v20 < (v21 - v22) >> 3)
    && ((v23 = v22 + 8 * v20, v23 != v21) ? (BOOL v24 = *(_DWORD *)(v23 + 4) == HIDWORD(a3)) : (BOOL v24 = 0), v24))
  {
    uint64_t v25 = v16[11];
    uint64_t v26 = v16[10] + 8 * v20;
  }
  else
  {
    uint64_t v25 = v16[11];
    uint64_t v26 = v25;
  }
  if (v26 == v25) {
    unint64_t v27 = 0;
  }
  else {
    unint64_t v27 = (void *)v26;
  }
  uint64_t v28 = (void *)gdc::Registry::storage<md::ls::RegisterHandle>(a2);
  uint64_t v29 = v28[4];
  if (v17 < (v28[5] - v29) >> 3
    && (uint64_t v30 = *(void *)(v29 + 8 * v17)) != 0
    && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(a3) & 0x7F)), v33 = v28[7], v32 = v28[8], v31 < (v32 - v33) >> 3)
    && ((uint64_t v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == HIDWORD(a3)) : (v35 = 0), v35))
  {
    uint64_t v36 = v28[11];
    uint64_t v37 = v28[10] + 8 * v31;
  }
  else
  {
    uint64_t v36 = v28[11];
    uint64_t v37 = v36;
  }
  if (v37 == v36) {
    size_t v38 = 0;
  }
  else {
    size_t v38 = (void *)v37;
  }
  uint64_t v39 = (void *)gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  uint64_t v40 = v39[4];
  if (v17 < (v39[5] - v40) >> 3)
  {
    uint64_t v41 = *(void *)(v40 + 8 * v17);
    if (v41)
    {
      unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v44 = v39[7];
      uint64_t v43 = v39[8];
      if (v42 < (v43 - v44) >> 3)
      {
        uint64_t v45 = v44 + 8 * v42;
        if (v45 != v43 && *(_DWORD *)(v45 + 4) == HIDWORD(a3))
        {
          uint64_t v47 = v39[10];
          unint64_t v48 = (unint64_t *)(v47 + 8 * v42);
          if (v48 != (unint64_t *)v39[11] && v47 != 0)
          {
            unint64_t v50 = *v48;
            int8x8_t v51 = v8[1276];
            double v342 = v27;
            double v343 = v38;
            if (v50 < (uint64_t)(*(void *)&v8[1277] - *(void *)&v51) >> 3
              && ((uint64_t v52 = *(void *)(*(void *)&v51 + 8 * v50)) != 0
                ? (BOOL v53 = HIDWORD(*v48) == HIDWORD(v52))
                : (BOOL v53 = 0),
                  v53))
            {
              uint64_t v55 = *(void *)&v8[1279] + 56 * v52;
              uint64_t v54 = (uint64_t)v8[1280];
            }
            else
            {
              uint64_t v54 = (uint64_t)v8[1280];
              uint64_t v55 = v54;
            }
            if (v55 == v54) {
              float v56 = 0;
            }
            else {
              float v56 = (void *)v55;
            }
            BOOL v57 = (unint64_t *)v56[1];
            uint64_t v58 = (unint64_t *)v56[2];
            while (v57 != v58)
            {
              unint64_t v59 = *v57++;
              gdc::Registry::destroy((uint64_t)a2, v59);
            }
            uint64_t v60 = (uint64_t *)v56[4];
            id v61 = (uint64_t *)v56[5];
            if (v60 != v61)
            {
              do
              {
                uint64_t v62 = *v60++;
                char v344 = 0;
                unint64_t v63 = (void *)gdc::Registry::storage<md::ls::PendingDeletion>(a2);
                gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v63, v62, &v344);
              }
              while (v60 != v61);
              uint64_t v60 = (uint64_t *)v56[4];
            }
            v56[2] = v56[1];
            v56[5] = v60;
            geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase((uint64_t)&v8[1273], v48);
            std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(&v8[1263], *v48);
            std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(&v8[1268], *v48);
            md::VKMRenderResourcesStore::clearRenderItemGroup(v8, v48, 1);
            unint64_t v27 = v342;
            size_t v38 = v343;
          }
        }
      }
    }
  }
  unint64_t v64 = (void *)gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(a2);
  uint64_t v65 = v64[4];
  if (v17 < (v64[5] - v65) >> 3)
  {
    uint64_t v66 = *(void *)(v65 + 8 * v17);
    if (v66)
    {
      unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v69 = v64[7];
      uint64_t v68 = v64[8];
      if (v67 < (v68 - v69) >> 3)
      {
        uint64_t v70 = v69 + 8 * v67;
        if (v70 != v68 && *(_DWORD *)(v70 + 4) == HIDWORD(a3))
        {
          uint64_t v72 = v64[10];
          BOOL v73 = (unint64_t *)(v72 + 8 * v67);
          if (v73 != (unint64_t *)v64[11] && v72 != 0)
          {
            int8x8_t v75 = v8[432];
            if (v75)
            {
              unint64_t v76 = *v73;
              uint8x8_t v77 = (uint8x8_t)vcnt_s8(v75);
              v77.i16[0] = vaddlv_u8(v77);
              if (v77.u32[0] > 1uLL)
              {
                unint64_t v78 = v76;
                if (*(void *)&v75 <= v76) {
                  unint64_t v78 = v76 % *(void *)&v75;
                }
              }
              else
              {
                unint64_t v78 = (*(void *)&v75 - 1) & v76;
              }
              BOOL v79 = *(void **)(*(void *)&v8[431] + 8 * v78);
              if (v79)
              {
                unint64_t v80 = (void *)*v79;
                if (v80)
                {
                  if (v77.u32[0] < 2uLL)
                  {
                    uint64_t v81 = *(void *)&v75 - 1;
                    while (1)
                    {
                      uint64_t v83 = v80[1];
                      if (v83 == v76)
                      {
                        if (v80[2] == v76) {
                          goto LABEL_111;
                        }
                      }
                      else if ((v83 & v81) != v78)
                      {
                        goto LABEL_114;
                      }
                      unint64_t v80 = (void *)*v80;
                      if (!v80) {
                        goto LABEL_114;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v82 = v80[1];
                    if (v82 == v76)
                    {
                      if (v80[2] == v76)
                      {
LABEL_111:
                        uint64_t v84 = v80[4];
                        if (!v84 || (uint64_t v85 = v84 - 1, (v80[4] = v85) == 0)) {
                          v80[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v82 >= *(void *)&v75) {
                        v82 %= *(void *)&v75;
                      }
                      if (v82 != v78) {
                        break;
                      }
                    }
                    unint64_t v80 = (void *)*v80;
                  }
                  while (v80);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_114:
  char v86 = (void *)gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(a2);
  uint64_t v87 = v86[4];
  if (v17 < (v86[5] - v87) >> 3)
  {
    uint64_t v88 = *(void *)(v87 + 8 * v17);
    if (v88)
    {
      unint64_t v89 = *(unsigned __int16 *)(v88 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v91 = v86[7];
      uint64_t v90 = v86[8];
      if (v89 < (v90 - v91) >> 3)
      {
        uint64_t v92 = v91 + 8 * v89;
        if (v92 != v90 && *(_DWORD *)(v92 + 4) == HIDWORD(a3))
        {
          uint64_t v94 = v86[10];
          char v95 = (unint64_t *)(v94 + 8 * v89);
          if (v95 != (unint64_t *)v86[11] && v94 != 0)
          {
            int8x8_t v97 = v8[410];
            if (v97)
            {
              unint64_t v98 = *v95;
              uint8x8_t v99 = (uint8x8_t)vcnt_s8(v97);
              v99.i16[0] = vaddlv_u8(v99);
              if (v99.u32[0] > 1uLL)
              {
                unint64_t v100 = v98;
                if (*(void *)&v97 <= v98) {
                  unint64_t v100 = v98 % *(void *)&v97;
                }
              }
              else
              {
                unint64_t v100 = (*(void *)&v97 - 1) & v98;
              }
              double v101 = *(void **)(*(void *)&v8[409] + 8 * v100);
              if (v101)
              {
                uint64_t v102 = (void *)*v101;
                if (v102)
                {
                  if (v99.u32[0] < 2uLL)
                  {
                    uint64_t v103 = *(void *)&v97 - 1;
                    while (1)
                    {
                      uint64_t v105 = v102[1];
                      if (v105 == v98)
                      {
                        if (v102[2] == v98) {
                          goto LABEL_147;
                        }
                      }
                      else if ((v105 & v103) != v100)
                      {
                        goto LABEL_150;
                      }
                      uint64_t v102 = (void *)*v102;
                      if (!v102) {
                        goto LABEL_150;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v104 = v102[1];
                    if (v104 == v98)
                    {
                      if (v102[2] == v98)
                      {
LABEL_147:
                        uint64_t v106 = v102[4];
                        if (!v106 || (uint64_t v107 = v106 - 1, (v102[4] = v107) == 0)) {
                          v102[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v104 >= *(void *)&v97) {
                        v104 %= *(void *)&v97;
                      }
                      if (v104 != v100) {
                        break;
                      }
                    }
                    uint64_t v102 = (void *)*v102;
                  }
                  while (v102);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_150:
  uint64_t v108 = (void *)gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  uint64_t v109 = v108[4];
  if (v17 < (v108[5] - v109) >> 3)
  {
    uint64_t v110 = *(void *)(v109 + 8 * v17);
    if (v110)
    {
      unint64_t v111 = *(unsigned __int16 *)(v110 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v113 = v108[7];
      uint64_t v112 = v108[8];
      if (v111 < (v112 - v113) >> 3)
      {
        uint64_t v114 = v113 + 8 * v111;
        if (v114 != v112 && *(_DWORD *)(v114 + 4) == HIDWORD(a3))
        {
          uint64_t v116 = v108[10];
          uint64_t v117 = (unint64_t *)(v116 + 8 * v111);
          if (v117 != (unint64_t *)v108[11] && v116 != 0)
          {
            int8x8_t v119 = v8[1269];
            if (v119)
            {
              unint64_t v120 = *v117;
              uint8x8_t v121 = (uint8x8_t)vcnt_s8(v119);
              v121.i16[0] = vaddlv_u8(v121);
              if (v121.u32[0] > 1uLL)
              {
                unint64_t v122 = v120;
                if (*(void *)&v119 <= v120) {
                  unint64_t v122 = v120 % *(void *)&v119;
                }
              }
              else
              {
                unint64_t v122 = (*(void *)&v119 - 1) & v120;
              }
              unsigned int v123 = *(void **)(*(void *)&v8[1268] + 8 * v122);
              if (v123)
              {
                uint64_t v124 = (void *)*v123;
                if (v124)
                {
                  if (v121.u32[0] < 2uLL)
                  {
                    uint64_t v125 = *(void *)&v119 - 1;
                    while (1)
                    {
                      uint64_t v127 = v124[1];
                      if (v127 == v120)
                      {
                        if (v124[2] == v120) {
                          goto LABEL_183;
                        }
                      }
                      else if ((v127 & v125) != v122)
                      {
                        goto LABEL_186;
                      }
                      uint64_t v124 = (void *)*v124;
                      if (!v124) {
                        goto LABEL_186;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v126 = v124[1];
                    if (v126 == v120)
                    {
                      if (v124[2] == v120)
                      {
LABEL_183:
                        uint64_t v128 = v124[4];
                        if (!v128 || (uint64_t v129 = v128 - 1, (v124[4] = v129) == 0)) {
                          v124[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v126 >= *(void *)&v119) {
                        v126 %= *(void *)&v119;
                      }
                      if (v126 != v122) {
                        break;
                      }
                    }
                    uint64_t v124 = (void *)*v124;
                  }
                  while (v124);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_186:
  int v130 = (void *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(a2);
  uint64_t v131 = v130[4];
  if (v17 < (v130[5] - v131) >> 3)
  {
    uint64_t v132 = *(void *)(v131 + 8 * v17);
    if (v132)
    {
      unint64_t v133 = *(unsigned __int16 *)(v132 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v135 = v130[7];
      uint64_t v134 = v130[8];
      if (v133 < (v134 - v135) >> 3)
      {
        uint64_t v136 = v135 + 8 * v133;
        if (v136 != v134 && *(_DWORD *)(v136 + 4) == HIDWORD(a3))
        {
          uint64_t v138 = v130[10];
          double v139 = (unint64_t *)(v138 + 8 * v133);
          if (v139 != (unint64_t *)v130[11] && v138 != 0) {
            md::VKMRenderResourcesStore::disconnect<ggl::DaVinci::Shadow>(v8, *v139);
          }
        }
      }
    }
  }
  uint64_t v141 = (void *)gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(a2);
  uint64_t v142 = v141[4];
  if (v17 < (v141[5] - v142) >> 3)
  {
    uint64_t v143 = *(void *)(v142 + 8 * v17);
    if (v143)
    {
      unint64_t v144 = *(unsigned __int16 *)(v143 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v146 = v141[7];
      uint64_t v145 = v141[8];
      if (v144 < (v145 - v146) >> 3)
      {
        uint64_t v147 = v146 + 8 * v144;
        if (v147 != v145 && *(_DWORD *)(v147 + 4) == HIDWORD(a3))
        {
          uint64_t v149 = v141[10];
          uint64_t v150 = (unint64_t *)(v149 + 8 * v144);
          if (v150 != (unint64_t *)v141[11] && v149 != 0) {
            md::VKMRenderResourcesStore::disconnect<ggl::DaVinci::Shadow>(v8, *v150);
          }
        }
      }
    }
  }
  double v152 = (void *)gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(a2);
  uint64_t v153 = v152[4];
  if (v17 < (v152[5] - v153) >> 3)
  {
    uint64_t v154 = *(void *)(v153 + 8 * v17);
    if (v154)
    {
      unint64_t v155 = *(unsigned __int16 *)(v154 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v157 = v152[7];
      uint64_t v156 = v152[8];
      if (v155 < (v156 - v157) >> 3)
      {
        uint64_t v158 = v157 + 8 * v155;
        if (v158 != v156 && *(_DWORD *)(v158 + 4) == HIDWORD(a3))
        {
          uint64_t v160 = v152[10];
          uint64_t v161 = (unint64_t *)(v160 + 8 * v155);
          if (v161 != (unint64_t *)v152[11] && v160 != 0)
          {
            int8x8_t v163 = v8[454];
            if (v163)
            {
              unint64_t v164 = *v161;
              uint8x8_t v165 = (uint8x8_t)vcnt_s8(v163);
              v165.i16[0] = vaddlv_u8(v165);
              if (v165.u32[0] > 1uLL)
              {
                unint64_t v166 = v164;
                if (*(void *)&v163 <= v164) {
                  unint64_t v166 = v164 % *(void *)&v163;
                }
              }
              else
              {
                unint64_t v166 = (*(void *)&v163 - 1) & v164;
              }
              uint64_t v167 = *(void **)(*(void *)&v8[453] + 8 * v166);
              if (v167)
              {
                uint64_t v168 = (void *)*v167;
                if (v168)
                {
                  if (v165.u32[0] < 2uLL)
                  {
                    uint64_t v169 = *(void *)&v163 - 1;
                    while (1)
                    {
                      uint64_t v171 = v168[1];
                      if (v171 == v164)
                      {
                        if (v168[2] == v164) {
                          goto LABEL_245;
                        }
                      }
                      else if ((v171 & v169) != v166)
                      {
                        goto LABEL_248;
                      }
                      uint64_t v168 = (void *)*v168;
                      if (!v168) {
                        goto LABEL_248;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v170 = v168[1];
                    if (v170 == v164)
                    {
                      if (v168[2] == v164)
                      {
LABEL_245:
                        uint64_t v172 = v168[4];
                        if (!v172 || (uint64_t v173 = v172 - 1, (v168[4] = v173) == 0)) {
                          v168[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v170 >= *(void *)&v163) {
                        v170 %= *(void *)&v163;
                      }
                      if (v170 != v166) {
                        break;
                      }
                    }
                    uint64_t v168 = (void *)*v168;
                  }
                  while (v168);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_248:
  uint64_t v174 = (void *)gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(a2);
  uint64_t v175 = v174[4];
  if (v17 < (v174[5] - v175) >> 3)
  {
    uint64_t v176 = *(void *)(v175 + 8 * v17);
    if (v176)
    {
      unint64_t v177 = *(unsigned __int16 *)(v176 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v179 = v174[7];
      uint64_t v178 = v174[8];
      if (v177 < (v178 - v179) >> 3)
      {
        uint64_t v180 = v179 + 8 * v177;
        if (v180 != v178 && *(_DWORD *)(v180 + 4) == HIDWORD(a3))
        {
          uint64_t v182 = v174[10];
          uint64_t v183 = (unint64_t *)(v182 + 8 * v177);
          if (v183 != (unint64_t *)v174[11] && v182 != 0)
          {
            int8x8_t v185 = v8[476];
            if (v185)
            {
              unint64_t v186 = *v183;
              uint8x8_t v187 = (uint8x8_t)vcnt_s8(v185);
              v187.i16[0] = vaddlv_u8(v187);
              if (v187.u32[0] > 1uLL)
              {
                unint64_t v188 = v186;
                if (*(void *)&v185 <= v186) {
                  unint64_t v188 = v186 % *(void *)&v185;
                }
              }
              else
              {
                unint64_t v188 = (*(void *)&v185 - 1) & v186;
              }
              uint64_t v189 = *(void **)(*(void *)&v8[475] + 8 * v188);
              if (v189)
              {
                uint64_t v190 = (void *)*v189;
                if (v190)
                {
                  if (v187.u32[0] < 2uLL)
                  {
                    uint64_t v191 = *(void *)&v185 - 1;
                    while (1)
                    {
                      uint64_t v193 = v190[1];
                      if (v193 == v186)
                      {
                        if (v190[2] == v186) {
                          goto LABEL_281;
                        }
                      }
                      else if ((v193 & v191) != v188)
                      {
                        goto LABEL_284;
                      }
                      uint64_t v190 = (void *)*v190;
                      if (!v190) {
                        goto LABEL_284;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v192 = v190[1];
                    if (v192 == v186)
                    {
                      if (v190[2] == v186)
                      {
LABEL_281:
                        uint64_t v194 = v190[4];
                        if (!v194 || (uint64_t v195 = v194 - 1, (v190[4] = v195) == 0)) {
                          v190[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v192 >= *(void *)&v185) {
                        v192 %= *(void *)&v185;
                      }
                      if (v192 != v188) {
                        break;
                      }
                    }
                    uint64_t v190 = (void *)*v190;
                  }
                  while (v190);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_284:
  uint64_t v196 = (void *)gdc::Registry::storage<md::ls::TileStyleCameraConstantDataHandle>(a2);
  uint64_t v197 = v196[4];
  if (v17 < (v196[5] - v197) >> 3)
  {
    uint64_t v198 = *(void *)(v197 + 8 * v17);
    if (v198)
    {
      unint64_t v199 = *(unsigned __int16 *)(v198 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v201 = v196[7];
      uint64_t v200 = v196[8];
      if (v199 < (v200 - v201) >> 3)
      {
        uint64_t v202 = v201 + 8 * v199;
        if (v202 != v200 && *(_DWORD *)(v202 + 4) == HIDWORD(a3))
        {
          uint64_t v204 = v196[10];
          unint64_t v205 = (unint64_t *)(v204 + 8 * v199);
          if (v205 != (unint64_t *)v196[11] && v204 != 0)
          {
            int8x8_t v207 = v8[682];
            if (v207)
            {
              unint64_t v208 = *v205;
              uint8x8_t v209 = (uint8x8_t)vcnt_s8(v207);
              v209.i16[0] = vaddlv_u8(v209);
              if (v209.u32[0] > 1uLL)
              {
                unint64_t v210 = v208;
                if (*(void *)&v207 <= v208) {
                  unint64_t v210 = v208 % *(void *)&v207;
                }
              }
              else
              {
                unint64_t v210 = (*(void *)&v207 - 1) & v208;
              }
              double v211 = *(void **)(*(void *)&v8[681] + 8 * v210);
              if (v211)
              {
                double v212 = (void *)*v211;
                if (v212)
                {
                  if (v209.u32[0] < 2uLL)
                  {
                    uint64_t v213 = *(void *)&v207 - 1;
                    while (1)
                    {
                      uint64_t v215 = v212[1];
                      if (v215 == v208)
                      {
                        if (v212[2] == v208) {
                          goto LABEL_317;
                        }
                      }
                      else if ((v215 & v213) != v210)
                      {
                        goto LABEL_320;
                      }
                      double v212 = (void *)*v212;
                      if (!v212) {
                        goto LABEL_320;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v214 = v212[1];
                    if (v214 == v208)
                    {
                      if (v212[2] == v208)
                      {
LABEL_317:
                        uint64_t v216 = v212[4];
                        if (!v216 || (uint64_t v217 = v216 - 1, (v212[4] = v217) == 0)) {
                          v212[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v214 >= *(void *)&v207) {
                        v214 %= *(void *)&v207;
                      }
                      if (v214 != v210) {
                        break;
                      }
                    }
                    double v212 = (void *)*v212;
                  }
                  while (v212);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_320:
  unint64_t v218 = (void *)gdc::Registry::storage<md::ls::TileMatrix>(a2);
  uint64_t v219 = v218[4];
  if (v17 < (v218[5] - v219) >> 3)
  {
    uint64_t v220 = *(void *)(v219 + 8 * v17);
    if (v220)
    {
      unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v223 = v218[7];
      uint64_t v222 = v218[8];
      if (v221 < (v222 - v223) >> 3)
      {
        uint64_t v224 = v223 + 8 * v221;
        if (v224 != v222 && *(_DWORD *)(v224 + 4) == HIDWORD(a3))
        {
          uint64_t v226 = v218[10];
          id v227 = (unint64_t *)(v226 + 8 * v221);
          if (v227 != (unint64_t *)v218[11] && v226 != 0)
          {
            int8x8_t v229 = v8[1159];
            if (v229)
            {
              unint64_t v230 = *v227;
              uint8x8_t v231 = (uint8x8_t)vcnt_s8(v229);
              v231.i16[0] = vaddlv_u8(v231);
              if (v231.u32[0] > 1uLL)
              {
                unint64_t v232 = v230;
                if (*(void *)&v229 <= v230) {
                  unint64_t v232 = v230 % *(void *)&v229;
                }
              }
              else
              {
                unint64_t v232 = (*(void *)&v229 - 1) & v230;
              }
              uint64_t v233 = *(void **)(*(void *)&v8[1158] + 8 * v232);
              if (v233)
              {
                long long v234 = (void *)*v233;
                if (v234)
                {
                  if (v231.u32[0] < 2uLL)
                  {
                    uint64_t v235 = *(void *)&v229 - 1;
                    while (1)
                    {
                      uint64_t v237 = v234[1];
                      if (v237 == v230)
                      {
                        if (v234[2] == v230) {
                          goto LABEL_353;
                        }
                      }
                      else if ((v237 & v235) != v232)
                      {
                        goto LABEL_356;
                      }
                      long long v234 = (void *)*v234;
                      if (!v234) {
                        goto LABEL_356;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v236 = v234[1];
                    if (v236 == v230)
                    {
                      if (v234[2] == v230)
                      {
LABEL_353:
                        uint64_t v238 = v234[4];
                        if (!v238 || (uint64_t v239 = v238 - 1, (v234[4] = v239) == 0)) {
                          v234[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v236 >= *(void *)&v229) {
                        v236 %= *(void *)&v229;
                      }
                      if (v236 != v232) {
                        break;
                      }
                    }
                    long long v234 = (void *)*v234;
                  }
                  while (v234);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_356:
  double v240 = (void *)gdc::Registry::storage<md::ls::TileRenderableDataHandle>(a2);
  uint64_t v241 = v240[4];
  if (v17 < (v240[5] - v241) >> 3)
  {
    uint64_t v242 = *(void *)(v241 + 8 * v17);
    if (v242)
    {
      unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(a3) & 0x7F));
      uint64_t v245 = v240[7];
      uint64_t v244 = v240[8];
      if (v243 < (v244 - v245) >> 3)
      {
        uint64_t v246 = v245 + 8 * v243;
        if (v246 != v244 && *(_DWORD *)(v246 + 4) == HIDWORD(a3))
        {
          uint64_t v248 = v240[10];
          unint64_t v249 = (unint64_t *)(v248 + 8 * v243);
          if (v249 != (unint64_t *)v240[11] && v248 != 0)
          {
            int8x8_t v251 = v8[1181];
            if (v251)
            {
              unint64_t v252 = *v249;
              uint8x8_t v253 = (uint8x8_t)vcnt_s8(v251);
              v253.i16[0] = vaddlv_u8(v253);
              if (v253.u32[0] > 1uLL)
              {
                unint64_t v254 = v252;
                if (*(void *)&v251 <= v252) {
                  unint64_t v254 = v252 % *(void *)&v251;
                }
              }
              else
              {
                unint64_t v254 = (*(void *)&v251 - 1) & v252;
              }
              uint64_t v255 = *(void **)(*(void *)&v8[1180] + 8 * v254);
              if (v255)
              {
                uint64_t v256 = (void *)*v255;
                if (v256)
                {
                  if (v253.u32[0] < 2uLL)
                  {
                    uint64_t v257 = *(void *)&v251 - 1;
                    while (1)
                    {
                      uint64_t v259 = v256[1];
                      if (v259 == v252)
                      {
                        if (v256[2] == v252) {
                          goto LABEL_389;
                        }
                      }
                      else if ((v259 & v257) != v254)
                      {
                        goto LABEL_392;
                      }
                      uint64_t v256 = (void *)*v256;
                      if (!v256) {
                        goto LABEL_392;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v258 = v256[1];
                    if (v258 == v252)
                    {
                      if (v256[2] == v252)
                      {
LABEL_389:
                        uint64_t v260 = v256[4];
                        if (!v260 || (uint64_t v261 = v260 - 1, (v256[4] = v261) == 0)) {
                          v256[3] = 0;
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (v258 >= *(void *)&v251) {
                        v258 %= *(void *)&v251;
                      }
                      if (v258 != v254) {
                        break;
                      }
                    }
                    uint64_t v256 = (void *)*v256;
                  }
                  while (v256);
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_392:
  if (v27)
  {
    unint64_t v262 = *v27;
    int8x8_t v263 = v8[1254];
    unint64_t v264 = (uint64_t)(*(void *)&v8[1255] - *(void *)&v263) >> 3;
    if (v262 < v264)
    {
      uint64_t v265 = *(void *)(*(void *)&v263 + 8 * v262);
      if (v265
        && HIDWORD(*v27) == HIDWORD(v265)
        && *(void *)&v8[1257] + 8 * v265 != *(void *)&v8[1258])
      {
        uint64_t v272 = *(void *)(*(void *)&v8[1260] + 8 * v265);
        uint64_t v273 = v272;
        if (v272 < v264)
        {
          unint64_t v274 = *(void *)(*(void *)&v263 + 8 * v272);
          unint64_t v275 = *(void *)(*(void *)&v263 + 8 * v272);
          BOOL v24 = v275 == 0;
          unint64_t v276 = HIDWORD(v274);
          unint64_t v277 = HIDWORD(v275);
          if (!v24 && v276 == v277)
          {
            double v279 = (char *)v8[1252];
            unint64_t v280 = (unint64_t)v8[1253];
            if ((unint64_t)v279 >= v280)
            {
              uint8x8_t v292 = (char *)v8[1251];
              uint64_t v293 = (v279 - v292) >> 3;
              unint64_t v294 = v293 + 1;
              if ((unint64_t)(v293 + 1) >> 61) {
                goto LABEL_463;
              }
              uint64_t v295 = v280 - (void)v292;
              if (v295 >> 2 > v294) {
                unint64_t v294 = v295 >> 2;
              }
              if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v296 = v294;
              }
              if (v296)
              {
                if (v296 >> 61) {
                  goto LABEL_464;
                }
                size_t v297 = operator new(8 * v296);
              }
              else
              {
                size_t v297 = 0;
              }
              unint64_t v304 = &v297[8 * v293];
              uint8x8_t v305 = &v297[8 * v296];
              *unint64_t v304 = v273;
              uint64_t v281 = v304 + 1;
              if (v279 != v292)
              {
                unint64_t v306 = v279 - v292 - 8;
                if (v306 < 0x58) {
                  goto LABEL_467;
                }
                if ((unint64_t)(v292 - v297) < 0x20) {
                  goto LABEL_467;
                }
                uint64_t v307 = (v306 >> 3) + 1;
                unint64_t v308 = &v297[8 * v293 - 16];
                uint64_t v309 = v279 - 16;
                uint64_t v310 = v307 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v311 = *(_OWORD *)v309;
                  *(v308 - 1) = *((_OWORD *)v309 - 1);
                  *unint64_t v308 = v311;
                  v308 -= 2;
                  v309 -= 32;
                  v310 -= 4;
                }
                while (v310);
                v304 -= v307 & 0x3FFFFFFFFFFFFFFCLL;
                v279 -= 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
                if (v307 != (v307 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_467:
                  do
                  {
                    uint64_t v312 = *((void *)v279 - 1);
                    v279 -= 8;
                    *--unint64_t v304 = v312;
                  }
                  while (v279 != v292);
                }
              }
              v8[1251] = (int8x8_t)v304;
              v8[1252] = (int8x8_t)v281;
              v8[1253] = (int8x8_t)v305;
              if (v292)
              {
                operator delete(v292);
                int8x8_t v263 = v8[1254];
              }
            }
            else
            {
              *(void *)double v279 = v273;
              uint64_t v281 = v279 + 8;
            }
            v8[1252] = (int8x8_t)v281;
            uint64_t v313 = *(void *)(*(void *)&v263 + 8 * v273);
            int8x8_t v314 = v8[1258];
            int8x8_t v315 = v8[1257];
            uint64_t v316 = *(void *)(*(void *)&v314 - *(void *)&v315 + *(void *)&v8[1260] - 8);
            uint64_t v317 = 8 * v313;
            uint64_t v318 = *(void *)(*(void *)&v315 + v317);
            *(void *)(*(void *)&v315 + v317) = *(void *)(*(void *)&v314 - 8);
            *(void *)(*(void *)&v314 - 8) = v318;
            *(_DWORD *)(*(void *)&v8[1254] + 8 * v316) = v313;
            int8x8_t v319 = v8[1260];
            int8x8_t v320 = (void *)v8[1261];
            uint64_t v321 = *(void *)(*(void *)&v319 + v317);
            uint64_t v322 = *--v320;
            *(void *)(*(void *)&v319 + v317) = v322;
            *int8x8_t v320 = v321;
            *(void *)&v8[1258] -= 8;
            v8[1261] = (int8x8_t)v320;
            *(_DWORD *)(*(void *)&v8[1254] + 8 * v273 + 4) = (((unint64_t)*(unsigned int *)(*(void *)&v8[1254] + 8 * v273 + 4) << 32)
                                                              + 0x100000000) >> 32;
            *(_DWORD *)(*(void *)&v8[1254] + 8 * v273) = (*(void *)&v8[1255] - *(void *)&v8[1254]) >> 3;
          }
        }
      }
    }
  }
  if (v38)
  {
    unint64_t v267 = *v38;
    int8x8_t v268 = v8[1232];
    unint64_t v269 = (uint64_t)(*(void *)&v8[1233] - *(void *)&v268) >> 3;
    if (v267 < v269)
    {
      uint64_t v270 = *(void *)(*(void *)&v268 + 8 * v267);
      if (v270
        && HIDWORD(*v38) == HIDWORD(v270)
        && *(void *)&v8[1235] + 8 * v270 != *(void *)&v8[1236])
      {
        uint64_t v282 = *(void *)(*(void *)&v8[1238] + 8 * v270);
        uint64_t v283 = v282;
        if (v282 < v269)
        {
          unint64_t v284 = *(void *)(*(void *)&v268 + 8 * v282);
          unint64_t v285 = *(void *)(*(void *)&v268 + 8 * v282);
          BOOL v24 = v285 == 0;
          unint64_t v286 = HIDWORD(v284);
          unint64_t v287 = HIDWORD(v285);
          if (!v24 && v286 == v287)
          {
            size_t v289 = (char *)v8[1230];
            unint64_t v290 = (unint64_t)v8[1231];
            if ((unint64_t)v289 < v290)
            {
              *(void *)size_t v289 = v283;
              unint64_t v291 = v289 + 8;
LABEL_462:
              v8[1230] = (int8x8_t)v291;
              uint64_t v332 = *(void *)(*(void *)&v268 + 8 * v283);
              int8x8_t v333 = v8[1236];
              int8x8_t v334 = v8[1235];
              uint64_t v335 = *(void *)(*(void *)&v333 - *(void *)&v334 + *(void *)&v8[1238] - 8);
              uint64_t v336 = 8 * v332;
              uint64_t v337 = *(void *)(*(void *)&v334 + v336);
              *(void *)(*(void *)&v334 + v336) = *(void *)(*(void *)&v333 - 8);
              *(void *)(*(void *)&v333 - 8) = v337;
              *(_DWORD *)(*(void *)&v8[1232] + 8 * v335) = v332;
              int8x8_t v338 = v8[1238];
              unint64_t v339 = (void *)v8[1239];
              uint64_t v340 = *(void *)(*(void *)&v338 + v336);
              uint64_t v341 = *--v339;
              *(void *)(*(void *)&v338 + v336) = v341;
              *unint64_t v339 = v340;
              *(void *)&v8[1236] -= 8;
              v8[1239] = (int8x8_t)v339;
              *(_DWORD *)(*(void *)&v8[1232] + 8 * v283 + 4) = (((unint64_t)*(unsigned int *)(*(void *)&v8[1232] + 8 * v283 + 4) << 32)
                                                                + 0x100000000) >> 32;
              *(_DWORD *)(*(void *)&v8[1232] + 8 * v283) = (*(void *)&v8[1233] - *(void *)&v8[1232]) >> 3;
              return;
            }
            float64x2_t v298 = (char *)v8[1229];
            uint64_t v299 = (v289 - v298) >> 3;
            unint64_t v300 = v299 + 1;
            if (!((unint64_t)(v299 + 1) >> 61))
            {
              uint64_t v301 = v290 - (void)v298;
              if (v301 >> 2 > v300) {
                unint64_t v300 = v301 >> 2;
              }
              if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v302 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v302 = v300;
              }
              if (!v302)
              {
                unint64_t v303 = 0;
LABEL_453:
                uint64_t v323 = &v303[8 * v299];
                uint64_t v324 = &v303[8 * v302];
                *uint64_t v323 = v283;
                unint64_t v291 = v323 + 1;
                if (v289 != v298)
                {
                  unint64_t v325 = v289 - v298 - 8;
                  if (v325 < 0x58) {
                    goto LABEL_468;
                  }
                  if ((unint64_t)(v298 - v303) < 0x20) {
                    goto LABEL_468;
                  }
                  uint64_t v326 = (v325 >> 3) + 1;
                  double v327 = &v303[8 * v299 - 16];
                  uint32x4_t v328 = v289 - 16;
                  uint64_t v329 = v326 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v330 = *(_OWORD *)v328;
                    *(v327 - 1) = *((_OWORD *)v328 - 1);
                    *double v327 = v330;
                    v327 -= 2;
                    v328 -= 32;
                    v329 -= 4;
                  }
                  while (v329);
                  v323 -= v326 & 0x3FFFFFFFFFFFFFFCLL;
                  v289 -= 8 * (v326 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v326 != (v326 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_468:
                    do
                    {
                      uint64_t v331 = *((void *)v289 - 1);
                      v289 -= 8;
                      *--uint64_t v323 = v331;
                    }
                    while (v289 != v298);
                  }
                }
                v8[1229] = (int8x8_t)v323;
                v8[1230] = (int8x8_t)v291;
                v8[1231] = (int8x8_t)v324;
                if (v298)
                {
                  operator delete(v298);
                  int8x8_t v268 = v8[1232];
                }
                goto LABEL_462;
              }
              if (!(v302 >> 61))
              {
                unint64_t v303 = operator new(8 * v302);
                goto LABEL_453;
              }
LABEL_464:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
LABEL_463:
            abort();
          }
        }
      }
    }
  }
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(int8x8_t *a1)
{
  uint64_t v2 = (void *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(a1);
  uint64_t v4 = v2[10];
  uint64_t v3 = v2[11];
  uint64_t v5 = v3 - v4;
  uint64_t v29 = (uint64_t)a1;
  if (v3 == v4)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new((unint64_t)v5 >> 1);
    unint64_t v7 = &v6[8 * (v5 >> 4)];
    uint64_t v8 = v6;
  }
  unint64_t v10 = (uint64_t *)v2[7];
  uint64_t v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    uint64_t v11 = v8;
    while (1)
    {
      uint64_t v12 = *v10;
      if (v11 >= v7) {
        break;
      }
      *(void *)uint64_t v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          unint64_t v27 = (unint64_t *)v8;
          do
          {
            unint64_t v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    uint64_t v13 = (v11 - v8) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    if ((v7 - v8) >> 2 > v14) {
      unint64_t v14 = (v7 - v8) >> 2;
    }
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[8 * v13];
    *(void *)unint64_t v17 = v12;
    uint64_t v18 = v17 + 8;
    if (v11 != v8)
    {
      unint64_t v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          unint64_t v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          unint64_t v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          uint64_t v22 = (v19 >> 3) + 1;
          unint64_t v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v23 = &v16[8 * v13 - 16];
          BOOL v24 = v11 - 16;
          uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v20 = v11;
        }
      }
      else
      {
        unint64_t v20 = v11;
      }
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    unint64_t v7 = &v16[8 * v15];
    if (v8) {
      operator delete(v8);
    }
    uint64_t v8 = v17;
    uint64_t v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1A1DF55E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(int8x8_t *a1)
{
  uint64_t v2 = (void *)gdc::Registry::storage<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(a1);
  uint64_t v4 = v2[10];
  uint64_t v3 = v2[11];
  uint64_t v5 = v3 - v4;
  uint64_t v29 = (uint64_t)a1;
  if (v3 == v4)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new((unint64_t)v5 >> 1);
    unint64_t v7 = &v6[8 * (v5 >> 4)];
    uint64_t v8 = v6;
  }
  unint64_t v10 = (uint64_t *)v2[7];
  uint64_t v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    uint64_t v11 = v8;
    while (1)
    {
      uint64_t v12 = *v10;
      if (v11 >= v7) {
        break;
      }
      *(void *)uint64_t v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          unint64_t v27 = (unint64_t *)v8;
          do
          {
            unint64_t v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    uint64_t v13 = (v11 - v8) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    if ((v7 - v8) >> 2 > v14) {
      unint64_t v14 = (v7 - v8) >> 2;
    }
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[8 * v13];
    *(void *)unint64_t v17 = v12;
    uint64_t v18 = v17 + 8;
    if (v11 != v8)
    {
      unint64_t v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          unint64_t v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          unint64_t v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          uint64_t v22 = (v19 >> 3) + 1;
          unint64_t v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v23 = &v16[8 * v13 - 16];
          BOOL v24 = v11 - 16;
          uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v20 = v11;
        }
      }
      else
      {
        unint64_t v20 = v11;
      }
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    unint64_t v7 = &v16[8 * v15];
    if (v8) {
      operator delete(v8);
    }
    uint64_t v8 = v17;
    uint64_t v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1A1DF5878(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase(uint64_t a1, void *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 < (*(void *)(a1 + 32) - v3) >> 3)
  {
    unint64_t v4 = *(void *)(v3 + 8 * v2);
    BOOL v6 = v4 == 0;
    unint64_t v5 = HIDWORD(v4);
    BOOL v6 = !v6 && HIDWORD(*a2) == v5;
    if (v6)
    {
      unint64_t v10 = *(unint64_t **)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = *(unint64_t **)a1;
        uint64_t v13 = (uint64_t)v10 - *(void *)a1;
        uint64_t v14 = v13 >> 3;
        unint64_t v15 = (v13 >> 3) + 1;
        if (v15 >> 61) {
          abort();
        }
        uint64_t v16 = v9 - (void)v12;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          if (v17 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v18 = operator new(8 * v17);
        }
        else
        {
          uint64_t v18 = 0;
        }
        unint64_t v19 = (unint64_t *)&v18[8 * v14];
        unint64_t v20 = &v18[8 * v17];
        *unint64_t v19 = v2;
        uint64_t v11 = v19 + 1;
        if (v10 != v12)
        {
          unint64_t v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58) {
            goto LABEL_44;
          }
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20) {
            goto LABEL_44;
          }
          uint64_t v22 = (v21 >> 3) + 1;
          uint64_t v23 = &v18[8 * v14 - 16];
          BOOL v24 = v10 - 2;
          uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            do
            {
              unint64_t v27 = *--v10;
              *--unint64_t v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v11;
        *(void *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          uint64_t v3 = *(void *)(a1 + 24);
        }
      }
      else
      {
        *unint64_t v10 = v2;
        uint64_t v11 = v10 + 1;
      }
      *(void *)(a1 + 8) = v11;
      uint64_t v28 = *(unsigned int *)(v3 + 8 * *(unsigned int *)a2);
      uint64_t v29 = *(void *)(a1 + 48);
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v51 = *(void *)(*(void *)(a1 + 72) + 0x6DB6DB6DB6DB6DB8 * ((unint64_t)(v30 - v29) >> 3) - 8);
      unint64_t v31 = (void *)(v29 + 56 * v28);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v34 = v31[2];
      uint64_t v49 = v31[3];
      v31[2] = 0;
      v31[3] = 0;
      v31[1] = 0;
      BOOL v35 = v31 + 4;
      long long v50 = *((_OWORD *)v31 + 2);
      uint64_t v36 = v31 + 6;
      uint64_t v37 = v31[6];
      v31[6] = 0;
      v31[5] = 0;
      v31[4] = 0;
      *unint64_t v31 = *(void *)(v30 - 56);
      *(_OWORD *)(v31 + 1) = *(_OWORD *)(v30 - 48);
      v31[3] = *(void *)(v30 - 32);
      *(void *)(v30 - 48) = 0;
      *(void *)(v30 - 40) = 0;
      *(void *)(v30 - 32) = 0;
      size_t v38 = (void *)v31[4];
      if (v38)
      {
        *(void *)(v29 + 56 * v28 + 40) = v38;
        operator delete(v38);
        *BOOL v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
      }
      *(_OWORD *)BOOL v35 = *(_OWORD *)(v30 - 24);
      *uint64_t v36 = *(void *)(v30 - 8);
      *(void *)(v30 - 24) = 0;
      *(void *)(v30 - 16) = 0;
      *(void *)(v30 - 8) = 0;
      *(void *)(v30 - 56) = v33;
      uint64_t v39 = *(void **)(v30 - 48);
      if (v39)
      {
        *(void *)(v30 - 40) = v39;
        operator delete(v39);
        uint64_t v40 = *(void **)(v30 - 24);
        *(void *)(v30 - 48) = v32;
        *(void *)(v30 - 40) = v34;
        *(void *)(v30 - 32) = v49;
        uint64_t v41 = v51;
        if (v40)
        {
          *(void *)(v30 - 16) = v40;
          operator delete(v40);
        }
      }
      else
      {
        *(void *)(v30 - 48) = v32;
        *(void *)(v30 - 40) = v34;
        *(void *)(v30 - 32) = v49;
        uint64_t v41 = v51;
      }
      *(_OWORD *)(v30 - 24) = v50;
      *(void *)(v30 - 8) = v37;
      *(_DWORD *)(*(void *)(a1 + 24) + 8 * v41) = v28;
      uint64_t v42 = *(void *)(a1 + 72);
      uint64_t v43 = *(void *)(a1 + 80);
      uint64_t v44 = *(void *)(v42 + 8 * v28);
      *(void *)(v42 + 8 * v28) = *(void *)(v43 - 8);
      *(void *)(v43 - 8) = v44;
      uint64_t v45 = *(void *)(a1 + 56);
      uint64_t v46 = *(void **)(v45 - 24);
      if (v46)
      {
        *(void *)(v45 - 16) = v46;
        operator delete(v46);
      }
      uint64_t v47 = *(void **)(v45 - 48);
      if (v47)
      {
        *(void *)(v45 - 40) = v47;
        operator delete(v47);
      }
      *(void *)(a1 + 56) = v45 - 56;
      *(void *)(a1 + 80) -= 8;
      uint64_t v48 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(void *)(a1 + 24) + v48 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(a1 + 24) + v48 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(void *)(a1 + 24) + v48) = (*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    unint64_t v5 = *(void ***)(*a1 + 8 * v4);
    if (v5)
    {
      BOOL v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          uint64_t v7 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            BOOL v6 = (void *)*v6;
            if (!v6) {
              return;
            }
          }
        }
        do
        {
          unint64_t v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v6);
              if (__p) {
                operator delete(__p);
              }
              return;
            }
          }
          else
          {
            if (v8 >= *(void *)&v2) {
              v8 %= *(void *)&v2;
            }
            if (v8 != v4) {
              return;
            }
          }
          BOOL v6 = (void *)*v6;
        }
        while (v6);
      }
    }
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PendingDeletion>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(char **a1, uint64_t a2, unint64_t a3, long long *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = (long long *)a3;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2 - (void)*a1;
  uint64_t v11 = v10 >> 4;
  uint64_t v12 = &(*a1)[v10 & 0xFFFFFFFFFFFFFFF0];
  uint64_t v13 = a1[2];
  if (a5 <= (v13 - v9) >> 4)
  {
    uint64_t v19 = (v9 - v12) >> 4;
    if (v19 >= a5)
    {
      uint64_t v20 = (long long *)(a3 + 16 * a5);
      uint64_t v22 = a1[1];
    }
    else
    {
      uint64_t v20 = (long long *)(a3 + 16 * v19);
      if (v20 == a4)
      {
        uint64_t v22 = a1[1];
      }
      else
      {
        unint64_t v21 = v20;
        uint64_t v22 = a1[1];
        do
        {
          long long v23 = *v21++;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 16;
        }
        while (v21 != a4);
      }
      a1[1] = v22;
      if (v9 - v12 < 1) {
        return;
      }
    }
    uint64_t v34 = &v12[16 * a5];
    BOOL v35 = &v22[-16 * a5];
    uint64_t v36 = v22;
    if (v35 < v9)
    {
      uint64_t v37 = &v22[-16 * a5];
      uint64_t v36 = v22;
      do
      {
        long long v38 = *(_OWORD *)v37;
        v37 += 16;
        *(_OWORD *)uint64_t v36 = v38;
        v36 += 16;
      }
      while (v37 < v9);
    }
    a1[1] = v36;
    if (v22 != v34)
    {
      int64_t v39 = v22 - v34;
      unint64_t v40 = v22 - v34 - 16;
      if (v40 < 0xD0
        || &v22[-(v39 & 0xFFFFFFFFFFFFFFF0)] < v35
        && &v8[v39 + (v10 & 0xFFFFFFFFFFFFFFF0) - (v39 & 0xFFFFFFFFFFFFFFF0)] < v22)
      {
        uint64_t v41 = v22;
        goto LABEL_41;
      }
      uint64_t v52 = (v40 >> 4) + 1;
      uint64_t v41 = &v22[-16 * (v52 & 0x1FFFFFFFFFFFFFFCLL)];
      BOOL v53 = (const double *)(v35 - 32);
      uint64_t v54 = (double *)(v22 - 32);
      uint64_t v55 = v52 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        float64x2x2_t v60 = vld2q_f64(v53);
        float v56 = v53 - 4;
        float64x2x2_t v62 = vld2q_f64(v56);
        vst2q_f64(v54, v60);
        BOOL v57 = v54 - 4;
        vst2q_f64(v57, v62);
        v54 -= 8;
        v53 -= 8;
        v55 -= 4;
      }
      while (v55);
      if (v52 != (v52 & 0x1FFFFFFFFFFFFFFCLL))
      {
        v35 -= 16 * (v52 & 0x1FFFFFFFFFFFFFFCLL);
LABEL_41:
        uint64_t v42 = v41 - 8;
        do
        {
          uint64_t v43 = *((void *)v35 - 2);
          v35 -= 16;
          *((void *)v42 - 1) = v43;
          *(void *)uint64_t v42 = *((void *)v35 + 1);
          v42 -= 16;
        }
        while (v35 != v12);
      }
    }
    if (v20 == (long long *)a3) {
      return;
    }
    unint64_t v44 = (unint64_t)v20 - a3 - 16;
    if (v44 >= 0xD0
      && ((unint64_t)v12 >= (v44 & 0xFFFFFFFFFFFFFFF0) + a3 + 16
       || (unint64_t)&v8[(v10 & 0xFFFFFFFFFFFFFFF0) + 16 + (v44 & 0xFFFFFFFFFFFFFFF0)] <= a3))
    {
      uint64_t v45 = (v44 >> 4) + 1;
      uint64_t v46 = 16 * (v45 & 0x1FFFFFFFFFFFFFFCLL);
      v12 += v46;
      uint64_t v47 = (const double *)(a3 + 32);
      uint64_t v48 = (double *)&v8[16 * v11 + 32];
      uint64_t v49 = v45 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = v47 - 4;
        float64x2x2_t v59 = vld2q_f64(v50);
        float64x2x2_t v61 = vld2q_f64(v47);
        uint64_t v51 = v48 - 4;
        vst2q_f64(v51, v59);
        vst2q_f64(v48, v61);
        v47 += 8;
        v48 += 8;
        v49 -= 4;
      }
      while (v49);
      if (v45 == (v45 & 0x1FFFFFFFFFFFFFFCLL)) {
        return;
      }
      uint64_t v6 = (long long *)(a3 + v46);
    }
    do
    {
      *(void *)uint64_t v12 = *(void *)v6;
      *((void *)v12 + 1) = *((void *)v6++ + 1);
      v12 += 16;
    }
    while (v6 != v20);
    return;
  }
  unint64_t v14 = a5 + ((v9 - v8) >> 4);
  if (v14 >> 60) {
    abort();
  }
  uint64_t v15 = v13 - v8;
  uint64_t v16 = v15 >> 3;
  if (v15 >> 3 <= v14) {
    uint64_t v16 = v14;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v16;
  }
  if (v17)
  {
    if (v17 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
  }
  else
  {
    uint64_t v18 = 0;
  }
  BOOL v24 = &v18[16 * v11];
  uint64_t v25 = 16 * a5;
  long long v26 = &v24[16 * a5];
  unint64_t v27 = v24;
  do
  {
    long long v28 = *v6++;
    *(_OWORD *)unint64_t v27 = v28;
    v27 += 16;
    v25 -= 16;
  }
  while (v25);
  uint64_t v29 = *a1;
  if (*a1 != v12)
  {
    uint64_t v30 = v12;
    do
    {
      *((_OWORD *)v24 - 1) = *((_OWORD *)v30 - 1);
      v24 -= 16;
      v30 -= 16;
    }
    while (v30 != v29);
    uint64_t v9 = a1[1];
  }
  for (uint64_t i = &v18[16 * v17]; v12 != v9; v26 += 16)
  {
    long long v32 = *(_OWORD *)v12;
    v12 += 16;
    *(_OWORD *)long long v26 = v32;
  }
  uint64_t v33 = *a1;
  *a1 = v24;
  a1[1] = v26;
  a1[2] = i;
  if (v33)
  {
    operator delete(v33);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = a2 - 2;
    uint64_t v11 = a2 - 1;
    uint64_t v12 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v109 = *v12;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                  return result;
                }
                *uint64_t v12 = *v10;
                *uint64_t v10 = v109;
                uint64_t v110 = v12[1];
                v12[1] = *v11;
                goto LABEL_188;
              case 3:
                uint64_t v111 = v12[2];
                unsigned int v112 = *(unsigned __int8 *)(*(void *)(v111 + 384) + 169);
                uint64_t v113 = *v12;
                uint64_t v114 = *v10;
                unsigned int v115 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
                if (v112 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
                {
                  if (v115 <= v112) {
                    return result;
                  }
                  v12[2] = v114;
                  *uint64_t v10 = v111;
                  uint64_t v158 = v12[3];
                  v12[3] = *v11;
                  *uint64_t v11 = v158;
                  uint64_t v159 = v12[2];
                  uint64_t v160 = *v12;
                  if (*(unsigned __int8 *)(*(void *)(v159 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                    return result;
                  }
                  *uint64_t v12 = v159;
                  v12[2] = v160;
                  uint64_t v116 = v12 + 1;
                  uint64_t v11 = v12 + 3;
                }
                else
                {
                  if (v115 <= v112)
                  {
                    uint64_t v116 = v12 + 3;
                    uint64_t v169 = v12[3];
                    uint64_t v170 = v12[1];
                    *uint64_t v12 = v111;
                    v12[1] = v169;
                    v12[2] = v113;
                    v12[3] = v170;
                    if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v113 + 384) + 169)) {
                      return result;
                    }
                    v12[2] = *v10;
                  }
                  else
                  {
                    uint64_t v116 = v12 + 1;
                    *uint64_t v12 = v114;
                  }
                  *uint64_t v10 = v113;
                }
                uint64_t v110 = *v116;
                *uint64_t v116 = *v11;
LABEL_188:
                *uint64_t v11 = v110;
                break;
              case 4:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, a2 - 2);
              case 5:
                return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            uint64_t v117 = v12 + 2;
            BOOL v119 = v12 == a2 || v117 == a2;
            if (a4)
            {
              if (!v119)
              {
                uint64_t v120 = 0;
                uint8x8_t v121 = v12;
                do
                {
                  unsigned int v123 = v117;
                  uint64_t v124 = v121[2];
                  uint64_t v125 = *v121;
                  if (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v121 + 384) + 169))
                  {
                    uint64_t v126 = v121[3];
                    uint64_t v127 = v120;
                    do
                    {
                      uint64_t v128 = (char *)v12 + v127;
                      uint64_t v129 = *(uint64_t *)((char *)v12 + v127 + 8);
                      *((void *)v128 + 2) = v125;
                      *((void *)v128 + 3) = v129;
                      if (!v127)
                      {
                        unint64_t v122 = v12;
                        goto LABEL_129;
                      }
                      uint64_t v125 = *((void *)v128 - 2);
                      v127 -= 16;
                    }
                    while (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v125 + 384) + 169));
                    unint64_t v122 = (uint64_t *)((char *)v12 + v127 + 16);
LABEL_129:
                    *unint64_t v122 = v124;
                    v122[1] = v126;
                  }
                  uint64_t v117 = v123 + 2;
                  v120 += 16;
                  uint8x8_t v121 = v123;
                }
                while (v123 + 2 != a2);
              }
            }
            else if (!v119)
            {
              uint64_t v161 = v12 + 3;
              do
              {
                double v162 = v117;
                uint64_t v163 = v9[2];
                uint64_t v164 = *v9;
                if (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v9 + 384) + 169))
                {
                  uint64_t v165 = v9[3];
                  unint64_t v166 = v161;
                  do
                  {
                    uint64_t v167 = v166;
                    *(v166 - 1) = v164;
                    uint64_t v168 = *(v166 - 2);
                    v166 -= 2;
                    *uint64_t v167 = v168;
                    uint64_t v164 = *(v167 - 5);
                  }
                  while (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v164 + 384) + 169));
                  *(v166 - 1) = v163;
                  uint64_t *v166 = v165;
                }
                uint64_t v117 = v162 + 2;
                v161 += 2;
                uint64_t v9 = v162;
              }
              while (v162 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v130 = (unint64_t)(v14 - 2) >> 1;
              int64_t v131 = v130;
              do
              {
                int64_t v132 = v131;
                if (v130 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  uint64_t v134 = &v12[2 * v133];
                  if (2 * v132 + 2 < v14)
                  {
                    unsigned int v135 = *(unsigned __int8 *)(*(void *)(*v134 + 384) + 169);
                    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169);
                    BOOL v137 = v135 > v136;
                    if (v135 <= v136) {
                      uint64_t v138 = *v134;
                    }
                    else {
                      uint64_t v138 = v134[2];
                    }
                    if (v137)
                    {
                      v134 += 2;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v138 = *v134;
                  }
                  double v139 = &v12[2 * v132];
                  uint64_t v140 = *v139;
                  uint64_t result = *(unsigned __int8 *)(*(void *)(*v139 + 384) + 169);
                  if (*(unsigned __int8 *)(*(void *)(v138 + 384) + 169) <= result)
                  {
                    uint64_t v141 = v139[1];
                    do
                    {
                      uint64_t result = (unint64_t)v139;
                      double v139 = v134;
                      *(void *)uint64_t result = v138;
                      *(void *)(result + 8) = v134[1];
                      if (v130 < v133) {
                        break;
                      }
                      uint64_t v142 = (2 * v133) | 1;
                      uint64_t v134 = &v12[2 * v142];
                      uint64_t v133 = 2 * v133 + 2;
                      if (v133 < v14)
                      {
                        uint64_t v138 = *v134;
                        if (*(unsigned __int8 *)(*(void *)(*v134 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169))
                        {
                          uint64_t v133 = v142;
                        }
                        else
                        {
                          uint64_t v138 = v134[2];
                          v134 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v138 = *v134;
                        uint64_t v133 = v142;
                      }
                      uint64_t result = *(unsigned __int8 *)(*(void *)(v138 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(void *)(v140 + 384) + 169));
                    *double v139 = v140;
                    v139[1] = v141;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v143 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v144 = 0;
                uint64_t v145 = *v12;
                uint64_t v146 = v12[1];
                uint64_t v147 = v12;
                do
                {
                  uint64_t v149 = &v147[2 * v144 + 2];
                  uint64_t v150 = (2 * v144) | 1;
                  uint64_t v144 = 2 * v144 + 2;
                  if (v144 < v143)
                  {
                    uint64_t v148 = *v149;
                    uint64_t result = (unint64_t)(v149 + 2);
                    if (*(unsigned __int8 *)(*(void *)(*v149 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v149[2] + 384) + 169))
                    {
                      uint64_t v144 = v150;
                    }
                    else
                    {
                      uint64_t v148 = v149[2];
                      v149 += 2;
                    }
                  }
                  else
                  {
                    uint64_t v148 = *v149;
                    uint64_t v144 = v150;
                  }
                  *uint64_t v147 = v148;
                  v147[1] = v149[1];
                  uint64_t v147 = v149;
                }
                while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                if (v149 == a2 - 2)
                {
                  *uint64_t v149 = v145;
                  v149[1] = v146;
                }
                else
                {
                  *uint64_t v149 = *(a2 - 2);
                  v149[1] = *(a2 - 1);
                  *(a2 - 2) = v145;
                  *(a2 - 1) = v146;
                  uint64_t v151 = (char *)v149 - (char *)v12 + 16;
                  if (v151 >= 17)
                  {
                    unint64_t v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                    uint64_t v153 = &v12[2 * v152];
                    uint64_t v154 = *v153;
                    uint64_t v155 = *v149;
                    if (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v149 + 384) + 169))
                    {
                      uint64_t v156 = v149[1];
                      do
                      {
                        uint64_t v157 = v149;
                        uint64_t v149 = v153;
                        *uint64_t v157 = v154;
                        v157[1] = v153[1];
                        if (!v152) {
                          break;
                        }
                        unint64_t v152 = (v152 - 1) >> 1;
                        uint64_t v153 = &v12[2 * v152];
                        uint64_t v154 = *v153;
                      }
                      while (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v155 + 384) + 169));
                      *uint64_t v149 = v155;
                      v149[1] = v156;
                    }
                  }
                }
                a2 -= 2;
                BOOL v137 = v143-- <= 2;
              }
              while (!v137);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
          uint64_t v17 = *v10;
          unsigned int v18 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
          if ((unint64_t)v13 >= 0x801)
          {
            uint64_t v19 = *v16;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
            uint64_t v21 = *v12;
            if (v20 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
            {
              if (v18 <= v20
                || (uint64_t *v16 = v17,
                    *uint64_t v10 = v19,
                    long long v28 = v16 + 1,
                    uint64_t v27 = v16[1],
                    v16[1] = *v11,
                    *uint64_t v11 = v27,
                    uint64_t v29 = *v12,
                    *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)))
              {
LABEL_24:
                uint64_t v36 = &v12[2 * v15];
                uint64_t v39 = *(v36 - 2);
                uint64_t v37 = v36 - 2;
                uint64_t v38 = v39;
                unsigned int v40 = *(unsigned __int8 *)(*(void *)(v39 + 384) + 169);
                uint64_t v41 = v12[2];
                uint64_t v42 = *(a2 - 4);
                unsigned int v43 = *(unsigned __int8 *)(*(void *)(v42 + 384) + 169);
                if (v40 <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169))
                {
                  if (v43 <= v40
                    || (*uint64_t v37 = v42,
                        *(a2 - 4) = v38,
                        uint64_t v45 = v37 + 1,
                        uint64_t v46 = v37[1],
                        v37[1] = *(a2 - 3),
                        *(a2 - 3) = v46,
                        uint64_t v47 = v12[2],
                        *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v47 + 384) + 169)))
                  {
LABEL_37:
                    uint64_t v54 = &v12[2 * v15];
                    uint64_t v57 = v54[2];
                    uint64_t v55 = v54 + 2;
                    uint64_t v56 = v57;
                    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 384) + 169);
                    uint64_t v59 = v12[4];
                    uint64_t v60 = *(a2 - 6);
                    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v60 + 384) + 169);
                    if (v58 <= *(unsigned __int8 *)(*(void *)(v59 + 384) + 169))
                    {
                      if (v61 > v58)
                      {
                        *uint64_t v55 = v60;
                        *(a2 - 6) = v56;
                        unint64_t v64 = v55 + 1;
                        uint64_t v63 = v55[1];
                        v55[1] = *(a2 - 5);
                        *(a2 - 5) = v63;
                        uint64_t v56 = *v55;
                        unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        uint64_t v65 = v12[4];
                        if (v58 > *(unsigned __int8 *)(*(void *)(v65 + 384) + 169))
                        {
                          v12[4] = v56;
                          *uint64_t v55 = v65;
                          float64x2x2_t v62 = v12 + 5;
LABEL_46:
                          uint64_t v69 = *v62;
                          *float64x2x2_t v62 = *v64;
                          *unint64_t v64 = v69;
                          uint64_t v56 = *v55;
                          unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v61 > v58)
                      {
                        float64x2x2_t v62 = v12 + 5;
                        v12[4] = v60;
LABEL_45:
                        *(a2 - 6) = v59;
                        unint64_t v64 = a2 - 5;
                        goto LABEL_46;
                      }
                      float64x2x2_t v62 = v55 + 1;
                      uint64_t v66 = v55[1];
                      uint64_t v67 = v12[5];
                      v12[4] = v56;
                      v12[5] = v66;
                      *uint64_t v55 = v59;
                      v55[1] = v67;
                      uint64_t v68 = *(a2 - 6);
                      unsigned int v58 = *(unsigned __int8 *)(*(void *)(v59 + 384) + 169);
                      if (*(unsigned __int8 *)(*(void *)(v68 + 384) + 169) > v58)
                      {
                        *uint64_t v55 = v68;
                        goto LABEL_45;
                      }
                      uint64_t v56 = v59;
                    }
                    uint64_t v70 = *v16;
                    unsigned int v71 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
                    uint64_t v72 = *v37;
                    if (v71 <= *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169))
                    {
                      if (v58 <= v71)
                      {
LABEL_57:
                        uint64_t v80 = *v12;
                        *uint64_t v12 = v70;
                        long long v26 = v12 + 1;
                        uint64_t *v16 = v80;
                        long long v32 = v16 + 1;
                        goto LABEL_58;
                      }
                      uint64_t *v16 = v56;
                      int8x8_t v75 = v16 + 1;
                      uint64_t v76 = v16[1];
                      v16[1] = v55[1];
                      *uint64_t v55 = v70;
                      v55[1] = v76;
                      if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                      {
                        uint64_t v70 = v56;
                        goto LABEL_57;
                      }
                      *uint64_t v37 = v56;
                      BOOL v73 = v37 + 1;
                      uint64_t *v16 = v72;
                    }
                    else
                    {
                      if (v58 <= v71)
                      {
                        uint64_t *v16 = v72;
                        uint64_t v77 = v16[1];
                        uint64_t v78 = v37[1];
                        *uint64_t v37 = v70;
                        v37[1] = v77;
                        v16[1] = v78;
                        if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                        {
                          uint64_t v70 = v72;
                          goto LABEL_57;
                        }
                        uint64_t *v16 = v56;
                        *uint64_t v55 = v72;
                        uint64_t v74 = v55 + 1;
                        BOOL v73 = v16 + 1;
                      }
                      else
                      {
                        *uint64_t v37 = v56;
                        BOOL v73 = v37 + 1;
                        *uint64_t v55 = v72;
                        uint64_t v74 = v55 + 1;
                      }
                      int8x8_t v75 = v74;
                    }
                    uint64_t v79 = *v73;
                    *BOOL v73 = *v75;
                    *int8x8_t v75 = v79;
                    uint64_t v70 = *v16;
                    goto LABEL_57;
                  }
                  v12[2] = *v37;
                  *uint64_t v37 = v47;
                  unint64_t v44 = v12 + 3;
                }
                else
                {
                  if (v43 <= v40)
                  {
                    unint64_t v44 = v37 + 1;
                    uint64_t v50 = v37[1];
                    uint64_t v51 = v12[3];
                    v12[2] = v38;
                    v12[3] = v50;
                    *uint64_t v37 = v41;
                    v37[1] = v51;
                    uint64_t v52 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(void *)(v52 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169)) {
                      goto LABEL_37;
                    }
                    *uint64_t v37 = v52;
                  }
                  else
                  {
                    unint64_t v44 = v12 + 3;
                    v12[2] = v42;
                  }
                  *(a2 - 4) = v41;
                  uint64_t v45 = a2 - 3;
                }
                uint64_t v53 = *v44;
                uint64_t *v44 = *v45;
                *uint64_t v45 = v53;
                goto LABEL_37;
              }
              *uint64_t v12 = *v16;
              uint64_t v22 = v12 + 1;
              uint64_t *v16 = v29;
            }
            else
            {
              if (v18 <= v20)
              {
                uint64_t v22 = v16 + 1;
                uint64_t v33 = v16[1];
                uint64_t v34 = v12[1];
                *uint64_t v12 = v19;
                v12[1] = v33;
                uint64_t *v16 = v21;
                v16[1] = v34;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v21 + 384) + 169)) {
                  goto LABEL_24;
                }
                uint64_t *v16 = *v10;
              }
              else
              {
                uint64_t v22 = v12 + 1;
                *uint64_t v12 = v17;
              }
              *uint64_t v10 = v21;
              long long v28 = a2 - 1;
            }
            uint64_t v35 = *v22;
            *uint64_t v22 = *v28;
            *long long v28 = v35;
            goto LABEL_24;
          }
          uint64_t v23 = *v12;
          unsigned int v24 = *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169);
          uint64_t v25 = *v16;
          if (v24 <= *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169)) {
            break;
          }
          if (v18 > v24)
          {
            long long v26 = v16 + 1;
            uint64_t *v16 = v17;
LABEL_32:
            *uint64_t v10 = v25;
            long long v32 = a2 - 1;
            goto LABEL_58;
          }
          long long v26 = v12 + 1;
          uint64_t v48 = v12[1];
          uint64_t v49 = v16[1];
          uint64_t *v16 = v23;
          v16[1] = v48;
          *uint64_t v12 = v25;
          v12[1] = v49;
          if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v25 + 384) + 169))
          {
            *uint64_t v12 = *v10;
            goto LABEL_32;
          }
          uint64_t v23 = v25;
          --a3;
          if (a4) {
            goto LABEL_60;
          }
LABEL_62:
          unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
          if (*(unsigned __int8 *)(*(void *)(*(v12 - 2) + 384) + 169) > v82) {
            goto LABEL_63;
          }
          if (v82 > *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169))
          {
            do
            {
              uint64_t v98 = v12[2];
              v12 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(v98 + 384) + 169));
          }
          else
          {
            uint8x8_t v99 = v12 + 2;
            do
            {
              uint64_t v12 = v99;
              if (v99 >= a2) {
                break;
              }
              v99 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169));
          }
          unint64_t v100 = a2;
          if (v12 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = *(v100 - 2);
              v100 -= 2;
            }
            while (v82 > *(unsigned __int8 *)(*(void *)(v101 + 384) + 169));
          }
          uint64_t v102 = v9[1];
          if (v12 < v100)
          {
            uint64_t v103 = *v12;
            uint64_t v104 = *v100;
            do
            {
              *uint64_t v12 = v104;
              *unint64_t v100 = v103;
              uint64_t v105 = v12[1];
              v12[1] = v100[1];
              v100[1] = v105;
              unsigned int v106 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
              do
              {
                uint64_t v107 = v12[2];
                v12 += 2;
                uint64_t v103 = v107;
              }
              while (v106 <= *(unsigned __int8 *)(*(void *)(v107 + 384) + 169));
              do
              {
                uint64_t v108 = *(v100 - 2);
                v100 -= 2;
                uint64_t v104 = v108;
              }
              while (v106 > *(unsigned __int8 *)(*(void *)(v108 + 384) + 169));
            }
            while (v12 < v100);
          }
          BOOL v4 = v12 - 2 >= v9;
          BOOL v5 = v12 - 2 == v9;
          if (v12 - 2 != v9)
          {
            *uint64_t v9 = *(v12 - 2);
            v9[1] = *(v12 - 1);
          }
          a4 = 0;
          *(v12 - 2) = v23;
          *(v12 - 1) = v102;
        }
        if (v18 > v24)
        {
          *uint64_t v12 = v17;
          *uint64_t v10 = v23;
          uint64_t v30 = v12[1];
          v12[1] = *v11;
          *uint64_t v11 = v30;
          uint64_t v23 = *v12;
          uint64_t v31 = *v16;
          if (*(unsigned __int8 *)(*(void *)(*v12 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169))
          {
            uint64_t *v16 = v23;
            *uint64_t v12 = v31;
            long long v26 = v16 + 1;
            long long v32 = v12 + 1;
LABEL_58:
            uint64_t v81 = *v26;
            *long long v26 = *v32;
            *long long v32 = v81;
            uint64_t v23 = *v12;
          }
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_60:
        unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
LABEL_63:
        uint64_t v83 = v12[1];
        uint64_t v84 = v12;
        do
        {
          uint64_t v85 = v84;
          uint64_t v87 = v84[2];
          v84 += 2;
          uint64_t v86 = v87;
        }
        while (*(unsigned __int8 *)(*(void *)(v87 + 384) + 169) > v82);
        uint64_t v88 = a2;
        if (v85 == v12)
        {
          uint64_t v88 = a2;
          do
          {
            if (v84 >= v88) {
              break;
            }
            uint64_t v90 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v90 + 384) + 169) <= v82);
        }
        else
        {
          do
          {
            uint64_t v89 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v89 + 384) + 169) <= v82);
        }
        if (v84 < v88)
        {
          uint64_t v91 = *v88;
          uint64_t v12 = v84;
          uint64_t v92 = v88;
          do
          {
            *uint64_t v12 = v91;
            *uint64_t v92 = v86;
            uint64_t v93 = v12[1];
            v12[1] = v92[1];
            v92[1] = v93;
            unsigned int v94 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
            do
            {
              uint64_t v95 = v12[2];
              v12 += 2;
              uint64_t v86 = v95;
            }
            while (*(unsigned __int8 *)(*(void *)(v95 + 384) + 169) > v94);
            do
            {
              uint64_t v96 = *(v92 - 2);
              v92 -= 2;
              uint64_t v91 = v96;
            }
            while (*(unsigned __int8 *)(*(void *)(v96 + 384) + 169) <= v94);
          }
          while (v12 < v92);
        }
        else
        {
          uint64_t v12 = v84;
        }
        if (v12 - 2 != v9)
        {
          *uint64_t v9 = *(v12 - 2);
          v9[1] = *(v12 - 1);
        }
        *(v12 - 2) = v23;
        *(v12 - 1) = v83;
        if (v84 >= v88) {
          break;
        }
LABEL_83:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v9, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v9, v12 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, a2);
      if (result) {
        break;
      }
      if (!v97) {
        goto LABEL_83;
      }
    }
    a2 = v12 - 2;
    if (!v97) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  unsigned int v5 = *(unsigned __int8 *)(*(void *)(*a2 + 384) + 169);
  uint64_t v6 = *result;
  uint64_t v7 = *a3;
  unsigned int v8 = *(unsigned __int8 *)(*(void *)(*a3 + 384) + 169);
  if (v5 <= *(unsigned __int8 *)(*(void *)(*result + 384) + 169))
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v4;
      uint64_t v11 = a2 + 1;
      uint64_t v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      uint64_t v12 = *result;
      if (*(unsigned __int8 *)(*(void *)(*a2 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*result + 384) + 169))
      {
        *uint64_t result = *a2;
        uint64_t v9 = result + 1;
        *a2 = v12;
LABEL_10:
        uint64_t v14 = *v9;
        *uint64_t v9 = *v11;
        *uint64_t v11 = v14;
      }
    }
  }
  else
  {
    if (v8 > v5)
    {
      uint64_t v9 = result + 1;
      *uint64_t result = v7;
LABEL_9:
      *a3 = v6;
      uint64_t v11 = a3 + 1;
      goto LABEL_10;
    }
    *uint64_t result = v4;
    *a2 = v6;
    uint64_t v9 = a2 + 1;
    uint64_t v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    uint64_t v6 = *a2;
    if (*(unsigned __int8 *)(*(void *)(*a3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a2 + 384)
                                                                                                 + 169))
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  uint64_t v15 = *a3;
  if (*(unsigned __int8 *)(*(void *)(*a4 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a3 + 384)
                                                                                               + 169))
  {
    *a3 = *a4;
    *a4 = v15;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    if (*(unsigned __int8 *)(*(void *)(*a3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a2 + 384)
                                                                                                 + 169))
    {
      *a2 = *a3;
      *a3 = v17;
      uint64_t v18 = a2[1];
      a2[1] = a3[1];
      a3[1] = v18;
      uint64_t v19 = *result;
      if (*(unsigned __int8 *)(*(void *)(*a2 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*result + 384) + 169))
      {
        *uint64_t result = *a2;
        *a2 = v19;
        uint64_t v20 = result[1];
        result[1] = a2[1];
        a2[1] = v20;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (*(unsigned __int8 *)(*(void *)(*a5 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a4 + 384)
                                                                                               + 169))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t v13 = *a3;
    if (*(unsigned __int8 *)(*(void *)(*a4 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a3 + 384)
                                                                                                 + 169))
    {
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      uint64_t v15 = *a2;
      if (*(unsigned __int8 *)(*(void *)(*a3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a2 + 384) + 169))
      {
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        uint64_t v17 = *a1;
        if (*(unsigned __int8 *)(*(void *)(*a2 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 2);
      uint64_t v4 = *a1;
      if (*(unsigned __int8 *)(*(void *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        uint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v6 = a1[2];
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v6 + 384) + 169);
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 2);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          uint64_t v11 = a1 + 3;
          uint64_t v26 = a1[3];
          uint64_t v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          uint64_t v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(void *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v8 + 384) + 169)) {
            return 1;
          }
          a1[2] = v28;
        }
        else
        {
          uint64_t v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        uint64_t v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        uint64_t v20 = a1 + 3;
        uint64_t v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v21 = a1[2];
        uint64_t v22 = *a1;
        if (*(unsigned __int8 *)(*(void *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          uint64_t v11 = a1 + 1;
LABEL_21:
          uint64_t v29 = *v11;
          *uint64_t v11 = *v20;
          *uint64_t v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[2];
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(v14 + 384) + 169);
      uint64_t v16 = *a1;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          uint64_t v18 = a1 + 3;
          uint64_t v30 = a1[3];
          uint64_t v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v16 + 384) + 169)) {
            goto LABEL_26;
          }
          a1[2] = v13;
        }
        else
        {
          uint64_t v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        unsigned int v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        unsigned int v24 = a1 + 3;
        uint64_t v23 = a1[3];
        uint64_t v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          uint64_t v18 = a1 + 1;
LABEL_25:
          uint64_t v32 = *v18;
          *uint64_t v18 = *v24;
          *unsigned int v24 = v32;
        }
      }
LABEL_26:
      uint64_t v33 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        uint64_t v37 = *v33;
        uint64_t v38 = *v12;
        if (*(unsigned __int8 *)(*(void *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
        {
          uint64_t v39 = v33[1];
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = (uint64_t *)((char *)a1 + v40);
            uint64_t v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              uint64_t v36 = a1;
              goto LABEL_29;
            }
            uint64_t v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(void *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v38 + 384) + 169));
          uint64_t v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *uint64_t v36 = v37;
          v36[1] = v39;
          if (++v35 == 8) {
            return v33 + 2 == a2;
          }
        }
        uint64_t v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2) {
          return 1;
        }
      }
  }
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xF20ACC1C64F7EF84 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3) {
      uint64_t v3 = 0x3070CB6B3C7F21D3 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v11 = 0x9052DC4F017D3735;
    if (a2 <= 0x9052DC4F017D3735) {
      unint64_t v11 = 0x9052DC4F017D3735 % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & 0x9052DC4F017D3735;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x9052DC4F017D3735)
      {
        if (v13[2] == 0x9052DC4F017D3735) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x9052DC4F017D3735)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x9052DC4F017D3735)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x9052DC4F017D3735) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF20ACC1C64F7EF84)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)33>>>>::_allocateContext()
{
}

void sub_1A1DF7B48(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)33>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)33>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555CF8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)33>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555CF8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequestReset>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequestReset>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF542B10;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t *SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = (uint64_t)v3;
    operator delete(v3);
  }
  unint64_t v4 = (unsigned char *)a1[6];
  if (v4)
  {
    do
    {
      if (v4[112]) {
        v4[112] = 0;
      }
      uint64_t v9 = *(unsigned char **)v4;
      uint64_t v10 = (void *)*((void *)v4 + 4);
      if (v10 != *((void **)v4 + 6)) {
        free(v10);
      }
      operator delete(v4);
      unint64_t v4 = v9;
    }
    while (v9);
  }
  uint64_t v5 = (void *)a1[4];
  a1[4] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = (uint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    geo::Pool<md::DaVinciGroundRenderable>::disposeElements(v7);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v7 + 8));
    MEMORY[0x1A6239270](v7, 0x1020C407A7143E5);
  }
  return a1;
}

void sub_1A1DF7E84(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)33,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF542B10;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, void *a4)
{
  uint64_t v155 = *a3;
  char v7 = *(int8x8_t **)(a1 + 120);
  uint64_t v8 = (uint64_t **)*((void *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v165 = 0;
  char v9 = *v8;
  if (*v8 != v8[1] && *v9 != 0x22D45F5AAD4BF408)
  {
    uint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    char v9 = v10 - 5;
  }
  uint64_t v12 = (void (***)(void))v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v160 = v8;
  (**v12)(v12);
  uint64_t v157 = a2;
  uint64_t v158 = v7;
  uint64_t v162 = a1;
  uint64_t v151 = a4;
  unint64_t v14 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(v7);
  uint64_t v15 = v14[7];
  uint64_t v161 = v14[8];
  uint64_t v16 = a1;
  if (v15 != v161)
  {
    uint64_t v17 = a1 + 168;
    uint64_t v18 = v14[10];
    uint64_t v163 = (char **)(v162 + 232);
    while (1)
    {
      unsigned int v24 = *(uint64_t **)(v16 + 144);
      uint64_t v25 = *(uint64_t **)(v16 + 152);
      *(void *)&v168[0] = v18;
      *((void *)&v168[0] + 1) = v17;
LABEL_17:
      while (v24 != v25)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v24))
        {
          while (1)
          {
            v25 -= 2;
            if (v25 == v24) {
              goto LABEL_23;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v25))
            {
              uint64_t v26 = *v24;
              *unsigned int v24 = *v25;
              *uint64_t v25 = v26;
              uint64_t v27 = v24[1];
              v24[1] = v25[1];
              v25[1] = v27;
              v24 += 2;
              goto LABEL_17;
            }
          }
        }
        v24 += 2;
      }
LABEL_23:
      uint64_t v29 = *(char **)(v162 + 144);
      uint64_t v28 = *(char **)(v162 + 152);
      *(void *)&v168[0] = v18;
      *((void *)&v168[0] + 1) = v17;
LABEL_24:
      while (v29 != v28)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v29))
        {
          while (1)
          {
            v28 -= 16;
            if (v28 == v29) {
              break;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v28))
            {
              uint64_t v30 = *(void *)v29;
              *(void *)uint64_t v29 = *(void *)v28;
              *(void *)uint64_t v28 = v30;
              uint64_t v31 = *((void *)v29 + 1);
              *((void *)v29 + 1) = *((void *)v28 + 1);
              *((void *)v28 + 1) = v31;
              v29 += 16;
              goto LABEL_24;
            }
          }
          uint64_t v28 = v29;
          break;
        }
        v29 += 16;
      }
      uint64_t v32 = *(long long **)(v162 + 152);
      int64_t v33 = (char *)v32 - v28;
      uint64_t v34 = ((char *)v32 - v28) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v163, *(void *)(v162 + 240), (unint64_t)v28, v32, v34);
      uint64_t v35 = v162;
      if (v28 == (char *)v32) {
        goto LABEL_38;
      }
      uint64_t v37 = *(void *)(v162 + 144);
      uint64_t v36 = *(double **)(v162 + 152);
      unint64_t v38 = (unint64_t)&v28[-v37];
      uint64_t v39 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      uint64_t v40 = &v39[2 * v34];
      if (v40 != v36) {
        break;
      }
LABEL_37:
      uint64_t v35 = v162;
      *(void *)(v162 + 152) = v39;
LABEL_38:
      unint64_t v44 = *(char **)(v35 + 232);
      uint64_t v19 = *(char **)(v35 + 240);
      if (v19 != v44)
      {
        do
        {
          uint64_t v45 = (char *)__p[1];
          if (__p[1] >= (void *)v165)
          {
            uint64_t v47 = (char *)__p[0];
            int64_t v48 = (char *)__p[1] - (char *)__p[0];
            int64_t v49 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61) {
              abort();
            }
            uint64_t v51 = v165 - (unint64_t)__p[0];
            if ((uint64_t)(v165 - (unint64_t)__p[0]) >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v53 = operator new(8 * v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            void *v54 = *((void *)v44 + 1);
            uint64_t v46 = v54 + 1;
            if (v45 == v47)
            {
              uint64_t v47 = v45;
            }
            else
            {
              unint64_t v55 = v45 - 8 - v47;
              if (v55 < 0x58) {
                goto LABEL_220;
              }
              if ((unint64_t)(v45 - &v53[v48]) < 0x20) {
                goto LABEL_220;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              uint64_t v57 = &v53[8 * v49 - 16];
              unsigned int v58 = v45 - 16;
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *uint64_t v57 = v60;
                v57 -= 2;
                v58 -= 32;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v45 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_220:
                do
                {
                  uint64_t v61 = *((void *)v45 - 1);
                  v45 -= 8;
                  *--uint64_t v54 = v61;
                }
                while (v45 != v47);
                uint64_t v47 = (char *)__p[0];
              }
            }
            __p[0] = v54;
            __p[1] = v46;
            *(void *)&long long v165 = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)__p[1] = *((void *)v44 + 1);
            uint64_t v46 = v45 + 8;
          }
          __p[1] = v46;
          float64x2x2_t v62 = *(void (****)(void))v44;
          if (*(void *)v44)
          {
            uint64_t v63 = *(void *)(v162 + 136);
            if (*(void *)(v63 + 16))
            {
              (**v62)(*(void *)v44);
              *float64x2x2_t v62 = *(void (***)(void))(v63 + 40);
              *(void *)(v63 + 40) = v62;
            }
          }
          v44 += 16;
        }
        while (v44 != v19);
        uint64_t v19 = *v163;
      }
      uint64_t v16 = v162;
      unint64_t v20 = *(void *)(v162 + 144);
      uint64_t v21 = *(uint64_t **)(v162 + 152);
      unint64_t v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
      *(void *)(v162 + 240) = v19;
      if (v21 == (uint64_t *)v20) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v20, v21, v23, 1);
      v18 += 24;
      v15 += 8;
      uint64_t v17 = v162 + 168;
      if (v15 == v161) {
        goto LABEL_108;
      }
    }
    unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v42 = (unint64_t)v36 + -(v38 & 0xFFFFFFFFFFFFFFF0) - v37 - v33 - 16;
    if (v42 >= 0x270)
    {
      unint64_t v64 = v41 + (v42 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v65 = v37 + (v64 | 8);
      unint64_t v66 = v37 + (v41 | 8);
      unint64_t v67 = v64 + v37 + 16;
      uint64_t v68 = v33 + v41 + v37;
      uint64_t v69 = v68 + (v42 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v70 = v69 + 8;
      unint64_t v71 = v68 + 8;
      unint64_t v72 = v69 + 16;
      BOOL v74 = (unint64_t)v39 < v69 + 8 && (unint64_t)v40 < v65;
      BOOL v76 = (unint64_t)v39 < v72 && v71 < v65;
      BOOL v78 = v66 < v70 && (unint64_t)v40 < v67;
      BOOL v80 = v66 < v72 && v71 < v67;
      if (v66 >= v65 || (unint64_t)v39 >= v67)
      {
        if (v74)
        {
          unsigned int v43 = v39;
        }
        else if (v76)
        {
          unsigned int v43 = v39;
        }
        else if (v78)
        {
          unsigned int v43 = v39;
        }
        else if (v80)
        {
          unsigned int v43 = v39;
        }
        else
        {
          uint64_t v82 = (v42 >> 4) + 1;
          uint64_t v83 = 2 * (v82 & 0x1FFFFFFFFFFFFFFCLL);
          unsigned int v43 = &v39[v83];
          uint64_t v84 = v82 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v85 = &v39[2 * v34];
            float64x2x2_t v170 = vld2q_f64(v85);
            v85 += 4;
            float64x2x2_t v172 = vld2q_f64(v85);
            uint64_t v86 = v39 + 8;
            vst2q_f64(v39, v170);
            uint64_t v87 = v39 + 4;
            vst2q_f64(v87, v172);
            uint64_t v39 = v86;
            v84 -= 4;
          }
          while (v84);
          if (v82 == (v82 & 0x1FFFFFFFFFFFFFFCLL)) {
            goto LABEL_36;
          }
          uint64_t v40 = (double *)((char *)v40 + v83 * 8);
        }
      }
      else
      {
        unsigned int v43 = v39;
      }
    }
    else
    {
      unsigned int v43 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *unsigned int v43 = *v40;
      v43[1] = v40[1];
      v43 += 2;
      v40 += 2;
    }
    while (v40 != v36);
LABEL_36:
    uint64_t v39 = v43;
    goto LABEL_37;
  }
LABEL_108:
  uint64_t v88 = *v160;
  uint64_t v89 = v160[1];
  if (*v160 == v89)
  {
    uint64_t v90 = v162;
    uint64_t v91 = v158;
  }
  else
  {
    uint64_t v90 = v162;
    uint64_t v91 = v158;
    while (*v88 != 0x41D4E9297E100630)
    {
      v88 += 5;
      if (v88 == v89) {
        goto LABEL_118;
      }
    }
  }
  if (v88 != v89)
  {
    uint64_t v92 = (std::__shared_weak_count *)v88[4];
    if (v92)
    {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
LABEL_118:
  uint64_t v93 = *v160;
  unsigned int v94 = v160[1];
  if (*v160 != v94)
  {
    while (*v93 != 0x4EDAD23DFB014132)
    {
      v93 += 5;
      if (v93 == v94) {
        goto LABEL_126;
      }
    }
  }
  if (v93 != v94)
  {
    uint64_t v95 = (std::__shared_weak_count *)v93[4];
    if (v95)
    {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
LABEL_126:
  uint64_t v96 = *v160;
  BOOL v97 = v160[1];
  if (*v160 != v97)
  {
    while (*v96 != 0x348A0B0E758C07C2)
    {
      v96 += 5;
      if (v96 == v97) {
        goto LABEL_134;
      }
    }
  }
  if (v96 != v97)
  {
    uint64_t v98 = (std::__shared_weak_count *)v96[4];
    if (v98)
    {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
LABEL_134:
  uint8x8_t v99 = __p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v100 = 0;
    uint64_t v101 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v160, v91, v99[v100++]);
      uint8x8_t v99 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v100);
    while (v101 != __p[1])
    {
      unint64_t v102 = *v101++;
      gdc::Registry::destroy((uint64_t)v91, v102);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v91);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v91);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v156 = *(unsigned __int8 *)(md::LayoutContext::frameState(v157) + 128);
  uint64_t v103 = *(int8x8_t **)(v90 + 120);
  uint64_t v153 = *((void *)v157 + 2);
  uint64_t v104 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>(v103);
  uint64_t v105 = v104[7];
  uint64_t v152 = v104[8];
  if (v105 != v152)
  {
    unsigned int v106 = (void *)v104[10];
    uint64_t v159 = (void *)(v90 + 168);
    while (1)
    {
      uint64_t v107 = *(void **)(v90 + 208);
      *(void *)(v90 + 216) = v107;
      unint64_t v108 = v106[2];
      if (v108 > (uint64_t)(*(void *)(v90 + 224) - (void)v107) >> 4)
      {
        if (v108 >> 60) {
          abort();
        }
        uint64_t v109 = 16 * v108;
        uint64_t v110 = (char *)operator new(16 * v108);
        *(void *)(v90 + 208) = v110;
        *(void *)(v90 + 216) = v110;
        *(void *)(v90 + 224) = &v110[v109];
        if (v107) {
          operator delete(v107);
        }
      }
      uint64_t v111 = *(void **)v153;
      unsigned int v112 = *(void **)(v153 + 8);
      uint64_t v154 = v105;
      if (*(void **)v153 != v112)
      {
        while (*v111 != 0x41D4E9297E100630)
        {
          v111 += 5;
          if (v111 == v112) {
            goto LABEL_157;
          }
        }
      }
      if (v111 != v112)
      {
        uint64_t v113 = (std::__shared_weak_count *)v111[4];
        if (v113)
        {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
      }
LABEL_157:
      uint64_t v114 = (void *)*v106;
      if ((void *)*v106 != v106 + 1) {
        break;
      }
      v106 += 3;
      v105 += 8;
      uint64_t v90 = v162;
      if (v154 + 8 == v152) {
        goto LABEL_193;
      }
    }
    uint64_t v115 = v114[4];
    uint64_t v116 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v159, (unsigned __int8 *)(v115 + 16));
    if (!v116)
    {
LABEL_188:
      uint64_t v135 = v114[5];
      v169[0] = v115;
      v169[1] = v135;
      if (v135) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v135 + 8), 1uLL, memory_order_relaxed);
      }
      LOWORD(v168[0]) = *(_WORD *)(v115 + 168);
      *(void *)((char *)v168 + 4) = *(void *)(v115 + 172);
      md::GeometryContext::transformConstantData((double *)&v167, v155, (unsigned __int8 *)v168, v156, *(double *)(v115 + 600), *(double *)(v115 + 608));
      uint64_t v136 = *(void *)(v162 + 136);
      char v137 = *((unsigned char *)v114 + 48);
      uint64_t v138 = *(void **)(v136 + 40);
      if (!v138)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(*(uint64_t ***)(v162 + 136));
        uint64_t v138 = *(void **)(v136 + 40);
      }
      *(void *)(v136 + 40) = *v138;
      md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v138, v169, v137, (v156 - 1) < 3u, &v167);
      gdc::Registry::create((gdc::Registry *)v103);
    }
    uint64_t v117 = v116;
    BOOL v119 = *(void **)(v162 + 144);
    unsigned int v118 = *(void **)(v162 + 152);
    if (v119 == v118)
    {
      uint64_t v120 = *(void *)(v162 + 144);
    }
    else
    {
      uint64_t v120 = *(void *)(v162 + 144);
      do
      {
        if (*(uint64_t **)v120 == v116[16]
          && *(unsigned __int16 *)(v120 + 8) == *((unsigned __int16 *)v116 + 68)
          && *(unsigned __int16 *)(v120 + 10) == *((unsigned __int16 *)v116 + 69)
          && *(_DWORD *)(v120 + 12) == *((_DWORD *)v116 + 35))
        {
          goto LABEL_170;
        }
        v120 += 16;
      }
      while ((void *)v120 != v118);
      uint64_t v120 = *(void *)(v162 + 152);
    }
LABEL_170:
    uint8x8_t v121 = (void *)(v120 + 16);
    if ((void *)(v120 + 16) != v118)
    {
      unint64_t v122 = (unint64_t)v118 - v120 - 32;
      if (v122 >= 0x30)
      {
        uint64_t v123 = (v120 - (uint64_t)v119) >> 4;
        uint64_t v124 = (v122 >> 4) + 1;
        uint64_t v125 = 16 * (v124 & 0x1FFFFFFFFFFFFFFCLL);
        v120 += v125;
        uint64_t v126 = (double *)&v119[2 * v123 + 4];
        uint64_t v127 = v124 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v128 = v126 - 2;
          float64x2x2_t v171 = vld2q_f64(v128);
          uint64_t v129 = v126 + 2;
          float64x2x2_t v173 = vld2q_f64(v129);
          int64_t v130 = v126 - 4;
          vst2q_f64(v130, v171);
          vst2q_f64(v126, v173);
          v126 += 8;
          v127 -= 4;
        }
        while (v127);
        if (v124 == (v124 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_177;
        }
        uint8x8_t v121 = (void *)((char *)v121 + v125);
      }
      do
      {
        *(void *)uint64_t v120 = *v121;
        *(void *)(v120 + 8) = v121[1];
        v120 += 16;
        v121 += 2;
      }
      while (v121 != v118);
    }
LABEL_177:
    *(void *)(v162 + 152) = v120;
    int64_t v131 = v116[16];
    if (v131)
    {
      uint64_t v132 = *(void *)(v162 + 136);
      if (*(void *)(v132 + 16))
      {
        (*(void (**)(uint64_t *))*v131)(v116[16]);
        *int64_t v131 = *(void *)(v132 + 40);
        *(void *)(v132 + 40) = v131;
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v159, v117);
    uint64_t v133 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v165)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        uint64_t v134 = (void *)v133[4];
        if (v134 != (void *)v133[6]) {
          free(v134);
        }
      }
      operator delete(v133);
    }
    uint64_t v115 = v114[4];
    goto LABEL_188;
  }
LABEL_193:
  unint64_t v166 = *(int8x8_t **)(v90 + 120);
  uint64_t v139 = gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(v166);
  if (*(void *)(v139 + 56) != *(void *)(v139 + 64))
  {
    uint64_t v142 = *(void **)(v90 + 144);
    uint64_t v140 = *(void **)(v90 + 152);
    __p[0] = *(void **)(v139 + 80);
    __p[1] = (void *)(v90 + 168);
    if (v142 == v140)
    {
LABEL_195:
      uint64_t v140 = v142;
    }
    else
    {
      do
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v142))
        {
          do
          {
            v140 -= 2;
            if (v140 == v142) {
              goto LABEL_195;
            }
          }
          while (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v140));
          uint64_t v143 = *v142;
          *uint64_t v142 = *v140;
          *uint64_t v140 = v143;
          uint64_t v144 = v142[1];
          v142[1] = v140[1];
          v140[1] = v144;
        }
        v142 += 2;
      }
      while (v142 != v140);
    }
    uint64_t v141 = *(void **)(v90 + 152);
    __p[0] = v140;
    __p[1] = v141;
    v168[0] = *(_OWORD *)(v90 + 208);
    gdc::Registry::create((gdc::Registry *)v166);
  }
  uint64_t result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(*(int8x8_t **)(v90 + 120));
  if (*(void *)(result + 88) != *(void *)(result + 80))
  {
    uint64_t v146 = **(uint64_t ***)(v90 + 128);
    if (v146 != *(uint64_t **)(*(void *)(v90 + 128) + 8) && *v146 != 0x22D45F5AAD4BF408)
    {
      uint64_t v147 = v146 + 5;
      do
      {
        uint64_t v148 = *v147;
        v147 += 5;
      }
      while (v148 != 0x22D45F5AAD4BF408);
      uint64_t v146 = v147 - 5;
    }
    uint64_t v149 = (uint64_t (***)(void))v146[3];
    uint64_t v150 = (std::__shared_weak_count *)v146[4];
    if (v150)
    {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    uint64_t result = (**v149)(v149);
    **(unsigned char **)(result + 736) = 1;
  }
  *uint64_t v151 = *(void *)(v90 + 120);
  return result;
}

void sub_1A1DF9E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCF15A221AD0F424CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCF15A221AD0F424CLL;
    if (*(void *)&v1 <= 0xCF15A221AD0F424CLL) {
      unint64_t v3 = 0xCF15A221AD0F424CLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCF15A221AD0F424CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCF15A221AD0F424CLL)
      {
        if (v5[2] == 0xCF15A221AD0F424CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCF15A221AD0F424CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCF15A221AD0F424CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DFA368(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(int8x8_t *a1)
{
  uint64_t v10 = 0x5D358FB21220FE77;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5D358FB21220FE77;
    if (*(void *)&v1 <= 0x5D358FB21220FE77uLL) {
      uint64_t v3 = 0x5D358FB21220FE77uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5D358FB21220FE77;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5D358FB21220FE77)
      {
        if (v5[2] == 0x5D358FB21220FE77) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5D358FB21220FE77) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5D358FB21220FE77) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DFA5D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  unint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)34>>(int8x8_t *a1)
{
  uint64_t v10 = 0x37B530CC735CB3B7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x37B530CC735CB3B7;
    if (*(void *)&v1 <= 0x37B530CC735CB3B7uLL) {
      uint64_t v3 = 0x37B530CC735CB3B7uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x37B530CC735CB3B7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x37B530CC735CB3B7)
      {
        if (v5[2] == 0x37B530CC735CB3B7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x37B530CC735CB3B7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x37B530CC735CB3B7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DFAA10(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = a2 - 2;
    uint64_t v11 = a2 - 1;
    uint64_t v12 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v109 = *v12;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                  return result;
                }
                *uint64_t v12 = *v10;
                *unint64_t v10 = v109;
                uint64_t v110 = v12[1];
                v12[1] = *v11;
                goto LABEL_188;
              case 3:
                uint64_t v111 = v12[2];
                unsigned int v112 = *(unsigned __int8 *)(*(void *)(v111 + 384) + 169);
                uint64_t v113 = *v12;
                uint64_t v114 = *v10;
                unsigned int v115 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
                if (v112 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
                {
                  if (v115 <= v112) {
                    return result;
                  }
                  v12[2] = v114;
                  *unint64_t v10 = v111;
                  uint64_t v158 = v12[3];
                  v12[3] = *v11;
                  *uint64_t v11 = v158;
                  uint64_t v159 = v12[2];
                  uint64_t v160 = *v12;
                  if (*(unsigned __int8 *)(*(void *)(v159 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                    return result;
                  }
                  *uint64_t v12 = v159;
                  v12[2] = v160;
                  uint64_t v116 = v12 + 1;
                  uint64_t v11 = v12 + 3;
                }
                else
                {
                  if (v115 <= v112)
                  {
                    uint64_t v116 = v12 + 3;
                    uint64_t v169 = v12[3];
                    uint64_t v170 = v12[1];
                    *uint64_t v12 = v111;
                    v12[1] = v169;
                    v12[2] = v113;
                    v12[3] = v170;
                    if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v113 + 384) + 169)) {
                      return result;
                    }
                    v12[2] = *v10;
                  }
                  else
                  {
                    uint64_t v116 = v12 + 1;
                    *uint64_t v12 = v114;
                  }
                  *unint64_t v10 = v113;
                }
                uint64_t v110 = *v116;
                *uint64_t v116 = *v11;
LABEL_188:
                *uint64_t v11 = v110;
                break;
              case 4:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, a2 - 2);
              case 5:
                return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            uint64_t v117 = v12 + 2;
            BOOL v119 = v12 == a2 || v117 == a2;
            if (a4)
            {
              if (!v119)
              {
                uint64_t v120 = 0;
                uint8x8_t v121 = v12;
                do
                {
                  uint64_t v123 = v117;
                  uint64_t v124 = v121[2];
                  uint64_t v125 = *v121;
                  if (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v121 + 384) + 169))
                  {
                    uint64_t v126 = v121[3];
                    uint64_t v127 = v120;
                    do
                    {
                      uint64_t v128 = (char *)v12 + v127;
                      uint64_t v129 = *(uint64_t *)((char *)v12 + v127 + 8);
                      *((void *)v128 + 2) = v125;
                      *((void *)v128 + 3) = v129;
                      if (!v127)
                      {
                        unint64_t v122 = v12;
                        goto LABEL_129;
                      }
                      uint64_t v125 = *((void *)v128 - 2);
                      v127 -= 16;
                    }
                    while (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v125 + 384) + 169));
                    unint64_t v122 = (uint64_t *)((char *)v12 + v127 + 16);
LABEL_129:
                    *unint64_t v122 = v124;
                    v122[1] = v126;
                  }
                  uint64_t v117 = v123 + 2;
                  v120 += 16;
                  uint8x8_t v121 = v123;
                }
                while (v123 + 2 != a2);
              }
            }
            else if (!v119)
            {
              uint64_t v161 = v12 + 3;
              do
              {
                uint64_t v162 = v117;
                uint64_t v163 = v9[2];
                uint64_t v164 = *v9;
                if (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v9 + 384) + 169))
                {
                  uint64_t v165 = v9[3];
                  unint64_t v166 = v161;
                  do
                  {
                    uint64_t v167 = v166;
                    *(v166 - 1) = v164;
                    uint64_t v168 = *(v166 - 2);
                    v166 -= 2;
                    *uint64_t v167 = v168;
                    uint64_t v164 = *(v167 - 5);
                  }
                  while (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v164 + 384) + 169));
                  *(v166 - 1) = v163;
                  uint64_t *v166 = v165;
                }
                uint64_t v117 = v162 + 2;
                v161 += 2;
                uint64_t v9 = v162;
              }
              while (v162 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v130 = (unint64_t)(v14 - 2) >> 1;
              int64_t v131 = v130;
              do
              {
                int64_t v132 = v131;
                if (v130 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  uint64_t v134 = &v12[2 * v133];
                  if (2 * v132 + 2 < v14)
                  {
                    unsigned int v135 = *(unsigned __int8 *)(*(void *)(*v134 + 384) + 169);
                    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169);
                    BOOL v137 = v135 > v136;
                    if (v135 <= v136) {
                      uint64_t v138 = *v134;
                    }
                    else {
                      uint64_t v138 = v134[2];
                    }
                    if (v137)
                    {
                      v134 += 2;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v138 = *v134;
                  }
                  uint64_t v139 = &v12[2 * v132];
                  uint64_t v140 = *v139;
                  uint64_t result = *(unsigned __int8 *)(*(void *)(*v139 + 384) + 169);
                  if (*(unsigned __int8 *)(*(void *)(v138 + 384) + 169) <= result)
                  {
                    uint64_t v141 = v139[1];
                    do
                    {
                      uint64_t result = (unint64_t)v139;
                      uint64_t v139 = v134;
                      *(void *)uint64_t result = v138;
                      *(void *)(result + 8) = v134[1];
                      if (v130 < v133) {
                        break;
                      }
                      uint64_t v142 = (2 * v133) | 1;
                      uint64_t v134 = &v12[2 * v142];
                      uint64_t v133 = 2 * v133 + 2;
                      if (v133 < v14)
                      {
                        uint64_t v138 = *v134;
                        if (*(unsigned __int8 *)(*(void *)(*v134 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169))
                        {
                          uint64_t v133 = v142;
                        }
                        else
                        {
                          uint64_t v138 = v134[2];
                          v134 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v138 = *v134;
                        uint64_t v133 = v142;
                      }
                      uint64_t result = *(unsigned __int8 *)(*(void *)(v138 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(void *)(v140 + 384) + 169));
                    *uint64_t v139 = v140;
                    v139[1] = v141;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v143 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v144 = 0;
                uint64_t v145 = *v12;
                uint64_t v146 = v12[1];
                uint64_t v147 = v12;
                do
                {
                  uint64_t v149 = &v147[2 * v144 + 2];
                  uint64_t v150 = (2 * v144) | 1;
                  uint64_t v144 = 2 * v144 + 2;
                  if (v144 < v143)
                  {
                    uint64_t v148 = *v149;
                    uint64_t result = (unint64_t)(v149 + 2);
                    if (*(unsigned __int8 *)(*(void *)(*v149 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v149[2] + 384) + 169))
                    {
                      uint64_t v144 = v150;
                    }
                    else
                    {
                      uint64_t v148 = v149[2];
                      v149 += 2;
                    }
                  }
                  else
                  {
                    uint64_t v148 = *v149;
                    uint64_t v144 = v150;
                  }
                  *uint64_t v147 = v148;
                  v147[1] = v149[1];
                  uint64_t v147 = v149;
                }
                while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                if (v149 == a2 - 2)
                {
                  *uint64_t v149 = v145;
                  v149[1] = v146;
                }
                else
                {
                  *uint64_t v149 = *(a2 - 2);
                  v149[1] = *(a2 - 1);
                  *(a2 - 2) = v145;
                  *(a2 - 1) = v146;
                  uint64_t v151 = (char *)v149 - (char *)v12 + 16;
                  if (v151 >= 17)
                  {
                    unint64_t v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                    uint64_t v153 = &v12[2 * v152];
                    uint64_t v154 = *v153;
                    uint64_t v155 = *v149;
                    if (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v149 + 384) + 169))
                    {
                      uint64_t v156 = v149[1];
                      do
                      {
                        uint64_t v157 = v149;
                        uint64_t v149 = v153;
                        *uint64_t v157 = v154;
                        v157[1] = v153[1];
                        if (!v152) {
                          break;
                        }
                        unint64_t v152 = (v152 - 1) >> 1;
                        uint64_t v153 = &v12[2 * v152];
                        uint64_t v154 = *v153;
                      }
                      while (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v155 + 384) + 169));
                      *uint64_t v149 = v155;
                      v149[1] = v156;
                    }
                  }
                }
                a2 -= 2;
                BOOL v137 = v143-- <= 2;
              }
              while (!v137);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
          uint64_t v17 = *v10;
          unsigned int v18 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
          if ((unint64_t)v13 >= 0x801)
          {
            uint64_t v19 = *v16;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
            uint64_t v21 = *v12;
            if (v20 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
            {
              if (v18 <= v20
                || (uint64_t *v16 = v17,
                    *unint64_t v10 = v19,
                    uint64_t v28 = v16 + 1,
                    uint64_t v27 = v16[1],
                    v16[1] = *v11,
                    *uint64_t v11 = v27,
                    uint64_t v29 = *v12,
                    *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)))
              {
LABEL_24:
                uint64_t v36 = &v12[2 * v15];
                uint64_t v39 = *(v36 - 2);
                uint64_t v37 = v36 - 2;
                uint64_t v38 = v39;
                unsigned int v40 = *(unsigned __int8 *)(*(void *)(v39 + 384) + 169);
                uint64_t v41 = v12[2];
                uint64_t v42 = *(a2 - 4);
                unsigned int v43 = *(unsigned __int8 *)(*(void *)(v42 + 384) + 169);
                if (v40 <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169))
                {
                  if (v43 <= v40
                    || (*uint64_t v37 = v42,
                        *(a2 - 4) = v38,
                        uint64_t v45 = v37 + 1,
                        uint64_t v46 = v37[1],
                        v37[1] = *(a2 - 3),
                        *(a2 - 3) = v46,
                        uint64_t v47 = v12[2],
                        *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v47 + 384) + 169)))
                  {
LABEL_37:
                    uint64_t v54 = &v12[2 * v15];
                    uint64_t v57 = v54[2];
                    unint64_t v55 = v54 + 2;
                    uint64_t v56 = v57;
                    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 384) + 169);
                    uint64_t v59 = v12[4];
                    uint64_t v60 = *(a2 - 6);
                    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v60 + 384) + 169);
                    if (v58 <= *(unsigned __int8 *)(*(void *)(v59 + 384) + 169))
                    {
                      if (v61 > v58)
                      {
                        *unint64_t v55 = v60;
                        *(a2 - 6) = v56;
                        unint64_t v64 = v55 + 1;
                        uint64_t v63 = v55[1];
                        v55[1] = *(a2 - 5);
                        *(a2 - 5) = v63;
                        uint64_t v56 = *v55;
                        unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        uint64_t v65 = v12[4];
                        if (v58 > *(unsigned __int8 *)(*(void *)(v65 + 384) + 169))
                        {
                          v12[4] = v56;
                          *unint64_t v55 = v65;
                          float64x2x2_t v62 = v12 + 5;
LABEL_46:
                          uint64_t v69 = *v62;
                          *float64x2x2_t v62 = *v64;
                          *unint64_t v64 = v69;
                          uint64_t v56 = *v55;
                          unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v61 > v58)
                      {
                        float64x2x2_t v62 = v12 + 5;
                        v12[4] = v60;
LABEL_45:
                        *(a2 - 6) = v59;
                        unint64_t v64 = a2 - 5;
                        goto LABEL_46;
                      }
                      float64x2x2_t v62 = v55 + 1;
                      uint64_t v66 = v55[1];
                      uint64_t v67 = v12[5];
                      v12[4] = v56;
                      v12[5] = v66;
                      *unint64_t v55 = v59;
                      v55[1] = v67;
                      uint64_t v68 = *(a2 - 6);
                      unsigned int v58 = *(unsigned __int8 *)(*(void *)(v59 + 384) + 169);
                      if (*(unsigned __int8 *)(*(void *)(v68 + 384) + 169) > v58)
                      {
                        *unint64_t v55 = v68;
                        goto LABEL_45;
                      }
                      uint64_t v56 = v59;
                    }
                    uint64_t v70 = *v16;
                    unsigned int v71 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
                    uint64_t v72 = *v37;
                    if (v71 <= *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169))
                    {
                      if (v58 <= v71)
                      {
LABEL_57:
                        uint64_t v80 = *v12;
                        *uint64_t v12 = v70;
                        uint64_t v26 = v12 + 1;
                        uint64_t *v16 = v80;
                        uint64_t v32 = v16 + 1;
                        goto LABEL_58;
                      }
                      uint64_t *v16 = v56;
                      int8x8_t v75 = v16 + 1;
                      uint64_t v76 = v16[1];
                      v16[1] = v55[1];
                      *unint64_t v55 = v70;
                      v55[1] = v76;
                      if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                      {
                        uint64_t v70 = v56;
                        goto LABEL_57;
                      }
                      *uint64_t v37 = v56;
                      BOOL v73 = v37 + 1;
                      uint64_t *v16 = v72;
                    }
                    else
                    {
                      if (v58 <= v71)
                      {
                        uint64_t *v16 = v72;
                        uint64_t v77 = v16[1];
                        uint64_t v78 = v37[1];
                        *uint64_t v37 = v70;
                        v37[1] = v77;
                        v16[1] = v78;
                        if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                        {
                          uint64_t v70 = v72;
                          goto LABEL_57;
                        }
                        uint64_t *v16 = v56;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                        BOOL v73 = v16 + 1;
                      }
                      else
                      {
                        *uint64_t v37 = v56;
                        BOOL v73 = v37 + 1;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                      }
                      int8x8_t v75 = v74;
                    }
                    uint64_t v79 = *v73;
                    *BOOL v73 = *v75;
                    *int8x8_t v75 = v79;
                    uint64_t v70 = *v16;
                    goto LABEL_57;
                  }
                  v12[2] = *v37;
                  *uint64_t v37 = v47;
                  unint64_t v44 = v12 + 3;
                }
                else
                {
                  if (v43 <= v40)
                  {
                    unint64_t v44 = v37 + 1;
                    uint64_t v50 = v37[1];
                    uint64_t v51 = v12[3];
                    v12[2] = v38;
                    v12[3] = v50;
                    *uint64_t v37 = v41;
                    v37[1] = v51;
                    uint64_t v52 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(void *)(v52 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169)) {
                      goto LABEL_37;
                    }
                    *uint64_t v37 = v52;
                  }
                  else
                  {
                    unint64_t v44 = v12 + 3;
                    v12[2] = v42;
                  }
                  *(a2 - 4) = v41;
                  uint64_t v45 = a2 - 3;
                }
                uint64_t v53 = *v44;
                uint64_t *v44 = *v45;
                *uint64_t v45 = v53;
                goto LABEL_37;
              }
              *uint64_t v12 = *v16;
              unint64_t v22 = v12 + 1;
              uint64_t *v16 = v29;
            }
            else
            {
              if (v18 <= v20)
              {
                unint64_t v22 = v16 + 1;
                uint64_t v33 = v16[1];
                uint64_t v34 = v12[1];
                *uint64_t v12 = v19;
                v12[1] = v33;
                uint64_t *v16 = v21;
                v16[1] = v34;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v21 + 384) + 169)) {
                  goto LABEL_24;
                }
                uint64_t *v16 = *v10;
              }
              else
              {
                unint64_t v22 = v12 + 1;
                *uint64_t v12 = v17;
              }
              *unint64_t v10 = v21;
              uint64_t v28 = a2 - 1;
            }
            uint64_t v35 = *v22;
            *unint64_t v22 = *v28;
            *uint64_t v28 = v35;
            goto LABEL_24;
          }
          uint64_t v23 = *v12;
          unsigned int v24 = *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169);
          uint64_t v25 = *v16;
          if (v24 <= *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169)) {
            break;
          }
          if (v18 > v24)
          {
            uint64_t v26 = v16 + 1;
            uint64_t *v16 = v17;
LABEL_32:
            *unint64_t v10 = v25;
            uint64_t v32 = a2 - 1;
            goto LABEL_58;
          }
          uint64_t v26 = v12 + 1;
          uint64_t v48 = v12[1];
          uint64_t v49 = v16[1];
          uint64_t *v16 = v23;
          v16[1] = v48;
          *uint64_t v12 = v25;
          v12[1] = v49;
          if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v25 + 384) + 169))
          {
            *uint64_t v12 = *v10;
            goto LABEL_32;
          }
          uint64_t v23 = v25;
          --a3;
          if (a4) {
            goto LABEL_60;
          }
LABEL_62:
          unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
          if (*(unsigned __int8 *)(*(void *)(*(v12 - 2) + 384) + 169) > v82) {
            goto LABEL_63;
          }
          if (v82 > *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169))
          {
            do
            {
              uint64_t v98 = v12[2];
              v12 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(v98 + 384) + 169));
          }
          else
          {
            uint8x8_t v99 = v12 + 2;
            do
            {
              uint64_t v12 = v99;
              if (v99 >= a2) {
                break;
              }
              v99 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169));
          }
          unint64_t v100 = a2;
          if (v12 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = *(v100 - 2);
              v100 -= 2;
            }
            while (v82 > *(unsigned __int8 *)(*(void *)(v101 + 384) + 169));
          }
          uint64_t v102 = v9[1];
          if (v12 < v100)
          {
            uint64_t v103 = *v12;
            uint64_t v104 = *v100;
            do
            {
              *uint64_t v12 = v104;
              *unint64_t v100 = v103;
              uint64_t v105 = v12[1];
              v12[1] = v100[1];
              v100[1] = v105;
              unsigned int v106 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
              do
              {
                uint64_t v107 = v12[2];
                v12 += 2;
                uint64_t v103 = v107;
              }
              while (v106 <= *(unsigned __int8 *)(*(void *)(v107 + 384) + 169));
              do
              {
                uint64_t v108 = *(v100 - 2);
                v100 -= 2;
                uint64_t v104 = v108;
              }
              while (v106 > *(unsigned __int8 *)(*(void *)(v108 + 384) + 169));
            }
            while (v12 < v100);
          }
          BOOL v4 = v12 - 2 >= v9;
          BOOL v5 = v12 - 2 == v9;
          if (v12 - 2 != v9)
          {
            *uint64_t v9 = *(v12 - 2);
            v9[1] = *(v12 - 1);
          }
          a4 = 0;
          *(v12 - 2) = v23;
          *(v12 - 1) = v102;
        }
        if (v18 > v24)
        {
          *uint64_t v12 = v17;
          *unint64_t v10 = v23;
          uint64_t v30 = v12[1];
          v12[1] = *v11;
          *uint64_t v11 = v30;
          uint64_t v23 = *v12;
          uint64_t v31 = *v16;
          if (*(unsigned __int8 *)(*(void *)(*v12 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169))
          {
            uint64_t *v16 = v23;
            *uint64_t v12 = v31;
            uint64_t v26 = v16 + 1;
            uint64_t v32 = v12 + 1;
LABEL_58:
            uint64_t v81 = *v26;
            *uint64_t v26 = *v32;
            *uint64_t v32 = v81;
            uint64_t v23 = *v12;
          }
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_60:
        unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
LABEL_63:
        uint64_t v83 = v12[1];
        uint64_t v84 = v12;
        do
        {
          uint64_t v85 = v84;
          uint64_t v87 = v84[2];
          v84 += 2;
          uint64_t v86 = v87;
        }
        while (*(unsigned __int8 *)(*(void *)(v87 + 384) + 169) > v82);
        uint64_t v88 = a2;
        if (v85 == v12)
        {
          uint64_t v88 = a2;
          do
          {
            if (v84 >= v88) {
              break;
            }
            uint64_t v90 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v90 + 384) + 169) <= v82);
        }
        else
        {
          do
          {
            uint64_t v89 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v89 + 384) + 169) <= v82);
        }
        if (v84 < v88)
        {
          uint64_t v91 = *v88;
          uint64_t v12 = v84;
          uint64_t v92 = v88;
          do
          {
            *uint64_t v12 = v91;
            *uint64_t v92 = v86;
            uint64_t v93 = v12[1];
            v12[1] = v92[1];
            v92[1] = v93;
            unsigned int v94 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
            do
            {
              uint64_t v95 = v12[2];
              v12 += 2;
              uint64_t v86 = v95;
            }
            while (*(unsigned __int8 *)(*(void *)(v95 + 384) + 169) > v94);
            do
            {
              uint64_t v96 = *(v92 - 2);
              v92 -= 2;
              uint64_t v91 = v96;
            }
            while (*(unsigned __int8 *)(*(void *)(v96 + 384) + 169) <= v94);
          }
          while (v12 < v92);
        }
        else
        {
          uint64_t v12 = v84;
        }
        if (v12 - 2 != v9)
        {
          *uint64_t v9 = *(v12 - 2);
          v9[1] = *(v12 - 1);
        }
        *(v12 - 2) = v23;
        *(v12 - 1) = v83;
        if (v84 >= v88) {
          break;
        }
LABEL_83:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v9, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v9, v12 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, a2);
      if (result) {
        break;
      }
      if (!v97) {
        goto LABEL_83;
      }
    }
    a2 = v12 - 2;
    if (!v97) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)34>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)34> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 2);
      uint64_t v4 = *a1;
      if (*(unsigned __int8 *)(*(void *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        uint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v6 = a1[2];
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v6 + 384) + 169);
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 2);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          uint64_t v11 = a1 + 3;
          uint64_t v26 = a1[3];
          uint64_t v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          uint64_t v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(void *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v8 + 384) + 169)) {
            return 1;
          }
          a1[2] = v28;
        }
        else
        {
          uint64_t v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        unsigned int v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        unsigned int v20 = a1 + 3;
        uint64_t v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v21 = a1[2];
        uint64_t v22 = *a1;
        if (*(unsigned __int8 *)(*(void *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          uint64_t v11 = a1 + 1;
LABEL_21:
          uint64_t v29 = *v11;
          *uint64_t v11 = *v20;
          *unsigned int v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[2];
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(v14 + 384) + 169);
      uint64_t v16 = *a1;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          unsigned int v18 = a1 + 3;
          uint64_t v30 = a1[3];
          uint64_t v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v16 + 384) + 169)) {
            goto LABEL_26;
          }
          a1[2] = v13;
        }
        else
        {
          unsigned int v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        unsigned int v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        unsigned int v24 = a1 + 3;
        uint64_t v23 = a1[3];
        uint64_t v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          unsigned int v18 = a1 + 1;
LABEL_25:
          uint64_t v32 = *v18;
          *unsigned int v18 = *v24;
          *unsigned int v24 = v32;
        }
      }
LABEL_26:
      uint64_t v33 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        uint64_t v37 = *v33;
        uint64_t v38 = *v12;
        if (*(unsigned __int8 *)(*(void *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
        {
          uint64_t v39 = v33[1];
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = (uint64_t *)((char *)a1 + v40);
            uint64_t v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              uint64_t v36 = a1;
              goto LABEL_29;
            }
            uint64_t v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(void *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v38 + 384) + 169));
          uint64_t v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *uint64_t v36 = v37;
          v36[1] = v39;
          if (++v35 == 8) {
            return v33 + 2 == a2;
          }
        }
        uint64_t v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2) {
          return 1;
        }
      }
  }
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x521897C68EA476F3 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3) {
      uint64_t v3 = 0x3070CB6B3C7F21D3 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x412AFB1345D08930;
    if (a2 <= 0x412AFB1345D08930) {
      uint64_t v11 = 0x412AFB1345D08930 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x412AFB1345D08930;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x412AFB1345D08930)
      {
        if (v13[2] == 0x412AFB1345D08930) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x412AFB1345D08930)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x412AFB1345D08930)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x412AFB1345D08930) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x521897C68EA476F3)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x521897C68EA476F3)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x521897C68EA476F3)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x521897C68EA476F3)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)34>>>>::_allocateContext()
{
}

void sub_1A1DFC5E0(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)34>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)34>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555D20;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)34>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555D20;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF542BC8;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)34,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF542BC8;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, void *a4)
{
  uint64_t v155 = *a3;
  char v7 = *(int8x8_t **)(a1 + 120);
  uint64_t v8 = (uint64_t **)*((void *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v165 = 0;
  char v9 = *v8;
  if (*v8 != v8[1] && *v9 != 0x22D45F5AAD4BF408)
  {
    uint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    char v9 = v10 - 5;
  }
  uint64_t v12 = (void (***)(void))v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v160 = v8;
  (**v12)(v12);
  uint64_t v157 = a2;
  uint64_t v158 = v7;
  uint64_t v162 = a1;
  uint64_t v151 = a4;
  unint64_t v14 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(v7);
  uint64_t v15 = v14[7];
  uint64_t v161 = v14[8];
  uint64_t v16 = a1;
  if (v15 != v161)
  {
    uint64_t v17 = a1 + 168;
    uint64_t v18 = v14[10];
    uint64_t v163 = (char **)(v162 + 232);
    while (1)
    {
      unsigned int v24 = *(uint64_t **)(v16 + 144);
      uint64_t v25 = *(uint64_t **)(v16 + 152);
      *(void *)&v168[0] = v18;
      *((void *)&v168[0] + 1) = v17;
LABEL_17:
      while (v24 != v25)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v24))
        {
          while (1)
          {
            v25 -= 2;
            if (v25 == v24) {
              goto LABEL_23;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v25))
            {
              uint64_t v26 = *v24;
              *unsigned int v24 = *v25;
              *uint64_t v25 = v26;
              uint64_t v27 = v24[1];
              v24[1] = v25[1];
              v25[1] = v27;
              v24 += 2;
              goto LABEL_17;
            }
          }
        }
        v24 += 2;
      }
LABEL_23:
      uint64_t v29 = *(char **)(v162 + 144);
      uint64_t v28 = *(char **)(v162 + 152);
      *(void *)&v168[0] = v18;
      *((void *)&v168[0] + 1) = v17;
LABEL_24:
      while (v29 != v28)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v29))
        {
          while (1)
          {
            v28 -= 16;
            if (v28 == v29) {
              break;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v168, (uint64_t)v28))
            {
              uint64_t v30 = *(void *)v29;
              *(void *)uint64_t v29 = *(void *)v28;
              *(void *)uint64_t v28 = v30;
              uint64_t v31 = *((void *)v29 + 1);
              *((void *)v29 + 1) = *((void *)v28 + 1);
              *((void *)v28 + 1) = v31;
              v29 += 16;
              goto LABEL_24;
            }
          }
          uint64_t v28 = v29;
          break;
        }
        v29 += 16;
      }
      uint64_t v32 = *(long long **)(v162 + 152);
      int64_t v33 = (char *)v32 - v28;
      uint64_t v34 = ((char *)v32 - v28) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v163, *(void *)(v162 + 240), (unint64_t)v28, v32, v34);
      uint64_t v35 = v162;
      if (v28 == (char *)v32) {
        goto LABEL_38;
      }
      uint64_t v37 = *(void *)(v162 + 144);
      uint64_t v36 = *(double **)(v162 + 152);
      unint64_t v38 = (unint64_t)&v28[-v37];
      uint64_t v39 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      uint64_t v40 = &v39[2 * v34];
      if (v40 != v36) {
        break;
      }
LABEL_37:
      uint64_t v35 = v162;
      *(void *)(v162 + 152) = v39;
LABEL_38:
      unint64_t v44 = *(char **)(v35 + 232);
      uint64_t v19 = *(char **)(v35 + 240);
      if (v19 != v44)
      {
        do
        {
          uint64_t v45 = (char *)__p[1];
          if (__p[1] >= (void *)v165)
          {
            uint64_t v47 = (char *)__p[0];
            int64_t v48 = (char *)__p[1] - (char *)__p[0];
            int64_t v49 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61) {
              abort();
            }
            uint64_t v51 = v165 - (unint64_t)__p[0];
            if ((uint64_t)(v165 - (unint64_t)__p[0]) >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v53 = operator new(8 * v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            void *v54 = *((void *)v44 + 1);
            uint64_t v46 = v54 + 1;
            if (v45 == v47)
            {
              uint64_t v47 = v45;
            }
            else
            {
              unint64_t v55 = v45 - 8 - v47;
              if (v55 < 0x58) {
                goto LABEL_220;
              }
              if ((unint64_t)(v45 - &v53[v48]) < 0x20) {
                goto LABEL_220;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              uint64_t v57 = &v53[8 * v49 - 16];
              unsigned int v58 = v45 - 16;
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *uint64_t v57 = v60;
                v57 -= 2;
                v58 -= 32;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v45 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_220:
                do
                {
                  uint64_t v61 = *((void *)v45 - 1);
                  v45 -= 8;
                  *--uint64_t v54 = v61;
                }
                while (v45 != v47);
                uint64_t v47 = (char *)__p[0];
              }
            }
            __p[0] = v54;
            __p[1] = v46;
            *(void *)&long long v165 = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)__p[1] = *((void *)v44 + 1);
            uint64_t v46 = v45 + 8;
          }
          __p[1] = v46;
          float64x2x2_t v62 = *(void (****)(void))v44;
          if (*(void *)v44)
          {
            uint64_t v63 = *(void *)(v162 + 136);
            if (*(void *)(v63 + 16))
            {
              (**v62)(*(void *)v44);
              *float64x2x2_t v62 = *(void (***)(void))(v63 + 40);
              *(void *)(v63 + 40) = v62;
            }
          }
          v44 += 16;
        }
        while (v44 != v19);
        uint64_t v19 = *v163;
      }
      uint64_t v16 = v162;
      unint64_t v20 = *(void *)(v162 + 144);
      uint64_t v21 = *(uint64_t **)(v162 + 152);
      unint64_t v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
      *(void *)(v162 + 240) = v19;
      if (v21 == (uint64_t *)v20) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v20, v21, v23, 1);
      v18 += 24;
      v15 += 8;
      uint64_t v17 = v162 + 168;
      if (v15 == v161) {
        goto LABEL_108;
      }
    }
    unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v42 = (unint64_t)v36 + -(v38 & 0xFFFFFFFFFFFFFFF0) - v37 - v33 - 16;
    if (v42 >= 0x270)
    {
      unint64_t v64 = v41 + (v42 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v65 = v37 + (v64 | 8);
      unint64_t v66 = v37 + (v41 | 8);
      unint64_t v67 = v64 + v37 + 16;
      uint64_t v68 = v33 + v41 + v37;
      uint64_t v69 = v68 + (v42 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v70 = v69 + 8;
      unint64_t v71 = v68 + 8;
      unint64_t v72 = v69 + 16;
      BOOL v74 = (unint64_t)v39 < v69 + 8 && (unint64_t)v40 < v65;
      BOOL v76 = (unint64_t)v39 < v72 && v71 < v65;
      BOOL v78 = v66 < v70 && (unint64_t)v40 < v67;
      BOOL v80 = v66 < v72 && v71 < v67;
      if (v66 >= v65 || (unint64_t)v39 >= v67)
      {
        if (v74)
        {
          unsigned int v43 = v39;
        }
        else if (v76)
        {
          unsigned int v43 = v39;
        }
        else if (v78)
        {
          unsigned int v43 = v39;
        }
        else if (v80)
        {
          unsigned int v43 = v39;
        }
        else
        {
          uint64_t v82 = (v42 >> 4) + 1;
          uint64_t v83 = 2 * (v82 & 0x1FFFFFFFFFFFFFFCLL);
          unsigned int v43 = &v39[v83];
          uint64_t v84 = v82 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v85 = &v39[2 * v34];
            float64x2x2_t v170 = vld2q_f64(v85);
            v85 += 4;
            float64x2x2_t v172 = vld2q_f64(v85);
            uint64_t v86 = v39 + 8;
            vst2q_f64(v39, v170);
            uint64_t v87 = v39 + 4;
            vst2q_f64(v87, v172);
            uint64_t v39 = v86;
            v84 -= 4;
          }
          while (v84);
          if (v82 == (v82 & 0x1FFFFFFFFFFFFFFCLL)) {
            goto LABEL_36;
          }
          uint64_t v40 = (double *)((char *)v40 + v83 * 8);
        }
      }
      else
      {
        unsigned int v43 = v39;
      }
    }
    else
    {
      unsigned int v43 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *unsigned int v43 = *v40;
      v43[1] = v40[1];
      v43 += 2;
      v40 += 2;
    }
    while (v40 != v36);
LABEL_36:
    uint64_t v39 = v43;
    goto LABEL_37;
  }
LABEL_108:
  uint64_t v88 = *v160;
  uint64_t v89 = v160[1];
  if (*v160 == v89)
  {
    uint64_t v90 = v162;
    uint64_t v91 = v158;
  }
  else
  {
    uint64_t v90 = v162;
    uint64_t v91 = v158;
    while (*v88 != 0x41D4E9297E100630)
    {
      v88 += 5;
      if (v88 == v89) {
        goto LABEL_118;
      }
    }
  }
  if (v88 != v89)
  {
    uint64_t v92 = (std::__shared_weak_count *)v88[4];
    if (v92)
    {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
LABEL_118:
  uint64_t v93 = *v160;
  unsigned int v94 = v160[1];
  if (*v160 != v94)
  {
    while (*v93 != 0x4EDAD23DFB014132)
    {
      v93 += 5;
      if (v93 == v94) {
        goto LABEL_126;
      }
    }
  }
  if (v93 != v94)
  {
    uint64_t v95 = (std::__shared_weak_count *)v93[4];
    if (v95)
    {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
LABEL_126:
  uint64_t v96 = *v160;
  BOOL v97 = v160[1];
  if (*v160 != v97)
  {
    while (*v96 != 0x348A0B0E758C07C2)
    {
      v96 += 5;
      if (v96 == v97) {
        goto LABEL_134;
      }
    }
  }
  if (v96 != v97)
  {
    uint64_t v98 = (std::__shared_weak_count *)v96[4];
    if (v98)
    {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
LABEL_134:
  uint8x8_t v99 = __p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v100 = 0;
    uint64_t v101 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v160, v91, v99[v100++]);
      uint8x8_t v99 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v100);
    while (v101 != __p[1])
    {
      unint64_t v102 = *v101++;
      gdc::Registry::destroy((uint64_t)v91, v102);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v91);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v91);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v156 = *(unsigned __int8 *)(md::LayoutContext::frameState(v157) + 128);
  uint64_t v103 = *(int8x8_t **)(v90 + 120);
  uint64_t v153 = *((void *)v157 + 2);
  uint64_t v104 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>(v103);
  uint64_t v105 = v104[7];
  uint64_t v152 = v104[8];
  if (v105 != v152)
  {
    unsigned int v106 = (void *)v104[10];
    uint64_t v159 = (void *)(v90 + 168);
    while (1)
    {
      uint64_t v107 = *(void **)(v90 + 208);
      *(void *)(v90 + 216) = v107;
      unint64_t v108 = v106[2];
      if (v108 > (uint64_t)(*(void *)(v90 + 224) - (void)v107) >> 4)
      {
        if (v108 >> 60) {
          abort();
        }
        uint64_t v109 = 16 * v108;
        uint64_t v110 = (char *)operator new(16 * v108);
        *(void *)(v90 + 208) = v110;
        *(void *)(v90 + 216) = v110;
        *(void *)(v90 + 224) = &v110[v109];
        if (v107) {
          operator delete(v107);
        }
      }
      uint64_t v111 = *(void **)v153;
      unsigned int v112 = *(void **)(v153 + 8);
      uint64_t v154 = v105;
      if (*(void **)v153 != v112)
      {
        while (*v111 != 0x41D4E9297E100630)
        {
          v111 += 5;
          if (v111 == v112) {
            goto LABEL_157;
          }
        }
      }
      if (v111 != v112)
      {
        uint64_t v113 = (std::__shared_weak_count *)v111[4];
        if (v113)
        {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
      }
LABEL_157:
      uint64_t v114 = (void *)*v106;
      if ((void *)*v106 != v106 + 1) {
        break;
      }
      v106 += 3;
      v105 += 8;
      uint64_t v90 = v162;
      if (v154 + 8 == v152) {
        goto LABEL_193;
      }
    }
    uint64_t v115 = v114[4];
    uint64_t v116 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v159, (unsigned __int8 *)(v115 + 16));
    if (!v116)
    {
LABEL_188:
      uint64_t v135 = v114[5];
      v169[0] = v115;
      v169[1] = v135;
      if (v135) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v135 + 8), 1uLL, memory_order_relaxed);
      }
      LOWORD(v168[0]) = *(_WORD *)(v115 + 168);
      *(void *)((char *)v168 + 4) = *(void *)(v115 + 172);
      md::GeometryContext::transformConstantData((double *)&v167, v155, (unsigned __int8 *)v168, v156, *(double *)(v115 + 600), *(double *)(v115 + 608));
      uint64_t v136 = *(void *)(v162 + 136);
      char v137 = *((unsigned char *)v114 + 48);
      uint64_t v138 = *(void **)(v136 + 40);
      if (!v138)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(*(uint64_t ***)(v162 + 136));
        uint64_t v138 = *(void **)(v136 + 40);
      }
      *(void *)(v136 + 40) = *v138;
      md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v138, v169, v137, (v156 - 1) < 3u, &v167);
      gdc::Registry::create((gdc::Registry *)v103);
    }
    uint64_t v117 = v116;
    BOOL v119 = *(void **)(v162 + 144);
    unsigned int v118 = *(void **)(v162 + 152);
    if (v119 == v118)
    {
      uint64_t v120 = *(void *)(v162 + 144);
    }
    else
    {
      uint64_t v120 = *(void *)(v162 + 144);
      do
      {
        if (*(uint64_t **)v120 == v116[16]
          && *(unsigned __int16 *)(v120 + 8) == *((unsigned __int16 *)v116 + 68)
          && *(unsigned __int16 *)(v120 + 10) == *((unsigned __int16 *)v116 + 69)
          && *(_DWORD *)(v120 + 12) == *((_DWORD *)v116 + 35))
        {
          goto LABEL_170;
        }
        v120 += 16;
      }
      while ((void *)v120 != v118);
      uint64_t v120 = *(void *)(v162 + 152);
    }
LABEL_170:
    uint8x8_t v121 = (void *)(v120 + 16);
    if ((void *)(v120 + 16) != v118)
    {
      unint64_t v122 = (unint64_t)v118 - v120 - 32;
      if (v122 >= 0x30)
      {
        uint64_t v123 = (v120 - (uint64_t)v119) >> 4;
        uint64_t v124 = (v122 >> 4) + 1;
        uint64_t v125 = 16 * (v124 & 0x1FFFFFFFFFFFFFFCLL);
        v120 += v125;
        uint64_t v126 = (double *)&v119[2 * v123 + 4];
        uint64_t v127 = v124 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v128 = v126 - 2;
          float64x2x2_t v171 = vld2q_f64(v128);
          uint64_t v129 = v126 + 2;
          float64x2x2_t v173 = vld2q_f64(v129);
          int64_t v130 = v126 - 4;
          vst2q_f64(v130, v171);
          vst2q_f64(v126, v173);
          v126 += 8;
          v127 -= 4;
        }
        while (v127);
        if (v124 == (v124 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_177;
        }
        uint8x8_t v121 = (void *)((char *)v121 + v125);
      }
      do
      {
        *(void *)uint64_t v120 = *v121;
        *(void *)(v120 + 8) = v121[1];
        v120 += 16;
        v121 += 2;
      }
      while (v121 != v118);
    }
LABEL_177:
    *(void *)(v162 + 152) = v120;
    int64_t v131 = v116[16];
    if (v131)
    {
      uint64_t v132 = *(void *)(v162 + 136);
      if (*(void *)(v132 + 16))
      {
        (*(void (**)(uint64_t *))*v131)(v116[16]);
        *int64_t v131 = *(void *)(v132 + 40);
        *(void *)(v132 + 40) = v131;
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v159, v117);
    uint64_t v133 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v165)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        uint64_t v134 = (void *)v133[4];
        if (v134 != (void *)v133[6]) {
          free(v134);
        }
      }
      operator delete(v133);
    }
    uint64_t v115 = v114[4];
    goto LABEL_188;
  }
LABEL_193:
  unint64_t v166 = *(int8x8_t **)(v90 + 120);
  uint64_t v139 = gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(v166);
  if (*(void *)(v139 + 56) != *(void *)(v139 + 64))
  {
    uint64_t v142 = *(void **)(v90 + 144);
    uint64_t v140 = *(void **)(v90 + 152);
    __p[0] = *(void **)(v139 + 80);
    __p[1] = (void *)(v90 + 168);
    if (v142 == v140)
    {
LABEL_195:
      uint64_t v140 = v142;
    }
    else
    {
      do
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v142))
        {
          do
          {
            v140 -= 2;
            if (v140 == v142) {
              goto LABEL_195;
            }
          }
          while (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v140));
          uint64_t v143 = *v142;
          *uint64_t v142 = *v140;
          *uint64_t v140 = v143;
          uint64_t v144 = v142[1];
          v142[1] = v140[1];
          v140[1] = v144;
        }
        v142 += 2;
      }
      while (v142 != v140);
    }
    uint64_t v141 = *(void **)(v90 + 152);
    __p[0] = v140;
    __p[1] = v141;
    v168[0] = *(_OWORD *)(v90 + 208);
    gdc::Registry::create((gdc::Registry *)v166);
  }
  uint64_t result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(*(int8x8_t **)(v90 + 120));
  if (*(void *)(result + 88) != *(void *)(result + 80))
  {
    uint64_t v146 = **(uint64_t ***)(v90 + 128);
    if (v146 != *(uint64_t **)(*(void *)(v90 + 128) + 8) && *v146 != 0x22D45F5AAD4BF408)
    {
      uint64_t v147 = v146 + 5;
      do
      {
        uint64_t v148 = *v147;
        v147 += 5;
      }
      while (v148 != 0x22D45F5AAD4BF408);
      uint64_t v146 = v147 - 5;
    }
    uint64_t v149 = (uint64_t (***)(void))v146[3];
    uint64_t v150 = (std::__shared_weak_count *)v146[4];
    if (v150)
    {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    uint64_t result = (**v149)(v149);
    **(unsigned char **)(result + 736) = 1;
  }
  *uint64_t v151 = *(void *)(v90 + 120);
  return result;
}

void sub_1A1DFE750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF9F486144ED3B7F3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF9F486144ED3B7F3;
    if (*(void *)&v1 <= 0xF9F486144ED3B7F3) {
      unint64_t v3 = 0xF9F486144ED3B7F3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF9F486144ED3B7F3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF9F486144ED3B7F3)
      {
        if (v5[2] == 0xF9F486144ED3B7F3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF9F486144ED3B7F3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF9F486144ED3B7F3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DFEC7C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(int8x8_t *a1)
{
  uint64_t v10 = 0x1C552FD37D4E4C4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1C552FD37D4E4C4;
    if (*(void *)&v1 <= 0x1C552FD37D4E4C4uLL) {
      uint64_t v3 = 0x1C552FD37D4E4C4uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1C552FD37D4E4C4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1C552FD37D4E4C4)
      {
        if (v5[2] == 0x1C552FD37D4E4C4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1C552FD37D4E4C4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1C552FD37D4E4C4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DFEEEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  unint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)54>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4CFBA79336F4D604;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4CFBA79336F4D604;
    if (*(void *)&v1 <= 0x4CFBA79336F4D604uLL) {
      uint64_t v3 = 0x4CFBA79336F4D604uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4CFBA79336F4D604;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4CFBA79336F4D604)
      {
        if (v5[2] == 0x4CFBA79336F4D604) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4CFBA79336F4D604) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4CFBA79336F4D604) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1DFF324(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = a2 - 2;
    uint64_t v11 = a2 - 1;
    uint64_t v12 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v109 = *v12;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                  return result;
                }
                *uint64_t v12 = *v10;
                *unint64_t v10 = v109;
                uint64_t v110 = v12[1];
                v12[1] = *v11;
                goto LABEL_188;
              case 3:
                uint64_t v111 = v12[2];
                unsigned int v112 = *(unsigned __int8 *)(*(void *)(v111 + 384) + 169);
                uint64_t v113 = *v12;
                uint64_t v114 = *v10;
                unsigned int v115 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
                if (v112 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
                {
                  if (v115 <= v112) {
                    return result;
                  }
                  v12[2] = v114;
                  *unint64_t v10 = v111;
                  uint64_t v158 = v12[3];
                  v12[3] = *v11;
                  *uint64_t v11 = v158;
                  uint64_t v159 = v12[2];
                  uint64_t v160 = *v12;
                  if (*(unsigned __int8 *)(*(void *)(v159 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                    return result;
                  }
                  *uint64_t v12 = v159;
                  v12[2] = v160;
                  uint64_t v116 = v12 + 1;
                  uint64_t v11 = v12 + 3;
                }
                else
                {
                  if (v115 <= v112)
                  {
                    uint64_t v116 = v12 + 3;
                    uint64_t v169 = v12[3];
                    uint64_t v170 = v12[1];
                    *uint64_t v12 = v111;
                    v12[1] = v169;
                    v12[2] = v113;
                    v12[3] = v170;
                    if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v113 + 384) + 169)) {
                      return result;
                    }
                    v12[2] = *v10;
                  }
                  else
                  {
                    uint64_t v116 = v12 + 1;
                    *uint64_t v12 = v114;
                  }
                  *unint64_t v10 = v113;
                }
                uint64_t v110 = *v116;
                *uint64_t v116 = *v11;
LABEL_188:
                *uint64_t v11 = v110;
                break;
              case 4:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, a2 - 2);
              case 5:
                return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            uint64_t v117 = v12 + 2;
            BOOL v119 = v12 == a2 || v117 == a2;
            if (a4)
            {
              if (!v119)
              {
                uint64_t v120 = 0;
                uint8x8_t v121 = v12;
                do
                {
                  uint64_t v123 = v117;
                  uint64_t v124 = v121[2];
                  uint64_t v125 = *v121;
                  if (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v121 + 384) + 169))
                  {
                    uint64_t v126 = v121[3];
                    uint64_t v127 = v120;
                    do
                    {
                      uint64_t v128 = (char *)v12 + v127;
                      uint64_t v129 = *(uint64_t *)((char *)v12 + v127 + 8);
                      *((void *)v128 + 2) = v125;
                      *((void *)v128 + 3) = v129;
                      if (!v127)
                      {
                        unint64_t v122 = v12;
                        goto LABEL_129;
                      }
                      uint64_t v125 = *((void *)v128 - 2);
                      v127 -= 16;
                    }
                    while (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v125 + 384) + 169));
                    unint64_t v122 = (uint64_t *)((char *)v12 + v127 + 16);
LABEL_129:
                    *unint64_t v122 = v124;
                    v122[1] = v126;
                  }
                  uint64_t v117 = v123 + 2;
                  v120 += 16;
                  uint8x8_t v121 = v123;
                }
                while (v123 + 2 != a2);
              }
            }
            else if (!v119)
            {
              uint64_t v161 = v12 + 3;
              do
              {
                uint64_t v162 = v117;
                uint64_t v163 = v9[2];
                uint64_t v164 = *v9;
                if (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v9 + 384) + 169))
                {
                  uint64_t v165 = v9[3];
                  unint64_t v166 = v161;
                  do
                  {
                    uint64_t v167 = v166;
                    *(v166 - 1) = v164;
                    uint64_t v168 = *(v166 - 2);
                    v166 -= 2;
                    *uint64_t v167 = v168;
                    uint64_t v164 = *(v167 - 5);
                  }
                  while (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v164 + 384) + 169));
                  *(v166 - 1) = v163;
                  uint64_t *v166 = v165;
                }
                uint64_t v117 = v162 + 2;
                v161 += 2;
                uint64_t v9 = v162;
              }
              while (v162 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v130 = (unint64_t)(v14 - 2) >> 1;
              int64_t v131 = v130;
              do
              {
                int64_t v132 = v131;
                if (v130 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  uint64_t v134 = &v12[2 * v133];
                  if (2 * v132 + 2 < v14)
                  {
                    unsigned int v135 = *(unsigned __int8 *)(*(void *)(*v134 + 384) + 169);
                    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169);
                    BOOL v137 = v135 > v136;
                    if (v135 <= v136) {
                      uint64_t v138 = *v134;
                    }
                    else {
                      uint64_t v138 = v134[2];
                    }
                    if (v137)
                    {
                      v134 += 2;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v138 = *v134;
                  }
                  uint64_t v139 = &v12[2 * v132];
                  uint64_t v140 = *v139;
                  uint64_t result = *(unsigned __int8 *)(*(void *)(*v139 + 384) + 169);
                  if (*(unsigned __int8 *)(*(void *)(v138 + 384) + 169) <= result)
                  {
                    uint64_t v141 = v139[1];
                    do
                    {
                      uint64_t result = (unint64_t)v139;
                      uint64_t v139 = v134;
                      *(void *)uint64_t result = v138;
                      *(void *)(result + 8) = v134[1];
                      if (v130 < v133) {
                        break;
                      }
                      uint64_t v142 = (2 * v133) | 1;
                      uint64_t v134 = &v12[2 * v142];
                      uint64_t v133 = 2 * v133 + 2;
                      if (v133 < v14)
                      {
                        uint64_t v138 = *v134;
                        if (*(unsigned __int8 *)(*(void *)(*v134 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169))
                        {
                          uint64_t v133 = v142;
                        }
                        else
                        {
                          uint64_t v138 = v134[2];
                          v134 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v138 = *v134;
                        uint64_t v133 = v142;
                      }
                      uint64_t result = *(unsigned __int8 *)(*(void *)(v138 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(void *)(v140 + 384) + 169));
                    *uint64_t v139 = v140;
                    v139[1] = v141;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v143 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v144 = 0;
                uint64_t v145 = *v12;
                uint64_t v146 = v12[1];
                uint64_t v147 = v12;
                do
                {
                  uint64_t v149 = &v147[2 * v144 + 2];
                  uint64_t v150 = (2 * v144) | 1;
                  uint64_t v144 = 2 * v144 + 2;
                  if (v144 < v143)
                  {
                    uint64_t v148 = *v149;
                    uint64_t result = (unint64_t)(v149 + 2);
                    if (*(unsigned __int8 *)(*(void *)(*v149 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v149[2] + 384) + 169))
                    {
                      uint64_t v144 = v150;
                    }
                    else
                    {
                      uint64_t v148 = v149[2];
                      v149 += 2;
                    }
                  }
                  else
                  {
                    uint64_t v148 = *v149;
                    uint64_t v144 = v150;
                  }
                  *uint64_t v147 = v148;
                  v147[1] = v149[1];
                  uint64_t v147 = v149;
                }
                while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                if (v149 == a2 - 2)
                {
                  *uint64_t v149 = v145;
                  v149[1] = v146;
                }
                else
                {
                  *uint64_t v149 = *(a2 - 2);
                  v149[1] = *(a2 - 1);
                  *(a2 - 2) = v145;
                  *(a2 - 1) = v146;
                  uint64_t v151 = (char *)v149 - (char *)v12 + 16;
                  if (v151 >= 17)
                  {
                    unint64_t v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                    uint64_t v153 = &v12[2 * v152];
                    uint64_t v154 = *v153;
                    uint64_t v155 = *v149;
                    if (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v149 + 384) + 169))
                    {
                      uint64_t v156 = v149[1];
                      do
                      {
                        uint64_t v157 = v149;
                        uint64_t v149 = v153;
                        *uint64_t v157 = v154;
                        v157[1] = v153[1];
                        if (!v152) {
                          break;
                        }
                        unint64_t v152 = (v152 - 1) >> 1;
                        uint64_t v153 = &v12[2 * v152];
                        uint64_t v154 = *v153;
                      }
                      while (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v155 + 384) + 169));
                      *uint64_t v149 = v155;
                      v149[1] = v156;
                    }
                  }
                }
                a2 -= 2;
                BOOL v137 = v143-- <= 2;
              }
              while (!v137);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
          uint64_t v17 = *v10;
          unsigned int v18 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
          if ((unint64_t)v13 >= 0x801)
          {
            uint64_t v19 = *v16;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
            uint64_t v21 = *v12;
            if (v20 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
            {
              if (v18 <= v20
                || (uint64_t *v16 = v17,
                    *unint64_t v10 = v19,
                    uint64_t v28 = v16 + 1,
                    uint64_t v27 = v16[1],
                    v16[1] = *v11,
                    *uint64_t v11 = v27,
                    uint64_t v29 = *v12,
                    *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)))
              {
LABEL_24:
                uint64_t v36 = &v12[2 * v15];
                uint64_t v39 = *(v36 - 2);
                uint64_t v37 = v36 - 2;
                uint64_t v38 = v39;
                unsigned int v40 = *(unsigned __int8 *)(*(void *)(v39 + 384) + 169);
                uint64_t v41 = v12[2];
                uint64_t v42 = *(a2 - 4);
                unsigned int v43 = *(unsigned __int8 *)(*(void *)(v42 + 384) + 169);
                if (v40 <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169))
                {
                  if (v43 <= v40
                    || (*uint64_t v37 = v42,
                        *(a2 - 4) = v38,
                        uint64_t v45 = v37 + 1,
                        uint64_t v46 = v37[1],
                        v37[1] = *(a2 - 3),
                        *(a2 - 3) = v46,
                        uint64_t v47 = v12[2],
                        *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v47 + 384) + 169)))
                  {
LABEL_37:
                    uint64_t v54 = &v12[2 * v15];
                    uint64_t v57 = v54[2];
                    unint64_t v55 = v54 + 2;
                    uint64_t v56 = v57;
                    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 384) + 169);
                    uint64_t v59 = v12[4];
                    uint64_t v60 = *(a2 - 6);
                    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v60 + 384) + 169);
                    if (v58 <= *(unsigned __int8 *)(*(void *)(v59 + 384) + 169))
                    {
                      if (v61 > v58)
                      {
                        *unint64_t v55 = v60;
                        *(a2 - 6) = v56;
                        unint64_t v64 = v55 + 1;
                        uint64_t v63 = v55[1];
                        v55[1] = *(a2 - 5);
                        *(a2 - 5) = v63;
                        uint64_t v56 = *v55;
                        unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        uint64_t v65 = v12[4];
                        if (v58 > *(unsigned __int8 *)(*(void *)(v65 + 384) + 169))
                        {
                          v12[4] = v56;
                          *unint64_t v55 = v65;
                          float64x2x2_t v62 = v12 + 5;
LABEL_46:
                          uint64_t v69 = *v62;
                          *float64x2x2_t v62 = *v64;
                          *unint64_t v64 = v69;
                          uint64_t v56 = *v55;
                          unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v61 > v58)
                      {
                        float64x2x2_t v62 = v12 + 5;
                        v12[4] = v60;
LABEL_45:
                        *(a2 - 6) = v59;
                        unint64_t v64 = a2 - 5;
                        goto LABEL_46;
                      }
                      float64x2x2_t v62 = v55 + 1;
                      uint64_t v66 = v55[1];
                      uint64_t v67 = v12[5];
                      v12[4] = v56;
                      v12[5] = v66;
                      *unint64_t v55 = v59;
                      v55[1] = v67;
                      uint64_t v68 = *(a2 - 6);
                      unsigned int v58 = *(unsigned __int8 *)(*(void *)(v59 + 384) + 169);
                      if (*(unsigned __int8 *)(*(void *)(v68 + 384) + 169) > v58)
                      {
                        *unint64_t v55 = v68;
                        goto LABEL_45;
                      }
                      uint64_t v56 = v59;
                    }
                    uint64_t v70 = *v16;
                    unsigned int v71 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
                    uint64_t v72 = *v37;
                    if (v71 <= *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169))
                    {
                      if (v58 <= v71)
                      {
LABEL_57:
                        uint64_t v80 = *v12;
                        *uint64_t v12 = v70;
                        uint64_t v26 = v12 + 1;
                        uint64_t *v16 = v80;
                        uint64_t v32 = v16 + 1;
                        goto LABEL_58;
                      }
                      uint64_t *v16 = v56;
                      int8x8_t v75 = v16 + 1;
                      uint64_t v76 = v16[1];
                      v16[1] = v55[1];
                      *unint64_t v55 = v70;
                      v55[1] = v76;
                      if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                      {
                        uint64_t v70 = v56;
                        goto LABEL_57;
                      }
                      *uint64_t v37 = v56;
                      BOOL v73 = v37 + 1;
                      uint64_t *v16 = v72;
                    }
                    else
                    {
                      if (v58 <= v71)
                      {
                        uint64_t *v16 = v72;
                        uint64_t v77 = v16[1];
                        uint64_t v78 = v37[1];
                        *uint64_t v37 = v70;
                        v37[1] = v77;
                        v16[1] = v78;
                        if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                        {
                          uint64_t v70 = v72;
                          goto LABEL_57;
                        }
                        uint64_t *v16 = v56;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                        BOOL v73 = v16 + 1;
                      }
                      else
                      {
                        *uint64_t v37 = v56;
                        BOOL v73 = v37 + 1;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                      }
                      int8x8_t v75 = v74;
                    }
                    uint64_t v79 = *v73;
                    *BOOL v73 = *v75;
                    *int8x8_t v75 = v79;
                    uint64_t v70 = *v16;
                    goto LABEL_57;
                  }
                  v12[2] = *v37;
                  *uint64_t v37 = v47;
                  unint64_t v44 = v12 + 3;
                }
                else
                {
                  if (v43 <= v40)
                  {
                    unint64_t v44 = v37 + 1;
                    uint64_t v50 = v37[1];
                    uint64_t v51 = v12[3];
                    v12[2] = v38;
                    v12[3] = v50;
                    *uint64_t v37 = v41;
                    v37[1] = v51;
                    uint64_t v52 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(void *)(v52 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169)) {
                      goto LABEL_37;
                    }
                    *uint64_t v37 = v52;
                  }
                  else
                  {
                    unint64_t v44 = v12 + 3;
                    v12[2] = v42;
                  }
                  *(a2 - 4) = v41;
                  uint64_t v45 = a2 - 3;
                }
                uint64_t v53 = *v44;
                uint64_t *v44 = *v45;
                *uint64_t v45 = v53;
                goto LABEL_37;
              }
              *uint64_t v12 = *v16;
              unint64_t v22 = v12 + 1;
              uint64_t *v16 = v29;
            }
            else
            {
              if (v18 <= v20)
              {
                unint64_t v22 = v16 + 1;
                uint64_t v33 = v16[1];
                uint64_t v34 = v12[1];
                *uint64_t v12 = v19;
                v12[1] = v33;
                uint64_t *v16 = v21;
                v16[1] = v34;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v21 + 384) + 169)) {
                  goto LABEL_24;
                }
                uint64_t *v16 = *v10;
              }
              else
              {
                unint64_t v22 = v12 + 1;
                *uint64_t v12 = v17;
              }
              *unint64_t v10 = v21;
              uint64_t v28 = a2 - 1;
            }
            uint64_t v35 = *v22;
            *unint64_t v22 = *v28;
            *uint64_t v28 = v35;
            goto LABEL_24;
          }
          uint64_t v23 = *v12;
          unsigned int v24 = *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169);
          uint64_t v25 = *v16;
          if (v24 <= *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169)) {
            break;
          }
          if (v18 > v24)
          {
            uint64_t v26 = v16 + 1;
            uint64_t *v16 = v17;
LABEL_32:
            *unint64_t v10 = v25;
            uint64_t v32 = a2 - 1;
            goto LABEL_58;
          }
          uint64_t v26 = v12 + 1;
          uint64_t v48 = v12[1];
          uint64_t v49 = v16[1];
          uint64_t *v16 = v23;
          v16[1] = v48;
          *uint64_t v12 = v25;
          v12[1] = v49;
          if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v25 + 384) + 169))
          {
            *uint64_t v12 = *v10;
            goto LABEL_32;
          }
          uint64_t v23 = v25;
          --a3;
          if (a4) {
            goto LABEL_60;
          }
LABEL_62:
          unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
          if (*(unsigned __int8 *)(*(void *)(*(v12 - 2) + 384) + 169) > v82) {
            goto LABEL_63;
          }
          if (v82 > *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169))
          {
            do
            {
              uint64_t v98 = v12[2];
              v12 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(v98 + 384) + 169));
          }
          else
          {
            uint8x8_t v99 = v12 + 2;
            do
            {
              uint64_t v12 = v99;
              if (v99 >= a2) {
                break;
              }
              v99 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169));
          }
          unint64_t v100 = a2;
          if (v12 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = *(v100 - 2);
              v100 -= 2;
            }
            while (v82 > *(unsigned __int8 *)(*(void *)(v101 + 384) + 169));
          }
          uint64_t v102 = v9[1];
          if (v12 < v100)
          {
            uint64_t v103 = *v12;
            uint64_t v104 = *v100;
            do
            {
              *uint64_t v12 = v104;
              *unint64_t v100 = v103;
              uint64_t v105 = v12[1];
              v12[1] = v100[1];
              v100[1] = v105;
              unsigned int v106 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
              do
              {
                uint64_t v107 = v12[2];
                v12 += 2;
                uint64_t v103 = v107;
              }
              while (v106 <= *(unsigned __int8 *)(*(void *)(v107 + 384) + 169));
              do
              {
                uint64_t v108 = *(v100 - 2);
                v100 -= 2;
                uint64_t v104 = v108;
              }
              while (v106 > *(unsigned __int8 *)(*(void *)(v108 + 384) + 169));
            }
            while (v12 < v100);
          }
          BOOL v4 = v12 - 2 >= v9;
          BOOL v5 = v12 - 2 == v9;
          if (v12 - 2 != v9)
          {
            *uint64_t v9 = *(v12 - 2);
            v9[1] = *(v12 - 1);
          }
          a4 = 0;
          *(v12 - 2) = v23;
          *(v12 - 1) = v102;
        }
        if (v18 > v24)
        {
          *uint64_t v12 = v17;
          *unint64_t v10 = v23;
          uint64_t v30 = v12[1];
          v12[1] = *v11;
          *uint64_t v11 = v30;
          uint64_t v23 = *v12;
          uint64_t v31 = *v16;
          if (*(unsigned __int8 *)(*(void *)(*v12 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169))
          {
            uint64_t *v16 = v23;
            *uint64_t v12 = v31;
            uint64_t v26 = v16 + 1;
            uint64_t v32 = v12 + 1;
LABEL_58:
            uint64_t v81 = *v26;
            *uint64_t v26 = *v32;
            *uint64_t v32 = v81;
            uint64_t v23 = *v12;
          }
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_60:
        unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
LABEL_63:
        uint64_t v83 = v12[1];
        uint64_t v84 = v12;
        do
        {
          uint64_t v85 = v84;
          uint64_t v87 = v84[2];
          v84 += 2;
          uint64_t v86 = v87;
        }
        while (*(unsigned __int8 *)(*(void *)(v87 + 384) + 169) > v82);
        uint64_t v88 = a2;
        if (v85 == v12)
        {
          uint64_t v88 = a2;
          do
          {
            if (v84 >= v88) {
              break;
            }
            uint64_t v90 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v90 + 384) + 169) <= v82);
        }
        else
        {
          do
          {
            uint64_t v89 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v89 + 384) + 169) <= v82);
        }
        if (v84 < v88)
        {
          uint64_t v91 = *v88;
          uint64_t v12 = v84;
          uint64_t v92 = v88;
          do
          {
            *uint64_t v12 = v91;
            *uint64_t v92 = v86;
            uint64_t v93 = v12[1];
            v12[1] = v92[1];
            v92[1] = v93;
            unsigned int v94 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
            do
            {
              uint64_t v95 = v12[2];
              v12 += 2;
              uint64_t v86 = v95;
            }
            while (*(unsigned __int8 *)(*(void *)(v95 + 384) + 169) > v94);
            do
            {
              uint64_t v96 = *(v92 - 2);
              v92 -= 2;
              uint64_t v91 = v96;
            }
            while (*(unsigned __int8 *)(*(void *)(v96 + 384) + 169) <= v94);
          }
          while (v12 < v92);
        }
        else
        {
          uint64_t v12 = v84;
        }
        if (v12 - 2 != v9)
        {
          *uint64_t v9 = *(v12 - 2);
          v9[1] = *(v12 - 1);
        }
        *(v12 - 2) = v23;
        *(v12 - 1) = v83;
        if (v84 >= v88) {
          break;
        }
LABEL_83:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v9, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v9, v12 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, a2);
      if (result) {
        break;
      }
      if (!v97) {
        goto LABEL_83;
      }
    }
    a2 = v12 - 2;
    if (!v97) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)54>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)54> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 2);
      uint64_t v4 = *a1;
      if (*(unsigned __int8 *)(*(void *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        uint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v6 = a1[2];
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v6 + 384) + 169);
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 2);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          uint64_t v11 = a1 + 3;
          uint64_t v26 = a1[3];
          uint64_t v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          uint64_t v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(void *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v8 + 384) + 169)) {
            return 1;
          }
          a1[2] = v28;
        }
        else
        {
          uint64_t v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        unsigned int v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        unsigned int v20 = a1 + 3;
        uint64_t v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v21 = a1[2];
        uint64_t v22 = *a1;
        if (*(unsigned __int8 *)(*(void *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          uint64_t v11 = a1 + 1;
LABEL_21:
          uint64_t v29 = *v11;
          *uint64_t v11 = *v20;
          *unsigned int v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[2];
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(v14 + 384) + 169);
      uint64_t v16 = *a1;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          unsigned int v18 = a1 + 3;
          uint64_t v30 = a1[3];
          uint64_t v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v16 + 384) + 169)) {
            goto LABEL_26;
          }
          a1[2] = v13;
        }
        else
        {
          unsigned int v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        unsigned int v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        unsigned int v24 = a1 + 3;
        uint64_t v23 = a1[3];
        uint64_t v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          unsigned int v18 = a1 + 1;
LABEL_25:
          uint64_t v32 = *v18;
          *unsigned int v18 = *v24;
          *unsigned int v24 = v32;
        }
      }
LABEL_26:
      uint64_t v33 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        uint64_t v37 = *v33;
        uint64_t v38 = *v12;
        if (*(unsigned __int8 *)(*(void *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
        {
          uint64_t v39 = v33[1];
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = (uint64_t *)((char *)a1 + v40);
            uint64_t v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              uint64_t v36 = a1;
              goto LABEL_29;
            }
            uint64_t v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(void *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v38 + 384) + 169));
          uint64_t v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *uint64_t v36 = v37;
          v36[1] = v39;
          if (++v35 == 8) {
            return v33 + 2 == a2;
          }
        }
        uint64_t v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2) {
          return 1;
        }
      }
  }
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xF5BDE3F396AD5C40 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3) {
      uint64_t v3 = 0x3070CB6B3C7F21D3 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x5B0BFF71B88387C7;
    if (a2 <= 0x5B0BFF71B88387C7) {
      uint64_t v11 = 0x5B0BFF71B88387C7 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x5B0BFF71B88387C7;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x5B0BFF71B88387C7)
      {
        if (v13[2] == 0x5B0BFF71B88387C7) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x5B0BFF71B88387C7)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x5B0BFF71B88387C7)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x5B0BFF71B88387C7) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF5BDE3F396AD5C40)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)54>>>>::_allocateContext()
{
}

void sub_1A1E00EF4(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)54>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)54>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514920;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)54>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514920;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF513708;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)54,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF513708;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, void *a4)
{
  uint64_t v155 = *a3;
  char v7 = *(int8x8_t **)(a1 + 120);
  uint64_t v8 = (uint64_t **)*((void *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v166 = 0;
  char v9 = *v8;
  if (*v8 != v8[1] && *v9 != 0x22D45F5AAD4BF408)
  {
    uint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    char v9 = v10 - 5;
  }
  uint64_t v12 = (void (***)(void))v9[3];
  uint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (**v12)(v12);
  uint64_t v157 = a2;
  uint64_t v158 = v8;
  uint64_t v162 = a1;
  uint64_t v151 = a4;
  uint64_t v159 = v7;
  unint64_t v14 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(v7);
  uint64_t v15 = v14[7];
  uint64_t v163 = v14[8];
  uint64_t v16 = a1;
  if (v15 != v163)
  {
    uint64_t v17 = a1 + 168;
    uint64_t v18 = v14[10];
    uint64_t v164 = (char **)(v162 + 232);
    while (1)
    {
      unsigned int v24 = *(uint64_t **)(v16 + 144);
      uint64_t v25 = *(uint64_t **)(v16 + 152);
      *(void *)&v169[0] = v18;
      *((void *)&v169[0] + 1) = v17;
LABEL_17:
      while (v24 != v25)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v169, (uint64_t)v24))
        {
          while (1)
          {
            v25 -= 2;
            if (v25 == v24) {
              goto LABEL_23;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v169, (uint64_t)v25))
            {
              uint64_t v26 = *v24;
              *unsigned int v24 = *v25;
              *uint64_t v25 = v26;
              uint64_t v27 = v24[1];
              v24[1] = v25[1];
              v25[1] = v27;
              v24 += 2;
              goto LABEL_17;
            }
          }
        }
        v24 += 2;
      }
LABEL_23:
      uint64_t v29 = *(char **)(v162 + 144);
      uint64_t v28 = *(char **)(v162 + 152);
      *(void *)&v169[0] = v18;
      *((void *)&v169[0] + 1) = v17;
LABEL_24:
      while (v29 != v28)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v169, (uint64_t)v29))
        {
          while (1)
          {
            v28 -= 16;
            if (v28 == v29) {
              break;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)v169, (uint64_t)v28))
            {
              uint64_t v30 = *(void *)v29;
              *(void *)uint64_t v29 = *(void *)v28;
              *(void *)uint64_t v28 = v30;
              uint64_t v31 = *((void *)v29 + 1);
              *((void *)v29 + 1) = *((void *)v28 + 1);
              *((void *)v28 + 1) = v31;
              v29 += 16;
              goto LABEL_24;
            }
          }
          uint64_t v28 = v29;
          break;
        }
        v29 += 16;
      }
      uint64_t v32 = *(long long **)(v162 + 152);
      int64_t v33 = (char *)v32 - v28;
      uint64_t v34 = ((char *)v32 - v28) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v164, *(void *)(v162 + 240), (unint64_t)v28, v32, v34);
      uint64_t v35 = v162;
      if (v28 == (char *)v32) {
        goto LABEL_38;
      }
      uint64_t v37 = *(void *)(v162 + 144);
      uint64_t v36 = *(double **)(v162 + 152);
      unint64_t v38 = (unint64_t)&v28[-v37];
      uint64_t v39 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      uint64_t v40 = &v39[2 * v34];
      if (v40 != v36) {
        break;
      }
LABEL_37:
      uint64_t v35 = v162;
      *(void *)(v162 + 152) = v39;
LABEL_38:
      unint64_t v44 = *(char **)(v35 + 232);
      uint64_t v19 = *(char **)(v35 + 240);
      if (v19 != v44)
      {
        do
        {
          uint64_t v45 = (char *)__p[1];
          if (__p[1] >= (void *)v166)
          {
            uint64_t v47 = (char *)__p[0];
            int64_t v48 = (char *)__p[1] - (char *)__p[0];
            int64_t v49 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61) {
              abort();
            }
            uint64_t v51 = v166 - (unint64_t)__p[0];
            if ((uint64_t)(v166 - (unint64_t)__p[0]) >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v53 = operator new(8 * v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            void *v54 = *((void *)v44 + 1);
            uint64_t v46 = v54 + 1;
            if (v45 == v47)
            {
              uint64_t v47 = v45;
            }
            else
            {
              unint64_t v55 = v45 - 8 - v47;
              if (v55 < 0x58) {
                goto LABEL_219;
              }
              if ((unint64_t)(v45 - &v53[v48]) < 0x20) {
                goto LABEL_219;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              uint64_t v57 = &v53[8 * v49 - 16];
              unsigned int v58 = v45 - 16;
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *uint64_t v57 = v60;
                v57 -= 2;
                v58 -= 32;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v45 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_219:
                do
                {
                  uint64_t v61 = *((void *)v45 - 1);
                  v45 -= 8;
                  *--uint64_t v54 = v61;
                }
                while (v45 != v47);
                uint64_t v47 = (char *)__p[0];
              }
            }
            __p[0] = v54;
            __p[1] = v46;
            *(void *)&long long v166 = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)__p[1] = *((void *)v44 + 1);
            uint64_t v46 = v45 + 8;
          }
          __p[1] = v46;
          float64x2x2_t v62 = *(void (****)(void))v44;
          if (*(void *)v44)
          {
            uint64_t v63 = *(void *)(v162 + 136);
            if (*(void *)(v63 + 16))
            {
              (**v62)(*(void *)v44);
              *float64x2x2_t v62 = *(void (***)(void))(v63 + 40);
              *(void *)(v63 + 40) = v62;
            }
          }
          v44 += 16;
        }
        while (v44 != v19);
        uint64_t v19 = *v164;
      }
      uint64_t v16 = v162;
      unint64_t v20 = *(void *)(v162 + 144);
      uint64_t v21 = *(uint64_t **)(v162 + 152);
      unint64_t v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
      *(void *)(v162 + 240) = v19;
      if (v21 == (uint64_t *)v20) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v20, v21, v23, 1);
      v18 += 24;
      v15 += 8;
      uint64_t v17 = v162 + 168;
      if (v15 == v163) {
        goto LABEL_108;
      }
    }
    unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v42 = (unint64_t)v36 + -(v38 & 0xFFFFFFFFFFFFFFF0) - v37 - v33 - 16;
    if (v42 >= 0x270)
    {
      unint64_t v64 = v41 + (v42 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v65 = v37 + (v64 | 8);
      unint64_t v66 = v37 + (v41 | 8);
      unint64_t v67 = v64 + v37 + 16;
      uint64_t v68 = v33 + v41 + v37;
      uint64_t v69 = v68 + (v42 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v70 = v69 + 8;
      unint64_t v71 = v68 + 8;
      unint64_t v72 = v69 + 16;
      BOOL v74 = (unint64_t)v39 < v69 + 8 && (unint64_t)v40 < v65;
      BOOL v76 = (unint64_t)v39 < v72 && v71 < v65;
      BOOL v78 = v66 < v70 && (unint64_t)v40 < v67;
      BOOL v80 = v66 < v72 && v71 < v67;
      if (v66 >= v65 || (unint64_t)v39 >= v67)
      {
        if (v74)
        {
          unsigned int v43 = v39;
        }
        else if (v76)
        {
          unsigned int v43 = v39;
        }
        else if (v78)
        {
          unsigned int v43 = v39;
        }
        else if (v80)
        {
          unsigned int v43 = v39;
        }
        else
        {
          uint64_t v82 = (v42 >> 4) + 1;
          uint64_t v83 = 2 * (v82 & 0x1FFFFFFFFFFFFFFCLL);
          unsigned int v43 = &v39[v83];
          uint64_t v84 = v82 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v85 = &v39[2 * v34];
            float64x2x2_t v171 = vld2q_f64(v85);
            v85 += 4;
            float64x2x2_t v173 = vld2q_f64(v85);
            uint64_t v86 = v39 + 8;
            vst2q_f64(v39, v171);
            uint64_t v87 = v39 + 4;
            vst2q_f64(v87, v173);
            uint64_t v39 = v86;
            v84 -= 4;
          }
          while (v84);
          if (v82 == (v82 & 0x1FFFFFFFFFFFFFFCLL)) {
            goto LABEL_36;
          }
          uint64_t v40 = (double *)((char *)v40 + v83 * 8);
        }
      }
      else
      {
        unsigned int v43 = v39;
      }
    }
    else
    {
      unsigned int v43 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
    }
    do
    {
      *unsigned int v43 = *v40;
      v43[1] = v40[1];
      v43 += 2;
      v40 += 2;
    }
    while (v40 != v36);
LABEL_36:
    uint64_t v39 = v43;
    goto LABEL_37;
  }
LABEL_108:
  uint64_t v88 = *v158;
  uint64_t v89 = v158[1];
  if (*v158 == v89)
  {
    uint64_t v90 = v162;
    uint64_t v91 = v159;
  }
  else
  {
    uint64_t v90 = v162;
    uint64_t v91 = v159;
    while (*v88 != 0x41D4E9297E100630)
    {
      v88 += 5;
      if (v88 == v89) {
        goto LABEL_118;
      }
    }
  }
  if (v88 != v89)
  {
    uint64_t v92 = (std::__shared_weak_count *)v88[4];
    if (v92)
    {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
LABEL_118:
  uint64_t v93 = *v158;
  unsigned int v94 = v158[1];
  if (*v158 != v94)
  {
    while (*v93 != 0x4EDAD23DFB014132)
    {
      v93 += 5;
      if (v93 == v94) {
        goto LABEL_126;
      }
    }
  }
  if (v93 != v94)
  {
    uint64_t v95 = (std::__shared_weak_count *)v93[4];
    if (v95)
    {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
LABEL_126:
  uint64_t v96 = *v158;
  BOOL v97 = v158[1];
  if (*v158 != v97)
  {
    while (*v96 != 0x348A0B0E758C07C2)
    {
      v96 += 5;
      if (v96 == v97) {
        goto LABEL_134;
      }
    }
  }
  if (v96 != v97)
  {
    uint64_t v98 = (std::__shared_weak_count *)v96[4];
    if (v98)
    {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
LABEL_134:
  uint8x8_t v99 = __p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v100 = 0;
    uint64_t v101 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v158, v91, v99[v100++]);
      uint8x8_t v99 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v100);
    while (v101 != __p[1])
    {
      unint64_t v102 = *v101++;
      gdc::Registry::destroy((uint64_t)v91, v102);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::DaVinciGroundRenderable>>(v91);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::DaVinciGroundRenderable>>(v91);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v156 = *(unsigned __int8 *)(md::LayoutContext::frameState(v157) + 128);
  uint64_t v153 = *((void *)v157 + 2);
  uint64_t v161 = *(int8x8_t **)(v90 + 120);
  uint64_t v103 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>(v161);
  uint64_t v104 = v103[7];
  uint64_t v152 = v103[8];
  if (v104 != v152)
  {
    uint64_t v105 = (void *)v103[10];
    uint64_t v160 = (void *)(v90 + 168);
    while (1)
    {
      unsigned int v106 = *(void **)(v90 + 208);
      *(void *)(v90 + 216) = v106;
      unint64_t v107 = v105[2];
      if (v107 > (uint64_t)(*(void *)(v90 + 224) - (void)v106) >> 4)
      {
        if (v107 >> 60) {
          abort();
        }
        uint64_t v108 = 16 * v107;
        uint64_t v109 = (char *)operator new(16 * v107);
        *(void *)(v90 + 208) = v109;
        *(void *)(v90 + 216) = v109;
        *(void *)(v90 + 224) = &v109[v108];
        if (v106) {
          operator delete(v106);
        }
      }
      uint64_t v110 = *(void **)v153;
      uint64_t v111 = *(void **)(v153 + 8);
      uint64_t v154 = v104;
      if (*(void **)v153 != v111)
      {
        while (*v110 != 0x41D4E9297E100630)
        {
          v110 += 5;
          if (v110 == v111)
          {
            unsigned int v112 = (gdc::Registry *)v161;
            goto LABEL_157;
          }
        }
      }
      unsigned int v112 = (gdc::Registry *)v161;
      if (v110 != v111)
      {
        uint64_t v113 = (std::__shared_weak_count *)v110[4];
        if (v113)
        {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
      }
LABEL_157:
      uint64_t v114 = (void *)*v105;
      if ((void *)*v105 != v105 + 1) {
        break;
      }
      v105 += 3;
      v104 += 8;
      if (v154 + 8 == v152) {
        goto LABEL_192;
      }
    }
    uint64_t v115 = v114[4];
    uint64_t v116 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v160, (unsigned __int8 *)(v115 + 16));
    if (!v116)
    {
LABEL_187:
      uint64_t v135 = v114[5];
      v170[0] = v115;
      v170[1] = v135;
      if (v135) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v135 + 8), 1uLL, memory_order_relaxed);
      }
      LOWORD(v169[0]) = *(_WORD *)(v115 + 168);
      *(void *)((char *)v169 + 4) = *(void *)(v115 + 172);
      md::GeometryContext::transformConstantData((double *)&v168, v155, (unsigned __int8 *)v169, v156, *(double *)(v115 + 600), *(double *)(v115 + 608));
      uint64_t v136 = *(void *)(v90 + 136);
      char v137 = *((unsigned char *)v114 + 48);
      uint64_t v138 = *(void **)(v136 + 40);
      if (!v138)
      {
        geo::Pool<md::DaVinciGroundRenderable>::allocateSlab(*(uint64_t ***)(v90 + 136));
        uint64_t v138 = *(void **)(v136 + 40);
      }
      *(void *)(v136 + 40) = *v138;
      md::DaVinciGroundRenderable::DaVinciGroundRenderable((uint64_t)v138, v170, v137, (v156 - 1) < 3u, &v168);
      gdc::Registry::create(v112);
    }
    uint64_t v117 = v116;
    BOOL v119 = *(void **)(v90 + 144);
    unsigned int v118 = *(void **)(v90 + 152);
    if (v119 == v118)
    {
      uint64_t v120 = *(void *)(v90 + 144);
    }
    else
    {
      uint64_t v120 = *(void *)(v90 + 144);
      do
      {
        if (*(uint64_t **)v120 == v116[16]
          && *(unsigned __int16 *)(v120 + 8) == *((unsigned __int16 *)v116 + 68)
          && *(unsigned __int16 *)(v120 + 10) == *((unsigned __int16 *)v116 + 69)
          && *(_DWORD *)(v120 + 12) == *((_DWORD *)v116 + 35))
        {
          goto LABEL_169;
        }
        v120 += 16;
      }
      while ((void *)v120 != v118);
      uint64_t v120 = *(void *)(v90 + 152);
    }
LABEL_169:
    uint8x8_t v121 = (void *)(v120 + 16);
    if ((void *)(v120 + 16) != v118)
    {
      unint64_t v122 = (unint64_t)v118 - v120 - 32;
      if (v122 >= 0x30)
      {
        uint64_t v123 = (v120 - (uint64_t)v119) >> 4;
        uint64_t v124 = (v122 >> 4) + 1;
        uint64_t v125 = 16 * (v124 & 0x1FFFFFFFFFFFFFFCLL);
        v120 += v125;
        uint64_t v126 = (double *)&v119[2 * v123 + 4];
        uint64_t v127 = v124 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v128 = v126 - 2;
          float64x2x2_t v172 = vld2q_f64(v128);
          uint64_t v129 = v126 + 2;
          float64x2x2_t v174 = vld2q_f64(v129);
          int64_t v130 = v126 - 4;
          vst2q_f64(v130, v172);
          vst2q_f64(v126, v174);
          v126 += 8;
          v127 -= 4;
        }
        while (v127);
        if (v124 == (v124 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_176;
        }
        uint8x8_t v121 = (void *)((char *)v121 + v125);
      }
      do
      {
        *(void *)uint64_t v120 = *v121;
        *(void *)(v120 + 8) = v121[1];
        v120 += 16;
        v121 += 2;
      }
      while (v121 != v118);
    }
LABEL_176:
    *(void *)(v90 + 152) = v120;
    int64_t v131 = v116[16];
    if (v131)
    {
      uint64_t v132 = *(void *)(v90 + 136);
      if (*(void *)(v132 + 16))
      {
        (*(void (**)(uint64_t *))*v131)(v116[16]);
        *int64_t v131 = *(void *)(v132 + 40);
        *(void *)(v132 + 40) = v131;
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v160, v117);
    uint64_t v133 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v166)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        uint64_t v134 = (void *)v133[4];
        if (v134 != (void *)v133[6]) {
          free(v134);
        }
      }
      operator delete(v133);
    }
    uint64_t v115 = v114[4];
    goto LABEL_187;
  }
LABEL_192:
  uint64_t v167 = *(int8x8_t **)(v90 + 120);
  uint64_t v139 = gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(v167);
  if (*(void *)(v139 + 56) != *(void *)(v139 + 64))
  {
    uint64_t v142 = *(void **)(v90 + 144);
    uint64_t v140 = *(void **)(v90 + 152);
    __p[0] = *(void **)(v139 + 80);
    __p[1] = (void *)(v90 + 168);
    if (v142 == v140)
    {
LABEL_194:
      uint64_t v140 = v142;
    }
    else
    {
      do
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v142))
        {
          do
          {
            v140 -= 2;
            if (v140 == v142) {
              goto LABEL_194;
            }
          }
          while (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v140));
          uint64_t v143 = *v142;
          *uint64_t v142 = *v140;
          *uint64_t v140 = v143;
          uint64_t v144 = v142[1];
          v142[1] = v140[1];
          v140[1] = v144;
        }
        v142 += 2;
      }
      while (v142 != v140);
    }
    uint64_t v141 = *(void **)(v162 + 152);
    __p[0] = v140;
    __p[1] = v141;
    v169[0] = *(_OWORD *)(v162 + 208);
    gdc::Registry::create((gdc::Registry *)v167);
  }
  uint64_t result = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(*(int8x8_t **)(v90 + 120));
  if (*(void *)(result + 88) != *(void *)(result + 80))
  {
    uint64_t v146 = **(uint64_t ***)(v90 + 128);
    if (v146 != *(uint64_t **)(*(void *)(v90 + 128) + 8) && *v146 != 0x22D45F5AAD4BF408)
    {
      uint64_t v147 = v146 + 5;
      do
      {
        uint64_t v148 = *v147;
        v147 += 5;
      }
      while (v148 != 0x22D45F5AAD4BF408);
      uint64_t v146 = v147 - 5;
    }
    uint64_t v149 = (uint64_t (***)(void))v146[3];
    uint64_t v150 = (std::__shared_weak_count *)v146[4];
    if (v150)
    {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    uint64_t result = (**v149)(v149);
    **(unsigned char **)(result + 736) = 1;
  }
  *uint64_t v151 = *(void *)(v90 + 120);
  return result;
}

void sub_1A1E03024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>(int8x8_t *a1)
{
  uint64_t v10 = 0x3EDBE6080169A53DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3EDBE6080169A53DLL;
    if (*(void *)&v1 <= 0x3EDBE6080169A53DuLL) {
      uint64_t v3 = 0x3EDBE6080169A53DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3EDBE6080169A53DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3EDBE6080169A53DLL)
      {
        if (v5[2] == 0x3EDBE6080169A53DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3EDBE6080169A53DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3EDBE6080169A53DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E03520(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(int8x8_t *a1)
{
  unint64_t v10 = 0x8E91716731470C3ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8E91716731470C3ALL;
    if (*(void *)&v1 <= 0x8E91716731470C3ALL) {
      unint64_t v3 = 0x8E91716731470C3ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8E91716731470C3ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8E91716731470C3ALL)
      {
        if (v5[2] == 0x8E91716731470C3ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8E91716731470C3ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8E91716731470C3ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E03790(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  unint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)62>>(int8x8_t *a1)
{
  uint64_t v10 = 0x6A4AF42FD3B2DA7ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6A4AF42FD3B2DA7ALL;
    if (*(void *)&v1 <= 0x6A4AF42FD3B2DA7AuLL) {
      uint64_t v3 = 0x6A4AF42FD3B2DA7AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6A4AF42FD3B2DA7ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6A4AF42FD3B2DA7ALL)
      {
        if (v5[2] == 0x6A4AF42FD3B2DA7ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6A4AF42FD3B2DA7ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6A4AF42FD3B2DA7ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E03BC8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = a2 - 2;
    uint64_t v11 = a2 - 1;
    uint64_t v12 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v109 = *v12;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                  return result;
                }
                *uint64_t v12 = *v10;
                *unint64_t v10 = v109;
                uint64_t v110 = v12[1];
                v12[1] = *v11;
                goto LABEL_188;
              case 3:
                uint64_t v111 = v12[2];
                unsigned int v112 = *(unsigned __int8 *)(*(void *)(v111 + 384) + 169);
                uint64_t v113 = *v12;
                uint64_t v114 = *v10;
                unsigned int v115 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
                if (v112 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
                {
                  if (v115 <= v112) {
                    return result;
                  }
                  v12[2] = v114;
                  *unint64_t v10 = v111;
                  uint64_t v158 = v12[3];
                  v12[3] = *v11;
                  *uint64_t v11 = v158;
                  uint64_t v159 = v12[2];
                  uint64_t v160 = *v12;
                  if (*(unsigned __int8 *)(*(void *)(v159 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                    return result;
                  }
                  *uint64_t v12 = v159;
                  v12[2] = v160;
                  uint64_t v116 = v12 + 1;
                  uint64_t v11 = v12 + 3;
                }
                else
                {
                  if (v115 <= v112)
                  {
                    uint64_t v116 = v12 + 3;
                    uint64_t v169 = v12[3];
                    uint64_t v170 = v12[1];
                    *uint64_t v12 = v111;
                    v12[1] = v169;
                    v12[2] = v113;
                    v12[3] = v170;
                    if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v113 + 384) + 169)) {
                      return result;
                    }
                    v12[2] = *v10;
                  }
                  else
                  {
                    uint64_t v116 = v12 + 1;
                    *uint64_t v12 = v114;
                  }
                  *unint64_t v10 = v113;
                }
                uint64_t v110 = *v116;
                *uint64_t v116 = *v11;
LABEL_188:
                *uint64_t v11 = v110;
                break;
              case 4:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, a2 - 2);
              case 5:
                return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            uint64_t v117 = v12 + 2;
            BOOL v119 = v12 == a2 || v117 == a2;
            if (a4)
            {
              if (!v119)
              {
                uint64_t v120 = 0;
                uint8x8_t v121 = v12;
                do
                {
                  uint64_t v123 = v117;
                  uint64_t v124 = v121[2];
                  uint64_t v125 = *v121;
                  if (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v121 + 384) + 169))
                  {
                    uint64_t v126 = v121[3];
                    uint64_t v127 = v120;
                    do
                    {
                      uint64_t v128 = (char *)v12 + v127;
                      uint64_t v129 = *(uint64_t *)((char *)v12 + v127 + 8);
                      *((void *)v128 + 2) = v125;
                      *((void *)v128 + 3) = v129;
                      if (!v127)
                      {
                        unint64_t v122 = v12;
                        goto LABEL_129;
                      }
                      uint64_t v125 = *((void *)v128 - 2);
                      v127 -= 16;
                    }
                    while (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v125 + 384) + 169));
                    unint64_t v122 = (uint64_t *)((char *)v12 + v127 + 16);
LABEL_129:
                    *unint64_t v122 = v124;
                    v122[1] = v126;
                  }
                  uint64_t v117 = v123 + 2;
                  v120 += 16;
                  uint8x8_t v121 = v123;
                }
                while (v123 + 2 != a2);
              }
            }
            else if (!v119)
            {
              uint64_t v161 = v12 + 3;
              do
              {
                uint64_t v162 = v117;
                uint64_t v163 = v9[2];
                uint64_t v164 = *v9;
                if (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v9 + 384) + 169))
                {
                  uint64_t v165 = v9[3];
                  long long v166 = v161;
                  do
                  {
                    uint64_t v167 = v166;
                    *(v166 - 1) = v164;
                    uint64_t v168 = *(v166 - 2);
                    v166 -= 2;
                    *uint64_t v167 = v168;
                    uint64_t v164 = *(v167 - 5);
                  }
                  while (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v164 + 384) + 169));
                  *(v166 - 1) = v163;
                  uint64_t *v166 = v165;
                }
                uint64_t v117 = v162 + 2;
                v161 += 2;
                uint64_t v9 = v162;
              }
              while (v162 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v130 = (unint64_t)(v14 - 2) >> 1;
              int64_t v131 = v130;
              do
              {
                int64_t v132 = v131;
                if (v130 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  uint64_t v134 = &v12[2 * v133];
                  if (2 * v132 + 2 < v14)
                  {
                    unsigned int v135 = *(unsigned __int8 *)(*(void *)(*v134 + 384) + 169);
                    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169);
                    BOOL v137 = v135 > v136;
                    if (v135 <= v136) {
                      uint64_t v138 = *v134;
                    }
                    else {
                      uint64_t v138 = v134[2];
                    }
                    if (v137)
                    {
                      v134 += 2;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v138 = *v134;
                  }
                  uint64_t v139 = &v12[2 * v132];
                  uint64_t v140 = *v139;
                  uint64_t result = *(unsigned __int8 *)(*(void *)(*v139 + 384) + 169);
                  if (*(unsigned __int8 *)(*(void *)(v138 + 384) + 169) <= result)
                  {
                    uint64_t v141 = v139[1];
                    do
                    {
                      uint64_t result = (unint64_t)v139;
                      uint64_t v139 = v134;
                      *(void *)uint64_t result = v138;
                      *(void *)(result + 8) = v134[1];
                      if (v130 < v133) {
                        break;
                      }
                      uint64_t v142 = (2 * v133) | 1;
                      uint64_t v134 = &v12[2 * v142];
                      uint64_t v133 = 2 * v133 + 2;
                      if (v133 < v14)
                      {
                        uint64_t v138 = *v134;
                        if (*(unsigned __int8 *)(*(void *)(*v134 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169))
                        {
                          uint64_t v133 = v142;
                        }
                        else
                        {
                          uint64_t v138 = v134[2];
                          v134 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v138 = *v134;
                        uint64_t v133 = v142;
                      }
                      uint64_t result = *(unsigned __int8 *)(*(void *)(v138 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(void *)(v140 + 384) + 169));
                    *uint64_t v139 = v140;
                    v139[1] = v141;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v143 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v144 = 0;
                uint64_t v145 = *v12;
                uint64_t v146 = v12[1];
                uint64_t v147 = v12;
                do
                {
                  uint64_t v149 = &v147[2 * v144 + 2];
                  uint64_t v150 = (2 * v144) | 1;
                  uint64_t v144 = 2 * v144 + 2;
                  if (v144 < v143)
                  {
                    uint64_t v148 = *v149;
                    uint64_t result = (unint64_t)(v149 + 2);
                    if (*(unsigned __int8 *)(*(void *)(*v149 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v149[2] + 384) + 169))
                    {
                      uint64_t v144 = v150;
                    }
                    else
                    {
                      uint64_t v148 = v149[2];
                      v149 += 2;
                    }
                  }
                  else
                  {
                    uint64_t v148 = *v149;
                    uint64_t v144 = v150;
                  }
                  *uint64_t v147 = v148;
                  v147[1] = v149[1];
                  uint64_t v147 = v149;
                }
                while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                if (v149 == a2 - 2)
                {
                  *uint64_t v149 = v145;
                  v149[1] = v146;
                }
                else
                {
                  *uint64_t v149 = *(a2 - 2);
                  v149[1] = *(a2 - 1);
                  *(a2 - 2) = v145;
                  *(a2 - 1) = v146;
                  uint64_t v151 = (char *)v149 - (char *)v12 + 16;
                  if (v151 >= 17)
                  {
                    unint64_t v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                    uint64_t v153 = &v12[2 * v152];
                    uint64_t v154 = *v153;
                    uint64_t v155 = *v149;
                    if (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v149 + 384) + 169))
                    {
                      uint64_t v156 = v149[1];
                      do
                      {
                        uint64_t v157 = v149;
                        uint64_t v149 = v153;
                        *uint64_t v157 = v154;
                        v157[1] = v153[1];
                        if (!v152) {
                          break;
                        }
                        unint64_t v152 = (v152 - 1) >> 1;
                        uint64_t v153 = &v12[2 * v152];
                        uint64_t v154 = *v153;
                      }
                      while (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v155 + 384) + 169));
                      *uint64_t v149 = v155;
                      v149[1] = v156;
                    }
                  }
                }
                a2 -= 2;
                BOOL v137 = v143-- <= 2;
              }
              while (!v137);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
          uint64_t v17 = *v10;
          unsigned int v18 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
          if ((unint64_t)v13 >= 0x801)
          {
            uint64_t v19 = *v16;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
            uint64_t v21 = *v12;
            if (v20 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
            {
              if (v18 <= v20
                || (uint64_t *v16 = v17,
                    *unint64_t v10 = v19,
                    uint64_t v28 = v16 + 1,
                    uint64_t v27 = v16[1],
                    v16[1] = *v11,
                    *uint64_t v11 = v27,
                    uint64_t v29 = *v12,
                    *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)))
              {
LABEL_24:
                uint64_t v36 = &v12[2 * v15];
                uint64_t v39 = *(v36 - 2);
                uint64_t v37 = v36 - 2;
                uint64_t v38 = v39;
                unsigned int v40 = *(unsigned __int8 *)(*(void *)(v39 + 384) + 169);
                uint64_t v41 = v12[2];
                uint64_t v42 = *(a2 - 4);
                unsigned int v43 = *(unsigned __int8 *)(*(void *)(v42 + 384) + 169);
                if (v40 <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169))
                {
                  if (v43 <= v40
                    || (*uint64_t v37 = v42,
                        *(a2 - 4) = v38,
                        uint64_t v45 = v37 + 1,
                        uint64_t v46 = v37[1],
                        v37[1] = *(a2 - 3),
                        *(a2 - 3) = v46,
                        uint64_t v47 = v12[2],
                        *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v47 + 384) + 169)))
                  {
LABEL_37:
                    uint64_t v54 = &v12[2 * v15];
                    uint64_t v57 = v54[2];
                    unint64_t v55 = v54 + 2;
                    uint64_t v56 = v57;
                    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 384) + 169);
                    uint64_t v59 = v12[4];
                    uint64_t v60 = *(a2 - 6);
                    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v60 + 384) + 169);
                    if (v58 <= *(unsigned __int8 *)(*(void *)(v59 + 384) + 169))
                    {
                      if (v61 > v58)
                      {
                        *unint64_t v55 = v60;
                        *(a2 - 6) = v56;
                        unint64_t v64 = v55 + 1;
                        uint64_t v63 = v55[1];
                        v55[1] = *(a2 - 5);
                        *(a2 - 5) = v63;
                        uint64_t v56 = *v55;
                        unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        uint64_t v65 = v12[4];
                        if (v58 > *(unsigned __int8 *)(*(void *)(v65 + 384) + 169))
                        {
                          v12[4] = v56;
                          *unint64_t v55 = v65;
                          float64x2x2_t v62 = v12 + 5;
LABEL_46:
                          uint64_t v69 = *v62;
                          *float64x2x2_t v62 = *v64;
                          *unint64_t v64 = v69;
                          uint64_t v56 = *v55;
                          unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v61 > v58)
                      {
                        float64x2x2_t v62 = v12 + 5;
                        v12[4] = v60;
LABEL_45:
                        *(a2 - 6) = v59;
                        unint64_t v64 = a2 - 5;
                        goto LABEL_46;
                      }
                      float64x2x2_t v62 = v55 + 1;
                      uint64_t v66 = v55[1];
                      uint64_t v67 = v12[5];
                      v12[4] = v56;
                      v12[5] = v66;
                      *unint64_t v55 = v59;
                      v55[1] = v67;
                      uint64_t v68 = *(a2 - 6);
                      unsigned int v58 = *(unsigned __int8 *)(*(void *)(v59 + 384) + 169);
                      if (*(unsigned __int8 *)(*(void *)(v68 + 384) + 169) > v58)
                      {
                        *unint64_t v55 = v68;
                        goto LABEL_45;
                      }
                      uint64_t v56 = v59;
                    }
                    uint64_t v70 = *v16;
                    unsigned int v71 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
                    uint64_t v72 = *v37;
                    if (v71 <= *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169))
                    {
                      if (v58 <= v71)
                      {
LABEL_57:
                        uint64_t v80 = *v12;
                        *uint64_t v12 = v70;
                        uint64_t v26 = v12 + 1;
                        uint64_t *v16 = v80;
                        uint64_t v32 = v16 + 1;
                        goto LABEL_58;
                      }
                      uint64_t *v16 = v56;
                      int8x8_t v75 = v16 + 1;
                      uint64_t v76 = v16[1];
                      v16[1] = v55[1];
                      *unint64_t v55 = v70;
                      v55[1] = v76;
                      if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                      {
                        uint64_t v70 = v56;
                        goto LABEL_57;
                      }
                      *uint64_t v37 = v56;
                      BOOL v73 = v37 + 1;
                      uint64_t *v16 = v72;
                    }
                    else
                    {
                      if (v58 <= v71)
                      {
                        uint64_t *v16 = v72;
                        uint64_t v77 = v16[1];
                        uint64_t v78 = v37[1];
                        *uint64_t v37 = v70;
                        v37[1] = v77;
                        v16[1] = v78;
                        if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                        {
                          uint64_t v70 = v72;
                          goto LABEL_57;
                        }
                        uint64_t *v16 = v56;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                        BOOL v73 = v16 + 1;
                      }
                      else
                      {
                        *uint64_t v37 = v56;
                        BOOL v73 = v37 + 1;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                      }
                      int8x8_t v75 = v74;
                    }
                    uint64_t v79 = *v73;
                    *BOOL v73 = *v75;
                    *int8x8_t v75 = v79;
                    uint64_t v70 = *v16;
                    goto LABEL_57;
                  }
                  v12[2] = *v37;
                  *uint64_t v37 = v47;
                  unint64_t v44 = v12 + 3;
                }
                else
                {
                  if (v43 <= v40)
                  {
                    unint64_t v44 = v37 + 1;
                    uint64_t v50 = v37[1];
                    uint64_t v51 = v12[3];
                    v12[2] = v38;
                    v12[3] = v50;
                    *uint64_t v37 = v41;
                    v37[1] = v51;
                    uint64_t v52 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(void *)(v52 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169)) {
                      goto LABEL_37;
                    }
                    *uint64_t v37 = v52;
                  }
                  else
                  {
                    unint64_t v44 = v12 + 3;
                    v12[2] = v42;
                  }
                  *(a2 - 4) = v41;
                  uint64_t v45 = a2 - 3;
                }
                uint64_t v53 = *v44;
                uint64_t *v44 = *v45;
                *uint64_t v45 = v53;
                goto LABEL_37;
              }
              *uint64_t v12 = *v16;
              unint64_t v22 = v12 + 1;
              uint64_t *v16 = v29;
            }
            else
            {
              if (v18 <= v20)
              {
                unint64_t v22 = v16 + 1;
                uint64_t v33 = v16[1];
                uint64_t v34 = v12[1];
                *uint64_t v12 = v19;
                v12[1] = v33;
                uint64_t *v16 = v21;
                v16[1] = v34;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v21 + 384) + 169)) {
                  goto LABEL_24;
                }
                uint64_t *v16 = *v10;
              }
              else
              {
                unint64_t v22 = v12 + 1;
                *uint64_t v12 = v17;
              }
              *unint64_t v10 = v21;
              uint64_t v28 = a2 - 1;
            }
            uint64_t v35 = *v22;
            *unint64_t v22 = *v28;
            *uint64_t v28 = v35;
            goto LABEL_24;
          }
          uint64_t v23 = *v12;
          unsigned int v24 = *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169);
          uint64_t v25 = *v16;
          if (v24 <= *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169)) {
            break;
          }
          if (v18 > v24)
          {
            uint64_t v26 = v16 + 1;
            uint64_t *v16 = v17;
LABEL_32:
            *unint64_t v10 = v25;
            uint64_t v32 = a2 - 1;
            goto LABEL_58;
          }
          uint64_t v26 = v12 + 1;
          uint64_t v48 = v12[1];
          uint64_t v49 = v16[1];
          uint64_t *v16 = v23;
          v16[1] = v48;
          *uint64_t v12 = v25;
          v12[1] = v49;
          if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v25 + 384) + 169))
          {
            *uint64_t v12 = *v10;
            goto LABEL_32;
          }
          uint64_t v23 = v25;
          --a3;
          if (a4) {
            goto LABEL_60;
          }
LABEL_62:
          unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
          if (*(unsigned __int8 *)(*(void *)(*(v12 - 2) + 384) + 169) > v82) {
            goto LABEL_63;
          }
          if (v82 > *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169))
          {
            do
            {
              uint64_t v98 = v12[2];
              v12 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(v98 + 384) + 169));
          }
          else
          {
            uint8x8_t v99 = v12 + 2;
            do
            {
              uint64_t v12 = v99;
              if (v99 >= a2) {
                break;
              }
              v99 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169));
          }
          unint64_t v100 = a2;
          if (v12 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = *(v100 - 2);
              v100 -= 2;
            }
            while (v82 > *(unsigned __int8 *)(*(void *)(v101 + 384) + 169));
          }
          uint64_t v102 = v9[1];
          if (v12 < v100)
          {
            uint64_t v103 = *v12;
            uint64_t v104 = *v100;
            do
            {
              *uint64_t v12 = v104;
              *unint64_t v100 = v103;
              uint64_t v105 = v12[1];
              v12[1] = v100[1];
              v100[1] = v105;
              unsigned int v106 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
              do
              {
                uint64_t v107 = v12[2];
                v12 += 2;
                uint64_t v103 = v107;
              }
              while (v106 <= *(unsigned __int8 *)(*(void *)(v107 + 384) + 169));
              do
              {
                uint64_t v108 = *(v100 - 2);
                v100 -= 2;
                uint64_t v104 = v108;
              }
              while (v106 > *(unsigned __int8 *)(*(void *)(v108 + 384) + 169));
            }
            while (v12 < v100);
          }
          BOOL v4 = v12 - 2 >= v9;
          BOOL v5 = v12 - 2 == v9;
          if (v12 - 2 != v9)
          {
            *uint64_t v9 = *(v12 - 2);
            v9[1] = *(v12 - 1);
          }
          a4 = 0;
          *(v12 - 2) = v23;
          *(v12 - 1) = v102;
        }
        if (v18 > v24)
        {
          *uint64_t v12 = v17;
          *unint64_t v10 = v23;
          uint64_t v30 = v12[1];
          v12[1] = *v11;
          *uint64_t v11 = v30;
          uint64_t v23 = *v12;
          uint64_t v31 = *v16;
          if (*(unsigned __int8 *)(*(void *)(*v12 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169))
          {
            uint64_t *v16 = v23;
            *uint64_t v12 = v31;
            uint64_t v26 = v16 + 1;
            uint64_t v32 = v12 + 1;
LABEL_58:
            uint64_t v81 = *v26;
            *uint64_t v26 = *v32;
            *uint64_t v32 = v81;
            uint64_t v23 = *v12;
          }
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_60:
        unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
LABEL_63:
        uint64_t v83 = v12[1];
        uint64_t v84 = v12;
        do
        {
          uint64_t v85 = v84;
          uint64_t v87 = v84[2];
          v84 += 2;
          uint64_t v86 = v87;
        }
        while (*(unsigned __int8 *)(*(void *)(v87 + 384) + 169) > v82);
        uint64_t v88 = a2;
        if (v85 == v12)
        {
          uint64_t v88 = a2;
          do
          {
            if (v84 >= v88) {
              break;
            }
            uint64_t v90 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v90 + 384) + 169) <= v82);
        }
        else
        {
          do
          {
            uint64_t v89 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v89 + 384) + 169) <= v82);
        }
        if (v84 < v88)
        {
          uint64_t v91 = *v88;
          uint64_t v12 = v84;
          uint64_t v92 = v88;
          do
          {
            *uint64_t v12 = v91;
            *uint64_t v92 = v86;
            uint64_t v93 = v12[1];
            v12[1] = v92[1];
            v92[1] = v93;
            unsigned int v94 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
            do
            {
              uint64_t v95 = v12[2];
              v12 += 2;
              uint64_t v86 = v95;
            }
            while (*(unsigned __int8 *)(*(void *)(v95 + 384) + 169) > v94);
            do
            {
              uint64_t v96 = *(v92 - 2);
              v92 -= 2;
              uint64_t v91 = v96;
            }
            while (*(unsigned __int8 *)(*(void *)(v96 + 384) + 169) <= v94);
          }
          while (v12 < v92);
        }
        else
        {
          uint64_t v12 = v84;
        }
        if (v12 - 2 != v9)
        {
          *uint64_t v9 = *(v12 - 2);
          v9[1] = *(v12 - 1);
        }
        *(v12 - 2) = v23;
        *(v12 - 1) = v83;
        if (v84 >= v88) {
          break;
        }
LABEL_83:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*,false>(v9, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v9, v12 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, a2);
      if (result) {
        break;
      }
      if (!v97) {
        goto LABEL_83;
      }
    }
    a2 = v12 - 2;
    if (!v97) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)62>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)62> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 2);
      uint64_t v4 = *a1;
      if (*(unsigned __int8 *)(*(void *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        uint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v6 = a1[2];
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v6 + 384) + 169);
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 2);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          uint64_t v11 = a1 + 3;
          uint64_t v26 = a1[3];
          uint64_t v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          uint64_t v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(void *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v8 + 384) + 169)) {
            return 1;
          }
          a1[2] = v28;
        }
        else
        {
          uint64_t v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        unsigned int v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        unsigned int v20 = a1 + 3;
        uint64_t v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v21 = a1[2];
        uint64_t v22 = *a1;
        if (*(unsigned __int8 *)(*(void *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          uint64_t v11 = a1 + 1;
LABEL_21:
          uint64_t v29 = *v11;
          *uint64_t v11 = *v20;
          *unsigned int v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[2];
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(v14 + 384) + 169);
      uint64_t v16 = *a1;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          unsigned int v18 = a1 + 3;
          uint64_t v30 = a1[3];
          uint64_t v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v16 + 384) + 169)) {
            goto LABEL_26;
          }
          a1[2] = v13;
        }
        else
        {
          unsigned int v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        unsigned int v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        unsigned int v24 = a1 + 3;
        uint64_t v23 = a1[3];
        uint64_t v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          unsigned int v18 = a1 + 1;
LABEL_25:
          uint64_t v32 = *v18;
          *unsigned int v18 = *v24;
          *unsigned int v24 = v32;
        }
      }
LABEL_26:
      uint64_t v33 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        uint64_t v37 = *v33;
        uint64_t v38 = *v12;
        if (*(unsigned __int8 *)(*(void *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
        {
          uint64_t v39 = v33[1];
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = (uint64_t *)((char *)a1 + v40);
            uint64_t v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              uint64_t v36 = a1;
              goto LABEL_29;
            }
            uint64_t v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(void *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v38 + 384) + 169));
          uint64_t v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *uint64_t v36 = v37;
          v36[1] = v39;
          if (++v35 == 8) {
            return v33 + 2 == a2;
          }
        }
        uint64_t v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2) {
          return 1;
        }
      }
  }
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x552ACF95227023D6 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3) {
      uint64_t v3 = 0x3070CB6B3C7F21D3 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x5A88E3C88DA0DCA1;
    if (a2 <= 0x5A88E3C88DA0DCA1) {
      uint64_t v11 = 0x5A88E3C88DA0DCA1 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x5A88E3C88DA0DCA1;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x5A88E3C88DA0DCA1)
      {
        if (v13[2] == 0x5A88E3C88DA0DCA1) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x5A88E3C88DA0DCA1)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x5A88E3C88DA0DCA1)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x5A88E3C88DA0DCA1) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x552ACF95227023D6)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x552ACF95227023D6)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x552ACF95227023D6)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x552ACF95227023D6)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)62>>>>::_allocateContext()
{
}

void sub_1A1E05798(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)62>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)62>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514948;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)62>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514948;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5137C0;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)62,md::DaVinciGroundRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5137C0;
  SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, void *a4)
{
  uint64_t v148 = *a3;
  uint64_t v6 = *(int8x8_t **)(a1 + 120);
  char v7 = (uint64_t **)*((void *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v159 = 0;
  uint64_t v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    char v9 = v8 + 5;
    do
    {
      uint64_t v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    uint64_t v8 = v9 - 5;
  }
  uint64_t v11 = (void (***)(void))v8[3];
  uint64_t v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (**v11)(v11);
  uint64_t v151 = v6;
  unint64_t v152 = v7;
  uint64_t v150 = a2;
  uint64_t v144 = a4;
  uint64_t v13 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(v6);
  unint64_t v14 = (void *)a1;
  uint64_t v15 = v13[7];
  uint64_t v155 = v13[8];
  if (v15 != v155)
  {
    uint64_t v16 = a1 + 168;
    uint64_t v17 = v13[10];
    uint64_t v157 = (char **)(a1 + 232);
    do
    {
      uint64_t v23 = v14;
      unsigned int v24 = (uint64_t *)v14[18];
      uint64_t v25 = (uint64_t *)v23[19];
      *(void *)&long long v162 = v17;
      *((void *)&v162 + 1) = v16;
LABEL_17:
      while (v24 != v25)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v24))
        {
          while (1)
          {
            v25 -= 2;
            if (v25 == v24) {
              goto LABEL_23;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v25))
            {
              uint64_t v26 = *v24;
              *unsigned int v24 = *v25;
              *uint64_t v25 = v26;
              uint64_t v27 = v24[1];
              v24[1] = v25[1];
              v25[1] = v27;
              v24 += 2;
              goto LABEL_17;
            }
          }
        }
        v24 += 2;
      }
LABEL_23:
      uint64_t v29 = *(char **)(a1 + 144);
      uint64_t v28 = *(char **)(a1 + 152);
      *(void *)&long long v162 = v17;
      *((void *)&v162 + 1) = v16;
LABEL_24:
      while (v29 != v28)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v29))
        {
          while (1)
          {
            v28 -= 16;
            if (v28 == v29) {
              break;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v28))
            {
              uint64_t v30 = *(void *)v29;
              *(void *)uint64_t v29 = *(void *)v28;
              *(void *)uint64_t v28 = v30;
              uint64_t v31 = *((void *)v29 + 1);
              *((void *)v29 + 1) = *((void *)v28 + 1);
              *((void *)v28 + 1) = v31;
              v29 += 16;
              goto LABEL_24;
            }
          }
          uint64_t v28 = v29;
          break;
        }
        v29 += 16;
      }
      uint64_t v32 = *(long long **)(a1 + 152);
      int64_t v33 = (char *)v32 - v28;
      uint64_t v34 = ((char *)v32 - v28) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v157, *(void *)(a1 + 240), (unint64_t)v28, v32, v34);
      int v35 = (void *)a1;
      if (v28 == (char *)v32) {
        goto LABEL_39;
      }
      uint64_t v37 = *(void *)(a1 + 144);
      uint64_t v36 = *(double **)(a1 + 152);
      unint64_t v38 = (unint64_t)&v28[-v37];
      uint64_t v39 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      uint64_t v40 = &v39[2 * v34];
      if (v40 == v36)
      {
        int v35 = (void *)a1;
        goto LABEL_38;
      }
      unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF0;
      unint64_t v42 = (unint64_t)v36 + -(v38 & 0xFFFFFFFFFFFFFFF0) - v37 - v33 - 16;
      int v35 = (void *)a1;
      if (v42 >= 0x270)
      {
        unint64_t v64 = v41 + (v42 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v65 = v37 + (v64 | 8);
        unint64_t v66 = v37 + (v41 | 8);
        unint64_t v67 = v64 + v37 + 16;
        uint64_t v68 = v33 + v41 + v37;
        uint64_t v69 = v68 + (v42 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v70 = v69 + 8;
        unint64_t v71 = v68 + 8;
        unint64_t v72 = v69 + 16;
        BOOL v74 = (unint64_t)v39 < v69 + 8 && (unint64_t)v40 < v65;
        BOOL v76 = (unint64_t)v39 < v72 && v71 < v65;
        BOOL v78 = v66 < v70 && (unint64_t)v40 < v67;
        BOOL v80 = v66 < v72 && v71 < v67;
        if (v66 >= v65 || (unint64_t)v39 >= v67)
        {
          if (v74)
          {
            unsigned int v43 = v39;
          }
          else if (v76)
          {
            unsigned int v43 = v39;
          }
          else if (v78)
          {
            unsigned int v43 = v39;
          }
          else if (v80)
          {
            unsigned int v43 = v39;
          }
          else
          {
            uint64_t v82 = (v42 >> 4) + 1;
            uint64_t v83 = 2 * (v82 & 0x1FFFFFFFFFFFFFFCLL);
            unsigned int v43 = &v39[v83];
            uint64_t v84 = v82 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v85 = &v39[2 * v34];
              float64x2x2_t v163 = vld2q_f64(v85);
              v85 += 4;
              float64x2x2_t v165 = vld2q_f64(v85);
              uint64_t v86 = v39 + 8;
              vst2q_f64(v39, v163);
              uint64_t v87 = v39 + 4;
              vst2q_f64(v87, v165);
              uint64_t v39 = v86;
              v84 -= 4;
            }
            while (v84);
            if (v82 == (v82 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_36;
            }
            uint64_t v40 = (double *)((char *)v40 + v83 * 8);
          }
        }
        else
        {
          unsigned int v43 = v39;
        }
      }
      else
      {
        unsigned int v43 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      }
      do
      {
        *unsigned int v43 = *v40;
        v43[1] = v40[1];
        v43 += 2;
        v40 += 2;
      }
      while (v40 != v36);
LABEL_36:
      uint64_t v39 = v43;
LABEL_38:
      v35[19] = v39;
LABEL_39:
      unint64_t v44 = (char *)v35[29];
      unsigned int v18 = (char *)v35[30];
      if (v18 == v44)
      {
        unint64_t v14 = v35;
      }
      else
      {
        do
        {
          uint64_t v45 = (char *)__p[1];
          if (__p[1] >= (void *)v159)
          {
            uint64_t v47 = (char *)__p[0];
            int64_t v48 = (char *)__p[1] - (char *)__p[0];
            int64_t v49 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61) {
              abort();
            }
            uint64_t v51 = v159 - (unint64_t)__p[0];
            if ((uint64_t)(v159 - (unint64_t)__p[0]) >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v53 = operator new(8 * v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            void *v54 = *((void *)v44 + 1);
            uint64_t v46 = v54 + 1;
            if (v45 == v47)
            {
              uint64_t v47 = v45;
            }
            else
            {
              unint64_t v55 = v45 - 8 - v47;
              if (v55 < 0x58) {
                goto LABEL_212;
              }
              if ((unint64_t)(v45 - &v53[v48]) < 0x20) {
                goto LABEL_212;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              uint64_t v57 = &v53[8 * v49 - 16];
              unsigned int v58 = v45 - 16;
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *uint64_t v57 = v60;
                v57 -= 2;
                v58 -= 32;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v45 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_212:
                do
                {
                  uint64_t v61 = *((void *)v45 - 1);
                  v45 -= 8;
                  *--uint64_t v54 = v61;
                }
                while (v45 != v47);
                uint64_t v47 = (char *)__p[0];
              }
            }
            __p[0] = v54;
            __p[1] = v46;
            *(void *)&long long v159 = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)__p[1] = *((void *)v44 + 1);
            uint64_t v46 = v45 + 8;
          }
          __p[1] = v46;
          float64x2x2_t v62 = *(void (****)(void))v44;
          if (*(void *)v44)
          {
            uint64_t v63 = *(void *)(a1 + 136);
            if (*(void *)(v63 + 16))
            {
              (**v62)(*(void *)v44);
              *float64x2x2_t v62 = *(void (***)(void))(v63 + 40);
              *(void *)(v63 + 40) = v62;
            }
          }
          v44 += 16;
        }
        while (v44 != v18);
        unsigned int v18 = *v157;
        unint64_t v14 = (void *)a1;
      }
      unint64_t v19 = v14[18];
      unsigned int v20 = (uint64_t *)v14[19];
      unint64_t v21 = 126 - 2 * __clz((uint64_t)((uint64_t)v20 - v19) >> 4);
      v14[30] = v18;
      if (v20 == (uint64_t *)v19) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v21;
      }
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v19, v20, v22, 1);
      v17 += 24;
      v15 += 8;
      uint64_t v16 = a1 + 168;
    }
    while (v15 != v155);
  }
  uint64_t v88 = *v152;
  uint64_t v89 = v152[1];
  if (*v152 == v89)
  {
    uint64_t v90 = v151;
  }
  else
  {
    uint64_t v90 = v151;
    while (*v88 != 0x41D4E9297E100630)
    {
      v88 += 5;
      if (v88 == v89) {
        goto LABEL_119;
      }
    }
  }
  if (v88 != v89)
  {
    uint64_t v91 = (std::__shared_weak_count *)v88[4];
    if (v91)
    {
      atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
LABEL_119:
  uint64_t v92 = *v152;
  uint64_t v93 = v152[1];
  if (*v152 != v93)
  {
    while (*v92 != 0x4EDAD23DFB014132)
    {
      v92 += 5;
      if (v92 == v93) {
        goto LABEL_127;
      }
    }
  }
  if (v92 != v93)
  {
    unsigned int v94 = (std::__shared_weak_count *)v92[4];
    if (v94)
    {
      atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
LABEL_127:
  uint64_t v95 = *v152;
  uint64_t v96 = v152[1];
  if (*v152 != v96)
  {
    while (*v95 != 0x348A0B0E758C07C2)
    {
      v95 += 5;
      if (v95 == v96) {
        goto LABEL_135;
      }
    }
  }
  if (v95 != v96)
  {
    BOOL v97 = (std::__shared_weak_count *)v95[4];
    if (v97)
    {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
LABEL_135:
  uint64_t v98 = __p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v99 = 0;
    unint64_t v100 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v152, v90, v98[v99++]);
      uint64_t v98 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v99);
    while (v100 != __p[1])
    {
      unint64_t v101 = *v100++;
      gdc::Registry::destroy((uint64_t)v90, v101);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(v90);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::FlyoverRenderable>>(v90);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v149 = *(unsigned __int8 *)(md::LayoutContext::frameState(v150) + 128);
  uint64_t v102 = (int8x8_t *)v14[15];
  uint64_t v146 = *((void *)v150 + 2);
  uint64_t v103 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>(v102);
  uint64_t v104 = v103[7];
  uint64_t v145 = v103[8];
  if (v104 != v145)
  {
    uint64_t v105 = (void *)v103[10];
    uint64_t v153 = v14 + 21;
    while (1)
    {
      unsigned int v106 = (void *)v14[26];
      v14[27] = v106;
      unint64_t v107 = v105[2];
      if (v107 > (uint64_t)(v14[28] - (void)v106) >> 4)
      {
        if (v107 >> 60) {
          abort();
        }
        uint64_t v108 = 16 * v107;
        uint64_t v109 = (char *)operator new(16 * v107);
        v14[26] = v109;
        v14[27] = v109;
        v14[28] = &v109[v108];
        if (v106) {
          operator delete(v106);
        }
      }
      uint64_t v110 = *(void **)v146;
      uint64_t v111 = *(void **)(v146 + 8);
      uint64_t v147 = v104;
      if (*(void **)v146 != v111)
      {
        while (*v110 != 0x41D4E9297E100630)
        {
          v110 += 5;
          if (v110 == v111) {
            goto LABEL_158;
          }
        }
      }
      if (v110 != v111)
      {
        unsigned int v112 = (std::__shared_weak_count *)v110[4];
        if (v112)
        {
          atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
      }
LABEL_158:
      uint64_t v113 = (void *)*v105;
      if ((void *)*v105 != v105 + 1) {
        break;
      }
      v105 += 3;
      v104 += 8;
      if (v147 + 8 == v145) {
        goto LABEL_195;
      }
    }
    uint64_t v114 = v113[4];
    unsigned int v115 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v153, (unsigned __int8 *)(v114 + 16));
    if (!v115)
    {
LABEL_188:
      uint64_t v134 = v113[5];
      if (v134) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v156 = v134;
      LOWORD(v162) = *(_WORD *)(v114 + 168);
      *(void *)((char *)&v162 + 4) = *(void *)(v114 + 172);
      md::GeometryContext::transformConstantData((double *)&v161, v148, (unsigned __int8 *)&v162, v149, *(double *)(v114 + 600), *(double *)(v114 + 608));
      uint64_t v135 = v14[17];
      char v136 = *((unsigned char *)v113 + 48);
      BOOL v137 = *(void **)(v135 + 40);
      if (!v137)
      {
        geo::Pool<md::FlyoverRenderable>::allocateSlab((uint64_t **)v14[17]);
        BOOL v137 = *(void **)(v135 + 40);
      }
      *(void *)(v135 + 40) = *v137;
      md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v137, v114, v156, v136, (v149 - 1) < 3u, &v161);
      *BOOL v137 = &unk_1EF513508;
      v137[48] = v114;
      v137[49] = v156;
      if (v156) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v156 + 8), 1uLL, memory_order_relaxed);
      }
      *BOOL v137 = &unk_1EF513110;
      gdc::Registry::create((gdc::Registry *)v102);
    }
    uint64_t v116 = v115;
    unsigned int v118 = (void *)v14[18];
    uint64_t v117 = (void *)v14[19];
    if (v118 == v117)
    {
      uint64_t v119 = v14[18];
    }
    else
    {
      uint64_t v119 = v14[18];
      do
      {
        if (*(uint64_t **)v119 == v115[16]
          && *(unsigned __int16 *)(v119 + 8) == *((unsigned __int16 *)v115 + 68)
          && *(unsigned __int16 *)(v119 + 10) == *((unsigned __int16 *)v115 + 69)
          && *(_DWORD *)(v119 + 12) == *((_DWORD *)v115 + 35))
        {
          goto LABEL_170;
        }
        v119 += 16;
      }
      while ((void *)v119 != v117);
      uint64_t v119 = v14[19];
    }
LABEL_170:
    uint64_t v120 = (void *)(v119 + 16);
    if ((void *)(v119 + 16) != v117)
    {
      unint64_t v121 = (unint64_t)v117 - v119 - 32;
      if (v121 >= 0x30)
      {
        uint64_t v122 = (v119 - (uint64_t)v118) >> 4;
        uint64_t v123 = (v121 >> 4) + 1;
        uint64_t v124 = 16 * (v123 & 0x1FFFFFFFFFFFFFFCLL);
        v119 += v124;
        uint64_t v125 = (double *)&v118[2 * v122 + 4];
        uint64_t v126 = v123 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v127 = v125 - 2;
          float64x2x2_t v164 = vld2q_f64(v127);
          uint64_t v128 = v125 + 2;
          float64x2x2_t v166 = vld2q_f64(v128);
          uint64_t v129 = v125 - 4;
          vst2q_f64(v129, v164);
          vst2q_f64(v125, v166);
          v125 += 8;
          v126 -= 4;
        }
        while (v126);
        if (v123 == (v123 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_177;
        }
        uint64_t v120 = (void *)((char *)v120 + v124);
      }
      do
      {
        *(void *)uint64_t v119 = *v120;
        *(void *)(v119 + 8) = v120[1];
        v119 += 16;
        v120 += 2;
      }
      while (v120 != v117);
    }
LABEL_177:
    v14[19] = v119;
    int64_t v130 = v115[16];
    if (v130)
    {
      uint64_t v131 = v14[17];
      if (*(void *)(v131 + 16))
      {
        (*(void (**)(uint64_t *))*v130)(v115[16]);
        *int64_t v130 = *(void *)(v131 + 40);
        *(void *)(v131 + 40) = v130;
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v153, v116);
    int64_t v132 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v159)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        uint64_t v133 = (void *)v132[4];
        if (v133 != (void *)v132[6]) {
          free(v133);
        }
      }
      operator delete(v132);
    }
    uint64_t v114 = v113[4];
    goto LABEL_188;
  }
LABEL_195:
  uint64_t v160 = (int8x8_t *)v14[15];
  uint64_t result = gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(v160);
  if (*(void *)(result + 56) != *(void *)(result + 64))
  {
    uint64_t v141 = (void *)v14[18];
    uint64_t v139 = (void *)v14[19];
    __p[0] = *(void **)(result + 80);
    __p[1] = v14 + 21;
    if (v141 == v139)
    {
LABEL_197:
      uint64_t v139 = v141;
    }
    else
    {
      do
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v141))
        {
          do
          {
            v139 -= 2;
            if (v139 == v141) {
              goto LABEL_197;
            }
          }
          while (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v139));
          uint64_t v142 = *v141;
          *uint64_t v141 = *v139;
          *uint64_t v139 = v142;
          uint64_t v143 = v141[1];
          v141[1] = v139[1];
          v139[1] = v143;
        }
        v141 += 2;
      }
      while (v141 != v139);
    }
    uint64_t v140 = *(void **)(a1 + 152);
    __p[0] = v139;
    __p[1] = v140;
    long long v162 = *(_OWORD *)(a1 + 208);
    gdc::Registry::create((gdc::Registry *)v160);
  }
  *uint64_t v144 = v14[15];
  return result;
}

void sub_1A1E073A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>(int8x8_t *a1)
{
  unint64_t v10 = 0xAD537A7989D93465;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xAD537A7989D93465;
    if (*(void *)&v1 <= 0xAD537A7989D93465) {
      unint64_t v3 = 0xAD537A7989D93465 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xAD537A7989D93465;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xAD537A7989D93465)
      {
        if (v5[2] == 0xAD537A7989D93465) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xAD537A7989D93465) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xAD537A7989D93465) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E07828(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(int8x8_t *a1)
{
  uint64_t v10 = 0x41D54313046A9EA4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x41D54313046A9EA4;
    if (*(void *)&v1 <= 0x41D54313046A9EA4uLL) {
      uint64_t v3 = 0x41D54313046A9EA4uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x41D54313046A9EA4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x41D54313046A9EA4)
      {
        if (v5[2] == 0x41D54313046A9EA4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x41D54313046A9EA4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x41D54313046A9EA4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E07A98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(int8x8_t *a1)
{
  uint64_t v10 = 0xDCB65735B104E73;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0xDCB65735B104E73;
    if (*(void *)&v1 <= 0xDCB65735B104E73uLL) {
      uint64_t v3 = 0xDCB65735B104E73uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0xDCB65735B104E73;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDCB65735B104E73)
      {
        if (v5[2] == 0xDCB65735B104E73) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDCB65735B104E73) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDCB65735B104E73) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E07D08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::WillEnterView<md::FlyoverRenderable>>(int8x8_t *a1)
{
  unint64_t v10 = 0xBCDB6C1F639FCC2CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBCDB6C1F639FCC2CLL;
    if (*(void *)&v1 <= 0xBCDB6C1F639FCC2CLL) {
      unint64_t v3 = 0xBCDB6C1F639FCC2CLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBCDB6C1F639FCC2CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBCDB6C1F639FCC2CLL)
      {
        if (v5[2] == 0xBCDB6C1F639FCC2CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBCDB6C1F639FCC2CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBCDB6C1F639FCC2CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E07F78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::WillEnterView<md::FlyoverRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::WillLeaveView<md::FlyoverRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

char *geo::Pool<md::FlyoverRenderable>::allocateSlab(uint64_t **a1)
{
  uint64_t result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  uint64_t v3 = result;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if ((unint64_t)result >= v7) {
          break;
        }
        uint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= (unint64_t)result) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    uint64_t v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[2] = (uint64_t)v6;
    void *v5 = v8;
    uint64_t v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      unint64_t v10 = *v5;
    }
    else
    {
      unint64_t v10 = v8;
    }
    uint64_t result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  uint64_t v11 = a1[5];
  uint64_t v12 = 400 * (void)a1[3] - 400;
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = &v3[v12];
    do
    {
      *(void *)uint64_t v13 = v11;
      uint64_t v14 = v13 - 400;
      uint64_t v11 = (uint64_t *)v13;
      uint64_t v13 = v14;
    }
    while (v14 >= v3);
    uint64_t v11 = (uint64_t *)(v14 + 400);
  }
  a1[5] = v11;
  return result;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)75>>(int8x8_t *a1)
{
  unint64_t v10 = 0xA7448A9385809AE4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA7448A9385809AE4;
    if (*(void *)&v1 <= 0xA7448A9385809AE4) {
      unint64_t v3 = 0xA7448A9385809AE4 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA7448A9385809AE4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA7448A9385809AE4)
      {
        if (v5[2] == 0xA7448A9385809AE4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA7448A9385809AE4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA7448A9385809AE4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E087FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>(int8x8_t *a1)
{
  unint64_t v10 = 0xFC370D9176A00DEBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xFC370D9176A00DEBLL;
    if (*(void *)&v1 <= 0xFC370D9176A00DEBLL) {
      unint64_t v3 = 0xFC370D9176A00DEBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xFC370D9176A00DEBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xFC370D9176A00DEBLL)
      {
        if (v5[2] == 0xFC370D9176A00DEBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xFC370D9176A00DEBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xFC370D9176A00DEBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E08A6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::GlobeMatrixData>(int8x8_t *a1)
{
  unint64_t v10 = 0x93E8A4F5122D6D07;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x93E8A4F5122D6D07;
    if (*(void *)&v1 <= 0x93E8A4F5122D6D07) {
      unint64_t v3 = 0x93E8A4F5122D6D07 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x93E8A4F5122D6D07;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x93E8A4F5122D6D07)
      {
        if (v5[2] == 0x93E8A4F5122D6D07) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x93E8A4F5122D6D07) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x93E8A4F5122D6D07) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E08CDC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v40 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v40);
  if (v6)
  {
    uint64_t v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v20 = (char *)a1[10];
      uint64_t v21 = (v12 - v20) >> 7;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 57) {
        goto LABEL_30;
      }
      uint64_t v23 = v11 - (void)v20;
      if (v23 >> 6 > v22) {
        unint64_t v22 = v23 >> 6;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 57) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = (char *)operator new(v24 << 7);
      }
      else
      {
        uint64_t v25 = 0;
      }
      long long v26 = a3[5];
      uint64_t v27 = &v25[128 * v21];
      *((_OWORD *)v27 + 4) = a3[4];
      *((_OWORD *)v27 + 5) = v26;
      long long v28 = a3[7];
      *((_OWORD *)v27 + 6) = a3[6];
      *((_OWORD *)v27 + 7) = v28;
      long long v29 = a3[1];
      *(_OWORD *)uint64_t v27 = *a3;
      *((_OWORD *)v27 + 1) = v29;
      long long v30 = a3[2];
      long long v31 = a3[3];
      uint64_t v19 = v27 + 128;
      *((_OWORD *)v27 + 2) = v30;
      *((_OWORD *)v27 + 3) = v31;
      if (v12 != v20)
      {
        do
        {
          long long v32 = *((_OWORD *)v12 - 8);
          long long v33 = *((_OWORD *)v12 - 7);
          long long v34 = *((_OWORD *)v12 - 5);
          *((_OWORD *)v27 - 6) = *((_OWORD *)v12 - 6);
          *((_OWORD *)v27 - 5) = v34;
          *((_OWORD *)v27 - 8) = v32;
          *((_OWORD *)v27 - 7) = v33;
          long long v35 = *((_OWORD *)v12 - 4);
          long long v36 = *((_OWORD *)v12 - 3);
          long long v37 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v27 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v27 - 1) = v37;
          *((_OWORD *)v27 - 4) = v35;
          *((_OWORD *)v27 - 3) = v36;
          v27 -= 128;
          v12 -= 128;
        }
        while (v12 != v20);
        uint64_t v12 = (char *)a1[10];
      }
      a1[10] = v27;
      a1[11] = v19;
      a1[12] = &v25[128 * v24];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v13 = *a3;
      long long v14 = a3[1];
      long long v15 = a3[3];
      *((_OWORD *)v12 + 2) = a3[2];
      *((_OWORD *)v12 + 3) = v15;
      *(_OWORD *)uint64_t v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      long long v16 = a3[4];
      long long v17 = a3[5];
      long long v18 = a3[7];
      *((_OWORD *)v12 + 6) = a3[6];
      *((_OWORD *)v12 + 7) = v18;
      *((_OWORD *)v12 + 4) = v16;
      *((_OWORD *)v12 + 5) = v17;
      uint64_t v19 = v12 + 128;
    }
    a1[11] = v19;
    uint64_t v8 = a1[31];
  }
  else
  {
    unint64_t v7 = (void *)(a1[10] + 16 * ((void)v5 - a1[7]));
    *unint64_t v7 = *(void *)a3;
    v7[1] = *((void *)a3 + 1);
    void v7[2] = *((void *)a3 + 2);
    v7[3] = *((void *)a3 + 3);
    v7[4] = *((void *)a3 + 4);
    v7[5] = *((void *)a3 + 5);
    v7[6] = *((void *)a3 + 6);
    v7[7] = *((void *)a3 + 7);
    v7[8] = *((void *)a3 + 8);
    v7[9] = *((void *)a3 + 9);
    v7[10] = *((void *)a3 + 10);
    v7[11] = *((void *)a3 + 11);
    v7[12] = *((void *)a3 + 12);
    v7[13] = *((void *)a3 + 13);
    v7[14] = *((void *)a3 + 14);
    v7[15] = *((void *)a3 + 15);
    uint64_t v8 = a1[31];
    if (v7 != (void *)a1[11])
    {
      uint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          unint64_t v42 = &v40;
          uint64_t v43 = 1;
          uint64_t v41 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v41, &v42);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v38 = (void *)a1[22];
  if (v38)
  {
    while (1)
    {
      unint64_t v42 = &v40;
      uint64_t v43 = 1;
      uint64_t v41 = v8;
      uint64_t v39 = v38[6];
      if (!v39) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v39 + 48))(v39, &v41, &v42);
      unint64_t v38 = (void *)*v38;
      if (!v38) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v27 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v27);
  if (v6)
  {
    long long v14 = (char *)a1[11];
    unint64_t v13 = a1[12];
    if ((unint64_t)v14 >= v13)
    {
      long long v16 = (char *)a1[10];
      unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v16) >> 3) + 1;
      if (v17 > 0x666666666666666) {
        goto LABEL_33;
      }
      unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)v16) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x333333333333333) {
        unint64_t v19 = 0x666666666666666;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = (char *)operator new(40 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * ((v14 - v16) >> 3)];
      *(_WORD *)uint64_t v21 = *(_WORD *)a3;
      *(void *)(v21 + 4) = *(void *)((char *)a3 + 4);
      *(_OWORD *)(v21 + 24) = *(long long *)((char *)a3 + 24);
      long long v15 = v21 + 40;
      if (v14 != v16)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t v23 = &v21[v22];
          *((_WORD *)v23 - 20) = *(_WORD *)&v14[v22 - 40];
          *(void *)(v23 - 36) = *(void *)&v14[v22 - 36];
          *((_OWORD *)v23 - 1) = *(_OWORD *)&v14[v22 - 16];
          v22 -= 40;
        }
        while (&v14[v22] != v16);
        v21 += v22;
        long long v14 = (char *)a1[10];
      }
      a1[10] = v21;
      a1[11] = v15;
      a1[12] = &v20[40 * v19];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_WORD *)long long v14 = *(_WORD *)a3;
      *(void *)(v14 + 4) = *(void *)((char *)a3 + 4);
      *(_OWORD *)(v14 + 24) = *(long long *)((char *)a3 + 24);
      long long v15 = v14 + 40;
    }
    a1[11] = v15;
  }
  else
  {
    uint64_t v7 = a1[10] + 40 * (((uint64_t)v5 - a1[7]) >> 3);
    long long v8 = *a3;
    long long v9 = a3[1];
    *(void *)(v7 + 32) = *((void *)a3 + 4);
    *(_OWORD *)uint64_t v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    if (v7 != a1[11])
    {
      uint64_t v10 = (void *)a1[16];
      if (v10)
      {
        uint64_t v11 = a1[31];
        while (1)
        {
          long long v29 = &v27;
          uint64_t v30 = 1;
          uint64_t v28 = v11;
          uint64_t v12 = v10[6];
          if (!v12) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v12 + 48))(v12, &v28, &v29);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_32:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_33:
        abort();
      }
      return;
    }
  }
  unint64_t v24 = (void *)a1[22];
  if (v24)
  {
    uint64_t v25 = a1[31];
    while (1)
    {
      long long v29 = &v27;
      uint64_t v30 = 1;
      uint64_t v28 = v25;
      uint64_t v26 = v24[6];
      if (!v26) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v26 + 48))(v26, &v28, &v29);
      unint64_t v24 = (void *)*v24;
      if (!v24) {
        return;
      }
    }
    goto LABEL_32;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::remove(void *a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 40 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 40);
  long long v17 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 32) = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  a1[11] -= 40;
  unint64_t v18 = (void *)a1[28];
  if (!v18) {
    return 1;
  }
  uint64_t v19 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    uint64_t v22 = v19;
    uint64_t v20 = v18[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v22, v23);
    unint64_t v18 = (void *)*v18;
    if (!v18) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + (v7 << 7));
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (void *)a1[11];
  uint64_t v16 = *(v15 - 16);
  v15 -= 16;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  v14[13] = v15[13];
  v14[14] = v15[14];
  v14[15] = v15[15];
  a1[11] = v15;
  long long v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    long long v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(int8x8_t *a1)
{
  uint64_t v2 = (void *)gdc::Registry::storage<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(a1);
  uint64_t v4 = v2[10];
  uint64_t v3 = v2[11];
  uint64_t v5 = v3 - v4;
  uint64_t v29 = (uint64_t)a1;
  if (v3 == v4)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new((unint64_t)v5 >> 1);
    unint64_t v7 = &v6[8 * (v5 >> 4)];
    uint64_t v8 = v6;
  }
  unint64_t v10 = (uint64_t *)v2[7];
  uint64_t v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    uint64_t v11 = v8;
    while (1)
    {
      uint64_t v12 = *v10;
      if (v11 >= v7) {
        break;
      }
      *(void *)uint64_t v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          uint64_t v27 = (unint64_t *)v8;
          do
          {
            unint64_t v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    uint64_t v13 = (v11 - v8) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    if ((v7 - v8) >> 2 > v14) {
      unint64_t v14 = (v7 - v8) >> 2;
    }
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v13];
    *(void *)uint64_t v17 = v12;
    uint64_t v18 = v17 + 8;
    if (v11 != v8)
    {
      unint64_t v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          unint64_t v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          unint64_t v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          uint64_t v22 = (v19 >> 3) + 1;
          unint64_t v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v23 = &v16[8 * v13 - 16];
          unint64_t v24 = v11 - 16;
          uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v20 = v11;
        }
      }
      else
      {
        unint64_t v20 = v11;
      }
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    unint64_t v7 = &v16[8 * v15];
    if (v8) {
      operator delete(v8);
    }
    uint64_t v8 = v17;
    uint64_t v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1A1E09F00(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::FlyoverRenderable>>(int8x8_t *a1)
{
  uint64_t v2 = (void *)gdc::Registry::storage<SceneComponents::WillEnterView<md::FlyoverRenderable>>(a1);
  uint64_t v4 = v2[10];
  uint64_t v3 = v2[11];
  uint64_t v5 = v3 - v4;
  uint64_t v29 = (uint64_t)a1;
  if (v3 == v4)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new((unint64_t)v5 >> 1);
    unint64_t v7 = &v6[8 * (v5 >> 4)];
    uint64_t v8 = v6;
  }
  unint64_t v10 = (uint64_t *)v2[7];
  uint64_t v9 = (uint64_t *)v2[8];
  if (v10 != v9)
  {
    uint64_t v11 = v8;
    while (1)
    {
      uint64_t v12 = *v10;
      if (v11 >= v7) {
        break;
      }
      *(void *)uint64_t v11 = v12;
      v11 += 8;
LABEL_8:
      if (++v10 == v9)
      {
        if (v8 != v11)
        {
          uint64_t v27 = (unint64_t *)v8;
          do
          {
            unint64_t v28 = *v27++;
            gdc::Registry::destroy(v29, v28);
          }
          while (v27 != (unint64_t *)v11);
        }
        goto LABEL_40;
      }
    }
    uint64_t v13 = (v11 - v8) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    if ((v7 - v8) >> 2 > v14) {
      unint64_t v14 = (v7 - v8) >> 2;
    }
    if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v13];
    *(void *)uint64_t v17 = v12;
    uint64_t v18 = v17 + 8;
    if (v11 != v8)
    {
      unint64_t v19 = v11 - 8 - v8;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - v8 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - v8 - 8])
        {
          unint64_t v20 = v11;
        }
        else if (&v11[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          unint64_t v20 = v11;
        }
        else if ((unint64_t)(v8 - v16) >= 0x20)
        {
          uint64_t v22 = (v19 >> 3) + 1;
          unint64_t v20 = &v11[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v23 = &v16[8 * v13 - 16];
          unint64_t v24 = v11 - 16;
          uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            _OWORD *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v20 = v11;
        }
      }
      else
      {
        unint64_t v20 = v11;
      }
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v20 != v8);
    }
LABEL_24:
    unint64_t v7 = &v16[8 * v15];
    if (v8) {
      operator delete(v8);
    }
    uint64_t v8 = v17;
    uint64_t v11 = v18;
    goto LABEL_8;
  }
LABEL_40:
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1A1E0A190(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = a2 - 2;
    uint64_t v11 = a2 - 1;
    uint64_t v12 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v109 = *v12;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                  return result;
                }
                *uint64_t v12 = *v10;
                *unint64_t v10 = v109;
                uint64_t v110 = v12[1];
                v12[1] = *v11;
                goto LABEL_188;
              case 3:
                uint64_t v111 = v12[2];
                unsigned int v112 = *(unsigned __int8 *)(*(void *)(v111 + 384) + 169);
                uint64_t v113 = *v12;
                uint64_t v114 = *v10;
                unsigned int v115 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
                if (v112 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
                {
                  if (v115 <= v112) {
                    return result;
                  }
                  v12[2] = v114;
                  *unint64_t v10 = v111;
                  uint64_t v158 = v12[3];
                  v12[3] = *v11;
                  *uint64_t v11 = v158;
                  uint64_t v159 = v12[2];
                  uint64_t v160 = *v12;
                  if (*(unsigned __int8 *)(*(void *)(v159 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                    return result;
                  }
                  *uint64_t v12 = v159;
                  v12[2] = v160;
                  uint64_t v116 = v12 + 1;
                  uint64_t v11 = v12 + 3;
                }
                else
                {
                  if (v115 <= v112)
                  {
                    uint64_t v116 = v12 + 3;
                    uint64_t v169 = v12[3];
                    uint64_t v170 = v12[1];
                    *uint64_t v12 = v111;
                    v12[1] = v169;
                    v12[2] = v113;
                    v12[3] = v170;
                    if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v113 + 384) + 169)) {
                      return result;
                    }
                    v12[2] = *v10;
                  }
                  else
                  {
                    uint64_t v116 = v12 + 1;
                    *uint64_t v12 = v114;
                  }
                  *unint64_t v10 = v113;
                }
                uint64_t v110 = *v116;
                *uint64_t v116 = *v11;
LABEL_188:
                *uint64_t v11 = v110;
                break;
              case 4:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, a2 - 2);
              case 5:
                return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            uint64_t v117 = v12 + 2;
            BOOL v119 = v12 == a2 || v117 == a2;
            if (a4)
            {
              if (!v119)
              {
                uint64_t v120 = 0;
                unint64_t v121 = v12;
                do
                {
                  uint64_t v123 = v117;
                  uint64_t v124 = v121[2];
                  uint64_t v125 = *v121;
                  if (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v121 + 384) + 169))
                  {
                    uint64_t v126 = v121[3];
                    uint64_t v127 = v120;
                    do
                    {
                      uint64_t v128 = (char *)v12 + v127;
                      uint64_t v129 = *(uint64_t *)((char *)v12 + v127 + 8);
                      *((void *)v128 + 2) = v125;
                      *((void *)v128 + 3) = v129;
                      if (!v127)
                      {
                        uint64_t v122 = v12;
                        goto LABEL_129;
                      }
                      uint64_t v125 = *((void *)v128 - 2);
                      v127 -= 16;
                    }
                    while (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v125 + 384) + 169));
                    uint64_t v122 = (uint64_t *)((char *)v12 + v127 + 16);
LABEL_129:
                    *uint64_t v122 = v124;
                    v122[1] = v126;
                  }
                  uint64_t v117 = v123 + 2;
                  v120 += 16;
                  unint64_t v121 = v123;
                }
                while (v123 + 2 != a2);
              }
            }
            else if (!v119)
            {
              uint64_t v161 = v12 + 3;
              do
              {
                long long v162 = v117;
                uint64_t v163 = v9[2];
                uint64_t v164 = *v9;
                if (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v9 + 384) + 169))
                {
                  uint64_t v165 = v9[3];
                  float64x2x2_t v166 = v161;
                  do
                  {
                    uint64_t v167 = v166;
                    *(v166 - 1) = v164;
                    uint64_t v168 = *(v166 - 2);
                    v166 -= 2;
                    *uint64_t v167 = v168;
                    uint64_t v164 = *(v167 - 5);
                  }
                  while (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v164 + 384) + 169));
                  *(v166 - 1) = v163;
                  uint64_t *v166 = v165;
                }
                uint64_t v117 = v162 + 2;
                v161 += 2;
                uint64_t v9 = v162;
              }
              while (v162 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v130 = (unint64_t)(v14 - 2) >> 1;
              int64_t v131 = v130;
              do
              {
                int64_t v132 = v131;
                if (v130 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  uint64_t v134 = &v12[2 * v133];
                  if (2 * v132 + 2 < v14)
                  {
                    unsigned int v135 = *(unsigned __int8 *)(*(void *)(*v134 + 384) + 169);
                    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169);
                    BOOL v137 = v135 > v136;
                    if (v135 <= v136) {
                      uint64_t v138 = *v134;
                    }
                    else {
                      uint64_t v138 = v134[2];
                    }
                    if (v137)
                    {
                      v134 += 2;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v138 = *v134;
                  }
                  uint64_t v139 = &v12[2 * v132];
                  uint64_t v140 = *v139;
                  uint64_t result = *(unsigned __int8 *)(*(void *)(*v139 + 384) + 169);
                  if (*(unsigned __int8 *)(*(void *)(v138 + 384) + 169) <= result)
                  {
                    uint64_t v141 = v139[1];
                    do
                    {
                      uint64_t result = (unint64_t)v139;
                      uint64_t v139 = v134;
                      *(void *)uint64_t result = v138;
                      *(void *)(result + 8) = v134[1];
                      if (v130 < v133) {
                        break;
                      }
                      uint64_t v142 = (2 * v133) | 1;
                      uint64_t v134 = &v12[2 * v142];
                      uint64_t v133 = 2 * v133 + 2;
                      if (v133 < v14)
                      {
                        uint64_t v138 = *v134;
                        if (*(unsigned __int8 *)(*(void *)(*v134 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169))
                        {
                          uint64_t v133 = v142;
                        }
                        else
                        {
                          uint64_t v138 = v134[2];
                          v134 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v138 = *v134;
                        uint64_t v133 = v142;
                      }
                      uint64_t result = *(unsigned __int8 *)(*(void *)(v138 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(void *)(v140 + 384) + 169));
                    *uint64_t v139 = v140;
                    v139[1] = v141;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v143 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v144 = 0;
                uint64_t v145 = *v12;
                uint64_t v146 = v12[1];
                uint64_t v147 = v12;
                do
                {
                  int v149 = &v147[2 * v144 + 2];
                  uint64_t v150 = (2 * v144) | 1;
                  uint64_t v144 = 2 * v144 + 2;
                  if (v144 < v143)
                  {
                    uint64_t v148 = *v149;
                    uint64_t result = (unint64_t)(v149 + 2);
                    if (*(unsigned __int8 *)(*(void *)(*v149 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v149[2] + 384) + 169))
                    {
                      uint64_t v144 = v150;
                    }
                    else
                    {
                      uint64_t v148 = v149[2];
                      v149 += 2;
                    }
                  }
                  else
                  {
                    uint64_t v148 = *v149;
                    uint64_t v144 = v150;
                  }
                  *uint64_t v147 = v148;
                  v147[1] = v149[1];
                  uint64_t v147 = v149;
                }
                while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                if (v149 == a2 - 2)
                {
                  *int v149 = v145;
                  v149[1] = v146;
                }
                else
                {
                  *int v149 = *(a2 - 2);
                  v149[1] = *(a2 - 1);
                  *(a2 - 2) = v145;
                  *(a2 - 1) = v146;
                  uint64_t v151 = (char *)v149 - (char *)v12 + 16;
                  if (v151 >= 17)
                  {
                    unint64_t v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                    uint64_t v153 = &v12[2 * v152];
                    uint64_t v154 = *v153;
                    uint64_t v155 = *v149;
                    if (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v149 + 384) + 169))
                    {
                      uint64_t v156 = v149[1];
                      do
                      {
                        uint64_t v157 = v149;
                        int v149 = v153;
                        *uint64_t v157 = v154;
                        v157[1] = v153[1];
                        if (!v152) {
                          break;
                        }
                        unint64_t v152 = (v152 - 1) >> 1;
                        uint64_t v153 = &v12[2 * v152];
                        uint64_t v154 = *v153;
                      }
                      while (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v155 + 384) + 169));
                      *int v149 = v155;
                      v149[1] = v156;
                    }
                  }
                }
                a2 -= 2;
                BOOL v137 = v143-- <= 2;
              }
              while (!v137);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
          uint64_t v17 = *v10;
          unsigned int v18 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
          if ((unint64_t)v13 >= 0x801)
          {
            uint64_t v19 = *v16;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
            uint64_t v21 = *v12;
            if (v20 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
            {
              if (v18 <= v20
                || (uint64_t *v16 = v17,
                    *unint64_t v10 = v19,
                    unint64_t v28 = v16 + 1,
                    uint64_t v27 = v16[1],
                    v16[1] = *v11,
                    *uint64_t v11 = v27,
                    uint64_t v29 = *v12,
                    *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)))
              {
LABEL_24:
                long long v36 = &v12[2 * v15];
                uint64_t v39 = *(v36 - 2);
                long long v37 = v36 - 2;
                uint64_t v38 = v39;
                unsigned int v40 = *(unsigned __int8 *)(*(void *)(v39 + 384) + 169);
                uint64_t v41 = v12[2];
                uint64_t v42 = *(a2 - 4);
                unsigned int v43 = *(unsigned __int8 *)(*(void *)(v42 + 384) + 169);
                if (v40 <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169))
                {
                  if (v43 <= v40
                    || (*long long v37 = v42,
                        *(a2 - 4) = v38,
                        uint64_t v45 = v37 + 1,
                        uint64_t v46 = v37[1],
                        v37[1] = *(a2 - 3),
                        *(a2 - 3) = v46,
                        uint64_t v47 = v12[2],
                        *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v47 + 384) + 169)))
                  {
LABEL_37:
                    uint64_t v54 = &v12[2 * v15];
                    uint64_t v57 = v54[2];
                    unint64_t v55 = v54 + 2;
                    uint64_t v56 = v57;
                    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 384) + 169);
                    uint64_t v59 = v12[4];
                    uint64_t v60 = *(a2 - 6);
                    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v60 + 384) + 169);
                    if (v58 <= *(unsigned __int8 *)(*(void *)(v59 + 384) + 169))
                    {
                      if (v61 > v58)
                      {
                        *unint64_t v55 = v60;
                        *(a2 - 6) = v56;
                        unint64_t v64 = v55 + 1;
                        uint64_t v63 = v55[1];
                        v55[1] = *(a2 - 5);
                        *(a2 - 5) = v63;
                        uint64_t v56 = *v55;
                        unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        uint64_t v65 = v12[4];
                        if (v58 > *(unsigned __int8 *)(*(void *)(v65 + 384) + 169))
                        {
                          v12[4] = v56;
                          *unint64_t v55 = v65;
                          float64x2x2_t v62 = v12 + 5;
LABEL_46:
                          uint64_t v69 = *v62;
                          *float64x2x2_t v62 = *v64;
                          *unint64_t v64 = v69;
                          uint64_t v56 = *v55;
                          unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v61 > v58)
                      {
                        float64x2x2_t v62 = v12 + 5;
                        v12[4] = v60;
LABEL_45:
                        *(a2 - 6) = v59;
                        unint64_t v64 = a2 - 5;
                        goto LABEL_46;
                      }
                      float64x2x2_t v62 = v55 + 1;
                      uint64_t v66 = v55[1];
                      uint64_t v67 = v12[5];
                      v12[4] = v56;
                      v12[5] = v66;
                      *unint64_t v55 = v59;
                      v55[1] = v67;
                      uint64_t v68 = *(a2 - 6);
                      unsigned int v58 = *(unsigned __int8 *)(*(void *)(v59 + 384) + 169);
                      if (*(unsigned __int8 *)(*(void *)(v68 + 384) + 169) > v58)
                      {
                        *unint64_t v55 = v68;
                        goto LABEL_45;
                      }
                      uint64_t v56 = v59;
                    }
                    uint64_t v70 = *v16;
                    unsigned int v71 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
                    uint64_t v72 = *v37;
                    if (v71 <= *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169))
                    {
                      if (v58 <= v71)
                      {
LABEL_57:
                        uint64_t v80 = *v12;
                        *uint64_t v12 = v70;
                        long long v26 = v12 + 1;
                        uint64_t *v16 = v80;
                        long long v32 = v16 + 1;
                        goto LABEL_58;
                      }
                      uint64_t *v16 = v56;
                      int8x8_t v75 = v16 + 1;
                      uint64_t v76 = v16[1];
                      v16[1] = v55[1];
                      *unint64_t v55 = v70;
                      v55[1] = v76;
                      if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                      {
                        uint64_t v70 = v56;
                        goto LABEL_57;
                      }
                      *long long v37 = v56;
                      BOOL v73 = v37 + 1;
                      uint64_t *v16 = v72;
                    }
                    else
                    {
                      if (v58 <= v71)
                      {
                        uint64_t *v16 = v72;
                        uint64_t v77 = v16[1];
                        uint64_t v78 = v37[1];
                        *long long v37 = v70;
                        v37[1] = v77;
                        v16[1] = v78;
                        if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                        {
                          uint64_t v70 = v72;
                          goto LABEL_57;
                        }
                        uint64_t *v16 = v56;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                        BOOL v73 = v16 + 1;
                      }
                      else
                      {
                        *long long v37 = v56;
                        BOOL v73 = v37 + 1;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                      }
                      int8x8_t v75 = v74;
                    }
                    uint64_t v79 = *v73;
                    *BOOL v73 = *v75;
                    *int8x8_t v75 = v79;
                    uint64_t v70 = *v16;
                    goto LABEL_57;
                  }
                  v12[2] = *v37;
                  *long long v37 = v47;
                  unint64_t v44 = v12 + 3;
                }
                else
                {
                  if (v43 <= v40)
                  {
                    unint64_t v44 = v37 + 1;
                    uint64_t v50 = v37[1];
                    uint64_t v51 = v12[3];
                    v12[2] = v38;
                    v12[3] = v50;
                    *long long v37 = v41;
                    v37[1] = v51;
                    uint64_t v52 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(void *)(v52 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169)) {
                      goto LABEL_37;
                    }
                    *long long v37 = v52;
                  }
                  else
                  {
                    unint64_t v44 = v12 + 3;
                    v12[2] = v42;
                  }
                  *(a2 - 4) = v41;
                  uint64_t v45 = a2 - 3;
                }
                uint64_t v53 = *v44;
                uint64_t *v44 = *v45;
                *uint64_t v45 = v53;
                goto LABEL_37;
              }
              *uint64_t v12 = *v16;
              uint64_t v22 = v12 + 1;
              uint64_t *v16 = v29;
            }
            else
            {
              if (v18 <= v20)
              {
                uint64_t v22 = v16 + 1;
                uint64_t v33 = v16[1];
                uint64_t v34 = v12[1];
                *uint64_t v12 = v19;
                v12[1] = v33;
                uint64_t *v16 = v21;
                v16[1] = v34;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v21 + 384) + 169)) {
                  goto LABEL_24;
                }
                uint64_t *v16 = *v10;
              }
              else
              {
                uint64_t v22 = v12 + 1;
                *uint64_t v12 = v17;
              }
              *unint64_t v10 = v21;
              unint64_t v28 = a2 - 1;
            }
            uint64_t v35 = *v22;
            *uint64_t v22 = *v28;
            *unint64_t v28 = v35;
            goto LABEL_24;
          }
          uint64_t v23 = *v12;
          unsigned int v24 = *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169);
          uint64_t v25 = *v16;
          if (v24 <= *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169)) {
            break;
          }
          if (v18 > v24)
          {
            long long v26 = v16 + 1;
            uint64_t *v16 = v17;
LABEL_32:
            *unint64_t v10 = v25;
            long long v32 = a2 - 1;
            goto LABEL_58;
          }
          long long v26 = v12 + 1;
          uint64_t v48 = v12[1];
          uint64_t v49 = v16[1];
          uint64_t *v16 = v23;
          v16[1] = v48;
          *uint64_t v12 = v25;
          v12[1] = v49;
          if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v25 + 384) + 169))
          {
            *uint64_t v12 = *v10;
            goto LABEL_32;
          }
          uint64_t v23 = v25;
          --a3;
          if (a4) {
            goto LABEL_60;
          }
LABEL_62:
          unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
          if (*(unsigned __int8 *)(*(void *)(*(v12 - 2) + 384) + 169) > v82) {
            goto LABEL_63;
          }
          if (v82 > *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169))
          {
            do
            {
              uint64_t v98 = v12[2];
              v12 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(v98 + 384) + 169));
          }
          else
          {
            unint64_t v99 = v12 + 2;
            do
            {
              uint64_t v12 = v99;
              if (v99 >= a2) {
                break;
              }
              v99 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169));
          }
          unint64_t v100 = a2;
          if (v12 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = *(v100 - 2);
              v100 -= 2;
            }
            while (v82 > *(unsigned __int8 *)(*(void *)(v101 + 384) + 169));
          }
          uint64_t v102 = v9[1];
          if (v12 < v100)
          {
            uint64_t v103 = *v12;
            uint64_t v104 = *v100;
            do
            {
              *uint64_t v12 = v104;
              *unint64_t v100 = v103;
              uint64_t v105 = v12[1];
              v12[1] = v100[1];
              v100[1] = v105;
              unsigned int v106 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
              do
              {
                uint64_t v107 = v12[2];
                v12 += 2;
                uint64_t v103 = v107;
              }
              while (v106 <= *(unsigned __int8 *)(*(void *)(v107 + 384) + 169));
              do
              {
                uint64_t v108 = *(v100 - 2);
                v100 -= 2;
                uint64_t v104 = v108;
              }
              while (v106 > *(unsigned __int8 *)(*(void *)(v108 + 384) + 169));
            }
            while (v12 < v100);
          }
          BOOL v4 = v12 - 2 >= v9;
          BOOL v5 = v12 - 2 == v9;
          if (v12 - 2 != v9)
          {
            *uint64_t v9 = *(v12 - 2);
            v9[1] = *(v12 - 1);
          }
          a4 = 0;
          *(v12 - 2) = v23;
          *(v12 - 1) = v102;
        }
        if (v18 > v24)
        {
          *uint64_t v12 = v17;
          *unint64_t v10 = v23;
          uint64_t v30 = v12[1];
          v12[1] = *v11;
          *uint64_t v11 = v30;
          uint64_t v23 = *v12;
          uint64_t v31 = *v16;
          if (*(unsigned __int8 *)(*(void *)(*v12 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169))
          {
            uint64_t *v16 = v23;
            *uint64_t v12 = v31;
            long long v26 = v16 + 1;
            long long v32 = v12 + 1;
LABEL_58:
            uint64_t v81 = *v26;
            *long long v26 = *v32;
            *long long v32 = v81;
            uint64_t v23 = *v12;
          }
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_60:
        unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
LABEL_63:
        uint64_t v83 = v12[1];
        uint64_t v84 = v12;
        do
        {
          uint64_t v85 = v84;
          uint64_t v87 = v84[2];
          v84 += 2;
          uint64_t v86 = v87;
        }
        while (*(unsigned __int8 *)(*(void *)(v87 + 384) + 169) > v82);
        uint64_t v88 = a2;
        if (v85 == v12)
        {
          uint64_t v88 = a2;
          do
          {
            if (v84 >= v88) {
              break;
            }
            uint64_t v90 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v90 + 384) + 169) <= v82);
        }
        else
        {
          do
          {
            uint64_t v89 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v89 + 384) + 169) <= v82);
        }
        if (v84 < v88)
        {
          uint64_t v91 = *v88;
          uint64_t v12 = v84;
          uint64_t v92 = v88;
          do
          {
            *uint64_t v12 = v91;
            *uint64_t v92 = v86;
            uint64_t v93 = v12[1];
            v12[1] = v92[1];
            v92[1] = v93;
            unsigned int v94 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
            do
            {
              uint64_t v95 = v12[2];
              v12 += 2;
              uint64_t v86 = v95;
            }
            while (*(unsigned __int8 *)(*(void *)(v95 + 384) + 169) > v94);
            do
            {
              uint64_t v96 = *(v92 - 2);
              v92 -= 2;
              uint64_t v91 = v96;
            }
            while (*(unsigned __int8 *)(*(void *)(v96 + 384) + 169) <= v94);
          }
          while (v12 < v92);
        }
        else
        {
          uint64_t v12 = v84;
        }
        if (v12 - 2 != v9)
        {
          *uint64_t v9 = *(v12 - 2);
          v9[1] = *(v12 - 1);
        }
        *(v12 - 2) = v23;
        *(v12 - 1) = v83;
        if (v84 >= v88) {
          break;
        }
LABEL_83:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v9, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v9, v12 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v12, a2);
      if (result) {
        break;
      }
      if (!v97) {
        goto LABEL_83;
      }
    }
    a2 = v12 - 2;
    if (!v97) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)75>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)75> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 2);
      uint64_t v4 = *a1;
      if (*(unsigned __int8 *)(*(void *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        uint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v6 = a1[2];
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v6 + 384) + 169);
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 2);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          uint64_t v11 = a1 + 3;
          uint64_t v26 = a1[3];
          uint64_t v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          uint64_t v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(void *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v8 + 384) + 169)) {
            return 1;
          }
          a1[2] = v28;
        }
        else
        {
          uint64_t v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        unsigned int v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        unsigned int v20 = a1 + 3;
        uint64_t v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v21 = a1[2];
        uint64_t v22 = *a1;
        if (*(unsigned __int8 *)(*(void *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          uint64_t v11 = a1 + 1;
LABEL_21:
          uint64_t v29 = *v11;
          *uint64_t v11 = *v20;
          *unsigned int v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[2];
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(v14 + 384) + 169);
      uint64_t v16 = *a1;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          unsigned int v18 = a1 + 3;
          uint64_t v30 = a1[3];
          uint64_t v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v16 + 384) + 169)) {
            goto LABEL_26;
          }
          a1[2] = v13;
        }
        else
        {
          unsigned int v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        unsigned int v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        unsigned int v24 = a1 + 3;
        uint64_t v23 = a1[3];
        uint64_t v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          unsigned int v18 = a1 + 1;
LABEL_25:
          uint64_t v32 = *v18;
          *unsigned int v18 = *v24;
          *unsigned int v24 = v32;
        }
      }
LABEL_26:
      uint64_t v33 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        uint64_t v37 = *v33;
        uint64_t v38 = *v12;
        if (*(unsigned __int8 *)(*(void *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
        {
          uint64_t v39 = v33[1];
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = (uint64_t *)((char *)a1 + v40);
            uint64_t v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              long long v36 = a1;
              goto LABEL_29;
            }
            uint64_t v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(void *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v38 + 384) + 169));
          long long v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *long long v36 = v37;
          v36[1] = v39;
          if (++v35 == 8) {
            return v33 + 2 == a2;
          }
        }
        uint64_t v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2) {
          return 1;
        }
      }
  }
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x57AAF780DF3EC6C0 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3) {
      uint64_t v3 = 0x3070CB6B3C7F21D3 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x4B05BEFA631D0889;
    if (a2 <= 0x4B05BEFA631D0889) {
      uint64_t v11 = 0x4B05BEFA631D0889 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x4B05BEFA631D0889;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x4B05BEFA631D0889)
      {
        if (v13[2] == 0x4B05BEFA631D0889) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x4B05BEFA631D0889)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x4B05BEFA631D0889)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x4B05BEFA631D0889) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x57AAF780DF3EC6C0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)75>>>>::_allocateContext()
{
}

void sub_1A1E0B850(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)75>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)75>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514970;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)75>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514970;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF513878;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t *SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (unsigned char *)a1[6];
  if (v4)
  {
    do
    {
      if (v4[112]) {
        v4[112] = 0;
      }
      uint64_t v9 = *(unsigned char **)v4;
      uint64_t v10 = (void *)*((void *)v4 + 4);
      if (v10 != *((void **)v4 + 6)) {
        free(v10);
      }
      operator delete(v4);
      uint64_t v4 = v9;
    }
    while (v9);
  }
  uint64_t v5 = (void *)a1[4];
  a1[4] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = (uint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    geo::Pool<md::FlyoverRenderable>::disposeElements(v7);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v7 + 8));
    MEMORY[0x1A6239270](v7, 0x1020C407A7143E5);
  }
  return a1;
}

void sub_1A1E0BAF0(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)75,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF513878;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t **a3, void *a4)
{
  uint64_t v148 = *a3;
  uint64_t v6 = *(int8x8_t **)(a1 + 120);
  char v7 = (uint64_t **)*((void *)a2 + 2);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v159 = 0;
  uint64_t v8 = *v7;
  if (*v7 != v7[1] && *v8 != 0x22D45F5AAD4BF408)
  {
    char v9 = v8 + 5;
    do
    {
      uint64_t v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0x22D45F5AAD4BF408);
    uint64_t v8 = v9 - 5;
  }
  uint64_t v11 = (void (***)(void))v8[3];
  uint64_t v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (**v11)(v11);
  uint64_t v151 = v6;
  unint64_t v152 = v7;
  uint64_t v150 = a2;
  uint64_t v144 = a4;
  uint64_t v13 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(v6);
  unint64_t v14 = (void *)a1;
  uint64_t v15 = v13[7];
  uint64_t v155 = v13[8];
  if (v15 != v155)
  {
    uint64_t v16 = a1 + 168;
    uint64_t v17 = v13[10];
    uint64_t v157 = (char **)(a1 + 232);
    do
    {
      uint64_t v23 = v14;
      unsigned int v24 = (uint64_t *)v14[18];
      uint64_t v25 = (uint64_t *)v23[19];
      *(void *)&long long v162 = v17;
      *((void *)&v162 + 1) = v16;
LABEL_17:
      while (v24 != v25)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v24))
        {
          while (1)
          {
            v25 -= 2;
            if (v25 == v24) {
              goto LABEL_23;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v25))
            {
              uint64_t v26 = *v24;
              *unsigned int v24 = *v25;
              *uint64_t v25 = v26;
              uint64_t v27 = v24[1];
              v24[1] = v25[1];
              v25[1] = v27;
              v24 += 2;
              goto LABEL_17;
            }
          }
        }
        v24 += 2;
      }
LABEL_23:
      uint64_t v29 = *(char **)(a1 + 144);
      uint64_t v28 = *(char **)(a1 + 152);
      *(void *)&long long v162 = v17;
      *((void *)&v162 + 1) = v16;
LABEL_24:
      while (v29 != v28)
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v29))
        {
          while (1)
          {
            v28 -= 16;
            if (v28 == v29) {
              break;
            }
            if (void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)&v162, (uint64_t)v28))
            {
              uint64_t v30 = *(void *)v29;
              *(void *)uint64_t v29 = *(void *)v28;
              *(void *)uint64_t v28 = v30;
              uint64_t v31 = *((void *)v29 + 1);
              *((void *)v29 + 1) = *((void *)v28 + 1);
              *((void *)v28 + 1) = v31;
              v29 += 16;
              goto LABEL_24;
            }
          }
          uint64_t v28 = v29;
          break;
        }
        v29 += 16;
      }
      uint64_t v32 = *(long long **)(a1 + 152);
      int64_t v33 = (char *)v32 - v28;
      uint64_t v34 = ((char *)v32 - v28) >> 4;
      std::vector<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>,std::__wrap_iter<std::tuple<md::DaVinciGroundRenderable *,gdc::Entity> const*>>(v157, *(void *)(a1 + 240), (unint64_t)v28, v32, v34);
      int v35 = (void *)a1;
      if (v28 == (char *)v32) {
        goto LABEL_39;
      }
      uint64_t v37 = *(void *)(a1 + 144);
      long long v36 = *(double **)(a1 + 152);
      unint64_t v38 = (unint64_t)&v28[-v37];
      uint64_t v39 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      uint64_t v40 = &v39[2 * v34];
      if (v40 == v36)
      {
        int v35 = (void *)a1;
        goto LABEL_38;
      }
      unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF0;
      unint64_t v42 = (unint64_t)v36 + -(v38 & 0xFFFFFFFFFFFFFFF0) - v37 - v33 - 16;
      int v35 = (void *)a1;
      if (v42 >= 0x270)
      {
        unint64_t v64 = v41 + (v42 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v65 = v37 + (v64 | 8);
        unint64_t v66 = v37 + (v41 | 8);
        unint64_t v67 = v64 + v37 + 16;
        uint64_t v68 = v33 + v41 + v37;
        uint64_t v69 = v68 + (v42 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v70 = v69 + 8;
        unint64_t v71 = v68 + 8;
        unint64_t v72 = v69 + 16;
        BOOL v74 = (unint64_t)v39 < v69 + 8 && (unint64_t)v40 < v65;
        BOOL v76 = (unint64_t)v39 < v72 && v71 < v65;
        BOOL v78 = v66 < v70 && (unint64_t)v40 < v67;
        BOOL v80 = v66 < v72 && v71 < v67;
        if (v66 >= v65 || (unint64_t)v39 >= v67)
        {
          if (v74)
          {
            unsigned int v43 = v39;
          }
          else if (v76)
          {
            unsigned int v43 = v39;
          }
          else if (v78)
          {
            unsigned int v43 = v39;
          }
          else if (v80)
          {
            unsigned int v43 = v39;
          }
          else
          {
            uint64_t v82 = (v42 >> 4) + 1;
            uint64_t v83 = 2 * (v82 & 0x1FFFFFFFFFFFFFFCLL);
            unsigned int v43 = &v39[v83];
            uint64_t v84 = v82 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v85 = &v39[2 * v34];
              float64x2x2_t v163 = vld2q_f64(v85);
              v85 += 4;
              float64x2x2_t v165 = vld2q_f64(v85);
              uint64_t v86 = v39 + 8;
              vst2q_f64(v39, v163);
              uint64_t v87 = v39 + 4;
              vst2q_f64(v87, v165);
              uint64_t v39 = v86;
              v84 -= 4;
            }
            while (v84);
            if (v82 == (v82 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_36;
            }
            uint64_t v40 = (double *)((char *)v40 + v83 * 8);
          }
        }
        else
        {
          unsigned int v43 = v39;
        }
      }
      else
      {
        unsigned int v43 = (double *)(v37 + ((unint64_t)&v28[-v37] & 0xFFFFFFFFFFFFFFF0));
      }
      do
      {
        *unsigned int v43 = *v40;
        v43[1] = v40[1];
        v43 += 2;
        v40 += 2;
      }
      while (v40 != v36);
LABEL_36:
      uint64_t v39 = v43;
LABEL_38:
      v35[19] = v39;
LABEL_39:
      unint64_t v44 = (char *)v35[29];
      unsigned int v18 = (char *)v35[30];
      if (v18 == v44)
      {
        unint64_t v14 = v35;
      }
      else
      {
        do
        {
          uint64_t v45 = (char *)__p[1];
          if (__p[1] >= (void *)v159)
          {
            uint64_t v47 = (char *)__p[0];
            int64_t v48 = (char *)__p[1] - (char *)__p[0];
            int64_t v49 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61) {
              abort();
            }
            uint64_t v51 = v159 - (unint64_t)__p[0];
            if ((uint64_t)(v159 - (unint64_t)__p[0]) >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v53 = operator new(8 * v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            void *v54 = *((void *)v44 + 1);
            uint64_t v46 = v54 + 1;
            if (v45 == v47)
            {
              uint64_t v47 = v45;
            }
            else
            {
              unint64_t v55 = v45 - 8 - v47;
              if (v55 < 0x58) {
                goto LABEL_212;
              }
              if ((unint64_t)(v45 - &v53[v48]) < 0x20) {
                goto LABEL_212;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              uint64_t v57 = &v53[8 * v49 - 16];
              unsigned int v58 = v45 - 16;
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *uint64_t v57 = v60;
                v57 -= 2;
                v58 -= 32;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v45 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_212:
                do
                {
                  uint64_t v61 = *((void *)v45 - 1);
                  v45 -= 8;
                  *--uint64_t v54 = v61;
                }
                while (v45 != v47);
                uint64_t v47 = (char *)__p[0];
              }
            }
            __p[0] = v54;
            __p[1] = v46;
            *(void *)&long long v159 = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)__p[1] = *((void *)v44 + 1);
            uint64_t v46 = v45 + 8;
          }
          __p[1] = v46;
          float64x2x2_t v62 = *(void (****)(void))v44;
          if (*(void *)v44)
          {
            uint64_t v63 = *(void *)(a1 + 136);
            if (*(void *)(v63 + 16))
            {
              (**v62)(*(void *)v44);
              *float64x2x2_t v62 = *(void (***)(void))(v63 + 40);
              *(void *)(v63 + 40) = v62;
            }
          }
          v44 += 16;
        }
        while (v44 != v18);
        unsigned int v18 = *v157;
        unint64_t v14 = (void *)a1;
      }
      unint64_t v19 = v14[18];
      unsigned int v20 = (uint64_t *)v14[19];
      unint64_t v21 = 126 - 2 * __clz((uint64_t)((uint64_t)v20 - v19) >> 4);
      v14[30] = v18;
      if (v20 == (uint64_t *)v19) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v21;
      }
      std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v19, v20, v22, 1);
      v17 += 24;
      v15 += 8;
      uint64_t v16 = a1 + 168;
    }
    while (v15 != v155);
  }
  uint64_t v88 = *v152;
  uint64_t v89 = v152[1];
  if (*v152 == v89)
  {
    uint64_t v90 = v151;
  }
  else
  {
    uint64_t v90 = v151;
    while (*v88 != 0x41D4E9297E100630)
    {
      v88 += 5;
      if (v88 == v89) {
        goto LABEL_119;
      }
    }
  }
  if (v88 != v89)
  {
    uint64_t v91 = (std::__shared_weak_count *)v88[4];
    if (v91)
    {
      atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
LABEL_119:
  uint64_t v92 = *v152;
  uint64_t v93 = v152[1];
  if (*v152 != v93)
  {
    while (*v92 != 0x4EDAD23DFB014132)
    {
      v92 += 5;
      if (v92 == v93) {
        goto LABEL_127;
      }
    }
  }
  if (v92 != v93)
  {
    unsigned int v94 = (std::__shared_weak_count *)v92[4];
    if (v94)
    {
      atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
LABEL_127:
  uint64_t v95 = *v152;
  uint64_t v96 = v152[1];
  if (*v152 != v96)
  {
    while (*v95 != 0x348A0B0E758C07C2)
    {
      v95 += 5;
      if (v95 == v96) {
        goto LABEL_135;
      }
    }
  }
  if (v95 != v96)
  {
    BOOL v97 = (std::__shared_weak_count *)v95[4];
    if (v97)
    {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
LABEL_135:
  uint64_t v98 = __p[0];
  if (__p[1] != __p[0])
  {
    unint64_t v99 = 0;
    unint64_t v100 = (unint64_t *)__p[0];
    do
    {
      cleanup((uint64_t)v152, v90, v98[v99++]);
      uint64_t v98 = __p[0];
    }
    while (((char *)__p[1] - (char *)__p[0]) >> 3 > v99);
    while (v100 != __p[1])
    {
      unint64_t v101 = *v100++;
      gdc::Registry::destroy((uint64_t)v90, v101);
    }
  }
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillLeaveView<md::FlyoverRenderable>>(v90);
  md::ECSHelpers::destroyEntitiesWithComponent<SceneComponents::WillEnterView<md::FlyoverRenderable>>(v90);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v149 = *(unsigned __int8 *)(md::LayoutContext::frameState(v150) + 128);
  uint64_t v102 = (int8x8_t *)v14[15];
  uint64_t v146 = *((void *)v150 + 2);
  uint64_t v103 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>(v102);
  uint64_t v104 = v103[7];
  uint64_t v145 = v103[8];
  if (v104 != v145)
  {
    uint64_t v105 = (void *)v103[10];
    uint64_t v153 = v14 + 21;
    while (1)
    {
      unsigned int v106 = (void *)v14[26];
      v14[27] = v106;
      unint64_t v107 = v105[2];
      if (v107 > (uint64_t)(v14[28] - (void)v106) >> 4)
      {
        if (v107 >> 60) {
          abort();
        }
        uint64_t v108 = 16 * v107;
        uint64_t v109 = (char *)operator new(16 * v107);
        v14[26] = v109;
        v14[27] = v109;
        v14[28] = &v109[v108];
        if (v106) {
          operator delete(v106);
        }
      }
      uint64_t v110 = *(void **)v146;
      uint64_t v111 = *(void **)(v146 + 8);
      uint64_t v147 = v104;
      if (*(void **)v146 != v111)
      {
        while (*v110 != 0x41D4E9297E100630)
        {
          v110 += 5;
          if (v110 == v111) {
            goto LABEL_158;
          }
        }
      }
      if (v110 != v111)
      {
        unsigned int v112 = (std::__shared_weak_count *)v110[4];
        if (v112)
        {
          atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
      }
LABEL_158:
      uint64_t v113 = (void *)*v105;
      if ((void *)*v105 != v105 + 1) {
        break;
      }
      v105 += 3;
      v104 += 8;
      if (v147 + 8 == v145) {
        goto LABEL_195;
      }
    }
    uint64_t v114 = v113[4];
    unsigned int v115 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v153, (unsigned __int8 *)(v114 + 16));
    if (!v115)
    {
LABEL_188:
      uint64_t v134 = v113[5];
      if (v134) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v156 = v134;
      LOWORD(v162) = *(_WORD *)(v114 + 168);
      *(void *)((char *)&v162 + 4) = *(void *)(v114 + 172);
      md::GeometryContext::transformConstantData((double *)&v161, v148, (unsigned __int8 *)&v162, v149, *(double *)(v114 + 600), *(double *)(v114 + 608));
      uint64_t v135 = v14[17];
      char v136 = *((unsigned char *)v113 + 48);
      BOOL v137 = *(void **)(v135 + 40);
      if (!v137)
      {
        geo::Pool<md::FlyoverRenderable>::allocateSlab((uint64_t **)v14[17]);
        BOOL v137 = *(void **)(v135 + 40);
      }
      *(void *)(v135 + 40) = *v137;
      md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v137, v114, v156, v136, (v149 - 1) < 3u, &v161);
      *BOOL v137 = &unk_1EF513508;
      v137[48] = v114;
      v137[49] = v156;
      if (v156) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v156 + 8), 1uLL, memory_order_relaxed);
      }
      *BOOL v137 = &unk_1EF513110;
      gdc::Registry::create((gdc::Registry *)v102);
    }
    uint64_t v116 = v115;
    unsigned int v118 = (void *)v14[18];
    uint64_t v117 = (void *)v14[19];
    if (v118 == v117)
    {
      uint64_t v119 = v14[18];
    }
    else
    {
      uint64_t v119 = v14[18];
      do
      {
        if (*(uint64_t **)v119 == v115[16]
          && *(unsigned __int16 *)(v119 + 8) == *((unsigned __int16 *)v115 + 68)
          && *(unsigned __int16 *)(v119 + 10) == *((unsigned __int16 *)v115 + 69)
          && *(_DWORD *)(v119 + 12) == *((_DWORD *)v115 + 35))
        {
          goto LABEL_170;
        }
        v119 += 16;
      }
      while ((void *)v119 != v117);
      uint64_t v119 = v14[19];
    }
LABEL_170:
    uint64_t v120 = (void *)(v119 + 16);
    if ((void *)(v119 + 16) != v117)
    {
      unint64_t v121 = (unint64_t)v117 - v119 - 32;
      if (v121 >= 0x30)
      {
        uint64_t v122 = (v119 - (uint64_t)v118) >> 4;
        uint64_t v123 = (v121 >> 4) + 1;
        uint64_t v124 = 16 * (v123 & 0x1FFFFFFFFFFFFFFCLL);
        v119 += v124;
        uint64_t v125 = (double *)&v118[2 * v122 + 4];
        uint64_t v126 = v123 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v127 = v125 - 2;
          float64x2x2_t v164 = vld2q_f64(v127);
          uint64_t v128 = v125 + 2;
          float64x2x2_t v166 = vld2q_f64(v128);
          uint64_t v129 = v125 - 4;
          vst2q_f64(v129, v164);
          vst2q_f64(v125, v166);
          v125 += 8;
          v126 -= 4;
        }
        while (v126);
        if (v123 == (v123 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_177;
        }
        uint64_t v120 = (void *)((char *)v120 + v124);
      }
      do
      {
        *(void *)uint64_t v119 = *v120;
        *(void *)(v119 + 8) = v120[1];
        v119 += 16;
        v120 += 2;
      }
      while (v120 != v117);
    }
LABEL_177:
    v14[19] = v119;
    int64_t v130 = v115[16];
    if (v130)
    {
      uint64_t v131 = v14[17];
      if (*(void *)(v131 + 16))
      {
        (*(void (**)(uint64_t *))*v130)(v115[16]);
        *int64_t v130 = *(void *)(v131 + 40);
        *(void *)(v131 + 40) = v130;
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v153, v116);
    int64_t v132 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v159)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        uint64_t v133 = (void *)v132[4];
        if (v133 != (void *)v132[6]) {
          free(v133);
        }
      }
      operator delete(v132);
    }
    uint64_t v114 = v113[4];
    goto LABEL_188;
  }
LABEL_195:
  uint64_t v160 = (int8x8_t *)v14[15];
  uint64_t result = gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(v160);
  if (*(void *)(result + 56) != *(void *)(result + 64))
  {
    uint64_t v141 = (void *)v14[18];
    uint64_t v139 = (void *)v14[19];
    __p[0] = *(void **)(result + 80);
    __p[1] = v14 + 21;
    if (v141 == v139)
    {
LABEL_197:
      uint64_t v139 = v141;
    }
    else
    {
      do
      {
        if (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v141))
        {
          do
          {
            v139 -= 2;
            if (v139 == v141) {
              goto LABEL_197;
            }
          }
          while (!void createEnterLeaveChangedComponents<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1}::operator()((uint64_t *)__p, (uint64_t)v139));
          uint64_t v142 = *v141;
          *uint64_t v141 = *v139;
          *uint64_t v139 = v142;
          uint64_t v143 = v141[1];
          v141[1] = v139[1];
          v139[1] = v143;
        }
        v141 += 2;
      }
      while (v141 != v139);
    }
    uint64_t v140 = *(void **)(a1 + 152);
    __p[0] = v139;
    __p[1] = v140;
    long long v162 = *(_OWORD *)(a1 + 208);
    gdc::Registry::create((gdc::Registry *)v160);
  }
  *uint64_t v144 = v14[15];
  return result;
}

void sub_1A1E0D54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>(int8x8_t *a1)
{
  uint64_t v10 = 0x1995DE3D010F44EDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1995DE3D010F44EDLL;
    if (*(void *)&v1 <= 0x1995DE3D010F44EDuLL) {
      uint64_t v3 = 0x1995DE3D010F44EDuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1995DE3D010F44EDLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1995DE3D010F44EDLL)
      {
        if (v5[2] == 0x1995DE3D010F44EDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1995DE3D010F44EDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1995DE3D010F44EDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E0D9D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4DD1DD0D09C88526;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4DD1DD0D09C88526;
    if (*(void *)&v1 <= 0x4DD1DD0D09C88526uLL) {
      uint64_t v3 = 0x4DD1DD0D09C88526uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4DD1DD0D09C88526;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4DD1DD0D09C88526)
      {
        if (v5[2] == 0x4DD1DD0D09C88526) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4DD1DD0D09C88526) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4DD1DD0D09C88526) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E0DC44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  unint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)79>>(int8x8_t *a1)
{
  unint64_t v10 = 0xFAC632E90BB7F066;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xFAC632E90BB7F066;
    if (*(void *)&v1 <= 0xFAC632E90BB7F066) {
      unint64_t v3 = 0xFAC632E90BB7F066 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xFAC632E90BB7F066;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xFAC632E90BB7F066)
      {
        if (v5[2] == 0xFAC632E90BB7F066) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xFAC632E90BB7F066) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xFAC632E90BB7F066) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1E0E07C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataActive<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MapDataTypeT<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = a2 - 2;
    uint64_t v11 = a2 - 1;
    uint64_t v12 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v109 = *v12;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                  return result;
                }
                *uint64_t v12 = *v10;
                *unint64_t v10 = v109;
                uint64_t v110 = v12[1];
                v12[1] = *v11;
                goto LABEL_188;
              case 3:
                uint64_t v111 = v12[2];
                unsigned int v112 = *(unsigned __int8 *)(*(void *)(v111 + 384) + 169);
                uint64_t v113 = *v12;
                uint64_t v114 = *v10;
                unsigned int v115 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
                if (v112 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
                {
                  if (v115 <= v112) {
                    return result;
                  }
                  v12[2] = v114;
                  *unint64_t v10 = v111;
                  uint64_t v158 = v12[3];
                  v12[3] = *v11;
                  *uint64_t v11 = v158;
                  uint64_t v159 = v12[2];
                  uint64_t v160 = *v12;
                  if (*(unsigned __int8 *)(*(void *)(v159 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)) {
                    return result;
                  }
                  *uint64_t v12 = v159;
                  v12[2] = v160;
                  uint64_t v116 = v12 + 1;
                  uint64_t v11 = v12 + 3;
                }
                else
                {
                  if (v115 <= v112)
                  {
                    uint64_t v116 = v12 + 3;
                    uint64_t v169 = v12[3];
                    uint64_t v170 = v12[1];
                    *uint64_t v12 = v111;
                    v12[1] = v169;
                    v12[2] = v113;
                    v12[3] = v170;
                    if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v113 + 384) + 169)) {
                      return result;
                    }
                    v12[2] = *v10;
                  }
                  else
                  {
                    uint64_t v116 = v12 + 1;
                    *uint64_t v12 = v114;
                  }
                  *unint64_t v10 = v113;
                }
                uint64_t v110 = *v116;
                *uint64_t v116 = *v11;
LABEL_188:
                *uint64_t v11 = v110;
                break;
              case 4:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, a2 - 2);
              case 5:
                return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            uint64_t v117 = v12 + 2;
            BOOL v119 = v12 == a2 || v117 == a2;
            if (a4)
            {
              if (!v119)
              {
                uint64_t v120 = 0;
                unint64_t v121 = v12;
                do
                {
                  uint64_t v123 = v117;
                  uint64_t v124 = v121[2];
                  uint64_t v125 = *v121;
                  if (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v121 + 384) + 169))
                  {
                    uint64_t v126 = v121[3];
                    uint64_t v127 = v120;
                    do
                    {
                      uint64_t v128 = (char *)v12 + v127;
                      uint64_t v129 = *(uint64_t *)((char *)v12 + v127 + 8);
                      *((void *)v128 + 2) = v125;
                      *((void *)v128 + 3) = v129;
                      if (!v127)
                      {
                        uint64_t v122 = v12;
                        goto LABEL_129;
                      }
                      uint64_t v125 = *((void *)v128 - 2);
                      v127 -= 16;
                    }
                    while (*(unsigned __int8 *)(*(void *)(v124 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v125 + 384) + 169));
                    uint64_t v122 = (uint64_t *)((char *)v12 + v127 + 16);
LABEL_129:
                    *uint64_t v122 = v124;
                    v122[1] = v126;
                  }
                  uint64_t v117 = v123 + 2;
                  v120 += 16;
                  unint64_t v121 = v123;
                }
                while (v123 + 2 != a2);
              }
            }
            else if (!v119)
            {
              uint64_t v161 = v12 + 3;
              do
              {
                long long v162 = v117;
                uint64_t v163 = v9[2];
                uint64_t v164 = *v9;
                if (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v9 + 384) + 169))
                {
                  uint64_t v165 = v9[3];
                  float64x2x2_t v166 = v161;
                  do
                  {
                    uint64_t v167 = v166;
                    *(v166 - 1) = v164;
                    uint64_t v168 = *(v166 - 2);
                    v166 -= 2;
                    *uint64_t v167 = v168;
                    uint64_t v164 = *(v167 - 5);
                  }
                  while (*(unsigned __int8 *)(*(void *)(v163 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v164 + 384) + 169));
                  *(v166 - 1) = v163;
                  uint64_t *v166 = v165;
                }
                uint64_t v117 = v162 + 2;
                v161 += 2;
                uint64_t v9 = v162;
              }
              while (v162 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v130 = (unint64_t)(v14 - 2) >> 1;
              int64_t v131 = v130;
              do
              {
                int64_t v132 = v131;
                if (v130 >= v131)
                {
                  uint64_t v133 = (2 * v131) | 1;
                  uint64_t v134 = &v12[2 * v133];
                  if (2 * v132 + 2 < v14)
                  {
                    unsigned int v135 = *(unsigned __int8 *)(*(void *)(*v134 + 384) + 169);
                    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169);
                    BOOL v137 = v135 > v136;
                    if (v135 <= v136) {
                      uint64_t v138 = *v134;
                    }
                    else {
                      uint64_t v138 = v134[2];
                    }
                    if (v137)
                    {
                      v134 += 2;
                      uint64_t v133 = 2 * v132 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v138 = *v134;
                  }
                  uint64_t v139 = &v12[2 * v132];
                  uint64_t v140 = *v139;
                  uint64_t result = *(unsigned __int8 *)(*(void *)(*v139 + 384) + 169);
                  if (*(unsigned __int8 *)(*(void *)(v138 + 384) + 169) <= result)
                  {
                    uint64_t v141 = v139[1];
                    do
                    {
                      uint64_t result = (unint64_t)v139;
                      uint64_t v139 = v134;
                      *(void *)uint64_t result = v138;
                      *(void *)(result + 8) = v134[1];
                      if (v130 < v133) {
                        break;
                      }
                      uint64_t v142 = (2 * v133) | 1;
                      uint64_t v134 = &v12[2 * v142];
                      uint64_t v133 = 2 * v133 + 2;
                      if (v133 < v14)
                      {
                        uint64_t v138 = *v134;
                        if (*(unsigned __int8 *)(*(void *)(*v134 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v134[2] + 384) + 169))
                        {
                          uint64_t v133 = v142;
                        }
                        else
                        {
                          uint64_t v138 = v134[2];
                          v134 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v138 = *v134;
                        uint64_t v133 = v142;
                      }
                      uint64_t result = *(unsigned __int8 *)(*(void *)(v138 + 384) + 169);
                    }
                    while (result <= *(unsigned __int8 *)(*(void *)(v140 + 384) + 169));
                    *uint64_t v139 = v140;
                    v139[1] = v141;
                  }
                }
                int64_t v131 = v132 - 1;
              }
              while (v132);
              uint64_t v143 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v144 = 0;
                uint64_t v145 = *v12;
                uint64_t v146 = v12[1];
                uint64_t v147 = v12;
                do
                {
                  int v149 = &v147[2 * v144 + 2];
                  uint64_t v150 = (2 * v144) | 1;
                  uint64_t v144 = 2 * v144 + 2;
                  if (v144 < v143)
                  {
                    uint64_t v148 = *v149;
                    uint64_t result = (unint64_t)(v149 + 2);
                    if (*(unsigned __int8 *)(*(void *)(*v149 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v149[2] + 384) + 169))
                    {
                      uint64_t v144 = v150;
                    }
                    else
                    {
                      uint64_t v148 = v149[2];
                      v149 += 2;
                    }
                  }
                  else
                  {
                    uint64_t v148 = *v149;
                    uint64_t v144 = v150;
                  }
                  *uint64_t v147 = v148;
                  v147[1] = v149[1];
                  uint64_t v147 = v149;
                }
                while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
                if (v149 == a2 - 2)
                {
                  *int v149 = v145;
                  v149[1] = v146;
                }
                else
                {
                  *int v149 = *(a2 - 2);
                  v149[1] = *(a2 - 1);
                  *(a2 - 2) = v145;
                  *(a2 - 1) = v146;
                  uint64_t v151 = (char *)v149 - (char *)v12 + 16;
                  if (v151 >= 17)
                  {
                    unint64_t v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                    uint64_t v153 = &v12[2 * v152];
                    uint64_t v154 = *v153;
                    uint64_t v155 = *v149;
                    if (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v149 + 384) + 169))
                    {
                      uint64_t v156 = v149[1];
                      do
                      {
                        uint64_t v157 = v149;
                        int v149 = v153;
                        *uint64_t v157 = v154;
                        v157[1] = v153[1];
                        if (!v152) {
                          break;
                        }
                        unint64_t v152 = (v152 - 1) >> 1;
                        uint64_t v153 = &v12[2 * v152];
                        uint64_t v154 = *v153;
                      }
                      while (*(unsigned __int8 *)(*(void *)(*v153 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v155 + 384) + 169));
                      *int v149 = v155;
                      v149[1] = v156;
                    }
                  }
                }
                a2 -= 2;
                BOOL v137 = v143-- <= 2;
              }
              while (!v137);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[2 * ((unint64_t)v14 >> 1)];
          uint64_t v17 = *v10;
          unsigned int v18 = *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169);
          if ((unint64_t)v13 >= 0x801)
          {
            uint64_t v19 = *v16;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
            uint64_t v21 = *v12;
            if (v20 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
            {
              if (v18 <= v20
                || (uint64_t *v16 = v17,
                    *unint64_t v10 = v19,
                    uint64_t v28 = v16 + 1,
                    uint64_t v27 = v16[1],
                    v16[1] = *v11,
                    *uint64_t v11 = v27,
                    uint64_t v29 = *v12,
                    *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169)))
              {
LABEL_24:
                long long v36 = &v12[2 * v15];
                uint64_t v39 = *(v36 - 2);
                uint64_t v37 = v36 - 2;
                uint64_t v38 = v39;
                unsigned int v40 = *(unsigned __int8 *)(*(void *)(v39 + 384) + 169);
                uint64_t v41 = v12[2];
                uint64_t v42 = *(a2 - 4);
                unsigned int v43 = *(unsigned __int8 *)(*(void *)(v42 + 384) + 169);
                if (v40 <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169))
                {
                  if (v43 <= v40
                    || (*uint64_t v37 = v42,
                        *(a2 - 4) = v38,
                        uint64_t v45 = v37 + 1,
                        uint64_t v46 = v37[1],
                        v37[1] = *(a2 - 3),
                        *(a2 - 3) = v46,
                        uint64_t v47 = v12[2],
                        *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v47 + 384) + 169)))
                  {
LABEL_37:
                    uint64_t v54 = &v12[2 * v15];
                    uint64_t v57 = v54[2];
                    unint64_t v55 = v54 + 2;
                    uint64_t v56 = v57;
                    unsigned int v58 = *(unsigned __int8 *)(*(void *)(v57 + 384) + 169);
                    uint64_t v59 = v12[4];
                    uint64_t v60 = *(a2 - 6);
                    unsigned int v61 = *(unsigned __int8 *)(*(void *)(v60 + 384) + 169);
                    if (v58 <= *(unsigned __int8 *)(*(void *)(v59 + 384) + 169))
                    {
                      if (v61 > v58)
                      {
                        *unint64_t v55 = v60;
                        *(a2 - 6) = v56;
                        unint64_t v64 = v55 + 1;
                        uint64_t v63 = v55[1];
                        v55[1] = *(a2 - 5);
                        *(a2 - 5) = v63;
                        uint64_t v56 = *v55;
                        unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        uint64_t v65 = v12[4];
                        if (v58 > *(unsigned __int8 *)(*(void *)(v65 + 384) + 169))
                        {
                          v12[4] = v56;
                          *unint64_t v55 = v65;
                          float64x2x2_t v62 = v12 + 5;
LABEL_46:
                          uint64_t v69 = *v62;
                          *float64x2x2_t v62 = *v64;
                          *unint64_t v64 = v69;
                          uint64_t v56 = *v55;
                          unsigned int v58 = *(unsigned __int8 *)(*(void *)(*v55 + 384) + 169);
                        }
                      }
                    }
                    else
                    {
                      if (v61 > v58)
                      {
                        float64x2x2_t v62 = v12 + 5;
                        v12[4] = v60;
LABEL_45:
                        *(a2 - 6) = v59;
                        unint64_t v64 = a2 - 5;
                        goto LABEL_46;
                      }
                      float64x2x2_t v62 = v55 + 1;
                      uint64_t v66 = v55[1];
                      uint64_t v67 = v12[5];
                      v12[4] = v56;
                      v12[5] = v66;
                      *unint64_t v55 = v59;
                      v55[1] = v67;
                      uint64_t v68 = *(a2 - 6);
                      unsigned int v58 = *(unsigned __int8 *)(*(void *)(v59 + 384) + 169);
                      if (*(unsigned __int8 *)(*(void *)(v68 + 384) + 169) > v58)
                      {
                        *unint64_t v55 = v68;
                        goto LABEL_45;
                      }
                      uint64_t v56 = v59;
                    }
                    uint64_t v70 = *v16;
                    unsigned int v71 = *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169);
                    uint64_t v72 = *v37;
                    if (v71 <= *(unsigned __int8 *)(*(void *)(*v37 + 384) + 169))
                    {
                      if (v58 <= v71)
                      {
LABEL_57:
                        uint64_t v80 = *v12;
                        *uint64_t v12 = v70;
                        uint64_t v26 = v12 + 1;
                        uint64_t *v16 = v80;
                        uint64_t v32 = v16 + 1;
                        goto LABEL_58;
                      }
                      uint64_t *v16 = v56;
                      int8x8_t v75 = v16 + 1;
                      uint64_t v76 = v16[1];
                      v16[1] = v55[1];
                      *unint64_t v55 = v70;
                      v55[1] = v76;
                      if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                      {
                        uint64_t v70 = v56;
                        goto LABEL_57;
                      }
                      *uint64_t v37 = v56;
                      BOOL v73 = v37 + 1;
                      uint64_t *v16 = v72;
                    }
                    else
                    {
                      if (v58 <= v71)
                      {
                        uint64_t *v16 = v72;
                        uint64_t v77 = v16[1];
                        uint64_t v78 = v37[1];
                        *uint64_t v37 = v70;
                        v37[1] = v77;
                        v16[1] = v78;
                        if (*(unsigned __int8 *)(*(void *)(v56 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v72 + 384) + 169))
                        {
                          uint64_t v70 = v72;
                          goto LABEL_57;
                        }
                        uint64_t *v16 = v56;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                        BOOL v73 = v16 + 1;
                      }
                      else
                      {
                        *uint64_t v37 = v56;
                        BOOL v73 = v37 + 1;
                        *unint64_t v55 = v72;
                        BOOL v74 = v55 + 1;
                      }
                      int8x8_t v75 = v74;
                    }
                    uint64_t v79 = *v73;
                    *BOOL v73 = *v75;
                    *int8x8_t v75 = v79;
                    uint64_t v70 = *v16;
                    goto LABEL_57;
                  }
                  v12[2] = *v37;
                  *uint64_t v37 = v47;
                  unint64_t v44 = v12 + 3;
                }
                else
                {
                  if (v43 <= v40)
                  {
                    unint64_t v44 = v37 + 1;
                    uint64_t v50 = v37[1];
                    uint64_t v51 = v12[3];
                    v12[2] = v38;
                    v12[3] = v50;
                    *uint64_t v37 = v41;
                    v37[1] = v51;
                    uint64_t v52 = *(a2 - 4);
                    if (*(unsigned __int8 *)(*(void *)(v52 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v41 + 384) + 169)) {
                      goto LABEL_37;
                    }
                    *uint64_t v37 = v52;
                  }
                  else
                  {
                    unint64_t v44 = v12 + 3;
                    v12[2] = v42;
                  }
                  *(a2 - 4) = v41;
                  uint64_t v45 = a2 - 3;
                }
                uint64_t v53 = *v44;
                uint64_t *v44 = *v45;
                *uint64_t v45 = v53;
                goto LABEL_37;
              }
              *uint64_t v12 = *v16;
              uint64_t v22 = v12 + 1;
              uint64_t *v16 = v29;
            }
            else
            {
              if (v18 <= v20)
              {
                uint64_t v22 = v16 + 1;
                uint64_t v33 = v16[1];
                uint64_t v34 = v12[1];
                *uint64_t v12 = v19;
                v12[1] = v33;
                uint64_t *v16 = v21;
                v16[1] = v34;
                if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v21 + 384) + 169)) {
                  goto LABEL_24;
                }
                uint64_t *v16 = *v10;
              }
              else
              {
                uint64_t v22 = v12 + 1;
                *uint64_t v12 = v17;
              }
              *unint64_t v10 = v21;
              uint64_t v28 = a2 - 1;
            }
            uint64_t v35 = *v22;
            *uint64_t v22 = *v28;
            *uint64_t v28 = v35;
            goto LABEL_24;
          }
          uint64_t v23 = *v12;
          unsigned int v24 = *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169);
          uint64_t v25 = *v16;
          if (v24 <= *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169)) {
            break;
          }
          if (v18 > v24)
          {
            uint64_t v26 = v16 + 1;
            uint64_t *v16 = v17;
LABEL_32:
            *unint64_t v10 = v25;
            uint64_t v32 = a2 - 1;
            goto LABEL_58;
          }
          uint64_t v26 = v12 + 1;
          uint64_t v48 = v12[1];
          uint64_t v49 = v16[1];
          uint64_t *v16 = v23;
          v16[1] = v48;
          *uint64_t v12 = v25;
          v12[1] = v49;
          if (*(unsigned __int8 *)(*(void *)(*v10 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v25 + 384) + 169))
          {
            *uint64_t v12 = *v10;
            goto LABEL_32;
          }
          uint64_t v23 = v25;
          --a3;
          if (a4) {
            goto LABEL_60;
          }
LABEL_62:
          unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
          if (*(unsigned __int8 *)(*(void *)(*(v12 - 2) + 384) + 169) > v82) {
            goto LABEL_63;
          }
          if (v82 > *(unsigned __int8 *)(*(void *)(*v10 + 384) + 169))
          {
            do
            {
              uint64_t v98 = v12[2];
              v12 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(v98 + 384) + 169));
          }
          else
          {
            unint64_t v99 = v12 + 2;
            do
            {
              uint64_t v12 = v99;
              if (v99 >= a2) {
                break;
              }
              v99 += 2;
            }
            while (v82 <= *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169));
          }
          unint64_t v100 = a2;
          if (v12 < a2)
          {
            unint64_t v100 = a2;
            do
            {
              uint64_t v101 = *(v100 - 2);
              v100 -= 2;
            }
            while (v82 > *(unsigned __int8 *)(*(void *)(v101 + 384) + 169));
          }
          uint64_t v102 = v9[1];
          if (v12 < v100)
          {
            uint64_t v103 = *v12;
            uint64_t v104 = *v100;
            do
            {
              *uint64_t v12 = v104;
              *unint64_t v100 = v103;
              uint64_t v105 = v12[1];
              v12[1] = v100[1];
              v100[1] = v105;
              unsigned int v106 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
              do
              {
                uint64_t v107 = v12[2];
                v12 += 2;
                uint64_t v103 = v107;
              }
              while (v106 <= *(unsigned __int8 *)(*(void *)(v107 + 384) + 169));
              do
              {
                uint64_t v108 = *(v100 - 2);
                v100 -= 2;
                uint64_t v104 = v108;
              }
              while (v106 > *(unsigned __int8 *)(*(void *)(v108 + 384) + 169));
            }
            while (v12 < v100);
          }
          BOOL v4 = v12 - 2 >= v9;
          BOOL v5 = v12 - 2 == v9;
          if (v12 - 2 != v9)
          {
            *uint64_t v9 = *(v12 - 2);
            v9[1] = *(v12 - 1);
          }
          a4 = 0;
          *(v12 - 2) = v23;
          *(v12 - 1) = v102;
        }
        if (v18 > v24)
        {
          *uint64_t v12 = v17;
          *unint64_t v10 = v23;
          uint64_t v30 = v12[1];
          v12[1] = *v11;
          *uint64_t v11 = v30;
          uint64_t v23 = *v12;
          uint64_t v31 = *v16;
          if (*(unsigned __int8 *)(*(void *)(*v12 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v16 + 384) + 169))
          {
            uint64_t *v16 = v23;
            *uint64_t v12 = v31;
            uint64_t v26 = v16 + 1;
            uint64_t v32 = v12 + 1;
LABEL_58:
            uint64_t v81 = *v26;
            *uint64_t v26 = *v32;
            *uint64_t v32 = v81;
            uint64_t v23 = *v12;
          }
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_62;
        }
LABEL_60:
        unsigned int v82 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
LABEL_63:
        uint64_t v83 = v12[1];
        uint64_t v84 = v12;
        do
        {
          uint64_t v85 = v84;
          uint64_t v87 = v84[2];
          v84 += 2;
          uint64_t v86 = v87;
        }
        while (*(unsigned __int8 *)(*(void *)(v87 + 384) + 169) > v82);
        uint64_t v88 = a2;
        if (v85 == v12)
        {
          uint64_t v88 = a2;
          do
          {
            if (v84 >= v88) {
              break;
            }
            uint64_t v90 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v90 + 384) + 169) <= v82);
        }
        else
        {
          do
          {
            uint64_t v89 = *(v88 - 2);
            v88 -= 2;
          }
          while (*(unsigned __int8 *)(*(void *)(v89 + 384) + 169) <= v82);
        }
        if (v84 < v88)
        {
          uint64_t v91 = *v88;
          uint64_t v12 = v84;
          uint64_t v92 = v88;
          do
          {
            *uint64_t v12 = v91;
            *uint64_t v92 = v86;
            uint64_t v93 = v12[1];
            v12[1] = v92[1];
            v92[1] = v93;
            unsigned int v94 = *(unsigned __int8 *)(*(void *)(v23 + 384) + 169);
            do
            {
              uint64_t v95 = v12[2];
              v12 += 2;
              uint64_t v86 = v95;
            }
            while (*(unsigned __int8 *)(*(void *)(v95 + 384) + 169) > v94);
            do
            {
              uint64_t v96 = *(v92 - 2);
              v92 -= 2;
              uint64_t v91 = v96;
            }
            while (*(unsigned __int8 *)(*(void *)(v96 + 384) + 169) <= v94);
          }
          while (v12 < v92);
        }
        else
        {
          uint64_t v12 = v84;
        }
        if (v12 - 2 != v9)
        {
          *uint64_t v9 = *(v12 - 2);
          v9[1] = *(v12 - 1);
        }
        *(v12 - 2) = v23;
        *(v12 - 1) = v83;
        if (v84 >= v88) {
          break;
        }
LABEL_83:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*,false>(v9, v12 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v9, v12 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(v12, a2);
      if (result) {
        break;
      }
      if (!v97) {
        goto LABEL_83;
      }
    }
    a2 = v12 - 2;
    if (!v97) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::FlyoverRenderable,(md::MapDataType)79>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::FlyoverRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)79> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> const&)::{lambda(std::tuple<md::FlyoverRenderable*,gdc::Entity> const&,std::tuple<md::FlyoverRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::FlyoverRenderable*,gdc::Entity>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 2);
      uint64_t v4 = *a1;
      if (*(unsigned __int8 *)(*(void *)(v3 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384)
                                                                                                  + 169))
      {
        *a1 = v3;
        *(a2 - 2) = v4;
        uint64_t v5 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v6 = a1[2];
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v6 + 384) + 169);
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 2);
      unsigned int v10 = *(unsigned __int8 *)(*(void *)(v9 + 384) + 169);
      if (v7 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v10 <= v7)
        {
          uint64_t v11 = a1 + 3;
          uint64_t v26 = a1[3];
          uint64_t v27 = a1[1];
          *a1 = v6;
          a1[1] = v26;
          a1[2] = v8;
          a1[3] = v27;
          uint64_t v28 = *(a2 - 2);
          if (*(unsigned __int8 *)(*(void *)(v28 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v8 + 384) + 169)) {
            return 1;
          }
          a1[2] = v28;
        }
        else
        {
          uint64_t v11 = a1 + 1;
          *a1 = v9;
        }
        *(a2 - 2) = v8;
        unsigned int v20 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v7)
      {
        a1[2] = v9;
        *(a2 - 2) = v6;
        unsigned int v20 = a1 + 3;
        uint64_t v19 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v21 = a1[2];
        uint64_t v22 = *a1;
        if (*(unsigned __int8 *)(*(void *)(v21 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
        {
          *a1 = v21;
          a1[2] = v22;
          uint64_t v11 = a1 + 1;
LABEL_21:
          uint64_t v29 = *v11;
          *uint64_t v11 = *v20;
          *unsigned int v20 = v29;
          return 1;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void processLeavingRenderables<md::DaVinciGroundRenderable,(md::MapDataType)33>(gdc::Registry *,gdc::ServiceLocator &,SceneComponents::MapDataRenderables<md::DaVinciGroundRenderable> &,md::CollectRenderablesLogicContext<(md::MapDataType)33> &)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)#1}::operator() const(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> const&)::{lambda(std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity> const&)#1} &,std::tuple<md::DaVinciGroundRenderable*,gdc::Entity>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[2];
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(v14 + 384) + 169);
      uint64_t v16 = *a1;
      unsigned int v17 = *(unsigned __int8 *)(*(void *)(v13 + 384) + 169);
      if (v15 > *(unsigned __int8 *)(*(void *)(*a1 + 384) + 169))
      {
        if (v17 <= v15)
        {
          unsigned int v18 = a1 + 3;
          uint64_t v30 = a1[3];
          uint64_t v31 = a1[1];
          *a1 = v14;
          a1[1] = v30;
          a1[2] = v16;
          a1[3] = v31;
          if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) <= *(unsigned __int8 *)(*(void *)(v16 + 384) + 169)) {
            goto LABEL_26;
          }
          a1[2] = v13;
        }
        else
        {
          unsigned int v18 = a1 + 1;
          *a1 = v13;
        }
        a1[4] = v16;
        unsigned int v24 = a1 + 5;
        goto LABEL_25;
      }
      if (v17 > v15)
      {
        unsigned int v24 = a1 + 3;
        uint64_t v23 = a1[3];
        uint64_t v25 = a1[5];
        a1[4] = v14;
        a1[5] = v23;
        a1[2] = v13;
        a1[3] = v25;
        if (*(unsigned __int8 *)(*(void *)(v13 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v16 + 384) + 169))
        {
          *a1 = v13;
          a1[2] = v16;
          unsigned int v18 = a1 + 1;
LABEL_25:
          uint64_t v32 = *v18;
          *unsigned int v18 = *v24;
          *unsigned int v24 = v32;
        }
      }
LABEL_26:
      uint64_t v33 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      while (1)
      {
        uint64_t v37 = *v33;
        uint64_t v38 = *v12;
        if (*(unsigned __int8 *)(*(void *)(*v33 + 384) + 169) > *(unsigned __int8 *)(*(void *)(*v12 + 384) + 169))
        {
          uint64_t v39 = v33[1];
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = (uint64_t *)((char *)a1 + v40);
            uint64_t v42 = *(uint64_t *)((char *)a1 + v40 + 40);
            v41[6] = v38;
            v41[7] = v42;
            if (v40 == -32)
            {
              long long v36 = a1;
              goto LABEL_29;
            }
            uint64_t v38 = v41[2];
            v40 -= 16;
          }
          while (*(unsigned __int8 *)(*(void *)(v37 + 384) + 169) > *(unsigned __int8 *)(*(void *)(v38 + 384) + 169));
          long long v36 = (uint64_t *)((char *)a1 + v40 + 48);
LABEL_29:
          *long long v36 = v37;
          v36[1] = v39;
          if (++v35 == 8) {
            return v33 + 2 == a2;
          }
        }
        uint64_t v12 = v33;
        v34 += 16;
        v33 += 2;
        if (v33 == a2) {
          return 1;
        }
      }
  }
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x4F6DB855E2E136BALL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3) {
      uint64_t v3 = 0x3070CB6B3C7F21D3 % a2;
    }
  }
  else
  {
    uint64_t v3 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x3070CB6B3C7F21D3)
      {
        if (v6[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v11 = 0xE4007F1EDCD91179;
    if (a2 <= 0xE4007F1EDCD91179) {
      unint64_t v11 = 0xE4007F1EDCD91179 % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & 0xE4007F1EDCD91179;
  }
  uint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0xE4007F1EDCD91179)
      {
        if (v13[2] == 0xE4007F1EDCD91179) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0xE4007F1EDCD91179)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0xE4007F1EDCD91179)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0xE4007F1EDCD91179) {
    return v10;
  }
  return v10;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x4F6DB855E2E136BALL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::Logic<md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>,md::CollectRenderablesLogicContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::GeometryContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)79>>>>::_allocateContext()
{
}

void sub_1A1E0FC4C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)79>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)79>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514998;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectRenderablesLogicContext<(md::MapDataType)79>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514998;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::didBecomeInactive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF513930;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectRenderablesLogic<(md::MapDataType)79,md::FlyoverRenderable>::~CollectRenderablesLogic(uint64_t a1)
{
  *(void *)a1 = &unk_1EF513930;
  SceneComponents::MapDataRenderables<md::FlyoverRenderable>::~MapDataRenderables((uint64_t *)(a1 + 136));
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void ggl::EndOfWorld::BasePipelineState::~BasePipelineState(ggl::EndOfWorld::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ggl::FlyoverNightDim::QuadPipelineState::~QuadPipelineState(ggl::FlyoverNightDim::QuadPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverNightDim::QuadPipelineState::QuadPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    uint64_t v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1EB32B400 = 1;
          }
          ggl::FlyoverNightDim::QuadPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          *(void *)algn_1E958E588 = &ggl::FlyoverNightDim::pipelineDataQuadPipelineDeviceStructs(void)::ref;
          qword_1E958E590 = 0;
          {
            ggl::FlyoverNightDim::pipelineDataQuadPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverNightDim::Color::reflection(void)::reflection;
          }
          qword_1E958E598 = (uint64_t)&ggl::FlyoverNightDim::pipelineDataQuadPipelineConstantStructs(void)::ref;
          unk_1E958E5A0 = xmmword_1A28FCC60;
        }
      }
      ggl::FlyoverNightDim::QuadPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverNightDim::QuadPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverNightDimShader::typedReflection(v85);
      qword_1E958E530 = (uint64_t)&ggl::FlyoverNightDimShader::typedReflection(void)::ref;
      {
        ggl::FlyoverNightDim::pipelineStateQuadPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E958E5D0 = 0;
        qword_1E958E5D8 = (uint64_t)"";
        dword_1E958E5E0 = 0;
        qword_1E958E5E8 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineAttributeBinding_0(void)::attr;
        unk_1E958E5F0 = 1;
      }
      qword_1E958E538 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineAttributeStructBinding(void)::attr;
      unk_1E958E540 = 1;
      qword_1E958E548 = 0;
      unk_1E958E550 = 0;
      qword_1E958E558 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineDeviceStructBinding(void)::ref;
      unk_1E958E560 = 0;
      {
        ggl::FlyoverNightDim::pipelineStateQuadPipelineConstantStructBinding(void)::ref = 0;
        unk_1E958E610 = 0;
        qword_1E958E618 = (uint64_t)"color";
        dword_1E958E620 = 3;
        qword_1E958E628 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineConstantColorBinding(void)::reflection;
        unk_1E958E630 = 1;
      }
      qword_1E958E568 = (uint64_t)&ggl::FlyoverNightDim::pipelineStateQuadPipelineConstantStructBinding(void)::ref;
      unk_1E958E570 = 1;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverNightDim::QuadPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF55BC00;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FlyoverNightDim::QuadPipelineSetup::textureIsEnabled(ggl::FlyoverNightDim::QuadPipelineSetup *this)
{
  return 0;
}

BOOL ggl::FlyoverNightDim::QuadPipelineSetup::constantDataIsEnabled(ggl::FlyoverNightDim::QuadPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverNightDim::QuadPipelineSetup::~QuadPipelineSetup(ggl::FlyoverNightDim::QuadPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::NullARWalkingLabelsStateDelegate::arBackgroundTexture(md::NullARWalkingLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::isTransitNodeAlongSelectedLine(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::isRectInActiveRegion()
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::isPointInActiveRegion()
{
  return 0;
}

void md::NullStandardLabelsStateDelegate::resourcesAtMercatorPoint(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t md::NullStandardLabelsStateDelegate::trafficTilePool(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::customFeatureSupport(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::externalMeshModerator(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::externalObjectsModerator(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullStandardLabelsStateDelegate::transitSupport(md::NullStandardLabelsStateDelegate *this)
{
  return 0;
}

void md::NullTransitLabelsStateDelegate::findColorForTransitLine(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
}

void md::NullTransitLabelsStateDelegate::baseTransitLineColor(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::NullNavTrafficLabelsStateDelegate::externalTrafficIncidentFeatures(md::NullNavTrafficLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavTrafficLabelsStateDelegate::areRouteTrafficFeaturesActive(md::NullNavTrafficLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::externalRouteFeatures(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::externalRouteWaypointFeatures(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::routeAnnotationFeatures(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::computeRoutePositionForPOI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void md::NullNavLabelsStateDelegate::resolveRouteLegWhen(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::NullNavLabelsStateDelegate::routeSupport(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

double md::NullNavLabelsStateDelegate::routeUserOffsetInMeters(md::NullNavLabelsStateDelegate *this)
{
  return 0.0;
}

uint64_t md::NullNavLabelsStateDelegate::routeUserOffset(md::NullNavLabelsStateDelegate *this)
{
  return (uint64_t)this + 8;
}

uint64_t md::NullNavLabelsStateDelegate::isNavCameraDetached(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::currentRouteLeg(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

double md::NullNavLabelsStateDelegate::currentRoadSignOffset(md::NullNavLabelsStateDelegate *this)
{
  return 0.0;
}

uint64_t md::NullNavLabelsStateDelegate::isNavApplicationStateActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isNavHighZoomActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isEtaActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::isNavActive(md::NullNavLabelsStateDelegate *this)
{
  return 0;
}

uint64_t md::NullNavLabelsStateDelegate::navMode(md::NullNavLabelsStateDelegate *this)
{
  return 1;
}

void md::LabelsState::~LabelsState(md::LabelsState *this)
{
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x81C40B8603338);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x81C40B8603338);
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    MEMORY[0x1A6239270](v4, 0x81C40B8603338);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    MEMORY[0x1A6239270](v5, 0x81C40B8603338);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x81C40B8603338);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1081C40FC6463CFLL);
  }
  uint64_t v8 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v8, *((void *)this + 2) - v8);
  }
}

void *md::PolygonViewConstantsFrameCache::pop(md::PolygonViewConstantsFrameCache *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v4 = *(void **)this;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v2 == ((uint64_t)v3 - *(void *)this) >> 4)
  {
    unint64_t v5 = v2 + 10;
    if (v2 + 10 > (unint64_t)((uint64_t)(*((void *)this + 2) - (void)v4) >> 4))
    {
      if (v5 >> 60) {
LABEL_40:
      }
        abort();
      uint64_t v6 = 16 * v5;
      uint64_t v7 = (char *)operator new(16 * v5);
      uint64_t v8 = &v7[16 * v2];
      long long v9 = &v7[v6];
      if (v3 == v4)
      {
        *(void *)this = v8;
        *((void *)this + 1) = v8;
        *((void *)this + 2) = v9;
      }
      else
      {
        char v10 = &v7[16 * v2];
        do
        {
          long long v11 = *((_OWORD *)v3 - 1);
          v3 -= 2;
          *((_OWORD *)v10 - 1) = v11;
          v10 -= 16;
          void *v3 = 0;
          v3[1] = 0;
        }
        while (v3 != v4);
        uint64_t v3 = *(void **)this;
        int8x16_t v12 = (void *)*((void *)this + 1);
        *(void *)this = v10;
        *((void *)this + 1) = v8;
        for (*((void *)this + 2) = v9; v12 != v3; v12 -= 2)
        {
          int16x8_t v13 = (std::__shared_weak_count *)*(v12 - 1);
          if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      if (v3) {
        operator delete(v3);
      }
    }
    for (uint64_t i = 0; i != 10; ++i)
    {
      int8x16_t v16 = operator new(0xE8uLL);
      v16[1] = 0;
      v16[2] = 0;
      void *v16 = &unk_1EF586DB8;
      uint64_t v17 = ggl::BufferData::BufferData((uint64_t)(v16 + 3), qword_1E9552208, 2, 1, 6, 1);
      v16[28] = ggl::Tile::View::reflection(void)::reflection;
      v16[3] = &unk_1EF55E258;
      int8x16_t v19 = (uint64_t *)*((void *)this + 1);
      unint64_t v18 = *((void *)this + 2);
      if ((unint64_t)v19 < v18)
      {
        *int8x16_t v19 = v17;
        v19[1] = (uint64_t)v16;
        int8x16_t v15 = v19 + 2;
      }
      else
      {
        int32x4_t v20 = *(uint64_t **)this;
        uint64_t v21 = ((uint64_t)v19 - *(void *)this) >> 4;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60) {
          goto LABEL_40;
        }
        uint64_t v23 = v18 - (void)v20;
        if (v23 >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        *(void *)&long long v25 = v17;
        *((void *)&v25 + 1) = v16;
        long long v34 = v25;
        uint64_t v26 = 16 * v24;
        int8x16_t v27 = (char *)operator new(16 * v24);
        int8x16_t v28 = &v27[16 * v21];
        int8x16_t v29 = &v27[v26];
        *(_OWORD *)int8x16_t v28 = v34;
        int8x16_t v15 = v28 + 16;
        if (v19 == v20)
        {
          *(void *)this = v28;
          *((void *)this + 1) = v15;
          *((void *)this + 2) = v29;
        }
        else
        {
          do
          {
            long long v30 = *((_OWORD *)v19 - 1);
            v19 -= 2;
            *((_OWORD *)v28 - 1) = v30;
            v28 -= 16;
            *int8x16_t v19 = 0;
            v19[1] = 0;
          }
          while (v19 != v20);
          int8x16_t v19 = *(uint64_t **)this;
          int8x16_t v31 = (uint64_t *)*((void *)this + 1);
          *(void *)this = v28;
          *((void *)this + 1) = v15;
          *((void *)this + 2) = v29;
          while (v31 != v19)
          {
            int16x8_t v32 = (std::__shared_weak_count *)*(v31 - 1);
            if (v32)
            {
              if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v31 -= 2;
          }
        }
        if (v19) {
          operator delete(v19);
        }
      }
      *((void *)this + 1) = v15;
    }
    uint64_t v2 = *((void *)this + 3);
    uint64_t v4 = *(void **)this;
  }
  *((void *)this + 3) = v2 + 1;
  return &v4[2 * v2];
}

void md::LabelNavTrafficSupport::~LabelNavTrafficSupport(md::LabelNavTrafficSupport *this)
{
  md::LabelNavTrafficSupport::~LabelNavTrafficSupport(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void (***v10)(void, void);
  void (***v11)(void, void);
  uint64_t v12;
  void (***v13)(void, void);
  void (***v14)(void, void);
  void (***v15)(void, void);
  void (**v16)(void, uint64_t);
  BOOL v17;
  std::__shared_weak_count *v18;

  *(void *)this = &unk_1EF541648;
  *(void *)(*(void *)(*((void *)this + 1) + 168) + 48) = *(void *)(*(void *)(*((void *)this + 1) + 168)
                                                                             + 88);
  *((void *)this + 20) = &unk_1EF559E38;

  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 14);
    uint64_t v4 = *((void *)this + 13);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 13);
    }
    *((void *)this + 14) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), v4, *((void *)this + 15) - v4);
  }
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = *((void *)this + 9);
    if (v7 != v6)
    {
      do
      {
        long long v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v8);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = *((void *)this + 9);
    }
    *((void *)this + 10) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), v8, *((void *)this + 11) - v8);
  }
  char v10 = (void (***)(void, void))*((void *)this + 5);
  if (v10)
  {
    long long v11 = (void (***)(void, void))*((void *)this + 6);
    int8x16_t v12 = *((void *)this + 5);
    if (v11 != v10)
    {
      int16x8_t v13 = v11 - 3;
      int32x4_t v14 = v11 - 3;
      int8x16_t v15 = v11 - 3;
      do
      {
        int8x16_t v16 = *v15;
        v15 -= 3;
        (*v16)(v14, v12);
        v13 -= 3;
        uint64_t v17 = v14 == v10;
        int32x4_t v14 = v15;
      }
      while (!v17);
      int8x16_t v12 = *((void *)this + 5);
    }
    *((void *)this + 6) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v12, *((void *)this + 7) - v12);
  }

  unint64_t v18 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void geo::_retain_ptr<NSArray<VKTrafficIncidentFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E38;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSArray<VKTrafficIncidentFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E38;

  return a1;
}

uint64_t md::LabelNavTrafficSupport::areRouteTrafficFeaturesActive(md::LabelNavTrafficSupport *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t std::__construct_at[abi:nn180100]<md::TrafficIncidentLabelFeature,VKTrafficIncidentFeature * {__strong}&,std::shared_ptr<md::RouteAnnotationDedupingGroup> &,md::TrafficIncidentLabelFeature*>(uint64_t a1, void *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v7[0] = a3;
  v7[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature(a1, a2, v7);
  if (a4 && !atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
  }
  return a1;
}

void sub_1A1E115A0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL VKTrafficIncidentFeatureSetLessThan::operator()(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = [v3 uniqueString];
  if (v5
    && ([v4 uniqueString],
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        v5,
        v6))
  {
    uint64_t v7 = [v3 uniqueString];
    uint64_t v8 = [v4 uniqueString];
    uint64_t v9 = [v7 compare:v8];

    if (!v9)
    {
      int v10 = [v4 isOnSelectedRoute];
      int v11 = [v3 isOnSelectedRoute];
      if ((v11 & (v10 ^ 1)) != 0) {
        uint64_t v9 = -1;
      }
      else {
        uint64_t v9 = v10 & (v11 ^ 1u);
      }
      if (!v9)
      {
        uint64_t v12 = [v3 routeRelevance];
        uint64_t v13 = [v4 routeRelevance];
        if (v12 < v13) {
          uint64_t v9 = -1;
        }
        else {
          uint64_t v9 = v12 > v13;
        }
      }
    }
  }
  else
  {
    int32x4_t v14 = [v3 uniqueString];
    int8x16_t v15 = [v4 uniqueString];
    if (v14 < v15) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = v14 > v15;
    }
  }
  return v9 == -1;
}

void sub_1A1E11730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void sub_1A1E129E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  id v3 = (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  uint64_t v4 = [v3 routeOffset];
  BOOL v5 = (*(void (**)(void))(**(void **)a2 + 200))();
  uint64_t v6 = [v5 routeOffset];
  BOOL v8 = *((float *)&v4 + 1) < *((float *)&v6 + 1) && v4 == v6;
  uint64_t v9 = v4 < v6 || v8;

  return v9;
}

void sub_1A1E12CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  char v6 = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a2, (uint64_t)a1);
  uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a3, (uint64_t)a2);
  if (v6)
  {
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
      uint64_t v9 = a3 + 1;
      uint64_t v10 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      uint64_t v15 = a1[1];
      a1[1] = a2[1];
      a2[1] = v15;
      uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a3, (uint64_t)a2);
      if (!result) {
        return result;
      }
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v9 = a3 + 1;
      uint64_t v10 = a2 + 1;
    }
    long long v13 = v9;
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    long long v13 = a2 + 1;
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a2, (uint64_t)a1);
    if (result)
    {
      uint64_t v14 = *a1;
      *a1 = *a2;
      uint64_t v10 = a1 + 1;
      *a2 = v14;
LABEL_10:
      uint64_t v17 = *v10;
      *uint64_t v10 = *v13;
      *long long v13 = v17;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a2, a3);
  uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a4, (uint64_t)a3);
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a3, (uint64_t)a2);
    if (result)
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a2, (uint64_t)a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a2, a3, a4);
  uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a5, (uint64_t)a4);
  if (result)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a4, (uint64_t)a3);
    if (result)
    {
      uint64_t v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a3, (uint64_t)a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        uint64_t result = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*a2, (uint64_t)a1);
        if (result)
        {
          uint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*(a2 - 2), (uint64_t)a1))return 1; {
      uint64_t v6 = *a1;
      }
      *a1 = *(a2 - 2);
      *(a2 - 2) = v6;
      uint64_t v7 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v7;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v8 = (uint64_t)(a1 + 4);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0 &,std::shared_ptr<md::TrafficIncidentLabelFeature> *>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(*v9, v8))
    {
      long long v19 = *(_OWORD *)v9;
      *uint64_t v9 = 0;
      v9[1] = 0;
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = (char *)a1 + v12;
        long long v14 = *(_OWORD *)((char *)a1 + v12 + 32);
        *((void *)v13 + 4) = 0;
        *((void *)v13 + 5) = 0;
        uint64_t v15 = *(std::__shared_weak_count **)((char *)a1 + v12 + 56);
        *((_OWORD *)v13 + 3) = v14;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v12 == -32) {
          break;
        }
        char v16 = md::LabelNavTrafficSupport::setExternalTrafficFeatures(NSArray *,BOOL)::$_0::operator()(v19, (uint64_t)a1 + v12 + 16);
        v12 -= 16;
        if ((v16 & 1) == 0)
        {
          uint64_t v17 = (uint64_t)a1 + v12 + 48;
          goto LABEL_17;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_17:
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 8);
      *(_OWORD *)uint64_t v17 = v19;
      if (v18)
      {
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = (uint64_t)v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1A1E1328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void geo::_retain_ptr<VKTrafficIncidentFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559B98;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKTrafficIncidentFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559B98;

  return a1;
}

void md::OverlayDataRequester::requestDataKeys(md::OverlayDataRequester *this, const gdc::SelectionContext *a2)
{
  uint64_t v2 = (gdc::LayerDataCollector *)*((void *)a2 + 1);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  id v3 = *(uint64_t **)(*((void *)a2 + 8) + 24);
  if (v3)
  {
    uint64_t v6 = 0;
    do
    {
      char v7 = *((unsigned char *)v3 + 17);
      int v8 = (*((_DWORD *)v3 + 5) % (1 << v7) + (1 << v7)) % (1 << v7);
      int v9 = *((_DWORD *)v3 + 6) % (1 << v7) + (1 << v7);
      v17[0] = *((unsigned char *)v3 + 16);
      v17[1] = v7;
      int v18 = v8;
      int v19 = v9 % (1 << v7);
      uint64_t v21 = v6;
      if (*((float *)this + 6) <= 1.9) {
        unsigned int v10 = 512;
      }
      else {
        unsigned int v10 = 256;
      }
      md::TileAdjustmentHelpers::adjustTileForSize(**((_DWORD **)a2 + 8), v10, (uint64_t)v17, &v20);
      uint64_t v6 = v20;
      int v11 = v21;
      for (uint64_t i = v20; i != v11; i += 24)
      {
        gdc::Tiled::mapDataKeyFromTile(v13, 0, i, *((_WORD *)this + 11), *((_DWORD *)this + 4));
        gdc::LayerDataCollector::addDataKey(v2, (const gdc::LayerDataRequestKey *)v13, (const QuadTile *)(v3 + 2));
        if (v16) {
          char v16 = 0;
        }
        if (v14 != v15) {
          free(v14);
        }
      }
      id v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v6) {
      operator delete(v6);
    }
  }
}

void sub_1A1E134E0(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)(v1 - 112);
  if (v3) {
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void md::OverlayDataRequester::~OverlayDataRequester(md::OverlayDataRequester *this)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](a1 + 112);
  return a1;
}

void ggl::BufferLoadItem::~BufferLoadItem(ggl::BufferLoadItem *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (char *)*((void *)this + 7);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

void *std::function<void ()(ggl::BufferLoadItem const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

uint64_t std::__split_buffer<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 64;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF575900;
  long long v3 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v3;
  uint64_t v4 = *(void *)(result + 56);
  if (v4)
  {
    if (v4 == result + 32)
    {
      *(void *)(a2 + 56) = a2 + 32;
      BOOL v5 = *(uint64_t (**)(void))(**(void **)(result + 56) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 16))(*(void *)(result + 56));
      *(void *)(a2 + 56) = result;
    }
  }
  else
  {
    *(void *)(a2 + 56) = 0;
  }
  return result;
}

void std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::~__func(void *a1)
{
  *a1 = &unk_1EF575900;
  uint64_t v1 = a1 + 4;
  uint64_t v2 = (void *)a1[7];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelGGLResourceCopier::uploadBuffer(geo::handle<mre::Buffer>,mre::BufferUploadDescriptor &&)::$_0,std::allocator<mre::BufferUploadDescriptor &&>,void ()(ggl::BufferLoadItem const&)>::~__func(void *a1)
{
  *a1 = &unk_1EF575900;
  uint64_t v2 = a1 + 4;
  long long v3 = (void *)a1[7];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void md::LabelGGLResourceCopier::~LabelGGLResourceCopier(std::mutex *this)
{
  md::LabelGGLResourceCopier::~LabelGGLResourceCopier(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  unint64_t v3;

  this->__m_.__sig = (uint64_t)&unk_1EF541600;
  if (this->__m_.__opaque[48])
  {
    uint64_t v2 = *(void *)&this->__m_.__opaque[32];
    long long v3 = *(void *)&this->__m_.__opaque[40];
    std::mutex::lock((std::mutex *)v2);
    std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v2 + 72), v3);
    std::mutex::unlock((std::mutex *)v2);
    this->__m_.__opaque[40] = 0;
    this->__m_.__opaque[48] = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)&this[2].__m_.__opaque[24]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)this[2].__m_.__opaque);
  std::mutex::~mutex(this + 1);
}

void sub_1A1E13C44(_Unwind_Exception *a1)
{
  long long v3 = v2;
  std::mutex::unlock(v3);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 160));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 136));
  std::mutex::~mutex((std::mutex *)(v1 + 64));
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      char v7 = *v6;
      if (*v6)
      {
        uint64_t v8 = *(void *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            char v7 = (uint64_t *)*v7;
            if (!v7) {
              return;
            }
          }
        }
        do
        {
          unint64_t v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(void *)&v2 <= a2) {
                  a2 %= *(void *)&v2;
                }
              }
              else
              {
                a2 &= v8;
              }
              int v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                uint64_t v12 = v11;
                int v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2) {
                goto LABEL_39;
              }
              unint64_t v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(void *)&v2) {
                  v13 %= *(void *)&v2;
                }
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7) {
                  goto LABEL_40;
                }
                unint64_t v14 = *(void *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(void *)&v2) {
                    v14 %= *(void *)&v2;
                  }
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2) {
LABEL_40:
                }
                  *(void *)(v5 + 8 * a2) = 0;
              }
              uint64_t v15 = *v7;
              if (*v7)
              {
                unint64_t v16 = *(void *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(void *)&v2) {
                    v16 %= *(void *)&v2;
                  }
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(void *)(*a1 + 8 * v16) = v12;
                  uint64_t v15 = *v7;
                }
              }
              *uint64_t v12 = v15;
              *char v7 = 0;
              --a1[3];
              uint64_t v17 = (uint64_t *)v7[6];
              if (v17 == v7 + 3)
              {
                (*(void (**)(uint64_t *))(v7[3] + 32))(v7 + 3);
              }
              else if (v17)
              {
                (*(void (**)(uint64_t *))(*v17 + 40))(v17);
              }
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(void *)&v2) {
              v10 %= *(void *)&v2;
            }
            if (v10 != v4) {
              return;
            }
          }
          char v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void *std::function<void ()(unsigned long)>::~function(void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF575948;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelGGLResourceCopier::LabelGGLResourceCopier(md::CommandBufferLocation,gdc::ServiceLocator &)::$_0>,void ()(unsigned long)>::~__func()
{
}

uint64_t md::GridRenderLayer::layoutWithoutStyles(md::GridRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::GridRenderLayer *, const md::LayoutContext *))(*(void *)this + 16))(this, a2);
}

void std::__shared_ptr_emplace<md::GridTileRenderable>::__on_zero_shared(void *a1)
{
  a1[15] = 3131955885;
  uint64_t v2 = a1[12];
  a1[12] = 0;
  a1[13] = &off_1EF55A458;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[11];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (std::__shared_weak_count *)a1[9];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v4 = (std::__shared_weak_count *)a1[9];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  uint64_t v5 = (std::__shared_weak_count *)a1[7];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<md::GridTileRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5807C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::GridTileRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5807C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::GridBase::GridView>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::GridBase::GridView>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GridBase::GridView>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GridBase::GridView>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GridBase::GridView>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void __GEOGetVectorKitVKMapIsOpaqueStateLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "VKMapIsOpaqueState");
  uint64_t v1 = (void *)GEOGetVectorKitVKMapIsOpaqueStateLog::log;
  GEOGetVectorKitVKMapIsOpaqueStateLog::log = (uint64_t)v0;
}

uint64_t std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570F08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF570F08;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570EC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF570EC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::GridRenderLayer::~GridRenderLayer(md::GridRenderLayer *this)
{
  *(void *)this = &unk_1EF534D98;
  uint64_t v2 = (md::GridRenderResources *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    md::GridRenderResources::~GridRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  md::GridRenderResources *v2;
  void *v3;

  *(void *)this = &unk_1EF534D98;
  uint64_t v2 = (md::GridRenderResources *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    md::GridRenderResources::~GridRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void md::GridRenderResources::~GridRenderResources(md::GridRenderResources *this)
{
  geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::~MarkedLRUCache((uint64_t *)this + 34);
  *((void *)this + 19) = &off_1EF55A458;
  *((void *)this + 21) = 3131955885;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v10) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v10) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_23:
  int v11 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v12) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v12) {
      goto LABEL_29;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_29:
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

uint64_t *geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::~MarkedLRUCache(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }
  if (a1[2])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = *(void *)(*a1 + 8);
    **(void **)(v5 + 8) = v7;
    a1[2] = 0;
    if (v6 != a1)
    {
      do
      {
        uint64_t v8 = (uint64_t *)v6[1];
        uint64_t v9 = (std::__shared_weak_count *)v6[7];
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        operator delete(v6);
        uint64_t v6 = v8;
      }
      while (v8 != a1);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Grid::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Grid::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Grid::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Grid::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Grid::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::Grid::GridUVPipelineState *,std::shared_ptr<ggl::Grid::GridUVPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridUVPipelineState,ggl::Grid::GridUVPipelineState>,std::allocator<ggl::Grid::GridUVPipelineState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Grid::GridUVPipelineState *,std::shared_ptr<ggl::Grid::GridUVPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridUVPipelineState,ggl::Grid::GridUVPipelineState>,std::allocator<ggl::Grid::GridUVPipelineState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<ggl::Grid::GridPipelineState *,std::shared_ptr<ggl::Grid::GridPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridPipelineState,ggl::Grid::GridPipelineState>,std::allocator<ggl::Grid::GridPipelineState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Grid::GridPipelineState *,std::shared_ptr<ggl::Grid::GridPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridPipelineState,ggl::Grid::GridPipelineState>,std::allocator<ggl::Grid::GridPipelineState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

BOOL VKRectContainsPoint(double *a1, double *a2)
{
  if (*a1 > *a2) {
    return 0;
  }
  if (*a2 > a1[1]) {
    return 0;
  }
  double v3 = a2[1];
  return a1[2] <= v3 && v3 <= a1[3];
}

md::PolygonSection *md::PolygonSection::PolygonSection(md::PolygonSection *this, const md::PolygonSection *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF534428;
  *((void *)this + 1) = v4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      abort();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v8;
    *((void *)this + 4) = &v8[8 * (v7 >> 3)];
    size_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v8, v6, v9);
    *((void *)this + 3) = &v8[v9];
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  int v11 = (unsigned char *)*((void *)a2 + 5);
  unint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      abort();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *((void *)this + 5) = v13;
    *((void *)this + 6) = v13;
    *((void *)this + 7) = &v13[8 * (v12 >> 3)];
    size_t v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v13, v11, v14);
    *((void *)this + 6) = &v13[v14];
  }
  std::vector<BOOL>::vector((void *)this + 8, (uint64_t)a2 + 64);
  uint64_t v15 = *((void *)a2 + 13);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((void *)this + 13) = v15;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  uint64_t v17 = (unsigned char *)*((void *)a2 + 14);
  unint64_t v16 = (unsigned char *)*((void *)a2 + 15);
  int64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      abort();
    }
    int v19 = (char *)operator new(v16 - v17);
    *((void *)this + 14) = v19;
    *((void *)this + 15) = v19;
    uint64_t v20 = &v19[4 * (v18 >> 2)];
    *((void *)this + 16) = v20;
    memcpy(v19, v17, v18);
    *((void *)this + 15) = v20;
  }
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  return this;
}

void sub_1A1E14FE4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 24) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0) {
      abort();
    }
    unint64_t v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    uint64_t v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    uint64_t v7 = *(void **)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    a1[1] = v8;
    unint64_t v9 = (v8 - 1) >> 6;
    if (v8 < 0x41) {
      unint64_t v9 = 0;
    }
    v6[v9] = 0;
    int v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      size_t v14 = &v7[v8 >> 6];
      do
      {
        uint64_t v15 = 1 << v11;
        if ((*v7 >> v13)) {
          uint64_t v16 = *v6 | v15;
        }
        else {
          uint64_t v16 = *v6 & ~v15;
        }
        *uint64_t v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63) {
          int v13 = 0;
        }
        v6 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
        int v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void md::PolygonSection::~PolygonSection(md::PolygonSection *this)
{
  *(void *)this = &unk_1EF534428;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_1EF534428;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

uint64_t *md::VenueFloorGroup::VenueFloorGroup(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = a4;
  unint64_t v9 = (uint64_t *)a1;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 60) = a6;
  *(void *)(a1 + 64) = a5;
  FeatureAttributeSet = md::createFeatureAttributeSet((gss::Allocator *)v87, (uint64_t *)(a4 + 24));
  uint64_t v11 = *a3;
  long long v96 = 0uLL;
  long long v97 = 0;
  uint64_t v98 = (long long *)gss::Allocator::instance(FeatureAttributeSet);
  uint64_t v84 = v9;
  int v12 = (void *)(*(uint64_t (**)(long long *, uint64_t, uint64_t))(*(void *)v98 + 16))(v98, 8, 4);
  *(void *)&long long v96 = v12;
  long long v97 = (char *)(v12 + 1);
  if (v12) {
    *int v12 = 65604;
  }
  *((void *)&v96 + 1) = v12 + 1;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)v87, (unsigned int **)&v96, (unsigned int **)&v90);
  *(void *)((char *)&__p + 7) = 0;
  *(void *)&long long __p = 0;
  HIBYTE(__p) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v89, v11, (gss::FeatureAttributeSet *)&v90, (gss::QueryOverrides *)&__p);
  long long v14 = v89;
  uint64_t v15 = (std::__shared_weak_count *)v9[6];
  long long v89 = 0uLL;
  *(_OWORD *)(v9 + 5) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if ((void)v90)
  {
    *((void *)&v90 + 1) = v90;
    int v13 = (gss::Allocator *)(*(uint64_t (**)(void *, void, char *))(*(void *)v92 + 40))(v92, v90, (char *)v91 - v90);
  }
  if ((void)v96)
  {
    *((void *)&v96 + 1) = v96;
    int v13 = (gss::Allocator *)(*(uint64_t (**)(long long *, void, char *))(*(void *)v98 + 40))(v98, v96, &v97[-v96]);
  }
  uint64_t v17 = *a3;
  long long v96 = 0uLL;
  long long v97 = 0;
  uint64_t v98 = (long long *)gss::Allocator::instance(v13);
  int64_t v18 = (void *)(*(uint64_t (**)(long long *, uint64_t, uint64_t))(*(void *)v98 + 16))(v98, 8, 4);
  *(void *)&long long v96 = v18;
  long long v97 = (char *)(v18 + 1);
  if (v18) {
    *int64_t v18 = 0x100010044;
  }
  *((void *)&v96 + 1) = v18 + 1;
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)v87, (unsigned int **)&v96, (unsigned int **)&v90);
  *(void *)((char *)&__p + 7) = 0;
  *(void *)&long long __p = 0;
  HIBYTE(__p) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v89, v17, (gss::FeatureAttributeSet *)&v90, (gss::QueryOverrides *)&__p);
  long long v19 = v89;
  uint64_t v20 = (std::__shared_weak_count *)v9[4];
  long long v89 = 0uLL;
  *(_OWORD *)(v9 + 3) = v19;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if ((void)v90)
  {
    *((void *)&v90 + 1) = v90;
    (*(void (**)(void *, void, char *))(*(void *)v92 + 40))(v92, v90, (char *)v91 - v90);
  }
  uint64_t v82 = a2;
  if ((void)v96)
  {
    *((void *)&v96 + 1) = v96;
    (*(void (**)(long long *, void, char *))(*(void *)v98 + 40))(v98, v96, &v97[-v96]);
  }
  uint64_t v22 = *(unsigned int *)(v6 + 100);
  uint64_t v86 = 0;
  long long __p = 0uLL;
  if (!v22) {
    goto LABEL_89;
  }
  uint64_t v23 = (char *)operator new(144 * v22);
  unint64_t v24 = 0;
  *(void *)&long long __p = v23;
  *((void *)&__p + 1) = v23;
  uint64_t v86 = &v23[144 * v22];
  do
  {
    if (v23 < v86)
    {
      md::PolygonSection::PolygonSection((uint64_t)v23, (void *)v6, v24);
      v23 += 144;
      goto LABEL_28;
    }
    unint64_t v25 = 0x8E38E38E38E38E39 * ((uint64_t)&v23[-__p] >> 4);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0x1C71C71C71C71C7) {
      abort();
    }
    if (0x1C71C71C71C71C72 * ((uint64_t)&v86[-__p] >> 4) > v26) {
      unint64_t v26 = 0x1C71C71C71C71C72 * ((uint64_t)&v86[-__p] >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)&v86[-__p] >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v27 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 > 0x1C71C71C71C71C7) {
LABEL_114:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v28 = (char *)operator new(144 * v27);
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v29 = (uint64_t)&v28[144 * v25];
    uint64_t v30 = v6;
    md::PolygonSection::PolygonSection(v29, (void *)v6, v24);
    uint64_t v31 = &v28[144 * v27];
    uint64_t v23 = (char *)(v29 + 144);
    int16x8_t v32 = (const md::PolygonSection *)*((void *)&__p + 1);
    uint64_t v33 = (const md::PolygonSection *)__p;
    if (*((void *)&__p + 1) == (void)__p)
    {
      *(void *)&long long __p = &v28[144 * v25];
      uint64_t v86 = v31;
    }
    else
    {
      long long v34 = (md::PolygonSection *)&v28[144 * v25];
      do
      {
        int16x8_t v32 = (const md::PolygonSection *)((char *)v32 - 144);
        long long v34 = md::PolygonSection::PolygonSection((md::PolygonSection *)((char *)v34 - 144), v32);
      }
      while (v32 != v33);
      int16x8_t v35 = (const md::PolygonSection *)*((void *)&__p + 1);
      int16x8_t v32 = (const md::PolygonSection *)__p;
      *(void *)&long long __p = v34;
      *((void *)&__p + 1) = v29 + 144;
      uint64_t v86 = v31;
      if (v35 != v32)
      {
        uint64_t v36 = (char *)v35 - 144;
        int8x16_t v37 = (const md::PolygonSection *)((char *)v35 - 144);
        uint64_t v38 = (const md::PolygonSection *)((char *)v35 - 144);
        unint64_t v9 = v84;
        do
        {
          int8x16_t v39 = *(void (***)(const md::PolygonSection *))v38;
          uint64_t v38 = (const md::PolygonSection *)((char *)v38 - 144);
          (*v39)(v37);
          v36 -= 144;
          BOOL v40 = v37 == v32;
          int8x16_t v37 = v38;
        }
        while (!v40);
        goto LABEL_51;
      }
    }
    unint64_t v9 = v84;
LABEL_51:
    if (v32) {
      operator delete(v32);
    }
    uint64_t v6 = v30;
LABEL_28:
    *((void *)&__p + 1) = v23;
    ++v24;
  }
  while (v24 != v22);
  long long v41 = (uint64_t *)__p;
  if ((char *)__p == v23)
  {
LABEL_89:
    *((_DWORD *)v9 + 14) = 0;
    goto LABEL_90;
  }
  int v42 = 0;
  uint64_t v43 = __p;
  do
  {
    v42 |= ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(v43 + 88), *(float **)(v43 + 8), 1);
    v43 += 144;
  }
  while ((char *)v43 != v23);
  *((_DWORD *)v9 + 14) = v42;
  while (v41 != (uint64_t *)v23)
  {
    uint64_t v44 = v41[11];
    int8x16_t v45 = operator new(0xF8uLL);
    v45[1] = 0;
    v45[2] = 0;
    *int8x16_t v45 = &unk_1EF584620;
    uint64_t v46 = ggl::BufferData::BufferData((uint64_t)(v45 + 3), 8, 0, 0, 1, v44);
    v45[29] = "Venue footprint vertex data";
    v45[30] = &ggl::PolygonBase::compressedVboReflection;
    v45[3] = &unk_1EF55C1C8;
    v45[28] = &unk_1EF55C1E8;
    *(void *)&long long v90 = v46;
    *((void *)&v90 + 1) = v45;
    uint64_t v47 = operator new(0xF8uLL);
    v47[1] = 0;
    void v47[2] = 0;
    *uint64_t v47 = &unk_1EF583D28;
    uint64_t v48 = ggl::BufferData::BufferData((uint64_t)(v47 + 3), 2, 1, 0, 1, 3 * v44 - 6);
    *((_DWORD *)v47 + 60) = 0;
    v47[3] = &unk_1EF55B630;
    v47[4] = 2;
    v47[28] = &unk_1EF55B650;
    v47[29] = "Venue footprint index data";
    *(void *)&long long v96 = v48;
    *((void *)&v96 + 1) = v47;
    unint64_t v50 = v9[1];
    unint64_t v49 = v9[2];
    if (v50 >= v49)
    {
      unint64_t v52 = 0x8E38E38E38E38E39 * ((uint64_t)(v50 - *v9) >> 4);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0x1C71C71C71C71C7) {
        abort();
      }
      unint64_t v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - *v9) >> 4);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0xE38E38E38E38E3) {
        unint64_t v55 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        if (v55 > 0x1C71C71C71C71C7) {
          goto LABEL_114;
        }
        int32x4_t v56 = (char *)operator new(144 * v55);
      }
      else
      {
        int32x4_t v56 = 0;
      }
      uint64_t v57 = (uint64_t)&v56[144 * v52];
      std::construct_at[abi:nn180100]<ggl::PolygonBase::CompressedMeshMesh,char const(&)[21],std::shared_ptr<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>,std::shared_ptr<ggl::IndexDataTyped<unsigned short>>,ggl::PolygonBase::CompressedMeshMesh*>(v57, &v90, &v96);
      int16x8_t v58 = &v56[144 * v55];
      uint64_t v51 = v57 + 144;
      uint64_t v60 = (char *)*v84;
      int32x4_t v59 = (char *)v84[1];
      if (v59 == (char *)*v84)
      {
        *uint64_t v84 = v57;
        v84[1] = v51;
        v84[2] = (uint64_t)v58;
        unint64_t v9 = v84;
      }
      else
      {
        uint64_t v83 = v58;
        uint64_t v61 = 0;
        do
        {
          *(void *)ggl::Mesh::Mesh(v57 + v61 - 144, (uint64_t)&v59[v61 - 144]) = off_1EF55A770;
          *(void *)(v57 + v61 - 128) = &unk_1EF55A790;
          v61 -= 144;
        }
        while (&v59[v61] != v60);
        unint64_t v9 = v84;
        int32x4_t v59 = (char *)*v84;
        int8x16_t v62 = (char *)v84[1];
        *uint64_t v84 = v57 + v61;
        v84[1] = v51;
        v84[2] = (uint64_t)v83;
        if (v62 != v59)
        {
          int32x4_t v63 = v62 - 144;
          long long v64 = v62 - 144;
          int8x16_t v65 = (void (***)(char *))(v62 - 144);
          do
          {
            int8x16_t v66 = *v65;
            v65 -= 18;
            (*v66)(v64);
            v63 -= 144;
            BOOL v40 = v64 == v59;
            long long v64 = (char *)v65;
          }
          while (!v40);
        }
      }
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      std::construct_at[abi:nn180100]<ggl::PolygonBase::CompressedMeshMesh,char const(&)[21],std::shared_ptr<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>,std::shared_ptr<ggl::IndexDataTyped<unsigned short>>,ggl::PolygonBase::CompressedMeshMesh*>(v9[1], &v90, &v96);
      uint64_t v51 = v50 + 144;
      v9[1] = v50 + 144;
    }
    v9[1] = v51;
    uint64_t v67 = (std::__shared_weak_count *)*((void *)&v96 + 1);
    if (*((void *)&v96 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v96 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      uint64_t v68 = (std::__shared_weak_count *)*((void *)&v90 + 1);
      if (*((void *)&v90 + 1))
      {
LABEL_85:
        if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
    else
    {
      uint64_t v68 = (std::__shared_weak_count *)*((void *)&v90 + 1);
      if (*((void *)&v90 + 1)) {
        goto LABEL_85;
      }
    }
    v41 += 18;
  }
LABEL_90:
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v82 + 24))(&v95);
  *(void *)&long long v90 = MEMORY[0x1E4F143A8];
  *((void *)&v90 + 1) = 3221225472;
  uint64_t v91 = ___ZN2md24VenueFloorMeshGeneration19_writeFootprintDataEPN3ggl6DeviceERKNSt3__16vectorINS_14PolygonSectionENS4_9allocatorIS6_EEEERNS5_INS1_11PolygonBase18CompressedMeshMeshENS7_ISD_EEEE_block_invoke;
  uint64_t v92 = &__block_descriptor_48_e30_v16__0__ResourceAccessor_____8l;
  uint64_t v93 = v9;
  p_p = &__p;
  uint64_t v98 = 0;
  *(void *)&long long v96 = &unk_1EF56BC58;
  *((void *)&v96 + 1) = MEMORY[0x1A6239EB0](&v90);
  uint64_t v98 = &v96;
  long long v89 = 0uLL;
  (*(void (**)(uint64_t, long long *, long long *))(*(void *)v95 + 16))(v95, &v96, &v89);
  int8x16_t v69 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
  if (v98 == &v96)
  {
    (*(void (**)(long long *))(v96 + 32))(&v96);
    uint64_t v70 = v95;
    if (!v95) {
      goto LABEL_103;
    }
    goto LABEL_99;
  }
  if (v98) {
    (*(void (**)(void))(*(void *)v98 + 40))();
  }
  uint64_t v70 = v95;
  if (v95)
  {
LABEL_99:
    uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 24))(v70);
    uint64_t v72 = v95;
    uint64_t v95 = 0;
    *(void *)&long long v96 = v72;
    (*(void (**)(uint64_t, long long *))(*(void *)v71 + 48))(v71, &v96);
    uint64_t v73 = v96;
    *(void *)&long long v96 = 0;
    if (v73) {
      (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
    }
    uint64_t v74 = v95;
    uint64_t v95 = 0;
    if (v74) {
      (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
    }
  }
LABEL_103:
  uint64_t v75 = __p;
  if ((void)__p)
  {
    uint64_t v76 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      uint64_t v77 = *((void *)&__p + 1) - 144;
      uint64_t v78 = *((void *)&__p + 1) - 144;
      int8x16_t v79 = (void (***)(uint64_t))(*((void *)&__p + 1) - 144);
      do
      {
        int8x16_t v80 = *v79;
        v79 -= 18;
        (*v80)(v78);
        v77 -= 144;
        BOOL v40 = v78 == v75;
        uint64_t v78 = (uint64_t)v79;
      }
      while (!v40);
      uint64_t v76 = (void *)__p;
    }
    *((void *)&__p + 1) = v75;
    operator delete(v76);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    (*(void (**)(uint64_t, void, void))(*(void *)v88 + 40))(v88, v87[0], v87[2] - v87[0]);
  }
  return v9;
}

void sub_1A1E15FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void (***__p)(void *), void (***a15)(void *), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v29 = __p;
  if (__p)
  {
    if (a15 != __p)
    {
      uint64_t v30 = (char *)(a15 - 18);
      uint64_t v31 = a15 - 18;
      int16x8_t v32 = a15 - 18;
      do
      {
        uint64_t v33 = *v32;
        v32 -= 18;
        (*v33)(v31);
        v30 -= 144;
        BOOL v34 = v31 == __p;
        uint64_t v31 = v32;
      }
      while (!v34);
      uint64_t v29 = __p;
    }
    operator delete(v29);
    uint64_t v35 = a17;
    if (a17)
    {
LABEL_8:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a20 + 40))(a20, v35, a19 - v35);
      uint64_t v36 = (std::__shared_weak_count *)v27[6];
      if (!v36) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v35 = a17;
    if (a17) {
      goto LABEL_8;
    }
  }
  uint64_t v36 = (std::__shared_weak_count *)v27[6];
  if (!v36) {
    goto LABEL_14;
  }
LABEL_12:
  if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_14:
  int8x16_t v37 = (std::__shared_weak_count *)v27[4];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  uint64_t v38 = (char *)*v27;
  if (*v27)
  {
    int8x16_t v39 = (char *)v27[1];
    BOOL v40 = *v27;
    if (v39 != v38)
    {
      long long v41 = v39 - 144;
      int v42 = v39 - 144;
      uint64_t v43 = v39 - 144;
      do
      {
        uint64_t v44 = *(void (***)(char *))v43;
        v43 -= 144;
        (*v44)(v42);
        v41 -= 144;
        BOOL v34 = v42 == v38;
        int v42 = v43;
      }
      while (!v34);
      BOOL v40 = *v27;
    }
    v27[1] = v38;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(char *a1, long long *a2, long long *a3)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 1);
  unsigned int v4 = a1[1];
  if (v3 == v4)
  {
    int v5 = *((_DWORD *)a2 + 1);
    int v6 = *((_DWORD *)a1 + 1);
    BOOL v7 = v5 < v6;
    if (v5 == v6) {
      BOOL v7 = *((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2);
    }
    BOOL v8 = v7;
  }
  else
  {
    BOOL v8 = v3 < v4;
  }
  unsigned int v9 = *((unsigned __int8 *)a3 + 1);
  if (v9 == v3)
  {
    int v10 = *((_DWORD *)a3 + 1);
    int v11 = *((_DWORD *)a2 + 1);
    BOOL v12 = v10 < v11;
    if (v10 == v11) {
      BOOL v12 = *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2);
    }
    BOOL v13 = v12;
    if (!v8) {
      goto LABEL_15;
    }
LABEL_21:
    int v22 = *((_DWORD *)a1 + 1);
    int v21 = *((_DWORD *)a1 + 2);
    char v23 = *a1;
    if (!v13)
    {
      long long v15 = *a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v15;
      *(unsigned char *)a2 = v23;
      *((unsigned char *)a2 + 1) = v4;
      *((_DWORD *)a2 + 1) = v22;
      *((_DWORD *)a2 + 2) = v21;
      unsigned int v24 = *((unsigned __int8 *)a3 + 1);
      if (v24 == v4)
      {
        int v25 = *((_DWORD *)a3 + 1);
        if (v25 == v22)
        {
          if (*((_DWORD *)a3 + 2) >= v21) {
            return *(double *)&v15;
          }
        }
        else if (v25 >= v22)
        {
          return *(double *)&v15;
        }
      }
      else if (v24 >= v4)
      {
        return *(double *)&v15;
      }
      *(void *)&long long v15 = *(void *)((char *)a2 + 4);
      long long v28 = *a3;
      *((void *)a2 + 2) = *((void *)a3 + 2);
      *a2 = v28;
      *(unsigned char *)a3 = v23;
      *((unsigned char *)a3 + 1) = v4;
      *(void *)((char *)a3 + 4) = v15;
      return *(double *)&v15;
    }
    long long v15 = *a3;
    *((void *)a1 + 2) = *((void *)a3 + 2);
    *(_OWORD *)a1 = v15;
    *(unsigned char *)a3 = v23;
    *((unsigned char *)a3 + 1) = v4;
    *((_DWORD *)a3 + 1) = v22;
    *((_DWORD *)a3 + 2) = v21;
    return *(double *)&v15;
  }
  BOOL v13 = v9 < v3;
  if (v8) {
    goto LABEL_21;
  }
LABEL_15:
  if (!v13) {
    return *(double *)&v15;
  }
  char v14 = *(unsigned char *)a2;
  *(void *)&long long v15 = *(void *)((char *)a2 + 4);
  long long v16 = *a3;
  *((void *)a2 + 2) = *((void *)a3 + 2);
  *a2 = v16;
  *(unsigned char *)a3 = v14;
  *((unsigned char *)a3 + 1) = v3;
  *(void *)((char *)a3 + 4) = v15;
  unsigned int v17 = *((unsigned __int8 *)a2 + 1);
  unsigned int v18 = a1[1];
  if (v17 != v18)
  {
    if (v17 >= v18) {
      return *(double *)&v15;
    }
    goto LABEL_32;
  }
  int v19 = *((_DWORD *)a2 + 1);
  int v20 = *((_DWORD *)a1 + 1);
  if (v19 == v20)
  {
    if (*((_DWORD *)a2 + 2) >= *((_DWORD *)a1 + 2)) {
      return *(double *)&v15;
    }
    goto LABEL_32;
  }
  if (v19 < v20)
  {
LABEL_32:
    char v26 = *a1;
    *(void *)&long long v15 = *(void *)(a1 + 4);
    long long v27 = *a2;
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v27;
    *(unsigned char *)a2 = v26;
    *((unsigned char *)a2 + 1) = v18;
    *(void *)((char *)a2 + 4) = v15;
  }
  return *(double *)&v15;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(uint64_t a1, char *a2, char *a3, long long *a4)
{
  double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (long long *)a2, (long long *)a3);
  unsigned int v9 = *((unsigned __int8 *)a4 + 1);
  unsigned int v10 = a3[1];
  if (v9 == v10)
  {
    int v11 = *((_DWORD *)a4 + 1);
    int v12 = *((_DWORD *)a3 + 1);
    if (v11 == v12)
    {
      if (*((_DWORD *)a4 + 2) >= *((_DWORD *)a3 + 2)) {
        return result;
      }
    }
    else if (v11 >= v12)
    {
      return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  char v13 = *a3;
  double result = *(double *)(a3 + 4);
  long long v14 = *a4;
  *((void *)a3 + 2) = *((void *)a4 + 2);
  *(_OWORD *)a3 = v14;
  *(unsigned char *)a4 = v13;
  *((unsigned char *)a4 + 1) = v10;
  *(double *)((char *)a4 + 4) = result;
  unsigned int v15 = a3[1];
  unsigned int v16 = a2[1];
  if (v15 == v16)
  {
    int v17 = *((_DWORD *)a3 + 1);
    int v18 = *((_DWORD *)a2 + 1);
    if (v17 == v18)
    {
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
    }
    else if (v17 >= v18)
    {
      return result;
    }
  }
  else if (v15 >= v16)
  {
    return result;
  }
  char v19 = *a2;
  double result = *(double *)(a2 + 4);
  long long v20 = *(_OWORD *)a3;
  *((void *)a2 + 2) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v20;
  *a3 = v19;
  a3[1] = v16;
  *(double *)(a3 + 4) = result;
  unsigned int v21 = a2[1];
  unsigned int v22 = *(unsigned __int8 *)(a1 + 1);
  if (v21 == v22)
  {
    int v23 = *((_DWORD *)a2 + 1);
    int v24 = *(_DWORD *)(a1 + 4);
    if (v23 == v24)
    {
      if (*((_DWORD *)a2 + 2) >= *(_DWORD *)(a1 + 8)) {
        return result;
      }
    }
    else if (v23 >= v24)
    {
      return result;
    }
  }
  else if (v21 >= v22)
  {
    return result;
  }
  char v25 = *(unsigned char *)a1;
  double result = *(double *)(a1 + 4);
  long long v26 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v26;
  *a2 = v25;
  a2[1] = v22;
  *(double *)(a2 + 4) = result;
  return result;
}

double std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(uint64_t a1, long long *a2, long long *a3, char *a4, long long *a5)
{
  double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, (char *)a2, (char *)a3, (long long *)a4);
  unsigned int v11 = *((unsigned __int8 *)a5 + 1);
  unsigned int v12 = a4[1];
  if (v11 == v12)
  {
    int v13 = *((_DWORD *)a5 + 1);
    int v14 = *((_DWORD *)a4 + 1);
    if (v13 == v14)
    {
      if (*((_DWORD *)a5 + 2) >= *((_DWORD *)a4 + 2)) {
        return result;
      }
    }
    else if (v13 >= v14)
    {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  char v15 = *a4;
  double result = *(double *)(a4 + 4);
  long long v16 = *a5;
  *((void *)a4 + 2) = *((void *)a5 + 2);
  *(_OWORD *)a4 = v16;
  *(unsigned char *)a5 = v15;
  *((unsigned char *)a5 + 1) = v12;
  *(double *)((char *)a5 + 4) = result;
  unsigned int v17 = a4[1];
  unsigned int v18 = *((unsigned __int8 *)a3 + 1);
  if (v17 == v18)
  {
    int v19 = *((_DWORD *)a4 + 1);
    int v20 = *((_DWORD *)a3 + 1);
    if (v19 == v20)
    {
      if (*((_DWORD *)a4 + 2) >= *((_DWORD *)a3 + 2)) {
        return result;
      }
    }
    else if (v19 >= v20)
    {
      return result;
    }
  }
  else if (v17 >= v18)
  {
    return result;
  }
  char v21 = *(unsigned char *)a3;
  double result = *(double *)((char *)a3 + 4);
  long long v22 = *(_OWORD *)a4;
  *((void *)a3 + 2) = *((void *)a4 + 2);
  *a3 = v22;
  *a4 = v21;
  a4[1] = v18;
  *(double *)(a4 + 4) = result;
  unsigned int v23 = *((unsigned __int8 *)a3 + 1);
  unsigned int v24 = *((unsigned __int8 *)a2 + 1);
  if (v23 == v24)
  {
    int v25 = *((_DWORD *)a3 + 1);
    int v26 = *((_DWORD *)a2 + 1);
    if (v25 == v26)
    {
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
    }
    else if (v25 >= v26)
    {
      return result;
    }
  }
  else if (v23 >= v24)
  {
    return result;
  }
  char v27 = *(unsigned char *)a2;
  double result = *(double *)((char *)a2 + 4);
  long long v28 = *a3;
  *((void *)a2 + 2) = *((void *)a3 + 2);
  *a2 = v28;
  *(unsigned char *)a3 = v27;
  *((unsigned char *)a3 + 1) = v24;
  *(double *)((char *)a3 + 4) = result;
  unsigned int v29 = *((unsigned __int8 *)a2 + 1);
  unsigned int v30 = *(unsigned __int8 *)(a1 + 1);
  if (v29 == v30)
  {
    int v31 = *((_DWORD *)a2 + 1);
    int v32 = *(_DWORD *)(a1 + 4);
    if (v31 == v32)
    {
      if (*((_DWORD *)a2 + 2) >= *(_DWORD *)(a1 + 8)) {
        return result;
      }
    }
    else if (v31 >= v32)
    {
      return result;
    }
  }
  else if (v29 >= v30)
  {
    return result;
  }
  char v33 = *(unsigned char *)a1;
  double result = *(double *)(a1 + 4);
  long long v34 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v34;
  *(unsigned char *)a2 = v33;
  *((unsigned char *)a2 + 1) = v30;
  *(double *)((char *)a2 + 4) = result;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(unsigned __int8 *)(a2 - 23);
      unsigned int v7 = *(unsigned __int8 *)(a1 + 1);
      if (v6 == v7)
      {
        int v8 = *(_DWORD *)(a2 - 20);
        int v9 = *(_DWORD *)(a1 + 4);
        if (v8 == v9)
        {
          if (*(_DWORD *)(a2 - 16) >= *(_DWORD *)(a1 + 8)) {
            return result;
          }
        }
        else if (v8 >= v9)
        {
          return result;
        }
      }
      else if (v6 >= v7)
      {
        return result;
      }
      char v26 = *(unsigned char *)a1;
      uint64_t v27 = *(void *)(a1 + 4);
      long long v28 = *(_OWORD *)(a2 - 24);
      *(void *)(a1 + 16) = *(void *)(a2 - 8);
      *(_OWORD *)a1 = v28;
      *(unsigned char *)(a2 - 24) = v26;
      *(unsigned char *)(a2 - 23) = v7;
      *(void *)(a2 - 20) = v27;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, (char *)(a1 + 24), (char *)(a1 + 48), (long long *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), (char *)(a1 + 72), (long long *)(a2 - 24));
      return 1;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (2)
  {
    unsigned int v15 = *(unsigned __int8 *)(v11 + 1);
    unsigned int v16 = *(unsigned __int8 *)(v10 + 1);
    if (v15 == v16)
    {
      int v17 = *(_DWORD *)(v11 + 4);
      int v18 = *(_DWORD *)(v10 + 4);
      if (v17 == v18)
      {
        if (*(_DWORD *)(v11 + 8) >= *(_DWORD *)(v10 + 8)) {
          goto LABEL_10;
        }
      }
      else if (v17 >= v18)
      {
        goto LABEL_10;
      }
    }
    else if (v15 >= v16)
    {
      goto LABEL_10;
    }
    char v19 = *(unsigned char *)v11;
    uint64_t v20 = *(void *)(v11 + 4);
    for (uint64_t i = v12; ; i -= 24)
    {
      uint64_t v22 = a1 + i;
      *(_OWORD *)(v22 + 72) = *(_OWORD *)(a1 + i + 48);
      *(void *)(v22 + 88) = *(void *)(a1 + i + 64);
      if (i == -48)
      {
        uint64_t v14 = a1;
        goto LABEL_9;
      }
      unsigned int v23 = *(unsigned __int8 *)(v22 + 25);
      if (v15 == v23) {
        break;
      }
      if (v15 >= v23) {
        goto LABEL_27;
      }
LABEL_21:
      ;
    }
    int v24 = *(_DWORD *)(a1 + i + 28);
    BOOL v25 = (int)v20 < v24;
    if (v20 == v24) {
      BOOL v25 = SHIDWORD(v20) < *(_DWORD *)(a1 + i + 32);
    }
    if (v25) {
      goto LABEL_21;
    }
LABEL_27:
    uint64_t v14 = a1 + i + 48;
LABEL_9:
    *(unsigned char *)uint64_t v14 = v19;
    *(unsigned char *)(v14 + 1) = v15;
    *(_WORD *)(v14 + 2) = v29;
    *(void *)(v14 + 4) = v20;
    *(void *)(v14 + 12) = v30;
    *(_DWORD *)(v14 + 20) = v31;
    if (++v13 == 8) {
      return v11 + 24 == a2;
    }
LABEL_10:
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 != a2) {
      continue;
    }
    return 1;
  }
}

void md::InjectedFeaturesDataRequester::~InjectedFeaturesDataRequester(md::InjectedFeaturesDataRequester *this)
{
}

void md::realistic::RouteRenderLayer::layout(md::realistic::RouteRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  uint64_t v235 = *(void *)(*((void *)this + 5) + 24);
  v242[0] = *(void *)(*((void *)a2 + 92) + 8);
  uint64_t v4 = v242[0];
  float32x4_t v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 376)), *(float64x2_t *)(v4 + 392));
  float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 408)), *(float64x2_t *)(v4 + 424));
  float32x4_t v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 440)), *(float64x2_t *)(v4 + 456));
  float32x4_t v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v242[0] + 472)), *(float64x2_t *)(v242[0] + 488));
  int v9 = (void *)*((void *)this + 23);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = v9[1];
  uint64_t v12 = (float32x4_t *)v9[9];
  *uint64_t v12 = v5;
  v12[1] = v6;
  v12[2] = v7;
  v12[3] = v8;
  if (v9[8] > v11) {
    unint64_t v11 = v9[8];
  }
  v9[7] = 0;
  v9[8] = v11;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v13 = *((void *)this + 37);
  uint64_t v14 = *((void *)this + 38);
  if (v13 == v14) {
    return;
  }
  unsigned int v15 = *(unsigned __int8 **)(*((void *)this + 5) + 144);
  unsigned int v16 = v15[8];
  if (v16 >= v15[9])
  {
    LOBYTE(v16) = 1;
    v15[8] = 1;
    v15[9] = v15[10];
  }
  v15[8] = v16 + 1;
  *(unsigned char *)(v242[0] + 1289) = v16;
  do
  {
    int v17 = *(std::__shared_weak_count **)(v13 + 8);
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)(*(void *)(v13 + 16) + 28) = 1;
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(v13 + 16) + 28) = 1;
    }
    v13 += 24;
  }
  while (v13 != v14);
  if (*((unsigned char *)this + 330))
  {
    LOBYTE(v18) = 1;
LABEL_21:
    int v21 = v15[8];
    if (v21 + v18 > v15[9])
    {
      LOBYTE(v21) = 1;
      v15[8] = 1;
      v15[9] = v15[10];
    }
    v15[8] = v21 + v18;
    goto LABEL_24;
  }
  uint64_t v20 = *((void *)this + 37);
  uint64_t v19 = *((void *)this + 38);
  if (v19 != v20)
  {
    unsigned int v18 = 86 * ((v19 - v20) >> 3);
    goto LABEL_21;
  }
  LOBYTE(v21) = 0;
LABEL_24:
  *(unsigned char *)(v242[0] + 1288) = v21;
  *(unsigned char *)(*((void *)this + 15) + 55) = v21;
  *(unsigned char *)(*((void *)this + 17) + 55) = v21;
  *(unsigned char *)(*((void *)this + 19) + 55) = v21;
  uint64_t v22 = *((void *)a2 + 92);
  unsigned int v23 = operator new(0x20uLL);
  void *v23 = &unk_1EF57A100;
  v23[1] = this;
  void v23[2] = v242;
  v23[3] = a2;
  *(void *)&long long v251 = v23;
  long long v257 = 0uLL;
  (*(void (**)(void, unsigned char *, long long *))(**(void **)(v22 + 32) + 16))(*(void *)(v22 + 32), v250, &v257);
  BOOL v25 = (std::__shared_weak_count *)*((void *)&v257 + 1);
  if (*((void *)&v257 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v257 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if ((unsigned char *)v251 == v250)
  {
    (*(void (**)(unsigned char *))(*(void *)v250 + 32))(v250);
  }
  else if ((void)v251)
  {
    (*(void (**)(void))(*(void *)v251 + 40))();
  }
  char v26 = *(void **)(v235 + 8);
  uint64_t v27 = v26[3];
  uint64_t v28 = v26[4];
  uint64_t v29 = v28 - v27;
  if (v28 == v27) {
    goto LABEL_38;
  }
  uint64_t v30 = 0;
  unint64_t v31 = v29 >> 3;
  while (1)
  {
    int v32 = *(unsigned __int8 **)(v27 + 8 * v30);
    if (*v32 == *((unsigned __int8 *)this + 328))
    {
      unint64_t v33 = *((void *)v32 + 1);
      uint64_t v34 = v26[15];
      if (v33 < (v26[16] - v34) >> 3) {
        break;
      }
    }
    if (++v30 >= v31) {
      goto LABEL_38;
    }
  }
  uint64_t v35 = *(void *)(v34 + 8 * v33);
  if (!v35) {
LABEL_38:
  }
    uint64_t v232 = 0;
  else {
    uint64_t v232 = *(void *)(*(void *)(v35 + 24) + 8 * *((unsigned __int8 *)this + 329));
  }
  uint64_t v36 = *((void *)this + 37);
  uint64_t v233 = this;
  uint64_t v234 = *((void *)this + 38);
  if (v36 == v234) {
    goto LABEL_261;
  }
  while (2)
  {
    uint64_t v38 = *(void **)(v235 + 8);
    uint64_t v40 = v38[3];
    uint64_t v39 = v38[4];
    uint64_t v41 = v39 - v40;
    if (v39 == v40) {
      goto LABEL_52;
    }
    uint64_t v42 = 0;
    uint64_t v43 = *(void *)(*(void *)(*((void *)v233 + 5) + 120) + 8);
    unint64_t v44 = v41 >> 3;
    while (1)
    {
      int8x16_t v45 = *(unsigned __int8 **)(v40 + 8 * v42);
      if (*v45 == *(unsigned __int8 *)(v43 + 20))
      {
        unint64_t v46 = *((void *)v45 + 1);
        uint64_t v47 = v38[15];
        if (v46 < (v38[16] - v47) >> 3) {
          break;
        }
      }
      if (++v42 >= v44) {
        goto LABEL_52;
      }
    }
    uint64_t v48 = *(void *)(v47 + 8 * v46);
    if (!v48) {
LABEL_52:
    }
      unint64_t v49 = 0;
    else {
      unint64_t v49 = *(std::__shared_weak_count **)(*(void *)(v48 + 24) + 8 * *(unsigned __int8 *)(v43 + 21));
    }
    uint64_t v50 = *(void *)(v36 + 16);
    uint64_t v51 = *(void *)(*(void *)(v50 + 208) + 64);
    uint64_t v238 = v36;
    uint64_t v237 = v50;
    if (!v51) {
      goto LABEL_145;
    }
    unint64_t v52 = (void (**)(void **))&unk_1EF578E28;
    uint64_t v244 = (void (**)(void **, void **))&unk_1EF578E28;
    uint64_t v245 = v49;
    unint64_t v236 = v49;
    uint64_t v246 = (uint64_t *)&v244;
    unint64_t v53 = *(void **)(v51 + 8);
    uint64_t v239 = *(void **)(v51 + 16);
    if (v53 == v239)
    {
LABEL_143:
      v52[4]((void **)&v244);
      goto LABEL_144;
    }
    do
    {
      uint64_t v54 = *v53;
      uint64_t v55 = (uint64_t)v246;
      if (!v246) {
        goto LABEL_61;
      }
      if (v246 != (uint64_t *)&v244)
      {
        uint64_t v55 = (*(uint64_t (**)(void))(*v246 + 16))();
LABEL_61:
        unint64_t v249 = (uint64_t *)v55;
        goto LABEL_63;
      }
      unint64_t v249 = (uint64_t *)&v247;
      v244[3]((void **)&v244, (void **)&v247);
LABEL_63:
      if (!*(unsigned char *)(v54 + 400)) {
        goto LABEL_136;
      }
      uint64_t v57 = *(void *)(v54 + 296);
      uint64_t v56 = *(void *)(v54 + 304);
      if (v56 != v57)
      {
        uint64_t v58 = *(void *)(v54 + 304);
        do
        {
          uint64_t v60 = *(void **)(v58 - 24);
          v58 -= 24;
          int32x4_t v59 = v60;
          if (v60)
          {
            *(void *)(v56 - 16) = v59;
            operator delete(v59);
          }
          uint64_t v56 = v58;
        }
        while (v58 != v57);
      }
      *(void *)(v54 + 304) = v57;
      *(void *)(v54 + 280) = *(void *)(v54 + 272);
      uint64_t v61 = *(void **)(v54 + 352);
      if (v61)
      {
        do
        {
          if (v61[1])
          {
            unint64_t v63 = 0;
            long long v64 = v61 + 2;
            int8x16_t v65 = v61 + 2;
            int8x16_t v66 = (void (***)(void))(v61 + 2);
            do
            {
              uint64_t v67 = (void (**)(void *))*v66;
              v66 += 15;
              (*v67)(v65);
              ++v63;
              v64 += 15;
              int8x16_t v65 = v66;
            }
            while (v63 < v61[1]);
          }
          v61[1] = 0;
          uint64_t v61 = (void *)*v61;
        }
        while (v61);
        uint64_t v62 = *(void *)(v54 + 352);
      }
      else
      {
        uint64_t v62 = 0;
      }
      *(void *)(v54 + 360) = v62;
      uint64_t v68 = (uint64_t)v249;
      double v240 = v53;
      if (!v249) {
        goto LABEL_80;
      }
      if (v249 != (uint64_t *)&v247)
      {
        uint64_t v68 = (*(uint64_t (**)(void))(*v249 + 16))();
LABEL_80:
        *((void *)&v258 + 1) = v68;
        goto LABEL_82;
      }
      *((void *)&v258 + 1) = &v257;
      v247[3]((void **)&v247, &v257);
LABEL_82:
      if (*(unsigned char *)(v54 + 400))
      {
        if (*(unsigned char *)(v54 + 136))
        {
          uint64_t v69 = *(void *)(*(void *)(v54 + 8) + 56);
          *(void *)(v54 + 40) = v69;
          BOOL v70 = *(unsigned __int8 *)(v69 + 58) == 1;
          if (!*(unsigned char *)(v54 + 264)) {
            goto LABEL_87;
          }
        }
        else
        {
          BOOL v70 = 0;
          if (!*(unsigned char *)(v54 + 264)) {
            goto LABEL_87;
          }
        }
        uint64_t v71 = *(void *)(*(void *)(v54 + 8) + 64);
        *(void *)(v54 + 168) = v71;
        if (*(unsigned char *)(v71 + 58) == 1) {
          BOOL v70 = 1;
        }
LABEL_87:
        uint64_t v73 = *(uint64_t **)(v54 + 376);
        uint64_t v72 = *(uint64_t **)(v54 + 384);
        if (v73 != v72)
        {
          uint64_t v74 = 0;
          while (1)
          {
            uint64_t v75 = *v73;
            if (*(unsigned char *)(*v73 + 48))
            {
              if (*(void *)(v75 + 88) != v74)
              {
                if (v74)
                {
                  uint64_t v76 = ggl::Batcher::commit((long long **)(v54 + 272), 0xC8u, v24);
                  if (v76[1] != *v76)
                  {
                    uint64_t v77 = v76;
                    if (*(unsigned char *)(v54 + 136))
                    {
                      long long v79 = *(_OWORD *)(v54 + 24);
                      long long v78 = *(_OWORD *)(v54 + 40);
                      long long v80 = *(_OWORD *)(v54 + 56);
                      long long v81 = *(_OWORD *)(v54 + 72);
                      long long v82 = *(_OWORD *)(v54 + 88);
                      long long v83 = *(_OWORD *)(v54 + 120);
                      long long v255 = *(_OWORD *)(v54 + 104);
                      long long v256 = v83;
                      *(void *)uint64_t v250 = &off_1EF55A458;
                      *(_OWORD *)&v250[8] = v79;
                      long long v251 = v78;
                      long long v253 = v81;
                      long long v254 = v82;
                      long long v252 = v80;
                      uint64_t v84 = *(void **)(v54 + 360);
                      uint64_t v85 = v84[1];
                      if (v85 == *(void *)(v54 + 368))
                      {
                        uint64_t v84 = (void *)*v84;
                        if (!v84)
                        {
                          uint64_t v84 = malloc_type_malloc(120 * v85 + 16, 0xB644C221uLL);
                          *uint64_t v84 = 0;
                          v84[1] = 0;
                          **(void **)(v54 + 360) = v84;
                        }
                        *(void *)(v54 + 360) = v84;
                        uint64_t v85 = v84[1];
                      }
                      uint64_t v86 = &v84[15 * v85];
                      v84[1] = v85 + 1;
                      v86[2] = &off_1EF55A458;
                      long long v87 = v255;
                      long long v88 = v256;
                      long long v89 = v254;
                      *(_OWORD *)(v86 + 9) = v253;
                      long long v90 = *(_OWORD *)&v250[8];
                      long long v91 = v251;
                      *(_OWORD *)(v86 + 7) = v252;
                      *(_OWORD *)(v86 + 5) = v91;
                      *(_OWORD *)(v86 + 3) = v90;
                      *(_OWORD *)(v86 + 15) = v88;
                      *(_OWORD *)(v86 + 13) = v87;
                      *(_OWORD *)(v86 + 11) = v89;
                      v86[10] = v74;
                      uint64_t v92 = *v77;
                      v86[13] = *v77;
                      v86[14] = (v77[1] - v92) >> 4;
                      LODWORD(v243[0]) = 0;
                      *(void *)uint64_t v250 = v86 + 2;
                      if (!*((void *)&v258 + 1)) {
                        goto LABEL_279;
                      }
                      (*(void (**)(void, void *, unsigned char *))(**((void **)&v258 + 1) + 48))(*((void *)&v258 + 1), v243, v250);
                    }
                    if (*(unsigned char *)(v54 + 264))
                    {
                      *(void *)uint64_t v250 = &off_1EF55A458;
                      long long v93 = *(_OWORD *)(v54 + 168);
                      *(_OWORD *)&v250[8] = *(_OWORD *)(v54 + 152);
                      long long v251 = v93;
                      long long v94 = *(_OWORD *)(v54 + 248);
                      long long v95 = *(_OWORD *)(v54 + 216);
                      long long v255 = *(_OWORD *)(v54 + 232);
                      long long v256 = v94;
                      long long v96 = *(_OWORD *)(v54 + 200);
                      long long v252 = *(_OWORD *)(v54 + 184);
                      long long v253 = v96;
                      long long v254 = v95;
                      long long v97 = *(void **)(v54 + 360);
                      uint64_t v98 = v97[1];
                      if (v98 == *(void *)(v54 + 368))
                      {
                        long long v97 = (void *)*v97;
                        if (!v97)
                        {
                          long long v97 = malloc_type_malloc(120 * v98 + 16, 0xB644C221uLL);
                          *long long v97 = 0;
                          v97[1] = 0;
                          **(void **)(v54 + 360) = v97;
                        }
                        *(void *)(v54 + 360) = v97;
                        uint64_t v98 = v97[1];
                      }
                      uint64_t v99 = &v97[15 * v98];
                      v97[1] = v98 + 1;
                      v99[2] = &off_1EF55A458;
                      long long v100 = v255;
                      long long v101 = v256;
                      long long v102 = v254;
                      *(_OWORD *)(v99 + 9) = v253;
                      long long v103 = *(_OWORD *)&v250[8];
                      long long v104 = v251;
                      *(_OWORD *)(v99 + 7) = v252;
                      *(_OWORD *)(v99 + 5) = v104;
                      *(_OWORD *)(v99 + 3) = v103;
                      *(_OWORD *)(v99 + 15) = v101;
                      *(_OWORD *)(v99 + 13) = v100;
                      *(_OWORD *)(v99 + 11) = v102;
                      v99[10] = v74;
                      uint64_t v105 = *v77;
                      v99[13] = *v77;
                      v99[14] = (v77[1] - v105) >> 4;
                      LODWORD(v243[0]) = 1;
                      *(void *)uint64_t v250 = v99 + 2;
                      if (!*((void *)&v258 + 1)) {
                        goto LABEL_279;
                      }
                      (*(void (**)(void, void *, unsigned char *))(**((void **)&v258 + 1) + 48))(*((void *)&v258 + 1), v243, v250);
                    }
                  }
                }
                uint64_t v75 = *v73;
                uint64_t v74 = *(void *)(*v73 + 88);
              }
              uint64_t v106 = 16;
              if (v70)
              {
                uint64_t v106 = 32;
                uint64_t v107 = v75 + 32;
              }
              else
              {
                uint64_t v107 = v75 + 16;
              }
              if (*(void *)(v107 + 8) != *(void *)(v75 + v106)) {
                gm::MultiRange<unsigned long>::push_back((char **)(v54 + 272), (_OWORD *)v107);
              }
            }
            if (++v73 == v72) {
              goto LABEL_117;
            }
          }
        }
        uint64_t v74 = 0;
LABEL_117:
        uint64_t v108 = ggl::Batcher::commit((long long **)(v54 + 272), 0xC8u, v24);
        if (v108[1] != *v108)
        {
          uint64_t v109 = v108;
          if (*(unsigned char *)(v54 + 136))
          {
            long long v110 = *(_OWORD *)(v54 + 40);
            long long v111 = *(_OWORD *)(v54 + 24);
            long long v112 = *(_OWORD *)(v54 + 56);
            long long v113 = *(_OWORD *)(v54 + 72);
            long long v114 = *(_OWORD *)(v54 + 88);
            long long v115 = *(_OWORD *)(v54 + 120);
            long long v255 = *(_OWORD *)(v54 + 104);
            long long v256 = v115;
            *(void *)uint64_t v250 = &off_1EF55A458;
            *(_OWORD *)&v250[8] = v111;
            long long v251 = v110;
            long long v253 = v113;
            long long v254 = v114;
            long long v252 = v112;
            long long v116 = *(void **)(v54 + 360);
            uint64_t v117 = v116[1];
            if (v117 == *(void *)(v54 + 368))
            {
              long long v116 = (void *)*v116;
              if (!v116)
              {
                long long v116 = malloc_type_malloc(120 * v117 + 16, 0xB644C221uLL);
                *long long v116 = 0;
                v116[1] = 0;
                **(void **)(v54 + 360) = v116;
              }
              *(void *)(v54 + 360) = v116;
              uint64_t v117 = v116[1];
            }
            unsigned int v118 = &v116[15 * v117];
            v116[1] = v117 + 1;
            v118[2] = &off_1EF55A458;
            long long v119 = v255;
            long long v120 = v256;
            long long v121 = v254;
            *(_OWORD *)(v118 + 9) = v253;
            long long v122 = *(_OWORD *)&v250[8];
            long long v123 = v251;
            *(_OWORD *)(v118 + 7) = v252;
            *(_OWORD *)(v118 + 5) = v123;
            *(_OWORD *)(v118 + 3) = v122;
            *(_OWORD *)(v118 + 15) = v120;
            *(_OWORD *)(v118 + 13) = v119;
            *(_OWORD *)(v118 + 11) = v121;
            v118[10] = v74;
            long long v124 = *v109;
            v118[13] = *v109;
            v118[14] = (v109[1] - v124) >> 4;
            LODWORD(v243[0]) = 0;
            *(void *)uint64_t v250 = v118 + 2;
            if (!*((void *)&v258 + 1))
            {
LABEL_279:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            (*(void (**)(void, void *, unsigned char *))(**((void **)&v258 + 1) + 48))(*((void *)&v258 + 1), v243, v250);
          }
          if (*(unsigned char *)(v54 + 264))
          {
            *(void *)uint64_t v250 = &off_1EF55A458;
            long long v125 = *(_OWORD *)(v54 + 168);
            *(_OWORD *)&v250[8] = *(_OWORD *)(v54 + 152);
            long long v251 = v125;
            long long v126 = *(_OWORD *)(v54 + 184);
            long long v127 = *(_OWORD *)(v54 + 248);
            long long v128 = *(_OWORD *)(v54 + 216);
            long long v255 = *(_OWORD *)(v54 + 232);
            long long v256 = v127;
            long long v129 = *(_OWORD *)(v54 + 200);
            long long v252 = v126;
            long long v253 = v129;
            long long v254 = v128;
            BOOL v130 = *(void **)(v54 + 360);
            uint64_t v131 = v130[1];
            if (v131 == *(void *)(v54 + 368))
            {
              BOOL v130 = (void *)*v130;
              if (!v130)
              {
                BOOL v130 = malloc_type_malloc(120 * v131 + 16, 0xB644C221uLL);
                *BOOL v130 = 0;
                v130[1] = 0;
                **(void **)(v54 + 360) = v130;
              }
              *(void *)(v54 + 360) = v130;
              uint64_t v131 = v130[1];
            }
            uint64_t v132 = &v130[15 * v131];
            v130[1] = v131 + 1;
            v132[2] = &off_1EF55A458;
            long long v133 = v255;
            long long v134 = v256;
            long long v135 = v254;
            *(_OWORD *)(v132 + 9) = v253;
            long long v136 = *(_OWORD *)&v250[8];
            long long v137 = v251;
            *(_OWORD *)(v132 + 7) = v252;
            *(_OWORD *)(v132 + 5) = v137;
            *(_OWORD *)(v132 + 3) = v136;
            *(_OWORD *)(v132 + 15) = v134;
            *(_OWORD *)(v132 + 13) = v133;
            *(_OWORD *)(v132 + 11) = v135;
            v132[10] = v74;
            uint64_t v138 = *v109;
            v132[13] = *v109;
            v132[14] = (v109[1] - v138) >> 4;
            LODWORD(v243[0]) = 1;
            *(void *)uint64_t v250 = v132 + 2;
            if (!*((void *)&v258 + 1)) {
              goto LABEL_279;
            }
            (*(void (**)(void, void *, unsigned char *))(**((void **)&v258 + 1) + 48))(*((void *)&v258 + 1), v243, v250);
          }
        }
      }
      if (*((long long **)&v258 + 1) == &v257)
      {
        (*(void (**)(long long *))(v257 + 32))(&v257);
        unint64_t v53 = v240;
      }
      else
      {
        unint64_t v53 = v240;
        if (*((void *)&v258 + 1)) {
          (*(void (**)(void))(**((void **)&v258 + 1) + 40))();
        }
      }
LABEL_136:
      if (v249 == (uint64_t *)&v247)
      {
        ((void (*)(void (***)(void **, _OWORD *)))v247[4])(&v247);
      }
      else if (v249)
      {
        (*(void (**)(void))(*v249 + 40))();
      }
      ++v53;
    }
    while (v53 != v239);
    if (v246 == (uint64_t *)&v244)
    {
      unint64_t v52 = (void (**)(void **))v244;
      goto LABEL_143;
    }
    if (v246) {
      (*(void (**)(void))(*v246 + 40))();
    }
LABEL_144:
    uint64_t v50 = v237;
    uint64_t v36 = v238;
    unint64_t v49 = v236;
LABEL_145:
    if (!*(unsigned char *)(v50 + 28)) {
      goto LABEL_188;
    }
    uint64_t v139 = *(void *)(*(void *)(v50 + 216) + 40);
    if (!v139) {
      goto LABEL_188;
    }
    double v247 = (void (**)(void **, _OWORD *))&unk_1EF578EB8;
    uint64_t v248 = v49;
    uint64_t v140 = v49;
    unint64_t v249 = (uint64_t *)&v247;
    uint64_t v141 = *(uint64_t **)(v139 + 8);
    uint64_t v142 = *(uint64_t **)(v139 + 16);
    if (v141 == v142)
    {
LABEL_186:
      ((void (*)(void (***)(void **, _OWORD *)))v247[4])(&v247);
      goto LABEL_187;
    }
    while (2)
    {
      uint64_t v143 = *v141;
      if (v249)
      {
        if (v249 == (uint64_t *)&v247)
        {
          *((void *)&v258 + 1) = &v257;
          v247[3]((void **)&v247, &v257);
          if (!*(unsigned char *)(v143 + 272)) {
            goto LABEL_180;
          }
        }
        else
        {
          *((void *)&v258 + 1) = (*(uint64_t (**)(void))(*v249 + 16))();
          if (!*(unsigned char *)(v143 + 272)) {
            goto LABEL_180;
          }
        }
LABEL_158:
        uint64_t v145 = *(void *)(v143 + 168);
        uint64_t v144 = *(void *)(v143 + 176);
        if (v144 != v145)
        {
          uint64_t v146 = *(void *)(v143 + 176);
          do
          {
            uint64_t v148 = *(void **)(v146 - 24);
            v146 -= 24;
            uint64_t v147 = v148;
            if (v148)
            {
              *(void *)(v144 - 16) = v147;
              operator delete(v147);
            }
            uint64_t v144 = v146;
          }
          while (v146 != v145);
        }
        *(void *)(v143 + 176) = v145;
        *(void *)(v143 + 152) = *(void *)(v143 + 144);
        int v149 = *(void **)(v143 + 224);
        if (v149)
        {
          do
          {
            if (v149[1])
            {
              unint64_t v151 = 0;
              unint64_t v152 = v149 + 2;
              uint64_t v153 = v149 + 2;
              uint64_t v154 = (void (***)(void))(v149 + 2);
              do
              {
                uint64_t v155 = (void (**)(void *))*v154;
                v154 += 15;
                (*v155)(v153);
                ++v151;
                v152 += 15;
                uint64_t v153 = v154;
              }
              while (v151 < v149[1]);
            }
            v149[1] = 0;
            int v149 = (void *)*v149;
          }
          while (v149);
          uint64_t v150 = *(void *)(v143 + 224);
        }
        else
        {
          uint64_t v150 = 0;
        }
        *(void *)(v143 + 232) = v150;
        if (*((void *)&v258 + 1))
        {
          if (*((long long **)&v258 + 1) == &v257)
          {
            *(void *)&long long v251 = v250;
            v24.n128_f64[0] = (*(double (**)(long long *, unsigned char *))(v257 + 24))(&v257, v250);
          }
          else
          {
            *(void *)&long long v251 = (*(uint64_t (**)(void))(**((void **)&v258 + 1) + 16))();
          }
        }
        else
        {
          *(void *)&long long v251 = 0;
        }
        md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::collectRenderItemsForPassesNoReset((char **)v143, (uint64_t)v250, 0xC8u, v24);
        if ((unsigned char *)v251 == v250)
        {
          (*(void (**)(unsigned char *))(*(void *)v250 + 32))(v250);
        }
        else if ((void)v251)
        {
          (*(void (**)(void))(*(void *)v251 + 40))();
        }
      }
      else
      {
        *((void *)&v258 + 1) = 0;
        if (*(unsigned char *)(v143 + 272)) {
          goto LABEL_158;
        }
      }
LABEL_180:
      if (*((long long **)&v258 + 1) == &v257)
      {
        (*(void (**)(long long *))(v257 + 32))(&v257);
      }
      else if (*((void *)&v258 + 1))
      {
        (*(void (**)(void))(**((void **)&v258 + 1) + 40))();
      }
      if (++v141 != v142) {
        continue;
      }
      break;
    }
    if (v249 == (uint64_t *)&v247) {
      goto LABEL_186;
    }
    if (v249) {
      (*(void (**)(void))(*v249 + 40))();
    }
LABEL_187:
    uint64_t v50 = v237;
    uint64_t v36 = v238;
    unint64_t v49 = v140;
LABEL_188:
    long long v156 = *(void **)(v50 + 200);
    uint64_t v157 = v156[2];
    if (!v157 || !*(unsigned char *)(*(void *)(*v156 + 40) + 64)) {
      goto LABEL_44;
    }
    int8x16_t v37 = (void (**)(void **))&unk_1EF578E70;
    uint64_t v244 = (void (**)(void **, void **))&unk_1EF578E70;
    uint64_t v245 = v49;
    uint64_t v246 = (uint64_t *)&v244;
    uint64_t v158 = *(uint64_t **)(v157 + 8);
    uint64_t v241 = *(uint64_t **)(v157 + 16);
    if (v158 == v241)
    {
LABEL_42:
      v37[4]((void **)&v244);
      goto LABEL_43;
    }
    while (2)
    {
      uint64_t v159 = *v158;
      uint64_t v160 = (uint64_t)v246;
      if (v246)
      {
        if (v246 != (uint64_t *)&v244)
        {
          uint64_t v160 = (*(uint64_t (**)(void))(*v246 + 16))();
          goto LABEL_197;
        }
        unint64_t v249 = (uint64_t *)&v247;
        v244[3]((void **)&v244, (void **)&v247);
      }
      else
      {
LABEL_197:
        unint64_t v249 = (uint64_t *)v160;
      }
      if (*(unsigned char *)(v159 + 272))
      {
        uint64_t v162 = *(void *)(v159 + 168);
        uint64_t v161 = *(void *)(v159 + 176);
        if (v161 != v162)
        {
          uint64_t v163 = *(void *)(v159 + 176);
          do
          {
            uint64_t v165 = *(void **)(v163 - 24);
            v163 -= 24;
            uint64_t v164 = v165;
            if (v165)
            {
              *(void *)(v161 - 16) = v164;
              operator delete(v164);
            }
            uint64_t v161 = v163;
          }
          while (v163 != v162);
        }
        *(void *)(v159 + 176) = v162;
        *(void *)(v159 + 152) = *(void *)(v159 + 144);
        float64x2x2_t v166 = *(void **)(v159 + 224);
        if (v166)
        {
          do
          {
            if (v166[1])
            {
              unint64_t v168 = 0;
              uint64_t v169 = v166 + 2;
              uint64_t v170 = v166 + 2;
              float64x2x2_t v171 = (void (***)(void))(v166 + 2);
              do
              {
                float64x2x2_t v172 = (void (**)(void *))*v171;
                v171 += 15;
                (*v172)(v170);
                ++v168;
                v169 += 15;
                uint64_t v170 = v171;
              }
              while (v168 < v166[1]);
            }
            v166[1] = 0;
            float64x2x2_t v166 = (void *)*v166;
          }
          while (v166);
          uint64_t v167 = *(void *)(v159 + 224);
        }
        else
        {
          uint64_t v167 = 0;
        }
        *(void *)(v159 + 232) = v167;
        uint64_t v173 = (uint64_t)v249;
        if (v249)
        {
          if (v249 != (uint64_t *)&v247)
          {
            uint64_t v173 = (*(uint64_t (**)(void))(*v249 + 16))();
            goto LABEL_216;
          }
          *((void *)&v258 + 1) = &v257;
          v247[3]((void **)&v247, &v257);
        }
        else
        {
LABEL_216:
          *((void *)&v258 + 1) = v173;
        }
        if (*(unsigned char *)(v159 + 272))
        {
          if (*(unsigned char *)(v159 + 136))
          {
            uint64_t v174 = *(void *)(*(void *)(v159 + 8) + 56);
            *(void *)(v159 + 40) = v174;
            BOOL v175 = *(unsigned __int8 *)(v174 + 58) == 1;
          }
          else
          {
            BOOL v175 = 0;
          }
          uint64_t v176 = *(uint64_t **)(v159 + 248);
          unint64_t v177 = *(uint64_t **)(v159 + 256);
          if (v176 != v177)
          {
            uint64_t v178 = 0;
            while (1)
            {
              uint64_t v179 = *v176;
              if (*(unsigned char *)(*v176 + 48))
              {
                if (*(void *)(v179 + 88) != v178)
                {
                  if (v178)
                  {
                    uint64_t v180 = ggl::Batcher::commit((long long **)(v159 + 144), 0xC8u, v24);
                    if (v180[1] != *v180)
                    {
                      if (*(unsigned char *)(v159 + 136))
                      {
                        unint64_t v181 = v180;
                        long long v183 = *(_OWORD *)(v159 + 24);
                        long long v182 = *(_OWORD *)(v159 + 40);
                        long long v184 = *(_OWORD *)(v159 + 56);
                        long long v185 = *(_OWORD *)(v159 + 72);
                        long long v186 = *(_OWORD *)(v159 + 88);
                        long long v187 = *(_OWORD *)(v159 + 120);
                        long long v255 = *(_OWORD *)(v159 + 104);
                        long long v256 = v187;
                        *(void *)uint64_t v250 = &off_1EF55A458;
                        *(_OWORD *)&v250[8] = v183;
                        long long v251 = v182;
                        long long v253 = v185;
                        long long v254 = v186;
                        long long v252 = v184;
                        unint64_t v188 = *(void **)(v159 + 232);
                        uint64_t v189 = v188[1];
                        if (v189 == *(void *)(v159 + 240))
                        {
                          unint64_t v188 = (void *)*v188;
                          if (!v188)
                          {
                            unint64_t v188 = malloc_type_malloc(120 * v189 + 16, 0xB644C221uLL);
                            *unint64_t v188 = 0;
                            v188[1] = 0;
                            **(void **)(v159 + 232) = v188;
                          }
                          *(void *)(v159 + 232) = v188;
                          uint64_t v189 = v188[1];
                        }
                        uint64_t v190 = &v188[15 * v189];
                        v188[1] = v189 + 1;
                        v190[2] = &off_1EF55A458;
                        long long v191 = v255;
                        long long v192 = v256;
                        long long v193 = v254;
                        *(_OWORD *)(v190 + 9) = v253;
                        long long v194 = *(_OWORD *)&v250[8];
                        long long v195 = v251;
                        *(_OWORD *)(v190 + 7) = v252;
                        *(_OWORD *)(v190 + 5) = v195;
                        *(_OWORD *)(v190 + 3) = v194;
                        *(_OWORD *)(v190 + 15) = v192;
                        *(_OWORD *)(v190 + 13) = v191;
                        *(_OWORD *)(v190 + 11) = v193;
                        v190[10] = v178;
                        uint64_t v196 = *v181;
                        v190[13] = *v181;
                        v190[14] = (v181[1] - v196) >> 4;
                        LODWORD(v243[0]) = 0;
                        *(void *)uint64_t v250 = v190 + 2;
                        if (!*((void *)&v258 + 1)) {
                          goto LABEL_279;
                        }
                        (*(void (**)(void, void *, unsigned char *))(**((void **)&v258 + 1) + 48))(*((void *)&v258 + 1), v243, v250);
                      }
                    }
                  }
                  uint64_t v179 = *v176;
                  uint64_t v178 = *(void *)(*v176 + 88);
                }
                uint64_t v197 = 16;
                if (v175)
                {
                  uint64_t v197 = 32;
                  uint64_t v198 = v179 + 32;
                }
                else
                {
                  uint64_t v198 = v179 + 16;
                }
                if (*(void *)(v198 + 8) != *(void *)(v179 + v197)) {
                  gm::MultiRange<unsigned long>::push_back((char **)(v159 + 144), (_OWORD *)v198);
                }
              }
              if (++v176 == v177) {
                goto LABEL_243;
              }
            }
          }
          uint64_t v178 = 0;
LABEL_243:
          unint64_t v199 = ggl::Batcher::commit((long long **)(v159 + 144), 0xC8u, v24);
          if (v199[1] != *v199)
          {
            if (*(unsigned char *)(v159 + 136))
            {
              uint64_t v200 = v199;
              long long v201 = *(_OWORD *)(v159 + 40);
              long long v202 = *(_OWORD *)(v159 + 24);
              long long v203 = *(_OWORD *)(v159 + 56);
              long long v204 = *(_OWORD *)(v159 + 72);
              long long v205 = *(_OWORD *)(v159 + 88);
              long long v206 = *(_OWORD *)(v159 + 120);
              long long v255 = *(_OWORD *)(v159 + 104);
              long long v256 = v206;
              *(void *)uint64_t v250 = &off_1EF55A458;
              *(_OWORD *)&v250[8] = v202;
              long long v251 = v201;
              long long v253 = v204;
              long long v254 = v205;
              long long v252 = v203;
              int8x8_t v207 = *(void **)(v159 + 232);
              uint64_t v208 = v207[1];
              if (v208 == *(void *)(v159 + 240))
              {
                int8x8_t v207 = (void *)*v207;
                if (!v207)
                {
                  int8x8_t v207 = malloc_type_malloc(120 * v208 + 16, 0xB644C221uLL);
                  *int8x8_t v207 = 0;
                  v207[1] = 0;
                  **(void **)(v159 + 232) = v207;
                }
                *(void *)(v159 + 232) = v207;
                uint64_t v208 = v207[1];
              }
              uint8x8_t v209 = &v207[15 * v208];
              v207[1] = v208 + 1;
              v209[2] = &off_1EF55A458;
              long long v210 = v255;
              long long v211 = v256;
              long long v212 = v254;
              *(_OWORD *)(v209 + 9) = v253;
              long long v213 = *(_OWORD *)&v250[8];
              long long v214 = v251;
              *(_OWORD *)(v209 + 7) = v252;
              *(_OWORD *)(v209 + 5) = v214;
              *(_OWORD *)(v209 + 3) = v213;
              *(_OWORD *)(v209 + 15) = v211;
              *(_OWORD *)(v209 + 13) = v210;
              *(_OWORD *)(v209 + 11) = v212;
              v209[10] = v178;
              uint64_t v215 = *v200;
              v209[13] = *v200;
              v209[14] = (v200[1] - v215) >> 4;
              LODWORD(v243[0]) = 0;
              *(void *)uint64_t v250 = v209 + 2;
              if (!*((void *)&v258 + 1)) {
                goto LABEL_279;
              }
              (*(void (**)(void, void *, unsigned char *))(**((void **)&v258 + 1) + 48))(*((void *)&v258 + 1), v243, v250);
            }
          }
        }
        if (*((long long **)&v258 + 1) == &v257)
        {
          (*(void (**)(long long *))(v257 + 32))(&v257);
        }
        else if (*((void *)&v258 + 1))
        {
          (*(void (**)(void))(**((void **)&v258 + 1) + 40))();
        }
      }
      if (v249 == (uint64_t *)&v247)
      {
        ((void (*)(void (***)(void **, _OWORD *)))v247[4])(&v247);
      }
      else if (v249)
      {
        (*(void (**)(void))(*v249 + 40))();
      }
      if (++v158 != v241) {
        continue;
      }
      break;
    }
    if (v246 == (uint64_t *)&v244)
    {
      int8x16_t v37 = (void (**)(void **))v244;
      goto LABEL_42;
    }
    if (v246) {
      (*(void (**)(void))(*v246 + 40))();
    }
LABEL_43:
    uint64_t v36 = v238;
LABEL_44:
    v36 += 24;
    if (v36 != v234) {
      continue;
    }
    break;
  }
LABEL_261:
  if (*((unsigned char *)v233 + 330) && *(unsigned char *)(*(void *)(*(void *)(*((void *)v233 + 5) + 40) + 24) + 32))
  {
    uint64_t v216 = (uint64_t *)*((void *)v233 + 22);
    if (!v216)
    {
      uint64_t v217 = operator new(0xF8uLL);
      v217[1] = 0;
      v217[2] = 0;
      *uint64_t v217 = &unk_1EF584380;
      ggl::BufferData::BufferData((uint64_t)(v217 + 3), 8, 0, 0, 6, 4);
      v217[29] = "/route/element/clear/vdata";
      v217[30] = &ggl::CommonMesh::bufferPos2Reflection;
      v217[3] = &unk_1EF55BF88;
      v217[28] = &unk_1EF55BFA8;
      v243[0] = v217 + 3;
      v243[1] = v217;
      memset(v250, 0, sizeof(v250));
      uint64_t v218 = 4 * v217[4];
      *(void *)&long long v219 = 0;
      *((void *)&v219 + 1) = v217 + 3;
      uint64_t v220 = (_OWORD *)v217[12];
      *(_OWORD *)uint64_t v250 = v219;
      *(void *)&long long v251 = v218;
      *(void *)&long long v252 = v220;
      WORD4(v251) = 1;
      *uint64_t v220 = xmmword_1A28FCD00;
      v220[1] = xmmword_1A28FCD10;
      unint64_t v221 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v221->__shared_owners_ = 0;
      v221->__shared_weak_owners_ = 0;
      v221->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583D28;
      ggl::BufferData::BufferData((uint64_t)&v221[1], 2, 1, 0, 6, 6);
      LODWORD(v221[10].__vftable) = 0;
      v221[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B630;
      v221[1].__shared_owners_ = 2;
      v221[9].__shared_owners_ = (uint64_t)&unk_1EF55B650;
      v221[9].__shared_weak_owners_ = (uint64_t)"/route/element/clear/idata";
      v242[3] = v221 + 1;
      v242[4] = v221;
      long long v257 = 0uLL;
      *(void *)&long long v222 = 0;
      *((void *)&v222 + 1) = v221 + 1;
      uint64_t v223 = v221[4].__vftable;
      long long v257 = v222;
      long long v258 = xmmword_1A28FCD20;
      uint64_t v260 = v223;
      __int16 v259 = 1;
      v223->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
      LODWORD(v223->~__shared_weak_count_0) = 3;
      uint64_t v224 = operator new(0xA8uLL);
      v224[1] = 0;
      v224[2] = 0;
      *uint64_t v224 = &unk_1EF5830E8;
      double v247 = (void (**)(void **, _OWORD *))(v217 + 3);
      uint64_t v248 = (std::__shared_weak_count *)v217;
      atomic_fetch_add_explicit(v217 + 1, 1uLL, memory_order_relaxed);
      uint64_t v244 = (void (**)(void **, void **))&v221[1];
      uint64_t v245 = v221;
      atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)(v224 + 3), (uint64_t)"/route/element/clear/mesh", (uint64_t *)&v247, (uint64_t *)&v244);
      if (!atomic_fetch_add(&v221->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
      uint64_t v225 = v248;
      if (v248 && !atomic_fetch_add(&v248->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
      v242[1] = v224 + 3;
      v242[2] = v224;
      id v227 = (void (**)(void **, _OWORD *))*((void *)v233 + 13);
      uint64_t v226 = (std::__shared_weak_count *)*((void *)v233 + 14);
      if (v226) {
        atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v247 = v227;
      uint64_t v248 = v226;
      operator new();
    }
    ggl::CommandBuffer::pushRenderItem(v232, *v216);
  }
  unint64_t v228 = *(void *)(v232 + 72);
  int8x8_t v229 = *(uint64_t **)(v232 + 80);
  unint64_t v230 = 126 - 2 * __clz((uint64_t)((uint64_t)v229 - v228) >> 3);
  if (v229 == (uint64_t *)v228) {
    uint64_t v231 = 0;
  }
  else {
    uint64_t v231 = v230;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v228, v229, v231, 1);
}

void sub_1A1E18C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v37 - 160));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1A1E18CC4(_Unwind_Exception *exception_object)
{
}

void sub_1A1E18CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34)
{
  uint64_t v36 = *(void *)(v34 - 136);
  if (v36 == v34 - 160)
  {
    (*(void (**)(uint64_t))(*(void *)(v34 - 160) + 32))(v34 - 160);
  }
  else if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 40))(v36);
  }
  if (a34 == &a31)
  {
    (*(void (**)(uint64_t *))(a31 + 32))(&a31);
  }
  else if (a34)
  {
    (*(void (**)(void))(*a34 + 40))();
  }
  if (a30 == &a27)
  {
    (*(void (**)(uint64_t *))(a27 + 32))(&a27);
    _Unwind_Resume(a1);
  }
  if (a30)
  {
    (*(void (**)(void))(*a30 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos2Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5830E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::CommonMesh::Pos2Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5830E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 296);
  uint64_t v4 = *(void *)(v2 + 304);
  if (v3 != v4)
  {
    float32x4_t v6 = *a2;
    int v7 = 1;
    do
    {
      float32x4_t v8 = *(std::__shared_weak_count **)(v3 + 8);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(void *)(v3 + 16);
      if (*(unsigned char *)(*(void *)(v9 + 40) + 64)) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      if (!*(unsigned char *)(*(void *)(v9 + 40) + 64)) {
        ++v7;
      }
      *(_DWORD *)uint64_t v9 = v10;
      altitude::Route::cull((md::realistic::RouteRenderLayer **)v9, **(altitude::View ***)(a1 + 16), *(karo::graphics::Viewport **)(*(void *)(*(void *)(a1 + 24) + 736) + 24), v6);
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
}

__n128 std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57A100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void md::realistic::RouteRenderLayer::~RouteRenderLayer(md::realistic::RouteRenderLayer *this)
{
  md::realistic::RouteRenderLayer::~RouteRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;

  *(void *)this = &unk_1EF5547C0;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 16);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  float32x4_t v5 = *((void *)this + 19);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  float32x4_t v6 = *((void *)this + 18);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  }
  float32x4_t v8 = *((void *)this + 37);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 38);
    int v10 = (void *)*((void *)this + 37);
    if (v9 != v8)
    {
      do
      {
        unint64_t v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v9 -= 24;
      }
      while (v9 != v8);
      int v10 = (void *)*((void *)this + 37);
    }
    *((void *)this + 38) = v8;
    operator delete(v10);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 34);
    if (!v13) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 34);
    if (!v13) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_28:
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unsigned int v15 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v15) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v15 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v15) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_34:
  unsigned int v16 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    int v17 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v17) {
      goto LABEL_40;
    }
  }
  else
  {
    int v17 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v17) {
      goto LABEL_40;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_40:
  unsigned int v18 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = (uint64_t *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v19)
  {
    uint64_t v20 = (std::__shared_weak_count *)v19[3];
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    int v21 = v19[1];
    v19[1] = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *v19;
    *uint64_t v19 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    MEMORY[0x1A6239270](v19, 0x20C40DC1BFBCFLL);
  }
  unsigned int v23 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates((md::realistic::RouteRenderLayer *)((char *)this + 56));
  *(void *)this = &unk_1EF530C60;
  __n128 v24 = (void *)*((void *)this + 1);
  if (v24)
  {
    *((void *)this + 2) = v24;
    operator delete(v24);
  }
}

uint64_t **std::unique_ptr<ggl::Drawable>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[3];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = v2[1];
    v2[1] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *v2;
    *uint64_t v2 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    MEMORY[0x1A6239270](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::StenciledAlphaClear::ClearPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::StenciledAlphaClear::ClearPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::StenciledAlphaClear::ClearPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverManeuver::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverManeuver::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5840E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverManeuver::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5840E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverTraffic::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverTraffic::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverTraffic::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverRoute::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverRoute::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5837B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverRoute::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5837B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View> *,std::shared_ptr<ggl::ConstantData>::__shared_ptr_default_delete<ggl::ConstantData,ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRibbon::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t md::realistic::RouteRenderLayer::routeTexture(md::realistic::RouteRenderLayer *this)
{
  if (!*((void *)this + 35)) {
    md::realistic::RealisticRenderLayer::createRibbonTexture(this);
  }
  return *((void *)this + 35);
}

void sub_1A1E1A01C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture2D>::__shared_ptr_default_delete<ggl::Texture2D,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture2D>::__shared_ptr_default_delete<ggl::Texture2D,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::realistic::RouteRenderLayer::loadStylesheet(md::realistic::RouteRenderLayer *this)
{
  if (!*((void *)this + 20))
  {
    uint64_t v2 = *(void *)(*((void *)this + 5) + 128);
    uint64_t v3 = *(void *)(v2 + 608);
    uint64_t v4 = *(void *)(v2 + 616);
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
    *((void *)this + 20) = v3;
    *((void *)this + 21) = v4;
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      uint64_t v3 = *((void *)this + 20);
    }
    if (v3)
    {
      uint64_t v6 = gss::Allocator::instance(this);
      uint64_t v27 = v6;
      int v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 8, 4);
      float32x4_t v8 = v7;
      *(void *)&long long v25 = v7;
      char v26 = (char *)(v7 + 1);
      if (v7) {
        *int v7 = 0xB00000005;
      }
      *((void *)&v25 + 1) = v7 + 1;
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v28, (uint64_t)&v25);
      if (v8) {
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 40))(v6, v8, 8);
      }
      memset(v23, 0, sizeof(v23));
      char v24 = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v25, *((void *)this + 20), (gss::FeatureAttributeSet *)v28, (gss::QueryOverrides *)v23);
      long long v9 = v25;
      long long v25 = 0uLL;
      int v10 = (std::__shared_weak_count *)*((void *)this + 32);
      *(_OWORD *)((char *)this + 248) = v9;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      unint64_t v11 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      if (*((void *)&v25 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v23, 0x10002u) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v25, *((void *)this + 20), (gss::FeatureAttributeSet *)v28, (gss::QueryOverrides *)v23);
      long long v12 = v25;
      long long v25 = 0uLL;
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 30);
      *(_OWORD *)((char *)this + 232) = v12;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      if (*((void *)&v25 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      uint64_t v15 = *((void *)this + 20);
      md::TrafficStyleAttributes((gss::Allocator *)&v25, 1);
      memset(v30, 0, 15);
      v30[15] = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v22, v15, (gss::FeatureAttributeSet *)&v25, (gss::QueryOverrides *)v30);
      long long v17 = v22;
      unsigned int v18 = (std::__shared_weak_count *)*((void *)this + 28);
      long long v22 = 0uLL;
      *(_OWORD *)((char *)this + 216) = v17;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      uint64_t v19 = (std::__shared_weak_count *)*((void *)&v22 + 1);
      if (*((void *)&v22 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      if ((void)v25)
      {
        *((void *)&v25 + 1) = v25;
        unsigned int v16 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, char *))(*(void *)v27 + 40))(v27, v25, &v26[-v25]);
      }
      if (!v23[14])
      {
        uint64_t v20 = *(void *)v23;
        if (*(void *)v23)
        {
          uint64_t v21 = gss::Allocator::instance(v16);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 40))(v21, v20, *(unsigned __int16 *)&v23[12]);
        }
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        (*(void (**)(uint64_t, void, void))(*(void *)v29 + 40))(v29, v28[0], v28[2] - v28[0]);
      }
    }
  }
}

void sub_1A1E1A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v20 - 48));
  if (a13)
  {
    a14 = a13;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a16 + 40))(a16, a13, a15 - a13);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a11);
  if (a17)
  {
    a18 = a17;
    (*(void (**)(uint64_t))(*(void *)a20 + 40))(a20);
  }
  _Unwind_Resume(a1);
}

void md::realistic::RouteRenderLayer::removeRouteData(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[37];
  uint64_t v3 = (void *)a1[38];
  if (v4 == v3) {
    goto LABEL_93;
  }
  while (*v4 != a2)
  {
    v4 += 3;
    if (v4 == v3) {
      goto LABEL_93;
    }
  }
  uint64_t v5 = (void *)v4[2];
  if (v5)
  {
    uint64_t v6 = (void *)v5[13];
    int v7 = (void *)v5[14];
    if (v6 != v7)
    {
      do
      {
        if (*v6) {
          (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
        }
        ++v6;
      }
      while (v6 != v7);
      uint64_t v6 = (void *)v5[13];
    }
    v5[14] = v6;
    float32x4_t v8 = (void *)v5[25];
    if (!v8) {
      goto LABEL_47;
    }
    uint64_t v9 = *(void *)(*(void *)(v8[1] + 40) + 128);
    char v45 = 14;
    strcpy((char *)__s2, "routeAnimation");
    int v10 = *(void **)(v9 + 232);
    unint64_t v11 = *(void **)(v9 + 240);
    if (v10 == v11)
    {
LABEL_40:
      uint64_t v20 = v8[2];
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      void v8[2] = 0;
      uint64_t v21 = v8[7];
      v8[7] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      long long v22 = (void *)v8[3];
      if (v22)
      {
        v8[4] = v22;
        operator delete(v22);
      }
      MEMORY[0x1A6239270](v8, 0x1020C40ECFF1FB5);
LABEL_47:
      unsigned int v23 = (void *)v5[26];
      if (v23)
      {
        uint64_t v24 = v23[8];
        v23[8] = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        v23[3] = v23[2];
        v23[6] = v23[5];
        uint64_t v25 = v23[10];
        v23[10] = 0;
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        }
        uint64_t v26 = v23[9];
        v23[9] = 0;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        uint64_t v27 = v23[8];
        v23[8] = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        uint64_t v28 = (void *)v23[5];
        if (v28)
        {
          v23[6] = v28;
          operator delete(v28);
        }
        uint64_t v29 = (void *)v23[2];
        if (v29)
        {
          v23[3] = v29;
          operator delete(v29);
        }
        MEMORY[0x1A6239270](v23, 0x1020C40ADF5E449);
      }
      uint64_t v30 = (void *)v5[27];
      if (v30)
      {
        v30[3] = v30[2];
        uint64_t v31 = v30[5];
        v30[5] = 0;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          uint64_t v32 = v30[5];
          v30[5] = 0;
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
        unint64_t v33 = (void *)v30[2];
        if (v33)
        {
          v30[3] = v33;
          operator delete(v33);
        }
        MEMORY[0x1A6239270](v30, 0x20C40A759441BLL);
      }
      uint64_t v34 = (void *)v5[22];
      if (v34)
      {
        v5[23] = v34;
        operator delete(v34);
      }
      uint64_t v35 = (void *)v5[19];
      if (v35)
      {
        v5[20] = v35;
        operator delete(v35);
      }
      uint64_t v36 = (void *)v5[13];
      if (v36)
      {
        v5[14] = v36;
        operator delete(v36);
      }
      uint64_t v37 = (void *)v5[10];
      if (v37)
      {
        v5[11] = v37;
        operator delete(v37);
      }
      uint64_t v38 = (void *)v5[7];
      if (v38)
      {
        v5[8] = v38;
        operator delete(v38);
      }
      MEMORY[0x1A6239270](v5, 0x10A0C40FFFC3140);
      uint64_t v3 = (void *)a1[38];
      goto LABEL_79;
    }
    while (1)
    {
      uint64_t v12 = *((unsigned __int8 *)v10 + 39);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = *((unsigned __int8 *)v10 + 39);
      }
      else {
        uint64_t v13 = v10[3];
      }
      if (v13 != 14) {
        goto LABEL_16;
      }
      uint64_t v14 = (const void **)(v10 + 2);
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*v14, __s2, v10[3])) {
          goto LABEL_26;
        }
LABEL_16:
        v10 += 5;
        if (v10 == v11) {
          goto LABEL_40;
        }
      }
      else
      {
        if (*((unsigned char *)v10 + 39))
        {
          uint64_t v15 = (unsigned __int8 *)__s2;
          while (*(unsigned __int8 *)v14 == *v15)
          {
            uint64_t v14 = (const void **)((char *)v14 + 1);
            ++v15;
            if (!--v12) {
              goto LABEL_26;
            }
          }
          goto LABEL_16;
        }
LABEL_26:
        if (*v10)
        {
          (*(void (**)(void))(*(void *)*v10 + 24))(*v10);
          unint64_t v11 = *(void **)(v9 + 240);
        }
        if (v10 + 5 == v11)
        {
          long long v17 = v10;
        }
        else
        {
          unsigned int v16 = v10;
          do
          {
            *(_OWORD *)unsigned int v16 = *(_OWORD *)(v16 + 5);
            uint64_t v19 = (void **)(v16 + 2);
            if (*((char *)v16 + 39) < 0) {
              operator delete(*v19);
            }
            *(_OWORD *)uint64_t v19 = *(_OWORD *)(v16 + 7);
            v16[4] = v16[9];
            *((unsigned char *)v16 + 79) = 0;
            *((unsigned char *)v16 + 56) = 0;
            long long v17 = v16 + 5;
            unsigned int v18 = v16 + 10;
            v16 += 5;
          }
          while (v18 != v11);
          unint64_t v11 = *(void **)(v9 + 240);
        }
        while (v11 != v17)
        {
          if (*((char *)v11 - 1) < 0) {
            operator delete((void *)*(v11 - 3));
          }
          v11 -= 5;
        }
        *(void *)(v9 + 240) = v17;
        unint64_t v11 = v17;
        if (v10 == v17) {
          goto LABEL_40;
        }
      }
    }
  }
LABEL_79:
  uint64_t v39 = v4 + 3;
  if (v4 + 3 != v3)
  {
    do
    {
      uint64_t v4 = v39;
      long long v40 = *(_OWORD *)v39;
      *uint64_t v39 = 0;
      v39[1] = 0;
      uint64_t v41 = (std::__shared_weak_count *)*(v39 - 2);
      *(_OWORD *)(v39 - 3) = v40;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      *(v4 - 1) = v4[2];
      uint64_t v39 = v4 + 3;
    }
    while (v4 + 3 != v3);
    uint64_t v3 = (void *)a1[38];
  }
  for (; v3 != v4; v3 -= 3)
  {
    uint64_t v42 = (std::__shared_weak_count *)*(v3 - 2);
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  a1[38] = v4;
LABEL_93:
  uint64_t v43 = **(void **)(*(void *)(*(void *)(a1[5] + 128) + 856) + 88);
  if (v43)
  {
    LOBYTE(__s2[0]) = 7;
    md::MapEngine::setNeedsTick(v43, __s2);
  }
}

uint64_t md::CartographicRenderer::onLayoutStart(md::CartographicRenderer *this, md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::CartographicRenderer *, md::LayoutContext *))(*(void *)this + 16))(this, a2);
}

void md::CartographicRenderer::~CartographicRenderer(md::CartographicRenderer *this)
{
  md::CartographicRenderer::~CartographicRenderer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  void v3[3];
  void *v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF53D348;
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  v3[0] = &unk_1EF575000;
  uint64_t v4 = v3;
  geo::TaskQueue::barrierSync(v2, v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  md::Renderer::~Renderer(this);
}

void sub_1A1E1AD50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  md::Renderer::~Renderer(v2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A1E1ADBCLL);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void std::__function::__func<md::CartographicRenderer::~CartographicRenderer()::$_0,std::allocator<md::CartographicRenderer::~CartographicRenderer()::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF575000;
}

void *std::__function::__func<md::CartographicRenderer::~CartographicRenderer()::$_0,std::allocator<md::CartographicRenderer::~CartographicRenderer()::$_0>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF575000;
  return result;
}

void std::__function::__func<md::CartographicRenderer::~CartographicRenderer()::$_0,std::allocator<md::CartographicRenderer::~CartographicRenderer()::$_0>,void ()(void)>::~__func()
{
}

void sub_1A1E1AE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E1B50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v4);
  _Unwind_Resume(a1);
}

void sub_1A1E1B5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1E1B8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t md::LegacyTrafficLayerDataSource::useOptionalResources(md::LegacyTrafficLayerDataSource *this)
{
  return 0;
}

BOOL md::LegacyTrafficLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, void *a4)
{
  BOOL result = md::TrafficLayerDataSource::updateRequest(a1, a2, a3, a4);
  *(unsigned char *)(a1 + 784) = result;
  return result;
}

void md::LegacyTrafficLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    while (*(_WORD *)v8 != 17)
    {
      v8 += 48;
      if (v8 == v9) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == v9 || *(void *)(v8 + 32) != 1)
  {
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v11 = *(void *)(v10 + 112);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_11:
    uint64_t v151 = v11;
    unint64_t v152 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v151 = v11;
  unint64_t v152 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_12:
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  if (*a3 != v14)
  {
    while (*(_WORD *)v13 != 16)
    {
      v13 += 48;
      if (v13 == v14) {
        goto LABEL_21;
      }
    }
  }
  if (v13 == v14 || *(void *)(v13 + 32) != 1)
  {
LABEL_21:
    unsigned int v16 = 0;
    goto LABEL_22;
  }
  uint64_t v15 = *(void *)(v13 + 24);
  unsigned int v16 = *(int8x8_t **)(v15 + 112);
  long long v17 = *(std::__shared_weak_count **)(v15 + 120);
  if (!v17)
  {
LABEL_22:
    int v149 = v16;
    uint64_t v150 = 0;
    goto LABEL_23;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  int v149 = v16;
  uint64_t v150 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_23:
  if (v151 && v149)
  {
    sp_mut = std::__get_sp_mut((const void *)(a1 + 760));
    std::__sp_mut::lock(sp_mut);
    uint64_t v19 = *(std::__shared_weak_count **)(a1 + 768);
    uint64_t v147 = *(void *)(a1 + 760);
    uint64_t v148 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__sp_mut::unlock(sp_mut);
    uint64_t v20 = *a3;
    uint64_t v21 = a3[1];
    if (*a3 != v21)
    {
      while (*(_WORD *)v20 != 9)
      {
        v20 += 48;
        if (v20 == v21) {
          goto LABEL_38;
        }
      }
    }
    if (v20 == v21 || *(void *)(v20 + 32) != 1)
    {
LABEL_38:
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v22 = *(void *)(v20 + 24);
      uint64_t v23 = *(void *)(v22 + 112);
      uint64_t v24 = *(std::__shared_weak_count **)(v22 + 120);
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v145 = v23;
        uint64_t v146 = v24;
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
LABEL_40:
        (*(void (**)(uint64_t *__return_ptr))(*(void *)[*(id *)(a1 + 776) gglDevice] + 24))(&v144);
        uint64_t v25 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v25->__shared_owners_ = 0;
        v25->__shared_weak_owners_ = 0;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
        uint64_t v26 = ggl::BufferData::BufferData((uint64_t)&v25[1], qword_1E9552208, 2, 1, 6, 1);
        v25[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E258;
        uint64_t v142 = v26;
        uint64_t v143 = v25;
        md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v140);
        memset(v139, 0, sizeof(v139));
        gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v139);
        uint64_t v135 = 0;
        long long v136 = &v135;
        uint64_t v137 = 0x2020000000;
        uint64_t v138 = 0;
        uint64_t v131 = 0;
        uint64_t v132 = &v131;
        uint64_t v133 = 0x2020000000;
        uint64_t v134 = 0;
        md::trafficStyleAttributes(v129, *(geo::codec::VectorTile **)(v145 + 144));
        *(void *)((char *)&v107 + 7) = 0;
        *(void *)&long long v107 = 0;
        HIBYTE(v107) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v127, v147, (gss::FeatureAttributeSet *)v129, (gss::QueryOverrides *)&v107);
        memset_pattern16(&__b, &unk_1A28FFCB0, 0x10uLL);
        uint64_t v27 = +[VKDebugSettings sharedSettings];
        uint64_t v71 = a2;
        int v28 = [v27 loadGreenTraffic];

        uint64_t v29 = v127;
        if (v127)
        {
          uint64_t v30 = v128;
          long long v124 = v127;
          long long v125 = v128;
          if (v128) {
            atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          md::TrafficMeshStyle::setup(__b.i32, (uint64_t)v29, v30, v28);
          if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v31.i64[0] = 0x500000005;
        v31.i64[1] = 0x500000005;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(__b, v31)))) & 1) == 0)
        {
LABEL_98:
          uint64_t v57 = v136[3];
          uint64_t v58 = v132[3];
          int32x4_t v59 = operator new(0x328uLL);
          v59[1] = 0;
          v59[2] = 0;
          *int32x4_t v59 = &unk_1EF5800C8;
          *(void *)&long long v107 = v57;
          uint64_t v98 = v58;
          md::TrafficTileData::TrafficTileData(v59 + 3, v71, &v142, (uint64_t *)&v107, &v98, (uint64_t)v129, (uint64_t)v139);
          if (v98) {
            (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
          }
          if ((void)v107) {
            (*(void (**)(void))(*(void *)v107 + 8))(v107);
          }
          *a4 = v59 + 3;
          a4[1] = v59;
          uint64_t v60 = v128;
          if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
          if (v129[0])
          {
            v129[1] = v129[0];
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v130 + 40))(v130, v129[0], v129[2] - v129[0]);
          }
          _Block_object_dispose(&v131, 8);
          _Block_object_dispose(&v135, 8);
          if (v139[0]) {
            operator delete(v139[0]);
          }
          uint64_t v61 = v141;
          if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
          uint64_t v62 = v143;
          if (v143 && !atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
          if (v144)
          {
            uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v144 + 24))(v144);
            uint64_t v64 = v144;
            uint64_t v144 = 0;
            *(void *)&long long v107 = v64;
            (*(void (**)(uint64_t, long long *))(*(void *)v63 + 48))(v63, &v107);
            uint64_t v65 = v107;
            *(void *)&long long v107 = 0;
            if (v65) {
              (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
            }
            uint64_t v66 = v144;
            uint64_t v144 = 0;
            if (v66) {
              (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
            }
          }
          uint64_t v67 = v146;
          if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          uint64_t v68 = v148;
          if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            uint64_t v39 = v68;
            goto LABEL_126;
          }
          goto LABEL_127;
        }
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = &v107;
        uint64_t v108 = 0x11812000000;
        uint64_t v109 = __Block_byref_object_copy__826;
        long long v110 = __Block_byref_object_dispose__827;
        long long v111 = "";
        memset(v112, 0, 96);
        v112[96] = 3;
        uint64_t v114 = 0;
        int v113 = 0;
        int v115 = -1054867456;
        uint64_t v116 = 0;
        unint64_t v117 = 0xFFFFFFF6FFFFFFFFLL;
        int v118 = -1054867456;
        long long v119 = 0u;
        long long v120 = 0u;
        uint64_t v121 = 0;
        unint64_t v122 = 0xFFFFFFFF00000000;
        __int16 v123 = 0;
        uint64_t v98 = 0;
        uint64_t v99 = &v98;
        uint64_t v100 = 0x5812000000;
        long long v101 = __Block_byref_object_copy__7_829;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v102 = __Block_byref_object_dispose__8_830;
        uint64_t v105 = 0;
        int v106 = 1065353216;
        long long v89 = 0;
        long long v90 = (uint64_t *)&v89;
        uint64_t v91 = 0x5812000000;
        uint64_t v92 = __Block_byref_object_copy__9_831;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v93 = __Block_byref_object_dispose__10_832;
        uint64_t v96 = 0;
        int v97 = 1065353216;
        uint64_t v80 = 0;
        long long v81 = &v80;
        uint64_t v82 = 0x5812000000;
        long long v83 = __Block_byref_object_copy__11;
        long long v85 = 0u;
        long long v86 = 0u;
        uint64_t v84 = __Block_byref_object_dispose__12;
        uint64_t v87 = 0;
        int v88 = 1065353216;
        v78[0] = MEMORY[0x1E4F143A8];
        v78[1] = 3221225472;
        v78[2] = ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke;
        v78[3] = &unk_1E5A8BEA8;
        int32x4_t v79 = __b;
        v78[4] = &v107;
        v78[5] = &v98;
        v78[6] = &v89;
        v78[7] = &v80;
        uint64_t v32 = (void *)MEMORY[0x1A6239EB0](v78);
        unint64_t v33 = *(zilch::TrafficSkeletonTile **)(v151 + 144);
        uint64_t v34 = *(std::__shared_weak_count **)(v151 + 152);
        if (v34)
        {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (zilch::TrafficSkeletonTile::size(v33)) {
          uint64_t v35 = zilch::TrafficSkeletonTile::operator[]();
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v40 = v145;
        uint64_t v41 = v151;
        uint64_t v42 = *(zilch::TrafficSkeletonTile **)(v151 + 144);
        uint64_t v43 = *(std::__shared_weak_count **)(v151 + 152);
        uint64_t v153 = (void (**)(void **))v42;
        uint64_t v154 = (uint64_t)v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v44 = zilch::TrafficSkeletonTile::size(v42);
        md::buildTrafficMesh(v40, (uint64_t)&__b, v41, v35, 0, v44, v149, v32, &v147, v28, 4u);
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        md::TrafficAccum::flushToRibbonCollection(*((void *)&v107 + 1) + 48, (uint64_t)&__b, v99 + 6, v90 + 6, v81 + 6);
        v74[0] = MEMORY[0x1E4F143A8];
        v74[1] = 3321888768;
        v74[2] = ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_3;
        v74[3] = &unk_1EF58EB08;
        v74[4] = &v135;
        v74[5] = &v98;
        v74[8] = v142;
        uint64_t v75 = v143;
        if (v143) {
          atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v76 = v140;
        uint64_t v77 = v141;
        if (v141) {
          atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v74[6] = &v131;
        v74[7] = &v89;
        uint64_t v155 = 0;
        uint64_t v153 = (void (**)(void **))&unk_1EF56BC58;
        uint64_t v154 = MEMORY[0x1A6239EB0](v74);
        uint64_t v155 = (void **)&v153;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        (*(void (**)(uint64_t, void (***)(void **), uint64_t *))(*(void *)v144 + 16))(v144, &v153, &v72);
        char v45 = v73;
        if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        if (v155 == (void **)&v153)
        {
          v153[4]((void **)&v153);
          unint64_t v46 = v77;
          if (!v77)
          {
LABEL_82:
            uint64_t v47 = v75;
            if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }

            _Block_object_dispose(&v80, 8);
            uint64_t v48 = (void *)*((void *)&v86 + 1);
            if (*((void *)&v86 + 1))
            {
              do
              {
                unint64_t v49 = (void *)*v48;
                std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v48 + 2));
                operator delete(v48);
                uint64_t v48 = v49;
              }
              while (v49);
            }
            uint64_t v50 = (void *)*((void *)&v85 + 1);
            *((void *)&v85 + 1) = 0;
            if (v50) {
              operator delete(v50);
            }
            _Block_object_dispose(&v89, 8);
            uint64_t v51 = (void *)*((void *)&v95 + 1);
            if (*((void *)&v95 + 1))
            {
              do
              {
                unint64_t v52 = (void *)*v51;
                std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v51 + 2));
                operator delete(v51);
                uint64_t v51 = v52;
              }
              while (v52);
            }
            unint64_t v53 = (void *)*((void *)&v94 + 1);
            *((void *)&v94 + 1) = 0;
            if (v53) {
              operator delete(v53);
            }
            _Block_object_dispose(&v98, 8);
            uint64_t v54 = (void *)*((void *)&v104 + 1);
            if (*((void *)&v104 + 1))
            {
              do
              {
                uint64_t v55 = (void *)*v54;
                std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v54 + 2));
                operator delete(v54);
                uint64_t v54 = v55;
              }
              while (v55);
            }
            uint64_t v56 = (void *)*((void *)&v103 + 1);
            *((void *)&v103 + 1) = 0;
            if (v56) {
              operator delete(v56);
            }
            _Block_object_dispose(&v107, 8);
            md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)v112);
            goto LABEL_98;
          }
        }
        else
        {
          if (v155) {
            (*((void (**)(void))*v155 + 5))();
          }
          unint64_t v46 = v77;
          if (!v77) {
            goto LABEL_82;
          }
        }
        if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        goto LABEL_82;
      }
    }
    uint64_t v145 = v23;
    uint64_t v146 = 0;
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 784) || !*(unsigned char *)(a1 + 785))
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v36 = (atomic_ullong *)operator new(0xE8uLL);
    v36[1] = 0;
    v36[2] = 0;
    *uint64_t v36 = (atomic_ullong)&unk_1EF586DB8;
    uint64_t v37 = (gss::Allocator *)ggl::BufferData::BufferData((uint64_t)(v36 + 3), qword_1E9552208, 2, 1, 6, 1);
    v36[28] = (atomic_ullong)ggl::Tile::View::reflection(void)::reflection;
    v36[3] = (atomic_ullong)&unk_1EF55E258;
    long long v89 = v37;
    long long v90 = v36;
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    uint64_t v109 = (__n128 (*)(uint64_t, uint64_t))gss::Allocator::instance(v37);
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v38 = operator new(0x328uLL);
    v38[1] = 0;
    v38[2] = 0;
    *uint64_t v38 = &unk_1EF5800C8;
    uint64_t v80 = 0;
    uint64_t v135 = 0;
    md::TrafficTileData::TrafficTileData(v38 + 3, a2, (uint64_t *)&v89, &v80, &v135, (uint64_t)&v107, (uint64_t)&v98);
    if (v135) {
      (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
    }
    if (v80) {
      (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
    }
    *a4 = v38 + 3;
    a4[1] = v38;
    if ((void)v107)
    {
      *((void *)&v107 + 1) = v107;
      (*(void (**)(__n128 (*)(uint64_t, uint64_t), void, uint64_t))(*(void *)v109 + 40))(v109, v107, v108 - v107);
    }
    if (!atomic_fetch_add(v36 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v36 + 16))(v36);
      uint64_t v39 = (std::__shared_weak_count *)v36;
LABEL_126:
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_127:
  uint64_t v69 = v150;
  if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
  BOOL v70 = v152;
  if (v152)
  {
    if (!atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_1A1E1C9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, md::TrafficAccum *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x378]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x378] + 8))(STACK[0x378]);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8))(a37);
  }
  std::__shared_weak_count::~__shared_weak_count(v72);
  operator delete(v75);
  if (a70)
  {
    a71 = a70;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)STACK[0x200] + 40))(STACK[0x200], a70, a72 - a70);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a48);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v73 - 168);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v73 - 152);
  _Unwind_Resume(a1);
}

void sub_1A1E1CCB8()
{
}

__n128 __Block_byref_object_copy__826(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v2 = *(_OWORD *)(a2 + 144);
  long long v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  __n128 result = *(__n128 *)(a2 + 224);
  long long v5 = *(_OWORD *)(a2 + 240);
  long long v6 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v5;
  *(_OWORD *)(a1 + 256) = v6;
  *(__n128 *)(a1 + 224) = result;
  return result;
}

void __Block_byref_object_dispose__827(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__7_829(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__8_830(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__9_831(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__10_832(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t __Block_byref_object_copy__11(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  long long v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke(_OWORD *a1, std::__shared_weak_count **this, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, char a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, char a15, uint64_t a16, char a17)
{
  int v24 = (int)a3;
  unint64_t v50 = 0;
  uint64_t v27 = geo::codec::multiSectionFeatureCharacteristicPoints(this, (GeoCodecsRoadFeature *)&v50, a3);
  if (v50)
  {
    unint64_t v28 = 0;
    unsigned int v29 = 0;
    while (*((_DWORD *)v27 + 25 * v28 + 2) != a4)
    {
      unint64_t v28 = v29 + 1;
      unsigned int v29 = v28;
      unsigned int v30 = v28;
      if (v50 <= v28) {
        goto LABEL_8;
      }
    }
    unsigned int v30 = v29;
  }
  else
  {
    unsigned int v30 = 0;
    unint64_t v28 = 0;
  }
LABEL_8:
  if (v28 == v50)
  {
    unsigned int v31 = 0;
    unsigned int v30 = 0;
  }
  else
  {
    unsigned int v32 = v30 + 1;
    do
    {
      unsigned int v31 = v32;
      if (v50 <= v32) {
        break;
      }
      int v33 = *((_DWORD *)v27 + 25 * v32++ + 2);
    }
    while (v33 == a4);
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_2;
  v35[3] = &unk_1E5A8BE80;
  char v47 = a17;
  char v48 = a8;
  int v41 = a5;
  int v42 = a6;
  int v43 = a4;
  float v44 = a9;
  char v49 = a15;
  uint64_t v38 = this;
  uint64_t v39 = a7;
  long long v34 = a1[3];
  long long v45 = a1[4];
  long long v36 = a1[2];
  long long v37 = v34;
  int v46 = v24;
  uint64_t v40 = a16;
  md::splitRoadSectionByZ(a11, a14, (uint64_t)v27 + 100 * v30, v31 - v30, v35, a9, a10);
}

void ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_3()
{
}

void sub_1A1E1D32C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10E1C4095CD5A37);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    long long v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void (***)(void, uint64_t))*--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6)
        {
          (**v5)(v5, v4);
          {
            operator new();
          }
          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v5, 104);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v4, *(void *)(a1 + 48) - v4);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::TrafficBatchKey const,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void __destroy_helper_block_ea8_64c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE80c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v3) {
      return;
    }
  }
  else
  {
    long long v3 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_ea8_64c68_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile4ViewEEEEE80c73_ZTSNSt3__110shared_ptrIN3ggl17ConstantDataTypedINS1_4Tile9TransformEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    int v73 = a6[24];
    if (a6[24])
    {
      char v7 = a6[1];
      char v74 = *a6;
      uint64_t v8 = *(void *)(a6 + 4);
    }
    else
    {
      char v74 = 0;
    }
    *(void *)a1 = &unk_1EF553BD0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    if (v73)
    {
      *(unsigned char *)(a1 + 80) = v74;
      *(unsigned char *)(a1 + 81) = v7;
      *(void *)(a1 + 84) = v8;
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v75 = operator new(0xF8uLL);
    v75[1] = 0;
    uint64_t v75[2] = 0;
    *uint64_t v75 = &unk_1EF584B28;
    ggl::BufferData::BufferData((uint64_t)(v75 + 3), 48, 0, 0, 1, 0);
    v75[29] = "BatchType/VData";
    v75[30] = &ggl::OptimizedTraffic::defaultVboReflection;
    v75[3] = &unk_1EF55C748;
    v75[28] = &unk_1EF55C768;
    uint64_t v76 = operator new(0xF8uLL);
    v76[1] = 0;
    _OWORD v76[2] = 0;
    void *v76 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v76 + 3), 2, 1, 0, 1, 0);
    *((_DWORD *)v76 + 60) = 0;
    v76[3] = &unk_1EF55B630;
    v76[4] = 2;
    v76[28] = &unk_1EF55B650;
    v76[29] = "BatchType/IData";
    operator new();
  }
  long long v78 = 0uLL;
  {
    operator new();
  }
  uint64_t v79 = mdm::Allocator::instance(void)::alloc;
  uint64_t v80 = 0;
  {
    operator new();
  }
  uint64_t v81 = mdm::Allocator::instance(void)::alloc;
  unint64_t v82 = 0;
  float v83 = 1.0;
  uint64_t v9 = *(uint64_t **)(a3 + 48);
  uint64_t v10 = *(uint64_t **)(a3 + 56);
  while (1)
  {
    if (v9 == v10) {
      operator new();
    }
    unsigned int v12 = ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(*v9 + 88), *(float **)(*v9 + 72), 0);
    unsigned int v13 = v12;
    unint64_t v14 = v12;
    size_t v15 = *((void *)&v78 + 1);
    if (*((void *)&v78 + 1))
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v78 + 8));
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v6 = v12;
        if (*((void *)&v78 + 1) <= (unint64_t)v12) {
          unint64_t v6 = (unint64_t)v12 % *((void *)&v78 + 1);
        }
      }
      else
      {
        unint64_t v6 = (DWORD2(v78) - 1) & v12;
      }
      long long v17 = *(uint64_t **)(v78 + 8 * v6);
      if (v17)
      {
        uint64_t v18 = *v17;
        if (*v17)
        {
          if (v16.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v20 = *(void *)(v18 + 8);
              if (v20 == v12)
              {
                if (*(_DWORD *)(v18 + 16) == v12) {
                  goto LABEL_88;
                }
              }
              else if ((v20 & (*((void *)&v78 + 1) - 1)) != v6)
              {
                goto LABEL_28;
              }
              uint64_t v18 = *(void *)v18;
              if (!v18) {
                goto LABEL_28;
              }
            }
          }
          do
          {
            unint64_t v19 = *(void *)(v18 + 8);
            if (v19 == v12)
            {
              if (*(_DWORD *)(v18 + 16) == v12) {
                goto LABEL_88;
              }
            }
            else
            {
              if (v19 >= *((void *)&v78 + 1)) {
                v19 %= *((void *)&v78 + 1);
              }
              if (v19 != v6) {
                break;
              }
            }
            uint64_t v18 = *(void *)v18;
          }
          while (v18);
        }
      }
    }
LABEL_28:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, 56, 8);
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = v14;
    *(_DWORD *)(v18 + 16) = v13;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    *(void *)(v18 + 24) = 0;
    {
      operator new();
    }
    *(void *)(v18 + 48) = mdm::Allocator::instance(void)::alloc;
    float v21 = (float)(v82 + 1);
    if (!*((void *)&v78 + 1) || (float)(v83 * (float)*((unint64_t *)&v78 + 1)) < v21) {
      break;
    }
LABEL_78:
    int v42 = *(uint64_t **)(v78 + 8 * v6);
    if (v42)
    {
      *(void *)uint64_t v18 = *v42;
LABEL_86:
      *int v42 = v18;
      goto LABEL_87;
    }
    *(void *)uint64_t v18 = v80;
    uint64_t v80 = v18;
    *(void *)(v78 + 8 * v6) = &v80;
    if (*(void *)v18)
    {
      size_t v43 = *(void *)(*(void *)v18 + 8);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v43 >= v15) {
          v43 %= v15;
        }
      }
      else
      {
        v43 &= v15 - 1;
      }
      int v42 = (uint64_t *)(v78 + 8 * v43);
      goto LABEL_86;
    }
LABEL_87:
    ++v82;
LABEL_88:
    float v44 = *(void **)(v18 + 32);
    unint64_t v45 = *(void *)(v18 + 40);
    if ((unint64_t)v44 < v45)
    {
      if (v44)
      {
        uint64_t v46 = *v9;
        *uint64_t v9 = 0;
        void *v44 = v46;
      }
      uint64_t v11 = v44 + 1;
      goto LABEL_6;
    }
    uint64_t v47 = *(void *)(v18 + 24);
    uint64_t v48 = ((uint64_t)v44 - v47) >> 3;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61) {
      abort();
    }
    uint64_t v50 = v45 - v47;
    if (v50 >> 2 > v49) {
      unint64_t v49 = v50 >> 2;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v51 = v49;
    }
    if (v51)
    {
      uint64_t v52 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 48) + 16))(*(void *)(v18 + 48), 8 * v51, 8);
      unint64_t v53 = (void *)(v52 + 8 * v48);
      uint64_t v54 = v52 + 8 * v51;
      if (v52)
      {
        uint64_t v55 = *v9;
        *uint64_t v9 = 0;
        void *v53 = v55;
      }
    }
    else
    {
      uint64_t v54 = 0;
      unint64_t v53 = (void *)(8 * v48);
    }
    uint64_t v11 = v53 + 1;
    uint64_t v56 = *(void **)(v18 + 24);
    unint64_t v57 = *(void *)(v18 + 32);
    if ((void *)v57 == v56)
    {
      *(void *)(v18 + 24) = v53;
      *(void *)(v18 + 32) = v11;
      unint64_t v6 = *(void *)(v18 + 40);
      *(void *)(v18 + 40) = v54;
      goto LABEL_115;
    }
    unint64_t v58 = v57 - (void)v56 - 8;
    if (v58 <= 0x47
      || (unint64_t v59 = v58 >> 3, v57 - 8 * v59 - 8 < (unint64_t)v53) && (unint64_t)&v53[-v59 - 1] < v57)
    {
      uint64_t v60 = *(void **)(v18 + 32);
      do
      {
LABEL_106:
        uint64_t v61 = *--v60;
        *uint64_t v60 = 0;
        *--unint64_t v53 = v61;
      }
      while (v60 != v56);
      goto LABEL_107;
    }
    unint64_t v65 = v59 + 1;
    uint64_t v66 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v60 = (void *)(v57 - 8 * v66);
    uint64_t v67 = v53 - 2;
    uint64_t v68 = (long long *)(v57 - 32);
    uint64_t v69 = v66;
    do
    {
      long long v71 = *v68;
      long long v70 = v68[1];
      *uint64_t v68 = 0uLL;
      v68[1] = 0uLL;
      v68 -= 2;
      *(v67 - 1) = v71;
      *uint64_t v67 = v70;
      v67 -= 2;
      v69 -= 4;
    }
    while (v69);
    v53 -= v66;
    if (v65 != v66) {
      goto LABEL_106;
    }
LABEL_107:
    unint64_t v57 = *(void *)(v18 + 24);
    uint64_t v62 = *(void **)(v18 + 32);
    *(void *)(v18 + 24) = v53;
    *(void *)(v18 + 32) = v11;
    unint64_t v6 = *(void *)(v18 + 40);
    *(void *)(v18 + 40) = v54;
    while (v62 != (void *)v57)
    {
      uint64_t v64 = (void (***)(void))*--v62;
      uint64_t v63 = v64;
      *uint64_t v62 = 0;
      if (v64)
      {
        (**v63)(v63);
        {
          operator new();
        }
        (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v63, 104);
      }
    }
LABEL_115:
    if (v57) {
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v18 + 48) + 40))(*(void *)(v18 + 48), v57, v6 - v57);
    }
LABEL_6:
    *(void *)(v18 + 32) = v11;
    ++v9;
  }
  BOOL v22 = (*((void *)&v78 + 1) & (*((void *)&v78 + 1) - 1)) != 0;
  if (*((void *)&v78 + 1) < 3uLL) {
    BOOL v22 = 1;
  }
  unint64_t v23 = v22 | (2 * *((void *)&v78 + 1));
  unint64_t v24 = vcvtps_u32_f32(v21 / v83);
  if (v23 <= v24) {
    size_t prime = v24;
  }
  else {
    size_t prime = v23;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  size_t v15 = *((void *)&v78 + 1);
  if (prime <= *((void *)&v78 + 1))
  {
    if (prime >= *((void *)&v78 + 1)) {
      goto LABEL_65;
    }
    unint64_t v36 = vcvtps_u32_f32((float)v82 / v83);
    if (*((void *)&v78 + 1) < 3uLL
      || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v78 + 8)), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      unint64_t v36 = std::__next_prime(v36);
    }
    else
    {
      uint64_t v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2) {
        unint64_t v36 = v38;
      }
    }
    if (prime <= v36) {
      size_t prime = v36;
    }
    if (prime >= *((void *)&v78 + 1))
    {
      size_t v15 = *((void *)&v78 + 1);
LABEL_65:
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v15 <= v14) {
          unint64_t v6 = v14 % v15;
        }
        else {
          unint64_t v6 = v14;
        }
      }
      else
      {
        unint64_t v6 = (v15 - 1) & v14;
      }
      goto LABEL_78;
    }
    if (!prime)
    {
      uint64_t v72 = v78;
      *(void *)&long long v78 = 0;
      if (v72) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79 + 40))(v79, v72, 8 * *((void *)&v78 + 1));
      }
      size_t v15 = 0;
      *((void *)&v78 + 1) = 0;
      goto LABEL_65;
    }
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v79 + 16))(v79, 8 * prime, 8);
  uint64_t v27 = v78;
  *(void *)&long long v78 = v26;
  if (v27) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79 + 40))(v79, v27, 8 * *((void *)&v78 + 1));
  }
  uint64_t v28 = 0;
  *((void *)&v78 + 1) = prime;
  do
    *(void *)(v78 + 8 * v28++) = 0;
  while (prime != v28);
  unsigned int v29 = (void **)v80;
  if (!v80)
  {
LABEL_64:
    size_t v15 = prime;
    goto LABEL_65;
  }
  size_t v30 = *(void *)(v80 + 8);
  size_t v31 = prime - 1;
  if ((prime & (prime - 1)) == 0)
  {
    size_t v32 = v30 & v31;
    *(void *)(v78 + 8 * v32) = &v80;
    for (uint64_t i = *v29; *v29; uint64_t i = *v29)
    {
      size_t v34 = i[1] & v31;
      if (v34 == v32)
      {
        unsigned int v29 = (void **)i;
      }
      else if (*(void *)(v78 + 8 * v34))
      {
        *unsigned int v29 = (void *)*i;
        uint64_t v35 = 8 * v34;
        *uint64_t i = **(void **)(v78 + v35);
        **(void **)(v78 + v35) = i;
      }
      else
      {
        *(void *)(v78 + 8 * v34) = v29;
        unsigned int v29 = (void **)i;
        size_t v32 = v34;
      }
    }
    goto LABEL_64;
  }
  if (v30 >= prime) {
    v30 %= prime;
  }
  *(void *)(v78 + 8 * v30) = &v80;
  uint64_t v39 = *v29;
  if (!*v29) {
    goto LABEL_64;
  }
  while (1)
  {
    size_t v41 = v39[1];
    if (v41 >= prime) {
      v41 %= prime;
    }
    if (v41 != v30)
    {
      if (!*(void *)(v78 + 8 * v41))
      {
        *(void *)(v78 + 8 * v41) = v29;
        goto LABEL_69;
      }
      *unsigned int v29 = (void *)*v39;
      uint64_t v40 = 8 * v41;
      *uint64_t v39 = **(void **)(v78 + v40);
      **(void **)(v78 + v40) = v39;
      uint64_t v39 = v29;
    }
    size_t v41 = v30;
LABEL_69:
    unsigned int v29 = (void **)v39;
    uint64_t v39 = (void *)*v39;
    size_t v30 = v41;
    if (!v39) {
      goto LABEL_64;
    }
  }
}

void sub_1A1E211BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t *a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41)
{
  MEMORY[0x1A6239270](v41, 0x1020C4007FF0C4BLL);
  if (v42) {
    operator delete(v42);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a21);
  float v44 = *a23;
  if (*a23)
  {
    *(void *)(a25 + 40) = v44;
    operator delete(v44);
  }
  unint64_t v45 = *a19;
  if (*a19)
  {
    *(void *)(a25 + 16) = v45;
    operator delete(v45);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  unint64_t v8 = 0;
  if (!a3)
  {
    int v73 = a6[24];
    if (a6[24])
    {
      char v6 = a6[1];
      char v74 = *a6;
      uint64_t v7 = *(void *)(a6 + 4);
    }
    else
    {
      char v74 = 0;
    }
    *(void *)a1 = &unk_1EF553BB0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 57) = 0u;
    if (v73)
    {
      *(unsigned char *)(a1 + 88) = v74;
      *(unsigned char *)(a1 + 89) = v6;
      *(void *)(a1 + 92) = v7;
      *(unsigned char *)(a1 + 112) = 1;
    }
    uint64_t v75 = operator new(0xF8uLL);
    v75[1] = 0;
    uint64_t v75[2] = 0;
    *uint64_t v75 = &unk_1EF584690;
    ggl::BufferData::BufferData((uint64_t)(v75 + 3), 20, 0, 0, 1, 0);
    v75[29] = "BatchType/VData";
    v75[30] = &ggl::TrafficBase::defaultVboReflection;
    v75[3] = &unk_1EF55C248;
    v75[28] = &unk_1EF55C268;
    uint64_t v76 = operator new(0xF8uLL);
    v76[1] = 0;
    _OWORD v76[2] = 0;
    void *v76 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v76 + 3), 2, 1, 0, 1, 0);
    *((_DWORD *)v76 + 60) = 0;
    v76[3] = &unk_1EF55B630;
    v76[4] = 2;
    v76[28] = &unk_1EF55B650;
    v76[29] = "BatchType/IData";
    float v83 = (char *)(v76 + 3);
    uint64_t v84 = (long long *)v76;
    operator new();
  }
  unint64_t v79 = 0;
  long long __p = 0;
  {
    operator new();
  }
  long long v80 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  long long v81 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v82) = 1065353216;
  uint64_t v9 = *(uint64_t **)(a3 + 48);
  uint64_t v10 = *(uint64_t **)(a3 + 56);
  while (1)
  {
    if (v9 == v10) {
      operator new();
    }
    unsigned int v12 = ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(*v9 + 88), *(float **)(*v9 + 72), 0);
    unsigned int v13 = v12;
    unint64_t v14 = v12;
    int8x8_t v15 = (int8x8_t)v79;
    if (v79)
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v8 = v12;
        if (v79 <= v12) {
          unint64_t v8 = v12 % v79;
        }
      }
      else
      {
        unint64_t v8 = (v79 - 1) & v12;
      }
      long long v17 = (uint64_t *)*((void *)__p + v8);
      if (v17)
      {
        uint64_t v18 = *v17;
        if (*v17)
        {
          if (v16.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v20 = *(void *)(v18 + 8);
              if (v20 == v12)
              {
                if (*(_DWORD *)(v18 + 16) == v12) {
                  goto LABEL_28;
                }
              }
              else if ((v20 & (v79 - 1)) != v8)
              {
                goto LABEL_29;
              }
              uint64_t v18 = *(void *)v18;
              if (!v18) {
                goto LABEL_29;
              }
            }
          }
          do
          {
            unint64_t v19 = *(void *)(v18 + 8);
            if (v19 == v12)
            {
              if (*(_DWORD *)(v18 + 16) == v12)
              {
LABEL_28:
                unint64_t v8 = 0;
                goto LABEL_89;
              }
            }
            else
            {
              if (v19 >= v79) {
                v19 %= v79;
              }
              if (v19 != v8) {
                break;
              }
            }
            uint64_t v18 = *(void *)v18;
          }
          while (v18);
        }
      }
    }
LABEL_29:
    uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, 56, 8);
    uint64_t v84 = &v81;
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = v14;
    *(_DWORD *)(v18 + 16) = v13;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    *(void *)(v18 + 24) = 0;
    {
      operator new();
    }
    *(void *)(v18 + 48) = mdm::Allocator::instance(void)::alloc;
    LOBYTE(v85) = 1;
    float v21 = (float)(unint64_t)(*((void *)&v81 + 1) + 1);
    if (!v79 || (float)(*(float *)&v82 * (float)v79) < v21) {
      break;
    }
LABEL_79:
    int v42 = (uint64_t *)*((void *)__p + v8);
    if (v42)
    {
      *(void *)uint64_t v18 = *v42;
      unint64_t v8 = 0;
LABEL_87:
      *int v42 = v18;
      goto LABEL_88;
    }
    *(void *)uint64_t v18 = *((void *)&v80 + 1);
    *((void *)&v80 + 1) = v18;
    *((void *)__p + v8) = (char *)&v80 + 8;
    unint64_t v8 = 0;
    if (*(void *)v18)
    {
      unint64_t v43 = *(void *)(*(void *)v18 + 8);
      if ((*(void *)&v15 & (*(void *)&v15 - 1)) != 0)
      {
        if (v43 >= *(void *)&v15) {
          v43 %= *(void *)&v15;
        }
      }
      else
      {
        v43 &= *(void *)&v15 - 1;
      }
      int v42 = (uint64_t *)((char *)__p + 8 * v43);
      goto LABEL_87;
    }
LABEL_88:
    ++*((void *)&v81 + 1);
LABEL_89:
    float v44 = *(void **)(v18 + 32);
    unint64_t v45 = *(void *)(v18 + 40);
    if ((unint64_t)v44 < v45)
    {
      if (v44)
      {
        uint64_t v46 = *v9;
        *uint64_t v9 = 0;
        void *v44 = v46;
      }
      uint64_t v11 = v44 + 1;
      goto LABEL_6;
    }
    uint64_t v47 = *(void *)(v18 + 24);
    uint64_t v48 = ((uint64_t)v44 - v47) >> 3;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61) {
      abort();
    }
    uint64_t v50 = v45 - v47;
    if (v50 >> 2 > v49) {
      unint64_t v49 = v50 >> 2;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v51 = v49;
    }
    if (v51)
    {
      uint64_t v52 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 48) + 16))(*(void *)(v18 + 48), 8 * v51, 8);
      unint64_t v53 = (void *)(v52 + 8 * v48);
      uint64_t v54 = v52 + 8 * v51;
      if (v52)
      {
        uint64_t v55 = *v9;
        *uint64_t v9 = 0;
        void *v53 = v55;
      }
    }
    else
    {
      uint64_t v54 = 0;
      unint64_t v53 = (void *)(8 * v48);
    }
    uint64_t v11 = v53 + 1;
    uint64_t v56 = *(void **)(v18 + 24);
    unint64_t v57 = *(void *)(v18 + 32);
    if ((void *)v57 == v56)
    {
      *(void *)(v18 + 24) = v53;
      *(void *)(v18 + 32) = v11;
      uint64_t v63 = *(void *)(v18 + 40);
      *(void *)(v18 + 40) = v54;
      goto LABEL_116;
    }
    unint64_t v58 = v57 - (void)v56 - 8;
    if (v58 <= 0x47
      || (unint64_t v59 = v58 >> 3, v57 - 8 * v59 - 8 < (unint64_t)v53) && (unint64_t)&v53[-v59 - 1] < v57)
    {
      uint64_t v60 = *(void **)(v18 + 32);
      do
      {
LABEL_107:
        uint64_t v61 = *--v60;
        *uint64_t v60 = 0;
        *--unint64_t v53 = v61;
      }
      while (v60 != v56);
      goto LABEL_108;
    }
    unint64_t v65 = v59 + 1;
    uint64_t v66 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v60 = (void *)(v57 - 8 * v66);
    uint64_t v67 = v53 - 2;
    uint64_t v68 = (long long *)(v57 - 32);
    uint64_t v69 = v66;
    do
    {
      long long v71 = *v68;
      long long v70 = v68[1];
      *uint64_t v68 = 0uLL;
      v68[1] = 0uLL;
      v68 -= 2;
      *(v67 - 1) = v71;
      *uint64_t v67 = v70;
      v67 -= 2;
      v69 -= 4;
    }
    while (v69);
    v53 -= v66;
    if (v65 != v66) {
      goto LABEL_107;
    }
LABEL_108:
    unint64_t v57 = *(void *)(v18 + 24);
    uint64_t v62 = *(void **)(v18 + 32);
    *(void *)(v18 + 24) = v53;
    *(void *)(v18 + 32) = v11;
    uint64_t v63 = *(void *)(v18 + 40);
    *(void *)(v18 + 40) = v54;
    while (v62 != (void *)v57)
    {
      unint64_t v64 = *--v62;
      unint64_t v8 = v64;
      *uint64_t v62 = 0;
      if (v64)
      {
        (**(void (***)(unint64_t))v8)(v8);
        {
          operator new();
        }
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v8, 104);
      }
    }
LABEL_116:
    if (v57) {
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v18 + 48) + 40))(*(void *)(v18 + 48), v57, v63 - v57);
    }
LABEL_6:
    *(void *)(v18 + 32) = v11;
    ++v9;
  }
  BOOL v22 = (v79 & (v79 - 1)) != 0;
  if (v79 < 3) {
    BOOL v22 = 1;
  }
  unint64_t v23 = v22 | (2 * v79);
  unint64_t v24 = vcvtps_u32_f32(v21 / *(float *)&v82);
  if (v23 <= v24) {
    int8x8_t prime = (int8x8_t)v24;
  }
  else {
    int8x8_t prime = (int8x8_t)v23;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
  }
  int8x8_t v15 = (int8x8_t)v79;
  if (*(void *)&prime <= v79)
  {
    if (*(void *)&prime >= v79) {
      goto LABEL_66;
    }
    unint64_t v36 = vcvtps_u32_f32((float)*((unint64_t *)&v81 + 1) / *(float *)&v82);
    if (v79 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v79), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      unint64_t v36 = std::__next_prime(v36);
    }
    else
    {
      uint64_t v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2) {
        unint64_t v36 = v38;
      }
    }
    if (*(void *)&prime <= v36) {
      int8x8_t prime = (int8x8_t)v36;
    }
    if (*(void *)&prime >= v79)
    {
      int8x8_t v15 = (int8x8_t)v79;
LABEL_66:
      if ((*(void *)&v15 & (*(void *)&v15 - 1)) != 0)
      {
        if (*(void *)&v15 <= v14) {
          unint64_t v8 = v14 % *(void *)&v15;
        }
        else {
          unint64_t v8 = v14;
        }
      }
      else
      {
        unint64_t v8 = (v15.i32[0] - 1) & v14;
      }
      goto LABEL_79;
    }
    if (!*(void *)&prime)
    {
      uint64_t v72 = __p;
      long long __p = 0;
      if (v72) {
        (*(void (**)(void, void *, unint64_t))(*(void *)v80 + 40))(v80, v72, 8 * v79);
      }
      int8x8_t v15 = 0;
      unint64_t v79 = 0;
      goto LABEL_66;
    }
  }
  uint64_t v26 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v80 + 16))(v80, 8 * *(void *)&prime, 8);
  uint64_t v27 = __p;
  long long __p = v26;
  if (v27) {
    (*(void (**)(void, void *, unint64_t))(*(void *)v80 + 40))(v80, v27, 8 * v79);
  }
  uint64_t v28 = 0;
  unint64_t v79 = (unint64_t)prime;
  do
    *((void *)__p + v28++) = 0;
  while (*(void *)&prime != v28);
  unsigned int v29 = (void **)*((void *)&v80 + 1);
  if (!*((void *)&v80 + 1))
  {
LABEL_65:
    int8x8_t v15 = prime;
    goto LABEL_66;
  }
  unint64_t v30 = *(void *)(*((void *)&v80 + 1) + 8);
  uint64_t v31 = *(void *)&prime - 1;
  if ((*(void *)&prime & (*(void *)&prime - 1)) == 0)
  {
    uint64_t v32 = v30 & v31;
    *((void *)__p + v32) = (char *)&v80 + 8;
    for (uint64_t i = *v29; *v29; uint64_t i = *v29)
    {
      uint64_t v34 = i[1] & v31;
      if (v34 == v32)
      {
        unsigned int v29 = (void **)i;
      }
      else if (*((void *)__p + v34))
      {
        *unsigned int v29 = (void *)*i;
        uint64_t v35 = 8 * v34;
        *uint64_t i = **(void **)((char *)__p + v35);
        **(void **)((char *)__p + v35) = i;
      }
      else
      {
        *((void *)__p + v34) = v29;
        unsigned int v29 = (void **)i;
        uint64_t v32 = v34;
      }
    }
    goto LABEL_65;
  }
  if (v30 >= *(void *)&prime) {
    v30 %= *(void *)&prime;
  }
  *((void *)__p + v30) = (char *)&v80 + 8;
  uint64_t v39 = *v29;
  if (!*v29) {
    goto LABEL_65;
  }
  while (1)
  {
    unint64_t v41 = v39[1];
    if (v41 >= *(void *)&prime) {
      v41 %= *(void *)&prime;
    }
    if (v41 != v30)
    {
      if (!*((void *)__p + v41))
      {
        *((void *)__p + v41) = v29;
        goto LABEL_70;
      }
      *unsigned int v29 = (void *)*v39;
      uint64_t v40 = 8 * v41;
      *uint64_t v39 = **(void **)((char *)__p + v40);
      **(void **)((char *)__p + v40) = v39;
      uint64_t v39 = v29;
    }
    unint64_t v41 = v30;
LABEL_70:
    unsigned int v29 = (void **)v39;
    uint64_t v39 = (void *)*v39;
    unint64_t v30 = v41;
    if (!v39) {
      goto LABEL_65;
    }
  }
}

void sub_1A1E25A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t *a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  MEMORY[0x1A6239270](v53, 0x1020C4007FF0C4BLL);
  if (v54) {
    operator delete(v54);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a27);
  uint64_t v56 = *a29;
  if (*a29)
  {
    *(void *)(a40 + 40) = v56;
    operator delete(v56);
  }
  unint64_t v57 = *a25;
  if (*a25)
  {
    *(void *)(a40 + 16) = v57;
    operator delete(v57);
    if (!a53) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!a53)
  {
    goto LABEL_8;
  }
  operator delete(a53);
  goto LABEL_8;
}

void md::SolidTrafficLayer::~SolidTrafficLayer(md::SolidTrafficLayer *this)
{
  *(void *)this = &unk_1EF531078;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF531078;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553BB0;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[10];
  a1[10] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  unint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531078;
  uint64_t v2 = (std::__shared_weak_count *)a1[18];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[16];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[16];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531078;
  uint64_t v2 = (std::__shared_weak_count *)a1[18];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[16];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[16];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

void md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(uint64_t a1, void *a2, std::vector<unsigned int> *a3, uint64_t *a4)
{
  *a4 = 1;
  unint64_t v8 = *(void *)(a1 + 88);
  unint64_t v9 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      a2[1] = *a2 + 8 * v8;
    }
  }
  else
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)a2, v8 - v9);
    unint64_t v8 = *(void *)(a1 + 88);
  }
  begiuint64_t n = a3->__begin_;
  unint64_t v11 = a3->__end_ - a3->__begin_;
  if (v8 <= v11)
  {
    if (v8 < v11) {
      a3->__end_ = &begin[v8];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v8 - v11);
    begiuint64_t n = a3->__begin_;
    unint64_t v8 = *(void *)(a1 + 88);
  }
  unsigned int v12 = (_DWORD *)*a2;
  unsigned int v13 = *(_DWORD **)(a1 + 72);
  *unsigned int v12 = *v13;
  v12[1] = v13[1];
  *begiuint64_t n = 0;
  if (v8 >= 2)
  {
    uint64_t v14 = *a4;
    int8x8_t v15 = v13 + 2;
    for (unint64_t i = 1; i < v8; ++i)
    {
      long long v17 = &v12[2 * v14];
      if (*(void *)v15 != *((void *)v17 - 1))
      {
        begin[v14++] = i;
        *a4 = v14;
        *long long v17 = *v15;
        v17[1] = v15[1];
        unint64_t v8 = *(void *)(a1 + 88);
      }
      v15 += 2;
    }
  }
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TrafficBase::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = (int8x16_t *)result;
LABEL_2:
  uint64_t v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *uint64_t v160 = v66;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *uint64_t v160 = v69;
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      long long v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          char v74 = (uint64_t *)v7;
          do
          {
            uint64_t v76 = v71;
            uint64_t v77 = v74[1];
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              long long v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *long long v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (i = v78; ; uint64_t v79 = *i)
              {
                *unint64_t i = v80;
                unint64_t i = v74;
                *char v74 = 0;
                if (v79)
                {
                  long long v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    long long v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        uint64_t v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        *long long v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 104);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                char v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              unint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              uint64_t v76 = (int8x16_t *)v163;
            }
            long long v71 = (int8x16_t *)&v76->u64[1];
            char v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          uint64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            uint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *uint64_t v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            uint64_t v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              *uint64_t j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                uint64_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  uint64_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      uint64_t v148 = (void (***)(void, uint64_t))*--v145;
                      uint64_t v147 = v148;
                      *uint64_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 104);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              uint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            uint64_t v138 = (int8x16_t *)v164;
          }
          long long v71 = (int8x16_t *)&v138->u64[1];
          uint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    unint64_t v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      unsigned int v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      *unsigned int v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      uint8x8_t v16 = v7;
      do
      {
        long long v17 = v16;
        uint64_t v19 = v16->i64[1];
        uint8x8_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      uint64_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        uint64_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        unint64_t v24 = (uint64_t *)v16;
        uint64_t v25 = v20;
        do
        {
          *unint64_t v24 = v23;
          *uint64_t v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          long long v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        float v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          float v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      unint64_t v45 = a2;
      if (v7 < a2)
      {
        unint64_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          unint64_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            unint64_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        uint64_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        uint64_t v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *uint64_t v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            long long v111 = v100;
            *uint64_t v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            uint64_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            uint64_t v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        long long v120 = (uint64_t *)v6;
        do
        {
          long long v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *long long v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          long long v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        long long v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          uint64_t v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *long long v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *long long v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              long long v136 = v133;
              *uint64_t v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              long long v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            uint64_t v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      char v4 = *(void **)(v2 + 64);
      uint64_t v5 = *(void *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = (void (***)(void, uint64_t))*--v4;
          uint64_t v6 = v7;
          *char v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 104);
          }
        }
        while (v4 != v3);
        uint64_t v5 = *(void *)(v2 + 56);
      }
      *(void *)(v2 + 64) = v3;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 80) + 40))(*(void *)(v2 + 80), v5, *(void *)(v2 + 72) - v5);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v5 = (uint64_t *)*v2;
      uint64_t v6 = (void *)v2[3];
      if (v6)
      {
        uint64_t v7 = (void *)v2[4];
        uint64_t v4 = v2[3];
        if (v7 != v6)
        {
          do
          {
            uint64_t v9 = (void (***)(void, uint64_t))*--v7;
            uint64_t v8 = v9;
            *uint64_t v7 = 0;
            if (v9)
            {
              (**v8)(v8, v4);
              {
                  operator new();
              }
              (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 104);
            }
          }
          while (v7 != v6);
          uint64_t v4 = v2[3];
        }
        v2[4] = (uint64_t)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[6] + 40))(v2[6], v4, v2[5] - v4);
      }
      __n128 result = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v2, 56);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      uint8x8_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  *uint64_t v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

uint64_t std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 8))
  {
    BOOL v4 = *(void **)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void **)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v5 != v4)
      {
        do
        {
          uint64_t v8 = (void (***)(void, uint64_t))*--v5;
          uint64_t v7 = v8;
          void *v5 = 0;
          if (v8)
          {
            (**v7)(v7, v6);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
          }
        }
        while (v5 != v4);
        uint64_t v6 = *(void *)(a2 + 24);
      }
      *(void *)(a2 + 32) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v6, *(void *)(a2 + 40) - v6);
    }
  }
  else if (!a2)
  {
    return result;
  }
  uint64_t v9 = *(uint64_t (**)(void))(***(void ***)v3 + 40);
  return v9();
}

void md::PilledTrafficLayer::~PilledTrafficLayer(md::PilledTrafficLayer *this)
{
  *(void *)this = &unk_1EF531098;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF531098;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553BD0;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  BOOL v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531098;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531098;
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[15];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonLayer(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::OptimizedTraffic::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = (int8x16_t *)result;
LABEL_2:
  uint64_t v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *uint64_t v160 = v66;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *uint64_t v160 = v69;
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      long long v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          char v74 = (uint64_t *)v7;
          do
          {
            uint64_t v76 = v71;
            uint64_t v77 = v74[1];
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              long long v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *long long v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (i = v78; ; uint64_t v79 = *i)
              {
                *unint64_t i = v80;
                unint64_t i = v74;
                *char v74 = 0;
                if (v79)
                {
                  long long v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    long long v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        uint64_t v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        *long long v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 104);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                char v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              unint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              uint64_t v76 = (int8x16_t *)v163;
            }
            long long v71 = (int8x16_t *)&v76->u64[1];
            char v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          uint64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            uint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *uint64_t v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            uint64_t v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              *uint64_t j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                uint64_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  uint64_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      uint64_t v148 = (void (***)(void, uint64_t))*--v145;
                      uint64_t v147 = v148;
                      *uint64_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 104);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              uint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            uint64_t v138 = (int8x16_t *)v164;
          }
          long long v71 = (int8x16_t *)&v138->u64[1];
          uint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    uint64_t v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      uint64_t v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      *uint64_t v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      uint8x8_t v16 = v7;
      do
      {
        uint64_t v17 = v16;
        uint64_t v19 = v16->i64[1];
        uint8x8_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      uint64_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        uint64_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        unint64_t v24 = (uint64_t *)v16;
        uint64_t v25 = v20;
        do
        {
          *unint64_t v24 = v23;
          *uint64_t v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          uint64_t v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        float v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          float v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      unint64_t v45 = a2;
      if (v7 < a2)
      {
        unint64_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          unint64_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            unint64_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        uint64_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        uint64_t v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *uint64_t v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            long long v111 = v100;
            *uint64_t v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            uint64_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            uint64_t v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        long long v120 = (uint64_t *)v6;
        do
        {
          long long v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *long long v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          long long v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        long long v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          uint64_t v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *long long v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *long long v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              long long v136 = v133;
              *uint64_t v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              long long v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            uint64_t v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::batch(std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PilledTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      uint8x8_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  *uint64_t v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::SolidTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

void ___ZNK2md28LegacyTrafficLayerDataSource15createLayerDataERKN3gdc19LayerDataRequestKeyERKN3geo10linear_mapItNSt3__113unordered_mapINS1_11ResourceKeyENS7_10shared_ptrINS1_8ResourceEEENS1_15ResourceKeyHashENS7_8equal_toIS9_EENS7_9allocatorINS7_4pairIKS9_SC_EEEEEENSE_ItEENSG_INSH_ItSL_EEEENS7_6vectorISN_SO_EEEEx_block_invoke_2(uint64_t a1, int a2, char *a3, int a4, int a5, float a6, float a7, double a8, int8x16_t a9)
{
  uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(a1 + 124)) {
    goto LABEL_32;
  }
  if (*(unsigned __int8 *)(v16 + 144) != *(unsigned __int8 *)(a1 + 125)) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(v16 + 148) != *(_DWORD *)(a1 + 88)) {
    goto LABEL_32;
  }
  if (*(unsigned __int8 *)(v16 + 272) != *(unsigned __int8 *)(a1 + 126)) {
    goto LABEL_32;
  }
  int v17 = *(_DWORD *)(a1 + 92);
  if (*(_DWORD *)(v16 + 152) != v17) {
    goto LABEL_32;
  }
  float v18 = *(float *)(a1 + 100);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(v16 + 168);
  if (v20)
  {
    if (*(unsigned __int8 *)(v19 + 153) != *(unsigned __int8 *)(v20 + 153)) {
      goto LABEL_32;
    }
  }
  if (*(unsigned char *)(v16 + 273) && **(void **)(a1 + 72) != *(void *)(v16 + 192)
    || *(void *)(v16 + 208)
    || *(_DWORD *)(v16 + 244) != a2)
  {
    goto LABEL_32;
  }
  uint64_t v21 = *(void *)(v16 + 56);
  if (*(void *)(v16 + 48) == v21) {
    goto LABEL_36;
  }
  if (v20 != v19 || *(_DWORD *)(v16 + 180) != (unint64_t)*(unsigned int *)(a1 + 96)) {
    goto LABEL_32;
  }
  float v22 = *(float *)(v16 + 184);
  if (v17 < 0)
  {
    if (v22 < v18 || (float)(v22 - v18) > 1.0)
    {
LABEL_32:
      md::TrafficAccum::flushToRibbonCollection(v16 + 48, a1 + 104, (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), (uint64_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 48), (uint64_t *)(*(void *)(*(void *)(a1 + 56) + 8) + 48));
      uint64_t v30 = *(void *)(*(void *)(a1 + 32) + 8) + 48;
      int v31 = *(_DWORD *)(a1 + 120);
      char v32 = *(unsigned char *)(a1 + 125);
      int v33 = *(_DWORD *)(a1 + 88);
      int v34 = *(_DWORD *)(a1 + 92);
      uint64_t v35 = *(void *)(a1 + 64);
      uint64_t v36 = *(uint64_t **)(a1 + 72);
      uint64_t v37 = *v36;
      unint64_t v38 = (std::__shared_weak_count *)v36[1];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        md::TrafficAccum::reset(v30, v35, v31, v32, v33, v34, v37, (uint64_t)v38, &v46, a2, *(unsigned char *)(a1 + 126));
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      else
      {
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        md::TrafficAccum::reset(v30, v35, v31, v32, v33, v34, v37, 0, &v46, a2, *(unsigned char *)(a1 + 126));
      }
      goto LABEL_36;
    }
  }
  else if (v22 > v18 || (float)(v18 - v22) > 1.0)
  {
    goto LABEL_32;
  }
  *(float *)&a8 = ceilf(v18);
  float v25 = floorf(v18);
  if (v17 <= 0) {
    *(float *)&a8 = v25;
  }
  *(double *)a9.i64 = vabds_f32(*(float *)&a8, v18);
  uint64_t v26 = *(void *)(v16 + 224);
  if (*(double *)a9.i64 <= 0.01)
  {
    float32x2_t v28 = *(float32x2_t *)(v26 + 8 * (int)*(float *)&a8);
  }
  else
  {
    int v27 = (float32x2_t *)(v26 + 8 * (int)v25);
    a8 = COERCE_DOUBLE(vsub_f32(v27[1], *v27));
    float32x2_t v28 = vmla_n_f32(*v27, *(float32x2_t *)&a8, v18 - v25);
  }
  float32x2_t v29 = vsub_f32(*(float32x2_t *)(v21 - 8), v28);
  if (vaddv_f32(vmul_f32(v29, v29)) >= 0.0001) {
    goto LABEL_32;
  }
LABEL_36:
  uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 8);
  int v40 = *(_DWORD *)(a1 + 120);
  int v41 = *(_DWORD *)(a1 + 96);
  *(void *)(v39 + 168) = *(void *)(a1 + 64);
  *(_DWORD *)(v39 + 176) = v40;
  *(_DWORD *)(v39 + 180) = v41;
  *(float *)(v39 + 184) = a7;
  unint64_t v42 = (float32x2_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  uint64_t v43 = *(float **)(a1 + 80);
  if (a5)
  {
    float v44 = a7;
    float v45 = a6;
  }
  else
  {
    float v44 = a6;
    float v45 = a7;
  }
  md::TrafficAccum::addPoints(v42, a3, 0, 0, a4, v43, v44, v45, a8, a9);
}

uint64_t std::__shared_ptr_emplace<md::TrafficTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5800C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TrafficTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5800C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LegacyTrafficLayerDataSource::~LegacyTrafficLayerDataSource(id *this)
{
  *this = &unk_1EF5426D8;
  uint64_t v2 = (std::__shared_weak_count *)this[96];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1EF5426D8;
  uint64_t v2 = (std::__shared_weak_count *)this[96];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)this);
}

void md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5753A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5753A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575360;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF575360;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0,std::allocator<md::VenueModeSwitchLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::ResolvedDependencies const&,md::VenueModeSwitchContext &)::$_0>,void ()(void)>::~__func()
{
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::VenueModeSwitchLogic,md::VenueModeSwitchContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xB6D730E769EC7123 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext>,gdc::TypeList<md::VenueLogicContext>>::resolveDependencies(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::VenueModeSwitchContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::VenueModeSwitchContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555A28;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1060C400373A306);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::VenueModeSwitchContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555A28;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1060C400373A306);
  }
  return a1;
}

void md::VenueModeSwitchLogic::~VenueModeSwitchLogic(md::VenueModeSwitchLogic *this)
{
  *(void *)this = &unk_1EF53EED8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EF53EED8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t altitude::HeightMeshBuilder::computeBounds<ggl::CommonMesh::BufferPos4UV>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>)
{
  if (*(unsigned __int8 *)(result + 1) > 0xBu)
  {
    float v15 = (float)(a7 + a6) * 0.5;
    *(double *)a5 = (float)(a6 - (float)(v15 + a8));
    *(float64x2_t *)(a5 + 8) = vcvtq_f64_f32(*(float32x2_t *)(a3 + 4));
    *(double *)(a5 + 24) = (float)(a7 - v15);
    *(float64x2_t *)(a5 + 32) = vcvtq_f64_f32(*(float32x2_t *)(a3 + 32 * (a2 * a2 - 1) + 4));
  }
  else
  {
    *(int64x2_t *)a5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(_OWORD *)(a5 + 16) = xmmword_1A28FC720;
    *(int64x2_t *)(a5 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (a4)
    {
      if (a4 > 3)
      {
        unint64_t v8 = a4 & 0xFFFFFFFFFFFFFFFCLL;
        float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        float64x2_t v17 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        float v18 = (__int32 *)(a3 + 64);
        unint64_t v19 = a4 & 0xFFFFFFFFFFFFFFFCLL;
        float64x2_t v20 = v17;
        float64x2_t v21 = v16;
        float64x2_t v22 = v17;
        float64x2_t v23 = v17;
        float64x2_t v24 = v16;
        float64x2_t v25 = v16;
        float64x2_t v26 = v17;
        float64x2_t v27 = v17;
        float64x2_t v28 = v16;
        float64x2_t v29 = v16;
        do
        {
          v30.i32[0] = *(v18 - 16);
          v31.i32[0] = *(v18 - 15);
          v30.i32[1] = *(v18 - 8);
          v32.i32[0] = *v18;
          v33.i32[0] = v18[1];
          v32.i32[1] = v18[8];
          float64x2_t v34 = vcvtq_f64_f32(v30);
          float64x2_t v35 = vcvtq_f64_f32(v32);
          v31.i32[1] = *(v18 - 7);
          v33.i32[1] = v18[9];
          float64x2_t v36 = vcvtq_f64_f32(v31);
          float64x2_t v37 = vcvtq_f64_f32(v33);
          v38.i32[0] = *(v18 - 14);
          v38.i32[1] = *(v18 - 6);
          v39.i32[0] = v18[2];
          v39.i32[1] = v18[10];
          float64x2_t v40 = vcvtq_f64_f32(v38);
          float64x2_t v41 = vcvtq_f64_f32(v39);
          float64x2_t v28 = vminnmq_f64(v28, v34);
          float64x2_t v29 = vminnmq_f64(v29, v35);
          float64x2_t v26 = vmaxnmq_f64(v26, v34);
          float64x2_t v27 = vmaxnmq_f64(v27, v35);
          float64x2_t v24 = vminnmq_f64(v24, v36);
          float64x2_t v25 = vminnmq_f64(v25, v37);
          float64x2_t v22 = vmaxnmq_f64(v22, v36);
          float64x2_t v23 = vmaxnmq_f64(v23, v37);
          float64x2_t v16 = vminnmq_f64(v16, v40);
          float64x2_t v21 = vminnmq_f64(v21, v41);
          float64x2_t v17 = vmaxnmq_f64(v17, v40);
          float64x2_t v20 = vmaxnmq_f64(v20, v41);
          v18 += 32;
          v19 -= 4;
        }
        while (v19);
        double v14 = vminnmvq_f64(vminnmq_f64(v28, v29));
        double v13 = vmaxnmvq_f64(vmaxnmq_f64(v26, v27));
        double v12 = vminnmvq_f64(vminnmq_f64(v24, v25));
        double v11 = vmaxnmvq_f64(vmaxnmq_f64(v22, v23));
        double v9 = vminnmvq_f64(vminnmq_f64(v16, v21));
        double v10 = vmaxnmvq_f64(vmaxnmq_f64(v17, v20));
        if (v8 == a4) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v8 = 0;
        double v9 = 1.79769313e308;
        double v10 = -1.79769313e308;
        double v11 = -1.79769313e308;
        double v12 = 1.79769313e308;
        double v13 = -1.79769313e308;
        double v14 = 1.79769313e308;
      }
      unint64_t v42 = a4 - v8;
      uint64_t v43 = (float *)(a3 + 32 * v8 + 8);
      do
      {
        double v44 = *(v43 - 2);
        double v45 = *(v43 - 1);
        float v46 = *v43;
        v43 += 8;
        double v14 = fmin(v14, v44);
        double v13 = fmax(v13, v44);
        double v12 = fmin(v12, v45);
        double v11 = fmax(v11, v45);
        double v9 = fmin(v9, v46);
        double v10 = fmax(v10, v46);
        --v42;
      }
      while (v42);
LABEL_12:
      *(double *)a5 = v14;
      *(double *)(a5 + 8) = v12;
      *(double *)(a5 + 16) = v9;
      *(double *)(a5 + 24) = v13;
      *(double *)(a5 + 32) = v11;
      *(double *)(a5 + 40) = v10;
    }
  }
  return result;
}

void altitude::HeightMeshBuilder::~HeightMeshBuilder(altitude::HeightMeshBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void altitude::HeightMeshBuilder::buildHeightMesh(uint64_t a1, const QuadTile *a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v571 = *MEMORY[0x1E4F143B8];
  LOBYTE(v8) = a2->_level;
  double v9 = (double)(1 << v8);
  double v10 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    unsigned int v8 = v10[34];
    int v11 = v10[35];
    int xIdx = v10[36];
    if (v8 >= 0x1F) {
      char v13 = 31;
    }
    else {
      char v13 = v8;
    }
    int yIdx = ~(-1 << v13) - v11;
    char type = -1;
  }
  else
  {
    int yIdx = a2->_yIdx;
    int xIdx = a2->_xIdx;
    char type = a2->_type;
  }
  char v560 = type;
  char v561 = v8;
  int v562 = yIdx;
  int v563 = xIdx;
  unint64_t hash = a2->_hash;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)&a2->_type;
  *(void *)(a1 + 192) = hash;
  *(_DWORD *)(a1 + 16) = a4;
  float v17 = 626172.136 / v9;
  float v558 = -3.4028e38;
  float v559 = 3.4028e38;
  if (a4 < 2)
  {
    altitude::HeightMeshBuilder::allocateMeshData((altitude::HeightMeshBuilder *)a1, a3, 1);
    uint64_t v41 = a1;
    uint64_t v42 = *(void *)(a1 + 24);
    unint64_t v43 = *(void *)(v42 + 48) - *(void *)(v42 + 40);
    unint64_t v44 = *(void *)(v42 + 8);
    unint64_t v45 = v43 / v44 * v44;
    unint64_t v46 = v43 % v44;
    if ((*(unsigned char *)(v42 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&v567.f64[0] = &v565;
      *(void *)std::string buf = &v567;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      uint64_t v41 = a1;
    }
    unint64_t v537 = v45;
    uint64_t v553 = v43;
    if (v43 == v46) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *(void *)(v42 + 72);
    }
    unsigned int v519 = (QuadTile *)a2;
    v33.n128_f32[0] = a5;
    altitude::HeightMeshBuilder::generateMesh<ggl::CommonMesh::BufferPos4UV>(v41, (uint64_t)a2, (uint64_t)&v560, a3, v47, &v559, &v558, v33, v34, v35, v36, v37, v38, v39, v40);
    int v61 = a3 * a3;
    uint64_t v62 = v47 + 32 * ((a3 * a3) & 0xFFFD);
    *(void *)uint64_t v62 = *(void *)v47;
    *(float *)(v62 + 8) = *(float *)(v47 + 8) - v17;
    float v63 = *(float *)(v47 + 20) + 0.015625;
    *(void *)(v62 + 12) = *(void *)(v47 + 12);
    *(float *)(v62 + 20) = v63;
    int v64 = a3 * a3;
    if (a3 >= 2)
    {
      int v65 = 0;
      unsigned int v66 = a3 - 1;
      int v64 = a3 * a3;
      do
      {
        __int16 v565 = v65;
        __int16 v564 = v64;
        LOWORD(v567.f64[0]) = ++v65;
        *(_WORD *)std::string buf = ++v64;
        uint64_t v67 = v47 + 32 * (unsigned __int16)v65;
        uint64_t v68 = v47 + 32 * (unsigned __int16)v64;
        *(void *)uint64_t v68 = *(void *)v67;
        *(float *)(v68 + 8) = *(float *)(v67 + 8) - v17;
        float v69 = *(float *)(v67 + 20) + 0.015625;
        *(void *)(v68 + 12) = *(void *)(v67 + 12);
        *(float *)(v68 + 20) = v69;
        --v66;
      }
      while (v66);
    }
    uint64_t v542 = v42;
    unsigned int v70 = a3 - 1;
    int v71 = v64 + 1;
    uint64_t v72 = v47 + 32 * (unsigned __int16)(a3 - 1);
    uint64_t v73 = v47 + 32 * (unsigned __int16)(v64 + 1);
    *(void *)uint64_t v73 = *(void *)v72;
    int v74 = *(_DWORD *)(v72 + 12);
    *(float *)(v73 + 8) = *(float *)(v72 + 8) - v17;
    *(_DWORD *)(v73 + 12) = v74;
    int v75 = *(_DWORD *)(v72 + 20);
    uint64_t v76 = (v61 - 1);
    *(float *)(v73 + 16) = *(float *)(v72 + 16) + -0.015625;
    *(_DWORD *)(v73 + 20) = v75;
    if (a3 >= 2)
    {
      unsigned int v77 = a3 - 1;
      unsigned int v78 = a3 - 1;
      do
      {
        __int16 v565 = v78;
        __int16 v564 = v71;
        v78 += a3;
        LOWORD(v567.f64[0]) = v78;
        *(_WORD *)std::string buf = ++v71;
        uint64_t v79 = v47 + 32 * (unsigned __int16)v78;
        uint64_t v80 = v47 + 32 * (unsigned __int16)v71;
        *(void *)uint64_t v80 = *(void *)v79;
        int v81 = *(_DWORD *)(v79 + 12);
        *(float *)(v80 + 8) = *(float *)(v79 + 8) - v17;
        *(_DWORD *)(v80 + 12) = v81;
        int v82 = *(_DWORD *)(v79 + 20);
        *(float *)(v80 + 16) = *(float *)(v79 + 16) + -0.015625;
        *(_DWORD *)(v80 + 20) = v82;
        --v77;
      }
      while (v77);
    }
    int v83 = v71 + 1;
    uint64_t v84 = v47 + 32 * (unsigned __int16)(v61 - 1);
    uint64_t v85 = v47 + 32 * (unsigned __int16)(v71 + 1);
    *(void *)uint64_t v85 = *(void *)v84;
    *(float *)(v85 + 8) = *(float *)(v84 + 8) - v17;
    float v86 = *(float *)(v84 + 20) + -0.015625;
    *(void *)(v85 + 12) = *(void *)(v84 + 12);
    *(float *)(v85 + 20) = v86;
    if (a3 >= 2)
    {
      unsigned int v87 = a3 - 1;
      int v88 = v61 - 1;
      do
      {
        __int16 v565 = v88;
        __int16 v564 = v83;
        LOWORD(v567.f64[0]) = --v88;
        *(_WORD *)std::string buf = ++v83;
        uint64_t v89 = v47 + 32 * (unsigned __int16)v88;
        uint64_t v90 = v47 + 32 * (unsigned __int16)v83;
        *(void *)uint64_t v90 = *(void *)v89;
        *(float *)(v90 + 8) = *(float *)(v89 + 8) - v17;
        float v91 = *(float *)(v89 + 20) + -0.015625;
        *(void *)(v90 + 12) = *(void *)(v89 + 12);
        *(float *)(v90 + 20) = v91;
        --v87;
      }
      while (v87);
    }
    unsigned int v92 = v61 - a3;
    int v93 = v83 + 1;
    uint64_t v94 = v47 + 32 * (unsigned __int16)(v61 - a3);
    uint64_t v95 = v47 + 32 * (unsigned __int16)(v83 + 1);
    *(void *)uint64_t v95 = *(void *)v94;
    int v96 = *(_DWORD *)(v94 + 12);
    *(float *)(v95 + 8) = *(float *)(v94 + 8) - v17;
    *(_DWORD *)(v95 + 12) = v96;
    int v97 = *(_DWORD *)(v94 + 20);
    *(float *)(v95 + 16) = *(float *)(v94 + 16) + 0.015625;
    *(_DWORD *)(v95 + 20) = v97;
    if (a3 >= 2)
    {
      do
      {
        __int16 v565 = v92;
        __int16 v564 = v93;
        v92 -= a3;
        LOWORD(v567.f64[0]) = v92;
        *(_WORD *)std::string buf = ++v93;
        uint64_t v98 = v47 + 32 * (unsigned __int16)v92;
        uint64_t v99 = v47 + 32 * (unsigned __int16)v93;
        *(void *)uint64_t v99 = *(void *)v98;
        int v100 = *(_DWORD *)(v98 + 12);
        *(float *)(v99 + 8) = *(float *)(v98 + 8) - v17;
        *(_DWORD *)(v99 + 12) = v100;
        int v101 = *(_DWORD *)(v98 + 20);
        *(float *)(v99 + 16) = *(float *)(v98 + 16) + 0.015625;
        *(_DWORD *)(v99 + 20) = v101;
        --v70;
      }
      while (v70);
    }
    float v103 = v558;
    float v102 = v559;
    float v104 = (float)(v558 + v559) * 0.5;
    altitude::HeightMeshBuilder::constructGeocentricFrameForTile((altitude::HeightMeshBuilder *)&v567, v519, v104);
    float64x2_t v105 = v568;
    *(float64x2_t *)(a1 + 72) = v567;
    *(double *)(a1 + 120) = v570;
    float64x2_t v106 = v569;
    *(float64x2_t *)(a1 + 88) = v105;
    *(float64x2_t *)(a1 + 104) = v106;
    altitude::HeightMeshBuilder::generateSmercCoordinates<ggl::CommonMesh::BufferPos4UV>(*(unsigned char *)(a1 + 200), (uint64_t)v519, (double *)(a1 + 72), a3, v47, (*(void *)(*(void *)(a1 + 24) + 48) - *(void *)(*(void *)(a1 + 24) + 40))/ *(void *)(*(void *)(a1 + 24) + 8), v104);
    unint64_t v30 = v537;
    uint64_t v27 = v542;
    if (v519->_level > 0xBu)
    {
      double v115 = *(float *)(v47 + 4);
      double v111 = *(float *)(v47 + 8);
      uint64_t v117 = v47 + 32 * v76;
      double v113 = *(float *)(v117 + 4);
      double v112 = *(float *)(v117 + 8);
      double v114 = (float)(v103 - v104);
      double v116 = (float)(v102 - (float)(v104 + v17));
      uint64_t v110 = (double *)a1;
      goto LABEL_41;
    }
    uint64_t v107 = *(void **)(a1 + 24);
    unint64_t v108 = v107[6] - v107[5];
    unint64_t v109 = v107[1];
    uint64_t v110 = (double *)a1;
    if (v109 > v108)
    {
      double v111 = 1.79769313e308;
      double v112 = -1.79769313e308;
      double v113 = -1.79769313e308;
      double v114 = -1.79769313e308;
      double v115 = 1.79769313e308;
      double v116 = 1.79769313e308;
LABEL_41:
      unint64_t v119 = v46;
      uint64_t v118 = v553;
      goto LABEL_117;
    }
    unint64_t v140 = v108 / v109;
    unint64_t v119 = v46;
    uint64_t v118 = v553;
    if (v140 >= 4)
    {
      unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v276 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      float64x2_t v277 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      double v278 = (__int32 *)(v47 + 64);
      unint64_t v279 = v140 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v280 = v277;
      float64x2_t v281 = v276;
      float64x2_t v282 = v277;
      float64x2_t v283 = v277;
      float64x2_t v284 = v276;
      float64x2_t v285 = v276;
      float64x2_t v286 = v277;
      float64x2_t v287 = v277;
      float64x2_t v288 = v276;
      float64x2_t v289 = v276;
      do
      {
        v290.i32[0] = *(v278 - 16);
        v291.i32[0] = *(v278 - 15);
        v290.i32[1] = *(v278 - 8);
        v292.i32[0] = *v278;
        v293.i32[0] = v278[1];
        v292.i32[1] = v278[8];
        float64x2_t v294 = vcvtq_f64_f32(v290);
        float64x2_t v295 = vcvtq_f64_f32(v292);
        v291.i32[1] = *(v278 - 7);
        v293.i32[1] = v278[9];
        float64x2_t v296 = vcvtq_f64_f32(v291);
        float64x2_t v297 = vcvtq_f64_f32(v293);
        v298.i32[0] = *(v278 - 14);
        v298.i32[1] = *(v278 - 6);
        v299.i32[0] = v278[2];
        v299.i32[1] = v278[10];
        float64x2_t v300 = vcvtq_f64_f32(v298);
        float64x2_t v301 = vcvtq_f64_f32(v299);
        float64x2_t v288 = vminnmq_f64(v288, v294);
        float64x2_t v289 = vminnmq_f64(v289, v295);
        float64x2_t v286 = vmaxnmq_f64(v286, v294);
        float64x2_t v287 = vmaxnmq_f64(v287, v295);
        float64x2_t v284 = vminnmq_f64(v284, v296);
        float64x2_t v285 = vminnmq_f64(v285, v297);
        float64x2_t v282 = vmaxnmq_f64(v282, v296);
        float64x2_t v283 = vmaxnmq_f64(v283, v297);
        float64x2_t v276 = vminnmq_f64(v276, v300);
        float64x2_t v281 = vminnmq_f64(v281, v301);
        float64x2_t v277 = vmaxnmq_f64(v277, v300);
        float64x2_t v280 = vmaxnmq_f64(v280, v301);
        v278 += 32;
        v279 -= 4;
      }
      while (v279);
      double v116 = vminnmvq_f64(vminnmq_f64(v288, v289));
      double v114 = vmaxnmvq_f64(vmaxnmq_f64(v286, v287));
      double v115 = vminnmvq_f64(vminnmq_f64(v284, v285));
      double v113 = vmaxnmvq_f64(vmaxnmq_f64(v282, v283));
      double v111 = vminnmvq_f64(vminnmq_f64(v276, v281));
      double v112 = vmaxnmvq_f64(vmaxnmq_f64(v277, v280));
      if (v140 == v141)
      {
LABEL_117:
        v110[16] = v116;
        v110[17] = v115;
        v110[18] = v111;
        v110[19] = v114;
        v110[20] = v113;
        v110[21] = v112;
        if (v118 != v119) {
          goto LABEL_209;
        }
        return;
      }
    }
    else
    {
      unint64_t v141 = 0;
      double v111 = 1.79769313e308;
      double v112 = -1.79769313e308;
      double v113 = -1.79769313e308;
      double v115 = 1.79769313e308;
      double v114 = -1.79769313e308;
      double v116 = 1.79769313e308;
    }
    unint64_t v302 = v140 - v141;
    unint64_t v303 = (float *)(v47 + 32 * v141 + 8);
    do
    {
      double v304 = *(v303 - 2);
      double v305 = *(v303 - 1);
      float v306 = *v303;
      v303 += 8;
      double v116 = fmin(v116, v304);
      double v114 = fmax(v114, v304);
      double v115 = fmin(v115, v305);
      double v113 = fmax(v113, v305);
      double v111 = fmin(v111, v306);
      double v112 = fmax(v112, v306);
      --v302;
    }
    while (v302);
    goto LABEL_117;
  }
  if (a4 == 3)
  {
    altitude::HeightMeshBuilder::allocateMeshData((altitude::HeightMeshBuilder *)a1, a3, 0);
    uint64_t v56 = a1;
    uint64_t v27 = *(void *)(a1 + 24);
    unint64_t v57 = *(void *)(v27 + 48) - *(void *)(v27 + 40);
    unint64_t v58 = *(void *)(v27 + 8);
    unint64_t v30 = v57 / v58 * v58;
    unint64_t v59 = v57 % v58;
    if ((*(unsigned char *)(v27 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&v567.f64[0] = &v565;
      *(void *)std::string buf = &v567;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      uint64_t v56 = a1;
    }
    if (v57 == v59) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = *(void *)(v27 + 72);
    }
    v48.n128_f32[0] = a5;
    altitude::HeightMeshBuilder::generateMesh<ggl::CommonMesh::BufferPos4UV>(v56, (uint64_t)a2, (uint64_t)&v560, a3, v60, &v559, &v558, v48, v49, v50, v51, v52, v53, v54, v55);
    float v125 = v558;
    float v124 = v559;
    float v126 = (float)(v558 + v559) * 0.5;
    altitude::HeightMeshBuilder::constructGeocentricFrameForTile((altitude::HeightMeshBuilder *)&v567, a2, v126);
    float64x2_t v127 = v568;
    *(float64x2_t *)(v56 + 72) = v567;
    uint64_t v128 = v56 + 72;
    *(double *)(v128 + 48) = v570;
    float64x2_t v129 = v569;
    *(float64x2_t *)(v128 + 16) = v127;
    *(float64x2_t *)(v128 + 32) = v129;
    altitude::HeightMeshBuilder::generateSmercCoordinates<ggl::CommonMesh::BufferPos4UV>(*(unsigned char *)(v128 + 128), (uint64_t)a2, (double *)v128, a3, v60, (*(void *)(*(void *)(v128 - 48) + 48) - *(void *)(*(void *)(v128 - 48) + 40))/ *(void *)(*(void *)(v128 - 48) + 8), v126);
    if (a2->_level > 0xBu)
    {
      double v138 = *(float *)(v60 + 4);
      double v134 = *(float *)(v60 + 8);
      uint64_t v142 = v60 + 32 * (a3 * a3 - 1);
      double v136 = *(float *)(v142 + 4);
      double v135 = *(float *)(v142 + 8);
      double v137 = (float)(v125 - v126);
      double v139 = (float)(v124 - (float)(v126 + v17));
      uint64_t v133 = (double *)a1;
      goto LABEL_184;
    }
    uint64_t v130 = *(void **)(v128 - 48);
    unint64_t v131 = v130[6] - v130[5];
    unint64_t v132 = v130[1];
    uint64_t v133 = (double *)a1;
    if (v132 > v131)
    {
      double v134 = 1.79769313e308;
      double v135 = -1.79769313e308;
      double v136 = -1.79769313e308;
      double v137 = -1.79769313e308;
      double v138 = 1.79769313e308;
      double v139 = 1.79769313e308;
      goto LABEL_184;
    }
    unint64_t v274 = v131 / v132;
    if (v274 >= 4)
    {
      unint64_t v275 = v274 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v369 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      float64x2_t v370 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      long long v371 = (__int32 *)(v60 + 64);
      unint64_t v372 = v274 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v373 = v370;
      float64x2_t v374 = v369;
      float64x2_t v375 = v370;
      float64x2_t v376 = v370;
      float64x2_t v377 = v369;
      float64x2_t v378 = v369;
      float64x2_t v379 = v370;
      float64x2_t v380 = v370;
      float64x2_t v381 = v369;
      float64x2_t v382 = v369;
      do
      {
        v383.i32[0] = *(v371 - 16);
        v384.i32[0] = *(v371 - 15);
        v383.i32[1] = *(v371 - 8);
        v385.i32[0] = *v371;
        v386.i32[0] = v371[1];
        v385.i32[1] = v371[8];
        float64x2_t v387 = vcvtq_f64_f32(v383);
        float64x2_t v388 = vcvtq_f64_f32(v385);
        v384.i32[1] = *(v371 - 7);
        v386.i32[1] = v371[9];
        float64x2_t v389 = vcvtq_f64_f32(v384);
        float64x2_t v390 = vcvtq_f64_f32(v386);
        v391.i32[0] = *(v371 - 14);
        v391.i32[1] = *(v371 - 6);
        v392.i32[0] = v371[2];
        v392.i32[1] = v371[10];
        float64x2_t v393 = vcvtq_f64_f32(v391);
        float64x2_t v394 = vcvtq_f64_f32(v392);
        float64x2_t v381 = vminnmq_f64(v381, v387);
        float64x2_t v382 = vminnmq_f64(v382, v388);
        float64x2_t v379 = vmaxnmq_f64(v379, v387);
        float64x2_t v380 = vmaxnmq_f64(v380, v388);
        float64x2_t v377 = vminnmq_f64(v377, v389);
        float64x2_t v378 = vminnmq_f64(v378, v390);
        float64x2_t v375 = vmaxnmq_f64(v375, v389);
        float64x2_t v376 = vmaxnmq_f64(v376, v390);
        float64x2_t v369 = vminnmq_f64(v369, v393);
        float64x2_t v374 = vminnmq_f64(v374, v394);
        float64x2_t v370 = vmaxnmq_f64(v370, v393);
        float64x2_t v373 = vmaxnmq_f64(v373, v394);
        v371 += 32;
        v372 -= 4;
      }
      while (v372);
      double v139 = vminnmvq_f64(vminnmq_f64(v381, v382));
      double v137 = vmaxnmvq_f64(vmaxnmq_f64(v379, v380));
      double v138 = vminnmvq_f64(vminnmq_f64(v377, v378));
      double v136 = vmaxnmvq_f64(vmaxnmq_f64(v375, v376));
      double v134 = vminnmvq_f64(vminnmq_f64(v369, v374));
      double v135 = vmaxnmvq_f64(vmaxnmq_f64(v370, v373));
      if (v274 == v275)
      {
LABEL_184:
        v133[16] = v139;
        v133[17] = v138;
        v133[18] = v134;
        v133[19] = v137;
        v133[20] = v136;
        v133[21] = v135;
        if (v60 && v57 != v59) {
          goto LABEL_209;
        }
        return;
      }
    }
    else
    {
      unint64_t v275 = 0;
      double v134 = 1.79769313e308;
      double v135 = -1.79769313e308;
      double v136 = -1.79769313e308;
      double v138 = 1.79769313e308;
      double v137 = -1.79769313e308;
      double v139 = 1.79769313e308;
    }
    unint64_t v395 = v274 - v275;
    int v396 = (float *)(v60 + 32 * v275 + 8);
    do
    {
      double v397 = *(v396 - 2);
      double v398 = *(v396 - 1);
      float v399 = *v396;
      v396 += 8;
      double v139 = fmin(v139, v397);
      double v137 = fmax(v137, v397);
      double v138 = fmin(v138, v398);
      double v136 = fmax(v136, v398);
      double v134 = fmin(v134, v399);
      double v135 = fmax(v135, v399);
      --v395;
    }
    while (v395);
    goto LABEL_184;
  }
  if (a4 != 2) {
    return;
  }
  altitude::HeightMeshBuilder::allocateMeshData((altitude::HeightMeshBuilder *)a1, a3, 1);
  uint64_t v26 = a1;
  uint64_t v27 = *(void *)(a1 + 24);
  unint64_t v28 = *(void *)(v27 + 48) - *(void *)(v27 + 40);
  unint64_t v29 = *(void *)(v27 + 8);
  unint64_t v30 = v28 / v29 * v29;
  unint64_t v31 = v28 % v29;
  if ((*(unsigned char *)(v27 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    *(void *)&v567.f64[0] = &v565;
    *(void *)std::string buf = &v567;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    uint64_t v26 = a1;
  }
  unint64_t v514 = v31;
  unint64_t v515 = v28;
  int v518 = (QuadTile *)a2;
  if (v28 == v31) {
    float32x2_t v32 = 0;
  }
  else {
    float32x2_t v32 = *(float32x2_t **)(v27 + 72);
  }
  unsigned int v120 = a3 - 1;
  float v121 = 1.0 / (float)(a3 - 1);
  float v516 = v17;
  if (!*(void *)v26)
  {
    if (a3)
    {
      unint64_t v538 = v30;
      uint64_t v543 = v27;
      int v143 = 0;
      unsigned int v144 = 0;
      float v146 = v558;
      float v145 = v559;
      do
      {
        unsigned int v147 = 0;
        float v148 = v121 * (float)v144;
        do
        {
          float32_t v149 = v121 * (float)v147;
          float v145 = fminf(v145, a5);
          float v146 = fmaxf(v146, a5);
          unint64_t v150 = &v32[4 * v143 + 4 * v147];
          v150->f32[0] = v149;
          v150->f32[1] = v148;
          v150[1].f32[0] = a5;
          v150[1].i32[1] = 1065353216;
          v150[2].f32[0] = v149;
          v150[2].f32[1] = v148;
          v150[3].f32[0] = (float)(v147 & 1);
          v150[3].f32[1] = (float)(v144 & 1);
          ++v147;
        }
        while (a3 != v147);
        v143 += v147;
        ++v144;
      }
      while (v144 != a3);
LABEL_59:
      float v558 = v146;
      float v559 = v145;
      unint64_t v30 = v538;
      uint64_t v27 = v543;
      float v17 = v516;
      if (a3 == 1) {
        goto LABEL_64;
      }
    }
    goto LABEL_60;
  }
  uint64_t v122 = *(_DWORD **)(*(void *)v26 + 16);
  if (!v122)
  {
    float v123 = 4295000000.0;
    if (!a3) {
      goto LABEL_60;
    }
    goto LABEL_120;
  }
  float v123 = (float)(*v122 - 1);
  if (a3)
  {
LABEL_120:
    unint64_t v538 = v30;
    uint64_t v543 = v27;
    int v307 = 0;
    unsigned int v308 = 0;
    unsigned __int8 level = a2->_level;
    float v556 = v123 / (float)(1 << (level - v561));
    float v552 = (float)(a2->_xIdx - (v563 << (level - v561)));
    float v549 = (float)(~(-1 << level) - a2->_yIdx + ((v562 + (-1 << v561) + 1) << (level - v561)));
    float v146 = v558;
    float v145 = v559;
    uint64_t v310 = (uint64_t *)a1;
    while (1)
    {
      float v311 = v121 * (float)v308;
      float v312 = (float)(v308 & 1);
      uint64_t v313 = *v310;
      if (*v310) {
        break;
      }
      unsigned int v321 = 0;
      do
      {
        float32_t v322 = v121 * (float)v321;
        float v145 = fminf(v145, a5);
        float v146 = fmaxf(v146, a5);
        uint64_t v323 = &v32[4 * v307 + 4 * v321];
        v323->f32[0] = v322;
        v323->f32[1] = v311;
        v323[1].f32[0] = a5;
        v323[1].i32[1] = 1065353216;
        v323[2].f32[0] = v322;
        v323[2].f32[1] = v311;
        v323[3].f32[0] = (float)(v321 & 1);
        v323[3].f32[1] = v312;
        ++v321;
      }
      while (a3 != v321);
      v307 += v321;
LABEL_122:
      if (++v308 == a3) {
        goto LABEL_59;
      }
    }
    for (unsigned int i = 0; ; ++i)
    {
      float v315 = v121 * (float)i;
      LODWORD(v567.f64[0]) = 0;
      if (!v313) {
        goto LABEL_135;
      }
      v18.n128_f32[0] = (float)(v315 + v552) * v556;
      int v316 = *(_DWORD *)(v313 + 132);
      if (v316 == 16) {
        break;
      }
      if (v316 == 8)
      {
        v19.n128_f32[0] = (float)(v311 + v549) * v556;
        karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v313, (float *)&v567, v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_134:
        uint64_t v310 = (uint64_t *)a1;
        goto LABEL_135;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v317 = GEOGetVectorKitVKDefaultLog_log;
      BOOL v318 = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
      uint64_t v310 = (uint64_t *)a1;
      if (v318)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1A1780000, v317, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
        goto LABEL_134;
      }
LABEL_135:
      float32_t v319 = *(float *)v567.f64 + a5;
      float v145 = fminf(v145, *(float *)v567.f64 + a5);
      float v146 = fmaxf(*(float *)v567.f64 + a5, v146);
      int8x8_t v320 = &v32[4 * v307 + 4 * i];
      v320->f32[0] = v315;
      v320->f32[1] = v311;
      v320[1].f32[0] = v319;
      v320[1].i32[1] = 1065353216;
      v320[2].f32[0] = v315;
      v320[2].f32[1] = v311;
      v320[3].f32[0] = (float)(i & 1);
      v320[3].f32[1] = v312;
      if (v120 == i)
      {
        v307 += i + 1;
        goto LABEL_122;
      }
      uint64_t v313 = *v310;
    }
    v19.n128_f32[0] = (float)(v311 + v549) * v556;
    karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v313, (float *)&v567, v18, v19, v20, v21, v22, v23, v24, v25);
    goto LABEL_134;
  }
LABEL_60:
  int v151 = 0;
  int v152 = 0;
  do
  {
    int v153 = v151;
    unsigned int v154 = a3 - 1;
    do
    {
      LOWORD(v567.f64[0]) = v153;
      int v155 = v153 + 1;
      *(_WORD *)std::string buf = v153 + 1;
      __int16 v156 = v153 + a3;
      __int16 v565 = v156 + 1;
      __int16 v564 = v156;
      int v153 = v155;
      --v154;
    }
    while (v154);
    ++v152;
    v151 += a3;
  }
  while (v152 != v120);
LABEL_64:
  int v157 = a3 * a3;
  uint64_t v158 = &v32[4 * ((a3 * a3) & 0xFFFD)];
  *uint64_t v158 = *v32;
  __int32 v159 = v32[1].i32[1];
  v158[1].f32[0] = v32[1].f32[0] - v17;
  v158[1].i32[1] = v159;
  int32x2_t v160 = vdup_n_s32(0xBF7D70A4);
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v166 = vsub_f32(_D8, v32[3]);
  v158[2] = (float32x2_t)v160;
  v158[3] = v166;
  int v167 = a3 * a3;
  if (a3 >= 2)
  {
    int v168 = 0;
    unsigned int v169 = a3 - 1;
    int v167 = a3 * a3;
    do
    {
      __int16 v565 = v168;
      __int16 v564 = v167;
      LOWORD(v567.f64[0]) = ++v168;
      *(_WORD *)std::string buf = ++v167;
      uint64_t v170 = &v32[4 * (unsigned __int16)v168];
      float64x2x2_t v171 = &v32[4 * (unsigned __int16)v167];
      *float64x2x2_t v171 = *v170;
      __int32 v172 = v170[1].i32[1];
      v171[1].f32[0] = v170[1].f32[0] - v17;
      v171[1].i32[1] = v172;
      float32x2_t v173 = vsub_f32(_D8, v170[3]);
      v171[2] = (float32x2_t)v160;
      v171[3] = v173;
      --v169;
    }
    while (v169);
  }
  uint64_t v517 = (v157 - 1);
  int v174 = v167 + 1;
  BOOL v175 = &v32[4 * (unsigned __int16)(a3 - 1)];
  uint64_t v176 = &v32[4 * (unsigned __int16)(v167 + 1)];
  *uint64_t v176 = *v175;
  __int32 v177 = v175[1].i32[1];
  v176[1].f32[0] = v175[1].f32[0] - v17;
  v176[1].i32[1] = v177;
  float32x2_t v178 = vsub_f32(_D8, v175[3]);
  v176[2] = (float32x2_t)v160;
  v176[3] = v178;
  if (a3 >= 2)
  {
    int32x2_t v179 = vdup_n_s32(0xBF7D70A4);
    unsigned int v180 = a3 - 1;
    unsigned int v181 = a3 - 1;
    do
    {
      __int16 v565 = v181;
      __int16 v564 = v174;
      v181 += a3;
      LOWORD(v567.f64[0]) = v181;
      *(_WORD *)std::string buf = ++v174;
      long long v182 = &v32[4 * (unsigned __int16)v181];
      long long v183 = &v32[4 * (unsigned __int16)v174];
      *long long v183 = *v182;
      __int32 v184 = v182[1].i32[1];
      v183[1].f32[0] = v182[1].f32[0] - v17;
      v183[1].i32[1] = v184;
      float32x2_t v185 = vsub_f32(_D8, v182[3]);
      v183[2] = (float32x2_t)v179;
      v183[3] = v185;
      --v180;
    }
    while (v180);
  }
  int v186 = v174 + 1;
  int v187 = v157 - 1;
  unint64_t v188 = &v32[4 * (unsigned __int16)(v157 - 1)];
  uint64_t v189 = &v32[4 * (unsigned __int16)(v174 + 1)];
  *uint64_t v189 = *v188;
  __int32 v190 = v188[1].i32[1];
  int32x2_t v191 = vdup_n_s32(0xBF7D70A4);
  v189[1].f32[0] = v188[1].f32[0] - v17;
  v189[1].i32[1] = v190;
  float32x2_t v192 = vsub_f32(_D8, v188[3]);
  v189[2] = (float32x2_t)v191;
  v189[3] = v192;
  if (a3 >= 2)
  {
    unsigned int v193 = a3 - 1;
    do
    {
      __int16 v565 = v187;
      __int16 v564 = v186;
      LOWORD(v567.f64[0]) = --v187;
      *(_WORD *)std::string buf = ++v186;
      long long v194 = &v32[4 * (unsigned __int16)v187];
      long long v195 = &v32[4 * (unsigned __int16)v186];
      *long long v195 = *v194;
      __int32 v196 = v194[1].i32[1];
      v195[1].f32[0] = v194[1].f32[0] - v17;
      v195[1].i32[1] = v196;
      float32x2_t v197 = vsub_f32(_D8, v194[3]);
      v195[2] = (float32x2_t)v191;
      v195[3] = v197;
      --v193;
    }
    while (v193);
  }
  unsigned int v198 = v157 - a3;
  int v199 = v186 + 1;
  uint64_t v200 = &v32[4 * (unsigned __int16)(v157 - a3)];
  long long v201 = &v32[4 * (unsigned __int16)v199];
  *long long v201 = *v200;
  __int32 v202 = v200[1].i32[1];
  v201[1].f32[0] = v200[1].f32[0] - v17;
  v201[1].i32[1] = v202;
  float32x2_t v203 = vsub_f32(_D8, v200[3]);
  v201[2] = (float32x2_t)v191;
  v201[3] = v203;
  if (a3 >= 2)
  {
    int32x2_t v204 = vdup_n_s32(0xBF7D70A4);
    do
    {
      __int16 v565 = v198;
      __int16 v564 = v199;
      v198 -= a3;
      LOWORD(v567.f64[0]) = v198;
      *(_WORD *)std::string buf = ++v199;
      long long v205 = &v32[4 * (unsigned __int16)v198];
      long long v206 = &v32[4 * (unsigned __int16)v199];
      *long long v206 = *v205;
      __int32 v207 = v205[1].i32[1];
      v206[1].f32[0] = v205[1].f32[0] - v17;
      v206[1].i32[1] = v207;
      float32x2_t v208 = vsub_f32(_D8, v205[3]);
      v206[2] = (float32x2_t)v204;
      v206[3] = v208;
      --v120;
    }
    while (v120);
  }
  float v209 = (float)(v558 + v559) * 0.5;
  altitude::HeightMeshBuilder::constructGeocentricFrameForTile((altitude::HeightMeshBuilder *)&v567, v518, v209);
  float64x2_t v211 = v568;
  float64x2_t v210 = v569;
  *(float64x2_t *)(a1 + 104) = v569;
  double v212 = v570;
  *(double *)(a1 + 120) = v570;
  float64x2_t v213 = v567;
  *(float64x2_t *)(a1 + 72) = v567;
  *(float64x2_t *)(a1 + 88) = v211;
  long long v214 = *(void **)(a1 + 24);
  uint64_t v216 = v214[5];
  uint64_t v215 = v214[6];
  unint64_t v217 = v215 - v216;
  unint64_t v218 = v214[1];
  double v219 = v211.f64[1];
  double v220 = v210.f64[1];
  float64_t v221 = v213.f64[1];
  unint64_t v222 = (v215 - v216) / v218;
  double v554 = v210.f64[0];
  double v550 = v212;
  double v547 = v211.f64[0];
  if (*(unsigned char *)(a1 + 200))
  {
    if (v218 <= v217)
    {
      float64_t v223 = -(vmulq_f64(v211, v210).f64[0] - v213.f64[1] * v210.f64[1]);
      float64_t v224 = vmulq_f64(v213, v210).f64[0] - v213.f64[1] * v211.f64[1];
      unsigned int v225 = 1;
      int v226 = 1 << v518->_level;
      double v528 = (double)v518->_xIdx;
      double v531 = v223 + v223;
      double v526 = (double)(v226 + ~v518->_yIdx);
      double v534 = v224 + v224;
      double v539 = -(v213.f64[0] * v210.f64[1] - v211.f64[0] * v211.f64[1])
           - (v213.f64[0] * v210.f64[1]
            - v211.f64[0] * v211.f64[1]);
      double v522 = v539 * v212 + (v224 + v224) * v211.f64[1];
      double v524 = 6.28318531 / (double)v226;
      double v521 = -(v213.f64[1] - (v210.f64[1] + v210.f64[1]) * v223);
      id v227 = (float *)&v32[1] + 1;
      double v544 = v213.f64[0];
      do
      {
        double v228 = *(v227 - 1);
        long double v229 = (v227[1] + v528) * v524;
        long double v230 = exp((v227[2] + v526) * v524 + -3.14159265);
        double v231 = atan(v230) * 2.0 + -1.57079633;
        long double v232 = fmod(v229, 6.28318531);
        double v233 = fmod(v232 + 6.28318531, 6.28318531) + -3.14159265;
        __double2 v234 = __sincos_stret(v231);
        double v235 = 6378137.0 / sqrt(v234.__sinval * v234.__sinval * -0.00669437999 + 1.0);
        double v236 = (v235 + v228) * v234.__cosval;
        __double2 v237 = __sincos_stret(v233);
        double v238 = v236 * v237.__cosval;
        double v239 = v236 * v237.__sinval;
        double v240 = (v228 + v235 * 0.99330562) * v234.__sinval;
        double v241 = -(v238 * v220 - v240 * v219) - (v238 * v220 - v240 * v219);
        double v242 = -(v240 * v554 - v239 * v220) - (v240 * v554 - v239 * v220);
        double v243 = -(v239 * v219 - v238 * v554) - (v239 * v219 - v238 * v554);
        *(float *)&double v238 = v236 * v237.__cosval
                        - v544
                        + (v241 - v539) * v220
                        + (v242 - v531) * v550
                        + (v534 - v243) * v554;
        *(float *)&double v239 = v521 + v236 * v237.__sinval + v241 * v550 + v243 * v219 - (v522 + v242 * v220);
        *(float *)&double v240 = v240 - v547 + (v243 - v534) * v550 + (v242 - v531) * v554 + (v539 - v241) * v219;
        *(v227 - 3) = *(float *)&v238;
        *(v227 - 2) = *(float *)&v239;
        *(v227 - 1) = *(float *)&v240;
        *id v227 = 1.0;
        v227 += 8;
        BOOL v244 = v222 > v225++;
      }
      while (v244);
    }
    goto LABEL_196;
  }
  unsigned int v245 = v518->_level;
  if (v245 > 0xB)
  {
    uint64_t v324 = 0;
    float64_t v325 = -(vmulq_f64(v211, v210).f64[0] - v213.f64[1] * v210.f64[1]);
    v210.f64[0] = vmulq_f64(v213, v210).f64[0] - v213.f64[1] * v211.f64[1];
    double v536 = v210.f64[0] + v210.f64[0];
    double v541 = v325 + v325;
    float v513 = v209;
    double v530 = (double)v518->_xIdx;
    double v533 = v209;
    double v527 = (double)((1 << v245) + ~v518->_yIdx);
    double v525 = 6.28318531 / (double)(1 << v245);
    double v546 = -(v213.f64[0] * v210.f64[1] - v211.f64[0] * v211.f64[1])
         - (v213.f64[0] * v210.f64[1]
          - v211.f64[0] * v211.f64[1]);
    double v523 = v546 * v212;
    double v520 = -(v210.f64[0] * v211.f64[1] - v325 * v210.f64[1]);
    uint64_t v326 = (_DWORD *)v567.f64 + 1;
    do
    {
      double v327 = v221;
      long double v328 = exp(((float)(v324 >> 1) + v527) * v525 + -3.14159265);
      double v329 = atan(v328) * 2.0 + -1.57079633;
      long double v330 = fmod(((double)(v324 & 1) + v530) * v525, 6.28318531);
      double v331 = fmod(v330 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v332 = __sincos_stret(v329);
      double v333 = 6378137.0 / sqrt(v332.__sinval * v332.__sinval * -0.00669437999 + 1.0);
      double v334 = (v333 + v533) * v332.__cosval;
      __double2 v335 = __sincos_stret(v331);
      float64_t v221 = v327;
      double v336 = v334 * v335.__sinval;
      double v337 = (v533 + v333 * 0.99330562) * v332.__sinval;
      double v338 = -(v334 * v335.__cosval * v220 - v337 * v219);
      double v339 = -(v337 * v554 - v336 * v220) - (v337 * v554 - v336 * v220);
      double v340 = -(v336 * v219 - v334 * v335.__cosval * v554) - (v336 * v219 - v334 * v335.__cosval * v554);
      *(float *)&double v336 = v334 * v335.__sinval + v340 * v219 - (v327 + v523 + v339 * v220) + (v520 + v338 * v550) * 2.0;
      *(float *)&double v340 = v337 - v547 + (v340 - v536) * v550 + (v339 - v541) * v554 + (v546 - v338 * 2.0) * v219;
      *(v326 - 1) = LODWORD(v336);
      *uint64_t v326 = LODWORD(v340);
      ++v324;
      v326 += 2;
    }
    while (v324 != 4);
    if (v218 <= v217)
    {
      float32x2_t v341 = *(float32x2_t *)&v567.f64[0];
      float32x2_t v342 = vsub_f32(*(float32x2_t *)&v567.f64[1], *(float32x2_t *)&v567.f64[0]);
      float32x2_t v343 = *(float32x2_t *)&v568.f64[0];
      float32x2_t v344 = vsub_f32(*(float32x2_t *)&v568.f64[1], *(float32x2_t *)&v568.f64[0]);
      unsigned int v345 = 1;
      int v346 = v32;
      do
      {
        uint64_t v347 = (float *)v346;
        float32x2_t v348 = vld1_dup_f32(v347++);
        float v349 = *v347;
        v346->f32[0] = v346[1].f32[0] - v513;
        float32x2_t v350 = vmla_f32(v341, v342, v348);
        *(float32x2_t *)uint64_t v347 = vmla_n_f32(v350, vsub_f32(vmla_f32(v343, v344, v348), v350), v349);
        v346[1].i32[1] = 1065353216;
        v346 += 4;
        BOOL v244 = v222 > v345++;
      }
      while (v244);
    }
    goto LABEL_196;
  }
  unint64_t v532 = v214[1];
  unint64_t v535 = v215 - v216;
  unint64_t v529 = (v215 - v216) / v218;
  unint64_t v540 = v30;
  uint64_t v545 = v27;
  float v246 = 6.2832 / (float)(1 << v245);
  int v247 = a3 >> 1;
  size_t v248 = (v247 + 2);
  unint64_t v249 = (__float2 *)operator new(v248 * 8);
  uint64_t v250 = &v249[v248];
  long long v251 = (__float2 *)operator new(v248 * 8);
  v555 = &v251[v248];
  int v252 = -1;
  unsigned int v548 = v518->_xIdx;
  float v253 = (float)(~(-1 << v245) - v518->_yIdx);
  float v254 = 1.0 / (float)((float)v247 + -1.0);
  long long v255 = v249;
  int v551 = v247;
  do
  {
    float v257 = expf((float)((float)(v253 + (float)(v254 * (float)v252)) * v246) + -3.1416);
    float v258 = atanf(v257);
    float v259 = (float)(v258 + v258) + -1.57079633;
    __float2 v260 = __sincosf_stret(v259);
    if (v255 < v250)
    {
      *long long v255 = v260;
      long long v256 = v255 + 1;
      goto LABEL_84;
    }
    uint64_t v261 = v255 - v249;
    unint64_t v262 = v261 + 1;
    if ((unint64_t)(v261 + 1) >> 61) {
LABEL_213:
    }
      abort();
    if (((char *)v250 - (char *)v249) >> 2 > v262) {
      unint64_t v262 = ((char *)v250 - (char *)v249) >> 2;
    }
    if ((unint64_t)((char *)v250 - (char *)v249) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v263 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v263 = v262;
    }
    if (v263)
    {
      if (v263 >> 61) {
LABEL_214:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      unint64_t v264 = operator new(8 * v263);
    }
    else
    {
      unint64_t v264 = 0;
    }
    uint64_t v265 = (__float2 *)&v264[8 * v261];
    uint64_t v250 = (__float2 *)&v264[8 * v263];
    __float2 *v265 = v260;
    long long v256 = v265 + 1;
    if (v255 == v249)
    {
LABEL_104:
      operator delete(v249);
      goto LABEL_105;
    }
    unint64_t v266 = (char *)&v255[-1] - (char *)v249;
    if (v266 < 0x168
      || &v264[(char *)v255 - (char *)v249 - 8 - (v266 & 0xFFFFFFFFFFFFFFF8)] > &v264[(char *)v255 - (char *)v249 - 8]
      || (__float2 *)((char *)&v255[-1] - (v266 & 0xFFFFFFFFFFFFFFF8)) > &v255[-1]
      || (unint64_t)((char *)v249 - v264) < 0x20)
    {
      unint64_t v267 = v255;
      do
      {
LABEL_102:
        __float2 v268 = v267[-1];
        --v267;
        v265[-1] = v268;
        --v265;
      }
      while (v267 != v249);
      goto LABEL_103;
    }
    uint64_t v269 = (v266 >> 3) + 1;
    unint64_t v267 = &v255[-(v269 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v270 = &v264[8 * v261 - 16];
    double v271 = v255 - 2;
    uint64_t v272 = v269 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v273 = *(_OWORD *)&v271->__sinval;
      *(v270 - 1) = *(_OWORD *)&v271[-2].__sinval;
      *uint64_t v270 = v273;
      v270 -= 2;
      v271 -= 4;
      v272 -= 4;
    }
    while (v272);
    v265 -= v269 & 0x3FFFFFFFFFFFFFFCLL;
    if (v269 != (v269 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_102;
    }
LABEL_103:
    if (v249) {
      goto LABEL_104;
    }
LABEL_105:
    unint64_t v249 = v265;
    int v247 = v551;
LABEL_84:
    long long v255 = v256;
    _ZF = v252++ == v247;
  }
  while (!_ZF);
  int v351 = -1;
  v352 = v251;
  do
  {
    __float2 v355 = __sincosf_stret((float)((float)((float)v548 + (float)(v254 * (float)v351)) * v246) + -3.1416);
    if (v352 < v555)
    {
      __float2 *v352 = v355;
      uint64_t v353 = v352 + 1;
      char v354 = (double *)a1;
      goto LABEL_148;
    }
    uint64_t v356 = v352 - v251;
    unint64_t v357 = v356 + 1;
    if ((unint64_t)(v356 + 1) >> 61) {
      goto LABEL_213;
    }
    if (((char *)v555 - (char *)v251) >> 2 > v357) {
      unint64_t v357 = ((char *)v555 - (char *)v251) >> 2;
    }
    if ((unint64_t)((char *)v555 - (char *)v251) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v358 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v358 = v357;
    }
    if (v358)
    {
      if (v358 >> 61) {
        goto LABEL_214;
      }
      int v359 = operator new(8 * v358);
    }
    else
    {
      int v359 = 0;
    }
    unint64_t v360 = (__float2 *)&v359[8 * v356];
    v555 = (__float2 *)&v359[8 * v358];
    *unint64_t v360 = v355;
    uint64_t v353 = v360 + 1;
    if (v352 == v251)
    {
LABEL_174:
      operator delete(v251);
      goto LABEL_175;
    }
    unint64_t v361 = (char *)&v352[-1] - (char *)v251;
    if (v361 < 0x168)
    {
      unint64_t v362 = v352;
      goto LABEL_172;
    }
    if (&v359[(char *)v352 - (char *)v251 - 8 - (v361 & 0xFFFFFFFFFFFFFFF8)] > &v359[(char *)v352 - (char *)v251 - 8])
    {
      unint64_t v362 = v352;
      goto LABEL_172;
    }
    if ((__float2 *)((char *)&v352[-1] - (v361 & 0xFFFFFFFFFFFFFFF8)) > &v352[-1])
    {
      unint64_t v362 = v352;
      do
      {
LABEL_172:
        __float2 v368 = v362[-1];
        --v362;
        v360[-1] = v368;
        --v360;
      }
      while (v362 != v251);
      goto LABEL_173;
    }
    if ((unint64_t)((char *)v251 - v359) < 0x20)
    {
      unint64_t v362 = v352;
      goto LABEL_172;
    }
    uint64_t v363 = (v361 >> 3) + 1;
    unint64_t v362 = &v352[-(v363 & 0x3FFFFFFFFFFFFFFCLL)];
    long long v364 = &v359[8 * v356 - 16];
    long long v365 = v352 - 2;
    uint64_t v366 = v363 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v367 = *(_OWORD *)&v365->__sinval;
      *(v364 - 1) = *(_OWORD *)&v365[-2].__sinval;
      *long long v364 = v367;
      v364 -= 2;
      v365 -= 4;
      v366 -= 4;
    }
    while (v366);
    v360 -= v363 & 0x3FFFFFFFFFFFFFFCLL;
    if (v363 != (v363 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_172;
    }
LABEL_173:
    if (v251) {
      goto LABEL_174;
    }
LABEL_175:
    long long v251 = v360;
    char v354 = (double *)a1;
    int v247 = v551;
LABEL_148:
    v352 = v353;
    _ZF = v351++ == v247;
  }
  while (!_ZF);
  if (v532 <= v535)
  {
    double v400 = v354[13];
    double v401 = v354[14];
    double v402 = v354[15];
    double v403 = v354[11];
    double v404 = v354[12];
    double v405 = v354[9];
    double v406 = v354[10];
    double v407 = -(v403 * v400 - v406 * v401) - (v403 * v400 - v406 * v401);
    double v408 = -(v405 * v401 - v403 * v404) - (v405 * v401 - v403 * v404);
    double v409 = -(v406 * v404 - v405 * v400) - (v406 * v404 - v405 * v400);
    double v410 = -(v405 + v407 * v402 + v408 * v401 - v409 * v400);
    double v411 = -(v403 + v407 * v400 + v409 * v402 - v408 * v404);
    float v412 = v410;
    float v413 = v411;
    float v414 = v404;
    float v415 = v400;
    float v416 = v401;
    float v417 = v402;
    float v418 = v406 - v407 * v401 + v408 * v402 + v409 * v404;
    float v419 = (float)(v247 - 1);
    unsigned int v420 = v247 - 2;
    uint64_t v421 = v32 + 1;
    unsigned int v422 = 1;
    unint64_t v30 = v540;
    uint64_t v27 = v545;
    do
    {
      float v423 = v421[-1].f32[1] * v419;
      unsigned int v424 = v423;
      if (v423 >= v420) {
        unsigned int v424 = v247 - 2;
      }
      float v425 = v421[-1].f32[0] * v419;
      unsigned int v426 = v425;
      if (v425 >= v420) {
        unsigned int v426 = v247 - 2;
      }
      float v427 = v425 - (float)v426;
      float v428 = v423 - (float)v424;
      uint64_t v429 = (float *)&v249[v424];
      v430 = (float *)&v249[v424 + 1];
      uint64_t v431 = (float *)&v249[v424 + 2];
      v432 = (float *)&v249[v424 + 3];
      float v433 = v429[1];
      float v434 = v430[1];
      float v435 = v431[1];
      float v436 = v432[1];
      float v437 = v428 * v428;
      float v438 = v428 * 0.5;
      float v439 = (float)(*v430 + (float)((float)(*v431 - *v429) * v438))
           + (float)((float)((float)((float)((float)(*v429 + *v429) + (float)(*v430 * -5.0)) + (float)(*v431 * 4.0))
                           - *v432)
                   * (float)(v437 * 0.5));
      float v440 = (float)(v434 + (float)((float)(v435 - v433) * v438))
           + (float)((float)((float)((float)((float)(v433 + v433) + (float)(v434 * -5.0)) + (float)(v435 * 4.0)) - v436)
                   * (float)(v437 * 0.5));
      float v441 = v438 * v437;
      float v442 = v439 + (float)((float)((float)(*v432 - *v429) + (float)((float)(*v430 - *v431) * 3.0)) * v441);
      float v443 = v440 + (float)((float)((float)(v436 - v433) + (float)((float)(v434 - v435) * 3.0)) * v441);
      int8x16_t v444 = (float *)&v251[v426];
      uint64_t v445 = (float *)&v251[v426 + 1];
      uint64_t v446 = (float *)&v251[v426 + 2];
      unsigned int v447 = (float *)&v251[v426 + 3];
      float v448 = v444[1];
      float v449 = v445[1];
      float v450 = v446[1];
      float v451 = v447[1];
      float v452 = v427 * v427;
      float v453 = v427 * 0.5;
      float v454 = (float)(*v445 + (float)((float)(*v446 - *v444) * v453))
           + (float)((float)((float)((float)((float)(*v444 + *v444) + (float)(*v445 * -5.0)) + (float)(*v446 * 4.0))
                           - *v447)
                   * (float)(v452 * 0.5));
      float v455 = (float)(v449 + (float)((float)(v450 - v448) * v453))
           + (float)((float)((float)((float)((float)(v448 + v448) + (float)(v449 * -5.0)) + (float)(v450 * 4.0)) - v451)
                   * (float)(v452 * 0.5));
      float v456 = v453 * v452;
      float v457 = v454 + (float)((float)((float)(*v447 - *v444) + (float)((float)(*v445 - *v446) * 3.0)) * v456);
      float v458 = v455 + (float)((float)((float)(v451 - v448) + (float)((float)(v449 - v450) * 3.0)) * v456);
      float v459 = 6378137.0 / sqrt((float)((float)(v442 * v442) * -0.0066944) + 1.0);
      float v460 = (float)(v421->f32[0] + v459) * v443;
      float v461 = v460 * v458;
      float v462 = v460 * v457;
      float v463 = (v421->f32[0] + v459 * 0.99330562) * v442;
      float v464 = (float)-(float)((float)(v462 * v414) - (float)(v461 * v415))
           - (float)((float)(v462 * v414) - (float)(v461 * v415));
      float v465 = (float)-(float)((float)(v463 * v415) - (float)(v462 * v416))
           - (float)((float)(v463 * v415) - (float)(v462 * v416));
      float v466 = (float)-(float)((float)(v461 * v416) - (float)(v463 * v414))
           - (float)((float)(v461 * v416) - (float)(v463 * v414));
      v421[-1].f32[0] = (float)((float)((float)(v461 + v412) - (float)(v464 * v415)) + (float)(v465 * v417))
                      + (float)(v466 * v416);
      v421[-1].f32[1] = -(float)((float)(v465 * v416)
                               - (float)((float)((float)(v462 - v418) + (float)(v464 * v414)) + (float)(v466 * v417)));
      v421->f32[0] = (float)((float)((float)(v463 + v413) + (float)(v464 * v417)) + (float)(v465 * v415))
                   - (float)(v466 * v414);
      v421->i32[1] = 1065353216;
      v421 += 4;
      BOOL v244 = v529 > v422++;
    }
    while (v244);
  }
  else
  {
    unint64_t v30 = v540;
    uint64_t v27 = v545;
    if (!v251) {
      goto LABEL_194;
    }
  }
  operator delete(v251);
LABEL_194:
  if (v249) {
    operator delete(v249);
  }
LABEL_196:
  if (v518->_level > 0xBu)
  {
    float v477 = (float)(v559 + v558) * 0.5;
    double v472 = v32->f32[1];
    double v474 = v32[1].f32[0];
    uint16x4_t v478 = &v32[4 * v517];
    double v475 = v478->f32[1];
    double v476 = v478[1].f32[0];
    double v471 = (float)(v558 - v477);
    double v473 = (float)(v559 - (float)(v477 + v516));
    unint64_t v467 = (double *)a1;
    goto LABEL_207;
  }
  unint64_t v467 = (double *)a1;
  BOOL v468 = *(void **)(a1 + 24);
  unint64_t v469 = v468[6] - v468[5];
  unint64_t v470 = v468[1];
  if (v470 > v469)
  {
    double v471 = -1.79769313e308;
    double v472 = 1.79769313e308;
    double v473 = 1.79769313e308;
    double v474 = 1.79769313e308;
    double v475 = -1.79769313e308;
    double v476 = -1.79769313e308;
    goto LABEL_207;
  }
  unint64_t v479 = v469 / v470;
  if (v479 < 4)
  {
    unint64_t v480 = 0;
    double v474 = 1.79769313e308;
    double v476 = -1.79769313e308;
    double v475 = -1.79769313e308;
    double v472 = 1.79769313e308;
    double v471 = -1.79769313e308;
    double v473 = 1.79769313e308;
    goto LABEL_205;
  }
  unint64_t v480 = v479 & 0xFFFFFFFFFFFFFFFCLL;
  float64x2_t v481 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  float64x2_t v482 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int8x16_t v483 = (__int32 *)&v32[8];
  unint64_t v484 = v479 & 0xFFFFFFFFFFFFFFFCLL;
  float64x2_t v485 = v482;
  float64x2_t v486 = v481;
  float64x2_t v487 = v482;
  float64x2_t v488 = v482;
  float64x2_t v489 = v481;
  float64x2_t v490 = v481;
  float64x2_t v491 = v482;
  float64x2_t v492 = v482;
  float64x2_t v493 = v481;
  float64x2_t v494 = v481;
  do
  {
    v495.i32[0] = *(v483 - 16);
    v496.i32[0] = *(v483 - 15);
    v495.i32[1] = *(v483 - 8);
    v497.i32[0] = *v483;
    v498.i32[0] = v483[1];
    v497.i32[1] = v483[8];
    float64x2_t v499 = vcvtq_f64_f32(v495);
    float64x2_t v500 = vcvtq_f64_f32(v497);
    v496.i32[1] = *(v483 - 7);
    v498.i32[1] = v483[9];
    float64x2_t v501 = vcvtq_f64_f32(v496);
    float64x2_t v502 = vcvtq_f64_f32(v498);
    v503.i32[0] = *(v483 - 14);
    v503.i32[1] = *(v483 - 6);
    v504.i32[0] = v483[2];
    v504.i32[1] = v483[10];
    float64x2_t v505 = vcvtq_f64_f32(v503);
    float64x2_t v506 = vcvtq_f64_f32(v504);
    float64x2_t v493 = vminnmq_f64(v493, v499);
    float64x2_t v494 = vminnmq_f64(v494, v500);
    float64x2_t v491 = vmaxnmq_f64(v491, v499);
    float64x2_t v492 = vmaxnmq_f64(v492, v500);
    float64x2_t v489 = vminnmq_f64(v489, v501);
    float64x2_t v490 = vminnmq_f64(v490, v502);
    float64x2_t v487 = vmaxnmq_f64(v487, v501);
    float64x2_t v488 = vmaxnmq_f64(v488, v502);
    float64x2_t v481 = vminnmq_f64(v481, v505);
    float64x2_t v486 = vminnmq_f64(v486, v506);
    float64x2_t v482 = vmaxnmq_f64(v482, v505);
    float64x2_t v485 = vmaxnmq_f64(v485, v506);
    v483 += 32;
    v484 -= 4;
  }
  while (v484);
  double v473 = vminnmvq_f64(vminnmq_f64(v493, v494));
  double v471 = vmaxnmvq_f64(vmaxnmq_f64(v491, v492));
  double v472 = vminnmvq_f64(vminnmq_f64(v489, v490));
  double v475 = vmaxnmvq_f64(vmaxnmq_f64(v487, v488));
  double v474 = vminnmvq_f64(vminnmq_f64(v481, v486));
  double v476 = vmaxnmvq_f64(vmaxnmq_f64(v482, v485));
  if (v479 != v480)
  {
LABEL_205:
    unint64_t v507 = v479 - v480;
    v508 = (float *)&v32[4 * v480 + 1];
    do
    {
      double v509 = *(v508 - 2);
      double v510 = *(v508 - 1);
      float v511 = *v508;
      v508 += 8;
      double v473 = fmin(v473, v509);
      double v471 = fmax(v471, v509);
      double v472 = fmin(v472, v510);
      double v475 = fmax(v475, v510);
      double v474 = fmin(v474, v511);
      double v476 = fmax(v476, v511);
      --v507;
    }
    while (v507);
  }
LABEL_207:
  v467[16] = v473;
  v467[17] = v472;
  v467[18] = v474;
  v467[19] = v471;
  v467[20] = v475;
  v467[21] = v476;
  if (v32 && v515 != v514)
  {
LABEL_209:
    unint64_t v512 = *(void *)(v27 + 64);
    if (v512 <= v30) {
      unint64_t v512 = v30;
    }
    *(void *)(v27 + 56) = 0;
    *(void *)(v27 + 64) = v512;
  }
}

void altitude::HeightMeshBuilder::allocateMeshData(altitude::HeightMeshBuilder *this, int a2, int a3)
{
  int v4 = *((_DWORD *)this + 4);
  int v5 = 2 * (a2 - 1) * (a2 - 1);
  int v6 = 8 * (a2 - 1);
  if (!a3) {
    int v6 = 0;
  }
  unint64_t v7 = (3 * (v5 + v6));
  uint64_t v8 = ((a2 + 4) * a2);
  if (v4) {
    BOOL v9 = v4 == 3;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    double v10 = &ggl::CommonMesh::bufferPos4UVReflection;
  }
  else {
    double v10 = &ggl::TileBaseSurface::p3T2T2BufferReflection;
  }
  int v11 = operator new(0xF8uLL);
  v11[1] = 0;
  v11[2] = 0;
  *int v11 = &unk_1EF5832E0;
  uint64_t v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), (uint64_t)(*v10)[3], 0, 0, 7, v8);
  v11[3] = &unk_1EF55A518;
  v11[28] = &unk_1EF55A538;
  v11[29] = "/render/tilebasic/vertexdata";
  v11[30] = v10;
  *(void *)&long long v13 = v12;
  *((void *)&v13 + 1) = v11;
  double v14 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  float v15 = (unsigned char *)*((void *)this + 5);
  if (v7 > (uint64_t)(*((void *)this + 7) - (void)v15) >> 1)
  {
    float64x2_t v16 = (unsigned char *)*((void *)this + 6);
    float v17 = (char *)operator new(2 * v7);
    uint64_t v18 = v16 - v15;
    __n128 v19 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFELL];
    double v20 = v19;
    if (v16 == v15) {
      goto LABEL_21;
    }
    if ((unint64_t)(v18 - 2) >= 0x1E)
    {
      double v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(&v16[-(v18 & 0xFFFFFFFFFFFFFFFELL)] - v17) >= 0x20)
      {
        uint64_t v21 = v18 >> 1;
        unint64_t v22 = ((unint64_t)(v18 - 2) >> 1) + 1;
        double v23 = &v17[2 * v21 - 16];
        double v24 = (long long *)(v16 - 16);
        unint64_t v25 = v22 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v26 = *v24;
          *((_OWORD *)v23 - 1) = *(v24 - 1);
          *(_OWORD *)double v23 = v26;
          v23 -= 32;
          v24 -= 2;
          v25 -= 16;
        }
        while (v25);
        double v20 = &v19[-2 * (v22 & 0xFFFFFFFFFFFFFFF0)];
        v16 -= 2 * (v22 & 0xFFFFFFFFFFFFFFF0);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_21:
          *((void *)this + 5) = v20;
          *((void *)this + 6) = v19;
          *((void *)this + 7) = &v17[2 * v7];
          if (v15) {
            operator delete(v15);
          }
          goto LABEL_23;
        }
      }
    }
    else
    {
      double v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      __int16 v27 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v20 - 1) = v27;
      v20 -= 2;
    }
    while (v16 != v15);
    goto LABEL_21;
  }
LABEL_23:
  *((_DWORD *)this + 16) = 3 * v5;
}

void altitude::HeightMeshBuilder::constructGeocentricFrameForTile(altitude::HeightMeshBuilder *this, const QuadTile *a2, float a3)
{
  int v4 = 1 << a2->_level;
  double v5 = a3;
  double v6 = a3 + 1.0;
  double v7 = 6.28318531 / (double)v4;
  long double v8 = v7 * ((double)a2->_xIdx + 0.5);
  long double v9 = exp(v7 * ((double)(v4 + ~a2->_yIdx) + 0.5) + -3.14159265);
  double v10 = atan(v9) * 2.0 + -1.57079633;
  long double v11 = fmod(v8, 6.28318531);
  double v12 = fmod(v11 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v13 = __sincos_stret(v10);
  double v14 = 6378137.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
  double v15 = (v14 + v5) * v13.__cosval;
  __double2 v16 = __sincos_stret(v12);
  double v17 = (v14 * 0.99330562 + v5) * v13.__sinval;
  double v18 = (v14 + v6) * v13.__cosval;
  double v19 = -(v15 * v16.__cosval - v18 * v16.__cosval);
  double v20 = -(v15 * v16.__sinval - v18 * v16.__sinval);
  double v21 = -(v17 - (v14 * 0.99330562 + v6) * v13.__sinval);
  double v22 = 1.0 / sqrt(v19 * v19 + v20 * v20 + v21 * v21);
  double v23 = v22 * v19;
  double v24 = v22 * v20;
  double v25 = v22 * v21;
  double v26 = -(v23 * (v22 * v21));
  double v27 = -(v24 * v25);
  double v28 = v24 * v24 + v23 * v23;
  double v29 = 1.0 / sqrt(v28);
  double v30 = -(v24 * v29);
  double v31 = v29 * v23;
  double v32 = 1.0 / sqrt(v27 * v27 + v26 * v26 + v28 * v28);
  double v33 = v32 * v26;
  double v34 = v32 * v27;
  double v35 = v32 * v28;
  double v36 = v35 + v31 + v23;
  if (v36 <= 0.0)
  {
    if (v23 <= v31 || v23 <= v35)
    {
      BOOL v46 = v31 <= v35;
      double v47 = sqrt(1.0 - (v31 + v23) + v35);
      double v48 = 1.0 / (v47 + v47);
      double v49 = (v33 + v25) * v48;
      double v50 = v34 * v48;
      double v51 = v47 * 0.5;
      double v52 = (v24 - v30) * v48;
      double v53 = sqrt(v31 + 1.0 - (v23 + v35));
      double v54 = v30 + v24;
      double v55 = 1.0 / (v53 + v53);
      double v56 = v54 * v55;
      double v39 = v53 * 0.5;
      double v57 = v34 * v55;
      double v58 = (v33 - v25) * v55;
      if (v46) {
        double v38 = v49;
      }
      else {
        double v38 = v56;
      }
      if (v46)
      {
        double v39 = v50;
        double v40 = v51;
      }
      else
      {
        double v40 = v57;
      }
      if (v46) {
        double v41 = v52;
      }
      else {
        double v41 = v58;
      }
    }
    else
    {
      double v42 = sqrt(v23 + 1.0 - (v31 + v35));
      double v43 = v42 + v42;
      double v38 = v42 * 0.5;
      double v44 = v30 + v24;
      double v45 = 1.0 / v43;
      double v39 = v44 * (1.0 / v43);
      double v40 = (v33 + v25) * v45;
      double v41 = -(v34 * v45);
    }
  }
  else
  {
    double v37 = 0.5 / sqrt(v36 + 1.0);
    double v38 = -(v34 * v37);
    double v39 = v37 * (v33 - v25);
    double v40 = v37 * (v24 - v30);
    double v41 = 0.25 / v37;
  }
  *(double *)this = v15 * v16.__cosval;
  *((double *)this + 1) = v15 * v16.__sinval;
  *((double *)this + 2) = v17;
  *((double *)this + 3) = v38;
  *((double *)this + 4) = v39;
  *((double *)this + 5) = v40;
  *((double *)this + 6) = v41;
}

void altitude::HeightMeshBuilder::generateMesh<ggl::CommonMesh::BufferPos4UV>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, float *a7, __n128 a8, __n128 a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  float v18 = a8.n128_f32[0];
  int v21 = a4 - 1;
  float v22 = 1.0 / (float)(a4 - 1);
  if (!*(void *)a1)
  {
    if (!a4) {
      goto LABEL_11;
    }
    int v25 = 0;
    for (unsigned int i = 0; i != a4; ++i)
    {
      unsigned int v27 = 0;
      float v28 = v22 * (float)i;
      do
      {
        float v29 = v22 * (float)v27;
        *a6 = fminf(*a6, v18);
        *a7 = fmaxf(*a7, v18);
        uint64_t v30 = a5 + 32 * (v25 + v27);
        *(float *)uint64_t v30 = v29;
        *(float *)(v30 + 4) = v28;
        *(float *)(v30 + 8) = v18;
        *(_DWORD *)(v30 + 12) = 1065353216;
        *(float *)(v30 + 16) = v29;
        *(float *)(v30 + 20) = v28;
        ++v27;
      }
      while (a4 != v27);
      v25 += v27;
    }
LABEL_10:
    if (!v21) {
      return;
    }
    goto LABEL_11;
  }
  double v23 = *(_DWORD **)(*(void *)a1 + 16);
  if (!v23)
  {
    float v24 = 4295000000.0;
    if (!a4) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  float v24 = (float)(*v23 - 1);
  if (a4)
  {
LABEL_17:
    int v38 = 0;
    unsigned int v39 = 0;
    char v40 = *(unsigned char *)(a3 + 1);
    char v41 = *(unsigned char *)(a2 + 1);
    int v42 = *(_DWORD *)(a3 + 4) + (-1 << v40) + 1;
    char v43 = v41 - v40;
    float v44 = v24 / (float)(1 << v43);
    float v45 = (float)(*(_DWORD *)(a2 + 8) - (*(_DWORD *)(a3 + 8) << v43));
    float v46 = (float)(~(-1 << v41) - *(_DWORD *)(a2 + 4) + (v42 << v43));
    do
    {
      float v47 = v22 * (float)v39;
      uint64_t v48 = *(void *)a1;
      if (*(void *)a1)
      {
        unsigned int v58 = v39;
        for (unsigned int j = 0; ; ++j)
        {
          float v50 = v22 * (float)j;
          float v63 = 0.0;
          if (v48)
          {
            a8.n128_f32[0] = (float)(v50 + v45) * v44;
            int v51 = *(_DWORD *)(v48 + 132);
            if (v51 == 16)
            {
              a9.n128_f32[0] = (float)(v47 + v46) * v44;
              karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v48, &v63, a8, a9, a10, a11, a12, a13, a14, a15);
            }
            else if (v51 == 8)
            {
              a9.n128_f32[0] = (float)(v47 + v46) * v44;
              karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v48, &v63, a8, a9, a10, a11, a12, a13, a14, a15);
            }
            else
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              double v52 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl(&dword_1A1780000, v52, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
              }
            }
          }
          float v53 = v63 + v18;
          *a6 = fminf(*a6, v63 + v18);
          *a7 = fmaxf(v53, *a7);
          uint64_t v54 = a5 + 32 * (v38 + j);
          *(float *)uint64_t v54 = v50;
          *(float *)(v54 + 4) = v47;
          *(float *)(v54 + 8) = v53;
          *(_DWORD *)(v54 + 12) = 1065353216;
          *(float *)(v54 + 16) = v50;
          *(float *)(v54 + 20) = v47;
          if (v21 == j) {
            break;
          }
          uint64_t v48 = *(void *)a1;
        }
        v38 += j + 1;
        unsigned int v39 = v58;
      }
      else
      {
        unsigned int v55 = 0;
        do
        {
          float v56 = v22 * (float)v55;
          *a6 = fminf(*a6, v18);
          *a7 = fmaxf(*a7, v18);
          uint64_t v57 = a5 + 32 * (v38 + v55);
          *(float *)uint64_t v57 = v56;
          *(float *)(v57 + 4) = v47;
          *(float *)(v57 + 8) = v18;
          *(_DWORD *)(v57 + 12) = 1065353216;
          *(float *)(v57 + 16) = v56;
          *(float *)(v57 + 20) = v47;
          ++v55;
        }
        while (a4 != v55);
        v38 += v55;
      }
      ++v39;
    }
    while (v39 != a4);
    goto LABEL_10;
  }
LABEL_11:
  int v31 = 0;
  int v32 = 0;
  double v33 = (char **)(a1 + 40);
  do
  {
    int v34 = v31;
    int v35 = v21;
    do
    {
      __int16 v62 = v34;
      int v36 = v34 + 1;
      __int16 v61 = v34 + 1;
      __int16 v37 = v34 + a4;
      __int16 v60 = v37 + 1;
      __int16 v59 = v37;
      int v34 = v36;
      --v35;
    }
    while (v35);
    ++v32;
    v31 += a4;
  }
  while (v32 != v21);
}

void altitude::HeightMeshBuilder::generateSmercCoordinates<ggl::CommonMesh::BufferPos4UV>(char a1, uint64_t a2, double *a3, unsigned int a4, uint64_t a5, unint64_t a6, float a7)
{
  uint64_t v8 = a5;
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a6)
    {
      double v10 = a3[4];
      double v11 = a3[5];
      double v12 = a3[2];
      double v13 = a3[3];
      double v14 = a3[1];
      double v204 = *a3;
      double v207 = v12;
      double v15 = -(*a3 * v11 - v12 * v13);
      unsigned int v16 = 1;
      int v17 = 1 << *(unsigned char *)(a2 + 1);
      double v195 = (double)*(int *)(a2 + 8);
      double v196 = -(v12 * v10 - v14 * v11) - (v12 * v10 - v14 * v11);
      double v193 = (double)(v17 + ~*(_DWORD *)(a2 + 4));
      double v190 = 6.28318531 / (double)v17;
      double v209 = a3[6];
      double v198 = -(v14 * v13 - v204 * v10) - (v14 * v13 - v204 * v10);
      double v201 = v15 + v15;
      double v187 = -(v14 - (v11 + v11) * -(v12 * v10 - v14 * v11));
      double v188 = (v15 + v15) * v209 + v198 * v13;
      uint64_t v18 = a5 + 12;
      do
      {
        double v19 = *(float *)(v18 - 4);
        long double v20 = (*(float *)(v18 + 4) + v195) * v190;
        long double v21 = exp((*(float *)(v18 + 8) + v193) * v190 + -3.14159265);
        double v22 = atan(v21) * 2.0 + -1.57079633;
        long double v23 = fmod(v20, 6.28318531);
        double v24 = fmod(v23 + 6.28318531, 6.28318531) + -3.14159265;
        __double2 v25 = __sincos_stret(v22);
        double v26 = 6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
        double v27 = (v26 + v19) * v25.__cosval;
        __double2 v28 = __sincos_stret(v24);
        double v29 = v27 * v28.__cosval;
        double v30 = v27 * v28.__sinval;
        double v31 = (v19 + v26 * 0.99330562) * v25.__sinval;
        double v32 = -(v29 * v11 - v31 * v13) - (v29 * v11 - v31 * v13);
        double v33 = -(v31 * v10 - v30 * v11) - (v31 * v10 - v30 * v11);
        double v34 = -(v30 * v13 - v29 * v10) - (v30 * v13 - v29 * v10);
        *(float *)&double v29 = v27 * v28.__cosval - v204 + (v32 - v201) * v11 + (v33 - v196) * v209 + (v198 - v34) * v10;
        *(float *)&double v30 = v187 + v27 * v28.__sinval + v32 * v209 + v34 * v13 - (v188 + v33 * v11);
        *(float *)&double v31 = v31 - v207 + (v34 - v198) * v209 + (v33 - v196) * v10 + (v201 - v32) * v13;
        *(_DWORD *)(v18 - 12) = LODWORD(v29);
        *(_DWORD *)(v18 - 8) = LODWORD(v30);
        *(_DWORD *)(v18 - 4) = LODWORD(v31);
        *(_DWORD *)uint64_t v18 = 1065353216;
        v18 += 32;
        unint64_t v35 = v16++;
      }
      while (v35 < a6);
    }
    return;
  }
  unsigned int v36 = *(unsigned __int8 *)(a2 + 1);
  if (v36 > 0xB)
  {
    uint64_t v66 = 0;
    double v67 = a3[4];
    double v68 = a3[5];
    double v69 = a3[2];
    double v70 = a3[3];
    double v71 = a3[1];
    double v206 = v71;
    double v208 = v69;
    double v72 = -(v71 * v70 - *a3 * v67);
    double v197 = v72 + v72;
    double v200 = -(v69 * v67 - v71 * v68) - (v69 * v67 - v71 * v68);
    double v194 = v67;
    double v192 = (double)*(int *)(a2 + 8);
    double v191 = (double)((1 << v36) + ~*(_DWORD *)(a2 + 4));
    double v189 = 6.28318531 / (double)(1 << v36);
    double v211 = a3[6];
    double v203 = -(*a3 * v68 - v69 * v70) - (*a3 * v68 - v69 * v70);
    double v185 = v68;
    double v186 = -(v72 * v70 - -(v69 * v67 - v71 * v68) * v68);
    uint64_t v73 = (_DWORD *)v212 + 1;
    double v74 = a7;
    do
    {
      long double v75 = exp(((float)(v66 >> 1) + v191) * v189 + -3.14159265);
      double v76 = atan(v75) * 2.0 + -1.57079633;
      long double v77 = fmod(((double)(v66 & 1) + v192) * v189, 6.28318531);
      double v78 = fmod(v77 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v79 = __sincos_stret(v76);
      double v80 = 6378137.0 / sqrt(v79.__sinval * v79.__sinval * -0.00669437999 + 1.0);
      double v81 = (v80 + v74) * v79.__cosval;
      __double2 v82 = __sincos_stret(v78);
      double v83 = v81 * v82.__sinval;
      double v84 = (v74 + v80 * 0.99330562) * v79.__sinval;
      double v85 = -(v81 * v82.__cosval * v185 - v84 * v70);
      double v86 = -(v84 * v194 - v83 * v185) - (v84 * v194 - v83 * v185);
      double v87 = -(v83 * v70 - v81 * v82.__cosval * v194) - (v83 * v70 - v81 * v82.__cosval * v194);
      *(float *)&double v83 = v81 * v82.__sinval + v87 * v70 - (v206 + v203 * v211 + v86 * v185) + (v186 + v85 * v211) * 2.0;
      *(float *)&double v87 = v84 - v208 + (v87 - v197) * v211 + (v86 - v200) * v194 + (v203 - v85 * 2.0) * v70;
      *(v73 - 1) = LODWORD(v83);
      *uint64_t v73 = LODWORD(v87);
      ++v66;
      v73 += 2;
    }
    while (v66 != 4);
    if (a6)
    {
      float32x2_t v88 = v212[0];
      float32x2_t v89 = vsub_f32(v212[1], v212[0]);
      float32x2_t v90 = v213;
      float32x2_t v91 = vsub_f32(v214, v213);
      unsigned int v92 = 1;
      do
      {
        int v93 = (float *)v8;
        float32x2_t v94 = vld1_dup_f32(v93++);
        float v95 = *v93;
        *(float *)uint64_t v8 = *(float *)(v8 + 8) - a7;
        float32x2_t v96 = vmla_f32(v88, v89, v94);
        *(float32x2_t *)int v93 = vmla_n_f32(v96, vsub_f32(vmla_f32(v90, v91, v94), v96), v95);
        *(_DWORD *)(v8 + 12) = 1065353216;
        unint64_t v97 = v92;
        v8 += 32;
        ++v92;
      }
      while (v97 < a6);
    }
    return;
  }
  float v37 = 6.2832 / (float)(1 << v36);
  int v38 = a4 >> 1;
  size_t v39 = (a4 >> 1) + 2;
  char v40 = (__float2 *)operator new(v39 * 8);
  char v41 = &v40[v39];
  int v42 = (__float2 *)operator new(8 * (v38 + 2));
  int v43 = -1;
  unsigned int v205 = *(_DWORD *)(a2 + 8);
  float v44 = (float)(~(-1 << v36) - *(_DWORD *)(a2 + 4));
  float v45 = 1.0 / (float)((float)v38 + -1.0);
  float v46 = v40;
  int v210 = v38;
  do
  {
    float v49 = expf((float)((float)(v44 + (float)(v45 * (float)v43)) * v37) + -3.1416);
    float v50 = atanf(v49);
    float v51 = (float)(v50 + v50) + -1.57079633;
    __float2 v52 = __sincosf_stret(v51);
    if (v46 < v41)
    {
      *float v46 = v52;
      float v47 = v46 + 1;
      goto LABEL_9;
    }
    uint64_t v53 = v46 - v40;
    unint64_t v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 61) {
LABEL_88:
    }
      abort();
    if (((char *)v41 - (char *)v40) >> 2 > v54) {
      unint64_t v54 = ((char *)v41 - (char *)v40) >> 2;
    }
    if ((unint64_t)((char *)v41 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v54;
    }
    if (v55)
    {
      if (v55 >> 61) {
LABEL_89:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      float v56 = operator new(8 * v55);
    }
    else
    {
      float v56 = 0;
    }
    uint64_t v57 = (__float2 *)&v56[8 * v53];
    char v41 = (__float2 *)&v56[8 * v55];
    *uint64_t v57 = v52;
    float v47 = v57 + 1;
    if (v46 != v40)
    {
      unint64_t v58 = (char *)&v46[-1] - (char *)v40;
      if (v58 >= 0x168
        && &v56[(char *)v46 - (char *)v40 - 8 - (v58 & 0xFFFFFFFFFFFFFFF8)] <= &v56[(char *)v46 - (char *)v40 - 8]
        && (__float2 *)((char *)&v46[-1] - (v58 & 0xFFFFFFFFFFFFFFF8)) <= &v46[-1]
        && (unint64_t)((char *)v40 - v56) >= 0x20)
      {
        uint64_t v61 = (v58 >> 3) + 1;
        __int16 v59 = &v46[-(v61 & 0x3FFFFFFFFFFFFFFCLL)];
        __int16 v62 = &v56[8 * v53 - 16];
        float v63 = v46 - 2;
        uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v65 = *(_OWORD *)&v63->__sinval;
          *(v62 - 1) = *(_OWORD *)&v63[-2].__sinval;
          *__int16 v62 = v65;
          v62 -= 2;
          v63 -= 4;
          v64 -= 4;
        }
        while (v64);
        v57 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
        int v38 = v210;
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_28:
          if (!v40) {
            goto LABEL_32;
          }
          goto LABEL_31;
        }
      }
      else
      {
        __int16 v59 = v46;
        int v38 = v210;
      }
      do
      {
        __float2 v60 = v59[-1];
        --v59;
        v57[-1] = v60;
        --v57;
      }
      while (v59 != v40);
      goto LABEL_28;
    }
    int v38 = v210;
LABEL_31:
    operator delete(v40);
LABEL_32:
    char v40 = v57;
LABEL_9:
    float v46 = v47;
    BOOL v48 = v43++ == v38;
  }
  while (!v48);
  int v98 = -1;
  uint64_t v99 = v42;
  int v100 = &v42[v39];
  do
  {
    __float2 v102 = __sincosf_stret((float)((float)((float)v205 + (float)(v45 * (float)v98)) * v37) + -3.1416);
    if (v99 < v100)
    {
      *uint64_t v99 = v102;
      int v101 = v99 + 1;
      goto LABEL_45;
    }
    uint64_t v103 = v99 - v42;
    unint64_t v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 61) {
      goto LABEL_88;
    }
    if (((char *)v100 - (char *)v42) >> 2 > v104) {
      unint64_t v104 = ((char *)v100 - (char *)v42) >> 2;
    }
    if ((unint64_t)((char *)v100 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v105 = v104;
    }
    if (v105)
    {
      if (v105 >> 61) {
        goto LABEL_89;
      }
      float64x2_t v106 = operator new(8 * v105);
    }
    else
    {
      float64x2_t v106 = 0;
    }
    uint64_t v107 = (__float2 *)&v106[8 * v103];
    int v100 = (__float2 *)&v106[8 * v105];
    *uint64_t v107 = v102;
    int v101 = v107 + 1;
    if (v99 != v42)
    {
      unint64_t v108 = (char *)&v99[-1] - (char *)v42;
      if (v108 >= 0x168
        && &v106[(char *)v99 - (char *)v42 - 8 - (v108 & 0xFFFFFFFFFFFFFFF8)] <= &v106[(char *)v99 - (char *)v42 - 8]
        && (__float2 *)((char *)&v99[-1] - (v108 & 0xFFFFFFFFFFFFFFF8)) <= &v99[-1]
        && (unint64_t)((char *)v42 - v106) >= 0x20)
      {
        uint64_t v111 = (v108 >> 3) + 1;
        unint64_t v109 = &v99[-(v111 & 0x3FFFFFFFFFFFFFFCLL)];
        double v112 = &v106[8 * v103 - 16];
        double v113 = v99 - 2;
        uint64_t v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v115 = *(_OWORD *)&v113->__sinval;
          *(v112 - 1) = *(_OWORD *)&v113[-2].__sinval;
          *double v112 = v115;
          v112 -= 2;
          v113 -= 4;
          v114 -= 4;
        }
        while (v114);
        v107 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
        int v38 = v210;
        if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_64:
          if (!v42) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
      }
      else
      {
        unint64_t v109 = v99;
        int v38 = v210;
      }
      do
      {
        __float2 v110 = v109[-1];
        --v109;
        v107[-1] = v110;
        --v107;
      }
      while (v109 != v42);
      goto LABEL_64;
    }
    int v38 = v210;
LABEL_67:
    operator delete(v42);
LABEL_68:
    int v42 = v107;
LABEL_45:
    uint64_t v99 = v101;
    BOOL v48 = v98++ == v38;
  }
  while (!v48);
  if (a6)
  {
    double v116 = a3[4];
    double v117 = a3[5];
    double v118 = a3[6];
    double v119 = a3[2];
    double v120 = a3[3];
    double v121 = a3[1];
    double v122 = -(*a3 * v117 - v119 * v120);
    double v123 = -(v121 * v120 - *a3 * v116);
    double v124 = -(v119 * v116 - v121 * v117) - (v119 * v116 - v121 * v117);
    double v125 = v122 + v122;
    double v126 = v123 + v123;
    double v127 = -(v119 + v124 * v116 + (v123 + v123) * v118 - (v122 + v122) * v120);
    float v128 = -(*a3 + v124 * v118 + (v122 + v122) * v117 - (v123 + v123) * v116);
    float v129 = v127;
    float v130 = v120;
    float v131 = v116;
    float v132 = v117;
    float v133 = v118;
    float v134 = v121 - v124 * v117 + v125 * v118 + v126 * v120;
    float v135 = (float)(v38 - 1);
    unsigned int v136 = v38 - 2;
    uint64_t v137 = v8 + 8;
    unsigned int v138 = 1;
    do
    {
      float v139 = *(float *)(v137 - 4) * v135;
      unsigned int v140 = v139;
      if (v139 >= v136) {
        unsigned int v140 = v38 - 2;
      }
      float v141 = *(float *)(v137 - 8) * v135;
      unsigned int v142 = v141;
      if (v141 >= v136) {
        unsigned int v142 = v38 - 2;
      }
      float v143 = v141 - (float)v142;
      float v144 = v139 - (float)v140;
      float v145 = (float *)&v40[v140];
      float v146 = (float *)&v40[v140 + 1];
      unsigned int v147 = (float *)&v40[v140 + 2];
      float v148 = (float *)&v40[v140 + 3];
      float v149 = v145[1];
      float v150 = v146[1];
      float v151 = v147[1];
      float v152 = v148[1];
      float v153 = v144 * v144;
      float v154 = v144 * 0.5;
      float v155 = (float)(*v146 + (float)((float)(*v147 - *v145) * v154))
           + (float)((float)((float)((float)((float)(*v145 + *v145) + (float)(*v146 * -5.0)) + (float)(*v147 * 4.0))
                           - *v148)
                   * (float)(v153 * 0.5));
      float v156 = (float)(v150 + (float)((float)(v151 - v149) * v154))
           + (float)((float)((float)((float)((float)(v149 + v149) + (float)(v150 * -5.0)) + (float)(v151 * 4.0)) - v152)
                   * (float)(v153 * 0.5));
      float v157 = v154 * v153;
      float v158 = v155 + (float)((float)((float)(*v148 - *v145) + (float)((float)(*v146 - *v147) * 3.0)) * v157);
      float v159 = v156 + (float)((float)((float)(v152 - v149) + (float)((float)(v150 - v151) * 3.0)) * v157);
      int32x2_t v160 = (float *)&v42[v142];
      unint64_t v161 = (float *)&v42[v142 + 1];
      uint64_t v162 = (float *)&v42[v142 + 2];
      uint64_t v163 = (float *)&v42[v142 + 3];
      float v164 = v160[1];
      float v165 = v161[1];
      float v166 = v162[1];
      float v167 = v163[1];
      float v168 = v143 * v143;
      float v169 = v143 * 0.5;
      float v170 = (float)(*v161 + (float)((float)(*v162 - *v160) * v169))
           + (float)((float)((float)((float)((float)(*v160 + *v160) + (float)(*v161 * -5.0)) + (float)(*v162 * 4.0))
                           - *v163)
                   * (float)(v168 * 0.5));
      float v171 = (float)(v165 + (float)((float)(v166 - v164) * v169))
           + (float)((float)((float)((float)((float)(v164 + v164) + (float)(v165 * -5.0)) + (float)(v166 * 4.0)) - v167)
                   * (float)(v168 * 0.5));
      float v172 = v169 * v168;
      float v173 = v170 + (float)((float)((float)(*v163 - *v160) + (float)((float)(*v161 - *v162) * 3.0)) * v172);
      float v174 = v171 + (float)((float)((float)(v167 - v164) + (float)((float)(v165 - v166) * 3.0)) * v172);
      float v175 = 6378137.0 / sqrt((float)((float)(v158 * v158) * -0.0066944) + 1.0);
      float v176 = (float)(*(float *)v137 + v175) * v159;
      float v177 = v176 * v174;
      float v178 = v176 * v173;
      float v179 = (*(float *)v137 + v175 * 0.99330562) * v158;
      float v180 = (float)-(float)((float)(v178 * v130) - (float)(v177 * v131))
           - (float)((float)(v178 * v130) - (float)(v177 * v131));
      float v181 = (float)-(float)((float)(v179 * v131) - (float)(v178 * v132))
           - (float)((float)(v179 * v131) - (float)(v178 * v132));
      float v182 = (float)-(float)((float)(v177 * v132) - (float)(v179 * v130))
           - (float)((float)(v177 * v132) - (float)(v179 * v130));
      *(float *)(v137 - 8) = (float)((float)((float)(v177 + v128) - (float)(v180 * v131)) + (float)(v181 * v133))
                           + (float)(v182 * v132);
      *(float *)(v137 - 4) = -(float)((float)(v181 * v132)
                                    - (float)((float)((float)(v178 - v134) + (float)(v180 * v130)) + (float)(v182 * v133)));
      *(float *)uint64_t v137 = (float)((float)((float)(v179 + v129) + (float)(v180 * v133)) + (float)(v181 * v131))
                     - (float)(v182 * v130);
      *(_DWORD *)(v137 + 4) = 1065353216;
      unint64_t v183 = v138;
      v137 += 32;
      ++v138;
    }
    while (v183 < a6);
LABEL_82:
    operator delete(v42);
  }
  else if (v42)
  {
    goto LABEL_82;
  }
  if (v40)
  {
    operator delete(v40);
  }
}

void anonymous namespace'::pushQuad(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, char **a5)
{
  double v6 = a4;
  double v7 = a3;
  double v11 = a5[1];
  double v10 = a5[2];
  double v12 = v11;
  if (v11 >= v10)
  {
    double v14 = *a5;
    uint64_t v15 = v11 - *a5;
    if (v15 <= -3) {
      goto LABEL_145;
    }
    uint64_t v17 = v15 >> 1;
    unint64_t v18 = v10 - v14;
    if (v18 <= (v15 >> 1) + 1) {
      unint64_t v19 = v17 + 1;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    if (v20)
    {
      if (v20 < 0) {
        goto LABEL_146;
      }
      long double v21 = operator new(2 * v20);
    }
    else
    {
      long double v21 = 0;
    }
    double v22 = &v21[2 * v17];
    double v10 = &v21[2 * v20];
    *(_WORD *)double v22 = *a1;
    double v13 = v22 + 2;
    if (v11 != v14)
    {
      unint64_t v23 = v11 - v14 - 2;
      if (v23 < 0x1E) {
        goto LABEL_149;
      }
      if (v11 - v21 - (v15 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
        goto LABEL_149;
      }
      uint64_t v24 = (v23 >> 1) + 1;
      double v12 = &v11[-2 * (v24 & 0xFFFFFFFFFFFFFFF0)];
      __double2 v25 = &v21[2 * v17 - 16];
      double v26 = v11 - 16;
      unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *__double2 v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 16;
      }
      while (v27);
      v22 -= 2 * (v24 & 0xFFFFFFFFFFFFFFF0);
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_149:
        do
        {
          __int16 v29 = *((_WORD *)v12 - 1);
          v12 -= 2;
          *((_WORD *)v22 - 1) = v29;
          v22 -= 2;
        }
        while (v12 != v14);
      }
    }
    *a5 = v22;
    a5[1] = v13;
    a5[2] = v10;
    if (v14)
    {
      operator delete(v14);
      double v10 = a5[2];
    }
    double v6 = a4;
    double v7 = a3;
  }
  else
  {
    *(_WORD *)double v11 = *a1;
    double v13 = v11 + 2;
  }
  a5[1] = v13;
  if (v13 < v10)
  {
    *(_WORD *)double v13 = *a2;
    double v30 = v13 + 2;
    goto LABEL_48;
  }
  double v31 = *a5;
  uint64_t v32 = v13 - *a5;
  if (v32 <= -3) {
    goto LABEL_145;
  }
  uint64_t v33 = v32 >> 1;
  unint64_t v34 = v10 - v31;
  if (v34 <= (v32 >> 1) + 1) {
    unint64_t v35 = v33 + 1;
  }
  else {
    unint64_t v35 = v34;
  }
  if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v36 = v35;
  }
  if (v36)
  {
    if (v36 < 0) {
      goto LABEL_146;
    }
    float v37 = operator new(2 * v36);
  }
  else
  {
    float v37 = 0;
  }
  int v38 = &v37[2 * v33];
  double v10 = &v37[2 * v36];
  *(_WORD *)int v38 = *a2;
  double v30 = v38 + 2;
  if (v13 != v31)
  {
    unint64_t v39 = v13 - v31 - 2;
    if (v39 < 0x1E)
    {
      char v40 = v13;
      goto LABEL_45;
    }
    if (v13 - v37 - (v32 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      char v40 = v13;
      do
      {
LABEL_45:
        __int16 v46 = *((_WORD *)v40 - 1);
        v40 -= 2;
        *((_WORD *)v38 - 1) = v46;
        v38 -= 2;
      }
      while (v40 != v31);
      goto LABEL_46;
    }
    uint64_t v41 = (v39 >> 1) + 1;
    char v40 = &v13[-2 * (v41 & 0xFFFFFFFFFFFFFFF0)];
    int v42 = &v37[2 * v33 - 16];
    int v43 = v13 - 16;
    unint64_t v44 = v41 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v45 = *(_OWORD *)v43;
      *(v42 - 1) = *((_OWORD *)v43 - 1);
      *int v42 = v45;
      v42 -= 2;
      v43 -= 32;
      v44 -= 16;
    }
    while (v44);
    v38 -= 2 * (v41 & 0xFFFFFFFFFFFFFFF0);
    if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_45;
    }
  }
LABEL_46:
  *a5 = v38;
  a5[1] = v30;
  a5[2] = v10;
  if (v31)
  {
    operator delete(v31);
    double v10 = a5[2];
  }
LABEL_48:
  a5[1] = v30;
  if (v30 < v10)
  {
    *(_WORD *)double v30 = *v7;
    float v47 = v30 + 2;
    goto LABEL_72;
  }
  BOOL v48 = *a5;
  uint64_t v49 = v30 - *a5;
  if (v49 <= -3) {
    goto LABEL_145;
  }
  uint64_t v50 = v49 >> 1;
  unint64_t v51 = v10 - v48;
  if (v51 <= (v49 >> 1) + 1) {
    unint64_t v52 = v50 + 1;
  }
  else {
    unint64_t v52 = v51;
  }
  if (v51 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v53 = v52;
  }
  if (v53)
  {
    if (v53 < 0) {
      goto LABEL_146;
    }
    unint64_t v54 = operator new(2 * v53);
  }
  else
  {
    unint64_t v54 = 0;
  }
  unint64_t v55 = &v54[2 * v50];
  double v10 = &v54[2 * v53];
  *(_WORD *)unint64_t v55 = *v7;
  float v47 = v55 + 2;
  if (v30 != v48)
  {
    unint64_t v56 = v30 - v48 - 2;
    if (v56 < 0x1E)
    {
      uint64_t v57 = v30;
      goto LABEL_69;
    }
    if (v30 - v54 - (v49 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      uint64_t v57 = v30;
      do
      {
LABEL_69:
        __int16 v63 = *((_WORD *)v57 - 1);
        v57 -= 2;
        *((_WORD *)v55 - 1) = v63;
        v55 -= 2;
      }
      while (v57 != v48);
      goto LABEL_70;
    }
    uint64_t v58 = (v56 >> 1) + 1;
    uint64_t v57 = &v30[-2 * (v58 & 0xFFFFFFFFFFFFFFF0)];
    __int16 v59 = &v54[2 * v50 - 16];
    __float2 v60 = v30 - 16;
    unint64_t v61 = v58 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *__int16 v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 16;
    }
    while (v61);
    v55 -= 2 * (v58 & 0xFFFFFFFFFFFFFFF0);
    if (v58 != (v58 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_69;
    }
  }
LABEL_70:
  *a5 = v55;
  a5[1] = v47;
  a5[2] = v10;
  if (v48)
  {
    operator delete(v48);
    double v10 = a5[2];
  }
LABEL_72:
  a5[1] = v47;
  if (v47 < v10)
  {
    *(_WORD *)float v47 = *v7;
    uint64_t v64 = v47 + 2;
    goto LABEL_96;
  }
  long long v65 = *a5;
  uint64_t v66 = v47 - *a5;
  if (v66 <= -3) {
    goto LABEL_145;
  }
  uint64_t v67 = v66 >> 1;
  unint64_t v68 = v10 - v65;
  if (v68 <= (v66 >> 1) + 1) {
    unint64_t v69 = v67 + 1;
  }
  else {
    unint64_t v69 = v68;
  }
  if (v68 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v70 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v70 = v69;
  }
  if (v70)
  {
    if (v70 < 0) {
      goto LABEL_146;
    }
    double v71 = operator new(2 * v70);
  }
  else
  {
    double v71 = 0;
  }
  double v72 = &v71[2 * v67];
  double v10 = &v71[2 * v70];
  *(_WORD *)double v72 = *v7;
  uint64_t v64 = v72 + 2;
  if (v47 != v65)
  {
    unint64_t v73 = v47 - v65 - 2;
    if (v73 < 0x1E)
    {
      double v74 = v47;
      goto LABEL_93;
    }
    if (v47 - v71 - (v66 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      double v74 = v47;
      do
      {
LABEL_93:
        __int16 v80 = *((_WORD *)v74 - 1);
        v74 -= 2;
        *((_WORD *)v72 - 1) = v80;
        v72 -= 2;
      }
      while (v74 != v65);
      goto LABEL_94;
    }
    uint64_t v75 = (v73 >> 1) + 1;
    double v74 = &v47[-2 * (v75 & 0xFFFFFFFFFFFFFFF0)];
    double v76 = &v71[2 * v67 - 16];
    long double v77 = v47 - 16;
    unint64_t v78 = v75 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      _OWORD *v76 = v79;
      v76 -= 2;
      v77 -= 32;
      v78 -= 16;
    }
    while (v78);
    v72 -= 2 * (v75 & 0xFFFFFFFFFFFFFFF0);
    if (v75 != (v75 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_93;
    }
  }
LABEL_94:
  *a5 = v72;
  a5[1] = v64;
  a5[2] = v10;
  if (v65)
  {
    operator delete(v65);
    double v10 = a5[2];
  }
LABEL_96:
  a5[1] = v64;
  if (v64 < v10)
  {
    *(_WORD *)uint64_t v64 = *v6;
    double v81 = v64 + 2;
    goto LABEL_120;
  }
  __double2 v82 = *a5;
  uint64_t v83 = v64 - *a5;
  if (v83 <= -3) {
    goto LABEL_145;
  }
  uint64_t v84 = v83 >> 1;
  unint64_t v85 = v10 - v82;
  if (v85 <= (v83 >> 1) + 1) {
    unint64_t v86 = v84 + 1;
  }
  else {
    unint64_t v86 = v85;
  }
  if (v85 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v87 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v87 = v86;
  }
  if (v87)
  {
    if (v87 < 0) {
      goto LABEL_146;
    }
    float32x2_t v88 = operator new(2 * v87);
  }
  else
  {
    float32x2_t v88 = 0;
  }
  float32x2_t v89 = &v88[2 * v84];
  double v10 = &v88[2 * v87];
  *(_WORD *)float32x2_t v89 = *v6;
  double v81 = v89 + 2;
  if (v64 != v82)
  {
    unint64_t v90 = v64 - v82 - 2;
    if (v90 < 0x1E)
    {
      float32x2_t v91 = v64;
      goto LABEL_117;
    }
    if (v64 - v88 - (v83 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
    {
      float32x2_t v91 = v64;
      do
      {
LABEL_117:
        __int16 v97 = *((_WORD *)v91 - 1);
        v91 -= 2;
        *((_WORD *)v89 - 1) = v97;
        v89 -= 2;
      }
      while (v91 != v82);
      goto LABEL_118;
    }
    uint64_t v92 = (v90 >> 1) + 1;
    float32x2_t v91 = &v64[-2 * (v92 & 0xFFFFFFFFFFFFFFF0)];
    int v93 = &v88[2 * v84 - 16];
    float32x2_t v94 = v64 - 16;
    unint64_t v95 = v92 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v96 = *(_OWORD *)v94;
      *(v93 - 1) = *((_OWORD *)v94 - 1);
      *int v93 = v96;
      v93 -= 2;
      v94 -= 32;
      v95 -= 16;
    }
    while (v95);
    v89 -= 2 * (v92 & 0xFFFFFFFFFFFFFFF0);
    if (v92 != (v92 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_117;
    }
  }
LABEL_118:
  *a5 = v89;
  a5[1] = v81;
  a5[2] = v10;
  if (v82)
  {
    operator delete(v82);
    double v10 = a5[2];
  }
LABEL_120:
  a5[1] = v81;
  if (v81 < v10)
  {
    *(_WORD *)double v81 = *a1;
    int v98 = v81 + 2;
    goto LABEL_144;
  }
  uint64_t v99 = *a5;
  uint64_t v100 = v81 - *a5;
  if (v100 <= -3) {
LABEL_145:
  }
    abort();
  uint64_t v101 = v100 >> 1;
  unint64_t v102 = v10 - v99;
  if (v102 <= (v100 >> 1) + 1) {
    unint64_t v103 = v101 + 1;
  }
  else {
    unint64_t v103 = v102;
  }
  if (v102 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v104 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v104 = v103;
  }
  if (v104)
  {
    if ((v104 & 0x8000000000000000) == 0)
    {
      unint64_t v105 = operator new(2 * v104);
      goto LABEL_133;
    }
LABEL_146:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v105 = 0;
LABEL_133:
  float64x2_t v106 = &v105[2 * v101];
  *(_WORD *)float64x2_t v106 = *a1;
  int v98 = v106 + 2;
  if (v81 == v99) {
    goto LABEL_142;
  }
  unint64_t v107 = v81 - v99 - 2;
  if (v107 < 0x1E)
  {
    unint64_t v108 = v81;
    goto LABEL_141;
  }
  if (v81 - v105 - (v100 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
  {
    unint64_t v108 = v81;
    do
    {
LABEL_141:
      __int16 v114 = *((_WORD *)v108 - 1);
      v108 -= 2;
      *((_WORD *)v106 - 1) = v114;
      v106 -= 2;
    }
    while (v108 != v99);
    goto LABEL_142;
  }
  uint64_t v109 = (v107 >> 1) + 1;
  unint64_t v108 = &v81[-2 * (v109 & 0xFFFFFFFFFFFFFFF0)];
  __float2 v110 = &v105[2 * v101 - 16];
  uint64_t v111 = v81 - 16;
  unint64_t v112 = v109 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    long long v113 = *(_OWORD *)v111;
    *(v110 - 1) = *((_OWORD *)v111 - 1);
    *__float2 v110 = v113;
    v110 -= 2;
    v111 -= 32;
    v112 -= 16;
  }
  while (v112);
  v106 -= 2 * (v109 & 0xFFFFFFFFFFFFFFF0);
  if (v109 != (v109 & 0xFFFFFFFFFFFFFFF0)) {
    goto LABEL_141;
  }
LABEL_142:
  *a5 = v106;
  a5[1] = v98;
  a5[2] = &v105[2 * v104];
  if (v99) {
    operator delete(v99);
  }
LABEL_144:
  a5[1] = v98;
}

uint64_t karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(uint64_t a1, float *a2, __n128 a3, __n128 a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  float v12 = a4.n128_f32[0];
  float v13 = a3.n128_f32[0];
  uint64_t v14 = a1;
  uint64_t v15 = *(void *)(a1 + 16);
  do
  {
    if (!v15) {
      return 0;
    }
    double v22 = *(uint64_t **)(v15 + 16);
    uint64_t v24 = *v22;
    unint64_t v23 = (std::__shared_weak_count *)v22[1];
    if (v23
      && (atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v24) {
        return 0;
      }
    }
    else if (!v24)
    {
      return 0;
    }
    __double2 v25 = *(uint64_t **)(*(void *)(v14 + 16) + 16);
    uint64_t v26 = *v25;
    unint64_t v27 = (std::__shared_weak_count *)v25[1];
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v28 = *(void *)(v26 + 8);
      if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        __int16 v29 = *(int **)(v14 + 16);
        if (v29) {
          goto LABEL_14;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        __int16 v29 = *(int **)(v14 + 16);
        if (v29)
        {
LABEL_14:
          int v30 = *v29;
          unsigned int v31 = v29[1] - 2;
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v28 = *(void *)(v26 + 8);
      __int16 v29 = *(int **)(v14 + 16);
      if (v29) {
        goto LABEL_14;
      }
    }
    int v30 = 0;
    unsigned int v31 = -2;
LABEL_17:
    float v32 = (float)(v30 - 1) - v12;
    unsigned int v33 = v13;
    if (v13 >= v30 - 2) {
      unsigned int v33 = v30 - 2;
    }
    if (v32 < v31) {
      unsigned int v31 = v32;
    }
    unsigned int v34 = v33 + v31 * v30;
    unsigned int v35 = *(unsigned __int8 *)(v28 + v34);
    int v36 = *(unsigned __int8 *)(v28 + v34 + 1);
    unsigned int v37 = v34 + v30;
    unsigned int v38 = *(unsigned __int8 *)(v28 + v37);
    int v39 = *(unsigned __int8 *)(v28 + v37 + 1);
    if (!*(unsigned char *)(v14 + 156) || v35 != 255 && v36 != 255 && v38 != 255 && v39 != 255)
    {
      float v43 = v13 - (float)v33;
      float v44 = (float)v35 + (float)(v43 * (float)(int)(v36 - v35));
      *a2 = *(float *)(v14 + 120)
          + (float)(*(float *)(v14 + 124)
                  * truncf(truncf(v44)+ (float)((float)(v32 - (float)v31)* (float)((int)(float)((float)v38 + (float)(v43 * (float)(int)(v39 - v38))) - (int)v44))));
      return 1;
    }
    uint64_t result = *(void *)(v14 + 160);
    if (!result) {
      return result;
    }
    double v41 = 1.0 / (double)(1 << *(_DWORD *)(v14 + 136));
    double v42 = v13;
    if (v29)
    {
      LODWORD(a5) = *v29;
      LODWORD(a6) = v29[1];
      double v16 = v41 * v42 / ((double)*(unint64_t *)&a5 + -1.0);
      double v17 = (double)*(unint64_t *)&a6 + -1.0;
      uint64_t v15 = *(void *)(result + 16);
      if (v15)
      {
LABEL_3:
        LODWORD(a6) = *(_DWORD *)v15;
        a6 = (double)*(unint64_t *)&a6 + -1.0;
        goto LABEL_4;
      }
    }
    else
    {
      double v16 = -(v42 * v41);
      double v17 = -1.0;
      uint64_t v15 = *(void *)(result + 16);
      if (v15) {
        goto LABEL_3;
      }
    }
    a6 = -1.0;
LABEL_4:
    uint64_t v18 = *(void *)(result + 136);
    double v19 = (double)(1 << v18);
    LODWORD(a10) = *(_DWORD *)(v14 + 140);
    LODWORD(a9) = *(_DWORD *)(v14 + 144);
    a9 = v41 * (double)*(unint64_t *)&a9;
    a10 = v41 * (double)*(unint64_t *)&a10;
    LODWORD(v10) = *(_DWORD *)(result + 144);
    double v10 = (double)*(unint64_t *)&v10;
    double v20 = v41 * v12 / v17;
    a5 = a9 - 1.0 / v19 * v10;
    float v13 = (a5 + v16) * v19 * a6;
    a4.n128_f64[0] = v19 * a6;
    a3.n128_f64[0] = (a10 - 1.0 / v19 * (double)HIDWORD(v18) + v20) * (v19 * a6);
    float v12 = a3.n128_f64[0];
    int v21 = *(_DWORD *)(result + 132);
    uint64_t v14 = *(void *)(v14 + 160);
  }
  while (v21 == 8);
  if (v21 == 16)
  {
    a3.n128_f32[0] = v13;
    a4.n128_f32[0] = v12;
    return karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(result, a2, a3, a4, a5, a6, v19, 1.0 / v19, a9, a10);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    long long v45 = GEOGetVectorKitVKDefaultLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)__int16 v46 = 0;
      _os_log_impl(&dword_1A1780000, v45, OS_LOG_TYPE_ERROR, "Unknown DTM format", v46, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(uint64_t a1, float *a2, __n128 a3, __n128 a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  float v12 = a4.n128_f32[0];
  float v13 = a3.n128_f32[0];
  uint64_t v14 = a1;
  uint64_t v15 = *(void *)(a1 + 16);
  do
  {
    if (!v15) {
      return 0;
    }
    double v22 = *(uint64_t **)(v15 + 16);
    uint64_t v24 = *v22;
    unint64_t v23 = (std::__shared_weak_count *)v22[1];
    if (v23
      && (atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v24) {
        return 0;
      }
    }
    else if (!v24)
    {
      return 0;
    }
    __double2 v25 = *(uint64_t **)(*(void *)(v14 + 16) + 16);
    uint64_t v26 = *v25;
    unint64_t v27 = (std::__shared_weak_count *)v25[1];
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v28 = *(void *)(v26 + 8);
      if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        __int16 v29 = *(int **)(v14 + 16);
        if (v29) {
          goto LABEL_14;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        __int16 v29 = *(int **)(v14 + 16);
        if (v29)
        {
LABEL_14:
          int v30 = *v29;
          unsigned int v31 = v29[1] - 2;
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v28 = *(void *)(v26 + 8);
      __int16 v29 = *(int **)(v14 + 16);
      if (v29) {
        goto LABEL_14;
      }
    }
    int v30 = 0;
    unsigned int v31 = -2;
LABEL_17:
    float v32 = (float)(v30 - 1) - v12;
    unsigned int v33 = v13;
    if (v13 >= v30 - 2) {
      unsigned int v33 = v30 - 2;
    }
    if (v32 < v31) {
      unsigned int v31 = v32;
    }
    unsigned int v34 = v33 + v31 * v30;
    unsigned int v35 = *(unsigned __int16 *)(v28 + 2 * v34);
    int v36 = *(unsigned __int16 *)(v28 + 2 * (v34 + 1));
    unsigned int v37 = v34 + v30;
    unsigned int v38 = *(unsigned __int16 *)(v28 + 2 * v37);
    int v39 = *(unsigned __int16 *)(v28 + 2 * (v37 + 1));
    if (!*(unsigned char *)(v14 + 156)
      || (v35 != 0xFFFF ? (BOOL v40 = v36 == 0xFFFF) : (BOOL v40 = 1),
          !v40 ? (BOOL v41 = v38 == 0xFFFF) : (BOOL v41 = 1),
          !v41 ? (BOOL v42 = v39 == 0xFFFF) : (BOOL v42 = 1),
          !v42))
    {
      float v46 = v13 - (float)v33;
      float v47 = (float)v35 + (float)(v46 * (float)(int)(v36 - v35));
      *a2 = *(float *)(v14 + 120)
          + (float)(*(float *)(v14 + 124)
                  * truncf(truncf(v47)+ (float)((float)(v32 - (float)v31)* (float)((int)(float)((float)v38 + (float)(v46 * (float)(int)(v39 - v38))) - (int)v47))));
      return 1;
    }
    uint64_t result = *(void *)(v14 + 160);
    if (!result) {
      return result;
    }
    double v44 = 1.0 / (double)(1 << *(_DWORD *)(v14 + 136));
    double v45 = v13;
    if (v29)
    {
      LODWORD(a5) = *v29;
      LODWORD(a6) = v29[1];
      double v16 = v44 * v45 / ((double)*(unint64_t *)&a5 + -1.0);
      double v17 = (double)*(unint64_t *)&a6 + -1.0;
      uint64_t v15 = *(void *)(result + 16);
      if (v15)
      {
LABEL_3:
        LODWORD(a6) = *(_DWORD *)v15;
        a6 = (double)*(unint64_t *)&a6 + -1.0;
        goto LABEL_4;
      }
    }
    else
    {
      double v16 = -(v45 * v44);
      double v17 = -1.0;
      uint64_t v15 = *(void *)(result + 16);
      if (v15) {
        goto LABEL_3;
      }
    }
    a6 = -1.0;
LABEL_4:
    uint64_t v18 = *(void *)(result + 136);
    double v19 = (double)(1 << v18);
    LODWORD(a10) = *(_DWORD *)(v14 + 140);
    LODWORD(a9) = *(_DWORD *)(v14 + 144);
    a9 = v44 * (double)*(unint64_t *)&a9;
    a10 = v44 * (double)*(unint64_t *)&a10;
    LODWORD(v10) = *(_DWORD *)(result + 144);
    double v10 = (double)*(unint64_t *)&v10;
    double v20 = v44 * v12 / v17;
    a5 = a9 - 1.0 / v19 * v10;
    float v13 = (a5 + v16) * v19 * a6;
    a4.n128_f64[0] = v19 * a6;
    a3.n128_f64[0] = (a10 - 1.0 / v19 * (double)HIDWORD(v18) + v20) * (v19 * a6);
    float v12 = a3.n128_f64[0];
    int v21 = *(_DWORD *)(result + 132);
    uint64_t v14 = *(void *)(v14 + 160);
  }
  while (v21 == 16);
  if (v21 == 8)
  {
    a3.n128_f32[0] = v13;
    a4.n128_f32[0] = v12;
    return karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(a3, a4);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    BOOL v48 = GEOGetVectorKitVKDefaultLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_1A1780000, v48, OS_LOG_TYPE_ERROR, "Unknown DTM format", v49, 2u);
      return 0;
    }
  }
  return result;
}

float karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>(uint64_t a1, uint64_t a2, float *a3, float *a4, float result)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  double v10 = *(uint64_t **)(v7 + 16);
  uint64_t v12 = *v10;
  double v11 = (std::__shared_weak_count *)v10[1];
  if (!v11
    || (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    if (v12) {
      goto LABEL_5;
    }
LABEL_10:
    *a3 = 0.0;
    *a4 = 0.0;
    return result;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12) {
    goto LABEL_10;
  }
LABEL_5:
  float v13 = *(uint64_t **)(*(void *)(a1 + 16) + 16);
  uint64_t v14 = *v13;
  uint64_t v15 = (std::__shared_weak_count *)v13[1];
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *(void *)(v14 + 8);
    if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      double v17 = *(int **)(a1 + 16);
      if (v17)
      {
LABEL_8:
        int v18 = *v17;
        int v19 = v17[1];
        goto LABEL_13;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      double v17 = *(int **)(a1 + 16);
      if (v17) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v16 = *(void *)(v14 + 8);
    double v17 = *(int **)(a1 + 16);
    if (v17) {
      goto LABEL_8;
    }
  }
  int v18 = 0;
  int v19 = 0;
LABEL_13:
  char v20 = 0;
  int v21 = *(unsigned __int8 *)(a2 + 1);
  int v22 = v21 - *(_DWORD *)(a1 + 136);
  int v23 = 1 << (v21 - *(unsigned char *)(a1 + 136));
  unsigned int v24 = (~(-1 << v21) - (*(_DWORD *)(a2 + 4) + (*(_DWORD *)(a1 + 140) << (v21 - *(unsigned char *)(a1 + 136))))) * v19 / v23;
  unsigned int v25 = v19 / v23 + v24;
  float v26 = 0.0;
  float v27 = 255.0;
  if (v24 < v25 && v18 / v23 >= 1)
  {
    char v20 = 0;
    unsigned __int8 v28 = 0;
    int v29 = (*(_DWORD *)(a2 + 8) - (*(_DWORD *)(a1 + 144) << v22)) * v18 / v23;
    int v30 = v18 / v23 + v29;
    int v31 = (v18 + ~v24) * v18;
    unsigned __int8 v32 = -1;
    do
    {
      int v33 = v29;
      do
      {
        unsigned int v34 = *(unsigned __int8 *)(v16 + (v31 + v33));
        unsigned __int8 v35 = v28;
        if (v34 > v28) {
          unsigned __int8 v35 = *(unsigned char *)(v16 + (v31 + v33));
        }
        unsigned __int8 v36 = v32;
        if (v34 < v32) {
          unsigned __int8 v36 = *(unsigned char *)(v16 + (v31 + v33));
        }
        BOOL v37 = v34 == 255;
        if (!v37)
        {
          unsigned __int8 v32 = v36;
          unsigned __int8 v28 = v35;
        }
        v20 |= v37;
        ++v33;
      }
      while (v33 < v30);
      v31 -= v18;
      ++v24;
    }
    while (v24 != v25);
    float v27 = (float)v32;
    float v26 = (float)v28;
  }
  *a3 = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v27);
  uint64_t result = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v26);
  *a4 = result;
  if (v20)
  {
    uint64_t v38 = *(void *)(a1 + 160);
    if (v38)
    {
      float v41 = -3.4028e38;
      int v42 = 2139095039;
      int v39 = *(_DWORD *)(v38 + 132);
      if (v39 == 16)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(v38, a2, (float *)&v42, &v41, result);
      }
      else if (v39 == 8)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>();
      }
      float v40 = v41;
      *a3 = fminf(*a3, v41);
      uint64_t result = fmaxf(v40, *a4);
      *a4 = result;
    }
  }
  return result;
}

float karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(uint64_t a1, uint64_t a2, float *a3, float *a4, float result)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  double v10 = *(uint64_t **)(v7 + 16);
  uint64_t v12 = *v10;
  double v11 = (std::__shared_weak_count *)v10[1];
  if (!v11
    || (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    if (v12) {
      goto LABEL_5;
    }
LABEL_10:
    *a3 = 0.0;
    *a4 = 0.0;
    return result;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12) {
    goto LABEL_10;
  }
LABEL_5:
  float v13 = *(uint64_t **)(*(void *)(a1 + 16) + 16);
  uint64_t v14 = *v13;
  uint64_t v15 = (std::__shared_weak_count *)v13[1];
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *(void *)(v14 + 8);
    if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      double v17 = *(int **)(a1 + 16);
      if (v17)
      {
LABEL_8:
        int v18 = *v17;
        int v19 = v17[1];
        goto LABEL_13;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      double v17 = *(int **)(a1 + 16);
      if (v17) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v16 = *(void *)(v14 + 8);
    double v17 = *(int **)(a1 + 16);
    if (v17) {
      goto LABEL_8;
    }
  }
  int v18 = 0;
  int v19 = 0;
LABEL_13:
  char v20 = 0;
  int v21 = *(unsigned __int8 *)(a2 + 1);
  int v22 = v21 - *(_DWORD *)(a1 + 136);
  int v23 = 1 << (v21 - *(unsigned char *)(a1 + 136));
  unsigned int v24 = (~(-1 << v21) - (*(_DWORD *)(a2 + 4) + (*(_DWORD *)(a1 + 140) << (v21 - *(unsigned char *)(a1 + 136))))) * v19 / v23;
  unsigned int v25 = v19 / v23 + v24;
  float v26 = 0.0;
  float v27 = 65535.0;
  if (v24 < v25 && v18 / v23 >= 1)
  {
    char v20 = 0;
    unsigned __int16 v28 = 0;
    int v29 = (*(_DWORD *)(a2 + 8) - (*(_DWORD *)(a1 + 144) << v22)) * v18 / v23;
    int v30 = v18 / v23 + v29;
    int v31 = (v18 + ~v24) * v18;
    unsigned __int16 v32 = -1;
    do
    {
      int v33 = v29;
      do
      {
        unsigned int v34 = *(unsigned __int16 *)(v16 + 2 * (v31 + v33));
        unsigned __int16 v35 = v28;
        if (v34 > v28) {
          unsigned __int16 v35 = *(_WORD *)(v16 + 2 * (v31 + v33));
        }
        unsigned __int16 v36 = v32;
        if (v34 < v32) {
          unsigned __int16 v36 = *(_WORD *)(v16 + 2 * (v31 + v33));
        }
        BOOL v37 = v34 == 0xFFFF;
        if (!v37)
        {
          unsigned __int16 v32 = v36;
          unsigned __int16 v28 = v35;
        }
        v20 |= v37;
        ++v33;
      }
      while (v33 < v30);
      v31 -= v18;
      ++v24;
    }
    while (v24 != v25);
    float v27 = (float)v32;
    float v26 = (float)v28;
  }
  *a3 = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v27);
  uint64_t result = *(float *)(a1 + 120) + (float)(*(float *)(a1 + 124) * v26);
  *a4 = result;
  if (v20)
  {
    uint64_t v38 = *(void *)(a1 + 160);
    if (v38)
    {
      int v39 = *(_DWORD *)(v38 + 132);
      if (v39 == 16)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>();
      }
      else if (v39 == 8)
      {
        karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>();
      }
      *a3 = fminf(*a3, -3.4028e38);
      uint64_t result = fmaxf(-3.4028e38, *a4);
      *a4 = result;
    }
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<altitude::RenderableGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::RenderableGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AC80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::RenderableGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::HeightMeshBuilder::createGlobeElement(void *a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t **a5, uint64_t **a6)
{
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  unint64_t v8 = v7 + 8;
  if (v7 + 8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v8 >= 0x17)
  {
    uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v15 = v8 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (long long *)operator new(v15 + 1);
    *((void *)&__dst + 1) = v7 + 8;
    unint64_t v41 = v16 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    unint64_t v41 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v41) = v7 + 8;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    double v17 = a3;
  }
  else {
    double v17 = *a3;
  }
  memmove(p_dst, v17, v7);
LABEL_15:
  strcpy((char *)p_dst + v7, "/Element");
  int v18 = (char *)operator new(0xA8uLL);
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)int v18 = &unk_1EF58AC80;
  *((void *)v18 + 3) = &unk_1EF562D20;
  int v19 = (std::string *)(v18 + 32);
  int v20 = SHIBYTE(v41);
  if (SHIBYTE(v41) < 0)
  {
    std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = __dst;
    *((void *)v18 + 6) = v41;
  }
  *((void *)v18 + 3) = &unk_1EF5690C0;
  *((void *)v18 + 7) = 0;
  v18[64] = 1;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *((void *)v18 + 17) = 0;
  v18[144] = 1;
  *((void *)v18 + 19) = 0;
  *((void *)v18 + 20) = 0;
  *a1 = v18 + 24;
  a1[1] = v18;
  if (v20 < 0) {
    operator delete((void *)__dst);
  }
  int v21 = *a5;
  if (a5[1] != *a5)
  {
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    if (v23)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      uint64_t v22 = **a5;
    }
    uint64_t v24 = *(void *)(v22 + 16);
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v25 = *a6;
    if (a6[1] != *a6)
    {
      uint64_t v26 = v25[1];
      uint64_t v27 = *v25;
      if (v26)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        uint64_t v27 = **a6;
      }
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
    }
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v34 = (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 1;
    unsigned __int16 v35 = operator new(0xF8uLL);
    v35[1] = 0;
    v35[2] = 0;
    *unsigned __int16 v35 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v35 + 3), 2, 1, 0, 7, v34);
    *((_DWORD *)v35 + 60) = 0;
    v35[3] = &unk_1EF55B630;
    void v35[4] = 2;
    v35[28] = &unk_1EF55B650;
    v35[29] = "/render/heightmeshbuilder/indexdata";
    unint64_t v36 = (v35[9] - v35[8]) & 0xFFFFFFFFFFFFFFFELL;
    if (v36) {
      BOOL v37 = (void *)v35[12];
    }
    else {
      BOOL v37 = 0;
    }
    memcpy(v37, *(const void **)(a2 + 40), *(void *)(a2 + 48) - *(void *)(a2 + 40));
    if (v37 && v36)
    {
      unint64_t v38 = v35[11];
      if (v38 <= v36) {
        unint64_t v38 = v36;
      }
      v35[10] = 0;
      v35[11] = v38;
    }
    uint64_t v39 = *(void *)(a2 + 32);
    *(void *)&long long __dst = *(void *)(a2 + 24);
    *((void *)&__dst + 1) = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
}

void *std::function<void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0,std::allocator<md::ita::UpdateStyleTextureIfNecessary::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  double v11 = *a6;
  uint64_t v12 = *(uint64_t **)(a1 + 24);
  uint64_t ColorRampData = md::VKMRenderResourcesStore::getColorRampData(**(void **)(a1 + 8), *a5);
  if (!v11)
  {
    uint64_t v18 = **(void **)(a1 + 16);
    unint64_t v19 = *a4;
    double v74 = (void *)v19;
    uint64_t v20 = *(void *)(v18 + 120);
    if (v19 < (unint64_t)((*(void *)(v18 + 128) - v20) >> 3))
    {
      int v21 = *(void **)(v20 + 8 * v19);
      if (!v21)
      {
LABEL_16:
        unsigned int v25 = *(int8x8_t **)v18;
        __int16 v80 = v21;
        *(void *)&long long v81 = 0;
        gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v77, v25, (uint64_t *)&v80, 0);
        if (v77[8] == 5)
        {
          unint64_t v26 = a4[1];
          __int16 v80 = (void *)*a4;
          *(void *)&long long v81 = v26;
          *((void *)&v81 + 1) = v26;
          LOWORD(v82) = 1;
          uint64_t v27 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
          ecs2::addComponent<md::ls::RampMaterialData>((void *)*v12, *v27, &v80);
        }
        disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
        goto LABEL_118;
      }
      if (HIDWORD(v19) == HIDWORD(v21))
      {
        uint64_t v22 = *(void *)(v18 + 144);
        uint64_t v23 = (void **)(v22 + 8 * v21);
        if (v23 != *(void ***)(v18 + 152) && v22 != 0)
        {
          double v72 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v18 + 56, v19, &v74);
          ++v72[3];
          int v21 = *v23;
          goto LABEL_16;
        }
      }
    }
    int v21 = 0;
    goto LABEL_16;
  }
  LOBYTE(v74) = 0;
  char v75 = 0;
  BOOL updated = md::MaterialRaster::updateStyleTextureIfNecessary(*v11, **(int8x8_t ***)(a1 + 32), (uint64_t)&v74, **(unsigned __int8 **)(a1 + 48), *(unsigned __int8 *)(**(void **)(a1 + 56) + 72) == 1, **(float **)(a1 + 40));
  uint64_t v14 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v15 = *v14;
  long double v77 = &unk_1EF522628;
  *(void *)&long long v78 = v16;
  *((void *)&v78 + 1) = v15;
  long long v79 = (void **)&v77;
  __double2 v82 = &v80;
  __int16 v80 = &unk_1EF522628;
  long long v81 = v78;
  int v83 = 0;
  ecs2::Runtime::queueCommand(v17, (uint64_t)&v80);
  if (v83 != -1) {
    ((void (*)(char *, void **))off_1EF58F440[v83])(&v76, &v80);
  }
  int v83 = -1;
  if (v79 == (void **)&v77)
  {
    (*((void (**)(unsigned char **))v77 + 4))(&v77);
  }
  else if (v79)
  {
    (*((void (**)(void))*v79 + 5))();
  }
  uint64_t v28 = *(uint64_t **)(a1 + 8);
  uint64_t v29 = *v28;
  unint64_t v30 = *a3;
  unint64_t v31 = *(void *)(*v28 + 10288);
  if (v31)
  {
    uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      unint64_t v6 = *a3;
      if (v30 >= v31) {
        unint64_t v6 = v30 % v31;
      }
    }
    else
    {
      unint64_t v6 = (v31 - 1) & v30;
    }
    int v33 = *(void ***)(*(void *)(v29 + 10280) + 8 * v6);
    if (v33)
    {
      uint64_t v34 = *v33;
      if (*v33)
      {
        if (v32.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v36 = v34[1];
            if (v36 == v30)
            {
              if (v34[2] == v30) {
                goto LABEL_107;
              }
            }
            else if ((v36 & (v31 - 1)) != v6)
            {
              goto LABEL_41;
            }
            uint64_t v34 = (void *)*v34;
            if (!v34) {
              goto LABEL_41;
            }
          }
        }
        do
        {
          unint64_t v35 = v34[1];
          if (v35 == v30)
          {
            if (v34[2] == v30) {
              goto LABEL_107;
            }
          }
          else
          {
            if (v35 >= v31) {
              v35 %= v31;
            }
            if (v35 != v6) {
              break;
            }
          }
          uint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
    }
  }
LABEL_41:
  uint64_t v34 = operator new(0x20uLL);
  *uint64_t v34 = 0;
  v34[1] = v30;
  v34[2] = v30;
  *((unsigned char *)v34 + 24) = 0;
  float v37 = (float)(unint64_t)(*(void *)(v29 + 10304) + 1);
  float v38 = *(float *)(v29 + 10312);
  if ((((float)(v38 * (float)v31) >= v37) & ~(v31 == 0)) == 0)
  {
    BOOL v39 = 1;
    if (v31 >= 3) {
      BOOL v39 = (v31 & (v31 - 1)) != 0;
    }
    unint64_t v40 = v39 | (2 * v31);
    unint64_t v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41) {
      size_t prime = v41;
    }
    else {
      size_t prime = v40;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v31 = *(void *)(v29 + 10288);
    }
    if (prime <= v31)
    {
      if (prime >= v31) {
        goto LABEL_92;
      }
      unint64_t v55 = vcvtps_u32_f32((float)*(unint64_t *)(v29 + 10304) / *(float *)(v29 + 10312));
      if (v31 < 3 || (uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
      {
        unint64_t v55 = std::__next_prime(v55);
      }
      else
      {
        uint64_t v57 = 1 << -(char)__clz(v55 - 1);
        if (v55 >= 2) {
          unint64_t v55 = v57;
        }
      }
      if (prime <= v55) {
        size_t prime = v55;
      }
      if (prime >= v31) {
        goto LABEL_92;
      }
      if (!prime)
      {
        long long v62 = *(void **)(v29 + 10280);
        *(void *)(v29 + 10280) = 0;
        if (v62) {
          operator delete(v62);
        }
        *(void *)(v29 + 10288) = 0;
        goto LABEL_92;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    float v43 = operator new(8 * prime);
    double v44 = *(void **)(v29 + 10280);
    *(void *)(v29 + 10280) = v43;
    if (v44) {
      operator delete(v44);
    }
    uint64_t v45 = 0;
    *(void *)(v29 + 10288) = prime;
    do
      *(void *)(*(void *)(v29 + 10280) + 8 * v45++) = 0;
    while (prime != v45);
    float v46 = *(void **)(v29 + 10296);
    if (!v46)
    {
LABEL_92:
      unint64_t v31 = *(void *)(v29 + 10288);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v30 >= v31) {
          unint64_t v6 = v30 % v31;
        }
        else {
          unint64_t v6 = v30;
        }
      }
      else
      {
        unint64_t v6 = (v31 - 1) & v30;
      }
      goto LABEL_97;
    }
    uint64_t v47 = v29 + 10296;
    size_t v48 = v46[1];
    size_t v49 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v50 = v48 & v49;
      *(void *)(*(void *)(v29 + 10280) + 8 * v50) = v47;
      while (1)
      {
        unint64_t v51 = (void *)*v46;
        if (!*v46) {
          break;
        }
        size_t v52 = v51[1] & v49;
        if (v52 == v50)
        {
          float v46 = (void *)*v46;
        }
        else
        {
          uint64_t v53 = *(void *)(v29 + 10280);
          if (*(void *)(v53 + 8 * v52))
          {
            *float v46 = *v51;
            uint64_t v54 = 8 * v52;
            void *v51 = **(void **)(*(void *)(v29 + 10280) + v54);
            **(void **)(*(void *)(v29 + 10280) + v54) = v51;
          }
          else
          {
            *(void *)(v53 + 8 * v52) = v46;
            float v46 = v51;
            size_t v50 = v52;
          }
        }
      }
      goto LABEL_92;
    }
    if (v48 >= prime) {
      v48 %= prime;
    }
    *(void *)(*(void *)(v29 + 10280) + 8 * v48) = v47;
    uint64_t v58 = (void *)*v46;
    if (!*v46) {
      goto LABEL_92;
    }
    while (1)
    {
      size_t v60 = v58[1];
      if (v60 >= prime) {
        v60 %= prime;
      }
      if (v60 != v48)
      {
        uint64_t v61 = *(void *)(v29 + 10280);
        if (!*(void *)(v61 + 8 * v60))
        {
          *(void *)(v61 + 8 * v60) = v46;
          goto LABEL_78;
        }
        *float v46 = *v58;
        uint64_t v59 = 8 * v60;
        *uint64_t v58 = **(void **)(*(void *)(v29 + 10280) + v59);
        **(void **)(*(void *)(v29 + 10280) + v59) = v58;
        uint64_t v58 = v46;
      }
      size_t v60 = v48;
LABEL_78:
      float v46 = v58;
      uint64_t v58 = (void *)*v58;
      size_t v48 = v60;
      if (!v58) {
        goto LABEL_92;
      }
    }
  }
LABEL_97:
  uint64_t v63 = *(void *)(v29 + 10280);
  uint64_t v64 = *(void **)(v63 + 8 * v6);
  if (v64)
  {
    *uint64_t v34 = *v64;
LABEL_105:
    *uint64_t v64 = v34;
    goto LABEL_106;
  }
  *uint64_t v34 = *(void *)(v29 + 10296);
  *(void *)(v29 + 10296) = v34;
  *(void *)(v63 + 8 * v6) = v29 + 10296;
  if (*v34)
  {
    unint64_t v65 = *(void *)(*v34 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v65 >= v31) {
        v65 %= v31;
      }
    }
    else
    {
      v65 &= v31 - 1;
    }
    uint64_t v64 = (void *)(*(void *)(v29 + 10280) + 8 * v65);
    goto LABEL_105;
  }
LABEL_106:
  ++*(void *)(v29 + 10304);
LABEL_107:
  *((unsigned char *)v34 + 24) = updated;
  if (v75)
  {
    uint64_t v66 = **(int8x8_t ***)(a1 + 32);
    uint64_t v67 = (uint64_t)v74;
    __int16 v80 = v74;
    *(void *)&long long v81 = 0;
    gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v77, v66, (uint64_t *)&v80, 0);
    if (v77[8] != 5)
    {
      disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
      if (*(unsigned char *)(ColorRampData + 32)) {
        *(unsigned char *)(ColorRampData + 32) = 0;
      }
      goto LABEL_121;
    }
    uint64_t v68 = **(void **)(a1 + 16);
    __int16 v80 = (void *)v67;
    *(void *)&long long v81 = 1;
    unint64_t v69 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((void *)(v68 + 232), (uint64_t *)&v80);
    if (!v69 || (uint64_t MaterialHandle = (uint64_t)v69[4]) == 0)
    {
      uint64_t MaterialHandle = md::MaterialResourceStore::createMaterialHandle(v68, v67, 1);
      md::MaterialResourceStore::disconnect<geo::handle<md::MaterialIDStorage>>(**(int8x8_t ***)(a1 + 16), MaterialHandle);
    }
    __int16 v80 = (void *)MaterialHandle;
    *(void *)&long long v81 = v67;
    *((void *)&v81 + 1) = v67;
    LOWORD(v82) = 1;
    ecs2::addComponent<md::ls::RampMaterialData>((void *)*v12, *v14, &v80);
    disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
LABEL_118:
    if (*(unsigned char *)(ColorRampData + 32)) {
      *(unsigned char *)(ColorRampData + 32) = 0;
    }
    *(_OWORD *)uint64_t ColorRampData = 0u;
    *(_OWORD *)(ColorRampData + 16) = 0u;
    *(unsigned char *)(ColorRampData + 32) = 1;
LABEL_121:
    double v71 = (std::__shared_weak_count *)v78;
    if ((void)v78 && !atomic_fetch_add((atomic_ullong *volatile)(v78 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    return;
  }
  disconnectColorRampTextureHandles<ecs2::Runtime>(*v12, *a5);
  if (*(unsigned char *)(ColorRampData + 32)) {
    *(unsigned char *)(ColorRampData + 32) = 0;
  }
}

void sub_1A1E304A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
  {
    if (!atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void ecs2::addComponent<md::ls::RampMaterialData>(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v6 = &unk_1EF5226B8;
  long long v7 = a3[1];
  *(_OWORD *)(v6 + 8) = *a3;
  *(_OWORD *)(v6 + 24) = v7;
  *((void *)v6 + 5) = a2;
  double v10 = v6;
  int v11 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v9);
  if (v11 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF58F440[v11])(&v8, v9);
  }
}

void disconnectColorRampTextureHandles<ecs2::Runtime>(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = **(void ***)a1;
  double v5 = *(void **)(*(void *)a1 + 8);
  if (v4 != v5)
  {
    while (*v4 != 0x41D4E9297E100630)
    {
      v4 += 5;
      if (v4 == v5) {
        goto LABEL_9;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_9:
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v4[3];
    long long v7 = (std::__shared_weak_count *)v4[4];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  uint64_t ColorRampData = md::VKMRenderResourcesStore::getColorRampData(v6, a2);
  if (ColorRampData)
  {
    uint64_t v9 = ColorRampData;
    if (*(unsigned char *)(ColorRampData + 32))
    {
      double v10 = operator new(0x10uLL);
      *(_OWORD *)double v10 = *(_OWORD *)(v9 + 16);
      if (*v10 || v10[1]) {
        gdc::Registry::create(*(gdc::Registry **)(a1 + 8));
      }
      operator delete(v10);
    }
  }
}

void sub_1A1E308A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *gms::BuildingMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 648))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 648))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 648);
  return (void *)v9((__n128)a3);
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 648))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 648))();
}

void *gms::BuildingMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BuildingMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BuildingMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 624))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 624);
  return (void *)v8(a3);
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 624))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 624))();
}

void *gms::BuildingMaterial<ggl::Texture2D>::maxNoColorCorrection@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 600))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 600))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::BuildingMaterial<ggl::Texture2D>::minNoColorCorrection@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 600))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 600))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetNoColorCorrection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 600))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceNoColorCorrection(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 600))();
}

void *gms::BuildingMaterial<ggl::Texture2D>::brightnessRemapRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 528))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 528))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x2_t *)(a2 + 4) = vmla_n_f32(v16, vsub_f32(v14, v16), v12);
            return result;
          }
          float32x2_t v11 = v16;
LABEL_18:
          *(float32x2_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x2_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 528);
  return (void *)v8(a3);
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 528))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 528))();
}

void *gms::BuildingMaterial<ggl::Texture2D>::saturationRemapRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 504))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 504))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x2_t *)(a2 + 4) = vmla_n_f32(v16, vsub_f32(v14, v16), v12);
            return result;
          }
          float32x2_t v11 = v16;
LABEL_18:
          *(float32x2_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x2_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 504);
  return (void *)v8(a3);
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 504))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 504))();
}

void *gms::BuildingMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 192))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 192))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 192);
  return (void *)v8(a3);
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 192))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t gms::BuildingMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

void gms::BuildingMaterial<ggl::Texture2D>::~BuildingMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::BuildingMaterial<ggl::Texture2D>::~BuildingMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gms::BuildingMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<gms::BuildingMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gms::BuildingMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 720))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 696))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 696))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 696);
  return (void *)v9((__n128)a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 696))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 696))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 672))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 672))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 672);
  return (void *)v9((__n128)a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 672))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 672))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 624))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 624))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 576))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 576))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 552))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 552))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 552);
  return (void *)v8(a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 552))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 552))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 408))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 408))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 384))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 384))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 264))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10)) {
    int v8 = HIDWORD(v10);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 192))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 192))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 192);
  return (void *)v8(a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 192))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 168))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 168))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 168);
  return (void *)v8(a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 168))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 144))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 144))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::metallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 144))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 144);
  return (void *)v8(a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 144))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::maxRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 120))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 120))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::roughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 120))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 120);
  return (void *)v8(a3);
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::targetRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 120))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))();
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::roughnessMetallic@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::normal@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

void gms::PBRWithColorRampMaterial<ggl::Texture2D>::~PBRWithColorRampMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::~PBRWithColorRampMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gms::PBRWithColorRampMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<gms::PBRWithColorRampMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gms::PBRWithColorRampMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 696))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 696))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 696);
  return (void *)v9((__n128)a3);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 696))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 696))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 648))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 648))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 648);
  return (void *)v9((__n128)a3);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 648))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 648))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 576))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 576))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 552))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 552))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 552);
  return (void *)v8(a3);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 552))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 552))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 384))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 384))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::offset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 312))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 312))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x2_t *)(a2 + 4) = vmla_n_f32(v16, vsub_f32(v14, v16), v12);
            return result;
          }
          float32x2_t v11 = v16;
LABEL_18:
          *(float32x2_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x2_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 312);
  return (void *)v8(a3);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetOffset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 312))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceOffset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 312))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::tiling@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 288))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 288))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x2_t *)(a2 + 4) = vmla_n_f32(v16, vsub_f32(v14, v16), v12);
            return result;
          }
          float32x2_t v11 = v16;
LABEL_18:
          *(float32x2_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x2_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 288);
  return (void *)v8(a3);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetTiling(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 288))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceTiling(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 288))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 264))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10)) {
    int v8 = HIDWORD(v10);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11)) {
    int v8 = HIDWORD(v11);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 192))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 192))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 192);
  return (void *)v8(a3);
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 192))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t gms::TriPlanarMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

void gms::TriPlanarMaterial<ggl::Texture2D>::~TriPlanarMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::TriPlanarMaterial<ggl::Texture2D>::~TriPlanarMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gms::TriPlanarMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<gms::TriPlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gms::TriPlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *gms::PlanarMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 696))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 696))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 696);
  return (void *)v9((__n128)a3);
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 696))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 696))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 648))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 648))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PlanarMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 624))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 624))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PlanarMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 576))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 576))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 552))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 552))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 552);
  return (void *)v8(a3);
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 552))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 552))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PlanarMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 384))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 384))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::offset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 312))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 312))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x2_t *)(a2 + 4) = vmla_n_f32(v16, vsub_f32(v14, v16), v12);
            return result;
          }
          float32x2_t v11 = v16;
LABEL_18:
          *(float32x2_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x2_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 312);
  return (void *)v8(a3);
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetOffset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 312))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceOffset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 312))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::tiling@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 288))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 288))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x2_t *)(a2 + 4) = vmla_n_f32(v16, vsub_f32(v14, v16), v12);
            return result;
          }
          float32x2_t v11 = v16;
LABEL_18:
          *(float32x2_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x2_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 288);
  return (void *)v8(a3);
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetTiling(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 288))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceTiling(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 288))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 264))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10)) {
    int v8 = HIDWORD(v10);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

void *gms::PlanarMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 192))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 192))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 192);
  return (void *)v8(a3);
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 192))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t gms::PlanarMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

void gms::PlanarMaterial<ggl::Texture2D>::~PlanarMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::PlanarMaterial<ggl::Texture2D>::~PlanarMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gms::PlanarMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<gms::PlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gms::PlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 720))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 720))();
}

void *gms::PBRMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 696))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 696))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 696);
  return (void *)v9((__n128)a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 696))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 696))();
}

void *gms::PBRMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 672))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 672))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 672);
  return (void *)v9((__n128)a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 672))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 672))();
}

void *gms::PBRMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 648))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 648))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 648);
  return (void *)v9((__n128)a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 648))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 648))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 624))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 624);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 624))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 624))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 576))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 576))();
}

void *gms::PBRMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 552))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 552))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  char v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 552);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 552))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 552))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxAcceptsOverlays@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 480))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minAcceptsOverlays@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 480))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 480))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 480))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 456))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 456))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::brightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 456))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 456);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 456))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 456))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 432))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 432))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::saturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 432))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 432);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 432))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 432))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 408))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceColorRamp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 408))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 384))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 384))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 264))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceVisibility(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v11);
  if (HIDWORD(v11) <= HIDWORD(v10)) {
    int v8 = HIDWORD(v10);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 216))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11) {
        goto LABEL_4;
      }
LABEL_10:
      *(unsigned char *)a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      int v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    int v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(unsigned char *)a2 = 1;
    return result;
  }
  int v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11)) {
    int v8 = HIDWORD(v11);
  }
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceZIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

void *gms::PBRMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 192))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 192))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 192);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 192))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceAlbedoFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

void *gms::PBRMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    float v12 = v6;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(char *__return_ptr, float))(*(void *)v10 + 168))(v15, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v15[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 168))(v13, v3);
        if (v15[0])
        {
LABEL_11:
          if (v13[0])
          {
            *(unsigned char *)a2 = 1;
            *(float32x4_t *)(a2 + 4) = vmlaq_n_f32(v16, vsubq_f32(v14, v16), v12);
            return result;
          }
          float32x4_t v11 = v16;
LABEL_18:
          *(float32x4_t *)(a2 + 4) = v11;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v13[0]) {
          return result;
        }
        float32x4_t v11 = v14;
        goto LABEL_18;
      }
    }
    v13[0] = 0;
    if (v15[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 168);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceEmissiveFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 168))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 144))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minMetallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 144))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::metallicFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 144))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 144))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 144);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 144))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceMetallicFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

void *gms::PBRMaterial<ggl::Texture2D>::maxRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 120))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::minRoughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 120))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::PBRMaterial<ggl::Texture2D>::roughnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 120))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 120))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 120);
  return (void *)v8(a3);
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::targetRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 120))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::sourceRoughnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))();
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::roughnessMetallic@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::normal@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::PBRMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

void gms::PBRMaterial<ggl::Texture2D>::~PBRMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *gms::PBRMaterial<ggl::Texture2D>::~PBRMaterial(void *a1)
{
  *a1 = &unk_1EF566758;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gms::PBRMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<gms::PBRMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gms::PBRMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *gms::BasicMaterial<ggl::Texture2D>::maxSsaoIntensity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 840))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 840))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minSsaoIntensity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 840))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 840))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSsaoIntensity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 840))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSsaoIntensity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 840))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetDryAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 816))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceDryAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 816))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetWetAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 792))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceWetAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 792))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetColdAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 768))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceColdAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 768))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetHotAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 744))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceHotAdjustment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 744))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 696))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceGradientMaskFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 696))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 672))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceEmissiveFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 672))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 648))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAlbedoFactorRGB(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 648))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 624))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 624))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAlpha(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 624))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxHideOnCollapse@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 576))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 576))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 576))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceHideOnCollapse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 576))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 552))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceGradientMaskFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 552))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 528))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceBrightnessRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 528))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 504))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSaturationRemapRange(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 504))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxAcceptsOverlays@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 480))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minAcceptsOverlays@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 480))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 480))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 480))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceAcceptsOverlays(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 480))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 456))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minBrightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 456))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::brightnessFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 456))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 456))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 456);
  return (void *)v8(a3);
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 456))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceBrightnessFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 456))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 432))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minSaturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 432))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::saturationFactor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 432))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 432))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  float v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 432);
  return (void *)v8(a3);
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 432))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceSaturationFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 432))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::targetCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 384))();
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::sourceCastShadow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 384))();
}

void *gms::BasicMaterial<ggl::Texture2D>::maxShininess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 360))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 360))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fmaxf(*((float *)&v11 + 1), *((float *)&v10 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minShininess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 360))(&v11, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    LOBYTE(v10) = 0;
    if ((_BYTE)v11) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  LOBYTE(v11) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (!result) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 360))(&v10, v3);
  if ((_BYTE)v11)
  {
LABEL_4:
    if ((_BYTE)v10)
    {
      float v8 = fminf(*((float *)&v10 + 1), *((float *)&v11 + 1));
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v8;
      return result;
    }
    int v9 = HIDWORD(v11);
    goto LABEL_11;
  }
LABEL_8:
  *(unsigned char *)a2 = 0;
  if (!(_BYTE)v10) {
    return result;
  }
  int v9 = HIDWORD(v10);
LABEL_11:
  *(_DWORD *)(a2 + 4) = v9;
  *(unsigned char *)a2 = 1;
  return result;
}