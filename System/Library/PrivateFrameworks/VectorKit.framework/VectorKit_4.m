void sub_1A19062F0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v4 = *(std::__shared_weak_count **)(v2 - 120);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  _Unwind_Resume(a1);
}

id md::RenderLayerProviderWrapper::sharedResources(id *this)
{
  return this[3];
}

uint64_t **std::map<md::DrapedPolygonPlacement,md::CommandBufferLocation>::map[abi:nn180100](uint64_t **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = &a2[2 * a3];
    do
    {
      v7 = a1[1];
      v8 = v4;
      if (*a1 == v4) {
        goto LABEL_11;
      }
      v9 = a1[1];
      v10 = v4;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          v10 = v8;
        }
        while (v11);
      }
      int v12 = *v5;
      if (*((_DWORD *)v8 + 7) < *v5)
      {
LABEL_11:
        if (v7) {
          v13 = (uint64_t **)v8;
        }
        else {
          v13 = (uint64_t **)v4;
        }
        if (v7) {
          v14 = (uint64_t **)(v8 + 1);
        }
        else {
          v14 = (uint64_t **)v4;
        }
      }
      else
      {
        v13 = (uint64_t **)v4;
        v14 = (uint64_t **)v4;
        if (v7)
        {
          v14 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              int v17 = *((_DWORD *)v7 + 7);
              if (v12 >= v17) {
                break;
              }
              v7 = *v13;
              v14 = v13;
              if (!*v13) {
                goto LABEL_18;
              }
            }
            if (v17 >= v12) {
              break;
            }
            v14 = v13 + 1;
            v7 = v13[1];
            if (!v7) {
              goto LABEL_18;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_18:
        v15 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v15 + 28) = *(void *)v5;
        uint64_t *v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v13;
        *v14 = v15;
        v16 = (uint64_t *)**a1;
        if (v16)
        {
          *a1 = v16;
          v15 = *v14;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v15);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_1A1906590(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *md::RouteRenderLayer::layout(uint64_t ***this, uint64_t **a2)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  v103[0] = &unk_1EF572660;
  v103[1] = a2;
  v101[0] = &unk_1EF5726A8;
  v101[1] = a2;
  v102 = v101;
  v106 = v105;
  v104 = v103;
  v105[0] = &unk_1EF5726A8;
  v105[1] = a2;
  std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v103);
  if (v102 == v101)
  {
    (*(void (**)(void *))(v101[0] + 32))(v101);
  }
  else if (v102)
  {
    (*(void (**)(void))(*v102 + 40))();
  }
  if (v104 == v103)
  {
    (*(void (**)(void *))(v103[0] + 32))(v103);
  }
  else if (v104)
  {
    (*(void (**)(void))(*v104 + 40))();
  }
  md::RouteRenderLayer::runLayoutLogic((md::RouteRenderLayer *)this, (const md::LayoutContext *)a2);
  v4 = a2[1];
  int8x8_t v5 = (int8x8_t)v4[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] >= 2uLL)
  {
    unint64_t v10 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v5 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v10 = 0x8BD499FBD96FBB9ELL % *(void *)&v5;
    }
    uint64_t v8 = *v4;
    v9 = *(void **)(*v4 + 8 * v10);
    do
    {
      do
        v9 = (void *)*v9;
      while (v9[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v9[2] != 0x8BD499FBD96FBB9ELL);
    uint64_t v7 = *(void *)&v5 - 1;
  }
  else
  {
    uint64_t v7 = *(void *)&v5 - 1;
    uint64_t v8 = *v4;
    v9 = *(void **)(*v4 + 8 * ((*(void *)&v5 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v9 = (void *)*v9;
      while (v9[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v9[2] != 0x8BD499FBD96FBB9ELL);
  }
  uint64_t v11 = v9[5];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v12 = 0xC97B9E962ADF4AD4;
    if (*(void *)&v5 <= 0xC97B9E962ADF4AD4) {
      unint64_t v12 = 0xC97B9E962ADF4AD4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v12 = v7 & 0xC97B9E962ADF4AD4;
  }
  v13 = *(unsigned __int8 **)(v11 + 32);
  v14 = *(void **)(v8 + 8 * v12);
  if (!v14) {
    goto LABEL_42;
  }
  v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_42;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v15[1];
      if (v16 == 0xC97B9E962ADF4AD4)
      {
        if (v15[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_40;
        }
      }
      else if ((v16 & v7) != v12)
      {
        goto LABEL_42;
      }
      v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_42;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = v15[1];
    if (v17 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v17 >= *(void *)&v5) {
      v17 %= *(void *)&v5;
    }
    if (v17 != v12) {
      goto LABEL_42;
    }
LABEL_34:
    v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_42;
    }
  }
  if (v15[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_34;
  }
LABEL_40:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xC97B9E962ADF4AD4)
  {
    v19 = *(uint64_t **)(v18 + 32);
    goto LABEL_43;
  }
LABEL_42:
  v19 = 0;
LABEL_43:
  int v20 = *v13;
  v21 = (void *)this[5][3][1];
  uint64_t v22 = v21[3];
  uint64_t v23 = v21[4];
  if (v23 == v22)
  {
    v31 = 0;
    v32 = 0;
    v29 = 0;
LABEL_60:
    v40 = 0;
    goto LABEL_61;
  }
  uint64_t v24 = 0;
  while (1)
  {
    v25 = *(unsigned __int8 **)(v22 + 8 * v24);
    if (*v25 == *((unsigned __int8 *)this + 104))
    {
      unint64_t v26 = *((void *)v25 + 1);
      uint64_t v27 = v21[15];
      if (v26 < (v21[16] - v27) >> 3) {
        break;
      }
    }
    if (++v24 >= (unint64_t)((v23 - v22) >> 3)) {
      goto LABEL_51;
    }
  }
  uint64_t v28 = *(void *)(v27 + 8 * v26);
  if (!v28)
  {
LABEL_51:
    v29 = 0;
    uint64_t v30 = v23 - v22;
    if (v23 != v22) {
      goto LABEL_52;
    }
LABEL_50:
    v31 = 0;
    v32 = 0;
    goto LABEL_60;
  }
  v29 = *(void **)(*(void *)(v28 + 24) + 8 * *((unsigned __int8 *)this + 105));
  uint64_t v30 = v23 - v22;
  if (v23 == v22) {
    goto LABEL_50;
  }
LABEL_52:
  uint64_t v33 = 0;
  unint64_t v34 = v30 >> 3;
  while (1)
  {
    v35 = *(unsigned __int8 **)(v22 + 8 * v33);
    if (*v35 == *((unsigned __int8 *)this + 96))
    {
      unint64_t v36 = *((void *)v35 + 1);
      uint64_t v37 = v21[15];
      if (v36 < (v21[16] - v37) >> 3) {
        break;
      }
    }
    if (++v33 >= v34) {
      goto LABEL_76;
    }
  }
  uint64_t v38 = *(void *)(v37 + 8 * v36);
  if (!v38)
  {
LABEL_76:
    v32 = 0;
    uint64_t v39 = v23 - v22;
    if (v23 != v22) {
      goto LABEL_77;
    }
LABEL_58:
    v31 = 0;
    goto LABEL_60;
  }
  v32 = *(void **)(*(void *)(v38 + 24) + 8 * *((unsigned __int8 *)this + 97));
  uint64_t v39 = v23 - v22;
  if (v23 == v22) {
    goto LABEL_58;
  }
LABEL_77:
  uint64_t v47 = 0;
  unint64_t v48 = v39 >> 3;
  while (1)
  {
    v49 = *(unsigned __int8 **)(v22 + 8 * v47);
    if (*v49 == *((unsigned __int8 *)this + 102))
    {
      unint64_t v50 = *((void *)v49 + 1);
      uint64_t v51 = v21[15];
      if (v50 < (v21[16] - v51) >> 3) {
        break;
      }
    }
    if (++v47 >= v48) {
      goto LABEL_86;
    }
  }
  uint64_t v52 = *(void *)(v51 + 8 * v50);
  if (v52)
  {
    v40 = *(void **)(*(void *)(v52 + 24) + 8 * *((unsigned __int8 *)this + 103));
    uint64_t v53 = v23 - v22;
    if (v23 == v22)
    {
LABEL_83:
      v31 = 0;
      goto LABEL_61;
    }
  }
  else
  {
LABEL_86:
    v40 = 0;
    uint64_t v53 = v23 - v22;
    if (v23 == v22) {
      goto LABEL_83;
    }
  }
  uint64_t v54 = 0;
  unint64_t v55 = v53 >> 3;
  while (1)
  {
    v56 = *(unsigned __int8 **)(v22 + 8 * v54);
    if (*v56 == *((unsigned __int8 *)this + 98))
    {
      unint64_t v57 = *((void *)v56 + 1);
      uint64_t v58 = v21[15];
      if (v57 < (v21[16] - v58) >> 3) {
        break;
      }
    }
    if (++v54 >= v55) {
      goto LABEL_94;
    }
  }
  uint64_t v59 = *(void *)(v58 + 8 * v57);
  if (v59)
  {
    v31 = *(void **)(*(void *)(v59 + 24) + 8 * *((unsigned __int8 *)this + 99));
    uint64_t v60 = v23 - v22;
    if (v23 == v22) {
      goto LABEL_61;
    }
    goto LABEL_95;
  }
LABEL_94:
  v31 = 0;
  uint64_t v60 = v23 - v22;
  if (v23 == v22) {
    goto LABEL_61;
  }
LABEL_95:
  uint64_t v61 = 0;
  unint64_t v62 = v60 >> 3;
  while (1)
  {
    v63 = *(unsigned __int8 **)(v22 + 8 * v61);
    if (*v63 == *((unsigned __int8 *)this + 100))
    {
      unint64_t v64 = *((void *)v63 + 1);
      uint64_t v65 = v21[15];
      if (v64 < (v21[16] - v65) >> 3) {
        break;
      }
    }
    if (++v61 >= v62) {
      goto LABEL_61;
    }
  }
  uint64_t v66 = *(void *)(v65 + 8 * v64);
  if (!v66)
  {
LABEL_61:
    uint64_t v41 = 0;
    if (!v19) {
      goto LABEL_101;
    }
    goto LABEL_62;
  }
  uint64_t v41 = *(void *)(*(void *)(v66 + 24) + 8 * *((unsigned __int8 *)this + 101));
  if (!v19)
  {
LABEL_101:
    BOOL v45 = 0;
    goto LABEL_102;
  }
LABEL_62:
  uint64_t v42 = *v19;
  uint64_t v43 = v19[1];
  uint64_t v44 = *v19;
  if (*v19 != v43)
  {
    uint64_t v44 = *v19;
    while (*(unsigned char *)v44 != 2)
    {
      v44 += 16;
      if (v44 == v43) {
        goto LABEL_70;
      }
    }
  }
  if (v44 == v43 || !*(void *)(v44 + 8))
  {
LABEL_70:
    if (v42 != v43)
    {
      while (*(unsigned char *)v42 != 4)
      {
        v42 += 16;
        if (v42 == v43) {
          goto LABEL_84;
        }
      }
    }
    if (v42 == v43) {
LABEL_84:
    }
      uint64_t v46 = 0;
    else {
      uint64_t v46 = *(void *)(v42 + 8);
    }
    BOOL v45 = v46 != 0;
  }
  else
  {
    BOOL v45 = 1;
  }
LABEL_102:
  v29[4] = 0;
  v32[4] = 0;
  v40[4] = 0;
  v31[4] = 0;
  *(void *)(v41 + 32) = 0;
  v67 = this[7][2];
  if (v67)
  {
    v32[4] = v67;
    v40[4] = this[7][2];
  }
  if (*((unsigned char *)this + 109))
  {
    if (this[8][1] != *this[8]) {
      BOOL v45 = 1;
    }
    if (v45)
    {
      if (!v19) {
        goto LABEL_115;
      }
      uint64_t v69 = *v19;
      uint64_t v68 = v19[1];
      if (v69 != v68)
      {
        while (*(unsigned char *)v69 != 23)
        {
          v69 += 16;
          if (v69 == v68) {
            goto LABEL_115;
          }
        }
      }
      if (v69 == v68) {
LABEL_115:
      }
        BOOL v70 = 1;
      else {
        BOOL v70 = *(void *)(v69 + 8) == 0;
      }
      uint64_t v71 = (uint64_t)*this[7];
      if (!v71) {
        operator new();
      }
      v29[4] = v71;
      v32[4] = *this[7];
      v40[4] = *this[7];
      v31[4] = *this[7];
      *(void *)(v41 + 32) = *this[7];
      if (v70) {
        v29[4] = 0;
      }
    }
  }
  uint64_t v98 = v41;
  v72 = this[8];
  v74 = *v72;
  v73 = v72[1];
  if (*v72 != v73)
  {
    do
    {
      uint64_t v99 = *v74;
      v75 = (std::__shared_weak_count *)v74[1];
      v100 = v75;
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::RouteRenderLayer::layoutOverlay((uint64_t)this, (md::LayoutContext *)a2, &v99, v20 != 0, (uint64_t)v40);
      v76 = v100;
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
      v74 += 2;
    }
    while (v74 != v73);
  }
  unint64_t v77 = v29[9];
  v78 = (uint64_t *)v29[10];
  unint64_t v79 = 126 - 2 * __clz((uint64_t)((uint64_t)v78 - v77) >> 3);
  if (v78 == (uint64_t *)v77) {
    uint64_t v80 = 0;
  }
  else {
    uint64_t v80 = v79;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v77, v78, v80, 1);
  unint64_t v81 = v32[9];
  v82 = (uint64_t *)v32[10];
  unint64_t v83 = 126 - 2 * __clz((uint64_t)((uint64_t)v82 - v81) >> 3);
  if (v82 == (uint64_t *)v81) {
    uint64_t v84 = 0;
  }
  else {
    uint64_t v84 = v83;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v81, v82, v84, 1);
  unint64_t v85 = v40[9];
  v86 = (uint64_t *)v40[10];
  unint64_t v87 = 126 - 2 * __clz((uint64_t)((uint64_t)v86 - v85) >> 3);
  if (v86 == (uint64_t *)v85) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = v87;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v85, v86, v88, 1);
  unint64_t v89 = v31[9];
  v90 = (uint64_t *)v31[10];
  unint64_t v91 = 126 - 2 * __clz((uint64_t)((uint64_t)v90 - v89) >> 3);
  if (v90 == (uint64_t *)v89) {
    uint64_t v92 = 0;
  }
  else {
    uint64_t v92 = v91;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v89, v90, v92, 1);
  unint64_t v93 = *(void *)(v98 + 72);
  v94 = *(uint64_t **)(v98 + 80);
  unint64_t v95 = 126 - 2 * __clz((uint64_t)((uint64_t)v94 - v93) >> 3);
  if (v94 == (uint64_t *)v93) {
    uint64_t v96 = 0;
  }
  else {
    uint64_t v96 = v95;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v93, v94, v96, 1);
  this[7][2] = 0;
  if (!v106)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v106 + 48))(v106);
  result = v106;
  if (v106 == v105) {
    return (void *)(*(uint64_t (**)(void *))(v105[0] + 32))(v105);
  }
  if (v106) {
    return (void *)(*(uint64_t (**)(void))(*v106 + 40))();
  }
  return result;
}

void sub_1A1906F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RouteLayout", "", v5, 2u);
  }
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xC94DD89A7B09BE9CLL)
  {
    os_signpost_id_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xC94DD89A7B09BE9CLL);
    v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
  if (v9)
  {
    unint64_t v10 = (uint64_t *)result;
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10++;
      unint64_t v13 = *(void *)(v12 + 72);
      v14 = *(uint64_t **)(v12 + 80);
      unint64_t v15 = 126 - 2 * __clz((uint64_t)((uint64_t)v14 - v13) >> 3);
      if (v14 == (uint64_t *)v13) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      unint64_t result = std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v13, v14, v16, 1);
      v11 -= 8;
    }
    while (v11);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
LABEL_2:
  unint64_t v10 = a2 - 1;
  uint64_t v11 = v9;
  while (1)
  {
    uint64_t v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v81 = *v11;
          if (*(void *)(*v10 + 48) < *(void *)(*v11 + 48))
          {
            *uint64_t v11 = *v10;
            uint64_t *v10 = v81;
          }
          return result;
        case 3:
          uint64_t v82 = *v11;
          uint64_t v83 = v11[1];
          unint64_t v84 = *(void *)(v83 + 48);
          unint64_t v85 = *(void *)(*v11 + 48);
          uint64_t v86 = *v10;
          unint64_t v87 = *(void *)(*v10 + 48);
          if (v84 >= v85)
          {
            if (v87 < v84)
            {
              v11[1] = v86;
              uint64_t *v10 = v83;
              uint64_t v138 = *v11;
              uint64_t v137 = v11[1];
              if (*(void *)(v137 + 48) < *(void *)(*v11 + 48))
              {
                *uint64_t v11 = v137;
                v11[1] = v138;
              }
            }
          }
          else
          {
            if (v87 >= v84)
            {
              *uint64_t v11 = v83;
              v11[1] = v82;
              if (*(void *)(*v10 + 48) >= v85) {
                return result;
              }
              v11[1] = *v10;
            }
            else
            {
              *uint64_t v11 = v86;
            }
            uint64_t *v10 = v82;
          }
          return result;
        case 4:
          uint64_t v88 = v11 + 1;
          uint64_t v89 = v11[1];
          v90 = v11 + 2;
          uint64_t v91 = v11[2];
          unint64_t v92 = *v11;
          unint64_t v93 = *(void *)(v89 + 48);
          unint64_t v94 = *(void *)(*v11 + 48);
          unint64_t v95 = *(void *)(v91 + 48);
          if (v93 >= v94)
          {
            if (v95 >= v93) {
              goto LABEL_169;
            }
            *uint64_t v88 = v91;
            uint64_t *v90 = v89;
            uint64_t v96 = v11;
            v97 = (unint64_t *)(v11 + 1);
            unint64_t result = v89;
            if (v95 >= v94) {
              goto LABEL_170;
            }
          }
          else
          {
            uint64_t v96 = v11;
            v97 = (unint64_t *)(v11 + 2);
            unint64_t result = *v11;
            if (v95 >= v93)
            {
              *uint64_t v11 = v89;
              v11[1] = v92;
              uint64_t v96 = v11 + 1;
              v97 = (unint64_t *)(v11 + 2);
              unint64_t result = v92;
              if (v95 >= v94)
              {
LABEL_169:
                uint64_t v89 = v91;
LABEL_170:
                if (*(void *)(*v10 + 48) < *(void *)(v89 + 48))
                {
                  uint64_t *v90 = *v10;
                  uint64_t *v10 = v89;
                  uint64_t v142 = *v90;
                  uint64_t v143 = *v88;
                  unint64_t v144 = *(void *)(v142 + 48);
                  if (v144 < *(void *)(v143 + 48))
                  {
                    v11[1] = v142;
                    v11[2] = v143;
                    uint64_t v145 = *v11;
                    if (v144 < *(void *)(*v11 + 48))
                    {
                      *uint64_t v11 = v142;
                      v11[1] = v145;
                    }
                  }
                }
                return result;
              }
            }
          }
          *uint64_t v96 = v91;
          unint64_t *v97 = v92;
          uint64_t v89 = result;
          goto LABEL_170;
        case 5:
          return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v109 = (unint64_t)(v13 - 2) >> 1;
        int64_t v110 = v109;
        do
        {
          if (v109 >= v110)
          {
            uint64_t v112 = (2 * v110) | 1;
            v113 = &v11[v112];
            uint64_t v114 = *v113;
            if (2 * v110 + 2 < v13)
            {
              unint64_t result = *(void *)(v114 + 48);
              if (result < *(void *)(v113[1] + 48))
              {
                uint64_t v114 = v113[1];
                ++v113;
                uint64_t v112 = 2 * v110 + 2;
              }
            }
            v115 = &v11[v110];
            uint64_t v116 = *v115;
            unint64_t v117 = *(void *)(*v115 + 48);
            if (*(void *)(v114 + 48) >= v117)
            {
              do
              {
                v118 = v113;
                uint64_t *v115 = v114;
                if (v109 < v112) {
                  break;
                }
                unint64_t result = (2 * v112) | 1;
                v113 = &v11[result];
                uint64_t v119 = 2 * v112 + 2;
                uint64_t v114 = *v113;
                if (v119 < v13 && *(void *)(v114 + 48) < *(void *)(v113[1] + 48))
                {
                  uint64_t v114 = v113[1];
                  ++v113;
                  unint64_t result = v119;
                }
                v115 = v118;
                uint64_t v112 = result;
              }
              while (*(void *)(v114 + 48) >= v117);
              uint64_t *v118 = v116;
            }
          }
          BOOL v111 = v110-- <= 0;
        }
        while (!v111);
        uint64_t v120 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v121 = 0;
          uint64_t v122 = *v11;
          v123 = v11;
          do
          {
            v124 = &v123[v121];
            uint64_t v127 = v124[1];
            v125 = v124 + 1;
            uint64_t v126 = v127;
            uint64_t v128 = (2 * v121) | 1;
            uint64_t v129 = 2 * v121 + 2;
            if (v129 < v120)
            {
              unint64_t result = *(void *)(v126 + 48);
              if (result < *(void *)(v125[1] + 48))
              {
                uint64_t v126 = v125[1];
                ++v125;
                uint64_t v128 = v129;
              }
            }
            uint64_t *v123 = v126;
            v123 = v125;
            uint64_t v121 = v128;
          }
          while (v128 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
          if (v125 == --a2)
          {
            uint64_t *v125 = v122;
          }
          else
          {
            uint64_t *v125 = *a2;
            *a2 = v122;
            uint64_t v130 = (char *)v125 - (char *)v11 + 8;
            if (v130 >= 9)
            {
              unint64_t v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              v132 = &v11[v131];
              uint64_t v133 = *v132;
              uint64_t v134 = *v125;
              unint64_t v135 = *(void *)(*v125 + 48);
              if (*(void *)(*v132 + 48) < v135)
              {
                do
                {
                  v136 = v132;
                  uint64_t *v125 = v133;
                  if (!v131) {
                    break;
                  }
                  unint64_t v131 = (v131 - 1) >> 1;
                  v132 = &v11[v131];
                  uint64_t v133 = *v132;
                  v125 = v136;
                }
                while (*(void *)(*v132 + 48) < v135);
                uint64_t *v136 = v134;
              }
            }
          }
          BOOL v111 = v120-- <= 2;
        }
        while (!v111);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = &v11[(unint64_t)v13 >> 1];
    uint64_t v16 = *v10;
    unint64_t v17 = *(void *)(*v10 + 48);
    if ((unint64_t)v12 >= 0x401)
    {
      uint64_t v18 = *v15;
      uint64_t v19 = *v11;
      unint64_t v20 = *(void *)(*v15 + 48);
      unint64_t v21 = *(void *)(*v11 + 48);
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          uint64_t *v15 = v16;
          uint64_t *v10 = v18;
          uint64_t v26 = *v11;
          if (*(void *)(*v15 + 48) < *(void *)(*v11 + 48))
          {
            *uint64_t v11 = *v15;
            uint64_t *v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *uint64_t v11 = v16;
          goto LABEL_22;
        }
        *uint64_t v11 = v18;
        uint64_t *v15 = v19;
        if (*(void *)(*v10 + 48) < v21)
        {
          uint64_t *v15 = *v10;
LABEL_22:
          uint64_t *v10 = v19;
        }
      }
      uint64_t v28 = &v11[v14];
      uint64_t v31 = *(v28 - 1);
      v29 = v28 - 1;
      uint64_t v30 = v31;
      uint64_t v32 = v11[1];
      unint64_t v33 = *(void *)(v31 + 48);
      unint64_t v34 = *(void *)(v32 + 48);
      uint64_t v35 = *(a2 - 2);
      unint64_t v36 = *(void *)(v35 + 48);
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          uint64_t *v29 = v35;
          *(a2 - 2) = v30;
          uint64_t v37 = v11[1];
          if (*(void *)(*v29 + 48) < *(void *)(v37 + 48))
          {
            v11[1] = *v29;
            uint64_t *v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v11[1] = v35;
          goto LABEL_34;
        }
        v11[1] = v30;
        uint64_t *v29 = v32;
        uint64_t v38 = *(a2 - 2);
        if (*(void *)(v38 + 48) < v34)
        {
          uint64_t *v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      uint64_t v39 = &v11[v14];
      uint64_t v42 = v39[1];
      v40 = v39 + 1;
      uint64_t v41 = v42;
      uint64_t v43 = v11[2];
      unint64_t v44 = *(void *)(v42 + 48);
      unint64_t v45 = *(void *)(v43 + 48);
      uint64_t v46 = *(a2 - 3);
      unint64_t v47 = *(void *)(v46 + 48);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          uint64_t *v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v11[2];
          if (*(void *)(*v40 + 48) < *(void *)(v48 + 48))
          {
            v11[2] = *v40;
            uint64_t *v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          v11[2] = v46;
          goto LABEL_43;
        }
        v11[2] = v41;
        uint64_t *v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*(void *)(v49 + 48) < v45)
        {
          uint64_t *v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      uint64_t v50 = *v15;
      uint64_t v51 = *v29;
      unint64_t v52 = *(void *)(*v15 + 48);
      unint64_t v53 = *(void *)(*v29 + 48);
      uint64_t v54 = *v40;
      unint64_t v55 = *(void *)(*v40 + 48);
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_51;
        }
        uint64_t *v15 = v54;
        uint64_t *v40 = v50;
        v40 = v15;
        uint64_t v50 = v51;
        if (v55 >= v53)
        {
          uint64_t v50 = v54;
          goto LABEL_51;
        }
      }
      else if (v55 >= v52)
      {
        uint64_t *v29 = v50;
        uint64_t *v15 = v51;
        v29 = v15;
        uint64_t v50 = v54;
        if (v55 >= v53)
        {
          uint64_t v50 = v51;
LABEL_51:
          uint64_t v56 = *v11;
          *uint64_t v11 = v50;
          uint64_t *v15 = v56;
          goto LABEL_52;
        }
      }
      uint64_t *v29 = v54;
      uint64_t *v40 = v51;
      goto LABEL_51;
    }
    uint64_t v22 = *v11;
    uint64_t v23 = *v15;
    unint64_t v24 = *(void *)(*v11 + 48);
    unint64_t v25 = *(void *)(*v15 + 48);
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *uint64_t v11 = v16;
        uint64_t *v10 = v22;
        uint64_t v27 = *v15;
        if (*(void *)(*v11 + 48) < *(void *)(*v15 + 48))
        {
          uint64_t *v15 = *v11;
          *uint64_t v11 = v27;
        }
      }
      goto LABEL_52;
    }
    if (v17 < v24)
    {
      uint64_t *v15 = v16;
LABEL_31:
      uint64_t *v10 = v23;
      goto LABEL_52;
    }
    uint64_t *v15 = v22;
    *uint64_t v11 = v23;
    if (*(void *)(*v10 + 48) < v25)
    {
      *uint64_t v11 = *v10;
      goto LABEL_31;
    }
LABEL_52:
    --a3;
    uint64_t v57 = *v11;
    if (a4)
    {
      unint64_t v58 = *(void *)(v57 + 48);
LABEL_55:
      uint64_t v59 = v11;
      do
      {
        uint64_t v60 = v59;
        uint64_t v62 = v59[1];
        ++v59;
        uint64_t v61 = v62;
      }
      while (*(void *)(v62 + 48) < v58);
      v63 = a2;
      if (v60 == v11)
      {
        v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*(void *)(v65 + 48) >= v58);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*(void *)(v64 + 48) >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        v67 = v59;
        uint64_t v68 = v63;
        do
        {
          uint64_t *v67 = v66;
          *uint64_t v68 = v61;
          do
          {
            uint64_t v60 = v67;
            uint64_t v69 = v67[1];
            ++v67;
            uint64_t v61 = v69;
          }
          while (*(void *)(v69 + 48) < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*(void *)(v70 + 48) >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v11) {
        *uint64_t v11 = *v60;
      }
      *uint64_t v60 = v57;
      if (v59 < v63) {
        goto LABEL_74;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **>(v11, v60);
      uint64_t v11 = v60 + 1;
      unint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_74:
        unint64_t result = std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v60 + 1;
      }
    }
    else
    {
      unint64_t v58 = *(void *)(v57 + 48);
      if (*(void *)(*(v11 - 1) + 48) < v58) {
        goto LABEL_55;
      }
      if (v58 < *(void *)(*v10 + 48))
      {
        do
        {
          uint64_t v72 = v11[1];
          ++v11;
        }
        while (v58 >= *(void *)(v72 + 48));
      }
      else
      {
        v73 = v11 + 1;
        do
        {
          uint64_t v11 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
        }
        while (v58 >= *(void *)(*v11 + 48));
      }
      v74 = a2;
      if (v11 < a2)
      {
        v74 = a2;
        do
          uint64_t v75 = *--v74;
        while (v58 < *(void *)(v75 + 48));
      }
      if (v11 < v74)
      {
        uint64_t v76 = *v11;
        uint64_t v77 = *v74;
        do
        {
          *uint64_t v11 = v77;
          uint64_t *v74 = v76;
          do
          {
            uint64_t v78 = v11[1];
            ++v11;
            uint64_t v76 = v78;
          }
          while (v58 >= *(void *)(v78 + 48));
          do
          {
            uint64_t v79 = *--v74;
            uint64_t v77 = v79;
          }
          while (v58 < *(void *)(v79 + 48));
        }
        while (v11 < v74);
      }
      uint64_t v80 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        uint64_t *v9 = *v80;
      }
      a4 = 0;
      *uint64_t v80 = v57;
    }
  }
  uint64_t v98 = v11 + 1;
  BOOL v100 = v11 == a2 || v98 == a2;
  if (a4)
  {
    if (!v100)
    {
      uint64_t v101 = 8;
      v102 = v11;
      do
      {
        uint64_t v105 = *v102;
        uint64_t v104 = v102[1];
        v102 = v98;
        unint64_t v106 = *(void *)(v104 + 48);
        if (v106 < *(void *)(v105 + 48))
        {
          uint64_t v107 = v101;
          do
          {
            *(uint64_t *)((char *)v11 + v107) = v105;
            uint64_t v108 = v107 - 8;
            if (v107 == 8)
            {
              v103 = v11;
              goto LABEL_118;
            }
            uint64_t v105 = *(uint64_t *)((char *)v11 + v107 - 16);
            v107 -= 8;
          }
          while (v106 < *(void *)(v105 + 48));
          v103 = (uint64_t *)((char *)v11 + v108);
LABEL_118:
          uint64_t *v103 = v104;
        }
        uint64_t v98 = v102 + 1;
        v101 += 8;
      }
      while (v102 + 1 != a2);
    }
  }
  else if (!v100)
  {
    do
    {
      uint64_t v140 = *v9;
      uint64_t v139 = v9[1];
      uint64_t v9 = v98;
      unint64_t v141 = *(void *)(v139 + 48);
      if (v141 < *(void *)(v140 + 48))
      {
        do
        {
          *uint64_t v98 = v140;
          uint64_t v140 = *(v98 - 2);
          --v98;
        }
        while (v141 < *(void *)(v140 + 48));
        *uint64_t v98 = v139;
      }
      uint64_t v98 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RouteLayout", "", v5, 2u);
  }
}

void md::MapEngineMode::~MapEngineMode(md::MapEngineMode *this)
{
  *(void *)this = &unk_1EF532458;
  if (*((unsigned char *)this + 528))
  {
    v2 = (char *)this + 496;
    v3 = (md::MapEngineMode *)*((void *)this + 65);
    if (v3 == (md::MapEngineMode *)((char *)this + 496))
    {
      (*(void (**)(char *))(*(void *)v2 + 32))((char *)this + 496);
      if (!*((unsigned char *)this + 488)) {
        goto LABEL_12;
      }
      goto LABEL_6;
    }
    if (v3) {
      (*(void (**)(md::MapEngineMode *))(*(void *)v3 + 40))(v3);
    }
  }
  if (!*((unsigned char *)this + 488)) {
    goto LABEL_12;
  }
LABEL_6:
  os_signpost_id_t v4 = (md::MapEngineMode *)*((void *)this + 60);
  if (v4 == (md::MapEngineMode *)((char *)this + 456))
  {
    (*(void (**)(char *))(*((void *)this + 57) + 32))((char *)this + 456);
  }
  else if (v4)
  {
    (*(void (**)(md::MapEngineMode *))(*(void *)v4 + 40))(v4);
  }
LABEL_12:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 55));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 52));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 49));
  BOOL v5 = (md::MapEngineMode *)*((void *)this + 46);
  if (v5 == (md::MapEngineMode *)((char *)this + 344))
  {
    (*(void (**)(char *))(*((void *)this + 43) + 32))((char *)this + 344);
  }
  else if (v5)
  {
    (*(void (**)(md::MapEngineMode *))(*(void *)v5 + 40))(v5);
  }
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*((void **)this + 41));
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*((void **)this + 38));
  uint64_t v6 = (void *)*((void *)this + 34);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = (void *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v8) {
    operator delete(v8);
  }
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(*((void **)this + 30));
  uint64_t v9 = (void *)*((void *)this + 25);
  if (v9)
  {
    do
    {
      unint64_t v10 = (void *)*v9;
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 20);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  unint64_t v14 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v14) {
    operator delete(v14);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 16));
  unint64_t v15 = (void *)*((void *)this + 12);
  if (v15)
  {
    do
    {
      uint64_t v16 = (void *)*v15;
      operator delete(v15);
      unint64_t v15 = v16;
    }
    while (v16);
  }
  unint64_t v17 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v17) {
    operator delete(v17);
  }
  if (*((unsigned char *)this + 64)) {
    *((unsigned char *)this + 64) = 0;
  }
  uint64_t v18 = (void *)*((void *)this + 3);
  if (v18)
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      operator delete(v18);
      uint64_t v18 = v19;
    }
    while (v19);
  }
  unint64_t v20 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v20) {
    operator delete(v20);
  }
}

{
  uint64_t vars8;

  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

void std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*a1);
    std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(a1[1]);
    v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(*a1);
    std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(a1[1]);
    v2 = (void *)a1[8];
    if (v2)
    {
      a1[9] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t __copy_helper_block_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1A19080AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::PendingSceneLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  v667[48] = *(double *)MEMORY[0x1E4F143B8];
  v623[0] = &unk_1EF573158;
  v623[1] = a2;
  v621[0] = &unk_1EF5731A0;
  v621[1] = a2;
  v622 = v621;
  v626 = v625;
  v624 = v623;
  v625[0] = &unk_1EF5731A0;
  v625[1] = a2;
  _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v623);
  if (v622 == v621)
  {
    (*(void (**)(void *))(v621[0] + 32))(v621);
  }
  else if (v622)
  {
    (*(void (**)(void))(*v622 + 40))();
  }
  if (v624 == v623)
  {
    (*(void (**)(void *))(v623[0] + 32))(v623);
  }
  else if (v624)
  {
    (*(void (**)(void))(*v624 + 40))();
  }
  uint64_t v8 = *a3;
  v596 = (void *)a3[1];
  uint64_t v9 = (uint64_t *)a3[3];
  uint64_t v599 = a3[2];
  md::SceneStateManager::clear(*(md::SceneStateManager **)(a1 + 392));
  uint64_t v597 = v8;
  uint64_t v600 = a1;
  if (*(unsigned char *)(v8 + 128))
  {
    uint64_t v10 = *(void *)(a1 + 392);
    md::SceneStateManager::clear((md::SceneStateManager *)v10);
    uint64_t v12 = *(void *)(v10 + 48);
    uint64_t v11 = *(void *)(v10 + 56);
    if (v11 != v12)
    {
      do
      {
        uint64_t v13 = v11 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v11 - 16));
        uint64_t v11 = v13;
      }
      while (v13 != v12);
    }
    *(void *)(v10 + 56) = v12;
    *(unsigned char *)(v10 + 280) = 0;
    unint64_t v14 = *(void **)(a1 + 128);
    uint64_t v15 = v14[4];
    for (uint64_t i = v14[5]; v15 != i; v15 += 16)
      gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v15 + 8));
    uint64_t v17 = v14[10];
    uint64_t v18 = v14[11];
    while (v17 != v18)
    {
      uint64_t v19 = *(void **)(v17 + 8);
      std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(v19);
      if (v19[6])
      {
        unint64_t v20 = (unsigned char *)v19[5];
        if (v20)
        {
          do
          {
            if (v20[112]) {
              v20[112] = 0;
            }
            uint64_t v23 = *(unsigned char **)v20;
            unint64_t v24 = (void *)*((void *)v20 + 4);
            if (v24 != *((void **)v20 + 6)) {
              free(v24);
            }
            operator delete(v20);
            unint64_t v20 = v23;
          }
          while (v23);
        }
        v19[5] = 0;
        uint64_t v21 = v19[4];
        if (v21)
        {
          for (uint64_t j = 0; j != v21; ++j)
            *(void *)(v19[3] + 8 * j) = 0;
        }
        v19[6] = 0;
        a1 = v600;
      }
      v19[8] = v19;
      v19[9] = 0;
      v17 += 16;
    }
  }
  uint64_t v25 = *(void *)(a1 + 280);
  for (uint64_t k = *(void *)(a1 + 288); v25 != k; v25 += 32)
    std::list<std::unique_ptr<gdc::SelectionContext>>::resize((uint64_t *)(v25 + 8));
  uint64_t v27 = *(void *)(a1 + 304);
  for (uint64_t m = *(void *)(a1 + 312); v27 != m; v27 += 32)
    std::list<std::unique_ptr<gdc::SelectionContext>>::resize((uint64_t *)(v27 + 8));
  uint64_t v29 = *(void *)(a1 + 328);
  for (uint64_t n = *(void *)(a1 + 336); v29 != n; v29 += 32)
    std::list<std::unique_ptr<gdc::SelectionContext>>::resize((uint64_t *)(v29 + 8));
  double v31 = *(double *)(md::LayoutContext::frameState(a2) + 88);
  for (iuint64_t i = *(uint64_t **)(v597 + 64); ii; iuint64_t i = (uint64_t *)*ii)
  {
    int v37 = *((unsigned __int16 *)ii + 8);
    uint64_t v38 = *(void **)(a1 + 392);
    uint64_t v39 = (unsigned __int16 *)v38[14];
    v40 = (unsigned __int16 *)v38[15];
    if (v39 != v40)
    {
      while (*v39 != v37)
      {
        v39 += 56;
        if (v39 == v40)
        {
          uint64_t v39 = (unsigned __int16 *)v38[15];
          break;
        }
      }
    }
    *((_DWORD *)v39 + 14) = *((_DWORD *)ii + 6);
    if (v39 + 28 != (unsigned __int16 *)(ii + 3))
    {
      *((_DWORD *)v39 + 24) = *((_DWORD *)ii + 16);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)v39 + 8, (uint64_t *)ii[6]);
      uint64_t v38 = *(void **)(a1 + 392);
    }
    uint64_t v42 = (unsigned __int16 *)v38[17];
    uint64_t v41 = (unsigned __int16 *)v38[18];
    if (v42 != v41)
    {
      while (*v42 != v37)
      {
        v42 += 56;
        if (v42 == v41)
        {
          uint64_t v42 = v41;
          break;
        }
      }
    }
    *((_DWORD *)v42 + 14) = *((_DWORD *)ii + 18);
    if (v42 + 28 != (unsigned __int16 *)(ii + 9))
    {
      *((_DWORD *)v42 + 24) = *((_DWORD *)ii + 28);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)v42 + 8, (uint64_t *)ii[12]);
    }
  }
  for (juint64_t j = *(uint64_t **)(v597 + 104); jj; juint64_t j = (uint64_t *)*jj)
  {
    int v43 = *((unsigned __int16 *)jj + 8);
    unint64_t v44 = *(void **)(a1 + 392);
    unint64_t v45 = (unsigned __int16 *)v44[14];
    uint64_t v46 = (unsigned __int16 *)v44[15];
    if (v45 != v46)
    {
      while (*v45 != v43)
      {
        v45 += 56;
        if (v45 == v46)
        {
          unint64_t v45 = (unsigned __int16 *)v44[15];
          break;
        }
      }
    }
    *((_DWORD *)v45 + 14) = *((_DWORD *)jj + 6);
    if (v45 + 28 != (unsigned __int16 *)(jj + 3))
    {
      *((_DWORD *)v45 + 24) = *((_DWORD *)jj + 16);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)v45 + 8, (uint64_t *)jj[6]);
      unint64_t v44 = *(void **)(a1 + 392);
    }
    uint64_t v48 = (unsigned __int16 *)v44[17];
    unint64_t v47 = (unsigned __int16 *)v44[18];
    if (v48 != v47)
    {
      while (*v48 != v43)
      {
        v48 += 56;
        if (v48 == v47)
        {
          uint64_t v48 = v47;
          break;
        }
      }
    }
    *((_DWORD *)v48 + 14) = *((_DWORD *)jj + 18);
    if (v48 + 28 != (unsigned __int16 *)(jj + 9))
    {
      *((_DWORD *)v48 + 24) = *((_DWORD *)jj + 28);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)v48 + 8, (uint64_t *)jj[12]);
    }
  }
  uint64_t v34 = *v9;
  uint64_t v35 = v9[1];
  uint64_t v36 = *v9;
  if (*v9 != v35)
  {
    uint64_t v36 = *v9;
    while (*(unsigned char *)v36 != 30)
    {
      v36 += 16;
      if (v36 == v35) {
        goto LABEL_72;
      }
    }
  }
  if (v36 == v35 || !*(void *)(v36 + 8))
  {
LABEL_72:
    uint64_t v49 = 0;
    if (v34 != v35)
    {
LABEL_73:
      while (*(unsigned char *)v34 != 37)
      {
        v34 += 16;
        if (v34 == v35) {
          goto LABEL_80;
        }
      }
    }
  }
  else
  {
    uint64_t v49 = *(void *)(a1 + 224);
    if (v34 != v35) {
      goto LABEL_73;
    }
  }
  if (v34 != v35 && *(void *)(v34 + 8) && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) != 1) {
    uint64_t v49 = 0;
  }
LABEL_80:
  if (*(void *)(a1 + 232) != v49)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v50 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      uint64_t v51 = *(void *)(a1 + 232);
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = v51;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v49;
      _os_log_impl(&dword_1A1780000, v50, OS_LOG_TYPE_INFO, "ResolvedImplicationDelay updated (from:%lld to:%lld)", buf, 0x16u);
    }

    *(void *)(a1 + 232) = v49;
    if (v49 <= 0) {
      geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::clear(*(void **)(a1 + 216));
    }
  }
  unint64_t v52 = *(void **)(a1 + 392);
  unint64_t v53 = (void *)v52[20];
  uint64_t v54 = (void *)v52[21];
  unint64_t v55 = v53;
  if (v53 != v54)
  {
    unint64_t v55 = (void *)v52[20];
    while (*(_WORD *)v55)
    {
      v55 += 14;
      if (v55 == v54)
      {
        unint64_t v55 = (void *)v52[21];
        break;
      }
    }
  }
  if (v55[11])
  {
    uint64_t v56 = (void *)v55[10];
    if (v56)
    {
      do
      {
        uint64_t v57 = (void *)*v56;
        operator delete(v56);
        uint64_t v56 = v57;
      }
      while (v57);
    }
    v55[10] = 0;
    uint64_t v58 = v55[9];
    if (v58)
    {
      for (kuint64_t k = 0; kk != v58; ++kk)
        *(void *)(v55[8] + 8 * kk) = 0;
    }
    v55[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  uint64_t v60 = v54;
  if (v53 != v54)
  {
    uint64_t v60 = v53;
    while (*(_WORD *)v60 != 1)
    {
      v60 += 14;
      if (v60 == v54)
      {
        uint64_t v60 = v54;
        break;
      }
    }
  }
  if (v60[11])
  {
    uint64_t v61 = (void *)v60[10];
    if (v61)
    {
      do
      {
        uint64_t v62 = (void *)*v61;
        operator delete(v61);
        uint64_t v61 = v62;
      }
      while (v62);
    }
    v60[10] = 0;
    uint64_t v63 = v60[9];
    if (v63)
    {
      for (muint64_t m = 0; mm != v63; ++mm)
        *(void *)(v60[8] + 8 * mm) = 0;
    }
    v60[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  uint64_t v65 = v54;
  if (v53 != v54)
  {
    uint64_t v65 = v53;
    while (*(_WORD *)v65 != 2)
    {
      v65 += 14;
      if (v65 == v54)
      {
        uint64_t v65 = v54;
        break;
      }
    }
  }
  if (v65[11])
  {
    uint64_t v66 = (void *)v65[10];
    if (v66)
    {
      do
      {
        v67 = (void *)*v66;
        operator delete(v66);
        uint64_t v66 = v67;
      }
      while (v67);
    }
    v65[10] = 0;
    uint64_t v68 = v65[9];
    if (v68)
    {
      for (nuint64_t n = 0; nn != v68; ++nn)
        *(void *)(v65[8] + 8 * nn) = 0;
    }
    v65[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  uint64_t v70 = v54;
  if (v53 != v54)
  {
    uint64_t v70 = v53;
    while (*(_WORD *)v70 != 3)
    {
      v70 += 14;
      if (v70 == v54)
      {
        uint64_t v70 = v54;
        break;
      }
    }
  }
  if (v70[11])
  {
    BOOL v71 = (void *)v70[10];
    if (v71)
    {
      do
      {
        uint64_t v72 = (void *)*v71;
        operator delete(v71);
        BOOL v71 = v72;
      }
      while (v72);
    }
    v70[10] = 0;
    uint64_t v73 = v70[9];
    if (v73)
    {
      for (uint64_t i1 = 0; i1 != v73; ++i1)
        *(void *)(v70[8] + 8 * i1) = 0;
    }
    v70[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  uint64_t v75 = v54;
  if (v53 != v54)
  {
    uint64_t v75 = v53;
    while (*(_WORD *)v75 != 4)
    {
      v75 += 14;
      if (v75 == v54)
      {
        uint64_t v75 = v54;
        break;
      }
    }
  }
  if (v75[11])
  {
    uint64_t v76 = (void *)v75[10];
    if (v76)
    {
      do
      {
        uint64_t v77 = (void *)*v76;
        operator delete(v76);
        uint64_t v76 = v77;
      }
      while (v77);
    }
    v75[10] = 0;
    uint64_t v78 = v75[9];
    if (v78)
    {
      for (uint64_t i2 = 0; i2 != v78; ++i2)
        *(void *)(v75[8] + 8 * i2) = 0;
    }
    v75[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  uint64_t v80 = v54;
  if (v53 != v54)
  {
    uint64_t v80 = v53;
    while (*(_WORD *)v80 != 5)
    {
      v80 += 14;
      if (v80 == v54)
      {
        uint64_t v80 = v54;
        break;
      }
    }
  }
  if (v80[11])
  {
    uint64_t v81 = (void *)v80[10];
    if (v81)
    {
      do
      {
        uint64_t v82 = (void *)*v81;
        operator delete(v81);
        uint64_t v81 = v82;
      }
      while (v82);
    }
    v80[10] = 0;
    uint64_t v83 = v80[9];
    if (v83)
    {
      for (uint64_t i3 = 0; i3 != v83; ++i3)
        *(void *)(v80[8] + 8 * i3) = 0;
    }
    v80[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  unint64_t v85 = v54;
  if (v53 != v54)
  {
    unint64_t v85 = v53;
    while (*(_WORD *)v85 != 6)
    {
      v85 += 14;
      if (v85 == v54)
      {
        unint64_t v85 = v54;
        break;
      }
    }
  }
  if (v85[11])
  {
    uint64_t v86 = (void *)v85[10];
    if (v86)
    {
      do
      {
        unint64_t v87 = (void *)*v86;
        operator delete(v86);
        uint64_t v86 = v87;
      }
      while (v87);
    }
    v85[10] = 0;
    uint64_t v88 = v85[9];
    if (v88)
    {
      for (uint64_t i4 = 0; i4 != v88; ++i4)
        *(void *)(v85[8] + 8 * i4) = 0;
    }
    v85[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  v90 = v54;
  if (v53 != v54)
  {
    v90 = v53;
    while (*(_WORD *)v90 != 7)
    {
      v90 += 14;
      if (v90 == v54)
      {
        v90 = v54;
        break;
      }
    }
  }
  if (v90[11])
  {
    uint64_t v91 = (void *)v90[10];
    if (v91)
    {
      do
      {
        unint64_t v92 = (void *)*v91;
        operator delete(v91);
        uint64_t v91 = v92;
      }
      while (v92);
    }
    v90[10] = 0;
    uint64_t v93 = v90[9];
    if (v93)
    {
      for (uint64_t i5 = 0; i5 != v93; ++i5)
        *(void *)(v90[8] + 8 * i5) = 0;
    }
    v90[11] = 0;
    unint64_t v52 = *(void **)(a1 + 392);
    unint64_t v53 = (void *)v52[20];
    uint64_t v54 = (void *)v52[21];
  }
  while (1)
  {
    if (v53 == v54)
    {
      if (!v54[11]) {
        goto LABEL_195;
      }
      goto LABEL_189;
    }
    if (*(_WORD *)v53 == 8) {
      break;
    }
    v53 += 14;
  }
  uint64_t v54 = v53;
  if (!v53[11]) {
    goto LABEL_195;
  }
LABEL_189:
  unint64_t v95 = (void *)v54[10];
  if (v95)
  {
    do
    {
      uint64_t v96 = (void *)*v95;
      operator delete(v95);
      unint64_t v95 = v96;
    }
    while (v96);
  }
  v54[10] = 0;
  uint64_t v97 = v54[9];
  if (v97)
  {
    for (uint64_t i6 = 0; i6 != v97; ++i6)
      *(void *)(v54[8] + 8 * i6) = 0;
  }
  v54[11] = 0;
  unint64_t v52 = *(void **)(a1 + 392);
LABEL_195:
  uint64_t v99 = v52[14];
  uint64_t v100 = v52[15];
  uint64_t v101 = v99;
  if (v99 != v100)
  {
    uint64_t v101 = v52[14];
    while (*(_WORD *)v101)
    {
      v101 += 112;
      if (v101 == v100)
      {
        uint64_t v101 = v52[15];
        break;
      }
    }
  }
  int v102 = *(_DWORD *)(v101 + 88);
  uint64_t v103 = v52[17];
  uint64_t v104 = v52[18];
  uint64_t v105 = v103;
  if (v103 != v104)
  {
    uint64_t v105 = v103;
    while (*(_WORD *)v105)
    {
      v105 += 112;
      if (v105 == v104)
      {
        uint64_t v105 = v104;
        break;
      }
    }
  }
  int v106 = *(_DWORD *)(v105 + 88) + v102;
  uint64_t v107 = v99;
  if (v99 != v100)
  {
    uint64_t v107 = v99;
    while (*(_WORD *)v107 != 1)
    {
      v107 += 112;
      if (v107 == v100)
      {
        uint64_t v107 = v100;
        break;
      }
    }
  }
  int v108 = v106 + *(_DWORD *)(v107 + 88);
  uint64_t v109 = v103;
  if (v103 != v104)
  {
    uint64_t v109 = v103;
    while (*(_WORD *)v109 != 1)
    {
      v109 += 112;
      if (v109 == v104)
      {
        uint64_t v109 = v104;
        break;
      }
    }
  }
  int v110 = v108 + *(_DWORD *)(v109 + 88);
  uint64_t v111 = v99;
  if (v99 != v100)
  {
    uint64_t v111 = v99;
    while (*(_WORD *)v111 != 2)
    {
      v111 += 112;
      if (v111 == v100)
      {
        uint64_t v111 = v100;
        break;
      }
    }
  }
  int v112 = v110 + *(_DWORD *)(v111 + 88);
  uint64_t v113 = v103;
  if (v103 != v104)
  {
    uint64_t v113 = v103;
    while (*(_WORD *)v113 != 2)
    {
      v113 += 112;
      if (v113 == v104)
      {
        uint64_t v113 = v104;
        break;
      }
    }
  }
  int v114 = v112 + *(_DWORD *)(v113 + 88);
  uint64_t v115 = v99;
  if (v99 != v100)
  {
    uint64_t v115 = v99;
    while (*(_WORD *)v115 != 3)
    {
      v115 += 112;
      if (v115 == v100)
      {
        uint64_t v115 = v100;
        break;
      }
    }
  }
  int v116 = v114 + *(_DWORD *)(v115 + 88);
  uint64_t v117 = v103;
  if (v103 != v104)
  {
    uint64_t v117 = v103;
    while (*(_WORD *)v117 != 3)
    {
      v117 += 112;
      if (v117 == v104)
      {
        uint64_t v117 = v104;
        break;
      }
    }
  }
  int v118 = v116 + *(_DWORD *)(v117 + 88);
  uint64_t v119 = v99;
  if (v99 != v100)
  {
    uint64_t v119 = v99;
    while (*(_WORD *)v119 != 4)
    {
      v119 += 112;
      if (v119 == v100)
      {
        uint64_t v119 = v100;
        break;
      }
    }
  }
  int v120 = v118 + *(_DWORD *)(v119 + 88);
  uint64_t v121 = v103;
  if (v103 != v104)
  {
    uint64_t v121 = v103;
    while (*(_WORD *)v121 != 4)
    {
      v121 += 112;
      if (v121 == v104)
      {
        uint64_t v121 = v104;
        break;
      }
    }
  }
  int v122 = v120 + *(_DWORD *)(v121 + 88);
  uint64_t v123 = v99;
  if (v99 != v100)
  {
    uint64_t v123 = v99;
    while (*(_WORD *)v123 != 5)
    {
      v123 += 112;
      if (v123 == v100)
      {
        uint64_t v123 = v100;
        break;
      }
    }
  }
  int v124 = v122 + *(_DWORD *)(v123 + 88);
  uint64_t v125 = v103;
  if (v103 != v104)
  {
    uint64_t v125 = v103;
    while (*(_WORD *)v125 != 5)
    {
      v125 += 112;
      if (v125 == v104)
      {
        uint64_t v125 = v104;
        break;
      }
    }
  }
  int v126 = v124 + *(_DWORD *)(v125 + 88);
  uint64_t v127 = v99;
  if (v99 != v100)
  {
    uint64_t v127 = v99;
    while (*(_WORD *)v127 != 6)
    {
      v127 += 112;
      if (v127 == v100)
      {
        uint64_t v127 = v100;
        break;
      }
    }
  }
  int v128 = v126 + *(_DWORD *)(v127 + 88);
  uint64_t v129 = v103;
  if (v103 != v104)
  {
    uint64_t v129 = v103;
    while (*(_WORD *)v129 != 6)
    {
      v129 += 112;
      if (v129 == v104)
      {
        uint64_t v129 = v104;
        break;
      }
    }
  }
  int v130 = v128 + *(_DWORD *)(v129 + 88);
  uint64_t v131 = v99;
  if (v99 != v100)
  {
    uint64_t v131 = v99;
    while (*(_WORD *)v131 != 7)
    {
      v131 += 112;
      if (v131 == v100)
      {
        uint64_t v131 = v100;
        break;
      }
    }
  }
  int v132 = v130 + *(_DWORD *)(v131 + 88);
  uint64_t v133 = v103;
  if (v103 != v104)
  {
    uint64_t v133 = v103;
    while (*(_WORD *)v133 != 7)
    {
      v133 += 112;
      if (v133 == v104)
      {
        uint64_t v133 = v104;
        break;
      }
    }
  }
  int v134 = v132 + *(_DWORD *)(v133 + 88);
  if (v99 != v100)
  {
    while (*(_WORD *)v99 != 8)
    {
      v99 += 112;
      if (v99 == v100)
      {
        uint64_t v99 = v100;
        break;
      }
    }
  }
  int v135 = v134 + *(_DWORD *)(v99 + 88);
  uint64_t v592 = a4;
  if (v103 != v104)
  {
    while (*(_WORD *)v103 != 8)
    {
      v103 += 112;
      if (v103 == v104)
      {
        uint64_t v103 = v104;
        break;
      }
    }
  }
  unint64_t v136 = (v135 + *(_DWORD *)(v103 + 88));
  uint64_t v137 = *(void *)(a1 + 216);
  if (*(void *)(v137 + 48) < v136)
  {
    unint64_t prime = vcvtps_u32_f32((float)v136 / *(float *)(v137 + 56));
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    int8x8_t v139 = *(int8x8_t *)(v137 + 32);
    if (prime > *(void *)&v139) {
      goto LABEL_289;
    }
    if (prime < *(void *)&v139)
    {
      unint64_t v140 = vcvtps_u32_f32((float)*(unint64_t *)(v137 + 48) / *(float *)(v137 + 56));
      if (*(void *)&v139 < 3uLL
        || (uint8x8_t v141 = (uint8x8_t)vcnt_s8(v139), v141.i16[0] = vaddlv_u8(v141), v141.u32[0] > 1uLL))
      {
        unint64_t v140 = std::__next_prime(v140);
      }
      else
      {
        uint64_t v142 = 1 << -(char)__clz(v140 - 1);
        if (v140 >= 2) {
          unint64_t v140 = v142;
        }
      }
      if (prime <= v140) {
        unint64_t prime = v140;
      }
      if (prime < *(void *)&v139) {
LABEL_289:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v137 + 24, prime);
    }
  }
  uint64_t v143 = *(void *)(a1 + 192);
  for (uint64_t i7 = *(void *)(a1 + 200); i7 != v143; i7 -= 48)
  {
    uint64_t v145 = *(unsigned char **)(i7 - 24);
    if (v145)
    {
      do
      {
        if (v145[112]) {
          v145[112] = 0;
        }
        v147 = *(unsigned char **)v145;
        v148 = (void *)*((void *)v145 + 4);
        if (v148 != *((void **)v145 + 6)) {
          free(v148);
        }
        operator delete(v145);
        uint64_t v145 = v147;
      }
      while (v147);
    }
    v146 = *(void **)(i7 - 40);
    *(void *)(i7 - 40) = 0;
    if (v146) {
      operator delete(v146);
    }
  }
  uint64_t v149 = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = v143;
  v593 = (unsigned __int16 **)(a1 + 168);
  for (uint64_t i8 = *(void *)(a1 + 176); i8 != v149; i8 -= 48)
  {
    v151 = *(unsigned char **)(i8 - 24);
    if (v151)
    {
      do
      {
        if (v151[112]) {
          v151[112] = 0;
        }
        v153 = *(unsigned char **)v151;
        v154 = (void *)*((void *)v151 + 4);
        if (v154 != *((void **)v151 + 6)) {
          free(v154);
        }
        operator delete(v151);
        v151 = v153;
      }
      while (v153);
    }
    v152 = *(void **)(i8 - 40);
    *(void *)(i8 - 40) = 0;
    if (v152) {
      operator delete(v152);
    }
  }
  *(void *)(a1 + 176) = v149;
  int v594 = *(unsigned __int8 *)(v597 + 129);
  {
    md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty = 0;
    *(void *)algn_1E958E7E8 = 0;
    qword_1E958E7F0 = 0;
    __cxa_atexit((void (*)(void *))geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map, &md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, &dword_1A1780000);
  }
  v155 = *(void **)(a1 + 128);
  v156 = (void *)v155[3];
  v157 = (unsigned __int16 *)v155[21];
  v603 = (unsigned __int16 *)v155[22];
  for (i9 = v156; v157 != v603; ++v157)
  {
    int v158 = *v157;
    v159 = *(void **)(a1 + 392);
    v161 = (unsigned __int16 *)v159[14];
    v160 = (unsigned __int16 *)v159[15];
    if (v161 != v160)
    {
      while (*v161 != v158)
      {
        v161 += 56;
        if (v161 == v160)
        {
          v161 = (unsigned __int16 *)v159[15];
          break;
        }
      }
    }
    v163 = (unsigned __int16 *)v159[17];
    v162 = (unsigned __int16 *)v159[18];
    if (v163 != v162)
    {
      while (*v163 != v158)
      {
        v163 += 56;
        if (v163 == v162)
        {
          v163 = v162;
          break;
        }
      }
    }
    uint64_t v164 = *(void *)(a1 + 128);
    long long v619 = 0u;
    *(_OWORD *)v620 = 0u;
    LODWORD(v620[2]) = 1065353216;
    for (i10 = *(uint64_t **)(v164 + 144); i10; i10 = (uint64_t *)*i10)
    {
      BOOL v168 = *((unsigned __int16 *)i10 + 10) != v158 || *((unsigned char *)i10 + 18) == 2;
      if (!v168) {
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)&v619, *((_WORD *)i10 + 8), *((_WORD *)i10 + 8));
      }
    }
    v166 = (uint64_t *)v596[2];
    if (v166)
    {
      int8x8_t v167 = *(int8x8_t *)((char *)&v619 + 8);
      if (*((void *)&v619 + 1))
      {
LABEL_345:
        unint64_t v169 = *((unsigned __int16 *)v166 + 8);
        uint8x8_t v170 = (uint8x8_t)vcnt_s8(v167);
        v170.i16[0] = vaddlv_u8(v170);
        if (v170.u32[0] > 1uLL)
        {
          unint64_t v171 = *((unsigned __int16 *)v166 + 8);
          if (*(void *)&v167 <= v169) {
            unint64_t v171 = v169 % *(void *)&v167;
          }
        }
        else
        {
          unint64_t v171 = (v167.i32[0] - 1) & v169;
        }
        v172 = *(unsigned __int16 ***)(v619 + 8 * v171);
        if (v172)
        {
          v173 = *v172;
          if (*v172)
          {
            if (v170.u32[0] < 2uLL)
            {
              uint64_t v174 = *(void *)&v167 - 1;
              while (1)
              {
                uint64_t v176 = *((void *)v173 + 1);
                if (v176 == v169)
                {
                  if (v173[8] == v169) {
                    goto LABEL_365;
                  }
                }
                else if ((v176 & v174) != v171)
                {
                  goto LABEL_433;
                }
                v173 = *(unsigned __int16 **)v173;
                if (!v173) {
                  goto LABEL_433;
                }
              }
            }
            do
            {
              unint64_t v175 = *((void *)v173 + 1);
              if (v175 == v169)
              {
                if (v173[8] == v169)
                {
LABEL_365:
                  *(_OWORD *)v616 = 0u;
                  *(_OWORD *)v617 = 0u;
                  int v618 = 1065353216;
                  std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)v616, v169, v169);
                  unint64_t v177 = *((void *)&v619 + 1);
                  unint64_t v178 = *((void *)v173 + 1);
                  uint8x8_t v179 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v619 + 8));
                  v179.i16[0] = vaddlv_u8(v179);
                  if (v179.u32[0] >= 2uLL)
                  {
                    if (v178 >= *((void *)&v619 + 1)) {
                      v178 %= *((void *)&v619 + 1);
                    }
                  }
                  else
                  {
                    v178 &= *((void *)&v619 + 1) - 1;
                  }
                  v180 = *(unsigned __int16 **)v173;
                  v181 = *(unsigned __int16 **)(v619 + 8 * v178);
                  do
                  {
                    v182 = (void **)v181;
                    v181 = *(unsigned __int16 **)v181;
                  }
                  while (v181 != v173);
                  if (v182 == v620) {
                    goto LABEL_382;
                  }
                  unint64_t v183 = (unint64_t)v182[1];
                  if (v179.u32[0] > 1uLL)
                  {
                    if (v183 >= *((void *)&v619 + 1)) {
                      v183 %= *((void *)&v619 + 1);
                    }
                  }
                  else
                  {
                    v183 &= *((void *)&v619 + 1) - 1;
                  }
                  if (v183 == v178)
                  {
LABEL_384:
                    if (v180)
                    {
                      unint64_t v184 = *((void *)v180 + 1);
                      goto LABEL_386;
                    }
                  }
                  else
                  {
LABEL_382:
                    if (!v180) {
                      goto LABEL_383;
                    }
                    unint64_t v184 = *((void *)v180 + 1);
                    if (v179.u32[0] > 1uLL)
                    {
                      unint64_t v185 = *((void *)v180 + 1);
                      if (v184 >= *((void *)&v619 + 1)) {
                        unint64_t v185 = v184 % *((void *)&v619 + 1);
                      }
                    }
                    else
                    {
                      unint64_t v185 = v184 & (*((void *)&v619 + 1) - 1);
                    }
                    if (v185 != v178)
                    {
LABEL_383:
                      *(void *)(v619 + 8 * v178) = 0;
                      v180 = *(unsigned __int16 **)v173;
                      goto LABEL_384;
                    }
LABEL_386:
                    if (v179.u32[0] > 1uLL)
                    {
                      if (v184 >= v177) {
                        v184 %= v177;
                      }
                    }
                    else
                    {
                      v184 &= v177 - 1;
                    }
                    if (v184 != v178)
                    {
                      *(void *)(v619 + 8 * v184) = v182;
                      v180 = *(unsigned __int16 **)v173;
                    }
                  }
                  *v182 = v180;
                  --v620[1];
                  operator delete(v173);
                  __int16 v186 = *((_WORD *)v166 + 8);
                  *(_WORD *)buf = v158;
                  LOWORD(v613[0]) = v186;
                  LOBYTE(v610) = 0;
                  uint64_t v187 = v166[6];
                  if (v187)
                  {
                    (*(void (**)(void **__return_ptr))(*(void *)v187 + 48))(&v615);
                    v188 = v615;
                    if (v615)
                    {
                      uint64_t v189 = *((void *)v161 + 13);
                      v191 = *(unsigned __int16 **)(a1 + 280);
                      v190 = *(unsigned __int16 **)(a1 + 288);
                      if (v191 != v190)
                      {
                        while (*v191 != v158)
                        {
                          v191 += 16;
                          if (v191 == v190) {
                            goto LABEL_409;
                          }
                        }
                      }
                      if (v191 == v190)
                      {
LABEL_409:
                        v615 = 0;
                        (*(void (**)(void *))(*v188 + 8))(v188);
                      }
                      else
                      {
                        v615[8] = v161 + 28;
                        uint64_t v192 = *(void *)(a1 + 392);
                        v193 = *(unsigned __int16 **)(v192 + 112);
                        v194 = *(unsigned __int16 **)(v192 + 120);
                        if (v193 != v194)
                        {
                          do
                          {
                            if (*v193 == v158) {
                              goto LABEL_403;
                            }
                            v193 += 56;
                          }
                          while (v193 != v194);
                          v193 = v194;
                        }
LABEL_403:
                        v188[9] = v193 + 28;
                        v188[7] = v161 + 8;
                        v188[1] = v189;
                        std::unordered_set<unsigned short>::unordered_set((uint64_t)buf, (uint64_t)v616);
                        gdc::SelectionContext::setLayerDataTypes((uint64_t)v188, (uint64_t *)buf);
                        v195 = *(void **)&buf[16];
                        if (*(void *)&buf[16])
                        {
                          do
                          {
                            v196 = (void *)*v195;
                            operator delete(v195);
                            v195 = v196;
                          }
                          while (v196);
                        }
                        v197 = *(void **)buf;
                        *(void *)buf = 0;
                        if (v197) {
                          operator delete(v197);
                        }
                        v198 = v615;
                        v615 = 0;
                        v199 = operator new(0x18uLL);
                        v199[2] = v198;
                        uint64_t v201 = *((void *)v191 + 1);
                        v200 = v191 + 4;
                        void *v199 = v201;
                        v199[1] = v200;
                        *(void *)(v201 + 8) = v199;
                        void *v200 = v199;
                        ++v200[2];
                      }
                    }
                    else
                    {
                      v615 = 0;
                    }
                    __int16 v202 = *((_WORD *)v166 + 8);
                    *(_WORD *)buf = v158;
                    LOWORD(v613[0]) = v202;
                    LOBYTE(v610) = 1;
                    uint64_t v203 = v166[6];
                    if (v203)
                    {
                      (*(void (**)(void **__return_ptr))(*(void *)v203 + 48))(&v614);
                      v204 = v614;
                      if (v614)
                      {
                        uint64_t v205 = *((void *)v163 + 13);
                        v207 = *(unsigned __int16 **)(a1 + 304);
                        v206 = *(unsigned __int16 **)(a1 + 312);
                        if (v207 != v206)
                        {
                          while (*v207 != v158)
                          {
                            v207 += 16;
                            if (v207 == v206) {
                              goto LABEL_431;
                            }
                          }
                        }
                        if (v207 == v206)
                        {
LABEL_431:
                          v614 = 0;
                          (*(void (**)(void *))(*v204 + 8))(v204);
                          v218 = v617[0];
                          if (!v617[0]) {
                            goto LABEL_429;
                          }
                        }
                        else
                        {
                          v614[8] = v163 + 28;
                          uint64_t v208 = *(void *)(a1 + 392);
                          v209 = *(unsigned __int16 **)(v208 + 112);
                          v210 = *(unsigned __int16 **)(v208 + 120);
                          if (v209 != v210)
                          {
                            do
                            {
                              if (*v209 == v158) {
                                goto LABEL_421;
                              }
                              v209 += 56;
                            }
                            while (v209 != v210);
                            v209 = v210;
                          }
LABEL_421:
                          v204[9] = v209 + 28;
                          v204[7] = v163 + 8;
                          v204[1] = v205;
                          std::unordered_set<unsigned short>::unordered_set((uint64_t)buf, (uint64_t)v616);
                          gdc::SelectionContext::setLayerDataTypes((uint64_t)v204, (uint64_t *)buf);
                          v211 = *(void **)&buf[16];
                          if (*(void *)&buf[16])
                          {
                            do
                            {
                              v212 = (void *)*v211;
                              operator delete(v211);
                              v211 = v212;
                            }
                            while (v212);
                          }
                          v213 = *(void **)buf;
                          *(void *)buf = 0;
                          if (v213) {
                            operator delete(v213);
                          }
                          v214 = v614;
                          v614 = 0;
                          v215 = operator new(0x18uLL);
                          v215[2] = v214;
                          uint64_t v217 = *((void *)v207 + 1);
                          v216 = v207 + 4;
                          void *v215 = v217;
                          v215[1] = v216;
                          *(void *)(v217 + 8) = v215;
                          void *v216 = v215;
                          ++v216[2];
                          v218 = v617[0];
                          if (!v617[0])
                          {
LABEL_429:
                            v220 = v616[0];
                            v616[0] = 0;
                            if (v220) {
                              operator delete(v220);
                            }
                            break;
                          }
                        }
                      }
                      else
                      {
                        v614 = 0;
                        v218 = v617[0];
                        if (!v617[0]) {
                          goto LABEL_429;
                        }
                      }
                      do
                      {
                        v219 = (void *)*v218;
                        operator delete(v218);
                        v218 = v219;
                      }
                      while (v219);
                      goto LABEL_429;
                    }
                  }
                  std::__throw_bad_function_call[abi:nn180100]();
LABEL_977:
                  __break(1u);
                }
              }
              else
              {
                if (v175 >= *(void *)&v167) {
                  v175 %= *(void *)&v167;
                }
                if (v175 != v171) {
                  break;
                }
              }
              v173 = *(unsigned __int16 **)v173;
            }
            while (v173);
          }
        }
LABEL_433:
        while (1)
        {
          v166 = (uint64_t *)*v166;
          if (!v166) {
            break;
          }
          int8x8_t v167 = *(int8x8_t *)((char *)&v619 + 8);
          if (*((void *)&v619 + 1)) {
            goto LABEL_345;
          }
        }
      }
      else
      {
        do
          v166 = (uint64_t *)*v166;
        while (v166);
      }
    }
    md::PendingSceneLogic::updateSelectionContextMap(v158, *(unsigned __int16 **)(a1 + 280), *(unsigned __int16 **)(a1 + 288), (uint64_t)(v161 + 8), (uint64_t)(v161 + 28), *((void **)v161 + 13), (uint64_t)&v619);
    md::PendingSceneLogic::updateSelectionContextMap(v158, *(unsigned __int16 **)(a1 + 304), *(unsigned __int16 **)(a1 + 312), (uint64_t)(v163 + 8), (uint64_t)(v163 + 28), *((void **)v163 + 13), (uint64_t)&v619);
    v221 = v620[0];
    v156 = i9;
    if (v620[0])
    {
      do
      {
        v222 = (void *)*v221;
        operator delete(v221);
        v221 = v222;
      }
      while (v222);
    }
    v223 = (void *)v619;
    *(void *)&long long v619 = 0;
    if (v223) {
      operator delete(v223);
    }
  }
  double v224 = v31 * 1000.0;
  uint64_t v225 = *(void *)(a1 + 280);
  uint64_t v226 = *(void *)(a1 + 288);
  while (v225 != v226)
  {
    for (uint64_t i11 = *(void *)(v225 + 16); i11 != v225 + 8; uint64_t i11 = *(void *)(i11 + 8))
    {
      for (i12 = *(uint64_t ***)(*(void *)(i11 + 16) + 32); i12; i12 = (uint64_t **)*i12)
      {
        v229 = (unsigned __int16 *)v156[1];
        v230 = (unsigned __int16 *)v156[2];
        if (v229 != v230)
        {
          while (*((unsigned __int16 *)i12 + 8) != *v229)
          {
            v229 += 12;
            if (v229 == v230) {
              goto LABEL_448;
            }
          }
        }
        if (v229 != v230) {
          (*(void (**)(void, void, void))(**((void **)v229 + 2) + 24))(*((void *)v229 + 2), *(void *)(i11 + 16), 0);
        }
LABEL_448:
        ;
      }
    }
    v225 += 32;
  }
  uint64_t v231 = (uint64_t)v224;
  if ((v594 - 1) < 3)
  {
    uint64_t v232 = *(void *)(a1 + 304);
    uint64_t v233 = *(void *)(a1 + 312);
    while (v232 != v233)
    {
      for (uint64_t i13 = *(void *)(v232 + 16); i13 != v232 + 8; uint64_t i13 = *(void *)(i13 + 8))
      {
        for (i14 = *(uint64_t ***)(*(void *)(i13 + 16) + 32); i14; i14 = (uint64_t **)*i14)
        {
          v236 = (unsigned __int16 *)v156[1];
          v237 = (unsigned __int16 *)v156[2];
          if (v236 != v237)
          {
            while (*((unsigned __int16 *)i14 + 8) != *v236)
            {
              v236 += 12;
              if (v236 == v237) {
                goto LABEL_464;
              }
            }
          }
          if (v236 != v237) {
            (*(void (**)(void, void, void))(**((void **)v236 + 2) + 24))(*((void *)v236 + 2), *(void *)(i13 + 16), 0);
          }
LABEL_464:
          ;
        }
      }
      v232 += 32;
    }
  }
  gdc::LayerDataManager::preloadLayerDataKeys(*(uint64_t **)(v156[8] + 40), v593);
  unsigned int v591 = v594 - 1;
  if (*(uint64_t *)(a1 + 232) < 1)
  {
    gdc::LayerDataManager::createDataRequests(v156, (uint64_t *)(a1 + 280), v593, (uint64_t)v224);
    v257 = v596;
    if ((v594 & 0xFE) == 2) {
      gdc::LayerDataManager::createDataRequests(v156, (uint64_t *)(a1 + 304), (unsigned __int16 **)&md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, (uint64_t)v224);
    }
    int v242 = 1;
  }
  else
  {
    *(void *)(*(void *)(a1 + 216) + 64) = *(void *)(a1 + 216);
    uint64_t v238 = *(void *)(a1 + 128);
    v239 = *(unsigned __int16 **)(v238 + 168);
    v240 = *(unsigned __int16 **)(v238 + 176);
    if (v239 == v240)
    {
      geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::purge(*(void **)(a1 + 216));
      int v242 = 1;
      v243 = (unsigned __int16 **)(a1 + 192);
    }
    else
    {
      double v241 = 0.0;
      LOBYTE(v242) = 1;
      v243 = (unsigned __int16 **)(a1 + 192);
      do
      {
        uint64_t v244 = *(void *)(a1 + 392);
        v245 = *(unsigned __int16 **)(v244 + 112);
        v246 = *(unsigned __int16 **)(v244 + 120);
        if (v245 != v246)
        {
          while (*v245 != *v239)
          {
            v245 += 56;
            if (v245 == v246)
            {
              v245 = v246;
              break;
            }
          }
        }
        v247 = (uint64_t *)*((void *)v245 + 13);
        uint64_t v249 = *v247;
        v248 = (void *)v247[1];
        v616[0] = (void *)v249;
        v617[0] = v248;
        if ((void *)v249 == v248)
        {
LABEL_486:
          v255 = (_DWORD *)v249;
        }
        else
        {
          int v250 = *(unsigned __int8 *)(v249 + 113);
          int v251 = *(_DWORD *)(v249 + 116);
          int v252 = *(_DWORD *)(v249 + 120);
          uint64_t v253 = v249 + 144;
          int v254 = *(unsigned __int8 *)(v249 + 112);
          while ((void *)v253 != v248)
          {
            v255 = (_DWORD *)v253;
            v249 += 144;
            if (*(unsigned __int8 *)(v253 + 112) != v254
              || *(unsigned __int8 *)(v253 + 113) != v250
              || *(_DWORD *)(v253 + 116) != v251)
            {
              goto LABEL_486;
            }
            v253 += 144;
            if (v255[30] != v252) {
              goto LABEL_487;
            }
          }
          v255 = v248;
        }
LABEL_487:
        v616[1] = v255;
        v613[1] = (unsigned __int8 *)v248;
        v613[2] = (unsigned __int8 *)v248;
        v613[0] = (unsigned __int8 *)v248;
        md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, (unsigned __int8 **)v616, v613, v231, (void *)(a1 + 192));
        int v242 = v242 & (buf[0] != 0);
        double v256 = fmax(v241, *(double *)&buf[8]);
        if (*(_DWORD *)&buf[20]) {
          double v241 = v256;
        }
        ++v239;
      }
      while (v239 != v240);
      geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::purge(*(void **)(a1 + 216));
      if (v241 > 0.0) {
        (*(void (**)(void, void, double))(**(void **)(a1 + 264) + 24))(*(void *)(a1 + 264), 0, v241 * 0.001);
      }
    }
    gdc::LayerDataManager::createDataRequests(v156, v243, v593, v231);
    if (v594 == 3)
    {
      gdc::LayerDataManager::createDataRequests(v156, (uint64_t *)(a1 + 304), (unsigned __int16 **)&md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, v231);
    }
    else if (v594 == 2)
    {
      uint64_t v258 = *(void *)(a1 + 192);
      for (uint64_t i15 = *(void *)(a1 + 200); i15 != v258; i15 -= 48)
      {
        v260 = *(unsigned char **)(i15 - 24);
        if (v260)
        {
          do
          {
            if (v260[112]) {
              v260[112] = 0;
            }
            v262 = *(unsigned char **)v260;
            v263 = (void *)*((void *)v260 + 4);
            if (v263 != *((void **)v260 + 6)) {
              free(v263);
            }
            operator delete(v260);
            v260 = v262;
          }
          while (v262);
        }
        v261 = *(void **)(i15 - 40);
        *(void *)(i15 - 40) = 0;
        if (v261) {
          operator delete(v261);
        }
      }
      *(void *)(a1 + 200) = v258;
      uint64_t v264 = *(void *)(a1 + 392);
      uint64_t v265 = *(void *)(v264 + 112);
      uint64_t v266 = *(void *)(v264 + 120);
      if (v265 == v266)
      {
        v267 = (unsigned __int16 **)(a1 + 192);
      }
      else
      {
        v267 = (unsigned __int16 **)(a1 + 192);
        while (*(_WORD *)v265)
        {
          v265 += 112;
          if (v265 == v266)
          {
            uint64_t v265 = v266;
            break;
          }
        }
      }
      v268 = *(uint64_t **)(v265 + 104);
      uint64_t v270 = *v268;
      v269 = (unsigned __int8 *)v268[1];
      v610 = (unsigned __int8 *)v270;
      v612 = v269;
      if ((unsigned __int8 *)v270 == v269)
      {
LABEL_526:
        v276 = (unsigned __int8 *)v270;
      }
      else
      {
        int v271 = *(unsigned __int8 *)(v270 + 113);
        int v272 = *(_DWORD *)(v270 + 116);
        int v273 = *(_DWORD *)(v270 + 120);
        uint64_t v274 = v270 + 144;
        int v275 = *(unsigned __int8 *)(v270 + 112);
        while ((unsigned __int8 *)v274 != v269)
        {
          v276 = (unsigned __int8 *)v274;
          v270 += 144;
          if (*(unsigned __int8 *)(v274 + 112) != v275
            || *(unsigned __int8 *)(v274 + 113) != v271
            || *(_DWORD *)(v274 + 116) != v272)
          {
            goto LABEL_526;
          }
          v274 += 144;
          if (*((_DWORD *)v276 + 30) != v273) {
            goto LABEL_527;
          }
        }
        v276 = v269;
      }
LABEL_527:
      v611 = v276;
      v608 = v269;
      v609 = v269;
      v607 = v269;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v277 = *(void *)(a1 + 392);
      uint64_t v278 = *(void *)(v277 + 112);
      uint64_t v279 = *(void *)(v277 + 120);
      if (v278 != v279)
      {
        while (*(_WORD *)v278 != 1)
        {
          v278 += 112;
          if (v278 == v279)
          {
            uint64_t v278 = v279;
            break;
          }
        }
      }
      v280 = *(uint64_t **)(v278 + 104);
      uint64_t v282 = *v280;
      v281 = (unsigned __int8 *)v280[1];
      v610 = (unsigned __int8 *)v282;
      v612 = v281;
      if ((unsigned __int8 *)v282 == v281)
      {
LABEL_539:
        v288 = (unsigned __int8 *)v282;
      }
      else
      {
        int v283 = *(unsigned __int8 *)(v282 + 113);
        int v284 = *(_DWORD *)(v282 + 116);
        int v285 = *(_DWORD *)(v282 + 120);
        uint64_t v286 = v282 + 144;
        int v287 = *(unsigned __int8 *)(v282 + 112);
        while ((unsigned __int8 *)v286 != v281)
        {
          v288 = (unsigned __int8 *)v286;
          v282 += 144;
          if (*(unsigned __int8 *)(v286 + 112) != v287
            || *(unsigned __int8 *)(v286 + 113) != v283
            || *(_DWORD *)(v286 + 116) != v284)
          {
            goto LABEL_539;
          }
          v286 += 144;
          if (*((_DWORD *)v288 + 30) != v285) {
            goto LABEL_540;
          }
        }
        v288 = v281;
      }
LABEL_540:
      v611 = v288;
      v608 = v281;
      v609 = v281;
      v607 = v281;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v289 = *(void *)(a1 + 392);
      uint64_t v290 = *(void *)(v289 + 112);
      uint64_t v291 = *(void *)(v289 + 120);
      if (v290 != v291)
      {
        while (*(_WORD *)v290 != 2)
        {
          v290 += 112;
          if (v290 == v291)
          {
            uint64_t v290 = v291;
            break;
          }
        }
      }
      v292 = *(uint64_t **)(v290 + 104);
      uint64_t v294 = *v292;
      v293 = (unsigned __int8 *)v292[1];
      v610 = (unsigned __int8 *)v294;
      v612 = v293;
      if ((unsigned __int8 *)v294 == v293)
      {
LABEL_552:
        v300 = (unsigned __int8 *)v294;
      }
      else
      {
        int v295 = *(unsigned __int8 *)(v294 + 113);
        int v296 = *(_DWORD *)(v294 + 116);
        int v297 = *(_DWORD *)(v294 + 120);
        uint64_t v298 = v294 + 144;
        int v299 = *(unsigned __int8 *)(v294 + 112);
        while ((unsigned __int8 *)v298 != v293)
        {
          v300 = (unsigned __int8 *)v298;
          v294 += 144;
          if (*(unsigned __int8 *)(v298 + 112) != v299
            || *(unsigned __int8 *)(v298 + 113) != v295
            || *(_DWORD *)(v298 + 116) != v296)
          {
            goto LABEL_552;
          }
          v298 += 144;
          if (*((_DWORD *)v300 + 30) != v297) {
            goto LABEL_553;
          }
        }
        v300 = v293;
      }
LABEL_553:
      v611 = v300;
      v608 = v293;
      v609 = v293;
      v607 = v293;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v301 = *(void *)(a1 + 392);
      uint64_t v302 = *(void *)(v301 + 112);
      uint64_t v303 = *(void *)(v301 + 120);
      if (v302 != v303)
      {
        while (*(_WORD *)v302 != 3)
        {
          v302 += 112;
          if (v302 == v303)
          {
            uint64_t v302 = v303;
            break;
          }
        }
      }
      v304 = *(uint64_t **)(v302 + 104);
      uint64_t v306 = *v304;
      v305 = (unsigned __int8 *)v304[1];
      v610 = (unsigned __int8 *)v306;
      v612 = v305;
      if ((unsigned __int8 *)v306 == v305)
      {
LABEL_565:
        v312 = (unsigned __int8 *)v306;
      }
      else
      {
        int v307 = *(unsigned __int8 *)(v306 + 113);
        int v308 = *(_DWORD *)(v306 + 116);
        int v309 = *(_DWORD *)(v306 + 120);
        uint64_t v310 = v306 + 144;
        int v311 = *(unsigned __int8 *)(v306 + 112);
        while ((unsigned __int8 *)v310 != v305)
        {
          v312 = (unsigned __int8 *)v310;
          v306 += 144;
          if (*(unsigned __int8 *)(v310 + 112) != v311
            || *(unsigned __int8 *)(v310 + 113) != v307
            || *(_DWORD *)(v310 + 116) != v308)
          {
            goto LABEL_565;
          }
          v310 += 144;
          if (*((_DWORD *)v312 + 30) != v309) {
            goto LABEL_566;
          }
        }
        v312 = v305;
      }
LABEL_566:
      v611 = v312;
      v608 = v305;
      v609 = v305;
      v607 = v305;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v313 = *(void *)(a1 + 392);
      uint64_t v314 = *(void *)(v313 + 112);
      uint64_t v315 = *(void *)(v313 + 120);
      if (v314 != v315)
      {
        while (*(_WORD *)v314 != 4)
        {
          v314 += 112;
          if (v314 == v315)
          {
            uint64_t v314 = v315;
            break;
          }
        }
      }
      v316 = *(uint64_t **)(v314 + 104);
      uint64_t v318 = *v316;
      v317 = (unsigned __int8 *)v316[1];
      v610 = (unsigned __int8 *)v318;
      v612 = v317;
      if ((unsigned __int8 *)v318 == v317)
      {
LABEL_578:
        v324 = (unsigned __int8 *)v318;
      }
      else
      {
        int v319 = *(unsigned __int8 *)(v318 + 113);
        int v320 = *(_DWORD *)(v318 + 116);
        int v321 = *(_DWORD *)(v318 + 120);
        uint64_t v322 = v318 + 144;
        int v323 = *(unsigned __int8 *)(v318 + 112);
        while ((unsigned __int8 *)v322 != v317)
        {
          v324 = (unsigned __int8 *)v322;
          v318 += 144;
          if (*(unsigned __int8 *)(v322 + 112) != v323
            || *(unsigned __int8 *)(v322 + 113) != v319
            || *(_DWORD *)(v322 + 116) != v320)
          {
            goto LABEL_578;
          }
          v322 += 144;
          if (*((_DWORD *)v324 + 30) != v321) {
            goto LABEL_579;
          }
        }
        v324 = v317;
      }
LABEL_579:
      v611 = v324;
      v608 = v317;
      v609 = v317;
      v607 = v317;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v325 = *(void *)(a1 + 392);
      uint64_t v326 = *(void *)(v325 + 112);
      uint64_t v327 = *(void *)(v325 + 120);
      if (v326 != v327)
      {
        while (*(_WORD *)v326 != 5)
        {
          v326 += 112;
          if (v326 == v327)
          {
            uint64_t v326 = v327;
            break;
          }
        }
      }
      v328 = *(uint64_t **)(v326 + 104);
      uint64_t v330 = *v328;
      v329 = (unsigned __int8 *)v328[1];
      v610 = (unsigned __int8 *)v330;
      v612 = v329;
      if ((unsigned __int8 *)v330 == v329)
      {
LABEL_591:
        v336 = (unsigned __int8 *)v330;
      }
      else
      {
        int v331 = *(unsigned __int8 *)(v330 + 113);
        int v332 = *(_DWORD *)(v330 + 116);
        int v333 = *(_DWORD *)(v330 + 120);
        uint64_t v334 = v330 + 144;
        int v335 = *(unsigned __int8 *)(v330 + 112);
        while ((unsigned __int8 *)v334 != v329)
        {
          v336 = (unsigned __int8 *)v334;
          v330 += 144;
          if (*(unsigned __int8 *)(v334 + 112) != v335
            || *(unsigned __int8 *)(v334 + 113) != v331
            || *(_DWORD *)(v334 + 116) != v332)
          {
            goto LABEL_591;
          }
          v334 += 144;
          if (*((_DWORD *)v336 + 30) != v333) {
            goto LABEL_592;
          }
        }
        v336 = v329;
      }
LABEL_592:
      v611 = v336;
      v608 = v329;
      v609 = v329;
      v607 = v329;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v337 = *(void *)(a1 + 392);
      uint64_t v338 = *(void *)(v337 + 112);
      uint64_t v339 = *(void *)(v337 + 120);
      if (v338 != v339)
      {
        while (*(_WORD *)v338 != 6)
        {
          v338 += 112;
          if (v338 == v339)
          {
            uint64_t v338 = v339;
            break;
          }
        }
      }
      v340 = *(uint64_t **)(v338 + 104);
      uint64_t v342 = *v340;
      v341 = (unsigned __int8 *)v340[1];
      v610 = (unsigned __int8 *)v342;
      v612 = v341;
      if ((unsigned __int8 *)v342 == v341)
      {
LABEL_604:
        v348 = (unsigned __int8 *)v342;
      }
      else
      {
        int v343 = *(unsigned __int8 *)(v342 + 113);
        int v344 = *(_DWORD *)(v342 + 116);
        int v345 = *(_DWORD *)(v342 + 120);
        uint64_t v346 = v342 + 144;
        int v347 = *(unsigned __int8 *)(v342 + 112);
        while ((unsigned __int8 *)v346 != v341)
        {
          v348 = (unsigned __int8 *)v346;
          v342 += 144;
          if (*(unsigned __int8 *)(v346 + 112) != v347
            || *(unsigned __int8 *)(v346 + 113) != v343
            || *(_DWORD *)(v346 + 116) != v344)
          {
            goto LABEL_604;
          }
          v346 += 144;
          if (*((_DWORD *)v348 + 30) != v345) {
            goto LABEL_605;
          }
        }
        v348 = v341;
      }
LABEL_605:
      v611 = v348;
      v608 = v341;
      v609 = v341;
      v607 = v341;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v349 = *(void *)(a1 + 392);
      uint64_t v350 = *(void *)(v349 + 112);
      uint64_t v351 = *(void *)(v349 + 120);
      if (v350 != v351)
      {
        while (*(_WORD *)v350 != 7)
        {
          v350 += 112;
          if (v350 == v351)
          {
            uint64_t v350 = v351;
            break;
          }
        }
      }
      v352 = *(uint64_t **)(v350 + 104);
      uint64_t v354 = *v352;
      v353 = (unsigned __int8 *)v352[1];
      v610 = (unsigned __int8 *)v354;
      v612 = v353;
      if ((unsigned __int8 *)v354 == v353)
      {
LABEL_617:
        v360 = (unsigned __int8 *)v354;
      }
      else
      {
        int v355 = *(unsigned __int8 *)(v354 + 113);
        int v356 = *(_DWORD *)(v354 + 116);
        int v357 = *(_DWORD *)(v354 + 120);
        uint64_t v358 = v354 + 144;
        int v359 = *(unsigned __int8 *)(v354 + 112);
        while ((unsigned __int8 *)v358 != v353)
        {
          v360 = (unsigned __int8 *)v358;
          v354 += 144;
          if (*(unsigned __int8 *)(v358 + 112) != v359
            || *(unsigned __int8 *)(v358 + 113) != v355
            || *(_DWORD *)(v358 + 116) != v356)
          {
            goto LABEL_617;
          }
          v358 += 144;
          if (*((_DWORD *)v360 + 30) != v357) {
            goto LABEL_618;
          }
        }
        v360 = v353;
      }
LABEL_618:
      v611 = v360;
      v608 = v353;
      v609 = v353;
      v607 = v353;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      uint64_t v361 = *(void *)(a1 + 392);
      uint64_t v362 = *(void *)(v361 + 112);
      uint64_t v363 = *(void *)(v361 + 120);
      if (v362 != v363)
      {
        while (*(_WORD *)v362 != 8)
        {
          v362 += 112;
          if (v362 == v363)
          {
            uint64_t v362 = v363;
            break;
          }
        }
      }
      v364 = *(uint64_t **)(v362 + 104);
      uint64_t v366 = *v364;
      v365 = (unsigned __int8 *)v364[1];
      v610 = (unsigned __int8 *)v366;
      v612 = v365;
      if ((unsigned __int8 *)v366 == v365)
      {
LABEL_630:
        v372 = (unsigned __int8 *)v366;
      }
      else
      {
        int v367 = *(unsigned __int8 *)(v366 + 113);
        int v368 = *(_DWORD *)(v366 + 116);
        int v369 = *(_DWORD *)(v366 + 120);
        uint64_t v370 = v366 + 144;
        int v371 = *(unsigned __int8 *)(v366 + 112);
        while ((unsigned __int8 *)v370 != v365)
        {
          v372 = (unsigned __int8 *)v370;
          v366 += 144;
          if (*(unsigned __int8 *)(v370 + 112) != v371
            || *(unsigned __int8 *)(v370 + 113) != v367
            || *(_DWORD *)(v370 + 116) != v368)
          {
            goto LABEL_630;
          }
          v370 += 144;
          if (*((_DWORD *)v372 + 30) != v369) {
            goto LABEL_631;
          }
        }
        v372 = v365;
      }
LABEL_631:
      v611 = v372;
      v608 = v365;
      v609 = v365;
      v607 = v365;
      md::PendingSceneLogic::extractFullyImplicatedData((uint64_t)buf, a1, &v610, &v607, v231, v267);
      gdc::LayerDataManager::createDataRequests(v156, v267, (unsigned __int16 **)&md::PendingSceneLogic::requestData(md::ResolvedTileSelectionContext const&,md::CameraContext const*,md::PendingSceneContext &,long long,md::NeighborMode)::kEmpty, v231);
    }
    v257 = v596;
  }
  uint64_t v373 = *(void *)(a1 + 240);
  char v595 = v242;
  if (v373 <= 0)
  {
    if (!*(void *)(a1 + 376)) {
      goto LABEL_695;
    }
    v382 = (void *)(a1 + 376);
    v387 = *(void **)(a1 + 368);
    if (v387)
    {
      do
      {
        v388 = (void *)*v387;
        operator delete(v387);
        v387 = v388;
      }
      while (v388);
    }
    *(void *)(a1 + 368) = 0;
    uint64_t v389 = *(void *)(a1 + 360);
    if (v389)
    {
      for (uint64_t i16 = 0; i16 != v389; ++i16)
        *(void *)(*(void *)(a1 + 352) + 8 * i16) = 0;
    }
    goto LABEL_694;
  }
  uint64_t v374 = *(void *)(a1 + 256);
  if (v374 == 0x7FFFFFFFFFFFFFFFLL && *(unsigned __int8 *)(a1 + 248) == v242)
  {
    md::PendingSceneLogic::_prefetchData(a1, v257, v231);
    goto LABEL_695;
  }
  uint64_t v375 = *(void *)(*(void *)(a1 + 128) + 24);
  if (*(void *)(v599 + 5584)) {
    uint64_t v376 = *(void *)(v599 + 5584);
  }
  else {
    uint64_t v376 = v599;
  }
  uint64_t v378 = *(void *)(v375 + 8);
  uint64_t v377 = *(void *)(v375 + 16);
  if (v378 != v377)
  {
    uint64_t v379 = v378 + 24;
    do
    {
      uint64_t v380 = *(void *)(*(void *)(v379 - 16) + 64);
      if (v380) {
        BOOL v381 = 1;
      }
      else {
        BOOL v381 = v379 == v377;
      }
      v379 += 24;
    }
    while (!v381);
    if (v380)
    {
      (*(void (**)(void, void, double))(**(void **)(a1 + 272) + 24))(*(void *)(a1 + 272), 0, (double)v373 * 0.001);
      *(void *)(a1 + 256) = v231;
      if (!*(void *)(a1 + 376)) {
        goto LABEL_695;
      }
      v382 = (void *)(a1 + 376);
      v383 = *(void **)(a1 + 368);
      if (v383)
      {
        do
        {
          v384 = (void *)*v383;
          operator delete(v383);
          v383 = v384;
        }
        while (v384);
      }
      *(void *)(a1 + 368) = 0;
      uint64_t v385 = *(void *)(a1 + 360);
      if (v385)
      {
        for (uint64_t i17 = 0; i17 != v385; ++i17)
          *(void *)(*(void *)(a1 + 352) + 8 * i17) = 0;
      }
LABEL_694:
      void *v382 = 0;
      goto LABEL_695;
    }
  }
  if ((v242 & 1) == 0)
  {
    (*(void (**)(void, void, double))(**(void **)(a1 + 272) + 24))(*(void *)(a1 + 272), 0, (double)v373 * 0.001);
    *(void *)(a1 + 256) = v231;
    if (!*(void *)(a1 + 376)) {
      goto LABEL_695;
    }
    v382 = (void *)(a1 + 376);
    v411 = *(void **)(a1 + 368);
    if (v411)
    {
      do
      {
        v412 = (void *)*v411;
        operator delete(v411);
        v411 = v412;
      }
      while (v412);
    }
    *(void *)(a1 + 368) = 0;
    uint64_t v413 = *(void *)(a1 + 360);
    if (v413)
    {
      for (uint64_t i18 = 0; i18 != v413; ++i18)
        *(void *)(*(void *)(a1 + 352) + 8 * i18) = 0;
    }
    goto LABEL_694;
  }
  if (v231 - v373 >= v374)
  {
    (*(void (**)(void))(**(void **)(a1 + 272) + 40))(*(void *)(a1 + 272));
    *(void *)(a1 + 256) = 0x7FFFFFFFFFFFFFFFLL;
    unsigned int v391 = vcvtms_s32_f32(*(float *)(v599 + 3076));
    if (v391 <= 1) {
      char v392 = 1;
    }
    else {
      char v392 = v391;
    }
    double v393 = (double)(1 << v392);
    unsigned int v394 = *(_DWORD *)(a1 + 252);
    double v395 = (double)v394;
    double v396 = floor(v393 - *(double *)(v376 + 504) * v393) - (double)v394;
    int v397 = (1 << v392) - 1;
    if (((int)v396 & ~((int)v396 >> 31)) >= v397) {
      int v398 = (1 << v392) - 1;
    }
    else {
      int v398 = (int)v396 & ~((int)v396 >> 31);
    }
    int v399 = 2 * v394;
    signed int v400 = v398 + 2 * v394;
    if (v400 <= v398) {
      signed int v400 = v398;
    }
    if (v400 >= v397) {
      int v401 = (1 << v392) - 1;
    }
    else {
      int v401 = v400;
    }
    v402 = *(void **)(a1 + 392);
    uint64_t v404 = v402[14];
    uint64_t v403 = v402[15];
    if (v404 != v403)
    {
      while (*(_WORD *)v404)
      {
        v404 += 112;
        if (v404 == v403)
        {
          uint64_t v404 = v402[15];
          break;
        }
      }
    }
    uint64_t v405 = v402[20];
    uint64_t v406 = v402[21];
    if (v405 != v406)
    {
      while (*(_WORD *)v405)
      {
        v405 += 112;
        if (v405 == v406)
        {
          uint64_t v405 = v406;
          break;
        }
      }
    }
    double v407 = *(double *)(v376 + 496);
    uint64_t v408 = a1 + 352;
    if (a1 + 352 != v405 + 64)
    {
      *(_DWORD *)(a1 + 384) = *(_DWORD *)(v405 + 96);
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((void *)(a1 + 352), *(uint64_t **)(v405 + 80));
    }
    int v409 = (int)(floor(v407 * v393) - v395);
    int v410 = v399 + v409;
    if (v399 + v409 >= v409 && v398 <= v401)
    {
      int v589 = v401 + 1;
      do
      {
        int v590 = v398;
        do
        {
          buf[0] = -1;
          buf[1] = v392;
          *(_DWORD *)&buf[4] = v590;
          *(_DWORD *)&buf[8] = v409;
          if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((void *)(v404 + 64), buf))std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile>(v408, buf, (uint64_t)buf); {
          ++v590;
          }
        }
        while (v589 != v590);
        BOOL v168 = v409++ == v410;
      }
      while (!v168);
    }
    a1 = v600;
    md::PendingSceneLogic::_prefetchData(v600, v596, v231);
    v156 = i9;
  }
LABEL_695:
  uint64_t v415 = *(void *)(a1 + 128);
  v416 = *(unsigned __int16 **)(v415 + 168);
  v598 = *(unsigned __int16 **)(v415 + 176);
  if (v416 != v598)
  {
    while (1)
    {
      v417 = *(unsigned __int16 **)(v600 + 280);
      v418 = *(unsigned __int16 **)(v600 + 288);
      v601 = v416;
      if (v417 != v418)
      {
        int v419 = *v416;
        while (v419 != *v417)
        {
          v417 += 16;
          if (v417 == v418) {
            goto LABEL_697;
          }
        }
      }
      if (v417 != v418)
      {
        uint64_t v420 = *((void *)v417 + 2);
        v602 = v417 + 4;
        if ((unsigned __int16 *)v420 != v417 + 4) {
          break;
        }
      }
LABEL_697:
      v416 = v601 + 1;
      if (v601 + 1 == v598) {
        goto LABEL_766;
      }
    }
    while (1)
    {
      uint64_t v604 = v420;
      uint64_t v605 = *(void *)(v420 + 16);
      v421 = *(uint64_t ***)(v605 + 32);
      if (v421) {
        break;
      }
LABEL_706:
      uint64_t v420 = *(void *)(v604 + 8);
      if ((unsigned __int16 *)v420 == v602) {
        goto LABEL_697;
      }
    }
    while (1)
    {
      v422 = (unsigned __int16 *)v156[1];
      v423 = (unsigned __int16 *)v156[2];
      if (v422 != v423)
      {
        while (*((unsigned __int16 *)v421 + 8) != *v422)
        {
          v422 += 12;
          if (v422 == v423) {
            goto LABEL_709;
          }
        }
      }
      if (v422 != v423)
      {
        v424 = (void *)*((void *)v422 + 1);
        v425 = (unsigned __int8 *)v424[31];
        uint64_t v426 = v424[32];
        if (v425 != (unsigned __int8 *)v426) {
          break;
        }
      }
LABEL_709:
      v421 = (uint64_t **)*v421;
      v156 = i9;
      if (!v421) {
        goto LABEL_706;
      }
    }
    v427 = (void *)(*(void *)(v605 + 8) + 48);
    while (1)
    {
      while (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v427, v425))
      {
        v425 += 208;
        if (v425 == (unsigned __int8 *)v426) {
          goto LABEL_709;
        }
      }
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      v428 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str((std::string *)buf, (unsigned __int16 *)v425);
        if (buf[23] >= 0) {
          v429 = buf;
        }
        else {
          v429 = *(unsigned char **)buf;
        }
        gdc::ResourceKey::keysInt32Str((std::string *)&v619, v425 + 112);
        v430 = &v619;
        if (SHIBYTE(v620[0]) < 0) {
          v430 = (long long *)v619;
        }
        *(_DWORD *)v627 = 136315394;
        v628 = v429;
        __int16 v629 = 2080;
        v630 = v430;
        _os_log_impl(&dword_1A1780000, v428, OS_LOG_TYPE_DEBUG, "cleaning up extended key: %s (resource:%s) ", v627, 0x16u);
        if (SHIBYTE(v620[0]) < 0)
        {
          operator delete((void *)v619);
          if ((buf[23] & 0x80000000) == 0) {
            goto LABEL_731;
          }
        }
        else if ((buf[23] & 0x80000000) == 0)
        {
          goto LABEL_731;
        }
        operator delete(*(void **)buf);
      }
LABEL_731:
      v431 = std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(v424[34] + 8, v425 + 112, (uint64_t)(v425 + 112));
      --v431[15];
      uint64_t v432 = (uint64_t)(v425 + 208);
      v433 = (unsigned __int8 *)v424[32];
      if (v425 + 208 != v433)
      {
        uint64_t v434 = 0;
        uint64_t v426 = (uint64_t)v425;
        while (1)
        {
          gdc::LayerDataRequestKey::operator=(v426, v432);
          *(void *)(v426 + 112) = *(void *)(v432 + 112);
          v435 = *(void **)(v426 + 120);
          if (v435 != *(void **)(v426 + 136)) {
            free(v435);
          }
          v436 = (unsigned char *)(v426 + 152);
          *(void *)(v426 + 136) = v426 + 152;
          v437 = *(char **)(v432 + 120);
          if (v437 == *(char **)(v432 + 136))
          {
            *(void *)(v426 + 120) = v436;
            v438 = *(char **)(v432 + 128);
            unint64_t v439 = v438 - v437;
            *(void *)(v426 + 128) = &v436[v438 - v437];
            if (v438 != v437)
            {
              if (v439 >= 8 && (unint64_t)(&v425[208 * v434 + 152] - (unsigned __int8 *)v437) >= 0x20)
              {
                if (v439 < 0x20)
                {
                  unint64_t v440 = 0;
                  goto LABEL_747;
                }
                uint64_t v441 = 0;
                unint64_t v440 = v439 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  uint64_t v442 = v426 + v441;
                  long long v443 = *(_OWORD *)&v437[v441 + 16];
                  *(_OWORD *)(v442 + 152) = *(_OWORD *)&v437[v441];
                  *(_OWORD *)(v442 + 168) = v443;
                  v441 += 32;
                }
                while (v440 != v441);
                if (v439 == v440) {
                  goto LABEL_734;
                }
                if ((v439 & 0x18) != 0)
                {
LABEL_747:
                  unint64_t v444 = v439 & 0xFFFFFFFFFFFFFFF8;
                  v436 += v439 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    *(void *)(v426 + v440 + 152) = *(void *)&v437[v440];
                    v440 += 8;
                  }
                  while (v444 != v440);
                  if (v439 == v444) {
                    goto LABEL_734;
                  }
                  v437 += v444;
                }
                else
                {
                  v437 += v440;
                  v436 += v440;
                }
              }
              do
              {
                char v445 = *v437++;
                *v436++ = v445;
              }
              while (v437 != v438);
            }
          }
          else
          {
            *(void *)(v426 + 120) = v437;
            *(void *)(v426 + 128) = *(void *)(v432 + 128);
            *(_OWORD *)(v432 + 120) = 0u;
            *(_OWORD *)(v432 + 136) = 0u;
          }
LABEL_734:
          *(void *)(v426 + 144) = *(void *)(v432 + 144);
          *(void *)(v426 + 184) = *(void *)(v432 + 184);
          *(_OWORD *)(v426 + 192) = *(_OWORD *)(v432 + 192);
          v432 += 208;
          v426 += 208;
          ++v434;
          if ((unsigned __int8 *)v432 == v433)
          {
            uint64_t v432 = v424[32];
            goto LABEL_757;
          }
        }
      }
      uint64_t v426 = (uint64_t)v425;
LABEL_757:
      while (v432 != v426)
      {
        v446 = *(void **)(v432 - 88);
        if (v446 != *(void **)(v432 - 72)) {
          free(v446);
        }
        if (*(unsigned char *)(v432 - 112)) {
          *(unsigned char *)(v432 - 112) = 0;
        }
        v447 = *(void **)(v432 - 192);
        if (v447 != *(void **)(v432 - 176)) {
          free(v447);
        }
        v432 -= 208;
      }
      v424[32] = v426;
      if (v425 == (unsigned __int8 *)v426) {
        goto LABEL_709;
      }
    }
  }
LABEL_766:
  uint64_t v448 = *(void *)(v600 + 280);
  uint64_t v449 = *(void *)(v600 + 288);
  if (v448 != v449)
  {
    do
    {
      for (uint64_t i19 = *(void *)(v448 + 16); i19 != v448 + 8; uint64_t i19 = *(void *)(i19 + 8))
      {
        for (i20 = *(uint64_t ***)(*(void *)(i19 + 16) + 32); i20; i20 = (uint64_t **)*i20)
        {
          v454 = (unsigned __int16 *)v156[1];
          v455 = (unsigned __int16 *)v156[2];
          if (v454 != v455)
          {
            while (*((unsigned __int16 *)i20 + 8) != *v454)
            {
              v454 += 12;
              if (v454 == v455) {
                goto LABEL_775;
              }
            }
          }
          if (v454 != v455) {
            (*(void (**)(void, void))(**((void **)v454 + 1) + 40))(*((void *)v454 + 1), *(void *)(*(void *)(i19 + 16) + 8));
          }
LABEL_775:
          ;
        }
      }
      v448 += 32;
    }
    while (v448 != v449);
    uint64_t v565 = *(void *)(v600 + 280);
    uint64_t v566 = *(void *)(v600 + 288);
    while (v565 != v566)
    {
      for (uint64_t i21 = *(void *)(v565 + 16); i21 != v565 + 8; uint64_t i21 = *(void *)(i21 + 8))
      {
        for (i22 = *(uint64_t ***)(*(void *)(i21 + 16) + 32); i22; i22 = (uint64_t **)*i22)
        {
          v569 = (unsigned __int16 *)v156[1];
          v570 = (unsigned __int16 *)v156[2];
          if (v569 != v570)
          {
            while (*((unsigned __int16 *)i22 + 8) != *v569)
            {
              v569 += 12;
              if (v569 == v570) {
                goto LABEL_926;
              }
            }
          }
          if (v569 != v570) {
            (*(void (**)(void, void))(**((void **)v569 + 1) + 48))(*((void *)v569 + 1), *(void *)(i21 + 16));
          }
LABEL_926:
          ;
        }
      }
      v565 += 32;
    }
  }
  if (v591 < 3)
  {
    uint64_t v450 = *(void *)(v600 + 304);
    uint64_t v451 = *(void *)(v600 + 312);
    while (v450 != v451)
    {
      for (uint64_t i23 = *(void *)(v450 + 16); i23 != v450 + 8; uint64_t i23 = *(void *)(i23 + 8))
      {
        for (i24 = *(uint64_t ***)(*(void *)(i23 + 16) + 32); i24; i24 = (uint64_t **)*i24)
        {
          v458 = (unsigned __int16 *)v156[1];
          v459 = (unsigned __int16 *)v156[2];
          if (v458 != v459)
          {
            while (*((unsigned __int16 *)i24 + 8) != *v458)
            {
              v458 += 12;
              if (v458 == v459) {
                goto LABEL_789;
              }
            }
          }
          if (v458 != v459) {
            (*(void (**)(void, void))(**((void **)v458 + 1) + 40))(*((void *)v458 + 1), *(void *)(*(void *)(i23 + 16) + 8));
          }
LABEL_789:
          ;
        }
      }
      v450 += 32;
    }
  }
  *(unsigned char *)(v600 + 248) = v595;
  uint64_t v460 = *(void *)(v600 + 392);
  uint64_t v461 = *(void *)(v460 + 112);
  uint64_t v462 = *(void *)(v460 + 120);
  if (v461 != v462)
  {
    while (*(_WORD *)v461)
    {
      v461 += 112;
      if (v461 == v462)
      {
        uint64_t v461 = v462;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v461 + 104));
  uint64_t v463 = *(void *)(v600 + 392);
  uint64_t v464 = *(void *)(v463 + 136);
  uint64_t v465 = *(void *)(v463 + 144);
  if (v464 != v465)
  {
    while (*(_WORD *)v464)
    {
      v464 += 112;
      if (v464 == v465)
      {
        uint64_t v464 = v465;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v464 + 104));
  uint64_t v466 = *(void *)(v600 + 392);
  uint64_t v467 = *(void *)(v466 + 160);
  uint64_t v468 = *(void *)(v466 + 168);
  if (v467 != v468)
  {
    while (*(_WORD *)v467)
    {
      v467 += 112;
      if (v467 == v468)
      {
        uint64_t v467 = v468;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v467 + 104));
  uint64_t v469 = *(void *)(v600 + 392);
  uint64_t v470 = *(void *)(v469 + 112);
  uint64_t v471 = *(void *)(v469 + 120);
  if (v470 != v471)
  {
    while (*(_WORD *)v470 != 1)
    {
      v470 += 112;
      if (v470 == v471)
      {
        uint64_t v470 = v471;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v470 + 104));
  uint64_t v472 = *(void *)(v600 + 392);
  uint64_t v473 = *(void *)(v472 + 136);
  uint64_t v474 = *(void *)(v472 + 144);
  if (v473 != v474)
  {
    while (*(_WORD *)v473 != 1)
    {
      v473 += 112;
      if (v473 == v474)
      {
        uint64_t v473 = v474;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v473 + 104));
  uint64_t v475 = *(void *)(v600 + 392);
  uint64_t v476 = *(void *)(v475 + 160);
  uint64_t v477 = *(void *)(v475 + 168);
  if (v476 != v477)
  {
    while (*(_WORD *)v476 != 1)
    {
      v476 += 112;
      if (v476 == v477)
      {
        uint64_t v476 = v477;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v476 + 104));
  uint64_t v478 = *(void *)(v600 + 392);
  uint64_t v479 = *(void *)(v478 + 112);
  uint64_t v480 = *(void *)(v478 + 120);
  if (v479 != v480)
  {
    while (*(_WORD *)v479 != 2)
    {
      v479 += 112;
      if (v479 == v480)
      {
        uint64_t v479 = v480;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v479 + 104));
  uint64_t v481 = *(void *)(v600 + 392);
  uint64_t v482 = *(void *)(v481 + 136);
  uint64_t v483 = *(void *)(v481 + 144);
  if (v482 != v483)
  {
    while (*(_WORD *)v482 != 2)
    {
      v482 += 112;
      if (v482 == v483)
      {
        uint64_t v482 = v483;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v482 + 104));
  uint64_t v484 = *(void *)(v600 + 392);
  uint64_t v485 = *(void *)(v484 + 160);
  uint64_t v486 = *(void *)(v484 + 168);
  if (v485 != v486)
  {
    while (*(_WORD *)v485 != 2)
    {
      v485 += 112;
      if (v485 == v486)
      {
        uint64_t v485 = v486;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v485 + 104));
  uint64_t v487 = *(void *)(v600 + 392);
  uint64_t v488 = *(void *)(v487 + 112);
  uint64_t v489 = *(void *)(v487 + 120);
  if (v488 != v489)
  {
    while (*(_WORD *)v488 != 3)
    {
      v488 += 112;
      if (v488 == v489)
      {
        uint64_t v488 = v489;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v488 + 104));
  uint64_t v490 = *(void *)(v600 + 392);
  uint64_t v491 = *(void *)(v490 + 136);
  uint64_t v492 = *(void *)(v490 + 144);
  if (v491 != v492)
  {
    while (*(_WORD *)v491 != 3)
    {
      v491 += 112;
      if (v491 == v492)
      {
        uint64_t v491 = v492;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v491 + 104));
  uint64_t v493 = *(void *)(v600 + 392);
  uint64_t v494 = *(void *)(v493 + 160);
  uint64_t v495 = *(void *)(v493 + 168);
  if (v494 != v495)
  {
    while (*(_WORD *)v494 != 3)
    {
      v494 += 112;
      if (v494 == v495)
      {
        uint64_t v494 = v495;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v494 + 104));
  uint64_t v496 = *(void *)(v600 + 392);
  uint64_t v497 = *(void *)(v496 + 112);
  uint64_t v498 = *(void *)(v496 + 120);
  if (v497 != v498)
  {
    while (*(_WORD *)v497 != 4)
    {
      v497 += 112;
      if (v497 == v498)
      {
        uint64_t v497 = v498;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v497 + 104));
  uint64_t v499 = *(void *)(v600 + 392);
  uint64_t v500 = *(void *)(v499 + 136);
  uint64_t v501 = *(void *)(v499 + 144);
  if (v500 != v501)
  {
    while (*(_WORD *)v500 != 4)
    {
      v500 += 112;
      if (v500 == v501)
      {
        uint64_t v500 = v501;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v500 + 104));
  uint64_t v502 = *(void *)(v600 + 392);
  uint64_t v503 = *(void *)(v502 + 160);
  uint64_t v504 = *(void *)(v502 + 168);
  if (v503 != v504)
  {
    while (*(_WORD *)v503 != 4)
    {
      v503 += 112;
      if (v503 == v504)
      {
        uint64_t v503 = v504;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v503 + 104));
  uint64_t v505 = *(void *)(v600 + 392);
  uint64_t v506 = *(void *)(v505 + 112);
  uint64_t v507 = *(void *)(v505 + 120);
  if (v506 != v507)
  {
    while (*(_WORD *)v506 != 5)
    {
      v506 += 112;
      if (v506 == v507)
      {
        uint64_t v506 = v507;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v506 + 104));
  uint64_t v508 = *(void *)(v600 + 392);
  uint64_t v509 = *(void *)(v508 + 136);
  uint64_t v510 = *(void *)(v508 + 144);
  if (v509 != v510)
  {
    while (*(_WORD *)v509 != 5)
    {
      v509 += 112;
      if (v509 == v510)
      {
        uint64_t v509 = v510;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v509 + 104));
  uint64_t v511 = *(void *)(v600 + 392);
  uint64_t v512 = *(void *)(v511 + 160);
  uint64_t v513 = *(void *)(v511 + 168);
  if (v512 != v513)
  {
    while (*(_WORD *)v512 != 5)
    {
      v512 += 112;
      if (v512 == v513)
      {
        uint64_t v512 = v513;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v512 + 104));
  uint64_t v514 = *(void *)(v600 + 392);
  uint64_t v515 = *(void *)(v514 + 112);
  uint64_t v516 = *(void *)(v514 + 120);
  if (v515 != v516)
  {
    while (*(_WORD *)v515 != 6)
    {
      v515 += 112;
      if (v515 == v516)
      {
        uint64_t v515 = v516;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v515 + 104));
  uint64_t v517 = *(void *)(v600 + 392);
  uint64_t v518 = *(void *)(v517 + 136);
  uint64_t v519 = *(void *)(v517 + 144);
  if (v518 != v519)
  {
    while (*(_WORD *)v518 != 6)
    {
      v518 += 112;
      if (v518 == v519)
      {
        uint64_t v518 = v519;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v518 + 104));
  uint64_t v520 = *(void *)(v600 + 392);
  uint64_t v521 = *(void *)(v520 + 160);
  uint64_t v522 = *(void *)(v520 + 168);
  if (v521 != v522)
  {
    while (*(_WORD *)v521 != 6)
    {
      v521 += 112;
      if (v521 == v522)
      {
        uint64_t v521 = v522;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v521 + 104));
  uint64_t v523 = *(void *)(v600 + 392);
  uint64_t v524 = *(void *)(v523 + 112);
  uint64_t v525 = *(void *)(v523 + 120);
  if (v524 != v525)
  {
    while (*(_WORD *)v524 != 7)
    {
      v524 += 112;
      if (v524 == v525)
      {
        uint64_t v524 = v525;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v524 + 104));
  uint64_t v526 = *(void *)(v600 + 392);
  uint64_t v527 = *(void *)(v526 + 136);
  uint64_t v528 = *(void *)(v526 + 144);
  if (v527 != v528)
  {
    while (*(_WORD *)v527 != 7)
    {
      v527 += 112;
      if (v527 == v528)
      {
        uint64_t v527 = v528;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v527 + 104));
  uint64_t v529 = *(void *)(v600 + 392);
  uint64_t v530 = *(void *)(v529 + 160);
  uint64_t v531 = *(void *)(v529 + 168);
  if (v530 != v531)
  {
    while (*(_WORD *)v530 != 7)
    {
      v530 += 112;
      if (v530 == v531)
      {
        uint64_t v530 = v531;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v530 + 104));
  uint64_t v532 = *(void *)(v600 + 392);
  uint64_t v533 = *(void *)(v532 + 112);
  uint64_t v534 = *(void *)(v532 + 120);
  if (v533 != v534)
  {
    while (*(_WORD *)v533 != 8)
    {
      v533 += 112;
      if (v533 == v534)
      {
        uint64_t v533 = v534;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v533 + 104));
  uint64_t v535 = *(void *)(v600 + 392);
  uint64_t v536 = *(void *)(v535 + 136);
  uint64_t v537 = *(void *)(v535 + 144);
  if (v536 != v537)
  {
    while (*(_WORD *)v536 != 8)
    {
      v536 += 112;
      if (v536 == v537)
      {
        uint64_t v536 = v537;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v536 + 104));
  uint64_t v538 = *(void *)(v600 + 392);
  uint64_t v539 = *(void *)(v538 + 160);
  uint64_t v540 = *(void *)(v538 + 168);
  if (v539 != v540)
  {
    while (*(_WORD *)v539 != 8)
    {
      v539 += 112;
      if (v539 == v540)
      {
        uint64_t v539 = v540;
        break;
      }
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(v539 + 104));
  md::SceneStateManager::updateTileSets(*(md::SceneStateManager **)(v600 + 392));
  v541 = *(long long **)(v600 + 144);
  v542 = *(long long **)(v600 + 152);
  if (v541 == v542)
  {
    BOOL v564 = 0;
  }
  else
  {
    do
    {
      if (*(void *)(v599 + 5584)) {
        uint64_t v543 = *(void *)(v599 + 5584);
      }
      else {
        uint64_t v543 = v599;
      }
      long long v619 = *v541;
      v620[0] = 0;
      *(_OWORD *)&v620[1] = v541[1];
      v620[3] = 0;
      if (*(unsigned char *)(v543 + 3776))
      {
        gdc::CameraView::mercatorCameraView((gdc::CameraView *)buf, (const Camera *)v543);
      }
      else
      {
        buf[0] = *(unsigned char *)v543;
        *(void *)&buf[8] = *(void *)(v543 + 8);
        long long v544 = *(_OWORD *)(v543 + 32);
        *(_OWORD *)&buf[16] = *(_OWORD *)(v543 + 16);
        long long v632 = v544;
        long long v545 = *(_OWORD *)(v543 + 64);
        long long v633 = *(_OWORD *)(v543 + 48);
        long long v634 = v545;
        long long v547 = *(_OWORD *)(v543 + 96);
        long long v546 = *(_OWORD *)(v543 + 112);
        long long v548 = *(_OWORD *)(v543 + 80);
        uint64_t v638 = *(void *)(v543 + 128);
        long long v636 = v547;
        long long v637 = v546;
        long long v635 = v548;
        long long v639 = *(_OWORD *)(v543 + 136);
        long long v549 = *(_OWORD *)(v543 + 152);
        long long v550 = *(_OWORD *)(v543 + 168);
        long long v551 = *(_OWORD *)(v543 + 200);
        long long v642 = *(_OWORD *)(v543 + 184);
        long long v643 = v551;
        long long v640 = v549;
        long long v641 = v550;
        long long v552 = *(_OWORD *)(v543 + 216);
        long long v553 = *(_OWORD *)(v543 + 232);
        long long v554 = *(_OWORD *)(v543 + 264);
        long long v646 = *(_OWORD *)(v543 + 248);
        long long v647 = v554;
        long long v644 = v552;
        long long v645 = v553;
        long long v555 = *(_OWORD *)(v543 + 280);
        long long v556 = *(_OWORD *)(v543 + 296);
        long long v557 = *(_OWORD *)(v543 + 312);
        uint64_t v651 = *(void *)(v543 + 328);
        long long v649 = v556;
        long long v650 = v557;
        long long v648 = v555;
        char v652 = 0;
        if (*(unsigned char *)(v543 + 336))
        {
          uint64_t v653 = *(void *)(v543 + 344);
          char v652 = 1;
        }
        char v654 = 0;
        if (*(unsigned char *)(v543 + 352))
        {
          uint64_t v655 = *(void *)(v543 + 360);
          char v654 = 1;
        }
        long long v558 = *(_OWORD *)(v543 + 384);
        long long v656 = *(_OWORD *)(v543 + 368);
        long long v657 = v558;
        long long v559 = *(_OWORD *)(v543 + 400);
        long long v560 = *(_OWORD *)(v543 + 416);
        long long v561 = *(_OWORD *)(v543 + 432);
        int v661 = *(_DWORD *)(v543 + 448);
        long long v659 = v560;
        long long v660 = v561;
        long long v658 = v559;
        uint64_t v662 = *(void *)(v543 + 456);
        long long v562 = *(_OWORD *)(v543 + 480);
        long long v663 = *(_OWORD *)(v543 + 464);
        long long v664 = v562;
        geo::View<double>::View((uint64_t)v665, (long long *)(v543 + 496), (double *)(v543 + 552), (long long *)(v543 + 680), (_WORD *)(v543 + 952), *(_DWORD *)(v543 + 956), *(double *)(v543 + 936));
        v665[29] = *(_OWORD *)(v543 + 960);
        uint64_t v666 = *(void *)(v543 + 976);
        memcpy(v667, (const void *)(v543 + 984), 0x180uLL);
      }
      int v563 = geo::Intersect::encloses<double>(v667, (double *)&v619);
      BOOL v564 = v563 != 0;
      if (v563) {
        break;
      }
      v541 += 4;
    }
    while (v541 != v542);
  }
  uint64_t v571 = *(void *)(v600 + 392);
  *(unsigned char *)(v571 + 280) = v564;
  if (v571 + 184 != v597)
  {
    v572 = *(unsigned char **)v597;
    unint64_t v573 = (uint64_t)(*(void *)(v597 + 8) - *(void *)v597) >> 1;
    uint64_t v574 = *(void *)(v571 + 184);
    unint64_t v575 = (*(void *)(v571 + 192) - v574) >> 1;
    BOOL v576 = v573 >= v575;
    unint64_t v577 = v573 - v575;
    if (v577 != 0 && v576)
    {
      std::vector<md::TileSelectionTileSetType>::__append(v571 + 184, v577);
      v572 = *(unsigned char **)v597;
    }
    else if (!v576)
    {
      *(void *)(v571 + 192) = v574 + 2 * v573;
    }
    v578 = *(unsigned char **)(v597 + 8);
    if (v578 != v572) {
      memmove(*(void **)(v571 + 184), v572, v578 - v572);
    }
  }
  md::SceneStateManager::updateMerged((md::SceneStateManager *)v571);
  uint64_t v579 = *(void *)(v600 + 392);
  if (v579 + 208 != v597 + 24)
  {
    v580 = *(unsigned char **)(v597 + 24);
    unint64_t v581 = (uint64_t)(*(void *)(v597 + 32) - (void)v580) >> 1;
    uint64_t v582 = *(void *)(v579 + 208);
    unint64_t v583 = (*(void *)(v579 + 216) - v582) >> 1;
    BOOL v584 = v581 >= v583;
    unint64_t v585 = v581 - v583;
    if (v585 != 0 && v584)
    {
      std::vector<md::TileSelectionTileSetType>::__append(v579 + 208, v585);
      v580 = *(unsigned char **)(v597 + 24);
    }
    else if (!v584)
    {
      *(void *)(v579 + 216) = v582 + 2 * v581;
    }
    v586 = *(unsigned char **)(v597 + 32);
    if (v586 != v580) {
      memmove(*(void **)(v579 + 208), v580, v586 - v580);
    }
  }
  md::SceneStateManager::updateMerged((md::SceneStateManager *)v579);
  uint64_t v587 = *(void *)(v600 + 392);
  if (v587 + 256 != v600 + 144)
  {
    std::vector<md::TileExclusionArea>::__assign_with_size[abi:nn180100]<md::TileExclusionArea*,md::TileExclusionArea*>((void *)(v587 + 256), *(char **)(v600 + 144), *(char **)(v600 + 152), (uint64_t)(*(void *)(v600 + 152) - *(void *)(v600 + 144)) >> 6);
    uint64_t v587 = *(void *)(v600 + 392);
  }
  *(_WORD *)(v587 + 282) = *(_WORD *)(v597 + 130);
  *(void *)(v600 + 120) = v592;
  if (!v626)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_977;
  }
  (*(void (**)(void *))(*v626 + 48))(v626);
  uint64_t result = (uint64_t)v626;
  if (v626 == v625) {
    return (*(uint64_t (**)(void *))(v625[0] + 32))(v625);
  }
  if (v626) {
    return (*(uint64_t (**)(void))(*v626 + 40))();
  }
  return result;
}

void sub_1A190B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  unint64_t v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      uint64_t v3 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
      if (v12 >= v13) {
        uint64_t v3 = v12 % v13;
      }
    }
    else
    {
      uint64_t v3 = v12 & (v13 - 1);
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (v16)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v16[1];
            if (v18 == v12)
            {
              if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
              {
                return;
              }
            }
            else if ((v18 & (v13 - 1)) != v3)
            {
              goto LABEL_25;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v12)
          {
            if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
            {
              return;
            }
          }
          else
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_25:
  uint64_t v19 = operator new(0x28uLL);
  void *v19 = 0;
  v19[1] = v12;
  *((_WORD *)v19 + 8) = *(_WORD *)a3;
  *(void *)((char *)v19 + 20) = *(void *)(a3 + 4);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v13 || (float)(v21 * (float)v13) < v20)
  {
    BOOL v22 = 1;
    if (v13 >= 3) {
      BOOL v22 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v13);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v13 = *(void *)(a1 + 8);
    }
    if (prime > v13) {
      goto LABEL_37;
    }
    if (prime < v13)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v13 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v13) {
LABEL_37:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        uint64_t v3 = v12 % v13;
      }
      else {
        uint64_t v3 = v12;
      }
    }
    else
    {
      uint64_t v3 = (v13 - 1) & v12;
    }
  }
  uint64_t v29 = *(void *)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    void *v19 = *v30;
LABEL_61:
    *uint64_t v30 = v19;
    goto LABEL_62;
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v29 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v31 = *(void *)(*v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v31 >= v13) {
        v31 %= v13;
      }
    }
    else
    {
      v31 &= v13 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
}

void sub_1A190BC70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::LayerDataCollector::sortIndexList(unsigned __int8 **this)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  unint64_t v4 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v3 - v2) >> 4));
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = *this;
  uint64_t v7 = this[1];
  if (*this != v7 && *this + 144 != v7)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = &v6[v9];
      if (*(void *)&v6[v9 + 136] == *(void *)&v6[v9 + 280]
        && *v10 == v10[144]
        && *(unsigned __int16 *)&v6[v9 + 8] == *(unsigned __int16 *)&v6[v9 + 152]
        && *(void *)&v6[v9 + 80] == *(void *)&v6[v9 + 224])
      {
        unint64_t v11 = *(const void **)&v6[v9 + 16];
        size_t v12 = *(void *)&v6[v9 + 24] - (void)v11;
        unint64_t v13 = *(const void **)&v6[v9 + 160];
        if (v12 == *(void *)&v6[v9 + 168] - (void)v13
          && !memcmp(v11, v13, v12)
          && v6[v9 + 112] == v6[v9 + 256]
          && v6[v9 + 113] == v6[v9 + 257]
          && *(_DWORD *)&v6[v9 + 116] == *(_DWORD *)&v6[v9 + 260]
          && *(_DWORD *)&v6[v9 + 120] == *(_DWORD *)&v6[v9 + 264])
        {
          break;
        }
      }
      v9 += 144;
      if (&v6[v9 + 144] == v7) {
        return;
      }
    }
    if (v10 != v7)
    {
      if (v10 + 288 != v7)
      {
        uint8x8_t v14 = &v6[v9];
        do
        {
          if (*((void *)v10 + 17) != *((void *)v14 + 53)
            || *v10 != v14[288]
            || *((unsigned __int16 *)v10 + 4) != *((unsigned __int16 *)v14 + 148)
            || *((void *)v10 + 10) != *((void *)v14 + 46)
            || (uint64_t v15 = (const void *)*((void *)v10 + 2),
                size_t v16 = *((void *)v10 + 3) - (void)v15,
                unint64_t v17 = (const void *)*((void *)v14 + 38),
                v16 != *((void *)v14 + 39) - (void)v17)
            || memcmp(v15, v17, v16)
            || v10[112] != v14[400]
            || v10[113] != v14[401]
            || *((_DWORD *)v10 + 29) != *((_DWORD *)v14 + 101)
            || *((_DWORD *)v10 + 30) != *((_DWORD *)v14 + 102))
          {
            uint64_t v18 = gdc::LayerDataRequestKey::operator=((uint64_t)(v10 + 144), (uint64_t)(v14 + 288));
            long long v19 = *((_OWORD *)v14 + 25);
            *((void *)v10 + 34) = *((void *)v14 + 52);
            *((_OWORD *)v10 + 16) = v19;
            *((void *)v10 + 35) = *((void *)v14 + 53);
            uint64_t v10 = (unsigned __int8 *)v18;
          }
          float v20 = v14 + 432;
          v14 += 144;
        }
        while (v20 != v7);
        uint64_t v7 = this[1];
      }
      float v21 = v10 + 144;
      if (v10 + 144 != v7)
      {
        while (v7 != v21)
        {
          if (*(v7 - 48)) {
            *(v7 - 48) = 0;
          }
          BOOL v22 = (void *)*((void *)v7 - 16);
          if (v22 != *((void **)v7 - 14)) {
            free(v22);
          }
          v7 -= 144;
        }
        this[1] = v21;
      }
    }
  }
}

void std::list<std::unique_ptr<gdc::SelectionContext>>::resize(uint64_t *a1)
{
  unint64_t v2 = a1[2];
  if (v2 < 2)
  {
    if (!v2)
    {
      unint64_t v8 = operator new(0x18uLL);
      v8[1] = a1;
      v8[2] = 0;
      uint64_t v9 = *a1;
      void *v8 = *a1;
      *(void *)(v9 + 8) = v8;
      *a1 = (uint64_t)v8;
      a1[2] = 1;
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t **)(a1[1] + 8);
    if (v3 != a1)
    {
      uint64_t v4 = *a1;
      uint64_t v5 = *v3;
      *(void *)(v5 + 8) = *(void *)(*a1 + 8);
      **(void **)(v4 + 8) = v5;
      do
      {
        --a1[2];
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
}

void gdc::Timer::cancel(gdc::Timer *this)
{
  unint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = *((void *)this + 10);
  if (v3 && *((unsigned char *)this + 96))
  {
    dispatch_source_set_timer(v3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    *((unsigned char *)this + 96) = 0;
    *((void *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SceneLogicVariableRate", "", v5, 2u);
  }
}

void gdc::LayerDataManager::preloadLayerDataKeys(uint64_t *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    do
    {
      v9[0] = *((unsigned char *)v3 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v10, (uint64_t)(v3 + 3));
      char v13 = 0;
      if (*((unsigned char *)v3 + 112))
      {
        int v14 = *((_DWORD *)v3 + 29);
        char v13 = 1;
      }
      uint64_t v15 = v3[15];
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      __p = 0;
      uint64_t v5 = (unsigned char *)v3[16];
      os_signpost_id_t v4 = (unsigned char *)v3[17];
      int64_t v6 = v4 - v5;
      if (v4 != v5)
      {
        if (v6 < 0) {
          abort();
        }
        __p = operator new(v4 - v5);
        unint64_t v17 = __p;
        uint64_t v7 = (char *)__p + 8 * (v6 >> 3);
        uint64_t v18 = v7;
        memcpy(__p, v5, v6);
        unint64_t v17 = v7;
      }
      unint64_t v8 = geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::operator[](a2, v10);
      std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v8, v9, (uint64_t)v9);
      if (__p)
      {
        unint64_t v17 = __p;
        operator delete(__p);
      }
      if (v13) {
        char v13 = 0;
      }
      if (v11 != v12) {
        free(v11);
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

uint64_t md::Logic<md::PendingSceneLogic,md::PendingSceneContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::ResolvedTileSelectionContext,md::CameraContext,md::SettingsContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void *std::vector<md::TileExclusionArea>::__assign_with_size[abi:nn180100]<md::TileExclusionArea*,md::TileExclusionArea*>(void *result, char *a2, char *a3, size_t __sz)
{
  int64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 6)
  {
    size_t v16 = (char **)(result + 1);
    unint64_t v17 = (char *)result[1];
    unint64_t v18 = (v17 - v9) >> 6;
    if (v18 >= __sz)
    {
      uint64_t v25 = *result;
      if (a2 != a3)
      {
        do
        {
          *(void *)uint64_t v25 = *(void *)v6;
          *(void *)(v25 + 8) = *((void *)v6 + 1);
          *(void *)(v25 + 16) = *((void *)v6 + 2);
          *(void *)(v25 + 24) = *((void *)v6 + 3);
          long long v26 = *((_OWORD *)v6 + 3);
          *(_OWORD *)(v25 + 32) = *((_OWORD *)v6 + 2);
          *(_OWORD *)(v25 + 48) = v26;
          v25 += 64;
          v6 += 64;
        }
        while (v6 != a3);
      }
      int64_t v15 = v25 - (void)v9;
    }
    else
    {
      long long v19 = &a2[64 * v18];
      if (v17 != v9)
      {
        do
        {
          *(void *)uint64_t v9 = *(void *)v6;
          *((void *)v9 + 1) = *((void *)v6 + 1);
          *((void *)v9 + 2) = *((void *)v6 + 2);
          *((void *)v9 + 3) = *((void *)v6 + 3);
          long long v20 = *((_OWORD *)v6 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v6 + 2);
          *((_OWORD *)v9 + 3) = v20;
          v6 += 64;
          v9 += 64;
        }
        while (v6 != v19);
        uint64_t v9 = *v16;
      }
      float v21 = v9;
      if (v19 != a3)
      {
        float v21 = v9;
        do
        {
          long long v22 = *(_OWORD *)v19;
          long long v23 = *((_OWORD *)v19 + 1);
          long long v24 = *((_OWORD *)v19 + 3);
          *((_OWORD *)v21 + 2) = *((_OWORD *)v19 + 2);
          *((_OWORD *)v21 + 3) = v24;
          *(_OWORD *)float v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          v21 += 64;
          v19 += 64;
        }
        while (v19 != a3);
      }
      int64_t v15 = v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58) {
      goto LABEL_25;
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 58) {
LABEL_25:
    }
      abort();
    unint64_t v13 = v12 << 6;
    uint64_t result = operator new(v12 << 6);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    int v14 = (char *)result;
    if (v6 != a3)
    {
      uint64_t result = memcpy(result, v6, ((a3 - v6 - 64) & 0xFFFFFFFFFFFFFFC0) + 64);
      int v14 = &v9[((a3 - v6 - 64) & 0xFFFFFFFFFFFFFFC0) + 64];
    }
    int64_t v15 = v14 - v9;
    size_t v16 = (char **)(v7 + 1);
  }
  uint64_t *v16 = &v9[v15];
  return result;
}

void _ZNSt3__110__function6__funcIZN2md17PendingSceneLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_28ResolvedTileSelectionContextENS2_13CameraContextENS2_15SettingsContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_19PendingSceneContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SceneLogicVariableRate", "", v5, 2u);
  }
}

void geo::MarkedLRUCache<gdc::LayerDataRequestKey,long long,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::purge(void *a1)
{
  uint64_t v1 = a1[1];
  unint64_t v2 = (void *)a1[8];
  if ((void *)v1 != v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = a1 + 3;
    uint64_t v8 = (uint64_t **)(a1 + 5);
    while (v5 != v6)
    {
      uint64_t v9 = *(void *)(v1 + 136);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v7, (unsigned __int8 *)(v1 + 16));
      if (v10)
      {
        BOOL v11 = v10;
        int8x8_t v12 = (int8x8_t)a1[4];
        unint64_t v13 = v10[1];
        uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          if ((unint64_t)v13 >= *(void *)&v12) {
            unint64_t v13 = (uint64_t *)((unint64_t)v13 % *(void *)&v12);
          }
        }
        else
        {
          unint64_t v13 = (uint64_t *)((*(void *)&v12 - 1) & (unint64_t)v13);
        }
        int64_t v15 = *(uint64_t ***)(*v7 + 8 * (void)v13);
        do
        {
          size_t v16 = v15;
          int64_t v15 = (uint64_t **)*v15;
        }
        while (v15 != v10);
        if (v16 == v8) {
          goto LABEL_24;
        }
        unint64_t v17 = v16[1];
        if (v14.u32[0] > 1uLL)
        {
          if ((unint64_t)v17 >= *(void *)&v12) {
            unint64_t v17 = (uint64_t *)((unint64_t)v17 % *(void *)&v12);
          }
        }
        else
        {
          unint64_t v17 = (uint64_t *)((unint64_t)v17 & (*(void *)&v12 - 1));
        }
        if (v17 != v13)
        {
LABEL_24:
          if (!*v10) {
            goto LABEL_25;
          }
          unint64_t v18 = (*v10)[1];
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v12) {
              v18 %= *(void *)&v12;
            }
          }
          else
          {
            v18 &= *(void *)&v12 - 1;
          }
          if ((uint64_t *)v18 != v13) {
LABEL_25:
          }
            *(void *)(*v7 + 8 * (void)v13) = 0;
        }
        long long v19 = *v10;
        if (*v10)
        {
          long long v20 = (uint64_t *)v19[1];
          if (v14.u32[0] > 1uLL)
          {
            if ((unint64_t)v20 >= *(void *)&v12) {
              long long v20 = (uint64_t *)((unint64_t)v20 % *(void *)&v12);
            }
          }
          else
          {
            long long v20 = (uint64_t *)((unint64_t)v20 & (*(void *)&v12 - 1));
          }
          if (v20 != v13)
          {
            *(void *)(*v7 + 8 * (void)v20) = v16;
            long long v19 = *v10;
          }
        }
        uint64_t *v16 = v19;
        unsigned __int8 *v10 = 0;
        --a1[6];
        if (*((unsigned char *)v10 + 112)) {
          *((unsigned char *)v10 + 112) = 0;
        }
        float v21 = v10[4];
        if (v21 != v11[6]) {
          free(v21);
        }
        operator delete(v11);
        unint64_t v2 = (void *)a1[8];
      }
      v4 += v9;
      uint64_t v1 = *(void *)(v1 + 8);
      ++v5;
      if ((void *)v1 == v2) {
        goto LABEL_38;
      }
    }
    unint64_t v2 = (void *)v1;
LABEL_38:
    long long v22 = (void *)a1[1];
    if (v22 != v2)
    {
      uint64_t v23 = *v2;
      uint64_t v24 = *v22;
      *(void *)(v24 + 8) = *(void *)(*v2 + 8);
      **(void **)(v23 + 8) = v24;
      do
      {
        uint64_t v25 = (void *)v22[1];
        --a1[2];
        if (*((unsigned char *)v22 + 112)) {
          *((unsigned char *)v22 + 112) = 0;
        }
        long long v26 = (void *)v22[4];
        if (v26 != (void *)v22[6]) {
          free(v26);
        }
        operator delete(v22);
        long long v22 = v25;
      }
      while (v25 != v2);
    }
    unint64_t v27 = a1[9];
    BOOL v28 = v27 >= v4;
    unint64_t v29 = v27 - v4;
    if (!v28) {
      unint64_t v29 = 0;
    }
    a1[9] = v29;
  }
}

void **md::PhysicalLabelFeature::updateText(md::PhysicalLabelFeature *this, const void *a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 48);
  for (uint64_t i = *((void *)this + 49); i != v5; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), *(void *)(i - 32), *(void *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(i - 40) + 40))(*(void *)(i - 40), *(void *)(i - 64), *(void *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((void *)this + 49) = v5;
  uint64_t v7 = (*(uint64_t (**)(md::PhysicalLabelFeature *, const void *))(*(void *)this + 64))(this, a2);
  uint64_t v8 = *((void *)this + 24);
  if (v7)
  {
    unint64_t v18 = (uint64_t (**)(void **))&unk_1EF51E3C8;
    long long v19 = this;
    uint64_t v20 = a3;
    float v21 = (void **)&v18;
    uint64_t v9 = *(void *)(v8 + 128);
    uint64_t v10 = *(void *)(v8 + 136);
    if (v9 != v10)
    {
      while (1)
      {
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
        if (v11 != v12) {
          break;
        }
LABEL_13:
        v9 += 112;
        if (v9 == v10) {
          goto LABEL_20;
        }
      }
      while (v21)
      {
        (*((void (**)(void **, uint64_t))*v21 + 6))(v21, v11);
        v11 += 8;
        if (v11 == v12) {
          goto LABEL_13;
        }
      }
      goto LABEL_25;
    }
    return (void **)v18[4]((void **)&v18);
  }
  unint64_t v18 = (uint64_t (**)(void **))&unk_1EF51E410;
  long long v19 = this;
  uint64_t v20 = a3;
  float v21 = (void **)&v18;
  uint64_t v13 = *(void *)(v8 + 128);
  uint64_t v14 = *(void *)(v8 + 136);
  if (v13 == v14) {
    return (void **)v18[4]((void **)&v18);
  }
  do
  {
    uint64_t v15 = *(void *)(v13 + 16);
    uint64_t v16 = *(void *)(v13 + 24);
    if (v15 != v16)
    {
      while (v21)
      {
        (*((void (**)(void **, uint64_t))*v21 + 6))(v21, v15);
        v15 += 8;
        if (v15 == v16) {
          goto LABEL_19;
        }
      }
LABEL_25:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
LABEL_19:
    v13 += 112;
  }
  while (v13 != v14);
LABEL_20:
  uint64_t result = v21;
  if (v21 == (void **)&v18) {
    return (void **)v18[4]((void **)&v18);
  }
  if (v21) {
    return (void **)(*((uint64_t (**)(void))*v21 + 5))();
  }
  return result;
}

void sub_1A190CA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(std::unique_ptr<md::LabelLineSegment> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(*a2 + 32))
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 664))(*(void *)(result + 8));
      *(unsigned char *)(v2 + 38) = result;
    }
  }
  return result;
}

uint64_t md::PhysicalLabelFeature::textIndexForFeature(uint64_t *a1, uint64_t *a2, int a3)
{
  __src[0] = 0;
  __src[1] = 0;
  uint64_t v35 = 0;
  {
    operator new();
  }
  uint64_t v36 = mdm::Allocator::instance(void)::alloc;
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  {
    operator new();
  }
  uint64_t v6 = mdm::Allocator::instance(void)::alloc;
  uint64_t v39 = mdm::Allocator::instance(void)::alloc;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1))
  {
    uint64_t v7 = a1[58];
    uint64_t v8 = *(void *)(v7 + 48);
    if (v8 == *(void *)(v7 + 56)) {
      goto LABEL_33;
    }
    if (a3)
    {
      if (*(char *)(v8 + 79) < 0)
      {
        if (*(void *)(v8 + 64)) {
          goto LABEL_8;
        }
      }
      else if (*(unsigned char *)(v8 + 79))
      {
LABEL_8:
        md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(&__dst, (void *)(v8 + 56));
LABEL_27:
        if (SHIBYTE(v35) < 0) {
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v36 + 40))(v36, __src[0], v35 & 0x7FFFFFFFFFFFFFFFLL);
        }
        *(_OWORD *)__src = __dst;
        uint64_t v35 = v29;
        HIBYTE(v29) = 0;
        LOBYTE(__dst) = 0;
        if (SHIBYTE(v38) < 0)
        {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 40))(v6, v37, v38 & 0x7FFFFFFFFFFFFFFFLL);
          long long v37 = v31;
          uint64_t v38 = v32;
          HIBYTE(v32) = 0;
          LOBYTE(v31) = 0;
          if (SHIBYTE(v29) < 0) {
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v30 + 40))(v30, __dst, v29 & 0x7FFFFFFFFFFFFFFFLL);
          }
        }
        else
        {
          long long v37 = v31;
          uint64_t v38 = v32;
        }
        goto LABEL_33;
      }
    }
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(&__dst, (void *)(v8 + 8));
    goto LABEL_27;
  }
  {
    operator new();
  }
  uint64_t v9 = mdm::Allocator::instance(void)::alloc;
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  {
    operator new();
  }
  uint64_t v27 = mdm::Allocator::instance(void)::alloc;
  md::LabelFeature::textFromFeature((unint64_t)&__dst, a2, a3, (uint64_t)&v25, 0);
  uint64_t v10 = __dst;
  uint64_t v11 = v29;
  uint64_t v30 = v9;
  if (v29 < 0) {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  uint64_t v12 = v27;
  uint64_t v33 = v27;
  int v13 = SHIBYTE(v26);
  if (SHIBYTE(v26) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v31, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    long long v31 = v25;
    uint64_t v32 = v26;
  }
  if (SHIBYTE(v35) < 0) {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v36 + 40))(v36, __src[0], v35 & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(_OWORD *)__src = __dst;
  uint64_t v35 = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__dst) = 0;
  if (SHIBYTE(v38) < 0) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v39 + 40))(v39, v37, v38 & 0x7FFFFFFFFFFFFFFFLL);
  }
  long long v37 = v31;
  uint64_t v38 = v32;
  if (v13 < 0)
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v12 + 40))(v12, v25, v26 & 0x7FFFFFFFFFFFFFFFLL);
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x8000000000000000) == 0)
  {
    goto LABEL_33;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 40))(v9, v10, v11 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_33:
  uint64_t v14 = (void *)HIBYTE(v35);
  int v15 = SHIBYTE(v35);
  uint64_t v16 = __src[1];
  if (v35 < 0) {
    uint64_t v14 = __src[1];
  }
  if (!v14)
  {
    unsigned __int8 v19 = -1;
    goto LABEL_44;
  }
  unint64_t v18 = (unsigned __int8 *)a1[48];
  unint64_t v17 = a1[49];
  if (v18 != (unsigned __int8 *)v17)
  {
    unsigned __int8 v19 = 0;
    while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v18, (unsigned __int8 *)__src) & 1) == 0)
    {
      ++v19;
      v18 += 64;
      if (v18 == (unsigned __int8 *)v17)
      {
        if (v19 <= 0x64u) {
          goto LABEL_48;
        }
        unsigned __int8 v19 = -1;
        if ((SHIBYTE(v38) & 0x80000000) == 0) {
          goto LABEL_45;
        }
        goto LABEL_59;
      }
    }
LABEL_44:
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_59:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v39 + 40))(v39, v37, v38 & 0x7FFFFFFFFFFFFFFFLL);
    if ((v15 & 0x80000000) == 0) {
      return v19;
    }
LABEL_60:
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v36 + 40))(v36, __src[0], v35 & 0x7FFFFFFFFFFFFFFFLL);
    return v19;
  }
  unsigned __int8 v19 = 0;
LABEL_48:
  if (v17 >= a1[50])
  {
    uint64_t v22 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(a1 + 48, (long long *)__src);
  }
  else
  {
    if (v17)
    {
      *(void *)(v17 + 24) = v36;
      if (v15 < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v17, __src[0], (unint64_t)v16);
      }
      else
      {
        long long v21 = *(_OWORD *)__src;
        *(void *)(v17 + 16) = v35;
        *(_OWORD *)unint64_t v17 = v21;
      }
      uint64_t v23 = (void **)(v17 + 32);
      *(void *)(v17 + 56) = v39;
      if (SHIBYTE(v38) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v23, (void *)v37, *((unint64_t *)&v37 + 1));
      }
      else
      {
        long long v24 = v37;
        *(void *)(v17 + 48) = v38;
        *(_OWORD *)uint64_t v23 = v24;
      }
    }
    uint64_t v22 = v17 + 64;
    a1[49] = v17 + 64;
  }
  a1[49] = v22;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_59;
  }
LABEL_45:
  if (v15 < 0) {
    goto LABEL_60;
  }
  return v19;
}

void sub_1A190D154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (*(char *)(v14 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v14 + 24) + 40))(*(void *)(v14 + 24), *(void *)v14, *(void *)(v14 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v13 + 392) = v14;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::PhysicalLabelFeature::externalFeature(md::PhysicalLabelFeature *this)
{
  return *((void *)this + 58);
}

uint64_t md::UniLineLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, md::LabelStyle *a4, unsigned char *a5)
{
  uint64_t v5 = *((void *)a1 + 29);
  if (!v5) {
    goto LABEL_12;
  }
  unsigned int v6 = *(_DWORD *)(a3 + 48);
  uint64_t v7 = (void *)((char *)a1 + 232);
  do
  {
    unsigned int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      uint64_t v10 = (uint64_t *)v5;
    }
    else {
      uint64_t v10 = (uint64_t *)(v5 + 8);
    }
    if (v9) {
      uint64_t v7 = (void *)v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v7 == (void *)((char *)a1 + 232) || v6 < *((_DWORD *)v7 + 8))
  {
LABEL_12:
    uint64_t v11 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    return v11;
  }
  uint64_t v13 = v7[5];
  uint64_t v14 = (std::__shared_weak_count *)v7[6];
  uint64_t v16 = v13;
  unint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v13)
  {
LABEL_19:
    uint64_t v11 = 0;
    if (!v14) {
      return v11;
    }
    goto LABEL_28;
  }
  switch(*(unsigned char *)(v13 + 9))
  {
    case 1:
      uint64_t v15 = (uint64_t)md::UniLineLabelFeature::newTextPart(a1, a2, a3, (uint64_t)a4, a5, &v16);
      break;
    case 2:
      uint64_t v15 = (uint64_t)md::UniLineLabelFeature::newTextAndShieldPart(a1, a2, a3, (uint64_t)a4, a5, &v16);
      break;
    case 3:
      uint64_t v15 = md::UniLineLabelFeature::newShieldPart((uint64_t)a1, a2, a3, (uint64_t)a4, &v16);
      break;
    case 4:
    case 5:
      uint64_t v15 = md::UniLineLabelFeature::newArrowPart(a2, a3, a4, &v16, *(unsigned char *)(v13 + 9) == 4);
      break;
    case 6:
      uint64_t v15 = (uint64_t)md::UniLineLabelFeature::newAnnotationPart((uint64_t *)a1, a2, a3, a5, &v16);
      break;
    case 7:
      uint64_t v15 = (uint64_t)md::UniLineLabelFeature::newTextAndAnnotationPart(a1, a2, a3, (uint64_t)a4, a5, &v16);
      break;
    case 8:
      uint64_t v15 = (uint64_t)md::UniLineLabelFeature::newTextAndTravelArrowPart(a1, a2, a3, a4, a5, &v16);
      break;
    default:
      goto LABEL_19;
  }
  uint64_t v11 = v15;
  if (v14)
  {
LABEL_28:
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v11;
}

void sub_1A190D458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::UniLineLabelFeature::newShieldPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  {
    operator new();
  }
  uint64_t v75 = mdm::Allocator::instance(void)::alloc;
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    uint64_t v16 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a5 + 200))();
    unint64_t v18 = v16;
    if ((*(void *)v16
       && *((_DWORD *)v16 + 10) == *(_DWORD *)(*(void *)v16 + 252)
       && (unsigned __int8 v19 = (uint64_t *)*((void *)v16 + 3)) != 0
       && (*((__int16 *)v16 + 17) & 0x80000000) == 0
       || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v16, v16[164], v17),
           *(void *)v18)
       && *((_DWORD *)v18 + 10) == *(_DWORD *)(*(void *)v18 + 252)
       && (unsigned __int8 v19 = (uint64_t *)*((void *)v18 + 3)) != 0)
      && (*((__int16 *)v18 + 17) & 0x80000000) == 0
      && (uint64_t v20 = *v19) != 0
      && !*(unsigned char *)(v20 + 32))
    {
      uint64_t v21 = *(void *)(v20 + 16);
    }
    else
    {
      uint64_t v21 = 0;
    }
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)(a2 + 3392));
    md::UniLineLabelFeature::shieldsForFeature((char **)&v71, v21, v22 & 1);
    uint64_t v23 = v73;
    if ((void)v73)
    {
      uint64_t v24 = *((void *)&v73 + 1);
      uint64_t v25 = v73;
      if (*((void *)&v73 + 1) != (void)v73)
      {
        do
        {
          if (*(char *)(v24 - 25) < 0) {
            (*(void (**)(void, void, uint64_t))(**(void **)(v24 - 24) + 40))(*(void *)(v24 - 24), *(void *)(v24 - 48), *(void *)(v24 - 32) & 0x7FFFFFFFFFFFFFFFLL);
          }
          v24 -= 48;
        }
        while (v24 != v23);
        uint64_t v25 = v73;
      }
      *((void *)&v73 + 1) = v23;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v75 + 40))(v75, v25, v74 - v25);
    }
    long long v73 = v71;
    uint64_t v74 = v72;
    uint64_t v13 = *((void *)&v71 + 1);
    goto LABEL_98;
  }
  unsigned int v8 = a5;
  if (&v73 == (long long *)(a1 + 352))
  {
    uint64_t v13 = *((void *)&v73 + 1);
    goto LABEL_99;
  }
  uint64_t v10 = *(void *)(a1 + 352);
  uint64_t v9 = *(void *)(a1 + 360);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 4);
  uint64_t v12 = v74;
  uint64_t v13 = v73;
  if (0xAAAAAAAAAAAAAAABLL * ((v74 - (uint64_t)v73) >> 4) >= v11)
  {
    uint64_t v26 = *((void *)&v73 + 1);
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v73 + 1) - v73) >> 4);
    if (v27 >= v11)
    {
      if (v10 != v9)
      {
        uint64_t v36 = 0;
        do
        {
          uint64_t v39 = (void **)(v13 + v36);
          v40 = (long long *)(v10 + v36);
          if (v10 != v13)
          {
            char v41 = *((unsigned char *)v40 + 23);
            if (*((char *)v39 + 23) < 0)
            {
              if (v41 >= 0) {
                long long v37 = (void *)(v10 + v36);
              }
              else {
                long long v37 = *(void **)(v10 + v36);
              }
              if (v41 >= 0) {
                size_t v38 = *((unsigned __int8 *)v40 + 23);
              }
              else {
                size_t v38 = *(void *)(v10 + v36 + 8);
              }
              uint64_t v39 = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v39, v37, v38);
            }
            else if ((*((unsigned char *)v40 + 23) & 0x80) != 0)
            {
              uint64_t v39 = (void **)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v39, *(void **)(v10 + v36), *(void *)(v10 + v36 + 8));
            }
            else
            {
              long long v42 = *v40;
              v39[2] = (void *)*((void *)v40 + 2);
              *(_OWORD *)uint64_t v39 = v42;
            }
          }
          v39[4] = (void *)*((void *)v40 + 4);
          *((unsigned char *)v39 + 40) = *((unsigned char *)v40 + 40);
          *((unsigned char *)v39 + 41) = *((unsigned char *)v40 + 41);
          *((unsigned char *)v39 + 42) = *((unsigned char *)v40 + 42);
          *((unsigned char *)v39 + 43) = *((unsigned char *)v40 + 43);
          *((unsigned char *)v39 + 44) = *((unsigned char *)v40 + 44);
          v36 += 48;
        }
        while (v10 + v36 != v9);
        v13 += v36;
        uint64_t v26 = *((void *)&v73 + 1);
      }
      while (v26 != v13)
      {
        if (*(char *)(v26 - 25) < 0) {
          (*(void (**)(void, void, uint64_t))(**(void **)(v26 - 24) + 40))(*(void *)(v26 - 24), *(void *)(v26 - 48), *(void *)(v26 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        }
        v26 -= 48;
      }
    }
    else
    {
      if (*((void *)&v73 + 1) != (void)v73)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 16 * ((uint64_t)(*((void *)&v73 + 1) - v73) >> 4);
        do
        {
          uint64_t v32 = (void **)(v13 + v28);
          uint64_t v33 = (long long *)(v10 + v28);
          if (v10 != v13)
          {
            char v34 = *((unsigned char *)v33 + 23);
            if (*((char *)v32 + 23) < 0)
            {
              if (v34 >= 0) {
                uint64_t v30 = (void *)(v10 + v28);
              }
              else {
                uint64_t v30 = *(void **)(v10 + v28);
              }
              if (v34 >= 0) {
                size_t v31 = *((unsigned __int8 *)v33 + 23);
              }
              else {
                size_t v31 = *(void *)(v10 + v28 + 8);
              }
              uint64_t v32 = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v32, v30, v31);
            }
            else if ((*((unsigned char *)v33 + 23) & 0x80) != 0)
            {
              uint64_t v32 = (void **)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v32, *(void **)(v10 + v28), *(void *)(v10 + v28 + 8));
            }
            else
            {
              long long v35 = *v33;
              v32[2] = (void *)*((void *)v33 + 2);
              *(_OWORD *)uint64_t v32 = v35;
            }
          }
          v32[4] = (void *)*((void *)v33 + 4);
          *((unsigned char *)v32 + 40) = *((unsigned char *)v33 + 40);
          *((unsigned char *)v32 + 41) = *((unsigned char *)v33 + 41);
          *((unsigned char *)v32 + 42) = *((unsigned char *)v33 + 42);
          *((unsigned char *)v32 + 43) = *((unsigned char *)v33 + 43);
          *((unsigned char *)v32 + 44) = *((unsigned char *)v33 + 44);
          v28 += 48;
        }
        while (v29 != v28);
        uint64_t v13 = *((void *)&v73 + 1);
      }
      uint64_t v51 = v10 + 48 * v27;
      uint64_t v52 = v13;
      if (v51 != v9)
      {
        uint64_t v53 = 0;
        do
        {
          uint64_t v56 = v13 + v53;
          if (v13 + v53)
          {
            uint64_t v57 = (long long *)(v51 + v53);
            *(void *)(v13 + v53 + 24) = *(void *)(v51 + v53 + 24);
            if (*(char *)(v51 + v53 + 23) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v56, *(void **)(v51 + v53), *(void *)(v51 + v53 + 8));
            }
            else
            {
              long long v54 = *v57;
              *(void *)(v56 + 16) = *((void *)v57 + 2);
              *(_OWORD *)uint64_t v56 = v54;
            }
            uint64_t v55 = v13 + v53;
            *(void *)(v55 + 32) = *(void *)(v51 + v53 + 32);
            *(_DWORD *)(v55 + 40) = *(_DWORD *)(v51 + v53 + 40);
            *(unsigned char *)(v55 + 44) = *(unsigned char *)(v51 + v53 + 44);
          }
          v53 += 48;
        }
        while (v51 + v53 != v9);
        uint64_t v52 = v13 + v53;
      }
      uint64_t v13 = v52;
    }
  }
  else
  {
    if ((void)v73)
    {
      uint64_t v14 = *((void *)&v73 + 1);
      if (*((void *)&v73 + 1) == (void)v73)
      {
        uint64_t v15 = v73;
      }
      else
      {
        do
        {
          if (*(char *)(v14 - 25) < 0) {
            (*(void (**)(void, void, uint64_t))(**(void **)(v14 - 24) + 40))(*(void *)(v14 - 24), *(void *)(v14 - 48), *(void *)(v14 - 32) & 0x7FFFFFFFFFFFFFFFLL);
          }
          v14 -= 48;
        }
        while (v14 != v13);
        uint64_t v15 = v73;
      }
      *((void *)&v73 + 1) = v13;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 40))(v75, v15);
      uint64_t v12 = 0;
      long long v73 = 0uLL;
      uint64_t v74 = 0;
    }
    if (v11 > 0x555555555555555) {
      goto LABEL_136;
    }
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 4);
    uint64_t v44 = 2 * v43;
    if (2 * v43 <= v11) {
      uint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 4);
    }
    unint64_t v45 = v43 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v44;
    if (v45 > 0x555555555555555) {
LABEL_136:
    }
      abort();
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v75 + 16))(v75, 48 * v45, 8);
    *(void *)&long long v73 = v13;
    *((void *)&v73 + 1) = v13;
    uint64_t v74 = v13 + 48 * v45;
    if (v10 != v9)
    {
      uint64_t v46 = 0;
      do
      {
        uint64_t v49 = v13 + v46;
        if (v13 + v46)
        {
          uint64_t v50 = (long long *)(v10 + v46);
          *(void *)(v13 + v46 + 24) = *(void *)(v10 + v46 + 24);
          if (*(char *)(v10 + v46 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v49, *(void **)(v10 + v46), *(void *)(v10 + v46 + 8));
          }
          else
          {
            long long v47 = *v50;
            *(void *)(v49 + 16) = *((void *)v50 + 2);
            *(_OWORD *)uint64_t v49 = v47;
          }
          uint64_t v48 = v13 + v46;
          *(void *)(v48 + 32) = *(void *)(v10 + v46 + 32);
          *(_DWORD *)(v48 + 40) = *(_DWORD *)(v10 + v46 + 40);
          *(unsigned char *)(v48 + 44) = *(unsigned char *)(v10 + v46 + 44);
        }
        v46 += 48;
      }
      while (v10 + v46 != v9);
      v13 += v46;
      *((void *)&v73 + 1) = v13;
      goto LABEL_98;
    }
  }
  *((void *)&v73 + 1) = v13;
LABEL_98:
  unsigned int v8 = a5;
LABEL_99:
  if (v13 - (void)v73 == 48)
  {
    md::LabelStyle::shieldIcon((uint64_t *)&v71, a4, a2, a3, (void **)v73, 1, -1);
    if ((void)v71)
    {
      {
        operator new();
      }
      uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 800, 8);
      md::ShieldIconLabelPart::ShieldIconLabelPart(v58, &v71, a4, v8);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 176))(v58, 2);
      uint64_t v59 = (std::__shared_weak_count *)*((void *)&v71 + 1);
      if (!*((void *)&v71 + 1)) {
        goto LABEL_123;
      }
      goto LABEL_121;
    }
    uint64_t v58 = 0;
    uint64_t v59 = (std::__shared_weak_count *)*((void *)&v71 + 1);
    if (*((void *)&v71 + 1))
    {
LABEL_121:
      if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v73) >> 4) < 2)
  {
    uint64_t v58 = 0;
  }
  else
  {
    {
      operator new();
    }
    uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 704, 8);
    md::MultipleShieldLabelPart::MultipleShieldLabelPart(v58, v8);
    if (v58)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 176))(v58, 2);
      uint64_t v61 = *((void *)&v73 + 1);
      uint64_t v60 = v73;
      if (*((void *)&v73 + 1) == (void)v73) {
        goto LABEL_124;
      }
      uint64_t v62 = 0;
      unint64_t v63 = 0;
      do
      {
        md::LabelStyle::shieldIcon((uint64_t *)&v71, a4, a2, a3, (void **)(v60 + v62), 1, -1);
        if ((void)v71)
        {
          {
            operator new();
          }
          uint64_t v64 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 800, 8);
          md::ShieldIconLabelPart::ShieldIconLabelPart((uint64_t)v64, &v71, a4, a5);
          if (v64)
          {
            (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v64 + 176))(v64, 2);
            md::CompositeLabelPart::addLabelPart(v58, v64);
          }
        }
        uint64_t v65 = (std::__shared_weak_count *)*((void *)&v71 + 1);
        if (*((void *)&v71 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        ++v63;
        uint64_t v60 = v73;
        v62 += 48;
      }
      while (v63 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v73 + 1) - v73) >> 4));
    }
  }
LABEL_123:
  uint64_t v61 = v73;
LABEL_124:
  if (v61)
  {
    uint64_t v66 = *((void *)&v73 + 1);
    uint64_t v67 = v61;
    if (*((void *)&v73 + 1) != v61)
    {
      do
      {
        if (*(char *)(v66 - 25) < 0) {
          (*(void (**)(void, void, uint64_t))(**(void **)(v66 - 24) + 40))(*(void *)(v66 - 24), *(void *)(v66 - 48), *(void *)(v66 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        }
        v66 -= 48;
      }
      while (v66 != v61);
      uint64_t v67 = v73;
    }
    *((void *)&v73 + 1) = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v75 + 40))(v75, v67, v74 - v67);
  }
  return v58;
}

void sub_1A190DFE0(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v9 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 40))(v9, v7, 704);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::UniLineLabelFeature::externalFeature(md::UniLineLabelFeature *this)
{
  return *((void *)this + 57);
}

char *md::UniLineLabelFeature::shieldsForFeature(char **a1, uint64_t a2, int a3)
{
  unsigned int v6 = a1 + 3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    operator new();
  }
  uint64_t result = (char *)mdm::Allocator::instance(void)::alloc;
  void *v6 = mdm::Allocator::instance(void)::alloc;
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 72) >= 8u) {
      unint64_t v8 = 8;
    }
    else {
      unint64_t v8 = *(unsigned __int8 *)(a2 + 72);
    }
    uint64_t v9 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < v8)
    {
      uint64_t v10 = a1[1];
      uint64_t result = (char *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(*(void *)result + 16))(result, 48 * v8, 8);
      unint64_t v11 = &result[v10 - v9];
      uint64_t v12 = &result[48 * v8];
      uint64_t v13 = *a1;
      uint64_t v14 = a1[1];
      if (v14 == *a1)
      {
        *a1 = v11;
        a1[1] = v11;
        uint64_t v20 = a1[2];
        a1[2] = v12;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          uint64_t v16 = &v11[v15];
          double v17 = &v14[v15];
          long long v18 = *(_OWORD *)&v14[v15 - 32];
          *((_OWORD *)v16 - 3) = *(_OWORD *)&v14[v15 - 48];
          *((_OWORD *)v16 - 2) = v18;
          *((void *)v17 - 5) = 0;
          *((void *)v17 - 4) = 0;
          *((void *)v17 - 6) = 0;
          *((void *)v16 - 2) = *(void *)&v14[v15 - 16];
          *((_DWORD *)v16 - 2) = *(_DWORD *)&v14[v15 - 8];
          *(v16 - 4) = v14[v15 - 4];
          v15 -= 48;
        }
        while (&v14[v15] != v13);
        uint64_t v14 = *a1;
        unsigned __int8 v19 = a1[1];
        *a1 = &v11[v15];
        a1[1] = v11;
        uint64_t v20 = a1[2];
        a1[2] = v12;
        while (v19 != v14)
        {
          if (*(v19 - 25) < 0) {
            uint64_t result = (char *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)v19 - 3) + 40))(*((void *)v19 - 3), *((void *)v19 - 6), *((void *)v19 - 4) & 0x7FFFFFFFFFFFFFFFLL);
          }
          v19 -= 48;
        }
      }
      if (v14) {
        uint64_t result = (char *)(*(uint64_t (**)(void, char *, int64_t))(*(void *)*v6 + 40))(*v6, v14, v20 - v14);
      }
    }
    if (*(unsigned char *)(a2 + 72))
    {
      unint64_t v21 = 0;
      unint64_t v45 = v6;
      do
      {
        uint64_t v49 = 0;
        __s = 0;
        geo::codec::featureGetNativeShield(a2, v21, &__s, &v49, 0);
        uint64_t result = (char *)localizedLabel((unint64_t)&v46, (uint64_t *)a2, __s, a3, 0);
        uint64_t v22 = v49;
        if (!v49)
        {
          uint64_t v23 = HIBYTE(v47);
          int v24 = SHIBYTE(v47);
          if (v47 < 0) {
            uint64_t v23 = *((void *)&v46 + 1);
          }
          if (!v23) {
            goto LABEL_58;
          }
        }
        uint64_t v26 = a1[1];
        uint64_t v25 = a1[2];
        if (v26 >= v25)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *a1) >> 4);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0x555555555555555) {
            abort();
          }
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 4);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x2AAAAAAAAAAAAAALL) {
            uint64_t v30 = 0x555555555555555;
          }
          else {
            uint64_t v30 = v28;
          }
          uint64_t v53 = v6;
          if (v30) {
            size_t v31 = (char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v6 + 16))(*v6, 48 * v30, 8);
          }
          else {
            size_t v31 = 0;
          }
          uint64_t result = &v31[48 * v27];
          __s = v31;
          uint64_t v51 = result;
          *(void *)&long long v52 = result;
          *((void *)&v52 + 1) = &v31[48 * v30];
          if (v31)
          {
            uint64_t v32 = v49;
            *((void *)result + 3) = v48;
            if (SHIBYTE(v47) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)result, (void *)v46, *((unint64_t *)&v46 + 1));
              uint64_t result = v51;
              uint64_t v33 = (char *)v52;
            }
            else
            {
              *(_OWORD *)uint64_t result = v46;
              *((void *)result + 2) = v47;
              uint64_t v33 = &v31[48 * v27];
            }
            long long v35 = &v31[48 * v27];
            *((void *)v35 + 4) = v32;
            *((_DWORD *)v35 + 10) = 0;
            v35[44] = 1;
          }
          else
          {
            uint64_t v33 = result;
          }
          char v34 = v33 + 48;
          *(void *)&long long v52 = v33 + 48;
          uint64_t v36 = *a1;
          long long v37 = a1[1];
          unsigned int v6 = v45;
          if (v37 == *a1)
          {
            *a1 = result;
            a1[1] = v34;
            unint64_t v43 = a1[2];
            a1[2] = (char *)*((void *)&v52 + 1);
            if (v37) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v38 = 0;
            do
            {
              uint64_t v39 = &result[v38];
              v40 = &v37[v38];
              long long v41 = *(_OWORD *)&v37[v38 - 32];
              *((_OWORD *)v39 - 3) = *(_OWORD *)&v37[v38 - 48];
              *((_OWORD *)v39 - 2) = v41;
              *((void *)v40 - 5) = 0;
              *((void *)v40 - 4) = 0;
              *((void *)v40 - 6) = 0;
              *((void *)v39 - 2) = *(void *)&v37[v38 - 16];
              *((_DWORD *)v39 - 2) = *(_DWORD *)&v37[v38 - 8];
              *(v39 - 4) = v37[v38 - 4];
              v38 -= 48;
            }
            while (&v37[v38] != v36);
            long long v37 = *a1;
            long long v42 = a1[1];
            *a1 = &result[v38];
            unint64_t v43 = a1[2];
            uint64_t v44 = (char *)v52;
            *(_OWORD *)(a1 + 1) = v52;
            char v34 = v44;
            while (v42 != v37)
            {
              if (*(v42 - 25) < 0) {
                uint64_t result = (char *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)v42 - 3) + 40))(*((void *)v42 - 3), *((void *)v42 - 6), *((void *)v42 - 4) & 0x7FFFFFFFFFFFFFFFLL);
              }
              v42 -= 48;
            }
            if (v37) {
LABEL_56:
            }
              uint64_t result = (char *)(*(uint64_t (**)(void, char *, int64_t))(*(void *)*v53 + 40))(*v53, v37, v43 - v37);
          }
        }
        else
        {
          if (v26)
          {
            *((void *)v26 + 3) = v48;
            if (SHIBYTE(v47) < 0)
            {
              uint64_t result = (char *)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v26, (void *)v46, *((unint64_t *)&v46 + 1));
            }
            else
            {
              *(_OWORD *)uint64_t v26 = v46;
              *((void *)v26 + 2) = v47;
            }
            *((void *)v26 + 4) = v22;
            *((_DWORD *)v26 + 10) = 0;
            v26[44] = 1;
          }
          char v34 = v26 + 48;
          a1[1] = v26 + 48;
        }
        a1[1] = v34;
        int v24 = SHIBYTE(v47);
        if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a1) >> 4) > 7)
        {
          if (SHIBYTE(v47) < 0) {
            return (char *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v48 + 40))(v48, v46, v47 & 0x7FFFFFFFFFFFFFFFLL);
          }
          return result;
        }
LABEL_58:
        if (v24 < 0) {
          uint64_t result = (char *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v48 + 40))(v48, v46, v47 & 0x7FFFFFFFFFFFFFFFLL);
        }
        ++v21;
      }
      while (v21 < *(unsigned __int8 *)(a2 + 72));
    }
  }
  return result;
}

void sub_1A190E694(_Unwind_Exception *a1)
{
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

long long *md::UniLineLabelFeature::updateText(md::UniLineLabelFeature *this, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 44) == *((void *)this + 45) && geo::codec::featureGetNativeShieldCount(a2))
  {
    md::UniLineLabelFeature::shieldsForFeature((char **)&v18, a2, a3);
    unsigned int v6 = (uint64_t *)((char *)this + 352);
    uint64_t v7 = *((void *)this + 44);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 45);
      uint64_t v9 = *((void *)this + 44);
      if (v8 != v7)
      {
        do
        {
          if (*(char *)(v8 - 25) < 0) {
            (*(void (**)(void, void, uint64_t))(**(void **)(v8 - 24) + 40))(*(void *)(v8 - 24), *(void *)(v8 - 48), *(void *)(v8 - 32) & 0x7FFFFFFFFFFFFFFFLL);
          }
          v8 -= 48;
        }
        while (v8 != v7);
        uint64_t v9 = *v6;
      }
      *((void *)this + 45) = v7;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 47) + 40))(*((void *)this + 47), v9, *((void *)this + 46) - v9);
      uint64_t *v6 = 0;
      *((void *)this + 45) = 0;
      *((void *)this + 46) = 0;
    }
    *((_OWORD *)this + 22) = v18;
    *((void *)this + 46) = v19;
  }
  uint64_t v10 = *((void *)this + 48);
  for (uint64_t i = *((void *)this + 49); i != v10; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), *(void *)(i - 32), *(void *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(i - 40) + 40))(*(void *)(i - 40), *(void *)(i - 64), *(void *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((void *)this + 49) = v10;
  uint64_t v12 = *((void *)this + 24);
  *(void *)&long long v18 = &unk_1EF51E260;
  *((void *)&v18 + 1) = this;
  uint64_t v19 = a3;
  uint64_t v20 = &v18;
  uint64_t v13 = *(void *)(v12 + 128);
  uint64_t v14 = *(void *)(v12 + 136);
  if (v13 == v14) {
    return (long long *)(*(uint64_t (**)(long long *))(v18 + 32))(&v18);
  }
  do
  {
    uint64_t v15 = *(void *)(v13 + 16);
    for (uint64_t j = *(void *)(v13 + 24); v15 != j; v15 += 8)
    {
      if (!v20)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(long long *, uint64_t))(*(void *)v20 + 48))(v20, v15);
    }
    v13 += 112;
  }
  while (v13 != v14);
  uint64_t result = v20;
  if (v20 == &v18) {
    return (long long *)(*(uint64_t (**)(long long *))(v18 + 32))(&v18);
  }
  if (v20) {
    return (long long *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
  }
  return result;
}

void sub_1A190E9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::UniLineLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(*a2 + 32))
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 664))(*(void *)(result + 8));
      *(unsigned char *)(v2 + 38) = result;
    }
  }
  return result;
}

uint64_t md::UniLineLabelFeature::textIndexForFeature(uint64_t a1, uint64_t *a2, int a3)
{
  __src[0] = 0;
  __src[1] = 0;
  uint64_t v59 = 0;
  {
    operator new();
  }
  uint64_t v60 = mdm::Allocator::instance(void)::alloc;
  long long __dst = 0uLL;
  uint64_t v56 = 0;
  {
    operator new();
  }
  uint64_t v57 = mdm::Allocator::instance(void)::alloc;
  if (*(unsigned char *)(a1 + 449) != 1)
  {
    uint64_t v7 = *(void *)(a1 + 472);
    if (v7)
    {
      if (__src != (void **)(v7 + 8))
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)__src, *(void **)(v7 + 8), *(void *)(v7 + 16));
          uint64_t v7 = *(void *)(a1 + 472);
        }
        else
        {
          long long v8 = *(_OWORD *)(v7 + 8);
          uint64_t v59 = *(void *)(v7 + 24);
          *(_OWORD *)__src = v8;
        }
      }
      uint64_t v25 = (long long *)(v7 + 40);
      if (&__dst != (long long *)(v7 + 40))
      {
        size_t v26 = *(unsigned __int8 *)(v7 + 63);
        if (SHIBYTE(v56) < 0)
        {
          unint64_t v28 = *(long long **)(v7 + 40);
          size_t v27 = *(void *)(v7 + 48);
          if ((v26 & 0x80u) == 0) {
            unint64_t v29 = v25;
          }
          else {
            unint64_t v29 = v28;
          }
          if ((v26 & 0x80u) == 0) {
            size_t v30 = v26;
          }
          else {
            size_t v30 = v27;
          }
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&__dst, v29, v30);
        }
        else if ((v26 & 0x80) != 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)&__dst, *(void **)(v7 + 40), *(void *)(v7 + 48));
        }
        else
        {
          long long __dst = *v25;
          uint64_t v56 = *(void *)(v7 + 56);
        }
      }
    }
    else
    {
      double v9 = md::LabelFeature::textFromFeature((unint64_t)v49, a2, a3, (uint64_t)&__dst, 0);
      if (SHIBYTE(v59) < 0) {
        (*(void (**)(uint64_t, void *, uint64_t, double))(*(void *)v60 + 40))(v60, __src[0], v59 & 0x7FFFFFFFFFFFFFFFLL, v9);
      }
      *(_OWORD *)__src = *(_OWORD *)v49;
      uint64_t v59 = v50;
    }
    uint64_t v51 = v60;
    if (SHIBYTE(v59) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v49, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v49 = *(_OWORD *)__src;
      uint64_t v50 = v59;
    }
    uint64_t v54 = v57;
    if (SHIBYTE(v56) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v52, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v52 = __dst;
      uint64_t v53 = v56;
    }
    long long v35 = (void *)HIBYTE(v50);
    int v36 = SHIBYTE(v50);
    long long v37 = v49[1];
    if (v50 < 0) {
      long long v35 = v49[1];
    }
    if (v35)
    {
      uint64_t v39 = *(unsigned __int8 **)(a1 + 384);
      unint64_t v38 = *(void *)(a1 + 392);
      if (v39 == (unsigned __int8 *)v38)
      {
        unsigned __int8 v24 = 0;
LABEL_114:
        if (v38 >= *(void *)(a1 + 400))
        {
          uint64_t v42 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)(a1 + 384), (long long *)v49);
        }
        else
        {
          if (v38)
          {
            *(void *)(v38 + 24) = v51;
            if (v36 < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v38, v49[0], (unint64_t)v37);
            }
            else
            {
              long long v41 = *(_OWORD *)v49;
              *(void *)(v38 + 16) = v50;
              *(_OWORD *)unint64_t v38 = v41;
            }
            unint64_t v43 = (void **)(v38 + 32);
            *(void *)(v38 + 56) = v54;
            if (SHIBYTE(v53) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v43, (void *)v52, *((unint64_t *)&v52 + 1));
            }
            else
            {
              long long v44 = v52;
              *(void *)(v38 + 48) = v53;
              *(_OWORD *)unint64_t v43 = v44;
            }
          }
          uint64_t v42 = v38 + 64;
          *(void *)(a1 + 392) = v38 + 64;
        }
        *(void *)(a1 + 392) = v42;
        if ((SHIBYTE(v53) & 0x80000000) == 0)
        {
LABEL_109:
          if ((v36 & 0x80000000) == 0) {
            goto LABEL_110;
          }
          goto LABEL_126;
        }
LABEL_125:
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v54 + 40))(v54, v52, v53 & 0x7FFFFFFFFFFFFFFFLL);
        if ((v36 & 0x80000000) == 0)
        {
LABEL_110:
          if (SHIBYTE(v56) < 0) {
            goto LABEL_63;
          }
          goto LABEL_111;
        }
LABEL_126:
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v51 + 40))(v51, v49[0], v50 & 0x7FFFFFFFFFFFFFFFLL);
        if (SHIBYTE(v56) < 0) {
          goto LABEL_63;
        }
LABEL_111:
        if ((SHIBYTE(v59) & 0x80000000) == 0) {
          return v24;
        }
        goto LABEL_64;
      }
      unsigned __int8 v24 = 0;
      while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v39, (unsigned __int8 *)v49) & 1) == 0)
      {
        ++v24;
        v39 += 64;
        if (v39 == (unsigned __int8 *)v38)
        {
          if (v24 <= 0x64u) {
            goto LABEL_114;
          }
          unsigned __int8 v24 = -1;
          if ((SHIBYTE(v53) & 0x80000000) == 0) {
            goto LABEL_109;
          }
          goto LABEL_125;
        }
      }
    }
    else
    {
      unsigned __int8 v24 = -1;
    }
    if ((SHIBYTE(v53) & 0x80000000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_125;
  }
  double v6 = md::LabelFeature::textFromFeature((unint64_t)v49, a2, a3, (uint64_t)&__dst, 0);
  if (SHIBYTE(v59) < 0) {
    (*(void (**)(uint64_t, void *, uint64_t, double))(*(void *)v60 + 40))(v60, __src[0], v59 & 0x7FFFFFFFFFFFFFFFLL, v6);
  }
  uint64_t v59 = v50;
  *(_OWORD *)__src = *(_OWORD *)v49;
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if (HIBYTE(v50))
    {
      *(_OWORD *)uint64_t v49 = *(_OWORD *)__src;
      uint64_t v50 = v59;
      uint64_t v51 = v60;
      goto LABEL_18;
    }
LABEL_20:
    unsigned __int8 v10 = -1;
    goto LABEL_35;
  }
  if (!__src[1]) {
    goto LABEL_20;
  }
  uint64_t v51 = v60;
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v49, __src[0], (unint64_t)__src[1]);
LABEL_18:
  uint64_t v54 = v57;
  if (SHIBYTE(v56) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v52, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v52 = __dst;
    uint64_t v53 = v56;
  }
  unint64_t v11 = (void *)HIBYTE(v50);
  int v12 = SHIBYTE(v50);
  uint64_t v13 = v49[1];
  if (v50 < 0) {
    unint64_t v11 = v49[1];
  }
  if (!v11)
  {
    unsigned __int8 v10 = -1;
    goto LABEL_33;
  }
  uint64_t v15 = *(unsigned __int8 **)(a1 + 384);
  unint64_t v14 = *(void *)(a1 + 392);
  if (v15 != (unsigned __int8 *)v14)
  {
    unsigned __int8 v10 = 0;
    while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v15, (unsigned __int8 *)v49) & 1) == 0)
    {
      ++v10;
      v15 += 64;
      if (v15 == (unsigned __int8 *)v14)
      {
        if (v10 <= 0x64u) {
          goto LABEL_78;
        }
        unsigned __int8 v10 = -1;
        if ((SHIBYTE(v53) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_134;
      }
    }
LABEL_33:
    if ((SHIBYTE(v53) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_134:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v54 + 40))(v54, v52, v53 & 0x7FFFFFFFFFFFFFFFLL);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_135;
  }
  unsigned __int8 v10 = 0;
LABEL_78:
  if (v14 >= *(void *)(a1 + 400))
  {
    uint64_t v33 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)(a1 + 384), (long long *)v49);
  }
  else
  {
    if (v14)
    {
      *(void *)(v14 + 24) = v51;
      if (v12 < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v14, v49[0], (unint64_t)v13);
      }
      else
      {
        long long v31 = *(_OWORD *)v49;
        *(void *)(v14 + 16) = v50;
        *(_OWORD *)unint64_t v14 = v31;
      }
      unint64_t v45 = (void **)(v14 + 32);
      *(void *)(v14 + 56) = v54;
      if (SHIBYTE(v53) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v45, (void *)v52, *((unint64_t *)&v52 + 1));
      }
      else
      {
        long long v46 = v52;
        *(void *)(v14 + 48) = v53;
        *(_OWORD *)unint64_t v45 = v46;
      }
    }
    uint64_t v33 = v14 + 64;
    *(void *)(a1 + 392) = v14 + 64;
  }
  *(void *)(a1 + 392) = v33;
  if (SHIBYTE(v53) < 0) {
    goto LABEL_134;
  }
LABEL_34:
  if ((v12 & 0x80000000) == 0) {
    goto LABEL_35;
  }
LABEL_135:
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v51 + 40))(v51, v49[0], v50 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_35:
  double v16 = md::LabelFeature::textFromFeature((unint64_t)v49, a2, a3, (uint64_t)&__dst, 1u);
  if (SHIBYTE(v59) < 0) {
    (*(void (**)(uint64_t, void *, uint64_t, double))(*(void *)v60 + 40))(v60, __src[0], v59 & 0x7FFFFFFFFFFFFFFFLL, v16);
  }
  uint64_t v59 = v50;
  *(_OWORD *)__src = *(_OWORD *)v49;
  unsigned __int8 v17 = HIBYTE(v50);
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if (!HIBYTE(v50)) {
      goto LABEL_59;
    }
    *(_OWORD *)uint64_t v49 = *(_OWORD *)__src;
    uint64_t v50 = v59;
    uint64_t v51 = v60;
LABEL_42:
    uint64_t v54 = v57;
    if (SHIBYTE(v56) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v52, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v52 = __dst;
      uint64_t v53 = v56;
    }
    long long v18 = (void *)HIBYTE(v50);
    int v19 = SHIBYTE(v50);
    uint64_t v20 = v49[1];
    if (v50 < 0) {
      long long v18 = v49[1];
    }
    if (v18)
    {
      uint64_t v22 = *(unsigned __int8 **)(a1 + 384);
      unint64_t v21 = *(void *)(a1 + 392);
      if (v22 == (unsigned __int8 *)v21)
      {
        unsigned __int8 v23 = 0;
LABEL_83:
        if (v21 >= *(void *)(a1 + 400))
        {
          uint64_t v34 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)(a1 + 384), (long long *)v49);
        }
        else
        {
          if (v21)
          {
            *(void *)(v21 + 24) = v51;
            if (v19 < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v21, v49[0], (unint64_t)v20);
            }
            else
            {
              long long v32 = *(_OWORD *)v49;
              *(void *)(v21 + 16) = v50;
              *(_OWORD *)unint64_t v21 = v32;
            }
            uint64_t v47 = (void **)(v21 + 32);
            *(void *)(v21 + 56) = v54;
            if (SHIBYTE(v53) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v47, (void *)v52, *((unint64_t *)&v52 + 1));
            }
            else
            {
              long long v48 = v52;
              *(void *)(v21 + 48) = v53;
              *(_OWORD *)uint64_t v47 = v48;
            }
          }
          uint64_t v34 = v21 + 64;
          *(void *)(a1 + 392) = v21 + 64;
        }
        *(void *)(a1 + 392) = v34;
        if ((SHIBYTE(v53) & 0x80000000) == 0)
        {
LABEL_57:
          if ((v19 & 0x80000000) == 0)
          {
LABEL_58:
            unsigned __int8 v17 = v23 != 0xFF;
            goto LABEL_59;
          }
LABEL_143:
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v51 + 40))(v51, v49[0], v50 & 0x7FFFFFFFFFFFFFFFLL);
          goto LABEL_58;
        }
LABEL_142:
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v54 + 40))(v54, v52, v53 & 0x7FFFFFFFFFFFFFFFLL);
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_58;
        }
        goto LABEL_143;
      }
      unsigned __int8 v23 = 0;
      while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v22, (unsigned __int8 *)v49) & 1) == 0)
      {
        ++v23;
        v22 += 64;
        if (v22 == (unsigned __int8 *)v21)
        {
          if (v23 <= 0x64u) {
            goto LABEL_83;
          }
          unsigned __int8 v23 = -1;
          if ((SHIBYTE(v53) & 0x80000000) == 0) {
            goto LABEL_57;
          }
          goto LABEL_142;
        }
      }
    }
    else
    {
      unsigned __int8 v23 = -1;
    }
    if ((SHIBYTE(v53) & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_142;
  }
  if (__src[1])
  {
    uint64_t v51 = v60;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v49, __src[0], (unint64_t)__src[1]);
    goto LABEL_42;
  }
  unsigned __int8 v17 = 0;
LABEL_59:
  if (((v10 != 0xFF) & v17) != 0) {
    unsigned __int8 v24 = v10;
  }
  else {
    unsigned __int8 v24 = -1;
  }
  if ((SHIBYTE(v56) & 0x80000000) == 0) {
    goto LABEL_111;
  }
LABEL_63:
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v57 + 40))(v57, __dst, v56 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v59) < 0) {
LABEL_64:
  }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v60 + 40))(v60, __src[0], v59 & 0x7FFFFFFFFFFFFFFFLL);
  return v24;
}

void sub_1A190F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (*(char *)(v25 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v25 + 24) + 40))(*(void *)(v25 + 24), *(void *)v25, *(void *)(v25 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v24 + 392) = v25;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)&a9);
  if (SHIBYTE(a19) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a20 + 40))(a20, a17, a19 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(a23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((SHIBYTE(a23) & 0x80000000) == 0)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a24 + 40))(a24, a21, a23 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(a1);
}

double md::LabelFeature::textFromFeature(unint64_t a1, uint64_t *a2, int a3, uint64_t a4, unsigned int a5)
{
  long long v18 = 0;
  __s = 0;
  geo::codec::featureGetNativeLabel((uint64_t)a2, a5, &__s, &v18);
  localizedLabel(a1, a2, __s, a3, &v18);
  if (v18) {
    double v9 = v18;
  }
  else {
    double v9 = "";
  }
  {
    operator new();
  }
  size_t v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v12 = (long long *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, v13 + 1, 1);
    *((void *)&v16 + 1) = v11;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long v16 = v12;
    goto LABEL_12;
  }
  HIBYTE(v17) = v10;
  int v12 = &v16;
  if (v10) {
LABEL_12:
  }
    memmove(v12, v9, v11);
  *((unsigned char *)v12 + v11) = 0;
  if (*(char *)(a4 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(a4 + 24) + 40))(*(void *)(a4 + 24), *(void *)a4, *(void *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  double result = *(double *)&v16;
  *(_OWORD *)a4 = v16;
  *(void *)(a4 + 16) = v17;
  return result;
}

void sub_1A190F794(_Unwind_Exception *a1)
{
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_string(v1);
  _Unwind_Resume(a1);
}

unint64_t localizedLabel(unint64_t result, uint64_t *a2, char *__s, int a4, void *a5)
{
  uint64_t v5 = result;
  if (__s)
  {
    if (a4)
    {
      uint64_t v19 = 0;
      __sa = 0;
      geo::codec::featureGetLocalizedLabelForNativeLabel(a2, (unint64_t)__s, &__sa, &v19);
      long long v8 = __sa;
      if (__sa)
      {
        if (*__sa)
        {
          if (a5) {
            *a5 = v19;
          }
          {
            operator new();
          }
          uint64_t v9 = mdm::Allocator::instance(void)::alloc;
          *(void *)(v5 + 24) = mdm::Allocator::instance(void)::alloc;
          double result = strlen(v8);
          if (result <= 0x7FFFFFFFFFFFFFF7)
          {
            size_t v10 = result;
            if (result >= 0x17)
            {
              uint64_t v16 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((result | 7) != 0x17) {
                uint64_t v16 = result | 7;
              }
              uint64_t v17 = v16 + 1;
              uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v16 + 1, 1);
              *(void *)(v5 + 8) = v10;
              *(void *)(v5 + 16) = v17 | 0x8000000000000000;
              *(void *)uint64_t v5 = v18;
              uint64_t v5 = v18;
            }
            else
            {
              *(unsigned char *)(v5 + 23) = result;
              if (!result) {
                goto LABEL_28;
              }
            }
            double result = (unint64_t)memmove((void *)v5, v8, v10);
LABEL_28:
            *(unsigned char *)(v5 + v10) = 0;
            return result;
          }
LABEL_29:
          abort();
        }
      }
    }
    {
      operator new();
    }
    uint64_t v11 = mdm::Allocator::instance(void)::alloc;
    *(void *)(v5 + 24) = mdm::Allocator::instance(void)::alloc;
    double result = strlen(__s);
    if (result > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_29;
    }
    size_t v12 = result;
    if (result >= 0x17)
    {
      uint64_t v13 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17) {
        uint64_t v13 = result | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13 + 1, 1);
      *(void *)(v5 + 8) = v12;
      *(void *)(v5 + 16) = v14 | 0x8000000000000000;
      *(void *)uint64_t v5 = v15;
      uint64_t v5 = v15;
    }
    else
    {
      *(unsigned char *)(v5 + 23) = result;
      if (!result) {
        goto LABEL_23;
      }
    }
    double result = (unint64_t)memmove((void *)v5, __s, v12);
LABEL_23:
    *(unsigned char *)(v5 + v12) = 0;
    return result;
  }
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  {
    if (result) {
      operator new();
    }
  }
  *(void *)(v5 + 24) = mdm::Allocator::instance(void)::alloc;
  return result;
}

void geo::codec::featureGetLocalizedLabelForNativeLabel(uint64_t *a1, unint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    long long v8 = (std::__shared_weak_count *)a1[1];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      uint64_t v11 = v9;
      if (v9) {
        uint64_t v10 = *a1;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    geo::codec::vectorTileGetLocalizedLabelForNativeLabel(&v10, a2, a3, a4);
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A190FBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *geo::codec::vectorTileGetLocalizedLabelForNativeLabel(void *result, unint64_t a2, void *a3, void *a4)
{
  if (!a2) {
    goto LABEL_20;
  }
  double v6 = (void *)*result;
  if (!*result) {
    goto LABEL_20;
  }
  unint64_t v7 = v6[107];
  unint64_t v8 = v6[108];
  if (v7 <= a2)
  {
    BOOL v9 = v8 >= a2;
    BOOL v10 = v8 == a2;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v10 = 0;
  }
  if (v10 || !v9) {
    goto LABEL_20;
  }
  unint64_t v11 = a2 - v7;
  size_t v12 = (const void *)v6[135];
  uint64_t v13 = v6[136];
  unint64_t __key = v11;
  double result = bsearch(&__key, v12, (v13 - (uint64_t)v12) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
  if (!result) {
    goto LABEL_18;
  }
  unint64_t v14 = result[1];
  if (v14 == -1) {
    goto LABEL_18;
  }
  uint64_t v15 = v6 + 127;
  uint64_t v16 = 127;
  if ((result[3] & 1) == 0)
  {
    uint64_t v16 = 113;
    uint64_t v15 = v6 + 113;
  }
  uint64_t v17 = v6[v16];
  if (v14 >= v15[1] - v17)
  {
LABEL_18:
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_20;
  }
  if (a4) {
    *a4 = result[2];
  }
  if (!v17)
  {
LABEL_20:
    if (a3) {
      *a3 = 0;
    }
    if (a4) {
      *a4 = 0;
    }
    return result;
  }
  if (a3) {
    *a3 = v17 + v14;
  }
  return result;
}

void gss::StyleSheet<gss::ScenePropertyID>::decodeStyl(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v316 = *MEMORY[0x1E4F143B8];
  uint64_t v301 = 0;
  uint64_t v302 = (gss::Allocator *)gss::Allocator::instance((gss::Allocator *)a1);
  uint64_t v303 = 0;
  v300 = &v301;
  uint64_t v305 = 0;
  uint64_t v306 = (gss::Allocator *)gss::Allocator::instance(v302);
  uint64_t v307 = 0;
  v304 = &v305;
  uint64_t v308 = a2;
  uint64_t v309 = a3;
  uint64_t v291 = 0;
  v292 = (gss::Allocator *)gss::Allocator::instance(v306);
  uint64_t v293 = 0;
  uint64_t v290 = &v291;
  int v296 = 0;
  uint64_t v297 = gss::Allocator::instance(v292);
  uint64_t v298 = 0;
  int v295 = &v296;
  uint64_t v285 = a1;
  if ((gss::StylFile::parseHeader((uint64_t)&v300, a7) & 1) == 0)
  {
    uint64_t v24 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 386;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not decode STYL header.";
      _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    uint64_t v25 = (void *)std::ostream::operator<<();
    size_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)" STYL Parse Error Here: ", 24);
    size_t v27 = "Could not decode STYL header.";
    uint64_t v28 = 29;
    goto LABEL_107;
  }
  unint64_t v14 = gss::StylFile::chapter(&v300, 1u);
  geo::ibitstream::readVarInt((uint64_t)&v310, v14);
  if (!(_BYTE)v310)
  {
    unint64_t v29 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 414;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read stylesheet version.";
      _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    size_t v30 = (void *)std::ostream::operator<<();
    long long v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"Could not read stylesheet version.", 34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  int v286 = v311;
  uint64_t v15 = *((unsigned __int8 *)v14 + 24);
  char v16 = v15 + 1;
  unint64_t v17 = v14[1];
  uint64_t v18 = v14[2];
  unint64_t v19 = v18 + ((unint64_t)(v15 + 1) >> 3);
  unsigned int v20 = (v15 + 1) & 7;
  unint64_t v21 = v18 + 1;
  if (v19 < v18 + 1)
  {
    if (*((unsigned char *)v14 + 24)) {
      unint64_t v22 = v18 + 1;
    }
    else {
      unint64_t v22 = v14[2];
    }
    if (v17 < v22) {
      goto LABEL_22;
    }
    if (*((unsigned char *)v14 + 24))
    {
      if (v17 >= v21)
      {
        unsigned int v23 = (((1 << (8 - v15)) - 1) & *(unsigned __int8 *)(*v14 + v18)) << v15;
        goto LABEL_33;
      }
      goto LABEL_21;
    }
    if (v17 >= v21)
    {
      LOBYTE(v23) = *(unsigned char *)(*v14 + v18);
      goto LABEL_33;
    }
LABEL_21:
    v14[2] = v19;
    *((unsigned char *)v14 + 24) = v20;
LABEL_22:
    uint64_t v34 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 417;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read debug stylesheet flag.";
      _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    long long v35 = (void *)std::ostream::operator<<();
    int v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not read debug stylesheet flag.", 37);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  if (v15 <= 7) {
    unint64_t v33 = v18 + 1;
  }
  else {
    unint64_t v33 = v18 + 2;
  }
  if (v17 < v33) {
    goto LABEL_21;
  }
  uint64_t v38 = *v14;
  if (*((unsigned char *)v14 + 24))
  {
    int v39 = *(unsigned __int8 *)(v38 + v18);
    if (v21 >= v17) {
      int v40 = 0;
    }
    else {
      int v40 = *(unsigned __int8 *)(v38 + v21);
    }
    unsigned int v23 = ((v40 & (0xFFFF << (8 - v15))) >> (8 - v15)) | ((((1 << (8 - v15)) + 255) & v39) << v15);
    v14[2] = v21;
  }
  else
  {
    LOBYTE(v23) = *(unsigned char *)(v38 + v18);
  }
LABEL_33:
  v14[2] = v19;
  *((unsigned char *)v14 + 24) = v20;
  BOOL v287 = (v23 & 0x80) != 0;
  unint64_t v41 = v19 + 2;
  if (!v20) {
    unint64_t v41 = v19 + 1;
  }
  if (v17 < v41)
  {
    uint64_t v42 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 420;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of modes.";
      _os_log_impl(&dword_1A1780000, v42, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    unint64_t v43 = (void *)std::ostream::operator<<();
    long long v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not read number of modes.", 31);
LABEL_103:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  unint64_t v46 = v19 + 1;
  uint64_t v47 = *v14;
  unsigned int v48 = *(unsigned __int8 *)(*v14 + v19);
  if (v20)
  {
    if (v46 >= v17) {
      int v49 = 0;
    }
    else {
      int v49 = *(unsigned __int8 *)(v47 + v46);
    }
    unsigned int v48 = (((v49 & (0xFFFF << (8 - v20))) >> (8 - v20)) | ((((1 << (8 - v20)) - 1) & v48) << (v16 & 7)));
  }
  v14[2] = v46;
  if (v48)
  {
    int v50 = 0;
    unint64_t v17 = v14[1];
    while (1)
    {
      unint64_t v51 = v46;
      int v52 = v20;
      v46 += (v20 + 1) >> 3;
      LOBYTE(v20) = (v20 + 1) & 7;
      unint64_t v53 = v51 + 1;
      if (v46 >= v51 + 1)
      {
        if (v17 < v53) {
          goto LABEL_69;
        }
        if (!v52) {
          goto LABEL_61;
        }
        if (v53 >= v17) {
          int v55 = 0;
        }
        else {
          int v55 = *(unsigned __int8 *)(v47 + v53);
        }
        LODWORD(v51) = ((v55 & (0xFFFF << (8 - v52))) >> (8 - v52)) | ((((1 << (8 - v52)) + 255) & *(unsigned __int8 *)(v47 + v51)) << v52);
        v14[2] = v53;
      }
      else
      {
        if (v52) {
          unint64_t v54 = v51 + 1;
        }
        else {
          unint64_t v54 = v51;
        }
        if (v17 < v54) {
          goto LABEL_70;
        }
        if (!v52)
        {
          v14[2] = v51;
          if (v17 < v53)
          {
LABEL_69:
            v14[2] = v46;
            *((unsigned char *)v14 + 24) = v20;
LABEL_70:
            uint64_t v56 = GEOGetGeoCSSStyleSheetLog();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 423;
              __int16 v314 = 2082;
              *(void *)uint64_t v315 = "Could not read mode support flag.";
              _os_log_impl(&dword_1A1780000, v56, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
            uint64_t v57 = (void *)std::ostream::operator<<();
            uint64_t v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)" STYL Parse Error Here: ", 24);
            uint64_t v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"Could not read mode support flag.", 33);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)"\n", 1);
LABEL_104:
            uint64_t v86 = GEOGetGeoCSSStyleSheetLog();
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 387;
              __int16 v314 = 2082;
              *(void *)uint64_t v315 = "Could not decode stylesheet info.";
              _os_log_impl(&dword_1A1780000, v86, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
            unint64_t v87 = (void *)std::ostream::operator<<();
            size_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)" STYL Parse Error Here: ", 24);
            size_t v27 = "Could not decode stylesheet info.";
            uint64_t v28 = 33;
LABEL_107:
            uint64_t v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n", 1);
            buf[0] = 0;
            uint64_t v89 = *(void *)(a5 + 24);
            if (v89)
            {
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v89 + 48))(v89, buf);
              goto LABEL_109;
            }
            goto LABEL_350;
          }
LABEL_61:
          LOBYTE(v51) = *(unsigned char *)(v47 + v51);
          goto LABEL_64;
        }
        if (v17 < v53) {
          goto LABEL_69;
        }
        LODWORD(v51) = (((1 << (8 - v52)) - 1) & *(unsigned __int8 *)(v47 + v51)) << v52;
      }
LABEL_64:
      v14[2] = v46;
      *((unsigned char *)v14 + 24) = v20;
      if (v50 == 2)
      {
        *(unsigned char *)(a1 + 137) = (v51 & 0x80) != 0;
      }
      else if (v50 == 1)
      {
        *(unsigned char *)(a1 + 138) = (v51 & 0x80) != 0;
      }
      else
      {
        if (v50)
        {
          uint64_t v83 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 435;
            __int16 v314 = 2082;
            *(void *)uint64_t v315 = "Support specified for unknown map mode.";
            _os_log_impl(&dword_1A1780000, v83, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
          unint64_t v84 = (void *)std::ostream::operator<<();
          unint64_t v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)" STYL Parse Error Here: ", 24);
          unint64_t v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)"Support specified for unknown map mode.", 39);
          goto LABEL_103;
        }
        *(unsigned char *)(a1 + 136) = (v51 & 0x80) != 0;
      }
      if (++v50 >= v48)
      {
        unint64_t v46 = v14[2];
        unsigned int v20 = *((unsigned __int8 *)v14 + 24);
        break;
      }
    }
  }
  unint64_t v60 = v46 + 2;
  unint64_t v61 = v46 + 3;
  if (!v20) {
    unint64_t v61 = v46 + 2;
  }
  if (v17 < v61)
  {
    uint64_t v62 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 441;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of attributes.";
      _os_log_impl(&dword_1A1780000, v62, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    unint64_t v63 = (void *)std::ostream::operator<<();
    uint64_t v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)"Could not read number of attributes.", 36);
    goto LABEL_103;
  }
  uint64_t v65 = *v14;
  if (v20)
  {
    char v66 = 8 - v20;
    int v67 = 0xFFFF << (8 - v20);
    unint64_t v68 = v46 + 1;
    if (v46 + 1 >= v17) {
      int v69 = 0;
    }
    else {
      int v69 = *(unsigned __int8 *)(v65 + v68);
    }
    unsigned int v71 = ((v69 & v67) >> v66) | ((((1 << (8 - v20)) - 1) & *(unsigned char *)(v65 + v46)) << v20);
    v14[2] = v68;
    int v73 = *(unsigned __int8 *)(v65 + v68);
    if (v60 >= v17) {
      int v74 = 0;
    }
    else {
      int v74 = *(unsigned __int8 *)(v65 + v60);
    }
    unsigned int v72 = ((v74 & v67) >> v66) | ((((1 << (8 - v20)) + 255) & v73) << v20);
    unsigned int v70 = v20;
  }
  else
  {
    unsigned int v70 = 0;
    unsigned int v71 = *(unsigned __int16 *)(v65 + v46);
    unsigned int v72 = v71 >> 8;
  }
  v14[2] = v60;
  unint64_t v75 = v60 + ((v70 + 5) >> 3);
  unsigned int v76 = (v70 + 5) & 7;
  unint64_t v77 = v46 + 3;
  if (v75 < v77)
  {
    if (v20)
    {
      if (v17 >= v77)
      {
        unsigned int v78 = (((1 << (8 - v20)) - 1) & *(unsigned __int8 *)(v65 + v60)) << v70;
        goto LABEL_118;
      }
LABEL_112:
      v14[2] = v75;
      *((unsigned char *)v14 + 24) = v76;
      uint64_t v91 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 444;
        __int16 v314 = 2082;
        *(void *)uint64_t v315 = "Could not read number of bits for feature attribute.";
        _os_log_impl(&dword_1A1780000, v91, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
      unint64_t v92 = (void *)std::ostream::operator<<();
      uint64_t v93 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)"Could not read number of bits for feature attribute.", 52);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)"\n", 1);
      goto LABEL_104;
    }
    if (v17 < v77) {
      goto LABEL_112;
    }
    goto LABEL_115;
  }
  if (v20 <= 3) {
    unint64_t v79 = v77;
  }
  else {
    unint64_t v79 = v77 + 1;
  }
  if (v17 < v79) {
    goto LABEL_112;
  }
  if (!v20)
  {
LABEL_115:
    LOBYTE(v78) = *(unsigned char *)(v65 + v60);
    goto LABEL_118;
  }
  char v80 = 8 - v20;
  int v81 = *(unsigned __int8 *)(v65 + v60);
  if (v77 >= v17) {
    int v82 = 0;
  }
  else {
    int v82 = *(unsigned __int8 *)(v65 + v77);
  }
  unsigned int v78 = ((v82 & (0xFFFF << v80)) >> v80) | ((((1 << v80) + 255) & v81) << v70);
  v14[2] = v77;
LABEL_118:
  v14[2] = v75;
  *((unsigned char *)v14 + 24) = v76;
  int v95 = ((_BYTE)v70 + 5) & 7;
  unint64_t v96 = v75 + ((v95 + 5) >> 3);
  char v97 = (v95 + 5) & 7;
  unint64_t v98 = v75 + 1;
  uint64_t v281 = a6;
  if (v96 < v75 + 1)
  {
    if (v76) {
      unint64_t v99 = v75 + 1;
    }
    else {
      unint64_t v99 = v75;
    }
    if (v17 < v99) {
      goto LABEL_131;
    }
    if (v76)
    {
      if (v17 >= v98)
      {
        unsigned int v100 = (((1 << (8 - v76)) - 1) & *(unsigned __int8 *)(v65 + v75)) << v95;
        goto LABEL_141;
      }
      goto LABEL_130;
    }
    v14[2] = v75;
    if (v17 >= v98) {
      goto LABEL_138;
    }
LABEL_130:
    v14[2] = v96;
    *((unsigned char *)v14 + 24) = v97;
LABEL_131:
    int v102 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 445;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of bits for client attribute.";
      _os_log_impl(&dword_1A1780000, v102, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    uint64_t v103 = (void *)std::ostream::operator<<();
    uint64_t v104 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v103, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v104, (uint64_t)"Could not read number of bits for client attribute.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  if (v76 <= 3) {
    unint64_t v101 = v75 + 1;
  }
  else {
    unint64_t v101 = v75 + 2;
  }
  if (v17 < v101) {
    goto LABEL_130;
  }
  if (!v76)
  {
LABEL_138:
    LOBYTE(v100) = *(unsigned char *)(v65 + v75);
    goto LABEL_141;
  }
  char v106 = 8 - v76;
  int v107 = *(unsigned __int8 *)(v65 + v75);
  if (v98 >= v17) {
    int v108 = 0;
  }
  else {
    int v108 = *(unsigned __int8 *)(v65 + v98);
  }
  unsigned int v100 = ((v108 & (0xFFFF << v106)) >> v106) | ((((1 << v106) + 255) & v107) << v95);
  v14[2] = v98;
LABEL_141:
  unsigned __int16 v109 = v71 | (unsigned __int16)((_WORD)v72 << 8);
  v14[2] = v96;
  *((unsigned char *)v14 + 24) = v97;
  unsigned __int8 v288 = (v78 >> 3) + 1;
  unsigned __int8 v289 = (v100 >> 3) + 1;
  int v273 = a4;
  if (v109)
  {
    int v110 = 0;
    unsigned __int16 v278 = v109;
    while (1)
    {
      int v282 = v110;
      LODWORD(v310) = 0;
      if (!gss::decodeAttributeEncoding(v14, &v310, v288, v289, a7)) {
        break;
      }
      uint64_t v111 = *((unsigned __int8 *)v14 + 24);
      unint64_t v113 = v14[1];
      uint64_t v112 = v14[2];
      unint64_t v114 = v112 + ((unint64_t)(v111 + 5) >> 3);
      char v115 = (v111 + 5) & 7;
      unint64_t v116 = v112 + 1;
      a6 = v281;
      if (v114 >= v112 + 1)
      {
        if (v111 <= 3) {
          unint64_t v119 = v112 + 1;
        }
        else {
          unint64_t v119 = v112 + 2;
        }
        if (v113 < v119)
        {
LABEL_222:
          v14[2] = v114;
          *((unsigned char *)v14 + 24) = v115;
LABEL_223:
          v155 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 452;
            __int16 v314 = 2082;
            *(void *)uint64_t v315 = "Could not read number of bits for attribute value.";
            _os_log_impl(&dword_1A1780000, v155, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
          v156 = (void *)std::ostream::operator<<();
          v157 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v156, (uint64_t)" STYL Parse Error Here: ", 24);
          int v158 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v157, (uint64_t)"Could not read number of bits for attribute value.", 50);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v158, (uint64_t)"\n", 1);
          goto LABEL_104;
        }
        uint64_t v120 = *v14;
        if (*((unsigned char *)v14 + 24))
        {
          if (v116 >= v113) {
            int v121 = 0;
          }
          else {
            int v121 = *(unsigned __int8 *)(v120 + v116);
          }
          unsigned int v118 = ((v121 & (0xFFFF << (8 - v111))) >> (8 - v111)) | ((((1 << (8 - v111)) + 255) & *(unsigned __int8 *)(v120 + v112)) << v111);
          v14[2] = v116;
        }
        else
        {
          LOBYTE(v118) = *(unsigned char *)(v120 + v112);
        }
      }
      else
      {
        if (*((unsigned char *)v14 + 24)) {
          unint64_t v117 = v112 + 1;
        }
        else {
          unint64_t v117 = v14[2];
        }
        if (v113 < v117) {
          goto LABEL_223;
        }
        if (*((unsigned char *)v14 + 24))
        {
          if (v113 < v116) {
            goto LABEL_222;
          }
          unsigned int v118 = (((1 << (8 - v111)) - 1) & *(unsigned __int8 *)(*v14 + v112)) << v111;
        }
        else
        {
          if (v113 < v116) {
            goto LABEL_222;
          }
          LOBYTE(v118) = *(unsigned char *)(*v14 + v112);
        }
      }
      v14[2] = v114;
      *((unsigned char *)v14 + 24) = v115;
      int v122 = v291;
      uint64_t v123 = &v291;
      int v124 = &v291;
      if (v291)
      {
        while (1)
        {
          while (1)
          {
            int v124 = (uint64_t **)v122;
            unsigned int v125 = *((_DWORD *)v122 + 7);
            if (v310 >= v125) {
              break;
            }
            int v122 = *v124;
            uint64_t v123 = v124;
            if (!*v124) {
              goto LABEL_173;
            }
          }
          if (v125 >= v310) {
            break;
          }
          int v122 = v124[1];
          if (!v122)
          {
            uint64_t v123 = v124 + 1;
            goto LABEL_173;
          }
        }
        uint64_t v126 = (uint64_t)v124;
      }
      else
      {
LABEL_173:
        uint64_t v126 = (*(uint64_t (**)(gss::Allocator *, uint64_t, uint64_t))(*(void *)v292 + 16))(v292, 40, 8);
        *(_DWORD *)(v126 + 28) = v310;
        *(unsigned char *)(v126 + 32) = 0;
        *(void *)uint64_t v126 = 0;
        *(void *)(v126 + 8) = 0;
        *(void *)(v126 + 16) = v124;
        uint64_t *v123 = (uint64_t *)v126;
        uint64_t v127 = (uint64_t *)v126;
        if (*v290)
        {
          uint64_t v290 = (uint64_t **)*v290;
          uint64_t v127 = *v123;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v291, v127);
        ++v293;
      }
      *(unsigned char *)(v126 + 32) = (v118 >> 3) + 1;
      int v110 = v282 + 1;
      if ((unsigned __int16)(v282 + 1) >= v278) {
        goto LABEL_176;
      }
    }
    GEOGetGeoCSSStyleSheetLog();
    v151 = a6 = v281;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 450;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not decode attribute.";
      _os_log_impl(&dword_1A1780000, v151, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v152 = (void *)std::ostream::operator<<();
    v153 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v152, (uint64_t)" STYL Parse Error Here: ", 24);
    v154 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v153, (uint64_t)"Could not decode attribute.", 27);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
LABEL_176:
  geo::ibitstream::readUIntBits(&v310, v14, 5u);
  if (!(_BYTE)v310)
  {
    GEOGetGeoCSSStyleSheetLog();
    v147 = a6 = v281;
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 457;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of bits for property id.";
      _os_log_impl(&dword_1A1780000, v147, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v148 = (void *)std::ostream::operator<<();
    uint64_t v149 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v148, (uint64_t)" STYL Parse Error Here: ", 24);
    v150 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v149, (uint64_t)"Could not read number of bits for property id.", 46);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v150, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  unsigned __int8 v294 = BYTE4(v310) + 1;
  geo::ibitstream::readUIntBits(&v310, v14, (BYTE4(v310) + 1));
  a6 = v281;
  if (!(_BYTE)v310)
  {
    v159 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 460;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of properties.";
      _os_log_impl(&dword_1A1780000, v159, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v160 = (void *)std::ostream::operator<<();
    v161 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)" STYL Parse Error Here: ", 24);
    v162 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)"Could not read number of properties.", 36);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
  int v274 = HIDWORD(v310);
  if (HIDWORD(v310))
  {
    int v128 = 0;
    while (1)
    {
      geo::ibitstream::readUIntBits(&v310, v14, v294);
      if (!(_BYTE)v310) {
        break;
      }
      unsigned int v129 = HIDWORD(v310);
      uint64_t v130 = *((unsigned __int8 *)v14 + 24);
      unint64_t v132 = v14[1];
      uint64_t v131 = v14[2];
      unint64_t v133 = v131 + ((unint64_t)(v130 + 2) >> 3);
      char v134 = (v130 + 2) & 7;
      unint64_t v135 = v131 + 1;
      if (v133 >= v131 + 1)
      {
        if (v130 <= 6) {
          unint64_t v138 = v131 + 1;
        }
        else {
          unint64_t v138 = v131 + 2;
        }
        if (v132 < v138)
        {
LABEL_250:
          v14[2] = v133;
          *((unsigned char *)v14 + 24) = v134;
LABEL_251:
          uint64_t v192 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 466;
            __int16 v314 = 2082;
            *(void *)uint64_t v315 = "Could not read property size.";
            _os_log_impl(&dword_1A1780000, v192, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
          v193 = (void *)std::ostream::operator<<();
          v194 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)" STYL Parse Error Here: ", 24);
          v195 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v194, (uint64_t)"Could not read property size.", 29);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)"\n", 1);
          goto LABEL_104;
        }
        uint64_t v139 = *v14;
        if (*((unsigned char *)v14 + 24))
        {
          if (v135 >= v132) {
            int v140 = 0;
          }
          else {
            int v140 = *(unsigned __int8 *)(v139 + v135);
          }
          unsigned int v137 = ((v140 & (0xFFFF << (8 - v130))) >> (8 - v130)) | ((((1 << (8 - v130)) + 255) & *(unsigned __int8 *)(v139 + v131)) << v130);
          v14[2] = v135;
        }
        else
        {
          LOBYTE(v137) = *(unsigned char *)(v139 + v131);
        }
      }
      else
      {
        if (*((unsigned char *)v14 + 24)) {
          unint64_t v136 = v131 + 1;
        }
        else {
          unint64_t v136 = v14[2];
        }
        if (v132 < v136) {
          goto LABEL_251;
        }
        if (*((unsigned char *)v14 + 24))
        {
          if (v132 < v135) {
            goto LABEL_250;
          }
          unsigned int v137 = (((1 << (8 - v130)) - 1) & *(unsigned __int8 *)(*v14 + v131)) << v130;
        }
        else
        {
          if (v132 < v135) {
            goto LABEL_250;
          }
          LOBYTE(v137) = *(unsigned char *)(*v14 + v131);
        }
      }
      v14[2] = v133;
      *((unsigned char *)v14 + 24) = v134;
      int v283 = v128;
      if ((v137 & 0x80) == 0)
      {
        geo::ibitstream::readVarInt((uint64_t)&v310, v14);
        if (!(_BYTE)v310)
        {
          uint64_t v201 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 470;
            __int16 v314 = 2082;
            *(void *)uint64_t v315 = "Could not read property size.";
            _os_log_impl(&dword_1A1780000, v201, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          a6 = v281;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
          __int16 v202 = (void *)std::ostream::operator<<();
          uint64_t v203 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v202, (uint64_t)" STYL Parse Error Here: ", 24);
          v204 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v203, (uint64_t)"Could not read property size.", 29);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)"\n", 1);
          goto LABEL_104;
        }
        int v276 = v311;
      }
      unsigned __int8 v279 = v137;
      uint8x8_t v141 = v296;
      uint64_t v142 = &v296;
      uint64_t v143 = &v296;
      if (v296)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v143 = (uint64_t **)v141;
            unsigned int v144 = *((_DWORD *)v141 + 7);
            if (v129 >= v144) {
              break;
            }
            uint8x8_t v141 = *v143;
            uint64_t v142 = v143;
            if (!*v143) {
              goto LABEL_213;
            }
          }
          if (v144 >= v129) {
            break;
          }
          uint8x8_t v141 = v143[1];
          if (!v141)
          {
            uint64_t v142 = v143 + 1;
            goto LABEL_213;
          }
        }
        uint64_t v145 = (uint64_t)v143;
      }
      else
      {
LABEL_213:
        uint64_t v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v297 + 16))(v297, 40, 8);
        *(_DWORD *)(v145 + 28) = v129;
        *(void *)(v145 + 32) = 0;
        *(void *)uint64_t v145 = 0;
        *(void *)(v145 + 8) = 0;
        *(void *)(v145 + 16) = v143;
        *uint64_t v142 = (uint64_t *)v145;
        v146 = (uint64_t *)v145;
        if (*v295)
        {
          int v295 = (uint64_t **)*v295;
          v146 = *v142;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v296, v146);
        ++v298;
      }
      a6 = v281;
      *(unsigned char *)(v145 + 32) = v279 >> 6;
      *(_DWORD *)(v145 + 36) = v276;
      int v128 = v283 + 1;
      if (v283 + 1 == v274) {
        goto LABEL_229;
      }
    }
    v188 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 463;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read property id.";
      _os_log_impl(&dword_1A1780000, v188, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    a6 = v281;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    uint64_t v189 = (void *)std::ostream::operator<<();
    v190 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v189, (uint64_t)" STYL Parse Error Here: ", 24);
    v191 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v190, (uint64_t)"Could not read property id.", 27);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)"\n", 1);
    goto LABEL_104;
  }
LABEL_229:
  v163 = (geo::ibitstream *)gss::StylFile::chapter(&v300, 0xAu);
  uint64_t v164 = (char *)operator new(0x168uLL);
  *((void *)v164 + 1) = 0;
  *((void *)v164 + 2) = 0;
  *(void *)uint64_t v164 = &unk_1EF58A6D0;
  *(_OWORD *)(v164 + 40) = 0u;
  *(_OWORD *)(v164 + 56) = 0u;
  *(_OWORD *)(v164 + 72) = 0u;
  *(_OWORD *)(v164 + 88) = 0u;
  *(_OWORD *)(v164 + 104) = 0u;
  *(_OWORD *)(v164 + 120) = 0u;
  *(_OWORD *)(v164 + 136) = 0u;
  *(_OWORD *)(v164 + 152) = 0u;
  *(_OWORD *)(v164 + 168) = 0u;
  *(_OWORD *)(v164 + 184) = 0u;
  *(_OWORD *)(v164 + 200) = 0u;
  *(_OWORD *)(v164 + 216) = 0u;
  *(_OWORD *)(v164 + 232) = 0u;
  *(_OWORD *)(v164 + 248) = 0u;
  *(_OWORD *)(v164 + 24) = 0u;
  *(_OWORD *)(v164 + 264) = 0u;
  *(_OWORD *)(v164 + 280) = 0u;
  *(_OWORD *)(v164 + 296) = 0u;
  *(_OWORD *)(v164 + 312) = 0u;
  *((_DWORD *)v164 + 29) = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  *(void *)(v164 + 108) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)v164 + 28) = _Q0;
  *(void *)(v164 + 236) = 0xBF8000003F800000;
  *(_OWORD *)(v164 + 284) = xmmword_1A28FE190;
  *(_OWORD *)(v164 + 300) = xmmword_1A28FE1A0;
  *((_DWORD *)v164 + 79) = 1096810496;
  *(_OWORD *)(v164 + 328) = xmmword_1A28FE1B0;
  *(_OWORD *)(v164 + 344) = xmmword_1A28FE1C0;
  uint8x8_t v170 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v164 + 24;
  *(void *)(a1 + 128) = v164;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
  }
  if ((gss::GlobalProperties::loadFromStylChapterBitstream(*(void *)(a1 + 120), v163, (uint64_t)&v285, a7) & 1) == 0)
  {
    v182 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 488;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not decode global properties.";
      _os_log_impl(&dword_1A1780000, v182, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    unint64_t v183 = (void *)std::ostream::operator<<();
    unint64_t v184 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v183, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v185 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v184, (uint64_t)"Could not decode global properties.", 35);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)"\n", 1);
    __int16 v186 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 388;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not decode global properties.";
      _os_log_impl(&dword_1A1780000, v186, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    uint64_t v187 = (void *)std::ostream::operator<<();
    size_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v187, (uint64_t)" STYL Parse Error Here: ", 24);
    size_t v27 = "Could not decode global properties.";
    uint64_t v28 = 35;
    goto LABEL_107;
  }
  buf[0] = 1;
  uint64_t v171 = *(void *)(a5 + 24);
  if (!v171) {
    goto LABEL_350;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v171 + 48))(v171, buf);
  v172 = gss::StylFile::chapter(&v300, 0x14u);
  v173 = v172;
  uint64_t v174 = *((unsigned __int8 *)v172 + 24);
  unint64_t v176 = v172[1];
  uint64_t v175 = v172[2];
  unint64_t v177 = v175 + ((unint64_t)(v174 + 5) >> 3);
  char v178 = (v174 + 5) & 7;
  unint64_t v179 = v175 + 1;
  if (v177 < v175 + 1)
  {
    if (*((unsigned char *)v172 + 24)) {
      unint64_t v180 = v175 + 1;
    }
    else {
      unint64_t v180 = v172[2];
    }
    if (v176 < v180) {
      goto LABEL_259;
    }
    if (*((unsigned char *)v172 + 24))
    {
      if (v176 >= v179)
      {
        unsigned int v181 = (((1 << (8 - v174)) - 1) & *(unsigned __int8 *)(*v172 + v175)) << v174;
        goto LABEL_273;
      }
      goto LABEL_258;
    }
    if (v176 >= v179)
    {
      LOBYTE(v181) = *(unsigned char *)(*v172 + v175);
      goto LABEL_273;
    }
LABEL_258:
    v172[2] = v177;
    *((unsigned char *)v172 + 24) = v178;
LABEL_259:
    v197 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 500;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of bits for property set index.";
      _os_log_impl(&dword_1A1780000, v197, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    a6 = v281;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    v198 = (void *)std::ostream::operator<<();
    v199 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v198, (uint64_t)" STYL Parse Error Here: ", 24);
    v200 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)"Could not read number of bits for property set index.", 53);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)"\n", 1);
    goto LABEL_339;
  }
  if (v174 <= 3) {
    unint64_t v196 = v175 + 1;
  }
  else {
    unint64_t v196 = v175 + 2;
  }
  if (v176 < v196) {
    goto LABEL_258;
  }
  uint64_t v205 = *v172;
  if (*((unsigned char *)v172 + 24))
  {
    int v206 = *(unsigned __int8 *)(v205 + v175);
    if (v179 >= v176) {
      int v207 = 0;
    }
    else {
      int v207 = *(unsigned __int8 *)(v205 + v179);
    }
    unsigned int v181 = ((v207 & (0xFFFF << (8 - v174))) >> (8 - v174)) | ((((1 << (8 - v174)) + 255) & v206) << v174);
    v172[2] = v179;
  }
  else
  {
    LOBYTE(v181) = *(unsigned char *)(v205 + v175);
  }
LABEL_273:
  int v208 = v181 >> 3;
  v172[2] = v177;
  *((unsigned char *)v172 + 24) = v178;
  char v299 = v208 + 1;
  v209 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v310, v172, v208 + 1);
  if ((_BYTE)v310)
  {
    uint64_t v210 = HIDWORD(v310);
    int v275 = (void *)(a1 + 144);
    uint64_t v272 = HIDWORD(v310);
    if (HIWORD(v310) || *(unsigned char *)(a1 + 156) || HIDWORD(v310) <= *(unsigned __int16 *)(a1 + 154))
    {
      if (HIDWORD(v310))
      {
        uint64_t v277 = 0;
        goto LABEL_282;
      }
LABEL_318:
      if (gss::StyleSheet<gss::ScenePropertyID>::decodeStyles(a1, &v300, (uint64_t)&v285, v273, a7))
      {
        gss::StylFile::chapter(&v300, 0x1Eu);
        operator new();
      }
      v245 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 392;
        __int16 v314 = 2082;
        *(void *)uint64_t v315 = "Could not decode styles.";
        _os_log_impl(&dword_1A1780000, v245, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      a6 = v281;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
      v246 = (void *)std::ostream::operator<<();
      uint64_t v247 = 24;
      v248 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v246, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v249 = "Could not decode styles.";
      goto LABEL_342;
    }
    uint64_t v211 = gss::Allocator::instance(v209);
    v209 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v211 + 16))(v211, 16 * v210, 8);
    v212 = v209;
    if (*v275) {
      v209 = (gss::Allocator *)geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::moveContent((uint64_t)v275, v209);
    }
    *(_WORD *)(a1 + 154) = v272;
    *(void *)(a1 + 144) = v212;
    uint64_t v277 = 0;
    while (1)
    {
LABEL_282:
      uint64_t v213 = gss::Allocator::instance(v209);
      uint64_t v214 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v213 + 16))(v213, 112, 8);
      uint64_t v215 = v214;
      *(void *)uint64_t v214 = &unk_1EF58A740;
      *(void *)(v214 + 8) = 0;
      *(void *)(v214 + 16) = 0;
      *(void *)(v214 + 24) = v213;
      *(void *)(v214 + 32) = 0;
      uint64_t v216 = v214 + 32;
      *(void *)(v214 + 40) = 0;
      *(void *)(v214 + 48) = 0;
      *(unsigned char *)(v214 + 47) = 1;
      *(void *)(v214 + 55) = 0;
      *(unsigned char *)(v214 + 63) = 1;
      *(void *)(v214 + 64) = 0;
      *(void *)(v214 + 71) = 0;
      *(unsigned char *)(v214 + 79) = 1;
      *(void *)(v214 + 80) = 0;
      *(void *)(v214 + 87) = 0;
      *(unsigned char *)(v214 + 95) = 1;
      *(void *)(v214 + 96) = 0;
      *(void *)(v214 + 103) = 0;
      *(unsigned char *)(v214 + 111) = 1;
      *(void *)buf = v214 + 32;
      *(void *)&buf[8] = v214;
      uint64_t v217 = *(unsigned __int16 *)(a1 + 152);
      if (v217 != 0xFFFF && !*(unsigned char *)(a1 + 156) && v217 >= *(unsigned __int16 *)(a1 + 154))
      {
        uint64_t v218 = v217 + 1;
        uint64_t v219 = gss::Allocator::instance((gss::Allocator *)v214);
        v220 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v219 + 16))(v219, 16 * v218, 8);
        if (*v275) {
          geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::moveContent((uint64_t)v275, v220);
        }
        *(_WORD *)(a1 + 154) = v218;
        *(void *)(a1 + 144) = v220;
        uint64_t v217 = *(unsigned __int16 *)(a1 + 152);
      }
      uint64_t v221 = *(void *)(a1 + 144);
      v222 = (uint64_t *)(v221 + 16 * v217);
      uint64_t *v222 = v216;
      v222[1] = v215;
      *(_WORD *)(a1 + 152) = v217 + 1;
      uint64_t v284 = *(void *)(v221 + 16 * v277);
      geo::ibitstream::readUIntBits(&v310, v173, v294);
      if (!(_BYTE)v310)
      {
        uint64_t v264 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 223;
          __int16 v314 = 2082;
          *(void *)uint64_t v315 = "Could not read number of properties.";
          _os_log_impl(&dword_1A1780000, v264, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        uint64_t v265 = (void *)std::ostream::operator<<();
        uint64_t v266 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)" STYL Parse Error Here: ", 24);
        v267 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)"Could not read number of properties.", 36);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)"\n", 1);
        goto LABEL_336;
      }
      int v280 = HIDWORD(v310);
      if (HIDWORD(v310)) {
        break;
      }
LABEL_317:
      v209 = (gss::Allocator *)gss::StylePropertySet<gss::ScenePropertyID>::intern(v284, v285 + 232);
      if (++v277 == v272) {
        goto LABEL_318;
      }
    }
    int v223 = 0;
    while (1)
    {
      geo::ibitstream::readUIntBits(&v310, v173, v294);
      if (!(_BYTE)v310)
      {
        int v250 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 226;
          __int16 v314 = 2082;
          *(void *)uint64_t v315 = "Could not read property index.";
          _os_log_impl(&dword_1A1780000, v250, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
        int v251 = (void *)std::ostream::operator<<();
        int v252 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v251, (uint64_t)" STYL Parse Error Here: ", 24);
        uint64_t v253 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)"Could not read property index.", 30);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\n", 1);
        goto LABEL_336;
      }
      double v224 = v296;
      if (!v296) {
        break;
      }
      unsigned __int8 v225 = BYTE4(v310);
      uint64_t v226 = &v296;
      do
      {
        v227 = v224;
        v228 = v226;
        unsigned int v229 = *((_DWORD *)v224 + 7);
        v230 = (uint64_t **)(v224 + 1);
        if (v229 >= HIDWORD(v310))
        {
          v230 = (uint64_t **)v227;
          uint64_t v226 = (uint64_t **)v227;
        }
        double v224 = *v230;
      }
      while (v224);
      if (v226 == &v296) {
        break;
      }
      uint64_t v231 = v229 >= HIDWORD(v310) ? v227 : (uint64_t *)v228;
      if (HIDWORD(v310) < *((_DWORD *)v231 + 7)) {
        break;
      }
      if (v229 < HIDWORD(v310)) {
        v227 = (uint64_t *)v228;
      }
      uint64_t v232 = *((unsigned int *)v227 + 9);
      switch(*((unsigned char *)v227 + 32))
      {
        case 0:
          goto LABEL_310;
        case 1:
          uint64_t v232 = (8 * v232);
          goto LABEL_310;
        case 2:
          uint64_t v232 = 1;
          goto LABEL_310;
        case 3:
          geo::ibitstream::readVarInt((uint64_t)&v310, v173);
          if (!(_BYTE)v310)
          {
            v268 = GEOGetGeoCSSStyleSheetLog();
            if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 242;
              __int16 v314 = 2082;
              *(void *)uint64_t v315 = "Could not read size of variable sized property.";
              _os_log_impl(&dword_1A1780000, v268, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
            v269 = (void *)std::ostream::operator<<();
            uint64_t v270 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)" STYL Parse Error Here: ", 24);
            int v271 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v270, (uint64_t)"Could not read size of variable sized property.", 47);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v271, (uint64_t)"\n", 1);
            goto LABEL_336;
          }
          uint64_t v232 = 8 * v311;
LABEL_310:
          uint64_t v233 = v173[2];
          uint64_t v234 = *((unsigned __int8 *)v173 + 24);
          gss::propertyDecoderForIndex<gss::ScenePropertyID>(v225, buf);
          uint64_t v310 = v232;
          unsigned __int8 v312 = v225;
          if (!*(void *)&v315[4]) {
            goto LABEL_350;
          }
          char v235 = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t *, unsigned __int8 *, uint64_t *, void *))(**(void **)&v315[4] + 48))(*(void *)&v315[4], v173, v284, &v310, &v312, &v285, a7);
          if (*(unsigned char **)&v315[4] == buf)
          {
            (*(void (**)(unsigned char *))(*(void *)buf + 32))(buf);
          }
          else if (*(void *)&v315[4])
          {
            (*(void (**)(void))(**(void **)&v315[4] + 40))();
          }
          if ((v235 & 1) == 0)
          {
            int v254 = GEOGetGeoCSSStyleSheetLog();
            if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 247;
              __int16 v314 = 2082;
              *(void *)uint64_t v315 = "Could not decode property";
              _os_log_impl(&dword_1A1780000, v254, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
            v255 = (void *)std::ostream::operator<<();
            double v256 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)" STYL Parse Error Here: ", 24);
            uint64_t v244 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)"Could not decode property", 25);
            goto LABEL_335;
          }
          unint64_t v236 = 8 * v233 + v232 + v234;
          v173[2] = v236 >> 3;
          *((unsigned char *)v173 + 24) = v236 & 7;
          if (++v223 == v280) {
            goto LABEL_317;
          }
          break;
        default:
          uint64_t v232 = 0;
          goto LABEL_310;
      }
    }
    double v241 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 228;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not find size for property.";
      _os_log_impl(&dword_1A1780000, v241, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.hpp", 86);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    int v242 = (void *)std::ostream::operator<<();
    v243 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v244 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v243, (uint64_t)"Could not find size for property.", 33);
LABEL_335:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)"\n", 1);
LABEL_336:
    v257 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 507;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not decode property set.";
      _os_log_impl(&dword_1A1780000, v257, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    a6 = v281;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    uint64_t v258 = (void *)std::ostream::operator<<();
    v259 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)" STYL Parse Error Here: ", 24);
    v260 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)"Could not decode property set.", 30);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)"\n", 1);
  }
  else
  {
    v237 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 503;
      __int16 v314 = 2082;
      *(void *)uint64_t v315 = "Could not read number of property sets.";
      _os_log_impl(&dword_1A1780000, v237, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
    uint64_t v238 = (void *)std::ostream::operator<<();
    v239 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v238, (uint64_t)" STYL Parse Error Here: ", 24);
    v240 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)"Could not read number of property sets.", 39);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)"\n", 1);
    a6 = v281;
  }
LABEL_339:
  v261 = GEOGetGeoCSSStyleSheetLog();
  if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 391;
    __int16 v314 = 2082;
    *(void *)uint64_t v315 = "Could not decode property sets.";
    _os_log_impl(&dword_1A1780000, v261, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a7, (uint64_t)":", 1);
  v262 = (void *)std::ostream::operator<<();
  v248 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)" STYL Parse Error Here: ", 24);
  uint64_t v249 = "Could not decode property sets.";
  uint64_t v247 = 31;
LABEL_342:
  v263 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)v249, v247);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)"\n", 1);
LABEL_109:
  buf[0] = 0;
  uint64_t v90 = *(void *)(a6 + 24);
  if (v90)
  {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v90 + 48))(v90, buf);
    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v295, v296);
    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v290, v291);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy((uint64_t)&v304, v305);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylFile::ChapterDescriptor>,gss::Allocator>>::destroy((uint64_t)&v300, v301);
  }
  else
  {
LABEL_350:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A1912BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(a1 + 8))(a2, a3, *a4, *a5, a6, a7);
}

uint64_t gss::propertyDecoderForIndex<gss::ScenePropertyID>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result > 0x57) {
    uint64_t v2 = gss::unknownPropertyDecoder<gss::ScenePropertyID>;
  }
  else {
    uint64_t v2 = *(&off_1EF592498 + (char)result);
  }
  *a2 = &unk_1EF56BB70;
  a2[1] = v2;
  a2[3] = a2;
  return result;
}

uint64_t gss::int16Decoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v34 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 16)
  {
    *(_WORD *)buf = 0;
    unint64_t v12 = a1[1];
    uint64_t v13 = a1[2];
    char v14 = *((unsigned char *)a1 + 24);
    unint64_t v15 = v13 + 3;
    if (!v14) {
      unint64_t v15 = v13 + 2;
    }
    if (v12 >= v15)
    {
      uint64_t v26 = *a1;
      if (*((unsigned char *)a1 + 24))
      {
        char v27 = 0;
        uint64_t v28 = 0;
        do
        {
          char v29 = v27;
          uint64_t v30 = v13 + 1;
          if (v13 + 1 >= v12) {
            int v31 = 0;
          }
          else {
            int v31 = *(unsigned __int8 *)(v26 + v13 + 1);
          }
          uint8_t v32 = ((v31 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v26 + v13)) << v14);
          a1[2] = v30;
          buf[v28] = v32;
          char v27 = 1;
          uint64_t v13 = v30;
          uint64_t v28 = 1;
        }
        while ((v29 & 1) == 0);
        __int16 v33 = *(_WORD *)buf;
      }
      else
      {
        __int16 v33 = *(_WORD *)(v26 + v13);
        a1[2] = v13 + 2;
      }
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v34) = v33;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    char v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v37 = 1024;
      int v38 = 162;
      __int16 v39 = 2082;
      int v40 = "Could not read int16.";
      _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    uint64_t v18 = (void *)std::ostream::operator<<();
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read int16.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v37 = 1024;
      int v38 = 161;
      __int16 v39 = 2082;
      int v40 = "Found int16 property with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    unsigned int v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found int16 property with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::floatDecoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v33 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    unint64_t v12 = a1[1];
    uint64_t v13 = a1[2];
    char v14 = *((unsigned char *)a1 + 24);
    unint64_t v15 = v13 + 5;
    if (!v14) {
      unint64_t v15 = v13 + 4;
    }
    if (v12 >= v15)
    {
      uint64_t v26 = *a1;
      if (*((unsigned char *)a1 + 24))
      {
        uint64_t v27 = 0;
        uint64_t v28 = v26 + v13;
        uint64_t v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12) {
            int v30 = 0;
          }
          else {
            int v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          }
          unsigned int v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        int v32 = *(_DWORD *)buf;
      }
      else
      {
        int v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v33) = v32;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    char v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      long long v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v36 = 1024;
      int v37 = 249;
      __int16 v38 = 2082;
      __int16 v39 = "Could not read float.";
      _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    uint64_t v18 = (void *)std::ostream::operator<<();
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read float.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      long long v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v36 = 1024;
      int v37 = 248;
      __int16 v38 = 2082;
      __int16 v39 = "Found float with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    unsigned int v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found float with strange number of bits.", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::idForIndex<gss::ScenePropertyID>(uint64_t result)
{
  if (result >= 0x58) {
    return 88;
  }
  else {
    return result;
  }
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = *a2;
  unsigned int v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    int v8 = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned int> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    uint64_t v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    uint64_t v5 = v4;
  }
  return *(void *)a1 + *(unsigned __int16 *)(a1 + 8) + 4 * v5;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned int> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)(result + 14))
    {
      uint64_t v5 = a2;
      unsigned __int16 v6 = *(_WORD *)(result + 10);
      do
      {
        double result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)v3, *(unsigned char *)v5);
        if (result == v6)
        {
          double result = geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!result) {
            return result;
          }
          uint64_t v7 = *(unsigned __int16 *)(v3 + 10);
          int v8 = *(unsigned __int8 **)v3;
          v8[v7] = *(unsigned char *)v5;
          *(_DWORD *)&v8[4 * v7 + *(unsigned __int16 *)(v3 + 8)] = *(_DWORD *)(v5 + 4);
          unsigned __int16 v6 = v7 + 1;
          *(_WORD *)(v3 + 10) = v7 + 1;
          *(unsigned char *)(v3 + 15) = 0;
        }
        v5 += 8;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)(result + 14))
    {
      uint64_t v5 = a2;
      unsigned __int16 v6 = *(_WORD *)(result + 10);
      do
      {
        double result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)v3, *v5);
        if (result == v6)
        {
          double result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!result) {
            return result;
          }
          uint64_t v7 = (unsigned __int8 *)(*(void *)v3 + *(unsigned __int16 *)(v3 + 10));
          unsigned __int8 *v7 = *v5;
          v7[*(unsigned __int16 *)(v3 + 8)] = v5[1];
          unsigned __int16 v6 = *(_WORD *)(v3 + 10) + 1;
          *(_WORD *)(v3 + 10) = v6;
          *(unsigned char *)(v3 + 15) = 0;
        }
        v5 += 2;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(unsigned __int8 **a1, unsigned __int8 a2)
{
  uint64_t v2 = *((unsigned __int16 *)a1 + 5);
  if (!*((_WORD *)a1 + 5)) {
    return (unsigned __int16)v2;
  }
  uint64_t v3 = (uint64_t)*a1;
  if (!*((unsigned char *)a1 + 15))
  {
    __int16 v6 = v3 + v2;
    uint64_t v7 = *a1;
    while (*v7 != a2)
    {
      ++v7;
      if (!--v2)
      {
        LOWORD(v7) = v6;
        goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  if (v2 >= 0x1E)
  {
    uint64_t v7 = *a1;
    unint64_t v8 = *((unsigned __int16 *)a1 + 5);
    do
    {
      uint64_t v9 = &v7[v8 >> 1];
      unsigned int v11 = *v9;
      int v10 = v9 + 1;
      unint64_t v12 = v8 >> 1;
      v8 += ~(v8 >> 1);
      if (v11 < a2) {
        uint64_t v7 = v10;
      }
      else {
        unint64_t v8 = v12;
      }
    }
    while (v8);
    if (v7 == (unsigned __int8 *)(v3 + v2) || *v7 != a2) {
      return (unsigned __int16)v2;
    }
LABEL_19:
    LOWORD(v2) = (_WORD)v7 - v3;
    return (unsigned __int16)v2;
  }
  uint64_t v4 = 0;
  while (1)
  {
    unsigned int v5 = *(unsigned __int8 *)(v3 + v4);
    if (v5 >= a2) {
      break;
    }
    if (v2 == ++v4) {
      return (unsigned __int16)v2;
    }
  }
  if (v5 == a2) {
    LOWORD(v2) = v4;
  }
  return (unsigned __int16)v2;
}

uint64_t gss::floatPairDecoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v49 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 != 64)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v22 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      unint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v52 = 1024;
      int v53 = 444;
      __int16 v54 = 2082;
      int v55 = "Found float pair property with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)":", 1);
    uint64_t v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Found float pair property with strange number of bits.", 54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    return 0;
  }
  *(_DWORD *)buf = 0;
  unint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = v13 + 4;
  char v15 = *((unsigned char *)a1 + 24);
  unint64_t v16 = v13 + 5;
  if (!v15) {
    unint64_t v16 = v13 + 4;
  }
  if (v12 >= v16)
  {
    uint64_t v27 = *a1;
    if (*((unsigned char *)a1 + 24))
    {
      uint64_t v28 = 0;
      char v29 = 8 - v15;
      int v30 = 0xFFFF << (8 - v15);
      uint64_t v31 = v27 + v13;
      do
      {
        unint64_t v32 = v13 + v28 + 1;
        if (v32 >= v12) {
          int v33 = 0;
        }
        else {
          int v33 = *(unsigned __int8 *)(v31 + v28 + 1);
        }
        unsigned int v34 = ((v33 & v30) >> v29) | ((((1 << (8 - v15)) - 1) & *(unsigned char *)(v31 + v28)) << v15);
        a1[2] = v32;
        buf[v28++] = v34;
      }
      while (v28 != 4);
      int v35 = *(_DWORD *)buf;
      *(_DWORD *)buf = 0;
      uint64_t v36 = v13 + 4;
      if (v12 >= v36 + 5)
      {
        uint64_t v37 = 0;
        uint64_t v38 = v36 + v27;
        do
        {
          unint64_t v39 = v36 + v37 + 1;
          if (v39 >= v12) {
            int v40 = 0;
          }
          else {
            int v40 = *(unsigned __int8 *)(v38 + v37 + 1);
          }
          unsigned int v41 = ((v40 & v30) >> v29) | ((((1 << (8 - v15)) - 1) & *(unsigned char *)(v38 + v37)) << v15);
          a1[2] = v39;
          buf[v37++] = v41;
        }
        while (v37 != 4);
        int v42 = *(_DWORD *)buf;
        goto LABEL_38;
      }
    }
    else
    {
      int v35 = *(_DWORD *)(v27 + v13);
      a1[2] = v14;
      if (v12 >= v13 + 8 + (unint64_t)(v15 != 0))
      {
        int v42 = *(_DWORD *)(v27 + v14);
        a1[2] = v13 + 8;
LABEL_38:
        buf[0] = v10;
        buf[1] = 0;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
        unsigned int v48 = (_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v49);
        *unsigned int v48 = v35;
        v48[1] = v42;
        return 1;
      }
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v43 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      unint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v52 = 1024;
      int v53 = 446;
      __int16 v54 = 2082;
      int v55 = "Could not read second half of float pair.";
      _os_log_impl(&dword_1A1780000, v43, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)":", 1);
    unint64_t v45 = (void *)std::ostream::operator<<();
    unint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Could not read second half of float pair.", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\n", 1);
    return 0;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  }
  unint64_t v17 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    unint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    __int16 v52 = 1024;
    int v53 = 445;
    __int16 v54 = 2082;
    int v55 = "Could not read first half of float pair.";
    _os_log_impl(&dword_1A1780000, v17, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
  unint64_t v19 = (void *)std::ostream::operator<<();
  unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" STYL Parse Error Here: ", 24);
  unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not read first half of float pair.", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  return 0;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = *a2;
  unsigned int v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    uint64_t v8 = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned long long> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    uint64_t v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    uint64_t v5 = v4;
  }
  return *(void *)a1 + *(unsigned __int16 *)(a1 + 8) + 8 * v5;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned long long> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)(result + 14))
    {
      uint64_t v5 = a2;
      unsigned __int16 v6 = *(_WORD *)(result + 10);
      do
      {
        double result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)v3, *(unsigned char *)v5);
        if (result == v6)
        {
          double result = geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!result) {
            return result;
          }
          uint64_t v7 = *(unsigned __int16 *)(v3 + 10);
          uint64_t v8 = *(unsigned __int8 **)v3;
          v8[v7] = *(unsigned char *)v5;
          *(void *)&v8[8 * v7 + *(unsigned __int16 *)(v3 + 8)] = *(void *)(v5 + 8);
          unsigned __int16 v6 = v7 + 1;
          *(_WORD *)(v3 + 10) = v7 + 1;
          *(unsigned char *)(v3 + 15) = 0;
        }
        v5 += 16;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t gss::angle0To180Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v26 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 <= 0xA)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    uint64_t v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v29 = 1024;
      int v30 = 227;
      __int16 v31 = 2082;
      unint64_t v32 = "Found 0° - 180° property with too few bits.";
      _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    unint64_t v16 = (void *)std::ostream::operator<<();
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found 0° - 180° property with too few bits.", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  else
  {
    uint8_t v11 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (v24[0])
    {
      unsigned int v12 = v25;
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = (float)v12 / (float)(1 << (a3 - 8));
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v29 = 1024;
      int v30 = 228;
      __int16 v31 = 2082;
      unint64_t v32 = "Could not read 0° - 180° angle.";
      _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    unint64_t v21 = (void *)std::ostream::operator<<();
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read 0° - 180° angle.", 33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::angle0To90Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v26 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 <= 9)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    uint64_t v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v29 = 1024;
      int v30 = 205;
      __int16 v31 = 2082;
      unint64_t v32 = "Found 0° - 90° property with too few bits.";
      _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    unint64_t v16 = (void *)std::ostream::operator<<();
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found 0° - 90° property with too few bits.", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  else
  {
    uint8_t v11 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (v24[0])
    {
      unsigned int v12 = v25;
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = (float)v12 / (float)(1 << (a3 - 7));
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v29 = 1024;
      int v30 = 206;
      __int16 v31 = 2082;
      unint64_t v32 = "Could not read 0° - 90° angle.";
      _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    unint64_t v21 = (void *)std::ostream::operator<<();
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read 0° - 90° angle.", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::enumDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, void *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v11 = gss::idForIndex<gss::ScenePropertyID>(a5);
  unsigned __int8 v27 = v11;
  if (v11 == 88) {
    return 1;
  }
  uint8_t v12 = v11;
  geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v25);
  if (v25[0])
  {
    unsigned int v13 = v26;
    if (v26 <= a4)
    {
      buf[0] = v12;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v27) = v13;
    }
    else
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      uint64_t v14 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        __int16 v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        __int16 v30 = 1024;
        int v31 = 563;
        __int16 v32 = 2082;
        uint64_t v33 = "Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?";
        _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_DEBUG, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
      unint64_t v16 = (void *)std::ostream::operator<<();
      unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Warning: ", 21);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?", 92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
    }
    return 1;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  }
  unint64_t v19 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    __int16 v30 = 1024;
    int v31 = 557;
    __int16 v32 = 2082;
    uint64_t v33 = "Could not read uint backing for enum.";
    _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
  unint64_t v21 = (void *)std::ostream::operator<<();
  unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
  unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read uint backing for enum.", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::fixedPointNeg1to1Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v28 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 8)
  {
    unint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    unint64_t v14 = v13 + 2;
    if (!*(unsigned char *)(a1 + 24)) {
      unint64_t v14 = v13 + 1;
    }
    if (v12 >= v14)
    {
      unint64_t v25 = v13 + 1;
      unsigned int v26 = *(unsigned __int8 *)(*(void *)a1 + v13);
      if (*(unsigned char *)(a1 + 24))
      {
        if (v25 >= v12) {
          int v27 = 0;
        }
        else {
          int v27 = *(unsigned __int8 *)(*(void *)a1 + v25);
        }
        unsigned int v26 = ((v27 & (0xFFFF << (8 - *(unsigned char *)(a1 + 24)))) >> (8 - *(unsigned char *)(a1 + 24))) | ((((1 << (8 - *(unsigned char *)(a1 + 24))) - 1) & v26) << *(unsigned char *)(a1 + 24));
      }
      *(void *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)((float)v26 / 127.5) + -1.0;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    char v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 336;
      __int16 v33 = 2082;
      uint64_t v34 = "Could not read fixed point -1 to 1.";
      _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    unint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point -1 to 1.", 35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unsigned int v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 335;
      __int16 v33 = 2082;
      uint64_t v34 = "Found fixed point -1 to 1 property with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    unint64_t v22 = (void *)std::ostream::operator<<();
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point -1 to 1 property with strange number of bits.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::fixedPoint0To1Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v28 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 8)
  {
    unint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    unint64_t v14 = v13 + 2;
    if (!*(unsigned char *)(a1 + 24)) {
      unint64_t v14 = v13 + 1;
    }
    if (v12 >= v14)
    {
      unint64_t v25 = v13 + 1;
      unsigned int v26 = *(unsigned __int8 *)(*(void *)a1 + v13);
      if (*(unsigned char *)(a1 + 24))
      {
        if (v25 >= v12) {
          int v27 = 0;
        }
        else {
          int v27 = *(unsigned __int8 *)(*(void *)a1 + v25);
        }
        unsigned int v26 = ((v27 & (0xFFFF << (8 - *(unsigned char *)(a1 + 24)))) >> (8 - *(unsigned char *)(a1 + 24))) | ((((1 << (8 - *(unsigned char *)(a1 + 24))) - 1) & v26) << *(unsigned char *)(a1 + 24));
      }
      *(void *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 / 255.0;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    char v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 314;
      __int16 v33 = 2082;
      uint64_t v34 = "Could not read fixed point 0 to 1.";
      _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    unint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 0 to 1.", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unsigned int v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 313;
      __int16 v33 = 2082;
      uint64_t v34 = "Found fixed point 0 to 1 property with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    unint64_t v22 = (void *)std::ostream::operator<<();
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 0 to 1 property with strange number of bits.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::cameraHeadingDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::rgba8Decoder<gss::ScenePropertyID>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v41 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    unint64_t v12 = a1[1];
    uint64_t v13 = a1[2];
    char v14 = *((unsigned char *)a1 + 24);
    unint64_t v15 = v13 + 5;
    if (!v14) {
      unint64_t v15 = v13 + 4;
    }
    if (v12 >= v15)
    {
      uint64_t v26 = *a1;
      if (*((unsigned char *)a1 + 24))
      {
        uint64_t v27 = 0;
        uint64_t v28 = v26 + v13;
        uint64_t v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12) {
            int v30 = 0;
          }
          else {
            int v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          }
          unsigned int v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        unsigned int v32 = *(_DWORD *)buf;
      }
      else
      {
        unsigned int v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      unsigned int v33 = bswap32(v32);
      float v38 = (float)v33 / 255.0;
      float32x2_t v39 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      float v40 = (float)HIBYTE(v33) / 255.0;
      *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v38);
      long long v44 = (const char *)__PAIR64__(v35, v34);
      *(_DWORD *)unint64_t v45 = v36;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v42);
      int16x4_t v37 = v42;
      *(int16x4_t *)geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v41) = v37;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      long long v44 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)unint64_t v45 = 1024;
      *(_DWORD *)&v45[2] = 67;
      __int16 v46 = 2082;
      uint64_t v47 = "Could not read RGBA color.";
      _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    uint64_t v18 = (void *)std::ostream::operator<<();
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read RGBA color.", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      long long v44 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)unint64_t v45 = 1024;
      *(_DWORD *)&v45[2] = 66;
      __int16 v46 = 2082;
      uint64_t v47 = "Found RGBA color with strange bit count.";
      _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    unsigned int v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found RGBA color with strange bit count.", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::angleNeg180To180Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v26 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 <= 8)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    char v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v29 = 1024;
      int v30 = 183;
      __int16 v31 = 2082;
      unsigned int v32 = "Found -180° - 180° property with too few bits.";
      _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    unint64_t v16 = (void *)std::ostream::operator<<();
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found -180° - 180° property with too few bits.", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  else
  {
    uint8_t v11 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (v24[0])
    {
      int v12 = v25;
      buf[0] = v11;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = v12 - 180;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v29 = 1024;
      int v30 = 184;
      __int16 v31 = 2082;
      unsigned int v32 = "Could not read -180° - 180° angle.";
      _os_log_impl(&dword_1A1780000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    unint64_t v21 = (void *)std::ostream::operator<<();
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read -180° - 180° angle.", 36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::cameraAlternateFramingSourceDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 5u, a4, a6);
}

uint64_t gss::cameraTypeDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::lightOriginAltitudeDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::uint9Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::uintDecoder<gss::ScenePropertyID>(a1, a2, a3, 9u, a4, a6);
}

uint64_t gss::uintDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, void *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v11 = gss::idForIndex<gss::ScenePropertyID>(a5);
  unsigned __int8 v27 = v11;
  if (v11 == 88) {
    return 1;
  }
  if (a4 <= a3)
  {
    uint8_t v17 = v11;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v25);
    if (!v25[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      }
      unsigned int v20 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        __int16 v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        __int16 v30 = 1024;
        int v31 = 89;
        __int16 v32 = 2082;
        uint64_t v33 = "Could not read unsigned integer.";
        _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      unint64_t v22 = (void *)std::ostream::operator<<();
      unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Could not read unsigned integer.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
      return 0;
    }
    int v18 = v26;
    buf[0] = v17;
    buf[1] = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
    *(_DWORD *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v27) = v18;
    return 1;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  }
  int v12 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    __int16 v30 = 1024;
    int v31 = 88;
    __int16 v32 = 2082;
    uint64_t v33 = "Found unsigned integer property with too few bits.";
    _os_log_impl(&dword_1A1780000, v12, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
  char v14 = (void *)std::ostream::operator<<();
  unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" STYL Parse Error Here: ", 24);
  unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Found unsigned integer property with too few bits.", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::lightOriginAzimuthDecoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, void *a6)
{
  return gss::enumDecoder<gss::ScenePropertyID>(a1, a2, a3, 2u, a4, a6);
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::operator()(void *a1, unsigned __int8 *a2)
{
}

uint64_t gss::fixedPoint5_3Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v10 = gss::idForIndex<gss::ScenePropertyID>(a4);
  unsigned __int8 v28 = v10;
  if (v10 == 88) {
    return 1;
  }
  if (a3 == 8)
  {
    unint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    unint64_t v14 = v13 + 2;
    if (!*(unsigned char *)(a1 + 24)) {
      unint64_t v14 = v13 + 1;
    }
    if (v12 >= v14)
    {
      unint64_t v25 = v13 + 1;
      unsigned int v26 = *(unsigned __int8 *)(*(void *)a1 + v13);
      if (*(unsigned char *)(a1 + 24))
      {
        if (v25 >= v12) {
          int v27 = 0;
        }
        else {
          int v27 = *(unsigned __int8 *)(*(void *)a1 + v25);
        }
        unsigned int v26 = ((v27 & (0xFFFF << (8 - *(unsigned char *)(a1 + 24)))) >> (8 - *(unsigned char *)(a1 + 24))) | ((((1 << (8 - *(unsigned char *)(a1 + 24))) - 1) & v26) << *(unsigned char *)(a1 + 24));
      }
      *(void *)(a1 + 16) = v25;
      buf[0] = v10;
      buf[1] = 0;
      geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a2, buf, &buf[2]);
      *(float *)geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 * 0.125;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unint64_t v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 270;
      __int16 v33 = 2082;
      uint64_t v34 = "Could not read fixed point 5.3.";
      _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    uint8_t v17 = (void *)std::ostream::operator<<();
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 5.3.", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    }
    unsigned int v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      __int16 v31 = 1024;
      int v32 = 269;
      __int16 v33 = 2082;
      uint64_t v34 = "Found fixed point 5.3 property with strange number of bits.";
      _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    unint64_t v22 = (void *)std::ostream::operator<<();
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 5.3 property with strange number of bits.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

void gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingGlobalProperties(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 2824);
  std::mutex::lock((std::mutex *)(a1 + 2824));
  atomic_store(a2, (unsigned __int8 *)(a1 + 2785));
  atomic_store(1u, (unsigned __int8 *)(a1 + 2784));
  std::promise<void>::set_value((std::promise<void> *)(a1 + 2792));
  uint64_t v5 = *(void *)(a1 + 2952);
  if (!v5) {
    goto LABEL_19;
  }
  unsigned __int16 v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  if (*(void **)v5 != v7)
  {
    do
    {
      unsigned __int8 v16 = a2;
      uint64_t v8 = v6[3];
      if (!v8)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 48))(v8, &v16);
      v6 += 4;
    }
    while (v6 != v7);
    uint64_t v5 = *(void *)(a1 + 2952);
    *(void *)(a1 + 2952) = 0;
    if (!v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void **)v5;
    if (!*(void *)v5) {
      goto LABEL_18;
    }
    goto LABEL_9;
  }
  *(void *)(a1 + 2952) = 0;
  uint64_t v9 = *(void **)v5;
  if (*(void *)v5)
  {
LABEL_9:
    int v10 = *(void **)(v5 + 8);
    int v11 = v9;
    if (v10 != v9)
    {
      unint64_t v12 = v10 - 4;
      uint64_t v13 = v10 - 4;
      do
      {
        unint64_t v15 = (void *)v13[3];
        if (v13 == v15)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(void *, void *))(*v15 + 40))(v15, v11);
        }
        v12 -= 4;
        BOOL v14 = v13 == v9;
        v13 -= 4;
      }
      while (!v14);
      int v11 = *(void **)v5;
    }
    *(void *)(v5 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(v5 + 24) + 40))(*(void *)(v5 + 24), v11, *(void *)(v5 + 16) - (void)v11);
  }
LABEL_18:
  MEMORY[0x1A6239270](v5, 0x20C40DC1BFBCFLL);
LABEL_19:
  std::mutex::unlock(v4);
}

void sub_1A1915B90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC97B9E962ADF4AD4;
    if (a2 <= 0xC97B9E962ADF4AD4) {
      unint64_t v3 = 0xC97B9E962ADF4AD4 % a2;
    }
  }
  else
  {
    unint64_t v3 = (a2 - 1) & 0xC97B9E962ADF4AD4;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0xC97B9E962ADF4AD4)
      {
        if (v6[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0xC97B9E962ADF4AD4)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v11 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v11 = 0x99BED48DEFBBD82BLL % a2;
    }
  }
  else
  {
    unint64_t v11 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x99BED48DEFBBD82BLL)
      {
        if (v13[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x99BED48DEFBBD82BLL)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x99BED48DEFBBD82BLL) {
    return v10;
  }
  return v10;
}

uint64_t geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::isAcyclicDFS(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, unint64_t *a4)
{
  __int16 v46 = a2;
  uint64_t v8 = (unsigned __int8 **)*a3;
  uint64_t v9 = (unsigned __int8 **)a3[1];
  if ((unsigned __int8 **)*a3 != v9)
  {
    unsigned int v10 = *a2;
    unint64_t v11 = (unsigned __int8 **)*a3;
    while (1)
    {
      unsigned int v12 = **v11;
      if (v12 == v10) {
        break;
      }
      ++v11;
      if (v10 < v12 || v11 == v9)
      {
LABEL_19:
        while (**v8 < *a2)
        {
          if (++v8 == v9)
          {
            uint64_t v8 = (unsigned __int8 **)a3[1];
            goto LABEL_24;
          }
        }
        goto LABEL_22;
      }
    }
    if (v11 == v9) {
      goto LABEL_19;
    }
    unint64_t v14 = (unsigned __int8 **)*a4;
    unsigned __int8 v16 = a4 + 1;
    uint64_t v15 = (unsigned __int8 **)a4[1];
    if ((unsigned __int8 **)*a4 != v15)
    {
      while (1)
      {
        unsigned int v17 = **v14;
        if (v17 == v10) {
          break;
        }
        ++v14;
        if (v10 < v17 || v14 == v15) {
          return 1;
        }
      }
      if (v14 != v15)
      {
        int64_t v45 = (char *)v15 - (char *)(v14 + 1);
        if (v15 != v14 + 1) {
          memmove(v14, v14 + 1, (char *)v15 - (char *)(v14 + 1));
        }
        goto LABEL_83;
      }
    }
    return 1;
  }
LABEL_22:
  if (v8 == v9 || *a2 != **v8) {
LABEL_24:
  }
    std::vector<md::FrameGraphPass *>::insert(a3, v8, (char *)&v46);
  uint64_t v19 = *(void *)(a1 + 8);
  if (!v19) {
    return 1;
  }
  unsigned int v20 = *v46;
  uint64_t v21 = a1 + 8;
  do
  {
    unsigned int v22 = **(unsigned __int8 **)(v19 + 32);
    BOOL v23 = v22 >= v20;
    if (v22 >= v20) {
      uint64_t v24 = (uint64_t *)v19;
    }
    else {
      uint64_t v24 = (uint64_t *)(v19 + 8);
    }
    if (v23) {
      uint64_t v21 = v19;
    }
    uint64_t v19 = *v24;
  }
  while (*v24);
  if (v21 == a1 + 8 || v20 < **(unsigned __int8 **)(v21 + 32)) {
    return 1;
  }
  unint64_t v25 = (unsigned __int8 **)*a4;
  unsigned int v26 = (unsigned __int8 **)a4[1];
  if ((unsigned __int8 **)*a4 != v26)
  {
    while (**v25 < v20)
    {
      if (++v25 == v26)
      {
        unint64_t v25 = (unsigned __int8 **)a4[1];
        goto LABEL_42;
      }
    }
  }
  if (v25 == v26 || v20 != **v25) {
LABEL_42:
  }
    std::vector<md::FrameGraphPass *>::insert(a4, v25, (char *)&v46);
  int v27 = *(void **)(v21 + 40);
  unsigned __int8 v28 = *(void **)(v21 + 48);
  if (v27 == v28)
  {
    unint64_t v14 = (unsigned __int8 **)*a4;
    __int16 v29 = (unsigned __int8 **)a4[1];
    unint64_t v30 = (unint64_t)v29;
LABEL_45:
    if (v14 != (unsigned __int8 **)v30)
    {
      unsigned int v31 = *v46;
      while (1)
      {
        unsigned int v32 = **v14;
        if (v32 == v31) {
          break;
        }
        ++v14;
        if (v31 < v32 || v14 == v29) {
          return 1;
        }
      }
      if (v14 != v29)
      {
        int64_t v45 = (char *)v29 - (char *)(v14 + 1);
        if (v29 != v14 + 1) {
          memmove(v14, v14 + 1, (char *)v29 - (char *)(v14 + 1));
        }
        unsigned __int8 v16 = a4 + 1;
LABEL_83:
        void *v16 = (char *)v14 + v45;
      }
    }
    return 1;
  }
  while (1)
  {
    uint64_t v34 = (unsigned __int8 *)*v27;
    uint64_t v35 = (unsigned __int8 **)*a3;
    int v36 = (unsigned __int8 **)a3[1];
    if ((unsigned __int8 **)*a3 == v36) {
      goto LABEL_66;
    }
    unsigned int v37 = *v34;
    while (1)
    {
      unsigned int v38 = **v35;
      if (v38 == v37) {
        break;
      }
      ++v35;
      if (v37 < v38 || v35 == v36) {
        goto LABEL_66;
      }
    }
    if (v35 == v36)
    {
LABEL_66:
      uint64_t result = geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::isAcyclicDFS(a1, *v27, a3, a4);
      if (!result) {
        return result;
      }
    }
    unint64_t v14 = (unsigned __int8 **)*a4;
    __int16 v29 = (unsigned __int8 **)a4[1];
    unint64_t v30 = *a4;
    if ((unsigned __int8 **)*a4 != v29) {
      break;
    }
LABEL_55:
    if (++v27 == v28) {
      goto LABEL_45;
    }
  }
  unsigned int v41 = *v34;
  int16x4_t v42 = (unsigned __int8 **)*a4;
  while (1)
  {
    unsigned int v43 = **v42;
    if (v43 == v41) {
      break;
    }
    ++v42;
    if (v41 < v43 || v42 == v29)
    {
      unint64_t v30 = a4[1];
      goto LABEL_55;
    }
  }
  unint64_t v30 = a4[1];
  if (v42 == v29) {
    goto LABEL_55;
  }
  return 0;
}

void std::vector<md::FrameGraphPass *>::insert(unint64_t *a1, void *a2, char *a3)
{
  unint64_t v3 = a3;
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *(void *)a3;
      a1[1] = (unint64_t)(v9 + 8);
    }
    else
    {
      int64_t v11 = v5 - (void)(v9 + 8);
      uint64_t v12 = v11 >> 3;
      uint64_t v13 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        unsigned int v20 = (void *)a1[1];
      }
      else
      {
        unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
        uint64_t v15 = (char *)(v14 + v6);
        unint64_t v16 = v14 + v6 + 8;
        if (v5 > v16) {
          unint64_t v16 = a1[1];
        }
        unint64_t v17 = v16 + ~v6 - v14;
        unint64_t v18 = v5 - (void)v15;
        BOOL v19 = v17 >= 0x58 && v18 > 0x1F;
        unsigned int v20 = (void *)a1[1];
        if (!v19) {
          goto LABEL_65;
        }
        uint64_t v21 = (v17 >> 3) + 1;
        uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v13 = (uint64_t *)((char *)v13 + v22);
        BOOL v23 = (_OWORD *)(v5 + 16);
        uint64_t v24 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
        uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *BOOL v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        unsigned int v20 = (void *)(v5 + v22);
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_65:
          do
          {
            uint64_t v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = (unint64_t)v20;
      if ((char *)v5 != v9 + 8) {
        memmove((void *)(v5 - 8 * v12), v9, v11);
      }
      if (v9 <= v3) {
        v3 += 8 * (a1[1] > (unint64_t)v3);
      }
      *(void *)uint64_t v9 = *(void *)v3;
    }
    return;
  }
  unint64_t v28 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v28 >> 61) {
    abort();
  }
  uint64_t v30 = v10 - v6;
  if (v30 >> 2 > v28) {
    unint64_t v28 = v30 >> 2;
  }
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v28;
  }
  if (v31)
  {
    if (v31 >> 61) {
      goto LABEL_62;
    }
    unsigned int v32 = (char *)operator new(8 * v31);
  }
  else
  {
    unsigned int v32 = 0;
  }
  __int16 v33 = &v32[8 * v8];
  uint64_t v34 = &v32[8 * v31];
  if (v8 != v31)
  {
LABEL_32:
    int v36 = (char *)v6;
    goto LABEL_33;
  }
  if (v7 >= 1)
  {
    unint64_t v35 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v35 = v8 + 1;
    }
    v33 -= 8 * (v35 >> 1);
    goto LABEL_32;
  }
  unint64_t v46 = v7 >> 2;
  if ((void *)v6 == a2) {
    unint64_t v46 = 1;
  }
  if (v46 >> 61) {
LABEL_62:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v47 = 8 * v46;
  __int16 v33 = (char *)operator new(8 * v46);
  uint64_t v34 = &v33[v47];
  if (!v32) {
    goto LABEL_32;
  }
  operator delete(v32);
  uint64_t v34 = &v33[v47];
  int v36 = (char *)*a1;
LABEL_33:
  *(void *)__int16 v33 = *(void *)v3;
  unsigned int v37 = v33 + 8;
  if (v36 != v9)
  {
    unsigned int v38 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v39 = v38 - v36 - 8;
    if (v39 < 0x58)
    {
      unsigned int v41 = v9;
    }
    else if ((unint64_t)(v38 - v33) < 0x20)
    {
      unsigned int v41 = v9;
    }
    else
    {
      uint64_t v40 = (v39 >> 3) + 1;
      unsigned int v41 = &v9[-8 * (v40 & 0x3FFFFFFFFFFFFFFCLL)];
      int16x4_t v42 = v33 - 16;
      unsigned int v43 = (long long *)(v6 + 8 * v8 - 16);
      uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v45 = *v43;
        *((_OWORD *)v42 - 1) = *(v43 - 1);
        *(_OWORD *)int16x4_t v42 = v45;
        v42 -= 32;
        v43 -= 2;
        v44 -= 4;
      }
      while (v44);
      v33 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_54;
      }
    }
    do
    {
      uint64_t v48 = *((void *)v41 - 1);
      v41 -= 8;
      *((void *)v33 - 1) = v48;
      v33 -= 8;
    }
    while (v41 != v36);
  }
LABEL_54:
  unsigned __int8 v49 = (char *)a1[1];
  int64_t v50 = v49 - v9;
  if (v49 != v9)
  {
    unint64_t v51 = v9;
    size_t v52 = v49 - v9;
    int v53 = v34;
    memmove(v37, v51, v52);
    uint64_t v34 = v53;
  }
  __int16 v54 = (void *)*a1;
  *a1 = (unint64_t)v33;
  a1[1] = (unint64_t)&v37[v50];
  a1[2] = (unint64_t)v34;
  if (v54)
  {
    operator delete(v54);
  }
}

uint64_t std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0,std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0>,md::MeshRenderable * ()(md::MeshRenderable&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  long long v7 = *(_OWORD *)(a1 + 8);
  uint64_t v8 = &v14;
  uint64_t v9 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = v7;
  uint64_t v12 = &v14;
  uint64_t v13 = a2;
  uint64_t v4 = *(unsigned int *)(v3 + 224);
  if (v4 == -1)
  {
    uint64_t v6 = std::__throw_bad_variant_access[abi:nn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZN2md18RenderBatchManager24buildRenderablesForBatchEPNS9_21MeshRenderableBuilderEPNS9_11RenderBatchEyENK3__0clERNS9_14MeshRenderableEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SQ_SM_EEEEEEDcSU_DpT0_(v6);
  }
  else
  {
    uint64_t v15 = &v7;
    ((void (*)(long long **))off_1EF58FD18[v4])(&v15);
    return v14;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZN2md18RenderBatchManager24buildRenderablesForBatchEPNS9_21MeshRenderableBuilderEPNS9_11RenderBatchEyENK3__0clERNS9_14MeshRenderableEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SQ_SM_EEEEEEDcSU_DpT0_(uint64_t **a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)(*a1 + 4);
  uint64_t v5 = **a1;
  uint64_t v48 = (void (**)(void **))&unk_1EF57F0A8;
  unsigned __int8 v49 = (os_signpost_id_t *)v4;
  int64_t v50 = (void **)&v48;
  v46[0] = &unk_1EF57F060;
  v46[1] = v4;
  uint64_t v47 = v46;
  size_t v52 = v51;
  v51[0] = &unk_1EF57F060;
  v51[1] = v4;
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  uint64_t v6 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  long long v7 = v6;
  os_signpost_id_t v8 = *v49;
  if (*v49 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v8, "BuildMaterialRenderable", "", buf, 2u);
  }

  if (v47 == v46)
  {
    (*(void (**)(void *))(v46[0] + 32))(v46);
  }
  else if (v47)
  {
    (*(void (**)(void *))(*v47 + 40))(v47);
  }
  if (v50 == (void **)&v48)
  {
    v48[4]((void **)&v48);
  }
  else if (v50)
  {
    (*((void (**)(void **))*v50 + 5))(v50);
  }
  uint64_t v9 = v3[3];
  *(unsigned char *)(v9 + 8) = 1;
  if (*(unsigned char *)(a2 + 217))
  {
    uint64_t v10 = *(void *)(a2 + 64);
    char v11 = *(unsigned char *)(a2 + 216);
    char v12 = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 48);
    char v11 = *(unsigned char *)(v9 + 56);
    v45[0] = *(_DWORD *)(v9 + 57);
    *(_DWORD *)((char *)v45 + 3) = *(_DWORD *)(v9 + 60);
    char v12 = *(unsigned char *)(v9 + 64);
    v44[0] = *(_DWORD *)(v9 + 65);
    *(_DWORD *)((char *)v44 + 3) = *(_DWORD *)(v9 + 68);
  }
  uint64_t v13 = v3[1];
  unint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 112);
  v42[0] = *(void *)(a2 + 104);
  v42[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = *(unsigned __int8 *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 120);
  char v18 = *(unsigned char *)(a2 + 121);
  int v19 = *(unsigned __int8 *)(a2 + 75);
  char v20 = *(unsigned char *)(a2 + 122);
  LOBYTE(v40) = 0;
  char v41 = 0;
  if (*(unsigned char *)(a2 + 140))
  {
    long long v40 = *(_OWORD *)(a2 + 124);
    char v41 = 1;
  }
  uint64_t v21 = *(void *)(a2 + 144);
  int v22 = *(unsigned __int8 *)(a2 + 76);
  LOBYTE(v33[0]) = 0;
  char v39 = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    uint64_t v23 = *(void *)(a2 + 160);
    v33[0] = *(void *)(a2 + 152);
    v33[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    char v34 = *(unsigned char *)(a2 + 168);
    uint64_t v24 = *(void *)(a2 + 184);
    uint64_t v35 = *(void *)(a2 + 176);
    uint64_t v36 = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = *(void *)(a2 + 200);
    uint64_t v37 = *(void *)(a2 + 192);
    uint64_t v38 = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    char v39 = 1;
  }
  uint64_t v28 = v10;
  char v29 = v11;
  *(_DWORD *)uint64_t v30 = v45[0];
  *(_DWORD *)&v30[3] = *(_DWORD *)((char *)v45 + 3);
  char v31 = v12;
  *(_DWORD *)unsigned int v32 = v44[0];
  *(_DWORD *)&v32[3] = *(_DWORD *)((char *)v44 + 3);
  md::MeshRenderableBuilder::buildRenderable((uint64_t)buf, v13, v9, (uint64_t *)(a2 + 80), v14, v42, v16 != 0, v17, v18, v19 != 0, v20, (uint64_t)&v40, v21, SBYTE4(v21), SHIWORD(v21), v22 != 0, v33, (uint64_t)&v28, *(unsigned char *)(a2 + 218));
  std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v33);
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v26 = *(void **)(v5 + 248);
    if (v26) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  long long v26 = *(void **)(v5 + 248);
  if (!v26)
  {
LABEL_32:
    geo::Pool<md::MaterialRenderable>::allocateSlab((uint64_t **)(v5 + 208));
    long long v26 = *(void **)(v5 + 248);
  }
LABEL_34:
  *(void *)(v5 + 248) = *v26;
  *(void *)v3[2] = md::MaterialRenderable::MaterialRenderable((uint64_t)v26, (uint64_t)buf);
  md::MaterialRenderable::~MaterialRenderable((md::MaterialRenderable *)buf);
  if (!v52)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x1A1916B20);
  }
  (*(void (**)(void *))(*v52 + 48))(v52);
  uint64_t result = (uint64_t)v52;
  if (v52 == v51) {
    return (*(uint64_t (**)(void *))(v51[0] + 32))(v51);
  }
  if (v52) {
    return (*(uint64_t (**)(void *))(*v52 + 40))(v52);
  }
  return result;
}

void sub_1A1916B48(_Unwind_Exception *exception_object)
{
}

void sub_1A1916B54()
{
}

void std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = **(void **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "BuildMaterialRenderable", "", v5, 2u);
  }
}

char *geo::Pool<md::MaterialRenderable>::allocateSlab(uint64_t **a1)
{
  uint64_t result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  uint64_t v3 = result;
  uint64_t v5 = a1 + 1;
  os_signpost_id_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if ((unint64_t)result >= v7) {
          break;
        }
        os_signpost_id_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= (unint64_t)result) {
        break;
      }
      os_signpost_id_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    os_signpost_id_t v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    uint64_t *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    void *v5 = v8;
    uint64_t v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    else
    {
      uint64_t v10 = v8;
    }
    uint64_t result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  char v11 = a1[5];
  uint64_t v12 = 408 * (void)a1[3] - 408;
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = &v3[v12];
    do
    {
      *(void *)uint64_t v13 = v11;
      unint64_t v14 = v13 - 408;
      char v11 = (uint64_t *)v13;
      uint64_t v13 = v14;
    }
    while (v14 >= v3);
    char v11 = (uint64_t *)(v14 + 408);
  }
  a1[5] = v11;
  return result;
}

void md::MeshRenderableBuilder::buildRenderable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t *a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, uint64_t *a17, uint64_t a18, char a19)
{
  v121[0] = a5;
  *(void *)a1 = &unk_1EF534030;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
  uint64_t v25 = *(void *)(a3 + 32);
  *(void *)(a1 + 24) = *(void *)(a3 + 24);
  *(void *)(a1 + 32) = v25;
  uint64_t v26 = *(void *)(a3 + 40);
  *(void *)(a1 + 40) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (__n128 *)(a1 + 280);
  long long v28 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a1 + 128) = v28;
  *(void *)(a1 + 142) = *(void *)(a3 + 142);
  long long v29 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  long long v30 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = v30;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a3 + 176))
  {
    uint64_t v31 = *(void *)(a3 + 160);
    *(void *)(a1 + 152) = *(void *)(a3 + 152);
    *(void *)(a1 + 160) = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a3 + 168);
    *(unsigned char *)(a1 + 176) = 1;
  }
  *(void *)(a1 + 184) = *(void *)(a3 + 184);
  *(_WORD *)(a1 + 192) = 0;
  if (*(unsigned char *)(a3 + 193))
  {
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a3 + 192);
    *(unsigned char *)(a1 + 193) = 1;
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a3 + 196);
  *(void *)a1 = &unk_1EF5395C8;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 1;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *uint64_t v27 = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(unsigned char *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 376) = 3;
  *(unsigned char *)(a1 + 380) = 0;
  *(unsigned char *)(a1 + 396) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  uint64_t v32 = *a4;
  float v33 = **(float **)(*a4 + 48);
  char v34 = *(void **)(*a4 + 16);
  if (!v34
    || ((v35 = gms::_Material<ggl::Texture2D>::zoomable(v34, 3u), v33 < 1.0) ? (unsigned __int8 v36 = v35) : (unsigned __int8 v36 = 0),
        (v36 & 1) == 0))
  {
    uint64_t v37 = *(void **)(v32 + 32);
    if (!v37
      || ((unsigned __int8 v38 = gms::_Material<ggl::Texture2D>::zoomable(v37, 3u), v33 > 0.0)
        ? (unsigned __int8 v39 = v38)
        : (unsigned __int8 v39 = 0),
          (v39 & 1) == 0))
    {
      uint64_t v40 = *(void *)(a2 + 16);
      char v119 = 3;
      char v41 = *(std::__shared_weak_count **)(a2 + 40);
      unsigned int v118 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::MaterialTextureManager::textureFromMaterial(&v120, v40, a4, v121, &v119, 0);
      __n128 v42 = v120;
      __n128 v120 = 0uLL;
      unsigned int v43 = *(std::__shared_weak_count **)(a1 + 288);
      *uint64_t v27 = v42;
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      uint64_t v44 = (std::__shared_weak_count *)v120.n128_u64[1];
      if (v120.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v120.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
  }
  uint64_t v45 = *a4;
  float v46 = **(float **)(*a4 + 48);
  uint64_t v47 = *(void **)(*a4 + 16);
  if (v47)
  {
    unsigned __int8 v48 = gms::_Material<ggl::Texture2D>::zoomable(v47, 4u);
    unsigned __int8 v49 = v46 < 1.0 ? v48 : 0;
    if (v49) {
      goto LABEL_50;
    }
  }
  int64_t v50 = *(void **)(v45 + 32);
  if (v50)
  {
    unsigned __int8 v51 = gms::_Material<ggl::Texture2D>::zoomable(v50, 4u);
    unsigned __int8 v52 = v46 > 0.0 ? v51 : 0;
    if (v52) {
      goto LABEL_50;
    }
  }
  uint64_t v53 = *(void *)(a2 + 16);
  char v119 = 4;
  __int16 v54 = *(std::__shared_weak_count **)(a2 + 40);
  unint64_t v117 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::MaterialTextureManager::textureFromMaterial(&v120, v53, a4, v121, &v119, 0);
  __n128 v55 = v120;
  __n128 v120 = 0uLL;
  uint64_t v56 = *(std::__shared_weak_count **)(a1 + 304);
  *(__n128 *)(a1 + 296) = v55;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  uint64_t v57 = (std::__shared_weak_count *)v120.n128_u64[1];
  if (v120.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v120.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  if (!v117 || atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_50:
    uint64_t v58 = *a6;
    if (*a6)
    {
LABEL_51:
      uint64_t v59 = (char *)operator new(0x48uLL);
      unint64_t v60 = (std::__shared_weak_count *)v59;
      *((void *)v59 + 1) = 0;
      unint64_t v61 = (atomic_ullong *)(v59 + 8);
      *((void *)v59 + 2) = 0;
      *(void *)uint64_t v59 = &unk_1EF580020;
      *((void *)v59 + 3) = 0;
      uint64_t v62 = v59 + 24;
      *((void *)v59 + 4) = 0;
      *((void *)v59 + 5) = 0;
      *((_DWORD *)v59 + 12) = 0;
      uint64_t v63 = a6[1];
      *((void *)v59 + 7) = v58;
      *((void *)v59 + 8) = v63;
      if (v63
        && (atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed),
            (uint64_t v64 = (std::__shared_weak_count *)*((void *)v59 + 4)) != 0))
      {
        if (v64->__shared_owners_ != -1)
        {
LABEL_58:
          uint64_t v65 = *(std::__shared_weak_count **)(a1 + 264);
          *(void *)(a1 + 256) = v62;
          *(void *)(a1 + 264) = v60;
          if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          *(unsigned char *)(a1 + 272) = 1;
          goto LABEL_62;
        }
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v60[1].__vftable = (std::__shared_weak_count_vtbl *)&v60[1];
        v60[1].__shared_owners_ = (uint64_t)v60;
        std::__shared_weak_count::__release_weak(v64);
      }
      else
      {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v60[1].__vftable = (std::__shared_weak_count_vtbl *)&v60[1];
        v60[1].__shared_owners_ = (uint64_t)v60;
      }
      if (!atomic_fetch_add(v61, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
      goto LABEL_58;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
    uint64_t v58 = *a6;
    if (*a6) {
      goto LABEL_51;
    }
  }
  uint64_t v103 = *a4;
  float v104 = **(float **)(*a4 + 48);
  uint64_t v105 = *(void **)(*a4 + 16);
  if (!v105
    || ((unsigned __int8 v106 = gms::_Material<ggl::Texture2D>::zoomable(v105, 1u), v104 < 1.0)
      ? (unsigned __int8 v107 = v106)
      : (unsigned __int8 v107 = 0),
        (v107 & 1) == 0))
  {
    int v108 = *(void **)(v103 + 32);
    if (!v108
      || ((unsigned __int8 v109 = gms::_Material<ggl::Texture2D>::zoomable(v108, 1u), v104 > 0.0)
        ? (unsigned __int8 v110 = v109)
        : (unsigned __int8 v110 = 0),
          (v110 & 1) == 0))
    {
      uint64_t v111 = *(void *)(a2 + 16);
      char v119 = 1;
      uint64_t v112 = *(std::__shared_weak_count **)(a2 + 40);
      unint64_t v116 = v112;
      if (v112) {
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::MaterialTextureManager::textureFromMaterial(&v120, v111, a4, v121, &v119, 0);
      __n128 v113 = v120;
      __n128 v120 = 0uLL;
      unint64_t v114 = *(std::__shared_weak_count **)(a1 + 264);
      *(__n128 *)(a1 + 256) = v113;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
      char v115 = (std::__shared_weak_count *)v120.n128_u64[1];
      if (v120.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v120.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
      if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
  }
LABEL_62:
  uint64_t v66 = *a4;
  float v67 = **(float **)(*a4 + 48);
  unint64_t v68 = *(void **)(*a4 + 16);
  if (!v68
    || ((unsigned __int8 v69 = gms::_Material<ggl::Texture2D>::zoomable(v68, 0xBu), v67 < 1.0)
      ? (unsigned __int8 v70 = v69)
      : (unsigned __int8 v70 = 0),
        (v70 & 1) == 0))
  {
    unsigned int v71 = *(void **)(v66 + 32);
    if (!v71
      || ((unsigned __int8 v72 = gms::_Material<ggl::Texture2D>::zoomable(v71, 0xBu), v67 > 0.0)
        ? (unsigned __int8 v73 = v72)
        : (unsigned __int8 v73 = 0),
          (v73 & 1) == 0))
    {
      (*(void (**)(__n128 *__return_ptr, double))(*(void *)*a4 + 352))(&v120, 0.0);
      if (v120.n128_u8[0]) {
        BOOL v74 = v120.n128_u8[1] == 0;
      }
      else {
        BOOL v74 = 0;
      }
      char v75 = !v74;
      *(unsigned char *)(a1 + 248) = v75;
    }
  }
  uint64_t v76 = *a4;
  float v77 = **(float **)(*a4 + 48);
  unsigned int v78 = *(void **)(*a4 + 16);
  if (!v78
    || ((unsigned __int8 v79 = gms::_Material<ggl::Texture2D>::zoomable(v78, 0x10u), v77 < 1.0)
      ? (unsigned __int8 v80 = v79)
      : (unsigned __int8 v80 = 0),
        (v80 & 1) == 0))
  {
    int v81 = *(void **)(v76 + 32);
    if (!v81
      || ((unsigned __int8 v82 = gms::_Material<ggl::Texture2D>::zoomable(v81, 0x10u), v77 > 0.0)
        ? (unsigned __int8 v83 = v82)
        : (unsigned __int8 v83 = 0),
          (v83 & 1) == 0))
    {
      (*(void (**)(__n128 *__return_ptr, double))(*(void *)*a4 + 552))(&v120, 0.0);
      if (v120.n128_u8[0]) {
        BOOL v84 = v120.n128_u8[1] == 0;
      }
      else {
        BOOL v84 = 0;
      }
      char v85 = !v84;
      *(unsigned char *)(a1 + 146) = v85;
    }
  }
  if (*(unsigned __int8 *)(a1 + 368) == *((unsigned __int8 *)a17 + 56))
  {
    if (*(unsigned char *)(a1 + 368))
    {
      uint64_t v87 = *a17;
      uint64_t v86 = a17[1];
      if (v86) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v88 = *(std::__shared_weak_count **)(a1 + 320);
      *(void *)(a1 + 312) = v87;
      *(void *)(a1 + 320) = v86;
      if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
      *(unsigned char *)(a1 + 328) = *((unsigned char *)a17 + 16);
      uint64_t v90 = a17[3];
      uint64_t v89 = a17[4];
      if (v89) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v91 = *(std::__shared_weak_count **)(a1 + 344);
      *(void *)(a1 + 336) = v90;
      *(void *)(a1 + 344) = v89;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
      uint64_t v93 = a17[5];
      uint64_t v92 = a17[6];
      if (v92) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v94 = *(std::__shared_weak_count **)(a1 + 360);
      *(void *)(a1 + 352) = v93;
      *(void *)(a1 + 360) = v92;
      if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 368))
  {
    std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::reset[abi:nn180100](a1 + 312);
  }
  else
  {
    uint64_t v95 = a17[1];
    *(void *)(a1 + 312) = *a17;
    *(void *)(a1 + 320) = v95;
    if (v95) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 328) = *((unsigned char *)a17 + 16);
    uint64_t v96 = a17[4];
    *(void *)(a1 + 336) = a17[3];
    *(void *)(a1 + 344) = v96;
    if (v96) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v97 = a17[6];
    *(void *)(a1 + 352) = a17[5];
    *(void *)(a1 + 360) = v97;
    if (v97) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 368) = 1;
  }
  *(void *)(a1 + 240) = v121[0];
  uint64_t v98 = *a4;
  uint64_t v99 = a4[1];
  if (v99) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v99 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v100 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = v98;
  *(void *)(a1 + 232) = v99;
  if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
    std::__shared_weak_count::__release_weak(v100);
  }
  unint64_t v101 = (_OWORD *)(a1 + 380);
  if (*(unsigned char *)(a1 + 248)) {
    char v102 = a7;
  }
  else {
    char v102 = 0;
  }
  *(unsigned char *)(a1 + 144) = v102;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a18;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a18 + 16);
  *(unsigned char *)(a1 + 145) = a8;
  *(unsigned char *)(a1 + 376) = a9;
  *(unsigned char *)(a1 + 147) = a10 ^ 1;
  if (*(unsigned __int8 *)(a1 + 396) == *(unsigned __int8 *)(a12 + 16))
  {
    if (*(unsigned char *)(a1 + 396)) {
      *unint64_t v101 = *(_OWORD *)a12;
    }
  }
  else if (*(unsigned char *)(a1 + 396))
  {
    *(unsigned char *)(a1 + 396) = 0;
  }
  else
  {
    *unint64_t v101 = *(_OWORD *)a12;
    *(unsigned char *)(a1 + 396) = 1;
  }
  *(_DWORD *)(a1 + 196) = a13;
  *(unsigned char *)(a1 + 200) = a14;
  *(unsigned char *)(a1 + 149) = a16;
  *(unsigned char *)(a1 + 377) = a11;
  *(unsigned char *)(a1 + 400) = a19;
  if (*(unsigned char *)(a1 + 368)) {
    *(unsigned char *)(a1 + 146) = 0;
  }
}

void sub_1A19178BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  md::MaterialRenderable::~MaterialRenderable(v2);
  _Unwind_Resume(a1);
}

void *gms::BasicMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10)) {
    char v8 = BYTE1(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  float v3 = *(uint64_t (****)(void))(a1 + 136);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 264))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<BOOL>::getProperty@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  if (*(unsigned char *)(result + 8))
  {
    a2[1] = *(unsigned char *)(result + 9);
    *a2 = 1;
  }
  return result;
}

void *gms::ZoomablePropertyStore<BOOL>::getProperty@<X0>(void *result@<X0>, unsigned char *a2@<X8>, float a3@<S0>)
{
  *a2 = 0;
  unsigned int v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17) {
    unsigned int v5 = 23;
  }
  else {
    unsigned int v5 = v4;
  }
  uint64_t v6 = (void *)result[5];
  unint64_t v7 = result + 6;
  char v8 = v6;
  if (v6 != result + 6)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (void *)result[5];
    do
    {
      char v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          char v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      uint64_t v10 = v12;
    }
    while (v12 != v7);
    char v8 = (void *)result[5];
    do
    {
      unint64_t v14 = v9 >> 1;
      uint64_t v15 = v8;
      if (v9 != 1)
      {
        uint64_t v17 = v9 >> 1;
        char v18 = v8;
        do
        {
          char v20 = (void *)v18[1];
          if (v20)
          {
            do
            {
              uint64_t v15 = v20;
              char v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v18[2];
              BOOL v13 = *v15 == (void)v18;
              char v18 = v15;
            }
            while (!v13);
          }
          char v18 = v15;
          BOOL v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 26))
      {
        int v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            char v8 = v16;
            int v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            char v8 = (void *)v15[2];
            BOOL v13 = *v8 == (void)v15;
            uint64_t v15 = v8;
          }
          while (!v13);
        }
        unint64_t v14 = v9 + ~v14;
      }
      unint64_t v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 25) ? (BOOL v21 = v5 >= *((unsigned __int8 *)v8 + 26)) : (BOOL v21 = 1), v21)) {
    char v8 = result + 6;
  }
  unsigned __int8 v22 = v5 + 1;
  uint64_t v23 = (void *)result[5];
  if (v6 != v7)
  {
    unint64_t v24 = 0;
    uint64_t v25 = (void *)result[5];
    do
    {
      uint64_t v26 = (void *)v25[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v25[2];
          BOOL v13 = *v27 == (void)v25;
          uint64_t v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      uint64_t v25 = v27;
    }
    while (v27 != v7);
    uint64_t v23 = (void *)result[5];
    do
    {
      unint64_t v28 = v24 >> 1;
      long long v29 = v23;
      if (v24 != 1)
      {
        uint64_t v31 = v24 >> 1;
        uint64_t v32 = v23;
        do
        {
          float v33 = (void *)v32[1];
          if (v33)
          {
            do
            {
              long long v29 = v33;
              float v33 = (void *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              long long v29 = (void *)v32[2];
              BOOL v13 = *v29 == (void)v32;
              uint64_t v32 = v29;
            }
            while (!v13);
          }
          uint64_t v32 = v29;
          BOOL v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 26) <= v22)
      {
        long long v30 = (void *)v29[1];
        if (v30)
        {
          do
          {
            uint64_t v23 = v30;
            long long v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            uint64_t v23 = (void *)v29[2];
            BOOL v13 = *v23 == (void)v29;
            long long v29 = v23;
          }
          while (!v13);
        }
        unint64_t v28 = v24 + ~v28;
      }
      unint64_t v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 25) > v22
    || *((unsigned __int8 *)v23 + 26) <= v22)
  {
    uint64_t v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (void *)result[4]) == 0 || (float v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        unint64_t v40 = 0;
        char v41 = v6;
        do
        {
          __n128 v42 = (void *)v41[1];
          if (v42)
          {
            do
            {
              unsigned int v43 = v42;
              __n128 v42 = (void *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              unsigned int v43 = (void *)v41[2];
              BOOL v13 = *v43 == (void)v41;
              char v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          char v41 = v43;
        }
        while (v43 != v7);
        do
        {
          unint64_t v44 = v40 >> 1;
          uint64_t v45 = v6;
          if (v40 != 1)
          {
            uint64_t v47 = v40 >> 1;
            unsigned __int8 v48 = v6;
            do
            {
              unsigned __int8 v49 = (void *)v48[1];
              if (v49)
              {
                do
                {
                  uint64_t v45 = v49;
                  unsigned __int8 v49 = (void *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  uint64_t v45 = (void *)v48[2];
                  BOOL v13 = *v45 == (void)v48;
                  unsigned __int8 v48 = v45;
                }
                while (!v13);
              }
              unsigned __int8 v48 = v45;
              BOOL v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 26))
          {
            float v46 = (void *)v45[1];
            if (v46)
            {
              do
              {
                uint64_t v6 = v46;
                float v46 = (void *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                uint64_t v6 = (void *)v45[2];
                BOOL v13 = *v6 == (void)v45;
                uint64_t v45 = v6;
              }
              while (!v13);
            }
            unint64_t v44 = v40 + ~v44;
          }
          unint64_t v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 25) ? (BOOL v50 = v5 >= *((unsigned __int8 *)v6 + 26)) : (BOOL v50 = 1), v50))
      {
        uint64_t v6 = v7;
      }
      *a2 = 1;
      a2[1] = *((unsigned char *)v6 + 27);
    }
    else
    {
      unsigned __int8 v35 = v6;
      if (v6 != v7)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v6;
        do
        {
          unsigned __int8 v38 = (void *)v37[1];
          if (v38)
          {
            do
            {
              unsigned __int8 v39 = v38;
              unsigned __int8 v38 = (void *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              unsigned __int8 v39 = (void *)v37[2];
              BOOL v13 = *v39 == (void)v37;
              uint64_t v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          uint64_t v37 = v39;
        }
        while (v39 != v7);
        unsigned __int8 v35 = v6;
        do
        {
          unint64_t v51 = v36 >> 1;
          unsigned __int8 v52 = v35;
          if (v36 != 1)
          {
            uint64_t v54 = v36 >> 1;
            __n128 v55 = v35;
            do
            {
              uint64_t v56 = (void *)v55[1];
              if (v56)
              {
                do
                {
                  unsigned __int8 v52 = v56;
                  uint64_t v56 = (void *)*v56;
                }
                while (v56);
              }
              else
              {
                do
                {
                  unsigned __int8 v52 = (void *)v55[2];
                  BOOL v13 = *v52 == (void)v55;
                  __n128 v55 = v52;
                }
                while (!v13);
              }
              __n128 v55 = v52;
              BOOL v19 = v54-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v52 + 26))
          {
            uint64_t v53 = (void *)v52[1];
            if (v53)
            {
              do
              {
                unsigned __int8 v35 = v53;
                uint64_t v53 = (void *)*v53;
              }
              while (v53);
            }
            else
            {
              do
              {
                unsigned __int8 v35 = (void *)v52[2];
                BOOL v13 = *v35 == (void)v52;
                unsigned __int8 v52 = v35;
              }
              while (!v13);
            }
            unint64_t v51 = v36 + ~v51;
          }
          unint64_t v36 = v51;
        }
        while (v51);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 25) ? (BOOL v57 = v5 >= *((unsigned __int8 *)v35 + 26)) : (BOOL v57 = 1), v57))
      {
        unsigned __int8 v35 = v7;
      }
      char v69 = *((unsigned char *)v35 + 27);
      if (v6 != v7)
      {
        unint64_t v58 = 0;
        uint64_t v59 = v6;
        do
        {
          unint64_t v60 = (void *)v59[1];
          if (v60)
          {
            do
            {
              unint64_t v61 = v60;
              unint64_t v60 = (void *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              unint64_t v61 = (void *)v59[2];
              BOOL v13 = *v61 == (void)v59;
              uint64_t v59 = v61;
            }
            while (!v13);
          }
          ++v58;
          uint64_t v59 = v61;
        }
        while (v61 != v7);
        do
        {
          unint64_t v62 = v58 >> 1;
          uint64_t v63 = v6;
          if (v58 != 1)
          {
            uint64_t v65 = v58 >> 1;
            uint64_t v66 = v6;
            do
            {
              float v67 = (void *)v66[1];
              if (v67)
              {
                do
                {
                  uint64_t v63 = v67;
                  float v67 = (void *)*v67;
                }
                while (v67);
              }
              else
              {
                do
                {
                  uint64_t v63 = (void *)v66[2];
                  BOOL v13 = *v63 == (void)v66;
                  uint64_t v66 = v63;
                }
                while (!v13);
              }
              uint64_t v66 = v63;
              BOOL v19 = v65-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v63 + 26) <= v22)
          {
            uint64_t v64 = (void *)v63[1];
            if (v64)
            {
              do
              {
                uint64_t v6 = v64;
                uint64_t v64 = (void *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                uint64_t v6 = (void *)v63[2];
                BOOL v13 = *v6 == (void)v63;
                uint64_t v63 = v6;
              }
              while (!v13);
            }
            unint64_t v62 = v58 + ~v62;
          }
          unint64_t v58 = v62;
        }
        while (v62);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 25) > v22
        || *((unsigned __int8 *)v6 + 26) <= v22)
      {
        uint64_t v6 = v7;
      }
      char v68 = *((unsigned char *)v6 + 27);
      float v70 = v34;
      uint64_t result = (void *)(*(uint64_t (**)(void *, float *, char *, char *))(*result + 48))(result, &v70, &v69, &v68);
      *a2 = 1;
      a2[1] = (_BYTE)result;
    }
  }
  return result;
}

void *gms::_Material<ggl::Texture2D>::zoomable(void *result, unsigned int a2)
{
  while (1)
  {
    unint64_t v2 = result[2];
    if (v2)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.u32[0] > 1uLL)
      {
        unint64_t v4 = a2;
        if (v2 <= a2) {
          unint64_t v4 = a2 % v2;
        }
      }
      else
      {
        unint64_t v4 = (v2 - 1) & a2;
      }
      uint64_t v5 = result[1];
      uint64_t v6 = *(uint64_t ****)(v5 + 8 * v4);
      if (v6)
      {
        unint64_t v7 = *v6;
        if (*v6) {
          break;
        }
      }
    }
LABEL_2:
    uint64_t result = (void *)result[9];
    if (!result) {
      return result;
    }
  }
  unint64_t v8 = v2 - 1;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      unint64_t v9 = v7[1];
      if (v9 == (uint64_t *)a2)
      {
        if (*((unsigned __int8 *)v7 + 16) == a2) {
          goto LABEL_24;
        }
      }
      else if (((unint64_t)v9 & v8) != v4)
      {
        goto LABEL_2;
      }
      unint64_t v7 = (uint64_t **)*v7;
      if (!v7) {
        goto LABEL_2;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = (unint64_t)v7[1];
    if (v10 == a2) {
      break;
    }
    if (v10 >= v2) {
      v10 %= v2;
    }
    if (v10 != v4) {
      goto LABEL_2;
    }
LABEL_18:
    unint64_t v7 = (uint64_t **)*v7;
    if (!v7) {
      goto LABEL_2;
    }
  }
  if (*((unsigned __int8 *)v7 + 16) != a2) {
    goto LABEL_18;
  }
LABEL_24:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v11 = a2;
    if (v2 <= a2) {
      unint64_t v11 = a2 % v2;
    }
  }
  else
  {
    unint64_t v11 = (v2 - 1) & a2;
  }
  uint64_t v12 = *(uint64_t ***)(v5 + 8 * v11);
  if (!v12 || (BOOL v13 = *v12) == 0) {
LABEL_45:
  }
    abort();
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v14 = v13[1];
      if (v14 == a2)
      {
        if (*((unsigned __int8 *)v13 + 16) == a2) {
          return (void *)(*((unsigned char *)v13 + 17) != 0);
        }
      }
      else if ((v14 & v8) != v11)
      {
        goto LABEL_45;
      }
      BOOL v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_45;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v13[1];
    if (v15 != a2)
    {
      if (v15 >= v2) {
        v15 %= v2;
      }
      if (v15 != v11) {
        goto LABEL_45;
      }
      goto LABEL_39;
    }
    if (*((unsigned __int8 *)v13 + 16) != a2)
    {
LABEL_39:
      BOOL v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_45;
      }
      continue;
    }
    return (void *)(*((unsigned char *)v13 + 17) != 0);
  }
}

__n128 md::MaterialTextureManager::textureFromMaterial(__n128 *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, unsigned char *a5, unsigned int a6)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  if (!*a3)
  {
LABEL_13:
    __n128 v108 = 0uLL;
    goto LABEL_14;
  }
  switch(*a5)
  {
    case 1:
      (*(void (**)(unsigned char *__return_ptr, float))(*(void *)v8 + 24))(v114, (float)a6);
      goto LABEL_7;
    case 2:
      (*(void (**)(unsigned char *__return_ptr, float))(*(void *)v8 + 40))(v114, (float)a6);
      goto LABEL_7;
    case 3:
      (*(void (**)(unsigned char *__return_ptr, float))(*(void *)v8 + 56))(v114, (float)a6);
      goto LABEL_7;
    case 4:
      (*(void (**)(unsigned char *__return_ptr, float))(*(void *)v8 + 72))(v114, (float)a6);
LABEL_7:
      if (!v114[0]) {
        goto LABEL_13;
      }
      unint64_t v12 = v114[1];
      unint64_t v13 = *a4;
      uint64_t v14 = *a5;
      unint64_t v15 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)a2);
      if (v15) {
        geo::read_write_lock::logFailure(v15, (uint64_t)"read lock", v16);
      }
      unint64_t v17 = ((v13 >> 34) + v13 + (HIDWORD(v13) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(v13);
      unint64_t v18 = (v14 + (v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL) ^ v17;
      uint64_t v19 = v12 + (v18 << 6) + (v18 >> 2) - 0x61C8864680B583EBLL;
      unint64_t v20 = v19 ^ v18;
      int8x8_t v21 = *(int8x8_t *)(a2 + 208);
      if (!*(void *)&v21) {
        goto LABEL_50;
      }
      uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        unint64_t v23 = v19 ^ v18;
        if (v20 >= *(void *)&v21) {
          unint64_t v23 = v20 % *(void *)&v21;
        }
      }
      else
      {
        unint64_t v23 = v20 & (*(void *)&v21 - 1);
      }
      uint64_t v31 = *(uint64_t ****)(*(void *)(a2 + 200) + 8 * v23);
      if (!v31) {
        goto LABEL_50;
      }
      uint64_t v32 = *v31;
      if (!v32) {
        goto LABEL_50;
      }
      if (v22.u32[0] < 2uLL)
      {
        uint64_t v33 = *(void *)&v21 - 1;
        while (1)
        {
          unsigned __int8 v35 = v32[1];
          if (v35 == (uint64_t *)v20)
          {
            if (v32[2] == (uint64_t *)v13
              && *((unsigned __int16 *)v32 + 12) == v14
              && *((unsigned __int8 *)v32 + 26) == v12)
            {
              goto LABEL_46;
            }
          }
          else if (((unint64_t)v35 & v33) != v23)
          {
            goto LABEL_50;
          }
          uint64_t v32 = (uint64_t **)*v32;
          if (!v32) {
            goto LABEL_50;
          }
        }
      }
      break;
    default:
      goto LABEL_13;
  }
  while (1)
  {
    unint64_t v34 = (unint64_t)v32[1];
    if (v34 != v20) {
      break;
    }
    if (v32[2] == (uint64_t *)v13
      && *((unsigned __int16 *)v32 + 12) == v14
      && *((unsigned __int8 *)v32 + 26) == v12)
    {
LABEL_46:
      unint64_t v36 = (unint64_t)v32[5];
      v108.n128_u64[0] = (unint64_t)v32[4];
      v108.n128_u64[1] = v36;
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)a2);
      if (v37) {
        geo::read_write_lock::logFailure(v37, (uint64_t)"unlock", v38);
      }
      goto LABEL_185;
    }
LABEL_32:
    uint64_t v32 = (uint64_t **)*v32;
    if (!v32) {
      goto LABEL_50;
    }
  }
  if (v34 >= *(void *)&v21) {
    v34 %= *(void *)&v21;
  }
  if (v34 == v23) {
    goto LABEL_32;
  }
LABEL_50:
  unsigned __int8 v39 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)a2);
  if (v39) {
    geo::read_write_lock::logFailure(v39, (uint64_t)"unlock", v40);
  }
  __n128 v108 = 0uLL;
  char v41 = *(void (***)(void **))(*a3 + 16);
  __n128 v42 = *(std::__shared_weak_count **)(*a3 + 24);
  char v115 = v41;
  unint64_t v116 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v43 = v41[6];
  unint64_t v44 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)v43);
  if (v44) {
    geo::read_write_lock::logFailure(v44, (uint64_t)"read lock", v45);
  }
  uint64_t v46 = *((void *)v43 + 25);
  if (v12 >= (*((void *)v43 + 26) - v46) >> 4)
  {
    long long v113 = 0uLL;
  }
  else
  {
    long long v47 = *(_OWORD *)(v46 + 16 * v12);
    long long v113 = v47;
    if (*((void *)&v47 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  unsigned __int8 v48 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v43);
  if (v48) {
    geo::read_write_lock::logFailure(v48, (uint64_t)"unlock", v49);
  }
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (!(void)v113) {
      goto LABEL_182;
    }
LABEL_65:
    uint64_t v112 = (pthread_rwlock_t *)a2;
    BOOL v50 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)a2);
    if (v50) {
      geo::read_write_lock::logFailure(v50, (uint64_t)"write lock", v51);
    }
    unsigned __int8 v52 = (char *)operator new(0x48uLL);
    uint64_t v53 = (std::__shared_weak_count *)v52;
    *((void *)v52 + 1) = 0;
    uint64_t v54 = (atomic_ullong *)(v52 + 8);
    *((void *)v52 + 2) = 0;
    *(void *)unsigned __int8 v52 = &unk_1EF580020;
    *((void *)v52 + 3) = 0;
    __n128 v55 = v52 + 24;
    uint64_t v56 = *(void *)(a2 + 328);
    *((void *)v52 + 4) = 0;
    *((void *)v52 + 5) = v56;
    *((_DWORD *)v52 + 12) = 0;
    uint64_t v57 = *((void *)&v113 + 1);
    *((void *)v52 + 7) = v113;
    *((void *)v52 + 8) = v57;
    if (v57
      && (atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed),
          (unint64_t v58 = (std::__shared_weak_count *)*((void *)v52 + 4)) != 0))
    {
      if (v58->__shared_owners_ != -1)
      {
LABEL_74:
        unint64_t v59 = 0;
        v108.n128_u64[0] = (unint64_t)v55;
        v108.n128_u64[1] = (unint64_t)v53;
        unint64_t v60 = *(void *)(a2 + 208);
        if (v60)
        {
          uint8x8_t v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            unint64_t v59 = v20;
            if (v20 >= v60) {
              unint64_t v59 = v20 % v60;
            }
          }
          else
          {
            unint64_t v59 = v20 & (v60 - 1);
          }
          unint64_t v62 = *(void ***)(*(void *)(a2 + 200) + 8 * v59);
          if (v62)
          {
            uint64_t v63 = (unsigned __int16 *)*v62;
            if (*v62)
            {
              if (v61.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v65 = *((void *)v63 + 1);
                  if (v65 == v20)
                  {
                    if (*((void *)v63 + 2) == v13
                      && v63[12] == v14
                      && *((unsigned __int8 *)v63 + 26) == v12)
                    {
                      goto LABEL_162;
                    }
                  }
                  else if ((v65 & (v60 - 1)) != v59)
                  {
                    goto LABEL_102;
                  }
                  uint64_t v63 = *(unsigned __int16 **)v63;
                  if (!v63) {
                    goto LABEL_102;
                  }
                }
              }
              do
              {
                unint64_t v64 = *((void *)v63 + 1);
                if (v64 == v20)
                {
                  if (*((void *)v63 + 2) == v13
                    && v63[12] == v14
                    && *((unsigned __int8 *)v63 + 26) == v12)
                  {
                    goto LABEL_162;
                  }
                }
                else
                {
                  if (v64 >= v60) {
                    v64 %= v60;
                  }
                  if (v64 != v59) {
                    break;
                  }
                }
                uint64_t v63 = *(unsigned __int16 **)v63;
              }
              while (v63);
            }
          }
        }
LABEL_102:
        uint64_t v63 = (unsigned __int16 *)operator new(0x30uLL);
        unint64_t v66 = v14 | (v12 << 16);
        float v67 = (void *)(a2 + 216);
        char v115 = (void (**)(void **))v63;
        unint64_t v116 = (std::__shared_weak_count *)(a2 + 216);
        *(void *)uint64_t v63 = 0;
        *((void *)v63 + 1) = v20;
        *((void *)v63 + 2) = v13;
        *((void *)v63 + 3) = v66;
        *((void *)v63 + 4) = 0;
        *((void *)v63 + 5) = 0;
        char v117 = 1;
        float v68 = (float)(unint64_t)(*(void *)(a2 + 224) + 1);
        float v69 = *(float *)(a2 + 232);
        if (v60 && (float)(v69 * (float)v60) >= v68)
        {
LABEL_152:
          uint64_t v92 = *(void *)(a2 + 200);
          uint64_t v93 = *(void **)(v92 + 8 * v59);
          if (v93)
          {
            *(void *)uint64_t v63 = *v93;
          }
          else
          {
            *(void *)uint64_t v63 = *v67;
            void *v67 = v63;
            *(void *)(v92 + 8 * v59) = v67;
            if (!*(void *)v63) {
              goto LABEL_161;
            }
            unint64_t v94 = *(void *)(*(void *)v63 + 8);
            if ((v60 & (v60 - 1)) != 0)
            {
              if (v94 >= v60) {
                v94 %= v60;
              }
            }
            else
            {
              v94 &= v60 - 1;
            }
            uint64_t v93 = (void *)(*(void *)(a2 + 200) + 8 * v94);
          }
          *uint64_t v93 = v63;
LABEL_161:
          ++*(void *)(a2 + 224);
LABEL_162:
          if (v108.n128_u64[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v108.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v95 = (std::__shared_weak_count *)*((void *)v63 + 5);
          *((__n128 *)v63 + 2) = v108;
          if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
          if ((void)v113)
          {
            (*(void (**)(void **__return_ptr))(**(void **)(a2 + 304) + 24))((void **)&v111);
            char v115 = (void (**)(void **))&unk_1EF575A68;
            unint64_t v116 = (std::__shared_weak_count *)&v113;
            unsigned int v118 = (void **)&v115;
            uint64_t v109 = 0;
            unsigned __int8 v110 = 0;
            (*((void (**)(void (**)(void **), void (***)(void **), uint64_t *))*v111 + 2))(v111, &v115, &v109);
            uint64_t v96 = v110;
            if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
            if (v118 == (void **)&v115)
            {
              v115[4]((void **)&v115);
            }
            else if (v118)
            {
              (*((void (**)(void))*v118 + 5))();
            }
            if (v111)
            {
              uint64_t v97 = (*((uint64_t (**)(void *))*v111 + 3))(v111);
              uint64_t v98 = v111;
              uint64_t v111 = 0;
              char v115 = v98;
              (*(void (**)(uint64_t, void (***)(void **)))(*(void *)v97 + 48))(v97, &v115);
              uint64_t v99 = v115;
              char v115 = 0;
              if (v99) {
                (*((void (**)(void))*v99 + 1))(v99);
              }
              unsigned int v100 = v111;
              uint64_t v111 = 0;
              if (v100) {
                (*((void (**)(void))*v100 + 1))(v100);
              }
            }
          }
          unint64_t v101 = (geo::read_write_lock *)pthread_rwlock_unlock(v112);
          if (v101) {
            geo::read_write_lock::logFailure(v101, (uint64_t)"unlock", v102);
          }
          goto LABEL_182;
        }
        BOOL v70 = 1;
        if (v60 >= 3) {
          BOOL v70 = (v60 & (v60 - 1)) != 0;
        }
        unint64_t v71 = v70 | (2 * v60);
        unint64_t v72 = vcvtps_u32_f32(v68 / v69);
        if (v71 <= v72) {
          size_t prime = v72;
        }
        else {
          size_t prime = v71;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v60 = *(void *)(a2 + 208);
        }
        if (prime <= v60)
        {
          if (prime >= v60) {
            goto LABEL_139;
          }
          unint64_t v85 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 224) / *(float *)(a2 + 232));
          if (v60 < 3 || (uint8x8_t v86 = (uint8x8_t)vcnt_s8((int8x8_t)v60), v86.i16[0] = vaddlv_u8(v86), v86.u32[0] > 1uLL))
          {
            unint64_t v85 = std::__next_prime(v85);
          }
          else
          {
            uint64_t v87 = 1 << -(char)__clz(v85 - 1);
            if (v85 >= 2) {
              unint64_t v85 = v87;
            }
          }
          if (prime <= v85) {
            size_t prime = v85;
          }
          if (prime >= v60)
          {
            unint64_t v60 = *(void *)(a2 + 208);
LABEL_139:
            if ((v60 & (v60 - 1)) != 0)
            {
              if (v20 >= v60) {
                unint64_t v59 = v20 % v60;
              }
              else {
                unint64_t v59 = v20;
              }
            }
            else
            {
              unint64_t v59 = (v60 - 1) & v20;
            }
            goto LABEL_152;
          }
          if (!prime)
          {
            unsigned __int8 v107 = *(void **)(a2 + 200);
            *(void *)(a2 + 200) = 0;
            if (v107) {
              operator delete(v107);
            }
            unint64_t v60 = 0;
            *(void *)(a2 + 208) = 0;
            goto LABEL_139;
          }
        }
        if (prime >> 61) {
          goto LABEL_204;
        }
        BOOL v74 = operator new(8 * prime);
        char v75 = *(void **)(a2 + 200);
        *(void *)(a2 + 200) = v74;
        if (v75) {
          operator delete(v75);
        }
        uint64_t v76 = 0;
        *(void *)(a2 + 208) = prime;
        do
          *(void *)(*(void *)(a2 + 200) + 8 * v76++) = 0;
        while (prime != v76);
        float v77 = (void *)*v67;
        if (!*v67)
        {
LABEL_138:
          unint64_t v60 = prime;
          goto LABEL_139;
        }
        size_t v78 = v77[1];
        size_t v79 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v80 = v78 & v79;
          *(void *)(*(void *)(a2 + 200) + 8 * v80) = v67;
          for (uint64_t i = (void *)*v77; *v77; uint64_t i = (void *)*v77)
          {
            size_t v82 = i[1] & v79;
            if (v82 == v80)
            {
              float v77 = i;
            }
            else
            {
              uint64_t v83 = *(void *)(a2 + 200);
              if (*(void *)(v83 + 8 * v82))
              {
                *float v77 = *i;
                uint64_t v84 = 8 * v82;
                *uint64_t i = **(void **)(*(void *)(a2 + 200) + v84);
                **(void **)(*(void *)(a2 + 200) + v84) = i;
              }
              else
              {
                *(void *)(v83 + 8 * v82) = v77;
                float v77 = i;
                size_t v80 = v82;
              }
            }
          }
          goto LABEL_138;
        }
        if (v78 >= prime) {
          v78 %= prime;
        }
        *(void *)(*(void *)(a2 + 200) + 8 * v78) = v67;
        uint64_t v88 = (void *)*v77;
        if (!*v77) {
          goto LABEL_138;
        }
        while (1)
        {
          size_t v90 = v88[1];
          if (v90 >= prime) {
            v90 %= prime;
          }
          if (v90 != v78)
          {
            uint64_t v91 = *(void *)(a2 + 200);
            if (!*(void *)(v91 + 8 * v90))
            {
              *(void *)(v91 + 8 * v90) = v77;
              goto LABEL_143;
            }
            *float v77 = *v88;
            uint64_t v89 = 8 * v90;
            *uint64_t v88 = **(void **)(*(void *)(a2 + 200) + v89);
            **(void **)(*(void *)(a2 + 200) + v89) = v88;
            uint64_t v88 = v77;
          }
          size_t v90 = v78;
LABEL_143:
          float v77 = v88;
          uint64_t v88 = (void *)*v88;
          size_t v78 = v90;
          if (!v88) {
            goto LABEL_138;
          }
        }
      }
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v53[1].__vftable = (std::__shared_weak_count_vtbl *)&v53[1];
      v53[1].__shared_owners_ = (uint64_t)v53;
      std::__shared_weak_count::__release_weak(v58);
    }
    else
    {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v53[1].__vftable = (std::__shared_weak_count_vtbl *)&v53[1];
      v53[1].__shared_owners_ = (uint64_t)v53;
    }
    if (!atomic_fetch_add(v54, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_74;
  }
  if ((void)v113) {
    goto LABEL_65;
  }
LABEL_182:
  uint64_t v103 = (std::__shared_weak_count *)*((void *)&v113 + 1);
  if (*((void *)&v113 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v113 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
LABEL_185:
  if (!v108.n128_u64[0]) {
    goto LABEL_14;
  }
  if (!*(void *)(v108.n128_u64[0] + 16)) {
    goto LABEL_191;
  }
  float v104 = *(std::__shared_weak_count **)(v108.n128_u64[0] + 8);
  if (!v104 || (uint64_t v105 = std::__shared_weak_count::lock(v104)) == 0)
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_204:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unsigned __int8 v106 = v105;
  if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v106);
  }
LABEL_191:
  if (*(void *)(v108.n128_u64[0] + 32))
  {
    __n128 result = v108;
    *a1 = v108;
    return result;
  }
LABEL_14:
  unint64_t v24 = (char *)operator new(0x48uLL);
  uint64_t v26 = (std::__shared_weak_count *)v24;
  *((void *)v24 + 1) = 0;
  uint64_t v27 = (atomic_ullong *)(v24 + 8);
  *((void *)v24 + 2) = 0;
  *(void *)unint64_t v24 = &unk_1EF580020;
  *((void *)v24 + 3) = 0;
  unint64_t v28 = v24 + 24;
  *((void *)v24 + 4) = 0;
  *((void *)v24 + 5) = 0;
  *((_DWORD *)v24 + 12) = 0;
  uint64_t v29 = *(void *)(a2 + 320);
  *((void *)v24 + 7) = *(void *)(a2 + 312);
  *((void *)v24 + 8) = v29;
  if (!v29)
  {
    a1->n128_u64[0] = (unint64_t)v28;
    a1->n128_u64[1] = (unint64_t)v24;
    goto LABEL_19;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  long long v30 = (std::__shared_weak_count *)*((void *)v24 + 4);
  a1->n128_u64[0] = (unint64_t)v28;
  a1->n128_u64[1] = (unint64_t)v26;
  if (!v30)
  {
LABEL_19:
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)&v26[1];
    v26[1].__shared_owners_ = (uint64_t)v26;
    goto LABEL_20;
  }
  if (v30->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)&v26[1];
    v26[1].__shared_owners_ = (uint64_t)v26;
    std::__shared_weak_count::__release_weak(v30);
LABEL_20:
    if (!atomic_fetch_add(v27, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v108.n128_u64[1])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v108.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(unint64_t))(*(void *)v108.n128_u64[1] + 16))(v108.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v108.n128_u64[1]);
    }
  }
  return result;
}

void sub_1A1919254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_rwlock_t *a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t md::MaterialTextureManager::hasAlpha(uint64_t *a1, unsigned char *a2, unsigned int a3)
{
  uint64_t v4 = *a1;
  if (!v4) {
    return 0;
  }
  switch(*a2)
  {
    case 1:
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v4 + 24))(&v17, (float)a3);
      break;
    case 2:
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v4 + 40))(&v17, (float)a3);
      break;
    case 3:
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v4 + 56))(&v17, (float)a3);
      break;
    case 4:
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v4 + 72))(&v17, (float)a3);
      break;
    default:
      return 0;
  }
  if (!(_BYTE)v17 || *a2 != 1) {
    return 0;
  }
  unint64_t v9 = BYTE1(v17);
  uint64_t v10 = *(void *)(*a1 + 16);
  unint64_t v11 = *(std::__shared_weak_count **)(*a1 + 24);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(v10 + 48);
  unint64_t v13 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)v12);
  if (v13) {
    geo::read_write_lock::logFailure(v13, (uint64_t)"read lock", v14);
  }
  if (*(void *)(v12 + 232) <= v9) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (*(void *)(*(void *)(v12 + 224) + ((v9 >> 3) & 0x18)) >> v9) & 1;
  }
  unint64_t v15 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v12);
  if (v15) {
    geo::read_write_lock::logFailure(v15, (uint64_t)"unlock", v16);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v7;
}

void sub_1A19194C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint8x8_t v3 = *(uint64_t (****)(void))(a1 + 88);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  *a2 = 0;
  return result;
}

void gms::Material<ggl::Texture2D>::roughnessMetallic(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint8x8_t v3 = *(uint64_t (****)(void))(a1 + 96);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  *a2 = 0;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 384))((char *)&v10 + 2, a3);
    uint64_t result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    uint64_t result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::castShadow@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  float v3 = *(uint64_t (****)(void))(a1 + 160);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 384))();
  }
  *a2 = 0;
  return result;
}

void md::MaterialRenderable::~MaterialRenderable(md::MaterialRenderable *this)
{
  *(void *)this = &unk_1EF5395C8;
  std::__optional_destruct_base<md::RasterOverlayRenderPatch,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 312);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  *(void *)this = &unk_1EF534030;
  if (*((unsigned char *)this + 176))
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  uint64_t vars8;

  md::MaterialRenderable::~MaterialRenderable(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::MaterialRenderable::MaterialRenderable(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1EF534030;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 80) = v5;
  *(_OWORD *)(result + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(result + 142) = *(void *)(a2 + 142);
  *(_OWORD *)(result + 112) = v7;
  *(_OWORD *)(result + 128) = v8;
  *(_OWORD *)(result + 96) = v6;
  *(unsigned char *)(result + 152) = 0;
  *(unsigned char *)(result + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    uint64_t v9 = *(void *)(a2 + 160);
    *(void *)(result + 152) = *(void *)(a2 + 152);
    *(void *)(result + 160) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(result + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(result + 176) = 1;
  }
  *(void *)(result + 184) = *(void *)(a2 + 184);
  *(_WORD *)(result + 192) = 0;
  if (*(unsigned char *)(a2 + 193))
  {
    *(unsigned char *)(result + 192) = *(unsigned char *)(a2 + 192);
    *(unsigned char *)(result + 193) = 1;
  }
  long long v10 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(result + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(result + 196) = v10;
  *(void *)uint64_t result = &unk_1EF5395C8;
  uint64_t v11 = *(void *)(a2 + 232);
  *(void *)(result + 224) = *(void *)(a2 + 224);
  *(void *)(result + 232) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a2 + 240);
  *(unsigned char *)(result + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(result + 240) = v12;
  uint64_t v13 = *(void *)(a2 + 264);
  *(void *)(result + 256) = *(void *)(a2 + 256);
  *(void *)(result + 264) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 272) = *(unsigned char *)(a2 + 272);
  uint64_t v14 = *(void *)(a2 + 288);
  *(void *)(result + 280) = *(void *)(a2 + 280);
  *(void *)(result + 288) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(a2 + 304);
  *(void *)(result + 296) = *(void *)(a2 + 296);
  *(void *)(result + 304) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 312) = 0;
  *(unsigned char *)(result + 368) = 0;
  if (*(unsigned char *)(a2 + 368))
  {
    uint64_t v16 = *(void *)(a2 + 320);
    *(void *)(result + 312) = *(void *)(a2 + 312);
    *(void *)(result + 320) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(result + 328) = *(unsigned char *)(a2 + 328);
    uint64_t v17 = *(void *)(a2 + 344);
    *(void *)(result + 336) = *(void *)(a2 + 336);
    *(void *)(result + 344) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a2 + 360);
    *(void *)(result + 352) = *(void *)(a2 + 352);
    *(void *)(result + 360) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(result + 368) = 1;
  }
  *(_WORD *)(result + 376) = *(_WORD *)(a2 + 376);
  *(unsigned char *)(result + 380) = 0;
  *(unsigned char *)(result + 396) = 0;
  if (*(unsigned char *)(a2 + 396))
  {
    *(_OWORD *)(result + 380) = *(_OWORD *)(a2 + 380);
    *(unsigned char *)(result + 396) = 1;
  }
  *(unsigned char *)(result + 400) = *(unsigned char *)(a2 + 400);
  return result;
}

void md::InjectedFeaturesLayerDataSource::addFallbackData(md::InjectedFeaturesLayerDataSource *this, const gdc::SelectionContext *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)*((void *)a2 + 1);
  float v67 = 0;
  float v68 = 0;
  uint64_t v69 = 0;
  uint64_t v44 = (uint64_t)v3;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v52, v3, *((unsigned __int16 *)this + 16));
  int v4 = v52;
  long long v6 = v53;
  long long v5 = (char *)v54;
  uint64_t v7 = v55;
  int v48 = (unsigned __int16)v56;
  long long v8 = (char *)this + 608;
  long long v47 = v57;
  uint64_t v45 = v58;
LABEL_3:
  while (v4 != v48 || v6 != v47 || v7 != v45)
  {
    char v9 = v6[113];
    uint64_t v10 = *(void *)(v6 + 116);
    char v11 = v6[112];
    uint64_t v12 = (_DWORD *)*((void *)v6 + 2);
    int v13 = v12[2];
    int v14 = v12[3];
    unsigned int v15 = v13;
    LODWORD(v12) = *v12;
    int v16 = 1 << v13;
    int v17 = (*(_DWORD *)(*((void *)v6 + 2) + 4) % v16 + v16) % v16;
    v64[0] = v14;
    v64[1] = v13;
    int v18 = ((int)v12 % v16 + v16) % v16;
    int v65 = v17;
    int v66 = v18;
    if (v15 <= 0x1E)
    {
      int v19 = vcvtmd_s64_f64((double)v18 / (double)v16);
      unsigned int v20 = v19 >= 0 ? v19 : -v19;
      if (v20 <= 0x7F)
      {
        v29.i64[0] = ((v18 + v16) % v16) | ((unint64_t)((v18 + v16) % v16) << 16);
        v29.i64[1] = ((v17 + v16) % v16) | ((unint64_t)((v17 + v16) % v16) << 16);
        v30.i64[0] = 0xFFFF0000FFFFLL;
        v30.i64[1] = 0xFFFF0000FFFFLL;
        int64x2_t v31 = (int64x2_t)vandq_s8(v29, v30);
        unsigned long long v32 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v31, 8uLL), (int8x16_t)v31) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
        unsigned long long v33 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v32, 4uLL), (int8x16_t)v32) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
        v30.i64[0] = 0x3333333333333333;
        v30.i64[1] = 0x3333333333333333;
        int8x16_t v34 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v33, 2uLL), (int8x16_t)v33), v30);
        int8x16_t v35 = (int8x16_t)vshlq_u64((uint64x2_t)v34, (uint64x2_t)xmmword_1A28FC6E0);
        v34.i64[1] *= 2;
        int64x2_t v36 = (int64x2_t)vandq_s8(vorrq_s8(v35, v34), (int8x16_t)xmmword_1A28FC6F0);
        unint64_t v21 = vorrq_s8((int8x16_t)v36, (int8x16_t)vdupq_laneq_s64(v36, 1)).u64[0];
        if (*v8) {
          goto LABEL_13;
        }
LABEL_12:
        unsigned char *v8 = 1;
        goto LABEL_13;
      }
    }
    LOBYTE(v19) = 0;
    LOBYTE(v15) = 0;
    unint64_t v21 = 0;
    if (!*v8) {
      goto LABEL_12;
    }
LABEL_13:
    *((void *)this + 77) = v21;
    *((unsigned char *)this + 624) = v15;
    *((unsigned char *)this + 625) = v19;
    __int16 v22 = *((_WORD *)this + 16);
    unint64_t v23 = (const gdc::LayerDataRequestKey *)*((void *)this + 2);
    v70[0] = &unk_1EF56BA40;
    v70[1] = md::TileAdjustmentHelpers::dataKeyForTile;
    unint64_t v71 = v70;
    md::TileAdjustmentHelpers::getFallbackDataForTile((int64x2_t *)((char *)this + 712), v22, v64, v23, (uint64_t)v70, (uint64_t)this + 608);
    if (v71 == v70)
    {
      (*(void (**)(void *))(v70[0] + 32))(v70);
    }
    else if (v71)
    {
      (*(void (**)(void))(*v71 + 40))();
    }
    int v24 = *((unsigned __int8 *)this + 600);
    if (*((unsigned char *)this + 601)) {
      uint64_t v25 = (void *)*((void *)a2 + 7);
    }
    else {
      uint64_t v25 = 0;
    }
    LOBYTE(v62) = v11;
    HIBYTE(v62) = v9;
    uint64_t v63 = v10;
    gdc::FallbackCollector::collectFallbackData((uint64_t)this + 608, (void **)&v67, v24 != 0, v25, &v62);
    gdc::FallbackCollector::end((md::InjectedFeaturesLayerDataSource *)((char *)this + 608), v26);
    uint64_t v27 = v6 + 144;
    long long v6 = v5;
    if (v27 != v5)
    {
      long long v6 = v27;
      while (1)
      {
        if (*((unsigned __int16 *)v6 + 4) == v4)
        {
          uint64_t v28 = *((void *)v6 + 17);
          if (!*(void *)(v7 + 144 * v28 + 112) || *(unsigned char *)(v7 + 144 * v28 + 136)) {
            break;
          }
        }
        v6 += 144;
        if (v6 == v5)
        {
          long long v6 = v5;
          goto LABEL_3;
        }
      }
    }
  }
  uint64_t v37 = v67;
  unsigned __int8 v38 = (__int16 *)v68;
  if (v67 == (__int16 *)v68)
  {
    if (v67) {
      goto LABEL_50;
    }
  }
  else
  {
    unsigned __int8 v39 = v67 + 56;
    do
    {
      char v41 = *(unsigned char *)(*(void *)v39 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v49, (uint64_t)(v39 - 44));
      LOBYTE(v52) = v41;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v53, (uint64_t)v49);
      char v60 = 0;
      unint64_t v61 = (v59
           - 0x61C8864680B583EBLL
           + ((v52 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v52 - 0x61C8864680B583EBLL) >> 2)) ^ (v52
                                                                                      - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v44, (uint64_t)&v52, v39 - 56, v39);
      if (v60) {
        char v60 = 0;
      }
      if (v54 != v56) {
        free(v54);
      }
      if (v50 != v51) {
        free(v50);
      }
      unint64_t v40 = v39 + 8;
      v39 += 64;
    }
    while (v40 != v38);
    if (v37)
    {
      if (v37 != v38)
      {
        do
        {
          __n128 v42 = (std::__shared_weak_count *)*((void *)v38 - 1);
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          unsigned int v43 = (void *)*((void *)v38 - 12);
          if (v43 != *((void **)v38 - 10)) {
            free(v43);
          }
          v38 -= 64;
        }
        while (v38 != v37);
        uint64_t v37 = v67;
      }
LABEL_50:
      operator delete(v37);
    }
  }
}

void sub_1A191A0D8(_Unwind_Exception *a1)
{
  std::function<gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::~function((void *)(v1 - 144));
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void md::SingleGEOResourceLayerDataSource::addFallbackData(md::SingleGEOResourceLayerDataSource *this, const gdc::SelectionContext *a2)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  int v4 = (unint64_t *)*((void *)a2 + 1);
  unsigned int v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  long long v122 = 0u;
  long long v123 = 0u;
  float v124 = 1.0;
  uint64_t v100 = (uint64_t)v4;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v107, v4, *((unsigned __int16 *)this + 16));
  int v5 = v107;
  uint64_t v7 = v108;
  long long v6 = (unsigned __int8 *)v109;
  uint64_t v8 = v110;
  int v103 = (unsigned __int16)v111;
  uint64_t v98 = (md::SingleGEOResourceLayerDataSource *)((char *)this + 592);
  uint64_t v99 = this;
  uint64_t v97 = (int64x2_t *)((char *)this + 704);
  uint64_t v101 = v113;
  char v102 = v112;
LABEL_3:
  while (v5 != v103 || v7 != v102 || v8 != v101)
  {
    uint64_t v9 = v7[112];
    uint64_t v10 = v7[113];
    unint64_t v11 = (v10
         - 0x61C8864680B583EBLL
         + ((v9 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 2)) ^ (v9 - 0x61C8864680B583EBLL);
    uint64_t v13 = *((int *)v7 + 29);
    uint64_t v12 = *((int *)v7 + 30);
    unint64_t v14 = (v13 - 0x61C8864680B583EBLL + (v11 << 6) + (v11 >> 2)) ^ v11;
    unint64_t v15 = (v12 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
    unint64_t v16 = *((void *)&v122 + 1);
    if (!*((void *)&v122 + 1))
    {
      uint64_t v19 = (uint64_t)(v7 + 8);
      goto LABEL_62;
    }
    uint8x8_t v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v122 + 8));
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      uint64_t v18 = (v12 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
      if (v15 >= *((void *)&v122 + 1)) {
        uint64_t v18 = v15 % *((void *)&v122 + 1);
      }
    }
    else
    {
      uint64_t v18 = v15 & (*((void *)&v122 + 1) - 1);
    }
    unsigned int v20 = *(uint64_t ***)(v122 + 8 * v18);
    if (!v20 || (unint64_t v21 = *v20) == 0)
    {
      uint64_t v19 = (uint64_t)(v7 + 8);
      goto LABEL_36;
    }
    if (v17.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v23 = v21[1];
        if (v23 == v15)
        {
          if (__PAIR64__(*((unsigned __int8 *)v21 + 17), *((unsigned __int8 *)v21 + 16)) == __PAIR64__(v10, v9)
            && *(uint64_t *)((char *)v21 + 20) == __PAIR64__(v12, v13))
          {
            goto LABEL_29;
          }
        }
        else if ((v23 & (*((void *)&v122 + 1) - 1)) != v18)
        {
          goto LABEL_33;
        }
        unint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_33;
        }
      }
    }
    while (1)
    {
      unint64_t v22 = v21[1];
      if (v22 == v15) {
        break;
      }
      if (v22 >= *((void *)&v122 + 1)) {
        v22 %= *((void *)&v122 + 1);
      }
      if (v22 != v18) {
        goto LABEL_33;
      }
LABEL_17:
      unint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_33;
      }
    }
    if (__PAIR64__(*((unsigned __int8 *)v21 + 17), *((unsigned __int8 *)v21 + 16)) != __PAIR64__(v10, v9)
      || *(uint64_t *)((char *)v21 + 20) != __PAIR64__(v12, v13))
    {
      goto LABEL_17;
    }
    if (*((unsigned __int16 *)v21 + 20) != *((unsigned __int16 *)v7 + 4)) {
      goto LABEL_33;
    }
    if (v21[14] != *((void *)v7 + 10)) {
      goto LABEL_33;
    }
    int v24 = (const void *)v21[6];
    size_t v25 = v21[7] - (void)v24;
    uint64_t v26 = (_DWORD *)*((void *)v7 + 2);
    if (v25 != *((void *)v7 + 3) - (void)v26) {
      goto LABEL_33;
    }
LABEL_29:
    int v95 = v7[113];
    unint64_t v2 = *((int *)v7 + 30);
    int v27 = memcmp(v24, *((const void **)v7 + 2), v25);
    LODWORD(v12) = v2;
    LODWORD(v10) = v95;
    if (!v27)
    {
      uint64_t v61 = *(void *)(v7 + 116);
      int v62 = v26[2];
      char v63 = v62;
      int v64 = 1 << v62;
      int v65 = (v26[1] % v64 + v64) % v64;
      int v66 = *v26 % v64 + v64;
      v119[0] = v26[3];
      v119[1] = v62;
      int v67 = v66 % (1 << v62);
      int v120 = v65;
      int v121 = v67;
      if (v62 <= 0x1Eu
        && ((int v68 = vcvtmd_s64_f64((double)v67 / (double)v64), v68 >= 0) ? (v69 = v68) : (v69 = -v68), v69 <= 0x7F))
      {
        v71.i64[0] = ((v67 + v64) % v64) | ((unint64_t)((v67 + v64) % v64) << 16);
        v71.i64[1] = ((v65 + v64) % v64) | ((unint64_t)((v65 + v64) % v64) << 16);
        v72.i64[0] = 0xFFFF0000FFFFLL;
        v72.i64[1] = 0xFFFF0000FFFFLL;
        int64x2_t v73 = (int64x2_t)vandq_s8(v71, v72);
        unsigned long long v74 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v73, 8uLL), (int8x16_t)v73) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
        unsigned long long v75 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v74, 4uLL), (int8x16_t)v74) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
        v72.i64[0] = 0x3333333333333333;
        v72.i64[1] = 0x3333333333333333;
        int8x16_t v76 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v75, 2uLL), (int8x16_t)v75), v72);
        int8x16_t v77 = (int8x16_t)vshlq_u64((uint64x2_t)v76, (uint64x2_t)xmmword_1A28FC6E0);
        v76.i64[1] *= 2;
        int64x2_t v78 = (int64x2_t)vandq_s8(vorrq_s8(v77, v76), (int8x16_t)xmmword_1A28FC6F0);
        unint64_t v70 = vorrq_s8((int8x16_t)v78, (int8x16_t)vdupq_laneq_s64(v78, 1)).u64[0];
      }
      else
      {
        LOBYTE(v68) = 0;
        char v63 = 0;
        unint64_t v70 = 0;
      }
      if (!*(unsigned char *)v98) {
        *(unsigned char *)uint64_t v98 = 1;
      }
      *((void *)v99 + 75) = v70;
      *((unsigned char *)v99 + 608) = v63;
      *((unsigned char *)v99 + 609) = v68;
      __int16 v79 = *((_WORD *)v99 + 16);
      size_t v80 = (const gdc::LayerDataRequestKey *)*((void *)v99 + 2);
      unint64_t v2 = (unint64_t)&v128;
      int v128 = (void (**)(void **))&unk_1EF56BA40;
      unsigned int v129 = md::TileAdjustmentHelpers::dataKeyForTile;
      uint64_t v131 = (void **)&v128;
      md::TileAdjustmentHelpers::getFallbackDataForTile(v97, v79, v119, v80, (uint64_t)&v128, (uint64_t)v98);
      if (v131 == (void **)&v128)
      {
        v128[4]((void **)&v128);
      }
      else if (v131)
      {
        (*((void (**)(void))*v131 + 5))();
      }
      int v81 = *((unsigned __int8 *)v99 + 696);
      if (*((unsigned char *)v99 + 697)) {
        size_t v82 = (void *)*((void *)a2 + 7);
      }
      else {
        size_t v82 = 0;
      }
      LOBYTE(v117) = v9;
      HIBYTE(v117) = v95;
      uint64_t v118 = v61;
      gdc::FallbackCollector::collectFallbackData((uint64_t)v98, (void **)&v125, v81 != 0, v82, &v117);
      gdc::FallbackCollector::end(v98, v83);
    }
    else
    {
LABEL_33:
      uint64_t v19 = (uint64_t)(v7 + 8);
      if (!v16) {
        goto LABEL_62;
      }
LABEL_36:
      uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v2 = v15;
        if (v15 >= v16) {
          unint64_t v2 = v15 % v16;
        }
      }
      else
      {
        unint64_t v2 = v15 & (v16 - 1);
      }
      int8x16_t v29 = *(uint64_t ***)(v122 + 8 * v2);
      if (v29)
      {
        int8x16_t v30 = *v29;
        if (v30)
        {
          if (v28.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v32 = v30[1];
              if (v32 == v15)
              {
                if (*((unsigned __int8 *)v30 + 16) == v9
                  && *((unsigned __int8 *)v30 + 17) == v10
                  && *((_DWORD *)v30 + 5) == v13
                  && *((_DWORD *)v30 + 6) == v12)
                {
                  goto LABEL_122;
                }
              }
              else if ((v32 & (v16 - 1)) != v2)
              {
                goto LABEL_62;
              }
              int8x16_t v30 = (uint64_t *)*v30;
              if (!v30) {
                goto LABEL_62;
              }
            }
          }
          do
          {
            unint64_t v31 = v30[1];
            if (v31 == v15)
            {
              if (*((unsigned __int8 *)v30 + 16) == v9
                && *((unsigned __int8 *)v30 + 17) == v10
                && *((_DWORD *)v30 + 5) == v13
                && *((_DWORD *)v30 + 6) == v12)
              {
                goto LABEL_122;
              }
            }
            else
            {
              if (v31 >= v16) {
                v31 %= v16;
              }
              if (v31 != v2) {
                break;
              }
            }
            int8x16_t v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
      }
LABEL_62:
      unsigned long long v33 = (char *)operator new(0x80uLL);
      int v128 = (void (**)(void **))v33;
      unsigned int v129 = (unsigned __int8 *(*)@<X0>(unsigned __int8@<W0>, __int16@<W1>, unsigned __int8 *@<X2>, unsigned __int8 *@<X8>))&v123;
      *(void *)unsigned long long v33 = 0;
      *((void *)v33 + 1) = v15;
      *((_WORD *)v33 + 8) = *((_WORD *)v7 + 56);
      *(void *)(v33 + 20) = *(void *)(v7 + 116);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v33 + 40), v19);
      char v130 = 1;
      float v34 = (float)(unint64_t)(*((void *)&v123 + 1) + 1);
      if (!v16 || (float)(v124 * (float)v16) < v34)
      {
        BOOL v35 = (v16 & (v16 - 1)) != 0;
        if (v16 < 3) {
          BOOL v35 = 1;
        }
        unint64_t v36 = v35 | (2 * v16);
        unint64_t v37 = vcvtps_u32_f32(v34 / v124);
        if (v36 <= v37) {
          size_t prime = v37;
        }
        else {
          size_t prime = v36;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v16 = *((void *)&v122 + 1);
        if (prime > *((void *)&v122 + 1))
        {
LABEL_74:
          if (prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unsigned __int8 v39 = operator new(8 * prime);
          unint64_t v40 = (void *)v122;
          *(void *)&long long v122 = v39;
          if (v40) {
            operator delete(v40);
          }
          uint64_t v41 = 0;
          *((void *)&v122 + 1) = prime;
          do
            *(void *)(v122 + 8 * v41++) = 0;
          while (prime != v41);
          __n128 v42 = (void **)v123;
          if (!(void)v123) {
            goto LABEL_98;
          }
          size_t v43 = *(void *)(v123 + 8);
          size_t v44 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v45 = v43 & v44;
            *(void *)(v122 + 8 * v45) = &v123;
            for (uint64_t i = *v42; *v42; uint64_t i = *v42)
            {
              size_t v47 = i[1] & v44;
              if (v47 == v45)
              {
                __n128 v42 = (void **)i;
              }
              else if (*(void *)(v122 + 8 * v47))
              {
                *__n128 v42 = (void *)*i;
                uint64_t v48 = 8 * v47;
                *uint64_t i = **(void **)(v122 + v48);
                **(void **)(v122 + v48) = i;
              }
              else
              {
                *(void *)(v122 + 8 * v47) = v42;
                __n128 v42 = (void **)i;
                size_t v45 = v47;
              }
            }
            goto LABEL_98;
          }
          if (v43 >= prime) {
            v43 %= prime;
          }
          *(void *)(v122 + 8 * v43) = &v123;
          unsigned __int16 v52 = *v42;
          if (!*v42)
          {
LABEL_98:
            unint64_t v16 = prime;
            goto LABEL_99;
          }
          while (2)
          {
            size_t v54 = v52[1];
            if (v54 >= prime) {
              v54 %= prime;
            }
            if (v54 != v43)
            {
              if (!*(void *)(v122 + 8 * v54))
              {
                *(void *)(v122 + 8 * v54) = v42;
LABEL_103:
                __n128 v42 = (void **)v52;
                unsigned __int16 v52 = (void *)*v52;
                size_t v43 = v54;
                if (!v52) {
                  goto LABEL_98;
                }
                continue;
              }
              *__n128 v42 = (void *)*v52;
              uint64_t v53 = 8 * v54;
              *unsigned __int16 v52 = **(void **)(v122 + v53);
              **(void **)(v122 + v53) = v52;
              unsigned __int16 v52 = v42;
            }
            break;
          }
          size_t v54 = v43;
          goto LABEL_103;
        }
        if (prime < *((void *)&v122 + 1))
        {
          unint64_t v49 = vcvtps_u32_f32((float)*((unint64_t *)&v123 + 1) / v124);
          if (*((void *)&v122 + 1) < 3uLL
            || (uint8x8_t v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v122 + 8)),
                v50.i16[0] = vaddlv_u8(v50),
                v50.u32[0] > 1uLL))
          {
            unint64_t v49 = std::__next_prime(v49);
          }
          else
          {
            uint64_t v51 = 1 << -(char)__clz(v49 - 1);
            if (v49 >= 2) {
              unint64_t v49 = v51;
            }
          }
          if (prime <= v49) {
            size_t prime = v49;
          }
          if (prime >= v16)
          {
            unint64_t v16 = *((void *)&v122 + 1);
          }
          else
          {
            if (prime) {
              goto LABEL_74;
            }
            char v60 = (void *)v122;
            *(void *)&long long v122 = 0;
            if (v60) {
              operator delete(v60);
            }
            unint64_t v16 = 0;
            *((void *)&v122 + 1) = 0;
          }
        }
LABEL_99:
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v15 >= v16) {
            unint64_t v2 = v15 % v16;
          }
          else {
            unint64_t v2 = v15;
          }
        }
        else
        {
          unint64_t v2 = (v16 - 1) & v15;
        }
      }
      uint64_t v55 = *(void (****)(void **))(v122 + 8 * v2);
      uint64_t v56 = v128;
      if (v55)
      {
        *int v128 = (void (*)(void **))*v55;
        goto LABEL_120;
      }
      *int v128 = (void (*)(void **))v123;
      *(void *)&long long v123 = v56;
      *(void *)(v122 + 8 * v2) = &v123;
      if (*v56)
      {
        unint64_t v57 = *((void *)*v56 + 1);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v57 >= v16) {
            v57 %= v16;
          }
        }
        else
        {
          v57 &= v16 - 1;
        }
        uint64_t v55 = (void (***)(void **))(v122 + 8 * v57);
LABEL_120:
        *uint64_t v55 = v56;
      }
      ++*((void *)&v123 + 1);
    }
LABEL_122:
    uint64_t v58 = v7 + 144;
    uint64_t v7 = v6;
    if (v58 != v6)
    {
      uint64_t v7 = v58;
      while (1)
      {
        if (*((unsigned __int16 *)v7 + 4) == v5)
        {
          uint64_t v59 = *((void *)v7 + 17);
          if (!*(void *)(v8 + 144 * v59 + 112) || *(unsigned char *)(v8 + 144 * v59 + 136)) {
            break;
          }
        }
        v7 += 144;
        if (v7 == v6)
        {
          uint64_t v7 = v6;
          goto LABEL_3;
        }
      }
    }
  }
  uint64_t v84 = v125;
  unint64_t v85 = (__int16 *)v126;
  if (v125 != (__int16 *)v126)
  {
    uint8x8_t v86 = v125 + 56;
    do
    {
      char v88 = *(unsigned char *)(*(void *)v86 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v104, (uint64_t)(v86 - 44));
      LOBYTE(v107) = v88;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v108, (uint64_t)v104);
      char v115 = 0;
      unint64_t v116 = (v114
            - 0x61C8864680B583EBLL
            + ((v107 - 0x61C8864680B583EBLL) << 6)
            + (((unint64_t)v107 - 0x61C8864680B583EBLL) >> 2)) ^ (v107
                                                                                        - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v100, (uint64_t)&v107, v86 - 56, v86);
      if (v115) {
        char v115 = 0;
      }
      if (v109 != v111) {
        free(v109);
      }
      if (v105 != v106) {
        free(v105);
      }
      uint64_t v87 = v86 + 8;
      v86 += 64;
    }
    while (v87 != v85);
  }
  uint64_t v89 = (void *)v123;
  if ((void)v123)
  {
    do
    {
      uint64_t v91 = (void *)*v89;
      uint64_t v92 = (void *)v89[6];
      if (v92 != (void *)v89[8]) {
        free(v92);
      }
      operator delete(v89);
      uint64_t v89 = v91;
    }
    while (v91);
  }
  size_t v90 = (void *)v122;
  *(void *)&long long v122 = 0;
  if (v90) {
    operator delete(v90);
  }
  if (v84)
  {
    if (v84 != v85)
    {
      do
      {
        uint64_t v93 = (std::__shared_weak_count *)*((void *)v85 - 1);
        if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
        unint64_t v94 = (void *)*((void *)v85 - 12);
        if (v94 != *((void **)v85 - 10)) {
          free(v94);
        }
        v85 -= 64;
      }
      while (v85 != v84);
      uint64_t v84 = v125;
    }
    operator delete(v84);
  }
}

void sub_1A191ACB0(_Unwind_Exception *a1)
{
  std::function<gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::~function((void *)(v1 - 152));
  std::unordered_map<geo::QuadTile,gdc::LayerDataKey,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,gdc::LayerDataKey>>>::~unordered_map[abi:nn180100](v1 - 224);
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 176));
  _Unwind_Resume(a1);
}

__n128 gdc::LayerDataCollector::missingData(gdc::LayerDataCollector *this, unint64_t *a2, int a3)
{
  int v4 = (unsigned __int16 *)a2[3];
  uint64_t v3 = (unsigned __int16 *)a2[4];
  if (v4 != v3)
  {
    while (*v4 != a3)
    {
      v4 += 16;
      if (v4 == v3) {
        goto LABEL_13;
      }
    }
  }
  if (v4 == v3)
  {
LABEL_13:
    unint64_t v9 = 0;
    unint64_t v5 = a2[1];
    __int16 v21 = a3;
    unint64_t v22 = v5;
    unint64_t v23 = v5;
    uint64_t v24 = 0;
    __int16 v20 = a3;
    uint64_t v10 = &v21;
    unint64_t v11 = (__n128 *)&v20;
  }
  else
  {
    unint64_t v6 = *a2;
    unint64_t v5 = a2[1];
    uint64_t v7 = *((void *)v4 + 1);
    __int16 v16 = a3;
    unint64_t v17 = v6;
    unint64_t v18 = v5;
    uint64_t v19 = v7;
    if (v6 != v5)
    {
      while (1)
      {
        if (*(unsigned __int16 *)(v6 + 8) == a3)
        {
          uint64_t v8 = *(void *)(v6 + 136);
          if (!*(void *)(v7 + 144 * v8 + 112) || *(unsigned char *)(v7 + 144 * v8 + 136)) {
            break;
          }
        }
        v6 += 144;
        if (v6 == v5)
        {
          unint64_t v6 = v5;
          break;
        }
      }
      unint64_t v17 = v6;
    }
    unint64_t v9 = *((void *)v4 + 1);
    __int16 v15 = a3;
    uint64_t v10 = &v16;
    unint64_t v11 = (__n128 *)&v15;
  }
  v11->n128_u64[1] = v5;
  v11[1].n128_u64[0] = v5;
  v11[1].n128_u64[1] = v9;
  long long v12 = *((_OWORD *)v10 + 1);
  *(_OWORD *)this = *(_OWORD *)v10;
  *((_OWORD *)this + 1) = v12;
  __n128 result = *v11;
  __n128 v14 = v11[1];
  *((__n128 *)this + 2) = *v11;
  *((__n128 *)this + 3) = v14;
  return result;
}

void gdc::FallbackCollector::end(gdc::FallbackCollector *this, const QuadTile *a2)
{
  if (*(unsigned char *)this) {
    *(unsigned char *)this = 0;
  }
  uint64_t v3 = (char *)*((void *)this + 3);
  int v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      unint64_t v5 = (void *)*((void *)v3 + 6);
      if (v5 && *((void *)this + 9))
      {
        unint64_t v6 = (std::__shared_weak_count *)v5[12];
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, const QuadTile *))v6->__on_zero_shared)(v6, a2);
          std::__shared_weak_count::__release_weak(v6);
        }
        uint64_t v7 = (void *)v5[1];
        if (v7 != (void *)v5[3]) {
          free(v7);
        }
        void *v5 = *((void *)this + 12);
        *((void *)this + 12) = v5;
      }
      uint64_t v8 = (char *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (char *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 4));
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v4;
}

void gdc::FallbackCollector::collectFallbackData(uint64_t a1, void **a2, int a3, void *a4, __int16 *a5)
{
  if (!*(unsigned char *)a1 || !*(void *)(a1 + 40)) {
    return;
  }
  BOOL v10 = (void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + 16);
    int v12 = *(unsigned __int8 *)(a1 + 17);
    unint64_t v13 = *(void *)(a1 + 8);
    __n128 v14 = (void *)(a1 + 32);
    while (1)
    {
      unsigned int v18 = *(unsigned __int8 *)(v9 + 40);
      char v19 = v18 - v11;
      if (v18 >= v11)
      {
        if (v18 > v11)
        {
          int v22 = *(unsigned __int8 *)(v9 + 41);
          if (v12 != v22)
          {
            BOOL v15 = (char)v12 > (char)v22;
            goto LABEL_6;
          }
          unint64_t v23 = *(void *)(v9 + 32) >> (2 * v19);
          goto LABEL_21;
        }
        int v24 = *(unsigned __int8 *)(v9 + 41);
        if (v24 == v12)
        {
          unint64_t v23 = *(void *)(v9 + 32);
LABEL_21:
          BOOL v15 = v23 < v13;
          goto LABEL_6;
        }
        BOOL v21 = (char)v24 < (char)v12;
      }
      else
      {
        int v20 = *(unsigned __int8 *)(v9 + 41);
        if (v20 == BYTE1(*(void *)(a1 + 16)))
        {
          BOOL v15 = *(void *)(v9 + 32) <= v13 >> (2 * (v11 - v18));
          goto LABEL_6;
        }
        BOOL v21 = (char)v20 < (char)BYTE1(*(void *)(a1 + 16));
      }
      BOOL v15 = v21;
LABEL_6:
      BOOL v16 = !v15;
      if (v15) {
        unint64_t v17 = (uint64_t *)(v9 + 8);
      }
      else {
        unint64_t v17 = (uint64_t *)v9;
      }
      if (v16) {
        __n128 v14 = (void *)v9;
      }
      uint64_t v9 = *v17;
      if (!*v17) {
        goto LABEL_28;
      }
    }
  }
  __n128 v14 = (void *)(a1 + 32);
LABEL_28:
  if (v14 != *(void **)(a1 + 24))
  {
    size_t v25 = (void *)*v14;
    if (*v14)
    {
      do
      {
        uint64_t v26 = v25;
        size_t v25 = (void *)v25[1];
      }
      while (v25);
    }
    else
    {
      int v27 = v14;
      do
      {
        uint64_t v26 = (void *)v27[2];
        BOOL v16 = *v26 == (void)v27;
        int v27 = v26;
      }
      while (v16);
    }
    uint64_t v28 = v26[6];
    int8x16_t v30 = (char *)a2[1];
    int8x16_t v29 = (char *)a2[2];
    if (v30 < v29)
    {
      *(_WORD *)int8x16_t v30 = *a5;
      *(void *)(v30 + 4) = *(void *)(a5 + 2);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v30 + 24), v28);
      uint64_t v31 = *(void *)(v28 + 96);
      *((void *)v30 + 14) = *(void *)(v28 + 88);
      *((void *)v30 + 15) = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = v30 + 128;
LABEL_64:
      a2[1] = v32;
      if (!a3) {
        return;
      }
      goto LABEL_65;
    }
    uint64_t v33 = (v30 - (unsigned char *)*a2) >> 7;
    if ((unint64_t)(v33 + 1) >> 57) {
LABEL_113:
    }
      abort();
    uint64_t v34 = v29 - (unsigned char *)*a2;
    uint64_t v35 = v34 >> 6;
    if (v34 >> 6 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    int64x2_t v78 = (void *)(a1 + 32);
    if (v36)
    {
      if (v36 >> 57) {
LABEL_114:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      unint64_t v37 = (char *)operator new(v36 << 7);
    }
    else
    {
      unint64_t v37 = 0;
    }
    unsigned __int8 v38 = &v37[128 * v33];
    *(_WORD *)unsigned __int8 v38 = *a5;
    *(void *)(v38 + 4) = *(void *)(a5 + 2);
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v38 + 24), v28);
    uint64_t v39 = *(void *)(v28 + 96);
    *((void *)v38 + 14) = *(void *)(v28 + 88);
    *((void *)v38 + 15) = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v40 = &v37[128 * v36];
    uint64_t v32 = v38 + 128;
    uint64_t v41 = (char *)*a2;
    __n128 v42 = (char *)a2[1];
    if (v42 == *a2)
    {
      *a2 = v38;
      a2[1] = v32;
      a2[2] = v40;
    }
    else
    {
      unsigned long long v74 = v40;
      unsigned long long v75 = v38 + 128;
      int v76 = a3;
      uint64_t v43 = 0;
      do
      {
        size_t v44 = &v38[v43];
        size_t v45 = &v42[v43];
        *((_WORD *)v44 - 64) = *(_WORD *)&v42[v43 - 128];
        *(void *)(v44 - 124) = *(void *)&v42[v43 - 124];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v38[v43 - 104], (uint64_t)&v42[v43 - 104]);
        *((_OWORD *)v44 - 1) = *(_OWORD *)&v42[v43 - 16];
        *((void *)v45 - 2) = 0;
        *((void *)v45 - 1) = 0;
        v43 -= 128;
      }
      while (&v42[v43] != v41);
      uint64_t v46 = &v38[v43];
      __n128 v42 = (char *)*a2;
      size_t v47 = (char *)a2[1];
      uint64_t v32 = v75;
      *a2 = v46;
      a2[1] = v75;
      a2[2] = v74;
      if (v47 == v42)
      {
        a3 = v76;
        BOOL v10 = v78;
        if (!v42) {
          goto LABEL_64;
        }
LABEL_63:
        operator delete(v42);
        goto LABEL_64;
      }
      a3 = v76;
      do
      {
        uint64_t v48 = (std::__shared_weak_count *)*((void *)v47 - 1);
        if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        unint64_t v49 = (void *)*((void *)v47 - 12);
        if (v49 != *((void **)v47 - 10)) {
          free(v49);
        }
        v47 -= 128;
      }
      while (v47 != v42);
    }
    BOOL v10 = v78;
    if (!v42) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
LABEL_65:
  v80[0] = *a5;
  uint64_t v81 = *(void *)(a5 + 2);
  if (v14 != v10)
  {
    int8x16_t v77 = a4;
    __int16 v79 = v10;
    while (1)
    {
      uint64_t v50 = v14[6];
      if (*(void *)(v50 + 88))
      {
        if (!a4
          || std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a4, (unsigned __int8 *)v80))
        {
          break;
        }
      }
LABEL_102:
      int8x16_t v72 = (void *)v14[1];
      if (v72)
      {
        do
        {
          int64x2_t v73 = v72;
          int8x16_t v72 = (void *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          int64x2_t v73 = (void *)v14[2];
          BOOL v16 = *v73 == (void)v14;
          __n128 v14 = v73;
        }
        while (!v16);
      }
      __n128 v14 = v73;
      if (v73 == v10) {
        return;
      }
    }
    unsigned __int16 v52 = (char *)a2[1];
    uint64_t v51 = (char *)a2[2];
    if (v52 < v51)
    {
      *(_WORD *)unsigned __int16 v52 = v80[0];
      *(void *)(v52 + 4) = v81;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v52 + 24), v50);
      uint64_t v53 = *(void *)(v50 + 96);
      *((void *)v52 + 14) = *(void *)(v50 + 88);
      *((void *)v52 + 15) = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      size_t v54 = v52 + 128;
      goto LABEL_101;
    }
    uint64_t v55 = (v52 - (unsigned char *)*a2) >> 7;
    if ((unint64_t)(v55 + 1) >> 57) {
      goto LABEL_113;
    }
    uint64_t v56 = v51 - (unsigned char *)*a2;
    uint64_t v57 = v56 >> 6;
    if (v56 >> 6 <= (unint64_t)(v55 + 1)) {
      uint64_t v57 = v55 + 1;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v58 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v57;
    }
    if (v58)
    {
      if (v58 >> 57) {
        goto LABEL_114;
      }
      uint64_t v59 = (char *)operator new(v58 << 7);
    }
    else
    {
      uint64_t v59 = 0;
    }
    char v60 = &v59[128 * v55];
    *(_WORD *)char v60 = v80[0];
    *(void *)(v60 + 4) = v81;
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v60 + 24), v50);
    uint64_t v61 = *(void *)(v50 + 96);
    *((void *)v60 + 14) = *(void *)(v50 + 88);
    *((void *)v60 + 15) = v61;
    if (v61) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
    }
    int v62 = &v59[128 * v58];
    size_t v54 = v60 + 128;
    int v64 = (char *)*a2;
    char v63 = (char *)a2[1];
    if (v63 == *a2)
    {
      *a2 = v60;
      a2[1] = v54;
      a2[2] = v62;
    }
    else
    {
      uint64_t v65 = 0;
      do
      {
        int v66 = &v60[v65];
        int v67 = &v63[v65];
        *((_WORD *)v66 - 64) = *(_WORD *)&v63[v65 - 128];
        *(void *)(v66 - 124) = *(void *)&v63[v65 - 124];
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v60[v65 - 104], (uint64_t)&v63[v65 - 104]);
        *((_OWORD *)v66 - 1) = *(_OWORD *)&v63[v65 - 16];
        *((void *)v67 - 2) = 0;
        *((void *)v67 - 1) = 0;
        v65 -= 128;
      }
      while (&v63[v65] != v64);
      int v68 = &v60[v65];
      char v63 = (char *)*a2;
      unsigned int v69 = (char *)a2[1];
      *a2 = v68;
      a2[1] = v54;
      a2[2] = v62;
      if (v69 == v63)
      {
        a4 = v77;
        BOOL v10 = v79;
        if (!v63) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      a4 = v77;
      BOOL v10 = v79;
      do
      {
        unint64_t v70 = (std::__shared_weak_count *)*((void *)v69 - 1);
        if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        int8x16_t v71 = (void *)*((void *)v69 - 12);
        if (v71 != *((void **)v69 - 10)) {
          free(v71);
        }
        v69 -= 128;
      }
      while (v69 != v63);
    }
    if (!v63)
    {
LABEL_101:
      a2[1] = v54;
      goto LABEL_102;
    }
LABEL_100:
    operator delete(v63);
    goto LABEL_101;
  }
}

void sub_1A191B684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t md::LoadingStatusLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v15[0] = &unk_1EF573AE8;
  v15[1] = a2;
  BOOL v16 = v15;
  v13[0] = &unk_1EF573B30;
  v13[1] = a2;
  __n128 v14 = v13;
  unsigned int v18 = v17;
  v17[0] = &unk_1EF573B30;
  v17[1] = a2;
  std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::operator()((uint64_t)v15);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  uint64_t v6 = *(void *)(a3 + 8);
  unsigned int v7 = md::SceneContext::sceneStatus(**(md::SceneContext ***)a3);
  int v8 = v7;
  if (v6)
  {
    int v9 = *(unsigned __int8 *)(v6 + 268);
    if (v7 < 2) {
      goto LABEL_11;
    }
  }
  else
  {
    int v9 = 1;
    if (v7 < 2)
    {
LABEL_11:
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke_1;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a2;
      if (md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once != -1) {
        dispatch_once(&md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once, block);
      }
      goto LABEL_21;
    }
  }
  if (v7 == 2)
  {
    if (v9 == 2)
    {
      int v8 = 1;
    }
    else
    {
      if (v9 == 3)
      {
        int v8 = 4;
LABEL_24:
        gdc::LoadingStatusTracker::setSceneStatus(*(void *)(a1 + 120), v8);
        goto LABEL_25;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke;
      v12[3] = &__block_descriptor_40_e5_v8__0l;
      v12[4] = a2;
      if (md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once != -1) {
        dispatch_once(&md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::once, v12);
      }
    }
  }
LABEL_21:
  if (!*(unsigned char *)(a1 + 128) || v8 == 3 || v8 == 4) {
    goto LABEL_24;
  }
LABEL_25:
  if (!v18)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v18 + 48))(v18);
  uint64_t result = (uint64_t)v18;
  if (v18 == v17) {
    return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  if (v18) {
    return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
  }
  return result;
}

void sub_1A191BB5C(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1A191BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v15 = *(void *)(v13 - 64);
  if (v15 == v12)
  {
    (*(void (**)(uint64_t))(*(void *)(v13 - 88) + 32))(v13 - 88);
  }
  else if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
  }
  std::function<void ()(void)>::~function((uint64_t *)va);
  std::function<void ()(void)>::~function((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1A191BBF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 64);
  if (v3 == v1 - 88)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 88) + 32))(v1 - 88);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LoadingStatusLogic", "", v5, 2u);
  }
}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LoadingStatusLogic", "", v5, 2u);
  }
}

uint64_t md::SceneContext::sceneStatus(md::SceneContext *this)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)this + 23);
  unint64_t v2 = (unsigned __int16 *)*((void *)this + 24);
  if (v1 != v2)
  {
    uint64_t v3 = (unsigned __int16 *)*((void *)this + 14);
    os_signpost_id_t v4 = (unsigned __int16 *)*((void *)this + 15);
    unint64_t v5 = (unsigned __int16 *)*((void *)this + 23);
    do
    {
      uint64_t v6 = (unsigned __int16 *)*((void *)this + 14);
      if (v3 != v4)
      {
        uint64_t v6 = (unsigned __int16 *)*((void *)this + 14);
        while (*v6 != *v5)
        {
          v6 += 56;
          if (v6 == v4)
          {
            uint64_t v6 = (unsigned __int16 *)*((void *)this + 15);
            break;
          }
        }
      }
      if (!*((unsigned char *)v6 + 9)) {
        goto LABEL_45;
      }
      ++v5;
    }
    while (v5 != v2);
  }
  unsigned int v7 = (unsigned __int16 *)*((void *)this + 26);
  int v8 = (unsigned __int16 *)*((void *)this + 27);
  if (v7 == v8)
  {
LABEL_19:
    if (v1 != v2)
    {
      unsigned int v11 = (unsigned __int16 *)*((void *)this + 14);
      uint64_t v12 = (unsigned __int16 *)*((void *)this + 15);
      uint64_t v13 = (unsigned __int16 *)*((void *)this + 23);
      do
      {
        __n128 v14 = (unsigned __int16 *)*((void *)this + 14);
        if (v11 != v12)
        {
          __n128 v14 = (unsigned __int16 *)*((void *)this + 14);
          while (*v13 != *v14)
          {
            v14 += 56;
            if (v14 == v12)
            {
              __n128 v14 = (unsigned __int16 *)*((void *)this + 15);
              break;
            }
          }
        }
        if (*((unsigned char *)v14 + 10)) {
          goto LABEL_57;
        }
        ++v13;
      }
      while (v13 != v2);
    }
    if (v7 == v8)
    {
      return 2;
    }
    else
    {
      unsigned int v11 = (unsigned __int16 *)*((void *)this + 14);
      uint64_t v12 = (unsigned __int16 *)*((void *)this + 15);
      uint64_t v15 = (unsigned __int16 *)*((void *)this + 26);
      while (1)
      {
        uint64_t v16 = (unsigned __int16 *)*((void *)this + 14);
        if (v11 != v12)
        {
          uint64_t v16 = (unsigned __int16 *)*((void *)this + 14);
          while (*v15 != *v16)
          {
            v16 += 56;
            if (v16 == v12)
            {
              uint64_t v16 = (unsigned __int16 *)*((void *)this + 15);
              break;
            }
          }
        }
        if (*((unsigned char *)v16 + 10)) {
          break;
        }
        if (++v15 == v8) {
          return 2;
        }
      }
LABEL_57:
      while (v1 != v2)
      {
        int v22 = v12;
        if (v11 != v12)
        {
          int v22 = v11;
          while (*v22 != *v1)
          {
            v22 += 56;
            if (v22 == v12)
            {
              int v22 = v12;
              break;
            }
          }
        }
        if (!*((unsigned char *)v22 + 8)) {
          return 3;
        }
        ++v1;
      }
      if (v7 == v8) {
        return 4;
      }
      while (1)
      {
        unint64_t v23 = v12;
        if (v11 != v12)
        {
          unint64_t v23 = v11;
          while (*v23 != *v7)
          {
            v23 += 56;
            if (v23 == v12)
            {
              unint64_t v23 = v12;
              break;
            }
          }
        }
        if (!*((unsigned char *)v23 + 8)) {
          return 3;
        }
        if (++v7 == v8) {
          return 4;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = (unsigned __int16 *)*((void *)this + 14);
    os_signpost_id_t v4 = (unsigned __int16 *)*((void *)this + 15);
    int v9 = (unsigned __int16 *)*((void *)this + 26);
    while (1)
    {
      BOOL v10 = (unsigned __int16 *)*((void *)this + 14);
      if (v3 != v4)
      {
        BOOL v10 = (unsigned __int16 *)*((void *)this + 14);
        while (*v10 != *v9)
        {
          v10 += 56;
          if (v10 == v4)
          {
            BOOL v10 = (unsigned __int16 *)*((void *)this + 15);
            break;
          }
        }
      }
      if (!*((unsigned char *)v10 + 9)) {
        break;
      }
      if (++v9 == v8) {
        goto LABEL_19;
      }
    }
LABEL_45:
    while (v1 != v2)
    {
      uint64_t v18 = v4;
      if (v3 != v4)
      {
        uint64_t v18 = v3;
        while (*v18 != *v1)
        {
          v18 += 56;
          if (v18 == v4)
          {
            uint64_t v18 = v4;
            break;
          }
        }
      }
      if (!*((unsigned char *)v18 + 8)) {
        return 0;
      }
      ++v1;
    }
    uint64_t v19 = (unsigned __int16 *)*((void *)this + 26);
    uint64_t v20 = (unsigned __int16 *)*((void *)this + 27);
    if (v19 == v20) {
      return 1;
    }
    while (1)
    {
      BOOL v21 = v4;
      if (v3 != v4)
      {
        BOOL v21 = v3;
        while (*v21 != *v19)
        {
          v21 += 56;
          if (v21 == v4)
          {
            BOOL v21 = v4;
            break;
          }
        }
      }
      if (!*((unsigned char *)v21 + 8)) {
        return 0;
      }
      if (++v19 == v20) {
        return 1;
      }
    }
  }
}

void gdc::LoadingStatusTracker::setSceneStatus(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned __int8 *)(a1 + 89) == a2) {
      return;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 89) = a2;
  *(unsigned char *)(a1 + 90) = 1;
  if (a2 == 2)
  {
    if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
    }
    uint64_t v3 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
    if (!os_signpost_enabled(v3)) {
      goto LABEL_19;
    }
    __int16 v13 = 0;
    os_signpost_id_t v4 = "failed=no";
    unint64_t v5 = (uint8_t *)&v13;
LABEL_15:
    int v8 = v3;
    os_signpost_type_t v9 = OS_SIGNPOST_INTERVAL_BEGIN;
    goto LABEL_18;
  }
  unsigned int v6 = a2 - 3;
  if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
  }
  uint64_t v3 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
  BOOL v7 = os_signpost_enabled(v3);
  if (v6 <= 1)
  {
    if (!v7) {
      goto LABEL_19;
    }
    __int16 v12 = 0;
    os_signpost_id_t v4 = "failed=yes";
    unint64_t v5 = (uint8_t *)&v12;
    goto LABEL_15;
  }
  if (!v7) {
    goto LABEL_19;
  }
  __int16 v11 = 0;
  os_signpost_id_t v4 = "";
  unint64_t v5 = (uint8_t *)&v11;
  int v8 = v3;
  os_signpost_type_t v9 = OS_SIGNPOST_INTERVAL_END;
LABEL_18:
  _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, v9, 0xEEEEB0B5B2B2EEEELL, "FullyLoaded", v4, v5, 2u);
LABEL_19:

  if (*(unsigned __int8 *)(a1 + 89) - 2 <= 2)
  {
    uint64_t v10 = *(void *)(a1 + 184);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
    }
  }
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_29>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 1128);
  char v5 = 30;
  md::MapEngineSettings::set(v2, &v5, (void *)1);
  md::AnimationManager::forceInstantAnimations(*(md::AnimationManager **)(v1 + 104), 0);
  id WeakRetained = objc_loadWeakRetained((id *)(v1 + 848));

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained((id *)(v1 + 848));
    [v4 willBecomeFullyDrawn];
  }
  if (*(unsigned char *)(v1 + 4608)) {
    md::MapEngine::updateLogicsFrequency(v1, *(void **)(*(void *)(v1 + 1080) + 8), kVariableLogicFrequency, 1);
  }
}

void sub_1A191C2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_30>,void ()(gdc::SceneStatus)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  id WeakRetained = objc_loadWeakRetained((id *)(v2 + 848));

  if (WeakRetained)
  {
    id v5 = objc_loadWeakRetained((id *)(v2 + 848));
    [v5 didUpdateSceneStatus:v3];
  }
  if (*(unsigned char *)(v2 + 4608))
  {
    uint64_t v6 = *(void *)(v2 + 1080);
    uint64_t v7 = 1;
    if (v3 >= 2) {
      uint64_t v7 = kVariableLogicFrequency;
    }
    char v8 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v6 = *(void *)(v2 + 1080);
  }
  md::MapEngine::updateLogicsFrequency(v2, *(void **)(v6 + 8), v7, v8);
  if (*(unsigned char *)(*(void *)(v2 + 1192) + 48) == 18)
  {
    char v9 = 3;
    md::MapEngine::setNeedsTick(v2, &v9);
  }
}

void sub_1A191C3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::MapEngine::updateLogicsFrequency(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 1120);
  if (!v4) {
    return;
  }
  char v5 = a4;
  int8x8_t v8 = (int8x8_t)a2[1];
  if (!*(void *)&v8) {
    goto LABEL_30;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = 0xE42D19AFCA302E68;
    if (*(void *)&v8 <= 0xE42D19AFCA302E68) {
      unint64_t v10 = 0xE42D19AFCA302E68 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & 0xE42D19AFCA302E68;
  }
  __int16 v11 = *(void **)(*a2 + 8 * v10);
  if (!v11) {
    goto LABEL_30;
  }
  __int16 v12 = (void *)*v11;
  if (!v12) {
    goto LABEL_30;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v13 = *(void *)&v8 - 1;
    uint64_t v14 = 1;
    while (1)
    {
      uint64_t v15 = v12[1];
      if (v15 == 0xE42D19AFCA302E68)
      {
        if (v12[2] == 0xE42D19AFCA302E68) {
          goto LABEL_24;
        }
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_31;
      }
      __int16 v12 = (void *)*v12;
      if (!v12) {
        goto LABEL_31;
      }
    }
  }
  uint64_t v14 = 1;
  while (1)
  {
    unint64_t v16 = v12[1];
    if (v16 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v16 >= *(void *)&v8) {
      v16 %= *(void *)&v8;
    }
    if (v16 != v10) {
      goto LABEL_31;
    }
LABEL_18:
    __int16 v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_31;
    }
  }
  if (v12[2] != 0xE42D19AFCA302E68) {
    goto LABEL_18;
  }
LABEL_24:
  uint64_t v17 = v12[5];
  if (*(void *)(v17 + 8) != 0xE42D19AFCA302E68 || (uint64_t v18 = *(void *)(v17 + 32)) == 0 || *(unsigned char *)(v18 + 84) != 3)
  {
LABEL_30:
    uint64_t v14 = 1;
    goto LABEL_31;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 4768);
  if (a4) {
    a3 = *(unsigned int *)(a1 + 4768);
  }
LABEL_31:
  if (*(void *)(a1 + 1200))
  {
    uint64_t v19 = 1;
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1 + 1192) + 48) == 18) {
      uint64_t v14 = 1;
    }
    char v20 = a4;
    if ((a4 & 0xFE) == 0) {
      char v20 = 1;
    }
    if (overwriteVariableRate) {
      BOOL v21 = v14 == 1;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21)
    {
      char v5 = a4;
    }
    else
    {
      a3 = overwriteVariableRate;
      char v5 = v20;
    }
    if (v21) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = overwriteVariableRate;
    }
  }
  if (*(void *)(v4 + 112) != v19)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    int v22 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_INFO, "[VLR] Update Logics Frequency to %zu", buf, 0xCu);
    }
  }
  *(void *)(v4 + 112) = v19;
  if (v5)
  {
    *(void *)(v4 + 96) = a3;
    *(unsigned char *)(v4 + 104) = v5;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v23 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a3;
      _os_log_impl(&dword_1A1780000, v23, OS_LOG_TYPE_INFO, "[VLR] Update nextResetFrequency to %zu", buf, 0xCu);
    }
  }
  uint64_t v24 = *(void *)(a1 + 1120);
  size_t v25 = (void (**)(void *))&unk_1EF590700;
  v28[0] = &unk_1EF590700;
  v28[1] = v19;
  int8x16_t v29 = v28;
  uint64_t v26 = *(void **)(v24 + 24);
  if (!v26)
  {
LABEL_66:
    v25[4](v28);
    goto LABEL_67;
  }
  int v27 = v28;
  do
  {
    *(void *)buf = v26[5];
    if (!v27)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(void *, uint8_t *))(*v27 + 48))(v27, buf);
    uint64_t v26 = (void *)*v26;
    int v27 = v29;
  }
  while (v26);
  if (v29 == v28)
  {
    size_t v25 = (void (**)(void *))v28[0];
    goto LABEL_66;
  }
  if (v29) {
    (*(void (**)(void))(*v29 + 40))();
  }
LABEL_67:
  md::LogicManager::resetFrequencyCounter(*(md::LogicManager **)(a1 + 1120));
}

void sub_1A191C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0,std::allocator<md::MapEngine::updateLogicsFrequency(unsigned long,md::LayoutContext const&,std::optional<unsigned long>)::$_0>,void ()(md::LogicBase *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)*a2 + 48))(*a2, *(void *)(a1 + 8));
}

uint64_t md::LogicBase::setFrequency(uint64_t this, uint64_t a2)
{
  *(void *)(this + 64) = a2;
  return this;
}

void md::LogicManager::resetFrequencyCounter(md::LogicManager *this)
{
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_DEBUG, "[VLR] Reset Frame Counter", v3, 2u);
  }

  *((void *)this + 11) = 1;
}

void md::AnimationManager::forceInstantAnimations(md::AnimationManager *this, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 233) != a2)
  {
    *((unsigned char *)this + 233) = a2;
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if (*((unsigned char *)this + 233)) {
        uint64_t v4 = "YES";
      }
      else {
        uint64_t v4 = "NO";
      }
      int v5 = 136315138;
      uint64_t v6 = v4;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_INFO, "AnimationManager shouldForceInstanceAnimations:%s", (uint8_t *)&v5, 0xCu);
    }
  }
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = (id *)(*(void *)(a1 + 8) + 848);
  id WeakRetained = objc_loadWeakRetained(v1);

  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(v1);
    [v3 didStartLoadingData];
  }
}

void sub_1A191CA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_28>,void ()(NSError *)>::operator()(uint64_t a1, id *a2)
{
  id v7 = *a2;
  id v3 = (id *)(*(void *)(a1 + 8) + 848);
  id WeakRetained = objc_loadWeakRetained(v3);

  if (WeakRetained)
  {
    id v5 = objc_loadWeakRetained(v3);
    uint64_t v6 = v5;
    if (v7) {
      objc_msgSend(v5, "didFinishLoadingDataWithError:");
    }
    else {
      [v5 didFinishLoadingData];
    }
  }
}

void sub_1A191CB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(md::LabelManager *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v5);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::operator()(v3, v4);
}

uint64_t std::__function::__func<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0,std::allocator<md::LabelsLogic::setDidLayoutCallback(std::function<void ()(md::LabelManager *)>)::$_0>,void ()(md::LabelManager *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (*(void *)(*(void *)(a1 + 40) + 160) == *a2)
    {
      uint64_t v4 = *a2;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 48))(result, &v4);
    }
  }
  return result;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8>,void ()(md::LabelManager *)>::operator()(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 8) + 848));
  [WeakRetained labelManagerDidLayout];
}

void sub_1A191CCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A191CFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t result = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(a2);
  uint64_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::each();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PrimitiveType>(v3);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(v3);
  uint64_t v7 = (void *)gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v3);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::MarketMask>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v91, v9, v4, v5, *(void *)(v9 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v10 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v10 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v89, v10, v4, v5, *(void *)(v10 + 32));
  if (v90 == v94)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    __int16 v12 = (void *)result;
LABEL_90:
    *__int16 v12 = 0xFFFFFFFF00000000;
  }
  else
  {
    __int16 v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *__int16 v12 = *v11;
      unint64_t v13 = *v11;
      unint64_t v14 = HIDWORD(*v11);
      unint64_t v15 = v13 >> 39;
      uint64_t v16 = v4[4];
      if (v13 >> 39 < (v4[5] - v16) >> 3
        && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
        && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v20 = v4[7],
            uint64_t v19 = v4[8],
            v18 < (v19 - v20) >> 3)
        && ((v21 = v20 + 8 * v18, v21 != v19) ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v14) : (BOOL v22 = 0), v22))
      {
        uint64_t v23 = v4[11];
        uint64_t v24 = v4[10] + 8 * v18;
      }
      else
      {
        uint64_t v23 = v4[11];
        uint64_t v24 = v23;
      }
      if (v24 == v23) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = v5[4];
      if (v15 < (v5[5] - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v15)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v30 = v5[7],
            uint64_t v29 = v5[8],
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v14) : (v32 = 0), v32))
      {
        unint64_t v33 = v5[11];
        unint64_t v34 = v5[10] + v28;
      }
      else
      {
        unint64_t v33 = v5[11];
        unint64_t v34 = v33;
      }
      if (v34 == v33) {
        unint64_t v35 = 0;
      }
      else {
        unint64_t v35 = v34;
      }
      uint64_t v36 = v6[4];
      if (v15 < (v6[5] - v36) >> 3
        && (uint64_t v37 = *(void *)(v36 + 8 * v15)) != 0
        && (unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v40 = v6[7],
            uint64_t v39 = v6[8],
            v38 < (v39 - v40) >> 3)
        && ((uint64_t v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == v14) : (v42 = 0), v42))
      {
        uint64_t v43 = v6[11];
        uint64_t v44 = v6[10] + 8 * v38;
      }
      else
      {
        uint64_t v43 = v6[11];
        uint64_t v44 = v43;
      }
      if (v44 == v43) {
        uint64_t v44 = 0;
      }
      uint64_t v45 = v7[4];
      if (v15 < (v7[5] - v45) >> 3
        && (uint64_t v46 = *(void *)(v45 + 8 * v15)) != 0
        && (unint64_t v47 = *(unsigned __int16 *)(v46 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v49 = v7[7],
            uint64_t v48 = v7[8],
            v47 < (v48 - v49) >> 3)
        && ((uint64_t v50 = v49 + 8 * v47, v50 != v48) ? (v51 = *(_DWORD *)(v50 + 4) == v14) : (v51 = 0), v51))
      {
        uint64_t v52 = v7[11];
        uint64_t v53 = v7[10] + 4 * v47;
      }
      else
      {
        uint64_t v52 = v7[11];
        uint64_t v53 = v52;
      }
      if (v53 == v52) {
        uint64_t v53 = 0;
      }
      if ((uint64_t v54 = v8[4], v15 < (v8[5] - v54) >> 3)
        && (uint64_t v55 = *(void *)(v54 + 8 * v15)) != 0
        && (unint64_t v56 = *(unsigned __int16 *)(v55 + 2 * (HIDWORD(v13) & 0x7F)),
            uint64_t v58 = v8[7],
            uint64_t v57 = v8[8],
            v56 < (v57 - v58) >> 3)
        && ((uint64_t v59 = v58 + 8 * v56, v59 != v57) ? (v60 = *(_DWORD *)(v59 + 4) == v14) : (v60 = 0), v60))
      {
        unint64_t v61 = v8[11];
        unint64_t v62 = v8[10] + v56;
      }
      else
      {
        unint64_t v61 = v8[11];
        unint64_t v62 = v61;
      }
      unint64_t v63 = v62 == v61 ? 0 : v62;
      uint64_t v96 = v53;
      uint64_t v97 = v44;
      unint64_t v95 = v63;
      uint64_t v64 = *(void *)(a2 + 24);
      if (!v64) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t *, unint64_t *))(*(void *)v64 + 48))(v64, v25, v35, &v97, &v96, &v95);
      int v66 = v94;
      __int16 v11 = *(unint64_t **)(v91 + 32);
      if (++v94 != v11)
      {
        uint64_t v67 = v92[4];
        unint64_t v68 = (v92[5] - v67) >> 3;
        unsigned int v69 = v66 + 2;
        while (1)
        {
          unint64_t v70 = *((unsigned int *)v69 - 1);
          unint64_t v71 = v70 >> 7;
          if (v70 >> 7 < v68)
          {
            uint64_t v72 = *(void *)(v67 + 8 * v71);
            if (v72)
            {
              unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (v70 & 0x7F));
              uint64_t v74 = v92[7];
              uint64_t result = v92[8];
              if (v73 < (result - v74) >> 3)
              {
                uint64_t v75 = v74 + 8 * v73;
                if (v75 != result && *(_DWORD *)(v75 + 4) == v70)
                {
                  uint64_t v77 = v93[4];
                  uint64_t result = v93[5] - v77;
                  if (v71 < result >> 3)
                  {
                    uint64_t v78 = *(void *)(v77 + 8 * v71);
                    if (v78)
                    {
                      unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * (v70 & 0x7F));
                      uint64_t v81 = v93[7];
                      uint64_t v80 = v93[8];
                      uint64_t result = v80 - v81;
                      if (v79 < (v80 - v81) >> 3)
                      {
                        uint64_t v82 = v81 + 8 * v79;
                        if (v82 != v80 && *(_DWORD *)(v82 + 4) == v70) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v94 = v69;
          BOOL v22 = v69++ == v11;
          if (v22) {
            goto LABEL_9;
          }
        }
        __int16 v11 = v69 - 1;
      }
LABEL_9:
      if (v90 == v11) {
        goto LABEL_90;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (uint64_t)gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v84, v85, v86, v87, v88);
  }
  return result;
}

void *gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(void *result, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  void *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[4] = a5;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5 != a5)
  {
    unint64_t v6 = *(unsigned int *)(a5 + 4);
    unint64_t v7 = v6 >> 7;
    uint64_t v8 = a3[4];
    unint64_t v9 = (a3[5] - v8) >> 3;
    if (v6 >> 7 >= v9) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(v8 + 8 * v7);
    if (!v10) {
      goto LABEL_17;
    }
    unint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (v6 & 0x7F));
    uint64_t v13 = a3[7];
    uint64_t v12 = a3[8];
    if (v11 >= (v12 - v13) >> 3) {
      goto LABEL_17;
    }
    uint64_t v14 = v13 + 8 * v11;
    BOOL v15 = v14 != v12 && *(_DWORD *)(v14 + 4) == v6;
    if (!v15
      || (uint64_t v16 = a4[4], v7 >= (a4[5] - v16) >> 3)
      || (uint64_t v17 = *(void *)(v16 + 8 * v7)) == 0
      || (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (v6 & 0x7F)), v20 = a4[7], v19 = a4[8], v18 >= (v19 - v20) >> 3)
      || ((v21 = v20 + 8 * v18, v21 != v19) ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v6) : (BOOL v22 = 0), !v22))
    {
LABEL_17:
      result[4] = a5 + 8;
      if (a5 + 8 != v5)
      {
        uint64_t v23 = a5 + 16;
        do
        {
          unint64_t v24 = *(unsigned int *)(v23 - 4);
          unint64_t v25 = v24 >> 7;
          if (v24 >> 7 < v9)
          {
            uint64_t v26 = *(void *)(v8 + 8 * v25);
            if (v26)
            {
              unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (v24 & 0x7F));
              uint64_t v29 = a3[7];
              uint64_t v28 = a3[8];
              if (v27 < (v28 - v29) >> 3)
              {
                uint64_t v30 = v29 + 8 * v27;
                if (v30 != v28 && *(_DWORD *)(v30 + 4) == v24)
                {
                  uint64_t v32 = a4[4];
                  if (v25 < (a4[5] - v32) >> 3)
                  {
                    uint64_t v33 = *(void *)(v32 + 8 * v25);
                    if (v33)
                    {
                      unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (v24 & 0x7F));
                      uint64_t v36 = a4[7];
                      uint64_t v35 = a4[8];
                      if (v34 < (v35 - v36) >> 3)
                      {
                        uint64_t v37 = v36 + 8 * v34;
                        if (v37 != v35 && *(_DWORD *)(v37 + 4) == v24) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          result[4] = v23;
          BOOL v15 = v23 == v5;
          v23 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::GeocentricBounds>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v2);
  unint64_t v6 = (void *)gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v2);
  unint64_t v7 = (void *)gdc::Registry::storage<md::ls::MeshRenderableBounds>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::BoundData>(v2);
  uint64_t v87 = (void *)v3;
  uint64_t v88 = (void *)v4;
  uint64_t v89 = (void *)v5;
  size_t v90 = v6;
  uint64_t v91 = v7;
  uint64_t v92 = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v85, (uint64_t *)&v87);
  unint64_t v9 = v6 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v5;
  }
  if (v6[8] - v6[7] >= *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    unint64_t v9 = (void *)(v10 + 32);
  }
  if (v7[8] - v7[7] < v9[4] - v9[3]) {
    unint64_t v9 = v7 + 4;
  }
  if (v8[8] - v8[7] < v9[4] - v9[3]) {
    unint64_t v9 = v8 + 4;
  }
  unint64_t v11 = v86;
  uint64_t v83 = (unint64_t *)v9[4];
  if (v83 == v86)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)result;
LABEL_94:
    *uint64_t v12 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v13 = v87;
    uint64_t v14 = v88;
    BOOL v15 = v89;
    uint64_t v16 = v85[0];
    while (1)
    {
      *uint64_t v12 = *v11;
      unint64_t v17 = *v11;
      unint64_t v18 = HIDWORD(*v11);
      unint64_t v19 = *v11 >> 39;
      uint64_t v20 = v13[4];
      if (v19 >= (v13[5] - v20) >> 3) {
        goto LABEL_23;
      }
      uint64_t v21 = *(void *)(v20 + 8 * v19);
      if (!v21) {
        goto LABEL_23;
      }
      unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F));
      uint64_t v24 = v13[7];
      uint64_t v23 = v13[8];
      if (v22 >= (v23 - v24) >> 3) {
        goto LABEL_23;
      }
      uint64_t v25 = v24 + 8 * v22;
      if (v25 != v23 && *(_DWORD *)(v25 + 4) == v18)
      {
        uint64_t v27 = v13[11];
        uint64_t v28 = v13[10] + 8 * v22;
      }
      else
      {
LABEL_23:
        uint64_t v27 = v13[11];
        uint64_t v28 = v27;
      }
      uint64_t v29 = v28 == v27 ? 0 : v28;
      if ((uint64_t v30 = v14[4], v19 < (v14[5] - v30) >> 3)
        && (uint64_t v31 = *(void *)(v30 + 8 * v19)) != 0
        && (unint64_t v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v34 = v14[7],
            uint64_t v33 = v14[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (BOOL v36 = *(_DWORD *)(v35 + 4) == v18) : (BOOL v36 = 0), v36))
      {
        uint64_t v37 = v14[11];
        uint64_t v38 = v14[10] + 36 * v32;
      }
      else
      {
        uint64_t v37 = v14[11];
        uint64_t v38 = v37;
      }
      uint64_t v39 = v38 == v37 ? 0 : v38;
      if ((uint64_t v40 = v15[4], v19 < (v15[5] - v40) >> 3)
        && (uint64_t v41 = *(void *)(v40 + 8 * v19)) != 0
        && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v44 = v15[7],
            uint64_t v43 = v15[8],
            v42 < (v43 - v44) >> 3)
        && ((uint64_t v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == v18) : (v46 = 0), v46))
      {
        uint64_t v47 = v15[11];
        uint64_t v48 = v15[10] + 4 * v42;
      }
      else
      {
        uint64_t v47 = v15[11];
        uint64_t v48 = v47;
      }
      uint64_t v49 = v48 == v47 ? 0 : v48;
      if ((uint64_t v50 = v6[4], v19 < (v6[5] - v50) >> 3)
        && (uint64_t v51 = *(void *)(v50 + 8 * v19)) != 0
        && (unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v54 = v6[7],
            uint64_t v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((uint64_t v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == v18) : (v56 = 0), v56))
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v6[10] + 8 * v52;
      }
      else
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v57;
      }
      uint64_t v59 = v58 == v57 ? 0 : v58;
      if ((uint64_t v60 = v7[4], v19 < (v7[5] - v60) >> 3)
        && (uint64_t v61 = *(void *)(v60 + 8 * v19)) != 0
        && (unint64_t v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v64 = v7[7],
            uint64_t v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((uint64_t v65 = v64 + 8 * v62, v65 != v63) ? (v66 = *(_DWORD *)(v65 + 4) == v18) : (v66 = 0), v66))
      {
        uint64_t v67 = v7[11];
        uint64_t v68 = v7[10] + 24 * v62;
      }
      else
      {
        uint64_t v67 = v7[11];
        uint64_t v68 = v67;
      }
      uint64_t v69 = v68 == v67 ? 0 : v68;
      if ((uint64_t v70 = v8[4], v19 < (v8[5] - v70) >> 3)
        && (uint64_t v71 = *(void *)(v70 + 8 * v19)) != 0
        && (unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v74 = v8[7],
            uint64_t v73 = v8[8],
            v72 < (v73 - v74) >> 3)
        && ((uint64_t v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == v18) : (v76 = 0), v76))
      {
        uint64_t v77 = v8[11];
        uint64_t v78 = v8[10] + 24 * v72;
      }
      else
      {
        uint64_t v77 = v8[11];
        uint64_t v78 = v77;
      }
      uint64_t v79 = *(void *)(a2 + 24);
      if (!v79) {
        break;
      }
      if (v78 == v77) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = v78;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v79 + 48))(v79, v29, v39, v49, v59, v69, v80);
      uint64_t v82 = *(unint64_t **)(v16 + 32);
      while (1)
      {
        uint8x8_t v86 = ++v11;
        if (v11 == v82) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v85);
        if (result) {
          goto LABEL_15;
        }
      }
      unint64_t v11 = v82;
LABEL_15:
      if (v83 == v11) {
        goto LABEL_94;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::operator()();
  }
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::IgnoreCulling>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v3);
  uint64_t v8 = (void *)(v4 + 32);
  if (v5[8] - v5[7] < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v8 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v7 + 32);
  }
  uint64_t v54 = v8;
  uint64_t v55 = (void *)v4;
  BOOL v56 = v5;
  uint64_t v57 = (void *)v6;
  unint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  uint64_t v58 = (void *)v7;
  uint64_t v59 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v54))
  {
    unint64_t v11 = v9 + 1;
    do
    {
      unint64_t v9 = v11;
      uint64_t v59 = v11;
      if (v11 == v10) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v54);
      unint64_t v11 = v9 + 1;
    }
    while (!isValid);
  }
  unint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v14 = (void *)result;
  while (v10 != v9)
  {
    void *v14 = *v9;
    unint64_t v16 = *v9;
    unint64_t v17 = *v9 >> 39;
    uint64_t v18 = v5[4];
    if (v17 < (v5[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v16) & 0x7F)), v22 = v5[7], v21 = v5[8], v20 < (v21 - v22) >> 3)
      && ((unint64_t v23 = HIDWORD(v16), v24 = v22 + 8 * v20, v24 != v21)
        ? (BOOL v25 = *(_DWORD *)(v24 + 4) == v23)
        : (BOOL v25 = 0),
          v25))
    {
      uint64_t v26 = (unint64_t *)(v5[10] + 8 * v20);
    }
    else
    {
      uint64_t v26 = (unint64_t *)v5[11];
    }
    uint64_t v27 = **(void **)(a1 + 8);
    uint64_t v28 = *(void **)v27;
    uint64_t v29 = *(void **)(v27 + 8);
    if (v28 != v29)
    {
      while (*v28 != 0x41D4E9297E100630)
      {
        v28 += 5;
        if (v28 == v29) {
          goto LABEL_33;
        }
      }
    }
    if (v28 == v29)
    {
LABEL_33:
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = v28[3];
      uint64_t v30 = (std::__shared_weak_count *)v28[4];
      if (v30)
      {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    LODWORD(v64[0]) = 7;
    unint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v31 + 824), 7u, v64);
    uint64_t v33 = *(void **)(a1 + 8);
    uint64_t v34 = HIDWORD(*v14);
    uint64_t v35 = (*v14 << 32) | 1;
    v61[0] = &off_1EF522A18;
    v61[1] = v35;
    int v62 = v34;
    BOOL v66 = v64;
    uint64_t v63 = v61;
    v64[0] = &off_1EF522A18;
    v64[1] = v35;
    int v65 = v34;
    int v67 = 0;
    ecs2::Runtime::queueCommand(v33, (uint64_t)v64);
    if (v67 != -1) {
      ((void (*)(char *, void *))off_1EF58F5D8[v67])(&v60, v64);
    }
    int v67 = -1;
    if (v63 == v61)
    {
      (*(void (**)(void *))(v61[0] + 32))(v61);
    }
    else if (v63)
    {
      (*(void (**)(void))(*v63 + 40))();
    }
    unint64_t result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v32 + 24), *v26, *v26);
    unint64_t v9 = (void *)v54[4];
    BOOL v15 = v59 + 1;
    uint64_t v59 = v15;
    if (v15 != v9)
    {
      uint64_t v36 = v55[4];
      while (1)
      {
        unint64_t v37 = *((unsigned int *)v15 + 1);
        unint64_t v38 = v37 >> 7;
        if (v37 >> 7 < (v55[5] - v36) >> 3)
        {
          unint64_t result = *(void *)(v36 + 8 * v38);
          if (result)
          {
            uint64_t v39 = v37 & 0x7F;
            unint64_t result = *(unsigned __int16 *)(result + 2 * v39);
            uint64_t v41 = v55[7];
            uint64_t v40 = v55[8];
            if (result < (v40 - v41) >> 3)
            {
              unint64_t result = v41 + 8 * result;
              if (result != v40 && *(_DWORD *)(result + 4) == v37)
              {
                unint64_t result = v56[4];
                if (v38 < (uint64_t)(v56[5] - result) >> 3)
                {
                  unint64_t result = *(void *)(result + 8 * v38);
                  if (result)
                  {
                    unint64_t result = *(unsigned __int16 *)(result + 2 * v39);
                    uint64_t v44 = v56[7];
                    uint64_t v43 = v56[8];
                    if (result < (v43 - v44) >> 3)
                    {
                      unint64_t result = v44 + 8 * result;
                      if (result != v43 && *(_DWORD *)(result + 4) == v37)
                      {
                        unint64_t result = v57[4];
                        if (v38 < (uint64_t)(v57[5] - result) >> 3)
                        {
                          unint64_t result = *(void *)(result + 8 * v38);
                          if (result)
                          {
                            unint64_t result = *(unsigned __int16 *)(result + 2 * v39);
                            uint64_t v47 = v57[7];
                            uint64_t v46 = v57[8];
                            if (result < (v46 - v47) >> 3)
                            {
                              unint64_t result = v47 + 8 * result;
                              if (result != v46 && *(_DWORD *)(result + 4) == v37)
                              {
                                unint64_t result = v58[4];
                                if (v38 < (uint64_t)(v58[5] - result) >> 3)
                                {
                                  uint64_t v49 = *(void *)(result + 8 * v38);
                                  if (v49)
                                  {
                                    unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * v39);
                                    unint64_t result = v58[7];
                                    uint64_t v51 = v58[8];
                                    if (v50 < (uint64_t)(v51 - result) >> 3)
                                    {
                                      unint64_t v52 = result + 8 * v50;
                                      unint64_t result = *(unsigned int *)(v52 + 4);
                                      if (result == v37 && v52 != v51) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v15 == v9)
        {
          BOOL v15 = v9;
          goto LABEL_15;
        }
      }
      unint64_t v9 = v15;
LABEL_15:
      uint64_t v59 = v15;
    }
  }
  void *v14 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = gdc::Registry::storage<md::BoundData>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v2);
  uint64_t v7 = gdc::Registry::storage<md::ls::WantsCulledSlices>(v2);
  uint64_t v8 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  uint64_t v9 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v2);
  uint64_t v10 = gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v2);
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v11 = v3 + 32;
  }
  else {
    uint64_t v11 = v4 + 32;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v11 = v5 + 32;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v11 = v6 + 32;
  }
  unint64_t v94 = *(void *)(v7 + 64) - *(void *)(v7 + 56);
  if (v94 < *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v11 = v7 + 32;
  }
  unint64_t v93 = *(void *)(v8 + 64) - *(void *)(v8 + 56);
  if (v93 < *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v11 = v8 + 32;
  }
  if (*(void *)(v9 + 64) - *(void *)(v9 + 56) < *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v11 = v9 + 32;
  }
  if (*(void *)(v10 + 64) - *(void *)(v10 + 56) < *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v11 = v10 + 32;
  }
  v102[0] = v11;
  v102[1] = v3;
  uint64_t v97 = (void *)v5;
  uint64_t v98 = (void *)v4;
  v102[2] = v4;
  v102[3] = v5;
  uint64_t v96 = (void *)v10;
  v102[4] = v6;
  v102[5] = v7;
  v102[6] = v8;
  v102[7] = v9;
  uint64_t v13 = *(void **)(v11 + 24);
  uint64_t v12 = *(void **)(v11 + 32);
  v102[8] = v10;
  int v103 = v13;
  if (v12 == v13)
  {
    uint64_t v14 = v98;
  }
  else
  {
    uint64_t v14 = v98;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v102))
    {
      BOOL v15 = v13 + 1;
      do
      {
        uint64_t v13 = v15;
        int v103 = v15;
        if (v15 == v12) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v102);
        BOOL v15 = v13 + 1;
      }
      while (!isValid);
    }
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v100 = (void *)result;
  unint64_t v95 = v20;
  while (v95 != v13)
  {
    void *v100 = *v13;
    unint64_t v21 = *v13;
    uint64_t v22 = HIDWORD(*v13);
    unint64_t v23 = *v13 >> 39;
    uint64_t v24 = v14[4];
    if (v23 < (v14[5] - v24) >> 3
      && (uint64_t v25 = *(void *)(v24 + 8 * v23)) != 0
      && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F)),
          uint64_t v28 = v14[7],
          uint64_t v27 = v14[8],
          v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (BOOL v30 = *(_DWORD *)(v29 + 4) == v22) : (BOOL v30 = 0), v30))
    {
      uint64_t v31 = v14[11];
      uint64_t v32 = v14[10] + 24 * v26;
    }
    else
    {
      uint64_t v31 = v14[11];
      uint64_t v32 = v31;
    }
    if (v32 == v31) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = (float *)v32;
    }
    uint64_t v34 = v19[4];
    if (v23 < (v19[5] - v34) >> 3
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)),
          uint64_t v38 = v19[7],
          uint64_t v37 = v19[8],
          v36 < (v37 - v38) >> 3)
      && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == v22) : (v40 = 0), v40))
    {
      uint64_t v41 = v19[10] + 8 * v36;
    }
    else
    {
      uint64_t v41 = v19[11];
    }
    uint64_t v42 = v18[4];
    if (v23 < (v18[5] - v42) >> 3
      && (uint64_t v43 = *(void *)(v42 + 8 * v23)) != 0
      && (unint64_t v44 = *(unsigned __int16 *)(v43 + 2 * (HIDWORD(v21) & 0x7F)),
          uint64_t v46 = v18[7],
          uint64_t v45 = v18[8],
          v44 < (v45 - v46) >> 3)
      && ((uint64_t v47 = v46 + 8 * v44, v47 != v45) ? (v48 = *(_DWORD *)(v47 + 4) == v22) : (v48 = 0), v48))
    {
      uint64_t v49 = (unint64_t *)(v18[10] + 8 * v44);
    }
    else
    {
      uint64_t v49 = (unint64_t *)v18[11];
    }
    uint64_t v50 = v96[4];
    if (v23 < (v96[5] - v50) >> 3
      && (uint64_t v51 = *(void *)(v50 + 8 * v23)) != 0
      && (unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v21) & 0x7F)),
          uint64_t v54 = v96[7],
          uint64_t v53 = v96[8],
          v52 < (v53 - v54) >> 3)
      && ((uint64_t v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == v22) : (v56 = 0), v56))
    {
      uint64_t v57 = v96[11];
      uint64_t v58 = v96[10] + 4 * v52;
    }
    else
    {
      uint64_t v57 = v96[11];
      uint64_t v58 = v57;
    }
    if (v58 == v57) {
      uint64_t v59 = 0;
    }
    else {
      uint64_t v59 = v58;
    }
    uint64_t v60 = **(void **)(a1 + 8);
    uint64_t v61 = *(void **)v60;
    int v62 = *(void **)(v60 + 8);
    uint64_t v99 = (unint64_t *)v41;
    if (v61 != v62)
    {
      while (*v61 != 0x41D4E9297E100630)
      {
        v61 += 5;
        if (v61 == v62) {
          goto LABEL_73;
        }
      }
    }
    if (v61 == v62)
    {
LABEL_73:
      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v63 = v61[3];
      uint64_t v64 = (std::__shared_weak_count *)v61[4];
      if (v64)
      {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    int v65 = ***(uint64_t ****)(a1 + 8);
    if (v65 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v65 != 0x22D45F5AAD4BF408)
    {
      BOOL v66 = v65 + 5;
      do
      {
        uint64_t v67 = *v66;
        v66 += 5;
      }
      while (v67 != 0x22D45F5AAD4BF408);
      int v65 = v66 - 5;
    }
    uint64_t v68 = (uint64_t (***)(void))v65[3];
    uint64_t v69 = (std::__shared_weak_count *)v65[4];
    if (v69)
    {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    uint64_t v70 = *(void **)((**v68)(v68) + 8);
    int8x8_t v71 = (int8x8_t)v70[1];
    if (!*(void *)&v71) {
      goto LABEL_109;
    }
    uint8x8_t v72 = (uint8x8_t)vcnt_s8(v71);
    v72.i16[0] = vaddlv_u8(v72);
    if (v72.u32[0] > 1uLL)
    {
      unint64_t v73 = 0x8BD499FBD96FBB9ELL;
      if (*(void *)&v71 <= 0x8BD499FBD96FBB9ELL) {
        unint64_t v73 = 0x8BD499FBD96FBB9ELL % *(void *)&v71;
      }
    }
    else
    {
      unint64_t v73 = (*(void *)&v71 - 1) & 0x8BD499FBD96FBB9ELL;
    }
    uint64_t v74 = *(void **)(*v70 + 8 * v73);
    if (!v74 || (uint64_t v75 = (void *)*v74) == 0)
    {
LABEL_109:
      uint64_t v80 = 0;
      goto LABEL_110;
    }
    if (v72.u32[0] < 2uLL)
    {
      uint64_t v76 = *(void *)&v71 - 1;
      while (1)
      {
        uint64_t v78 = v75[1];
        if (v78 == 0x8BD499FBD96FBB9ELL)
        {
          if (v75[2] == 0x8BD499FBD96FBB9ELL) {
            goto LABEL_107;
          }
        }
        else if ((v78 & v76) != v73)
        {
          goto LABEL_109;
        }
        uint64_t v75 = (void *)*v75;
        if (!v75) {
          goto LABEL_109;
        }
      }
    }
    while (1)
    {
      unint64_t v77 = v75[1];
      if (v77 == 0x8BD499FBD96FBB9ELL) {
        break;
      }
      if (v77 >= *(void *)&v71) {
        v77 %= *(void *)&v71;
      }
      if (v77 != v73) {
        goto LABEL_109;
      }
LABEL_92:
      uint64_t v75 = (void *)*v75;
      if (!v75) {
        goto LABEL_109;
      }
    }
    if (v75[2] != 0x8BD499FBD96FBB9ELL) {
      goto LABEL_92;
    }
LABEL_107:
    uint64_t v79 = v75[5];
    if (*(void *)(v79 + 8) != 0x8BD499FBD96FBB9ELL) {
      goto LABEL_109;
    }
    uint64_t v80 = *(float **)(v79 + 32);
LABEL_110:
    int v81 = v80[4] > 0.01 || !*((unsigned char *)v80 + 3) || *(unsigned __int8 *)v80 == 0;
    LODWORD(v109) = 1;
    uint64_t v82 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v63 + 824), 1u, &v109);
    LODWORD(v109) = 8;
    uint64_t v83 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v63 + 824), 8u, &v109);
    RenderableData = (float *)md::VKMRenderResourcesStore::getRenderableData(v63, *v49);
    BOOL v85 = *(unsigned char *)(v59 + 2) != 0;
    uint64_t result = geo::Intersect::encloses<float>(RenderableData, v33);
    if (v85 & ~v81)
    {
      uint64_t v14 = v98;
      if (result)
      {
        uint64_t v89 = *(void **)(a1 + 8);
        uint64_t v90 = HIDWORD(*v100);
        uint64_t v91 = (*v100 << 32) | 1;
        uint64_t v105 = (void (**)(void **))&unk_1EF522A60;
        uint64_t v106 = v91;
        int v107 = v90;
        uint64_t v112 = &v109;
        __n128 v108 = (void **)&v105;
        uint64_t v109 = &unk_1EF522A60;
        uint64_t v110 = v91;
        int v111 = v90;
        int v113 = 0;
        ecs2::Runtime::queueCommand(v89, (uint64_t)&v109);
        if (v113 != -1) {
          ((void (*)(char *, void **))off_1EF58F5D8[v113])(&v104, &v109);
        }
        int v113 = -1;
        if (v108 == (void **)&v105)
        {
          v105[4]((void **)&v105);
        }
        else if (v108)
        {
          (*((void (**)(void))*v108 + 5))();
        }
        uint64_t v82 = v83;
LABEL_130:
        uint64_t result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v82 + 24), *v99, *v99);
      }
    }
    else
    {
      uint64_t v14 = v98;
      if (result)
      {
        uint8x8_t v86 = *(void **)(a1 + 8);
        uint64_t v87 = HIDWORD(*v100);
        uint64_t v88 = (*v100 << 32) | 1;
        uint64_t v105 = (void (**)(void **))&unk_1EF5228B0;
        uint64_t v106 = v88;
        int v107 = v87;
        uint64_t v112 = &v109;
        __n128 v108 = (void **)&v105;
        uint64_t v109 = &unk_1EF5228B0;
        uint64_t v110 = v88;
        int v111 = v87;
        int v113 = 0;
        ecs2::Runtime::queueCommand(v86, (uint64_t)&v109);
        if (v113 != -1) {
          ((void (*)(char *, void **))off_1EF58F5D8[v113])(&v104, &v109);
        }
        int v113 = -1;
        if (v108 == (void **)&v105)
        {
          v105[4]((void **)&v105);
        }
        else if (v108)
        {
          (*((void (**)(void))*v108 + 5))();
        }
        goto LABEL_130;
      }
    }
    uint64_t v13 = v103;
    uint64_t v92 = *(void **)(v102[0] + 32);
    while (1)
    {
      int v103 = ++v13;
      if (v13 == v92) {
        break;
      }
      uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v102);
      if (result) {
        goto LABEL_26;
      }
    }
    uint64_t v13 = v92;
LABEL_26:
    uint64_t v18 = (void *)v6;
    uint64_t v19 = v97;
  }
  void *v100 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD15AF44EFDE875A7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD15AF44EFDE875A7;
    if (*(void *)&v1 <= 0xD15AF44EFDE875A7) {
      unint64_t v3 = 0xD15AF44EFDE875A7 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD15AF44EFDE875A7;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD15AF44EFDE875A7)
      {
        if (v5[2] == 0xD15AF44EFDE875A7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD15AF44EFDE875A7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD15AF44EFDE875A7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A191EEF0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(int8x8_t *a1)
{
  uint64_t v10 = 0x768C72EB9B71F7ADLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x768C72EB9B71F7ADLL;
    if (*(void *)&v1 <= 0x768C72EB9B71F7ADuLL) {
      uint64_t v3 = 0x768C72EB9B71F7ADuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x768C72EB9B71F7ADLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x768C72EB9B71F7ADLL)
      {
        if (v5[2] == 0x768C72EB9B71F7ADLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x768C72EB9B71F7ADLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x768C72EB9B71F7ADLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A191F160(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::WantsCulledSlices>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v3);
  uint64_t v8 = (void *)(v4 + 32);
  if (v5[8] - v5[7] < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v8 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v7 + 32);
  }
  uint64_t v58 = v8;
  uint64_t v59 = (void *)v4;
  uint64_t v60 = v5;
  uint64_t v61 = (void *)v6;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  int v62 = (void *)v7;
  uint64_t v63 = v10;
  uint64_t v57 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v58))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      uint64_t v63 = v11;
      if (v11 == v57) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v58);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  unint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v14 = (void *)result;
  while (v57 != v10)
  {
    void *v14 = *v10;
    unint64_t v16 = *v10;
    unint64_t v17 = *v10 >> 39;
    uint64_t v18 = v5[4];
    if (v17 < (v5[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v16) & 0x7F)), v22 = v5[7], v21 = v5[8], v20 < (v21 - v22) >> 3)
      && ((unint64_t v23 = HIDWORD(v16), v24 = v22 + 8 * v20, v24 != v21)
        ? (BOOL v25 = *(_DWORD *)(v24 + 4) == v23)
        : (BOOL v25 = 0),
          v25))
    {
      unint64_t v26 = (unint64_t *)(v5[10] + 8 * v20);
    }
    else
    {
      unint64_t v26 = (unint64_t *)v5[11];
    }
    uint64_t v27 = **(void **)(a1 + 8);
    uint64_t v28 = *(void **)v27;
    uint64_t v29 = *(void **)(v27 + 8);
    if (v28 != v29)
    {
      while (*v28 != 0x41D4E9297E100630)
      {
        v28 += 5;
        if (v28 == v29) {
          goto LABEL_33;
        }
      }
    }
    if (v28 == v29)
    {
LABEL_33:
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = v28[3];
      BOOL v30 = (std::__shared_weak_count *)v28[4];
      if (v30)
      {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    LODWORD(v69) = 7;
    uint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)(v31 + 824), 7u, &v69);
    uint64_t v33 = *(void **)(a1 + 8);
    uint64_t v34 = HIDWORD(*v14);
    uint64_t v35 = (*v14 << 32) | 1;
    int v65 = &off_1EF522A18;
    uint64_t v66 = v35;
    int v67 = v34;
    uint8x8_t v72 = &v69;
    uint64_t v68 = &v65;
    uint64_t v69 = &off_1EF522A18;
    uint64_t v70 = v35;
    int v71 = v34;
    int v73 = 0;
    ecs2::Runtime::queueCommand(v33, (uint64_t)&v69);
    if (v73 != -1) {
      ((void (*)(char *, uint64_t (***)()))off_1EF58F5D8[v73])(&v64, &v69);
    }
    int v73 = -1;
    if (v68 == &v65)
    {
      ((void (*)(uint64_t (***)()))v65[4])(&v65);
    }
    else if (v68)
    {
      (*v68)[5]();
    }
    unint64_t v36 = *(void **)(a1 + 8);
    uint64_t v37 = HIDWORD(*v14);
    uint64_t v38 = (*v14 << 32) | 1;
    int v65 = (uint64_t (**)())&unk_1EF525F88;
    uint64_t v66 = v38;
    int v67 = v37;
    uint8x8_t v72 = &v69;
    uint64_t v68 = &v65;
    uint64_t v69 = (uint64_t (**)())&unk_1EF525F88;
    uint64_t v70 = v38;
    int v71 = v37;
    int v73 = 0;
    ecs2::Runtime::queueCommand(v36, (uint64_t)&v69);
    if (v73 != -1) {
      ((void (*)(char *, uint64_t (***)()))off_1EF58F5D8[v73])(&v64, &v69);
    }
    int v73 = -1;
    if (v68 == &v65)
    {
      ((void (*)(uint64_t (***)()))v65[4])(&v65);
    }
    else if (v68)
    {
      (*v68)[5]();
    }
    unint64_t result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v32 + 24), *v26, *v26);
    uint64_t v10 = (void *)v58[4];
    BOOL v15 = v63 + 1;
    uint64_t v63 = v15;
    if (v15 != v10)
    {
      uint64_t v39 = v59[4];
      while (1)
      {
        unint64_t v40 = *((unsigned int *)v15 + 1);
        unint64_t v41 = v40 >> 7;
        if (v40 >> 7 < (v59[5] - v39) >> 3)
        {
          unint64_t result = *(void *)(v39 + 8 * v41);
          if (result)
          {
            uint64_t v42 = v40 & 0x7F;
            unint64_t result = *(unsigned __int16 *)(result + 2 * v42);
            uint64_t v44 = v59[7];
            uint64_t v43 = v59[8];
            if (result < (v43 - v44) >> 3)
            {
              unint64_t result = v44 + 8 * result;
              if (result != v43 && *(_DWORD *)(result + 4) == v40)
              {
                unint64_t result = v60[4];
                if (v41 < (uint64_t)(v60[5] - result) >> 3)
                {
                  unint64_t result = *(void *)(result + 8 * v41);
                  if (result)
                  {
                    unint64_t result = *(unsigned __int16 *)(result + 2 * v42);
                    uint64_t v47 = v60[7];
                    uint64_t v46 = v60[8];
                    if (result < (v46 - v47) >> 3)
                    {
                      unint64_t result = v47 + 8 * result;
                      if (result != v46 && *(_DWORD *)(result + 4) == v40)
                      {
                        unint64_t result = v61[4];
                        if (v41 < (uint64_t)(v61[5] - result) >> 3)
                        {
                          unint64_t result = *(void *)(result + 8 * v41);
                          if (result)
                          {
                            unint64_t result = *(unsigned __int16 *)(result + 2 * v42);
                            uint64_t v50 = v61[7];
                            uint64_t v49 = v61[8];
                            if (result < (v49 - v50) >> 3)
                            {
                              unint64_t result = v50 + 8 * result;
                              if (result != v49 && *(_DWORD *)(result + 4) == v40)
                              {
                                unint64_t result = v62[4];
                                if (v41 < (uint64_t)(v62[5] - result) >> 3)
                                {
                                  uint64_t v52 = *(void *)(result + 8 * v41);
                                  if (v52)
                                  {
                                    unint64_t v53 = *(unsigned __int16 *)(v52 + 2 * v42);
                                    unint64_t result = v62[7];
                                    uint64_t v54 = v62[8];
                                    if (v53 < (uint64_t)(v54 - result) >> 3)
                                    {
                                      unint64_t v55 = result + 8 * v53;
                                      unint64_t result = *(unsigned int *)(v55 + 4);
                                      if (result == v40 && v55 != v54) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v15 == v10)
        {
          BOOL v15 = v10;
          goto LABEL_15;
        }
      }
      uint64_t v10 = v15;
LABEL_15:
      uint64_t v63 = v15;
    }
  }
  void *v14 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::VisibilityGroupID>(int8x8_t *a1)
{
  uint64_t v10 = 0x45B31C2960E9BCB1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x45B31C2960E9BCB1;
    if (*(void *)&v1 <= 0x45B31C2960E9BCB1uLL) {
      uint64_t v3 = 0x45B31C2960E9BCB1uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x45B31C2960E9BCB1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x45B31C2960E9BCB1)
      {
        if (v5[2] == 0x45B31C2960E9BCB1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x45B31C2960E9BCB1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x45B31C2960E9BCB1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A191F9F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::WantsCulledSlices>(int8x8_t *a1)
{
  uint64_t v10 = 0x6CA90C12C415463ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6CA90C12C415463ALL;
    if (*(void *)&v1 <= 0x6CA90C12C415463AuLL) {
      uint64_t v3 = 0x6CA90C12C415463AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6CA90C12C415463ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6CA90C12C415463ALL)
      {
        if (v5[2] == 0x6CA90C12C415463ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6CA90C12C415463ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6CA90C12C415463ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A191FC68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(int8x8_t *a1)
{
  uint64_t v10 = 0x731F9AB6193E8641;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x731F9AB6193E8641;
    if (*(void *)&v1 <= 0x731F9AB6193E8641uLL) {
      uint64_t v3 = 0x731F9AB6193E8641uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x731F9AB6193E8641;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x731F9AB6193E8641)
      {
        if (v5[2] == 0x731F9AB6193E8641) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x731F9AB6193E8641) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x731F9AB6193E8641) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A191FED8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::BoundData>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v3);
  unint64_t v7 = (void *)v6;
  uint64_t v8 = (void *)(v4 + 32);
  if (v5[8] - v5[7] < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v8 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  char v64 = v8;
  int v65 = (void *)v4;
  uint64_t v66 = v5;
  int v67 = (void *)v6;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  uint64_t v68 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v64))
  {
    uint64_t v11 = v9 + 1;
    do
    {
      uint64_t v9 = v11;
      uint64_t v68 = v11;
      if (v11 == v10) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v64);
      uint64_t v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v13 = (void *)result;
  }
  else
  {
    uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      void *v13 = *v9;
      unint64_t v15 = *v9;
      uint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v5[4];
      if (v17 < (v5[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v5[7],
            uint64_t v21 = v5[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = v5[11];
        uint64_t v26 = v5[10] + 24 * v20;
      }
      else
      {
        uint64_t v25 = v5[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = (float *)v26;
      }
      uint64_t v28 = v7[4];
      if (v17 < (v7[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v7[7],
            uint64_t v31 = v7[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = (unint64_t *)(v7[10] + 8 * v30);
      }
      else
      {
        uint64_t v35 = (unint64_t *)v7[11];
      }
      uint64_t v36 = **(void **)(a1 + 8);
      uint64_t v37 = *(void **)v36;
      uint64_t v38 = *(void **)(v36 + 8);
      if (v37 != v38)
      {
        while (*v37 != 0x41D4E9297E100630)
        {
          v37 += 5;
          if (v37 == v38) {
            goto LABEL_42;
          }
        }
      }
      if (v37 == v38)
      {
LABEL_42:
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = v37[3];
        unint64_t v40 = (std::__shared_weak_count *)v37[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t result = md::VKMRenderResourcesStore::getRenderableData(v39, *v35);
      *(float *)(result + 256) = fminf(*v27, *(float *)(result + 256));
      *(float *)(result + 268) = fmaxf(*(float *)(result + 268), v27[3]);
      *(float *)(result + 260) = fminf(v27[1], *(float *)(result + 260));
      *(float *)(result + 272) = fmaxf(*(float *)(result + 272), v27[4]);
      *(float *)(result + 264) = fminf(v27[2], *(float *)(result + 264));
      *(float *)(result + 276) = fmaxf(*(float *)(result + 276), v27[5]);
      uint64_t v9 = (void *)v64[4];
      uint64_t v14 = v68 + 1;
      uint64_t v68 = v14;
      if (v14 != v9)
      {
        uint64_t v42 = v65[4];
        while (1)
        {
          unint64_t v43 = *((unsigned int *)v14 + 1);
          unint64_t v44 = v43 >> 7;
          if (v43 >> 7 < (v65[5] - v42) >> 3)
          {
            uint64_t v45 = *(void *)(v42 + 8 * v44);
            if (v45)
            {
              uint64_t v46 = v43 & 0x7F;
              unint64_t v47 = *(unsigned __int16 *)(v45 + 2 * v46);
              uint64_t v48 = v65[7];
              uint64_t result = v65[8];
              if (v47 < (result - v48) >> 3)
              {
                uint64_t v49 = v48 + 8 * v47;
                if (v49 != result && *(_DWORD *)(v49 + 4) == v43)
                {
                  uint64_t v51 = v66[4];
                  uint64_t result = v66[5] - v51;
                  if (v44 < result >> 3)
                  {
                    uint64_t v52 = *(void *)(v51 + 8 * v44);
                    if (v52)
                    {
                      unint64_t v53 = *(unsigned __int16 *)(v52 + 2 * v46);
                      uint64_t v54 = v66[7];
                      uint64_t result = v66[8];
                      if (v53 < (result - v54) >> 3)
                      {
                        uint64_t v55 = v54 + 8 * v53;
                        if (v55 != result && *(_DWORD *)(v55 + 4) == v43)
                        {
                          uint64_t v57 = v67[4];
                          uint64_t result = v67[5] - v57;
                          if (v44 < result >> 3)
                          {
                            uint64_t v58 = *(void *)(v57 + 8 * v44);
                            if (v58)
                            {
                              unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * v46);
                              uint64_t v61 = v67[7];
                              uint64_t v60 = v67[8];
                              uint64_t result = v60 - v61;
                              if (v59 < (v60 - v61) >> 3)
                              {
                                uint64_t v62 = v61 + 8 * v59;
                                if (*(_DWORD *)(v62 + 4) == v43 && v62 != v60) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v9)
          {
            uint64_t v14 = v9;
            goto LABEL_13;
          }
        }
        uint64_t v9 = v14;
LABEL_13:
        uint64_t v68 = v14;
      }
    }
    while (v10 != v9);
  }
  void *v13 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::BoundData>(int8x8_t *a1)
{
  uint64_t v10 = 0x2523AFF0E364AA00;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2523AFF0E364AA00;
    if (*(void *)&v1 <= 0x2523AFF0E364AA00uLL) {
      uint64_t v3 = 0x2523AFF0E364AA00uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2523AFF0E364AA00;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2523AFF0E364AA00)
      {
        if (v5[2] == 0x2523AFF0E364AA00) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2523AFF0E364AA00) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2523AFF0E364AA00) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1920568(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(int8x8_t *a1)
{
  uint64_t v10 = 0xA054AACDFDD6A6BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0xA054AACDFDD6A6BLL;
    if (*(void *)&v1 <= 0xA054AACDFDD6A6BuLL) {
      uint64_t v3 = 0xA054AACDFDD6A6BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0xA054AACDFDD6A6BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA054AACDFDD6A6BLL)
      {
        if (v5[2] == 0xA054AACDFDD6A6BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA054AACDFDD6A6BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA054AACDFDD6A6BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19207D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = *a2 + 32;
  if (!*a2) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v4 + 32;
  if (!v4) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v5 + 32;
  if (!v5) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v6 + 32;
  if (!v6) {
    uint64_t v12 = 0;
  }
  uint64_t result = v7 + 32;
  if (!v7) {
    uint64_t result = 0;
  }
  uint64_t v14 = v8 + 32;
  if (!v8) {
    uint64_t v14 = 0;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v10;
  }
  if (*(void *)(v11 + 32) - *(void *)(v11 + 24) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v11;
  }
  if (*(void *)(v12 + 32) - *(void *)(v12 + 24) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v12;
  }
  if (*(void *)(result + 32) - *(void *)(result + 24) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = result;
  }
  if (*(void *)(v14 + 32) - *(void *)(v14 + 24) < *(void *)(v9 + 32) - *(void *)(v9 + 24)) {
    uint64_t v9 = v14;
  }
  *a1 = v9;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  uint64_t v16 = *(void *)(v9 + 24);
  uint64_t v15 = *(void *)(v9 + 32);
  a1[8] = v16;
  if (v15 != v16)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v17 = v16 + 8;
      do
      {
        a1[8] = v17;
        if (v17 == v15) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(a1);
        v17 += 8;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v2);
  v98[0] = (uint64_t)v3;
  v98[1] = (uint64_t)v4;
  v98[2] = (uint64_t)v5;
  v98[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v96, v98);
  uint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    uint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] < v7[4] - v7[3]) {
    uint64_t v7 = v5 + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    uint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v97;
  if (v8 == v97)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v10 = (void *)result;
LABEL_97:
    void *v10 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v96[0];
    uint64_t v12 = (void *)v96[1];
    uint64_t v13 = (void *)v96[2];
    unint64_t v93 = (void *)v96[4];
    unint64_t v94 = (void *)v96[3];
    while (1)
    {
      void *v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 >= (v3[5] - v18) >> 3) {
        goto LABEL_19;
      }
      uint64_t v19 = *(void *)(v18 + 8 * v17);
      if (!v19) {
        goto LABEL_19;
      }
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F));
      uint64_t v22 = v3[7];
      uint64_t v21 = v3[8];
      if (v20 >= (v21 - v22) >> 3) {
        goto LABEL_19;
      }
      uint64_t v23 = v22 + 8 * v20;
      if (v23 != v21 && *(_DWORD *)(v23 + 4) == v16)
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
LABEL_19:
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      uint64_t v27 = v26 == v25 ? 0 : v26;
      if ((uint64_t v28 = v4[4], v17 < (v4[5] - v28) >> 3)
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      uint64_t v37 = v36 == v35 ? 0 : v36;
      if ((uint64_t v38 = v5[4], v17 < (v5[5] - v38) >> 3)
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 4 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      uint64_t v47 = v46 == v45 ? 0 : v46;
      if ((uint64_t v48 = v6[4], v17 < (v6[5] - v48) >> 3)
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((uint64_t v53 = v52 + 8 * v50, v53 != v51) ? (v54 = *(_DWORD *)(v53 + 4) == v16) : (v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57) {
        break;
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      uint64_t v14 = v9 + 1;
      uint64_t v97 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v94[4];
                          if (v63 < (v94[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v94[7];
                              uint64_t v81 = v94[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v93[4];
                                  if (v63 < (v93[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v93[7];
                                      uint64_t v88 = v93[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        uint64_t v97 = v14;
      }
      uint64_t v9 = v60;
      if (v8 == v60) {
        goto LABEL_97;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v92);
  }
  return result;
}

uint64_t gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x5EBA003AC7A96B8ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5EBA003AC7A96B8ALL;
    if (*(void *)&v1 <= 0x5EBA003AC7A96B8AuLL) {
      uint64_t v3 = 0x5EBA003AC7A96B8AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5EBA003AC7A96B8ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5EBA003AC7A96B8ALL)
      {
        if (v5[2] == 0x5EBA003AC7A96B8ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5EBA003AC7A96B8ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5EBA003AC7A96B8ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1920FE4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x70E01531993BB945;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x70E01531993BB945;
    if (*(void *)&v1 <= 0x70E01531993BB945uLL) {
      uint64_t v3 = 0x70E01531993BB945uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x70E01531993BB945;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x70E01531993BB945)
      {
        if (v5[2] == 0x70E01531993BB945) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x70E01531993BB945) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x70E01531993BB945) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1921254(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xA83B1A8F06D3B3DBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA83B1A8F06D3B3DBLL;
    if (*(void *)&v1 <= 0xA83B1A8F06D3B3DBLL) {
      unint64_t v3 = 0xA83B1A8F06D3B3DBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA83B1A8F06D3B3DBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA83B1A8F06D3B3DBLL)
      {
        if (v5[2] == 0xA83B1A8F06D3B3DBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA83B1A8F06D3B3DBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA83B1A8F06D3B3DBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19214C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MeshRenderableBounds>(int8x8_t *a1)
{
  uint64_t v10 = 0x6B3ACE485940A135;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6B3ACE485940A135;
    if (*(void *)&v1 <= 0x6B3ACE485940A135uLL) {
      uint64_t v3 = 0x6B3ACE485940A135uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6B3ACE485940A135;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6B3ACE485940A135)
      {
        if (v5[2] == 0x6B3ACE485940A135) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6B3ACE485940A135) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6B3ACE485940A135) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1921734(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::GeocentricBounds>(int8x8_t *a1)
{
  unint64_t v10 = 0xC2ED2352B044903BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC2ED2352B044903BLL;
    if (*(void *)&v1 <= 0xC2ED2352B044903BLL) {
      unint64_t v3 = 0xC2ED2352B044903BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC2ED2352B044903BLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC2ED2352B044903BLL)
      {
        if (v5[2] == 0xC2ED2352B044903BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC2ED2352B044903BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC2ED2352B044903BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19219A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PrimitiveType>(int8x8_t *a1)
{
  unint64_t v10 = 0x84C31A2C8E533C36;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x84C31A2C8E533C36;
    if (*(void *)&v1 <= 0x84C31A2C8E533C36) {
      unint64_t v3 = 0x84C31A2C8E533C36 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x84C31A2C8E533C36;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x84C31A2C8E533C36)
      {
        if (v5[2] == 0x84C31A2C8E533C36) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x84C31A2C8E533C36) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x84C31A2C8E533C36) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1921C14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IgnoreCulling>(int8x8_t *a1)
{
  uint64_t v10 = 0x50A14E0778169E99;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x50A14E0778169E99;
    if (*(void *)&v1 <= 0x50A14E0778169E99uLL) {
      uint64_t v3 = 0x50A14E0778169E99uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x50A14E0778169E99;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x50A14E0778169E99)
      {
        if (v5[2] == 0x50A14E0778169E99) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x50A14E0778169E99) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x50A14E0778169E99) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1921E84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MarketMask>(int8x8_t *a1)
{
  uint64_t v10 = 0x66C5B6134E34F45DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x66C5B6134E34F45DLL;
    if (*(void *)&v1 <= 0x66C5B6134E34F45DuLL) {
      uint64_t v3 = 0x66C5B6134E34F45DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x66C5B6134E34F45DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x66C5B6134E34F45DLL)
      {
        if (v5[2] == 0x66C5B6134E34F45DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x66C5B6134E34F45DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x66C5B6134E34F45DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19220F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::__map_value_compare<gss::StylFile::ChapterId,std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,std::less<gss::StylFile::ChapterId>,true>,geo::StdAllocator<std::__value_type<gss::StylFile::ChapterId,gss::StylChapter>,gss::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(void *)(a2 + 72);
    if (v4)
    {
      *(void *)(a2 + 80) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 96) + 40))(*(void *)(a2 + 96), v4, *(void *)(a2 + 88) - v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B200;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AC60;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A3A8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A288;
  a2[1] = *(void *)(result + 8);
  return result;
}

void sub_1A19222D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::MetalSwapchainDrawableRef::present(ggl::MetalSwapchainDrawableRef *this)
{
  uint64_t v1 = *((void *)this + 1);
  int v2 = 3;
  atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 132), (unsigned int *)&v2, 5u);
  if (v2 == 3)
  {
    std::mutex::lock((std::mutex *)v1);
    [**(id **)(v1 + 112) present];
    ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(*(void *)(v1 + 64) + 80), *(const Texture **)(v1 + 96), 0);
    std::mutex::unlock((std::mutex *)v1);
    atomic_exchange((atomic_uint *volatile)(v1 + 132), 6u);
  }
}

void sub_1A1922364(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t md::MapEngineFrameService::prepareForRender(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[11];
  if (a2 >= (unint64_t)((a1[12] - v2) >> 3)) {
    goto LABEL_30;
  }
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  if (!v3) {
    goto LABEL_31;
  }
  if (HIDWORD(a2) != HIDWORD(v3)) {
    goto LABEL_30;
  }
  uint64_t v6 = a1[14] + 8 * v3;
  if (v6 == a1[15]) {
    goto LABEL_30;
  }
  uint64_t v7 = *(void *)v6;
  *(void *)(v7 + 120) = *(void *)(*(void *)v6 + 120) + 1;
  uint64_t v8 = *(uint64_t **)(a1[1] + 8);
  uint64_t v9 = *(uint64_t **)a1[1];
  if (*(unsigned char *)v7)
  {
    if (v9 != v8 && *v9 != 0xB05F868A6300FD6ELL)
    {
      uint64_t v10 = v9 + 5;
      do
      {
        uint64_t v11 = *v10;
        v10 += 5;
      }
      while (v11 != 0xB05F868A6300FD6ELL);
      uint64_t v9 = v10 - 5;
    }
    uint64_t v12 = v9[3];
    uint64_t v13 = (std::__shared_weak_count *)v9[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
    if (v14) {
      *(void *)(v7 + 56) = v14;
    }
    goto LABEL_49;
  }
  if (v9 != v8 && *v9 != 0xC5B557B9C9754C35)
  {
    unint64_t v15 = v9 + 5;
    do
    {
      uint64_t v16 = *v15;
      v15 += 5;
    }
    while (v16 != 0xC5B557B9C9754C35);
    uint64_t v9 = v15 - 5;
  }
  uint64_t v18 = v9[3];
  unint64_t v17 = (std::__shared_weak_count *)v9[4];
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  uint64_t v19 = (**(uint64_t (***)(uint64_t))v18)(v18);
  if (!v19)
  {
LABEL_30:
    uint64_t v3 = 0;
LABEL_31:
    unint64_t v25 = 0;
    return v25 | v3;
  }
  uint64_t v20 = v19;
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 8))(v18, v19);
  uint64_t v22 = a1[1];
  uint64_t v23 = *(void **)v22;
  BOOL v24 = *(void **)(v22 + 8);
  if (v23 != v24)
  {
    while (*v23 != 0xB05F868A6300FD6ELL)
    {
      v23 += 5;
      if (v23 == v24) {
        goto LABEL_37;
      }
    }
  }
  if (v23 == v24)
  {
LABEL_37:
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = v23[3];
    uint64_t v28 = (std::__shared_weak_count *)v23[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)v21 + 16))(&v36, v21, 0);
  long long v37 = v36;
  long long v36 = 0uLL;
  uint64_t v29 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v27 + 16))(v27, &v37);
  uint64_t v31 = v30;
  uint64_t v32 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  if (*((void *)&v37 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v33 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (v29)
  {
    *(void *)(v7 + 40) = v20;
    *(void *)(v7 + 56) = v29;
    *(void *)(v7 + 72) = v31;
    goto LABEL_47;
  }
  if (*(void *)(v7 + 56))
  {
LABEL_47:
    if (*(unsigned char *)(v7 + 24)) {
      md::MapEngineFrameService::makeDrawableReady((uint64_t)a1, a2);
    }
  }
LABEL_49:
  uint64_t v34 = *(void *)(v7 + 56);
  unint64_t v25 = v34 & 0xFFFFFFFFFFFFFF00;
  BOOL v35 = v34 == 0;
  if (v34) {
    uint64_t v3 = *(void *)(v7 + 56);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v35) {
    unint64_t v25 = 0;
  }
  return v25 | v3;
}

void sub_1A19227C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void md::MapEngineFrameService::prepareForEncode(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = a1[11];
  if (a2 >= (unint64_t)((a1[12] - v4) >> 3)
    || ((uint64_t v6 = *(void *)(v4 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (uint64_t v10 = a1[14] + 8 * v6, v10 == a1[15])))
  {
    LOBYTE(v8) = 0;
LABEL_7:
    *a3 = 0;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)v10;
  *(void *)(v11 + 120) = *(void *)(*(void *)v10 + 120) + 1;
  uint64_t v8 = *(void *)(v11 + 56);
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v12 = a1[1];
  uint64_t v13 = *(void **)v12;
  uint64_t v14 = *(void **)(v12 + 8);
  if (v13 != v14)
  {
    while (*v13 != 0x6AA8CA9CFB198BBFLL)
    {
      v13 += 5;
      if (v13 == v14) {
        goto LABEL_19;
      }
    }
  }
  if (v13 == v14)
  {
LABEL_19:
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = v13[3];
    uint64_t v16 = (std::__shared_weak_count *)v13[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  *(void *)(v11 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  (*(void (**)(uint64_t, double))(*(void *)v15 + 24))(v15, *(double *)(v11 + 16));
  if (*(unsigned char *)v11)
  {
    uint64_t v17 = *(void *)(v11 + 56);
    uint64_t v18 = *(Texture **)(v17 + 184);
    if (!v18) {
      uint64_t v18 = *(Texture **)(v17 + 88);
    }
    ggl::RenderQueue::addTextureToSynchronize(*(void *)(v11 + 64), v18);
    uint64_t v19 = a1[1];
    uint64_t v20 = *(void **)v19;
    uint64_t v21 = *(void **)(v19 + 8);
    if (v20 != v21)
    {
      while (*v20 != 0x15CDDE628588B5E5)
      {
        v20 += 5;
        if (v20 == v21) {
          goto LABEL_38;
        }
      }
    }
    if (v20 != v21)
    {
      uint64_t v22 = v20[3];
      uint64_t v23 = (std::__shared_weak_count *)v20[4];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v22) {
        (*(void (**)(uint64_t, void, void))(*(void *)v22 + 16))(v22, *(void *)(v11 + 64), *(void *)(v11 + 56));
      }
    }
  }
  else
  {
    if (*(void *)(v11 + 72)) {
      operator new();
    }
    if (*(void *)(v11 + 40) && !*(unsigned char *)(v11 + 24)) {
      md::MapEngineFrameService::makeDrawableReady((uint64_t)a1, a2);
    }
  }
LABEL_38:
  *(_OWORD *)a3 = *(_OWORD *)(v11 + 56);
  LOBYTE(v8) = 1;
LABEL_8:
  a3[16] = v8;
}

void md::MapEngine::_postRender(id *this, double a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [this[105] size];
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = (void *)MEMORY[0x1A6239C40](v4);
  uint64_t v10 = *((void *)this[1] + 1);
  uint64_t v11 = (double *)operator new(0x28uLL);
  *(void *)uint64_t v11 = &unk_1EF579578;
  *((void *)v11 + 1) = this;
  v11[2] = a2;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v8;
  uint64_t v17 = v11;
  geo::TaskQueue::barrierSync(v10, v16);
  if (v17 == (double *)v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v12 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v13 = v12;
  os_signpost_id_t v14 = (os_signpost_id_t)this[152];
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    __int16 v15 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v13, OS_SIGNPOST_INTERVAL_END, v14, "LayoutScene", "", (uint8_t *)&v15, 2u);
  }
}

void sub_1A1922D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::MapEngineCompatabilityServiceImpl::postRender(id **this, double a2)
{
}

uint64_t md::MapEngineFrameService::makeDrawableReady(uint64_t result, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(result + 88);
  if (a2 < (unint64_t)((*(void *)(result + 96) - v2) >> 3))
  {
    uint64_t v4 = *(void *)(v2 + 8 * a2);
    if (v4 && HIDWORD(a2) == HIDWORD(v4))
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)(result + 112) + 8 * v4;
      if (v7 != *(void *)(result + 120))
      {
        uint64_t v8 = *(void *)v7;
        ++*(void *)(*(void *)v7 + 120);
        uint64_t v9 = *(void *)(result + 8);
        uint64_t v10 = *(void **)v9;
        uint64_t v11 = *(void **)(v9 + 8);
        if (v10 != v11)
        {
          while (*v10 != 0xC5B557B9C9754C35)
          {
            v10 += 5;
            if (v10 == v11) {
              goto LABEL_16;
            }
          }
        }
        if (v10 == v11)
        {
LABEL_16:
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = v10[3];
          uint64_t v12 = (std::__shared_weak_count *)v10[4];
          if (v12)
          {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        uint64_t v14 = *(void *)(v6 + 8);
        __int16 v15 = *(void **)v14;
        uint64_t v16 = *(void **)(v14 + 8);
        if (v15 != v16)
        {
          while (*v15 != 0xCFC5133F599B8248)
          {
            v15 += 5;
            if (v15 == v16) {
              goto LABEL_25;
            }
          }
        }
        if (v15 == v16)
        {
LABEL_25:
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = v15[3];
          uint64_t v18 = (std::__shared_weak_count *)v15[4];
          if (v18)
          {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 8))(v13, *(void *)(v8 + 40));
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
        *(_WORD *)(v8 + 48) = result | 0x100;
        if ((result - 1) < 2)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v20 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Failed to acquire drawable, rendering to temporary texture", buf, 2u);
          }

          (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v19 + 16))(&v25, v19, 0);
          operator new();
        }
        if (!result)
        {
          uint64_t v21 = *(char **)(v8 + 96);
          uint64_t v22 = *(char **)(v8 + 104);
          uint64_t v23 = v8 + 96;
          if (v21 != v22)
          {
            while (*v21 != 1)
            {
              v21 += 16;
              if (v21 == v22) {
                goto LABEL_38;
              }
            }
          }
          if (v21 == v22)
          {
LABEL_38:
            buf[0] = 1;
            uint64_t v27 = 0;
            uint64_t v21 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v23, buf);
          }
          uint64_t v24 = *((void *)v21 + 1);
          *(void *)buf = &unk_1EF51E608;
          uint64_t v27 = a2;
          uint64_t v28 = v6;
          uint64_t v29 = buf;
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v17 + 48))(v17, v24, buf);
          uint64_t result = (uint64_t)v29;
          if (v29 == buf)
          {
            return (*(uint64_t (**)(uint8_t *))(*(void *)buf + 32))(buf);
          }
          else if (v29)
          {
            return (*(uint64_t (**)(void))(*(void *)v29 + 40))();
          }
        }
      }
    }
  }
  return result;
}

void sub_1A1923430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A1923444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MDDisplayLayerSwapchainProvider::resolve(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 200);
  if (a2 < (unint64_t)((*(void *)(a1 + 208) - v5) >> 3)
    && (uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0
    && HIDWORD(a2) == HIDWORD(v6)
    && (uint64_t v7 = (uint64_t *)(*(void *)(a1 + 224) + 16 * v6), v7 != *(uint64_t **)(a1 + 232)))
  {
    uint64_t v8 = *v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v4);
  return v8;
}

void ecs2::Graph::addTask(gdc::tf::TaskflowBuilder **this, const ecs2::UtlityTaskDescriptor *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = gdc::tf::TaskflowBuilder::placeholder(this[6]);
  if (*((char *)a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else {
    std::string v6 = *(std::string *)((char *)a2 + 40);
  }
  uint64_t v5 = (void **)(v4 + 72);
  if (*(char *)(v4 + 95) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
  *(void *)(v4 + 88) = *((void *)&v6.__r_.__value_.__l + 2);
  gdc::Registry::create(this[1]);
}

uint64_t gdc::Registry::storage<ecs2::TaskHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x635AB0F10A15F363;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x635AB0F10A15F363;
    if (*(void *)&v1 <= 0x635AB0F10A15F363uLL) {
      uint64_t v3 = 0x635AB0F10A15F363uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x635AB0F10A15F363;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x635AB0F10A15F363)
      {
        if (v5[2] == 0x635AB0F10A15F363) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x635AB0F10A15F363) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x635AB0F10A15F363) {
    goto LABEL_11;
  }
  return v5[3];
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,gdc::tf::TaskData::Static,gdc::tf::TaskData::StaticWithContext,gdc::tf::TaskData::StaticModule,gdc::tf::TaskData::DynamicModule,gdc::tf::TaskData::ModuleFactory>>::__assign_alt[abi:nn180100]<2ul,gdc::tf::TaskData::StaticWithContext,gdc::tf::TaskData::StaticWithContext>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[16];
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      uint64_t result = (unsigned int *)*((void *)a2 + 3);
      *((void *)a2 + 3) = 0;
      if (result == a2)
      {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)a2 + 32))(a2);
        uint64_t v7 = *(void *)(a3 + 24);
        if (v7)
        {
LABEL_7:
          if (v7 == a3)
          {
            *((void *)a2 + 3) = a2;
            uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a3 + 24) + 24);
            return (unsigned int *)v9();
          }
          else
          {
            *((void *)a2 + 3) = v7;
            *(void *)(a3 + 24) = 0;
          }
          return result;
        }
      }
      else
      {
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        uint64_t v7 = *(void *)(a3 + 24);
        if (v7) {
          goto LABEL_7;
        }
      }
      *((void *)a2 + 3) = 0;
      return result;
    }
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))*(&off_1EF5915F0 + v5))(&v10, result);
  }
  v4[16] = -1;
  uint64_t v8 = *(void *)(a3 + 24);
  if (v8)
  {
    if (v8 == a3)
    {
      *((void *)v4 + 3) = v4;
      uint64_t result = (unsigned int *)(*(uint64_t (**)(void, unsigned int *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v4);
    }
    else
    {
      *((void *)v4 + 3) = v8;
      *(void *)(a3 + 24) = 0;
    }
  }
  else
  {
    *((void *)v4 + 3) = 0;
  }
  v4[16] = 2;
  return result;
}

uint64_t std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF519D30;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t gdc::tf::TaskflowBuilder::placeholder(gdc::tf::TaskflowBuilder *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3;
  uint64_t v4 = *(void *)(v2 + 40);
  if (!v4)
  {
    geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(*((uint64_t ***)this + 3));
    uint64_t v4 = *(void *)(v2 + 40);
  }
  *(void *)(v2 + 40) = *(void *)v4;
  *(_DWORD *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 95) = 0;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 96) = v3;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  uint64_t v6 = (void *)*((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(unsigned char **)this;
    uint64_t v9 = (uint64_t)v6 - *(void *)this;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v5 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    __int16 v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    void *v15 = v4;
    uint64_t v7 = v15 + 1;
    if (v6 == (void *)v8)
    {
      uint64_t v8 = v6;
    }
    else
    {
      unint64_t v17 = (char *)v6 - v8 - 8;
      if (v17 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v6 - v14 - v9) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = (long long *)(v6 - 2);
      uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      v6 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v23 = *--v6;
          *--__int16 v15 = v23;
        }
        while (v6 != (void *)v8);
        uint64_t v8 = *(unsigned char **)this;
      }
    }
    *(void *)this = v15;
    *((void *)this + 1) = v7;
    *((void *)this + 2) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  *((void *)this + 1) = v7;
  uint64_t v24 = *(void **)this;
  if (*(void **)this != v7)
  {
    while (*(void *)(*v24 + 96) != *(void *)(*(v7 - 1) + 96))
    {
      if (++v24 == v7) {
        return *v7;
      }
    }
    uint64_t v7 = v24;
  }
  return *v7;
}

void gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::emplace(void *a1, uint64_t a2, void *a3)
{
  uint64_t v38 = a2;
  unint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v38);
  if (v6)
  {
    unint64_t v11 = a1[11];
    unint64_t v10 = a1[12];
    if (v11 >= v10)
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (uint64_t)(v11 - v14) >> 5;
      if ((unint64_t)(v15 + 1) >> 59) {
        goto LABEL_61;
      }
      uint64_t v16 = v10 - v14;
      uint64_t v17 = v16 >> 4;
      if (v16 >> 4 <= (unint64_t)(v15 + 1)) {
        uint64_t v17 = v15 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v23 = &v19[32 * v15];
      uint64_t v24 = (void *)a3[3];
      if (v24)
      {
        if (v24 == a3)
        {
          *((void *)v23 + 3) = v23;
          (*(void (**)(void *, char *))(*a3 + 24))(a3, v23);
        }
        else
        {
          *((void *)v23 + 3) = (*(uint64_t (**)(void *))(*v24 + 16))(v24);
        }
      }
      else
      {
        *((void *)v23 + 3) = 0;
      }
      uint64_t v25 = &v19[32 * v18];
      unint64_t v13 = v23 + 32;
      uint64_t v27 = (char *)a1[10];
      uint64_t v26 = (char *)a1[11];
      if (v26 == v27)
      {
        a1[10] = v23;
        a1[11] = v13;
        a1[12] = v25;
      }
      else
      {
        do
        {
          uint64_t v28 = v23;
          v23 -= 32;
          uint64_t v29 = v26 - 32;
          uint64_t v30 = (char *)*((void *)v26 - 1);
          if (v30)
          {
            if (v29 == v30)
            {
              *((void *)v28 - 1) = v23;
              (*(void (**)(void, char *))(**((void **)v26 - 1) + 24))(*((void *)v26 - 1), v23);
            }
            else
            {
              *((void *)v28 - 1) = v30;
              *((void *)v26 - 1) = 0;
            }
          }
          else
          {
            *((void *)v28 - 1) = 0;
          }
          v26 -= 32;
        }
        while (v29 != v27);
        uint64_t v26 = (char *)a1[10];
        uint64_t v31 = (char *)a1[11];
        a1[10] = v23;
        a1[11] = v13;
        a1[12] = v25;
        if (v31 != v26)
        {
          uint64_t v32 = v31 - 32;
          uint64_t v33 = v31 - 32;
          do
          {
            BOOL v35 = (char *)*((void *)v33 + 3);
            if (v33 == v35)
            {
              (*(void (**)(char *))(*(void *)v33 + 32))(v33);
            }
            else if (v35)
            {
              (*(void (**)(char *))(*(void *)v35 + 40))(v35);
            }
            v32 -= 32;
            BOOL v34 = v33 == v26;
            v33 -= 32;
          }
          while (!v34);
        }
      }
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      uint64_t v12 = (void *)a3[3];
      if (v12)
      {
        if (v12 == a3)
        {
          *(void *)(v11 + 24) = v11;
          (*(void (**)(void, unint64_t))(*(void *)a3[3] + 24))(a3[3], v11);
        }
        else
        {
          *(void *)(v11 + 24) = (*(uint64_t (**)(void *))(*v12 + 16))(v12);
        }
        unint64_t v13 = (char *)(v11 + 32);
      }
      else
      {
        *(void *)(v11 + 24) = 0;
        unint64_t v13 = (char *)(v11 + 32);
      }
    }
    a1[11] = v13;
    uint64_t v20 = a1[31];
    goto LABEL_56;
  }
  uint64_t v7 = (void *)(a1[10] + 4 * ((void)v5 - a1[7]));
  uint64_t v8 = (void *)v7[3];
  void v7[3] = 0;
  if (v8 != v7)
  {
    if (v8) {
      (*(void (**)(void *))(*v8 + 40))(v8);
    }
    uint64_t v9 = (void *)a3[3];
    if (v9) {
      goto LABEL_6;
    }
LABEL_23:
    void v7[3] = 0;
    goto LABEL_25;
  }
  (*(void (**)(void *))(*v7 + 32))(v7);
  uint64_t v9 = (void *)a3[3];
  if (!v9) {
    goto LABEL_23;
  }
LABEL_6:
  if (v9 == a3)
  {
    void v7[3] = v7;
    (*(void (**)(void, void *))(*(void *)a3[3] + 24))(a3[3], v7);
  }
  else
  {
    void v7[3] = v9;
    a3[3] = 0;
  }
LABEL_25:
  uint64_t v20 = a1[31];
  if (v7 != (void *)a1[11])
  {
    uint64_t v21 = (void *)a1[16];
    if (v21)
    {
      while (1)
      {
        unint64_t v40 = &v38;
        uint64_t v41 = 1;
        uint64_t v39 = v20;
        uint64_t v22 = v21[6];
        if (!v22) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v39, &v40);
        uint64_t v21 = (void *)*v21;
        if (!v21) {
          return;
        }
      }
LABEL_60:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_61:
      abort();
    }
    return;
  }
LABEL_56:
  long long v36 = (void *)a1[22];
  if (v36)
  {
    while (1)
    {
      unint64_t v40 = &v38;
      uint64_t v41 = 1;
      uint64_t v39 = v20;
      uint64_t v37 = v36[6];
      if (!v37) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v37 + 48))(v37, &v39, &v40);
      long long v36 = (void *)*v36;
      if (!v36) {
        return;
      }
    }
    goto LABEL_60;
  }
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A090;
  a2[1] = *(void *)(result + 8);
  return result;
}

void md::MapEngineCallbackGraphService::addTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  uint64_t v7 = *(void *)(a1 + 248);
  if (a2 >= (unint64_t)((*(void *)(a1 + 256) - v7) >> 3)
    || ((uint64_t v8 = *(void *)(v7 + 8 * a2)) != 0 ? (v9 = HIDWORD(a2) == HIDWORD(v8)) : (v9 = 0),
        !v9 || (uint64_t v10 = *(void *)(a1 + 272) + 16 * v8, v10 == *(void *)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v6);
  }
  else
  {
    uint64_t v12 = *(atomic_uint **)v10;
    unint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = v11;
    std::__shared_mutex_base::unlock_shared(v6);
    uint64_t v13 = *(void *)(*(void *)v12 + 8);
    uint64_t v14 = *(void *)(v13 + 24);
    uint64_t v16 = *(unsigned char **)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v17 = *(void *)(v14 + 40);
    if (!v17)
    {
      geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(*(uint64_t ***)(v13 + 24));
      uint64_t v17 = *(void *)(v14 + 40);
    }
    uint64_t v18 = (v15 - (uint64_t)v16) >> 3;
    *(void *)(v14 + 40) = *(void *)v17;
    uint64_t v19 = *(void *)(a3 + 24);
    if (v19)
    {
      if (v19 == a3)
      {
        *(void *)(v17 + 24) = v17;
        (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v17);
      }
      else
      {
        *(void *)(v17 + 24) = v19;
        *(void *)(a3 + 24) = 0;
      }
    }
    else
    {
      *(void *)(v17 + 24) = 0;
    }
    *(_DWORD *)(v17 + 64) = 1;
    *(unsigned char *)(v17 + 95) = 0;
    *(unsigned char *)(v17 + 72) = 0;
    *(void *)(v17 + 96) = v18;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 136) = 0u;
    uint64_t v21 = *(void **)(v13 + 8);
    unint64_t v20 = *(void *)(v13 + 16);
    if ((unint64_t)v21 >= v20)
    {
      uint64_t v23 = *(unsigned char **)v13;
      uint64_t v24 = (uint64_t)v21 - *(void *)v13;
      uint64_t v25 = v24 >> 3;
      unint64_t v26 = (v24 >> 3) + 1;
      if (v26 >> 61) {
        abort();
      }
      uint64_t v27 = v20 - (void)v23;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v29 = operator new(8 * v28);
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = &v29[8 * v25];
      uint64_t v31 = &v29[8 * v28];
      *uint64_t v30 = v17;
      uint64_t v22 = v30 + 1;
      if (v21 == (void *)v23)
      {
        uint64_t v23 = v21;
      }
      else
      {
        unint64_t v32 = (char *)v21 - v23 - 8;
        if (v32 < 0x58) {
          goto LABEL_52;
        }
        if ((unint64_t)((char *)v21 - v29 - v24) < 0x20) {
          goto LABEL_52;
        }
        uint64_t v33 = (v32 >> 3) + 1;
        BOOL v34 = &v29[8 * v25 - 16];
        BOOL v35 = (long long *)(v21 - 2);
        uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *BOOL v34 = v37;
          v34 -= 2;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v30 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
        v21 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
        if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            uint64_t v38 = *--v21;
            *--uint64_t v30 = v38;
          }
          while (v21 != (void *)v23);
          uint64_t v23 = *(unsigned char **)v13;
        }
      }
      *(void *)uint64_t v13 = v30;
      *(void *)(v13 + 8) = v22;
      *(void *)(v13 + 16) = v31;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      void *v21 = v17;
      uint64_t v22 = v21 + 1;
    }
    *(void *)(v13 + 8) = v22;
    atomic_fetch_add(v12 + 2, 1u);
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1A1924598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(uint64_t **a1)
{
  uint64_t result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  uint64_t v3 = result;
  unint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        char v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if ((unint64_t)result >= v7) {
          break;
        }
        uint64_t v4 = *v6;
        unint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= (unint64_t)result) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        unint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    char v6 = a1 + 1;
LABEL_8:
    uint64_t v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    uint64_t *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    void *v5 = v8;
    BOOL v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    else
    {
      uint64_t v10 = v8;
    }
    uint64_t result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  unint64_t v11 = a1[5];
  uint64_t v12 = 152 * (void)a1[3] - 152;
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = &v3[v12];
    uint64_t v14 = &v3[v12];
    do
    {
      *(void *)uint64_t v14 = v11;
      v14 -= 152;
      unint64_t v11 = (uint64_t *)v13;
      uint64_t v13 = v14;
    }
    while (v14 >= v3);
    unint64_t v11 = (uint64_t *)(v14 + 152);
  }
  a1[5] = v11;
  return result;
}

__n128 std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51E608;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t ggl::MetalSwapchainDrawableRef::makeReady(ggl::MetalSwapchainDrawableRef *this)
{
  int v2 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 1);
  atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 132), (unsigned int *)&v2, 2u);
  if (v2)
  {
    if (v2 == 4)
    {
      if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_53121);
      }
      uint64_t v10 = GEOGetGeoGLMetalSwapchainLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315650;
        uint64_t v14 = "false";
        __int16 v15 = 2080;
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchainDrawable.mm";
        __int16 v17 = 1024;
        int v18 = 115;
        _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_ERROR, "Failed to make drawable ready: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v13, 0x1Cu);
      }
      return 2;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    id v3 = *(id *)(*(void *)(v1 + 80) + 16);
    [v3 drawableSize];
    uint64_t v6 = *(void *)(v1 + 96);
    LODWORD(v7) = *(_DWORD *)(v6 + 80);
    if (v4 == (double)v7 || (LODWORD(v4) = *(_DWORD *)(v6 + 84), v5 == (double)*(unint64_t *)&v4))
    {
      unint64_t v11 = [v3 nextDrawable];
      if (v11)
      {
        std::mutex::lock((std::mutex *)v1);
        ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(*(void *)(v1 + 64) + 80), *(const Texture **)(v1 + 96), (void *)[v11 texture]);
        operator new();
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v1 + 136), 1u) < 0xB)
      {
        atomic_exchange((atomic_uint *volatile)(v1 + 132), 0);
        uint64_t v9 = 1;
      }
      else
      {
        atomic_exchange((atomic_uint *volatile)(v1 + 132), 4u);
        uint64_t v9 = 2;
      }
    }
    else
    {
      atomic_exchange((atomic_uint *volatile)(v1 + 132), 4u);
      if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_53121);
      }
      uint64_t v8 = GEOGetGeoGLMetalSwapchainLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315650;
        uint64_t v14 = "false";
        __int16 v15 = 2080;
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchainDrawable.mm";
        __int16 v17 = 1024;
        int v18 = 128;
        _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_ERROR, "Mismatching texture size: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v13, 0x1Cu);
      }
      uint64_t v9 = 2;
    }
  }
  return v9;
}

void sub_1A1924A44(_Unwind_Exception *a1)
{
  double v5 = v4;

  MEMORY[0x1A6239270](v5, 0x80C40B8603338);
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

void ggl::MetalResourceManager::updateTextureWithResource(ggl::MetalResourceManager *this, const Texture *a2, void *a3)
{
  double v5 = a3;
  uint64_t v6 = (ggl::MetalTextureResource *)*((void *)a2 + 3);
  if (v6) {
    goto LABEL_12;
  }
  {
    operator new();
  }
  uint64_t v6 = (ggl::MetalTextureResource *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                                         + 16))(ggl::Allocator::instance(void)::alloc, 136, 8);
  ggl::MetalTextureResource::MetalTextureResource(v6);
  if (this)
  {
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 1);
      uint64_t v9 = std::__shared_weak_count::lock(v7);
      if (v9) {
        goto LABEL_8;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
LABEL_8:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *((void *)a2 + 1) = v8;
  *((void *)a2 + 2) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *((void *)a2 + 3) = v6;
  ++*((_DWORD *)a2 + 8);
LABEL_12:
  unint64_t v11 = (void **)*((void *)v6 + 4);
  uint64_t v12 = *v11;
  *unint64_t v11 = v5;
}

void sub_1A1924C24(ggl::Allocator *a1)
{
  uint64_t v4 = ggl::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v2, 136);

  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::MapEngineCompatabilityServiceImpl::produceRenderQueue(md::MapEngineCompatabilityServiceImpl *this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 1);
  uint64_t v52 = *(void *)(v1 + 1144);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 1152);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(v1 + 1224);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 1232);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v1 + 1376);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 1384);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(v1 + 1192);
  uint64_t v49 = v3;
  uint64_t v51 = v2;
  uint64_t v47 = v5;
  if (v7) {
    int v8 = *(unsigned __int8 *)(v7 + 48);
  }
  else {
    int v8 = -1;
  }
  uint64_t v9 = *(void *)(v1 + 1360);
  *(_DWORD *)(v9 + 4) = v8;
  *(_DWORD *)(v9 + 8) = *(void *)(v1 + 1200);
  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 1368);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = v6;
  BOOL v54 = v4;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v11 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v12 = v11;
  os_signpost_id_t v13 = *(void *)(v1 + 1216);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v13, "RenderLayout", "", buf, 2u);
  }

  uint64_t v14 = *(void *)(*(void *)(v1 + 872) + 24);
  __int16 v15 = *(void **)(v14 + 8);
  *(void *)buf = &unk_1EF579218;
  uint64_t v59 = v14;
  uint64_t v60 = buf;
  md::FrameGraph::visitPasses(v15, (uint64_t)buf);
  if (v60 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
  }
  else if (v60)
  {
    (*(void (**)(void))(*(void *)v60 + 40))();
  }
  uint64_t v16 = *(void *)(v14 + 16);
  __int16 v17 = +[VKDebugSettings sharedSettings];
  *(unsigned char *)(v16 + 280) = [v17 debugCaptureNextGPUFrame];

  int v18 = +[VKDebugSettings sharedSettings];
  uint64_t v19 = [v18 debugGPUFrameCaptureURL];
  if (v19)
  {
    unint64_t v20 = +[VKDebugSettings sharedSettings];
    id v21 = [v20 debugGPUFrameCaptureURL];
    uint64_t v22 = (const char *)[v21 UTF8String];
  }
  else
  {
    uint64_t v22 = "";
  }

  uint64_t v23 = *(void *)(v14 + 16);
  size_t v24 = strlen(v22);
  if (v24 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    p_dst = (long long *)operator new(v27 + 1);
    *((void *)&__dst + 1) = v25;
    int64_t v56 = v28 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_31;
  }
  HIBYTE(v56) = v24;
  p_dst = &__dst;
  if (v24) {
LABEL_31:
  }
    memmove(p_dst, v22, v25);
  *((unsigned char *)p_dst + v25) = 0;
  uint64_t v29 = (void **)(v23 + 288);
  char v30 = HIBYTE(v56);
  if ((*(char *)(v23 + 311) & 0x80000000) == 0)
  {
    if ((v56 & 0x8000000000000000) == 0)
    {
      *(_OWORD *)uint64_t v29 = __dst;
      *(void *)(v23 + 304) = v56;
      goto LABEL_45;
    }
    std::string::__assign_no_alias<true>(v29, (void *)__dst, *((size_t *)&__dst + 1));
    goto LABEL_44;
  }
  if (v56 >= 0) {
    uint64_t v31 = &__dst;
  }
  else {
    uint64_t v31 = (long long *)__dst;
  }
  if (v56 >= 0) {
    size_t v32 = HIBYTE(v56);
  }
  else {
    size_t v32 = *((void *)&__dst + 1);
  }
  std::string::__assign_no_alias<false>(v29, v31, v32);
  if (v30 < 0) {
LABEL_44:
  }
    operator delete((void *)__dst);
LABEL_45:
  uint64_t v33 = +[VKDebugSettings sharedSettings];
  [v33 setDebugCaptureNextGPUFrame:0];

  uint64_t v34 = *(void *)(v14 + 16);
  uint64_t v35 = *(void *)(md::LayoutContext::frameState(*(md::LayoutContext **)(v1 + 1088)) + 624);
  uint64_t v36 = *(void *)(v34 + 136);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = 0;
  long long v37 = (long long *)operator new(0x50uLL);
  *(void *)long long v37 = &unk_1EF579728;
  *((void *)v37 + 1) = v9;
  *((void *)v37 + 2) = v10;
  *((void *)v37 + 3) = v52;
  *((void *)v37 + 4) = v51;
  *((void *)v37 + 5) = v50;
  *((void *)v37 + 6) = v54;
  *((void *)v37 + 7) = v48;
  *((void *)v37 + 8) = v53;
  *((void *)v37 + 9) = v35;
  uint64_t v57 = v37;
  uint64_t v38 = (uint8_t *)operator new(0x50uLL);
  uint64_t v39 = (void (**)(uint8_t *))&unk_1EF579728;
  *(void *)uint64_t v38 = &unk_1EF579728;
  *((void *)v38 + 1) = v9;
  *((void *)v38 + 2) = v10;
  unint64_t v40 = v51;
  uint64_t v41 = v51;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v52 = *((void *)v37 + 3);
    unint64_t v40 = (std::__shared_weak_count *)*((void *)v37 + 4);
  }
  *((void *)v38 + 3) = v52;
  *((void *)v38 + 4) = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v42 = *((void *)v37 + 6);
  *((void *)v38 + 5) = *((void *)v37 + 5);
  *((void *)v38 + 6) = v42;
  if (v42) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = *((void *)v37 + 8);
  *((void *)v38 + 7) = *((void *)v37 + 7);
  *((void *)v38 + 8) = v43;
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 16), 1uLL, memory_order_relaxed);
  }
  *((void *)v38 + 9) = *((void *)v37 + 9);
  uint64_t v60 = v38;
  if ((uint8_t *)(v36 + 32) == buf)
  {
LABEL_66:
    (*(void (**)(uint8_t *))(*(void *)v38 + 40))(v38);
    goto LABEL_69;
  }
  BOOL v44 = *(uint8_t **)(v36 + 56);
  if (v44 == (uint8_t *)(v36 + 32))
  {
    (*(void (**)(uint64_t, uint8_t *))(*(void *)(v36 + 32) + 24))(v36 + 32, buf);
    (*(void (**)(void))(**(void **)(v36 + 56) + 32))(*(void *)(v36 + 56));
    uint64_t v39 = *(void (***)(uint8_t *))buf;
    *(void *)(v36 + 56) = v60;
    uint64_t v60 = buf;
    uint64_t v41 = v51;
  }
  else
  {
    uint64_t v60 = *(uint8_t **)(v36 + 56);
    *(void *)(v36 + 56) = v38;
    if (v44 != buf)
    {
      if (!v44) {
        goto LABEL_69;
      }
      uint64_t v38 = v44;
      goto LABEL_66;
    }
  }
  v39[4](buf);
LABEL_69:
  if (v57 == &__dst)
  {
    (*(void (**)(long long *))(__dst + 32))(&__dst);
  }
  else if (v57)
  {
    (*(void (**)(void))(*(void *)v57 + 40))();
  }
  uint64_t v45 = *(void *)(*(void *)(v1 + 8) + 8);
  *(void *)buf = &unk_1EF579770;
  uint64_t v59 = v1;
  uint64_t v60 = buf;
  geo::TaskQueue::barrierSync(v45, buf);
  if (v60 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    if (v10) {
LABEL_77:
    }
      std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    if (v60) {
      (*(void (**)(void))(*(void *)v60 + 40))();
    }
    if (v10) {
      goto LABEL_77;
    }
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  return v34;
}

void sub_1A192539C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v22)
  {
    std::__shared_weak_count::__release_weak(v22);
    if (!a13)
    {
LABEL_3:
      if (!a14) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!a13)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(a13);
  if (!a14)
  {
LABEL_4:
    if (!a11) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    std::__shared_weak_count::__release_weak(a11);
    _Unwind_Resume(a1);
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(a14);
  if (!a11) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void std::__function::__func<md::MapEngine::_produceRenderQueue(void)::$_0,std::allocator<md::MapEngine::_produceRenderQueue(void)::$_0>,void ()(unsigned long,double,ggl::RenderTransactionErrorStatus)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)__p[6];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)__p[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)__p[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(__p);
}

void md::PassList::updateGraphState(md::PassList *this, md::FrameGraphBuilder *a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  md::FrameGraphBuilder::build((md::FrameGraphBuilder *)&v35, a2, *((void **)this + 3));
  uint64_t v5 = v35;
  if (v35)
  {
    uint64_t v6 = (void *)*((void *)this + 1);
    uint64_t v36 = v35;
    if (v6)
    {
      v37[0] = &unk_1EF5791D0;
      v37[1] = &v36;
      uint64_t v38 = v37;
      md::FrameGraph::visitPasses(v6, (uint64_t)v37);
      if (v38 == v37)
      {
        (*(void (**)(void *))(v37[0] + 32))(v37);
      }
      else if (v38)
      {
        (*(void (**)(void))(*v38 + 40))();
      }
      uint64_t v7 = (md::FrameGraph *)*((void *)this + 1);
      uint64_t v35 = 0;
      *((void *)this + 1) = v5;
      if (v7)
      {
        md::FrameGraph::~FrameGraph(v7);
        MEMORY[0x1A6239270]();
      }
    }
    else
    {
      uint64_t v35 = 0;
      *((void *)this + 1) = v5;
    }
  }
  else
  {
    *(void *)(*((void *)this + 3) + 128) = a3;
  }
  int v8 = (void *)*((void *)this + 3);
  uint64_t v9 = (void *)v8[2];
  if (v9)
  {
    while (1)
    {
      uint64_t v12 = (void *)v9[8];
      unint64_t v11 = (void *)v9[9];
      if (v12 == v11) {
        break;
      }
      while (*(void *)(*v12 + 8) == v8[16])
      {
        if (++v12 == v11) {
          goto LABEL_13;
        }
      }
      if (v12 == v11) {
        break;
      }
      os_signpost_id_t v13 = v12 + 1;
      if (v12 + 1 == v11)
      {
        if (v12 == v11) {
          break;
        }
      }
      else
      {
        do
        {
          uint64_t v14 = *v13;
          if (*(void *)(*v13 + 8) == v8[16])
          {
            void *v13 = 0;
            __int16 v15 = (uint64_t *)*v12;
            *uint64_t v12 = v14;
            if (v15)
            {
              if (*((unsigned char *)v15 + 40)) {
                *((unsigned char *)v15 + 40) = 0;
              }
              if (*((unsigned char *)v15 + 16)) {
                *((unsigned char *)v15 + 16) = 0;
              }
              uint64_t v16 = *v15;
              uint64_t *v15 = 0;
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
              MEMORY[0x1A6239270](v15, 0x1020C40BC9DCD72);
            }
            ++v12;
          }
          ++v13;
        }
        while (v13 != v11);
        unint64_t v11 = (void *)v9[9];
        if (v12 == v11) {
          break;
        }
      }
      while (v11 != v12)
      {
        int v18 = (uint64_t *)*--v11;
        __int16 v17 = v18;
        *unint64_t v11 = 0;
        if (v18)
        {
          if (*((unsigned char *)v17 + 40)) {
            *((unsigned char *)v17 + 40) = 0;
          }
          if (*((unsigned char *)v17 + 16)) {
            *((unsigned char *)v17 + 16) = 0;
          }
          uint64_t v19 = *v17;
          *__int16 v17 = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
          MEMORY[0x1A6239270](v17, 0x1020C40BC9DCD72);
        }
      }
      v9[9] = v12;
      uint64_t v10 = (void *)*v9;
      if ((void *)v9[8] == v12)
      {
        int8x8_t v20 = (int8x8_t)v8[1];
        unint64_t v21 = v9[1];
        uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= *(void *)&v20) {
            v21 %= *(void *)&v20;
          }
        }
        else
        {
          v21 &= *(void *)&v20 - 1;
        }
        uint64_t v23 = *(void **)(*v8 + 8 * v21);
        do
        {
          size_t v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23 != v9);
        if (v24 == v8 + 2) {
          goto LABEL_91;
        }
        unint64_t v25 = v24[1];
        if (v22.u32[0] > 1uLL)
        {
          if (v25 >= *(void *)&v20) {
            v25 %= *(void *)&v20;
          }
        }
        else
        {
          v25 &= *(void *)&v20 - 1;
        }
        unint64_t v26 = (void *)*v9;
        if (v25 == v21)
        {
LABEL_65:
          if (v26) {
            goto LABEL_66;
          }
        }
        else
        {
LABEL_91:
          if (!v10) {
            goto LABEL_64;
          }
          unint64_t v27 = v10[1];
          if (v22.u32[0] > 1uLL)
          {
            if (v27 >= *(void *)&v20) {
              v27 %= *(void *)&v20;
            }
          }
          else
          {
            v27 &= *(void *)&v20 - 1;
          }
          unint64_t v26 = (void *)*v9;
          if (v27 != v21)
          {
LABEL_64:
            *(void *)(*v8 + 8 * v21) = 0;
            unint64_t v26 = (void *)*v9;
            goto LABEL_65;
          }
LABEL_66:
          unint64_t v28 = v26[1];
          if (v22.u32[0] > 1uLL)
          {
            if (v28 >= *(void *)&v20) {
              v28 %= *(void *)&v20;
            }
          }
          else
          {
            v28 &= *(void *)&v20 - 1;
          }
          if (v28 != v21)
          {
            *(void *)(*v8 + 8 * v28) = v24;
            unint64_t v26 = (void *)*v9;
          }
        }
        *size_t v24 = v26;
        void *v9 = 0;
        --v8[3];
        uint64_t v29 = (void *)v9[8];
        if (v29)
        {
          char v30 = (void *)v9[9];
          uint64_t v31 = (void *)v9[8];
          if (v30 != v29)
          {
            do
            {
              uint64_t v33 = (uint64_t *)*--v30;
              size_t v32 = v33;
              *char v30 = 0;
              if (v33)
              {
                if (*((unsigned char *)v32 + 40)) {
                  *((unsigned char *)v32 + 40) = 0;
                }
                if (*((unsigned char *)v32 + 16)) {
                  *((unsigned char *)v32 + 16) = 0;
                }
                uint64_t v34 = *v32;
                uint64_t *v32 = 0;
                if (v34) {
                  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
                }
                MEMORY[0x1A6239270](v32, 0x1020C40BC9DCD72);
              }
            }
            while (v30 != v29);
            uint64_t v31 = (void *)v9[8];
          }
          v9[9] = v29;
          operator delete(v31);
        }
        operator delete(v9);
      }
LABEL_14:
      uint64_t v9 = v10;
      if (!v10)
      {
        if (v35)
        {
          md::FrameGraph::~FrameGraph(v35);
          MEMORY[0x1A6239270]();
        }
        return;
      }
    }
LABEL_13:
    uint64_t v10 = (void *)*v9;
    goto LABEL_14;
  }
}

void *md::FrameGraph::visitPasses(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *(void *)(*(void *)v2 + 8);
      uint64_t v7 = v5[15];
      if (v6 < (v5[16] - v7) >> 3 && *(void *)(v7 + 8 * v6))
      {
        if (*(unsigned char *)(*(void *)v2 + 48) == 1)
        {
          uint64_t v11 = 0;
          goto LABEL_12;
        }
        if (!*(unsigned char *)(*(void *)v2 + 48))
        {
          uint64_t v8 = v5[18];
          if (v6 < (v5[19] - v8) >> 3)
          {
            uint64_t v9 = *(void *)(v8 + 8 * v6);
            if (v9)
            {
              uint64_t v11 = v9;
LABEL_12:
              uint64_t v10 = *(void *)(a2 + 24);
              if (!v10)
              {
                std::__throw_bad_function_call[abi:nn180100]();
                JUMPOUT(0x1A1925C08);
              }
              __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
            }
          }
        }
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void md::FrameGraph::~FrameGraph(md::FrameGraph *this)
{
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 19);
    uint64_t v4 = (void *)*((void *)this + 18);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 18);
    }
    *((void *)this + 19) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 15);
  if (v7)
  {
    uint64_t v8 = (void *)*((void *)this + 16);
    uint64_t v9 = (void *)*((void *)this + 15);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        void *v8 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v7;
    operator delete(v9);
  }
  uint64_t v12 = (void *)*((void *)this + 12);
  if (v12)
  {
    *((void *)this + 13) = v12;
    operator delete(v12);
  }
  os_signpost_id_t v13 = (void *)*((void *)this + 9);
  if (v13)
  {
    uint64_t v14 = (void *)*((void *)this + 10);
    __int16 v15 = (void *)*((void *)this + 9);
    if (v14 != v13)
    {
      do
      {
        uint64_t v17 = *--v14;
        uint64_t v16 = v17;
        void *v14 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      while (v14 != v13);
      __int16 v15 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v13;
    operator delete(v15);
  }
  int v18 = (void *)*((void *)this + 6);
  if (v18)
  {
    uint64_t v19 = (void *)*((void *)this + 7);
    int8x8_t v20 = (void *)*((void *)this + 6);
    if (v19 != v18)
    {
      do
      {
        uint64_t v22 = *--v19;
        uint64_t v21 = v22;
        void *v19 = 0;
        if (v22)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v21 + 72));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v21 + 48));
          MEMORY[0x1A6239270](v21, 0x1070C4044CBF76DLL);
        }
      }
      while (v19 != v18);
      int8x8_t v20 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v18;
    operator delete(v20);
  }
  uint64_t v23 = (void *)*((void *)this + 3);
  if (v23)
  {
    size_t v24 = (void *)*((void *)this + 4);
    unint64_t v25 = (void *)*((void *)this + 3);
    if (v24 != v23)
    {
      do
      {
        uint64_t v27 = *--v24;
        uint64_t v26 = v27;
        *size_t v24 = 0;
        if (v27)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v26 + 112));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v26 + 88));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v26 + 64));
          if (*(char *)(v26 + 47) < 0) {
            operator delete(*(void **)(v26 + 24));
          }
          MEMORY[0x1A6239270](v26, 0x1032C4041C7693DLL);
        }
      }
      while (v24 != v23);
      unint64_t v25 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v23;
    operator delete(v25);
  }
  unint64_t v28 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v28;
    operator delete(v28);
  }
}

void md::FrameGraphPhysicalResourceHolder<ggl::Texture>::~FrameGraphPhysicalResourceHolder()
{
}

void std::__function::__func<md::PassList::rootRenderQueue(void)::$_0,std::allocator<md::PassList::rootRenderQueue(void)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v5 = *a4;
    int v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 == (*a4 == 0))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 16);
      BOOL v8 = v6 == 1;
      uint64_t v10 = *(void *)(v7 + 136);
      uint64_t v9 = *(void *)(v7 + 144);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(std::__shared_weak_count **)(v4 + 144);
      *(void *)(v4 + 136) = v10;
      *(void *)(v4 + 144) = v9;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      unint64_t v12 = *(void *)(v7 + 80);
      unint64_t v13 = *(void *)(v7 + 88);
      if (v12 >= v13)
      {
        uint64_t v15 = 0xAAAAAAAAAAAAAAALL;
        uint64_t v16 = *(void *)(v7 + 72);
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v16) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 < 0x555555555555555) {
          uint64_t v15 = v18;
        }
        if (v15)
        {
          uint64_t v20 = 24 * v15;
          uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 96) + 16))(*(void *)(v7 + 96), 24 * v15, 8);
          uint64_t v22 = v21 + 24 * v17;
          uint64_t v15 = v21 + v20;
          if (v21)
          {
            *(void *)uint64_t v22 = v5;
            unint64_t v23 = v21 + 24 * v17;
            *(void *)(v23 + 8) = v4;
            *(unsigned char *)(v23 + 16) = v8;
          }
        }
        else
        {
          uint64_t v22 = 24 * v17;
        }
        uint64_t v14 = v22 + 24;
        uint64_t v25 = *(void *)(v7 + 72);
        uint64_t v24 = *(void *)(v7 + 80);
        if (v24 != v25)
        {
          do
          {
            long long v26 = *(_OWORD *)(v24 - 24);
            *(void *)(v22 - 8) = *(void *)(v24 - 8);
            *(_OWORD *)(v22 - 24) = v26;
            v22 -= 24;
            v24 -= 24;
          }
          while (v24 != v25);
          uint64_t v24 = *(void *)(v7 + 72);
        }
        *(void *)(v7 + 72) = v22;
        *(void *)(v7 + 80) = v14;
        uint64_t v27 = *(void *)(v7 + 88);
        *(void *)(v7 + 88) = v15;
        if (v24) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 96) + 40))(*(void *)(v7 + 96), v24, v27 - v24);
        }
      }
      else
      {
        if (v12)
        {
          *(void *)unint64_t v12 = v5;
          *(void *)(v12 + 8) = v4;
          *(unsigned char *)(v12 + 16) = v8;
        }
        uint64_t v14 = v12 + 24;
      }
      *(void *)(v7 + 80) = v14;
    }
  }
}

uint64_t std::__function::__func<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520D68;
  a2[1] = v2;
  return result;
}

uint64_t ggl::MetalSwapchainDrawableRef::texture@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(this + 8);
    uint64_t v5 = *(void *)(v3 + 96);
    uint64_t v4 = *(void *)(v3 + 104);
    *a3 = v5;
    a3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return this;
}

void std::__function::__func<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0,std::allocator<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = **(void ***)(a1 + 8);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 3;
    while (1)
    {
      uint64_t v9 = *(unsigned __int8 **)(v4 + 8 * v7);
      if (*v9 == *a2)
      {
        unint64_t v10 = *((void *)v9 + 1);
        uint64_t v11 = v3[15];
        if (v10 < (v3[16] - v11) >> 3) {
          break;
        }
      }
      if (++v7 >= v8) {
        return;
      }
    }
    uint64_t v132 = *(void *)(v11 + 8 * v10);
    if (v132)
    {
      unint64_t v12 = *(void **)(a3 + 8);
      uint64_t v13 = v12[13];
      uint64_t v14 = v12[14];
      if (v14 != v13)
      {
        if (v14 - v13 < 0) {
          abort();
        }
        uint64_t v130 = v12[16];
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v130 + 16))(v130, v14 - v13, 8);
        uint64_t v16 = 0;
        do
        {
          if (v15 + v16) {
            *(void *)(v15 + v16) = *(void *)(v13 + v16);
          }
          v16 += 8;
        }
        while (v13 + v16 != v14);
        uint64_t v131 = v15;
        char v134 = (uint64_t *)(v15 + v16);
        if (v15 + v16 != v15)
        {
          for (uint64_t i = (uint64_t *)v15; i != v134; ++i)
          {
            uint64_t v19 = *i;
            if (!*i) {
              continue;
            }
            uint64_t v20 = *(void *)(*(void *)(v132 + 24) + 8 * *(unsigned __int8 *)(v19 + 16));
            if (!v20) {
              continue;
            }
            unint64_t v133 = (_OWORD *)(v19 + 264);
            if (!*(void *)(v19 + 352)) {
              goto LABEL_82;
            }
            uint64_t v22 = *(void ***)(v20 + 320);
            uint64_t v21 = *(void *)(v20 + 328);
            if ((void **)v21 == v22)
            {
              long long v26 = (void *)(v20 + 352);
              uint64_t v21 = *(void *)(v20 + 320);
            }
            else
            {
              unint64_t v23 = *(void *)(v20 + 344);
              uint64_t v24 = &v22[v23 >> 7];
              uint64_t v25 = (uint64_t)*v24 + 32 * (v23 & 0x7F);
              long long v26 = (void *)(v20 + 352);
              uint64_t v27 = *(uint64_t *)((char *)v22 + (((*(void *)(v20 + 352) + v23) >> 4) & 0xFFFFFFFFFFFFFF8))
                  + 32 * ((*(void *)(v20 + 352) + v23) & 0x7F);
              if (v25 != v27)
              {
                do
                {
                  unint64_t v28 = *(std::__shared_weak_count **)(v25 + 24);
                  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                    std::__shared_weak_count::__release_weak(v28);
                  }
                  v25 += 32;
                  if (v25 - (void)*v24 == 4096)
                  {
                    uint64_t v29 = (uint64_t)v24[1];
                    ++v24;
                    uint64_t v25 = v29;
                  }
                }
                while (v25 != v27);
                uint64_t v22 = *(void ***)(v20 + 320);
                uint64_t v21 = *(void *)(v20 + 328);
              }
            }
            *long long v26 = 0;
            unint64_t v30 = v21 - (void)v22;
            if ((unint64_t)(v21 - (void)v22) >= 0x11)
            {
              do
              {
                operator delete(*v22);
                uint64_t v21 = *(void *)(v20 + 328);
                uint64_t v22 = (void **)(*(void *)(v20 + 320) + 8);
                *(void *)(v20 + 320) = v22;
                unint64_t v30 = v21 - (void)v22;
              }
              while ((unint64_t)(v21 - (void)v22) > 0x10);
            }
            unint64_t v31 = v30 >> 3;
            if (v31 == 1)
            {
              uint64_t v32 = 64;
            }
            else
            {
              if (v31 != 2) {
                goto LABEL_38;
              }
              uint64_t v32 = 128;
            }
            *(void *)(v20 + 344) = v32;
LABEL_38:
            uint64_t v33 = *(void *)(v20 + 352);
            if (v33)
            {
              unint64_t v34 = *(void *)(v20 + 344);
              if (v34 >= 0x80)
              {
                operator delete(*v22);
                uint64_t v21 = *(void *)(v20 + 328);
                uint64_t v22 = (void **)(*(void *)(v20 + 320) + 8);
                *(void *)(v20 + 320) = v22;
                uint64_t v33 = *(void *)(v20 + 352);
                unint64_t v34 = *(void *)(v20 + 344) - 128;
                *(void *)(v20 + 344) = v34;
              }
              uint64_t v35 = 16 * (v21 - (void)v22) - 1;
              if ((void **)v21 == v22) {
                uint64_t v35 = 0;
              }
              if (v35 - (v33 + v34) >= 0x80)
              {
                operator delete(*(void **)(v21 - 8));
                uint64_t v22 = *(void ***)(v20 + 320);
                uint64_t v21 = *(void *)(v20 + 328) - 8;
                *(void *)(v20 + 328) = v21;
              }
            }
            else
            {
              if ((void **)v21 != v22)
              {
                do
                {
                  operator delete(*(void **)(v21 - 8));
                  uint64_t v36 = *(void *)(v20 + 320);
                  uint64_t v21 = *(void *)(v20 + 328) - 8;
                  *(void *)(v20 + 328) = v21;
                }
                while (v21 != v36);
              }
              *(void *)(v20 + 344) = 0;
              uint64_t v22 = (void **)v21;
            }
            long long v37 = *(void **)(v20 + 312);
            uint64_t v38 = v21 - (void)v22;
            unint64_t v39 = (v21 - (uint64_t)v22) >> 3;
            if (v39 < (uint64_t)(*(void *)(v20 + 336) - (void)v37) >> 3)
            {
              if ((void **)v21 == v22)
              {
                unint64_t v40 = 0;
                uint64_t v21 = 8 * v39;
              }
              else
              {
                if (v38 < 0) {
                  goto LABEL_182;
                }
                unint64_t v40 = operator new(v21 - (void)v22);
                uint64_t v21 = (uint64_t)&v40[v39];
                if ((unint64_t)(v38 - 8) < 0x18)
                {
                  BOOL v44 = v40;
                  goto LABEL_60;
                }
                if ((unint64_t)((char *)v40 - (char *)v22) < 0x20)
                {
                  BOOL v44 = v40;
                  goto LABEL_60;
                }
                uint64_t v41 = 0;
                unint64_t v42 = ((unint64_t)(v38 - 8) >> 3) + 1;
                uint64_t v43 = v42 & 0x3FFFFFFFFFFFFFFCLL;
                BOOL v44 = &v40[v43];
                uint64_t v45 = v42 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  uint64_t v46 = &v40[v41];
                  long long v47 = *(_OWORD *)&v22[v41 + 2];
                  *uint64_t v46 = *(_OWORD *)&v22[v41];
                  v46[1] = v47;
                  v41 += 4;
                  v45 -= 4;
                }
                while (v45);
                if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  uint64_t v22 = (void **)((char *)v22 + v43 * 8);
                  do
                  {
LABEL_60:
                    uint64_t v48 = *v22++;
                    *v44++ = v48;
                  }
                  while (v44 != (void *)v21);
                }
              }
              *(void *)(v20 + 312) = v40;
              *(void *)(v20 + 320) = v40;
              uint64_t v22 = (void **)v40;
              *(void *)(v20 + 328) = v21;
              *(void *)(v20 + 336) = v21;
              if (v37)
              {
                operator delete(v37);
                uint64_t v22 = *(void ***)(v20 + 320);
                uint64_t v21 = *(void *)(v20 + 328);
              }
            }
            if ((void **)v21 == v22)
            {
              uint64_t v49 = v22;
            }
            else
            {
              uint64_t v49 = (void **)(v21 + (((unint64_t)v22 - v21 + 7) & 0xFFFFFFFFFFFFFFF8));
              *(void *)(v20 + 328) = v49;
              uint64_t v21 = (uint64_t)v49;
            }
            uint64_t v50 = *(void **)(v20 + 312);
            int64_t v51 = (char *)v49 - (char *)v22;
            unint64_t v52 = v49 - v22;
            if (v52 < (uint64_t)(*(void *)(v20 + 336) - (void)v50) >> 3)
            {
              if ((void **)v21 == v22)
              {
                uint64_t v53 = 0;
                uint64_t v54 = 8 * v52;
              }
              else
              {
                if (v51 < 0) {
                  goto LABEL_182;
                }
                uint64_t v53 = operator new((char *)v49 - (char *)v22);
                uint64_t v54 = (uint64_t)&v53[v52];
                if ((unint64_t)(v51 - 8) < 0x18)
                {
                  uint64_t v58 = v53;
                  goto LABEL_78;
                }
                if ((unint64_t)((char *)v53 - (char *)v22) < 0x20)
                {
                  uint64_t v58 = v53;
                  goto LABEL_78;
                }
                uint64_t v55 = 0;
                unint64_t v56 = ((unint64_t)(v51 - 8) >> 3) + 1;
                uint64_t v57 = v56 & 0x3FFFFFFFFFFFFFFCLL;
                uint64_t v58 = &v53[v57];
                uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  uint64_t v60 = &v53[v55];
                  long long v61 = *(_OWORD *)&v22[v55 + 2];
                  *uint64_t v60 = *(_OWORD *)&v22[v55];
                  v60[1] = v61;
                  v55 += 4;
                  v59 -= 4;
                }
                while (v59);
                if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  uint64_t v22 = (void **)((char *)v22 + v57 * 8);
                  do
                  {
LABEL_78:
                    unint64_t v62 = *v22++;
                    *v58++ = v62;
                  }
                  while (v58 != (void *)v54);
                }
              }
              *(void *)(v20 + 312) = v53;
              *(void *)(v20 + 320) = v53;
              *(void *)(v20 + 328) = v54;
              *(void *)(v20 + 336) = v54;
              if (v50) {
                operator delete(v50);
              }
            }
            *(_OWORD *)(v20 + 312) = *(_OWORD *)(v19 + 312);
            *(void *)(v20 + 328) = *(void *)(v19 + 328);
            uint64_t v63 = *(void *)(v19 + 344);
            *(void *)(v20 + 336) = *(void *)(v19 + 336);
            *(_OWORD *)(v19 + 312) = 0u;
            *(_OWORD *)(v19 + 328) = 0u;
            *(void *)(v20 + 344) = v63;
            *(void *)(v20 + 352) = *(void *)(v19 + 352);
            *(void *)(v19 + 344) = 0;
            *(void *)(v19 + 352) = 0;
LABEL_82:
            uint64_t v64 = *(void *)(v19 + 168);
            uint64_t v65 = *(void *)(v19 + 176);
            if (v65 != v64)
            {
              uint64_t v66 = *(void *)(v20 + 168);
              if (v66)
              {
                *(void *)(v20 + 176) = v66;
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v20 + 192) + 40))(*(void *)(v20 + 192), v66, *(void *)(v20 + 184) - v66);
                *(void *)(v20 + 168) = 0;
                *(void *)(v20 + 176) = 0;
                *(void *)(v20 + 184) = 0;
                uint64_t v64 = *(void *)(v19 + 168);
                uint64_t v65 = *(void *)(v19 + 176);
              }
              *(void *)(v20 + 168) = v64;
              *(void *)(v20 + 176) = v65;
              *(void *)(v20 + 184) = *(void *)(v19 + 184);
              *(void *)(v19 + 168) = 0;
              *(void *)(v19 + 176) = 0;
              *(void *)(v19 + 184) = 0;
            }
            uint64_t v67 = *(void *)(v19 + 200);
            uint64_t v68 = *(void *)(v19 + 208);
            if (v68 == v67) {
              goto LABEL_103;
            }
            uint64_t v69 = (uint64_t *)(v20 + 200);
            uint64_t v70 = *(void **)(v20 + 200);
            if (!v70) {
              goto LABEL_102;
            }
            uint64_t v71 = *(void **)(v20 + 208);
            uint64_t v72 = *(void *)(v20 + 200);
            if (v71 == v70) {
              goto LABEL_101;
            }
            unint64_t v73 = v71 - 4;
            uint64_t v74 = v71 - 4;
            do
            {
              uint64_t v76 = (void *)v74[3];
              if (v74 == v76)
              {
                (*(void (**)(void *, uint64_t))(*v74 + 32))(v74, v72);
                if (*((unsigned char *)v74 - 28)) {
                  goto LABEL_95;
                }
              }
              else
              {
                if (v76) {
                  (*(void (**)(void *, uint64_t))(*v76 + 40))(v76, v72);
                }
                if (*((unsigned char *)v74 - 28)) {
LABEL_95:
                }
                  *((unsigned char *)v74 - 28) = 0;
              }
              if (*((unsigned char *)v74 - 32)) {
                *((unsigned char *)v74 - 32) = 0;
              }
              uint64_t v75 = v74 - 6;
              v74 -= 10;
              v73 -= 10;
            }
            while (v75 != v70);
            uint64_t v72 = *v69;
LABEL_101:
            *(void *)(v20 + 208) = v70;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v20 + 224) + 40))(*(void *)(v20 + 224), v72, *(void *)(v20 + 216) - v72);
            *uint64_t v69 = 0;
            *(void *)(v20 + 208) = 0;
            *(void *)(v20 + 216) = 0;
            uint64_t v67 = *(void *)(v19 + 200);
            uint64_t v68 = *(void *)(v19 + 208);
LABEL_102:
            *(void *)(v20 + 200) = v67;
            *(void *)(v20 + 208) = v68;
            *(void *)(v20 + 216) = *(void *)(v19 + 216);
            *(void *)(v19 + 200) = 0;
            *(void *)(v19 + 208) = 0;
            *(void *)(v19 + 216) = 0;
LABEL_103:
            uint64_t v77 = *(void *)(v19 + 232);
            uint64_t v78 = *(void *)(v19 + 240);
            if (v78 != v77)
            {
              unint64_t v80 = (uint64_t *)(v20 + 232);
              uint64_t v79 = *(void **)(v20 + 232);
              if (v79)
              {
                uint64_t v81 = *(void **)(v20 + 240);
                uint64_t v82 = *(void *)(v20 + 232);
                if (v81 != v79)
                {
                  uint64_t v83 = v81 - 4;
                  uint64_t v84 = v81 - 4;
                  do
                  {
                    uint64_t v86 = (void *)v84[3];
                    if (v84 == v86)
                    {
                      (*(void (**)(void *))(*v84 + 32))(v84);
                    }
                    else if (v86)
                    {
                      (*(void (**)(void *, uint64_t))(*v86 + 40))(v86, v82);
                    }
                    uint64_t v85 = v84 - 4;
                    v84 -= 8;
                    v83 -= 8;
                  }
                  while (v85 != v79);
                  uint64_t v82 = *v80;
                }
                *(void *)(v20 + 240) = v79;
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v20 + 256) + 40))(*(void *)(v20 + 256), v82, *(void *)(v20 + 248) - v82);
                *unint64_t v80 = 0;
                *(void *)(v20 + 240) = 0;
                *(void *)(v20 + 248) = 0;
                uint64_t v77 = *(void *)(v19 + 232);
                uint64_t v78 = *(void *)(v19 + 240);
              }
              *(void *)(v20 + 232) = v77;
              *(void *)(v20 + 240) = v78;
              *(void *)(v20 + 248) = *(void *)(v19 + 248);
              *(void *)(v19 + 232) = 0;
              *(void *)(v19 + 240) = 0;
              *(void *)(v19 + 248) = 0;
            }
            if (!*(void *)(v19 + 304)) {
              continue;
            }
            uint64_t v88 = *(void ***)(v20 + 272);
            uint64_t v87 = *(void *)(v20 + 280);
            if ((void **)v87 == v88)
            {
              uint64_t v92 = (void *)(v20 + 304);
              uint64_t v87 = *(void *)(v20 + 272);
            }
            else
            {
              unint64_t v89 = *(void *)(v20 + 296);
              uint64_t v90 = &v88[v89 >> 8];
              uint64_t v91 = (uint64_t)*v90 + 16 * v89;
              uint64_t v92 = (void *)(v20 + 304);
              uint64_t v93 = *(uint64_t *)((char *)v88 + (((*(void *)(v20 + 304) + v89) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (*(unsigned char *)(v20 + 304) + v89);
              if (v91 != v93)
              {
                do
                {
                  unint64_t v94 = *(std::__shared_weak_count **)(v91 + 8);
                  if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                  v91 += 16;
                  if (v91 - (void)*v90 == 4096)
                  {
                    uint64_t v95 = (uint64_t)v90[1];
                    ++v90;
                    uint64_t v91 = v95;
                  }
                }
                while (v91 != v93);
                uint64_t v88 = *(void ***)(v20 + 272);
                uint64_t v87 = *(void *)(v20 + 280);
              }
            }
            *uint64_t v92 = 0;
            unint64_t v96 = v87 - (void)v88;
            if ((unint64_t)(v87 - (void)v88) >= 0x11)
            {
              do
              {
                operator delete(*v88);
                uint64_t v87 = *(void *)(v20 + 280);
                uint64_t v88 = (void **)(*(void *)(v20 + 272) + 8);
                *(void *)(v20 + 272) = v88;
                unint64_t v96 = v87 - (void)v88;
              }
              while ((unint64_t)(v87 - (void)v88) > 0x10);
            }
            unint64_t v97 = v96 >> 3;
            if (v97 == 1)
            {
              uint64_t v98 = 128;
LABEL_133:
              *(void *)(v20 + 296) = v98;
            }
            else if (v97 == 2)
            {
              uint64_t v98 = 256;
              goto LABEL_133;
            }
            uint64_t v99 = *(void *)(v20 + 304);
            if (v99)
            {
              unint64_t v100 = *(void *)(v20 + 296);
              if (v100 >= 0x100)
              {
                operator delete(*v88);
                uint64_t v87 = *(void *)(v20 + 280);
                uint64_t v88 = (void **)(*(void *)(v20 + 272) + 8);
                *(void *)(v20 + 272) = v88;
                uint64_t v99 = *(void *)(v20 + 304);
                unint64_t v100 = *(void *)(v20 + 296) - 256;
                *(void *)(v20 + 296) = v100;
              }
              uint64_t v101 = 32 * (v87 - (void)v88) - 1;
              if ((void **)v87 == v88) {
                uint64_t v101 = 0;
              }
              if (v101 - (v99 + v100) >= 0x100)
              {
                operator delete(*(void **)(v87 - 8));
                uint64_t v88 = *(void ***)(v20 + 272);
                uint64_t v87 = *(void *)(v20 + 280) - 8;
                *(void *)(v20 + 280) = v87;
              }
            }
            else
            {
              if ((void **)v87 != v88)
              {
                do
                {
                  operator delete(*(void **)(v87 - 8));
                  uint64_t v102 = *(void *)(v20 + 272);
                  uint64_t v87 = *(void *)(v20 + 280) - 8;
                  *(void *)(v20 + 280) = v87;
                }
                while (v87 != v102);
              }
              *(void *)(v20 + 296) = 0;
              uint64_t v88 = (void **)v87;
            }
            int v103 = *(void **)(v20 + 264);
            uint64_t v104 = v87 - (void)v88;
            unint64_t v105 = (v87 - (uint64_t)v88) >> 3;
            if (v105 >= (uint64_t)(*(void *)(v20 + 288) - (void)v103) >> 3) {
              goto LABEL_159;
            }
            if ((void **)v87 == v88)
            {
              uint64_t v106 = 0;
              uint64_t v87 = 8 * v105;
              goto LABEL_157;
            }
            if (v104 < 0) {
              goto LABEL_182;
            }
            uint64_t v106 = operator new(v87 - (void)v88);
            uint64_t v87 = (uint64_t)&v106[v105];
            if ((unint64_t)(v104 - 8) < 0x18)
            {
              uint64_t v110 = v106;
              goto LABEL_156;
            }
            if ((unint64_t)((char *)v106 - (char *)v88) < 0x20)
            {
              uint64_t v110 = v106;
              goto LABEL_156;
            }
            uint64_t v107 = 0;
            unint64_t v108 = ((unint64_t)(v104 - 8) >> 3) + 1;
            uint64_t v109 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v110 = &v106[v109];
            uint64_t v111 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v112 = &v106[v107];
              long long v113 = *(_OWORD *)&v88[v107 + 2];
              *uint64_t v112 = *(_OWORD *)&v88[v107];
              v112[1] = v113;
              v107 += 4;
              v111 -= 4;
            }
            while (v111);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
              uint64_t v88 = (void **)((char *)v88 + v109 * 8);
              do
              {
LABEL_156:
                uint64_t v114 = *v88++;
                *v110++ = v114;
              }
              while (v110 != (void *)v87);
            }
LABEL_157:
            *(void *)(v20 + 264) = v106;
            *(void *)(v20 + 272) = v106;
            uint64_t v88 = (void **)v106;
            *(void *)(v20 + 280) = v87;
            *(void *)(v20 + 288) = v87;
            if (v103)
            {
              operator delete(v103);
              uint64_t v88 = *(void ***)(v20 + 272);
              uint64_t v87 = *(void *)(v20 + 280);
            }
LABEL_159:
            if ((void **)v87 == v88)
            {
              char v115 = v88;
            }
            else
            {
              char v115 = (void **)(v87 + (((unint64_t)v88 - v87 + 7) & 0xFFFFFFFFFFFFFFF8));
              *(void *)(v20 + 280) = v115;
              uint64_t v87 = (uint64_t)v115;
            }
            unint64_t v116 = *(void **)(v20 + 264);
            int64_t v117 = (char *)v115 - (char *)v88;
            unint64_t v118 = v115 - v88;
            if (v118 >= (uint64_t)(*(void *)(v20 + 288) - (void)v116) >> 3) {
              goto LABEL_15;
            }
            if ((void **)v87 == v88)
            {
              uint64_t v119 = 0;
              uint64_t v120 = 8 * v118;
              goto LABEL_175;
            }
            if (v117 < 0) {
LABEL_182:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v119 = operator new((char *)v115 - (char *)v88);
            uint64_t v120 = (uint64_t)&v119[v118];
            if ((unint64_t)(v117 - 8) < 0x18)
            {
              float v124 = v119;
              goto LABEL_174;
            }
            if ((unint64_t)((char *)v119 - (char *)v88) < 0x20)
            {
              float v124 = v119;
              goto LABEL_174;
            }
            uint64_t v121 = 0;
            unint64_t v122 = ((unint64_t)(v117 - 8) >> 3) + 1;
            uint64_t v123 = v122 & 0x3FFFFFFFFFFFFFFCLL;
            float v124 = &v119[v123];
            uint64_t v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v126 = &v119[v121];
              long long v127 = *(_OWORD *)&v88[v121 + 2];
              *uint64_t v126 = *(_OWORD *)&v88[v121];
              v126[1] = v127;
              v121 += 4;
              v125 -= 4;
            }
            while (v125);
            if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
            {
              uint64_t v88 = (void **)((char *)v88 + v123 * 8);
              do
              {
LABEL_174:
                int v128 = *v88++;
                *v124++ = v128;
              }
              while (v124 != (void *)v120);
            }
LABEL_175:
            *(void *)(v20 + 264) = v119;
            *(void *)(v20 + 272) = v119;
            *(void *)(v20 + 280) = v120;
            *(void *)(v20 + 288) = v120;
            if (v116) {
              operator delete(v116);
            }
LABEL_15:
            *(_OWORD *)(v20 + 264) = *v133;
            *(void *)(v20 + 280) = *(void *)(v19 + 280);
            uint64_t v18 = *(void *)(v19 + 296);
            *(void *)(v20 + 288) = *(void *)(v19 + 288);
            *unint64_t v133 = 0u;
            *(_OWORD *)(v19 + 280) = 0u;
            *(void *)(v20 + 296) = v18;
            *(void *)(v20 + 304) = *(void *)(v19 + 304);
            *(void *)(v19 + 296) = 0;
            *(void *)(v19 + 304) = 0;
          }
        }
        if (v131)
        {
          unsigned int v129 = *(void (**)(void))(*(void *)v130 + 40);
          v129();
        }
      }
    }
  }
}

void ggl::RenderTarget::~RenderTarget(ggl::RenderTarget *this)
{
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF55D4B8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void *md::GridRenderLayer::layout(md::GridRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v411 = *MEMORY[0x1E4F143B8];
  v403[0] = &unk_1EF570EC0;
  v403[1] = a2;
  uint64_t v404 = v403;
  v401[0] = &unk_1EF570F08;
  v401[1] = a2;
  v402 = v401;
  uint64_t v406 = v405;
  v405[0] = &unk_1EF570F08;
  v405[1] = a2;
  std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v403);
  if (v402 == v401)
  {
    (*(void (**)(void *))(v401[0] + 32))(v401);
  }
  else if (v402)
  {
    (*(void (**)(void))(*v402 + 40))();
  }
  if (v404 == v403)
  {
    (*(void (**)(void *))(v403[0] + 32))(v403);
  }
  else if (v404)
  {
    (*(void (**)(void))(*v404 + 40))();
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  uint64_t v5 = v4[35];
  uint64_t v6 = (uint64_t *)v4[42];
  if ((uint64_t *)v5 != v6)
  {
    uint64_t v342 = this;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = v4[40];
    unint64_t v10 = v4 + 37;
    while (v8 != v9)
    {
      uint64_t v11 = *(void *)(v5 + 64);
      unint64_t v12 = std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>(v4 + 37, (unsigned __int8 *)(v5 + 16));
      if (v12)
      {
        int8x8_t v13 = (int8x8_t)v4[38];
        unint64_t v14 = v12[1];
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          if (v14 >= *(void *)&v13) {
            v14 %= *(void *)&v13;
          }
        }
        else
        {
          v14 &= *(void *)&v13 - 1;
        }
        uint64_t v16 = *(uint64_t **)(*v10 + 8 * v14);
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16 != v12);
        if (v17 == v4 + 39) {
          goto LABEL_32;
        }
        unint64_t v18 = v17[1];
        if (v15.u32[0] > 1uLL)
        {
          if (v18 >= *(void *)&v13) {
            v18 %= *(void *)&v13;
          }
        }
        else
        {
          v18 &= *(void *)&v13 - 1;
        }
        if (v18 != v14)
        {
LABEL_32:
          if (!*v12) {
            goto LABEL_33;
          }
          unint64_t v19 = *(void *)(*v12 + 8);
          if (v15.u32[0] > 1uLL)
          {
            if (v19 >= *(void *)&v13) {
              v19 %= *(void *)&v13;
            }
          }
          else
          {
            v19 &= *(void *)&v13 - 1;
          }
          if (v19 != v14) {
LABEL_33:
          }
            *(void *)(*v10 + 8 * v14) = 0;
        }
        uint64_t v20 = *v12;
        if (*v12)
        {
          unint64_t v21 = *(void *)(v20 + 8);
          if (v15.u32[0] > 1uLL)
          {
            if (v21 >= *(void *)&v13) {
              v21 %= *(void *)&v13;
            }
          }
          else
          {
            v21 &= *(void *)&v13 - 1;
          }
          if (v21 != v14)
          {
            *(void *)(*v10 + 8 * v21) = v17;
            uint64_t v20 = *v12;
          }
        }
        *unint64_t v17 = v20;
        --v4[40];
        operator delete(v12);
        uint64_t v6 = (uint64_t *)v4[42];
      }
      v7 += v11;
      uint64_t v5 = *(void *)(v5 + 8);
      ++v8;
      if ((uint64_t *)v5 == v6) {
        goto LABEL_42;
      }
    }
    uint64_t v6 = (uint64_t *)v5;
LABEL_42:
    uint64_t v22 = (uint64_t *)v4[35];
    if (v22 != v6)
    {
      uint64_t v23 = *v6;
      uint64_t v24 = *v22;
      *(void *)(v24 + 8) = *(void *)(*v6 + 8);
      **(void **)(v23 + 8) = v24;
      do
      {
        uint64_t v25 = (uint64_t *)v22[1];
        --v4[36];
        long long v26 = (std::__shared_weak_count *)v22[7];
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        operator delete(v22);
        uint64_t v22 = v25;
      }
      while (v25 != v6);
    }
    unint64_t v27 = v4[43];
    BOOL v115 = v27 >= v7;
    unint64_t v28 = v27 - v7;
    if (!v115) {
      unint64_t v28 = 0;
    }
    v4[43] = v28;
    this = v342;
  }
  v4[42] = v4 + 34;
  if (*(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128) - 1 <= 2)
  {
    uint64_t v29 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
    uint64_t v30 = v29[3];
    uint64_t v31 = v29[4];
    uint64_t v32 = v31 - v30;
    if (v31 == v30) {
      goto LABEL_62;
    }
    uint64_t v33 = 0;
    unint64_t v34 = v32 >> 3;
    while (1)
    {
      uint64_t v35 = *(unsigned __int8 **)(v30 + 8 * v33);
      if (*v35 == *((unsigned __int8 *)this + 57))
      {
        unint64_t v36 = *((void *)v35 + 1);
        uint64_t v37 = v29[15];
        if (v36 < (v29[16] - v37) >> 3) {
          break;
        }
      }
      if (++v33 >= v34) {
        goto LABEL_62;
      }
    }
    uint64_t v38 = *(void *)(v37 + 8 * v36);
    if (!v38) {
LABEL_62:
    }
      uint64_t v337 = 0;
    else {
      uint64_t v337 = *(void *)(*(void *)(v38 + 24) + 8 * *((unsigned __int8 *)this + 58));
    }
    uint64_t v43 = (uint64_t *)*((void *)a2 + 1);
    int8x8_t v44 = (int8x8_t)v43[1];
    if (!*(void *)&v44)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      goto LABEL_249;
    }
    uint8x8_t v45 = (uint8x8_t)vcnt_s8(v44);
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.u32[0] > 1uLL)
    {
      uint64_t v46 = 0x336A901A15BB7353;
      if (*(void *)&v44 <= 0x336A901A15BB7353uLL) {
        uint64_t v46 = 0x336A901A15BB7353uLL % *(void *)&v44;
      }
    }
    else
    {
      uint64_t v46 = (*(void *)&v44 - 1) & 0x336A901A15BB7353;
    }
    uint64_t v56 = *v43;
    uint64_t v57 = *(void **)(*v43 + 8 * v46);
    if (!v57) {
      goto LABEL_128;
    }
    uint64_t v58 = (void *)*v57;
    if (!v58) {
      goto LABEL_128;
    }
    if (v45.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v60 = v58[1];
        if (v60 == 0x336A901A15BB7353)
        {
          if (v58[2] == 0x336A901A15BB7353) {
            goto LABEL_126;
          }
        }
        else if ((v60 & (*(void *)&v44 - 1)) != v46)
        {
          goto LABEL_128;
        }
        uint64_t v58 = (void *)*v58;
        if (!v58) {
          goto LABEL_128;
        }
      }
    }
    while (1)
    {
      unint64_t v59 = v58[1];
      if (v59 == 0x336A901A15BB7353)
      {
        if (v58[2] == 0x336A901A15BB7353)
        {
LABEL_126:
          uint64_t v67 = v58[5];
          if (*(void *)(v67 + 8) == 0x336A901A15BB7353)
          {
            uint64_t v49 = *(void *)(v67 + 32);
            goto LABEL_129;
          }
LABEL_128:
          uint64_t v49 = 0;
LABEL_129:
          if (v45.u32[0] > 1uLL)
          {
            unint64_t v68 = 0xE42D19AFCA302E68;
            if (*(void *)&v44 <= 0xE42D19AFCA302E68) {
              unint64_t v68 = 0xE42D19AFCA302E68 % *(void *)&v44;
            }
          }
          else
          {
            unint64_t v68 = (*(void *)&v44 - 1) & 0xE42D19AFCA302E68;
          }
          uint64_t v69 = *(void **)(v56 + 8 * v68);
          if (!v69) {
            goto LABEL_180;
          }
          uint64_t v70 = (void *)*v69;
          if (!v70) {
            goto LABEL_180;
          }
          if (v45.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v72 = v70[1];
              if (v72 == 0xE42D19AFCA302E68)
              {
                if (v70[2] == 0xE42D19AFCA302E68) {
                  goto LABEL_178;
                }
              }
              else if ((v72 & (*(void *)&v44 - 1)) != v68)
              {
                goto LABEL_180;
              }
              uint64_t v70 = (void *)*v70;
              if (!v70) {
                goto LABEL_180;
              }
            }
          }
          while (2)
          {
            unint64_t v71 = v70[1];
            if (v71 != 0xE42D19AFCA302E68)
            {
              if (v71 >= *(void *)&v44) {
                v71 %= *(void *)&v44;
              }
              if (v71 != v68) {
                goto LABEL_180;
              }
              goto LABEL_138;
            }
            if (v70[2] != 0xE42D19AFCA302E68)
            {
LABEL_138:
              uint64_t v70 = (void *)*v70;
              if (!v70) {
                goto LABEL_180;
              }
              continue;
            }
            break;
          }
LABEL_178:
          uint64_t v82 = v70[5];
          if (*(void *)(v82 + 8) == 0xE42D19AFCA302E68)
          {
            uint64_t v48 = *(void *)(v82 + 32);
            goto LABEL_181;
          }
LABEL_180:
          uint64_t v48 = 0;
LABEL_181:
          if (v45.u32[0] > 1uLL)
          {
            uint64_t v83 = 0x1AF456233693CD46;
            if (*(void *)&v44 <= 0x1AF456233693CD46uLL) {
              uint64_t v83 = 0x1AF456233693CD46uLL % *(void *)&v44;
            }
          }
          else
          {
            uint64_t v83 = (*(void *)&v44 - 1) & 0x1AF456233693CD46;
          }
          uint64_t v84 = *(void **)(v56 + 8 * v83);
          if (!v84) {
            goto LABEL_203;
          }
          uint64_t v85 = (void *)*v84;
          if (!v85) {
            goto LABEL_203;
          }
          if (v45.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v87 = v85[1];
              if (v87 == 0x1AF456233693CD46)
              {
                if (v85[2] == 0x1AF456233693CD46) {
                  goto LABEL_201;
                }
              }
              else if ((v87 & (*(void *)&v44 - 1)) != v83)
              {
                goto LABEL_203;
              }
              uint64_t v85 = (void *)*v85;
              if (!v85) {
                goto LABEL_203;
              }
            }
          }
          while (2)
          {
            unint64_t v86 = v85[1];
            if (v86 != 0x1AF456233693CD46)
            {
              if (v86 >= *(void *)&v44) {
                v86 %= *(void *)&v44;
              }
              if (v86 != v83) {
                goto LABEL_203;
              }
              goto LABEL_190;
            }
            if (v85[2] != 0x1AF456233693CD46)
            {
LABEL_190:
              uint64_t v85 = (void *)*v85;
              if (!v85) {
                goto LABEL_203;
              }
              continue;
            }
            break;
          }
LABEL_201:
          uint64_t v88 = v85[5];
          if (*(void *)(v88 + 8) == 0x1AF456233693CD46)
          {
            uint64_t v50 = *(double **)(v88 + 32);
            goto LABEL_204;
          }
LABEL_203:
          uint64_t v50 = 0;
LABEL_204:
          if (v45.u32[0] > 1uLL)
          {
            unint64_t v89 = 0x99BED48DEFBBD82BLL;
            if (*(void *)&v44 <= 0x99BED48DEFBBD82BLL) {
              unint64_t v89 = 0x99BED48DEFBBD82BLL % *(void *)&v44;
            }
          }
          else
          {
            unint64_t v89 = (*(void *)&v44 - 1) & 0x99BED48DEFBBD82BLL;
          }
          uint64_t v90 = *(void **)(v56 + 8 * v89);
          if (!v90) {
            goto LABEL_226;
          }
          uint64_t v91 = (void *)*v90;
          if (!v91) {
            goto LABEL_226;
          }
          if (v45.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v93 = v91[1];
              if (v93 == 0x99BED48DEFBBD82BLL)
              {
                if (v91[2] == 0x99BED48DEFBBD82BLL) {
                  goto LABEL_224;
                }
              }
              else if ((v93 & (*(void *)&v44 - 1)) != v89)
              {
                goto LABEL_226;
              }
              uint64_t v91 = (void *)*v91;
              if (!v91) {
                goto LABEL_226;
              }
            }
          }
          while (2)
          {
            unint64_t v92 = v91[1];
            if (v92 != 0x99BED48DEFBBD82BLL)
            {
              if (v92 >= *(void *)&v44) {
                v92 %= *(void *)&v44;
              }
              if (v92 != v89) {
                goto LABEL_226;
              }
              goto LABEL_213;
            }
            if (v91[2] != 0x99BED48DEFBBD82BLL)
            {
LABEL_213:
              uint64_t v91 = (void *)*v91;
              if (!v91) {
                goto LABEL_226;
              }
              continue;
            }
            break;
          }
LABEL_224:
          uint64_t v94 = v91[5];
          if (*(void *)(v94 + 8) == 0x99BED48DEFBBD82BLL)
          {
            uint64_t v47 = *(void *)(v94 + 32);
            goto LABEL_227;
          }
LABEL_226:
          uint64_t v47 = 0;
LABEL_227:
          if (v45.u32[0] > 1uLL)
          {
            uint64_t v95 = 0x3070CB6B3C7F21D3;
            if (*(void *)&v44 <= 0x3070CB6B3C7F21D3uLL) {
              uint64_t v95 = 0x3070CB6B3C7F21D3uLL % *(void *)&v44;
            }
          }
          else
          {
            uint64_t v95 = (*(void *)&v44 - 1) & 0x3070CB6B3C7F21D3;
          }
          unint64_t v96 = *(void **)(v56 + 8 * v95);
          if (!v96) {
            goto LABEL_249;
          }
          unint64_t v97 = (void *)*v96;
          if (!v97) {
            goto LABEL_249;
          }
          if (v45.u32[0] < 2uLL)
          {
            uint64_t v98 = *(void *)&v44 - 1;
            while (1)
            {
              uint64_t v100 = v97[1];
              if (v100 == 0x3070CB6B3C7F21D3)
              {
                if (v97[2] == 0x3070CB6B3C7F21D3) {
                  goto LABEL_247;
                }
              }
              else if ((v100 & v98) != v95)
              {
                goto LABEL_249;
              }
              unint64_t v97 = (void *)*v97;
              if (!v97) {
                goto LABEL_249;
              }
            }
          }
          while (1)
          {
            unint64_t v99 = v97[1];
            if (v99 == 0x3070CB6B3C7F21D3)
            {
              if (v97[2] == 0x3070CB6B3C7F21D3)
              {
LABEL_247:
                uint64_t v101 = v97[5];
                if (*(void *)(v101 + 8) == 0x3070CB6B3C7F21D3)
                {
                  int v333 = *(uint64_t **)(v101 + 32);
LABEL_250:
                  if (v49 && v48 && v50 && v47)
                  {
                    uint64_t v102 = *((void *)this + 6);
                    int v103 = *(void **)(v102 + 16);
                    unint64_t v104 = v103[1];
                    if (v104) {
                      unint64_t v105 = (_DWORD *)v103[9];
                    }
                    else {
                      unint64_t v105 = 0;
                    }
                    v105[16] = *(_DWORD *)v49;
                    v105[17] = *(_DWORD *)(v49 + 4);
                    v105[18] = *(_DWORD *)(v49 + 8);
                    v105[19] = *(_DWORD *)(v49 + 12);
                    if (v105 && v104)
                    {
                      if (v103[8] > v104) {
                        unint64_t v104 = v103[8];
                      }
                      v103[7] = 0;
                      v103[8] = v104;
                    }
                    uint64_t v106 = *(void *)(v102 + 32);
                    *(_OWORD *)v372 = 0uLL;
                    uint64_t v107 = *(void *)(v106 + 8);
                    *(void *)&long long v108 = 0;
                    *((void *)&v108 + 1) = v106;
                    if (v107) {
                      uint64_t v109 = *(void *)(v106 + 72);
                    }
                    else {
                      uint64_t v109 = 0;
                    }
                    unsigned int v110 = 0;
                    *(_OWORD *)v372 = v108;
                    *(void *)&v372[16] = 0;
                    *(void *)&long long v373 = v107;
                    *(void *)&long long v374 = v109;
                    int v111 = 1;
                    WORD4(v373) = 1;
                    uint64_t v338 = v50;
                    float v112 = v50[4];
                    do
                    {
                      int v113 = v111;
                      v111 *= 8;
                      float v114 = (float)v111;
                      BOOL v115 = (float)v111 >= v112 || v110++ >= 0xF;
                    }
                    while (!v115);
                    float v116 = (float)(fminf(fmaxf((float)v113, v112), v114) - (float)v113) / (float)(v114 - (float)v113);
                    BOOL v117 = (float)v113 <= v112;
                    float v118 = 0.0;
                    if (v117) {
                      float v118 = 1.0;
                    }
                    if ((float)v113 != v114) {
                      float v118 = v116;
                    }
                    float v119 = (float)(v118 * v118) * (float)((float)(v118 * -2.0) + 3.0);
                    double v120 = log2((double)v113);
                    if (v120 >= 7) {
                      unsigned int v121 = (v120 - 6) / 3;
                    }
                    else {
                      unsigned int v121 = 0;
                    }
                    *(float *)(v109 + 24) = v119;
                    *(_DWORD *)uint64_t v109 = *(_DWORD *)(v49 + 16);
                    *(_DWORD *)(v109 + 4) = *(_DWORD *)(v49 + 20);
                    *(_DWORD *)(v109 + 8) = *(_DWORD *)(v49 + 24);
                    *(_DWORD *)(v109 + 12) = *(_DWORD *)(v49 + 28);
                    unint64_t v122 = v338;
                    double v123 = v338[5];
                    double v125 = v338[46];
                    double v124 = v338[47];
                    if (v124 >= v125)
                    {
                      double v131 = v338[57];
                    }
                    else
                    {
                      double v126 = v124 * v125;
                      double v127 = v124 / v125;
                      if (v126 <= 0.0) {
                        double v128 = 1.0;
                      }
                      else {
                        double v128 = v127;
                      }
                      long double v129 = tan(v338[57] * 0.5);
                      long double v130 = atan(v128 * v129);
                      unint64_t v122 = v338;
                      double v131 = v130 + v130;
                    }
                    double v132 = v131 * -0.5 + 1.48352986;
                    int v133 = 0;
                    if (v132 < v123) {
                      int v133 = *(_DWORD *)(v49 + 60);
                    }
                    *(_DWORD *)(v109 + 48) = v133;
                    unsigned int v134 = *(unsigned __int8 *)(v102 + 353);
                    unsigned int v135 = *(unsigned __int8 *)(v102 + 352);
                    double v334 = 0.0;
                    if (*((unsigned char *)v122 + 3776))
                    {
                      if (*(unsigned char *)(v49 + 48)) {
                        double v334 = *(double *)(v49 + 40);
                      }
                      int v136 = 8;
                    }
                    else
                    {
                      int v136 = 1;
                    }
                    unsigned int v137 = *(unsigned __int16 **)(*(void *)v47 + 112);
                    unint64_t v138 = *(unsigned __int16 **)(*(void *)v47 + 120);
                    int v343 = this;
                    uint64_t v347 = v49;
                    uint64_t v139 = v137;
                    if (v137 != v138)
                    {
                      while (*v139 != v136)
                      {
                        v139 += 56;
                        if (v139 == v138)
                        {
                          uint64_t v139 = *(unsigned __int16 **)(*(void *)v47 + 120);
                          break;
                        }
                      }
                      if (v137 != v138)
                      {
                        while (*v137 != 1)
                        {
                          v137 += 56;
                          if (v137 == v138)
                          {
                            unsigned int v137 = *(unsigned __int16 **)(*(void *)v47 + 120);
                            break;
                          }
                        }
                      }
                    }
                    uint64_t v140 = *((void *)v139 + 11);
                    if (v140) {
                      BOOL v141 = v140 == *((void *)v137 + 5);
                    }
                    else {
                      BOOL v141 = 0;
                    }
                    if (!v141 || *(unsigned char *)(v49 + 56)) {
                      goto LABEL_469;
                    }
                    uint64_t v142 = v137 + 8;
                    uint64_t v143 = v139 + 40;
                    while (1)
                    {
                      uint64_t v143 = *(unsigned __int16 **)v143;
                      if (!v143) {
                        break;
                      }
                      if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v142, (unsigned __int8 *)v143 + 16))goto LABEL_469; {
                    }
                      }
                    int8x8_t v144 = (int8x8_t)v43[1];
                    uint8x8_t v145 = (uint8x8_t)vcnt_s8(v144);
                    v145.i16[0] = vaddlv_u8(v145);
                    if (v145.u32[0] > 1uLL)
                    {
                      unint64_t v146 = 0xE42D19AFCA302E68;
                      if (*(void *)&v144 <= 0xE42D19AFCA302E68) {
                        unint64_t v146 = 0xE42D19AFCA302E68 % *(void *)&v144;
                      }
                    }
                    else
                    {
                      unint64_t v146 = (*(void *)&v144 - 1) & 0xE42D19AFCA302E68;
                    }
                    uint64_t v147 = *v43;
                    v148 = *(void **)(*v43 + 8 * v146);
                    if (!v148) {
                      goto LABEL_349;
                    }
                    uint64_t v149 = (void *)*v148;
                    if (!v149) {
                      goto LABEL_349;
                    }
                    if (v145.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v151 = v149[1];
                        if (v151 == 0xE42D19AFCA302E68)
                        {
                          if (v149[2] == 0xE42D19AFCA302E68) {
                            goto LABEL_347;
                          }
                        }
                        else if ((v151 & (*(void *)&v144 - 1)) != v146)
                        {
                          goto LABEL_349;
                        }
                        uint64_t v149 = (void *)*v149;
                        if (!v149) {
                          goto LABEL_349;
                        }
                      }
                    }
                    while (2)
                    {
                      unint64_t v150 = v149[1];
                      if (v150 != 0xE42D19AFCA302E68)
                      {
                        if (v150 >= *(void *)&v144) {
                          v150 %= *(void *)&v144;
                        }
                        if (v150 != v146) {
                          goto LABEL_349;
                        }
                        goto LABEL_318;
                      }
                      if (v149[2] != 0xE42D19AFCA302E68)
                      {
LABEL_318:
                        uint64_t v149 = (void *)*v149;
                        if (!v149) {
                          goto LABEL_349;
                        }
                        continue;
                      }
                      break;
                    }
LABEL_347:
                    uint64_t v156 = v149[5];
                    if (*(void *)(v156 + 8) == 0xE42D19AFCA302E68)
                    {
                      v157 = *(uint64_t **)(v156 + 32);
                      goto LABEL_350;
                    }
LABEL_349:
                    v157 = 0;
LABEL_350:
                    if (v145.u32[0] > 1uLL)
                    {
                      unint64_t v158 = 0x99BED48DEFBBD82BLL;
                      if (*(void *)&v144 <= 0x99BED48DEFBBD82BLL) {
                        unint64_t v158 = 0x99BED48DEFBBD82BLL % *(void *)&v144;
                      }
                    }
                    else
                    {
                      unint64_t v158 = (*(void *)&v144 - 1) & 0x99BED48DEFBBD82BLL;
                    }
                    v159 = *(void **)(v147 + 8 * v158);
                    if (!v159) {
                      goto LABEL_372;
                    }
                    v160 = (void *)*v159;
                    if (!v160) {
                      goto LABEL_372;
                    }
                    if (v145.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v162 = v160[1];
                        if (v162 == 0x99BED48DEFBBD82BLL)
                        {
                          if (v160[2] == 0x99BED48DEFBBD82BLL) {
                            goto LABEL_370;
                          }
                        }
                        else if ((v162 & (*(void *)&v144 - 1)) != v158)
                        {
                          goto LABEL_372;
                        }
                        v160 = (void *)*v160;
                        if (!v160) {
                          goto LABEL_372;
                        }
                      }
                    }
                    while (2)
                    {
                      unint64_t v161 = v160[1];
                      if (v161 != 0x99BED48DEFBBD82BLL)
                      {
                        if (v161 >= *(void *)&v144) {
                          v161 %= *(void *)&v144;
                        }
                        if (v161 != v158) {
                          goto LABEL_372;
                        }
                        goto LABEL_359;
                      }
                      if (v160[2] != 0x99BED48DEFBBD82BLL)
                      {
LABEL_359:
                        v160 = (void *)*v160;
                        if (!v160) {
                          goto LABEL_372;
                        }
                        continue;
                      }
                      break;
                    }
LABEL_370:
                    uint64_t v163 = v160[5];
                    if (*(void *)(v163 + 8) == 0x99BED48DEFBBD82BLL)
                    {
                      uint64_t v164 = *(uint64_t **)(v163 + 32);
                      goto LABEL_373;
                    }
LABEL_372:
                    uint64_t v164 = 0;
LABEL_373:
                    if (v145.u32[0] > 1uLL)
                    {
                      unint64_t v165 = 0xD2404CDD1F9A6950;
                      if (*(void *)&v144 <= 0xD2404CDD1F9A6950) {
                        unint64_t v165 = 0xD2404CDD1F9A6950 % *(void *)&v144;
                      }
                    }
                    else
                    {
                      unint64_t v165 = (*(void *)&v144 - 1) & 0xD2404CDD1F9A6950;
                    }
                    v166 = *(void **)(v147 + 8 * v165);
                    if (!v166) {
                      goto LABEL_395;
                    }
                    int8x8_t v167 = (void *)*v166;
                    if (!v167) {
                      goto LABEL_395;
                    }
                    if (v145.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v169 = v167[1];
                        if (v169 == 0xD2404CDD1F9A6950)
                        {
                          if (v167[2] == 0xD2404CDD1F9A6950) {
                            goto LABEL_393;
                          }
                        }
                        else if ((v169 & (*(void *)&v144 - 1)) != v165)
                        {
                          goto LABEL_395;
                        }
                        int8x8_t v167 = (void *)*v167;
                        if (!v167) {
                          goto LABEL_395;
                        }
                      }
                    }
                    while (2)
                    {
                      unint64_t v168 = v167[1];
                      if (v168 != 0xD2404CDD1F9A6950)
                      {
                        if (v168 >= *(void *)&v144) {
                          v168 %= *(void *)&v144;
                        }
                        if (v168 != v165) {
                          goto LABEL_395;
                        }
                        goto LABEL_382;
                      }
                      if (v167[2] != 0xD2404CDD1F9A6950)
                      {
LABEL_382:
                        int8x8_t v167 = (void *)*v167;
                        if (!v167) {
                          goto LABEL_395;
                        }
                        continue;
                      }
                      break;
                    }
LABEL_393:
                    uint64_t v170 = v167[5];
                    if (*(void *)(v170 + 8) == 0xD2404CDD1F9A6950)
                    {
                      uint64_t v171 = *(void *)(v170 + 32);
                      goto LABEL_396;
                    }
LABEL_395:
                    uint64_t v171 = 0;
LABEL_396:
                    if (v145.u32[0] >= 2uLL)
                    {
                      unint64_t v173 = 0x336A901A15BB7353;
                      if (*(void *)&v144 <= 0x336A901A15BB7353uLL) {
                        unint64_t v173 = 0x336A901A15BB7353uLL % *(void *)&v144;
                      }
                      v172 = *(void **)(v147 + 8 * v173);
                      do
                      {
                        do
                          v172 = (void *)*v172;
                        while (v172[1] != 0x336A901A15BB7353);
                      }
                      while (v172[2] != 0x336A901A15BB7353);
                    }
                    else
                    {
                      v172 = *(void **)(v147 + 8 * ((*(void *)&v144 - 1) & 0x336A901A15BB7353));
                      do
                      {
                        do
                          v172 = (void *)*v172;
                        while (v172[1] != 0x336A901A15BB7353);
                      }
                      while (v172[2] != 0x336A901A15BB7353);
                    }
                    int v174 = *(unsigned __int8 *)(*(void *)(v172[5] + 32) + 32);
                    uint64_t v175 = *v164;
                    unint64_t v176 = *(unsigned __int16 **)(*v164 + 184);
                    unint64_t v177 = *(unsigned __int16 **)(*v164 + 192);
                    if (v176 == v177)
                    {
LABEL_415:
                      unsigned int v181 = *(unsigned __int16 **)(v175 + 208);
                      v182 = *(unsigned __int16 **)(v175 + 216);
                      if (v181 == v182)
                      {
                        BOOL v185 = 1;
                      }
                      else
                      {
                        unint64_t v183 = *(unsigned __int16 **)(v175 + 120);
                        do
                        {
                          uint64_t v187 = *(unsigned __int16 **)(v175 + 112);
                          if (v187 != v183)
                          {
                            uint64_t v187 = *(unsigned __int16 **)(v175 + 112);
                            while (*v187 != *v181)
                            {
                              v187 += 56;
                              if (v187 == v183)
                              {
                                uint64_t v187 = *(unsigned __int16 **)(v175 + 120);
                                break;
                              }
                            }
                          }
                          int v184 = *((unsigned __int8 *)v187 + 8);
                          BOOL v185 = v184 != 0;
                          ++v181;
                          if (v184) {
                            BOOL v186 = v181 == v182;
                          }
                          else {
                            BOOL v186 = 1;
                          }
                        }
                        while (!v186);
                      }
                    }
                    else
                    {
                      char v178 = *(unsigned __int16 **)(v175 + 120);
                      unint64_t v179 = *(unsigned __int16 **)(*v164 + 184);
                      while (1)
                      {
                        unint64_t v180 = *(unsigned __int16 **)(v175 + 112);
                        if (v180 != v178)
                        {
                          unint64_t v180 = *(unsigned __int16 **)(v175 + 112);
                          while (*v180 != *v179)
                          {
                            v180 += 56;
                            if (v180 == v178)
                            {
                              unint64_t v180 = *(unsigned __int16 **)(v175 + 120);
                              break;
                            }
                          }
                        }
                        if (!*((unsigned char *)v180 + 8)) {
                          break;
                        }
                        if (++v179 == v177) {
                          goto LABEL_415;
                        }
                      }
                      BOOL v185 = 0;
                    }
                    int v188 = *(unsigned __int8 *)(v175 + 280);
                    if (v176 == v177)
                    {
LABEL_437:
                      v191 = *(unsigned __int16 **)(v175 + 208);
                      uint64_t v192 = *(unsigned __int16 **)(v175 + 216);
                      if (v191 == v192)
                      {
                        BOOL v196 = 0;
                      }
                      else
                      {
                        v194 = *(unsigned __int16 **)(v175 + 112);
                        v193 = *(unsigned __int16 **)(v175 + 120);
                        do
                        {
                          v198 = v194;
                          if (v194 != v193)
                          {
                            v198 = v194;
                            while (*v198 != *v191)
                            {
                              v198 += 56;
                              if (v198 == v193)
                              {
                                v198 = v193;
                                break;
                              }
                            }
                          }
                          uint64_t v195 = *((void *)v198 + 5);
                          BOOL v196 = v195 != 0;
                          ++v191;
                          if (v195) {
                            BOOL v197 = 1;
                          }
                          else {
                            BOOL v197 = v191 == v192;
                          }
                        }
                        while (!v197);
                      }
                    }
                    else
                    {
                      uint64_t v189 = *(unsigned __int16 **)(v175 + 120);
                      while (1)
                      {
                        v190 = *(unsigned __int16 **)(v175 + 112);
                        if (v190 != v189)
                        {
                          v190 = *(unsigned __int16 **)(v175 + 112);
                          while (*v190 != *v176)
                          {
                            v190 += 56;
                            if (v190 == v189)
                            {
                              v190 = *(unsigned __int16 **)(v175 + 120);
                              break;
                            }
                          }
                        }
                        if (*((void *)v190 + 5)) {
                          break;
                        }
                        if (++v176 == v177) {
                          goto LABEL_437;
                        }
                      }
                      BOOL v196 = 1;
                    }
                    uint64_t v199 = *v157;
                    BOOL v200 = v199 != 0;
                    unsigned __int8 v201 = atomic_load((unsigned __int8 *)(*(void *)(v199 + 16) + 2787));
                    int v202 = v201 & 1;
                    if (v171) {
                      int v203 = *(unsigned char *)(v171 + 74) != 0;
                    }
                    else {
                      int v203 = 0;
                    }
                    if (v174) {
                      BOOL v204 = v185;
                    }
                    else {
                      BOOL v204 = 0;
                    }
                    if (v188) {
                      BOOL v204 = 0;
                    }
                    if (v199) {
                      BOOL v205 = v204;
                    }
                    else {
                      BOOL v205 = 0;
                    }
                    if (!v202) {
                      BOOL v205 = 0;
                    }
                    if (v205 & ~v203 & v196) {
                      goto LABEL_541;
                    }
                    BOOL v339 = v200;
                    int v344 = v188;
                    int v350 = v174;
                    double v206 = trunc(*(double *)(md::LayoutContext::frameState(a2) + 88) * 1000.0);
                    if (v206 - *((double *)v343 + 8) > 3000.0)
                    {
                      *((double *)v343 + 8) = v206;
                      if (GEOGetVectorKitVKMapIsOpaqueStateLog::onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitVKMapIsOpaqueStateLog::onceToken, &__block_literal_global_734);
                      }
                      int v207 = GEOGetVectorKitVKMapIsOpaqueStateLog::log;
                      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKMapIsOpaqueStateLog::log, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 67110656;
                        *(_DWORD *)&uint8_t buf[4] = v350;
                        *(_WORD *)&uint8_t buf[8] = 1024;
                        *(_DWORD *)&buf[10] = v185;
                        *(_WORD *)&buf[14] = 1024;
                        *(_DWORD *)&buf[16] = v344;
                        *(_WORD *)&buf[20] = 1024;
                        *(_DWORD *)&buf[22] = v196;
                        *(_WORD *)&buf[26] = 1024;
                        *(_DWORD *)&buf[28] = v339;
                        *(_WORD *)&unsigned char buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v202;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v203;
                        _os_log_impl(&dword_1A1780000, v207, OS_LOG_TYPE_INFO, "Allow Opaque:%d, Finished Loading Required:%d, Has Tile Exclusion Areas:%d, Has Any Tiles:%d, Has Style Manager:%d, Is Style Manager Valid:%d, Has Pending Materials:%d", buf, 0x2Cu);
                      }
                    }
LABEL_469:
                    int v208 = (void *)*((void *)a2 + 1);
                    int8x8_t v209 = (int8x8_t)v208[1];
                    if (!*(void *)&v209) {
                      goto LABEL_492;
                    }
                    uint8x8_t v210 = (uint8x8_t)vcnt_s8(v209);
                    v210.i16[0] = vaddlv_u8(v210);
                    if (v210.u32[0] > 1uLL)
                    {
                      uint64_t v211 = 0x44B2D9808992962CLL;
                      if (*(void *)&v209 <= 0x44B2D9808992962CuLL) {
                        uint64_t v211 = 0x44B2D9808992962CuLL % *(void *)&v209;
                      }
                    }
                    else
                    {
                      uint64_t v211 = (*(void *)&v209 - 1) & 0x44B2D9808992962CLL;
                    }
                    v212 = *(void **)(*v208 + 8 * v211);
                    if (!v212) {
                      goto LABEL_492;
                    }
                    uint64_t v213 = (void *)*v212;
                    if (!v213) {
                      goto LABEL_492;
                    }
                    if (v210.u32[0] < 2uLL)
                    {
                      uint64_t v214 = *(void *)&v209 - 1;
                      while (1)
                      {
                        uint64_t v216 = v213[1];
                        if (v216 == 0x44B2D9808992962CLL)
                        {
                          if (v213[2] == 0x44B2D9808992962CLL) {
                            goto LABEL_490;
                          }
                        }
                        else if ((v216 & v214) != v211)
                        {
                          goto LABEL_492;
                        }
                        uint64_t v213 = (void *)*v213;
                        if (!v213) {
                          goto LABEL_492;
                        }
                      }
                    }
                    while (2)
                    {
                      unint64_t v215 = v213[1];
                      if (v215 != 0x44B2D9808992962CLL)
                      {
                        if (v215 >= *(void *)&v209) {
                          v215 %= *(void *)&v209;
                        }
                        if (v215 != v211) {
                          goto LABEL_492;
                        }
                        goto LABEL_479;
                      }
                      if (v213[2] != 0x44B2D9808992962CLL)
                      {
LABEL_479:
                        uint64_t v213 = (void *)*v213;
                        if (!v213) {
                          goto LABEL_492;
                        }
                        continue;
                      }
                      break;
                    }
LABEL_490:
                    uint64_t v217 = v213[5];
                    if (*(void *)(v217 + 8) == 0x44B2D9808992962CLL)
                    {
                      uint64_t v336 = *(void *)(v217 + 32);
                      goto LABEL_493;
                    }
LABEL_492:
                    uint64_t v336 = 0;
LABEL_493:
                    uint64_t v218 = (uint64_t *)*((void *)v139 + 10);
                    if (!v218)
                    {
LABEL_541:
                      if ((void)v374 && (void)v373 != *(void *)&v372[16])
                      {
                        uint64_t v289 = *(void *)&v372[8];
                        if (*(void *)v372 && *(unsigned char *)(*(void *)&v372[8] + 17) != 2) {
                          (*(void (**)(void))(**(void **)v372 + 64))();
                        }
                        if (BYTE8(v373) && !BYTE9(v373))
                        {
                          unint64_t v291 = *(void *)(*(void *)&v372[8] + 56);
                          unint64_t v290 = *(void *)(*(void *)&v372[8] + 64);
                          if (v290 == v291) {
                            unint64_t v291 = *(void *)(*(void *)&v372[8] + 80) - *(void *)(*(void *)&v372[8] + 72);
                          }
                          if (*(void *)&v372[16] < v291) {
                            unint64_t v291 = *(void *)&v372[16];
                          }
                          if (v290 <= (unint64_t)v373) {
                            unint64_t v290 = v373;
                          }
                          if (v290 == v291) {
                            unint64_t v290 = v291
                          }
                                 + *(void *)(*(void *)&v372[8] + 80)
                                 - *(void *)(*(void *)&v372[8] + 72);
                          *(void *)(*(void *)&v372[8] + 56) = v291;
                          *(void *)(v289 + 64) = v290;
                        }
                      }
                      goto LABEL_599;
                    }
                    double v335 = pow((double)(v134 / v135), -(double)v121);
                    while (2)
                    {
                      if (*(unsigned char *)(v347 + 56)) {
                        BOOL v219 = v336 == 0;
                      }
                      else {
                        BOOL v219 = 1;
                      }
                      if (v219
                        || (v220 = std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((void *)(v336 + 8), (unsigned __int8 *)v218 + 16)) == 0|| (uint64_t v221 = v220[5], v221 == v336 + 48))
                      {
                        uint64_t v222 = 0;
                        uint64_t v226 = 0;
                        uint64_t v225 = 0;
                        uint64_t v227 = 0;
                        double v223 = v334;
                        double v224 = v338;
                      }
                      else
                      {
                        uint64_t v222 = *(void *)(v221 + 40);
                        double v223 = 0.0;
                        double v224 = v338;
                        if (*(unsigned char *)(v221 + 80))
                        {
                          uint64_t v226 = *(void *)(v221 + 56);
                          uint64_t v225 = *(void *)(v221 + 64);
                          uint64_t v227 = *(void *)(v221 + 72);
                        }
                        else
                        {
                          uint64_t v226 = 0;
                          uint64_t v225 = 0;
                          uint64_t v227 = 0;
                        }
                      }
                      int v228 = *((unsigned __int8 *)v224 + 3776);
                      unsigned int v229 = (void *)*((void *)v343 + 6);
                      v388[0] = *((_WORD *)v218 + 8);
                      uint64_t v389 = *(uint64_t *)((char *)v218 + 20);
                      uint64_t v351 = v222;
                      uint64_t v390 = v222;
                      v230 = (char *)(v229 + 34);
                      uint64_t v231 = std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>(v229 + 37, (unsigned __int8 *)v388);
                      if (!v231)
                      {
LABEL_519:
                        uint64_t v244 = operator new(0xE8uLL);
                        v244[1] = 0;
                        v244[2] = 0;
                        *uint64_t v244 = &unk_1EF586DB8;
                        uint64_t v245 = ggl::BufferData::BufferData((uint64_t)(v244 + 3), qword_1E9552208, 2, 1, 6, 1);
                        v244[28] = ggl::Tile::View::reflection(void)::reflection;
                        v244[3] = &unk_1EF55E258;
                        *(void *)&v381.f64[0] = v245;
                        *(void *)&v381.f64[1] = v244;
                        v246 = operator new(0xE8uLL);
                        v246[1] = 0;
                        v246[2] = 0;
                        void *v246 = &unk_1EF587758;
                        uint64_t v247 = ggl::BufferData::BufferData((uint64_t)(v246 + 3), qword_1E954F0D0, 2, 1, 6, 1);
                        v246[28] = ggl::GridBase::GridView::reflection(void)::reflection;
                        v246[3] = &unk_1EF55E938;
                        uint64_t v362 = v247;
                        *(void *)&long long v363 = v246;
                        if ((v228 - 1) > 2)
                        {
                          v361[0] = 0uLL;
                          if (v351) {
LABEL_521:
                          }
                            operator new();
                        }
                        else
                        {
                          md::GeometryContext::transformConstantData(v361[0].f64, v333, (unsigned __int8 *)v218 + 16, v228, 0.0, 0.0);
                          if (v351) {
                            goto LABEL_521;
                          }
                        }
                        operator new();
                      }
                      uint64_t v232 = v231;
                      uint64_t v233 = (char *)v231[6];
                      uint64_t v234 = (char *)operator new(0x48uLL);
                      char v235 = v234;
                      *((_WORD *)v234 + 8) = *((_WORD *)v233 + 8);
                      *(void *)(v234 + 20) = *(void *)(v233 + 20);
                      *(_OWORD *)(v234 + 40) = *(_OWORD *)(v233 + 40);
                      uint64_t v236 = *((void *)v233 + 7);
                      *((void *)v234 + 7) = v236;
                      if (v236) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v236 + 8), 1uLL, memory_order_relaxed);
                      }
                      *((void *)v234 + 8) = *((void *)v233 + 8);
                      uint64_t v237 = v229[34];
                      *(void *)(v237 + 8) = v234;
                      *(void *)uint64_t v234 = v237;
                      v229[34] = v234;
                      *((void *)v234 + 1) = v230;
                      uint64_t v238 = v229[36];
                      v239 = (char *)v229[42];
                      if (v239 == v233)
                      {
                        v240 = (char *)*((void *)v233 + 1);
                        goto LABEL_512;
                      }
                      v240 = v234;
                      if (v239 == v230) {
LABEL_512:
                      }
                        v229[42] = v240;
                      uint64_t v241 = *(void *)v233;
                      *(void *)(v241 + 8) = *((void *)v233 + 1);
                      **((void **)v233 + 1) = v241;
                      v229[36] = v238;
                      int v242 = (std::__shared_weak_count *)*((void *)v233 + 7);
                      if (v242 && !atomic_fetch_add(&v242->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                      operator delete(v233);
                      v232[6] = (uint64_t)v235;
                      if (v230 == v235) {
                        goto LABEL_519;
                      }
                      v243 = (std::__shared_weak_count *)*((void *)v235 + 7);
                      uint64_t v395 = *((void *)v235 + 6);
                      double v396 = v243;
                      if (v243) {
                        atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      int v248 = 1 << *((unsigned char *)v218 + 17);
                      double v249 = 1.0 / (double)v248;
                      uint64_t v250 = *((int *)v218 + 6);
                      int v251 = v248 + ~*((_DWORD *)v218 + 5);
                      *(double *)buf = v249 * (double)v250;
                      *(double *)&uint8_t buf[8] = v249 * (double)v251;
                      *(double *)&buf[16] = v249 + (double)v250 * v249;
                      *(double *)&uint8_t buf[24] = v249 + (double)v251 * v249;
                      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v381, (double *)buf, v223, v223);
                      int v252 = 1 << *((unsigned char *)v218 + 17);
                      double v253 = 1.0 / (double)v252;
                      double v254 = v253 * (double)(v252 + ~*((_DWORD *)v218 + 5));
                      double v255 = gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(v254, v254 + v253);
                      int v256 = LODWORD(v255);
                      int v258 = v257;
                      int v260 = v259;
                      int v262 = v261;
                      uint64_t v263 = v395;
                      uint64_t v264 = *(void **)(v395 + 24);
                      unint64_t v265 = v264[1];
                      if (v265)
                      {
                        uint64_t v266 = (float32x4_t *)v264[9];
                        if (v351) {
                          goto LABEL_527;
                        }
LABEL_529:
                        v408.f64[1] = 0.0;
                        memset(&buf[8], 0, 72);
                        *((void *)&v410 + 1) = 0x3FF0000000000000;
                        float64x2_t v409 = *(float64x2_t *)&v384[8];
                        *(void *)&long long v410 = *(void *)&v384[24];
                        *(double *)buf = v385.f64[0] - *(double *)&v384[8];
                        *(double *)&buf[40] = v385.f64[1] - *(double *)&v384[16];
                        v408.f64[0] = v386.f64[0] - *(double *)&v384[24];
                        double v268 = v383.f64[0];
                        double v269 = v268 + v268;
                        double v270 = (v268 + v268) * v268;
                        float64_t v271 = (v383.f64[1] + v383.f64[1]) * v383.f64[1];
                        double v272 = v382.f64[1];
                        double v273 = v272 + v272;
                        double v274 = (v272 + v272) * v383.f64[0];
                        float64_t v275 = (v383.f64[1] + v383.f64[1]) * *(double *)v384;
                        float64_t v276 = v383.f64[1] * (v272 + v272);
                        double v277 = 1.0 - (v272 + v272) * v272;
                        *(double *)unsigned int v391 = 1.0 - (v270 + v271);
                        *(double *)&v391[8] = v275 + v274;
                        *(double *)&v392[8] = v274 - v275;
                        *(double *)&v392[16] = v277 - v271;
                        *(double *)&v392[40] = *(double *)v384 * v269 + v276;
                        *(double *)&v392[48] = v269 * v383.f64[1] - *(double *)v384 * v273;
                        *(double *)&v391[16] = v276 - *(double *)v384 * v269;
                        *(double *)&v392[24] = *(double *)v384 * v273 + v269 * v383.f64[1];
                        *(double *)double v393 = v277 - v270;
                        *(void *)char v392 = 0;
                        *(void *)&v392[32] = 0;
                        *(void *)&v393[8] = 0;
                        *(float64x2_t *)&v393[16] = v381;
                        *(float64_t *)&v393[32] = v382.f64[0];
                        uint64_t v394 = 0x3FF0000000000000;
                        gm::operator*<double,4,4,4>((double *)v388, (double *)v391, (double *)buf);
                        v267 = (double *)v388;
                      }
                      else
                      {
                        uint64_t v266 = 0;
                        if (!v351) {
                          goto LABEL_529;
                        }
LABEL_527:
                        *(_OWORD *)unsigned int v391 = xmmword_1A28FCBD0;
                        *(void *)char v392 = 0;
                        *(void *)&v391[16] = 0;
                        memset(&v392[24], 0, 32);
                        *(_OWORD *)&v392[8] = xmmword_1A28FCCC0;
                        *(_OWORD *)double v393 = xmmword_1A28FCBD0;
                        *(void *)&v393[16] = v226;
                        *(void *)&v393[24] = v225;
                        *(void *)&v393[32] = v227;
                        uint64_t v394 = 0x3FF0000000000000;
                        v267 = (double *)v391;
                      }
                      gm::operator*<double,4,4,4>((double *)buf, v338 + 101, v267);
                      float32x4_t v278 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v409), (float64x2_t)v410);
                      float32x4_t v279 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&buf[64]), v408);
                      float32x4_t v280 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&buf[32]), *(float64x2_t *)&buf[48]);
                      *uint64_t v266 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)buf), *(float64x2_t *)&buf[16]);
                      v266[1] = v280;
                      v266[2] = v279;
                      v266[3] = v278;
                      v266[4].i32[0] = 1065353216;
                      unsigned int v281 = *((unsigned __int8 *)v218 + 17);
                      double v282 = (double)(1 << (19 - v281));
                      if (v281 >= 0x13) {
                        double v282 = 1.0;
                      }
                      float v283 = v282 * v335;
                      uint64_t v284 = *(void **)(v263 + 40);
                      unint64_t v285 = v284[1];
                      uint64_t v286 = v284[9];
                      *(float *)uint64_t v286 = v283;
                      *(_DWORD *)(v286 + 4) = 0;
                      *(_DWORD *)(v286 + 8) = 0;
                      *(_DWORD *)(v286 + 12) = v256;
                      *(_DWORD *)(v286 + 16) = 0;
                      *(float *)(v286 + 20) = v283;
                      *(_DWORD *)(v286 + 24) = 0;
                      *(_DWORD *)(v286 + 28) = v258;
                      *(void *)(v286 + 32) = 0;
                      *(_DWORD *)(v286 + 40) = 1065353216;
                      *(_DWORD *)(v286 + 44) = v260;
                      *(void *)(v286 + 48) = 0;
                      *(_DWORD *)(v286 + 56) = 0;
                      *(_DWORD *)(v286 + 60) = v262;
                      *(_DWORD *)(v286 + 64) = *(_DWORD *)v347;
                      *(_DWORD *)(v286 + 68) = *(_DWORD *)(v347 + 4);
                      *(_DWORD *)(v286 + 72) = *(_DWORD *)(v347 + 8);
                      *(_DWORD *)(v286 + 76) = *(_DWORD *)(v347 + 12);
                      if (v284[8] > v285) {
                        unint64_t v285 = v284[8];
                      }
                      v284[7] = 0;
                      v284[8] = v285;
                      if (v265)
                      {
                        unint64_t v287 = v264[8];
                        if (v287 <= v265) {
                          unint64_t v287 = v265;
                        }
                        v264[7] = 0;
                        v264[8] = v287;
                      }
                      ggl::CommandBuffer::pushRenderItem(v337, v263 + 80);
                      unsigned __int8 v288 = v396;
                      if (v396 && !atomic_fetch_add(&v396->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                        std::__shared_weak_count::__release_weak(v288);
                      }
                      uint64_t v218 = (uint64_t *)*v218;
                      if (!v218) {
                        goto LABEL_541;
                      }
                      continue;
                    }
                  }
                  goto LABEL_599;
                }
LABEL_249:
                int v333 = 0;
                goto LABEL_250;
              }
            }
            else
            {
              if (v99 >= *(void *)&v44) {
                v99 %= *(void *)&v44;
              }
              if (v99 != v95) {
                goto LABEL_249;
              }
            }
            unint64_t v97 = (void *)*v97;
            if (!v97) {
              goto LABEL_249;
            }
          }
        }
      }
      else
      {
        if (v59 >= *(void *)&v44) {
          v59 %= *(void *)&v44;
        }
        if (v59 != v46) {
          goto LABEL_128;
        }
      }
      uint64_t v58 = (void *)*v58;
      if (!v58) {
        goto LABEL_128;
      }
    }
  }
  unint64_t v39 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v40 = (int8x8_t)v39[1];
  if (!*(void *)&v40) {
    goto LABEL_599;
  }
  uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
  v41.i16[0] = vaddlv_u8(v41);
  if (v41.u32[0] > 1uLL)
  {
    uint64_t v42 = 0x336A901A15BB7353;
    if (*(void *)&v40 <= 0x336A901A15BB7353uLL) {
      uint64_t v42 = 0x336A901A15BB7353uLL % *(void *)&v40;
    }
  }
  else
  {
    uint64_t v42 = (*(void *)&v40 - 1) & 0x336A901A15BB7353;
  }
  uint64_t v51 = *v39;
  unint64_t v52 = *(void **)(*v39 + 8 * v42);
  if (!v52) {
    goto LABEL_105;
  }
  uint64_t v53 = (void *)*v52;
  if (!v53) {
    goto LABEL_105;
  }
  if (v41.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v55 = v53[1];
      if (v55 == 0x336A901A15BB7353)
      {
        if (v53[2] == 0x336A901A15BB7353) {
          goto LABEL_103;
        }
      }
      else if ((v55 & (*(void *)&v40 - 1)) != v42)
      {
        goto LABEL_105;
      }
      uint64_t v53 = (void *)*v53;
      if (!v53) {
        goto LABEL_105;
      }
    }
  }
  while (1)
  {
    unint64_t v54 = v53[1];
    if (v54 == 0x336A901A15BB7353) {
      break;
    }
    if (v54 >= *(void *)&v40) {
      v54 %= *(void *)&v40;
    }
    if (v54 != v42) {
      goto LABEL_105;
    }
LABEL_74:
    uint64_t v53 = (void *)*v53;
    if (!v53) {
      goto LABEL_105;
    }
  }
  if (v53[2] != 0x336A901A15BB7353) {
    goto LABEL_74;
  }
LABEL_103:
  uint64_t v61 = v53[5];
  if (*(void *)(v61 + 8) == 0x336A901A15BB7353)
  {
    unint64_t v62 = *(float **)(v61 + 32);
    goto LABEL_106;
  }
LABEL_105:
  unint64_t v62 = 0;
LABEL_106:
  if (v41.u32[0] > 1uLL)
  {
    unint64_t v63 = 0xE42D19AFCA302E68;
    if (*(void *)&v40 <= 0xE42D19AFCA302E68) {
      unint64_t v63 = 0xE42D19AFCA302E68 % *(void *)&v40;
    }
  }
  else
  {
    unint64_t v63 = (*(void *)&v40 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v64 = *(void **)(v51 + 8 * v63);
  if (!v64) {
    goto LABEL_152;
  }
  uint64_t v64 = (void *)*v64;
  if (!v64) {
    goto LABEL_152;
  }
  if (v41.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v66 = v64[1];
      if (v66 == 0xE42D19AFCA302E68)
      {
        if (v64[2] == 0xE42D19AFCA302E68) {
          goto LABEL_149;
        }
      }
      else if ((v66 & (*(void *)&v40 - 1)) != v63)
      {
        goto LABEL_151;
      }
      uint64_t v64 = (void *)*v64;
      if (!v64) {
        goto LABEL_152;
      }
    }
  }
  while (2)
  {
    unint64_t v65 = v64[1];
    if (v65 != 0xE42D19AFCA302E68)
    {
      if (v65 >= *(void *)&v40) {
        v65 %= *(void *)&v40;
      }
      if (v65 != v63) {
        goto LABEL_151;
      }
      goto LABEL_115;
    }
    if (v64[2] != 0xE42D19AFCA302E68)
    {
LABEL_115:
      uint64_t v64 = (void *)*v64;
      if (!v64) {
        goto LABEL_152;
      }
      continue;
    }
    break;
  }
LABEL_149:
  uint64_t v73 = v64[5];
  if (*(void *)(v73 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v64 = *(void **)(v73 + 32);
    goto LABEL_152;
  }
LABEL_151:
  uint64_t v64 = 0;
LABEL_152:
  if (v41.u32[0] > 1uLL)
  {
    uint64_t v74 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v40 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v74 = 0x3070CB6B3C7F21D3uLL % *(void *)&v40;
    }
  }
  else
  {
    uint64_t v74 = (*(void *)&v40 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v75 = *(void **)(v51 + 8 * v74);
  if (!v75) {
    goto LABEL_575;
  }
  uint64_t v76 = (void *)*v75;
  if (!*v75) {
    goto LABEL_575;
  }
  uint64_t v77 = *(void *)&v40 - 1;
  if (v41.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v78 = v76[1];
      if (v78 == 0x3070CB6B3C7F21D3)
      {
        if (v76[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_172;
        }
      }
      else if ((v78 & v77) != v74)
      {
        goto LABEL_575;
      }
      uint64_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_575;
      }
    }
  }
  while (2)
  {
    unint64_t v79 = v76[1];
    if (v79 != 0x3070CB6B3C7F21D3)
    {
      if (v79 >= *(void *)&v40) {
        v79 %= *(void *)&v40;
      }
      if (v79 != v74) {
        goto LABEL_575;
      }
      goto LABEL_166;
    }
    if (v76[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_166:
      uint64_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_575;
      }
      continue;
    }
    break;
  }
LABEL_172:
  uint64_t v80 = v76[5];
  if (*(void *)(v80 + 8) != 0x3070CB6B3C7F21D3 || !v62 || !v64 || !*(void *)(v80 + 32)) {
    goto LABEL_575;
  }
  if (v41.u32[0] > 1uLL)
  {
    uint64_t v81 = 0x1AF456233693CD46;
    if (*(void *)&v40 <= 0x1AF456233693CD46uLL) {
      uint64_t v81 = 0x1AF456233693CD46uLL % *(void *)&v40;
    }
  }
  else
  {
    uint64_t v81 = v77 & 0x1AF456233693CD46;
  }
  v152 = *(void **)(v51 + 8 * v81);
  if (!v152) {
    goto LABEL_559;
  }
  v153 = (void *)*v152;
  if (!v153) {
    goto LABEL_559;
  }
  if (v41.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v154 = v153[1];
      if (v154 == 0x1AF456233693CD46)
      {
        if (v153[2] == 0x1AF456233693CD46) {
          goto LABEL_557;
        }
      }
      else if ((v154 & v77) != v81)
      {
        goto LABEL_559;
      }
      v153 = (void *)*v153;
      if (!v153) {
        goto LABEL_559;
      }
    }
  }
  while (2)
  {
    unint64_t v155 = v153[1];
    if (v155 != 0x1AF456233693CD46)
    {
      if (v155 >= *(void *)&v40) {
        v155 %= *(void *)&v40;
      }
      if (v155 != v81) {
        goto LABEL_559;
      }
      goto LABEL_341;
    }
    if (v153[2] != 0x1AF456233693CD46)
    {
LABEL_341:
      v153 = (void *)*v153;
      if (!v153) {
        goto LABEL_559;
      }
      continue;
    }
    break;
  }
LABEL_557:
  uint64_t v292 = v153[5];
  if (*(void *)(v292 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v293 = *(float64x2_t **)(v292 + 32);
    goto LABEL_560;
  }
LABEL_559:
  uint64_t v293 = 0;
LABEL_560:
  float64x2_t v294 = v293[31];
  double v295 = v293[194].f64[0];
  if (fabs(v295) > 2.22044605e-16) {
    float64x2_t v294 = vmlaq_n_f64(v294, v293[193], -v293[32].f64[0] / v295);
  }
  double v296 = v293[61].f64[0];
  memset(&buf[40], 0, 40);
  memset(&buf[8], 0, 32);
  *(void *)buf = 0x3FF0000000000000;
  *(void *)&buf[40] = 0x3FF0000000000000;
  float64x2_t v408 = (float64x2_t)0x3FF0000000000000uLL;
  float64x2_t v352 = v294;
  float64x2_t v409 = v294;
  long long v410 = xmmword_1A28FCCC0;
  double v297 = v293[87].f64[0];
  uint64_t v298 = +[VKDebugSettings sharedSettings];
  [v298 gridZAdjustment];
  *(double *)&long long v410 = v297 + v299 * 0.0000000249532021;

  memset(&v392[16], 0, 40);
  memset(&v393[8], 0, 32);
  *(_OWORD *)char v392 = 0u;
  *(_OWORD *)&v391[8] = 0u;
  *(double *)unsigned int v391 = v296;
  *(double *)&v392[16] = v296;
  uint64_t v394 = 0x3FF0000000000000;
  *(void *)double v393 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v388, (double *)buf, (double *)v391);
  gm::operator*<double,4,4,4>(v381.f64, &v293[50].f64[1], (double *)v388);
  long double v300 = v296 * 1000000.0;
  double v301 = log10(v300);
  *(double *)&uint64_t v302 = __exp10(floor(v301));
  double v303 = v300 / *(double *)&v302;
  long long v374 = 0u;
  uint64_t v376 = 0;
  long long v379 = 0u;
  long long v378 = 0u;
  long long v375 = 0u;
  long long v373 = 0u;
  *(_OWORD *)&v372[8] = 0u;
  *(double *)v372 = v303;
  *(double *)&long long v374 = v303;
  uint64_t v380 = 0x3FF0000000000000;
  uint64_t v377 = 0x3FF0000000000000;
  long long v365 = 0u;
  uint64_t v367 = 0;
  long long v366 = 0u;
  long long v364 = 0u;
  long long v363 = 0u;
  uint64_t v362 = 0x3FF0000000000000;
  *(void *)&long long v365 = 0x3FF0000000000000;
  uint64_t v369 = 0;
  uint64_t v368 = 0x3FF0000000000000;
  float64x2_t v304 = vdivq_f64(vmulq_f64(v352, (float64x2_t)vdupq_n_s64(0x412E848000000000uLL)), (float64x2_t)vdupq_lane_s64(v302, 0));
  float64x2_t v370 = vsubq_f64(v304, vrndmq_f64(v304));
  long long v371 = xmmword_1A28FCCC0;
  gm::operator*<double,4,4,4>(v361[0].f64, (double *)&v362, (double *)v372);
  uint64_t v305 = *(std::__shared_weak_count **)(*((void *)this + 6) + 16);
  v360 = 0;
  uint64_t v358 = 0;
  uint64_t v359 = 0;
  uint64_t shared_owners = v305->__shared_owners_;
  uint64_t v395 = 0;
  double v396 = v305;
  uint64_t v397 = 0;
  uint64_t v398 = shared_owners;
  __int16 v399 = 1;
  if (shared_owners) {
    uint64_t v307 = v305[3].__vftable;
  }
  else {
    uint64_t v307 = 0;
  }
  double v308 = v303 * 0.1;
  signed int v400 = v307;
  ggl::BufferMemory::operator=(&v358, (uint64_t)&v395);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v395);
  uint64_t v309 = v360;
  v360[16] = *(_DWORD *)v62;
  v309[17] = *((_DWORD *)v62 + 1);
  v309[18] = *((_DWORD *)v62 + 2);
  v309[19] = *((_DWORD *)v62 + 3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v358);
  uint64_t v310 = *(std::__shared_weak_count **)(*((void *)this + 6) + 32);
  v360 = 0;
  uint64_t v358 = 0;
  uint64_t v359 = 0;
  uint64_t v311 = v310->__shared_owners_;
  uint64_t v395 = 0;
  double v396 = v310;
  uint64_t v397 = 0;
  uint64_t v398 = v311;
  __int16 v399 = 1;
  if (v311) {
    unsigned __int8 v312 = v310[3].__vftable;
  }
  else {
    unsigned __int8 v312 = 0;
  }
  signed int v400 = v312;
  ggl::BufferMemory::operator=(&v358, (uint64_t)&v395);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v395);
  uint64_t v313 = (float *)v360;
  _DWORD *v360 = *((_DWORD *)v62 + 4);
  v313[1] = v62[5];
  v313[2] = v62[6];
  v313[3] = v62[7];
  float v314 = v308;
  v313[6] = v314;
  v313[12] = 0.0;
  float32x4_t v353 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v381), v382);
  float32x4_t v348 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v383), *(float64x2_t *)v384);
  float32x4_t v345 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v384[16]), v385);
  float32x4_t v340 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v386), v387);
  uint64_t v315 = (std::__shared_weak_count *)**((void **)this + 6);
  int v357 = 0;
  uint64_t v355 = 0;
  uint64_t v356 = 0;
  uint64_t v316 = v315->__shared_owners_;
  uint64_t v395 = 0;
  double v396 = v315;
  uint64_t v397 = 0;
  uint64_t v398 = v316;
  __int16 v399 = 1;
  if (v316) {
    v317 = v315[3].__vftable;
  }
  else {
    v317 = 0;
  }
  signed int v400 = v317;
  ggl::BufferMemory::operator=(&v355, (uint64_t)&v395);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v395);
  uint64_t v318 = v357;
  *int v357 = v353;
  v318[1] = v348;
  v318[2] = v345;
  v318[3] = v340;
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v355);
  float32x4_t v354 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v361[0]), v361[1]);
  float32x4_t v349 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v361[2]), v361[3]);
  float32x4_t v346 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v361[4]), v361[5]);
  float32x4_t v341 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v361[6]), v361[7]);
  int v319 = *(std::__shared_weak_count **)(*((void *)this + 6) + 16);
  int v357 = 0;
  uint64_t v355 = 0;
  uint64_t v356 = 0;
  uint64_t v320 = v319->__shared_owners_;
  uint64_t v395 = 0;
  double v396 = v319;
  uint64_t v397 = 0;
  uint64_t v398 = v320;
  __int16 v399 = 1;
  if (v320) {
    int v321 = v319[3].__vftable;
  }
  else {
    int v321 = 0;
  }
  signed int v400 = v321;
  ggl::BufferMemory::operator=(&v355, (uint64_t)&v395);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v395);
  uint64_t v322 = v357;
  *int v357 = v354;
  v322[1] = v349;
  v322[2] = v346;
  v322[3] = v341;
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v355);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v358);
  unint64_t v39 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v40 = (int8x8_t)v39[1];
LABEL_575:
  if (v40)
  {
    uint8x8_t v323 = (uint8x8_t)vcnt_s8(v40);
    v323.i16[0] = vaddlv_u8(v323);
    if (v323.u32[0] > 1uLL)
    {
      unint64_t v324 = 0xE42D19AFCA302E68;
      if (*(void *)&v40 <= 0xE42D19AFCA302E68) {
        unint64_t v324 = 0xE42D19AFCA302E68 % *(void *)&v40;
      }
    }
    else
    {
      unint64_t v324 = (*(void *)&v40 - 1) & 0xE42D19AFCA302E68;
    }
    uint64_t v325 = *(void **)(*v39 + 8 * v324);
    if (v325)
    {
      uint64_t v326 = (void *)*v325;
      if (v326)
      {
        if (v323.u32[0] < 2uLL)
        {
          uint64_t v327 = *(void *)&v40 - 1;
          while (1)
          {
            uint64_t v329 = v326[1];
            if (v329 == 0xE42D19AFCA302E68)
            {
              if (v326[2] == 0xE42D19AFCA302E68) {
                goto LABEL_596;
              }
            }
            else if ((v329 & v327) != v324)
            {
              goto LABEL_599;
            }
            uint64_t v326 = (void *)*v326;
            if (!v326) {
              goto LABEL_599;
            }
          }
        }
        do
        {
          unint64_t v328 = v326[1];
          if (v328 == 0xE42D19AFCA302E68)
          {
            if (v326[2] == 0xE42D19AFCA302E68)
            {
LABEL_596:
              uint64_t v330 = v326[5];
              if (*(void *)(v330 + 8) == 0xE42D19AFCA302E68 && *(void *)(v330 + 32))
              {
                uint64_t v331 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 57), *((unsigned char *)this + 58));
                ggl::CommandBuffer::pushRenderItem(v331, *((void *)this + 6) + 152);
              }
              break;
            }
          }
          else
          {
            if (v328 >= *(void *)&v40) {
              v328 %= *(void *)&v40;
            }
            if (v328 != v324) {
              break;
            }
          }
          uint64_t v326 = (void *)*v326;
        }
        while (v326);
      }
    }
  }
LABEL_599:
  if (!v406)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v406 + 48))(v406);
  __n128 result = v406;
  if (v406 == v405) {
    return (void *)(*(uint64_t (**)(void *))(v405[0] + 32))(v405);
  }
  if (v406) {
    return (void *)(*(uint64_t (**)(void))(*v406 + 40))();
  }
  return result;
}

void sub_1A1929EEC(_Unwind_Exception *a1)
{
}

double gdc::GlobeTileUtils::boundsFromMercatorRect(uint64_t a1, double *a2, double a3, double a4)
{
  double v5 = a2[1];
  double v6 = a2[3];
  double v83 = a2[2] - *a2;
  double v84 = *a2;
  double v89 = v6 - v5;
  double v90 = v5;
  long double v7 = (*a2 + v83 * 0.5) * 6.28318531;
  long double v8 = exp((v5 + (v6 - v5) * 0.5) * 6.28318531 + -3.14159265);
  double v9 = atan(v8) * 2.0 + -1.57079633;
  long double v10 = fmod(v7, 6.28318531);
  double v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v12 = __sincos_stret(v9);
  double v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  __double2 v14 = __sincos_stret(v11);
  double v15 = v13 * v12.__cosval * v14.__cosval;
  long double v16 = v13 * v12.__cosval * v14.__sinval;
  long double v17 = v12.__sinval * 0.99330562 * v13;
  double v18 = sqrt(v15 * v15 + v16 * v16);
  double v19 = atan2(v17, v18 * 0.996647189);
  double v93 = atan2(v16, v15);
  __double2 v20 = __sincos_stret(v19);
  long double v21 = atan2(v17 + v20.__sinval * v20.__sinval * 42841.3115 * v20.__sinval, v18 + v20.__cosval * v20.__cosval * -42697.6727 * v20.__cosval);
  __double2 v22 = __sincos_stret(v21 * 0.5);
  double sinval = v22.__sinval;
  double v24 = (sinval + sinval) * v22.__cosval;
  double v25 = 1.0 - (sinval + sinval) * sinval;
  __double2 v26 = __sincos_stret(v93 * 0.5);
  unint64_t v27 = 0;
  double v28 = v26.__sinval / sqrt(v24 * v24 + v25 * v25);
  double v29 = v28 * v24;
  double v30 = v28 * v25;
  double v31 = -(v26.__cosval * v22.__sinval);
  double v32 = -(v30 * v22.__sinval - v29 * v22.__cosval);
  double v33 = v29 * v22.__sinval + v30 * v22.__cosval;
  double v34 = (v31 - v33 + v32 + v22.__cosval * v26.__cosval) * 0.5;
  double v35 = (v33 + v22.__cosval * v26.__cosval - v26.__cosval * v22.__sinval - v32) * 0.5;
  double v36 = (v33 - v31 + v32 + v22.__cosval * v26.__cosval) * 0.5;
  double v37 = (v22.__cosval * v26.__cosval - (v32 - v26.__cosval * v22.__sinval + v33)) * 0.5;
  long double v38 = -(v17 * v35 - v16 * v36) - (v17 * v35 - v16 * v36);
  long double v39 = -(v15 * v36 - v17 * v34) - (v15 * v36 - v17 * v34);
  long double v40 = -(v16 * v34 - v15 * v35) - (v16 * v34 - v15 * v35);
  long double v82 = v16;
  double v87 = -(v15 + v38 * v37 + v39 * v36 - v40 * v35);
  double v88 = v16 - v38 * v36 + v39 * v37 + v40 * v34;
  long double v81 = v17;
  double v85 = v37;
  double v86 = -(v17 + v38 * v35 + v40 * v37 - v39 * v34);
  float v41 = 0.5;
  double v94 = -1.79769313e308;
  *(double *)&uint64_t v96 = 1.79769313e308;
  *(double *)&unint64_t v42 = -1.79769313e308;
  double v43 = -1.79769313e308;
  double v44 = 1.79769313e308;
  *(double *)&uint64_t v45 = 1.79769313e308;
  do
  {
    long double v46 = fmod((v84 + v83 * (float)((float)v27 * v41)) * 6.28318531, 6.28318531);
    long double v47 = fmod(v46 + 6.28318531, 6.28318531);
    __double2 v48 = __sincos_stret(v47 + -3.14159265);
    unint64_t v49 = 0;
    double v50 = *(double *)&v42;
    double v51 = *(double *)&v45;
    double v52 = v94;
    double v53 = *(double *)&v96;
    do
    {
      double v95 = v51;
      double v97 = v50;
      long double v54 = exp((v90 + v89 * (float)((float)v49 * 0.5)) * 6.28318531 + -3.14159265);
      long double v55 = atan(v54);
      __double2 v56 = __sincos_stret(v55 * 2.0 + -1.57079633);
      double v57 = 6378137.0 / sqrt(v56.__sinval * v56.__sinval * -0.00669437999 + 1.0);
      double v58 = (v57 + a3) * v56.__cosval;
      double v59 = v58 * v48.__cosval;
      double v60 = v58 * v48.__sinval;
      double v61 = v57 * 0.99330562;
      double v62 = (v57 + a4) * v56.__cosval;
      double v63 = (v57 * 0.99330562 + a3) * v56.__sinval;
      double v64 = v62 * v48.__cosval;
      double v65 = v62 * v48.__sinval;
      double v66 = (v61 + a4) * v56.__sinval;
      double v67 = -(v63 * v35 - v60 * v36) - (v63 * v35 - v60 * v36);
      double v68 = -(v59 * v36 - v63 * v34) - (v59 * v36 - v63 * v34);
      double v69 = -(v60 * v34 - v59 * v35) - (v60 * v34 - v59 * v35);
      double v70 = v63 + v86 + v67 * v35 + v69 * v85;
      double v71 = v59 + v87 + v67 * v85 + v68 * v36 - v69 * v35;
      double v72 = v60 - v88 + v68 * v85 + v69 * v34 - v67 * v36;
      double v73 = -(v66 * v35 - v65 * v36) - (v66 * v35 - v65 * v36);
      double v74 = -(v64 * v36 - v66 * v34) - (v64 * v36 - v66 * v34);
      double v75 = -(v65 * v34 - v64 * v35) - (v65 * v34 - v64 * v35);
      double v76 = v70 - v68 * v34;
      double v77 = v64 + v87 + v73 * v85 + v74 * v36 - v75 * v35;
      double v78 = v65 - v88 + v74 * v85 + v75 * v34 - v73 * v36;
      double v79 = v66 + v86 + v73 * v35 + v75 * v85 - v74 * v34;
      double v53 = fmin(v77, fmin(v71, v53));
      double v43 = fmax(fmax(v43, v71), v77);
      double v44 = fmin(v78, fmin(v72, v44));
      double v52 = fmax(fmax(v52, v72), v78);
      double v51 = fmin(v79, fmin(v76, v95));
      double v50 = fmax(fmax(v97, v76), v79);
      ++v49;
    }
    while (v49 != 3);
    double v94 = v52;
    *(double *)&uint64_t v96 = v53;
    *(double *)&uint64_t v45 = v51;
    *(double *)&unint64_t v42 = v50;
    ++v27;
    float v41 = 0.5;
  }
  while (v27 != 3);
  *(double *)a1 = v15;
  *(long double *)(a1 + 8) = v82;
  *(long double *)(a1 + 16) = v81;
  *(double *)(a1 + 24) = v34;
  *(double *)(a1 + 32) = v35;
  *(double *)(a1 + 40) = v36;
  *(double *)(a1 + 48) = v85;
  *(double *)(a1 + 56) = *(double *)&v96;
  *(double *)(a1 + 64) = v44;
  *(double *)(a1 + 72) = *(double *)&v45;
  double result = v94;
  *(double *)(a1 + 80) = v43;
  *(double *)(a1 + 88) = v94;
  *(double *)(a1 + 96) = *(double *)&v42;
  return result;
}

uint64_t gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView(uint64_t a1, uint64_t a2, _WORD *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v67 = a5;
  double v18 = (_OWORD *)(a1 + 312);
  double v19 = *a4;
  LOWORD(a5) = *a3;
  double v20 = (double)*(unint64_t *)&a5;
  LOWORD(a5) = a3[1];
  double v21 = (double)*(unint64_t *)&a5;
  long double v22 = tan(*a4 * 0.5);
  long double v23 = (a8 + a8) * v20 * v22 / v21;
  long long v104 = 0u;
  long long v105 = 0u;
  double v103 = (a8 + a8) / v23;
  v106[0] = 1.0 / v22;
  double v24 = -(a9 - a10 * a8);
  memset(&v106[1], 0, 32);
  double v107 = v24 / (a9 - a8);
  double v25 = a9 * a8 * (a10 + -1.0);
  *(void *)&long long v109 = 0;
  long long v108 = 0xBFF0000000000000;
  *((double *)&v109 + 1) = v25 / (a9 - a8);
  uint64_t v110 = 0;
  long long v92 = 0u;
  long long v93 = 0u;
  double v91 = v23 / (a8 + a8);
  double v94 = v22;
  long long v95 = 0u;
  long long v96 = 0u;
  double v97 = 0.0;
  double v98 = (a9 - a8) / v25;
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  double v101 = -1.0;
  double v102 = v24 / v25;
  geo::View<double>::View(a1, (long long *)a2, &v103, (long long *)&v91, a3, 0, a10);
  *(double *)(a1 + 464) = v19;
  *(double *)(a1 + 472) = a8;
  *(double *)(a1 + 480) = a9;
  *(double *)(a1 + 488) = a7;
  memset(v106, 0, sizeof(v106));
  long long v109 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  uint64_t v110 = 0x3FF0000000000000;
  double v103 = a7;
  v106[0] = a7;
  double v26 = a8 * a7;
  double v107 = a7;
  double v27 = a9 * a7;
  double v28 = *(double *)(a1 + 448);
  long double v29 = tan(*a4 * 0.5);
  long long v92 = 0u;
  long long v93 = 0u;
  double v91 = (v26 + v26) / ((v26 + v26) * v28 * v29);
  double v94 = 1.0 / v29;
  long long v95 = 0u;
  long long v96 = 0u;
  double v97 = -(v27 - v26 * a10) / (v27 - v26);
  uint64_t v100 = 0;
  double v98 = -1.0;
  uint64_t v99 = 0;
  double v101 = v27 * v26 * (a10 + -1.0) / (v27 - v26);
  double v102 = 0.0;
  long long v83 = 0u;
  uint64_t v85 = 0;
  long long v84 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  uint64_t v80 = 0x3FF0000000000000;
  *(void *)&long long v83 = 0x3FF0000000000000;
  uint64_t v87 = 0;
  uint64_t v86 = 0x3FF0000000000000;
  double v88 = v67 + v67;
  double v89 = a6 + a6;
  long long v90 = xmmword_1A28FCCC0;
  gm::operator*<double,4,4,4>((double *)&v72, (double *)&v80, (double *)(a1 + 56));
  long long v30 = v73;
  *(_OWORD *)(a1 + 56) = v72;
  *(_OWORD *)(a1 + 72) = v30;
  long long v31 = v75;
  *(_OWORD *)(a1 + 88) = v74;
  *(_OWORD *)(a1 + 104) = v31;
  long long v32 = v77;
  *(_OWORD *)(a1 + 120) = v76;
  *(_OWORD *)(a1 + 136) = v32;
  long long v33 = v79;
  *(_OWORD *)(a1 + 152) = v78;
  *(_OWORD *)(a1 + 168) = v33;
  gm::operator*<double,4,4,4>(v70, (double *)&v80, &v91);
  gm::operator*<double,4,4,4>(v71, v70, &v103);
  double v34 = *(double *)(a2 + 32);
  double v35 = *(double *)(a2 + 40);
  double v36 = *(double *)(a2 + 48);
  double v38 = *(double *)(a2 + 16);
  double v37 = *(double *)(a2 + 24);
  double v39 = *(double *)(a2 + 8);
  double v40 = -(*(double *)a2 * v35 - v38 * v37);
  double v41 = -(v39 * v37 - *(double *)a2 * v34);
  double v42 = -(v38 * v34 - v39 * v35) - (v38 * v34 - v39 * v35);
  double v43 = v40 + v40;
  double v44 = v41 + v41;
  double v45 = -(v44 * v37 - (-(v39 - v42 * v35) - v43 * v36));
  double v46 = -(*(double *)a2 + v42 * v36 + v43 * v35 - v44 * v34);
  double v47 = v38 + v42 * v34 + v44 * v36;
  double v48 = v34 * -2.0;
  double v49 = -(v34 * (v34 * -2.0));
  double v50 = 1.0 - (v49 - v35 * (v35 * -2.0));
  double v51 = -(v34 * (v37 * -2.0));
  double v52 = v35 * -2.0 * v36;
  double v53 = v51 - v52;
  double v54 = -(v35 * (v37 * -2.0));
  double v55 = v36 * v48;
  double v56 = v52 + v51;
  double v57 = v36 * v48 - v35 * (v37 * -2.0);
  double v58 = v37 * -2.0 * v37 + 1.0;
  double v59 = v58 - -(v35 * (v35 * -2.0));
  double v60 = -(v35 * v48);
  double v61 = v36 * (v37 * -2.0);
  v69[0] = v50;
  v69[1] = v56;
  v69[4] = v53;
  v69[5] = v59;
  v69[8] = v57;
  v69[9] = v60 - v61;
  v69[2] = v54 - v55;
  v69[6] = v61 + v60;
  v69[10] = v58 - v49;
  v69[3] = 0.0;
  v69[7] = 0.0;
  v69[11] = 0.0;
  v69[12] = v46;
  v69[13] = v45;
  v69[14] = -(v47 - v43 * v37);
  v69[15] = 1.0;
  gm::operator*<double,4,4,4>((double *)&v72, v71, v69);
  long long v62 = v73;
  *double v18 = v72;
  v18[1] = v62;
  long long v63 = v75;
  v18[2] = v74;
  v18[3] = v63;
  long long v64 = v77;
  v18[4] = v76;
  v18[5] = v64;
  long long v65 = v79;
  v18[6] = v78;
  v18[7] = v65;
  return a1;
}

double gm::operator*<double,4,4,4>(double *a1, double *a2, double *a3)
{
  double v3 = a2[1];
  double v5 = a2[4];
  double v4 = a2[5];
  double v6 = a2[8];
  double v7 = a2[9];
  double v8 = a3[2];
  double v9 = *a3 * *a2 + a3[1] * v5 + v8 * v6;
  double v10 = a3[4];
  double v48 = a3[3];
  double v49 = *a3;
  double v11 = a3[5];
  double v47 = a3[1];
  double v12 = a3[6];
  double v13 = v10 * *a2 + v11 * v5 + v12 * v6;
  double v14 = a3[8];
  double v46 = a3[7];
  double v15 = a3[9];
  double v16 = a3[10];
  double v17 = v14 * *a2 + v15 * v5 + v16 * v6;
  double v19 = a3[11];
  double v18 = a3[12];
  double v20 = a3[13];
  double v21 = v18 * *a2 + v20 * v5;
  double v22 = a3[14];
  double v23 = v21 + v22 * v6;
  double v25 = a2[12];
  double v24 = a2[13];
  double v27 = v22;
  double v26 = a3[15];
  double v28 = *a3 * v3 + v47 * v4 + v8 * v7 + v48 * v24;
  *a1 = v9 + v48 * v25;
  a1[1] = v28;
  a1[4] = v13 + v46 * v25;
  a1[5] = v10 * v3 + v11 * v4 + v12 * v7 + v46 * v24;
  a1[8] = v17 + v19 * v25;
  a1[9] = v14 * v3 + v15 * v4 + v16 * v7 + v19 * v24;
  a1[12] = v23 + v26 * v25;
  a1[13] = v18 * v3 + v20 * v4 + v22 * v7 + v26 * v24;
  double v29 = a2[2];
  double v30 = a2[3];
  double v31 = a2[6];
  double v32 = a2[7];
  double v33 = a2[10];
  double v34 = a2[11];
  double v35 = v49 * v29 + v47 * v31 + v8 * v33;
  double v36 = v10 * v29 + v11 * v31;
  double v37 = v14 * v29 + v15 * v31;
  double v38 = v18 * v29 + v20 * v31;
  double v39 = a2[14];
  double v40 = a2[15];
  double v41 = v36 + v12 * v33 + v46 * v39;
  double v42 = v37 + v16 * v33 + v19 * v39;
  double v43 = v38 + v27 * v33;
  double v44 = a3[15];
  double result = v43 + v44 * v39;
  a1[2] = v35 + v48 * v39;
  a1[3] = v49 * v30 + v47 * v32 + v8 * v34 + v48 * v40;
  a1[6] = v41;
  a1[7] = v10 * v30 + v11 * v32 + v12 * v34 + v46 * v40;
  a1[10] = v42;
  a1[11] = v14 * v30 + v15 * v32 + v16 * v34 + v19 * v40;
  a1[14] = result;
  a1[15] = v18 * v30 + v20 * v32 + v27 * v34 + v44 * v40;
  return result;
}

uint64_t geo::View<double>::View(uint64_t a1, long long *a2, double *a3, long long *a4, _WORD *a5, int a6, double a7)
{
  long long v11 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v11;
  long long v12 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v12;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  long long v13 = *(_OWORD *)a3;
  long long v14 = *((_OWORD *)a3 + 1);
  long long v15 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  long long v16 = *((_OWORD *)a3 + 4);
  long long v17 = *((_OWORD *)a3 + 5);
  long long v18 = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a1 + 168) = *((_OWORD *)a3 + 7);
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  long long v19 = a4[6];
  long long v20 = a4[7];
  long long v21 = a4[5];
  *(_OWORD *)(a1 + 248) = a4[4];
  *(_OWORD *)(a1 + 280) = v19;
  *(_OWORD *)(a1 + 296) = v20;
  *(_OWORD *)(a1 + 264) = v21;
  long long v22 = *a4;
  long long v23 = a4[1];
  long long v24 = a4[2];
  *(_OWORD *)(a1 + 232) = a4[3];
  *(_OWORD *)(a1 + 216) = v24;
  *(_OWORD *)(a1 + 200) = v23;
  *(_OWORD *)(a1 + 184) = v22;
  *(void *)&long long v22 = *((void *)a2 + 4);
  *(void *)&long long v23 = *((void *)a2 + 5);
  *(void *)&long long v24 = *((void *)a2 + 6);
  double v26 = *((double *)a2 + 2);
  double v25 = *((double *)a2 + 3);
  double v27 = *((double *)a2 + 1);
  double v28 = -(*(double *)a2 * *(double *)&v23 - v26 * v25);
  double v29 = -(v27 * v25 - *(double *)a2 * *(double *)&v22);
  double v30 = -(v26 * *(double *)&v22 - v27 * *(double *)&v23) - (v26 * *(double *)&v22 - v27 * *(double *)&v23);
  double v31 = v28 + v28;
  double v32 = v29 + v29;
  double v33 = -(v32 * v25 - (-(v27 - v30 * *(double *)&v23) - v31 * *(double *)&v24));
  double v34 = -(*(double *)a2 + v30 * *(double *)&v24 + v31 * *(double *)&v23 - v32 * *(double *)&v22);
  double v35 = -(v26 + v30 * *(double *)&v22 + v32 * *(double *)&v24 - v31 * v25);
  double v36 = *(double *)&v22 * -2.0;
  double v37 = -(*(double *)&v22 * (*(double *)&v22 * -2.0));
  double v38 = 1.0 - (v37 - *(double *)&v23 * (*(double *)&v23 * -2.0));
  double v39 = v25 * -2.0;
  *(double *)&long long v22 = -(*(double *)&v22 * (v25 * -2.0));
  double v40 = *(double *)&v23 * -2.0 * *(double *)&v24;
  double v41 = *(double *)&v22 - v40;
  double v42 = -(*(double *)&v23 * (v25 * -2.0));
  double v43 = *(double *)&v24 * v36;
  double v44 = *(double *)&v24 * v36 - *(double *)&v23 * (v25 * -2.0);
  *(double *)&long long v22 = v40 + *(double *)&v22;
  double v45 = v25 * -2.0 * v25 + 1.0;
  double v46 = v45 - -(*(double *)&v23 * (*(double *)&v23 * -2.0));
  *(double *)&long long v23 = -(*(double *)&v23 * v36);
  *(double *)&long long v24 = *(double *)&v24 * v39;
  v50[0] = v38;
  *(void *)&v50[1] = v22;
  v50[4] = v41;
  v50[5] = v46;
  v50[8] = v44;
  v50[9] = *(double *)&v23 - *(double *)&v24;
  v50[2] = v42 - v43;
  v50[6] = *(double *)&v24 + *(double *)&v23;
  v50[10] = v45 - v37;
  v50[3] = 0.0;
  v50[7] = 0.0;
  v50[11] = 0.0;
  v50[12] = v34;
  v50[13] = v33;
  v50[14] = v35;
  v50[15] = 1.0;
  double v47 = gm::operator*<double,4,4,4>((double *)(a1 + 312), a3, v50);
  *(double *)(a1 + 440) = a7;
  LOWORD(v47) = *a5;
  LOWORD(v48) = a5[1];
  *(double *)(a1 + 448) = (double)*(unint64_t *)&v47 / (double)v48;
  *(_DWORD *)(a1 + 456) = *(_DWORD *)a5;
  *(_DWORD *)(a1 + 460) = a6;
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  uint64_t v6 = *((int *)a2 + 1);
  uint64_t v7 = *((int *)a2 + 2);
  unint64_t v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v9 = ((v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8) - 0x61C8864680B583EBLL;
  unint64_t v10 = *((void *)a2 + 3);
  unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
  unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
  unint64_t v13 = ((v9 << 6) + (v9 >> 2) - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)) - 0x61C8864680B583EBLL) ^ v9;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v2);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    uint64_t v15 = ((v9 << 6) + (v9 >> 2) - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)) - 0x61C8864680B583EBLL) ^ v9;
    if (v13 >= *(void *)&v2) {
      uint64_t v15 = v13 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v15 = v13 & (*(void *)&v2 - 1);
  }
  long long v16 = *(uint64_t ***)(*a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  double result = *v16;
  if (*v16)
  {
    if (v14.u32[0] < 2uLL)
    {
      uint64_t v18 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v20 = result[1];
        if (v20 == v13)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && result[5] == v10)
          {
            return result;
          }
        }
        else if ((v20 & v18) != v15)
        {
          return 0;
        }
        double result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v19 = result[1];
      if (v19 == v13)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && result[5] == v10)
        {
          return result;
        }
      }
      else
      {
        if (v19 >= *(void *)&v2) {
          v19 %= *(void *)&v2;
        }
        if (v19 != v15) {
          return 0;
        }
      }
      double result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GridLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GridLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51BDD0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B878;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B440;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51B3F8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AEE8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AE58;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51AAF8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A7E0;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51A000;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF519FB8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF519F28;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_209;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xD2404CDD1F9A6950;
    if (a3 <= 0xD2404CDD1F9A6950) {
      unint64_t v4 = 0xD2404CDD1F9A6950 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0xD2404CDD1F9A6950;
  }
  unint64_t v13 = *(void **)(a2 + 8 * v4);
  if (!v13) {
    goto LABEL_25;
  }
  uint8x8_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0xD2404CDD1F9A6950)
      {
        if (v14[2] == 0xD2404CDD1F9A6950) {
          goto LABEL_23;
        }
      }
      else if ((v16 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint8x8_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == 0xD2404CDD1F9A6950) {
      break;
    }
    if (v15 >= a3) {
      v15 %= a3;
    }
    if (v15 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint8x8_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_25;
    }
  }
  if (v14[2] != 0xD2404CDD1F9A6950) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0xD2404CDD1F9A6950)
  {
    uint64_t v9 = *(void *)(v17 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v9 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x88B81689974D86F3;
    if (a3 <= 0x88B81689974D86F3) {
      unint64_t v18 = 0x88B81689974D86F3 % a3;
    }
  }
  else
  {
    unint64_t v18 = (a3 - 1) & 0x88B81689974D86F3;
  }
  unint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_48;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x88B81689974D86F3)
      {
        if (v20[2] == 0x88B81689974D86F3) {
          goto LABEL_46;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_48;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v21 = v20[1];
    if (v21 != 0x88B81689974D86F3)
    {
      if (v21 >= a3) {
        v21 %= a3;
      }
      if (v21 != v18) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v20[2] != 0x88B81689974D86F3)
    {
LABEL_35:
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) == 0x88B81689974D86F3)
  {
    uint64_t v8 = *(void *)(v23 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v8 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v24 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v24 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v24 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  double v25 = *(void **)(a2 + 8 * v24);
  if (!v25) {
    goto LABEL_71;
  }
  double v26 = (void *)*v25;
  if (!v26) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v28 = v26[1];
      if (v28 == 0xE42D19AFCA302E68)
      {
        if (v26[2] == 0xE42D19AFCA302E68) {
          goto LABEL_69;
        }
      }
      else if ((v28 & (a3 - 1)) != v24)
      {
        goto LABEL_71;
      }
      double v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v27 = v26[1];
    if (v27 != 0xE42D19AFCA302E68)
    {
      if (v27 >= a3) {
        v27 %= a3;
      }
      if (v27 != v24) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v26[2] != 0xE42D19AFCA302E68)
    {
LABEL_58:
      double v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v29 = v26[5];
  if (*(void *)(v29 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v10 = *(void *)(v29 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v10 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v30 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL) {
      unint64_t v30 = 0xFBD83FDA8879FF7ELL % a3;
    }
  }
  else
  {
    unint64_t v30 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  double v31 = *(void **)(a2 + 8 * v30);
  if (!v31) {
    goto LABEL_94;
  }
  double v32 = (void *)*v31;
  if (!v32) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v34 = v32[1];
      if (v34 == 0xFBD83FDA8879FF7ELL)
      {
        if (v32[2] == 0xFBD83FDA8879FF7ELL) {
          goto LABEL_92;
        }
      }
      else if ((v34 & (a3 - 1)) != v30)
      {
        goto LABEL_94;
      }
      double v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v33 = v32[1];
    if (v33 != 0xFBD83FDA8879FF7ELL)
    {
      if (v33 >= a3) {
        v33 %= a3;
      }
      if (v33 != v30) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v32[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_81:
      double v32 = (void *)*v32;
      if (!v32) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v35 = v32[5];
  if (*(void *)(v35 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    uint64_t v7 = *(void *)(v35 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v7 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v36 = 0xDFC317497CF9A4BFLL;
    if (a3 <= 0xDFC317497CF9A4BFLL) {
      unint64_t v36 = 0xDFC317497CF9A4BFLL % a3;
    }
  }
  else
  {
    unint64_t v36 = (a3 - 1) & 0xDFC317497CF9A4BFLL;
  }
  double v37 = *(void **)(a2 + 8 * v36);
  if (!v37) {
    goto LABEL_117;
  }
  double v38 = (void *)*v37;
  if (!v38) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v40 = v38[1];
      if (v40 == 0xDFC317497CF9A4BFLL)
      {
        if (v38[2] == 0xDFC317497CF9A4BFLL) {
          goto LABEL_115;
        }
      }
      else if ((v40 & (a3 - 1)) != v36)
      {
        goto LABEL_117;
      }
      double v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_117;
      }
    }
  }
  while (2)
  {
    unint64_t v39 = v38[1];
    if (v39 != 0xDFC317497CF9A4BFLL)
    {
      if (v39 >= a3) {
        v39 %= a3;
      }
      if (v39 != v36) {
        goto LABEL_117;
      }
      goto LABEL_104;
    }
    if (v38[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_104:
      double v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_117;
      }
      continue;
    }
    break;
  }
LABEL_115:
  uint64_t v41 = v38[5];
  if (*(void *)(v41 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v11 = *(void *)(v41 + 32);
    goto LABEL_118;
  }
LABEL_117:
  uint64_t v11 = 0;
LABEL_118:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v42 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v42 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v42 = (a3 - 1) & 0x1AF456233693CD46;
  }
  double v43 = *(void **)(a2 + 8 * v42);
  if (!v43) {
    goto LABEL_140;
  }
  double v44 = (void *)*v43;
  if (!v44) {
    goto LABEL_140;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v46 = v44[1];
      if (v46 == 0x1AF456233693CD46)
      {
        if (v44[2] == 0x1AF456233693CD46) {
          goto LABEL_138;
        }
      }
      else if ((v46 & (a3 - 1)) != v42)
      {
        goto LABEL_140;
      }
      double v44 = (void *)*v44;
      if (!v44) {
        goto LABEL_140;
      }
    }
  }
  while (2)
  {
    unint64_t v45 = v44[1];
    if (v45 != 0x1AF456233693CD46)
    {
      if (v45 >= a3) {
        v45 %= a3;
      }
      if (v45 != v42) {
        goto LABEL_140;
      }
      goto LABEL_127;
    }
    if (v44[2] != 0x1AF456233693CD46)
    {
LABEL_127:
      double v44 = (void *)*v44;
      if (!v44) {
        goto LABEL_140;
      }
      continue;
    }
    break;
  }
LABEL_138:
  uint64_t v47 = v44[5];
  if (*(void *)(v47 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v6 = *(void *)(v47 + 32);
    goto LABEL_141;
  }
LABEL_140:
  uint64_t v6 = 0;
LABEL_141:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v48 = 0x1B9039CBDAB12E5CLL;
    if (a3 <= 0x1B9039CBDAB12E5CLL) {
      uint64_t v48 = 0x1B9039CBDAB12E5CLL % a3;
    }
  }
  else
  {
    uint64_t v48 = (a3 - 1) & 0x1B9039CBDAB12E5CLL;
  }
  double v49 = *(void **)(a2 + 8 * v48);
  if (!v49) {
    goto LABEL_163;
  }
  double v50 = (void *)*v49;
  if (!v50) {
    goto LABEL_163;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v52 = v50[1];
      if (v52 == 0x1B9039CBDAB12E5CLL)
      {
        if (v50[2] == 0x1B9039CBDAB12E5CLL) {
          goto LABEL_161;
        }
      }
      else if ((v52 & (a3 - 1)) != v48)
      {
        goto LABEL_163;
      }
      double v50 = (void *)*v50;
      if (!v50) {
        goto LABEL_163;
      }
    }
  }
  while (2)
  {
    unint64_t v51 = v50[1];
    if (v51 != 0x1B9039CBDAB12E5CLL)
    {
      if (v51 >= a3) {
        v51 %= a3;
      }
      if (v51 != v48) {
        goto LABEL_163;
      }
      goto LABEL_150;
    }
    if (v50[2] != 0x1B9039CBDAB12E5CLL)
    {
LABEL_150:
      double v50 = (void *)*v50;
      if (!v50) {
        goto LABEL_163;
      }
      continue;
    }
    break;
  }
LABEL_161:
  uint64_t v53 = v50[5];
  if (*(void *)(v53 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    uint64_t v12 = *(void *)(v53 + 32);
    goto LABEL_164;
  }
LABEL_163:
  uint64_t v12 = 0;
LABEL_164:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v54 = 0x12B1E486D3040E2CLL;
    if (a3 <= 0x12B1E486D3040E2CLL) {
      uint64_t v54 = 0x12B1E486D3040E2CLL % a3;
    }
  }
  else
  {
    uint64_t v54 = (a3 - 1) & 0x12B1E486D3040E2CLL;
  }
  double v55 = *(void **)(a2 + 8 * v54);
  if (!v55) {
    goto LABEL_186;
  }
  double v56 = (void *)*v55;
  if (!v56) {
    goto LABEL_186;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v58 = v56[1];
      if (v58 == 0x12B1E486D3040E2CLL)
      {
        if (v56[2] == 0x12B1E486D3040E2CLL) {
          goto LABEL_184;
        }
      }
      else if ((v58 & (a3 - 1)) != v54)
      {
        goto LABEL_186;
      }
      double v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_186;
      }
    }
  }
  while (2)
  {
    unint64_t v57 = v56[1];
    if (v57 != 0x12B1E486D3040E2CLL)
    {
      if (v57 >= a3) {
        v57 %= a3;
      }
      if (v57 != v54) {
        goto LABEL_186;
      }
      goto LABEL_173;
    }
    if (v56[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_173:
      double v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_186;
      }
      continue;
    }
    break;
  }
LABEL_184:
  uint64_t v59 = v56[5];
  if (*(void *)(v59 + 8) == 0x12B1E486D3040E2CLL)
  {
    uint64_t v5 = *(void *)(v59 + 32);
    goto LABEL_187;
  }
LABEL_186:
  uint64_t v5 = 0;
LABEL_187:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v60 = 0x9AEE7E062376E454;
    if (a3 <= 0x9AEE7E062376E454) {
      unint64_t v60 = 0x9AEE7E062376E454 % a3;
    }
  }
  else
  {
    unint64_t v60 = (a3 - 1) & 0x9AEE7E062376E454;
  }
  double v61 = *(void **)(a2 + 8 * v60);
  if (!v61) {
    goto LABEL_209;
  }
  long long v62 = (void *)*v61;
  if (!v62) {
    goto LABEL_209;
  }
  if (v3.u32[0] < 2uLL)
  {
    unint64_t v63 = a3 - 1;
    while (1)
    {
      uint64_t v65 = v62[1];
      if (v65 == 0x9AEE7E062376E454)
      {
        if (v62[2] == 0x9AEE7E062376E454) {
          goto LABEL_207;
        }
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_209;
      }
      long long v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_209;
      }
    }
  }
  while (1)
  {
    unint64_t v64 = v62[1];
    if (v64 == 0x9AEE7E062376E454) {
      break;
    }
    if (v64 >= a3) {
      v64 %= a3;
    }
    if (v64 != v60) {
      goto LABEL_209;
    }
LABEL_196:
    long long v62 = (void *)*v62;
    if (!v62) {
      goto LABEL_209;
    }
  }
  if (v62[2] != 0x9AEE7E062376E454) {
    goto LABEL_196;
  }
LABEL_207:
  uint64_t v66 = v62[5];
  if (*(void *)(v66 + 8) != 0x9AEE7E062376E454)
  {
LABEL_209:
    uint64_t v67 = 0;
    goto LABEL_210;
  }
  uint64_t v67 = *(void *)(v66 + 32);
LABEL_210:
  uint64_t *result = v9;
  result[1] = v8;
  result[2] = v10;
  result[3] = v7;
  result[4] = v11;
  result[5] = v6;
  result[6] = v12;
  result[7] = v5;
  result[8] = v67;
  return result;
}

uint64_t md::MeshRenderableLogic::runBeforeLayoutAtVariableRate(uint64_t a1, const md::LayoutContext *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  v85[0] = &unk_1EF574B80;
  v85[1] = a2;
  v83[0] = &unk_1EF574BC8;
  v83[1] = a2;
  long long v84 = v83;
  double v88 = v87;
  uint64_t v86 = v85;
  v87[0] = &unk_1EF574BC8;
  v87[1] = a2;
  _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEEclEv((uint64_t)v85);
  if (v84 == v83)
  {
    (*(void (**)(void *))(v83[0] + 32))(v83);
  }
  else if (v84)
  {
    (*(void (**)(void))(*v84 + 40))();
  }
  if (v86 == v85)
  {
    (*(void (**)(void *))(v85[0] + 32))(v85);
  }
  else if (v86)
  {
    (*(void (**)(void))(*v86 + 40))();
  }
  uint64_t v8 = *(void **)(a1 + 136);
  uint64_t v9 = (int8x8_t **)v8[51];
  long long v81 = (int8x8_t **)v8[52];
  if (v9 != v81)
  {
    long long v79 = v6;
    uint64_t v80 = a4;
    long long v82 = (uint64_t *)(a1 + 296);
    do
    {
      uint64_t v10 = *v9;
      int8x8_t v11 = (*v9)[1];
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v13 = 0xCA93DB2C2ACE8387;
          if (*(void *)&v11 <= 0xCA93DB2C2ACE8387) {
            unint64_t v13 = 0xCA93DB2C2ACE8387 % *(void *)&v11;
          }
        }
        else
        {
          unint64_t v13 = (*(void *)&v11 - 1) & 0xCA93DB2C2ACE8387;
        }
        uint8x8_t v14 = *(void **)(*(void *)v10 + 8 * v13);
        if (v14)
        {
          unint64_t v15 = (void *)*v14;
          if (v15)
          {
            if (v12.u32[0] < 2uLL)
            {
              uint64_t v16 = *(void *)&v11 - 1;
              while (1)
              {
                uint64_t v18 = v15[1];
                if (v18 == 0xCA93DB2C2ACE8387)
                {
                  if (v15[2] == 0xCA93DB2C2ACE8387) {
                    goto LABEL_33;
                  }
                }
                else if ((v18 & v16) != v13)
                {
                  goto LABEL_39;
                }
                unint64_t v15 = (void *)*v15;
                if (!v15) {
                  goto LABEL_39;
                }
              }
            }
            do
            {
              unint64_t v17 = v15[1];
              if (v17 == 0xCA93DB2C2ACE8387)
              {
                if (v15[2] == 0xCA93DB2C2ACE8387)
                {
LABEL_33:
                  uint64_t v19 = v15[5];
                  if (*(void *)(v19 + 8) == 0xCA93DB2C2ACE8387)
                  {
                    uint64_t v20 = *(unsigned __int16 **)(v19 + 32);
                    if (v20)
                    {
                      if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_13147);
                      }
                      unint64_t v21 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
                      if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
                      {
                        int v22 = *v20;
                        LODWORD(buf) = 67109120;
                        HIDWORD(buf) = v22;
                        _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_DEBUG, "Exiting BatchManager(id:%d)", (uint8_t *)&buf, 8u);
                      }
                    }
                  }
                  break;
                }
              }
              else
              {
                if (v17 >= *(void *)&v11) {
                  v17 %= *(void *)&v11;
                }
                if (v17 != v13) {
                  break;
                }
              }
              unint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_39:
      uint64_t v23 = (void *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v10);
      uint64_t v24 = gdc::Registry::storage<md::components::Material>(v10);
      double v25 = (void *)v24;
      uint64_t v26 = v24 + 32;
      uint64_t v28 = v23[7];
      uint64_t v27 = v23[8];
      if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= (unint64_t)(v27 - v28)) {
        uint64_t v29 = v23 + 4;
      }
      else {
        uint64_t v29 = (void *)(v24 + 32);
      }
      if (v23 + 4 == v29 && v28 != v27)
      {
        do
        {
          unint64_t v35 = *(unsigned int *)(v28 + 4);
          uint64_t v36 = v25[4];
          if (v35 >> 7 < (v25[5] - v36) >> 3)
          {
            uint64_t v37 = *(void *)(v36 + 8 * (v35 >> 7));
            if (v37)
            {
              unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v35 & 0x7F));
              uint64_t v40 = v25[7];
              uint64_t v39 = v25[8];
              if (v38 < (v39 - v40) >> 3)
              {
                uint64_t v41 = v40 + 8 * v38;
                if (v41 != v39 && *(_DWORD *)(v41 + 4) == v35) {
                  md::MeshRenderableLogic::removeDynamicEntity((void *)a1, *(void *)v28);
                }
              }
            }
          }
          v28 += 8;
        }
        while (v28 != v27);
      }
      if ((void *)v26 == v29)
      {
        uint64_t v44 = v25[7];
        uint64_t v45 = v25[8];
        while (v44 != v45)
        {
          unint64_t v46 = *(unsigned int *)(v44 + 4);
          uint64_t v47 = v23[4];
          if (v46 >> 7 < (v23[5] - v47) >> 3)
          {
            uint64_t v48 = *(void *)(v47 + 8 * (v46 >> 7));
            if (v48)
            {
              unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (v46 & 0x7F));
              uint64_t v51 = v23[7];
              uint64_t v50 = v23[8];
              if (v49 < (v50 - v51) >> 3)
              {
                uint64_t v52 = v51 + 8 * v49;
                if (v52 != v50 && *(_DWORD *)(v52 + 4) == v46) {
                  md::MeshRenderableLogic::removeDynamicEntity((void *)a1, *(void *)v44);
                }
              }
            }
          }
          v44 += 8;
        }
      }
      md::MeshRenderableLogic::clearInjectedRenderables((md::MeshRenderableLogic *)a1, v10[5].u16[0]);
      uint64_t v31 = gdc::Registry::storage<md::components::TexturedMeshInstance>(v10);
      if (*(void *)(v31 + 88) != *(void *)(v31 + 80))
      {
        LOWORD(buf) = v10[5].i16[0];
        double v32 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v82, buf, &buf);
        unint64_t v33 = (void *)v32[3];
        uint64_t v34 = (void *)v32[4];
        while (v33 != v34)
        {
          double v43 = (void (***)(void))*v33;
          if (*(unsigned char *)(*v33 + 8) == 3)
          {
            if (*(void *)(a1 + 240))
            {
              (**v43)(*v33);
              *double v43 = *(void (***)(void))(a1 + 264);
              *(void *)(a1 + 264) = v43;
            }
          }
          ++v33;
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__erase_unique<unsigned short>(v82, v10[5].u16[0]);
      ++v9;
    }
    while (v9 != v81);
    uint64_t v8 = *(void **)(a1 + 136);
    uint64_t v6 = v79;
    a4 = v80;
  }
  uint64_t v54 = (unsigned __int16 *)v8[57];
  for (uint64_t i = (unsigned __int16 *)v8[58]; v54 != i; ++v54)
  {
    unsigned __int16 v56 = *v54;
    md::MeshRenderableLogic::clearInjectedRenderables((md::MeshRenderableLogic *)a1, *v54);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__erase_unique<unsigned short>((uint64_t *)(a1 + 296), v56);
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  unint64_t v57 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  uint64_t v58 = v57;
  os_signpost_id_t v59 = *((void *)v6 + 10);
  if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v57))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v58, OS_SIGNPOST_INTERVAL_BEGIN, v59, "updateStaticNonBatchedMeshes", "", (uint8_t *)&buf, 2u);
  }

  md::MeshRenderableBuilder::MeshRenderableBuilder(&buf, **a3, (*a3)[1], *a3 + 2);
  uint64_t v60 = *(void *)(a1 + 136);
  v97[0] = &unk_1EF574B38;
  double v98 = v97;
  md::RegistryManager::entering(v99, v60, v97);
  if (v98 == v97)
  {
    (*(void (**)(void *))(v97[0] + 32))(v97);
  }
  else if (v98)
  {
    (*(void (**)(void))(*v98 + 40))();
  }
  md::FilteredIterator<std::vector<gdc::Registry *>>::begin(&v93, (uint64_t)v99);
  md::FilteredIterator<std::vector<gdc::Registry *>>::end(&v89, v99);
  double v61 = v90;
  long long v62 = v94;
  while (v61 != v62)
  {
    md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(a1, *v62);
    while (1)
    {
      long long v62 = v94 + 1;
      double v94 = v62;
      if (v62 == *(int8x8_t ***)(v93 + 8)) {
        break;
      }
      if (!v96) {
        goto LABEL_145;
      }
      if ((*(unsigned int (**)(void *))(*v96 + 48))(v96))
      {
        long long v62 = v94;
        break;
      }
    }
    double v61 = v90;
  }
  if (v92 == v91)
  {
    (*(void (**)(void *))(v91[0] + 32))(v91);
  }
  else if (v92)
  {
    (*(void (**)(void))(*v92 + 40))();
  }
  if (v96 == v95)
  {
    (*(void (**)(void *))(v95[0] + 32))(v95);
  }
  else if (v96)
  {
    (*(void (**)(void))(*v96 + 40))();
  }
  if (v101 == v100)
  {
    (*(void (**)(void *))(v100[0] + 32))(v100);
    if (!*(unsigned char *)(a1 + 416)) {
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v101) {
    (*(void (**)(void))(*v101 + 40))();
  }
  if (*(unsigned char *)(a1 + 416))
  {
LABEL_111:
    uint64_t v63 = *(void *)(a1 + 136);
    unint64_t v64 = *(int8x8_t ***)(v63 + 384);
    for (uint64_t j = *(int8x8_t ***)(v63 + 392); v64 != j; ++v64)
      md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(a1, *v64);
  }
LABEL_113:
  uint64_t v66 = v105;
  if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
  uint64_t v67 = v104;
  if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  double v68 = v103;
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  double v69 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  double v70 = v69;
  os_signpost_id_t v71 = *((void *)v6 + 10);
  if (v71 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v69))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v70, OS_SIGNPOST_INTERVAL_END, v71, "updateStaticNonBatchedMeshes", "", (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  long long v72 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  long long v73 = v72;
  os_signpost_id_t v74 = *((void *)v6 + 10);
  if (v74 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v72))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v73, OS_SIGNPOST_INTERVAL_BEGIN, v74, "UpdateBatches", "", (uint8_t *)&buf, 2u);
  }

  md::MeshRenderableLogic::updateBatches((md::MeshRenderableLogic *)a1, v6, (const md::MaterialContext *)*a3);
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  long long v75 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  long long v76 = v75;
  os_signpost_id_t v77 = *((void *)v6 + 10);
  if (v77 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v75))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v76, OS_SIGNPOST_INTERVAL_END, v77, "UpdateBatches", "", (uint8_t *)&buf, 2u);
  }

  if (a1 + 296 != a4)
  {
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 328);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,void *> *>>((void *)a4, *(char **)(a1 + 312));
  }
  *(unsigned char *)(a4 + 40) = *(unsigned char *)(a1 + 417);
  if (!v88)
  {
LABEL_145:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v88 + 48))(v88);
  uint64_t result = (uint64_t)v88;
  if (v88 == v87) {
    return (*(uint64_t (**)(void *))(v87[0] + 32))(v87);
  }
  if (v88) {
    return (*(uint64_t (**)(void))(*v88 + 40))();
  }
  return result;
}

void sub_1A192C9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  md::FilteredIterator<std::vector<gdc::Registry *>>::~FilteredIterator((uint64_t)&a35);
  md::FilteredIterator<std::vector<gdc::Registry *>>::~FilteredIterator(v35 - 192);
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)(v35 - 144));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a25);
  _Unwind_Resume(a1);
}

uint64_t md::FilteredIterator<std::vector<gdc::Registry *>>::begin(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    if (v5 == a2 + 16)
    {
      uint64_t v8 = v7;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 24))(v5, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(a1, (uint64_t)v4, (uint64_t)v7, **(void **)a2);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_1A192CC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(gdc::Registry * const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::FilteredIterator<std::vector<gdc::Registry *>>::end(void *a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t *)a2[5];
  if (v5)
  {
    if (v5 == a2 + 2)
    {
      uint64_t v8 = v7;
      (*(void (**)(uint64_t *, void *))(*v5 + 24))(v5, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(a1, v4, (uint64_t)v7, *(void *)(*a2 + 8));
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_1A192CDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(gdc::Registry * const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a4;
  uint64_t v6 = a1 + 2;
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
    if (v7 == a3)
    {
      a1[5] = v6;
      (*(void (**)(void, void *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v6);
    }
    else
    {
      a1[5] = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
  }
  else
  {
    a1[5] = 0;
  }
  if (a1[1] != *(void *)(*a1 + 8))
  {
    uint64_t v8 = *(void *)(a3 + 24);
    if (v8)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8) & 1) == 0)
      {
        do
        {
          uint64_t v9 = *a1;
          uint64_t v10 = a1[1] + 8;
          a1[1] = v10;
          if (v10 == *(void *)(v9 + 8)) {
            break;
          }
          uint64_t v11 = a1[5];
          if (!v11) {
            goto LABEL_13;
          }
        }
        while (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11) & 1) == 0);
      }
    }
    else
    {
LABEL_13:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
  }
}

void sub_1A192CF58(_Unwind_Exception *a1)
{
  std::function<BOOL ()(gdc::Registry * const&)>::~function(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5702A8;
}

void std::__function::__func<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF574B38;
}

void std::__function::__func<md::MeshRenderableLogic::processEntering(void)::$_0,std::allocator<md::MeshRenderableLogic::processEntering(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF574A18;
}

uint64_t md::RegistryManager::entering(void *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(a1, a2 + 432, (uint64_t)v7, *(void *)(a2 + 432));
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_1A192D124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(gdc::Registry * const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MeshRenderableLogic", "", v5, 2u);
  }
}

void md::MeshRenderableLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  uint64_t v7 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  uint64_t v8 = v7;
  uint64_t v59 = a2;
  os_signpost_id_t v9 = *(void *)(a2 + 80);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "updateDynamicMeshes", "", (uint8_t *)&buf, 2u);
  }

  uint64_t v61 = *(void *)(a3 + 40);
  md::MeshRenderableBuilder::MeshRenderableBuilder(&buf, **(void **)a3, *(void *)(*(void *)a3 + 8), (void *)(*(void *)a3 + 16));
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(a1 + 136);
  uint8x8_t v12 = *(int8x8_t ***)(v11 + 384);
  unint64_t v13 = *(int8x8_t ***)(v11 + 392);
  while (v12 != v13)
  {
    uint8x8_t v14 = *v12;
    long long v62 = v14;
    unint64_t v15 = (void *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v14);
    uint64_t v16 = gdc::Registry::storage<md::components::Material>(v14);
    unint64_t v17 = (void *)v16;
    uint64_t v18 = v16 + 32;
    uint64_t v19 = v15[7];
    uint64_t v20 = v15[8];
    if (*(void *)(v16 + 64) - *(void *)(v16 + 56) >= (unint64_t)(v20 - v19)) {
      unint64_t v21 = v15 + 4;
    }
    else {
      unint64_t v21 = (void *)(v16 + 32);
    }
    if (v15 + 4 != v21)
    {
      if ((void *)v18 != v21) {
        goto LABEL_7;
      }
LABEL_28:
      uint64_t v67 = (int8x8_t **)v10;
      double v68 = &v62;
      p_uint64_t buf = &buf;
      uint64_t v70 = v61;
      uint64_t v33 = v17[7];
      uint64_t v34 = v17[8];
      if (v33 != v34)
      {
        uint64_t v35 = v17[10];
        do
        {
          unint64_t v37 = *(unsigned int *)(v33 + 4);
          uint64_t v38 = v15[4];
          unint64_t v39 = (v15[5] - v38) >> 3;
          if (v37 >> 7 < v39)
          {
            uint64_t v40 = *(void *)(v38 + 8 * (v37 >> 7));
            if (v40)
            {
              unint64_t v41 = *(unsigned __int16 *)(v40 + 2 * (v37 & 0x7F));
              uint64_t v43 = v15[7];
              uint64_t v42 = v15[8];
              unint64_t v44 = (v42 - v43) >> 3;
              if (v44 > v41)
              {
                uint64_t v45 = v43 + 8 * v41;
                if (v45 != v42 && *(_DWORD *)(v45 + 4) == v37)
                {
                  unint64_t v47 = *(void *)v33;
                  unint64_t v48 = *(void *)v33 >> 39;
                  if (v48 < v39
                    && (uint64_t v49 = *(void *)(v38 + 8 * v48)) != 0
                    && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v47) & 0x7F)), v44 > v50)
                    && ((uint64_t v51 = v43 + 8 * v50, v51 != v42) ? (v52 = *(_DWORD *)(v51 + 4) == HIDWORD(v47)) : (v52 = 0), v52))
                  {
                    uint64_t v36 = v15[10] + 304 * v50;
                  }
                  else
                  {
                    uint64_t v36 = v15[11];
                  }
                  md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(&v67, v47, v36);
                }
              }
            }
          }
          v35 += 24;
          v33 += 8;
        }
        while (v33 != v34);
      }
      goto LABEL_7;
    }
    uint64_t v22 = v10;
    uint64_t v67 = (int8x8_t **)v10;
    double v68 = &v62;
    p_uint64_t buf = &buf;
    uint64_t v70 = v61;
    if (v19 != v20)
    {
      uint64_t v23 = v15[10];
      do
      {
        unint64_t v24 = *(unsigned int *)(v19 + 4);
        uint64_t v25 = v17[4];
        unint64_t v26 = (v17[5] - v25) >> 3;
        if (v24 >> 7 < v26)
        {
          uint64_t v27 = *(void *)(v25 + 8 * (v24 >> 7));
          if (v27)
          {
            unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (v24 & 0x7F));
            uint64_t v30 = v17[7];
            uint64_t v29 = v17[8];
            if ((v29 - v30) >> 3 > v28)
            {
              uint64_t v31 = v30 + 8 * v28;
              if (v31 != v29 && *(_DWORD *)(v31 + 4) == v24) {
                md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(&v67, *(void *)v19, v23);
              }
            }
          }
        }
        v23 += 304;
        v19 += 8;
      }
      while (v19 != v20);
    }
    uint64_t v10 = v22;
    if ((void *)v18 == v21) {
      goto LABEL_28;
    }
LABEL_7:
    ++v12;
  }
  uint64_t v53 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v54 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  double v55 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_21);
  }
  unsigned __int16 v56 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  unint64_t v57 = v56;
  os_signpost_id_t v58 = *(void *)(v59 + 80);
  if (v58 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v56))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v57, OS_SIGNPOST_INTERVAL_END, v58, "updateDynamicMeshes", "", (uint8_t *)&buf, 2u);
  }

  if (v10 + 296 != a4)
  {
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(v10 + 328);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,void *> *>>((void *)a4, *(char **)(v10 + 312));
  }
  *(unsigned char *)(a4 + 40) = *(unsigned char *)(v10 + 417);
}

void sub_1A192D6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18 && !atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  if (a16 && !atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::components::DynamicMeshInstance>(int8x8_t *a1)
{
  unint64_t v10 = 0xE6F642DE3173ADE3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE6F642DE3173ADE3;
    if (*(void *)&v1 <= 0xE6F642DE3173ADE3) {
      unint64_t v3 = 0xE6F642DE3173ADE3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE6F642DE3173ADE3;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE6F642DE3173ADE3)
      {
        if (v5[2] == 0xE6F642DE3173ADE3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE6F642DE3173ADE3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE6F642DE3173ADE3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A192DA10(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *md::MeshRenderableBuilder::MeshRenderableBuilder(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a4[1];
  a1[2] = *a4;
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EF583858;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((_DWORD *)v6 + 14) = 0;
  *((void *)v6 + 3) = &unk_1EF55AE58;
  *((void *)v6 + 4) = 0;
  *(_OWORD *)(v6 + 60) = xmmword_1A28FC7B0;
  *(void *)(v6 + 76) = 0x100000001;
  *((_DWORD *)v6 + 21) = 0;
  a1[4] = v6 + 24;
  a1[5] = v6;
  return a1;
}

void sub_1A192DB08(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  os_signpost_id_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,void *> *>>(void *a1, char *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_5;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (!v6)
  {
LABEL_5:
    while (a2)
    {
      unint64_t v7 = operator new(0x30uLL);
      void *v7 = 0;
      v7[1] = 0;
      uint64_t v8 = *((unsigned __int16 *)a2 + 8);
      void v7[3] = 0;
      *((_WORD *)v7 + 8) = v8;
      unsigned __int8 v7[4] = 0;
      v7[5] = 0;
      unint64_t v10 = (unsigned char *)*((void *)a2 + 3);
      os_signpost_id_t v9 = (unsigned char *)*((void *)a2 + 4);
      int64_t v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0) {
          abort();
        }
        uint8x8_t v12 = (char *)operator new(v9 - v10);
        void v7[3] = v12;
        unsigned __int8 v7[4] = v12;
        unint64_t v13 = &v12[8 * (v11 >> 3)];
        v7[5] = v13;
        memcpy(v12, v10, v11);
        unsigned __int8 v7[4] = v13;
      }
      v7[1] = v8;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v7);
      a2 = *(char **)a2;
    }
    return;
  }
  while (a2)
  {
    *((_WORD *)v6 + 8) = *((_WORD *)a2 + 8);
    if (v6 == a2) {
      goto LABEL_13;
    }
    unint64_t v15 = (char *)*((void *)v6 + 3);
    uint64_t v16 = (char *)*((void *)a2 + 3);
    unint64_t v17 = (unsigned char *)*((void *)a2 + 4);
    size_t v18 = v17 - v16;
    unint64_t v19 = (v17 - v16) >> 3;
    uint64_t v20 = *((void *)v6 + 5);
    if (v19 > (v20 - (uint64_t)v15) >> 3)
    {
      if (v15)
      {
        *((void *)v6 + 4) = v15;
        operator delete(v15);
        uint64_t v20 = 0;
        *((void *)v6 + 3) = 0;
        *((void *)v6 + 4) = 0;
        *((void *)v6 + 5) = 0;
      }
      if ((v18 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      uint64_t v21 = v20 >> 2;
      if (v20 >> 2 <= v19) {
        uint64_t v21 = (v17 - v16) >> 3;
      }
      BOOL v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v22) {
        unint64_t v23 = v21;
      }
      if (v23 >> 61) {
LABEL_38:
      }
        abort();
      uint64_t v24 = 8 * v23;
      uint64_t v25 = (char *)operator new(8 * v23);
      unint64_t v15 = v25;
      *((void *)v6 + 4) = v25;
      unint64_t v26 = (void **)(v6 + 32);
      *((void *)v6 + 3) = v25;
      *((void *)v6 + 5) = &v25[v24];
      if (v17 != v16) {
        memcpy(v25, v16, v17 - v16);
      }
      goto LABEL_12;
    }
    unint64_t v26 = (void **)(v6 + 32);
    uint64_t v27 = (unsigned char *)*((void *)v6 + 4);
    unint64_t v28 = (v27 - v15) >> 3;
    if (v28 >= v19)
    {
      if (v17 == v16) {
        goto LABEL_12;
      }
      uint64_t v30 = (void *)*((void *)v6 + 3);
      uint64_t v29 = (char *)*((void *)a2 + 3);
    }
    else
    {
      if (v27 != v15)
      {
        memmove(*((void **)v6 + 3), *((const void **)a2 + 3), v27 - v15);
        unint64_t v15 = (char *)*v26;
      }
      uint64_t v29 = &v16[8 * v28];
      size_t v18 = v17 - v29;
      if (v17 == v29) {
        goto LABEL_12;
      }
      uint64_t v30 = v15;
    }
    memmove(v30, v29, v18);
LABEL_12:
    *unint64_t v26 = &v15[v18];
LABEL_13:
    uint8x8_t v14 = *(char **)v6;
    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
    a2 = *(char **)a2;
    uint64_t v6 = v14;
    if (!v14) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v31 = *(char **)v6;
    double v32 = (void *)*((void *)v6 + 3);
    if (v32)
    {
      *((void *)v6 + 4) = v32;
      operator delete(v32);
    }
    operator delete(v6);
    uint64_t v6 = v31;
  }
  while (v31);
}

void sub_1A192DE00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned __int16 *)(a2 + 16);
  *(void *)(a2 + 8) = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      size_t prime = v10;
    }
    else {
      size_t prime = v9;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (prime > v5) {
      goto LABEL_105;
    }
    if (prime >= v5) {
      goto LABEL_40;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (prime <= v25) {
      size_t prime = v25;
    }
    if (prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v12 = operator new(8 * prime);
      unint64_t v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      uint64_t v16 = a1 + 16;
      unint64_t v15 = *(uint64_t ***)(a1 + 16);
      if (v15)
      {
        size_t v17 = (size_t)v15[1];
        size_t v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime) {
            v17 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v17) = v16;
          for (uint64_t i = *v15; *v15; uint64_t i = *v15)
          {
            size_t v37 = i[1];
            if (v37 >= prime) {
              v37 %= prime;
            }
            if (v37 == v17)
            {
              unint64_t v15 = (uint64_t **)i;
            }
            else
            {
              uint64_t v38 = i;
              if (*(void *)(*(void *)a1 + 8 * v37))
              {
                do
                {
                  unint64_t v39 = v38;
                  uint64_t v38 = (uint64_t *)*v38;
                }
                while (v38 && *((unsigned __int16 *)i + 8) == *((unsigned __int16 *)v38 + 8));
                char *v15 = v38;
                uint64_t v40 = 8 * v37;
                *unint64_t v39 = **(void **)(*(void *)a1 + v40);
                **(void **)(*(void *)a1 + v40) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v37) = v15;
                unint64_t v15 = (uint64_t **)i;
                size_t v17 = v37;
              }
            }
          }
        }
        else
        {
          size_t v19 = v17 & v18;
          *(void *)(*(void *)a1 + 8 * v19) = v16;
          for (uint64_t j = *v15; *v15; uint64_t j = *v15)
          {
            size_t v21 = j[1] & v18;
            if (v21 == v19)
            {
              unint64_t v15 = (uint64_t **)j;
            }
            else
            {
              BOOL v22 = j;
              if (*(void *)(*(void *)a1 + 8 * v21))
              {
                do
                {
                  unint64_t v23 = v22;
                  BOOL v22 = (uint64_t *)*v22;
                }
                while (v22 && *((unsigned __int16 *)j + 8) == *((unsigned __int16 *)v22 + 8));
                char *v15 = v22;
                uint64_t v24 = 8 * v21;
                *unint64_t v23 = **(void **)(*(void *)a1 + v24);
                **(void **)(*(void *)a1 + v24) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v21) = v15;
                unint64_t v15 = (uint64_t **)j;
                size_t v19 = v21;
              }
            }
          }
        }
      }
      unint64_t v5 = prime;
    }
    else
    {
      unint64_t v50 = *(void **)a1;
      *(void *)a1 = 0;
      if (v50) {
        operator delete(v50);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    unint64_t v41 = v4;
    if (v5 <= v4) {
      unint64_t v41 = v4 % v5;
    }
    uint64_t v42 = *(uint64_t **)(*(void *)a1 + 8 * v41);
    if (!v42)
    {
      uint64_t v35 = 0;
      unint64_t v48 = *(void *)(a2 + 8);
      if (v48 < v5) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    int v43 = 0;
    do
    {
      uint64_t v35 = v42;
      uint64_t v42 = (uint64_t *)*v42;
      if (!v42) {
        break;
      }
      unint64_t v46 = v42[1];
      unint64_t v47 = v46;
      if (v46 >= v5) {
        unint64_t v47 = v46 % v5;
      }
      if (v47 != v41) {
        break;
      }
      BOOL v44 = v46 == v4 && *((unsigned __int16 *)v42 + 8) == *(unsigned __int16 *)(a2 + 16);
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    uint64_t v30 = (v5 - 1) & v4;
    uint64_t v31 = *(uint64_t **)(*(void *)a1 + 8 * v30);
    if (!v31)
    {
      uint64_t v35 = 0;
      unint64_t v48 = *(void *)(a2 + 8);
      goto LABEL_75;
    }
    int v32 = 0;
    do
    {
      uint64_t v35 = v31;
      uint64_t v31 = (uint64_t *)*v31;
      if (!v31) {
        break;
      }
      uint64_t v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30) {
        break;
      }
      BOOL v33 = v36 == v4 && *((unsigned __int16 *)v31 + 8) == *(unsigned __int16 *)(a2 + 16);
      char v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  unint64_t v48 = *(void *)(a2 + 8);
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5) {
LABEL_77:
  }
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *(void *)a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v48) = a1 + 16;
    if (!*(void *)a2) {
      goto LABEL_92;
    }
    unint64_t v49 = *(void *)(*(void *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5) {
        v49 %= v5;
      }
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(void *)(*(void *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *(void *)a2 = *v35;
  void *v35 = a2;
  if (*(void *)a2)
  {
    unint64_t v49 = *(void *)(*(void *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5) {
        v49 %= v5;
      }
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48) {
      goto LABEL_91;
    }
  }
LABEL_92:
  ++*(void *)(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__1NS_9allocatorISR_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MeshRenderableLogic", "", v5, 2u);
  }
}

BOOL std::__function::__func<md::OverlaysLogic::updateFoundationSet(void)::$_0,std::allocator<md::OverlaysLogic::updateFoundationSet(void)::$_0>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  uint8x8_t v2 = *a2;
  int8x8_t v3 = (*a2)[1];
  if (!*(void *)&v3) {
    return 0;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x64A448A5CD5D38DBLL;
    if (*(void *)&v3 <= 0x64A448A5CD5D38DBuLL) {
      uint64_t v5 = 0x64A448A5CD5D38DBuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x64A448A5CD5D38DBLL;
  }
  int8x8_t v6 = *v2;
  float v7 = *(void **)(*(void *)v2 + 8 * v5);
  if (!v7) {
    return 0;
  }
  BOOL v8 = (void *)*v7;
  if (!*v7) {
    return 0;
  }
  uint64_t v9 = *(void *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x64A448A5CD5D38DBLL)
      {
        if (v8[2] == 0x64A448A5CD5D38DBLL) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      BOOL v8 = (void *)*v8;
      if (!v8) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v8[1];
    if (v11 != 0x64A448A5CD5D38DBLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
      if (v11 != v5) {
        return 0;
      }
      goto LABEL_16;
    }
    if (v8[2] == 0x64A448A5CD5D38DBLL) {
      break;
    }
LABEL_16:
    BOOL v8 = (void *)*v8;
    if (!v8) {
      return 0;
    }
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) != 0x64A448A5CD5D38DBLL || !*(void *)(v12 + 32)) {
    return 0;
  }
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v13 = 0x41A3BFA74D47A0E8;
    if (*(void *)&v3 <= 0x41A3BFA74D47A0E8uLL) {
      uint64_t v13 = 0x41A3BFA74D47A0E8uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v13 = v9 & 0x41A3BFA74D47A0E8;
  }
  uint64_t v14 = *(void **)(*(void *)&v6 + 8 * v13);
  if (!v14) {
    return 0;
  }
  unint64_t v15 = (void *)*v14;
  if (!v15) {
    return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0x41A3BFA74D47A0E8)
      {
        if (v15[2] == 0x41A3BFA74D47A0E8) {
          goto LABEL_44;
        }
      }
      else if ((v17 & v9) != v13)
      {
        return 0;
      }
      BOOL result = 0;
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        return result;
      }
    }
  }
  while (2)
  {
    unint64_t v18 = v15[1];
    if (v18 != 0x41A3BFA74D47A0E8)
    {
      if (v18 >= *(void *)&v3) {
        v18 %= *(void *)&v3;
      }
      if (v18 != v13) {
        return 0;
      }
      goto LABEL_38;
    }
    if (v15[2] != 0x41A3BFA74D47A0E8)
    {
LABEL_38:
      BOOL result = 0;
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        return result;
      }
      continue;
    }
    break;
  }
LABEL_44:
  uint64_t v19 = v15[5];
  if (*(void *)(v19 + 8) == 0x41A3BFA74D47A0E8) {
    return *(void *)(v19 + 32) != 0;
  }
  return 0;
}

BOOL std::__function::__func<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  int8x8_t v2 = (*a2)[1];
  if (!*(void *)&v2) {
    return 1;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xCBD572B797B24F09;
    if (*(void *)&v2 <= 0xCBD572B797B24F09) {
      unint64_t v4 = 0xCBD572B797B24F09 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & 0xCBD572B797B24F09;
  }
  uint64_t v5 = *(void **)(*(void *)*a2 + 8 * v4);
  if (!v5) {
    return 1;
  }
  int8x8_t v6 = (void *)*v5;
  if (!v6) {
    return 1;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == 0xCBD572B797B24F09)
      {
        if (v6[2] == 0xCBD572B797B24F09) {
          goto LABEL_22;
        }
      }
      else if ((v9 & v7) != v4)
      {
        return 1;
      }
      int8x8_t v6 = (void *)*v6;
      if (!v6) {
        return 1;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == 0xCBD572B797B24F09) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      return 1;
    }
LABEL_11:
    int8x8_t v6 = (void *)*v6;
    if (!v6) {
      return 1;
    }
  }
  if (v6[2] != 0xCBD572B797B24F09) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v10 = v6[5];
  if (*(void *)(v10 + 8) == 0xCBD572B797B24F09) {
    return *(void *)(v10 + 32) == 0;
  }
  return 1;
}

void sub_1A192E8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v11);
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void grl::ResourceProvider::clearResourceNamesCache(grl::ResourceProvider *this)
{
  uint64_t v1 = this;
  int8x8_t v2 = (std::mutex *)((char *)this + 176);
  std::mutex::lock((std::mutex *)((char *)this + 176));
  uint8x8_t v3 = (void *)*((void *)v1 + 31);
  uint64_t v1 = (grl::ResourceProvider *)((char *)v1 + 248);
  std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy((uint64_t)v1 - 8, v3);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  std::mutex::unlock(v2);
}

void std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*a1);
    std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(a1[1]);
    int8x8_t v2 = (std::__shared_weak_count *)a1[7];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void *md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(void *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    uint64_t v90 = 0;
    unint64_t v91 = 0;
    {
      operator new();
    }
    uint64_t v92 = mdm::Allocator::instance(void)::alloc;
    uint64_t v93 = 0;
    {
      operator new();
    }
    uint64_t v94 = mdm::Allocator::instance(void)::alloc;
    unint64_t v95 = 0;
    float v96 = 1.0;
    int8x8_t v6 = *(uint64_t **)(a2 + 40);
    uint64_t v7 = *(uint64_t **)(a2 + 48);
    while (1)
    {
      if (v6 == v7) {
        operator new();
      }
      unint64_t v9 = *(void *)(*v6 + 88);
      uint64_t v10 = *(void **)(*v6 + 72);
      if (a5)
      {
        if (v9)
        {
          if (v9 >= 8)
          {
            unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = (__int32 *)(v10 + 6);
            int8x16_t v14 = 0uLL;
            unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFF8;
            int8x16_t v16 = 0uLL;
            v17.i64[0] = 0x300000003;
            v17.i64[1] = 0x300000003;
            v18.i64[0] = 0x100000001;
            v18.i64[1] = 0x100000001;
            do
            {
              v19.i32[0] = *(v13 - 12);
              v20.i32[0] = *(v13 - 11);
              v19.i32[1] = *(v13 - 9);
              v19.i32[2] = *(v13 - 6);
              v19.i32[3] = *(v13 - 3);
              v21.i32[0] = *v13;
              v22.i32[0] = v13[1];
              v21.i32[1] = v13[3];
              v21.i32[2] = v13[6];
              v21.i32[3] = v13[9];
              v20.i32[1] = *(v13 - 8);
              v20.i32[2] = *(v13 - 5);
              v20.i32[3] = *(v13 - 2);
              v22.i32[1] = v13[4];
              v22.i32[2] = v13[7];
              v22.i32[3] = v13[10];
              int8x16_t v14 = vorrq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v20, 2uLL), v17), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v19, 2uLL), v17))), v14);
              int8x16_t v16 = vorrq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v22, 2uLL), v17), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v21, 2uLL), v17))), v16);
              v13 += 24;
              v15 -= 8;
            }
            while (v15);
            int8x16_t v23 = vorrq_s8(v16, v14);
            *(int8x8_t *)v23.uint64_t i8 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
            unsigned int v12 = v23.i32[0] | v23.i32[1];
            if (v9 == v11) {
              goto LABEL_23;
            }
          }
          else
          {
            unint64_t v11 = 0;
            unsigned int v12 = 0;
          }
          unint64_t v24 = v9 - v11;
          unint64_t v25 = (float *)v10 + 3 * v11 + 1;
          do
          {
            unsigned int v26 = vcvts_n_u32_f32(*(v25 - 1), 2uLL);
            if (v26 >= 3) {
              LOBYTE(v26) = 3;
            }
            float v27 = *v25;
            v25 += 3;
            unsigned int v28 = vcvts_n_u32_f32(v27, 2uLL);
            if (v28 >= 3) {
              LOBYTE(v28) = 3;
            }
            v12 |= 1 << (v26 | (4 * v28));
            --v24;
          }
          while (v24);
        }
        else
        {
          unsigned int v12 = 0;
        }
      }
      else
      {
        unsigned int v12 = ggl::CullingGrid::intersectedCellsForRibbon(v9, v10);
      }
LABEL_23:
      unint64_t v29 = v12;
      unint64_t v30 = v91;
      if (v91)
      {
        uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v91);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          unint64_t v5 = v12;
          if (v91 <= v12) {
            unint64_t v5 = v12 % v91;
          }
        }
        else
        {
          unint64_t v5 = (v91 - 1) & v12;
        }
        int v32 = *(uint64_t **)(v90 + 8 * v5);
        if (v32)
        {
          uint64_t v33 = *v32;
          if (*v32)
          {
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v35 = *(void *)(v33 + 8);
                if (v35 == v12)
                {
                  if (*(_DWORD *)(v33 + 16) == v12) {
                    goto LABEL_103;
                  }
                }
                else if ((v35 & (v91 - 1)) != v5)
                {
                  goto LABEL_43;
                }
                uint64_t v33 = *(void *)v33;
                if (!v33) {
                  goto LABEL_43;
                }
              }
            }
            do
            {
              unint64_t v34 = *(void *)(v33 + 8);
              if (v34 == v12)
              {
                if (*(_DWORD *)(v33 + 16) == v12) {
                  goto LABEL_103;
                }
              }
              else
              {
                if (v34 >= v91) {
                  v34 %= v91;
                }
                if (v34 != v5) {
                  break;
                }
              }
              uint64_t v33 = *(void *)v33;
            }
            while (v33);
          }
        }
      }
LABEL_43:
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v94 + 16))(v94, 56, 8);
      double v97 = &v94;
      *(void *)uint64_t v33 = 0;
      *(void *)(v33 + 8) = v12;
      *(_DWORD *)(v33 + 16) = v12;
      *(void *)(v33 + 32) = 0;
      *(void *)(v33 + 40) = 0;
      *(void *)(v33 + 24) = 0;
      {
        operator new();
      }
      *(void *)(v33 + 48) = mdm::Allocator::instance(void)::alloc;
      char v98 = 1;
      float v36 = (float)(v95 + 1);
      if (!v91 || (float)(v96 * (float)v91) < v36)
      {
        BOOL v37 = (v91 & (v91 - 1)) != 0;
        if (v91 < 3) {
          BOOL v37 = 1;
        }
        unint64_t v38 = v37 | (2 * v91);
        unint64_t v39 = vcvtps_u32_f32(v36 / v96);
        if (v38 <= v39) {
          size_t prime = v39;
        }
        else {
          size_t prime = v38;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v30 = v91;
        if (prime <= v91)
        {
          if (prime < v91)
          {
            unint64_t v51 = vcvtps_u32_f32((float)v95 / v96);
            if (v91 < 3 || (uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v91), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
            {
              unint64_t v51 = std::__next_prime(v51);
            }
            else
            {
              uint64_t v53 = 1 << -(char)__clz(v51 - 1);
              if (v51 >= 2) {
                unint64_t v51 = v53;
              }
            }
            if (prime <= v51) {
              size_t prime = v51;
            }
            if (prime >= v91)
            {
              unint64_t v30 = v91;
            }
            else
            {
              if (prime) {
                goto LABEL_56;
              }
              uint64_t v87 = v90;
              uint64_t v90 = 0;
              if (v87) {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v92 + 40))(v92, v87, 8 * v91);
              }
              unint64_t v30 = 0;
              unint64_t v91 = 0;
            }
          }
LABEL_80:
          if ((v30 & (v30 - 1)) != 0)
          {
            if (v30 <= v29) {
              unint64_t v5 = v29 % v30;
            }
            else {
              unint64_t v5 = v29;
            }
          }
          else
          {
            unint64_t v5 = (v30 - 1) & v29;
          }
          goto LABEL_93;
        }
LABEL_56:
        uint64_t v41 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v92 + 16))(v92, 8 * prime, 8);
        uint64_t v42 = v90;
        uint64_t v90 = v41;
        if (v42) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v92 + 40))(v92, v42, 8 * v91);
        }
        uint64_t v43 = 0;
        unint64_t v91 = prime;
        do
          *(void *)(v90 + 8 * v43++) = 0;
        while (prime != v43);
        BOOL v44 = (void **)v93;
        if (!v93) {
          goto LABEL_79;
        }
        size_t v45 = *(void *)(v93 + 8);
        size_t v46 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v47 = v45 & v46;
          *(void *)(v90 + 8 * v47) = &v93;
          for (uint64_t i = *v44; *v44; uint64_t i = *v44)
          {
            size_t v49 = i[1] & v46;
            if (v49 == v47)
            {
              BOOL v44 = (void **)i;
            }
            else if (*(void *)(v90 + 8 * v49))
            {
              *BOOL v44 = (void *)*i;
              uint64_t v50 = 8 * v49;
              *uint64_t i = **(void **)(v90 + v50);
              **(void **)(v90 + v50) = i;
            }
            else
            {
              *(void *)(v90 + 8 * v49) = v44;
              BOOL v44 = (void **)i;
              size_t v47 = v49;
            }
          }
          goto LABEL_79;
        }
        if (v45 >= prime) {
          v45 %= prime;
        }
        *(void *)(v90 + 8 * v45) = &v93;
        uint64_t v54 = *v44;
        if (!*v44)
        {
LABEL_79:
          unint64_t v30 = prime;
          goto LABEL_80;
        }
        while (2)
        {
          size_t v56 = v54[1];
          if (v56 >= prime) {
            v56 %= prime;
          }
          if (v56 != v45)
          {
            if (!*(void *)(v90 + 8 * v56))
            {
              *(void *)(v90 + 8 * v56) = v44;
LABEL_84:
              BOOL v44 = (void **)v54;
              uint64_t v54 = (void *)*v54;
              size_t v45 = v56;
              if (!v54) {
                goto LABEL_79;
              }
              continue;
            }
            *BOOL v44 = (void *)*v54;
            uint64_t v55 = 8 * v56;
            *uint64_t v54 = **(void **)(v90 + v55);
            **(void **)(v90 + v55) = v54;
            uint64_t v54 = v44;
          }
          break;
        }
        size_t v56 = v45;
        goto LABEL_84;
      }
LABEL_93:
      unint64_t v57 = *(uint64_t **)(v90 + 8 * v5);
      if (v57)
      {
        *(void *)uint64_t v33 = *v57;
LABEL_101:
        *unint64_t v57 = v33;
        goto LABEL_102;
      }
      *(void *)uint64_t v33 = v93;
      uint64_t v93 = v33;
      *(void *)(v90 + 8 * v5) = &v93;
      if (*(void *)v33)
      {
        unint64_t v58 = *(void *)(*(void *)v33 + 8);
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v58 >= v30) {
            v58 %= v30;
          }
        }
        else
        {
          v58 &= v30 - 1;
        }
        unint64_t v57 = (uint64_t *)(v90 + 8 * v58);
        goto LABEL_101;
      }
LABEL_102:
      ++v95;
LABEL_103:
      uint64_t v59 = *(void **)(v33 + 32);
      unint64_t v60 = *(void *)(v33 + 40);
      if ((unint64_t)v59 < v60)
      {
        if (v59)
        {
          uint64_t v61 = *v6;
          uint64_t *v6 = 0;
          *uint64_t v59 = v61;
        }
        unint64_t v8 = v59 + 1;
        goto LABEL_6;
      }
      uint64_t v62 = *(void *)(v33 + 24);
      uint64_t v63 = ((uint64_t)v59 - v62) >> 3;
      unint64_t v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
        abort();
      }
      uint64_t v65 = v60 - v62;
      if (v65 >> 2 > v64) {
        unint64_t v64 = v65 >> 2;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v66 = v64;
      }
      if (v66)
      {
        uint64_t v67 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v33 + 48) + 16))(*(void *)(v33 + 48), 8 * v66, 8);
        double v68 = (void *)(v67 + 8 * v63);
        uint64_t v69 = v67 + 8 * v66;
        if (v67)
        {
          uint64_t v70 = *v6;
          uint64_t *v6 = 0;
          *double v68 = v70;
        }
      }
      else
      {
        uint64_t v69 = 0;
        double v68 = (void *)(8 * v63);
      }
      unint64_t v8 = v68 + 1;
      os_signpost_id_t v71 = *(void **)(v33 + 24);
      unint64_t v5 = *(void *)(v33 + 32);
      if ((void *)v5 == v71)
      {
        *(void *)(v33 + 24) = v68;
        *(void *)(v33 + 32) = v8;
        uint64_t v77 = *(void *)(v33 + 40);
        *(void *)(v33 + 40) = v69;
        goto LABEL_130;
      }
      unint64_t v72 = v5 - (void)v71 - 8;
      if (v72 <= 0x47
        || (unint64_t v73 = v72 >> 3, v5 - 8 * v73 - 8 < (unint64_t)v68) && (unint64_t)&v68[-v73 - 1] < v5)
      {
        os_signpost_id_t v74 = *(void **)(v33 + 32);
        do
        {
LABEL_121:
          uint64_t v75 = *--v74;
          void *v74 = 0;
          *--double v68 = v75;
        }
        while (v74 != v71);
        goto LABEL_122;
      }
      unint64_t v80 = v73 + 1;
      uint64_t v81 = (v73 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      os_signpost_id_t v74 = (void *)(v5 - 8 * v81);
      long long v82 = v68 - 2;
      long long v83 = (long long *)(v5 - 32);
      uint64_t v84 = v81;
      do
      {
        long long v86 = *v83;
        long long v85 = v83[1];
        *long long v83 = 0uLL;
        v83[1] = 0uLL;
        v83 -= 2;
        *(v82 - 1) = v86;
        _OWORD *v82 = v85;
        v82 -= 2;
        v84 -= 4;
      }
      while (v84);
      v68 -= v81;
      if (v80 != v81) {
        goto LABEL_121;
      }
LABEL_122:
      unint64_t v5 = *(void *)(v33 + 24);
      long long v76 = *(void **)(v33 + 32);
      *(void *)(v33 + 24) = v68;
      *(void *)(v33 + 32) = v8;
      uint64_t v77 = *(void *)(v33 + 40);
      *(void *)(v33 + 40) = v69;
      while (v76 != (void *)v5)
      {
        long long v79 = (void (***)(void))*--v76;
        long long v78 = v79;
        void *v76 = 0;
        if (v79)
        {
          (**v78)(v78);
          {
            operator new();
          }
          (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v78, 120);
        }
      }
LABEL_130:
      if (v5) {
        (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v33 + 48) + 40))(*(void *)(v33 + 48), v5, v77 - v5);
      }
LABEL_6:
      *(void *)(v33 + 32) = v8;
      ++v6;
    }
  }
  return result;
}

void sub_1A1931D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(v25 - 168, *(uint64_t **)(v25 - 144));
  uint64_t v27 = *(void *)(v25 - 168);
  *(void *)(v25 - 168) = 0;
  if (v27) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v25 - 152) + 40))(*(void *)(v25 - 152), v27, 8 * *(void *)(v25 - 160));
  }
  unsigned int v28 = *(void **)a25;
  if (*(void *)a25)
  {
    *(void *)(a25 + 8) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t ggl::PipelineSetup::PipelineSetup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF55B1D8;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = a1 + 32;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = 0;
  {
    uint64_t v44 = v3;
    uint64_t v3 = v44;
    if (v45) {
      operator new();
    }
  }
  uint64_t v4 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  {
    uint64_t v46 = v3;
    uint64_t v3 = v46;
    if (v47) {
      operator new();
    }
  }
  uint64_t v5 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  {
    uint64_t v48 = v3;
    uint64_t v3 = v48;
    if (v49) {
      operator new();
    }
  }
  uint64_t v6 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v6;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  {
    uint64_t v50 = v3;
    uint64_t v3 = v50;
    if (v51) {
      operator new();
    }
  }
  uint64_t v7 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  {
    uint64_t v54 = v3;
    uint64_t v3 = v54;
    if (v52) {
      operator new();
    }
  }
  uint64_t v8 = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  {
    uint64_t v55 = v3;
    uint64_t v3 = v55;
    if (v53) {
      operator new();
    }
  }
  *(void *)(a1 + 216) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 224) = 0;
  unint64_t v9 = *(void **)(a1 + 8);
  unint64_t v10 = v9[2];
  long long v56 = 0uLL;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = (*(void *)(a1 + 40) - v11) >> 4;
  if (v10 <= v12)
  {
    if (v10 < v12) {
      *(void *)(a1 + 40) = v11 + 16 * v10;
    }
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(v3, v10 - v12, &v56);
    unint64_t v9 = *(void **)(a1 + 8);
  }
  unint64_t v13 = v9[4];
  long long v56 = 0uLL;
  uint64_t v14 = *(void *)(a1 + 64);
  unint64_t v15 = (*(void *)(a1 + 72) - v14) >> 4;
  if (v13 <= v15)
  {
    if (v13 < v15) {
      *(void *)(a1 + 72) = v14 + 16 * v13;
    }
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(a1 + 64, v13 - v15, &v56);
    unint64_t v9 = *(void **)(a1 + 8);
  }
  unint64_t v16 = v9[5];
  *(void *)&long long v56 = 0;
  uint64_t v17 = *(void *)(a1 + 96);
  unint64_t v18 = (*(void *)(a1 + 104) - v17) >> 3;
  if (v16 <= v18)
  {
    if (v16 < v18) {
      *(void *)(a1 + 104) = v17 + 8 * v16;
    }
  }
  else
  {
    std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append(a1 + 96, v16 - v18, &v56);
  }
  unint64_t v19 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4;
  long long v56 = 0uLL;
  uint64_t v20 = *(void *)(a1 + 128);
  uint64_t v21 = *(void *)(a1 + 136);
  unint64_t v22 = (v21 - v20) >> 4;
  unint64_t v23 = v19 - v22;
  if (v19 <= v22)
  {
    if (v19 < v22)
    {
      uint64_t v24 = v20 + 16 * v19;
      if (v21 == v24)
      {
        *(void *)(a1 + 136) = v24;
      }
      else
      {
        do
        {
          uint64_t v25 = *(std::__shared_weak_count **)(v21 - 8);
          if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v25->__on_zero_shared)(v25, v23);
            std::__shared_weak_count::__release_weak(v25);
          }
          v21 -= 16;
        }
        while (v21 != v24);
        unsigned int v26 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        *(void *)(a1 + 136) = v24;
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v26->__on_zero_shared)(v26, v23);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(a1 + 128, v23, &v56);
  }
  unint64_t v27 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 4;
  long long v56 = 0uLL;
  uint64_t v28 = *(void *)(a1 + 160);
  uint64_t v29 = *(void *)(a1 + 168);
  unint64_t v30 = (v29 - v28) >> 4;
  unint64_t v31 = v27 - v30;
  if (v27 <= v30)
  {
    if (v27 < v30)
    {
      uint64_t v32 = v28 + 16 * v27;
      if (v29 == v32)
      {
        *(void *)(a1 + 168) = v32;
      }
      else
      {
        do
        {
          uint64_t v33 = *(std::__shared_weak_count **)(v29 - 8);
          if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v33->__on_zero_shared)(v33, v31);
            std::__shared_weak_count::__release_weak(v33);
          }
          v29 -= 16;
        }
        while (v29 != v32);
        unint64_t v34 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        *(void *)(a1 + 168) = v32;
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v34->__on_zero_shared)(v34, v31);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(a1 + 160, v31, &v56);
  }
  unint64_t v35 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 4;
  long long v56 = 0uLL;
  uint64_t v36 = *(void *)(a1 + 192);
  uint64_t v37 = *(void *)(a1 + 200);
  unint64_t v38 = (v37 - v36) >> 4;
  unint64_t v39 = v35 - v38;
  if (v35 <= v38)
  {
    if (v35 < v38)
    {
      uint64_t v40 = v36 + 16 * v35;
      if (v37 == v40)
      {
        *(void *)(a1 + 200) = v40;
      }
      else
      {
        do
        {
          uint64_t v41 = *(std::__shared_weak_count **)(v37 - 8);
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v41->__on_zero_shared)(v41, v39);
            std::__shared_weak_count::__release_weak(v41);
          }
          v37 -= 16;
        }
        while (v37 != v40);
        uint64_t v42 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        *(void *)(a1 + 200) = v40;
        if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v42->__on_zero_shared)(v42, v39);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(a1 + 192, v39, &v56);
  }
  return a1;
}

void std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      uint64_t v14 = &v6[2 * a2];
      do
      {
        if (v6)
        {
          uint64_t v15 = a3[1];
          void *v6 = *a3;
          v6[1] = v15;
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
        }
        v6 += 2;
        v13 -= 16;
      }
      while (v13);
      uint64_t v6 = v14;
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v8 = ((uint64_t)v6 - *(void *)a1) >> 4;
    unint64_t v9 = v8 + a2;
    if ((v8 + a2) >> 60) {
      abort();
    }
    uint64_t v10 = v7 - *(void *)a1;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * v11, 8);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v16 = (void *)(v12 + 16 * v8);
    uint64_t v17 = 16 * a2;
    unint64_t v18 = &v16[2 * a2];
    unint64_t v19 = v16;
    do
    {
      if (v19)
      {
        uint64_t v20 = a3[1];
        void *v19 = *a3;
        v19[1] = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v19 += 2;
      v17 -= 16;
    }
    while (v17);
    uint64_t v21 = v12 + 16 * v11;
    unint64_t v22 = *(void **)a1;
    unint64_t v23 = *(void **)(a1 + 8);
    if (v23 == *(void **)a1)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v21;
    }
    else
    {
      do
      {
        long long v24 = *((_OWORD *)v23 - 1);
        v23 -= 2;
        *((_OWORD *)v16 - 1) = v24;
        v16 -= 2;
        *unint64_t v23 = 0;
        v23[1] = 0;
      }
      while (v23 != v22);
      unint64_t v23 = *(void **)a1;
      uint64_t v25 = *(void **)(a1 + 8);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v18;
      for (*(void *)(a1 + 16) = v21; v25 != v23; v25 -= 2)
      {
        unsigned int v26 = (std::__shared_weak_count *)*(v25 - 1);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    if (v23)
    {
      unint64_t v27 = *(void (**)(void))(**(void **)(a1 + 24) + 40);
      v27();
    }
  }
}

uint64_t std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(uint64_t result, unint64_t a2, _OWORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(_OWORD **)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      uint64_t v13 = &v6[a2];
      do
      {
        if (v6) {
          _OWORD *v6 = *a3;
        }
        ++v6;
        v12 -= 16;
      }
      while (v12);
      uint64_t v6 = v13;
    }
    *(void *)(result + 8) = v6;
  }
  else
  {
    uint64_t v8 = ((uint64_t)v6 - *(void *)result) >> 4;
    unint64_t v9 = v8 + a2;
    if ((v8 + a2) >> 60) {
      abort();
    }
    uint64_t v10 = v7 - *(void *)result;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11) {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * v11, 8);
    }
    else {
      BOOL result = 0;
    }
    uint64_t v14 = (_OWORD *)(result + 16 * v8);
    uint64_t v15 = 16 * a2;
    unint64_t v16 = &v14[a2];
    uint64_t v17 = v14;
    do
    {
      if (v17) {
        *uint64_t v17 = *a3;
      }
      ++v17;
      v15 -= 16;
    }
    while (v15);
    uint64_t v19 = *(void *)v5;
    uint64_t v18 = *(void *)(v5 + 8);
    if (v18 != *(void *)v5)
    {
      do
      {
        *--uint64_t v14 = *(_OWORD *)(v18 - 16);
        v18 -= 16;
      }
      while (v18 != v19);
      uint64_t v18 = *(void *)v5;
    }
    *(void *)uint64_t v5 = v14;
    *(void *)(v5 + 8) = v16;
    *(void *)(v5 + 16) = result + 16 * v11;
    if (v18)
    {
      uint64_t v20 = *(uint64_t (**)(void))(**(void **)(v5 + 24) + 40);
      return v20();
    }
  }
  return result;
}

uint64_t ggl::SolidRibbon::PipelineSetup::PipelineSetup(ggl::SolidRibbon::PipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1EB32B738 = 1;
    }
    ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
    *(void *)algn_1EB320748 = &ggl::SolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
    qword_1EB320750 = 0;
    {
      ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EB320780 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EB320788 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
      unk_1EB320790 = ggl::Tile::Clipping::reflection(void)::reflection;
    }
    qword_1EB320758 = (uint64_t)&ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
    unk_1EB320760 = xmmword_1A28FC860;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF55A900;
  return result;
}

uint64_t ggl::CullingGrid::intersectedCellsForRibbon(unint64_t a1, void *a2)
{
  if (a1 == 1)
  {
    LODWORD(v4) = 0;
LABEL_44:
    __asm { FMOV            V0.2S, #4.0 }
    do
    {
      float32x2_t v49 = *(float32x2_t *)a2;
      a2 = (void *)((char *)a2 + 12);
      int32x2_t v50 = vmin_s32(vmax_s32(vcvt_s32_f32(vrndm_f32(vmul_f32(v49, _D0))), 0), (int32x2_t)0x300000003);
      uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v50.i8[0] & 1 | (2 * (v50.i8[4] & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v50.i8[4] & 2 | ((unsigned __int32)v50.i32[0] >> 1)]))) | v4;
      --a1;
    }
    while (a1);
    return v4;
  }
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v2;
    uint64_t v7 = v3 ^ 1;
    if (v5)
    {
      unint64_t v8 = 1;
      unint64_t v9 = (float *)a2;
      do
      {
        uint64_t v10 = (float *)a2 + 3 * (v8 % a1);
        float v11 = *v9;
        float v12 = *v10 - *v9;
        if (v12 != 0.0)
        {
          float v13 = *v10 * 4.0;
          unsigned int v14 = vcvtps_s32_f32(fminf(v13, v11 * 4.0));
          unsigned int v15 = vcvtms_s32_f32(fmaxf(v11 * 4.0, v13));
          if (v15 >= 3) {
            unsigned int v15 = 3;
          }
          if (v15 >= v14)
          {
            float v16 = v9[v7];
            float v17 = v10[v7] - v16;
            unsigned int v18 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)v14 * -0.25)) * v17) / v12) - v16) * -4.0);
            if (v18 <= 3)
            {
              uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v18 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v18 & 2 | (v14 >> 1) & 1]))) | v4;
              if (v14) {
                uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(2 * (v18 & 1)) | (v14 - 1) & 1] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v18 & 2 | ((v14 - 1) >> 1) & 1]))) | v4;
              }
            }
            if (v15 > v14)
            {
              unsigned int v19 = v14 + 1;
              unsigned int v20 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)(v14 + 1) * -0.25)) * v17)/ v12)- v16)* -4.0);
              if (v20 <= 3) {
                uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v19 & 1 | (2 * (v20 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v20 & 2 | (v19 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v20 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v20 & 2 | (v14 >> 1) & 1]))) | v4;
              }
              if (v15 > v19)
              {
                unsigned int v21 = v14 + 2;
                unsigned int v22 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)(v14 + 2) * -0.25)) * v17)/ v12)- v16)* -4.0);
                if (v22 <= 3) {
                  uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v22 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 2 | (v21 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v19 & 1 | (2 * (v22 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 2 | (v19 >> 1) & 1]))) | v4;
                }
                if (v15 > v21)
                {
                  unsigned int v23 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)(v14 + 3) * -0.25)) * v17)/ v12)- v16)* -4.0);
                  if (v23 <= 3) {
                    uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v14 + 3) & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | ((v14 + 3) >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | (v21 >> 1) & 1]))) | v4;
                  }
                }
              }
            }
          }
        }
        v9 += 3;
        ++v8;
      }
      while (a1 != v8);
    }
    else
    {
      long long v24 = (float *)a2 + v7;
      unint64_t v25 = 1;
      unsigned int v26 = (float *)a2 + v3;
      do
      {
        unint64_t v27 = (char *)a2 + 12 * (v25 % a1);
        float v28 = *(float *)&v27[4 * v3];
        float v29 = *v26;
        float v30 = v28 - *v26;
        if (v30 != 0.0)
        {
          float v31 = v28 * 4.0;
          unsigned int v32 = vcvtps_s32_f32(fminf(v31, v29 * 4.0));
          unsigned int v33 = vcvtms_s32_f32(fmaxf(v29 * 4.0, v31));
          if (v33 >= 3) {
            unsigned int v33 = 3;
          }
          if (v33 >= v32)
          {
            float v34 = *v24;
            float v35 = *(float *)&v27[4 * v7] - *v24;
            unsigned int v36 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)v32 * -0.25)) * v35) / v30) - *v24) * -4.0);
            if (v36 <= 3)
            {
              int v37 = v36 >> 1;
              int v38 = v36 & 1;
              uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v38 & 0xFFFFFFFD | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v37 | v32 & 2]))) | v4;
              if (v32) {
                uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v38 & 0xFFFFFFFD | (2 * ((v32 - 1) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v37 | (v32 - 1) & 2]))) | v4;
              }
            }
            if (v33 > v32)
            {
              unsigned __int8 v39 = v32 + 1;
              unsigned int v40 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)(v32 + 1) * -0.25)) * v35)/ v30)- v34)* -4.0);
              if (v40 <= 3) {
                uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 & 1 | (2 * (v39 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v40 >> 1) | v39 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 & 1 | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v40 >> 1) | v32 & 2]))) | v4;
              }
              if (v33 > v39)
              {
                unsigned __int8 v41 = v32 + 2;
                unsigned int v42 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)(v32 + 2) * -0.25)) * v35)/ v30)- v34)* -4.0);
                if (v42 <= 3) {
                  uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v42 & 1 | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v42 >> 1) | v41 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v42 & 1 | (2 * (v39 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v42 >> 1) | v39 & 2]))) | v4;
                }
                if (v33 > v41)
                {
                  unsigned int v43 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)(v32 + 3) * -0.25)) * v35)/ v30)- v34)* -4.0);
                  if (v43 <= 3) {
                    uint64_t v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (((_BYTE)v32 + 3) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | ((_BYTE)v32 + 3) & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | ~v32 & 2]))) | v4;
                  }
                }
              }
            }
          }
        }
        v24 += 3;
        v26 += 3;
        ++v25;
      }
      while (a1 != v25);
    }
    char v5 = 0;
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) == 0);
  if (a1) {
    goto LABEL_44;
  }
  return v4;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    char v2 = a2;
    uint64_t v3 = result;
    do
    {
      char v5 = (uint64_t *)*v2;
      char v6 = (void *)v2[3];
      if (v6)
      {
        uint64_t v7 = (void *)v2[4];
        uint64_t v4 = v2[3];
        if (v7 != v6)
        {
          do
          {
            unint64_t v9 = (void (***)(void, uint64_t))*--v7;
            unint64_t v8 = v9;
            void *v7 = 0;
            if (v9)
            {
              (**v8)(v8, v4);
              {
                  operator new();
              }
              (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 120);
            }
          }
          while (v7 != v6);
          uint64_t v4 = v2[3];
        }
        v2[4] = (uint64_t)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[6] + 40))(v2[6], v4, v2[5] - v4);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v2, 56);
      char v2 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  char v6 = (int8x16_t *)result;
LABEL_2:
  v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    char v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            uint64_t *v160 = v66;
          }
          break;
        case 3:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            uint64_t *v160 = v69;
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                int8x16_t *v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      os_signpost_id_t v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          os_signpost_id_t v74 = (uint64_t *)v7;
          do
          {
            long long v76 = v71;
            uint64_t v77 = v74[1];
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              long long v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              uint64_t *v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (i = v78; ; uint64_t v79 = *i)
              {
                *uint64_t i = v80;
                uint64_t i = v74;
                uint64_t *v74 = 0;
                if (v79)
                {
                  uint64_t v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    long long v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        long long v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        void *v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 120);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                os_signpost_id_t v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              uint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              long long v76 = (int8x16_t *)v163;
            }
            os_signpost_id_t v71 = (int8x16_t *)&v76->u64[1];
            os_signpost_id_t v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          unint64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            uint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *uint64_t v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            uint64_t v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              *uint64_t j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                int8x8_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  uint8x8_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      v148 = (void (***)(void, uint64_t))*--v145;
                      uint64_t v147 = v148;
                      *uint8x8_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 120);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              char v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            unint64_t v138 = (int8x16_t *)v164;
          }
          os_signpost_id_t v71 = (int8x16_t *)&v138->u64[1];
          char v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    float v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      float v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      uint64_t *v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      float v16 = v7;
      do
      {
        float v17 = v16;
        uint64_t v19 = v16->i64[1];
        float v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      unsigned int v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        unsigned int v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        long long v24 = (uint64_t *)v16;
        unint64_t v25 = v20;
        do
        {
          *long long v24 = v23;
          uint64_t *v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          float v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        uint64_t v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          uint64_t v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      int v45 = a2;
      if (v7 < a2)
      {
        int v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          int v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            int v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        uint64_t *v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        uint64_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        long long v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *long long v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            int v111 = v100;
            uint64_t *v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            uint64_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            long long v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        double v120 = (uint64_t *)v6;
        do
        {
          double v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          uint64_t *v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          double v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        double v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          float v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *double v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          int v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            uint64_t *v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              int v136 = v133;
              *int v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              int v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              double v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            float v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        uint64_t result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

void md::PendingSceneLogic::_prefetchData(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 376)) {
    return;
  }
  char v4 = *(void **)(a1 + 128);
  char v5 = (unsigned __int16 *)v4[21];
  char v6 = (unsigned __int16 *)v4[22];
  if (v5 == v6)
  {
LABEL_98:
    a2 = (void *)v4[3];
    uint64_t v8 = (uint64_t *)(a1 + 328);
    uint64_t v56 = *(void *)(a1 + 328);
    uint64_t v57 = *(void *)(a1 + 336);
    while (v56 != v57)
    {
      for (uint64_t i = *(void *)(v56 + 16); i != v56 + 8; uint64_t i = *(void *)(i + 8))
      {
        for (uint64_t j = *(uint64_t ***)(*(void *)(i + 16) + 32); j; uint64_t j = (uint64_t **)*j)
        {
          uint64_t v60 = (unsigned __int16 *)a2[1];
          unint64_t v61 = (unsigned __int16 *)a2[2];
          if (v60 != v61)
          {
            while (*((unsigned __int16 *)j + 8) != *v60)
            {
              v60 += 12;
              if (v60 == v61) {
                goto LABEL_106;
              }
            }
          }
          if (v60 != v61) {
            (*(void (**)(void, void, uint64_t))(**((void **)v60 + 2) + 24))(*((void *)v60 + 2), *(void *)(i + 16), 1);
          }
LABEL_106:
          ;
        }
      }
      v56 += 32;
    }
    goto LABEL_114;
  }
  while (1)
  {
    uint64_t v8 = (uint64_t *)*v5;
    uint64_t v9 = *(void *)(a1 + 392);
    float v11 = *(void ***)(v9 + 160);
    unint64_t v10 = *(unsigned __int16 **)(v9 + 168);
    if (v11 != (void **)v10)
    {
      while (*(unsigned __int16 *)v11 != v8)
      {
        v11 += 14;
        if (v11 == (void **)v10)
        {
          float v11 = (void **)v10;
          break;
        }
      }
    }
    uint64_t v12 = *(void *)(a1 + 128);
    *(_OWORD *)uint64_t v67 = 0u;
    *(_OWORD *)uint64_t v68 = 0u;
    int v69 = 1065353216;
    for (uint64_t k = *(uint64_t **)(v12 + 144); k; uint64_t k = (uint64_t *)*k)
    {
      if (*((unsigned __int16 *)k + 10) == v8 && *((unsigned char *)k + 18) != 2) {
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)v67, *((_WORD *)k + 8), *((_WORD *)k + 8));
      }
    }
    uint64_t v14 = (uint64_t *)a2[2];
    if (!v14) {
      goto LABEL_93;
    }
    int8x8_t v15 = (int8x8_t)v67[1];
    if (v67[1]) {
      break;
    }
    do
      uint64_t v14 = (uint64_t *)*v14;
    while (v14);
LABEL_93:
    md::PendingSceneLogic::updateSelectionContextMap((int)v8, *(unsigned __int16 **)(a1 + 328), *(unsigned __int16 **)(a1 + 336), 0, (uint64_t)(v11 + 7), v11[13], (uint64_t)v67);
    int v53 = v68[0];
    if (v68[0])
    {
      do
      {
        uint64_t v54 = (void *)*v53;
        operator delete(v53);
        int v53 = v54;
      }
      while (v54);
    }
    BOOL v55 = v67[0];
    v67[0] = 0;
    if (v55) {
      operator delete(v55);
    }
    if (++v5 == v6)
    {
      char v4 = *(void **)(a1 + 128);
      goto LABEL_98;
    }
  }
LABEL_20:
  unint64_t v17 = *((unsigned __int16 *)v14 + 8);
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v15);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v19 = *((unsigned __int16 *)v14 + 8);
    if (*(void *)&v15 <= v17) {
      unint64_t v19 = v17 % *(void *)&v15;
    }
  }
  else
  {
    unint64_t v19 = (v15.i32[0] - 1) & v17;
  }
  unsigned int v20 = (void **)*((void *)v67[0] + v19);
  if (!v20 || (uint64_t v21 = (void **)*v20) == 0)
  {
LABEL_90:
    while (1)
    {
      uint64_t v14 = (uint64_t *)*v14;
      if (!v14) {
        goto LABEL_93;
      }
      int8x8_t v15 = (int8x8_t)v67[1];
      if (v67[1]) {
        goto LABEL_20;
      }
    }
  }
  if (v18.u32[0] < 2uLL)
  {
    uint64_t v22 = *(void *)&v15 - 1;
    while (1)
    {
      unint64_t v24 = (unint64_t)v21[1];
      if (v24 == v17)
      {
        if (*((unsigned __int16 *)v21 + 8) == v17) {
          goto LABEL_40;
        }
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_90;
      }
      uint64_t v21 = (void **)*v21;
      if (!v21) {
        goto LABEL_90;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = (unint64_t)v21[1];
    if (v23 != v17)
    {
      if (v23 >= *(void *)&v15) {
        v23 %= *(void *)&v15;
      }
      if (v23 != v19) {
        goto LABEL_90;
      }
      goto LABEL_29;
    }
    if (*((unsigned __int16 *)v21 + 8) != v17)
    {
LABEL_29:
      uint64_t v21 = (void **)*v21;
      if (!v21) {
        goto LABEL_90;
      }
      continue;
    }
    break;
  }
LABEL_40:
  *(_OWORD *)uint64_t v64 = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  int v66 = 1065353216;
  std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)v64, v17, v17);
  unint64_t v25 = (unint64_t)v67[1];
  unint64_t v26 = (unint64_t)v21[1];
  uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v67[1]);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] >= 2uLL)
  {
    if ((void *)v26 >= v67[1]) {
      v26 %= (unint64_t)v67[1];
    }
  }
  else
  {
    v26 &= (unint64_t)v67[1] - 1;
  }
  int v28 = (void **)*v21;
  int v29 = (void **)*((void *)v67[0] + v26);
  do
  {
    int v30 = v29;
    int v29 = (void **)*v29;
  }
  while (v29 != v21);
  if (v30 == v68) {
    goto LABEL_57;
  }
  unint64_t v31 = (unint64_t)v30[1];
  if (v27.u32[0] > 1uLL)
  {
    if ((void *)v31 >= v67[1]) {
      v31 %= (unint64_t)v67[1];
    }
  }
  else
  {
    v31 &= (unint64_t)v67[1] - 1;
  }
  if (v31 == v26)
  {
LABEL_59:
    if (v28)
    {
      unint64_t v32 = (unint64_t)v28[1];
      goto LABEL_61;
    }
  }
  else
  {
LABEL_57:
    if (!v28) {
      goto LABEL_58;
    }
    unint64_t v32 = (unint64_t)v28[1];
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v33 = (unint64_t)v28[1];
      if ((void *)v32 >= v67[1]) {
        unint64_t v33 = v32 % (unint64_t)v67[1];
      }
    }
    else
    {
      unint64_t v33 = v32 & ((unint64_t)v67[1] - 1);
    }
    if (v33 != v26)
    {
LABEL_58:
      *((void *)v67[0] + v26) = 0;
      int v28 = (void **)*v21;
      goto LABEL_59;
    }
LABEL_61:
    if (v27.u32[0] > 1uLL)
    {
      if (v32 >= v25) {
        v32 %= v25;
      }
    }
    else
    {
      v32 &= v25 - 1;
    }
    if (v32 != v26)
    {
      *((void *)v67[0] + v32) = v30;
      int v28 = (void **)*v21;
    }
  }
  *int v30 = v28;
  --v68[1];
  operator delete(v21);
  __int16 v34 = *((_WORD *)v14 + 8);
  LOWORD(v72[0]) = (_WORD)v8;
  __int16 v71 = v34;
  char v70 = 2;
  uint64_t v35 = v14[6];
  if (v35)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v35 + 48))(&v63);
    uint64_t v36 = v63;
    if (v63)
    {
      uint64_t v37 = v11[13];
      uint64_t v39 = *(unsigned __int16 **)(a1 + 328);
      unint64_t v38 = *(unsigned __int16 **)(a1 + 336);
      if (v39 != v38)
      {
        while (*v39 != v8)
        {
          v39 += 16;
          if (v39 == v38) {
            goto LABEL_85;
          }
        }
      }
      if (v39 == v38)
      {
LABEL_85:
        uint64_t v63 = 0;
        (*(void (**)(void *))(*v36 + 8))(v36);
      }
      else
      {
        v63[8] = v11 + 7;
        uint64_t v40 = *(void *)(a1 + 392);
        char v41 = *(unsigned __int16 **)(v40 + 112);
        unint64_t v42 = *(unsigned __int16 **)(v40 + 120);
        if (v41 != v42)
        {
          do
          {
            if (*v41 == v8) {
              goto LABEL_78;
            }
            v41 += 56;
          }
          while (v41 != v42);
          char v41 = v42;
        }
LABEL_78:
        v36[9] = v41 + 28;
        v36[7] = 0;
        v36[1] = v37;
        std::unordered_set<unsigned short>::unordered_set((uint64_t)v72, (uint64_t)v64);
        gdc::SelectionContext::setLayerDataTypes((uint64_t)v36, (uint64_t *)v72);
        uint64_t v43 = __p;
        if (__p)
        {
          do
          {
            uint64_t v44 = (void *)*v43;
            operator delete(v43);
            uint64_t v43 = v44;
          }
          while (v44);
        }
        int v45 = v72[0];
        v72[0] = 0;
        if (v45) {
          operator delete(v45);
        }
        uint64_t v46 = v63;
        uint64_t v63 = 0;
        uint64_t v47 = operator new(0x18uLL);
        v47[2] = v46;
        uint64_t v49 = *((void *)v39 + 1);
        uint64_t v48 = v39 + 4;
        *uint64_t v47 = v49;
        v47[1] = v48;
        *(void *)(v49 + 8) = v47;
        *uint64_t v48 = v47;
        ++v48[2];
      }
      int v50 = v65[0];
      if (v65[0])
      {
        do
        {
LABEL_87:
          int v51 = (void *)*v50;
          operator delete(v50);
          int v50 = v51;
        }
        while (v51);
      }
    }
    else
    {
      uint64_t v63 = 0;
      int v50 = v65[0];
      if (v65[0]) {
        goto LABEL_87;
      }
    }
    int v52 = v64[0];
    v64[0] = 0;
    if (v52) {
      operator delete(v52);
    }
    goto LABEL_90;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
LABEL_117:
  {
    md::PendingSceneLogic::_prefetchData(md::ResolvedTileSelectionContext const&,md::PendingSceneContext &,long long)::kEmpty = 0;
    *(void *)algn_1E958E808 = 0;
    qword_1E958E810 = 0;
    __cxa_atexit((void (*)(void *))geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map, &md::PendingSceneLogic::_prefetchData(md::ResolvedTileSelectionContext const&,md::PendingSceneContext &,long long)::kEmpty, &dword_1A1780000);
  }
LABEL_114:
  gdc::LayerDataManager::createDataRequests(a2, v8, (unsigned __int16 **)&md::PendingSceneLogic::_prefetchData(md::ResolvedTileSelectionContext const&,md::PendingSceneContext &,long long)::kEmpty, a3);
}

void sub_1A1934C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    if (a12) {
      (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
    }
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a13);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>(uint64_t a1, unsigned __int16 a2, __int16 a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  float v13 = operator new(0x18uLL);
  void *v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_34;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *v13 = *v24;
LABEL_58:
    *unint64_t v24 = v13;
    goto LABEL_59;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v25 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A1934FE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::S2ResourceDataRequester::requestDataKeys(md::S2ResourceDataRequester *this, const gdc::SelectionContext *a2, char a3)
{
  if (*((void *)this + 1))
  {
    unint64_t v3 = *(uint64_t **)(*((void *)a2 + 8) + 24);
    if (v3)
    {
      unint64_t v6 = (gdc::LayerDataCollector *)*((void *)a2 + 1);
      do
      {
        unsigned __int8 v7 = *((unsigned char *)v3 + 17);
        int v8 = 1;
        int v9 = 1 << v7;
        int v10 = *((_DWORD *)v3 + 6);
        int v11 = (*((_DWORD *)v3 + 5) % v9 + v9) % v9;
        v16[0] = *((unsigned char *)v3 + 16);
        v16[1] = v7;
        int v17 = v11;
        int v18 = (v10 % v9 + v9) % v9;
        if ((a3 & 1) == 0) {
          int v8 = *((_DWORD *)this + 4);
        }
        gdc::Tiled::mapDataKeyFromTile(v12, 0, v16, *((_WORD *)this + 11), v8);
        gdc::LayerDataCollector::addDataKey(v6, (const gdc::LayerDataRequestKey *)v12, (const QuadTile *)(v3 + 2));
        if (v15) {
          char v15 = 0;
        }
        if (v13 != v14) {
          free(v13);
        }
        unint64_t v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
  }
}

void md::InjectedFeaturesDataRequester::requestDataKeys(md::InjectedFeaturesDataRequester *this, const gdc::SelectionContext *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 8);
  unint64_t v4 = *(void *)(v3 + 32);
  uint64_t v40 = (gdc::LayerDataCollector *)*((void *)a2 + 1);
  if (!v4)
  {
    char v5 = 0;
    unint64_t v6 = *(uint64_t **)(v3 + 24);
    if (v6) {
      goto LABEL_4;
    }
LABEL_41:
    unint64_t v7 = (unint64_t)v5;
    goto LABEL_42;
  }
  if (v4 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  char v5 = (unsigned __int8 *)operator new(24 * v4);
  unint64_t v4 = (unint64_t)&v5[24 * v4];
  unint64_t v6 = *(uint64_t **)(v3 + 24);
  if (!v6) {
    goto LABEL_41;
  }
LABEL_4:
  unint64_t v7 = (unint64_t)v5;
  do
  {
    while (1)
    {
      unint64_t v8 = **((unsigned int **)a2 + 8);
      if (v8)
      {
        if (v8 < 0x101)
        {
          int v9 = 0;
          unint64_t i = 256;
        }
        else
        {
          int v9 = 0;
          for (unint64_t i = 256; i < v8; i *= 2)
            ++v9;
        }
        while (i > v8)
        {
          --v9;
          v8 *= 2;
        }
      }
      else
      {
        int v9 = 0;
      }
      unsigned int v11 = *((unsigned __int8 *)v6 + 17);
      int v12 = 1 << v11;
      int v13 = (*((_DWORD *)v6 + 5) % v12 + v12) % v12;
      int v14 = (*((_DWORD *)v6 + 6) % v12 + v12) % v12;
      int v15 = (v9 + v11) & ~((int)(v9 + v11) >> 31);
      if (v15 >= 18) {
        int v15 = 18;
      }
      signed int v16 = v11 - v15;
      if (v16 >= 0)
      {
        double v17 = COERCE_DOUBLE(__PAIR64__(v14, v13));
        signed int v16 = v16;
        if (v11 < v16) {
          signed int v16 = *((unsigned __int8 *)v6 + 17);
        }
        double v18 = COERCE_DOUBLE(vshl_s32((int32x2_t)__PAIR64__(v14, v13), vneg_s32(vdup_n_s32(v16))));
        BOOL v19 = v11 == 0;
        if (*((unsigned char *)v6 + 17)) {
          LOBYTE(v11) = v11 - v16;
        }
        else {
          LOBYTE(v11) = 0;
        }
        if (!v19) {
          double v17 = v18;
        }
        int v14 = HIDWORD(v17);
        int v13 = LODWORD(v17);
      }
      char v20 = *((unsigned char *)v6 + 16);
      if (v7 >= v4) {
        break;
      }
      *(unsigned char *)unint64_t v7 = v20;
      *(unsigned char *)(v7 + 1) = v11;
      *(_DWORD *)(v7 + 4) = v13;
      *(_DWORD *)(v7 + 8) = v14;
      v7 += 24;
      unint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_42;
      }
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v5) >> 3) + 1;
    if (v21 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    if (0x5555555555555556 * ((uint64_t)(v4 - (void)v5) >> 3) > v21) {
      unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v4 - (void)v5) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v5) >> 3) >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v23 = (char *)operator new(24 * v22);
    unint64_t v24 = &v23[8 * ((uint64_t)(v7 - (void)v5) >> 3)];
    *unint64_t v24 = v20;
    v24[1] = v11;
    *((_DWORD *)v24 + 1) = v13;
    *((_DWORD *)v24 + 2) = v14;
    for (uint64_t j = v24; (unsigned __int8 *)v7 != v5; *(void *)(j + 4) = *(void *)(v7 + 4))
    {
      __int16 v26 = *(_WORD *)(v7 - 24);
      v7 -= 24;
      *((_WORD *)j - 12) = v26;
      j -= 24;
    }
    unint64_t v4 = (unint64_t)&v23[24 * v22];
    unint64_t v7 = (unint64_t)(v24 + 24);
    if (v5) {
      operator delete(v5);
    }
    char v5 = (unsigned __int8 *)j;
    unint64_t v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_42:
  unint64_t v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v5) >> 3));
  if ((unsigned __int8 *)v7 == v5) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v27;
  }
  std::__introsort<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *,false>((unint64_t)v5, v7, v28, 1);
  if ((unsigned __int8 *)v7 == v5)
  {
    int v30 = v40;
    goto LABEL_70;
  }
  int v29 = v5 + 24;
  int v30 = v40;
  if (v5 + 24 == (unsigned __int8 *)v7)
  {
    unint64_t v33 = (unsigned __int8 *)v7;
  }
  else
  {
    unsigned int v31 = *v5;
    while (1)
    {
      unsigned int v32 = v31;
      unint64_t v33 = v29 - 24;
      unsigned int v31 = *v29;
      if (__PAIR64__(*(v29 - 23), v32) == __PAIR64__(v29[1], v31)
        && *((_DWORD *)v29 - 5) == *((_DWORD *)v29 + 1)
        && *((_DWORD *)v29 - 4) == *((_DWORD *)v29 + 2))
      {
        break;
      }
      v29 += 24;
      if (v29 == (unsigned __int8 *)v7) {
        goto LABEL_70;
      }
    }
    if (v33 != (unsigned __int8 *)v7)
    {
      for (uint64_t k = v29 + 24; k != (unsigned __int8 *)v7; k += 24)
      {
        if (*v33 != *k
          || v33[1] != k[1]
          || *((_DWORD *)v33 + 1) != *((_DWORD *)k + 1)
          || *((_DWORD *)v33 + 2) != *((_DWORD *)k + 2))
        {
          long long v35 = *(_OWORD *)k;
          *((void *)v33 + 5) = *((void *)k + 2);
          *(_OWORD *)(v33 + 24) = v35;
          v33 += 24;
        }
      }
      v33 += 24;
      uint64_t v36 = v7 - (void)v33;
      if ((unsigned __int8 *)v7 == v33) {
        goto LABEL_70;
      }
      goto LABEL_66;
    }
  }
  uint64_t v36 = v7 - (void)v33;
  if ((unsigned __int8 *)v7 == v33) {
    goto LABEL_70;
  }
LABEL_66:
  if (&v33[v36] != (unsigned __int8 *)v7)
  {
    uint64_t v37 = 8 * (v36 >> 3);
    do
    {
      long long v38 = *(_OWORD *)&v33[v37];
      *((void *)v33 + 2) = *(void *)&v33[v37 + 16];
      *(_OWORD *)unint64_t v33 = v38;
      v33 += 24;
    }
    while (&v33[v37] != (unsigned __int8 *)v7);
  }
  unint64_t v7 = (unint64_t)v33;
LABEL_70:
  if (v5 != (unsigned __int8 *)v7)
  {
    uint64_t v39 = v5;
    do
    {
      int32x2_t v45 = vrev64_s32(*(int32x2_t *)(v39 + 4));
      int v46 = v39[1];
      int v47 = *v39;
      gdc::LayerDataRequestKey::LayerDataRequestKey(v41, 0, 62, (int *)&v45, 4);
      gdc::LayerDataCollector::addDataKey(v30, (const gdc::LayerDataRequestKey *)v41, (const QuadTile *)v39);
      if (v44) {
        char v44 = 0;
      }
      if (v42 != v43) {
        free(v42);
      }
      v39 += 24;
    }
    while (v39 != (unsigned __int8 *)v7);
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_1A19355F0(_Unwind_Exception *exception_object)
{
}

void sub_1A19355FC(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

unint64_t geo::codec::VectorTile::linesCount(geo::codec::VectorTile *this)
{
  return 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

BOOL md::RouteLineSupport::didCurrentWaypointChange(md::RouteLineSupport *this)
{
  char v2 = (void *)*((void *)this + 30);
  id v3 = *((id *)this + 3);
  unint64_t v4 = [v3 currentWaypoint];
  if (v2 == v4)
  {
    int v6 = *((unsigned __int8 *)this + 248);
    BOOL v5 = v6 != [*((id *)this + 3) currentWaypointProximity];
  }
  else
  {
    BOOL v5 = 1;
  }

  return v5;
}

void sub_1A19356FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t md::PhysicalLabelFeature::labelFeatureType(md::PhysicalLabelFeature *this)
{
  return 3;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v4 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  unint64_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  unint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0xE42D19AFCA302E68)
      {
        if (v8[2] == 0xE42D19AFCA302E68) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0xE42D19AFCA302E68) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v12 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4) {
      unint64_t v12 = 0xC97B9E962ADF4AD4 % a3;
    }
  }
  else
  {
    unint64_t v12 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  int v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  int v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0xC97B9E962ADF4AD4)
      {
        if (v14[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      int v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0xC97B9E962ADF4AD4)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_35:
      int v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0xC97B9E962ADF4AD4)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988) {
      uint64_t v18 = 0x7851AF310F49C988 % a3;
    }
  }
  else
  {
    uint64_t v18 = (a3 - 1) & 0x7851AF310F49C988;
  }
  BOOL v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  char v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x7851AF310F49C988)
      {
        if (v20[2] == 0x7851AF310F49C988) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      char v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x7851AF310F49C988) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    char v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x7851AF310F49C988) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x7851AF310F49C988)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  uint64_t *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t geo::codec::VectorTile::poisCount(geo::codec::VectorTile *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 64) - *((void *)this + 63)) >> 5);
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v3 = 0x99BED48DEFBBD82BLL % a2;
    }
  }
  else
  {
    unint64_t v3 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v3);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_25;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == 0x99BED48DEFBBD82BLL)
      {
        if (v6[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_23;
        }
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v3) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_25;
    }
  }
  if (v6[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v9 = v6[5];
  if (*(void *)(v9 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46) {
      uint64_t v11 = 0x1AF456233693CD46 % a2;
    }
  }
  else
  {
    uint64_t v11 = (a2 - 1) & 0x1AF456233693CD46;
  }
  unint64_t v12 = *(void **)(a1 + 8 * v11);
  if (!v12) {
    return v10;
  }
  int v13 = (void *)*v12;
  if (!v13) {
    return v10;
  }
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46) {
          goto LABEL_46;
        }
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      int v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
    }
  }
  while (2)
  {
    unint64_t v14 = v13[1];
    if (v14 != 0x1AF456233693CD46)
    {
      if (v14 >= a2) {
        v14 %= a2;
      }
      if (v14 != v11) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v13[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      int v13 = (void *)*v13;
      if (!v13) {
        return v10;
      }
      continue;
    }
    break;
  }
LABEL_46:
  if (*(void *)(v13[5] + 8) == 0x1AF456233693CD46) {
    return v10;
  }
  return v10;
}

uint64_t md::StandardLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v9[0] = &unk_1EF570698;
  v9[1] = a2;
  v7[0] = &unk_1EF5706E0;
  v7[1] = a2;
  uint64_t v8 = v7;
  unint64_t v12 = v11;
  uint64_t v10 = v9;
  v11[0] = &unk_1EF5706E0;
  v11[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v9);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  *a4 = *(void *)(a1 + 120);
  if (!v12)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v12 + 48))(v12);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

void sub_1A1936260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v21)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  std::function<void ()(void)>::~function(&a10);
  std::function<void ()(void)>::~function(&a14);
  _Unwind_Resume(a1);
}

void sub_1A19362E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (a21) {
    (*(void (**)(void))(*a21 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "StandardLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "StandardLogic", "", v5, 2u);
  }
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  unint64_t v6 = vcvtms_u32_f32(a3);
  float v7 = (float)((float)(a3 - floorf(a3)) * 10.0) + 0.5;
  if ((int)v7) {
    objc_msgSend(NSString, "stringWithFormat:", @"@%lu.%ux", v6, (int)v7);
  }
  else {
  uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"@%lux", v6);
  }
  double v9 = a3;
  uint64_t v10 = *(uint64_t **)(a1 + 56);
  int v11 = *((char *)v10 + 23);
  if (a3 <= 1.9)
  {
    if (v11 < 0) {
      uint64_t v10 = (uint64_t *)*v10;
    }
    uint64_t v12 = [NSString stringWithFormat:@"%s%@.%@", v9, v10, v5, *(void *)(a1 + 32)];
  }
  else
  {
    if (v11 < 0) {
      uint64_t v10 = (uint64_t *)*v10;
    }
    uint64_t v12 = [NSString stringWithFormat:@"%s%@%@.%@", v9, v10, v5, v8, *(void *)(a1 + 32)];
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  uint64_t v15 = [*(id *)(a1 + 40) dataForResourceWithName:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  return v15;
}

void sub_1A1936624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id md::TextureManager::_loadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*((char *)a2 + 23) >= 0) {
    float v7 = a2;
  }
  else {
    float v7 = (uint64_t *)*a2;
  }
  uint64_t v8 = [NSString stringWithUTF8String:v7];
  double v9 = [v8 pathExtension];
  if (![(__CFString *)v9 length])
  {

    double v9 = @"png";
  }
  uint64_t v10 = [v8 stringByDeletingPathExtension];

  if (!*(unsigned char *)a4)
  {
    uint64_t v12 = v10;
    if (!*(unsigned char *)a3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = [NSString stringWithFormat:@"%@%u", v10, *(unsigned int *)(a4 + 4)];

  uint64_t v12 = (void *)v11;
  if (*(unsigned char *)a3)
  {
LABEL_10:
    uint64_t v13 = [NSString stringWithFormat:@"%@@%ux", v12, *(unsigned int *)(a3 + 4)];

    uint64_t v12 = (void *)v13;
  }
LABEL_11:
  unint64_t v14 = [v12 stringByAppendingPathExtension:v9];

  uint64_t v15 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v14];
  uint64_t v16 = v15;
  if (v15)
  {
    id v17 = v15;
  }
  else
  {
    id v17 = [*(id *)(a1 + 552) dataForResourceWithName:v14];
  }
  uint64_t v18 = v17;

  return v18;
}

void sub_1A19367CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A19368BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::MetalResourceManager::newPipelineState(ggl::MetalResourceManager *this, const ggl::PipelineState *a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 5);
  int64_t v98 = **(void ***)v4;
  uint64_t v5 = *(void *)(v4 + 16);
  id v100 = objc_alloc_init(MEMORY[0x1E4F352F0]);
  unint64_t v6 = [MEMORY[0x1E4F35358] vertexDescriptor];
  uint64_t v101 = a2;
  uint64_t v99 = this;
  if (*(void *)(*((void *)a2 + 5) + 24))
  {
    uint64_t v106 = 0;
    uint64_t v7 = 0;
    uint64_t v97 = v5;
    do
    {
      uint64_t v102 = *(uint64_t **)(*v98 + 8 * *(void *)(v5 + 48 * v7 + 8));
      uint64_t v104 = *v102;
      uint64_t v8 = *(void *)(*v102 + 24);
      double v9 = [v6 layouts];
      uint64_t v10 = [v9 objectAtIndexedSubscript:v7];
      [v10 setStride:v8];

      int v11 = *((_DWORD *)v102 + 2);
      if (v11 == 1) {
        uint64_t v12 = 2;
      }
      else {
        uint64_t v12 = v11 == 0;
      }
      uint64_t v13 = [v6 layouts];
      unint64_t v14 = [v13 objectAtIndexedSubscript:v7];
      [v14 setStepFunction:v12];

      uint64_t v15 = [v6 layouts];
      uint64_t v16 = [v15 objectAtIndexedSubscript:v7];
      [v16 setStepRate:1];

      uint64_t v17 = v5 + 48 * v7;
      uint64_t v19 = *(void *)(v17 + 40);
      uint64_t v18 = (void *)(v17 + 40);
      if (v19)
      {
        uint64_t v20 = v7;
        uint64_t v21 = 0;
        uint64_t v105 = v20;
        BOOL v103 = (void *)(v5 + 48 * v20 + 32);
        uint64_t v22 = 8;
        do
        {
          uint64_t v23 = *(void *)(v104 + 8);
          uint64_t v24 = *(void *)(*v103 + v22);
          uint64_t v25 = *(int *)(v102[2] + 8 * v24);
          switch(*(unsigned char *)(v23 + 32 * v24 + 8))
          {
            case 0:
            case 1:
              __int16 v26 = &unk_1A29CAAE8;
              if (v25 < 0xE) {
                goto LABEL_25;
              }
              uint64_t v27 = 50;
              break;
            case 2:
              __int16 v26 = &unk_1A29CAB58;
              if (v25 < 0xE) {
                goto LABEL_25;
              }
              uint64_t v27 = 49;
              break;
            case 3:
              __int16 v26 = &unk_1A29CABC8;
              if (v25 < 0xE) {
                goto LABEL_25;
              }
              uint64_t v27 = 13;
              break;
            case 4:
            case 8:
              __int16 v26 = &unk_1A29CAC38;
              if (v25 >= 0xE) {
                goto LABEL_26;
              }
              goto LABEL_25;
            case 5:
            case 9:
              __int16 v26 = &unk_1A29CACA8;
              if (v25 < 0xE) {
                goto LABEL_25;
              }
              goto LABEL_26;
            case 6:
            case 0xA:
              __int16 v26 = &unk_1A29CAD18;
              if (v25 >= 0xE) {
                goto LABEL_26;
              }
              goto LABEL_25;
            case 7:
              __int16 v26 = &unk_1A29CAD88;
              if (v25 < 0xE) {
                goto LABEL_25;
              }
              goto LABEL_26;
            case 0xB:
              __int16 v26 = &unk_1A29CAD88;
              if (v25 > 0xD) {
                goto LABEL_26;
              }
LABEL_25:
              uint64_t v27 = v26[v25];
              break;
            default:
LABEL_26:
              uint64_t v27 = 0;
              break;
          }
          uint64_t v28 = [v6 attributes];
          int v29 = [v28 objectAtIndexedSubscript:v106 + v21];
          [v29 setFormat:v27];

          uint64_t v30 = *(void *)(v23 + 32 * v24 + 24);
          unsigned int v31 = [v6 attributes];
          unsigned int v32 = [v31 objectAtIndexedSubscript:v106 + v21];
          [v32 setOffset:v30];

          unint64_t v33 = [v6 attributes];
          __int16 v34 = [v33 objectAtIndexedSubscript:v106 + v21];
          [v34 setBufferIndex:v105];

          ++v21;
          v22 += 48;
        }
        while (v21 != *v18);
        v106 += v21;
        uint64_t v5 = v97;
        uint64_t v7 = v105;
      }
      ++v7;
      this = v99;
    }
    while (v7 != *(void *)(*((void *)v101 + 5) + 24));
  }
  [v100 setVertexDescriptor:v6];

  uint64_t v35 = *((void *)v101 + 6);
  uint64_t v36 = ggl::MetalResourceManager::newShaderFunction(this, *(const ggl::ShaderFunction **)(v35 + 80), *((unsigned __int8 *)v101 + 288), *((void *)v101 + 37));
  if (v36)
  {
    uint64_t v37 = ggl::MetalResourceManager::newShaderFunction(this, *(const ggl::ShaderFunction **)(v35 + 88), *((unsigned __int8 *)v101 + 288), *((void *)v101 + 37));
    id v38 = *(id *)(v36 + 32);
    id v39 = *(id *)(v37 + 32);
    uint64_t v40 = v39;
    if (v38) {
      BOOL v41 = v39 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      if (GEOGetGeoGLDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
      }
      unint64_t v42 = (id)GEOGetGeoGLDefaultLog_log;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(void *)(v35 + 8);
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v110 = v43;
        _os_log_impl(&dword_1A1780000, v42, OS_LOG_TYPE_ERROR, "Shader %s has nil functions", buf, 0xCu);
      }

      {
        operator new();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v36, 40);

      {
        operator new();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v37, 40);
LABEL_78:
      uint64_t v37 = 0;
    }
    else
    {
      [v100 setVertexFunction:v38];
      [v100 setFragmentFunction:v40];

      char v44 = v101;
      if (*((void *)v101 + 34))
      {
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        do
        {
          uint64_t PixelFormat = ggl::getPixelFormat(*((_DWORD *)v44 + v46 + 64), *(unsigned __int8 *)(*((void *)v99 + 32) + 16));
          uint64_t v48 = [v100 colorAttachments];
          uint64_t v49 = [v48 objectAtIndexedSubscript:v46];
          [v49 setPixelFormat:PixelFormat];

          unsigned int v50 = *((unsigned __int8 *)v101 + v45 + 108);
          int v51 = [v100 colorAttachments];
          int v52 = [v51 objectAtIndexedSubscript:v46];
          [v52 setWriteMask:__rbit32(v50) >> 28];

          int v53 = *((unsigned __int8 *)v101 + v45 + 64);
          uint64_t v54 = [v100 colorAttachments];
          BOOL v55 = [v54 objectAtIndexedSubscript:v46];
          [v55 setBlendingEnabled:v53 != 0];

          uint64_t v56 = (*(_DWORD *)((char *)v101 + v45 + 88) - 1);
          if (v56 < 4) {
            uint64_t v57 = v56 + 1;
          }
          else {
            uint64_t v57 = 0;
          }
          unint64_t v58 = [v100 colorAttachments];
          uint64_t v59 = [v58 objectAtIndexedSubscript:v46];
          [v59 setAlphaBlendOperation:v57];

          uint64_t v60 = (*(_DWORD *)((char *)v101 + v45 + 76) - 1);
          if (v60 < 4) {
            uint64_t v61 = v60 + 1;
          }
          else {
            uint64_t v61 = 0;
          }
          uint64_t v62 = [v100 colorAttachments];
          uint64_t v63 = [v62 objectAtIndexedSubscript:v46];
          [v63 setRgbBlendOperation:v61];

          unsigned int v64 = *(_DWORD *)((char *)v101 + v45 + 84) - 1;
          if (v64 > 0xD) {
            uint64_t v65 = 0;
          }
          else {
            uint64_t v65 = qword_1A29CADF8[v64];
          }
          int v66 = [v100 colorAttachments];
          uint64_t v67 = [v66 objectAtIndexedSubscript:v46];
          [v67 setDestinationAlphaBlendFactor:v65];

          unsigned int v68 = *(_DWORD *)((char *)v101 + v45 + 72) - 1;
          if (v68 > 0xD) {
            uint64_t v69 = 0;
          }
          else {
            uint64_t v69 = qword_1A29CADF8[v68];
          }
          char v70 = [v100 colorAttachments];
          __int16 v71 = [v70 objectAtIndexedSubscript:v46];
          [v71 setDestinationRGBBlendFactor:v69];

          unsigned int v72 = *(_DWORD *)((char *)v101 + v45 + 80) - 1;
          if (v72 > 0xD) {
            uint64_t v73 = 0;
          }
          else {
            uint64_t v73 = qword_1A29CADF8[v72];
          }
          os_signpost_id_t v74 = [v100 colorAttachments];
          uint64_t v75 = [v74 objectAtIndexedSubscript:v46];
          [v75 setSourceAlphaBlendFactor:v73];

          unsigned int v76 = *(_DWORD *)((char *)v101 + v45 + 68) - 1;
          if (v76 > 0xD) {
            uint64_t v77 = 0;
          }
          else {
            uint64_t v77 = qword_1A29CADF8[v76];
          }
          long long v78 = [v100 colorAttachments];
          uint64_t v79 = [v78 objectAtIndexedSubscript:v46];
          [v79 setSourceRGBBlendFactor:v77];

          ++v46;
          char v44 = v101;
          v45 += 48;
        }
        while (v46 != *((void *)v101 + 34));
      }
      unsigned int v80 = *((_DWORD *)v44 + 71);
      uint64_t v81 = v99;
      uint64_t v82 = ggl::getPixelFormat(v80, *(unsigned __int8 *)(*((void *)v99 + 32) + 16));
      uint64_t v83 = v82;
      uint64_t v84 = 0;
      if (v80 <= 0x1A && ((1 << v80) & 0x4380000) != 0) {
        uint64_t v84 = v82;
      }
      [v100 setDepthAttachmentPixelFormat:v84];
      if (v80 - 25 >= 2) {
        uint64_t v85 = 0;
      }
      else {
        uint64_t v85 = v83;
      }
      [v100 setStencilAttachmentPixelFormat:v85];
      [v100 setSupportIndirectCommandBuffers:*((unsigned __int8 *)v101 + 376)];
      [v100 setRasterSampleCount:*((unsigned int *)v101 + 70)];
      [v100 setAlphaToCoverageEnabled:*((_DWORD *)v101 + 92) == 0];
      [v100 setMaxVertexAmplificationCount:*((unsigned int *)v101 + 93)];
      id v86 = *(id *)(*((void *)v99 + 32) + 128);

      if (v86)
      {
        id v87 = *(id *)(*((void *)v99 + 32) + 128);
        id v108 = v87;
        uint64_t v88 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v108 count:1];
        [v100 setBinaryArchives:v88];

        uint64_t v81 = v99;
      }
      id v89 = *(id *)(*((void *)v81 + 32) + 104);
      id v107 = 0;
      uint64_t v40 = (void *)[v89 newRenderPipelineStateWithDescriptor:v100 options:0 reflection:0 error:&v107];
      id v38 = v107;

      int v91 = &qword_1EB32C000;
      {
        operator new();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v36, 40);
      if (!v37) {
        goto LABEL_76;
      }

      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v91[287] + 40))(v91[287], v37, 40);
LABEL_76:
        if (v38)
        {
          int v92 = [v38 localizedDescription];
          NSLog((NSString *)@"PSO error: %@", v92);

          goto LABEL_78;
        }
        if ((atomic_load_explicit(v90, memory_order_acquire) & 1) == 0
        {
          operator new();
        }
        uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v91[287] + 16))(v91[287], 40, 8);
        *(void *)uint64_t v37 = 0;
        *(_WORD *)(v37 + 8) = 1281;
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        *(void *)(v37 + 32) = 0;
        objc_storeStrong((id *)(v37 + 32), v40);
        int v90 = (atomic_uchar *)v99;
        unint64_t v94 = (std::__shared_weak_count *)*((void *)v99 + 2);
        if (v94)
        {
          int v91 = (uint64_t *)*((void *)v99 + 1);
          uint64_t v95 = std::__shared_weak_count::lock(v94);
          if (v95) {
            break;
          }
        }
        std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_95:
          operator new();
      }
      int64_t v96 = (std::__shared_weak_count *)*((void *)v101 + 2);
      *((void *)v101 + 1) = v91;
      *((void *)v101 + 2) = v95;
      if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      *((void *)v101 + 3) = v37;
      ++*((_DWORD *)v101 + 8);
      ggl::ResourceManager::_addResourceStat((uint64_t)v99, "PipelineState", 0x28DAD03E0000000DuLL, 0);
      id v38 = 0;
    }
  }
  else
  {
    uint64_t v37 = 0;
  }

  return v37;
}

void sub_1A19375CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::getPixelFormat(int a1, int a2)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      return 1;
    case 2:
      return 10;
    case 3:
      return 20;
    case 4:
      return 25;
    case 5:
      return 55;
    case 6:
      return 30;
    case 7:
      return 60;
    case 8:
      return 65;
    case 9:
      return 105;
    case 12:
      return 70;
    case 13:
      return 71;
    case 14:
      return 80;
    case 15:
      return 81;
    case 16:
      return 110;
    case 17:
      return 115;
    case 18:
      return 125;
    case 19:
      return 250;
    case 21:
      return 252;
    case 24:
      return 40;
    case 25:
      return 253;
    case 26:
      return 260;
    case 27:
      return 43;
    case 28:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 204;
      goto LABEL_53;
    case 29:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 205;
      goto LABEL_53;
    case 30:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 206;
      goto LABEL_53;
    case 31:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 207;
      goto LABEL_53;
    case 32:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 208;
      goto LABEL_53;
    case 33:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 210;
      goto LABEL_53;
    case 34:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 211;
      goto LABEL_53;
    case 35:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 212;
      goto LABEL_53;
    case 36:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 213;
      goto LABEL_53;
    case 37:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 214;
      goto LABEL_53;
    case 38:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 215;
      goto LABEL_53;
    case 39:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 216;
      goto LABEL_53;
    case 40:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 217;
      goto LABEL_53;
    case 41:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 218;
      goto LABEL_53;
    case 42:
    case 43:
      return 500;
    case 44:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 186;
      goto LABEL_53;
    case 45:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 187;
      goto LABEL_53;
    case 46:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 188;
      goto LABEL_53;
    case 47:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 189;
      goto LABEL_53;
    case 48:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 190;
      goto LABEL_53;
    case 49:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 192;
      goto LABEL_53;
    case 50:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 193;
      goto LABEL_53;
    case 51:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 194;
      goto LABEL_53;
    case 52:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 195;
      goto LABEL_53;
    case 53:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 196;
      goto LABEL_53;
    case 54:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 197;
      goto LABEL_53;
    case 55:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 198;
      goto LABEL_53;
    case 56:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 199;
      goto LABEL_53;
    case 57:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 200;
LABEL_53:
      if (v4) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v5;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ggl::MetalResourceManager::newShaderFunction(ggl::MetalResourceManager *this, const ggl::ShaderFunction *a2, int a3, uint64_t a4)
{
  v50[19] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)*((void *)a2 + 6);
  double v9 = (uint64_t *)v8[3];
  if (v9 || (double v9 = ggl::MetalResourceManager::newLibrary(this, *((const ggl::ShaderLibrary **)a2 + 6))) != 0)
  {
    uint64_t v10 = v8[26];
    int v11 = (std::__shared_weak_count *)v8[27];
    v36[0] = (void *)v10;
    v36[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v10 || *(_DWORD *)(v10 + 8)) {
      goto LABEL_7;
    }
    uint64_t v13 = *(_DWORD **)(v10 + 24);
    unint64_t v14 = *(_DWORD **)(v10 + 32);
    if (v13 == v14)
    {
LABEL_15:
      uint64_t v16 = *(void *)(v10 + 56);
    }
    else
    {
      uint64_t v15 = 0;
      while (*v13 != **((_DWORD **)a2 + 5))
      {
        ++v15;
        if (++v13 == v14) {
          goto LABEL_15;
        }
      }
      uint64_t v16 = *(void *)(v10 + 56) + 24 * v15;
    }
    uint64_t v20 = *(unsigned __int8 *)(v16 + 23);
    char v21 = v20;
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *(void *)(v16 + 8);
    }
    if (v20)
    {
      if (a3)
      {
        id v22 = objc_alloc_init(MEMORY[0x1E4F35228]);
        LOBYTE(v39) = a4 & 1;
        v23.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(a4) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
        *(_DWORD *)((char *)&v39 + 1) = vmovn_s16(v23).u32[0];
        BYTE5(v39) = (a4 & 0x20) != 0;
        BYTE6(v39) = (a4 & 0x40) != 0;
        HIBYTE(v39) = (a4 & 0x80) != 0;
        uint64x2_t v24 = (uint64x2_t)vdupq_n_s64(a4);
        v25.i64[0] = 0x101010101010101;
        v25.i64[1] = 0x101010101010101;
        int8x16_t v40 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFAA0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFA90)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFAC0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFAB0))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFAE0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFAD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB00), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFAF0)))), v25);
        int8x16_t v41 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB20), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB10)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB40), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB30))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB60), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB50)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB80), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB70)))), v25);
        int8x16_t v42 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFBA0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFB90)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFBC0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFBB0))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFBE0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFBD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFC00), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFBF0)))), v25);
        int16x8_t v26 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFC20), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1A28FFC10));
        v26.i64[0] = *(void *)&vmovn_s32((int32x4_t)v26) & 0xFF01FF01FF01FF01;
        unsigned __int32 v43 = vmovn_s16(v26).u32[0];
        BOOL v44 = (a4 & 0x1000000000000000) != 0;
        BOOL v45 = (a4 & 0x2000000000000000) != 0;
        BOOL v46 = (a4 & 0x4000000000000000) != 0;
        BOOL v47 = a4 < 0;
        objc_msgSend(v22, "setConstantValues:type:withRange:", &v39, 53, 0, 64);
        char v21 = *(unsigned char *)(v16 + 23);
      }
      else
      {
        id v22 = 0;
      }
      if (v21 >= 0) {
        uint64_t v27 = v16;
      }
      else {
        uint64_t v27 = *(void *)v16;
      }
      uint64_t v28 = [NSString stringWithUTF8String:v27];
      int v29 = [MEMORY[0x1E4F35238] functionDescriptor];
      uint64_t v30 = *(void **)(*((void *)this + 32) + 128);
      if (v30)
      {
        id v31 = v30;
        id v38 = v31;
        unsigned int v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v38 count:1];
        [v29 setBinaryArchives:v32];
      }
      if (a3) {
        [v29 setConstantValues:v22];
      }
      [v29 setName:v28];
      unint64_t v33 = (void *)[(id)v9[4] newFunctionWithDescriptor:v29 error:0];
      {
        operator new();
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                 + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
      *(void *)uint64_t v12 = 0;
      *(_WORD *)(v12 + 8) = 1025;
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      objc_storeStrong((id *)(v12 + 32), v33);
      ggl::ResourceManager::_addResourceStat((uint64_t)this, "Function", 0x33D8746B00000008uLL, 0);
    }
    else
    {
LABEL_7:
      uint64_t v12 = 0;
    }
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v36[0] = 0;
    v36[1] = 0;
    uint64_t v37 = 0;
    if (a3)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v39);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v40.i64[1], (uint64_t)" with constants:", 16);
      std::ostream::operator<<();
      std::stringbuf::str();
      *(_OWORD *)uint64_t v36 = v34;
      uint64_t v37 = v35;
      uint64_t v39 = *MEMORY[0x1E4FBA408];
      uint64_t v17 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&v39 + *(void *)(v39 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      v40.i64[1] = v17;
      v41.i64[0] = MEMORY[0x1E4FBA470] + 16;
      if (v49 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A62391A0](v50);
      uint64_t v18 = v36;
      if (v37 < 0) {
        uint64_t v18 = (void **)v36[0];
      }
    }
    else
    {
      uint64_t v18 = v36;
    }
    NSLog((NSString *)@"Failed to create library for function '%s'%s", *(void *)(*((void *)a2 + 5) + 8), v18);
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[0]);
    }
    return 0;
  }
  return v12;
}

void sub_1A1938094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ggl20MetalResourceManager22commandBufferCompletedEy_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  v12[0] = &unk_1EF57CA68;
  uint64_t v13 = v12;
  v10[0] = &unk_1EF57CAB0;
  int v11 = v10;
  uint64_t v15 = v14;
  v14[0] = &unk_1EF57CAB0;
  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  unint64_t v3 = (id)GEOGetGeoGLPerformanceLog_log;
  if (os_signpost_enabled(v3))
  {
    __int16 v9 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DestroyResources", "", (uint8_t *)&v9, 2u);
  }

  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  for (unint64_t i = *(uint64_t **)(v1 + 280); i != *(uint64_t **)(v1 + 288); ++i)
  {
    while (1)
    {
      unint64_t v5 = atomic_load((unint64_t *)(*i + 16));
      if (v5 > v2) {
        break;
      }
      ggl::MetalResourceManager::deleteResource(v1, *i);
      unint64_t v6 = *(uint64_t **)(v1 + 288);
      int64_t v7 = (char *)v6 - (char *)(i + 1);
      if (v6 != i + 1) {
        memmove(i, i + 1, (char *)v6 - (char *)(i + 1));
      }
      *(void *)(v1 + 288) = (char *)i + v7;
      if (i == (uint64_t *)((char *)i + v7)) {
        goto LABEL_20;
      }
    }
  }
LABEL_20:
  if (!v15)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v15 + 48))(v15);
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void sub_1A1938454(_Unwind_Exception *exception_object)
{
}

void sub_1A1938460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (a21 == &a18)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
    _Unwind_Resume(exception_object);
  }
  if (!a21) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(*a21 + 40))();
  _Unwind_Resume(exception_object);
}

void sub_1A19384DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

uint64_t ggl::MetalResourceManager::deleteResource(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 9);
  switch(*(unsigned char *)(a2 + 9))
  {
    case 0:
      uint64_t v8 = *(void **)(a2 + 32);
      *(void *)(a2 + 32) = 0;

      atomic_fetch_add((atomic_uint *volatile)(a1 + 312), 0xFFFFFFFF);
      goto LABEL_3;
    case 1:
      uint64_t v9 = *(void *)(a2 + 32);
      for (uint64_t i = *(void *)(a2 + 40); i != v9; i -= 8)
      {
        int v11 = *(void **)(i - 8);
      }
      *(void *)(a2 + 40) = v9;
      goto LABEL_3;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
      unint64_t v5 = *(void **)(a2 + 32);
      *(void *)(a2 + 32) = 0;

LABEL_3:
      int v4 = *(unsigned __int8 *)(a2 + 9);
      break;
    default:
      break;
  }
  unint64_t v6 = "Buffer";
  unint64_t v7 = 0x36F6F5C400000006;
  switch(v4)
  {
    case 0:
      break;
    case 1:
      unint64_t v6 = "Texture";
      unint64_t v7 = 0x4DDB34EE00000007;
      break;
    case 2:
      unint64_t v6 = "SamplerState";
      unint64_t v7 = 0xC9803BE00000000CLL;
      break;
    case 3:
      unint64_t v6 = "Library";
      unint64_t v7 = 0x6E3DA12000000007;
      break;
    case 4:
      unint64_t v6 = "Function";
      unint64_t v7 = 0x33D8746B00000008;
      break;
    case 5:
      unint64_t v6 = "PipelineState";
      unint64_t v7 = 0x28DAD03E0000000DLL;
      break;
    case 6:
      unint64_t v6 = "ComputePipelineState";
      unint64_t v7 = 0xCB8C155300000014;
      break;
    case 7:
      unint64_t v6 = "DepthStencilState";
      unint64_t v7 = 0x38AB5BF400000011;
      break;
    case 8:
      unint64_t v6 = "Drawable";
      unint64_t v7 = 0x7010C0800000008;
      break;
    case 9:
      unint64_t v6 = "RasterizationRateMap";
      unint64_t v7 = 0x62578FE100000014;
      break;
    default:
      unint64_t v6 = "Uknown";
      unint64_t v7 = 0x5165D1F800000006;
      break;
  }
  uint64_t v12 = *(void *)(a2 + 24);
  v23[0] = v6;
  v23[1] = v7;
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v13 = std::__hash_table<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::__unordered_map_hasher<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::hash<geo::StringLiteral>,std::equal_to<geo::StringLiteral>,true>,std::__unordered_map_equal<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::equal_to<geo::StringLiteral>,std::hash<geo::StringLiteral>,true>,std::allocator<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>>>::find<geo::StringLiteral>((void *)(a1 + 152), (uint64_t)v23);
  if (v13)
  {
    --v13[4];
    if (v12) {
      v13[5] -= v12;
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 192));
  if (*(unsigned char *)(a2 + 9) == 1)
  {
    unint64_t v14 = *(std::__shared_weak_count **)(a2 + 112);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 96);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(a2 + 80);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(void *)(a2 + 32);
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 40);
      uint64_t v19 = *(void *)(a2 + 32);
      if (v18 != v17)
      {
        do
        {
          uint64_t v20 = *(void **)(v18 - 8);
          v18 -= 8;
        }
        while (v18 != v17);
        uint64_t v19 = *(void *)(a2 + 32);
      }
      *(void *)(a2 + 40) = v17;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 56) + 40))(*(void *)(a2 + 56), v19, *(void *)(a2 + 48) - v19);
    }
    {
      operator new();
    }
    char v21 = *(uint64_t (**)(void))(*(void *)ggl::Allocator::instance(void)::alloc + 40);
  }
  else
  {
    {
      operator new();
    }
    char v21 = *(uint64_t (**)(void))(*(void *)ggl::Allocator::instance(void)::alloc + 40);
  }
  return v21();
}

uint64_t *ggl::MetalResourceManager::newBuffer(ggl::MetalResourceManager *this, const ggl::Buffer *a2)
{
  if (*((unsigned char *)a2 + 39) == 1) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = 1;
  }
  uint64_t v7 = [*(id *)(*((void *)this + 32) + 104) newBufferWithLength:*((void *)a2 + 5) options:v6];
  if (!v7) {
    goto LABEL_13;
  }
  unint64_t v2 = (void *)v7;
  unint64_t v3 = &qword_1EB32C000;
  while (1)
  {
    unint64_t v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[287] + 16))(v3[287], 40, 8);
    uint64_t *v3 = 0;
    *((_WORD *)v3 + 4) = 1;
    v3[2] = 0;
    v3[3] = 0;
    v3[4] = 0;
    objc_storeStrong((id *)v3 + 4, v2);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v8)
    {
      uint64_t v9 = *((void *)this + 1);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10) {
        break;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_13:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_fault_impl(&dword_1A1780000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Metal returned null buffer.", v13, 2u);
    }
    abort_with_reason();
LABEL_16:
      operator new();
  }
  int v11 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *((void *)a2 + 1) = v9;
  *((void *)a2 + 2) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *((void *)a2 + 3) = v3;
  ++*((_DWORD *)a2 + 8);
  v3[3] = *((void *)a2 + 5);
  atomic_fetch_add((atomic_uint *volatile)this + 78, 1u);
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Buffer", 0x36F6F5C400000006uLL, v3[3]);

  return v3;
}

void sub_1A1938BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::ResourceManager::_addResourceStat(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  *(void *)&long long v50 = a2;
  *((void *)&v50 + 1) = a3;
  uint64_t v9 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  uint64_t v10 = (void *)(a1 + 152);
  int v11 = std::__hash_table<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::__unordered_map_hasher<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::hash<geo::StringLiteral>,std::equal_to<geo::StringLiteral>,true>,std::__unordered_map_equal<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::equal_to<geo::StringLiteral>,std::hash<geo::StringLiteral>,true>,std::allocator<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>>>::find<geo::StringLiteral>((void *)(a1 + 152), (uint64_t)&v50);
  if (!v11)
  {
    unint64_t v14 = HIDWORD(a3);
    unint64_t v15 = *(void *)(a1 + 160);
    if (v15)
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v4 = HIDWORD(a3);
        if (v15 <= v14) {
          unint64_t v4 = v14 % v15;
        }
      }
      else
      {
        unint64_t v4 = (v15 - 1) & HIDWORD(a3);
      }
      uint64_t v17 = *(void ***)(*v10 + 8 * v4);
      if (v17)
      {
        uint64_t v12 = *v17;
        if (*v17)
        {
          if (v16.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v19 = *((void *)v12 + 1);
              if (v19 == v14)
              {
                if (*((void *)v12 + 3) == a3 && !memcmp(*((const void **)v12 + 2), a2, a3)) {
                  goto LABEL_87;
                }
              }
              else if ((v19 & (v15 - 1)) != v4)
              {
                goto LABEL_27;
              }
              uint64_t v12 = *(void **)v12;
              if (!v12) {
                goto LABEL_27;
              }
            }
          }
          do
          {
            unint64_t v18 = *((void *)v12 + 1);
            if (v18 == v14)
            {
              if (*((void *)v12 + 3) == a3 && !memcmp(*((const void **)v12 + 2), a2, a3)) {
                goto LABEL_87;
              }
            }
            else
            {
              if (v18 >= v15) {
                v18 %= v15;
              }
              if (v18 != v4) {
                break;
              }
            }
            uint64_t v12 = *(void **)v12;
          }
          while (v12);
        }
      }
    }
LABEL_27:
    uint64_t v12 = operator new(0x30uLL);
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = v14;
    *((_OWORD *)v12 + 1) = v50;
    *((_OWORD *)v12 + 2) = xmmword_1A28FCC60;
    uint64_t v13 = (void *)(a1 + 176);
    float v20 = (float)(unint64_t)(*(void *)(a1 + 176) + 1);
    float v21 = *(float *)(a1 + 184);
    if (v15 && (float)(v21 * (float)v15) >= v20)
    {
LABEL_77:
      unsigned __int32 v43 = (void *)*v10;
      BOOL v44 = *(void **)(*v10 + 8 * v4);
      if (v44)
      {
        *(void *)uint64_t v12 = *v44;
      }
      else
      {
        uint64_t v47 = *(void *)(a1 + 168);
        BOOL v46 = (void *)(a1 + 168);
        uint64_t v45 = v47;
        *(void *)uint64_t v12 = v47;
        *BOOL v46 = v12;
        v43[v4] = v46;
        if (!v47) {
          goto LABEL_86;
        }
        unint64_t v48 = *(void *)(v45 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v48 >= v15) {
            v48 %= v15;
          }
        }
        else
        {
          v48 &= v15 - 1;
        }
        BOOL v44 = (void *)(*v10 + 8 * v48);
      }
      *BOOL v44 = v12;
      goto LABEL_86;
    }
    BOOL v22 = 1;
    if (v15 >= 3) {
      BOOL v22 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v15);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v15 = *(void *)(a1 + 160);
    }
    if (prime <= v15)
    {
      if (prime >= v15) {
        goto LABEL_64;
      }
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
      if (v15 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime >= v15)
      {
        unint64_t v15 = *(void *)(a1 + 160);
LABEL_64:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v15 <= v14) {
            unint64_t v4 = v14 % v15;
          }
          else {
            unint64_t v4 = v14;
          }
        }
        else
        {
          unint64_t v4 = (v15 - 1) & v14;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        char v49 = (void *)*v10;
        void *v10 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v15 = 0;
        *(void *)(a1 + 160) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int16x8_t v26 = operator new(8 * prime);
    uint64_t v27 = (void *)*v10;
    void *v10 = v26;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v28 = 0;
    *(void *)(a1 + 160) = prime;
    do
      *(void *)(*v10 + 8 * v28++) = 0;
    while (prime != v28);
    uint64_t v30 = a1 + 168;
    int v29 = *(void **)(a1 + 168);
    if (!v29)
    {
LABEL_63:
      unint64_t v15 = prime;
      goto LABEL_64;
    }
    size_t v31 = v29[1];
    size_t v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v33 = v31 & v32;
      *(void *)(*v10 + 8 * v33) = v30;
      for (uint64_t i = (void *)*v29; *v29; uint64_t i = (void *)*v29)
      {
        size_t v35 = i[1] & v32;
        if (v35 == v33)
        {
          int v29 = i;
        }
        else if (*(void *)(*v10 + 8 * v35))
        {
          void *v29 = *i;
          uint64_t v36 = 8 * v35;
          *uint64_t i = **(void **)(*v10 + v36);
          **(void **)(*v10 + v36) = i;
        }
        else
        {
          *(void *)(*v10 + 8 * v35) = v29;
          int v29 = i;
          size_t v33 = v35;
        }
      }
      goto LABEL_63;
    }
    if (v31 >= prime) {
      v31 %= prime;
    }
    *(void *)(*v10 + 8 * v31) = v30;
    int8x16_t v40 = (void *)*v29;
    if (!*v29) {
      goto LABEL_63;
    }
    while (1)
    {
      size_t v42 = v40[1];
      if (v42 >= prime) {
        v42 %= prime;
      }
      if (v42 != v31)
      {
        if (!*(void *)(*v10 + 8 * v42))
        {
          *(void *)(*v10 + 8 * v42) = v29;
          goto LABEL_68;
        }
        void *v29 = *v40;
        uint64_t v41 = 8 * v42;
        void *v40 = **(void **)(*v10 + v41);
        **(void **)(*v10 + v41) = v40;
        int8x16_t v40 = v29;
      }
      size_t v42 = v31;
LABEL_68:
      int v29 = v40;
      int8x16_t v40 = (void *)*v40;
      size_t v31 = v42;
      if (!v40) {
        goto LABEL_63;
      }
    }
  }
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 4;
LABEL_86:
  ++*v13;
LABEL_87:
  if (a4) {
    *((void *)v12 + 5) += a4;
  }
  std::mutex::unlock(v9);
}

uint64_t *std::__hash_table<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::__unordered_map_hasher<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::hash<geo::StringLiteral>,std::equal_to<geo::StringLiteral>,true>,std::__unordered_map_equal<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::equal_to<geo::StringLiteral>,std::hash<geo::StringLiteral>,true>,std::allocator<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>>>::find<geo::StringLiteral>(void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *(unsigned int *)(a2 + 12);
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *v6;
  if (*v6)
  {
    size_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(const void **)a2;
    if (v4.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = v7[1];
        if (v12 == v3)
        {
          if (*((_DWORD *)v7 + 7) == v3
            && *((_DWORD *)v7 + 6) == v8
            && !memcmp((const void *)v7[2], v9, v8))
          {
            return v7;
          }
        }
        else if ((v12 & v10) != v5)
        {
          return 0;
        }
        uint64_t v7 = (uint64_t *)*v7;
        if (!v7) {
          return v7;
        }
      }
    }
    do
    {
      unint64_t v11 = v7[1];
      if (v11 == v3)
      {
        if (*((_DWORD *)v7 + 7) == v3
          && *((_DWORD *)v7 + 6) == v8
          && !memcmp((const void *)v7[2], v9, v8))
        {
          return v7;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v5) {
          return 0;
        }
      }
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  return v7;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::operator()()
{
  if (GEOGetGeoGLPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_5_53372);
  }
  v0 = (id)GEOGetGeoGLPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DestroyResources", "", v1, 2u);
  }
}

uint64_t *ggl::MetalResourceManager::newTexture(ggl::MetalResourceManager *this, const Texture *a2)
{
  simpleValidateTexture(a2);
  LOBYTE(v4) = 0;
  switch(*((_DWORD *)a2 + 14))
  {
    case 0:
    case 1:
      LOBYTE(v4) = *((void *)a2 + 11) != 0;
      goto LABEL_3;
    case 2:
      int v5 = *((_DWORD *)a2 + 17);
      if (*((_DWORD *)a2 + 18) <= 1u) {
        uint64_t v6 = 3;
      }
      else {
        uint64_t v6 = 8;
      }
      unint64_t v8 = *((unsigned int *)a2 + 20);
      unint64_t v7 = *((unsigned int *)a2 + 21);
      uint64_t v10 = *((unsigned int *)a2 + 22);
      LODWORD(v9) = *((_DWORD *)a2 + 23);
      LOBYTE(v4) = 0;
      uint64_t v40 = ggl::pixelFormatPixelsSize(*((_DWORD *)a2 + 17), v8, v7) * v10;
      break;
    case 3:
      unint64_t v7 = *((unsigned int *)a2 + 49);
      LODWORD(v9) = *((_DWORD *)a2 + 22);
      int v5 = *((_DWORD *)a2 + 17);
      LOBYTE(v4) = 0;
      uint64_t v40 = 6 * ggl::pixelFormatPixelsSize(v5, v7, v7);
      uint64_t v6 = 5;
      uint64_t v10 = 1;
      unint64_t v8 = v7;
      break;
    case 4:
LABEL_3:
      int v5 = *((_DWORD *)a2 + 17);
      if (*((_DWORD *)a2 + 18) <= 1u) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = 4;
      }
      unint64_t v8 = *((unsigned int *)a2 + 20);
      unint64_t v7 = *((unsigned int *)a2 + 21);
      LODWORD(v9) = *((_DWORD *)a2 + 26);
      uint64_t v40 = ggl::pixelFormatPixelsSize(*((_DWORD *)a2 + 17), v8, v7);
      uint64_t v10 = 1;
      break;
    default:
      uint64_t v40 = 0;
      LOBYTE(v4) = 0;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v6 = 0;
      int v5 = *((_DWORD *)a2 + 17);
      uint64_t v10 = 1;
      LODWORD(v9) = 1;
      break;
  }
  uint64_t PixelFormat = ggl::getPixelFormat(v5, *(unsigned __int8 *)(*((void *)this + 32) + 16));
  uint64_t v12 = &qword_1EB32C000;
  while (1)
  {
    uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[287] + 16))(v12[287], 136, 8);
    ggl::MetalTextureResource::MetalTextureResource((ggl::MetalTextureResource *)v12);
    if (v4)
    {
      if (*((_DWORD *)a2 + 16) == 2)
      {
        uint64_t v13 = v12[4];
        *((unsigned char *)v12 + 120) = 1;
        unsigned __int8 v12[16] = 3;
        unint64_t v9 = v12[5];
        unint64_t v14 = v9 - v13;
        if (v9 - v13 > 0x17)
        {
          if (v14 != 24)
          {
            id v4 = (id)(v13 + 24);
            if (v9 != v13 + 24)
            {
              do
              {
                float v21 = *(void **)(v9 - 8);
                v9 -= 8;
              }
              while ((id)v9 != v4);
            }
            void v12[5] = (uint64_t)v4;
          }
        }
        else
        {
          std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append((unint64_t *)v12 + 4, 3 - (v14 >> 3));
        }
      }
      if (v12[16])
      {
        unint64_t v9 = 0;
        uint64_t v10 = *(void *)(*((void *)a2 + 11) + 24);
        do
        {
          id v4 = *(id *)(*(void *)(v10 + 32) + 8 * v9);
          uint64_t v22 = [v4 newTextureViewWithPixelFormat:PixelFormat];
          uint64_t v23 = v12[4];
          unint64_t v24 = *(void **)(v23 + 8 * v9);
          *(void *)(v23 + 8 * v9) = v22;

          ++v9;
        }
        while (v9 < v12[16]);
      }
      uint64_t v25 = *((void *)a2 + 3);
      if (v25 && v25 != 3735927469)
      {
        ggl::RenderDataHolder::replaceRenderResource((uint64_t)a2, (uint64_t)this, (uint64_t)v12);
        goto LABEL_68;
      }
      if (!this)
      {
        unint64_t v9 = 0;
        uint64_t v27 = 0;
LABEL_64:
        unint64_t v37 = (std::__shared_weak_count *)*((void *)a2 + 2);
        *((void *)a2 + 1) = v9;
        *((void *)a2 + 2) = v27;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        *((void *)a2 + 3) = v12;
        ++*((_DWORD *)a2 + 8);
        goto LABEL_68;
      }
      int16x8_t v26 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v26)
      {
        unint64_t v9 = *((void *)this + 1);
        uint64_t v27 = std::__shared_weak_count::lock(v26);
        if (v27) {
          goto LABEL_64;
        }
      }
      goto LABEL_74;
    }
    id v4 = objc_alloc_init(MEMORY[0x1E4F35330]);
    [v4 setTextureType:v6];
    [v4 setPixelFormat:PixelFormat];
    [v4 setWidth:v8];
    [v4 setHeight:v7];
    [v4 setDepth:1];
    [v4 setMipmapLevelCount:v9];
    [v4 setSampleCount:*((unsigned int *)a2 + 18)];
    [v4 setArrayLength:v10];
    [v4 setCpuCacheMode:0];
    int v15 = *((_DWORD *)a2 + 17);
    if ((v15 - 19) < 8 && (((0x87u >> (v15 - 19)) & 1) != 0 || (v15 - 25) < 2)
      || *((_DWORD *)a2 + 18) > 1u
      || *((_DWORD *)a2 + 16) == 3)
    {
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 0;
    }
    [v4 setStorageMode:v16];
    unsigned int v17 = *((_DWORD *)a2 + 15) - 1;
    if (v17 >= 5) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = qword_1A29CAA70[v17];
    }
    [v4 setUsage:v18];
    if (*((_DWORD *)a2 + 16) == 2)
    {
      uint64_t v19 = v12[4];
      *((unsigned char *)v12 + 120) = 1;
      unsigned __int8 v12[16] = 3;
      unint64_t v9 = v12[5];
      unint64_t v20 = v9 - v19;
      if (v9 - v19 > 0x17)
      {
        if (v20 != 24)
        {
          uint64_t v10 = v19 + 24;
          while (v9 != v10)
          {
            uint64_t v28 = *(void **)(v9 - 8);
            v9 -= 8;
          }
          void v12[5] = v10;
        }
      }
      else
      {
        std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append((unint64_t *)v12 + 4, 3 - (v20 >> 3));
      }
    }
    if (v12[16])
    {
      unint64_t v9 = 0;
      while (1)
      {
        int v29 = *((_DWORD *)a2 + 14);
        id v30 = *(id *)(*((void *)this + 32) + 104);
        uint64_t v10 = (uint64_t)v30;
        uint64_t v31 = v29 == 4
            ? [v30 newTextureWithDescriptor:v4 iosurface:*((void *)a2 + 20) plane:0]
            : [v30 newTextureWithDescriptor:v4];
        unint64_t v7 = v31;

        if (!v7) {
          break;
        }
        uint64_t v32 = v12[4];
        size_t v33 = *(void **)(v32 + 8 * v9);
        *(void *)(v32 + 8 * v9) = v7;

        if (++v9 >= v12[16]) {
          goto LABEL_57;
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_fault_impl(&dword_1A1780000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Metal returned null texture.", buf, 2u);
      }
      abort_with_reason();
      __break(1u);
      goto LABEL_74;
    }
    if (!this) {
      break;
    }
LABEL_57:
    long long v34 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v34)
    {
      unint64_t v9 = *((void *)this + 1);
      size_t v35 = std::__shared_weak_count::lock(v34);
      if (v35) {
        goto LABEL_59;
      }
    }
LABEL_74:
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_75:
      operator new();
  }
  unint64_t v9 = 0;
  size_t v35 = 0;
LABEL_59:
  uint64_t v36 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *((void *)a2 + 1) = v9;
  *((void *)a2 + 2) = v35;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  *((void *)a2 + 3) = v12;
  ++*((_DWORD *)a2 + 8);

LABEL_68:
  uint64_t v38 = v12[16] * v40;
  void v12[3] = v38;
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Texture", 0x4DDB34EE00000007uLL, v38);
  return v12;
}

void sub_1A1939964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

ggl::MetalTextureResource *ggl::MetalTextureResource::MetalTextureResource(ggl::MetalTextureResource *this)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = 257;
  long long v2 = 0uLL;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v3 = (unint64_t *)((char *)this + 32);
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 6) = 0;
  {
    long long v2 = 0uLL;
    if (v11) {
      operator new();
    }
  }
  uint64_t v4 = ggl::Allocator::instance(void)::alloc;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = v4;
  *(_OWORD *)((char *)this + 72) = v2;
  *(_OWORD *)((char *)this + 88) = v2;
  *(_OWORD *)((char *)this + 104) = v2;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 16) = 1;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = v6 - v5;
  if (v6 == v5)
  {
    std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append(v3, 1 - (v7 >> 3));
  }
  else if ((unint64_t)v7 >= 9)
  {
    uint64_t v8 = v5 + 8;
    while (v6 != v8)
    {
      unint64_t v9 = *(void **)(v6 - 8);
      v6 -= 8;
    }
    *((void *)this + 5) = v8;
  }
  return this;
}

void sub_1A1939AF8(_Unwind_Exception *a1)
{
  ggl::RenderResourceFences::~RenderResourceFences(v2);
  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append(unint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  unint64_t v5 = a1[2];
  if (a2 <= (uint64_t)(v5 - (void)v4) >> 3)
  {
    if (a2)
    {
      uint64_t v12 = 8 * a2;
      uint64_t v13 = &v4[a2];
      do
      {
        if (v4) {
          void *v4 = 0;
        }
        ++v4;
        v12 -= 8;
      }
      while (v12);
      uint64_t v4 = v13;
    }
    a1[1] = (unint64_t)v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v4 - *a1;
    uint64_t v7 = v6 >> 3;
    unint64_t v8 = (v6 >> 3) + a2;
    if (v8 >> 61) {
      abort();
    }
    uint64_t v9 = v5 - *a1;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 8 * v10, 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v14 = v11 + 8 * v7;
    uint64_t v15 = 8 * a2;
    unint64_t v16 = v14 + 8 * a2;
    unsigned int v17 = (void *)v14;
    do
    {
      if (v17) {
        *unsigned int v17 = 0;
      }
      ++v17;
      v15 -= 8;
    }
    while (v15);
    uint64_t v18 = v11 + 8 * v10;
    uint64_t v19 = (void *)*a1;
    unint64_t v20 = (void *)a1[1];
    if (v20 == (void *)*a1)
    {
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v18;
      if (!v20) {
        return;
      }
      goto LABEL_36;
    }
    unint64_t v21 = (unint64_t)v20 - *a1 - 8;
    if (v21 <= 0x77) {
      goto LABEL_44;
    }
    if ((unint64_t)v20 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8 < v14
      && v6 - (v21 & 0xFFFFFFFFFFFFFFF8) + v11 - 8 < (unint64_t)v20)
    {
      goto LABEL_44;
    }
    uint64_t v23 = (v21 >> 3) + 1;
    unint64_t v24 = (_OWORD *)(v11 + 8 * v7 - 16);
    uint64_t v25 = (long long *)(v20 - 4);
    uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *v25;
      long long v27 = v25[1];
      long long *v25 = 0uLL;
      v25[1] = 0uLL;
      v25 -= 2;
      *(v24 - 1) = v28;
      *unint64_t v24 = v27;
      v24 -= 2;
      v26 -= 4;
    }
    while (v26);
    v14 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        uint64_t v29 = *--v20;
        *unint64_t v20 = 0;
        *(void *)(v14 - 8) = v29;
        v14 -= 8;
      }
      while (v20 != v19);
    }
    id v30 = (void *)*a1;
    uint64_t v31 = (void *)a1[1];
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v18;
    while (v31 != v30)
    {
      uint64_t v32 = (void *)*--v31;
    }
    if (v30)
    {
LABEL_36:
      size_t v33 = *(void (**)(void))(*(void *)a1[3] + 40);
      v33();
    }
  }
}

void simpleValidateTexture(const Texture *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
    }
    uint64_t v4 = (id)GEOGetGeoGLDefaultLog_log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    LOWORD(v8) = 0;
    unint64_t v5 = "MetalResourceManager: Texture is nullptr";
    uint64_t v6 = v4;
    uint32_t v7 = 2;
    goto LABEL_20;
  }
  if (*((void *)a1 + 3) == 3735927469)
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
    }
    uint64_t v4 = (id)GEOGetGeoGLDefaultLog_log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    int v8 = 134217984;
    uint64_t v9 = a1;
    unint64_t v5 = "MetalResourceManager: Stale texture instance(%p)";
LABEL_19:
    uint64_t v6 = v4;
    uint32_t v7 = 12;
LABEL_20:
    _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v8, v7);
LABEL_21:

    return;
  }
  if (*((_DWORD *)a1 + 14) == 3)
  {
    unsigned int v2 = *((_DWORD *)a1 + 49);
    unsigned int v3 = v2;
  }
  else
  {
    unsigned int v2 = *((_DWORD *)a1 + 20);
    unsigned int v3 = *((_DWORD *)a1 + 21);
  }
  if (!ggl::pixelFormatPixelsSize(*((_DWORD *)a1 + 17), v2, v3))
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_53364);
    }
    uint64_t v4 = (id)GEOGetGeoGLDefaultLog_log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    int v8 = 134217984;
    uint64_t v9 = a1;
    unint64_t v5 = "MetalResourceManager: Corrupted texture instance(%p)";
    goto LABEL_19;
  }
}

uint64_t *ggl::MetalResourceManager::newLibrary(ggl::MetalResourceManager *this, const ggl::ShaderLibrary *a2)
{
  uint64_t v4 = *((void *)a2 + 26);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 27);
  uint64_t v41 = v4;
  size_t v42 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v39 = v4;
    uint64_t v40 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v39 = v4;
    uint64_t v40 = 0;
  }
  int v6 = *(_DWORD *)(v4 + 12);
  if (v6 == 1)
  {
    unint64_t v14 = (void *)[[NSString alloc] initWithBytes:*(void *)(*(void *)(v4 + 16) + 8) length:*(void *)(*(void *)(v4 + 16) + 16) encoding:4];
    id v15 = objc_alloc_init(MEMORY[0x1E4F351F8]);
    [v15 setMathMode:2];
    if (*((void *)this + 33)) {
      uint64_t v16 = *((void *)this + 33);
    }
    else {
      uint64_t v16 = 131076;
    }
    [v15 setLanguageVersion:v16];
    id v17 = *(id *)(*((void *)this + 32) + 104);
    id v36 = 0;
    uint64_t v10 = (void *)[v17 newLibraryWithSource:v14 options:v15 error:&v36];
    id v18 = v36;

    if (v18)
    {
      uint64_t v19 = **((void **)a2 + 5);
      unint64_t v20 = [v18 localizedDescription];
      NSLog((NSString *)@" error for library from source '%s': %@", v19, v20);
    }
  }
  else
  {
    if (v6) {
      goto LABEL_11;
    }
    int v7 = *(_DWORD *)(v4 + 88);
    if (v7 != 1)
    {
      if (!v7)
      {
        dispatch_data_t v8 = dispatch_data_create(*(const void **)(*(void *)(v4 + 16) + 8), *(void *)(*(void *)(v4 + 16) + 16), 0, 0);
        id v9 = *(id *)(*((void *)this + 32) + 104);
        id v38 = 0;
        uint64_t v10 = (void *)[v9 newLibraryWithData:v8 error:&v38];
        id v11 = v38;

        if (v11)
        {
          uint64_t v12 = **((void **)a2 + 5);
          uint64_t v13 = [v11 localizedDescription];
          NSLog((NSString *)@"Compiler error for raw data library '%s': %@", v12, v13);
        }
        goto LABEL_18;
      }
LABEL_11:
      uint64_t v10 = 0;
      goto LABEL_29;
    }
    v37[1] = (id)v4;
    v37[2] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v30 = [NSString stringWithUTF8String:*(void *)(v4 + 96)];
    uint64_t v31 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:v30];
    id v32 = *(id *)(*((void *)this + 32) + 104);
    v37[0] = 0;
    uint64_t v10 = (void *)[v32 newDefaultLibraryWithBundle:v31 error:v37];
    id v33 = v37[0];

    if (v33)
    {
      uint64_t v34 = **((void **)a2 + 5);
      size_t v35 = [v33 localizedDescription];
      NSLog((NSString *)@"Compiler error for library from bundle '%s': %@", v34, v35);
    }
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_18:
  if (!v10)
  {
LABEL_29:
    unint64_t v21 = 0;
    long long v27 = v40;
    if (!v40) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  unint64_t v21 = &qword_1EB32C000;
  while (1)
  {
    unint64_t v21 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[287] + 16))(v21[287], 40, 8);
    uint64_t *v21 = 0;
    *((_WORD *)v21 + 4) = 769;
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = 0;
    objc_storeStrong((id *)v21 + 4, v10);
    uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v22)
    {
      uint64_t v23 = *((void *)this + 1);
      unint64_t v24 = std::__shared_weak_count::lock(v22);
      if (v24) {
        break;
      }
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_44:
      operator new();
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *((void *)a2 + 1) = v23;
  *((void *)a2 + 2) = v24;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  *((void *)a2 + 3) = v21;
  ++*((_DWORD *)a2 + 8);
  uint64_t v26 = *(void *)(v41 + 16);
  *(void *)(v41 + 16) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Library", 0x6E3DA12000000007uLL, 0);
  long long v27 = v40;
  if (v40)
  {
LABEL_30:
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_32:
  long long v28 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }

  return v21;
}

void sub_1A193A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void ggl::Data::~Data(ggl::Data *this)
{
  *(void *)this = &unk_1EF560428;
  if (*((void *)this + 1))
  {
    unsigned int v2 = &qword_1EB32C000;
    {
      unsigned int v2 = &qword_1EB32C000;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v2[287] + 40))(v2[287], *((void *)this + 1), 0);
  }
  *((void *)this + 1) = 0;
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  int v3;

  *(void *)this = &unk_1EF560428;
  if (*((void *)this + 1))
  {
    unsigned int v2 = &qword_1EB32C000;
    {
      unsigned int v2 = &qword_1EB32C000;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v2[287] + 40))(v2[287], *((void *)this + 1), 0);
  }
  *((void *)this + 1) = 0;
}

{
  uint64_t *v2;
  int v3;

  *(void *)this = &unk_1EF560428;
  if (*((void *)this + 1))
  {
    unsigned int v2 = &qword_1EB32C000;
    {
      unsigned int v2 = &qword_1EB32C000;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v2[287] + 40))(v2[287], *((void *)this + 1), 0);
  }
  *((void *)this + 1) = 0;
}

void md::LogicManager::addLogic<md::MuninSceneLogic,md::World *,gdc::LoadingStatusTracker *,std::shared_ptr<md::TaskContext> &,md::RunLoopController *,md::AnimationRunner *,BOOL>()
{
}

void sub_1A193B598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, pthread_rwlock_t *a12, void **a13, void **a14, std::mutex *a15, uint64_t a16, uint64_t *a17, void *a18, void **a19, void *a20,uint64_t a21)
{
  uint64_t v22 = *(std::__shared_weak_count **)(a21 + 976);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a21 + 952);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = *(std::__shared_weak_count **)(a21 + 936);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  std::mutex::~mutex(a15);
  uint64_t v25 = *(std::__shared_weak_count **)(a21 + 856);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = *a19;
  if (*a19)
  {
    *(void *)(a21 + 816) = v26;
    operator delete(v26);
  }
  if (*(unsigned char *)(a21 + 608)) {
    *(unsigned char *)(a21 + 608) = 0;
  }
  if (*(unsigned char *)(a21 + 600)) {
    *(unsigned char *)(a21 + 600) = 0;
  }
  if (*(unsigned char *)(a21 + 592)) {
    *(unsigned char *)(a21 + 592) = 0;
  }
  long long v27 = (uint64_t *)(a21 + 560);
  if (*(unsigned char *)(a21 + 584)) {
    *(unsigned char *)(a21 + 584) = 0;
  }
  if (*v27)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)v27, *v27);
    operator delete((void *)*v27);
  }
  uint64_t v28 = *(void *)(a21 + 552);
  *(void *)(a21 + 552) = 0;
  if (v28)
  {
    *(void *)(v28 + 40) = &unk_1EF5596D8;

    uint64_t v29 = *(void *)(v28 + 32);
    if (v29 == v28 + 8)
    {
      (*(void (**)(uint64_t))(*(void *)(v28 + 8) + 32))(v28 + 8);
    }
    else if (v29)
    {
      (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
    }
    MEMORY[0x1A6239270](v28, 0x10A0C401B67C7C3);
  }
  uint64_t v30 = *(void *)(a21 + 544);
  *(void *)(a21 + 544) = 0;
  if (v30)
  {
    *(void *)(v30 + 40) = &unk_1EF5596D8;

    uint64_t v31 = *(void *)(v30 + 32);
    if (v31 == v30 + 8)
    {
      (*(void (**)(uint64_t))(*(void *)(v30 + 8) + 32))(v30 + 8);
    }
    else if (v31)
    {
      (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
    }
    MEMORY[0x1A6239270](v30, 0x10A0C401B67C7C3);
  }
  uint64_t v32 = *(void *)(a21 + 536);
  *(void *)(a21 + 536) = 0;
  if (v32)
  {
    id v33 = *(unsigned char **)(v32 + 24);
    if (v33)
    {
      do
      {
        if (v33[112]) {
          v33[112] = 0;
        }
        BOOL v44 = *(unsigned char **)v33;
        uint64_t v45 = (void *)*((void *)v33 + 4);
        if (v45 != *((void **)v33 + 6)) {
          free(v45);
        }
        operator delete(v33);
        id v33 = v44;
      }
      while (v44);
    }
    uint64_t v34 = *(void **)(v32 + 8);
    *(void *)(v32 + 8) = 0;
    if (v34) {
      operator delete(v34);
    }
    MEMORY[0x1A6239270](v32, 0x10A0C402A8DDD12);
  }
  uint64_t v35 = *(void *)(a21 + 528);
  *(void *)(a21 + 528) = 0;
  if (v35) {
    MEMORY[0x1A6239270](v35, 0x60C4044C4A2DFLL);
  }
  uint64_t v36 = *a17;
  *a17 = 0;
  if (v36)
  {
    unint64_t v37 = *(void **)(v36 + 80);
    if (v37)
    {
      do
      {
        id v38 = (void *)*v37;
        operator delete(v37);
        unint64_t v37 = v38;
      }
      while (v38);
    }
    uint64_t v39 = *(void **)(v36 + 64);
    *(void *)(v36 + 64) = 0;
    if (v39) {
      operator delete(v39);
    }
    MEMORY[0x1A6239270](v36, 0x10A0C40091BD0E7);
  }
  uint64_t v40 = *a10;
  if (*a10)
  {
    *(void *)(a21 + 488) = v40;
    operator delete(v40);
  }
  uint64_t v41 = (char *)*a14;
  if (*a14)
  {
    size_t v42 = *(char **)(a21 + 456);
    unsigned __int32 v43 = *a14;
    if (v42 != v41)
    {
      do
      {
        BOOL v46 = (unsigned char *)*((void *)v42 - 3);
        if (v46)
        {
          do
          {
            if (v46[112]) {
              v46[112] = 0;
            }
            unint64_t v48 = *(unsigned char **)v46;
            char v49 = (void *)*((void *)v46 + 4);
            if (v49 != *((void **)v46 + 6)) {
              free(v49);
            }
            operator delete(v46);
            BOOL v46 = v48;
          }
          while (v48);
        }
        uint64_t v47 = (void *)*((void *)v42 - 5);
        *((void *)v42 - 5) = 0;
        if (v47) {
          operator delete(v47);
        }
        v42 -= 48;
      }
      while (v42 != v41);
      unsigned __int32 v43 = *a14;
    }
    *(void *)(a21 + 456) = v41;
    operator delete(v43);
  }
  long long v50 = *(void **)(a21 + 424);
  if (v50)
  {
    do
    {
      int v51 = (void *)*v50;
      operator delete(v50);
      long long v50 = v51;
    }
    while (v51);
  }
  int v52 = *a11;
  *a11 = 0;
  if (v52) {
    operator delete(v52);
  }
  int v53 = (geo::read_write_lock *)pthread_rwlock_destroy(a12);
  if (v53) {
    geo::read_write_lock::logFailure(v53, (uint64_t)"destruction", v54);
  }
  BOOL v55 = *a13;
  if (*a13)
  {
    *(void *)(a21 + 192) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *(std::__shared_weak_count **)(a21 + 176);
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  uint64_t v57 = *(std::__shared_weak_count **)(a21 + 128);
  if (v57)
  {
    if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *(void *)a21 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a21 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a21 + 80));
  MEMORY[0x1A6239270](a21, 0x10F1C403AAD2613);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    id v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = a1 + 2;
  uint64_t v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(void *)(a3 + 16);
  v10[5] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_72;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v20 = operator new(8 * prime);
    unint64_t v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    uint64_t v23 = (void *)*v13;
    if (!*v13) {
      goto LABEL_59;
    }
    size_t v24 = v23[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*a1 + 8 * v26) = v13;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          uint64_t v23 = i;
        }
        else if (*(void *)(*a1 + 8 * v28))
        {
          *uint64_t v23 = *i;
          uint64_t v29 = 8 * v28;
          *uint64_t i = **(void **)(*a1 + v29);
          **(void **)(*a1 + v29) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v28) = v23;
          uint64_t v23 = i;
          size_t v26 = v28;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*a1 + 8 * v24) = v13;
    id v33 = (void *)*v23;
    if (!*v23) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*a1 + 8 * v35))
        {
          *(void *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *uint64_t v23 = *v33;
        uint64_t v34 = 8 * v35;
        *id v33 = **(void **)(*a1 + v34);
        **(void **)(*a1 + v34) = v33;
        id v33 = v23;
      }
      size_t v35 = v24;
LABEL_64:
      uint64_t v23 = v33;
      id v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      uint64_t v40 = (void *)*a1;
      *a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  uint64_t v36 = *a1;
  unint64_t v37 = *(void **)(*a1 + 8 * v5);
  if (v37)
  {
    void *v10 = *v37;
LABEL_80:
    *unint64_t v37 = v10;
    goto LABEL_81;
  }
  void *v10 = *v13;
  void *v13 = v10;
  *(void *)(v36 + 8 * v5) = v13;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    unint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_1A193C260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::SceneStateManager::SceneStateManager(md::SceneStateManager *this, md::World *a2)
{
  *(void *)this = &unk_1EF537DA0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_WORD *)this + 141) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 80) = 1065353216;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 41) = (char *)this + 336;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 1065353216;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_DWORD *)this + 106) = 1065353216;
  *((_DWORD *)this + 116) = 1065353216;
  *((void *)this + 59) = a2;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  md::SceneTileSet::SceneTileSet((md::SceneTileSet *)v2);
}

void sub_1A193C544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,gdc::LayerDataCollector *a24)
{
  if (a24)
  {
    gdc::LayerDataCollector::~LayerDataCollector(a24);
    MEMORY[0x1A6239270]();
  }
  uint8x8_t v31 = __p;
  if (__p)
  {
    do
    {
      uint64_t v32 = (void *)*v31;
      operator delete(v31);
      uint8x8_t v31 = v32;
    }
    while (v32);
  }
  if (a19) {
    operator delete(a19);
  }
  id v33 = a15;
  if (a15)
  {
    do
    {
      uint64_t v34 = (void *)*v33;
      operator delete(v33);
      id v33 = v34;
    }
    while (v34);
  }
  if (a13) {
    operator delete(a13);
  }
  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(*(void **)(v24 + 448));
  size_t v35 = *(void **)(v24 + 432);
  *(void *)(v24 + 432) = 0;
  if (v35) {
    operator delete(v35);
  }
  uint64_t v36 = *(void **)(v24 + 408);
  if (v36)
  {
    do
    {
      unint64_t v48 = (void *)*v36;
      char v49 = (void *)v36[5];
      if (v49)
      {
        do
        {
          long long v50 = (void *)*v49;
          operator delete(v49);
          char v49 = v50;
        }
        while (v50);
      }
      int v51 = (void *)v36[3];
      v36[3] = 0;
      if (v51) {
        operator delete(v51);
      }
      operator delete(v36);
      uint64_t v36 = v48;
    }
    while (v48);
  }
  unint64_t v37 = *v29;
  void *v29 = 0;
  if (v37) {
    operator delete(v37);
  }
  unint64_t v38 = *(void **)(v24 + 368);
  if (v38)
  {
    do
    {
      int v52 = (void *)*v38;
      int v53 = (void *)v38[5];
      if (v53)
      {
        do
        {
          uint64_t v54 = (void *)*v53;
          operator delete(v53);
          int v53 = v54;
        }
        while (v54);
      }
      BOOL v55 = (void *)v38[3];
      v38[3] = 0;
      if (v55) {
        operator delete(v55);
      }
      operator delete(v38);
      unint64_t v38 = v52;
    }
    while (v52);
  }
  uint64_t v39 = *a9;
  *a9 = 0;
  if (v39) {
    operator delete(v39);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v24 + 336));
  uint64_t v40 = *(void **)(v24 + 304);
  if (v40)
  {
    do
    {
      uint64_t v41 = (void *)*v40;
      operator delete(v40);
      uint64_t v40 = v41;
    }
    while (v41);
  }
  size_t v42 = *a10;
  *a10 = 0;
  if (v42)
  {
    operator delete(v42);
    unsigned __int32 v43 = *(void **)(v24 + 256);
    if (!v43)
    {
LABEL_23:
      BOOL v44 = *(void **)(v24 + 232);
      if (!v44) {
        goto LABEL_24;
      }
      goto LABEL_40;
    }
  }
  else
  {
    unsigned __int32 v43 = *(void **)(v24 + 256);
    if (!v43) {
      goto LABEL_23;
    }
  }
  *(void *)(v24 + 264) = v43;
  operator delete(v43);
  BOOL v44 = *(void **)(v24 + 232);
  if (!v44)
  {
LABEL_24:
    uint64_t v45 = *(void **)(v24 + 208);
    if (!v45) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
LABEL_40:
  *(void *)(v24 + 240) = v44;
  operator delete(v44);
  uint64_t v45 = *(void **)(v24 + 208);
  if (!v45)
  {
LABEL_25:
    BOOL v46 = *(void **)(v24 + 184);
    if (!v46) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_41:
  *(void *)(v24 + 216) = v45;
  operator delete(v45);
  BOOL v46 = *(void **)(v24 + 184);
  if (!v46)
  {
LABEL_26:
    uint64_t v47 = *(void **)(v24 + 160);
    if (!v47) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
LABEL_42:
  *(void *)(v24 + 192) = v46;
  operator delete(v46);
  uint64_t v47 = *(void **)(v24 + 160);
  if (!v47) {
    goto LABEL_47;
  }
LABEL_43:
  uint64_t v56 = *(void **)(v24 + 168);
  uint64_t v57 = v47;
  if (v56 != v47)
  {
    do
    {
      v56 -= 14;
      std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v56);
    }
    while (v56 != v47);
    uint64_t v57 = *v27;
  }
  *(void *)(v24 + 168) = v47;
  operator delete(v57);
LABEL_47:
  unint64_t v58 = (void *)*v26;
  if (*v26)
  {
    uint64_t v59 = *(void **)(v24 + 144);
    uint64_t v60 = (void *)*v26;
    if (v59 != v58)
    {
      do
      {
        v59 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v59);
      }
      while (v59 != v58);
      uint64_t v60 = (void *)*v26;
    }
    *(void *)(v24 + 144) = v58;
    operator delete(v60);
  }
  uint64_t v61 = (void *)*v25;
  if (*v25)
  {
    uint64_t v62 = *(void **)(v24 + 120);
    uint64_t v63 = (void *)*v25;
    if (v62 != v61)
    {
      do
      {
        v62 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v62);
      }
      while (v62 != v61);
      uint64_t v63 = (void *)*v25;
    }
    *(void *)(v24 + 120) = v61;
    operator delete(v63);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::~__hash_table(v24 + 72);
  unsigned int v64 = (char *)*v28;
  if (*v28)
  {
    uint64_t v65 = *(char **)(v24 + 56);
    int v66 = *v28;
    if (v65 != v64)
    {
      do
      {
        uint64_t v67 = v65 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)v65 - 2));
        uint64_t v65 = v67;
      }
      while (v67 != v64);
      int v66 = *v28;
    }
    *(void *)(v24 + 56) = v64;
    operator delete(v66);
  }
  unsigned int v68 = *(void **)(v24 + 24);
  if (v68)
  {
    do
    {
      char v70 = (void *)*v68;
      __int16 v71 = (void *)v68[16];
      if (v71 != (void *)v68[18]) {
        free(v71);
      }
      if (*((unsigned char *)v68 + 112)) {
        *((unsigned char *)v68 + 112) = 0;
      }
      unsigned int v72 = (void *)v68[4];
      if (v72 != (void *)v68[6]) {
        free(v72);
      }
      operator delete(v68);
      unsigned int v68 = v70;
    }
    while (v70);
  }
  uint64_t v69 = *a11;
  *a11 = 0;
  if (v69) {
    operator delete(v69);
  }
  _Unwind_Resume(a1);
}

void geo::linear_map<md::TileSelectionTileSetType,md::SceneTileSet,std::equal_to<md::TileSelectionTileSetType>,std::allocator<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>,std::vector<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>>::emplace<md::TileSelectionTileSetType&,md::SceneTileSet>(char **a1, __int16 a2, md::SceneTileSet *a3)
{
  md::SceneTileSet::SceneTileSet((md::SceneTileSet *)&v29, a3);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    int v6 = *a1;
  }
  else
  {
    int v6 = *a1;
    while (a2 != *(_WORD *)v6)
    {
      v6 += 112;
      if (v6 == v5) {
        goto LABEL_8;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    unint64_t v7 = (unint64_t)a1[2];
    if ((unint64_t)v5 < v7)
    {
      *(_WORD *)unint64_t v5 = a2;
      md::SceneTileSet::SceneTileSet((md::SceneTileSet *)(v5 + 8), (const md::SceneTileSet *)&v29);
      a1[1] = v5 + 112;
      a1[1] = v5 + 112;
      goto LABEL_27;
    }
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 4);
    if ((unint64_t)(v8 + 1) > 0x249249249249249) {
      abort();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - (void)v4) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v38 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x249249249249249) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(112 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[112 * v8];
    size_t v35 = v12;
    uint64_t v36 = v13;
    *(void *)&long long v37 = v13;
    *((void *)&v37 + 1) = &v12[112 * v11];
    *(_WORD *)uint64_t v13 = a2;
    md::SceneTileSet::SceneTileSet((md::SceneTileSet *)(v13 + 8), (const md::SceneTileSet *)&v29);
    float v14 = v36;
    float v15 = (char *)(v37 + 112);
    *(void *)&long long v37 = v37 + 112;
    unint64_t v17 = *a1;
    BOOL v16 = a1[1];
    if (v16 == *a1)
    {
      *a1 = v36;
      a1[1] = v15;
      a1[2] = (char *)*((void *)&v37 + 1);
      if (!v16) {
        goto LABEL_26;
      }
    }
    else
    {
      do
      {
        __int16 v18 = *((_WORD *)v16 - 56);
        v16 -= 112;
        *((_WORD *)v14 - 56) = v18;
        v14 -= 112;
        md::SceneTileSet::SceneTileSet((md::SceneTileSet *)(v14 + 8), (const md::SceneTileSet *)(v16 + 8));
      }
      while (v16 != v17);
      BOOL v16 = *a1;
      uint64_t v19 = a1[1];
      *a1 = v14;
      unint64_t v20 = (char *)v37;
      *(_OWORD *)(a1 + 1) = v37;
      float v15 = v20;
      while (v19 != v16)
      {
        v19 -= 112;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v19);
      }
      if (!v16) {
        goto LABEL_26;
      }
    }
    operator delete(v16);
LABEL_26:
    a1[1] = v15;
  }
LABEL_27:
  unint64_t v21 = v34;
  uint64_t v34 = 0;
  if (v21)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v21);
    MEMORY[0x1A6239270]();
  }
  uint64_t v22 = __p;
  if (__p)
  {
    do
    {
      uint64_t v23 = (void *)*v22;
      operator delete(v22);
      uint64_t v22 = v23;
    }
    while (v23);
  }
  uint64_t v24 = v32;
  uint64_t v32 = 0;
  if (v24) {
    operator delete(v24);
  }
  size_t v25 = v31;
  if (v31)
  {
    do
    {
      size_t v26 = (void *)*v25;
      operator delete(v25);
      size_t v25 = v26;
    }
    while (v26);
  }
  long long v27 = v30;
  unint64_t v30 = 0;
  if (v27) {
    operator delete(v27);
  }
}

void sub_1A193CBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>::~__split_buffer(v2 - 88);
  std::pair<md::TileSelectionTileSetType,md::SceneTileSet>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

md::SceneTileSet *md::SceneTileSet::SceneTileSet(md::SceneTileSet *this, const md::SceneTileSet *a2)
{
  *(_WORD *)this = *(_WORD *)a2;
  *((unsigned char *)this + 2) = *((unsigned char *)a2 + 2);
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)this + 8, (uint64_t)a2 + 8);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)this + 56, (uint64_t)a2 + 56);
  *((void *)this + 12) = 0;
  if (*((void *)a2 + 12)) {
    operator new();
  }
  return this;
}

void sub_1A193D350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  float v14 = (gdc::LayerDataCollector *)a11[12];
  a11[12] = 0;
  if (v14)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v14);
    MEMORY[0x1A6239270]();
  }
  float v15 = (void *)a11[9];
  if (v15)
  {
    do
    {
      BOOL v16 = (void *)*v15;
      operator delete(v15);
      float v15 = v16;
    }
    while (v16);
  }
  unint64_t v17 = *v12;
  *uint64_t v12 = 0;
  if (v17) {
    operator delete(v17);
  }
  __int16 v18 = (void *)a11[3];
  if (v18)
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      operator delete(v18);
      __int16 v18 = v19;
    }
    while (v19);
  }
  unint64_t v20 = *v11;
  *unint64_t v11 = 0;
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1A193D504(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(void *a1)
{
  uint64_t v2 = (gdc::LayerDataCollector *)a1[13];
  a1[13] = 0;
  if (v2)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v2);
    MEMORY[0x1A6239270]();
  }
  unint64_t v3 = (void *)a1[10];
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      unint64_t v3 = v4;
    }
    while (v4);
  }
  int8x8_t v5 = (void *)a1[8];
  a1[8] = 0;
  if (v5) {
    operator delete(v5);
  }
  BOOL v6 = (void *)a1[4];
  if (v6)
  {
    do
    {
      unint64_t v7 = (void *)*v6;
      operator delete(v6);
      BOOL v6 = v7;
    }
    while (v7);
  }
  uint8x8_t v8 = (void *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    operator delete(v8);
  }
}

void gdc::LayerDataCollector::~LayerDataCollector(gdc::LayerDataCollector *this)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 8);
  if (v2)
  {
    do
    {
      if (v2[112]) {
        v2[112] = 0;
      }
      uint8x8_t v8 = *(unsigned char **)v2;
      uint64_t v9 = (void *)*((void *)v2 + 4);
      if (v9 != *((void **)v2 + 6)) {
        free(v9);
      }
      operator delete(v2);
      uint64_t v2 = v8;
    }
    while (v8);
  }
  unint64_t v3 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 24, v4);
    operator delete(*((void **)this + 3));
  }
  uint64_t v5 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v6 = *((void *)this + 1);
    unint64_t v7 = *(void **)this;
    if (v6 != v5)
    {
      do
      {
        if (*(unsigned char *)(v6 - 48)) {
          *(unsigned char *)(v6 - 48) = 0;
        }
        uint64_t v10 = *(void **)(v6 - 128);
        if (v10 != *(void **)(v6 - 112)) {
          free(v10);
        }
        v6 -= 144;
      }
      while (v6 != v5);
      unint64_t v7 = *(void **)this;
    }
    *((void *)this + 1) = v5;
    operator delete(v7);
  }
}

void md::SceneTileSet::SceneTileSet(md::SceneTileSet *this)
{
  *(_WORD *)this = 0;
  *((unsigned char *)this + 2) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  operator new();
}

void sub_1A193D750(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void **)(v1 + 72);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = *v3;
  void *v3 = 0;
  if (v7) {
    operator delete(v7);
  }
  uint8x8_t v8 = *(void **)(v1 + 24);
  if (v8)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      uint8x8_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = *v2;
  unsigned char *v2 = 0;
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_94;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v4 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint8x8_t v8 = *(void **)(a2 + 8 * v4);
  if (!v8) {
    goto LABEL_25;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= a3) {
      v10 %= a3;
    }
    if (v10 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v6 = *(void *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v13 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v13 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v13 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  float v14 = *(void **)(a2 + 8 * v13);
  if (!v14) {
    goto LABEL_48;
  }
  float v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0xE42D19AFCA302E68)
      {
        if (v15[2] == 0xE42D19AFCA302E68) {
          goto LABEL_46;
        }
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      float v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 0xE42D19AFCA302E68)
    {
      if (v16 >= a3) {
        v16 %= a3;
      }
      if (v16 != v13) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v15[2] != 0xE42D19AFCA302E68)
    {
LABEL_35:
      float v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v7 = *(void *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v19 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v19 = 0x99BED48DEFBBD82BLL % a3;
    }
  }
  else
  {
    unint64_t v19 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v20 = *(void **)(a2 + 8 * v19);
  if (!v20) {
    goto LABEL_71;
  }
  unint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v21[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_69;
        }
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= a3) {
        v22 %= a3;
      }
      if (v22 != v19) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v21[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_58:
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v5 = *(void *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v25 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v25 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v25 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  size_t v26 = *(void **)(a2 + 8 * v25);
  if (!v26) {
    goto LABEL_94;
  }
  long long v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0x8BD499FBD96FBB9ELL)
      {
        if (v27[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_92;
        }
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      long long v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v28 = v27[1];
    if (v28 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v28 >= a3) {
      v28 %= a3;
    }
    if (v28 != v25) {
      goto LABEL_94;
    }
LABEL_81:
    long long v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_94;
    }
  }
  if (v27[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_94:
    uint64_t v31 = 0;
    goto LABEL_95;
  }
  uint64_t v31 = *(void *)(v30 + 32);
LABEL_95:
  uint64_t *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

uint64_t md::MapEngineFrameService::dispatch(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 88);
  if (a2 < (unint64_t)((*(void *)(result + 96) - v2) >> 3))
  {
    uint64_t v3 = *(void *)(v2 + 8 * a2);
    if (v3) {
      BOOL v4 = HIDWORD(a2) == HIDWORD(v3);
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      uint64_t v5 = *(void *)(result + 112) + 8 * v3;
      if (v5 != *(void *)(result + 120))
      {
        ++*(void *)(*(void *)v5 + 120);
        gdc::Registry::create(*(gdc::Registry **)(result + 176));
      }
    }
  }
  return result;
}

void gdc::tf::Executor::invokeNode(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v69[20] = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (void *)a1[3]; i; uint64_t i = (void *)*i)
  {
    *(void *)uint64_t buf = a2;
    uint64_t v5 = i[6];
    if (!v5) {
      goto LABEL_87;
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 48))(v5, buf);
  }
  switch(*(_DWORD *)(a2 + 64))
  {
    case 0:
      break;
    case 1:
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6) {
        goto LABEL_87;
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      goto LABEL_13;
    case 2:
      uint64_t v8 = *(void *)(a2 + 24);
      if (!v8) {
        goto LABEL_87;
      }
      (*(void (**)(uint64_t, void))(*(void *)v8 + 48))(v8, v3[18]);
LABEL_13:
      unint64_t v10 = (char *)v3[16];
      unint64_t v9 = v3[17];
      if ((unint64_t)v10 < v9)
      {
        *(void *)unint64_t v10 = a2;
        uint8_t v3[16] = v10 + 8;
        break;
      }
      uint64_t v18 = (char *)v3[15];
      uint64_t v19 = (v10 - v18) >> 3;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61) {
        goto LABEL_89;
      }
      uint64_t v21 = v9 - (void)v18;
      if (v21 >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v23 = operator new(8 * v22);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v32 = &v23[8 * v19];
      id v33 = &v23[8 * v22];
      void *v32 = a2;
      uint64_t v34 = v32 + 1;
      if (v10 == v18)
      {
        uint64_t v18 = v10;
      }
      else
      {
        unint64_t v35 = v10 - v18 - 8;
        if (v35 < 0x58) {
          goto LABEL_93;
        }
        if ((unint64_t)(v18 - v23) < 0x20) {
          goto LABEL_93;
        }
        uint64_t v36 = (v35 >> 3) + 1;
        long long v37 = &v23[8 * v19 - 16];
        unint64_t v38 = v10 - 16;
        uint64_t v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *long long v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 4;
        }
        while (v39);
        v32 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
        v10 -= 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_93:
          do
          {
            uint64_t v41 = *((void *)v10 - 1);
            v10 -= 8;
            *--uint64_t v32 = v41;
          }
          while (v10 != v18);
          uint64_t v18 = (char *)v3[15];
        }
      }
      v3[15] = v32;
      uint8_t v3[16] = v34;
      v3[17] = v33;
      if (v18) {
        operator delete(v18);
      }
      uint8_t v3[16] = v34;
      break;
    case 3:
      uint64_t v11 = *(uint64_t ***)a2;
      goto LABEL_26;
    case 4:
      memset(buf, 0, sizeof(buf));
      v62[0] = 1065353216;
      long long __dst = buf;
      size_t v59 = a2 + 32;
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        goto LABEL_87;
      }
      (*(void (**)(uint64_t, uint8_t **))(*(void *)v12 + 48))(v12, &__dst);
      gdc::tf::Executor::consumeGraph((uint64_t)v3, (uint64_t **)(a2 + 32));
      unint64_t v13 = *(void **)&buf[16];
      if (*(void *)&buf[16])
      {
        do
        {
          float v15 = (void *)*v13;
          uint64_t v16 = v13[5];
          v13[5] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          operator delete(v13);
          unint64_t v13 = v15;
        }
        while (v15);
      }
      float v14 = *(void **)buf;
      *(void *)uint64_t buf = 0;
      if (v14) {
        operator delete(v14);
      }
      break;
    case 5:
      if (!v3[18])
      {
        if (GEOGetGeoDisplayCoreTaskflowLog::onceToken != -1) {
          goto LABEL_88;
        }
        goto LABEL_37;
      }
      *(void *)uint64_t buf = 0;
      uint64_t v17 = *(void *)(a2 + 24);
      if (!v17) {
        goto LABEL_87;
      }
      (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
      uint64_t v11 = *(uint64_t ***)buf;
      if (*(void *)buf) {
LABEL_26:
      }
        gdc::tf::Executor::consumeGraph((uint64_t)v3, v11);
      break;
    default:
      if (GEOGetGeoDisplayCoreTaskflowLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreTaskflowLog::onceToken, &__block_literal_global_21_55074);
      }
      uint64_t v7 = GEOGetGeoDisplayCoreTaskflowLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreTaskflowLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoDisplayCore/GeoDisplayCore/Executor.cpp";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 81;
        _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_ERROR, "Unhandled node type: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      break;
  }
  while (1)
  {
    uint64_t v3 = (void *)v3[9];
    if (!v3) {
      break;
    }
    while (1)
    {
      *(void *)uint64_t buf = a2;
      uint64_t v42 = v3[6];
      if (!v42) {
        break;
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v42 + 48))(v42, buf);
      uint64_t v3 = (void *)*v3;
      if (!v3) {
        return;
      }
    }
LABEL_87:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_88:
    dispatch_once(&GEOGetGeoDisplayCoreTaskflowLog::onceToken, &__block_literal_global_21_55074);
LABEL_37:
    uint64_t v24 = GEOGetGeoDisplayCoreTaskflowLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreTaskflowLog::log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v57 = MEMORY[0x1E4FBA488] + 24;
      uint64_t v56 = MEMORY[0x1E4FBA488] + 104;
      v69[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v25 = MEMORY[0x1E4FBA488] + 64;
      *(void *)&uint8_t buf[16] = MEMORY[0x1E4FBA488] + 64;
      size_t v26 = (void *)MEMORY[0x1E4FBA408];
      uint64_t v27 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      *(void *)uint64_t buf = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = v27;
      *(void *)&uint8_t buf[8] = 0;
      unint64_t v28 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
      std::ios_base::init(v28, &buf[24]);
      v28[1].__vftable = 0;
      v28[1].__fmtflags_ = -1;
      uint64_t v29 = v26[5];
      *(void *)&uint8_t buf[16] = v26[4];
      *(void *)&buf[*(void *)(*(void *)&buf[16] - 24) + 16] = v29;
      *(void *)uint64_t buf = v26[1];
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = v26[6];
      v69[0] = v56;
      *(void *)uint64_t buf = v57;
      *(void *)&uint8_t buf[16] = v25;
      std::streambuf::basic_streambuf();
      uint64_t v30 = MEMORY[0x1E4FBA470] + 16;
      *(void *)&uint8_t buf[24] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)__p = 0u;
      long long v67 = 0u;
      int v68 = 24;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"{ id:", 5);
      std::ostream::operator<<();
      if (*(char *)(a2 + 95) < 0) {
        uint64_t v31 = *(void *)(a2 + 80);
      }
      else {
        uint64_t v31 = *(unsigned __int8 *)(a2 + 95);
      }
      if (v31)
      {
        unsigned __int32 v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)", name:", 7);
        int v44 = *(char *)(a2 + 95);
        if (v44 >= 0) {
          uint64_t v45 = a2 + 72;
        }
        else {
          uint64_t v45 = *(void *)(a2 + 72);
        }
        if (v44 >= 0) {
          uint64_t v46 = *(unsigned __int8 *)(a2 + 95);
        }
        else {
          uint64_t v46 = *(void *)(a2 + 80);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, v45, v46);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" }", 2);
      if ((v68 & 0x10) != 0)
      {
        unint64_t v49 = *((void *)&v67 + 1);
        if (*((void *)&v67 + 1) < v65)
        {
          *((void *)&v67 + 1) = v65;
          unint64_t v49 = v65;
        }
        long long v50 = (const void **)&v64;
      }
      else
      {
        if ((v68 & 8) == 0)
        {
          size_t v47 = 0;
          HIBYTE(v60) = 0;
          p_dst = &__dst;
          goto LABEL_81;
        }
        long long v50 = (const void **)v63;
        unint64_t v49 = v63[2];
      }
      int v51 = *v50;
      size_t v47 = v49 - (void)*v50;
      if (v47 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_89:
      }
        abort();
      if (v47 >= 0x17)
      {
        uint64_t v52 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17) {
          uint64_t v52 = v47 | 7;
        }
        uint64_t v53 = v52 + 1;
        p_dst = (uint8_t **)operator new(v52 + 1);
        size_t v59 = v47;
        int64_t v60 = v53 | 0x8000000000000000;
        long long __dst = (uint8_t *)p_dst;
LABEL_80:
        memmove(p_dst, v51, v47);
        goto LABEL_81;
      }
      HIBYTE(v60) = v49 - *(unsigned char *)v50;
      p_dst = &__dst;
      if (v47) {
        goto LABEL_80;
      }
LABEL_81:
      *((unsigned char *)p_dst + v47) = 0;
      *(void *)uint64_t buf = *v26;
      uint64_t v54 = v26[9];
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = v26[8];
      *(void *)&uint8_t buf[16] = v54;
      *(void *)&uint8_t buf[24] = v30;
      if (SBYTE7(v67) < 0) {
        operator delete(__p[0]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A62391A0](v69);
      BOOL v55 = &__dst;
      if (v60 < 0) {
        BOOL v55 = (uint8_t **)__dst;
      }
      *(_DWORD *)uint64_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v55;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "false";
      *(_WORD *)&buf[22] = 2080;
      *(void *)&uint8_t buf[24] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoDisplayCore/GeoDisplayCore/Executor.cpp";
      LOWORD(v62[0]) = 1024;
      *(_DWORD *)((char *)v62 + 2) = 76;
      _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_ERROR, "No context provided to execute node %s: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      if (SHIBYTE(v60) < 0) {
        operator delete(__dst);
      }
    }
  }
}

void *std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::operator()(void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)a2[1];
  if (!*(void *)&v2) {
    return result;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xD60F4F992ECB1F94;
    if (*(void *)&v2 <= 0xD60F4F992ECB1F94) {
      unint64_t v4 = 0xD60F4F992ECB1F94 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & 0xD60F4F992ECB1F94;
  }
  uint64_t v5 = *(void **)(*a2 + 8 * v4);
  if (!v5) {
    return result;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    return result;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == 0xD60F4F992ECB1F94)
      {
        if (v6[2] == 0xD60F4F992ECB1F94) {
          goto LABEL_22;
        }
      }
      else if ((v9 & v7) != v4)
      {
        return result;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        return result;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == 0xD60F4F992ECB1F94) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      return result;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      return result;
    }
  }
  if (v6[2] != 0xD60F4F992ECB1F94) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v10 = v6[5];
  if (*(void *)(v10 + 8) != 0xD60F4F992ECB1F94) {
    return result;
  }
  uint64_t v11 = *(long long **)(v10 + 32);
  if (!v11) {
    return result;
  }
  unint64_t v12 = result[1];
  uint64_t result = (void *)gdc::Registry::storage<ecs2::FunctionHandle>(*(int8x8_t **)(*((void *)v11 + 2) + 200));
  unint64_t v13 = v12 >> 39;
  uint64_t v14 = result[4];
  if (v12 >> 39 >= (result[5] - v14) >> 3) {
    return result;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v13);
  if (!v15) {
    return result;
  }
  uint64_t v16 = HIDWORD(v12) & 0x7F;
  unint64_t v17 = *(unsigned __int16 *)(v15 + 2 * v16);
  uint64_t v19 = result[7];
  uint64_t v18 = result[8];
  if (v17 >= (v18 - v19) >> 3) {
    return result;
  }
  unint64_t v20 = HIDWORD(v12);
  uint64_t v21 = v19 + 8 * v17;
  if (v21 == v18 || *(_DWORD *)(v21 + 4) != HIDWORD(v12)) {
    return result;
  }
  uint64_t v23 = result[10];
  uint64_t v24 = v23 + 32 * v17;
  if (v24 == result[11] || v23 == 0) {
    return result;
  }
  uint64_t result = (void *)gdc::Registry::storage<ecs2::TaskDisabled>(*(int8x8_t **)(*((void *)v11 + 2) + 200));
  uint64_t v26 = result[4];
  if (v13 < (result[5] - v26) >> 3)
  {
    uint64_t v27 = *(void *)(v26 + 8 * v13);
    if (v27)
    {
      unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * v16);
      uint64_t v30 = result[7];
      uint64_t v29 = result[8];
      if (v28 < (v29 - v30) >> 3)
      {
        uint64_t v31 = v30 + 8 * v28;
        if (v31 != v29 && *(_DWORD *)(v31 + 4) == v20)
        {
          uint64_t v33 = result[10];
          if (v33 + v28 != result[11] && v33 != 0) {
            return result;
          }
        }
      }
    }
  }
  unint64_t v35 = (void *)gdc::Registry::storage<ecs2::DebugTasks>(*(int8x8_t **)(*((void *)v11 + 2) + 200));
  uint64_t v36 = v35[4];
  if (v13 >= (v35[5] - v36) >> 3) {
    goto LABEL_64;
  }
  uint64_t v37 = *(void *)(v36 + 8 * v13);
  if (!v37) {
    goto LABEL_64;
  }
  unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * v16);
  uint64_t v40 = v35[7];
  uint64_t v39 = v35[8];
  if (v38 >= (v39 - v40) >> 3) {
    goto LABEL_64;
  }
  uint64_t v41 = v40 + 8 * v38;
  BOOL v42 = v41 != v39 && *(_DWORD *)(v41 + 4) == v20;
  if (!v42
    || ((uint64_t v43 = v35[10], v44 = (uint64_t *)(v43 + 48 * v38), v44 != (uint64_t *)v35[11])
      ? (BOOL v45 = v43 == 0)
      : (BOOL v45 = 1),
        v45))
  {
LABEL_64:
    uint64_t v46 = *(void *)(v24 + 24);
    if (v46)
    {
      size_t v47 = *(uint64_t (**)(void))(*(void *)v46 + 48);
      return (void *)v47();
    }
    goto LABEL_76;
  }
  uint64_t v48 = *v44;
  uint64_t v49 = v44[1];
  if (*v44 != v49)
  {
    do
    {
      long long v57 = *v11;
      uint64_t v50 = *(void *)(v48 + 24);
      if (!v50) {
        goto LABEL_76;
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v50 + 48))(v50, &v57);
      v48 += 32;
    }
    while (v48 != v49);
  }
  uint64_t v51 = *(void *)(v24 + 24);
  if (!v51)
  {
LABEL_76:
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)gdc::Registry::storage<ecs2::FunctionHandle>(v56);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v51 + 48))(v51, v11);
  uint64_t v52 = v43 + 48 * v38;
  uint64_t v53 = *(void *)(v52 + 24);
  uint64_t v54 = *(void *)(v52 + 32);
  while (v53 != v54)
  {
    long long v57 = *v11;
    uint64_t v55 = *(void *)(v53 + 24);
    if (!v55) {
      goto LABEL_76;
    }
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v55 + 48))(v55, &v57);
    v53 += 32;
  }
  return result;
}

uint64_t gdc::Registry::storage<ecs2::FunctionHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x754C5349192ADF5ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x754C5349192ADF5ELL;
    if (*(void *)&v1 <= 0x754C5349192ADF5EuLL) {
      uint64_t v3 = 0x754C5349192ADF5EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x754C5349192ADF5ELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x754C5349192ADF5ELL)
      {
        if (v5[2] == 0x754C5349192ADF5ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x754C5349192ADF5ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x754C5349192ADF5ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

uint64_t gdc::Registry::storage<ecs2::TaskDisabled>(int8x8_t *a1)
{
  uint64_t v10 = 0x7A28FF81262113F5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7A28FF81262113F5;
    if (*(void *)&v1 <= 0x7A28FF81262113F5uLL) {
      uint64_t v3 = 0x7A28FF81262113F5uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7A28FF81262113F5;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7A28FF81262113F5)
      {
        if (v5[2] == 0x7A28FF81262113F5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7A28FF81262113F5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7A28FF81262113F5) {
    goto LABEL_11;
  }
  return v5[3];
}

uint64_t gdc::Registry::storage<ecs2::DebugTasks>(int8x8_t *a1)
{
  uint64_t v10 = 0x6BD0065F8F6CBF27;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6BD0065F8F6CBF27;
    if (*(void *)&v1 <= 0x6BD0065F8F6CBF27uLL) {
      uint64_t v3 = 0x6BD0065F8F6CBF27uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6BD0065F8F6CBF27;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6BD0065F8F6CBF27)
      {
        if (v5[2] == 0x6BD0065F8F6CBF27) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6BD0065F8F6CBF27) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6BD0065F8F6CBF27) {
    goto LABEL_11;
  }
  return v5[3];
}

void md::MapEngineCallbackGraphService::execute(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 248);
  if (a2 >= (unint64_t)((*(void *)(a1 + 256) - v5) >> 3)
    || ((uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (uint64_t v8 = (uint64_t *)(*(void *)(a1 + 272) + 16 * v6), v8 == *(uint64_t **)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t v9 = (std::__shared_weak_count *)v8[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = (uint64_t *)v10;
    uint64_t v30 = v9;
    std::__shared_mutex_base::unlock_shared(v4);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    long long v26 = 0u;
    long long v27 = 0u;
    int v28 = 1065353216;
    long long v20 = 0u;
    memset(v17, 0, sizeof(v17));
    long long v18 = 0u;
    long long v19 = 0u;
    DWORD2(v18) = 1065353216;
    uint64_t v21 = 0;
    uint64_t v22 = 1065353216;
    *(_OWORD *)__p = 0u;
    memset(v24, 0, sizeof(v24));
    uint64_t v11 = *v29;
    uint64_t v25 = &v26;
    gdc::tf::Executor::consumeGraph((uint64_t)v17, (uint64_t **)(v11 + 56));
    if (__p[0]) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)((char *)v24 + 8);
    v24[0] = *((unint64_t *)&v24[1] + 1);
    v24[1] = 0uLL;
    uint64_t v25 = 0;
    gdc::tf::Executor::~Executor((gdc::tf::Executor *)v17);
    unint64_t v12 = (void *)v27;
    if ((void)v27)
    {
      do
      {
        uint64_t v15 = (void *)*v12;
        uint64_t v16 = v12[5];
        void v12[5] = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        operator delete(v12);
        unint64_t v12 = v15;
      }
      while (v15);
    }
    unint64_t v13 = (void *)v26;
    *(void *)&long long v26 = 0;
    if (v13) {
      operator delete(v13);
    }
    uint64_t v14 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1A193FB48(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 48);
  _Unwind_Resume(a1);
}

void gdc::tf::Executor::consumeGraph(uint64_t a1, uint64_t **a2)
{
  *(_OWORD *)uint64_t v39 = 0u;
  *(_OWORD *)uint64_t v40 = 0u;
  int v41 = 1065353216;
  uint8x8_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    goto LABEL_59;
  }
  do
  {
    if (*(void *)(*v2 + 104) != *(void *)(*v2 + 112)) {
      goto LABEL_4;
    }
    unint64_t v6 = *(void *)(*v2 + 96);
    if ((std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v39, v6, v6) & 1) == 0)goto LABEL_4; {
    uint64_t v7 = *v2;
    }
    *(_OWORD *)uint64_t v32 = 0u;
    *(_OWORD *)uint64_t v33 = 0u;
    int v34 = 1065353216;
    unint64_t v35 = a2;
    long long __p = 0u;
    long long v37 = 0u;
    int64x2_t v38 = 0u;
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    if (*a2 == v8)
    {
      uint64_t v11 = *a2;
      if (*(void *)(*v9 + 128) == *(void *)(*v9 + 136)) {
        goto LABEL_40;
      }
      goto LABEL_17;
    }
    uint64_t v10 = *a2;
    while (*(void *)(*v10 + 96) != v6)
    {
      if (++v10 == v8)
      {
        uint64_t v10 = a2[1];
        break;
      }
    }
    uint64_t v11 = *a2;
    if (*(void *)(*v10 + 128) != *(void *)(*v10 + 136))
    {
      while (*(void *)(*v11 + 96) != v6)
      {
        if (++v11 == v8)
        {
          uint64_t v11 = a2[1];
          break;
        }
      }
LABEL_17:
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(*v11 + 128);
      if (v9 != v8) {
        goto LABEL_20;
      }
LABEL_24:
      while (v13 != *(void *)(*v8 + 136))
      {
        if (!v12)
        {
          std::deque<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem,std::allocator<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem>>::__add_front_capacity((uint64_t)&__p);
          unint64_t v12 = v38.i64[0];
        }
        uint64_t v14 = (void *)(*((void *)&__p + 1) + 8 * (v12 >> 8));
        uint64_t v15 = *v14 + 16 * v12;
        if ((void)v37 == *((void *)&__p + 1)) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = v15;
        }
        if (v16 == *v14) {
          uint64_t v16 = *(v14 - 1) + 4096;
        }
        *(void *)(v16 - 16) = v6;
        *(void *)(v16 - 8) = v13;
        int64x2_t v38 = vaddq_s64(v38, (int64x2_t)xmmword_1A28FE980);
        v13 += 8;
        uint64_t v9 = *v35;
        uint64_t v8 = v35[1];
        unint64_t v12 = v38.i64[0];
        if (*v35 != v8)
        {
LABEL_20:
          while (*(void *)(*v9 + 96) != v6)
          {
            if (++v9 == v8) {
              goto LABEL_24;
            }
          }
          uint64_t v8 = v9;
        }
      }
      unint64_t v42 = v6;
      *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)v32, v6, &v42)+ 24) = 1;
      while (1)
      {
        geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::advance((uint64_t)v32);
        if (!v38.i64[1]) {
          break;
        }
        unint64_t v17 = *(void *)(**(void **)(*(void *)(*((void *)&__p + 1)
                                                  + (((unint64_t)v38.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v38.u8[0]
                                      + 8)
                        + 96);
        long long v19 = *v35;
        long long v18 = v35[1];
        if (*v35 != v18)
        {
          while (*(void *)(*v19 + 96) != v17)
          {
            if (++v19 == v18)
            {
              long long v19 = v35[1];
              break;
            }
          }
        }
        if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v39, v17, *(void *)(**(void **)(*(void *)(*((void *)&__p + 1)+ (((unint64_t)v38.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * v38.u8[0]+ 8)+ 96)))gdc::tf::Executor::invokeNode(a1, *v19); {
      }
        }
    }
LABEL_40:
    long long v20 = (void **)*((void *)&__p + 1);
    uint64_t v21 = (void **)v37;
    v38.i64[1] = 0;
    unint64_t v22 = v37 - *((void *)&__p + 1);
    if ((void)v37 - *((void *)&__p + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v20);
        uint64_t v21 = (void **)v37;
        long long v20 = (void **)(*((void *)&__p + 1) + 8);
        *((void *)&__p + 1) = v20;
        unint64_t v22 = v37 - (void)v20;
      }
      while ((void)v37 - (void)v20 > 0x10uLL);
    }
    unint64_t v23 = v22 >> 3;
    if (v23 == 1)
    {
      uint64_t v24 = 128;
    }
    else
    {
      if (v23 != 2) {
        goto LABEL_47;
      }
      uint64_t v24 = 256;
    }
    v38.i64[0] = v24;
LABEL_47:
    if (v20 != v21)
    {
      do
      {
        uint64_t v25 = *v20++;
        operator delete(v25);
      }
      while (v20 != v21);
      if ((void)v37 != *((void *)&__p + 1)) {
        *(void *)&long long v37 = v37 + ((*((void *)&__p + 1) - v37 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if ((void)__p) {
      operator delete((void *)__p);
    }
    long long v26 = v33[0];
    if (v33[0])
    {
      do
      {
        long long v27 = (void *)*v26;
        operator delete(v26);
        long long v26 = v27;
      }
      while (v27);
    }
    int v28 = v32[0];
    v32[0] = 0;
    if (v28) {
      operator delete(v28);
    }
    gdc::tf::Executor::invokeNode(a1, v7);
LABEL_4:
    ++v2;
  }
  while (v2 != v3);
  uint64_t v29 = v40[0];
  if (v40[0])
  {
    do
    {
      uint64_t v30 = (void *)*v29;
      operator delete(v29);
      uint64_t v29 = v30;
    }
    while (v30);
  }
LABEL_59:
  uint64_t v31 = v39[0];
  v39[0] = 0;
  if (v31) {
    operator delete(v31);
  }
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return 0;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return 0;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  v14[1] = a2;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    void *v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  uint64_t v26 = *(void *)(a1 + 16);
  void *v14 = v26;
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (v26)
  {
    unint64_t v27 = *(void *)(v26 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return 1;
}

void geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::advance(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return;
  }
  uint64_t v3 = a1 + 48;
  do
  {
    unint64_t v4 = *(void ***)(a1 + 56);
    unint64_t v5 = *(void *)(a1 + 80);
    unint64_t v6 = *(void *)(*(*(void ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1] + 96);
    int8x8_t v7 = *(int8x8_t *)(a1 + 8);
    if (!*(void *)&v7)
    {
LABEL_51:
      uint64_t v42 = *(void *)(*(*(void ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                      + 96);
      *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)a1, v6, &v42)+ 24) = 1;
      unint64_t v21 = *(uint64_t **)(a1 + 40);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = v22;
      if (v22 != v23)
      {
        uint64_t v24 = v22;
        do
        {
          if (*(void *)(*(void *)v24 + 96) == v6) {
            goto LABEL_56;
          }
          v24 += 8;
        }
        while (v24 != v23);
        uint64_t v24 = v23;
      }
LABEL_56:
      uint64_t v25 = *(void *)(*(void *)v24 + 128);
      int64x2_t v26 = (int64x2_t)xmmword_1A28FE980;
LABEL_59:
      uint64_t v28 = v23;
      if (v22 != v23)
      {
        uint64_t v28 = v22;
        while (*(void *)(*(void *)v28 + 96) != v6)
        {
          v28 += 8;
          if (v28 == v23)
          {
            uint64_t v28 = v23;
            break;
          }
        }
      }
      if (v25 == *(void *)(*(void *)v28 + 136)) {
        goto LABEL_48;
      }
      int8x8_t v29 = *(int8x8_t *)(a1 + 8);
      if (!*(void *)&v29) {
        goto LABEL_87;
      }
      unint64_t v30 = *(void *)(*(void *)v25 + 96);
      uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v32 = *(void *)(*(void *)v25 + 96);
        if (*(void *)&v29 <= v30) {
          unint64_t v32 = v30 % *(void *)&v29;
        }
      }
      else
      {
        unint64_t v32 = (*(void *)&v29 - 1) & v30;
      }
      uint64_t v33 = *(uint64_t ***)(*(void *)a1 + 8 * v32);
      if (!v33 || (int v34 = *v33) == 0)
      {
LABEL_87:
        unint64_t v38 = *(void *)(a1 + 80);
        if (!v38)
        {
          std::deque<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem,std::allocator<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem>>::__add_front_capacity(v3);
          int64x2_t v26 = (int64x2_t)xmmword_1A28FE980;
          unint64_t v38 = *(void *)(a1 + 80);
        }
        uint64_t v39 = *(void *)(a1 + 56);
        uint64_t v40 = (void *)(v39 + 8 * (v38 >> 8));
        uint64_t v41 = *v40 + 16 * v38;
        if (*(void *)(a1 + 64) == v39) {
          uint64_t v41 = 0;
        }
        if (v41 == *v40) {
          uint64_t v41 = *(v40 - 1) + 4096;
        }
        *(void *)(v41 - 16) = v6;
        *(void *)(v41 - 8) = v25;
        *(int64x2_t *)(a1 + 80) = vaddq_s64(*(int64x2_t *)(a1 + 80), v26);
        unint64_t v27 = *(uint64_t **)(a1 + 40);
        uint64_t v22 = *v27;
        uint64_t v23 = v27[1];
        goto LABEL_58;
      }
      if (v31.u32[0] < 2uLL)
      {
        uint64_t v35 = *(void *)&v29 - 1;
        while (1)
        {
          uint64_t v37 = v34[1];
          if (v37 == v30)
          {
            if (v34[2] == v30) {
              goto LABEL_86;
            }
          }
          else if ((v37 & v35) != v32)
          {
            goto LABEL_87;
          }
          int v34 = (uint64_t *)*v34;
          if (!v34) {
            goto LABEL_87;
          }
        }
      }
      while (1)
      {
        unint64_t v36 = v34[1];
        if (v36 == v30)
        {
          if (v34[2] == v30)
          {
LABEL_86:
            if (!*((unsigned char *)v34 + 24)) {
              goto LABEL_87;
            }
LABEL_58:
            v25 += 8;
            goto LABEL_59;
          }
        }
        else
        {
          if (v36 >= *(void *)&v29) {
            v36 %= *(void *)&v29;
          }
          if (v36 != v32) {
            goto LABEL_87;
          }
        }
        int v34 = (uint64_t *)*v34;
        if (!v34) {
          goto LABEL_87;
        }
      }
    }
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *(void *)(*(*(void ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                     + 96);
      if (*(void *)&v7 <= v6) {
        unint64_t v9 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v9 = (*(void *)&v7 - 1) & v6;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v9);
    if (!v10) {
      goto LABEL_25;
    }
    unint64_t v11 = *v10;
    if (!v11) {
      goto LABEL_25;
    }
    if (v8.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v13 = v11[1];
        if (v13 == v6)
        {
          if (v11[2] == v6) {
            goto LABEL_24;
          }
        }
        else if ((v13 & (*(void *)&v7 - 1)) != v9)
        {
          goto LABEL_25;
        }
        unint64_t v11 = (uint64_t *)*v11;
        if (!v11) {
          goto LABEL_25;
        }
      }
    }
    while (1)
    {
      unint64_t v12 = v11[1];
      if (v12 == v6) {
        break;
      }
      if (v12 >= *(void *)&v7) {
        v12 %= *(void *)&v7;
      }
      if (v12 != v9) {
        goto LABEL_25;
      }
LABEL_13:
      unint64_t v11 = (uint64_t *)*v11;
      if (!v11) {
        goto LABEL_25;
      }
    }
    if (v11[2] != v6) {
      goto LABEL_13;
    }
LABEL_24:
    if (*((unsigned char *)v11 + 24) == 1)
    {
      uint64_t v42 = *(void *)(*(*(void ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                      + 96);
      *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)a1, v6, &v42)+ 24) = 2;
      return;
    }
LABEL_25:
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v14 = *(void *)(*(*(void ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                      + 96);
      if (*(void *)&v7 <= v6) {
        unint64_t v14 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v14 = (*(void *)&v7 - 1) & v6;
    }
    float v15 = *(uint64_t ***)(*(void *)a1 + 8 * v14);
    if (!v15) {
      goto LABEL_51;
    }
    float v16 = *v15;
    if (!v16) {
      goto LABEL_51;
    }
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v17 = *(void *)&v7 - 1;
      while (1)
      {
        uint64_t v19 = v16[1];
        if (v19 == v6)
        {
          if (v16[2] == v6) {
            goto LABEL_45;
          }
        }
        else if ((v19 & v17) != v14)
        {
          goto LABEL_51;
        }
        float v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_51;
        }
      }
    }
    while (2)
    {
      unint64_t v18 = v16[1];
      if (v18 != v6)
      {
        if (v18 >= *(void *)&v7) {
          v18 %= *(void *)&v7;
        }
        if (v18 != v14) {
          goto LABEL_51;
        }
        goto LABEL_34;
      }
      if (v16[2] != v6)
      {
LABEL_34:
        float v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_51;
        }
        continue;
      }
      break;
    }
LABEL_45:
    if (*((unsigned char *)v16 + 24) != 2) {
      goto LABEL_51;
    }
    --v1;
    unint64_t v20 = v5 + 1;
    *(void *)(a1 + 80) = v20;
    *(void *)(a1 + 88) = v1;
    if (v20 >= 0x200)
    {
      operator delete(*v4);
      *(void *)(a1 + 56) += 8;
      *(void *)(a1 + 80) -= 256;
LABEL_48:
      uint64_t v1 = *(void *)(a1 + 88);
    }
  }
  while (v1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = a2;
  void v10[2] = *a3;
  *((unsigned char *)v10 + 24) = 0;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= a2) {
            unint64_t v3 = a2 % v7;
          }
          else {
            unint64_t v3 = a2;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & a2;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v19 = operator new(8 * prime);
    unint64_t v20 = *(void **)a1;
    *(void *)a1 = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    uint64_t v23 = (uint64_t *)(a1 + 4);
    uint64_t v22 = (void *)*((void *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          uint64_t v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          *uint64_t v22 = *i;
          uint64_t v29 = 8 * v28;
          *uint64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          uint64_t v22 = i;
          size_t v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    uint64_t v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *uint64_t v22 = *v33;
        uint64_t v34 = 8 * v35;
        *uint64_t v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        uint64_t v33 = v22;
      }
      size_t v35 = v24;
LABEL_63:
      uint64_t v22 = v33;
      uint64_t v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  unint64_t v36 = *(void **)a1;
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v3);
  if (v37)
  {
    void *v10 = *v37;
LABEL_80:
    *uint64_t v37 = v10;
    goto LABEL_81;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    uint64_t v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v10;
}

void gdc::tf::Executor::~Executor(gdc::tf::Executor *this)
{
  uint8x8_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 9);
  while (v4)
  {
    uint8x8_t v8 = v4;
    unint64_t v4 = (void *)*v4;
    unint64_t v9 = (void *)v8[6];
    if (v9 == v8 + 3)
    {
      (*(void (**)(void *))(v8[3] + 32))(v8 + 3);
    }
    else if (v9)
    {
      (*(void (**)(void *))(*v9 + 40))(v9);
    }
    operator delete(v8);
  }
  unint64_t v5 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 3);
  while (v6)
  {
    uint64_t v10 = v6;
    unint64_t v6 = (void *)*v6;
    unint64_t v11 = (void *)v10[6];
    if (v11 == v10 + 3)
    {
      (*(void (**)(void *))(v10[3] + 32))(v10 + 3);
    }
    else if (v11)
    {
      (*(void (**)(void *))(*v11 + 40))(v11);
    }
    operator delete(v10);
  }
  unint64_t v7 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    operator delete(v7);
  }
}

uint64_t gdc::Registry::storage<md::ita::FrameHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0x8004EB719AAADA5BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8004EB719AAADA5BLL;
    if (*(void *)&v1 <= 0x8004EB719AAADA5BLL) {
      unint64_t v3 = 0x8004EB719AAADA5BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8004EB719AAADA5BLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8004EB719AAADA5BLL)
      {
        if (v5[2] == 0x8004EB719AAADA5BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8004EB719AAADA5BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8004EB719AAADA5BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1940E18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::deque<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem,std::allocator<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem>>::__add_front_capacity(uint64_t a1)
{
  uint8x8_t v2 = *(char **)(a1 + 8);
  unint64_t v3 = *(char **)(a1 + 16);
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x100)
  {
    *(void *)(a1 + 32) = v6 + 256;
    uint64_t v64 = *((void *)v3 - 1);
    *(void *)(a1 + 16) = v3 - 8;
    std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v64);
    return;
  }
  unint64_t v7 = *(char **)(a1 + 24);
  uint64_t v8 = *(char **)a1;
  uint64_t v9 = (uint64_t)&v7[-*(void *)a1];
  if (v4 < v9)
  {
    unint64_t v10 = operator new(0x1000uLL);
    unint64_t v11 = v10;
    if (v2 != v8)
    {
      *((void *)v2 - 1) = v10;
      uint64_t v12 = *(void *)(a1 + 8) - 8;
      *(void *)(a1 + 8) = v12;
      goto LABEL_68;
    }
    if (v3 != v7) {
      goto LABEL_67;
    }
    unint64_t v18 = (v3 - v8) >> 2;
    if (v3 == v2) {
      unint64_t v18 = 1;
    }
    if (!(v18 >> 61))
    {
      unint64_t v19 = v18 >> 2;
      uint64_t v20 = 8 * v18;
      uint64_t v21 = (char *)operator new(8 * v18);
      uint64_t v22 = &v21[8 * v19];
      uint64_t v23 = &v21[v20];
      BOOL v24 = v3 == v2;
      unint64_t v3 = v22;
      if (!v24)
      {
        unint64_t v3 = &v22[v4 & 0xFFFFFFFFFFFFFFF8];
        size_t v25 = &v21[8 * v19];
        size_t v26 = v2;
        if (v4 - 8 > 0x37)
        {
          unint64_t v27 = &v21[8 * v19];
          size_t v25 = v27;
          size_t v26 = v2;
          if ((unint64_t)(v27 - v2) >= 0x20)
          {
            unint64_t v28 = ((v4 - 8) >> 3) + 1;
            uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            size_t v25 = &v22[v29];
            unint64_t v30 = (long long *)(v2 + 16);
            uint8x8_t v31 = v27 + 16;
            uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v33 = *v30;
              *(v31 - 1) = *(v30 - 1);
              _OWORD *v31 = v33;
              v30 += 2;
              v31 += 2;
              v32 -= 4;
            }
            while (v32);
            if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *(void *)a1 = v21;
              *(void *)(a1 + 8) = v22;
              *(void *)(a1 + 16) = v3;
              *(void *)(a1 + 24) = v23;
LABEL_66:
              operator delete(v2);
              unint64_t v3 = *(char **)(a1 + 16);
              goto LABEL_67;
            }
            size_t v26 = &v2[v29];
          }
        }
        do
        {
          uint64_t v62 = *(void *)v26;
          v26 += 8;
          *(void *)size_t v25 = v62;
          v25 += 8;
        }
        while (v25 != v3);
      }
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v3;
      *(void *)(a1 + 24) = v23;
      if (v2) {
        goto LABEL_66;
      }
LABEL_67:
      *(void *)unint64_t v3 = v11;
      uint64_t v63 = *(uint64_t **)(a1 + 16);
      *(void *)(a1 + 16) = v63 + 1;
      uint64_t v64 = *v63;
      *(void *)(a1 + 16) = v63;
      std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v64);
      uint64_t v12 = *(void *)(a1 + 8);
LABEL_68:
      if (*(void *)(a1 + 16) - v12 == 8) {
        *(void *)(a1 + 32) = 128;
      }
      else {
        *(void *)(a1 + 32) += 256;
      }
      return;
    }
LABEL_71:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v13 = v9 >> 2;
  if (v7 == v8) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14 >> 61) {
    goto LABEL_71;
  }
  BOOL v15 = (char *)operator new(8 * v14);
  unint64_t v16 = operator new(0x1000uLL);
  if (v14)
  {
    unint64_t v17 = &v15[8 * v14];
  }
  else
  {
    uint64_t v34 = (char *)operator new(8uLL);
    unint64_t v17 = v34 + 8;
    operator delete(v15);
    uint8x8_t v2 = *(char **)(a1 + 8);
    unint64_t v3 = *(char **)(a1 + 16);
    BOOL v15 = v34;
  }
  *(void *)BOOL v15 = v16;
  size_t v35 = v15 + 8;
  unint64_t v36 = v15;
  if (v2 != v3)
  {
    while (1)
    {
      if (v35 == v17)
      {
        if (v15 <= v36)
        {
          unint64_t v47 = (v35 - v36) >> 2;
          if (v35 == v36) {
            unint64_t v47 = 1;
          }
          if (v47 >> 61) {
            goto LABEL_71;
          }
          unint64_t v48 = v47 >> 2;
          uint64_t v49 = 8 * v47;
          uint64_t v50 = (char *)operator new(8 * v47);
          uint64_t v51 = v50;
          uint64_t v37 = &v50[8 * v48];
          uint64_t v40 = v37;
          int64_t v52 = v35 - v15;
          if (v35 != v15)
          {
            uint64_t v40 = &v37[v52 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v53 = v52 - 8;
            if (v53 >= 0x38)
            {
              if ((unint64_t)(&v50[8 * v48] - v15) < 0x20)
              {
                uint64_t v54 = &v50[8 * v48];
                goto LABEL_55;
              }
              uint64_t v55 = (v53 >> 3) + 1;
              uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v54 = &v37[v56];
              long long v57 = (long long *)(v15 + 16);
              unint64_t v58 = &v50[8 * v48 + 16];
              uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *v57;
                *((_OWORD *)v58 - 1) = *(v57 - 1);
                *(_OWORD *)unint64_t v58 = v60;
                v57 += 2;
                v58 += 32;
                v59 -= 4;
              }
              while (v59);
              if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v15 += v56;
                goto LABEL_55;
              }
            }
            else
            {
              uint64_t v54 = &v50[8 * v48];
              do
              {
LABEL_55:
                uint64_t v61 = *(void *)v15;
                v15 += 8;
                *(void *)uint64_t v54 = v61;
                v54 += 8;
              }
              while (v54 != v40);
            }
          }
          size_t v35 = &v50[v49];
          if (v36) {
            operator delete(v36);
          }
          unint64_t v36 = v51;
          goto LABEL_34;
        }
        uint64_t v42 = (v15 - v36) >> 3;
        if (v42 >= -1) {
          uint64_t v43 = v42 + 1;
        }
        else {
          uint64_t v43 = v42 + 2;
        }
        uint64_t v44 = v43 >> 1;
        BOOL v45 = &v15[-8 * (v43 >> 1)];
        uint64_t v46 = v35;
        if (v35 != v15)
        {
          memmove(v45, v15, v35 - v15);
          uint64_t v46 = v15;
        }
        uint64_t v40 = &v45[v35 - v15];
        uint64_t v37 = &v46[-8 * v44];
      }
      else
      {
        uint64_t v37 = v15;
        uint64_t v40 = v35;
        size_t v35 = v17;
      }
LABEL_34:
      unint64_t v17 = v35;
      uint64_t v41 = *(void *)v2;
      v2 += 8;
      *(void *)uint64_t v40 = v41;
      unint64_t v38 = v40 + 8;
      size_t v35 = v38;
      BOOL v15 = v37;
      if (v2 == *(char **)(a1 + 16)) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v37 = v15;
  unint64_t v38 = v15 + 8;
LABEL_30:
  uint64_t v39 = *(void **)a1;
  *(void *)a1 = v36;
  *(void *)(a1 + 8) = v37;
  *(void *)(a1 + 16) = v38;
  *(void *)(a1 + 24) = v17;
  if (v38 - v37 == 8)
  {
    *(void *)(a1 + 32) = 128;
    if (!v39) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 256;
    if (!v39) {
      return;
    }
  }
  operator delete(v39);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1941BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 == v21)
  {
    (*(void (**)(uint64_t *))(a16 + 32))(&a16);
  }
  else if (a19)
  {
    (*(void (**)(void))(*(void *)a19 + 40))();
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v80, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v78, v9, v6, v4, *(void *)(v9 + 32));
  if (v79 == v83)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v75 = result;
    uint64_t v76 = v2;
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      unint64_t v13 = HIDWORD(*v11);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * v14)) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((uint64_t v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == v13) : (v21 = 0), v21))
      {
        uint64_t v74 = 33 * v17;
        uint64_t v22 = v6[11];
        uint64_t v23 = v6[10] + v74;
      }
      else
      {
        uint64_t v22 = v6[11];
        uint64_t v23 = v22;
      }
      if (v23 == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v77 = v24;
      uint64_t v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v14)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v13) : (v31 = 0), v31))
      {
        uint64_t v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        uint64_t v32 = (unint64_t *)v4[11];
      }
      uint64_t v33 = **(void **)(v2 + 8);
      uint64_t v34 = *(void **)v33;
      size_t v35 = *(void **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x348A0B0E758C07C2)
        {
          v34 += 5;
          if (v34 == v35) {
            goto LABEL_37;
          }
        }
      }
      if (v34 == v35)
      {
LABEL_37:
        uint64_t v37 = 0;
      }
      else
      {
        uint64_t v37 = v34[3];
        unint64_t v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      unint64_t v38 = ***(uint64_t ****)(v2 + 8);
      if (v38 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v38 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v39 = v38 + 5;
        do
        {
          uint64_t v40 = *v39;
          v39 += 5;
        }
        while (v40 != 0xC94DD89A7B09BE9CLL);
        unint64_t v38 = v39 - 5;
      }
      uint64_t v41 = v38[3];
      uint64_t v42 = (std::__shared_weak_count *)v38[4];
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(v41);
      unint64_t v84 = *v32;
      unint64_t v44 = v84;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v37 + 104));
      uint64_t v45 = *(void *)(v37 + 504);
      if (v44 < (unint64_t)((*(void *)(v37 + 512) - v45) >> 3)
        && ((uint64_t v46 = *(void *)(v45 + 8 * v44)) != 0 ? (v47 = HIDWORD(v44) == HIDWORD(v46)) : (v47 = 0),
            v47))
      {
        uint64_t v49 = (uint64_t *)(*(void *)(v37 + 528) + 40 * v46);
        unint64_t v48 = *(uint64_t **)(v37 + 536);
      }
      else
      {
        unint64_t v48 = *(uint64_t **)(v37 + 536);
        uint64_t v49 = v48;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v37 + 104));
      uint64_t v50 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v37 + 440), v84, &v84);
      uint64_t v51 = 0;
      ++v50[3];
      if (v49 == v48)
      {
        uint64_t v2 = v76;
      }
      else
      {
        uint64_t v2 = v76;
        if (v49) {
          uint64_t v51 = *v49;
        }
      }
      uint64_t v52 = *(void *)(v43 + 2576);
      uint64_t v53 = *(void *)(v52 + 312);
      uint64_t v54 = *(std::__shared_weak_count **)(v52 + 320);
      if (v54)
      {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      *(unsigned char *)(v77 + 17) = v53 != v51;
      uint64_t v55 = v83;
      unint64_t v11 = *(unint64_t **)(v80 + 32);
      if (++v83 != v11)
      {
        uint64_t v56 = v81[4];
        unint64_t v57 = (v81[5] - v56) >> 3;
        unint64_t v58 = v55 + 2;
        while (1)
        {
          unint64_t v59 = *((unsigned int *)v58 - 1);
          unint64_t v60 = v59 >> 7;
          if (v59 >> 7 < v57)
          {
            uint64_t v61 = *(void *)(v56 + 8 * v60);
            if (v61)
            {
              unint64_t v62 = *(unsigned __int16 *)(v61 + 2 * (v59 & 0x7F));
              uint64_t v64 = v81[7];
              uint64_t v63 = v81[8];
              if (v62 < (v63 - v64) >> 3)
              {
                uint64_t v65 = v64 + 8 * v62;
                if (v65 != v63 && *(_DWORD *)(v65 + 4) == v59)
                {
                  uint64_t v67 = v82[4];
                  if (v60 < (v82[5] - v67) >> 3)
                  {
                    uint64_t v68 = *(void *)(v67 + 8 * v60);
                    if (v68)
                    {
                      unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (v59 & 0x7F));
                      uint64_t v71 = v82[7];
                      uint64_t v70 = v82[8];
                      if (v69 < (v70 - v71) >> 3)
                      {
                        uint64_t v72 = v71 + 8 * v69;
                        if (v72 != v70 && *(_DWORD *)(v72 + 4) == v59) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v83 = v58;
          BOOL v21 = v58++ == v11;
          if (v21) {
            goto LABEL_9;
          }
        }
        unint64_t v11 = v58 - 1;
      }
LABEL_9:
      uint64_t result = v75;
    }
    while (v79 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A194260C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::NeedsClimateTint>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v68, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v66, v9, v6, v4, *(void *)(v9 + 32));
  if (v67 != v71)
  {
    unint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *unint64_t v11 = *v10;
      unint64_t v12 = *v10;
      unint64_t v13 = HIDWORD(*v10);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * v14)) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((uint64_t v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == v13) : (v21 = 0), v21))
      {
        uint64_t v65 = 33 * v17;
        uint64_t v22 = v6[11];
        uint64_t v23 = v6[10] + v65;
      }
      else
      {
        uint64_t v22 = v6[11];
        uint64_t v23 = v22;
      }
      if (v23 == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v14)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v13) : (v31 = 0), v31))
      {
        uint64_t v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        uint64_t v32 = (unint64_t *)v4[11];
      }
      uint64_t v33 = ***(void ****)(a1 + 8);
      if (v33 != *(void **)(**(void **)(a1 + 8) + 8))
      {
        while (*v33 != 0x41D4E9297E100630)
          v33 += 5;
      }
      size_t v35 = (int8x8_t *)v33[3];
      uint64_t v34 = (std::__shared_weak_count *)v33[4];
      if (v34
        && (atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed),
            !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        int8x8_t v36 = v35[1286];
        if (!*(void *)&v36) {
          goto LABEL_57;
        }
      }
      else
      {
        int8x8_t v36 = v35[1286];
        if (!*(void *)&v36) {
          goto LABEL_57;
        }
      }
      unint64_t v37 = *v32;
      uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36);
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.u32[0] > 1uLL)
      {
        unint64_t v39 = *v32;
        if (*(void *)&v36 <= v37) {
          unint64_t v39 = v37 % *(void *)&v36;
        }
      }
      else
      {
        unint64_t v39 = (*(void *)&v36 - 1) & v37;
      }
      uint64_t v40 = *(uint64_t ***)(*(void *)&v35[1285] + 8 * v39);
      if (!v40 || (uint64_t v41 = *v40) == 0)
      {
LABEL_57:
        BOOL v45 = 0;
        goto LABEL_58;
      }
      if (v38.u32[0] < 2uLL)
      {
        uint64_t v42 = *(void *)&v36 - 1;
        while (1)
        {
          uint64_t v44 = v41[1];
          if (v44 == v37)
          {
            if (v41[2] == v37) {
              goto LABEL_80;
            }
          }
          else if ((v44 & v42) != v39)
          {
            goto LABEL_57;
          }
          uint64_t v41 = (uint64_t *)*v41;
          if (!v41) {
            goto LABEL_57;
          }
        }
      }
      while (1)
      {
        unint64_t v43 = v41[1];
        if (v43 == v37) {
          break;
        }
        if (v43 >= *(void *)&v36) {
          v43 %= *(void *)&v36;
        }
        if (v43 != v39) {
          goto LABEL_57;
        }
LABEL_45:
        uint64_t v41 = (uint64_t *)*v41;
        if (!v41) {
          goto LABEL_57;
        }
      }
      if (v41[2] != v37) {
        goto LABEL_45;
      }
LABEL_80:
      BOOL v45 = *((unsigned char *)v41 + 24) != 0;
LABEL_58:
      *(unsigned char *)(v24 + 28) = v45;
      uint64_t v46 = v71;
      unint64_t v10 = *(unint64_t **)(v68 + 32);
      if (++v71 != v10)
      {
        uint64_t v47 = v69[4];
        unint64_t v48 = (v69[5] - v47) >> 3;
        uint64_t v49 = v46 + 2;
        while (1)
        {
          unint64_t v50 = *((unsigned int *)v49 - 1);
          unint64_t v51 = v50 >> 7;
          if (v50 >> 7 < v48)
          {
            uint64_t v52 = *(void *)(v47 + 8 * v51);
            if (v52)
            {
              unint64_t v53 = *(unsigned __int16 *)(v52 + 2 * (v50 & 0x7F));
              uint64_t v55 = v69[7];
              uint64_t v54 = v69[8];
              if (v53 < (v54 - v55) >> 3)
              {
                uint64_t v56 = v55 + 8 * v53;
                if (v56 != v54 && *(_DWORD *)(v56 + 4) == v50)
                {
                  uint64_t v58 = v70[4];
                  if (v51 < (v70[5] - v58) >> 3)
                  {
                    uint64_t v59 = *(void *)(v58 + 8 * v51);
                    if (v59)
                    {
                      unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * (v50 & 0x7F));
                      uint64_t v62 = v70[7];
                      uint64_t v61 = v70[8];
                      if (v60 < (v61 - v62) >> 3)
                      {
                        uint64_t v63 = v62 + 8 * v60;
                        if (v63 != v61 && *(_DWORD *)(v63 + 4) == v50) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v71 = v49;
          BOOL v21 = v49++ == v10;
          if (v21) {
            goto LABEL_9;
          }
        }
        unint64_t v10 = v49 - 1;
      }
LABEL_9:
      if (v67 == v10) {
        goto LABEL_82;
      }
    }
  }
  unint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_82:
  *unint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::InView>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::MaterialBrightnessAndSaturation>(v3);
  uint64_t v8 = v7 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v9 + 64) - *(void *)(v9 + 56)) {
    uint64_t v9 = v6;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) >= *(void *)(v9 + 64) - *(void *)(v9 + 56)) {
    uint64_t v8 = v9 + 32;
  }
  unint64_t v10 = *(void **)(v8 + 24);
  uint64_t v207 = v8;
  int v208 = (void *)v4;
  unint64_t v11 = (void *)v7;
  int8x8_t v209 = (void *)v5;
  uint8x8_t v210 = (void *)v6;
  uint64_t v211 = (void *)v7;
  v212 = v10;
  unint64_t v12 = *(void **)(v8 + 32);
  if (v12 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v207))
  {
    unint64_t v13 = v10 + 1;
    do
    {
      unint64_t v10 = v13;
      v212 = v13;
      if (v13 == v12) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v207);
      unint64_t v13 = v10 + 1;
    }
    while (!isValid);
  }
  unint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v16 = (void *)result;
  if (v12 != v10)
  {
    size_t prime = -1;
    double v206 = (void *)result;
    while (1)
    {
      void *v16 = *v10;
      unint64_t v19 = *v10;
      unint64_t v20 = *v10 >> 39;
      uint64_t v21 = v11[4];
      if (v20 < (v11[5] - v21) >> 3
        && (uint64_t v22 = *(void *)(v21 + 8 * v20)) != 0
        && (unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v19) & 0x7F)),
            uint64_t v25 = v11[7],
            uint64_t v24 = v11[8],
            v23 < (v24 - v25) >> 3)
        && ((unint64_t v26 = HIDWORD(v19), v27 = v25 + 8 * v23, v27 != v24)
          ? (BOOL v28 = *(_DWORD *)(v27 + 4) == v26)
          : (BOOL v28 = 0),
            v28))
      {
        uint64_t v29 = v11[11];
        uint64_t v30 = v11[10] + 16 * v23;
      }
      else
      {
        uint64_t v29 = v11[11];
        uint64_t v30 = v29;
      }
      if (v30 == v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = (int8x16_t *)v30;
      }
      uint64_t v32 = **(void **)(a1 + 8);
      uint64_t v33 = *(void **)v32;
      uint64_t v34 = *(void **)(v32 + 8);
      if (v33 != v34)
      {
        while (*v33 != 0x41D4E9297E100630)
        {
          v33 += 5;
          if (v33 == v34) {
            goto LABEL_37;
          }
        }
      }
      if (v33 == v34)
      {
LABEL_37:
        uint64_t v35 = 0;
      }
      else
      {
        uint64_t v35 = v33[3];
        int8x8_t v36 = (std::__shared_weak_count *)v33[4];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      int8x16_t v213 = vextq_s8(*v31, *v31, 8uLL);
      unint64_t v37 = (void *)(v35 + 8144);
      uint8x8_t v38 = std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>((void *)(v35 + 8144), (float *)v213.i32);
      if (!v38) {
        break;
      }
      uint64_t v39 = v38[4];
      if (!v39) {
        break;
      }
      uint64_t v40 = *(void **)(a1 + 8);
      uint64_t v16 = v206;
      uint64_t v41 = *v206;
      unint64_t v215 = &off_1EF525D00;
      *(void *)&long long v216 = v39;
      *((void *)&v216 + 1) = v41;
      uint64_t v217 = &v215;
      v220 = &v218;
      uint64_t v218 = &off_1EF525D00;
      long long v219 = v216;
      int v221 = 0;
      ecs2::Runtime::queueCommand(v40, (uint64_t)&v218);
      if (v221 != -1) {
        ((void (*)(char *, uint64_t (***)()))off_1EF58F5F8[v221])(&v214, &v218);
      }
      int v221 = -1;
      unint64_t result = (unint64_t)v217;
      if (v217 == &v215)
      {
        unint64_t result = ((uint64_t (*)(uint64_t (***)()))v215[4])(&v215);
      }
      else if (v217)
      {
        unint64_t result = ((uint64_t (*)(uint64_t (***)()))(*v217)[5])(v217);
      }
      unint64_t v10 = *(void **)(v207 + 32);
      uint64_t v18 = v212 + 1;
      v212 = v18;
      if (v18 != v10)
      {
        uint64_t v188 = v208[4];
        while (1)
        {
          unint64_t v189 = *((unsigned int *)v18 + 1);
          unint64_t v190 = v189 >> 7;
          if (v189 >> 7 < (v208[5] - v188) >> 3)
          {
            unint64_t result = *(void *)(v188 + 8 * v190);
            if (result)
            {
              uint64_t v191 = v189 & 0x7F;
              unint64_t result = *(unsigned __int16 *)(result + 2 * v191);
              uint64_t v193 = v208[7];
              uint64_t v192 = v208[8];
              if (result < (v192 - v193) >> 3)
              {
                unint64_t result = v193 + 8 * result;
                if (result != v192 && *(_DWORD *)(result + 4) == v189)
                {
                  unint64_t result = v209[4];
                  if (v190 < (uint64_t)(v209[5] - result) >> 3)
                  {
                    unint64_t result = *(void *)(result + 8 * v190);
                    if (result)
                    {
                      unint64_t result = *(unsigned __int16 *)(result + 2 * v191);
                      uint64_t v196 = v209[7];
                      uint64_t v195 = v209[8];
                      if (result < (v195 - v196) >> 3)
                      {
                        unint64_t result = v196 + 8 * result;
                        if (result != v195 && *(_DWORD *)(result + 4) == v189)
                        {
                          unint64_t result = v210[4];
                          if (v190 < (uint64_t)(v210[5] - result) >> 3)
                          {
                            unint64_t result = *(void *)(result + 8 * v190);
                            if (result)
                            {
                              unint64_t result = *(unsigned __int16 *)(result + 2 * v191);
                              uint64_t v199 = v210[7];
                              uint64_t v198 = v210[8];
                              if (result < (v198 - v199) >> 3)
                              {
                                unint64_t result = v199 + 8 * result;
                                if (result != v198 && *(_DWORD *)(result + 4) == v189)
                                {
                                  unint64_t result = v211[4];
                                  if (v190 < (uint64_t)(v211[5] - result) >> 3)
                                  {
                                    uint64_t v201 = *(void *)(result + 8 * v190);
                                    if (v201)
                                    {
                                      unint64_t v202 = *(unsigned __int16 *)(v201 + 2 * v191);
                                      unint64_t result = v211[7];
                                      uint64_t v203 = v211[8];
                                      if (v202 < (uint64_t)(v203 - result) >> 3)
                                      {
                                        unint64_t v204 = result + 8 * v202;
                                        unint64_t result = *(unsigned int *)(v204 + 4);
                                        if (result == v189 && v204 != v203) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v18 == v10)
          {
            uint64_t v18 = v10;
            goto LABEL_16;
          }
        }
        unint64_t v10 = v18;
LABEL_16:
        v212 = v18;
      }
      if (v12 == v10) {
        goto LABEL_391;
      }
    }
    uint64_t v42 = *(void *)(v35 + 8016);
    if (*(void *)(v35 + 8008) == v42)
    {
      size_t prime = (-1431655765 * ((*(void *)(v35 + 8064) - *(void *)(v35 + 8056)) >> 3)) | 0x100000000;
      BOOL v45 = *(size_t **)(v35 + 8040);
      unint64_t v46 = *(void *)(v35 + 8048);
      if ((unint64_t)v45 >= v46)
      {
        unint64_t v48 = *(char **)(v35 + 8032);
        uint64_t v49 = ((char *)v45 - v48) >> 3;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61) {
          goto LABEL_393;
        }
        uint64_t v51 = v46 - (void)v48;
        if (v51 >> 2 > v50) {
          unint64_t v50 = v51 >> 2;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          if (v52 >> 61) {
            goto LABEL_392;
          }
          unint64_t v53 = (char *)operator new(8 * v52);
        }
        else
        {
          unint64_t v53 = 0;
        }
        uint64_t v54 = (size_t *)&v53[8 * v49];
        *uint64_t v54 = prime;
        uint64_t v47 = v54 + 1;
        if (v45 != (size_t *)v48)
        {
          unint64_t v55 = (char *)v45 - v48 - 8;
          if (v55 < 0x58) {
            goto LABEL_396;
          }
          if ((unint64_t)(v48 - v53) < 0x20) {
            goto LABEL_396;
          }
          uint64_t v56 = (v55 >> 3) + 1;
          unint64_t v57 = &v53[(char *)v45 - v48 - 16];
          uint64_t v58 = v45 - 2;
          uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *(_OWORD *)v58;
            *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
            *(_OWORD *)unint64_t v57 = v60;
            v57 -= 32;
            v58 -= 4;
            v59 -= 4;
          }
          while (v59);
          v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
          v45 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_396:
            do
            {
              size_t v61 = *--v45;
              *--uint64_t v54 = v61;
            }
            while (v45 != (size_t *)v48);
          }
          BOOL v45 = *(size_t **)(v35 + 8032);
        }
        *(void *)(v35 + 8032) = v54;
        *(void *)(v35 + 8040) = v47;
        *(void *)(v35 + 8048) = &v53[8 * v52];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *BOOL v45 = prime;
        uint64_t v47 = v45 + 1;
      }
      *(void *)(v35 + 8040) = v47;
      unint64_t v44 = *(v47 - 1);
    }
    else
    {
      uint64_t v43 = *(void *)(v42 - 8);
      *(void *)(v35 + 8016) = v42 - 8;
      *(_DWORD *)(*(void *)(v35 + 8032) + 8 * v43) = -1431655765
                                                     * ((*(void *)(v35 + 8064) - *(void *)(v35 + 8056)) >> 3);
      *(_DWORD *)(*(void *)(v35 + 8032) + 8 * v43 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v35 + 8032)
                                                                                               + 8 * v43
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      unint64_t v44 = v43 | ((unint64_t)*(unsigned int *)(*(void *)(v35 + 8032) + 8 * v43 + 4) << 32);
    }
    uint64_t v62 = *(void **)(v35 + 8064);
    unint64_t v63 = *(void *)(v35 + 8072);
    if ((unint64_t)v62 >= v63)
    {
      uint64_t v65 = *(void **)(v35 + 8056);
      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (v62 - v65) + 1;
      if (v66 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_393;
      }
      unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v65) >> 3);
      if (2 * v67 > v66) {
        unint64_t v66 = 2 * v67;
      }
      if (v67 >= 0x555555555555555) {
        unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v68 = v66;
      }
      if (v68 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_392;
      }
      unint64_t v69 = (char *)operator new(24 * v68);
      uint64_t v70 = &v69[8 * (v62 - v65)];
      uint64_t v71 = &v69[24 * v68];
      *(void *)uint64_t v70 = 0;
      *((void *)v70 + 1) = 0;
      *((void *)v70 + 2) = 0;
      uint64_t v64 = v70 + 24;
      if (v62 == v65)
      {
        *(void *)(v35 + 8056) = v70;
        *(void *)(v35 + 8064) = v64;
        *(void *)(v35 + 8072) = v71;
      }
      else
      {
        size_t prime = -1;
        do
        {
          long long v72 = *(_OWORD *)(v62 - 3);
          v62 -= 3;
          *(_OWORD *)(v70 - 24) = v72;
          v70 -= 24;
          *((void *)v70 + 2) = v62[2];
          v62[1] = 0;
          _DWORD v62[2] = 0;
        }
        while (v62 != v65);
        uint64_t v62 = *(void **)(v35 + 8056);
        uint64_t v73 = *(void **)(v35 + 8064);
        *(void *)(v35 + 8056) = v70;
        *(void *)(v35 + 8064) = v64;
        *(void *)(v35 + 8072) = v71;
        while (v73 != v62)
        {
          uint64_t v74 = (std::__shared_weak_count *)*(v73 - 1);
          if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
          v73 -= 3;
        }
      }
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *uint64_t v62 = 0;
      v62[1] = 0;
      uint64_t v64 = v62 + 3;
      _DWORD v62[2] = 0;
    }
    *(void *)(v35 + 8064) = v64;
    uint64_t v75 = *(char **)(v35 + 8088);
    unint64_t v76 = *(void *)(v35 + 8096);
    if ((unint64_t)v75 < v76)
    {
      *(void *)uint64_t v75 = v44;
      unint64_t v77 = (unint64_t)(v75 + 8);
      goto LABEL_114;
    }
    long long v78 = *(char **)(v35 + 8080);
    size_t prime = v75 - v78;
    uint64_t v79 = (v75 - v78) >> 3;
    unint64_t v80 = v79 + 1;
    if (!((unint64_t)(v79 + 1) >> 61))
    {
      uint64_t v81 = v76 - (void)v78;
      if (v81 >> 2 > v80) {
        unint64_t v80 = v81 >> 2;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82)
      {
        if (v82 >> 61) {
          goto LABEL_392;
        }
        uint64_t v83 = operator new(8 * v82);
      }
      else
      {
        uint64_t v83 = 0;
      }
      unint64_t v84 = &v83[8 * v79];
      *unint64_t v84 = v44;
      unint64_t v77 = (unint64_t)(v84 + 1);
      if (v75 != v78)
      {
        unint64_t v85 = v75 - v78 - 8;
        if (v85 < 0x58) {
          goto LABEL_397;
        }
        if ((unint64_t)(v78 - v83) < 0x20) {
          goto LABEL_397;
        }
        uint64_t v86 = (v85 >> 3) + 1;
        id v87 = &v83[prime - 16];
        uint64_t v88 = v75 - 16;
        uint64_t v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v90 = *(_OWORD *)v88;
          *(v87 - 1) = *((_OWORD *)v88 - 1);
          *id v87 = v90;
          v87 -= 2;
          v88 -= 32;
          v89 -= 4;
        }
        while (v89);
        v84 -= v86 & 0x3FFFFFFFFFFFFFFCLL;
        v75 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
        if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_397:
          do
          {
            uint64_t v91 = *((void *)v75 - 1);
            v75 -= 8;
            *--unint64_t v84 = v91;
          }
          while (v75 != v78);
        }
      }
      *(void *)(v35 + 8080) = v84;
      *(void *)(v35 + 8088) = v77;
      *(void *)(v35 + 8096) = &v83[8 * v82];
      if (v78) {
        operator delete(v78);
      }
LABEL_114:
      *(void *)(v35 + 8088) = v77;
      unint64_t v92 = *(void *)(v35 + 7936);
      if (v92)
      {
        uint8x8_t v93 = (uint8x8_t)vcnt_s8((int8x8_t)v92);
        v93.i16[0] = vaddlv_u8(v93);
        if (v93.u32[0] > 1uLL)
        {
          unint64_t v77 = v44;
          if (v44 >= v92) {
            unint64_t v77 = v44 % v92;
          }
        }
        else
        {
          unint64_t v77 = (v92 - 1) & v44;
        }
        unint64_t v94 = *(void **)(*(void *)(v35 + 7928) + 8 * v77);
        if (v94)
        {
          uint64_t v95 = (void *)*v94;
          if (v95)
          {
            if (v93.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v97 = v95[1];
                if (v97 == v44)
                {
                  if (v95[2] == v44) {
                    goto LABEL_173;
                  }
                }
                else if ((v97 & (v92 - 1)) != v77)
                {
                  goto LABEL_134;
                }
                uint64_t v95 = (void *)*v95;
                if (!v95) {
                  goto LABEL_134;
                }
              }
            }
            do
            {
              unint64_t v96 = v95[1];
              if (v96 == v44)
              {
                if (v95[2] == v44) {
                  goto LABEL_173;
                }
              }
              else
              {
                if (v96 >= v92) {
                  v96 %= v92;
                }
                if (v96 != v77) {
                  break;
                }
              }
              uint64_t v95 = (void *)*v95;
            }
            while (v95);
          }
        }
      }
LABEL_134:
      size_t prime = v35 + 7928;
      int64_t v98 = (char *)operator new(0x30uLL);
      *(void *)int64_t v98 = 0;
      *((void *)v98 + 1) = v44;
      *((void *)v98 + 2) = v44;
      *(_OWORD *)(v98 + 24) = xmmword_1A28FCC60;
      v98[40] = 0;
      float v99 = (float)(unint64_t)(*(void *)(v35 + 7952) + 1);
      float v100 = *(float *)(v35 + 7960);
      if ((((float)(v100 * (float)v92) >= v99) & ~(v92 == 0)) != 0)
      {
        uint64_t v101 = (uint64_t *)(v35 + 7928);
      }
      else
      {
        uint64_t v101 = (uint64_t *)(v35 + 7928);
        BOOL v102 = v92 < 3 || (v92 & (v92 - 1)) != 0;
        unint64_t v103 = v102 | (2 * v92);
        unint64_t v104 = vcvtps_u32_f32(v99 / v100);
        if (v103 <= v104) {
          size_t prime = v104;
        }
        else {
          size_t prime = v103;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v92 = *(void *)(v35 + 7936);
        }
        if (prime > v92) {
          goto LABEL_147;
        }
        if (prime < v92)
        {
          unint64_t v105 = vcvtps_u32_f32((float)*(unint64_t *)(v35 + 7952) / *(float *)(v35 + 7960));
          if (v92 < 3 || (uint8x8_t v106 = (uint8x8_t)vcnt_s8((int8x8_t)v92), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
          {
            unint64_t v105 = std::__next_prime(v105);
          }
          else
          {
            uint64_t v107 = 1 << -(char)__clz(v105 - 1);
            if (v105 >= 2) {
              unint64_t v105 = v107;
            }
          }
          if (prime <= v105) {
            size_t prime = v105;
          }
          if (prime < v92) {
LABEL_147:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v35 + 7928, prime);
        }
        unint64_t v92 = *(void *)(v35 + 7936);
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v44 >= v92) {
            unint64_t v77 = v44 % v92;
          }
          else {
            unint64_t v77 = v44;
          }
        }
        else
        {
          unint64_t v77 = (v92 - 1) & v44;
        }
      }
      uint64_t v108 = *v101;
      BOOL v109 = *(void **)(*v101 + 8 * v77);
      if (v109)
      {
        *(void *)int64_t v98 = *v109;
      }
      else
      {
        *(void *)int64_t v98 = *(void *)(v35 + 7944);
        *(void *)(v35 + 7944) = v98;
        *(void *)(v108 + 8 * v77) = v35 + 7944;
        if (!*(void *)v98)
        {
LABEL_172:
          ++*(void *)(v35 + 7952);
LABEL_173:
          __int32 v111 = v213.i32[0];
          __int32 v112 = v213.i32[1];
          uint64_t v113 = v213.i64[1];
          unint64_t v114 = *(void *)(v35 + 8152);
          unint64_t v115 = v213.u32[0] - 0x61C8864680B583EBLL;
          if ((v213.i32[0] & 0x7FFFFFFF) == 0) {
            unint64_t v115 = 0x9E3779B97F4A7C15;
          }
          uint64_t v116 = v213.u32[1] - 0x61C8864680B583EBLL;
          if ((v213.i32[1] & 0x7FFFFFFF) == 0) {
            uint64_t v116 = 0x9E3779B97F4A7C15;
          }
          unint64_t v117 = ((v115 >> 2) + (v115 << 6) + v116) ^ v115;
          unint64_t v118 = v213.u32[2] - 0x61C8864680B583EBLL;
          if (*(float *)&v213.i32[2] == 0.0) {
            unint64_t v118 = 0x9E3779B97F4A7C15;
          }
          uint64_t v119 = v213.u32[3] - 0x61C8864680B583EBLL;
          if (*(float *)&v213.i32[3] == 0.0) {
            uint64_t v119 = 0x9E3779B97F4A7C15;
          }
          unint64_t v120 = ((v117 << 6) - 0x61C8864680B583EBLL + (v117 >> 2) + (((v118 >> 2) + (v118 << 6) + v119) ^ v118)) ^ v117;
          if (v114)
          {
            uint8x8_t v121 = (uint8x8_t)vcnt_s8((int8x8_t)v114);
            v121.i16[0] = vaddlv_u8(v121);
            if (v121.u32[0] > 1uLL)
            {
              size_t prime = ((v117 << 6) - 0x61C8864680B583EBLL + (v117 >> 2) + (((v118 >> 2) + (v118 << 6) + v119) ^ v118)) ^ v117;
              if (v120 >= v114) {
                size_t prime = v120 % v114;
              }
            }
            else
            {
              size_t prime = v120 & (v114 - 1);
            }
            uint64_t v122 = *(void ***)(*v37 + 8 * prime);
            if (v122)
            {
              BOOL v123 = (int8x16_t *)*v122;
              if (*v122)
              {
                if (v121.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v125 = v123->i64[1];
                    if (v125 == v120)
                    {
                      if (*(_OWORD *)&v123[1] == *(_OWORD *)&v213) {
                        goto LABEL_268;
                      }
                    }
                    else if ((v125 & (v114 - 1)) != prime)
                    {
                      goto LABEL_202;
                    }
                    BOOL v123 = (int8x16_t *)v123->i64[0];
                    if (!v123) {
                      goto LABEL_202;
                    }
                  }
                }
                do
                {
                  unint64_t v124 = v123->u64[1];
                  if (v124 == v120)
                  {
                    if (*(_OWORD *)&v123[1] == *(_OWORD *)&v213) {
                      goto LABEL_268;
                    }
                  }
                  else
                  {
                    if (v124 >= v114) {
                      v124 %= v114;
                    }
                    if (v124 != prime) {
                      break;
                    }
                  }
                  BOOL v123 = (int8x16_t *)v123->i64[0];
                }
                while (v123);
              }
            }
          }
LABEL_202:
          BOOL v123 = (int8x16_t *)operator new(0x28uLL);
          v123->i64[0] = 0;
          v123->i64[1] = v120;
          v123[1] = v213;
          v123[2].i64[0] = 0;
          float v126 = (float)(unint64_t)(*(void *)(v35 + 8168) + 1);
          float v127 = *(float *)(v35 + 8176);
          if ((((float)(v127 * (float)v114) >= v126) & ~(v114 == 0)) != 0)
          {
LABEL_258:
            unint64_t v150 = (void *)*v37;
            uint64_t v151 = *(int8x16_t ***)(*v37 + 8 * prime);
            if (v151)
            {
              v123->i64[0] = (uint64_t)*v151;
            }
            else
            {
              v123->i64[0] = *(void *)(v35 + 8160);
              *(void *)(v35 + 8160) = v123;
              v150[prime] = v35 + 8160;
              if (!v123->i64[0]) {
                goto LABEL_267;
              }
              unint64_t v152 = *(void *)(v123->i64[0] + 8);
              if ((v114 & (v114 - 1)) != 0)
              {
                if (v152 >= v114) {
                  v152 %= v114;
                }
              }
              else
              {
                v152 &= v114 - 1;
              }
              uint64_t v151 = (int8x16_t **)(*v37 + 8 * v152);
            }
            NSObject *v151 = v123;
LABEL_267:
            ++*(void *)(v35 + 8168);
LABEL_268:
            v123[2].i64[0] = v44;
            unint64_t v153 = *(void *)(v35 + 0x2000);
            if (v153)
            {
              uint8x8_t v154 = (uint8x8_t)vcnt_s8((int8x8_t)v153);
              v154.i16[0] = vaddlv_u8(v154);
              if (v154.u32[0] > 1uLL)
              {
                unint64_t v120 = v44;
                if (v44 >= v153) {
                  unint64_t v120 = v44 % v153;
                }
              }
              else
              {
                unint64_t v120 = (v153 - 1) & v44;
              }
              int v155 = *(void ***)(*(void *)(v35 + 8184) + 8 * v120);
              if (v155)
              {
                unsigned int v156 = *v155;
                if (*v155)
                {
                  if (v154.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v158 = v156[1];
                      if (v158 == v44)
                      {
                        if (v156[2] == v44) {
                          goto LABEL_354;
                        }
                      }
                      else if ((v158 & (v153 - 1)) != v120)
                      {
                        goto LABEL_288;
                      }
                      unsigned int v156 = (void *)*v156;
                      if (!v156) {
                        goto LABEL_288;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v157 = v156[1];
                    if (v157 == v44)
                    {
                      if (v156[2] == v44) {
                        goto LABEL_354;
                      }
                    }
                    else
                    {
                      if (v157 >= v153) {
                        v157 %= v153;
                      }
                      if (v157 != v120) {
                        break;
                      }
                    }
                    unsigned int v156 = (void *)*v156;
                  }
                  while (v156);
                }
              }
            }
LABEL_288:
            unsigned int v156 = operator new(0x28uLL);
            void *v156 = 0;
            v156[1] = v44;
            v156[3] = 0;
            v156[4] = 0;
            v156[2] = v44;
            float v159 = (float)(unint64_t)(*(void *)(v35 + 8208) + 1);
            float v160 = *(float *)(v35 + 8216);
            if ((((float)(v160 * (float)v153) >= v159) & ~(v153 == 0)) != 0)
            {
LABEL_344:
              uint64_t v185 = *(void *)(v35 + 8184);
              BOOL v186 = *(void **)(v185 + 8 * v120);
              if (v186)
              {
                void *v156 = *v186;
              }
              else
              {
                void *v156 = *(void *)(v35 + 8200);
                *(void *)(v35 + 8200) = v156;
                *(void *)(v185 + 8 * v120) = v35 + 8200;
                if (!*v156)
                {
LABEL_353:
                  ++*(void *)(v35 + 8208);
LABEL_354:
                  *((_DWORD *)v156 + 6) = v111;
                  *((_DWORD *)v156 + 7) = v112;
                  v156[4] = v113;
                  uint64_t v218 = (uint64_t (**)())v44;
                  operator new();
                }
                unint64_t v187 = *(void *)(*v156 + 8);
                if ((v153 & (v153 - 1)) != 0)
                {
                  if (v187 >= v153) {
                    v187 %= v153;
                  }
                }
                else
                {
                  v187 &= v153 - 1;
                }
                BOOL v186 = (void *)(*(void *)(v35 + 8184) + 8 * v187);
              }
              *BOOL v186 = v156;
              goto LABEL_353;
            }
            BOOL v161 = (v153 & (v153 - 1)) != 0;
            if (v153 < 3) {
              BOOL v161 = 1;
            }
            unint64_t v162 = v161 | (2 * v153);
            unint64_t v163 = vcvtps_u32_f32(v159 / v160);
            if (v162 <= v163) {
              size_t v164 = v163;
            }
            else {
              size_t v164 = v162;
            }
            if (v164 == 1)
            {
              size_t v164 = 2;
            }
            else if ((v164 & (v164 - 1)) != 0)
            {
              size_t v164 = std::__next_prime(v164);
              unint64_t v153 = *(void *)(v35 + 0x2000);
            }
            if (v164 <= v153)
            {
              if (v164 >= v153) {
                goto LABEL_339;
              }
              unint64_t v177 = vcvtps_u32_f32((float)*(unint64_t *)(v35 + 8208) / *(float *)(v35 + 8216));
              if (v153 < 3
                || (uint8x8_t v178 = (uint8x8_t)vcnt_s8((int8x8_t)v153), v178.i16[0] = vaddlv_u8(v178), v178.u32[0] > 1uLL))
              {
                unint64_t v177 = std::__next_prime(v177);
              }
              else
              {
                uint64_t v179 = 1 << -(char)__clz(v177 - 1);
                if (v177 >= 2) {
                  unint64_t v177 = v179;
                }
              }
              if (v164 <= v177) {
                size_t v164 = v177;
              }
              if (v164 >= v153) {
                goto LABEL_339;
              }
              if (!v164)
              {
                int v184 = *(void **)(v35 + 8184);
                *(void *)(v35 + 8184) = 0;
                if (v184) {
                  operator delete(v184);
                }
                *(void *)(v35 + 0x2000) = 0;
                goto LABEL_339;
              }
            }
            if (!(v164 >> 61))
            {
              unint64_t v165 = operator new(8 * v164);
              uint64_t v166 = *(void **)(v35 + 8184);
              *(void *)(v35 + 8184) = v165;
              if (v166) {
                operator delete(v166);
              }
              uint64_t v167 = 0;
              *(void *)(v35 + 0x2000) = v164;
              do
                *(void *)(*(void *)(v35 + 8184) + 8 * v167++) = 0;
              while (v164 != v167);
              unint64_t v168 = *(void **)(v35 + 8200);
              if (!v168) {
                goto LABEL_339;
              }
              uint64_t v169 = v35 + 8200;
              size_t v170 = v168[1];
              size_t v171 = v164 - 1;
              if ((v164 & (v164 - 1)) == 0)
              {
                size_t v172 = v170 & v171;
                *(void *)(*(void *)(v35 + 8184) + 8 * v172) = v169;
                while (1)
                {
                  unint64_t v173 = (void *)*v168;
                  if (!*v168) {
                    break;
                  }
                  size_t v174 = v173[1] & v171;
                  if (v174 == v172)
                  {
                    unint64_t v168 = (void *)*v168;
                  }
                  else
                  {
                    uint64_t v175 = *(void *)(v35 + 8184);
                    if (*(void *)(v175 + 8 * v174))
                    {
                      *unint64_t v168 = *v173;
                      uint64_t v176 = 8 * v174;
                      void *v173 = **(void **)(*(void *)(v35 + 8184) + v176);
                      **(void **)(*(void *)(v35 + 8184) + v176) = v173;
                    }
                    else
                    {
                      *(void *)(v175 + 8 * v174) = v168;
                      unint64_t v168 = v173;
                      size_t v172 = v174;
                    }
                  }
                }
LABEL_339:
                unint64_t v153 = *(void *)(v35 + 0x2000);
                if ((v153 & (v153 - 1)) != 0)
                {
                  if (v44 >= v153) {
                    unint64_t v120 = v44 % v153;
                  }
                  else {
                    unint64_t v120 = v44;
                  }
                }
                else
                {
                  unint64_t v120 = (v153 - 1) & v44;
                }
                goto LABEL_344;
              }
              if (v170 >= v164) {
                v170 %= v164;
              }
              *(void *)(*(void *)(v35 + 8184) + 8 * v170) = v169;
              unint64_t v180 = (void *)*v168;
              if (!*v168) {
                goto LABEL_339;
              }
              while (1)
              {
                size_t v182 = v180[1];
                if (v182 >= v164) {
                  v182 %= v164;
                }
                if (v182 != v170)
                {
                  uint64_t v183 = *(void *)(v35 + 8184);
                  if (!*(void *)(v183 + 8 * v182))
                  {
                    *(void *)(v183 + 8 * v182) = v168;
                    goto LABEL_325;
                  }
                  *unint64_t v168 = *v180;
                  uint64_t v181 = 8 * v182;
                  void *v180 = **(void **)(*(void *)(v35 + 8184) + v181);
                  **(void **)(*(void *)(v35 + 8184) + v181) = v180;
                  unint64_t v180 = v168;
                }
                size_t v182 = v170;
LABEL_325:
                unint64_t v168 = v180;
                unint64_t v180 = (void *)*v180;
                size_t v170 = v182;
                if (!v180) {
                  goto LABEL_339;
                }
              }
            }
LABEL_392:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v128 = (v114 & (v114 - 1)) != 0;
          if (v114 < 3) {
            BOOL v128 = 1;
          }
          unint64_t v129 = v128 | (2 * v114);
          unint64_t v130 = vcvtps_u32_f32(v126 / v127);
          if (v129 <= v130) {
            size_t v131 = v130;
          }
          else {
            size_t v131 = v129;
          }
          if (v131 == 1)
          {
            size_t v131 = 2;
          }
          else if ((v131 & (v131 - 1)) != 0)
          {
            size_t v131 = std::__next_prime(v131);
            unint64_t v114 = *(void *)(v35 + 8152);
          }
          if (v131 <= v114)
          {
            if (v131 >= v114) {
              goto LABEL_253;
            }
            unint64_t v143 = vcvtps_u32_f32((float)*(unint64_t *)(v35 + 8168) / *(float *)(v35 + 8176));
            if (v114 < 3
              || (uint8x8_t v144 = (uint8x8_t)vcnt_s8((int8x8_t)v114), v144.i16[0] = vaddlv_u8(v144), v144.u32[0] > 1uLL))
            {
              unint64_t v143 = std::__next_prime(v143);
            }
            else
            {
              uint64_t v145 = 1 << -(char)__clz(v143 - 1);
              if (v143 >= 2) {
                unint64_t v143 = v145;
              }
            }
            if (v131 <= v143) {
              size_t v131 = v143;
            }
            if (v131 >= v114) {
              goto LABEL_253;
            }
            if (!v131)
            {
              uint64_t v149 = (void *)*v37;
              *unint64_t v37 = 0;
              if (v149) {
                operator delete(v149);
              }
              *(void *)(v35 + 8152) = 0;
              goto LABEL_253;
            }
          }
          if (v131 >> 61) {
            goto LABEL_392;
          }
          unint64_t v132 = operator new(8 * v131);
          int v133 = (void *)*v37;
          *unint64_t v37 = v132;
          if (v133) {
            operator delete(v133);
          }
          uint64_t v134 = 0;
          *(void *)(v35 + 8152) = v131;
          do
            *(void *)(*v37 + 8 * v134++) = 0;
          while (v131 != v134);
          uint64_t v135 = *(void **)(v35 + 8160);
          if (!v135) {
            goto LABEL_253;
          }
          uint64_t v136 = v35 + 8160;
          size_t v137 = v135[1];
          size_t v138 = v131 - 1;
          if ((v131 & (v131 - 1)) == 0)
          {
            size_t v139 = v137 & v138;
            *(void *)(*v37 + 8 * v139) = v136;
            while (1)
            {
              uint64_t v140 = (void *)*v135;
              if (!*v135) {
                break;
              }
              size_t v141 = v140[1] & v138;
              if (v141 == v139)
              {
                uint64_t v135 = (void *)*v135;
              }
              else if (*(void *)(*v37 + 8 * v141))
              {
                *uint64_t v135 = *v140;
                uint64_t v142 = 8 * v141;
                *uint64_t v140 = **(void **)(*v37 + v142);
                **(void **)(*v37 + v142) = v140;
              }
              else
              {
                *(void *)(*v37 + 8 * v141) = v135;
                uint64_t v135 = v140;
                size_t v139 = v141;
              }
            }
LABEL_253:
            unint64_t v114 = *(void *)(v35 + 8152);
            if ((v114 & (v114 - 1)) != 0)
            {
              if (v120 >= v114) {
                size_t prime = v120 % v114;
              }
              else {
                size_t prime = v120;
              }
            }
            else
            {
              size_t prime = (v114 - 1) & v120;
            }
            goto LABEL_258;
          }
          if (v137 >= v131) {
            v137 %= v131;
          }
          *(void *)(*v37 + 8 * v137) = v136;
          uint64_t v146 = (void *)*v135;
          if (!*v135) {
            goto LABEL_253;
          }
          while (1)
          {
            size_t v148 = v146[1];
            if (v148 >= v131) {
              v148 %= v131;
            }
            if (v148 != v137)
            {
              if (!*(void *)(*v37 + 8 * v148))
              {
                *(void *)(*v37 + 8 * v148) = v135;
                goto LABEL_239;
              }
              *uint64_t v135 = *v146;
              uint64_t v147 = 8 * v148;
              void *v146 = **(void **)(*v37 + v147);
              **(void **)(*v37 + v147) = v146;
              uint64_t v146 = v135;
            }
            size_t v148 = v137;
LABEL_239:
            uint64_t v135 = v146;
            uint64_t v146 = (void *)*v146;
            size_t v137 = v148;
            if (!v146) {
              goto LABEL_253;
            }
          }
        }
        unint64_t v110 = *(void *)(*(void *)v98 + 8);
        if ((v92 & (v92 - 1)) != 0)
        {
          if (v110 >= v92) {
            v110 %= v92;
          }
        }
        else
        {
          v110 &= v92 - 1;
        }
        BOOL v109 = (void *)(*v101 + 8 * v110);
      }
      *BOOL v109 = v98;
      goto LABEL_172;
    }
LABEL_393:
    abort();
  }
LABEL_391:
  void *v16 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A19445A4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1944AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::CustomRenderState>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v55, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v53, v9, v4, v6, *(void *)(v9 + 32));
  if (v54 != v58)
  {
    unint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *unint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v4[4];
      if (v12 >> 39 < (v4[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v4[7],
            uint64_t v16 = v4[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v4[11];
        uint64_t v22 = v4[10] + 24 * v15;
      }
      else
      {
        uint64_t v21 = v4[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = **(void **)(a1 + 8);
      uint64_t v25 = *(void **)v24;
      unint64_t v26 = *(void **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0xC94DD89A7B09BE9CLL)
        {
          v25 += 5;
          if (v25 == v26) {
            goto LABEL_30;
          }
        }
      }
      if (v25 == v26)
      {
LABEL_30:
        uint64_t v27 = 0;
        if (*(unsigned char *)(v23 + 17)) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v27 = v25[3];
        BOOL v28 = (std::__shared_weak_count *)v25[4];
        if (v28
          && (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
              !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (*(unsigned char *)(v23 + 17))
          {
LABEL_31:
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
            if (!*(unsigned char *)(v23 + 17))
            {
              std::__throw_bad_optional_access[abi:nn180100]();
              __break(1u);
            }
            unsigned __int8 v30 = *(unsigned char *)(v23 + 16) + *(unsigned char *)(v29 + 2620);
            BOOL v31 = *(void **)(a1 + 8);
            unint64_t v32 = HIDWORD(*v11);
            unint64_t v33 = v30 | (*v11 << 32);
            v60[0] = &unk_1EF5233A8;
            v60[1] = v33;
            int v61 = v32;
            uint64_t v65 = v63;
            uint64_t v62 = v60;
            v63[0] = &unk_1EF5233A8;
            v63[1] = v33;
            int v64 = v32;
            int v66 = 0;
            ecs2::Runtime::queueCommand(v31, (uint64_t)v63);
            if (v66 != -1) {
              ((void (*)(char *, void *))off_1EF58FE68[v66])(&v59, v63);
            }
            int v66 = -1;
            if (v62 == v60)
            {
              (*(void (**)(void *))(v60[0] + 32))(v60);
            }
            else if (v62)
            {
              (*(void (**)(void))(*v62 + 40))();
            }
          }
        }
        else if (*(unsigned char *)(v23 + 17))
        {
          goto LABEL_31;
        }
      }
      uint64_t v34 = v58;
      unint64_t v10 = *(unint64_t **)(v55 + 32);
      if (++v58 != v10)
      {
        uint64_t v35 = v56[4];
        unint64_t v36 = (v56[5] - v35) >> 3;
        unint64_t v37 = v34 + 2;
        while (1)
        {
          unint64_t v38 = *((unsigned int *)v37 - 1);
          unint64_t v39 = v38 >> 7;
          if (v38 >> 7 < v36)
          {
            uint64_t v40 = *(void *)(v35 + 8 * v39);
            if (v40)
            {
              unint64_t v41 = *(unsigned __int16 *)(v40 + 2 * (v38 & 0x7F));
              uint64_t v43 = v56[7];
              uint64_t v42 = v56[8];
              if (v41 < (v42 - v43) >> 3)
              {
                uint64_t v44 = v43 + 8 * v41;
                if (v44 != v42 && *(_DWORD *)(v44 + 4) == v38)
                {
                  uint64_t v46 = v57[4];
                  if (v39 < (v57[5] - v46) >> 3)
                  {
                    uint64_t v47 = *(void *)(v46 + 8 * v39);
                    if (v47)
                    {
                      unint64_t v48 = *(unsigned __int16 *)(v47 + 2 * (v38 & 0x7F));
                      uint64_t v50 = v57[7];
                      uint64_t v49 = v57[8];
                      if (v48 < (v49 - v50) >> 3)
                      {
                        uint64_t v51 = v50 + 8 * v48;
                        if (v51 != v49 && *(_DWORD *)(v51 + 4) == v38) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v58 = v37;
          BOOL v20 = v37++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        unint64_t v10 = v37 - 1;
      }
LABEL_9:
      if (v54 == v10) {
        goto LABEL_62;
      }
    }
  }
  unint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_62:
  *unint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupTest>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::AssociationHandle>(v3);
  uint64_t v7 = (unint64_t *)v4[7];
  uint64_t v6 = (uint64_t *)v4[8];
  uint64_t v8 = (char *)v6 - (char *)v7;
  if (v6 != (uint64_t *)v7)
  {
    if ((v9 = *((unsigned int *)v7 + 1), v10 = v4[4], unint64_t v11 = (v4[5] - v10) >> 3, v9 >> 7 >= v11)
      || (uint64_t v12 = *(void *)(v10 + 8 * (v9 >> 7))) == 0
      || (unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * (v9 & 0x7F)), v13 >= v8 >> 3)
      || ((v14 = (uint64_t *)&v7[v13], v14 != v6) ? (BOOL v15 = *((_DWORD *)v14 + 1) == v9) : (BOOL v15 = 0), !v15))
    {
      unint64_t v16 = v8 >> 3;
      uint64_t v17 = (uint64_t *)(v7 + 1);
      do
      {
        if (v17 == v6) {
          goto LABEL_120;
        }
        unint64_t v18 = *((unsigned int *)v17 + 1);
        uint64_t v19 = (uint64_t *)v4[8];
        if (v18 >> 7 < v11)
        {
          uint64_t v20 = *(void *)(v10 + 8 * (v18 >> 7));
          uint64_t v19 = (uint64_t *)v4[8];
          if (v20)
          {
            unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (v18 & 0x7F));
            uint64_t v19 = (uint64_t *)v4[8];
            if (v16 > v21)
            {
              uint64_t v19 = (uint64_t *)&v7[v21];
              if (*((_DWORD *)v19 + 1) != v18) {
                uint64_t v19 = (uint64_t *)v4[8];
              }
            }
          }
        }
        ++v17;
      }
      while (v19 == v6);
      uint64_t v7 = (unint64_t *)(v17 - 1);
    }
  }
  if (v6 != (uint64_t *)v7)
  {
    uint64_t v22 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v78 = v2;
    do
    {
      *uint64_t v22 = *v7;
      unint64_t v24 = *v7;
      unint64_t v25 = HIDWORD(*v7);
      unint64_t v26 = *v7 >> 39;
      uint64_t v27 = v4[4];
      if (v26 < (v4[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v26)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v24) & 0x7F)),
            uint64_t v31 = v4[7],
            uint64_t v30 = v4[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v25) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v4[11];
        uint64_t v35 = v4[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v4[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = (unsigned int *)v35;
      }
      uint64_t v37 = v5[4];
      if (v26 < (v5[5] - v37) >> 3
        && (uint64_t v38 = *(void *)(v37 + 8 * v26)) != 0
        && (unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v24) & 0x7F)),
            uint64_t v41 = v5[7],
            uint64_t v40 = v5[8],
            v39 < (v40 - v41) >> 3)
        && ((uint64_t v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == v25) : (v43 = 0), v43))
      {
        uint64_t v44 = v5[11];
        uint64_t v45 = v5[10] + 16 * v39;
      }
      else
      {
        uint64_t v44 = v5[11];
        uint64_t v45 = v44;
      }
      if (v45 == v44) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v45;
      }
      uint64_t v47 = ***(void ****)(v2 + 8);
      if (v47 != *(void **)(**(void **)(v2 + 8) + 8))
      {
        while (*v47 != 0x41D4E9297E100630)
          v47 += 5;
      }
      unint64_t v48 = (int8x8_t *)v47[3];
      uint64_t v49 = (std::__shared_weak_count *)v47[4];
      if (v49
        && (atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed),
            !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        int8x8_t v50 = v48[104];
        if (!*(void *)&v50)
        {
LABEL_72:
          uint64_t v54 = 0;
          uint64_t v2 = v78;
          goto LABEL_74;
        }
      }
      else
      {
        int8x8_t v50 = v48[104];
        if (!*(void *)&v50) {
          goto LABEL_72;
        }
      }
      unint64_t v51 = *v36;
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(v50);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        unint64_t v53 = *v36;
        if (*(void *)&v50 <= v51) {
          unint64_t v53 = v51 % *(void *)&v50;
        }
      }
      else
      {
        unint64_t v53 = (v50.i32[0] - 1) & v51;
      }
      uint64_t v54 = *(int8x8_t **)(*(void *)&v48[103] + 8 * v53);
      if (v54)
      {
        uint64_t v54 = (int8x8_t *)*v54;
        uint64_t v2 = v78;
        if (!v54) {
          goto LABEL_74;
        }
        if (v52.u32[0] < 2uLL)
        {
          uint64_t v55 = *(void *)&v50 - 1;
          while (1)
          {
            int8x8_t v57 = v54[1];
            if (*(void *)&v57 == v51)
            {
              if (v54[2].i32[0] == v51) {
                goto LABEL_74;
              }
            }
            else if ((*(void *)&v57 & v55) != v53)
            {
              goto LABEL_70;
            }
            uint64_t v54 = (int8x8_t *)*v54;
            if (!v54) {
              goto LABEL_74;
            }
          }
        }
        while (1)
        {
          int8x8_t v56 = v54[1];
          if (*(void *)&v56 == v51)
          {
            if (v54[2].i32[0] == v51) {
              goto LABEL_74;
            }
          }
          else
          {
            if (*(void *)&v56 >= *(void *)&v50) {
              *(void *)&v56 %= *(void *)&v50;
            }
            if (*(void *)&v56 != v53)
            {
LABEL_70:
              uint64_t v54 = 0;
              goto LABEL_74;
            }
          }
          uint64_t v54 = (int8x8_t *)*v54;
          if (!v54) {
            goto LABEL_74;
          }
        }
      }
      uint64_t v2 = v78;
LABEL_74:
      unsigned int v58 = *((unsigned __int8 *)v36 + 4);
      if (v58 == 1)
      {
        if (!v54)
        {
LABEL_83:
          unsigned int v58 = 0;
          goto LABEL_105;
        }
        unint64_t v63 = (void *)v54[6];
        goto LABEL_104;
      }
      if (*((unsigned char *)v36 + 4)) {
        goto LABEL_83;
      }
      if (v46 && v54)
      {
        int8x8_t v59 = v54[4];
        if (v59)
        {
          unint64_t v60 = *(void *)(v46 + 8);
          uint8x8_t v61 = (uint8x8_t)vcnt_s8(v59);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            unint64_t v62 = *(void *)(v46 + 8);
            if (v60 >= *(void *)&v59) {
              unint64_t v62 = v60 % *(void *)&v59;
            }
          }
          else
          {
            unint64_t v62 = (*(void *)&v59 - 1) & v60;
          }
          unint64_t v63 = *(void **)(*(void *)&v54[3] + 8 * v62);
          if (v63)
          {
            unint64_t v63 = (void *)*v63;
            if (v63)
            {
              if (v61.u32[0] < 2uLL)
              {
                uint64_t v64 = *(void *)&v59 - 1;
                while (1)
                {
                  uint64_t v66 = v63[1];
                  if (v60 == v66)
                  {
                    if (v63[2] == v60) {
                      goto LABEL_104;
                    }
                  }
                  else if ((v66 & v64) != v62)
                  {
                    goto LABEL_103;
                  }
                  unint64_t v63 = (void *)*v63;
                  if (!v63) {
                    goto LABEL_104;
                  }
                }
              }
              do
              {
                unint64_t v65 = v63[1];
                if (v60 == v65)
                {
                  if (v63[2] == v60) {
                    break;
                  }
                }
                else
                {
                  if (v65 >= *(void *)&v59) {
                    v65 %= *(void *)&v59;
                  }
                  if (v65 != v62) {
                    goto LABEL_103;
                  }
                }
                unint64_t v63 = (void *)*v63;
              }
              while (v63);
            }
          }
        }
        else
        {
LABEL_103:
          unint64_t v63 = 0;
        }
LABEL_104:
        unsigned int v58 = v63 != 0;
      }
LABEL_105:
      uint64_t v67 = *(void **)(v2 + 8);
      unint64_t v68 = HIDWORD(*v22);
      unint64_t v69 = v58 | (*v22 << 32);
      v80[0] = &unk_1EF523678;
      v80[1] = v69;
      int v81 = v68;
      unint64_t v85 = v83;
      unint64_t v82 = v80;
      v83[0] = &unk_1EF523678;
      v83[1] = v69;
      int v84 = v68;
      int v86 = 0;
      ecs2::Runtime::queueCommand(v67, (uint64_t)v83);
      if (v86 != -1) {
        ((void (*)(char *, void *))off_1EF591178[v86])(&v79, v83);
      }
      int v86 = -1;
      if (v82 == v80)
      {
        (*(void (**)(void *))(v80[0] + 32))(v80);
      }
      else if (v82)
      {
        (*(void (**)(void))(*v82 + 40))();
      }
      uint64_t v70 = v4[4];
      uint64_t v71 = v4[7];
      uint64_t v23 = (uint64_t *)v4[8];
      long long v72 = (uint64_t *)(v7 + 1);
      while (v72 != v23)
      {
        unint64_t v73 = *((unsigned int *)v72 + 1);
        uint64_t v74 = v4[8];
        if (v73 >> 7 < (v4[5] - v70) >> 3)
        {
          uint64_t v75 = *(void *)(v70 + 8 * (v73 >> 7));
          uint64_t v74 = v4[8];
          if (v75)
          {
            unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * (v73 & 0x7F));
            uint64_t v74 = v4[8];
            if (((uint64_t)v23 - v71) >> 3 > v76)
            {
              uint64_t v74 = v71 + 8 * v76;
              if (*(_DWORD *)(v74 + 4) != v73) {
                uint64_t v74 = v4[8];
              }
            }
          }
        }
        ++v72;
        if ((uint64_t *)v74 != v23)
        {
          uint64_t v23 = v72 - 1;
          break;
        }
      }
      uint64_t v7 = (unint64_t *)v23;
    }
    while (v6 != v23);
  }
LABEL_120:
  unint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A1945ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v4, v6, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)result;
  }
  else
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = (void *)result;
    do
    {
      unint64_t v13 = *v11;
      *uint64_t v12 = *v11;
      unint64_t v14 = *v11;
      uint64_t v15 = v6[4];
      if (v14 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * (v14 >> 39))) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((unint64_t v20 = HIDWORD(v14), v21 = v19 + 8 * v17, v21 != v18)
          ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v20)
          : (BOOL v22 = 0),
            v22))
      {
        uint64_t v23 = (unsigned char *)(v6[10] + v17);
      }
      else
      {
        uint64_t v23 = (unsigned char *)v6[11];
      }
      if ((*v23 & 0xFE) == 2)
      {
        unint64_t v24 = *(void **)(a1 + 8);
        v50[0] = &unk_1EF5259E8;
        v50[1] = v13 << 32;
        int v51 = HIDWORD(v13);
        uint64_t v55 = v53;
        uint8x8_t v52 = v50;
        v53[0] = &unk_1EF5259E8;
        v53[1] = v13 << 32;
        int v54 = HIDWORD(v13);
        int v56 = 0;
        ecs2::Runtime::queueCommand(v24, (uint64_t)v53);
        if (v56 != -1) {
          ((void (*)(char *, void *))off_1EF58FC28[v56])(&v49, v53);
        }
        int v56 = -1;
        uint64_t result = (uint64_t)v52;
        if (v52 == v50)
        {
          uint64_t result = (*(uint64_t (**)(void *))(v50[0] + 32))(v50);
        }
        else if (v52)
        {
          uint64_t result = (*(uint64_t (**)(void))(*v52 + 40))();
        }
      }
      unint64_t v25 = v48;
      unint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v26 = v46[4];
        unint64_t v27 = (v46[5] - v26) >> 3;
        uint64_t v28 = v25 + 2;
        while (1)
        {
          unint64_t v29 = *((unsigned int *)v28 - 1);
          unint64_t v30 = v29 >> 7;
          if (v29 >> 7 < v27)
          {
            uint64_t v31 = *(void *)(v26 + 8 * v30);
            if (v31)
            {
              unint64_t v32 = *(unsigned __int16 *)(v31 + 2 * (v29 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t result = v46[8];
              if (v32 < (result - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v32;
                if (v34 != result && *(_DWORD *)(v34 + 4) == v29)
                {
                  uint64_t v36 = v47[4];
                  uint64_t result = v47[5] - v36;
                  if (v30 < result >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v30);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v29 & 0x7F));
                      uint64_t v40 = v47[7];
                      uint64_t v39 = v47[8];
                      uint64_t result = v39 - v40;
                      if (v38 < (v39 - v40) >> 3)
                      {
                        uint64_t v41 = v40 + 8 * v38;
                        if (v41 != v39 && *(_DWORD *)(v41 + 4) == v29) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v48 = v28;
          BOOL v22 = v28++ == v11;
          if (v22) {
            goto LABEL_9;
          }
        }
        unint64_t v11 = v28 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  *uint64_t v12 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::IsDecal>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderItemID>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v6;
  }
  uint64_t v45 = v7 + 32;
  uint64_t v46 = (void *)v4;
  uint64_t v47 = (void *)v5;
  unint64_t v48 = (void *)v6;
  uint64_t v8 = *(void **)(v7 + 56);
  uint64_t v9 = *(void **)(v7 + 64);
  char v49 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v45))
  {
    uint64_t v10 = v8 + 1;
    do
    {
      uint64_t v8 = v10;
      char v49 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v45);
      uint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  unint64_t v13 = (uint64_t *)result;
  while (v9 != v8)
  {
    uint64_t *v13 = *v8;
    uint64_t v15 = **(void **)(a1 + 8);
    uint64_t v16 = *(void **)v15;
    unint64_t v17 = *(void **)(v15 + 8);
    if (v16 != v17)
    {
      while (*v16 != 0x41D4E9297E100630)
      {
        v16 += 5;
        if (v16 == v17) {
          goto LABEL_25;
        }
      }
    }
    if (v16 == v17)
    {
LABEL_25:
      uint64_t v19 = 0;
      unint64_t v20 = MEMORY[0x2910];
      if (!MEMORY[0x2910]) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v19 = (void *)v16[3];
      uint64_t v18 = (std::__shared_weak_count *)v16[4];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          unint64_t v20 = v19[1314];
          if (v20) {
            goto LABEL_27;
          }
LABEL_26:
          int v51 = (uint64_t (**)())(v19[1312] + 1560);
          unint64_t v20 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v19 + 91, &v51);
          *(int64x2_t *)int v54 = vdupq_n_s64(1uLL);
          v54[16] = 1;
          std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v19 + 86), v20, v20, (uint64_t)v54);
          v19[1314] = v20;
          goto LABEL_27;
        }
      }
      unint64_t v20 = v19[1314];
      if (!v20) {
        goto LABEL_26;
      }
    }
LABEL_27:
    uint64_t v21 = *(void **)(a1 + 8);
    uint64_t v22 = *v13;
    int v51 = &off_1EF521B30;
    *(void *)&long long v52 = v20;
    *((void *)&v52 + 1) = v22;
    unint64_t v53 = &v51;
    uint64_t v55 = v54;
    *(void *)int v54 = &off_1EF521B30;
    *(_OWORD *)&v54[8] = v52;
    int v56 = 0;
    ecs2::Runtime::queueCommand(v21, (uint64_t)v54);
    if (v56 != -1) {
      ((void (*)(char *, unsigned char *))off_1EF58FE68[v56])(&v50, v54);
    }
    int v56 = -1;
    uint64_t result = (uint64_t)v53;
    if (v53 == &v51)
    {
      uint64_t result = ((uint64_t (*)(uint64_t (***)()))v51[4])(&v51);
    }
    else if (v53)
    {
      uint64_t result = (*v53)[5]();
    }
    uint64_t v8 = *(void **)(v45 + 32);
    unint64_t v14 = v49 + 1;
    char v49 = v14;
    if (v14 != v8)
    {
      uint64_t v23 = v46[4];
      while (1)
      {
        unint64_t v24 = *((unsigned int *)v14 + 1);
        unint64_t v25 = v24 >> 7;
        if (v24 >> 7 < (v46[5] - v23) >> 3)
        {
          uint64_t v26 = *(void *)(v23 + 8 * v25);
          if (v26)
          {
            uint64_t v27 = v24 & 0x7F;
            unint64_t v28 = *(unsigned __int16 *)(v26 + 2 * v27);
            uint64_t v29 = v46[7];
            uint64_t result = v46[8];
            if (v28 < (result - v29) >> 3)
            {
              uint64_t v30 = v29 + 8 * v28;
              if (v30 != result && *(_DWORD *)(v30 + 4) == v24)
              {
                uint64_t v32 = v47[4];
                uint64_t result = v47[5] - v32;
                if (v25 < result >> 3)
                {
                  uint64_t v33 = *(void *)(v32 + 8 * v25);
                  if (v33)
                  {
                    unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v27);
                    uint64_t v35 = v47[7];
                    uint64_t result = v47[8];
                    if (v34 < (result - v35) >> 3)
                    {
                      uint64_t v36 = v35 + 8 * v34;
                      if (v36 != result && *(_DWORD *)(v36 + 4) == v24)
                      {
                        uint64_t v38 = v48[4];
                        uint64_t result = v48[5] - v38;
                        if (v25 < result >> 3)
                        {
                          uint64_t v39 = *(void *)(v38 + 8 * v25);
                          if (v39)
                          {
                            unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * v27);
                            uint64_t v42 = v48[7];
                            uint64_t v41 = v48[8];
                            uint64_t result = v41 - v42;
                            if (v40 < (v41 - v42) >> 3)
                            {
                              uint64_t v43 = v42 + 8 * v40;
                              if (*(_DWORD *)(v43 + 4) == v24 && v43 != v41) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v8)
        {
          unint64_t v14 = v8;
          goto LABEL_14;
        }
      }
      uint64_t v8 = v14;
LABEL_14:
      char v49 = v14;
    }
  }
  uint64_t *v13 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MainPassItem>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::IsDecal>(v3);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::IsS2>(v3);
  uint64_t v7 = (void *)gdc::Registry::storage<md::ls::IsMercator>(v3);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  uint64_t v9 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(v3);
  uint64_t v10 = (void *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v3);
  unint64_t v11 = v10;
  uint64_t v12 = v10 + 4;
  if (v4[8] - v4[7] >= v10[8] - v10[7]) {
    uint64_t v13 = (uint64_t)(v10 + 4);
  }
  else {
    uint64_t v13 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v100, v13, v10, v4, *(void *)(v13 + 24));
  if (v4[8] - v4[7] >= v11[8] - v11[7]) {
    uint64_t v14 = (uint64_t)v12;
  }
  else {
    uint64_t v14 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v98, v14, v11, v4, *(void *)(v14 + 32));
  if (v99 != v103)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      unint64_t *result = *v16;
      unint64_t v17 = *v16;
      unint64_t v18 = HIDWORD(*v16);
      unint64_t v19 = *v16 >> 39;
      uint64_t v20 = v11[4];
      if (v19 < (v11[5] - v20) >> 3
        && (uint64_t v21 = *(void *)(v20 + 8 * v19)) != 0
        && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v24 = v11[7],
            uint64_t v23 = v11[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = v24 + 8 * v22, v25 != v23) ? (BOOL v26 = *(_DWORD *)(v25 + 4) == v18) : (BOOL v26 = 0), v26))
      {
        uint64_t v27 = (char *)v11[11];
        unint64_t v28 = (char *)(v11[10] + v22);
      }
      else
      {
        uint64_t v27 = (char *)v11[11];
        unint64_t v28 = v27;
      }
      if (v28 == v27) {
        unint64_t v28 = 0;
      }
      uint64_t v29 = v5[4];
      if (v19 < (v5[5] - v29) >> 3
        && (uint64_t v30 = *(void *)(v29 + 8 * v19)) != 0
        && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v32 = v5[7],
            uint64_t v33 = v5[8],
            v31 < (v33 - v32) >> 3)
        && ((uint64_t v34 = v32 + 8 * v31, v34 != v33) ? (v35 = *(_DWORD *)(v34 + 4) == v18) : (v35 = 0), v35))
      {
        unint64_t v36 = v5[11];
        unint64_t v37 = v5[10] + v31;
      }
      else
      {
        unint64_t v36 = v5[11];
        unint64_t v37 = v36;
      }
      uint64_t v38 = v6[4];
      if (v19 < (v6[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v19)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v42 = v6[7],
            uint64_t v41 = v6[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v18) : (v44 = 0), v44))
      {
        unint64_t v45 = v6[11];
        unint64_t v46 = v6[10] + v40;
      }
      else
      {
        unint64_t v45 = v6[11];
        unint64_t v46 = v45;
      }
      uint64_t v47 = v7[4];
      if (v19 < (v7[5] - v47) >> 3
        && (uint64_t v48 = *(void *)(v47 + 8 * v19)) != 0
        && (unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v51 = v7[7],
            uint64_t v50 = v7[8],
            v49 < (v50 - v51) >> 3)
        && ((uint64_t v52 = v51 + 8 * v49, v52 != v50) ? (v53 = *(_DWORD *)(v52 + 4) == v18) : (v53 = 0), v53))
      {
        unint64_t v54 = v7[11];
        unint64_t v55 = v7[10] + v49;
      }
      else
      {
        unint64_t v54 = v7[11];
        unint64_t v55 = v54;
      }
      uint64_t v56 = v8[4];
      if (v19 < (v8[5] - v56) >> 3
        && (uint64_t v57 = *(void *)(v56 + 8 * v19)) != 0
        && (unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v60 = v8[7],
            uint64_t v59 = v8[8],
            v58 < (v59 - v60) >> 3)
        && ((uint64_t v61 = v60 + 8 * v58, v61 != v59) ? (v62 = *(_DWORD *)(v61 + 4) == v18) : (v62 = 0), v62))
      {
        unint64_t v63 = v8[11];
        unint64_t v64 = v8[10] + v58;
      }
      else
      {
        unint64_t v63 = v8[11];
        unint64_t v64 = v63;
      }
      uint64_t v65 = v9[4];
      if (v19 < (v9[5] - v65) >> 3
        && (uint64_t v66 = *(void *)(v65 + 8 * v19)) != 0
        && (unint64_t v67 = *(unsigned __int16 *)(v66 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v68 = v9[7],
            uint64_t v69 = v9[8],
            v67 < (v69 - v68) >> 3)
        && ((uint64_t v70 = v68 + 8 * v67, v70 != v69) ? (v71 = *(_DWORD *)(v70 + 4) == v18) : (v71 = 0), v71))
      {
        uint64_t v72 = v9[11];
        uint64_t v73 = v9[10] + 8 * v67;
        if (v37 == v36)
        {
LABEL_68:
          if (v64 == v63 || !v64)
          {
            char v74 = v55 == v54 || v55 == 0;
          }
          else
          {
            BOOL v75 = v73 == v72 || v73 == 0;
            if (v75) {
              char v74 = 8;
            }
            else {
              char v74 = 10;
            }
            if (v75) {
              char v76 = 9;
            }
            else {
              char v76 = 11;
            }
            if (v46) {
              BOOL v77 = v46 == v45;
            }
            else {
              BOOL v77 = 1;
            }
            if (!v77) {
              char v74 = v76;
            }
          }
          goto LABEL_90;
        }
      }
      else
      {
        uint64_t v72 = v9[11];
        uint64_t v73 = v72;
        if (v37 == v36) {
          goto LABEL_68;
        }
      }
      if (!v37) {
        goto LABEL_68;
      }
      char v74 = 5;
LABEL_90:
      *unint64_t v28 = v74;
      char v79 = v103;
      uint64_t v16 = *(unint64_t **)(v100 + 32);
      if (++v103 != v16)
      {
        uint64_t v80 = v101[4];
        unint64_t v81 = (v101[5] - v80) >> 3;
        unint64_t v82 = v79 + 2;
        while (1)
        {
          unint64_t v83 = *((unsigned int *)v82 - 1);
          unint64_t v84 = v83 >> 7;
          if (v83 >> 7 < v81)
          {
            uint64_t v85 = *(void *)(v80 + 8 * v84);
            if (v85)
            {
              unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * (v83 & 0x7F));
              uint64_t v88 = v101[7];
              uint64_t v87 = v101[8];
              if (v86 < (v87 - v88) >> 3)
              {
                uint64_t v89 = v88 + 8 * v86;
                if (v89 != v87 && *(_DWORD *)(v89 + 4) == v83)
                {
                  uint64_t v91 = v102[4];
                  if (v84 < (v102[5] - v91) >> 3)
                  {
                    uint64_t v92 = *(void *)(v91 + 8 * v84);
                    if (v92)
                    {
                      unint64_t v93 = *(unsigned __int16 *)(v92 + 2 * (v83 & 0x7F));
                      uint64_t v95 = v102[7];
                      uint64_t v94 = v102[8];
                      if (v93 < (v94 - v95) >> 3)
                      {
                        uint64_t v96 = v95 + 8 * v93;
                        if (v96 != v94 && *(_DWORD *)(v96 + 4) == v83) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v103 = v82;
          BOOL v26 = v82++ == v16;
          if (v26) {
            goto LABEL_9;
          }
        }
        uint64_t v16 = v82 - 1;
      }
LABEL_9:
      if (v99 == v16) {
        goto LABEL_111;
      }
    }
  }
  uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_111:
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  CanUpdateWithStyle = (void *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(v3);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = v4 + 4;
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v4[8] - v4[7]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  if (CanUpdateWithStyle[8] - CanUpdateWithStyle[7] < v8[4] - v8[3]) {
    uint64_t v8 = CanUpdateWithStyle + 4;
  }
  float32x4_t v279 = v8;
  float32x4_t v280 = v4;
  unsigned int v281 = (void *)v6;
  double v282 = CanUpdateWithStyle;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  float v283 = v10;
  double v277 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v279))
  {
    unint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      float v283 = v11;
      if (v11 == v277) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v279);
      unint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v277 == v10)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_455;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  float64_t v275 = v4;
  uint64_t v276 = v2;
  double v273 = v7;
  double v274 = CanUpdateWithStyle;
  double v272 = result;
  do
  {
    void *result = *v10;
    unint64_t v15 = *v10;
    uint64_t v16 = HIDWORD(*v10);
    unint64_t v17 = *v10 >> 39;
    uint64_t v18 = v4[4];
    if (v17 < (v4[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v4[7], v21 = v4[8], v20 < (v21 - v22) >> 3)
      && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
    {
      uint64_t v25 = v4[11];
      uint64_t v26 = v4[10] + 24 * v20;
    }
    else
    {
      uint64_t v25 = v4[11];
      uint64_t v26 = v25;
    }
    if (v26 == v25) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = (void *)v26;
    }
    uint64_t v28 = v7[4];
    if (v17 < (v7[5] - v28) >> 3
      && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
      && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)), v32 = v7[7], v31 = v7[8], v30 < (v31 - v32) >> 3)
      && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
    {
      uint64_t v35 = v7[11];
      uint64_t v36 = v7[10] + 8 * v30;
    }
    else
    {
      uint64_t v35 = v7[11];
      uint64_t v36 = v35;
    }
    if (v36 == v35) {
      unint64_t v37 = 0;
    }
    else {
      unint64_t v37 = (unint64_t *)v36;
    }
    uint64_t v38 = CanUpdateWithStyle[4];
    if (v17 < (CanUpdateWithStyle[5] - v38) >> 3
      && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
      && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
          uint64_t v42 = CanUpdateWithStyle[7],
          uint64_t v41 = CanUpdateWithStyle[8],
          v40 < (v41 - v42) >> 3)
      && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
    {
      uint64_t v45 = CanUpdateWithStyle[11];
      uint64_t v46 = CanUpdateWithStyle[10] + 4 * v40;
    }
    else
    {
      uint64_t v45 = CanUpdateWithStyle[11];
      uint64_t v46 = v45;
    }
    if (v46 == v45) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = (float *)v46;
    }
    uint64_t v48 = **(void **)(v2 + 8);
    unint64_t v49 = *(void **)v48;
    uint64_t v50 = *(void **)(v48 + 8);
    if (v49 != v50)
    {
      while (*v49 != 0x41D4E9297E100630)
      {
        v49 += 5;
        if (v49 == v50) {
          goto LABEL_56;
        }
      }
    }
    if (v49 == v50)
    {
LABEL_56:
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v52 = v49[3];
      uint64_t v51 = (std::__shared_weak_count *)v49[4];
      if (v51)
      {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
    uint64_t v53 = **(void **)(v2 + 8);
    unint64_t v54 = *(void **)v53;
    unint64_t v55 = *(void **)(v53 + 8);
    if (v54 != v55)
    {
      while (*v54 != 0x4EDAD23DFB014132)
      {
        v54 += 5;
        if (v54 == v55) {
          goto LABEL_65;
        }
      }
    }
    if (v54 == v55)
    {
LABEL_65:
      uint64_t v56 = 0;
    }
    else
    {
      uint64_t v56 = v54[3];
      uint64_t v57 = (std::__shared_weak_count *)v54[4];
      if (v57)
      {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
    *(void *)uint64_t v286 = *v27;
    uint64_t v58 = *(void *)(v56 + 120);
    if (*(unsigned int *)v286 >= (unint64_t)((*(void *)(v56 + 128) - v58) >> 3)) {
      goto LABEL_74;
    }
    uint64_t v59 = *(void *)(v58 + 8 * *(unsigned int *)v286);
    if (!v59) {
      goto LABEL_75;
    }
    if (*(_DWORD *)&v286[4] != HIDWORD(v59)
      || ((uint64_t v60 = *(void *)(v56 + 144),
           uint64_t v61 = (uint64_t *)(v60 + 8 * v59),
           v61 != *(uint64_t **)(v56 + 152))
        ? (BOOL v62 = v60 == 0)
        : (BOOL v62 = 1),
          v62))
    {
LABEL_74:
      uint64_t v59 = 0;
    }
    else
    {
      unint64_t v103 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v56 + 56, *(unint64_t *)v286, v286);
      ++v103[3];
      uint64_t v59 = *v61;
    }
LABEL_75:
    unint64_t v63 = *(int8x8_t **)v56;
    v285[0] = v59;
    v285[1] = 0;
    gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v291, v63, v285, 0);
    uint64_t v64 = v291;
    v65.n128_f32[0] = *v47;
    (*(void (**)(char *__return_ptr, uint64_t, __n128))(*(void *)v291 + 1008))(&v288, v291, v65);
    if (v288)
    {
      v286[0] = 0;
    }
    else
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t, float))(*(void *)v64 + 200))(v286, v64, *v47);
      if (!v288)
      {
        v66.i32[0] = 0;
        v67.i8[0] = v286[0];
        int8x16_t v96 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v67, v66), 0);
        v67.i64[0] = *(void *)&v286[4];
        v67.i32[2] = v287;
        int8x16_t v66 = vbslq_s8(v96, (int8x16_t)0, v67);
        goto LABEL_79;
      }
    }
    v66.i64[0] = v289;
    v66.i32[2] = v290;
LABEL_79:
    float32x4_t v278 = (float32x4_t)v66;
    unint64_t v68 = *v37;
    unint64_t v69 = *v37;
    uint64_t v70 = *(void *)(v52 + 2744);
    if (v69 < (*(void *)(v52 + 2752) - v70) >> 3
      && (uint64_t v71 = *(void *)(v70 + 8 * v69)) != 0
      && HIDWORD(v68) == HIDWORD(v71))
    {
      uint64_t v72 = *(void *)(v52 + 2768) + 24 * v71;
      uint64_t v73 = *(void *)(v52 + 2776);
    }
    else
    {
      uint64_t v73 = *(void *)(v52 + 2776);
      uint64_t v72 = v73;
    }
    if (v72 == v73) {
      uint64_t v74 = 0;
    }
    else {
      uint64_t v74 = v72;
    }
    if (v74) {
      goto LABEL_97;
    }
    uint64_t v284 = v27[1];
    v285[0] = v284;
    unint64_t v75 = md::VKMRenderResourcesStore::addKey<md::StyleEmissiveColorCacheKey>(v52, v285, (unint64_t)&v284);
    unint64_t v68 = v75;
    *unint64_t v37 = v75;
    uint64_t v76 = *(void *)(v52 + 2744);
    if (v75 < (unint64_t)((*(void *)(v52 + 2752) - v76) >> 3)
      && (uint64_t v77 = *(void *)(v76 + 8 * v75)) != 0
      && HIDWORD(v75) == HIDWORD(v77))
    {
      uint64_t v78 = *(void *)(v52 + 2768) + 24 * v77;
      uint64_t v79 = *(void *)(v52 + 2776);
    }
    else
    {
      uint64_t v79 = *(void *)(v52 + 2776);
      uint64_t v78 = v79;
    }
    uint64_t v74 = v78 == v79 ? 0 : v78;
    if (v74)
    {
LABEL_97:
      uint64_t v80 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>(v52 + 2680, v68, v37);
      ++v80[3];
    }
    *(void *)(v74 + 8) = v278.i64[0];
    unint64_t v81 = (uint64_t *)(v74 + 8);
    *(_DWORD *)(v74 + 16) = v278.i32[2];
    *(void *)uint64_t v74 = v27[1];
    unint64_t v82 = (void **)(v52 + 2560);
    unint64_t v83 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>((void *)(v52 + 2560), (float *)v74);
    if (v83)
    {
      unint64_t v84 = v83[5];
      if (v84)
      {
        v285[0] = v83[5];
        unsigned int v85 = *(_DWORD *)(*(void *)(v52 + 2448) + 8 * v84);
        uint64_t v86 = *(void *)(v52 + 2472);
        uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>> const&>,std::tuple<>>(v52 + 2344, v84, v285);
        ++v87[3];
        uint64_t v88 = *(void **)(v86 + 24 * v85);
        goto LABEL_422;
      }
    }
    uint64_t v89 = *(void *)(v52 + 2432);
    if (*(void *)(v52 + 2424) == v89)
    {
      uint64_t v92 = (-1431655765 * ((*(void *)(v52 + 2480) - *(void *)(v52 + 2472)) >> 3)) | 0x100000000;
      unint64_t v93 = *(uint64_t **)(v52 + 2456);
      unint64_t v94 = *(void *)(v52 + 2464);
      if ((unint64_t)v93 >= v94)
      {
        uint64_t v97 = *(char **)(v52 + 2448);
        uint64_t v98 = ((char *)v93 - v97) >> 3;
        unint64_t v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 61) {
          goto LABEL_457;
        }
        uint64_t v100 = v94 - (void)v97;
        if (v100 >> 2 > v99) {
          unint64_t v99 = v100 >> 2;
        }
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v101 = v99;
        }
        if (v101)
        {
          if (v101 >> 61) {
            goto LABEL_456;
          }
          BOOL v102 = (char *)operator new(8 * v101);
        }
        else
        {
          BOOL v102 = 0;
        }
        unint64_t v104 = (uint64_t *)&v102[8 * v98];
        uint64_t *v104 = v92;
        uint64_t v95 = v104 + 1;
        if (v93 != (uint64_t *)v97)
        {
          unint64_t v105 = (char *)v93 - v97 - 8;
          if (v105 < 0x58) {
            goto LABEL_460;
          }
          if ((unint64_t)(v97 - v102) < 0x20) {
            goto LABEL_460;
          }
          uint64_t v106 = (v105 >> 3) + 1;
          uint64_t v107 = &v102[(char *)v93 - v97 - 16];
          uint64_t v108 = v93 - 2;
          uint64_t v109 = v106 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v110 = *(_OWORD *)v108;
            *((_OWORD *)v107 - 1) = *((_OWORD *)v108 - 1);
            *(_OWORD *)uint64_t v107 = v110;
            v107 -= 32;
            v108 -= 4;
            v109 -= 4;
          }
          while (v109);
          v104 -= v106 & 0x3FFFFFFFFFFFFFFCLL;
          v93 -= v106 & 0x3FFFFFFFFFFFFFFCLL;
          if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_460:
            do
            {
              uint64_t v111 = *--v93;
              *--unint64_t v104 = v111;
            }
            while (v93 != (uint64_t *)v97);
          }
          unint64_t v93 = *(uint64_t **)(v52 + 2448);
        }
        *(void *)(v52 + 2448) = v104;
        *(void *)(v52 + 2456) = v95;
        *(void *)(v52 + 2464) = &v102[8 * v101];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *unint64_t v93 = v92;
        uint64_t v95 = v93 + 1;
      }
      *(void *)(v52 + 2456) = v95;
      unint64_t v91 = *(v95 - 1);
    }
    else
    {
      uint64_t v90 = *(void *)(v89 - 8);
      *(void *)(v52 + 2432) = v89 - 8;
      *(_DWORD *)(*(void *)(v52 + 2448) + 8 * v90) = -1431655765
                                                     * ((*(void *)(v52 + 2480) - *(void *)(v52 + 2472)) >> 3);
      *(_DWORD *)(*(void *)(v52 + 2448) + 8 * v90 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v52 + 2448)
                                                                                               + 8 * v90
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      unint64_t v91 = v90 | ((unint64_t)*(unsigned int *)(*(void *)(v52 + 2448) + 8 * v90 + 4) << 32);
    }
    unint64_t v112 = *(void *)(v52 + 2480);
    unint64_t v113 = *(void *)(v52 + 2488);
    if (v112 >= v113)
    {
      uint64_t v115 = *(void *)(v52 + 2472);
      unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - v115) >> 3) + 1;
      if (v116 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_457;
      }
      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - v115) >> 3);
      if (2 * v117 > v116) {
        unint64_t v116 = 2 * v117;
      }
      if (v117 >= 0x555555555555555) {
        unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v118 = v116;
      }
      if (v118 > 0xAAAAAAAAAAAAAAALL) {
LABEL_456:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v119 = (char *)operator new(24 * v118);
      unint64_t v120 = &v119[8 * ((uint64_t)(v112 - v115) >> 3)];
      uint8x8_t v121 = &v119[24 * v118];
      *(void *)unint64_t v120 = 0;
      *((void *)v120 + 1) = 0;
      *((void *)v120 + 2) = 0;
      unint64_t v114 = v120 + 24;
      if (v112 == v115)
      {
        *(void *)(v52 + 2472) = v120;
        *(void *)(v52 + 2480) = v114;
        *(void *)(v52 + 2488) = v121;
      }
      else
      {
        do
        {
          long long v122 = *(_OWORD *)(v112 - 24);
          v112 -= 24;
          *(_OWORD *)(v120 - 24) = v122;
          v120 -= 24;
          *((void *)v120 + 2) = *(void *)(v112 + 16);
          *(void *)(v112 + 8) = 0;
          *(void *)(v112 + 16) = 0;
        }
        while (v112 != v115);
        unint64_t v112 = *(void *)(v52 + 2472);
        uint64_t v123 = *(void *)(v52 + 2480);
        *(void *)(v52 + 2472) = v120;
        *(void *)(v52 + 2480) = v114;
        *(void *)(v52 + 2488) = v121;
        while (v123 != v112)
        {
          unint64_t v124 = *(std::__shared_weak_count **)(v123 - 8);
          if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
          v123 -= 24;
        }
      }
      if (v112) {
        operator delete((void *)v112);
      }
    }
    else
    {
      *(void *)unint64_t v112 = 0;
      *(void *)(v112 + 8) = 0;
      unint64_t v114 = (void *)(v112 + 24);
      *(void *)(v112 + 16) = 0;
    }
    *(void *)(v52 + 2480) = v114;
    uint64_t v125 = *(void **)(v52 + 2504);
    unint64_t v126 = *(void *)(v52 + 2512);
    if ((unint64_t)v125 >= v126)
    {
      unint64_t v112 = *(void *)(v52 + 2496);
      uint64_t v128 = (uint64_t)((uint64_t)v125 - v112) >> 3;
      unint64_t v129 = v128 + 1;
      if ((unint64_t)(v128 + 1) >> 61) {
LABEL_457:
      }
        abort();
      uint64_t v130 = v126 - v112;
      if (v130 >> 2 > v129) {
        unint64_t v129 = v130 >> 2;
      }
      if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v131 = v129;
      }
      if (v131)
      {
        if (v131 >> 61) {
          goto LABEL_456;
        }
        unint64_t v132 = (char *)operator new(8 * v131);
      }
      else
      {
        unint64_t v132 = 0;
      }
      int v133 = &v132[8 * v128];
      *(void *)int v133 = v91;
      float v127 = v133 + 8;
      if (v125 != (void *)v112)
      {
        unint64_t v134 = (unint64_t)v125 - v112 - 8;
        if (v134 < 0x58) {
          goto LABEL_461;
        }
        if (v112 - (unint64_t)v132 < 0x20) {
          goto LABEL_461;
        }
        uint64_t v135 = (v134 >> 3) + 1;
        uint64_t v136 = (_OWORD *)((char *)v125 + (void)v132 - v112 - 16);
        size_t v137 = (long long *)(v125 - 2);
        uint64_t v138 = v135 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v139 = *v137;
          *(v136 - 1) = *(v137 - 1);
          _OWORD *v136 = v139;
          v136 -= 2;
          v137 -= 2;
          v138 -= 4;
        }
        while (v138);
        v133 -= 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
        v125 -= v135 & 0x3FFFFFFFFFFFFFFCLL;
        if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_461:
          do
          {
            uint64_t v140 = *--v125;
            *((void *)v133 - 1) = v140;
            v133 -= 8;
          }
          while (v125 != (void *)v112);
        }
      }
      *(void *)(v52 + 2496) = v133;
      *(void *)(v52 + 2504) = v127;
      *(void *)(v52 + 2512) = &v132[8 * v131];
      if (v112) {
        operator delete((void *)v112);
      }
    }
    else
    {
      void *v125 = v91;
      float v127 = v125 + 1;
    }
    size_t v141 = (uint64_t *)(v52 + 2344);
    *(void *)(v52 + 2504) = v127;
    unint64_t v142 = *(void *)(v52 + 2352);
    if (v142)
    {
      uint8x8_t v143 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
      v143.i16[0] = vaddlv_u8(v143);
      if (v143.u32[0] > 1uLL)
      {
        unint64_t v112 = v91;
        if (v91 >= v142) {
          unint64_t v112 = v91 % v142;
        }
      }
      else
      {
        unint64_t v112 = (v142 - 1) & v91;
      }
      uint8x8_t v144 = *(void **)(*v141 + 8 * v112);
      if (v144)
      {
        uint64_t v145 = (void *)*v144;
        if (v145)
        {
          if (v143.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v147 = v145[1];
              if (v147 == v91)
              {
                if (v145[2] == v91) {
                  goto LABEL_230;
                }
              }
              else if ((v147 & (v142 - 1)) != v112)
              {
                goto LABEL_191;
              }
              uint64_t v145 = (void *)*v145;
              if (!v145) {
                goto LABEL_191;
              }
            }
          }
          do
          {
            unint64_t v146 = v145[1];
            if (v146 == v91)
            {
              if (v145[2] == v91) {
                goto LABEL_230;
              }
            }
            else
            {
              if (v146 >= v142) {
                v146 %= v142;
              }
              if (v146 != v112) {
                break;
              }
            }
            uint64_t v145 = (void *)*v145;
          }
          while (v145);
        }
      }
    }
LABEL_191:
    size_t v148 = (char *)operator new(0x30uLL);
    *(void *)size_t v148 = 0;
    *((void *)v148 + 1) = v91;
    *((void *)v148 + 2) = v91;
    *(_OWORD *)(v148 + 24) = xmmword_1A28FCC60;
    v148[40] = 0;
    float v149 = (float)(unint64_t)(*(void *)(v52 + 2368) + 1);
    float v150 = *(float *)(v52 + 2376);
    if (!v142 || (float)(v150 * (float)v142) < v149)
    {
      BOOL v151 = v142 < 3 || (v142 & (v142 - 1)) != 0;
      unint64_t v152 = v151 | (2 * v142);
      unint64_t v153 = vcvtps_u32_f32(v149 / v150);
      if (v152 <= v153) {
        size_t prime = v153;
      }
      else {
        size_t prime = v152;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v142 = *(void *)(v52 + 2352);
      }
      if (prime > v142) {
        goto LABEL_204;
      }
      if (prime < v142)
      {
        unint64_t v155 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2368) / *(float *)(v52 + 2376));
        if (v142 < 3 || (uint8x8_t v156 = (uint8x8_t)vcnt_s8((int8x8_t)v142), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
        {
          unint64_t v155 = std::__next_prime(v155);
        }
        else
        {
          uint64_t v157 = 1 << -(char)__clz(v155 - 1);
          if (v155 >= 2) {
            unint64_t v155 = v157;
          }
        }
        if (prime <= v155) {
          size_t prime = v155;
        }
        if (prime < v142) {
LABEL_204:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v52 + 2344, prime);
      }
      unint64_t v142 = *(void *)(v52 + 2352);
      if ((v142 & (v142 - 1)) != 0)
      {
        if (v91 >= v142) {
          unint64_t v112 = v91 % v142;
        }
        else {
          unint64_t v112 = v91;
        }
      }
      else
      {
        unint64_t v112 = (v142 - 1) & v91;
      }
    }
    uint64_t v158 = *v141;
    float v159 = *(void **)(*v141 + 8 * v112);
    if (v159)
    {
      *(void *)size_t v148 = *v159;
LABEL_228:
      void *v159 = v148;
      goto LABEL_229;
    }
    *(void *)size_t v148 = *(void *)(v52 + 2360);
    *(void *)(v52 + 2360) = v148;
    *(void *)(v158 + 8 * v112) = v52 + 2360;
    if (*(void *)v148)
    {
      unint64_t v160 = *(void *)(*(void *)v148 + 8);
      if ((v142 & (v142 - 1)) != 0)
      {
        if (v160 >= v142) {
          v160 %= v142;
        }
      }
      else
      {
        v160 &= v142 - 1;
      }
      float v159 = (void *)(*v141 + 8 * v160);
      goto LABEL_228;
    }
LABEL_229:
    ++*(void *)(v52 + 2368);
LABEL_230:
    float v161 = *(float *)(v74 + 8);
    float v162 = *(float *)(v74 + 12);
    float v163 = *(float *)(v74 + 16);
    unint64_t v164 = *(void *)(v52 + 2568);
    unint64_t v165 = LODWORD(v161) - 0x61C8864680B583EBLL;
    if (v161 == 0.0) {
      unint64_t v165 = 0x9E3779B97F4A7C15;
    }
    uint64_t v166 = LODWORD(v162) - 0x61C8864680B583EBLL;
    if (v162 == 0.0) {
      uint64_t v166 = 0x9E3779B97F4A7C15;
    }
    unint64_t v167 = ((v165 >> 2) + (v165 << 6) + v166) ^ v165;
    uint64_t v168 = LODWORD(v163) - 0x61C8864680B583EBLL;
    if (v163 == 0.0) {
      uint64_t v168 = 0x9E3779B97F4A7C15;
    }
    unint64_t v169 = (v168 + (v167 << 6) + (v167 >> 2)) ^ v167;
    unint64_t v170 = (((v169 << 6) - 0x61C8864680B583EBLL + (v169 >> 2)) ^ v169) - 0x61C8864680B583EBLL;
    if (v164)
    {
      uint8x8_t v171 = (uint8x8_t)vcnt_s8((int8x8_t)v164);
      v171.i16[0] = vaddlv_u8(v171);
      if (v171.u32[0] > 1uLL)
      {
        unint64_t v112 = (((v169 << 6) - 0x61C8864680B583EBLL + (v169 >> 2)) ^ v169) - 0x61C8864680B583EBLL;
        if (v170 >= v164) {
          unint64_t v112 = v170 % v164;
        }
      }
      else
      {
        unint64_t v112 = v170 & (v164 - 1);
      }
      size_t v172 = (void **)*((void *)*v82 + v112);
      if (v172)
      {
        unint64_t v173 = *v172;
        if (*v172)
        {
          if (v171.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v177 = v173[1];
              if (v177 == v170)
              {
                if (v173[3] == *v81 && *((_DWORD *)v173 + 8) == (unint64_t)*(unsigned int *)(v74 + 16)) {
                  goto LABEL_329;
                }
              }
              else if ((v177 & (v164 - 1)) != v112)
              {
                goto LABEL_262;
              }
              unint64_t v173 = (void *)*v173;
              if (!v173) {
                goto LABEL_262;
              }
            }
          }
          do
          {
            unint64_t v175 = v173[1];
            if (v175 == v170)
            {
              if (v173[3] == *v81 && *((_DWORD *)v173 + 8) == (unint64_t)*(unsigned int *)(v74 + 16)) {
                goto LABEL_329;
              }
            }
            else
            {
              if (v175 >= v164) {
                v175 %= v164;
              }
              if (v175 != v112) {
                break;
              }
            }
            unint64_t v173 = (void *)*v173;
          }
          while (v173);
        }
      }
    }
LABEL_262:
    unint64_t v173 = operator new(0x30uLL);
    void *v173 = 0;
    v173[1] = v170;
    v173[2] = *(void *)v74;
    uint64_t v178 = *v81;
    *((_DWORD *)v173 + 8) = *(_DWORD *)(v74 + 16);
    v173[3] = v178;
    v173[5] = 0;
    float v179 = (float)(unint64_t)(*(void *)(v52 + 2584) + 1);
    float v180 = *(float *)(v52 + 2592);
    if (!v164 || (float)(v180 * (float)v164) < v179)
    {
      BOOL v181 = (v164 & (v164 - 1)) != 0;
      if (v164 < 3) {
        BOOL v181 = 1;
      }
      unint64_t v182 = v181 | (2 * v164);
      unint64_t v183 = vcvtps_u32_f32(v179 / v180);
      if (v182 <= v183) {
        size_t v184 = v183;
      }
      else {
        size_t v184 = v182;
      }
      if (v184 == 1)
      {
        size_t v184 = 2;
      }
      else if ((v184 & (v184 - 1)) != 0)
      {
        size_t v184 = std::__next_prime(v184);
        unint64_t v164 = *(void *)(v52 + 2568);
      }
      if (v184 <= v164)
      {
        if (v184 >= v164) {
          goto LABEL_314;
        }
        unint64_t v196 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2584) / *(float *)(v52 + 2592));
        if (v164 < 3 || (uint8x8_t v197 = (uint8x8_t)vcnt_s8((int8x8_t)v164), v197.i16[0] = vaddlv_u8(v197), v197.u32[0] > 1uLL))
        {
          unint64_t v196 = std::__next_prime(v196);
        }
        else
        {
          uint64_t v198 = 1 << -(char)__clz(v196 - 1);
          if (v196 >= 2) {
            unint64_t v196 = v198;
          }
        }
        if (v184 <= v196) {
          size_t v184 = v196;
        }
        if (v184 >= v164) {
          goto LABEL_314;
        }
        if (!v184)
        {
          unint64_t v202 = *v82;
          unint64_t *v82 = 0;
          if (v202) {
            operator delete(v202);
          }
          *(void *)(v52 + 2568) = 0;
          goto LABEL_314;
        }
      }
      if (v184 >> 61) {
        goto LABEL_456;
      }
      uint64_t v185 = operator new(8 * v184);
      BOOL v186 = *v82;
      unint64_t *v82 = v185;
      if (v186) {
        operator delete(v186);
      }
      uint64_t v187 = 0;
      *(void *)(v52 + 2568) = v184;
      do
        *((void *)*v82 + v187++) = 0;
      while (v184 != v187);
      uint64_t v188 = *(void **)(v52 + 2576);
      if (!v188) {
        goto LABEL_314;
      }
      uint64_t v189 = v52 + 2576;
      size_t v190 = v188[1];
      size_t v191 = v184 - 1;
      if ((v184 & (v184 - 1)) == 0)
      {
        size_t v192 = v190 & v191;
        *((void *)*v82 + v192) = v189;
        while (1)
        {
          uint64_t v193 = (void *)*v188;
          if (!*v188) {
            break;
          }
          size_t v194 = v193[1] & v191;
          if (v194 == v192)
          {
            uint64_t v188 = (void *)*v188;
          }
          else if (*((void *)*v82 + v194))
          {
            void *v188 = *v193;
            uint64_t v195 = 8 * v194;
            void *v193 = **(void **)((char *)*v82 + v195);
            **(void **)((char *)*v82 + v195) = v193;
          }
          else
          {
            *((void *)*v82 + v194) = v188;
            uint64_t v188 = v193;
            size_t v192 = v194;
          }
        }
LABEL_314:
        unint64_t v164 = *(void *)(v52 + 2568);
        if ((v164 & (v164 - 1)) != 0)
        {
          if (v170 >= v164) {
            unint64_t v112 = v170 % v164;
          }
          else {
            unint64_t v112 = v170;
          }
        }
        else
        {
          unint64_t v112 = (v164 - 1) & v170;
        }
        goto LABEL_319;
      }
      if (v190 >= v184) {
        v190 %= v184;
      }
      *((void *)*v82 + v190) = v189;
      uint64_t v199 = (void *)*v188;
      if (!*v188) {
        goto LABEL_314;
      }
      while (1)
      {
        size_t v201 = v199[1];
        if (v201 >= v184) {
          v201 %= v184;
        }
        if (v201 != v190)
        {
          if (!*((void *)*v82 + v201))
          {
            *((void *)*v82 + v201) = v188;
            goto LABEL_300;
          }
          void *v188 = *v199;
          uint64_t v200 = 8 * v201;
          void *v199 = **(void **)((char *)*v82 + v200);
          **(void **)((char *)*v82 + v200) = v199;
          uint64_t v199 = v188;
        }
        size_t v201 = v190;
LABEL_300:
        uint64_t v188 = v199;
        uint64_t v199 = (void *)*v199;
        size_t v190 = v201;
        if (!v199) {
          goto LABEL_314;
        }
      }
    }
LABEL_319:
    uint64_t v203 = *v82;
    unint64_t v204 = (void *)*((void *)*v82 + v112);
    if (v204)
    {
      void *v173 = *v204;
LABEL_327:
      void *v204 = v173;
      goto LABEL_328;
    }
    void *v173 = *(void *)(v52 + 2576);
    *(void *)(v52 + 2576) = v173;
    v203[v112] = v52 + 2576;
    if (*v173)
    {
      unint64_t v205 = *(void *)(*v173 + 8);
      if ((v164 & (v164 - 1)) != 0)
      {
        if (v205 >= v164) {
          v205 %= v164;
        }
      }
      else
      {
        v205 &= v164 - 1;
      }
      unint64_t v204 = (char *)*v82 + 8 * v205;
      goto LABEL_327;
    }
LABEL_328:
    ++*(void *)(v52 + 2584);
LABEL_329:
    v173[5] = v91;
    unint64_t v206 = *(void *)(v52 + 2608);
    if (v206)
    {
      uint8x8_t v207 = (uint8x8_t)vcnt_s8((int8x8_t)v206);
      v207.i16[0] = vaddlv_u8(v207);
      if (v207.u32[0] > 1uLL)
      {
        unint64_t v112 = v91;
        if (v91 >= v206) {
          unint64_t v112 = v91 % v206;
        }
      }
      else
      {
        unint64_t v112 = (v206 - 1) & v91;
      }
      int v208 = *(void ***)(*(void *)(v52 + 2600) + 8 * v112);
      if (v208)
      {
        int8x8_t v209 = *v208;
        if (*v208)
        {
          if (v207.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v211 = v209[1];
              if (v211 == v91)
              {
                if (v209[2] == v91) {
                  goto LABEL_416;
                }
              }
              else if ((v211 & (v206 - 1)) != v112)
              {
                goto LABEL_349;
              }
              int8x8_t v209 = (void *)*v209;
              if (!v209) {
                goto LABEL_349;
              }
            }
          }
          do
          {
            unint64_t v210 = v209[1];
            if (v210 == v91)
            {
              if (v209[2] == v91) {
                goto LABEL_416;
              }
            }
            else
            {
              if (v210 >= v206) {
                v210 %= v206;
              }
              if (v210 != v112) {
                break;
              }
            }
            int8x8_t v209 = (void *)*v209;
          }
          while (v209);
        }
      }
    }
LABEL_349:
    int8x8_t v209 = operator new(0x30uLL);
    void *v209 = 0;
    v209[1] = v91;
    v209[2] = v91;
    v209[3] = 0;
    v209[4] = 0;
    v209[5] = 0;
    float v212 = (float)(unint64_t)(*(void *)(v52 + 2624) + 1);
    float v213 = *(float *)(v52 + 2632);
    if (!v206 || (float)(v213 * (float)v206) < v212)
    {
      BOOL v214 = (v206 & (v206 - 1)) != 0;
      if (v206 < 3) {
        BOOL v214 = 1;
      }
      unint64_t v215 = v214 | (2 * v206);
      unint64_t v216 = vcvtps_u32_f32(v212 / v213);
      if (v215 <= v216) {
        size_t v217 = v216;
      }
      else {
        size_t v217 = v215;
      }
      if (v217 == 1)
      {
        size_t v217 = 2;
      }
      else if ((v217 & (v217 - 1)) != 0)
      {
        size_t v217 = std::__next_prime(v217);
        unint64_t v206 = *(void *)(v52 + 2608);
      }
      if (v217 <= v206)
      {
        if (v217 >= v206) {
          goto LABEL_401;
        }
        unint64_t v230 = vcvtps_u32_f32((float)*(unint64_t *)(v52 + 2624) / *(float *)(v52 + 2632));
        if (v206 < 3 || (uint8x8_t v231 = (uint8x8_t)vcnt_s8((int8x8_t)v206), v231.i16[0] = vaddlv_u8(v231), v231.u32[0] > 1uLL))
        {
          unint64_t v230 = std::__next_prime(v230);
        }
        else
        {
          uint64_t v232 = 1 << -(char)__clz(v230 - 1);
          if (v230 >= 2) {
            unint64_t v230 = v232;
          }
        }
        if (v217 <= v230) {
          size_t v217 = v230;
        }
        if (v217 >= v206) {
          goto LABEL_401;
        }
        if (!v217)
        {
          uint64_t v237 = *(void **)(v52 + 2600);
          *(void *)(v52 + 2600) = 0;
          if (v237) {
            operator delete(v237);
          }
          *(void *)(v52 + 2608) = 0;
          goto LABEL_401;
        }
      }
      if (v217 >> 61) {
        goto LABEL_456;
      }
      uint64_t v218 = operator new(8 * v217);
      long long v219 = *(void **)(v52 + 2600);
      *(void *)(v52 + 2600) = v218;
      if (v219) {
        operator delete(v219);
      }
      uint64_t v220 = 0;
      *(void *)(v52 + 2608) = v217;
      do
        *(void *)(*(void *)(v52 + 2600) + 8 * v220++) = 0;
      while (v217 != v220);
      int v221 = *(void **)(v52 + 2616);
      if (!v221) {
        goto LABEL_401;
      }
      uint64_t v222 = v52 + 2616;
      size_t v223 = v221[1];
      size_t v224 = v217 - 1;
      if ((v217 & (v217 - 1)) == 0)
      {
        size_t v225 = v223 & v224;
        *(void *)(*(void *)(v52 + 2600) + 8 * v225) = v222;
        while (1)
        {
          uint64_t v226 = (void *)*v221;
          if (!*v221) {
            break;
          }
          size_t v227 = v226[1] & v224;
          if (v227 == v225)
          {
            int v221 = (void *)*v221;
          }
          else
          {
            uint64_t v228 = *(void *)(v52 + 2600);
            if (*(void *)(v228 + 8 * v227))
            {
              void *v221 = *v226;
              uint64_t v229 = 8 * v227;
              *uint64_t v226 = **(void **)(*(void *)(v52 + 2600) + v229);
              **(void **)(*(void *)(v52 + 2600) + v229) = v226;
            }
            else
            {
              *(void *)(v228 + 8 * v227) = v221;
              int v221 = v226;
              size_t v225 = v227;
            }
          }
        }
LABEL_401:
        unint64_t v206 = *(void *)(v52 + 2608);
        if ((v206 & (v206 - 1)) != 0)
        {
          if (v91 >= v206) {
            unint64_t v112 = v91 % v206;
          }
          else {
            unint64_t v112 = v91;
          }
        }
        else
        {
          unint64_t v112 = (v206 - 1) & v91;
        }
        goto LABEL_406;
      }
      if (v223 >= v217) {
        v223 %= v217;
      }
      *(void *)(*(void *)(v52 + 2600) + 8 * v223) = v222;
      uint64_t v233 = (void *)*v221;
      if (!*v221) {
        goto LABEL_401;
      }
      while (1)
      {
        size_t v235 = v233[1];
        if (v235 >= v217) {
          v235 %= v217;
        }
        if (v235 != v223)
        {
          uint64_t v236 = *(void *)(v52 + 2600);
          if (!*(void *)(v236 + 8 * v235))
          {
            *(void *)(v236 + 8 * v235) = v221;
            goto LABEL_387;
          }
          void *v221 = *v233;
          uint64_t v234 = 8 * v235;
          *uint64_t v233 = **(void **)(*(void *)(v52 + 2600) + v234);
          **(void **)(*(void *)(v52 + 2600) + v234) = v233;
          uint64_t v233 = v221;
        }
        size_t v235 = v223;
LABEL_387:
        int v221 = v233;
        uint64_t v233 = (void *)*v233;
        size_t v223 = v235;
        if (!v233) {
          goto LABEL_401;
        }
      }
    }
LABEL_406:
    uint64_t v238 = *(void *)(v52 + 2600);
    v239 = *(void **)(v238 + 8 * v112);
    if (v239)
    {
      void *v209 = *v239;
    }
    else
    {
      void *v209 = *(void *)(v52 + 2616);
      *(void *)(v52 + 2616) = v209;
      *(void *)(v238 + 8 * v112) = v52 + 2616;
      if (!*v209) {
        goto LABEL_415;
      }
      unint64_t v240 = *(void *)(*v209 + 8);
      if ((v206 & (v206 - 1)) != 0)
      {
        if (v240 >= v206) {
          v240 %= v206;
        }
      }
      else
      {
        v240 &= v206 - 1;
      }
      v239 = (void *)(*(void *)(v52 + 2600) + 8 * v240);
    }
    void *v239 = v209;
LABEL_415:
    ++*(void *)(v52 + 2624);
LABEL_416:
    v209[3] = *(void *)v74;
    *((_DWORD *)v209 + 8) = *(_DWORD *)(v74 + 8);
    *((_DWORD *)v209 + 9) = *(_DWORD *)(v74 + 12);
    *((_DWORD *)v209 + 10) = *(_DWORD *)(v74 + 16);
    uint64_t v241 = *(void *)(v52 + 2456);
    uint64_t v242 = *(void *)(v52 + 2448);
    v285[0] = v91;
    if (v91 < (unint64_t)((v241 - v242) >> 3))
    {
      uint64_t v243 = *(void *)(v242 + 8 * v91);
      if (v243)
      {
        if (HIDWORD(v91) == HIDWORD(v243)
          && *(void *)(v52 + 2472) + 24 * v243 != *(void *)(v52 + 2480))
        {
          operator new();
        }
      }
    }
    uint64_t v88 = 0;
LABEL_422:
    unint64_t v244 = v88[1];
    uint64_t v245 = v88[9];
    float16x4_t v246 = vcvt_f16_f32(v278);
    *(_WORD *)(v245 + 4) = v246.i16[2];
    *(_DWORD *)uint64_t v245 = v246.i32[0];
    if (v88[8] > v244) {
      unint64_t v244 = v88[8];
    }
    v88[7] = 0;
    v88[8] = v244;
    uint64_t v247 = v292;
    if (v292 && !atomic_fetch_add(&v292->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
    uint64_t v10 = (void *)v279[4];
    uint64_t v14 = v283 + 1;
    float v283 = v14;
    uint64_t v4 = v275;
    uint64_t v2 = v276;
    uint64_t v7 = v273;
    CanUpdateWithStyle = v274;
    uint64_t result = v272;
    if (v14 != v10)
    {
      uint64_t v248 = v280[4];
      while (1)
      {
        unint64_t v249 = *((unsigned int *)v14 + 1);
        unint64_t v250 = v249 >> 7;
        if (v249 >> 7 < (v280[5] - v248) >> 3)
        {
          uint64_t v251 = *(void *)(v248 + 8 * v250);
          if (v251)
          {
            uint64_t v252 = v249 & 0x7F;
            unint64_t v253 = *(unsigned __int16 *)(v251 + 2 * v252);
            uint64_t v254 = v280[7];
            uint64_t v255 = v280[8];
            if (v253 < (v255 - v254) >> 3)
            {
              uint64_t v256 = v254 + 8 * v253;
              if (v256 != v255 && *(_DWORD *)(v256 + 4) == v249)
              {
                uint64_t v258 = v281[4];
                if (v250 < (v281[5] - v258) >> 3)
                {
                  uint64_t v259 = *(void *)(v258 + 8 * v250);
                  if (v259)
                  {
                    unint64_t v260 = *(unsigned __int16 *)(v259 + 2 * v252);
                    uint64_t v261 = v281[7];
                    uint64_t v262 = v281[8];
                    if (v260 < (v262 - v261) >> 3)
                    {
                      uint64_t v263 = v261 + 8 * v260;
                      if (v263 != v262 && *(_DWORD *)(v263 + 4) == v249)
                      {
                        uint64_t v265 = v282[4];
                        if (v250 < (v282[5] - v265) >> 3)
                        {
                          uint64_t v266 = *(void *)(v265 + 8 * v250);
                          if (v266)
                          {
                            unint64_t v267 = *(unsigned __int16 *)(v266 + 2 * v252);
                            uint64_t v269 = v282[7];
                            uint64_t v268 = v282[8];
                            if (v267 < (v268 - v269) >> 3)
                            {
                              uint64_t v270 = v269 + 8 * v267;
                              if (*(_DWORD *)(v270 + 4) == v249 && v270 != v268) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v10)
        {
          uint64_t v14 = v10;
          goto LABEL_13;
        }
      }
      uint64_t v10 = v14;
LABEL_13:
      float v283 = v14;
    }
  }
  while (v277 != v10);
LABEL_455:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1948488(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[3];
  v1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  operator delete(v1);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 - 96);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateClippingConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::TileMatrix>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::LayerDataReference>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::SupportsFragmentClip>(v3);
  uint64_t v7 = (void *)gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>(v3);
  uint64_t v8 = gdc::Registry::storage<md::ls::TileClippingConstantDataHandle>(v3);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v7 + 4;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v11 + 64) - *(void *)(v11 + 56)) {
    uint64_t v11 = v6;
  }
  if (v7[8] - v7[7] >= *(void *)(v11 + 64) - *(void *)(v11 + 56)) {
    uint64_t v10 = (void *)(v11 + 32);
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < v10[4] - v10[3]) {
    uint64_t v10 = (void *)(v8 + 32);
  }
  uint64_t v12 = (void *)v10[3];
  uint64_t v115 = v10;
  unint64_t v116 = (void *)v4;
  unint64_t v117 = (void *)v5;
  unint64_t v118 = (void *)v6;
  uint64_t v119 = v7;
  unint64_t v120 = (void *)v8;
  uint8x8_t v121 = v12;
  unint64_t v114 = (void *)v10[4];
  if (v114 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v115))
  {
    uint64_t v13 = v12 + 1;
    do
    {
      uint64_t v12 = v13;
      uint8x8_t v121 = v13;
      if (v13 == v114) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v115);
      uint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  unint64_t v113 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v114 != v12)
  {
    uint64_t v112 = v2;
    do
    {
      void *v113 = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v26 = v7[11];
        uint64_t v27 = v7[10] + 8 * v21;
      }
      else
      {
        uint64_t v26 = v7[11];
        uint64_t v27 = v26;
      }
      if (v27 == v26) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = (uint64_t *)v27;
      }
      uint64_t v29 = v9[4];
      if (v18 < (v9[5] - v29) >> 3
        && (uint64_t v30 = *(void *)(v29 + 8 * v18)) != 0
        && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v33 = v9[7],
            uint64_t v32 = v9[8],
            v31 < (v32 - v33) >> 3)
        && ((uint64_t v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == v17) : (v35 = 0), v35))
      {
        uint64_t v36 = (unint64_t *)(v9[10] + 8 * v31);
      }
      else
      {
        uint64_t v36 = (unint64_t *)v9[11];
      }
      unint64_t v37 = ***(uint64_t ****)(v2 + 8);
      if (v37 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v37 != 0x22D45F5AAD4BF408)
      {
        uint64_t v38 = v37 + 5;
        do
        {
          uint64_t v39 = *v38;
          v38 += 5;
        }
        while (v39 != 0x22D45F5AAD4BF408);
        unint64_t v37 = v38 - 5;
      }
      unint64_t v40 = (uint64_t (***)(void))v37[3];
      uint64_t v41 = (std::__shared_weak_count *)v37[4];
      if (v41)
      {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      uint64_t v42 = *(void **)((**v40)(v40) + 8);
      int8x8_t v43 = (int8x8_t)v42[1];
      if (!*(void *)&v43) {
        goto LABEL_72;
      }
      uint8x8_t v44 = (uint8x8_t)vcnt_s8(v43);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        unint64_t v45 = 0x99BED48DEFBBD82BLL;
        if (*(void *)&v43 <= 0x99BED48DEFBBD82BLL) {
          unint64_t v45 = 0x99BED48DEFBBD82BLL % *(void *)&v43;
        }
      }
      else
      {
        unint64_t v45 = (*(void *)&v43 - 1) & 0x99BED48DEFBBD82BLL;
      }
      uint64_t v46 = *(void **)(*v42 + 8 * v45);
      if (!v46) {
        goto LABEL_72;
      }
      uint64_t v47 = (void *)*v46;
      if (!v47) {
        goto LABEL_72;
      }
      if (v44.u32[0] < 2uLL)
      {
        uint64_t v48 = *(void *)&v43 - 1;
        while (1)
        {
          uint64_t v50 = v47[1];
          if (v50 == 0x99BED48DEFBBD82BLL)
          {
            if (v47[2] == 0x99BED48DEFBBD82BLL) {
              goto LABEL_70;
            }
          }
          else if ((v50 & v48) != v45)
          {
            goto LABEL_72;
          }
          uint64_t v47 = (void *)*v47;
          if (!v47) {
            goto LABEL_72;
          }
        }
      }
      while (1)
      {
        unint64_t v49 = v47[1];
        if (v49 == 0x99BED48DEFBBD82BLL) {
          break;
        }
        if (v49 >= *(void *)&v43) {
          v49 %= *(void *)&v43;
        }
        if (v49 != v45) {
          goto LABEL_72;
        }
LABEL_57:
        uint64_t v47 = (void *)*v47;
        if (!v47) {
          goto LABEL_72;
        }
      }
      if (v47[2] != 0x99BED48DEFBBD82BLL) {
        goto LABEL_57;
      }
LABEL_70:
      uint64_t v51 = v47[5];
      if (*(void *)(v51 + 8) == 0x99BED48DEFBBD82BLL)
      {
        uint64_t v52 = *(int8x8_t ***)(v51 + 32);
        goto LABEL_73;
      }
LABEL_72:
      uint64_t v52 = 0;
LABEL_73:
      uint64_t v53 = **(void **)(v2 + 8);
      unint64_t v54 = *(void **)v53;
      unint64_t v55 = *(void **)(v53 + 8);
      if (v54 != v55)
      {
        while (*v54 != 0x41D4E9297E100630)
        {
          v54 += 5;
          if (v54 == v55) {
            goto LABEL_81;
          }
        }
      }
      if (v54 == v55)
      {
LABEL_81:
        uint64_t v56 = 0;
      }
      else
      {
        uint64_t v56 = (void *)v54[3];
        uint64_t v57 = (std::__shared_weak_count *)v54[4];
        if (v57)
        {
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
      unint64_t v58 = *(void *)(*v28 + 384);
      uint64_t v59 = *(std::__shared_weak_count **)(*v28 + 392);
      if (v59)
      {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned __int8 v60 = *(unsigned char *)(*v28 + 48);
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v61 = md::SceneContext::subtileClipMask(*v52, v58, v60);
        BOOL v62 = v61;
        if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (v61)
          {
LABEL_85:
            if (v62[4] == v62[3] * v62[3]) {
              uint64_t v63 = 0;
            }
            else {
              uint64_t v63 = (uint64_t)v62;
            }
            goto LABEL_90;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if (v62) {
            goto LABEL_85;
          }
        }
      }
      else
      {
        BOOL v62 = md::SceneContext::subtileClipMask(*v52, v58, *(unsigned char *)(*v28 + 48));
        if (v62) {
          goto LABEL_85;
        }
      }
      uint64_t v63 = 0;
LABEL_90:
      md::BaseMapTileDataRenderable::setSubtileClipMask(*v28, v63);
      unint64_t v64 = *v36;
      uint64_t v65 = *(void *)(*v28 + 248);
      unint64_t v122 = v64;
      uint64_t v66 = v56[483];
      if (v64 < (unint64_t)((v56[484] - v66) >> 3))
      {
        uint64_t v67 = *(void *)(v66 + 8 * v64);
        if (v67 && HIDWORD(v64) == HIDWORD(v67))
        {
          uint64_t v105 = v56[486];
          unsigned int v106 = *(void *)(v66 + 8 * v64);
          uint64_t v107 = (void *)(v105 + 24 * v67);
          if (v107 != (void *)v56[487] && v105 != 0)
          {
            uint64_t v109 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>((uint64_t)(v56 + 475), v64, &v122);
            ++v109[3];
            *uint64_t v107 = v65;
            uint64_t v110 = v105 + 24 * v106;
            uint64_t v111 = *(std::__shared_weak_count **)(v110 + 16);
            *(void *)(v110 + 8) = 0;
            *(void *)(v110 + 16) = 0;
            if (v111)
            {
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
        }
      }
      uint64_t v2 = v112;
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      uint64_t v12 = (void *)v115[4];
      unint64_t v15 = v121 + 1;
      uint8x8_t v121 = v15;
      if (v15 != v12)
      {
        uint64_t v69 = v116[4];
        while (1)
        {
          unint64_t v70 = *((unsigned int *)v15 + 1);
          unint64_t v71 = v70 >> 7;
          if (v70 >> 7 < (v116[5] - v69) >> 3)
          {
            uint64_t v72 = *(void *)(v69 + 8 * v71);
            if (v72)
            {
              uint64_t v73 = v70 & 0x7F;
              unint64_t v74 = *(unsigned __int16 *)(v72 + 2 * v73);
              uint64_t v76 = v116[7];
              uint64_t v75 = v116[8];
              if (v74 < (v75 - v76) >> 3)
              {
                uint64_t v77 = v76 + 8 * v74;
                if (v77 != v75 && *(_DWORD *)(v77 + 4) == v70)
                {
                  uint64_t v79 = v117[4];
                  if (v71 < (v117[5] - v79) >> 3)
                  {
                    uint64_t v80 = *(void *)(v79 + 8 * v71);
                    if (v80)
                    {
                      unint64_t v81 = *(unsigned __int16 *)(v80 + 2 * v73);
                      uint64_t v83 = v117[7];
                      uint64_t v82 = v117[8];
                      if (v81 < (v82 - v83) >> 3)
                      {
                        uint64_t v84 = v83 + 8 * v81;
                        if (v84 != v82 && *(_DWORD *)(v84 + 4) == v70)
                        {
                          uint64_t v86 = v118[4];
                          if (v71 < (v118[5] - v86) >> 3)
                          {
                            uint64_t v87 = *(void *)(v86 + 8 * v71);
                            if (v87)
                            {
                              unint64_t v88 = *(unsigned __int16 *)(v87 + 2 * v73);
                              uint64_t v90 = v118[7];
                              uint64_t v89 = v118[8];
                              if (v88 < (v89 - v90) >> 3)
                              {
                                uint64_t v91 = v90 + 8 * v88;
                                if (v91 != v89 && *(_DWORD *)(v91 + 4) == v70)
                                {
                                  uint64_t v93 = v119[4];
                                  if (v71 < (v119[5] - v93) >> 3)
                                  {
                                    uint64_t v94 = *(void *)(v93 + 8 * v71);
                                    if (v94)
                                    {
                                      unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * v73);
                                      uint64_t v97 = v119[7];
                                      uint64_t v96 = v119[8];
                                      if (v95 < (v96 - v97) >> 3)
                                      {
                                        uint64_t v98 = v97 + 8 * v95;
                                        if (v98 != v96 && *(_DWORD *)(v98 + 4) == v70)
                                        {
                                          uint64_t v99 = v120[4];
                                          if (v71 < (v120[5] - v99) >> 3)
                                          {
                                            uint64_t v100 = *(void *)(v99 + 8 * v71);
                                            if (v100)
                                            {
                                              unint64_t v101 = *(unsigned __int16 *)(v100 + 2 * v73);
                                              uint64_t v102 = v120[7];
                                              uint64_t v103 = v120[8];
                                              if (v101 < (v103 - v102) >> 3)
                                              {
                                                uint64_t v104 = v102 + 8 * v101;
                                                if (*(_DWORD *)(v104 + 4) == v70 && v104 != v103) {
                                                  break;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v15 == v12)
          {
            unint64_t v15 = v12;
            goto LABEL_18;
          }
        }
        uint64_t v12 = v15;
LABEL_18:
        uint8x8_t v121 = v15;
      }
    }
    while (v114 != v12);
  }
  void *v113 = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
}

void sub_1A1948DA0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::NeedsRenderState>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::IsTransparent>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v54, v7, v4, v5, *(void *)(v7 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v52, v8, v4, v5, *(void *)(v8 + 32));
  if (v53 != v57)
  {
    uint64_t v10 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      uint64_t *v10 = *v9;
      unint64_t v11 = *v9;
      uint64_t v12 = v6[4];
      if (v11 >> 39 < (v6[5] - v12) >> 3
        && (uint64_t v13 = *(void *)(v12 + 8 * (v11 >> 39))) != 0
        && (unint64_t v14 = *(unsigned __int16 *)(v13 + 2 * (HIDWORD(v11) & 0x7F)),
            uint64_t v16 = v6[7],
            uint64_t v15 = v6[8],
            v14 < (v15 - v16) >> 3)
        && ((unint64_t v17 = HIDWORD(v11), v18 = v16 + 8 * v14, v18 != v15)
          ? (BOOL v19 = *(_DWORD *)(v18 + 4) == v17)
          : (BOOL v19 = 0),
            v19))
      {
        uint64_t v20 = v6[11];
        uint64_t v21 = v6[10] + 4 * v14;
      }
      else
      {
        uint64_t v20 = v6[11];
        uint64_t v21 = v20;
      }
      uint64_t v22 = **(void **)(a1 + 8);
      uint64_t v23 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      if (v23 != v24)
      {
        while (*v23 != 0x41D4E9297E100630)
        {
          v23 += 5;
          if (v23 == v24) {
            goto LABEL_28;
          }
        }
      }
      if (v23 == v24)
      {
LABEL_28:
        uint64_t v26 = 0;
        unint64_t v27 = MEMORY[0x20];
        if (MEMORY[0x20]) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v26 = (uint64_t *)v23[3];
        BOOL v25 = (std::__shared_weak_count *)v23[4];
        if (v25
          && (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
              !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          unint64_t v27 = v26[4];
          if (v27)
          {
LABEL_26:
            unint64_t v28 = v26[5];
            if (!v28) {
              goto LABEL_30;
            }
            goto LABEL_31;
          }
        }
        else
        {
          unint64_t v27 = v26[4];
          if (v27) {
            goto LABEL_26;
          }
        }
      }
      uint64_t v29 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v26[1312] + 2424), 3, 1, 1, 0, 1, 0, 3);
      *uint64_t v26 = v29;
      uint64_t v59 = (uint64_t (**)())v29;
      unint64_t v27 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v26 + 91, &v59);
      *(int64x2_t *)BOOL v62 = vdupq_n_s64(1uLL);
      v62[16] = 1;
      std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v26 + 86), v27, v27, (uint64_t)v62);
      v26[4] = v27;
      unint64_t v28 = v26[5];
      if (!v28)
      {
LABEL_30:
        uint64_t v30 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v26[1312] + 2424), 3, 0, 1, 0, 1, 0, 3);
        v26[1] = v30;
        uint64_t v59 = (uint64_t (**)())v30;
        unint64_t v28 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v26 + 91, &v59);
        *(int64x2_t *)BOOL v62 = vdupq_n_s64(1uLL);
        v62[16] = 1;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v26 + 86), v28, v28, (uint64_t)v62);
        v26[5] = v28;
      }
LABEL_31:
      unint64_t v31 = *(void **)(a1 + 8);
      uint64_t v32 = *v10;
      if (v21 == v20 || !v21)
      {
        uint64_t v59 = &off_1EF521B30;
        *(void *)&long long v60 = v27;
        *((void *)&v60 + 1) = v32;
        uint64_t v61 = &v59;
        uint64_t v63 = v62;
        *(void *)BOOL v62 = &off_1EF521B30;
        *(_OWORD *)&v62[8] = v60;
        int v64 = 0;
        ecs2::Runtime::queueCommand(v31, (uint64_t)v62);
        if (v64 != -1) {
          ((void (*)(char *, unsigned char *))off_1EF58FE68[v64])(&v58, v62);
        }
        int v64 = -1;
        uint64_t result = (uint64_t)v61;
        if (v61 != &v59)
        {
LABEL_40:
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
          }
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v59 = &off_1EF521B30;
        *(void *)&long long v60 = v28;
        *((void *)&v60 + 1) = v32;
        uint64_t v61 = &v59;
        uint64_t v63 = v62;
        *(void *)BOOL v62 = &off_1EF521B30;
        *(_OWORD *)&v62[8] = v60;
        int v64 = 0;
        ecs2::Runtime::queueCommand(v31, (uint64_t)v62);
        if (v64 != -1) {
          ((void (*)(char *, unsigned char *))off_1EF58FE68[v64])(&v58, v62);
        }
        int v64 = -1;
        uint64_t result = (uint64_t)v61;
        if (v61 != &v59) {
          goto LABEL_40;
        }
      }
      uint64_t result = ((uint64_t (*)(uint64_t (***)()))v59[4])(&v59);
LABEL_43:
      uint64_t v34 = v57;
      uint64_t v9 = *(unint64_t **)(v54 + 32);
      if (++v57 != v9)
      {
        uint64_t v35 = v55[4];
        unint64_t v36 = (v55[5] - v35) >> 3;
        unint64_t v37 = v34 + 2;
        while (1)
        {
          unint64_t v38 = *((unsigned int *)v37 - 1);
          unint64_t v39 = v38 >> 7;
          if (v38 >> 7 < v36)
          {
            uint64_t v40 = *(void *)(v35 + 8 * v39);
            if (v40)
            {
              unint64_t v41 = *(unsigned __int16 *)(v40 + 2 * (v38 & 0x7F));
              uint64_t v42 = v55[7];
              uint64_t result = v55[8];
              if (v41 < (result - v42) >> 3)
              {
                uint64_t v43 = v42 + 8 * v41;
                if (v43 != result && *(_DWORD *)(v43 + 4) == v38)
                {
                  uint64_t v45 = v56[4];
                  uint64_t result = v56[5] - v45;
                  if (v39 < result >> 3)
                  {
                    uint64_t v46 = *(void *)(v45 + 8 * v39);
                    if (v46)
                    {
                      unint64_t v47 = *(unsigned __int16 *)(v46 + 2 * (v38 & 0x7F));
                      uint64_t v49 = v56[7];
                      uint64_t v48 = v56[8];
                      uint64_t result = v48 - v49;
                      if (v47 < (v48 - v49) >> 3)
                      {
                        uint64_t v50 = v49 + 8 * v47;
                        if (v50 != v48 && *(_DWORD *)(v50 + 4) == v38) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v57 = v37;
          BOOL v19 = v37++ == v9;
          if (v19) {
            goto LABEL_9;
          }
        }
        uint64_t v9 = v37 - 1;
      }
LABEL_9:
      if (v53 == v9) {
        goto LABEL_67;
      }
    }
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v10 = (uint64_t *)result;
LABEL_67:
  uint64_t *v10 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::InstanceDataV>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = (void *)(v3 + 32);
  if (v4[8] - v4[7] < *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v8 = v4 + 4;
  }
  if (v5[8] - v5[7] < v8[4] - v8[3]) {
    uint64_t v8 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  v75[0] = v8;
  v75[1] = v3;
  uint64_t v72 = (void *)v3;
  v75[2] = v4;
  v75[3] = v5;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  uint64_t v73 = v8;
  v75[4] = v6;
  uint64_t v76 = v10;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v75))
  {
    unint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      uint64_t v76 = v11;
      if (v11 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v75);
      unint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  unint64_t v74 = (void *)result;
  if (v9 != v10)
  {
    do
    {
      uint64_t v15 = *v10;
      void *v74 = *v10;
      unint64_t v16 = *v10;
      uint64_t v17 = HIDWORD(*v10);
      unint64_t v18 = *v10 >> 39;
      uint64_t v19 = v4[4];
      if (v18 < (v4[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v4[7],
            uint64_t v22 = v4[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v26 = (unsigned char *)(v4[10] + v21);
      }
      else
      {
        uint64_t v26 = (unsigned char *)v4[11];
      }
      uint64_t v27 = v5[4];
      if (v18 < (v5[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v5[7],
            uint64_t v30 = v5[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = (uint64_t *)(v5[10] + 16 * v29);
      }
      else
      {
        uint64_t v34 = (uint64_t *)v5[11];
      }
      if (*v26 != 3)
      {
        uint64_t v35 = *v34;
        if (*(_DWORD *)(v35 + 16) <= 1u)
        {
          if (*(unsigned char *)(v35 + 20))
          {
            unint64_t v36 = *(void **)(a1 + 8);
            v78[0] = &unk_1EF524488;
            v78[1] = v15 << 32;
            int v79 = HIDWORD(v15);
            uint64_t v80 = v78;
            uint64_t v83 = v81;
            v81[0] = &unk_1EF524488;
            v81[1] = v15 << 32;
            int v82 = HIDWORD(v15);
            int v84 = 0;
            ecs2::Runtime::queueCommand(v36, (uint64_t)v81);
            if (v84 != -1) {
              ((void (*)(char *, void *))off_1EF58FC28[v84])(&v77, v81);
            }
            int v84 = -1;
            uint64_t result = (uint64_t)v80;
            if (v80 == v78)
            {
              uint64_t result = (*(uint64_t (**)(void *))(v78[0] + 32))(v78);
            }
            else if (v80)
            {
              uint64_t result = (*(uint64_t (**)(void))(*v80 + 40))();
            }
          }
        }
      }
      unint64_t v37 = (void *)v73[4];
      unint64_t v14 = v10 + 1;
      uint64_t v76 = v10 + 1;
      if (v10 + 1 != v37)
      {
        uint64_t v38 = v72[4];
        uint64_t v40 = v72[7];
        uint64_t v39 = v72[8];
        uint64_t v41 = v4[4];
        uint64_t result = v4[7];
        uint64_t v42 = v4[8];
        uint64_t v43 = v5[4];
        uint64_t v45 = v5[7];
        uint64_t v44 = v5[8];
        uint64_t v46 = v7[4];
        uint64_t v47 = v7[7];
        uint64_t v48 = v7[8];
        while (1)
        {
          unint64_t v49 = *((unsigned int *)v14 + 1);
          unint64_t v50 = v49 >> 7;
          if (v49 >> 7 < (v72[5] - v38) >> 3)
          {
            uint64_t v51 = *(void *)(v38 + 8 * v50);
            if (v51)
            {
              uint64_t v52 = v49 & 0x7F;
              unint64_t v53 = *(unsigned __int16 *)(v51 + 2 * v52);
              if ((v39 - v40) >> 3 > v53)
              {
                uint64_t v54 = v40 + 8 * v53;
                BOOL v55 = v54 != v39 && *(_DWORD *)(v54 + 4) == v49;
                if (v55 && v50 < (v4[5] - v41) >> 3)
                {
                  uint64_t v57 = *(void *)(v41 + 8 * v50);
                  if (v57)
                  {
                    unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v52);
                    if ((v42 - result) >> 3 > v58)
                    {
                      unint64_t v59 = result + 8 * v58;
                      BOOL v60 = v59 != v42 && *(_DWORD *)(v59 + 4) == v49;
                      if (v60 && v50 < (v5[5] - v43) >> 3)
                      {
                        uint64_t v62 = *(void *)(v43 + 8 * v50);
                        if (v62)
                        {
                          unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v52);
                          if ((v44 - v45) >> 3 > v63)
                          {
                            uint64_t v64 = v45 + 8 * v63;
                            BOOL v65 = v64 != v44 && *(_DWORD *)(v64 + 4) == v49;
                            if (v65 && v50 < (v7[5] - v46) >> 3)
                            {
                              uint64_t v67 = *(void *)(v46 + 8 * v50);
                              if (v67)
                              {
                                unint64_t v68 = *(unsigned __int16 *)(v67 + 2 * v52);
                                if ((v48 - v47) >> 3 > v68)
                                {
                                  uint64_t v69 = v47 + 8 * v68;
                                  if (*(_DWORD *)(v69 + 4) == v49 && v69 != v48) {
                                    break;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v37)
          {
            unint64_t v14 = v37;
            goto LABEL_15;
          }
        }
        unint64_t v37 = v14;
LABEL_15:
        uint64_t v76 = v14;
      }
      uint64_t v10 = v37;
    }
    while (v9 != v37);
  }
  void *v74 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(*(int8x8_t **)(a2 + 8));
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  uint64_t v6 = &ecs2::Runtime::_localEntity;
  uint64_t v7 = v4 - v5;
  if (v4 == v5
    || (unint64_t v8 = *(unsigned int *)(v5 + 4), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((uint64_t v13 = v5 + 8 * v12, v13 != v4) ? (v14 = *(_DWORD *)(v13 + 4) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v4 != v5)
    {
      unint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        unint64_t *v21 = *v24;
        unint64_t v26 = *v24;
        unint64_t v27 = *v24 >> 39;
        uint64_t v28 = v22[4];
        if (v27 < (v22[5] - v28) >> 3
          && (uint64_t v29 = *(void *)(v28 + 8 * v27)) != 0
          && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v26) & 0x7F)),
              uint64_t v31 = v22[7],
              uint64_t v32 = v22[8],
              v30 < (v32 - v31) >> 3)
          && ((unint64_t v33 = HIDWORD(v26), v34 = v31 + 8 * v30, v34 != v32)
            ? (BOOL v35 = *(_DWORD *)(v34 + 4) == v33)
            : (BOOL v35 = 0),
              v35))
        {
          uint64_t v36 = v22[11];
          uint64_t v37 = v22[10] + 33 * v30;
        }
        else
        {
          uint64_t v36 = v22[11];
          uint64_t v37 = v36;
        }
        if (v37 == v36) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = v37;
        }
        *(void *)uint64_t v38 = 0;
        *(void *)(v38 + 8) = 0;
        *(_WORD *)(v38 + 16) = 256;
        *(unsigned char *)(v38 + 18) = 1;
        *(_DWORD *)(v38 + 19) = 0;
        *(unsigned char *)(v38 + 23) = 2;
        *(void *)(v38 + 24) = 0;
        *(unsigned char *)(v38 + 32) = 0;
        uint64_t v39 = v22[4];
        uint64_t v40 = v22[7];
        BOOL v25 = (unint64_t *)v22[8];
        uint64_t v41 = v24 + 1;
        while (v41 != v25)
        {
          unint64_t v42 = *((unsigned int *)v41 + 1);
          uint64_t v43 = v22[8];
          if (v42 >> 7 < (v22[5] - v39) >> 3)
          {
            uint64_t v44 = *(void *)(v39 + 8 * (v42 >> 7));
            uint64_t v43 = v22[8];
            if (v44)
            {
              unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
              uint64_t v43 = v22[8];
              if (((uint64_t)v25 - v40) >> 3 > v45)
              {
                uint64_t v43 = v40 + 8 * v45;
                if (*(_DWORD *)(v43 + 4) != v42) {
                  uint64_t v43 = v22[8];
                }
              }
            }
          }
          ++v41;
          if ((unint64_t *)v43 != v25)
          {
            BOOL v25 = v41 - 1;
            break;
          }
        }
        uint64_t v24 = v25;
      }
      while (v23 != v25);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    uint64_t v16 = v5 + 8;
    while (v16 != v4)
    {
      unint64_t v17 = *(unsigned int *)(v16 + 4);
      uint64_t v18 = v4;
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = v4;
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = v4;
          if (v15 > v20)
          {
            uint64_t v18 = v5 + 8 * v20;
            if (*(_DWORD *)(v18 + 4) != v17) {
              uint64_t v18 = v4;
            }
          }
        }
      }
      v16 += 8;
      if (v18 != v4)
      {
        uint64_t v5 = v16 - 8;
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)(*v6)(v6);
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A194A058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PassShadowConfiguration>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PassCount>(v3);
  uint64_t v7 = v5 + 4;
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v5[8] - v5[7]) {
    uint64_t v7 = (void *)(v6 + 32);
  }
  if (v4[8] - v4[7] < v7[4] - v7[3]) {
    uint64_t v7 = v4 + 4;
  }
  uint64_t v66 = v7;
  uint64_t v67 = v5;
  unint64_t v68 = (void *)v6;
  uint64_t v69 = v4;
  unint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  unint64_t v70 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v66))
  {
    unint64_t v10 = v8 + 1;
    do
    {
      unint64_t v8 = v10;
      unint64_t v70 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v66);
      unint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v12 = (void *)result;
  }
  else
  {
    unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *unint64_t v12 = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v5[4];
      if (v16 < (v5[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v5[7],
            uint64_t v20 = v5[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (md::FrameGraphBuilder **)(v5[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (md::FrameGraphBuilder **)v5[11];
      }
      uint64_t v25 = v4[4];
      if (v16 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = (unsigned char *)v4[11];
        unint64_t v33 = (unsigned char *)(v4[10] + v27);
      }
      else
      {
        uint64_t v32 = (unsigned char *)v4[11];
        unint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v33;
      }
      BOOL v35 = ***(uint64_t ****)(a1 + 8);
      if (v35 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v35 != 0xD369A4D92C8FFE6CLL)
      {
        uint64_t v36 = v35 + 5;
        do
        {
          uint64_t v37 = *v36;
          v36 += 5;
        }
        while (v37 != 0xD369A4D92C8FFE6CLL);
        BOOL v35 = v36 - 5;
      }
      uint64_t v38 = v35[3];
      uint64_t v39 = (std::__shared_weak_count *)v35[4];
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 8))(v38);
      if (result)
      {
        uint64_t result = (uint64_t)md::StandardPassList::_buildShadowFrameGraph((void *)result, (const BOOL *)*v34, *v24);
        if (*v34)
        {
          uint64_t v41 = *(void **)(a1 + 8);
          uint64_t v42 = HIDWORD(*v12);
          uint64_t v43 = *v12 << 32;
          v72[0] = &unk_1EF5232D0;
          v72[1] = v43;
          int v73 = v42;
          char v77 = v75;
          unint64_t v74 = v72;
          v75[0] = &unk_1EF5232D0;
          v75[1] = v43;
          int v76 = v42;
          int v78 = 0;
          ecs2::Runtime::queueCommand(v41, (uint64_t)v75);
          if (v78 != -1) {
            ((void (*)(char *, void *))off_1EF5911E0[v78])(&v71, v75);
          }
          int v78 = -1;
          uint64_t result = (uint64_t)v74;
          if (v74 == v72)
          {
            uint64_t result = (*(uint64_t (**)(void *))(v72[0] + 32))(v72);
          }
          else if (v74)
          {
            uint64_t result = (*(uint64_t (**)(void))(*v74 + 40))();
          }
        }
      }
      unint64_t v8 = (void *)v66[4];
      uint64_t v13 = v70 + 1;
      unint64_t v70 = v13;
      if (v13 != v8)
      {
        uint64_t v44 = v67[4];
        while (1)
        {
          unint64_t v45 = *((unsigned int *)v13 + 1);
          unint64_t v46 = v45 >> 7;
          if (v45 >> 7 < (v67[5] - v44) >> 3)
          {
            uint64_t v47 = *(void *)(v44 + 8 * v46);
            if (v47)
            {
              uint64_t v48 = v45 & 0x7F;
              unint64_t v49 = *(unsigned __int16 *)(v47 + 2 * v48);
              uint64_t v50 = v67[7];
              uint64_t result = v67[8];
              if (v49 < (result - v50) >> 3)
              {
                uint64_t v51 = v50 + 8 * v49;
                if (v51 != result && *(_DWORD *)(v51 + 4) == v45)
                {
                  uint64_t v53 = v68[4];
                  uint64_t result = v68[5] - v53;
                  if (v46 < result >> 3)
                  {
                    uint64_t v54 = *(void *)(v53 + 8 * v46);
                    if (v54)
                    {
                      unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * v48);
                      uint64_t v56 = v68[7];
                      uint64_t result = v68[8];
                      if (v55 < (result - v56) >> 3)
                      {
                        uint64_t v57 = v56 + 8 * v55;
                        if (v57 != result && *(_DWORD *)(v57 + 4) == v45)
                        {
                          uint64_t v59 = v69[4];
                          uint64_t result = v69[5] - v59;
                          if (v46 < result >> 3)
                          {
                            uint64_t v60 = *(void *)(v59 + 8 * v46);
                            if (v60)
                            {
                              unint64_t v61 = *(unsigned __int16 *)(v60 + 2 * v48);
                              uint64_t v63 = v69[7];
                              uint64_t v62 = v69[8];
                              uint64_t result = v62 - v63;
                              if (v61 < (v62 - v63) >> 3)
                              {
                                uint64_t v64 = v63 + 8 * v61;
                                if (*(_DWORD *)(v64 + 4) == v45 && v64 != v62) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v13 == v8)
          {
            uint64_t v13 = v8;
            goto LABEL_13;
          }
        }
        unint64_t v8 = v13;
LABEL_13:
        unint64_t v70 = v13;
      }
    }
    while (v9 != v8);
  }
  *unint64_t v12 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v61 = 0x56D66E00519BD989;
  int8x8_t v4 = v3[16];
  if (!*(void *)&v4) {
    goto LABEL_21;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x56D66E00519BD989;
    if (*(void *)&v4 <= 0x56D66E00519BD989uLL) {
      uint64_t v6 = 0x56D66E00519BD989uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x56D66E00519BD989;
  }
  uint64_t v7 = *(void **)(*(void *)&v3[15] + 8 * v6);
  if (!v7 || (unint64_t v8 = (void *)*v7) == 0) {
LABEL_21:
  }
    operator new();
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x56D66E00519BD989)
      {
        if (v8[2] == 0x56D66E00519BD989) {
          goto LABEL_81;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x56D66E00519BD989) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (v8[2] != 0x56D66E00519BD989) {
    goto LABEL_11;
  }
LABEL_81:
  uint64_t v59 = (void *)v8[3];
  uint64_t v13 = (unint64_t *)v59[7];
  unint64_t v12 = (uint64_t *)v59[8];
  uint64_t v14 = (char *)v12 - (char *)v13;
  if (v12 == (uint64_t *)v13
    || (v15 = *((unsigned int *)v13 + 1), v16 = v59[4], unint64_t v17 = (v59[5] - v16) >> 3, v15 >> 7 < v17)
    && (uint64_t v18 = *(void *)(v16 + 8 * (v15 >> 7))) != 0
    && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (v15 & 0x7F)), v19 < v14 >> 3)
    && ((uint64_t v20 = (uint64_t *)&v13[v19], v20 != v12) ? (v21 = *((_DWORD *)v20 + 1) == v15) : (v21 = 0), v21))
  {
LABEL_40:
    if (v12 != (uint64_t *)v13)
    {
      uint64_t v28 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *uint64_t v28 = *v13;
        unint64_t v30 = *v13;
        unint64_t v31 = *v13 >> 39;
        uint64_t v32 = v59[4];
        if (v31 < (v59[5] - v32) >> 3
          && (uint64_t v33 = *(void *)(v32 + 8 * v31)) != 0
          && (unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(v30) & 0x7F)),
              uint64_t v36 = v59[7],
              uint64_t v35 = v59[8],
              v34 < (v35 - v36) >> 3)
          && ((unint64_t v37 = HIDWORD(v30), v38 = v36 + 8 * v34, v38 != v35)
            ? (BOOL v39 = *(_DWORD *)(v38 + 4) == v37)
            : (BOOL v39 = 0),
              v39))
        {
          uint64_t v40 = v59[11];
          uint64_t v41 = v59[10] - v34 + 8 * v34;
        }
        else
        {
          uint64_t v40 = v59[11];
          uint64_t v41 = v40;
        }
        if (v41 == v40) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = (unsigned __int8 *)v41;
        }
        uint64_t v43 = **(void **)(a1 + 8);
        uint64_t v44 = *(void **)v43;
        unint64_t v45 = *(void **)(v43 + 8);
        if (v44 != v45)
        {
          while (*v44 != 0x41D4E9297E100630)
          {
            v44 += 5;
            if (v44 == v45) {
              goto LABEL_63;
            }
          }
        }
        if (v44 == v45)
        {
LABEL_63:
          uint64_t v46 = 0;
        }
        else
        {
          uint64_t v46 = v44[3];
          uint64_t v47 = (std::__shared_weak_count *)v44[4];
          if (v47)
          {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
        uint64_t v61 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(*(void *)(v46 + 10496) + 2424), *v42, v42[1], v42[2], v42[3], v42[4], v42[5], v42[6]);
        unint64_t v48 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back((void *)(v46 + 728), &v61);
        *(int64x2_t *)uint64_t v64 = vdupq_n_s64(1uLL);
        v64[16] = 0;
        std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>(v46 + 688, v48, v48, (uint64_t)v64);
        unint64_t v49 = *(void **)(a1 + 8);
        uint64_t v50 = *v28;
        uint64_t v61 = (uint64_t)&off_1EF521B30;
        *(void *)&long long v62 = v48;
        *((void *)&v62 + 1) = v50;
        uint64_t v63 = &v61;
        BOOL v65 = v64;
        *(void *)uint64_t v64 = &off_1EF521B30;
        *(_OWORD *)&v64[8] = v62;
        int v66 = 0;
        ecs2::Runtime::queueCommand(v49, (uint64_t)v64);
        if (v66 != -1) {
          ((void (*)(char *, unsigned char *))off_1EF58FE68[v66])(&v60, v64);
        }
        int v66 = -1;
        if (v63 == &v61)
        {
          (*(void (**)(uint64_t *))(v61 + 32))(&v61);
        }
        else if (v63)
        {
          (*(void (**)(void))(*v63 + 40))();
        }
        uint64_t v51 = v59[4];
        uint64_t v52 = v59[7];
        uint64_t v29 = (uint64_t *)v59[8];
        uint64_t v53 = (uint64_t *)(v13 + 1);
        while (v53 != v29)
        {
          unint64_t v54 = *((unsigned int *)v53 + 1);
          uint64_t v55 = v59[8];
          if (v54 >> 7 < (v59[5] - v51) >> 3)
          {
            uint64_t v56 = *(void *)(v51 + 8 * (v54 >> 7));
            uint64_t v55 = v59[8];
            if (v56)
            {
              unint64_t v57 = *(unsigned __int16 *)(v56 + 2 * (v54 & 0x7F));
              uint64_t v55 = v59[8];
              if (((uint64_t)v29 - v52) >> 3 > v57)
              {
                uint64_t v55 = v52 + 8 * v57;
                if (*(_DWORD *)(v55 + 4) != v54) {
                  uint64_t v55 = v59[8];
                }
              }
            }
          }
          ++v53;
          if ((uint64_t *)v55 != v29)
          {
            uint64_t v29 = v53 - 1;
            break;
          }
        }
        uint64_t v13 = (unint64_t *)v29;
      }
      while (v12 != v29);
    }
  }
  else
  {
    unint64_t v22 = v14 >> 3;
    BOOL v23 = (uint64_t *)(v13 + 1);
    while (v23 != v12)
    {
      unint64_t v24 = *((unsigned int *)v23 + 1);
      uint64_t v25 = (uint64_t *)v59[8];
      if (v24 >> 7 < v17)
      {
        uint64_t v26 = *(void *)(v16 + 8 * (v24 >> 7));
        uint64_t v25 = (uint64_t *)v59[8];
        if (v26)
        {
          unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (v24 & 0x7F));
          uint64_t v25 = (uint64_t *)v59[8];
          if (v22 > v27)
          {
            uint64_t v25 = (uint64_t *)&v13[v27];
            if (*((_DWORD *)v25 + 1) != v24) {
              uint64_t v25 = (uint64_t *)v59[8];
            }
          }
        }
      }
      ++v23;
      if (v25 != v12)
      {
        uint64_t v13 = (unint64_t *)(v23 - 1);
        goto LABEL_40;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A194AC58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSSAOPasses>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    int8x8_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    uint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::UniqueColorDataHandle>(v3);
  gdc::Registry::storage<md::ls::SharedColorDataHandle>(v3);
  gdc::Registry::storage<md::ls::ColorDataHandle>(v3);
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v6 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v96, v6, v4, v5, *(void *)(v6 + 24));
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v94, v7, v4, v5, *(void *)(v7 + 32));
  if (v95 != v99)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    __asm { FMOV            V10.2S, #1.0 }
    uint64_t v93 = result;
    while (1)
    {
      unint64_t *result = *v9;
      unint64_t v14 = *v9;
      unint64_t v15 = HIDWORD(*v9);
      unint64_t v16 = v14 >> 39;
      uint64_t v17 = v4[4];
      if (v14 >> 39 < (v4[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v4[7],
            uint64_t v20 = v4[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (_ZF = *(_DWORD *)(v22 + 4) == v15) : (_ZF = 0), _ZF))
      {
        unint64_t v24 = (unint64_t *)(v4[10] + 24 * v19);
      }
      else
      {
        unint64_t v24 = (unint64_t *)v4[11];
      }
      uint64_t v25 = v5[4];
      if (v16 < (v5[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v5[7],
            uint64_t v28 = v5[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = (unint64_t *)(v5[10] + 8 * v27);
      }
      else
      {
        uint64_t v32 = (unint64_t *)v5[11];
      }
      uint64_t v33 = ***(uint64_t ****)(a1 + 8);
      if (v33 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v33 != 0x22D45F5AAD4BF408)
      {
        unint64_t v34 = v33 + 5;
        do
        {
          uint64_t v35 = *v34;
          v34 += 5;
        }
        while (v35 != 0x22D45F5AAD4BF408);
        uint64_t v33 = v34 - 5;
      }
      uint64_t v36 = (uint64_t (***)(void))v33[3];
      unint64_t v37 = (std::__shared_weak_count *)v33[4];
      if (v37)
      {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      uint64_t v38 = *(void **)((**v36)(v36) + 8);
      unint64_t v39 = v38[1];
      if ((v39 & (v39 - 1)) != 0)
      {
        unint64_t v41 = 0x1AF456233693CD46;
        if (v39 <= 0x1AF456233693CD46) {
          unint64_t v41 = 0x1AF456233693CD46 % v39;
        }
        uint64_t v40 = *(void **)(*v38 + 8 * v41);
        do
        {
          do
            uint64_t v40 = (void *)*v40;
          while (v40[1] != 0x1AF456233693CD46);
        }
        while (v40[2] != 0x1AF456233693CD46);
      }
      else
      {
        uint64_t v40 = *(void **)(*v38 + 8 * ((v39 - 1) & 0x1AF456233693CD46));
        do
        {
          do
            uint64_t v40 = (void *)*v40;
          while (v40[1] != 0x1AF456233693CD46);
        }
        while (v40[2] != 0x1AF456233693CD46);
      }
      uint64_t v42 = *(void *)(v40[5] + 32);
      float v43 = *(float *)(v42 + 3076);
      float v44 = *(float *)(v42 + 3080);
      uint64_t v45 = **(void **)(a1 + 8);
      uint64_t v46 = *(void **)v45;
      uint64_t v47 = *(void **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x4EDAD23DFB014132)
        {
          v46 += 5;
          if (v46 == v47) {
            goto LABEL_53;
          }
        }
      }
      if (v46 == v47)
      {
LABEL_53:
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v49 = v46[3];
        unint64_t v48 = (std::__shared_weak_count *)v46[4];
        if (v48)
        {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      unint64_t v50 = *v24;
      *(void *)uint64_t v103 = v50;
      uint64_t v51 = *(void *)(v49 + 120);
      if (v50 >= (unint64_t)((*(void *)(v49 + 128) - v51) >> 3)) {
        goto LABEL_62;
      }
      unint64_t v52 = *(void *)(v51 + 8 * v50);
      if (!v52) {
        goto LABEL_63;
      }
      if (HIDWORD(v50) != HIDWORD(v52)
        || ((uint64_t v53 = *(void *)(v49 + 144),
             unint64_t v54 = (unint64_t *)(v53 + 8 * v52),
             v54 != *(unint64_t **)(v49 + 152))
          ? (BOOL v55 = v53 == 0)
          : (BOOL v55 = 1),
            v55))
      {
LABEL_62:
        unint64_t v52 = 0;
      }
      else
      {
        uint64_t v92 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v49 + 56, v50, v103);
        ++v92[3];
        unint64_t v52 = *v54;
      }
LABEL_63:
      uint64_t v56 = *(int8x8_t **)v49;
      long long v100 = v52;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v105, v56, (uint64_t *)&v100, 0);
      uint64_t v57 = v105;
      if (v105)
      {
        float v58 = fmaxf(v44 + v43, 1.0);
        (*(void (**)(unsigned char *__return_ptr, uint64_t, float))(*(void *)v105 + 976))(v103, v105, v58);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(void *)v57 + 928))(&v102, v57, v58);
        if (v103[0])
        {
          LOBYTE(v100) = 0;
LABEL_67:
          int8x8_t v59 = *(int8x8_t *)&v103[4];
          float v60 = v104;
          int v61 = v102;
          float v62 = *((float *)&v102 + 1);
          if ((_BYTE)v102) {
            float v63 = *((float *)&v102 + 1);
          }
          else {
            float v63 = 1.0;
          }
        }
        else
        {
          (*(void (**)(long long *__return_ptr, uint64_t, float))(*(void *)v57 + 232))(&v100, v57, v58);
          if (v103[0]) {
            goto LABEL_67;
          }
          int8x8_t v59 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((_BYTE)v100 == 0), 0x1FuLL)), _D10, *(int8x8_t *)((char *)&v100 + 4));
          if ((_BYTE)v100) {
            float v60 = *((float *)&v100 + 3);
          }
          else {
            float v60 = 1.0;
          }
          if ((_BYTE)v100) {
            float v63 = v101;
          }
          else {
            float v63 = 1.0;
          }
          int v61 = v102;
          float v62 = *((float *)&v102 + 1);
        }
        unint64_t v64 = *v32;
        unint64_t v107 = v64;
        uint64_t v65 = *(void *)(v49 + 1008);
        if (v64 < (unint64_t)((*(void *)(v49 + 1016) - v65) >> 3)
          && (uint64_t v66 = *(void *)(v65 + 8 * v64)) != 0
          && HIDWORD(v64) == HIDWORD(v66))
        {
          uint64_t v67 = *(void *)(v49 + 1032) + 20 * v66;
          uint64_t v68 = *(void *)(v49 + 1040);
        }
        else
        {
          uint64_t v68 = *(void *)(v49 + 1040);
          uint64_t v67 = v68;
        }
        if (v67 == v68) {
          uint64_t v69 = 0;
        }
        else {
          uint64_t v69 = v67;
        }
        if (v69)
        {
          unint64_t v70 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v49 + 944, v64, &v107);
          ++v70[3];
        }
        *(int8x8_t *)uint64_t v69 = v59;
        if (v61) {
          float v71 = v62;
        }
        else {
          float v71 = -1.0;
        }
        *(float *)(v69 + 8) = v60;
        *(float *)(v69 + 12) = v63;
        *(float *)(v69 + 16) = v71;
      }
      uint64_t v72 = v106;
      if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      int v73 = v99;
      uint64_t v9 = *(unint64_t **)(v96 + 32);
      if (++v99 == v9)
      {
        uint64_t result = v93;
      }
      else
      {
        uint64_t v74 = v97[4];
        unint64_t v75 = (v97[5] - v74) >> 3;
        int v76 = v73 + 2;
        uint64_t result = v93;
        while (1)
        {
          unint64_t v77 = *((unsigned int *)v76 - 1);
          unint64_t v78 = v77 >> 7;
          if (v77 >> 7 < v75)
          {
            uint64_t v79 = *(void *)(v74 + 8 * v78);
            if (v79)
            {
              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * (v77 & 0x7F));
              uint64_t v81 = v97[7];
              uint64_t v82 = v97[8];
              if (v80 < (v82 - v81) >> 3)
              {
                uint64_t v83 = v81 + 8 * v80;
                if (v83 != v82 && *(_DWORD *)(v83 + 4) == v77)
                {
                  uint64_t v85 = v98[4];
                  if (v78 < (v98[5] - v85) >> 3)
                  {
                    uint64_t v86 = *(void *)(v85 + 8 * v78);
                    if (v86)
                    {
                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * (v77 & 0x7F));
                      uint64_t v89 = v98[7];
                      uint64_t v88 = v98[8];
                      if (v87 < (v88 - v89) >> 3)
                      {
                        uint64_t v90 = v89 + 8 * v87;
                        if (v90 != v88 && *(_DWORD *)(v90 + 4) == v77) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v99 = v76;
          _ZF = v76++ == v9;
          if (_ZF) {
            goto LABEL_10;
          }
        }
        uint64_t v9 = v76 - 1;
      }
LABEL_10:
      if (v95 == v9) {
        goto LABEL_117;
      }
    }
  }
  uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_117:
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A194B4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28)
  {
    if (!atomic_fetch_add(&a28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
      std::__shared_weak_count::__release_weak(a28);
    }
  }
  _Unwind_Resume(exception_object);
}

void ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>>::~Model()
{
}

void ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>>::~Model()
{
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::~Model()
{
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::~Model()
{
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>>::~Model()
{
}

void ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::~Model()
{
}

uint64_t gdc::Registry::storage<md::ls::IsS2>(int8x8_t *a1)
{
  uint64_t v10 = 0xE1A4D8CDA8432F0;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0xE1A4D8CDA8432F0;
    if (*(void *)&v1 <= 0xE1A4D8CDA8432F0uLL) {
      uint64_t v3 = 0xE1A4D8CDA8432F0uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0xE1A4D8CDA8432F0;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE1A4D8CDA8432F0)
      {
        if (v5[2] == 0xE1A4D8CDA8432F0) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE1A4D8CDA8432F0) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE1A4D8CDA8432F0) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194B7F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable>>(int8x8_t *a1)
{
  unint64_t v10 = 0xE57C2F66048E40BDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE57C2F66048E40BDLL;
    if (*(void *)&v1 <= 0xE57C2F66048E40BDLL) {
      unint64_t v3 = 0xE57C2F66048E40BDLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE57C2F66048E40BDLL;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE57C2F66048E40BDLL)
      {
        if (v5[2] == 0xE57C2F66048E40BDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE57C2F66048E40BDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE57C2F66048E40BDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194BA68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MaterialBrightnessAndSaturation>(int8x8_t *a1)
{
  uint64_t v10 = 0x3B99BF65D7C678C8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3B99BF65D7C678C8;
    if (*(void *)&v1 <= 0x3B99BF65D7C678C8uLL) {
      uint64_t v3 = 0x3B99BF65D7C678C8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3B99BF65D7C678C8;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3B99BF65D7C678C8)
      {
        if (v5[2] == 0x3B99BF65D7C678C8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3B99BF65D7C678C8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3B99BF65D7C678C8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194BCD8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassShadowConfiguration>(int8x8_t *a1)
{
  uint64_t v10 = 0x7216A09FEC0661A6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7216A09FEC0661A6;
    if (*(void *)&v1 <= 0x7216A09FEC0661A6uLL) {
      uint64_t v3 = 0x7216A09FEC0661A6uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7216A09FEC0661A6;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7216A09FEC0661A6)
      {
        if (v5[2] == 0x7216A09FEC0661A6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7216A09FEC0661A6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7216A09FEC0661A6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194BF48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::SupportsFragmentClip>(int8x8_t *a1)
{
  uint64_t v10 = 0x14C796C7576DD197;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x14C796C7576DD197;
    if (*(void *)&v1 <= 0x14C796C7576DD197uLL) {
      uint64_t v3 = 0x14C796C7576DD197uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x14C796C7576DD197;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x14C796C7576DD197)
      {
        if (v5[2] == 0x14C796C7576DD197) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x14C796C7576DD197) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x14C796C7576DD197) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194C1B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::VisibilityGroupTest>(int8x8_t *a1)
{
  unint64_t v10 = 0xFA77EBF8E4CA45B8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xFA77EBF8E4CA45B8;
    if (*(void *)&v1 <= 0xFA77EBF8E4CA45B8) {
      unint64_t v3 = 0xFA77EBF8E4CA45B8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xFA77EBF8E4CA45B8;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xFA77EBF8E4CA45B8)
      {
        if (v5[2] == 0xFA77EBF8E4CA45B8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xFA77EBF8E4CA45B8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xFA77EBF8E4CA45B8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194C428(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::LayerDataReference>(int8x8_t *a1)
{
  uint64_t v10 = 0x664452B21D4833;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x664452B21D4833;
    if (*(void *)&v1 <= 0x664452B21D4833uLL) {
      uint64_t v3 = 0x664452B21D4833uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x664452B21D4833;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x664452B21D4833)
      {
        if (v5[2] == 0x664452B21D4833) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x664452B21D4833) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x664452B21D4833) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194C698(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::InstanceDataV>(int8x8_t *a1)
{
  unint64_t v10 = 0xCC16A20B07DB93CCLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCC16A20B07DB93CCLL;
    if (*(void *)&v1 <= 0xCC16A20B07DB93CCLL) {
      unint64_t v3 = 0xCC16A20B07DB93CCLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCC16A20B07DB93CCLL;
  }
  int8x8_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCC16A20B07DB93CCLL)
      {
        if (v5[2] == 0xCC16A20B07DB93CCLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCC16A20B07DB93CCLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCC16A20B07DB93CCLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A194C908(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v80, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v78, v9, v6, v4, *(void *)(v9 + 32));
  if (v79 != v83)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    int v76 = result;
    uint64_t v77 = v2;
    while (1)
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      unint64_t v13 = HIDWORD(*v11);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * v14)) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((uint64_t v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == v13) : (v21 = 0), v21))
      {
        uint64_t v75 = 33 * v17;
        uint64_t v22 = v6[11];
        uint64_t v23 = v6[10] + v75;
      }
      else
      {
        uint64_t v22 = v6[11];
        uint64_t v23 = v22;
      }
      if (v23 == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v14)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v13) : (v31 = 0), v31))
      {
        uint64_t v32 = (unint64_t *)(v4[10] + 8 * v27);
      }
      else
      {
        uint64_t v32 = (unint64_t *)v4[11];
      }
      uint64_t v33 = **(void **)(v2 + 8);
      unint64_t v34 = *(void **)v33;
      uint64_t v35 = *(void **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x348A0B0E758C07C2)
        {
          v34 += 5;
          if (v34 == v35) {
            goto LABEL_37;
          }
        }
      }
      if (v34 == v35)
      {
LABEL_37:
        uint64_t v37 = 0;
      }
      else
      {
        uint64_t v37 = v34[3];
        uint64_t v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      uint64_t v38 = ***(uint64_t ****)(v2 + 8);
      if (v38 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v38 != 0xC94DD89A7B09BE9CLL)
      {
        unint64_t v39 = v38 + 5;
        do
        {
          uint64_t v40 = *v39;
          v39 += 5;
        }
        while (v40 != 0xC94DD89A7B09BE9CLL);
        uint64_t v38 = v39 - 5;
      }
      uint64_t v41 = v38[3];
      uint64_t v42 = (std::__shared_weak_count *)v38[4];
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(v41);
      unint64_t v84 = *v32;
      unint64_t v44 = v84;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v37 + 104));
      uint64_t v45 = *(void *)(v37 + 504);
      if (v44 < (unint64_t)((*(void *)(v37 + 512) - v45) >> 3)
        && ((uint64_t v46 = *(void *)(v45 + 8 * v44)) != 0 ? (v47 = HIDWORD(v44) == HIDWORD(v46)) : (v47 = 0),
            v47))
      {
        uint64_t v49 = (uint64_t *)(*(void *)(v37 + 528) + 40 * v46);
        unint64_t v48 = *(uint64_t **)(v37 + 536);
      }
      else
      {
        unint64_t v48 = *(uint64_t **)(v37 + 536);
        uint64_t v49 = v48;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v37 + 104));
      unint64_t v50 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v37 + 440), v84, &v84);
      ++v50[3];
      if (v49 == v48 || !v49)
      {
        uint64_t v2 = v77;
      }
      else
      {
        uint64_t v51 = *v49;
        uint64_t v2 = v77;
        if (*v49)
        {
          uint64_t v52 = *(void *)(v43 + 2576);
          uint64_t v53 = *(void *)(v52 + 312);
          unint64_t v54 = *(std::__shared_weak_count **)(v52 + 320);
          if (v54)
          {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v55 = v53 != v51;
            if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          else
          {
            BOOL v55 = v53 != v51;
          }
          *(unsigned char *)(v24 + 18) = v55;
          goto LABEL_63;
        }
      }
      *(unsigned char *)(v24 + 18) = 0;
LABEL_63:
      uint64_t v56 = v83;
      uint64_t v11 = *(unint64_t **)(v80 + 32);
      if (++v83 != v11)
      {
        uint64_t v57 = v81[4];
        unint64_t v58 = (v81[5] - v57) >> 3;
        int8x8_t v59 = v56 + 2;
        while (1)
        {
          unint64_t v60 = *((unsigned int *)v59 - 1);
          unint64_t v61 = v60 >> 7;
          if (v60 >> 7 < v58)
          {
            uint64_t v62 = *(void *)(v57 + 8 * v61);
            if (v62)
            {
              unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * (v60 & 0x7F));
              uint64_t v65 = v81[7];
              uint64_t v64 = v81[8];
              if (v63 < (v64 - v65) >> 3)
              {
                uint64_t v66 = v65 + 8 * v63;
                if (v66 != v64 && *(_DWORD *)(v66 + 4) == v60)
                {
                  uint64_t v68 = v82[4];
                  if (v61 < (v82[5] - v68) >> 3)
                  {
                    uint64_t v69 = *(void *)(v68 + 8 * v61);
                    if (v69)
                    {
                      unint64_t v70 = *(unsigned __int16 *)(v69 + 2 * (v60 & 0x7F));
                      uint64_t v72 = v82[7];
                      uint64_t v71 = v82[8];
                      if (v70 < (v71 - v72) >> 3)
                      {
                        uint64_t v73 = v72 + 8 * v70;
                        if (v73 != v71 && *(_DWORD *)(v73 + 4) == v60) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v83 = v59;
          BOOL v21 = v59++ == v11;
          if (v21) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v59 - 1;
      }
LABEL_9:
      uint64_t result = v76;
      if (v79 == v11) {
        goto LABEL_86;
      }
    }
  }
  uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_86:
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  v51[0] = 0x1631ACE79ACA9DD7;
  int8x8_t v4 = v3[16];
  if (!*(void *)&v4) {
    goto LABEL_21;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1631ACE79ACA9DD7;
    if (*(void *)&v4 <= 0x1631ACE79ACA9DD7uLL) {
      uint64_t v6 = 0x1631ACE79ACA9DD7uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1631ACE79ACA9DD7;
  }
  unint64_t v7 = *(void **)(*(void *)&v3[15] + 8 * v6);
  if (!v7 || (uint64_t v8 = (void *)*v7) == 0) {
LABEL_21:
  }
    operator new();
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1631ACE79ACA9DD7)
      {
        if (v8[2] == 0x1631ACE79ACA9DD7) {
          goto LABEL_65;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1631ACE79ACA9DD7) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (v8[2] != 0x1631ACE79ACA9DD7) {
    goto LABEL_11;
  }
LABEL_65:
  unint64_t v50 = (void *)v8[3];
  unint64_t v12 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  unint64_t v13 = v12;
  unint64_t v14 = v12 + 4;
  if (v50[8] - v50[7] >= v12[8] - v12[7]) {
    uint64_t v15 = (uint64_t)(v12 + 4);
  }
  else {
    uint64_t v15 = (uint64_t)(v50 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v53, v15, v12, v50, *(void *)(v15 + 24));
  if (v50[8] - v50[7] >= v13[8] - v13[7]) {
    uint64_t v16 = (uint64_t)v14;
  }
  else {
    uint64_t v16 = (uint64_t)(v50 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v51, v16, v13, v50, *(void *)(v16 + 32));
  if (v52 == v56)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v18;
      unint64_t v19 = *v18;
      uint64_t v20 = v13[4];
      if (v19 >> 39 < (v13[5] - v20) >> 3
        && (uint64_t v21 = *(void *)(v20 + 8 * (v19 >> 39))) != 0
        && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v19) & 0x7F)),
            uint64_t v24 = v13[7],
            uint64_t v23 = v13[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = HIDWORD(v19), uint64_t v26 = v24 + 8 * v22, v26 != v23)
          ? (BOOL v27 = *(_DWORD *)(v26 + 4) == v25)
          : (BOOL v27 = 0),
            v27))
      {
        uint64_t v28 = v13[11];
        uint64_t v29 = v13[10] + 33 * v22;
      }
      else
      {
        uint64_t v28 = v13[11];
        uint64_t v29 = v28;
      }
      if (v29 == v28) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29;
      }
      *(unsigned char *)(v30 + 21) = 1;
      BOOL v31 = v56;
      uint64_t v18 = *(unint64_t **)(v53 + 32);
      if (++v56 != v18)
      {
        uint64_t v32 = v54[4];
        unint64_t v33 = (v54[5] - v32) >> 3;
        unint64_t v34 = v31 + 2;
        while (1)
        {
          unint64_t v35 = *((unsigned int *)v34 - 1);
          unint64_t v36 = v35 >> 7;
          if (v35 >> 7 < v33)
          {
            uint64_t v37 = *(void *)(v32 + 8 * v36);
            if (v37)
            {
              unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v35 & 0x7F));
              uint64_t v40 = v54[7];
              uint64_t v39 = v54[8];
              if (v38 < (v39 - v40) >> 3)
              {
                uint64_t v41 = v40 + 8 * v38;
                if (v41 != v39 && *(_DWORD *)(v41 + 4) == v35)
                {
                  uint64_t v43 = v55[4];
                  if (v36 < (v55[5] - v43) >> 3)
                  {
                    uint64_t v44 = *(void *)(v43 + 8 * v36);
                    if (v44)
                    {
                      unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v35 & 0x7F));
                      uint64_t v46 = v55[7];
                      uint64_t v47 = v55[8];
                      if (v45 < (v47 - v46) >> 3)
                      {
                        uint64_t v48 = v46 + 8 * v45;
                        if (v48 != v47 && *(_DWORD *)(v48 + 4) == v35) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v56 = v34;
          BOOL v27 = v34++ == v18;
          if (v27) {
            goto LABEL_30;
          }
        }
        uint64_t v18 = v34 - 1;
      }
LABEL_30:
      ;
    }
    while (v52 != v18);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A194D2B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v3);
  uint8x8_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 31) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        BOOL v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v3);
  uint8x8_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 14) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        BOOL v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::PreserveHeight>(v3);
  uint8x8_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 8) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        BOOL v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  unint64_t v3 = (void *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::IsMercator>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::FunctionConstants>(v2);
  uint64_t v6 = (void *)v5;
  unint64_t v7 = (void *)(v5 + 32);
  if (v3[8] - v3[7] < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    unint64_t v7 = v3 + 4;
  }
  if (v4[8] - v4[7] >= v7[4] - v7[3]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v4 + 4;
  }
  v56[0] = v8;
  v56[1] = v5;
  v56[2] = v3;
  v56[3] = v4;
  unint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  uint64_t v57 = v10;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v56))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      unint64_t v10 = v11;
      uint64_t v57 = v11;
      if (v11 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v56);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v9 == v10)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      void *result = *v10;
      unint64_t v15 = *v10;
      unint64_t v16 = *v10 >> 39;
      uint64_t v17 = v6[4];
      unint64_t v18 = (v6[5] - v17) >> 3;
      if (v16 < v18
        && (uint64_t v19 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v6[7],
            uint64_t v21 = v6[8],
            v20 < (v21 - v22) >> 3)
        && ((unint64_t v23 = HIDWORD(v15), v24 = v22 + 8 * v20, v24 != v21)
          ? (BOOL v25 = *(_DWORD *)(v24 + 4) == v23)
          : (BOOL v25 = 0),
            v25))
      {
        uint64_t v26 = v6[11];
        uint64_t v27 = v6[10] + 33 * v20;
      }
      else
      {
        uint64_t v26 = v6[11];
        uint64_t v27 = v26;
      }
      if (v27 == v26) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v27;
      }
      *(unsigned char *)(v28 + 25) = 1;
      unint64_t v29 = (void *)v8[4];
      uint64_t v14 = v10 + 1;
      uint64_t v57 = v10 + 1;
      if (v10 + 1 != v29)
      {
        uint64_t v31 = v6[7];
        uint64_t v30 = v6[8];
        uint64_t v32 = v3[4];
        uint64_t v34 = v3[7];
        uint64_t v33 = v3[8];
        uint64_t v35 = v4[4];
        uint64_t v37 = v4[7];
        uint64_t v36 = v4[8];
        while (1)
        {
          unint64_t v38 = *((unsigned int *)v14 + 1);
          unint64_t v39 = v38 >> 7;
          if (v38 >> 7 < v18)
          {
            uint64_t v40 = *(void *)(v17 + 8 * v39);
            if (v40)
            {
              uint64_t v41 = v38 & 0x7F;
              unint64_t v42 = *(unsigned __int16 *)(v40 + 2 * v41);
              if ((v30 - v31) >> 3 > v42)
              {
                uint64_t v43 = v31 + 8 * v42;
                BOOL v44 = v43 != v30 && *(_DWORD *)(v43 + 4) == v38;
                if (v44 && v39 < (v3[5] - v32) >> 3)
                {
                  uint64_t v46 = *(void *)(v32 + 8 * v39);
                  if (v46)
                  {
                    unint64_t v47 = *(unsigned __int16 *)(v46 + 2 * v41);
                    if ((v33 - v34) >> 3 > v47)
                    {
                      uint64_t v48 = v34 + 8 * v47;
                      BOOL v49 = v48 != v33 && *(_DWORD *)(v48 + 4) == v38;
                      if (v49 && v39 < (v4[5] - v35) >> 3)
                      {
                        uint64_t v51 = *(void *)(v35 + 8 * v39);
                        if (v51)
                        {
                          unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * v41);
                          if ((v36 - v37) >> 3 > v52)
                          {
                            uint64_t v53 = v37 + 8 * v52;
                            if (*(_DWORD *)(v53 + 4) == v38 && v53 != v36) {
                              break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v29)
          {
            uint64_t v14 = v29;
            goto LABEL_14;
          }
        }
        unint64_t v29 = v14;
LABEL_14:
        uint64_t v57 = v14;
      }
      unint64_t v10 = v29;
    }
    while (v9 != v29);
  }
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::IsElevated>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, v4, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 12) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        uint64_t v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::UniqueRenderArrayID>(v2);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::SharedUniqueID>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v2);
  unint64_t v7 = (void *)v6;
  uint64_t v8 = (void *)(v6 + 32);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v8 = (void *)(v3 + 32);
  }
  if (v4[8] - v4[7] < v8[4] - v8[3]) {
    uint64_t v8 = v4 + 4;
  }
  uint64_t v92 = v8;
  uint64_t v93 = (void *)v6;
  uint64_t v94 = (void *)v3;
  unint64_t v95 = v4;
  unint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  uint64_t v96 = v10;
  uint64_t v91 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v92))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      unint64_t v10 = v11;
      uint64_t v96 = v11;
      if (v11 == v91) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v92);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v91 != v10)
  {
    uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v88 = v4;
    uint64_t v89 = v5;
    while (1)
    {
      void *v13 = *v10;
      unint64_t v15 = *v10;
      uint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v7[4];
      if (v17 < (v7[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v7[7],
            uint64_t v21 = v7[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v87 = 33 * v20;
        uint64_t v25 = v7[11];
        uint64_t v26 = v7[10] + v87;
      }
      else
      {
        uint64_t v25 = v7[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = (unint64_t *)(v4[10] + 8 * v30);
      }
      else
      {
        uint64_t v35 = (unint64_t *)v4[11];
      }
      uint64_t v36 = v5[4];
      if (v17 < (v5[5] - v36) >> 3
        && (uint64_t v37 = *(void *)(v36 + 8 * v17)) != 0
        && (unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v40 = v5[7],
            uint64_t v39 = v5[8],
            v38 < (v39 - v40) >> 3)
        && ((uint64_t v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == v16) : (v42 = 0), v42))
      {
        uint64_t v43 = v5[11];
        uint64_t v44 = v5[10] + 24 * v38;
      }
      else
      {
        uint64_t v43 = v5[11];
        uint64_t v44 = v43;
      }
      if (v44 == v43) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = v44;
      }
      uint64_t v46 = +[VKDebugSettings sharedSettings];
      int v47 = [v46 enableTileClipping];

      if (v47)
      {
        uint64_t v48 = +[VKDebugSettings sharedSettings];
        char v49 = [v48 enableTileClippingDebug];
      }
      else
      {
        char v49 = 0;
      }
      uint64_t v50 = **(void **)(a1 + 8);
      uint64_t v51 = *(void **)v50;
      unint64_t v52 = *(void **)(v50 + 8);
      if (v51 != v52)
      {
        while (*v51 != 0x41D4E9297E100630)
        {
          v51 += 5;
          if (v51 == v52) {
            goto LABEL_56;
          }
        }
      }
      if (v51 == v52)
      {
LABEL_56:
        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v53 = (void *)v51[3];
        unint64_t v54 = (std::__shared_weak_count *)v51[4];
        if (v54)
        {
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
      }
      unint64_t v55 = *v35;
      unint64_t v97 = v55;
      uint64_t v56 = v53[483];
      if (v55 >= (unint64_t)((v53[484] - v56) >> 3)
        || ((uint64_t v57 = *(void *)(v56 + 8 * v55)) != 0 ? (v58 = HIDWORD(v55) == HIDWORD(v57)) : (v58 = 0),
            !v58
         || ((uint64_t v83 = v53[486], v84 = (void *)(v83 + 24 * v57), v84 != (void *)v53[487])
           ? (BOOL v85 = v83 == 0)
           : (BOOL v85 = 1),
             v85)))
      {
        uint64_t v5 = v89;
      }
      else
      {
        uint64_t v86 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>((uint64_t)(v53 + 475), v55, &v97);
        ++v86[3];
        uint64_t v5 = v89;
        if (*v84)
        {
          if (v45 && *(unsigned char *)(v45 + 16)) {
            LOBYTE(v47) = 0;
          }
          *(unsigned char *)(v27 + 26) = v47;
          goto LABEL_64;
        }
      }
      char v49 = 0;
      *(unsigned char *)(v27 + 26) = 0;
LABEL_64:
      *(unsigned char *)(v27 + 27) = v49;
      unint64_t v10 = (void *)v92[4];
      uint64_t v14 = v96 + 1;
      uint64_t v96 = v14;
      int8x8_t v4 = v88;
      if (v14 != v10)
      {
        uint64_t v59 = v93[4];
        while (1)
        {
          unint64_t v60 = *((unsigned int *)v14 + 1);
          unint64_t v61 = v60 >> 7;
          if (v60 >> 7 < (v93[5] - v59) >> 3)
          {
            uint64_t v62 = *(void *)(v59 + 8 * v61);
            if (v62)
            {
              uint64_t v63 = v60 & 0x7F;
              unint64_t v64 = *(unsigned __int16 *)(v62 + 2 * v63);
              uint64_t v66 = v93[7];
              uint64_t v65 = v93[8];
              if (v64 < (v65 - v66) >> 3)
              {
                uint64_t v67 = v66 + 8 * v64;
                if (v67 != v65 && *(_DWORD *)(v67 + 4) == v60)
                {
                  uint64_t v69 = v94[4];
                  if (v61 < (v94[5] - v69) >> 3)
                  {
                    uint64_t v70 = *(void *)(v69 + 8 * v61);
                    if (v70)
                    {
                      unint64_t v71 = *(unsigned __int16 *)(v70 + 2 * v63);
                      uint64_t v73 = v94[7];
                      uint64_t v72 = v94[8];
                      if (v71 < (v72 - v73) >> 3)
                      {
                        uint64_t v74 = v73 + 8 * v71;
                        if (v74 != v72 && *(_DWORD *)(v74 + 4) == v60)
                        {
                          uint64_t v76 = v95[4];
                          if (v61 < (v95[5] - v76) >> 3)
                          {
                            uint64_t v77 = *(void *)(v76 + 8 * v61);
                            if (v77)
                            {
                              unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * v63);
                              uint64_t v80 = v95[7];
                              uint64_t v79 = v95[8];
                              if (v78 < (v79 - v80) >> 3)
                              {
                                uint64_t v81 = v80 + 8 * v78;
                                if (*(_DWORD *)(v81 + 4) == v60 && v81 != v79) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            uint64_t v14 = v10;
            goto LABEL_13;
          }
        }
        unint64_t v10 = v14;
LABEL_13:
        uint64_t v96 = v14;
      }
      if (v91 == v10) {
        goto LABEL_104;
      }
    }
  }
  uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_104:
  void *v13 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A194E420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  v74[0] = 0x888DE670CA75E2DCLL;
  int8x8_t v4 = v3[16];
  if (!*(void *)&v4) {
    goto LABEL_21;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x888DE670CA75E2DCLL;
    if (*(void *)&v4 <= 0x888DE670CA75E2DCLL) {
      unint64_t v6 = 0x888DE670CA75E2DCLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x888DE670CA75E2DCLL;
  }
  unint64_t v7 = *(void **)(*(void *)&v3[15] + 8 * v6);
  if (!v7 || (uint64_t v8 = (void *)*v7) == 0) {
LABEL_21:
  }
    operator new();
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x888DE670CA75E2DCLL)
      {
        if (v8[2] == 0x888DE670CA75E2DCLL) {
          goto LABEL_115;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x888DE670CA75E2DCLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (v8[2] != 0x888DE670CA75E2DCLL) {
    goto LABEL_11;
  }
LABEL_115:
  unint64_t v71 = (void *)v8[3];
  unint64_t v12 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 4;
  if (v71[8] - v71[7] >= v12[8] - v12[7]) {
    uint64_t v15 = (uint64_t)(v12 + 4);
  }
  else {
    uint64_t v15 = (uint64_t)(v71 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v76, v15, v12, v71, *(void *)(v15 + 24));
  if (v71[8] - v71[7] >= v13[8] - v13[7]) {
    uint64_t v16 = (uint64_t)v14;
  }
  else {
    uint64_t v16 = (uint64_t)(v71 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v74, v16, v13, v71, *(void *)(v16 + 32));
  if (v75 == v79)
  {
    uint64_t v18 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t v18 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v18 = *v17;
      unint64_t v19 = *v17;
      uint64_t v20 = v13[4];
      if (v19 >> 39 < (v13[5] - v20) >> 3
        && (uint64_t v21 = *(void *)(v20 + 8 * (v19 >> 39))) != 0
        && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v19) & 0x7F)),
            uint64_t v24 = v13[7],
            uint64_t v23 = v13[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = HIDWORD(v19), uint64_t v26 = v24 + 8 * v22, v26 != v23)
          ? (BOOL v27 = *(_DWORD *)(v26 + 4) == v25)
          : (BOOL v27 = 0),
            v27))
      {
        uint64_t v28 = v13[11];
        uint64_t v29 = v13[10] + 33 * v22;
      }
      else
      {
        uint64_t v28 = v13[11];
        uint64_t v29 = v28;
      }
      if (v29 == v28) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29;
      }
      uint64_t v31 = ***(uint64_t ****)(a1 + 8);
      if (v31 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v31 != 0x22D45F5AAD4BF408)
      {
        uint64_t v32 = v31 + 5;
        do
        {
          uint64_t v33 = *v32;
          v32 += 5;
        }
        while (v33 != 0x22D45F5AAD4BF408);
        uint64_t v31 = v32 - 5;
      }
      BOOL v34 = (uint64_t (***)(void))v31[3];
      uint64_t v35 = (std::__shared_weak_count *)v31[4];
      if (v35)
      {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      uint64_t v36 = *(void **)((**v34)(v34) + 8);
      int8x8_t v37 = (int8x8_t)v36[1];
      if (v37)
      {
        uint8x8_t v38 = (uint8x8_t)vcnt_s8(v37);
        v38.i16[0] = vaddlv_u8(v38);
        if (v38.u32[0] > 1uLL)
        {
          uint64_t v39 = 0x41E8D6E445F4145;
          if (*(void *)&v37 <= 0x41E8D6E445F4145uLL) {
            uint64_t v39 = 0x41E8D6E445F4145uLL % *(void *)&v37;
          }
        }
        else
        {
          uint64_t v39 = (*(void *)&v37 - 1) & 0x41E8D6E445F4145;
        }
        uint64_t v40 = *(void **)(*v36 + 8 * v39);
        if (v40)
        {
          uint64_t v41 = (void *)*v40;
          if (v41)
          {
            if (v38.u32[0] < 2uLL)
            {
              uint64_t v42 = *(void *)&v37 - 1;
              while (1)
              {
                uint64_t v44 = v41[1];
                if (v44 == 0x41E8D6E445F4145)
                {
                  if (v41[2] == 0x41E8D6E445F4145) {
                    goto LABEL_72;
                  }
                }
                else if ((v44 & v42) != v39)
                {
                  goto LABEL_93;
                }
                uint64_t v41 = (void *)*v41;
                if (!v41) {
                  goto LABEL_93;
                }
              }
            }
            do
            {
              unint64_t v43 = v41[1];
              if (v43 == 0x41E8D6E445F4145)
              {
                if (v41[2] == 0x41E8D6E445F4145)
                {
LABEL_72:
                  uint64_t v45 = v41[5];
                  if (*(void *)(v45 + 8) == 0x41E8D6E445F4145)
                  {
                    uint64_t v46 = *(void *)(v45 + 32);
                    if (v46)
                    {
                      int v47 = +[VKDebugSettings sharedSettings];
                      uint64_t v48 = v47;
                      if (*(unsigned char *)(v46 + 227) && [v47 daVinciSSAOOcclusionOnly]) {
                        int v73 = [v48 daVinciAdvancedLightingEnabled];
                      }
                      else {
                        int v73 = 0;
                      }
                      if ([v48 daVinciLightingDebugAlbedoOnly]) {
                        int v72 = [v48 daVinciAdvancedLightingEnabled];
                      }
                      else {
                        int v72 = 0;
                      }
                      if ([v48 daVinciLightingDebugLightsOnly]) {
                        int v49 = [v48 daVinciAdvancedLightingEnabled];
                      }
                      else {
                        int v49 = 0;
                      }
                      if ([v48 daVinciLightingDebugShowOverexposure]) {
                        int v50 = [v48 daVinciAdvancedLightingEnabled];
                      }
                      else {
                        int v50 = 0;
                      }
                      if ([v48 daVinciLightingDebugShowNormals]) {
                        int v51 = [v48 daVinciAdvancedLightingEnabled];
                      }
                      else {
                        int v51 = 0;
                      }
                      if ((v73 | v72 | v49 | v50 | v51 | [v48 daVinciRenderingDebugShowUVs]) == 1)*(unsigned char *)(v30 + 13) = 1; {
                    }
                      }
                  }
                  break;
                }
              }
              else
              {
                if (v43 >= *(void *)&v37) {
                  v43 %= *(void *)&v37;
                }
                if (v43 != v39) {
                  break;
                }
              }
              uint64_t v41 = (void *)*v41;
            }
            while (v41);
          }
        }
      }
LABEL_93:
      unint64_t v52 = v79;
      unint64_t v17 = *(unint64_t **)(v76 + 32);
      if (++v79 != v17)
      {
        uint64_t v53 = v77[4];
        unint64_t v54 = (v77[5] - v53) >> 3;
        unint64_t v55 = v52 + 2;
        while (1)
        {
          unint64_t v56 = *((unsigned int *)v55 - 1);
          unint64_t v57 = v56 >> 7;
          if (v56 >> 7 < v54)
          {
            uint64_t v58 = *(void *)(v53 + 8 * v57);
            if (v58)
            {
              unint64_t v59 = *(unsigned __int16 *)(v58 + 2 * (v56 & 0x7F));
              uint64_t v61 = v77[7];
              uint64_t v60 = v77[8];
              if (v59 < (v60 - v61) >> 3)
              {
                uint64_t v62 = v61 + 8 * v59;
                if (v62 != v60 && *(_DWORD *)(v62 + 4) == v56)
                {
                  uint64_t v64 = v78[4];
                  if (v57 < (v78[5] - v64) >> 3)
                  {
                    uint64_t v65 = *(void *)(v64 + 8 * v57);
                    if (v65)
                    {
                      unint64_t v66 = *(unsigned __int16 *)(v65 + 2 * (v56 & 0x7F));
                      uint64_t v68 = v78[7];
                      uint64_t v67 = v78[8];
                      if (v66 < (v67 - v68) >> 3)
                      {
                        uint64_t v69 = v68 + 8 * v66;
                        if (v69 != v67 && *(_DWORD *)(v69 + 4) == v56) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v79 = v55;
          BOOL v27 = v55++ == v17;
          if (v27) {
            goto LABEL_30;
          }
        }
        unint64_t v17 = v55 - 1;
      }
LABEL_30:
      ;
    }
    while (v75 != v17);
  }
  *uint64_t v18 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A194EB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A194EB70(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  int8x8_t v4 = (void *)gdc::Registry::storage<md::ls::UseGlobeLighting>(v3);
  uint8x8_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  unint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v46, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v44, v9, v6, v4, *(void *)(v9 + 32));
  if (v45 == v49)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = +[VKDebugSettings sharedSettings];
      if ([v24 daVinciGlobeLighting]
        && [v24 daVinciAdvancedLightingEnabled])
      {
        *(unsigned char *)(v23 + 1) = 1;
      }

      unint64_t v25 = v49;
      unint64_t v10 = *(unint64_t **)(v46 + 32);
      if (++v49 != v10)
      {
        uint64_t v26 = v47[4];
        unint64_t v27 = (v47[5] - v26) >> 3;
        uint64_t v28 = v25 + 2;
        while (1)
        {
          unint64_t v29 = *((unsigned int *)v28 - 1);
          unint64_t v30 = v29 >> 7;
          if (v29 >> 7 < v27)
          {
            uint64_t v31 = *(void *)(v26 + 8 * v30);
            if (v31)
            {
              unint64_t v32 = *(unsigned __int16 *)(v31 + 2 * (v29 & 0x7F));
              uint64_t v34 = v47[7];
              uint64_t v33 = v47[8];
              if (v32 < (v33 - v34) >> 3)
              {
                uint64_t v35 = v34 + 8 * v32;
                if (v35 != v33 && *(_DWORD *)(v35 + 4) == v29)
                {
                  uint64_t v37 = v48[4];
                  if (v30 < (v48[5] - v37) >> 3)
                  {
                    uint64_t v38 = *(void *)(v37 + 8 * v30);
                    if (v38)
                    {
                      unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (v29 & 0x7F));
                      uint64_t v41 = v48[7];
                      uint64_t v40 = v48[8];
                      if (v39 < (v40 - v41) >> 3)
                      {
                        uint64_t v42 = v41 + 8 * v39;
                        if (v42 != v40 && *(_DWORD *)(v42 + 4) == v29) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          int v49 = v28;
          BOOL v20 = v28++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        unint64_t v10 = v28 - 1;
      }
LABEL_9:
      ;
    }
    while (v45 != v10);
  }
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A194EE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  HasOverlay = (void *)gdc::Registry::storage<md::ls::HasOverlayPatch>(v3);
  uint8x8_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  unint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (HasOverlay[8] - HasOverlay[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(HasOverlay + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v45, v8, v5, HasOverlay, *(void *)(v8 + 24));
  if (HasOverlay[8] - HasOverlay[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(HasOverlay + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v43, v9, v6, HasOverlay, *(void *)(v9 + 32));
  if (v44 == v48)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 33 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22;
      }
      *(unsigned char *)(v23 + 19) = 1;
      uint64_t v24 = v48;
      uint64_t v11 = *(unint64_t **)(v45 + 32);
      if (++v48 != v11)
      {
        uint64_t v25 = v46[4];
        unint64_t v26 = (v46[5] - v25) >> 3;
        unint64_t v27 = v24 + 2;
        while (1)
        {
          unint64_t v28 = *((unsigned int *)v27 - 1);
          unint64_t v29 = v28 >> 7;
          if (v28 >> 7 < v26)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v33 = v46[7];
              uint64_t v32 = v46[8];
              if (v31 < (v32 - v33) >> 3)
              {
                uint64_t v34 = v33 + 8 * v31;
                if (v34 != v32 && *(_DWORD *)(v34 + 4) == v28)
                {
                  uint64_t v36 = v47[4];
                  if (v29 < (v47[5] - v36) >> 3)
                  {
                    uint64_t v37 = *(void *)(v36 + 8 * v29);
                    if (v37)
                    {
                      unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (v28 & 0x7F));
                      uint64_t v39 = v47[7];
                      uint64_t v40 = v47[8];
                      if (v38 < (v40 - v39) >> 3)
                      {
                        uint64_t v41 = v39 + 8 * v38;
                        if (v41 != v40 && *(_DWORD *)(v41 + 4) == v28) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v48 = v27;
          BOOL v20 = v27++ == v11;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v27 - 1;
      }
LABEL_9:
      ;
    }
    while (v44 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  unint64_t v6 = (void *)v5;
  unint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    unint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    unint64_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  unint64_t v113 = (void *)v4;
  unint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        unint64_t v38 = 0;
      }
      else
      {
        unint64_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        int v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        int v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      int v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[893];
      if (v55 < (unint64_t)((v38[894] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[896];
          BOOL v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[897] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>> const&>,std::tuple<>>((uint64_t)(v38 + 885), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index;
                }
                unint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  uint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        uint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint64_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (uint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              uint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            uint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      uint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      unint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        unint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A194F840(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::IsMercator>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::IsMaterial>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  unint64_t v7 = (void *)v6;
  uint64_t v8 = (void *)(v6 + 32);
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v8 = (void *)(v4 + 32);
  }
  if (v5[8] - v5[7] < v8[4] - v8[3]) {
    uint64_t v8 = v5 + 4;
  }
  uint64_t v108 = v8;
  uint64_t v109 = (void *)v6;
  uint64_t v110 = (void *)v4;
  uint64_t v111 = v5;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  uint64_t v112 = v10;
  uint64_t v107 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v108))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      uint64_t v112 = v11;
      if (v11 == v107) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v108);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v107 != v10)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      uint64_t v15 = result;
      void *result = *v10;
      unint64_t v16 = *v10;
      uint64_t v17 = HIDWORD(*v10);
      unint64_t v18 = *v10 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v57 = 33 * v21;
        uint64_t v26 = v7[11];
        uint64_t v27 = v7[10] + v57;
      }
      else
      {
        uint64_t v26 = v7[11];
        uint64_t v27 = v26;
      }
      if (v27 == v26) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v27;
      }
      uint64_t v106 = v28;
      uint64_t v29 = v5[4];
      if (v18 < (v5[5] - v29) >> 3
        && (uint64_t v30 = *(void *)(v29 + 8 * v18)) != 0
        && (unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v33 = v5[7],
            uint64_t v32 = v5[8],
            v31 < (v32 - v33) >> 3)
        && ((uint64_t v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == v17) : (v35 = 0), v35))
      {
        uint64_t v36 = v5[10] + 8 * v31;
      }
      else
      {
        uint64_t v36 = v5[11];
      }
      uint64_t v105 = (unint64_t *)v36;
      uint64_t v37 = **(void **)(a1 + 8);
      unint64_t v38 = *(void **)v37;
      uint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x4EDAD23DFB014132)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_42;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_42:
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v40 = v38[3];
        unint64_t v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      uint64_t v42 = ***(uint64_t ****)(a1 + 8);
      if (v42 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v42 != 0x22D45F5AAD4BF408)
      {
        unint64_t v43 = v42 + 5;
        do
        {
          uint64_t v44 = *v43;
          v43 += 5;
        }
        while (v44 != 0x22D45F5AAD4BF408);
        uint64_t v42 = v43 - 5;
      }
      uint64_t v45 = (uint64_t (***)(void))v42[3];
      BOOL v46 = (std::__shared_weak_count *)v42[4];
      if (v46)
      {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      int v47 = *(uint64_t **)((**v45)(v45) + 8);
      int8x8_t v48 = (int8x8_t)v47[1];
      if (!*(void *)&v48) {
        goto LABEL_115;
      }
      uint8x8_t v49 = (uint8x8_t)vcnt_s8(v48);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        uint64_t v50 = 0x41E8D6E445F4145;
        if (*(void *)&v48 <= 0x41E8D6E445F4145uLL) {
          uint64_t v50 = 0x41E8D6E445F4145uLL % *(void *)&v48;
        }
      }
      else
      {
        uint64_t v50 = (*(void *)&v48 - 1) & 0x41E8D6E445F4145;
      }
      uint64_t v51 = *v47;
      uint64_t v52 = *(void **)(*v47 + 8 * v50);
      if (!v52) {
        goto LABEL_115;
      }
      uint64_t v53 = (void *)*v52;
      if (!*v52) {
        goto LABEL_115;
      }
      uint64_t v54 = *(void *)&v48 - 1;
      if (v49.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v55 = v53[1];
          if (v55 == 0x41E8D6E445F4145)
          {
            if (v53[2] == 0x41E8D6E445F4145) {
              goto LABEL_74;
            }
          }
          else if ((v55 & v54) != v50)
          {
            goto LABEL_115;
          }
          uint64_t v53 = (void *)*v53;
          if (!v53) {
            goto LABEL_115;
          }
        }
      }
      while (1)
      {
        unint64_t v56 = v53[1];
        if (v56 == 0x41E8D6E445F4145) {
          break;
        }
        if (v56 >= *(void *)&v48) {
          v56 %= *(void *)&v48;
        }
        if (v56 != v50) {
          goto LABEL_115;
        }
LABEL_66:
        uint64_t v53 = (void *)*v53;
        if (!v53) {
          goto LABEL_115;
        }
      }
      if (v53[2] != 0x41E8D6E445F4145) {
        goto LABEL_66;
      }
LABEL_74:
      uint64_t v58 = v53[5];
      if (*(void *)(v58 + 8) != 0x41E8D6E445F4145) {
        goto LABEL_115;
      }
      uint64_t v59 = *(void *)(v58 + 32);
      if (!v59) {
        goto LABEL_115;
      }
      if (v49.u32[0] > 1uLL)
      {
        uint64_t v60 = 0x1AF456233693CD46;
        if (*(void *)&v48 <= 0x1AF456233693CD46uLL) {
          uint64_t v60 = 0x1AF456233693CD46uLL % *(void *)&v48;
        }
      }
      else
      {
        uint64_t v60 = v54 & 0x1AF456233693CD46;
      }
      unint64_t v61 = *(void **)(v51 + 8 * v60);
      if (!v61 || (unint64_t v62 = (void *)*v61) == 0)
      {
LABEL_99:
        uint64_t v66 = 0;
        if (!*(unsigned char *)(v59 + 227)) {
          goto LABEL_115;
        }
        goto LABEL_100;
      }
      if (v49.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v63 = v62[1];
          if (v63 == 0x1AF456233693CD46)
          {
            if (v62[2] == 0x1AF456233693CD46) {
              goto LABEL_96;
            }
          }
          else if ((v63 & v54) != v60)
          {
            goto LABEL_99;
          }
          unint64_t v62 = (void *)*v62;
          if (!v62) {
            goto LABEL_99;
          }
        }
      }
      while (2)
      {
        unint64_t v64 = v62[1];
        if (v64 != 0x1AF456233693CD46)
        {
          if (v64 >= *(void *)&v48) {
            v64 %= *(void *)&v48;
          }
          if (v64 != v60) {
            goto LABEL_99;
          }
          goto LABEL_90;
        }
        if (v62[2] != 0x1AF456233693CD46)
        {
LABEL_90:
          unint64_t v62 = (void *)*v62;
          if (!v62) {
            goto LABEL_99;
          }
          continue;
        }
        break;
      }
LABEL_96:
      uint64_t v65 = v62[5];
      if (*(void *)(v65 + 8) != 0x1AF456233693CD46) {
        goto LABEL_99;
      }
      uint64_t v66 = *(void *)(v65 + 32);
      if (!*(unsigned char *)(v59 + 227)) {
        goto LABEL_115;
      }
LABEL_100:
      float v67 = *(float *)(v66 + 3076);
      float v68 = *(float *)(v66 + 3080);
      unint64_t v69 = *v105;
      unint64_t v115 = v69;
      uint64_t v70 = *(void *)(v40 + 120);
      if (v69 >= (unint64_t)((*(void *)(v40 + 128) - v70) >> 3)) {
        goto LABEL_109;
      }
      uint64_t v71 = *(void *)(v70 + 8 * v69);
      if (!v71) {
        goto LABEL_110;
      }
      if (HIDWORD(v69) == HIDWORD(v71))
      {
        uint64_t v72 = *(void *)(v40 + 144);
        uint64_t v73 = *(uint64_t **)(v40 + 152);
        uint64_t v74 = v40;
        uint64_t v75 = (uint64_t *)(v72 + 8 * v71);
        if (v75 == v73 || v72 == 0)
        {
          uint64_t v71 = 0;
        }
        else
        {
          unint64_t v104 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v74 + 56, v69, &v115);
          ++v104[3];
          uint64_t v71 = *v75;
        }
        uint64_t v40 = v74;
      }
      else
      {
LABEL_109:
        uint64_t v71 = 0;
      }
LABEL_110:
      uint64_t v77 = *(int8x8_t **)v40;
      v116[0] = v71;
      v116[1] = 0;
      gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v113, v77, v116, 0);
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v113 + 1224))(v116, fmaxf(v68 + v67, 1.0));
      float v78 = *((float *)v116 + 1);
      if (!LOBYTE(v116[0])) {
        float v78 = 1.0;
      }
      *(unsigned char *)(v106 + 20) = v78 > 0.01;
      unint64_t v79 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
LABEL_115:
      uint64_t v10 = (void *)v108[4];
      unint64_t v14 = v112 + 1;
      uint64_t v112 = v14;
      if (v14 != v10)
      {
        uint64_t v80 = v109[4];
        while (1)
        {
          unint64_t v81 = *((unsigned int *)v14 + 1);
          unint64_t v82 = v81 >> 7;
          if (v81 >> 7 < (v109[5] - v80) >> 3)
          {
            uint64_t v83 = *(void *)(v80 + 8 * v82);
            if (v83)
            {
              uint64_t v84 = v81 & 0x7F;
              unint64_t v85 = *(unsigned __int16 *)(v83 + 2 * v84);
              uint64_t v87 = v109[7];
              uint64_t v86 = v109[8];
              if (v85 < (v86 - v87) >> 3)
              {
                uint64_t v88 = v87 + 8 * v85;
                if (v88 != v86 && *(_DWORD *)(v88 + 4) == v81)
                {
                  uint64_t v90 = v110[4];
                  if (v82 < (v110[5] - v90) >> 3)
                  {
                    uint64_t v91 = *(void *)(v90 + 8 * v82);
                    if (v91)
                    {
                      unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * v84);
                      uint64_t v94 = v110[7];
                      uint64_t v93 = v110[8];
                      if (v92 < (v93 - v94) >> 3)
                      {
                        uint64_t v95 = v94 + 8 * v92;
                        if (v95 != v93 && *(_DWORD *)(v95 + 4) == v81)
                        {
                          uint64_t v97 = v111[4];
                          if (v82 < (v111[5] - v97) >> 3)
                          {
                            uint64_t v98 = *(void *)(v97 + 8 * v82);
                            if (v98)
                            {
                              unint64_t v99 = *(unsigned __int16 *)(v98 + 2 * v84);
                              uint64_t v101 = v111[7];
                              uint64_t v100 = v111[8];
                              if (v99 < (v100 - v101) >> 3)
                              {
                                uint64_t v102 = v101 + 8 * v99;
                                if (*(_DWORD *)(v102 + 4) == v81 && v102 != v100) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v10)
          {
            unint64_t v14 = v10;
            goto LABEL_13;
          }
        }
        uint64_t v10 = v14;
LABEL_13:
        uint64_t v112 = v14;
      }
      uint64_t result = v15;
      if (v107 == v10) {
        goto LABEL_144;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_144:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A1950060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19)
  {
    if (!atomic_fetch_add(&a19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  unint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    unint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    unint64_t v7 = (void *)(v5 + 32);
  }
  unint64_t v104 = v7;
  uint64_t v105 = v3;
  uint64_t v106 = (void *)v4;
  uint64_t v107 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v108 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v108 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v103 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        unint64_t v38 = 0;
      }
      else
      {
        unint64_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        int v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          float v67 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        int v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        float v67 = 0;
      }
      else
      {
        uint64_t v66 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v66[3];
        float v67 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      uint64_t v55 = md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::StyleCameraLighting>((uint64_t)v38, *v24);
      if (v55)
      {
        uint64_t v56 = v55;
        {
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
        }
        unint64_t v57 = v47[1];
        if (v57)
        {
          unint64_t v58 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index;
          uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            uint64_t v60 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index >= v57) {
              uint64_t v60 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index % v57;
            }
          }
          else
          {
            uint64_t v60 = (v57 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index;
          }
          unint64_t v61 = *(void **)(*v47 + 8 * v60);
          if (v61)
          {
            unint64_t v62 = (void *)*v61;
            if (v62)
            {
              if (v59.u32[0] < 2uLL)
              {
                unint64_t v63 = v57 - 1;
                while (1)
                {
                  uint64_t v65 = v62[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index == v65)
                  {
                    if (v62[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index) {
                      goto LABEL_88;
                    }
                  }
                  else if ((v65 & v63) != v60)
                  {
                    goto LABEL_113;
                  }
                  unint64_t v62 = (void *)*v62;
                  if (!v62) {
                    goto LABEL_113;
                  }
                }
              }
              do
              {
                unint64_t v64 = v62[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index == v64)
                {
                  if (v62[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index)
                  {
LABEL_88:
                    {
                      if (v101)
                      {
                        md::typeToIntMap(v101);
                        uint64_t v10 = a1;
                      }
                    }
                    if (!qword_1E957F030) {
                      goto LABEL_149;
                    }
                    uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                    v68.i16[0] = vaddlv_u8(v68);
                    if (v68.u32[0] > 1uLL)
                    {
                      unint64_t v69 = v58;
                      if (v58 >= qword_1E957F030) {
                        unint64_t v69 = v58 % qword_1E957F030;
                      }
                    }
                    else
                    {
                      unint64_t v69 = (qword_1E957F030 - 1) & v58;
                    }
                    uint64_t v70 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v69);
                    if (!v70 || (uint64_t v71 = *v70) == 0) {
LABEL_149:
                    }
                      abort();
                    if (v68.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v73 = v71[1];
                        if ((uint64_t *)v58 == v73)
                        {
                          if (v71[2] == (uint64_t *)v58) {
                            goto LABEL_109;
                          }
                        }
                        else if (((unint64_t)v73 & (qword_1E957F030 - 1)) != v69)
                        {
                          goto LABEL_149;
                        }
                        uint64_t v71 = (uint64_t **)*v71;
                        if (!v71) {
                          goto LABEL_149;
                        }
                      }
                    }
                    while (1)
                    {
                      unint64_t v72 = (unint64_t)v71[1];
                      if (v58 == v72)
                      {
                        if (v71[2] == (uint64_t *)v58)
                        {
LABEL_109:
                          uint64_t v74 = *((int *)v71 + 6);
                          uint64_t v75 = *((int *)v71 + 7);
                          if (v74 != -1) {
                            ggl::PipelineSetup::setConstantData(v67, v74, v56, 1);
                          }
                          if (v75 != -1) {
                            ggl::PipelineSetup::setConstantData(v67, v75, v56, 2);
                          }
                          goto LABEL_113;
                        }
                      }
                      else
                      {
                        if (v72 >= qword_1E957F030) {
                          v72 %= (unint64_t)qword_1E957F030;
                        }
                        if (v72 != v69) {
                          goto LABEL_149;
                        }
                      }
                      uint64_t v71 = (uint64_t **)*v71;
                      if (!v71) {
                        goto LABEL_149;
                      }
                    }
                  }
                }
                else
                {
                  if (v64 >= v57) {
                    v64 %= v57;
                  }
                  if (v64 != v60) {
                    break;
                  }
                }
                unint64_t v62 = (void *)*v62;
              }
              while (v62);
            }
          }
        }
      }
LABEL_113:
      uint64_t v8 = (void *)v104[4];
      uint64_t v76 = v108 + 1;
      uint64_t v108 = v76;
      if (v76 == v8)
      {
        uint64_t result = v103;
        if (v9 == v8) {
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v77 = v105[4];
        uint64_t result = v103;
        do
        {
          unint64_t v78 = *((unsigned int *)v76 + 1);
          unint64_t v79 = v78 >> 7;
          if (v78 >> 7 < (v105[5] - v77) >> 3)
          {
            uint64_t v80 = *(void *)(v77 + 8 * v79);
            if (v80)
            {
              uint64_t v81 = v78 & 0x7F;
              unint64_t v82 = *(unsigned __int16 *)(v80 + 2 * v81);
              uint64_t v83 = v105[7];
              uint64_t v84 = v105[8];
              if (v82 < (v84 - v83) >> 3)
              {
                uint64_t v85 = v83 + 8 * v82;
                if (v85 != v84 && *(_DWORD *)(v85 + 4) == v78)
                {
                  uint64_t v87 = v106[4];
                  if (v79 < (v106[5] - v87) >> 3)
                  {
                    uint64_t v88 = *(void *)(v87 + 8 * v79);
                    if (v88)
                    {
                      unint64_t v89 = *(unsigned __int16 *)(v88 + 2 * v81);
                      uint64_t v90 = v106[7];
                      uint64_t v91 = v106[8];
                      if (v89 < (v91 - v90) >> 3)
                      {
                        uint64_t v92 = v90 + 8 * v89;
                        if (v92 != v91 && *(_DWORD *)(v92 + 4) == v78)
                        {
                          uint64_t v94 = v107[4];
                          if (v79 < (v107[5] - v94) >> 3)
                          {
                            uint64_t v95 = *(void *)(v94 + 8 * v79);
                            if (v95)
                            {
                              unint64_t v96 = *(unsigned __int16 *)(v95 + 2 * v81);
                              uint64_t v98 = v107[7];
                              uint64_t v97 = v107[8];
                              if (v96 < (v97 - v98) >> 3)
                              {
                                uint64_t v99 = v98 + 8 * v96;
                                if (*(_DWORD *)(v99 + 4) == v78 && v99 != v97)
                                {
                                  uint64_t v8 = v76;
                                  goto LABEL_141;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v76;
        }
        while (v76 != v8);
        uint64_t v76 = v8;
LABEL_141:
        uint64_t v108 = v76;
        if (v9 == v8) {
          goto LABEL_148;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_148:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A19507F8(_Unwind_Exception *a1)
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v105, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v103, v9, v4, v6, *(void *)(v9 + 32));
  if (v104 == v108)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_165;
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (2)
  {
    *uint64_t v11 = *v10;
    unint64_t v12 = *v10;
    uint64_t v13 = v6[4];
    if (v12 >> 39 < (v6[5] - v13) >> 3
      && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
      && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)), uint64_t v17 = v6[7], v16 = v6[8], v15 < (v16 - v17) >> 3)
      && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
        ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
        : (BOOL v20 = 0),
          v20))
    {
      uint64_t v21 = v6[11];
      uint64_t v22 = v6[10] + 8 * v15;
    }
    else
    {
      uint64_t v21 = v6[11];
      uint64_t v22 = v21;
    }
    if (v22 == v21) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = (unint64_t *)v22;
    }
    uint64_t v24 = ***(uint64_t ****)(a1 + 8);
    if (v24 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v24 != 0x22D45F5AAD4BF408)
    {
      uint64_t v25 = v24 + 5;
      do
      {
        uint64_t v26 = *v25;
        v25 += 5;
      }
      while (v26 != 0x22D45F5AAD4BF408);
      uint64_t v24 = v25 - 5;
    }
    unint64_t v27 = (uint64_t (***)(void))v24[3];
    uint64_t v28 = (std::__shared_weak_count *)v24[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    uint64_t v29 = *(void **)((**v27)(v27) + 8);
    int8x8_t v30 = (int8x8_t)v29[1];
    if (!*(void *)&v30) {
      goto LABEL_138;
    }
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      uint64_t v32 = 0x41E8D6E445F4145;
      if (*(void *)&v30 <= 0x41E8D6E445F4145uLL) {
        uint64_t v32 = 0x41E8D6E445F4145uLL % *(void *)&v30;
      }
    }
    else
    {
      uint64_t v32 = (*(void *)&v30 - 1) & 0x41E8D6E445F4145;
    }
    uint64_t v33 = *(void **)(*v29 + 8 * v32);
    if (!v33) {
      goto LABEL_138;
    }
    uint64_t v34 = (void *)*v33;
    if (!v34) {
      goto LABEL_138;
    }
    if (v31.u32[0] < 2uLL)
    {
      uint64_t v35 = *(void *)&v30 - 1;
      while (1)
      {
        uint64_t v37 = v34[1];
        if (v37 == 0x41E8D6E445F4145)
        {
          if (v34[2] == 0x41E8D6E445F4145) {
            goto LABEL_51;
          }
        }
        else if ((v37 & v35) != v32)
        {
          goto LABEL_138;
        }
        uint64_t v34 = (void *)*v34;
        if (!v34) {
          goto LABEL_138;
        }
      }
    }
    while (1)
    {
      unint64_t v36 = v34[1];
      if (v36 == 0x41E8D6E445F4145) {
        break;
      }
      if (v36 >= *(void *)&v30) {
        v36 %= *(void *)&v30;
      }
      if (v36 != v32) {
        goto LABEL_138;
      }
LABEL_39:
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_138;
      }
    }
    if (v34[2] != 0x41E8D6E445F4145) {
      goto LABEL_39;
    }
LABEL_51:
    uint64_t v38 = v34[5];
    if (*(void *)(v38 + 8) != 0x41E8D6E445F4145) {
      goto LABEL_138;
    }
    uint64_t v39 = *(void *)(v38 + 32);
    if (!v39) {
      goto LABEL_138;
    }
    unint64_t v40 = *(std::__shared_weak_count **)(v39 + 24);
    uint64_t v102 = *(void *)(v39 + 16);
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = **(void **)(a1 + 8);
    uint64_t v42 = *(void **)v41;
    unint64_t v43 = *(void **)(v41 + 8);
    uint64_t v101 = v40;
    if (v42 != v43)
    {
      while (*v42 != 0x41D4E9297E100630)
      {
        v42 += 5;
        if (v42 == v43) {
          goto LABEL_63;
        }
      }
    }
    if (v42 == v43)
    {
LABEL_63:
      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v44 = (void *)v42[3];
      uint64_t v45 = (std::__shared_weak_count *)v42[4];
      if (v45)
      {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    uint64_t v46 = (uint64_t)(v44 + 37);
    unint64_t v47 = *v23;
    unint64_t v48 = *v23;
    uint64_t v49 = v44[50];
    unint64_t v50 = (v44[51] - v49) >> 3;
    if (v48 >= v50)
    {
LABEL_72:
      uint64_t v51 = 0;
      if (v48 < v50) {
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    uint64_t v51 = *(void **)(v49 + 8 * v48);
    if (!v51)
    {
LABEL_75:
      if (v48 >= v50) {
        goto LABEL_84;
      }
      goto LABEL_76;
    }
    if (HIDWORD(v47) != HIDWORD(v51))
    {
      uint64_t v51 = 0;
      goto LABEL_75;
    }
    uint64_t v52 = v44[53];
    if (v52 + 16 * v51 == v44[54] || v52 == 0) {
      goto LABEL_72;
    }
    unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v46, v47, v23);
    ++v61[3];
    uint64_t v51 = *(void **)(v52 + 16 * v51 + 8);
    unint64_t v47 = *v23;
    uint64_t v49 = v44[50];
    unint64_t v48 = *v23;
    uint64_t v46 = (uint64_t)(v44 + 37);
    if (v48 >= (v44[51] - v49) >> 3) {
      goto LABEL_84;
    }
LABEL_76:
    uint64_t v54 = *(void *)(v49 + 8 * v48);
    if (v54 && HIDWORD(v47) == HIDWORD(v54))
    {
      uint64_t v55 = v44[53];
      uint64_t v56 = (void **)(v55 + 16 * v54);
      if (v56 != (void **)v44[54] && v55 != 0)
      {
        unint64_t v58 = v101;
        uint8x8_t v59 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v46, v47, v23);
        ++v59[3];
        uint64_t v60 = *v56;
        goto LABEL_85;
      }
    }
LABEL_84:
    uint64_t v60 = 0;
    unint64_t v58 = v101;
LABEL_85:
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v102)
    {
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v62 = v51[1];
      if (v62)
      {
        unint64_t v63 = v51;
        unint64_t v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index;
        uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
        v65.i16[0] = vaddlv_u8(v65);
        if (v65.u32[0] > 1uLL)
        {
          uint64_t v66 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index >= v62) {
            uint64_t v66 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index % v62;
          }
        }
        else
        {
          uint64_t v66 = (v62 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index;
        }
        float v67 = *(void **)(*v63 + 8 * v66);
        if (v67)
        {
          uint8x8_t v68 = (void *)*v67;
          if (v68)
          {
            if (v65.u32[0] < 2uLL)
            {
              unint64_t v69 = v62 - 1;
              while (1)
              {
                uint64_t v71 = v68[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index == v71)
                {
                  if (v68[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index) {
                    goto LABEL_110;
                  }
                }
                else if ((v71 & v69) != v66)
                {
                  goto LABEL_135;
                }
                uint8x8_t v68 = (void *)*v68;
                if (!v68) {
                  goto LABEL_135;
                }
              }
            }
            do
            {
              unint64_t v70 = v68[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index == v70)
              {
                if (v68[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index)
                {
LABEL_110:
                  {
                    if (v100)
                    {
                      md::typeToIntMap(v100);
                      unint64_t v58 = v101;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_166;
                  }
                  uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v72.i16[0] = vaddlv_u8(v72);
                  if (v72.u32[0] > 1uLL)
                  {
                    unint64_t v73 = v64;
                    if (v64 >= qword_1E957F030) {
                      unint64_t v73 = v64 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v73 = (qword_1E957F030 - 1) & v64;
                  }
                  uint64_t v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
                  if (!v74 || (uint64_t v75 = *v74) == 0) {
LABEL_166:
                  }
                    abort();
                  if (v72.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v77 = v75[1];
                      if ((uint64_t *)v64 == v77)
                      {
                        if (v75[2] == (uint64_t *)v64) {
                          goto LABEL_131;
                        }
                      }
                      else if (((unint64_t)v77 & (qword_1E957F030 - 1)) != v73)
                      {
                        goto LABEL_166;
                      }
                      uint64_t v75 = (uint64_t **)*v75;
                      if (!v75) {
                        goto LABEL_166;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v76 = (unint64_t)v75[1];
                    if (v64 == v76)
                    {
                      if (v75[2] == (uint64_t *)v64)
                      {
LABEL_131:
                        uint64_t v78 = *((int *)v75 + 6);
                        uint64_t v79 = *((int *)v75 + 7);
                        if (v78 != -1) {
                          ggl::PipelineSetup::setConstantData(v60, v78, v102, 1);
                        }
                        if (v79 != -1) {
                          ggl::PipelineSetup::setConstantData(v60, v79, v102, 2);
                        }
                        goto LABEL_135;
                      }
                    }
                    else
                    {
                      if (v76 >= qword_1E957F030) {
                        v76 %= (unint64_t)qword_1E957F030;
                      }
                      if (v76 != v73) {
                        goto LABEL_166;
                      }
                    }
                    uint64_t v75 = (uint64_t **)*v75;
                    if (!v75) {
                      goto LABEL_166;
                    }
                  }
                }
              }
              else
              {
                if (v70 >= v62) {
                  v70 %= v62;
                }
                if (v70 != v66) {
                  break;
                }
              }
              uint8x8_t v68 = (void *)*v68;
            }
            while (v68);
          }
        }
      }
    }
LABEL_135:
    if (v58)
    {
      p_uint64_t shared_owners = &v58->__shared_owners_;
      if (atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_138;
        }
LABEL_159:
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_159;
        }
      }
    }
LABEL_138:
    uint64_t v81 = v108;
    uint64_t v10 = *(unint64_t **)(v105 + 32);
    if (++v108 != v10)
    {
      uint64_t v82 = v106[4];
      unint64_t v83 = (v106[5] - v82) >> 3;
      uint64_t v84 = v81 + 2;
      while (1)
      {
        unint64_t v85 = *((unsigned int *)v84 - 1);
        unint64_t v86 = v85 >> 7;
        if (v85 >> 7 < v83)
        {
          uint64_t v87 = *(void *)(v82 + 8 * v86);
          if (v87)
          {
            unint64_t v88 = *(unsigned __int16 *)(v87 + 2 * (v85 & 0x7F));
            uint64_t v90 = v106[7];
            uint64_t v89 = v106[8];
            if (v88 < (v89 - v90) >> 3)
            {
              uint64_t v91 = v90 + 8 * v88;
              if (v91 != v89 && *(_DWORD *)(v91 + 4) == v85)
              {
                uint64_t v93 = v107[4];
                if (v86 < (v107[5] - v93) >> 3)
                {
                  uint64_t v94 = *(void *)(v93 + 8 * v86);
                  if (v94)
                  {
                    unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * (v85 & 0x7F));
                    uint64_t v97 = v107[7];
                    uint64_t v96 = v107[8];
                    if (v95 < (v96 - v97) >> 3)
                    {
                      uint64_t v98 = v97 + 8 * v95;
                      if (v98 != v96 && *(_DWORD *)(v98 + 4) == v85) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v108 = v84;
        BOOL v20 = v84++ == v10;
        if (v20) {
          goto LABEL_9;
        }
      }
      uint64_t v10 = v84 - 1;
    }
LABEL_9:
    if (v104 != v10) {
      continue;
    }
    break;
  }
LABEL_165:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A1951108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  unint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    unint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    unint64_t v7 = (void *)(v5 + 32);
  }
  unint64_t v118 = v7;
  uint64_t v119 = v3;
  unint64_t v120 = (void *)v4;
  uint8x8_t v121 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  unint64_t v122 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        unint64_t v122 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v117 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      unint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (int8x8_t *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      int8x8_t v42 = v38[50];
      unint64_t v43 = (uint64_t)(*(void *)&v38[51] - *(void *)&v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(*(void *)&v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((int8x8_t v45 = v38[53], *(void *)&v45 + 16 * v44 != *(void *)&v38[54])
          ? (BOOL v46 = *(void *)&v45 == 0)
          : (BOOL v46 = 1),
            !v46))
      {
        uint64_t v52 = *(void *)(*(void *)&v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)&v38[37], v40, v34);
        ++v53[3];
        uint64_t v54 = *(void *)&v45 + 16 * v52;
        uint64_t v10 = a1;
        unint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        int8x8_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (uint64_t)(*(void *)&v38[51] - *(void *)&v42) >> 3)
        {
LABEL_63:
          unint64_t v76 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        unint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(*(void *)&v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      int8x8_t v49 = v38[53];
      unint64_t v50 = (void **)(*(void *)&v49 + 16 * v48);
      if (v50 == *(void ***)&v38[54] || *(void *)&v49 == 0)
      {
        unint64_t v76 = 0;
      }
      else
      {
        uint64_t v75 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)&v38[37], v40, v34);
        ++v75[3];
        unint64_t v76 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = md::getCachedHandle<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,unsigned long,md::CachedKey<md::StyleEmissiveColorCacheKey>,std::hash<unsigned long>>(v38 + 330, *v24);
      unint64_t v123 = v55;
      if (v55)
      {
        int8x8_t v56 = v38[343];
        if (v55 < (unint64_t)((uint64_t)(*(void *)&v38[344] - *(void *)&v56) >> 3)
          && ((uint64_t v57 = *(void *)(*(void *)&v56 + 8 * v55)) != 0
            ? (BOOL v58 = HIDWORD(v55) == HIDWORD(v57))
            : (BOOL v58 = 0),
              v58))
        {
          uint64_t v60 = *(void *)&v38[346] + 24 * v57;
          uint64_t v59 = (uint64_t)v38[347];
        }
        else
        {
          uint64_t v59 = (uint64_t)v38[347];
          uint64_t v60 = v59;
        }
        if (v60 == v59) {
          unint64_t v61 = 0;
        }
        else {
          unint64_t v61 = (float *)v60;
        }
        if (v61)
        {
          unint64_t v62 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>((uint64_t)&v38[335], v55, &v123);
          ++v62[3];
        }
        unint64_t v63 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>(&v38[320], v61);
        unint64_t v64 = v63 ? v63[5] : 0;
        unint64_t v124 = v64;
        int8x8_t v65 = v38[306];
        if (v64 < (unint64_t)((uint64_t)(*(void *)&v38[307] - *(void *)&v65) >> 3))
        {
          uint64_t v66 = *(void *)(*(void *)&v65 + 8 * v64);
          if (v66)
          {
            if (HIDWORD(v64) == HIDWORD(v66))
            {
              int8x8_t v67 = v38[309];
              if (v67)
              {
                uint8x8_t v68 = (uint64_t *)(*(void *)&v67 + 24 * v66);
                if (v68 != (uint64_t *)v38[310])
                {
                  unint64_t v69 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>> const&>,std::tuple<>>((uint64_t)&v38[293], v64, &v124);
                  ++v69[3];
                  uint64_t v70 = *v68;
                  if (*v68)
                  {
                    {
                      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
                    }
                    unint64_t v71 = v47[1];
                    if (v71)
                    {
                      unint64_t v72 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index;
                      uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
                      v73.i16[0] = vaddlv_u8(v73);
                      if (v73.u32[0] > 1uLL)
                      {
                        uint64_t v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index;
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index >= v71) {
                          uint64_t v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index
                        }
                              % v71;
                      }
                      else
                      {
                        uint64_t v74 = (v71 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index;
                      }
                      uint64_t v77 = *(void **)(*v47 + 8 * v74);
                      if (v77)
                      {
                        uint64_t v78 = (void *)*v77;
                        if (v78)
                        {
                          if (v73.u32[0] < 2uLL)
                          {
                            unint64_t v79 = v71 - 1;
                            while (1)
                            {
                              uint64_t v81 = v78[1];
                              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index == v81)
                              {
                                if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index) {
                                  goto LABEL_109;
                                }
                              }
                              else if ((v81 & v79) != v74)
                              {
                                goto LABEL_134;
                              }
                              uint64_t v78 = (void *)*v78;
                              if (!v78) {
                                goto LABEL_134;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v80 = v78[1];
                            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index == v80)
                            {
                              if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index)
                              {
LABEL_109:
                                {
                                  if (v115)
                                  {
                                    md::typeToIntMap(v115);
                                    uint64_t v10 = a1;
                                  }
                                }
                                if (!qword_1E957F030) {
                                  goto LABEL_170;
                                }
                                uint8x8_t v82 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                                v82.i16[0] = vaddlv_u8(v82);
                                if (v82.u32[0] > 1uLL)
                                {
                                  unint64_t v83 = v72;
                                  if (v72 >= qword_1E957F030) {
                                    unint64_t v83 = v72 % qword_1E957F030;
                                  }
                                }
                                else
                                {
                                  unint64_t v83 = (qword_1E957F030 - 1) & v72;
                                }
                                uint64_t v84 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v83);
                                if (!v84 || (unint64_t v85 = *v84) == 0) {
LABEL_170:
                                }
                                  abort();
                                if (v82.u32[0] < 2uLL)
                                {
                                  while (1)
                                  {
                                    uint64_t v87 = v85[1];
                                    if ((uint64_t *)v72 == v87)
                                    {
                                      if (v85[2] == (uint64_t *)v72) {
                                        goto LABEL_130;
                                      }
                                    }
                                    else if (((unint64_t)v87 & (qword_1E957F030 - 1)) != v83)
                                    {
                                      goto LABEL_170;
                                    }
                                    unint64_t v85 = (uint64_t **)*v85;
                                    if (!v85) {
                                      goto LABEL_170;
                                    }
                                  }
                                }
                                while (1)
                                {
                                  unint64_t v86 = (unint64_t)v85[1];
                                  if (v72 == v86)
                                  {
                                    if (v85[2] == (uint64_t *)v72)
                                    {
LABEL_130:
                                      uint64_t v88 = *((int *)v85 + 6);
                                      uint64_t v89 = *((int *)v85 + 7);
                                      if (v88 != -1) {
                                        ggl::PipelineSetup::setConstantData(v76, v88, v70, 1);
                                      }
                                      if (v89 != -1) {
                                        ggl::PipelineSetup::setConstantData(v76, v89, v70, 2);
                                      }
                                      goto LABEL_134;
                                    }
                                  }
                                  else
                                  {
                                    if (v86 >= qword_1E957F030) {
                                      v86 %= (unint64_t)qword_1E957F030;
                                    }
                                    if (v86 != v83) {
                                      goto LABEL_170;
                                    }
                                  }
                                  unint64_t v85 = (uint64_t **)*v85;
                                  if (!v85) {
                                    goto LABEL_170;
                                  }
                                }
                              }
                            }
                            else
                            {
                              if (v80 >= v71) {
                                v80 %= v71;
                              }
                              if (v80 != v74) {
                                break;
                              }
                            }
                            uint64_t v78 = (void *)*v78;
                          }
                          while (v78);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_134:
      uint64_t v8 = (void *)v118[4];
      uint64_t v90 = v122 + 1;
      unint64_t v122 = v90;
      if (v90 == v8)
      {
        uint64_t result = v117;
        if (v9 == v8) {
          goto LABEL_169;
        }
      }
      else
      {
        uint64_t v91 = v119[4];
        uint64_t result = v117;
        do
        {
          unint64_t v92 = *((unsigned int *)v90 + 1);
          unint64_t v93 = v92 >> 7;
          if (v92 >> 7 < (v119[5] - v91) >> 3)
          {
            uint64_t v94 = *(void *)(v91 + 8 * v93);
            if (v94)
            {
              uint64_t v95 = v92 & 0x7F;
              unint64_t v96 = *(unsigned __int16 *)(v94 + 2 * v95);
              uint64_t v97 = v119[7];
              uint64_t v98 = v119[8];
              if (v96 < (v98 - v97) >> 3)
              {
                uint64_t v99 = v97 + 8 * v96;
                if (v99 != v98 && *(_DWORD *)(v99 + 4) == v92)
                {
                  uint64_t v101 = v120[4];
                  if (v93 < (v120[5] - v101) >> 3)
                  {
                    uint64_t v102 = *(void *)(v101 + 8 * v93);
                    if (v102)
                    {
                      unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v95);
                      uint64_t v104 = v120[7];
                      uint64_t v105 = v120[8];
                      if (v103 < (v105 - v104) >> 3)
                      {
                        uint64_t v106 = v104 + 8 * v103;
                        if (v106 != v105 && *(_DWORD *)(v106 + 4) == v92)
                        {
                          uint64_t v108 = v121[4];
                          if (v93 < (v121[5] - v108) >> 3)
                          {
                            uint64_t v109 = *(void *)(v108 + 8 * v93);
                            if (v109)
                            {
                              unint64_t v110 = *(unsigned __int16 *)(v109 + 2 * v95);
                              uint64_t v112 = v121[7];
                              uint64_t v111 = v121[8];
                              if (v110 < (v111 - v112) >> 3)
                              {
                                uint64_t v113 = v112 + 8 * v110;
                                if (*(_DWORD *)(v113 + 4) == v92 && v113 != v111)
                                {
                                  uint64_t v8 = v90;
                                  goto LABEL_162;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v90;
        }
        while (v90 != v8);
        uint64_t v90 = v8;
LABEL_162:
        unint64_t v122 = v90;
        if (v9 == v8) {
          goto LABEL_169;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_169:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1951A24(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::GradientConstantDataHandle1>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(v3);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::GradientConstantDataHandle2>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = v4 + 4;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v4[8] - v4[7]) {
    uint64_t v9 = (void *)(v5 + 32);
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < v9[4] - v9[3]) {
    uint64_t v9 = (void *)(v7 + 32);
  }
  unint64_t v114 = v9;
  unint64_t v115 = v4;
  unint64_t v116 = (void *)v5;
  unint64_t v117 = (void *)v7;
  uint64_t v11 = (void *)v9[3];
  uint64_t v10 = (void *)v9[4];
  unint64_t v118 = v11;
  uint64_t v113 = v10;
  if (v10 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v114))
  {
    unint64_t v12 = v11 + 1;
    do
    {
      uint64_t v11 = v12;
      unint64_t v118 = v12;
      if (v12 == v113) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v114);
      unint64_t v12 = v11 + 1;
    }
    while (!isValid);
  }
  if (v113 != v11)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v110 = v2;
    uint64_t v111 = result;
    uint64_t v112 = v6;
    while (1)
    {
      void *result = *v11;
      unint64_t v15 = *v11;
      uint64_t v16 = HIDWORD(*v11);
      unint64_t v17 = *v11 >> 39;
      uint64_t v18 = v4[4];
      if (v17 < (v4[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v4[7],
            uint64_t v21 = v4[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = (unint64_t *)(v4[10] + 8 * v20);
      }
      else
      {
        uint64_t v25 = (unint64_t *)v4[11];
      }
      uint64_t v26 = v6[4];
      if (v17 < (v6[5] - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v30 = v6[7],
            uint64_t v29 = v6[8],
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
      {
        uint64_t v33 = v6[11];
        uint64_t v34 = v6[10] + 8 * v28;
      }
      else
      {
        uint64_t v33 = v6[11];
        uint64_t v34 = v33;
      }
      if (v34 == v33) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = (unint64_t *)v34;
      }
      uint64_t v36 = v8[4];
      if (v17 < (v8[5] - v36) >> 3
        && (uint64_t v37 = *(void *)(v36 + 8 * v17)) != 0
        && (unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v40 = v8[7],
            uint64_t v39 = v8[8],
            v38 < (v39 - v40) >> 3)
        && ((uint64_t v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == v16) : (v42 = 0), v42))
      {
        uint64_t v43 = v8[11];
        uint64_t v44 = v8[10] + 8 * v38;
      }
      else
      {
        uint64_t v43 = v8[11];
        uint64_t v44 = v43;
      }
      if (v44 == v43) {
        int8x8_t v45 = 0;
      }
      else {
        int8x8_t v45 = (unint64_t *)v44;
      }
      uint64_t v46 = **(void **)(v2 + 8);
      unint64_t v47 = *(void **)v46;
      uint64_t v48 = *(void **)(v46 + 8);
      if (v47 != v48)
      {
        while (*v47 != 0x41D4E9297E100630)
        {
          v47 += 5;
          if (v47 == v48) {
            goto LABEL_52;
          }
        }
      }
      if (v47 == v48)
      {
LABEL_52:
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v50 = (void *)v47[3];
        int8x8_t v49 = (std::__shared_weak_count *)v47[4];
        if (v49)
        {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      unint64_t v51 = *v45;
      unint64_t v52 = *v45;
      uint64_t v53 = v50[50];
      unint64_t v54 = (v50[51] - v53) >> 3;
      if (v52 < v54
        && (uint64_t v55 = *(void *)(v53 + 8 * v52)) != 0
        && HIDWORD(v51) == HIDWORD(v55)
        && ((v56 = v50[53], v56 + 16 * v55 != v50[54]) ? (BOOL v57 = v56 == 0) : (BOOL v57 = 1), !v57))
      {
        uint64_t v63 = *(void *)(v53 + 8 * v52);
        unint64_t v64 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v50 + 37), v51, v45);
        ++v64[3];
        uint64_t v65 = v56 + 16 * v63;
        uint64_t v2 = v110;
        BOOL v58 = *(void **)(v65 + 8);
        unint64_t v51 = *v45;
        uint64_t v53 = v50[50];
        unint64_t v52 = *v45;
        if (v52 >= (v50[51] - v53) >> 3)
        {
LABEL_74:
          uint64_t v109 = 0;
          goto LABEL_75;
        }
      }
      else
      {
        BOOL v58 = 0;
        if (v52 >= v54) {
          goto LABEL_74;
        }
      }
      uint64_t v59 = *(void *)(v53 + 8 * v52);
      if (!v59 || HIDWORD(v51) != HIDWORD(v59)) {
        goto LABEL_74;
      }
      uint64_t v60 = v50[53];
      unint64_t v61 = (void **)(v60 + 16 * v59);
      if (v61 == (void **)v50[54] || v60 == 0)
      {
        uint64_t v109 = 0;
      }
      else
      {
        uint64_t v108 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v50 + 37), v51, v45);
        ++v108[3];
        uint64_t v109 = *v61;
      }
      uint64_t v2 = v110;
LABEL_75:
      unint64_t v66 = *v25;
      unint64_t v119 = v66;
      uint64_t v67 = v50[930];
      if (v66 >= (unint64_t)((v50[931] - v67) >> 3)
        || ((uint64_t v68 = *(void *)(v67 + 8 * v66)) != 0 ? (v69 = HIDWORD(v66) == HIDWORD(v68)) : (v69 = 0),
            !v69
         || ((uint64_t v79 = v50[933], v80 = (uint64_t *)(v79 + 24 * v68), v80 != (uint64_t *)v50[934])
           ? (BOOL v81 = v79 == 0)
           : (BOOL v81 = 1),
             v81)))
      {
        uint64_t v70 = 0;
        if (!v35) {
          goto LABEL_94;
        }
      }
      else
      {
        uint8x8_t v82 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>> const&>,std::tuple<>>((uint64_t)(v50 + 917), v66, &v119);
        ++v82[3];
        uint64_t v70 = *v80;
        if (!v35) {
          goto LABEL_94;
        }
      }
      unint64_t v71 = *v35;
      unint64_t v119 = v71;
      uint64_t v72 = v50[930];
      if (v71 >= (unint64_t)((v50[931] - v72) >> 3)
        || (uint64_t v73 = *(void *)(v72 + 8 * v71)) == 0
        || HIDWORD(v71) != HIDWORD(v73)
        || ((v74 = v50[933], uint64_t v75 = (uint64_t *)(v74 + 24 * v73), v75 != (uint64_t *)v50[934])
          ? (BOOL v76 = v74 == 0)
          : (BOOL v76 = 1),
            v76))
      {
LABEL_94:
        uint64_t v78 = 0;
        goto LABEL_95;
      }
      uint64_t v77 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>> const&>,std::tuple<>>((uint64_t)(v50 + 917), v71, &v119);
      ++v77[3];
      uint64_t v78 = *v75;
LABEL_95:
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(v58, v109, v70, 0);
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(v58, v109, v78, 1);
      uint64_t v11 = (void *)v114[4];
      unint64_t v83 = v118 + 1;
      unint64_t v118 = v83;
      if (v83 == v11)
      {
        uint64_t result = v111;
        uint64_t v6 = v112;
      }
      else
      {
        uint64_t v84 = v115[4];
        do
        {
          unint64_t v85 = *((unsigned int *)v83 + 1);
          unint64_t v86 = v85 >> 7;
          if (v85 >> 7 < (v115[5] - v84) >> 3)
          {
            uint64_t v87 = *(void *)(v84 + 8 * v86);
            if (v87)
            {
              uint64_t v88 = v85 & 0x7F;
              unint64_t v89 = *(unsigned __int16 *)(v87 + 2 * v88);
              uint64_t v91 = v115[7];
              uint64_t v90 = v115[8];
              if (v89 < (v90 - v91) >> 3)
              {
                uint64_t v92 = v91 + 8 * v89;
                if (v92 != v90 && *(_DWORD *)(v92 + 4) == v85)
                {
                  uint64_t v94 = v116[4];
                  if (v86 < (v116[5] - v94) >> 3)
                  {
                    uint64_t v95 = *(void *)(v94 + 8 * v86);
                    if (v95)
                    {
                      unint64_t v96 = *(unsigned __int16 *)(v95 + 2 * v88);
                      uint64_t v98 = v116[7];
                      uint64_t v97 = v116[8];
                      if (v96 < (v97 - v98) >> 3)
                      {
                        uint64_t v99 = v98 + 8 * v96;
                        if (v99 != v97 && *(_DWORD *)(v99 + 4) == v85)
                        {
                          uint64_t v101 = v117[4];
                          if (v86 < (v117[5] - v101) >> 3)
                          {
                            uint64_t v102 = *(void *)(v101 + 8 * v86);
                            if (v102)
                            {
                              unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v88);
                              uint64_t v105 = v117[7];
                              uint64_t v104 = v117[8];
                              if (v103 < (v104 - v105) >> 3)
                              {
                                uint64_t v106 = v105 + 8 * v103;
                                if (*(_DWORD *)(v106 + 4) == v85 && v106 != v104)
                                {
                                  uint64_t v11 = v83;
                                  goto LABEL_123;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v83;
        }
        while (v83 != v11);
        unint64_t v83 = v11;
LABEL_123:
        uint64_t result = v111;
        uint64_t v6 = v112;
        unint64_t v118 = v83;
      }
      if (v113 == v11) {
        goto LABEL_126;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_126:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v8 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  unint64_t v120 = v8;
  uint8x8_t v121 = v3;
  unint64_t v122 = (void *)v4;
  unint64_t v123 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  unint64_t v124 = (void *)v6;
  uint64_t v125 = v9;
  if (v10 == v9)
  {
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v120))
    {
      unint64_t v12 = v9 + 1;
      do
      {
        uint64_t v9 = v12;
        uint64_t v125 = v12;
        if (v12 == v10) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v120);
        unint64_t v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  unint64_t v119 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *unint64_t v119 = *v9;
    unint64_t v15 = *v9;
    uint64_t v16 = HIDWORD(*v9);
    unint64_t v17 = *v9 >> 39;
    uint64_t v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
    {
      uint64_t v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      uint64_t v25 = (unint64_t *)v3[11];
    }
    uint64_t v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
      && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v7[10] + 8 * v28;
    }
    else
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v33;
    }
    if (v34 == v33) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = (unint64_t *)v34;
    }
    uint64_t v36 = **(void **)(v11 + 8);
    uint64_t v37 = *(void **)v36;
    unint64_t v38 = *(void **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38) {
          goto LABEL_46;
        }
      }
    }
    if (v37 == v38)
    {
LABEL_46:
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = (void *)v37[3];
      uint64_t v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    unint64_t v41 = *v25;
    unint64_t v126 = v41;
    uint64_t v42 = v39[608];
    if (v41 >= (unint64_t)((v39[609] - v42) >> 3)
      || ((uint64_t v43 = *(void *)(v42 + 8 * v41)) != 0 ? (v44 = HIDWORD(v41) == HIDWORD(v43)) : (v44 = 0),
          !v44
       || ((uint64_t v62 = v39[611], v63 = (uint64_t *)(v62 + 24 * v43), v63 != (uint64_t *)v39[612])
         ? (BOOL v64 = v62 == 0)
         : (BOOL v64 = 1),
           v64)))
    {
      uint64_t v45 = 0;
    }
    else
    {
      uint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>> const&>,std::tuple<>>((uint64_t)(v39 + 595), v41, &v126);
      ++v65[3];
      uint64_t v45 = *v63;
    }
    uint64_t v46 = (uint64_t)(v39 + 37);
    unint64_t v47 = *v35;
    unint64_t v48 = *v35;
    uint64_t v49 = v39[50];
    unint64_t v50 = (v39[51] - v49) >> 3;
    if (v48 < v50
      && (uint64_t v51 = *(void *)(v49 + 8 * v48)) != 0
      && HIDWORD(v47) == HIDWORD(v51)
      && ((uint64_t v52 = v39[53], v52 + 16 * v51 != v39[54]) ? (v53 = v52 == 0) : (v53 = 1), !v53))
    {
      uint64_t v66 = *(void *)(v49 + 8 * v48);
      uint64_t v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v47, v35);
      ++v67[3];
      uint64_t v68 = v52 + 16 * v66;
      uint64_t v11 = a1;
      unint64_t v54 = *(void **)(v68 + 8);
      unint64_t v47 = *v35;
      uint64_t v49 = v39[50];
      unint64_t v48 = *v35;
      if (v48 >= (v39[51] - v49) >> 3) {
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v54 = 0;
      if (v48 >= v50) {
        goto LABEL_78;
      }
    }
    uint64_t v55 = *(void *)(v49 + 8 * v48);
    if (v55 && HIDWORD(v47) == HIDWORD(v55))
    {
      uint64_t v56 = v39[53];
      BOOL v57 = (void **)v39[54];
      BOOL v58 = (void **)(v56 + 16 * v55);
      if (v58 != v57 && v56 != 0)
      {
        uint64_t v60 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v46, v47, v35);
        ++v60[3];
        unint64_t v61 = *v58;
        if (!v45) {
          goto LABEL_126;
        }
        goto LABEL_79;
      }
    }
LABEL_78:
    unint64_t v61 = 0;
    if (!v45) {
      goto LABEL_126;
    }
LABEL_79:
    {
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v69 = v54[1];
    if (v69)
    {
      unint64_t v70 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index;
      uint8x8_t v71 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        uint64_t v72 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index >= v69) {
          uint64_t v72 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index % v69;
        }
      }
      else
      {
        uint64_t v72 = (v69 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index;
      }
      uint64_t v73 = *(void **)(*v54 + 8 * v72);
      if (v73)
      {
        uint64_t v74 = (void *)*v73;
        if (v74)
        {
          if (v71.u32[0] < 2uLL)
          {
            unint64_t v75 = v69 - 1;
            while (1)
            {
              uint64_t v77 = v74[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index == v77)
              {
                if (v74[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index) {
                  goto LABEL_101;
                }
              }
              else if ((v77 & v75) != v72)
              {
                goto LABEL_126;
              }
              uint64_t v74 = (void *)*v74;
              if (!v74) {
                goto LABEL_126;
              }
            }
          }
          do
          {
            unint64_t v76 = v74[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index == v76)
            {
              if (v74[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index)
              {
LABEL_101:
                {
                  if (v117)
                  {
                    md::typeToIntMap(v117);
                    uint64_t v11 = a1;
                  }
                }
                if (!qword_1E957F030) {
                  goto LABEL_166;
                }
                uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                v78.i16[0] = vaddlv_u8(v78);
                if (v78.u32[0] > 1uLL)
                {
                  unint64_t v79 = v70;
                  if (v70 >= qword_1E957F030) {
                    unint64_t v79 = v70 % qword_1E957F030;
                  }
                }
                else
                {
                  unint64_t v79 = (qword_1E957F030 - 1) & v70;
                }
                unint64_t v80 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v79);
                if (!v80 || (BOOL v81 = *v80) == 0) {
LABEL_166:
                }
                  abort();
                if (v78.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v83 = v81[1];
                    if ((uint64_t *)v70 == v83)
                    {
                      if (v81[2] == (uint64_t *)v70) {
                        goto LABEL_122;
                      }
                    }
                    else if (((unint64_t)v83 & (qword_1E957F030 - 1)) != v79)
                    {
                      goto LABEL_166;
                    }
                    BOOL v81 = (uint64_t **)*v81;
                    if (!v81) {
                      goto LABEL_166;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v82 = (unint64_t)v81[1];
                  if (v70 == v82)
                  {
                    if (v81[2] == (uint64_t *)v70)
                    {
LABEL_122:
                      uint64_t v84 = *((int *)v81 + 6);
                      uint64_t v85 = *((int *)v81 + 7);
                      if (v84 != -1) {
                        ggl::PipelineSetup::setConstantData(v61, v84, v45, 1);
                      }
                      if (v85 != -1) {
                        ggl::PipelineSetup::setConstantData(v61, v85, v45, 2);
                      }
                      goto LABEL_126;
                    }
                  }
                  else
                  {
                    if (v82 >= qword_1E957F030) {
                      v82 %= (unint64_t)qword_1E957F030;
                    }
                    if (v82 != v79) {
                      goto LABEL_166;
                    }
                  }
                  BOOL v81 = (uint64_t **)*v81;
                  if (!v81) {
                    goto LABEL_166;
                  }
                }
              }
            }
            else
            {
              if (v76 >= v69) {
                v76 %= v69;
              }
              if (v76 != v72) {
                break;
              }
            }
            uint64_t v74 = (void *)*v74;
          }
          while (v74);
        }
      }
    }
LABEL_126:
    uint64_t v9 = (void *)v120[4];
    unint64_t v14 = v125 + 1;
    uint64_t v125 = v14;
    if (v14 != v9)
    {
      uint64_t v86 = v121[4];
      while (1)
      {
        unint64_t v87 = *((unsigned int *)v14 + 1);
        unint64_t v88 = v87 >> 7;
        if (v87 >> 7 < (v121[5] - v86) >> 3)
        {
          uint64_t v89 = *(void *)(v86 + 8 * v88);
          if (v89)
          {
            uint64_t v90 = v87 & 0x7F;
            unint64_t v91 = *(unsigned __int16 *)(v89 + 2 * v90);
            uint64_t v93 = v121[7];
            uint64_t v92 = v121[8];
            if (v91 < (v92 - v93) >> 3)
            {
              uint64_t v94 = v93 + 8 * v91;
              if (v94 != v92 && *(_DWORD *)(v94 + 4) == v87)
              {
                uint64_t v96 = v122[4];
                if (v88 < (v122[5] - v96) >> 3)
                {
                  uint64_t v97 = *(void *)(v96 + 8 * v88);
                  if (v97)
                  {
                    unint64_t v98 = *(unsigned __int16 *)(v97 + 2 * v90);
                    uint64_t v100 = v122[7];
                    uint64_t v99 = v122[8];
                    if (v98 < (v99 - v100) >> 3)
                    {
                      uint64_t v101 = v100 + 8 * v98;
                      if (v101 != v99 && *(_DWORD *)(v101 + 4) == v87)
                      {
                        uint64_t v103 = v123[4];
                        if (v88 < (v123[5] - v103) >> 3)
                        {
                          uint64_t v104 = *(void *)(v103 + 8 * v88);
                          if (v104)
                          {
                            unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * v90);
                            uint64_t v107 = v123[7];
                            uint64_t v106 = v123[8];
                            if (v105 < (v106 - v107) >> 3)
                            {
                              uint64_t v108 = v107 + 8 * v105;
                              if (v108 != v106 && *(_DWORD *)(v108 + 4) == v87)
                              {
                                uint64_t v110 = v124[4];
                                if (v88 < (v124[5] - v110) >> 3)
                                {
                                  uint64_t v111 = *(void *)(v110 + 8 * v88);
                                  if (v111)
                                  {
                                    unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v90);
                                    uint64_t v113 = v124[7];
                                    uint64_t v114 = v124[8];
                                    if (v112 < (v114 - v113) >> 3)
                                    {
                                      uint64_t v115 = v113 + 8 * v112;
                                      if (*(_DWORD *)(v115 + 4) == v87 && v115 != v114) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          unint64_t v14 = v9;
          goto LABEL_17;
        }
      }
      uint64_t v9 = v14;
LABEL_17:
      uint64_t v125 = v14;
    }
  }
  *unint64_t v119 = 0xFFFFFFFF00000000;
  *(void *)(v11 + 8) = 0;
}

void sub_1A19528A4(_Unwind_Exception *a1)
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v124, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v122, v9, v4, v6, *(void *)(v9 + 32));
  if (v123 != v127)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v121 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (unint64_t *)v22;
      }
      uint64_t v24 = **(void **)(a1 + 8);
      uint64_t v25 = *(void **)v24;
      uint64_t v26 = *(void **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0x41D4E9297E100630)
        {
          v25 += 5;
          if (v25 == v26) {
            goto LABEL_29;
          }
        }
      }
      if (v25 == v26)
      {
LABEL_29:
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = (void *)v25[3];
        unint64_t v28 = (std::__shared_weak_count *)v25[4];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      uint64_t v29 = ***(uint64_t ****)(a1 + 8);
      if (v29 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v29 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v30 = v29 + 5;
        do
        {
          uint64_t v31 = *v30;
          v30 += 5;
        }
        while (v31 != 0xC94DD89A7B09BE9CLL);
        uint64_t v29 = v30 - 5;
      }
      uint64_t v32 = v29[3];
      uint64_t v33 = (std::__shared_weak_count *)v29[4];
      if (v33)
      {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      uint64_t v34 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v32 + 56))(v32) + 1256);
      uint64_t v35 = (uint64_t)(v27 + 37);
      unint64_t v36 = *v23;
      unint64_t v37 = *v23;
      uint64_t v38 = v27[50];
      unint64_t v39 = (v27[51] - v38) >> 3;
      if (v37 < v39
        && (uint64_t v40 = *(void *)(v38 + 8 * v37)) != 0
        && HIDWORD(v36) == HIDWORD(v40)
        && ((uint64_t v41 = v27[53], v41 + 16 * v40 != v27[54]) ? (v42 = v41 == 0) : (v42 = 1), !v42))
      {
        uint64_t v51 = *(void *)(v38 + 8 * v37);
        uint64_t v52 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v27 + 37), v36, v23);
        ++v52[3];
        uint64_t v53 = v41 + 16 * v51;
        uint64_t v11 = v121;
        uint64_t v43 = *(void **)(v53 + 8);
        unint64_t v36 = *v23;
        uint64_t v38 = v27[50];
        unint64_t v37 = *v23;
        if (v37 >= (v27[51] - v38) >> 3) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v43 = 0;
        if (v37 >= v39) {
          goto LABEL_56;
        }
      }
      uint64_t v44 = *(void *)(v38 + 8 * v37);
      if (!v44
        || HIDWORD(v36) != HIDWORD(v44)
        || ((uint64_t v45 = v27[53], v46 = (uint64_t *)v27[54], v47 = (uint64_t *)(v45 + 16 * v44), v47 != v46)
          ? (BOOL v48 = v45 == 0)
          : (BOOL v48 = 1),
            v48))
      {
LABEL_56:
        uint64_t v50 = 0;
        goto LABEL_57;
      }
      uint64_t v49 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v35, v36, v23);
      ++v49[3];
      uint64_t v50 = *v47;
LABEL_57:
      {
        gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v54 = v43[1];
      if (!v54) {
        goto LABEL_128;
      }
      unint64_t v55 = gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index;
      uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
      v56.i16[0] = vaddlv_u8(v56);
      if (v56.u32[0] > 1uLL)
      {
        uint64_t v57 = gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index;
        if (gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index >= v54) {
          uint64_t v57 = gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index % v54;
        }
      }
      else
      {
        uint64_t v57 = (v54 - 1) & gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index;
      }
      BOOL v58 = *(void **)(*v43 + 8 * v57);
      if (!v58) {
        goto LABEL_128;
      }
      uint64_t v59 = (void *)*v58;
      if (!v59) {
        goto LABEL_128;
      }
      if (v56.u32[0] < 2uLL)
      {
        unint64_t v60 = v54 - 1;
        while (1)
        {
          uint64_t v62 = v59[1];
          if (gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index == v62)
          {
            if (v59[2] == gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index) {
              goto LABEL_79;
            }
          }
          else if ((v62 & v60) != v57)
          {
            goto LABEL_128;
          }
          uint64_t v59 = (void *)*v59;
          if (!v59) {
            goto LABEL_128;
          }
        }
      }
      while (1)
      {
        unint64_t v61 = v59[1];
        if (gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index == v61) {
          break;
        }
        if (v61 >= v54) {
          v61 %= v54;
        }
        if (v61 != v57) {
          goto LABEL_128;
        }
LABEL_68:
        uint64_t v59 = (void *)*v59;
        if (!v59) {
          goto LABEL_128;
        }
      }
      if (v59[2] != gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index) {
        goto LABEL_68;
      }
LABEL_79:
      {
        if (v120)
        {
          md::typeToIntMap(v120);
          uint64_t v11 = v121;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_154;
      }
      uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v63.i16[0] = vaddlv_u8(v63);
      if (v63.u32[0] > 1uLL)
      {
        unint64_t v64 = v55;
        if (v55 >= qword_1E957F030) {
          unint64_t v64 = v55 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v64 = (qword_1E957F030 - 1) & v55;
      }
      uint64_t v65 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v64);
      if (!v65 || (uint64_t v66 = *v65) == 0) {
LABEL_154:
      }
        abort();
      if (v63.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v68 = v66[1];
          if ((uint64_t *)v55 == v68)
          {
            if (v66[2] == (uint64_t *)v55) {
              goto LABEL_100;
            }
          }
          else if (((unint64_t)v68 & (qword_1E957F030 - 1)) != v64)
          {
            goto LABEL_154;
          }
          uint64_t v66 = (uint64_t **)*v66;
          if (!v66) {
            goto LABEL_154;
          }
        }
      }
      while (2)
      {
        unint64_t v67 = (unint64_t)v66[1];
        if (v55 != v67)
        {
          if (v67 >= qword_1E957F030) {
            v67 %= (unint64_t)qword_1E957F030;
          }
          if (v67 != v64) {
            goto LABEL_154;
          }
LABEL_90:
          uint64_t v66 = (uint64_t **)*v66;
          if (!v66) {
            goto LABEL_154;
          }
          continue;
        }
        break;
      }
      if (v66[2] != (uint64_t *)v55) {
        goto LABEL_90;
      }
LABEL_100:
      uint64_t v70 = *((int *)v66 + 6);
      uint64_t v69 = *((int *)v66 + 7);
      if (v70 != -1)
      {
        uint64_t v71 = *(void *)(v50 + 16);
        if (v71)
        {
          uint64_t v72 = *(void *)(*(void *)(v71 + 48) + 72);
          uint64_t v73 = *(void *)(v72 + 8);
          uint64_t v74 = *(void *)(v73 + 72);
          if (v74)
          {
            uint64_t v75 = 0;
            uint64_t v76 = *(void *)(v73 + 64);
            uint64_t v77 = (unsigned __int8 *)(v76 + 1);
            while (1)
            {
              int v78 = *v77;
              v77 += 2;
              if (v78 == v70) {
                break;
              }
              if (v74 == ++v75) {
                goto LABEL_106;
              }
            }
            uint64_t v85 = (unsigned __int8 *)(v76 + 2 * v75);
LABEL_113:
            *(void *)(*(void *)(v50 + 96) + 8 * *v85) = v34;
          }
          else
          {
LABEL_106:
            uint64_t v79 = *(void *)(v72 + 24);
            uint64_t v80 = *(void *)(v79 + 72);
            if (v80)
            {
              uint64_t v81 = 0;
              uint64_t v82 = *(void *)(v79 + 64);
              unint64_t v83 = (unsigned __int8 *)(v82 + 1);
              while (1)
              {
                int v84 = *v83;
                v83 += 2;
                if (v84 == v70) {
                  break;
                }
                if (v80 == ++v81) {
                  goto LABEL_114;
                }
              }
              uint64_t v85 = (unsigned __int8 *)(v82 + 2 * v81);
              goto LABEL_113;
            }
          }
        }
      }
LABEL_114:
      if (v69 != -1)
      {
        uint64_t v86 = *(void *)(v50 + 16);
        if (v86)
        {
          uint64_t v87 = *(void *)(*(void *)(v86 + 48) + 72);
          uint64_t v88 = *(void *)(v87 + 8);
          uint64_t v89 = *(void *)(v88 + 72);
          if (v89)
          {
            uint64_t v90 = 0;
            uint64_t v91 = *(void *)(v88 + 64);
            uint64_t v92 = (unsigned __int8 *)(v91 + 1);
            while (1)
            {
              int v93 = *v92;
              v92 += 2;
              if (v93 == v69) {
                break;
              }
              if (v89 == ++v90) {
                goto LABEL_120;
              }
            }
            uint64_t v100 = (unsigned __int8 *)(v91 + 2 * v90);
LABEL_127:
            *(void *)(*(void *)(v50 + 96) + 8 * *v100) = v34;
          }
          else
          {
LABEL_120:
            uint64_t v94 = *(void *)(v87 + 24);
            uint64_t v95 = *(void *)(v94 + 72);
            if (v95)
            {
              uint64_t v96 = 0;
              uint64_t v97 = *(void *)(v94 + 64);
              unint64_t v98 = (unsigned __int8 *)(v97 + 1);
              while (1)
              {
                int v99 = *v98;
                v98 += 2;
                if (v99 == v69) {
                  break;
                }
                if (v95 == ++v96) {
                  goto LABEL_128;
                }
              }
              uint64_t v100 = (unsigned __int8 *)(v97 + 2 * v96);
              goto LABEL_127;
            }
          }
        }
      }
LABEL_128:
      uint64_t v101 = v127;
      uint64_t v10 = *(unint64_t **)(v124 + 32);
      if (++v127 != v10)
      {
        uint64_t v102 = v125[4];
        unint64_t v103 = (v125[5] - v102) >> 3;
        uint64_t v104 = v101 + 2;
        while (1)
        {
          unint64_t v105 = *((unsigned int *)v104 - 1);
          unint64_t v106 = v105 >> 7;
          if (v105 >> 7 < v103)
          {
            uint64_t v107 = *(void *)(v102 + 8 * v106);
            if (v107)
            {
              unint64_t v108 = *(unsigned __int16 *)(v107 + 2 * (v105 & 0x7F));
              uint64_t v110 = v125[7];
              uint64_t v109 = v125[8];
              if (v108 < (v109 - v110) >> 3)
              {
                uint64_t v111 = v110 + 8 * v108;
                if (v111 != v109 && *(_DWORD *)(v111 + 4) == v105)
                {
                  uint64_t v113 = v126[4];
                  if (v106 < (v126[5] - v113) >> 3)
                  {
                    uint64_t v114 = *(void *)(v113 + 8 * v106);
                    if (v114)
                    {
                      unint64_t v115 = *(unsigned __int16 *)(v114 + 2 * (v105 & 0x7F));
                      uint64_t v117 = v126[7];
                      uint64_t v116 = v126[8];
                      if (v115 < (v116 - v117) >> 3)
                      {
                        uint64_t v118 = v117 + 8 * v115;
                        if (v118 != v116 && *(_DWORD *)(v118 + 4) == v105) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          float v127 = v104;
          BOOL v20 = v104++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v104 - 1;
      }
LABEL_9:
      if (v123 == v10) {
        goto LABEL_153;
      }
    }
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_153:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A19530D0(_Unwind_Exception *a1)
{
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v236 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::ColorDataHandle>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v221, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v219, v9, v4, v6, *(void *)(v9 + 32));
  if (v220 != v224)
  {
    uint64_t v11 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    size_t v217 = v6;
    uint64_t v218 = v2;
    unint64_t v216 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = (void **)(v6[10] + 8 * v15);
      }
      else
      {
        uint64_t v21 = (void **)v6[11];
      }
      uint64_t v22 = **(void **)(v2 + 8);
      uint64_t v23 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      if (v23 != v24)
      {
        while (*v23 != 0x41D4E9297E100630)
        {
          v23 += 5;
          if (v23 == v24) {
            goto LABEL_26;
          }
        }
      }
      if (v23 == v24)
      {
LABEL_26:
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = v23[3];
        uint64_t v26 = (std::__shared_weak_count *)v23[4];
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      uint64_t v27 = **(void **)(v2 + 8);
      unint64_t v28 = *(void **)v27;
      uint64_t v29 = *(void **)(v27 + 8);
      if (v28 != v29)
      {
        while (*v28 != 0x4EDAD23DFB014132)
        {
          v28 += 5;
          if (v28 == v29) {
            goto LABEL_35;
          }
        }
      }
      if (v28 == v29)
      {
LABEL_35:
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = (void *)v28[3];
        uint64_t v31 = (std::__shared_weak_count *)v28[4];
        if (v31)
        {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      uint64_t v232 = *v21;
      uint64_t v32 = v30[126];
      if (v232 < (unint64_t)((v30[127] - v32) >> 3)
        && ((uint64_t v33 = *(void *)(v32 + 8 * v232)) != 0 ? (v34 = HIDWORD(v232) == HIDWORD(v33)) : (v34 = 0),
            v34))
      {
        uint64_t v36 = v30[129] + 20 * v33;
        uint64_t v35 = v30[130];
      }
      else
      {
        uint64_t v35 = v30[130];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        unint64_t v37 = 0;
      }
      else {
        unint64_t v37 = (unsigned int *)v36;
      }
      if (v37)
      {
        uint64_t v38 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v30 + 118), (unint64_t)v232, &v232);
        ++v38[3];
      }
      unsigned int v39 = *v37;
      unsigned int v40 = v37[1];
      unsigned int v41 = v37[2];
      unsigned int v42 = v37[3];
      v225[0] = 0;
      *(void *)&long long v226 = __PAIR64__(v40, v39);
      *((void *)&v226 + 1) = __PAIR64__(v42, v41);
      unsigned __int8 v227 = 1;
      uint64_t v43 = (void *)(v25 + 6488);
      uint64_t v44 = std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((void *)(v25 + 6488), (uint64_t)v225);
      if (!v44) {
        break;
      }
      uint64_t v45 = *(void *)(v44 + 40);
      if (!v45) {
        break;
      }
      uint64_t v2 = v218;
      uint64_t v195 = *(void **)(v218 + 8);
      uint64_t v11 = v216;
      uint64_t v196 = *v216;
      uint64_t v229 = (uint64_t (**)(void **))&unk_1EF525688;
      *(void *)&long long v230 = v45;
      *((void *)&v230 + 1) = v196;
      uint8x8_t v231 = (void **)&v229;
      uint64_t v234 = &v232;
      uint64_t v232 = &unk_1EF525688;
      long long v233 = v230;
      int v235 = 0;
      ecs2::Runtime::queueCommand(v195, (uint64_t)&v232);
      if (v235 != -1) {
        ((void (*)(char *, void **))off_1EF590C90[v235])(&v228, &v232);
      }
      int v235 = -1;
      uint64_t result = (uint64_t)v231;
      uint64_t v6 = v217;
      if (v231 == (void **)&v229)
      {
        uint64_t result = v229[4]((void **)&v229);
      }
      else if (v231)
      {
        uint64_t result = (*((uint64_t (**)(void))*v231 + 5))();
      }
      uint64_t v198 = v224;
      uint64_t v10 = *(unint64_t **)(v221 + 32);
      if (++v224 != v10)
      {
        uint64_t v199 = v222[4];
        unint64_t v200 = (v222[5] - v199) >> 3;
        size_t v201 = v198 + 2;
        while (1)
        {
          unint64_t v202 = *((unsigned int *)v201 - 1);
          unint64_t v203 = v202 >> 7;
          if (v202 >> 7 < v200)
          {
            uint64_t v204 = *(void *)(v199 + 8 * v203);
            if (v204)
            {
              unint64_t v205 = *(unsigned __int16 *)(v204 + 2 * (v202 & 0x7F));
              uint64_t v206 = v222[7];
              uint64_t result = v222[8];
              if (v205 < (result - v206) >> 3)
              {
                uint64_t v207 = v206 + 8 * v205;
                if (v207 != result && *(_DWORD *)(v207 + 4) == v202)
                {
                  uint64_t v209 = v223[4];
                  uint64_t result = v223[5] - v209;
                  if (v203 < result >> 3)
                  {
                    uint64_t v210 = *(void *)(v209 + 8 * v203);
                    if (v210)
                    {
                      unint64_t v211 = *(unsigned __int16 *)(v210 + 2 * (v202 & 0x7F));
                      uint64_t v213 = v223[7];
                      uint64_t v212 = v223[8];
                      uint64_t result = v212 - v213;
                      if (v211 < (v212 - v213) >> 3)
                      {
                        uint64_t v214 = v213 + 8 * v211;
                        if (v214 != v212 && *(_DWORD *)(v214 + 4) == v202) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          size_t v224 = v201;
          BOOL v20 = v201++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v201 - 1;
      }
LABEL_9:
      if (v220 == v10) {
        goto LABEL_401;
      }
    }
    uint64_t v46 = *(void *)(v25 + 6360);
    if (*(void *)(v25 + 6352) == v46)
    {
      uint64_t v49 = (-1431655765 * ((*(void *)(v25 + 6408) - *(void *)(v25 + 6400)) >> 3)) | 0x100000000;
      uint64_t v50 = *(uint64_t **)(v25 + 6384);
      unint64_t v51 = *(void *)(v25 + 6392);
      if ((unint64_t)v50 >= v51)
      {
        uint64_t v53 = *(char **)(v25 + 6376);
        uint64_t v54 = ((char *)v50 - v53) >> 3;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61) {
          goto LABEL_403;
        }
        uint64_t v56 = v51 - (void)v53;
        if (v56 >> 2 > v55) {
          unint64_t v55 = v56 >> 2;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          if (v57 >> 61) {
            goto LABEL_402;
          }
          BOOL v58 = (char *)operator new(8 * v57);
        }
        else
        {
          BOOL v58 = 0;
        }
        uint64_t v59 = (uint64_t *)&v58[8 * v54];
        *uint64_t v59 = v49;
        uint64_t v52 = v59 + 1;
        if (v50 != (uint64_t *)v53)
        {
          unint64_t v60 = (char *)v50 - v53 - 8;
          if (v60 < 0x58) {
            goto LABEL_407;
          }
          if ((unint64_t)(v53 - v58) < 0x20) {
            goto LABEL_407;
          }
          uint64_t v61 = (v60 >> 3) + 1;
          uint64_t v62 = &v58[(char *)v50 - v53 - 16];
          uint8x8_t v63 = v50 - 2;
          uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v65 = *(_OWORD *)v63;
            *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
            *(_OWORD *)uint64_t v62 = v65;
            v62 -= 32;
            v63 -= 4;
            v64 -= 4;
          }
          while (v64);
          v59 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
          v50 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_407:
            do
            {
              uint64_t v66 = *--v50;
              *--uint64_t v59 = v66;
            }
            while (v50 != (uint64_t *)v53);
          }
          uint64_t v50 = *(uint64_t **)(v25 + 6376);
        }
        *(void *)(v25 + 6376) = v59;
        *(void *)(v25 + 6384) = v52;
        *(void *)(v25 + 6392) = &v58[8 * v57];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *uint64_t v50 = v49;
        uint64_t v52 = v50 + 1;
      }
      *(void *)(v25 + 6384) = v52;
      unint64_t v48 = *(v52 - 1);
    }
    else
    {
      uint64_t v47 = *(void *)(v46 - 8);
      *(void *)(v25 + 6360) = v46 - 8;
      *(_DWORD *)(*(void *)(v25 + 6376) + 8 * v47) = -1431655765
                                                     * ((*(void *)(v25 + 6408) - *(void *)(v25 + 6400)) >> 3);
      *(_DWORD *)(*(void *)(v25 + 6376) + 8 * v47 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v25 + 6376)
                                                                                               + 8 * v47
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      unint64_t v48 = v47 | ((unint64_t)*(unsigned int *)(*(void *)(v25 + 6376) + 8 * v47 + 4) << 32);
    }
    int64_t v67 = *(void *)(v25 + 6408);
    unint64_t v68 = *(void *)(v25 + 6416);
    if (v67 >= v68)
    {
      uint64_t v70 = *(void **)(v25 + 6400);
      unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((v67 - (uint64_t)v70) >> 3) + 1;
      if (v71 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_403;
      }
      unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (void)v70) >> 3);
      if (2 * v72 > v71) {
        unint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x555555555555555) {
        unint64_t v73 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v73 = v71;
      }
      if (v73 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_402;
      }
      uint64_t v74 = (char *)operator new(24 * v73);
      uint64_t v75 = &v74[8 * ((v67 - (uint64_t)v70) >> 3)];
      uint64_t v76 = &v74[24 * v73];
      *(void *)uint64_t v75 = 0;
      *((void *)v75 + 1) = 0;
      *((void *)v75 + 2) = 0;
      uint64_t v69 = v75 + 24;
      if ((void *)v67 == v70)
      {
        *(void *)(v25 + 6400) = v75;
        *(void *)(v25 + 6408) = v69;
        *(void *)(v25 + 6416) = v76;
      }
      else
      {
        do
        {
          long long v77 = *(_OWORD *)(v67 - 24);
          v67 -= 24;
          *(_OWORD *)(v75 - 24) = v77;
          v75 -= 24;
          *((void *)v75 + 2) = *(void *)(v67 + 16);
          *(void *)(v67 + 8) = 0;
          *(void *)(v67 + 16) = 0;
        }
        while ((void *)v67 != v70);
        int64_t v67 = *(void *)(v25 + 6400);
        int v78 = *(void **)(v25 + 6408);
        *(void *)(v25 + 6400) = v75;
        *(void *)(v25 + 6408) = v69;
        *(void *)(v25 + 6416) = v76;
        while (v78 != (void *)v67)
        {
          uint64_t v79 = (std::__shared_weak_count *)*(v78 - 1);
          if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
          v78 -= 3;
        }
      }
      if (v67) {
        operator delete((void *)v67);
      }
    }
    else
    {
      *(void *)int64_t v67 = 0;
      *(void *)(v67 + 8) = 0;
      uint64_t v69 = (void *)(v67 + 24);
      *(void *)(v67 + 16) = 0;
    }
    *(void *)(v25 + 6408) = v69;
    unint64_t prime = *(void *)(v25 + 6432);
    unint64_t v81 = *(void *)(v25 + 6440);
    if (prime < v81)
    {
      *(void *)unint64_t prime = v48;
      prime += 8;
      uint64_t v82 = (void *)prime;
      goto LABEL_117;
    }
    int64_t v67 = *(void *)(v25 + 6424);
    uint64_t v83 = (uint64_t)(prime - v67) >> 3;
    unint64_t v84 = v83 + 1;
    if (!((unint64_t)(v83 + 1) >> 61))
    {
      uint64_t v85 = v81 - v67;
      if (v85 >> 2 > v84) {
        unint64_t v84 = v85 >> 2;
      }
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v84;
      }
      if (v86)
      {
        if (v86 >> 61) {
          goto LABEL_402;
        }
        uint64_t v87 = operator new(8 * v86);
      }
      else
      {
        uint64_t v87 = 0;
      }
      uint64_t v88 = &v87[8 * v83];
      *uint64_t v88 = v48;
      uint64_t v82 = v88 + 1;
      if (prime != v67)
      {
        unint64_t v89 = prime - v67 - 8;
        if (v89 < 0x58) {
          goto LABEL_408;
        }
        if ((unint64_t)(v67 - (void)v87) < 0x20) {
          goto LABEL_408;
        }
        uint64_t v90 = (v89 >> 3) + 1;
        uint64_t v91 = &v87[prime - v67 - 16];
        uint64_t v92 = (long long *)(prime - 16);
        uint64_t v93 = v90 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v94 = *v92;
          *(v91 - 1) = *(v92 - 1);
          *uint64_t v91 = v94;
          v91 -= 2;
          v92 -= 2;
          v93 -= 4;
        }
        while (v93);
        v88 -= v90 & 0x3FFFFFFFFFFFFFFCLL;
        prime -= 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
        if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_408:
          do
          {
            uint64_t v95 = *(void *)(prime - 8);
            prime -= 8;
            *--uint64_t v88 = v95;
          }
          while (prime != v67);
        }
      }
      *(void *)(v25 + 6424) = v88;
      *(void *)(v25 + 6432) = v82;
      *(void *)(v25 + 6440) = &v87[8 * v86];
      if (v67) {
        operator delete((void *)v67);
      }
LABEL_117:
      uint64_t v96 = (uint64_t *)(v25 + 6272);
      *(void *)(v25 + 6432) = v82;
      unint64_t v97 = *(void *)(v25 + 6280);
      if (v97)
      {
        uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
        v98.i16[0] = vaddlv_u8(v98);
        if (v98.u32[0] > 1uLL)
        {
          int64_t v67 = v48;
          if (v48 >= v97) {
            int64_t v67 = v48 % v97;
          }
        }
        else
        {
          int64_t v67 = (v97 - 1) & v48;
        }
        int v99 = *(void **)(*v96 + 8 * v67);
        if (v99)
        {
          uint64_t v100 = (void *)*v99;
          if (v100)
          {
            if (v98.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v102 = v100[1];
                if (v102 == v48)
                {
                  if (v100[2] == v48) {
                    goto LABEL_175;
                  }
                }
                else if ((v102 & (v97 - 1)) != v67)
                {
                  goto LABEL_137;
                }
                uint64_t v100 = (void *)*v100;
                if (!v100) {
                  goto LABEL_137;
                }
              }
            }
            do
            {
              unint64_t v101 = v100[1];
              if (v101 == v48)
              {
                if (v100[2] == v48) {
                  goto LABEL_175;
                }
              }
              else
              {
                if (v101 >= v97) {
                  v101 %= v97;
                }
                if (v101 != v67) {
                  break;
                }
              }
              uint64_t v100 = (void *)*v100;
            }
            while (v100);
          }
        }
      }
LABEL_137:
      unint64_t prime = v97 == 0;
      unint64_t v103 = (char *)operator new(0x30uLL);
      *(void *)unint64_t v103 = 0;
      *((void *)v103 + 1) = v48;
      *((void *)v103 + 2) = v48;
      *(_OWORD *)(v103 + 24) = xmmword_1A28FCC60;
      v103[40] = 0;
      float v104 = (float)(unint64_t)(*(void *)(v25 + 6296) + 1);
      float v105 = *(float *)(v25 + 6304);
      if ((((float)(v105 * (float)v97) >= v104) & ~prime) == 0)
      {
        BOOL v106 = v97 < 3 || (v97 & (v97 - 1)) != 0;
        unint64_t v107 = v106 | (2 * v97);
        unint64_t v108 = vcvtps_u32_f32(v104 / v105);
        if (v107 <= v108) {
          unint64_t prime = v108;
        }
        else {
          unint64_t prime = v107;
        }
        if (prime == 1)
        {
          unint64_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          unint64_t prime = std::__next_prime(prime);
          unint64_t v97 = *(void *)(v25 + 6280);
        }
        if (prime > v97) {
          goto LABEL_149;
        }
        if (prime < v97)
        {
          unint64_t v109 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6296) / *(float *)(v25 + 6304));
          if (v97 < 3 || (uint8x8_t v110 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v110.i16[0] = vaddlv_u8(v110), v110.u32[0] > 1uLL))
          {
            unint64_t v109 = std::__next_prime(v109);
          }
          else
          {
            uint64_t v111 = 1 << -(char)__clz(v109 - 1);
            if (v109 >= 2) {
              unint64_t v109 = v111;
            }
          }
          if (prime <= v109) {
            unint64_t prime = v109;
          }
          if (prime < v97) {
LABEL_149:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v25 + 6272, prime);
        }
        unint64_t v97 = *(void *)(v25 + 6280);
        if ((v97 & (v97 - 1)) != 0)
        {
          if (v48 >= v97) {
            int64_t v67 = v48 % v97;
          }
          else {
            int64_t v67 = v48;
          }
        }
        else
        {
          int64_t v67 = (v97 - 1) & v48;
        }
      }
      uint64_t v112 = *v96;
      uint64_t v113 = *(void **)(*v96 + 8 * v67);
      if (v113)
      {
        *(void *)unint64_t v103 = *v113;
      }
      else
      {
        *(void *)unint64_t v103 = *(void *)(v25 + 6288);
        *(void *)(v25 + 6288) = v103;
        *(void *)(v112 + 8 * v67) = v25 + 6288;
        if (!*(void *)v103)
        {
LABEL_174:
          ++*(void *)(v25 + 6296);
LABEL_175:
          if (!v227)
          {
            std::__throw_bad_optional_access[abi:nn180100]();
            __break(1u);
          }
          uint64_t v115 = v226;
          unint64_t v116 = v226 - 0x61C8864680B583EBLL;
          if (*(float *)&v226 == 0.0) {
            unint64_t v116 = 0x9E3779B97F4A7C15;
          }
          uint64_t v117 = DWORD1(v226) - 0x61C8864680B583EBLL;
          if (*((float *)&v226 + 1) == 0.0) {
            uint64_t v117 = 0x9E3779B97F4A7C15;
          }
          unint64_t v118 = ((v116 >> 2) + (v116 << 6) + v117) ^ v116;
          uint64_t v119 = *((void *)&v226 + 1);
          uint64_t v120 = DWORD2(v226) - 0x61C8864680B583EBLL;
          if (*((float *)&v226 + 2) == 0.0) {
            uint64_t v120 = 0x9E3779B97F4A7C15;
          }
          unint64_t v121 = (v120 + (v118 << 6) + (v118 >> 2)) ^ v118;
          uint64_t v122 = HIDWORD(v226) - 0x61C8864680B583EBLL;
          if (*((float *)&v226 + 3) == 0.0) {
            uint64_t v122 = 0x9E3779B97F4A7C15;
          }
          unint64_t v123 = (v122 + (v121 << 6) + (v121 >> 2)) ^ v121;
          unint64_t v124 = (((v123 << 6) - 0x61C8864680B583EBLL + (v123 >> 2)) ^ v123) - 0x61C8864680B583EBLL;
          unint64_t v125 = *(void *)(v25 + 6496);
          if (v125)
          {
            uint8x8_t v126 = (uint8x8_t)vcnt_s8((int8x8_t)v125);
            v126.i16[0] = vaddlv_u8(v126);
            if (v126.u32[0] > 1uLL)
            {
              unint64_t prime = (((v123 << 6) - 0x61C8864680B583EBLL + (v123 >> 2)) ^ v123) - 0x61C8864680B583EBLL;
              if (v124 >= v125) {
                unint64_t prime = v124 % v125;
              }
            }
            else
            {
              unint64_t prime = v124 & (v125 - 1);
            }
            float v127 = *(void ***)(*v43 + 8 * prime);
            if (v127)
            {
              uint64_t v128 = *v127;
              if (*v127)
              {
                if (v126.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v131 = v128[1];
                    if (v131 == v124)
                    {
                      if (*((unsigned char *)v128 + 36))
                      {
                        if (*(void *)((char *)v128 + 20) == (void)v226
                          && *(void *)((char *)v128 + 28) == *((void *)&v226 + 1))
                        {
                          goto LABEL_281;
                        }
                      }
                    }
                    else if ((v131 & (v125 - 1)) != prime)
                    {
                      goto LABEL_215;
                    }
                    uint64_t v128 = (void *)*v128;
                    if (!v128) {
                      goto LABEL_215;
                    }
                  }
                }
                do
                {
                  unint64_t v129 = v128[1];
                  if (v129 == v124)
                  {
                    if (*((unsigned char *)v128 + 36))
                    {
                      if (*(void *)((char *)v128 + 20) == (void)v226
                        && *(void *)((char *)v128 + 28) == *((void *)&v226 + 1))
                      {
                        goto LABEL_281;
                      }
                    }
                  }
                  else
                  {
                    if (v129 >= v125) {
                      v129 %= v125;
                    }
                    if (v129 != prime) {
                      break;
                    }
                  }
                  uint64_t v128 = (void *)*v128;
                }
                while (v128);
              }
            }
          }
LABEL_215:
          uint64_t v128 = operator new(0x30uLL);
          *uint64_t v128 = 0;
          v128[1] = v124;
          *((unsigned char *)v128 + 16) = v225[0];
          *(_OWORD *)((char *)v128 + 20) = v226;
          *((unsigned char *)v128 + 36) = 1;
          v128[5] = 0;
          float v133 = (float)(unint64_t)(*(void *)(v25 + 6512) + 1);
          float v134 = *(float *)(v25 + 6520);
          if ((((float)(v134 * (float)v125) >= v133) & ~(v125 == 0)) != 0)
          {
LABEL_271:
            uint64_t v157 = (void *)*v43;
            uint64_t v158 = *(void **)(*v43 + 8 * prime);
            if (v158)
            {
              *uint64_t v128 = *v158;
            }
            else
            {
              *uint64_t v128 = *(void *)(v25 + 6504);
              *(void *)(v25 + 6504) = v128;
              v157[prime] = v25 + 6504;
              if (!*v128) {
                goto LABEL_280;
              }
              unint64_t v159 = *(void *)(*v128 + 8);
              if ((v125 & (v125 - 1)) != 0)
              {
                if (v159 >= v125) {
                  v159 %= v125;
                }
              }
              else
              {
                v159 &= v125 - 1;
              }
              uint64_t v158 = (void *)(*v43 + 8 * v159);
            }
            *uint64_t v158 = v128;
LABEL_280:
            ++*(void *)(v25 + 6512);
LABEL_281:
            v128[5] = v48;
            unint64_t v160 = *(void *)(v25 + 6536);
            if (v160)
            {
              uint8x8_t v161 = (uint8x8_t)vcnt_s8((int8x8_t)v160);
              v161.i16[0] = vaddlv_u8(v161);
              if (v161.u32[0] > 1uLL)
              {
                unint64_t v124 = v48;
                if (v48 >= v160) {
                  unint64_t v124 = v48 % v160;
                }
              }
              else
              {
                unint64_t v124 = (v160 - 1) & v48;
              }
              float v162 = *(void ***)(*(void *)(v25 + 6528) + 8 * v124);
              if (v162)
              {
                float v163 = *v162;
                if (*v162)
                {
                  if (v161.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v165 = v163[1];
                      if (v165 == v48)
                      {
                        if (v163[2] == v48) {
                          goto LABEL_367;
                        }
                      }
                      else if ((v165 & (v160 - 1)) != v124)
                      {
                        goto LABEL_301;
                      }
                      float v163 = (void *)*v163;
                      if (!v163) {
                        goto LABEL_301;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v164 = v163[1];
                    if (v164 == v48)
                    {
                      if (v163[2] == v48) {
                        goto LABEL_367;
                      }
                    }
                    else
                    {
                      if (v164 >= v160) {
                        v164 %= v160;
                      }
                      if (v164 != v124) {
                        break;
                      }
                    }
                    float v163 = (void *)*v163;
                  }
                  while (v163);
                }
              }
            }
LABEL_301:
            float v163 = operator new(0x30uLL);
            void *v163 = 0;
            v163[1] = v48;
            v163[2] = v48;
            v163[3] = 0;
            v163[4] = 0;
            v163[5] = 0;
            float v166 = (float)(unint64_t)(*(void *)(v25 + 6552) + 1);
            float v167 = *(float *)(v25 + 6560);
            if ((((float)(v167 * (float)v160) >= v166) & ~(v160 == 0)) != 0)
            {
LABEL_357:
              uint64_t v192 = *(void *)(v25 + 6528);
              uint64_t v193 = *(void **)(v192 + 8 * v124);
              if (v193)
              {
                void *v163 = *v193;
              }
              else
              {
                void *v163 = *(void *)(v25 + 6544);
                *(void *)(v25 + 6544) = v163;
                *(void *)(v192 + 8 * v124) = v25 + 6544;
                if (!*v163)
                {
LABEL_366:
                  ++*(void *)(v25 + 6552);
LABEL_367:
                  *((unsigned char *)v163 + 24) = v225[0];
                  if (*((unsigned __int8 *)v163 + 44) == v227)
                  {
                    if (*((unsigned char *)v163 + 44))
                    {
                      *(void *)((char *)v163 + 28) = v115;
                      *(void *)((char *)v163 + 36) = v119;
                    }
                  }
                  else if (*((unsigned char *)v163 + 44))
                  {
                    *((unsigned char *)v163 + 44) = 0;
                  }
                  else
                  {
                    *(_OWORD *)((char *)v163 + 28) = v226;
                    *((unsigned char *)v163 + 44) = 1;
                  }
                  uint64_t v232 = (void *)v48;
                  operator new();
                }
                unint64_t v194 = *(void *)(*v163 + 8);
                if ((v160 & (v160 - 1)) != 0)
                {
                  if (v194 >= v160) {
                    v194 %= v160;
                  }
                }
                else
                {
                  v194 &= v160 - 1;
                }
                uint64_t v193 = (void *)(*(void *)(v25 + 6528) + 8 * v194);
              }
              void *v193 = v163;
              goto LABEL_366;
            }
            BOOL v168 = (v160 & (v160 - 1)) != 0;
            if (v160 < 3) {
              BOOL v168 = 1;
            }
            unint64_t v169 = v168 | (2 * v160);
            unint64_t v170 = vcvtps_u32_f32(v166 / v167);
            if (v169 <= v170) {
              size_t v171 = v170;
            }
            else {
              size_t v171 = v169;
            }
            if (v171 == 1)
            {
              size_t v171 = 2;
            }
            else if ((v171 & (v171 - 1)) != 0)
            {
              size_t v171 = std::__next_prime(v171);
              unint64_t v160 = *(void *)(v25 + 6536);
            }
            if (v171 <= v160)
            {
              if (v171 >= v160) {
                goto LABEL_352;
              }
              unint64_t v184 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6552) / *(float *)(v25 + 6560));
              if (v160 < 3
                || (uint8x8_t v185 = (uint8x8_t)vcnt_s8((int8x8_t)v160), v185.i16[0] = vaddlv_u8(v185), v185.u32[0] > 1uLL))
              {
                unint64_t v184 = std::__next_prime(v184);
              }
              else
              {
                uint64_t v186 = 1 << -(char)__clz(v184 - 1);
                if (v184 >= 2) {
                  unint64_t v184 = v186;
                }
              }
              if (v171 <= v184) {
                size_t v171 = v184;
              }
              if (v171 >= v160) {
                goto LABEL_352;
              }
              if (!v171)
              {
                size_t v191 = *(void **)(v25 + 6528);
                *(void *)(v25 + 6528) = 0;
                if (v191) {
                  operator delete(v191);
                }
                *(void *)(v25 + 6536) = 0;
                goto LABEL_352;
              }
            }
            if (!(v171 >> 61))
            {
              size_t v172 = operator new(8 * v171);
              unint64_t v173 = *(void **)(v25 + 6528);
              *(void *)(v25 + 6528) = v172;
              if (v173) {
                operator delete(v173);
              }
              uint64_t v174 = 0;
              *(void *)(v25 + 6536) = v171;
              do
                *(void *)(*(void *)(v25 + 6528) + 8 * v174++) = 0;
              while (v171 != v174);
              unint64_t v175 = *(void **)(v25 + 6544);
              if (!v175) {
                goto LABEL_352;
              }
              uint64_t v176 = v25 + 6544;
              size_t v177 = v175[1];
              size_t v178 = v171 - 1;
              if ((v171 & (v171 - 1)) == 0)
              {
                size_t v179 = v177 & v178;
                *(void *)(*(void *)(v25 + 6528) + 8 * v179) = v176;
                while (1)
                {
                  float v180 = (void *)*v175;
                  if (!*v175) {
                    break;
                  }
                  size_t v181 = v180[1] & v178;
                  if (v181 == v179)
                  {
                    unint64_t v175 = (void *)*v175;
                  }
                  else
                  {
                    uint64_t v182 = *(void *)(v25 + 6528);
                    if (*(void *)(v182 + 8 * v181))
                    {
                      *unint64_t v175 = *v180;
                      uint64_t v183 = 8 * v181;
                      void *v180 = **(void **)(*(void *)(v25 + 6528) + v183);
                      **(void **)(*(void *)(v25 + 6528) + v183) = v180;
                    }
                    else
                    {
                      *(void *)(v182 + 8 * v181) = v175;
                      unint64_t v175 = v180;
                      size_t v179 = v181;
                    }
                  }
                }
LABEL_352:
                unint64_t v160 = *(void *)(v25 + 6536);
                if ((v160 & (v160 - 1)) != 0)
                {
                  if (v48 >= v160) {
                    unint64_t v124 = v48 % v160;
                  }
                  else {
                    unint64_t v124 = v48;
                  }
                }
                else
                {
                  unint64_t v124 = (v160 - 1) & v48;
                }
                goto LABEL_357;
              }
              if (v177 >= v171) {
                v177 %= v171;
              }
              *(void *)(*(void *)(v25 + 6528) + 8 * v177) = v176;
              uint64_t v187 = (void *)*v175;
              if (!*v175) {
                goto LABEL_352;
              }
              while (1)
              {
                size_t v189 = v187[1];
                if (v189 >= v171) {
                  v189 %= v171;
                }
                if (v189 != v177)
                {
                  uint64_t v190 = *(void *)(v25 + 6528);
                  if (!*(void *)(v190 + 8 * v189))
                  {
                    *(void *)(v190 + 8 * v189) = v175;
                    goto LABEL_338;
                  }
                  *unint64_t v175 = *v187;
                  uint64_t v188 = 8 * v189;
                  *uint64_t v187 = **(void **)(*(void *)(v25 + 6528) + v188);
                  **(void **)(*(void *)(v25 + 6528) + v188) = v187;
                  uint64_t v187 = v175;
                }
                size_t v189 = v177;
LABEL_338:
                unint64_t v175 = v187;
                uint64_t v187 = (void *)*v187;
                size_t v177 = v189;
                if (!v187) {
                  goto LABEL_352;
                }
              }
            }
LABEL_402:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v135 = (v125 & (v125 - 1)) != 0;
          if (v125 < 3) {
            BOOL v135 = 1;
          }
          unint64_t v136 = v135 | (2 * v125);
          unint64_t v137 = vcvtps_u32_f32(v133 / v134);
          if (v136 <= v137) {
            size_t v138 = v137;
          }
          else {
            size_t v138 = v136;
          }
          if (v138 == 1)
          {
            size_t v138 = 2;
          }
          else if ((v138 & (v138 - 1)) != 0)
          {
            size_t v138 = std::__next_prime(v138);
            unint64_t v125 = *(void *)(v25 + 6496);
          }
          if (v138 <= v125)
          {
            if (v138 >= v125) {
              goto LABEL_266;
            }
            unint64_t v150 = vcvtps_u32_f32((float)*(unint64_t *)(v25 + 6512) / *(float *)(v25 + 6520));
            if (v125 < 3
              || (uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)v125), v151.i16[0] = vaddlv_u8(v151), v151.u32[0] > 1uLL))
            {
              unint64_t v150 = std::__next_prime(v150);
            }
            else
            {
              uint64_t v152 = 1 << -(char)__clz(v150 - 1);
              if (v150 >= 2) {
                unint64_t v150 = v152;
              }
            }
            if (v138 <= v150) {
              size_t v138 = v150;
            }
            if (v138 >= v125) {
              goto LABEL_266;
            }
            if (!v138)
            {
              uint8x8_t v156 = (void *)*v43;
              *uint64_t v43 = 0;
              if (v156) {
                operator delete(v156);
              }
              *(void *)(v25 + 6496) = 0;
              goto LABEL_266;
            }
          }
          if (v138 >> 61) {
            goto LABEL_402;
          }
          long long v139 = operator new(8 * v138);
          uint64_t v140 = (void *)*v43;
          *uint64_t v43 = v139;
          if (v140) {
            operator delete(v140);
          }
          uint64_t v141 = 0;
          *(void *)(v25 + 6496) = v138;
          do
            *(void *)(*v43 + 8 * v141++) = 0;
          while (v138 != v141);
          unint64_t v142 = *(void **)(v25 + 6504);
          if (!v142) {
            goto LABEL_266;
          }
          uint64_t v143 = v25 + 6504;
          size_t v144 = v142[1];
          size_t v145 = v138 - 1;
          if ((v138 & (v138 - 1)) == 0)
          {
            size_t v146 = v144 & v145;
            *(void *)(*v43 + 8 * v146) = v143;
            while (1)
            {
              uint64_t v147 = (void *)*v142;
              if (!*v142) {
                break;
              }
              size_t v148 = v147[1] & v145;
              if (v148 == v146)
              {
                unint64_t v142 = (void *)*v142;
              }
              else if (*(void *)(*v43 + 8 * v148))
              {
                *unint64_t v142 = *v147;
                uint64_t v149 = 8 * v148;
                void *v147 = **(void **)(*v43 + v149);
                **(void **)(*v43 + v149) = v147;
              }
              else
              {
                *(void *)(*v43 + 8 * v148) = v142;
                unint64_t v142 = v147;
                size_t v146 = v148;
              }
            }
LABEL_266:
            unint64_t v125 = *(void *)(v25 + 6496);
            if ((v125 & (v125 - 1)) != 0)
            {
              if (v124 >= v125) {
                unint64_t prime = v124 % v125;
              }
              else {
                unint64_t prime = v124;
              }
            }
            else
            {
              unint64_t prime = (v125 - 1) & v124;
            }
            goto LABEL_271;
          }
          if (v144 >= v138) {
            v144 %= v138;
          }
          *(void *)(*v43 + 8 * v144) = v143;
          unint64_t v153 = (void *)*v142;
          if (!*v142) {
            goto LABEL_266;
          }
          while (1)
          {
            size_t v155 = v153[1];
            if (v155 >= v138) {
              v155 %= v138;
            }
            if (v155 != v144)
            {
              if (!*(void *)(*v43 + 8 * v155))
              {
                *(void *)(*v43 + 8 * v155) = v142;
                goto LABEL_252;
              }
              *unint64_t v142 = *v153;
              uint64_t v154 = 8 * v155;
              void *v153 = **(void **)(*v43 + v154);
              **(void **)(*v43 + v154) = v153;
              unint64_t v153 = v142;
            }
            size_t v155 = v144;
LABEL_252:
            unint64_t v142 = v153;
            unint64_t v153 = (void *)*v153;
            size_t v144 = v155;
            if (!v153) {
              goto LABEL_266;
            }
          }
        }
        unint64_t v114 = *(void *)(*(void *)v103 + 8);
        if ((v97 & (v97 - 1)) != 0)
        {
          if (v114 >= v97) {
            v114 %= v97;
          }
        }
        else
        {
          v114 &= v97 - 1;
        }
        uint64_t v113 = (void *)(*v96 + 8 * v114);
      }
      void *v113 = v103;
      goto LABEL_174;
    }
LABEL_403:
    abort();
  }
  uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v11 = (void *)result;
LABEL_401:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1954C1C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v95, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v93, v9, v4, v6, *(void *)(v9 + 32));
  if (v94 != v98)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v92 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (unint64_t *)v22;
      }
      uint64_t v24 = **(void **)(a1 + 8);
      uint64_t v25 = *(void **)v24;
      uint64_t v26 = *(void **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0x41D4E9297E100630)
        {
          v25 += 5;
          if (v25 == v26) {
            goto LABEL_29;
          }
        }
      }
      if (v25 == v26)
      {
LABEL_29:
        unint64_t v28 = 0;
      }
      else
      {
        unint64_t v28 = (void *)v25[3];
        uint64_t v27 = (std::__shared_weak_count *)v25[4];
        if (v27)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      uint64_t v29 = ***(uint64_t ****)(a1 + 8);
      if (v29 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v29 != 0xD369A4D92C8FFE6CLL)
      {
        uint64_t v30 = v29 + 5;
        do
        {
          uint64_t v31 = *v30;
          v30 += 5;
        }
        while (v31 != 0xD369A4D92C8FFE6CLL);
        uint64_t v29 = v30 - 5;
      }
      uint64_t v32 = v29[3];
      uint64_t v33 = (std::__shared_weak_count *)v29[4];
      if (v33)
      {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
      if (!v34) {
        goto LABEL_106;
      }
      uint64_t v35 = *(void *)(v34 + 320);
      uint64_t v36 = (uint64_t)(v28 + 37);
      unint64_t v37 = *v23;
      unint64_t v38 = *v23;
      uint64_t v39 = v28[50];
      unint64_t v40 = (v28[51] - v39) >> 3;
      if (v38 < v40
        && (uint64_t v41 = *(void *)(v39 + 8 * v38)) != 0
        && HIDWORD(v37) == HIDWORD(v41)
        && ((uint64_t v42 = v28[53], v42 + 16 * v41 != v28[54]) ? (v43 = v42 == 0) : (v43 = 1), !v43))
      {
        uint64_t v52 = *(void *)(v39 + 8 * v38);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v28 + 37), v37, v23);
        ++v53[3];
        uint64_t v54 = v42 + 16 * v52;
        uint64_t v11 = v92;
        uint64_t v44 = *(void **)(v54 + 8);
        unint64_t v37 = *v23;
        uint64_t v39 = v28[50];
        unint64_t v38 = *v23;
        if (v38 >= (v28[51] - v39) >> 3) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v44 = 0;
        if (v38 >= v40) {
          goto LABEL_58;
        }
      }
      uint64_t v45 = *(void *)(v39 + 8 * v38);
      if (!v45
        || HIDWORD(v37) != HIDWORD(v45)
        || ((uint64_t v46 = v28[53], v47 = (void **)v28[54], v48 = (void **)(v46 + 16 * v45), v48 != v47)
          ? (BOOL v49 = v46 == 0)
          : (BOOL v49 = 1),
            v49))
      {
LABEL_58:
        unint64_t v51 = 0;
        if (!v35) {
          goto LABEL_106;
        }
        goto LABEL_59;
      }
      uint64_t v50 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v36, v37, v23);
      ++v50[3];
      unint64_t v51 = *v48;
      if (!v35) {
        goto LABEL_106;
      }
LABEL_59:
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v55 = v44[1];
      if (v55)
      {
        unint64_t v56 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index;
        uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
        v57.i16[0] = vaddlv_u8(v57);
        if (v57.u32[0] > 1uLL)
        {
          uint64_t v58 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index >= v55) {
            uint64_t v58 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index % v55;
          }
        }
        else
        {
          uint64_t v58 = (v55 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index;
        }
        uint64_t v59 = *(void **)(*v44 + 8 * v58);
        if (v59)
        {
          unint64_t v60 = (void *)*v59;
          if (v60)
          {
            if (v57.u32[0] < 2uLL)
            {
              unint64_t v61 = v55 - 1;
              while (1)
              {
                uint64_t v63 = v60[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index == v63)
                {
                  if (v60[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index) {
                    goto LABEL_81;
                  }
                }
                else if ((v63 & v61) != v58)
                {
                  goto LABEL_106;
                }
                unint64_t v60 = (void *)*v60;
                if (!v60) {
                  goto LABEL_106;
                }
              }
            }
            do
            {
              unint64_t v62 = v60[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index == v62)
              {
                if (v60[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index)
                {
LABEL_81:
                  {
                    if (v91)
                    {
                      md::typeToIntMap(v91);
                      uint64_t v11 = v92;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_132;
                  }
                  uint8x8_t v64 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v64.i16[0] = vaddlv_u8(v64);
                  if (v64.u32[0] > 1uLL)
                  {
                    unint64_t v65 = v56;
                    if (v56 >= qword_1E957F030) {
                      unint64_t v65 = v56 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v65 = (qword_1E957F030 - 1) & v56;
                  }
                  uint64_t v66 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v65);
                  if (!v66 || (int64_t v67 = *v66) == 0) {
LABEL_132:
                  }
                    abort();
                  if (v64.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v69 = v67[1];
                      if ((uint64_t *)v56 == v69)
                      {
                        if (v67[2] == (uint64_t *)v56) {
                          goto LABEL_102;
                        }
                      }
                      else if (((unint64_t)v69 & (qword_1E957F030 - 1)) != v65)
                      {
                        goto LABEL_132;
                      }
                      int64_t v67 = (uint64_t **)*v67;
                      if (!v67) {
                        goto LABEL_132;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v68 = (unint64_t)v67[1];
                    if (v56 == v68)
                    {
                      if (v67[2] == (uint64_t *)v56)
                      {
LABEL_102:
                        uint64_t v70 = *((int *)v67 + 6);
                        uint64_t v71 = *((int *)v67 + 7);
                        if (v70 != -1) {
                          ggl::PipelineSetup::setConstantData(v51, v70, v35, 1);
                        }
                        if (v71 != -1) {
                          ggl::PipelineSetup::setConstantData(v51, v71, v35, 2);
                        }
                        goto LABEL_106;
                      }
                    }
                    else
                    {
                      if (v68 >= qword_1E957F030) {
                        v68 %= (unint64_t)qword_1E957F030;
                      }
                      if (v68 != v65) {
                        goto LABEL_132;
                      }
                    }
                    int64_t v67 = (uint64_t **)*v67;
                    if (!v67) {
                      goto LABEL_132;
                    }
                  }
                }
              }
              else
              {
                if (v62 >= v55) {
                  v62 %= v55;
                }
                if (v62 != v58) {
                  break;
                }
              }
              unint64_t v60 = (void *)*v60;
            }
            while (v60);
          }
        }
      }
LABEL_106:
      unint64_t v72 = v98;
      uint64_t v10 = *(unint64_t **)(v95 + 32);
      if (++v98 != v10)
      {
        uint64_t v73 = v96[4];
        unint64_t v74 = (v96[5] - v73) >> 3;
        uint64_t v75 = v72 + 2;
        while (1)
        {
          unint64_t v76 = *((unsigned int *)v75 - 1);
          unint64_t v77 = v76 >> 7;
          if (v76 >> 7 < v74)
          {
            uint64_t v78 = *(void *)(v73 + 8 * v77);
            if (v78)
            {
              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * (v76 & 0x7F));
              uint64_t v81 = v96[7];
              uint64_t v80 = v96[8];
              if (v79 < (v80 - v81) >> 3)
              {
                uint64_t v82 = v81 + 8 * v79;
                if (v82 != v80 && *(_DWORD *)(v82 + 4) == v76)
                {
                  uint64_t v84 = v97[4];
                  if (v77 < (v97[5] - v84) >> 3)
                  {
                    uint64_t v85 = *(void *)(v84 + 8 * v77);
                    if (v85)
                    {
                      unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * (v76 & 0x7F));
                      uint64_t v88 = v97[7];
                      uint64_t v87 = v97[8];
                      if (v86 < (v87 - v88) >> 3)
                      {
                        uint64_t v89 = v88 + 8 * v86;
                        if (v89 != v87 && *(_DWORD *)(v89 + 4) == v76) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint8x8_t v98 = v75;
          BOOL v20 = v75++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v75 - 1;
      }
LABEL_9:
      if (v94 == v10) {
        goto LABEL_131;
      }
    }
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_131:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A19553A0(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  unint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 16 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      unint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        unint64_t v38 = 0;
      }
      else
      {
        unint64_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          long long v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        long long v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        long long v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[760];
      if (v55 < (unint64_t)((v38[761] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[763];
          uint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[764] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>> const&>,std::tuple<>>((uint64_t)(v38 + 747), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index;
                }
                uint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  uint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        uint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint64_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (unint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              float v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              unint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            unint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      uint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1955B68(_Unwind_Exception *a1)
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v94, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v92, v9, v4, v6, *(void *)(v9 + 32));
  if (v93 != v97)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v91 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = (unint64_t *)v22;
      }
      uint64_t v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v25 = v24 + 5;
        do
        {
          uint64_t v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        uint64_t v24 = v25 - 5;
      }
      uint64_t v27 = v24[3];
      uint64_t v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      uint64_t v29 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27) + 1184);
      uint64_t v30 = **(void **)(a1 + 8);
      BOOL v31 = *(void **)v30;
      uint64_t v32 = *(void **)(v30 + 8);
      if (v31 != v32)
      {
        while (*v31 != 0x41D4E9297E100630)
        {
          v31 += 5;
          if (v31 == v32) {
            goto LABEL_37;
          }
        }
      }
      if (v31 == v32)
      {
LABEL_37:
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = (void *)v31[3];
        uint64_t v33 = (std::__shared_weak_count *)v31[4];
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      uint64_t v35 = (uint64_t)(v34 + 37);
      unint64_t v36 = *v23;
      unint64_t v37 = *v23;
      uint64_t v38 = v34[50];
      unint64_t v39 = (v34[51] - v38) >> 3;
      if (v37 < v39
        && (uint64_t v40 = *(void *)(v38 + 8 * v37)) != 0
        && HIDWORD(v36) == HIDWORD(v40)
        && ((uint64_t v41 = v34[53], v41 + 16 * v40 != v34[54]) ? (v42 = v41 == 0) : (v42 = 1), !v42))
      {
        uint64_t v51 = *(void *)(v38 + 8 * v37);
        uint64_t v52 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v34 + 37), v36, v23);
        ++v52[3];
        uint64_t v53 = v41 + 16 * v51;
        uint64_t v11 = v91;
        unint64_t v43 = *(void **)(v53 + 8);
        unint64_t v36 = *v23;
        uint64_t v38 = v34[50];
        unint64_t v37 = *v23;
        if (v37 >= (v34[51] - v38) >> 3) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v43 = 0;
        if (v37 >= v39) {
          goto LABEL_57;
        }
      }
      uint64_t v44 = *(void *)(v38 + 8 * v37);
      if (v44 && HIDWORD(v36) == HIDWORD(v44))
      {
        uint64_t v45 = v34[53];
        BOOL v46 = (void **)v34[54];
        uint64_t v47 = (void **)(v45 + 16 * v44);
        if (v47 != v46 && v45 != 0)
        {
          uint64_t v49 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v35, v36, v23);
          ++v49[3];
          uint64_t v50 = *v47;
          if (!v29) {
            goto LABEL_105;
          }
          goto LABEL_58;
        }
      }
LABEL_57:
      uint64_t v50 = 0;
      if (!v29) {
        goto LABEL_105;
      }
LABEL_58:
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v54 = v43[1];
      if (v54)
      {
        unint64_t v55 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index;
        uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index >= v54) {
            uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index % v54;
          }
        }
        else
        {
          uint64_t v57 = (v54 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index;
        }
        uint64_t v58 = *(void **)(*v43 + 8 * v57);
        if (v58)
        {
          uint64_t v59 = (void *)*v58;
          if (v59)
          {
            if (v56.u32[0] < 2uLL)
            {
              unint64_t v60 = v54 - 1;
              while (1)
              {
                uint64_t v62 = v59[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index == v62)
                {
                  if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index) {
                    goto LABEL_80;
                  }
                }
                else if ((v62 & v60) != v57)
                {
                  goto LABEL_105;
                }
                uint64_t v59 = (void *)*v59;
                if (!v59) {
                  goto LABEL_105;
                }
              }
            }
            do
            {
              unint64_t v61 = v59[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index == v61)
              {
                if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index)
                {
LABEL_80:
                  {
                    if (v90)
                    {
                      md::typeToIntMap(v90);
                      uint64_t v11 = v91;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_131;
                  }
                  uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v63.i16[0] = vaddlv_u8(v63);
                  if (v63.u32[0] > 1uLL)
                  {
                    unint64_t v64 = v55;
                    if (v55 >= qword_1E957F030) {
                      unint64_t v64 = v55 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v64 = (qword_1E957F030 - 1) & v55;
                  }
                  unint64_t v65 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v64);
                  if (!v65 || (uint64_t v66 = *v65) == 0) {
LABEL_131:
                  }
                    abort();
                  if (v63.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v68 = v66[1];
                      if ((uint64_t *)v55 == v68)
                      {
                        if (v66[2] == (uint64_t *)v55) {
                          goto LABEL_101;
                        }
                      }
                      else if (((unint64_t)v68 & (qword_1E957F030 - 1)) != v64)
                      {
                        goto LABEL_131;
                      }
                      uint64_t v66 = (uint64_t **)*v66;
                      if (!v66) {
                        goto LABEL_131;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v67 = (unint64_t)v66[1];
                    if (v55 == v67)
                    {
                      if (v66[2] == (uint64_t *)v55)
                      {
LABEL_101:
                        uint64_t v69 = *((int *)v66 + 6);
                        uint64_t v70 = *((int *)v66 + 7);
                        if (v69 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v69, v29, 1);
                        }
                        if (v70 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v70, v29, 2);
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      if (v67 >= qword_1E957F030) {
                        v67 %= (unint64_t)qword_1E957F030;
                      }
                      if (v67 != v64) {
                        goto LABEL_131;
                      }
                    }
                    uint64_t v66 = (uint64_t **)*v66;
                    if (!v66) {
                      goto LABEL_131;
                    }
                  }
                }
              }
              else
              {
                if (v61 >= v54) {
                  v61 %= v54;
                }
                if (v61 != v57) {
                  break;
                }
              }
              uint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
        }
      }
LABEL_105:
      uint64_t v71 = v97;
      uint64_t v10 = *(unint64_t **)(v94 + 32);
      if (++v97 != v10)
      {
        uint64_t v72 = v95[4];
        unint64_t v73 = (v95[5] - v72) >> 3;
        uint64_t v74 = v71 + 2;
        while (1)
        {
          unint64_t v75 = *((unsigned int *)v74 - 1);
          unint64_t v76 = v75 >> 7;
          if (v75 >> 7 < v73)
          {
            uint64_t v77 = *(void *)(v72 + 8 * v76);
            if (v77)
            {
              unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (v75 & 0x7F));
              uint64_t v80 = v95[7];
              uint64_t v79 = v95[8];
              if (v78 < (v79 - v80) >> 3)
              {
                uint64_t v81 = v80 + 8 * v78;
                if (v81 != v79 && *(_DWORD *)(v81 + 4) == v75)
                {
                  uint64_t v83 = v96[4];
                  if (v76 < (v96[5] - v83) >> 3)
                  {
                    uint64_t v84 = *(void *)(v83 + 8 * v76);
                    if (v84)
                    {
                      unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * (v75 & 0x7F));
                      uint64_t v87 = v96[7];
                      uint64_t v86 = v96[8];
                      if (v85 < (v86 - v87) >> 3)
                      {
                        uint64_t v88 = v87 + 8 * v85;
                        if (v88 != v86 && *(_DWORD *)(v88 + 4) == v75) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v97 = v74;
          BOOL v20 = v74++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v74 - 1;
      }
LABEL_9:
      if (v93 == v10) {
        goto LABEL_130;
      }
    }
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_130:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A19562A8(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::DataForCommandBuffer>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::VisibilityTestResult>(v3);
  uint64_t v7 = (unint64_t *)v4[7];
  uint64_t v6 = (uint64_t *)v4[8];
  uint64_t v8 = (char *)v6 - (char *)v7;
  if (v6 == (uint64_t *)v7
    || (v9 = *((unsigned int *)v7 + 1), v10 = v4[4], unint64_t v11 = (v4[5] - v10) >> 3, v9 >> 7 < v11)
    && (uint64_t v12 = *(void *)(v10 + 8 * (v9 >> 7))) != 0
    && (unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * (v9 & 0x7F)), v13 < v8 >> 3)
    && ((v14 = (uint64_t *)&v7[v13], v14 != v6) ? (BOOL v15 = *((_DWORD *)v14 + 1) == v9) : (BOOL v15 = 0), v15))
  {
LABEL_19:
    if (v6 != (uint64_t *)v7)
    {
      uint64_t v22 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      uint64_t v66 = v22;
      do
      {
        *uint64_t v22 = *v7;
        unint64_t v24 = *v7;
        unint64_t v25 = HIDWORD(*v7);
        unint64_t v26 = *v7 >> 39;
        uint64_t v27 = v4[4];
        if (v26 < (v4[5] - v27) >> 3
          && (uint64_t v28 = *(void *)(v27 + 8 * v26)) != 0
          && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v24) & 0x7F)),
              uint64_t v31 = v4[7],
              uint64_t v30 = v4[8],
              v29 < (v30 - v31) >> 3)
          && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v25) : (BOOL v33 = 0), v33))
        {
          uint64_t v34 = v4[11];
          uint64_t v35 = v4[10] + 24 * v29;
        }
        else
        {
          uint64_t v34 = v4[11];
          uint64_t v35 = v34;
        }
        if (v35 == v34) {
          unint64_t v36 = 0;
        }
        else {
          unint64_t v36 = (unsigned __int8 *)v35;
        }
        uint64_t v37 = v5[4];
        if (v26 < (v5[5] - v37) >> 3
          && (uint64_t v38 = *(void *)(v37 + 8 * v26)) != 0
          && (unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v24) & 0x7F)),
              uint64_t v41 = v5[7],
              uint64_t v40 = v5[8],
              v39 < (v40 - v41) >> 3)
          && ((uint64_t v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == v25) : (v43 = 0), v43))
        {
          uint64_t v44 = (unsigned char *)v5[11];
          uint64_t v45 = (unsigned char *)(v5[10] + v39);
        }
        else
        {
          uint64_t v44 = (unsigned char *)v5[11];
          uint64_t v45 = v44;
        }
        if (v45 == v44) {
          BOOL v46 = 0;
        }
        else {
          BOOL v46 = v45;
        }
        uint64_t v47 = **(void **)(v2 + 8);
        uint64_t v48 = *(void **)v47;
        uint64_t v49 = *(void **)(v47 + 8);
        if (v48 != v49)
        {
          while (*v48 != 0xC94DD89A7B09BE9CLL)
          {
            v48 += 5;
            if (v48 == v49)
            {
              uint64_t v50 = 0;
              goto LABEL_56;
            }
          }
        }
        if (v48 == v49)
        {
          uint64_t v50 = 0;
        }
        else
        {
          uint64_t v51 = v2;
          uint64_t v50 = v48[3];
          uint64_t v52 = (std::__shared_weak_count *)v48[4];
          if (v52)
          {
            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          uint64_t v2 = v51;
        }
        uint64_t v22 = v66;
LABEL_56:
        uint64_t v53 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v50 + 96))(v50, *((void *)v36 + 1), *v36);
        uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v50 + 24))(v50, v53, *v36, *((void *)v36 + 2));
        if (v46) {
          BOOL v55 = *v46 == 0;
        }
        else {
          BOOL v55 = 0;
        }
        uint8x8_t v56 = *(void **)(v2 + 8);
        unint64_t v57 = *v22;
        if (!v54 || v55)
        {
          uint64_t v68 = (void (**)(void **))&unk_1EF5267F8;
          *(void *)&long long v69 = v57;
          unint64_t v73 = &v71;
          uint64_t v70 = (void **)&v68;
          uint64_t v71 = &unk_1EF5267F8;
          *(void *)&long long v72 = v57;
          int v74 = 1;
        }
        else
        {
          uint64_t v68 = (void (**)(void **))&unk_1EF522508;
          *(void *)&long long v69 = v54;
          *((void *)&v69 + 1) = v57;
          uint64_t v70 = (void **)&v68;
          unint64_t v73 = &v71;
          uint64_t v71 = &unk_1EF522508;
          long long v72 = v69;
          int v74 = 0;
        }
        ecs2::Runtime::queueCommand(v56, (uint64_t)&v71);
        if (v74 != -1) {
          ((void (*)(char *, void **))off_1EF591178[v74])(&v67, &v71);
        }
        int v74 = -1;
        if (v70 == (void **)&v68)
        {
          v68[4]((void **)&v68);
        }
        else if (v70)
        {
          (*((void (**)(void))*v70 + 5))();
        }
        uint64_t v58 = v4[4];
        uint64_t v59 = v4[7];
        BOOL v23 = (uint64_t *)v4[8];
        unint64_t v60 = (uint64_t *)(v7 + 1);
        while (v60 != v23)
        {
          unint64_t v61 = *((unsigned int *)v60 + 1);
          uint64_t v62 = v4[8];
          if (v61 >> 7 < (v4[5] - v58) >> 3)
          {
            uint64_t v63 = *(void *)(v58 + 8 * (v61 >> 7));
            uint64_t v62 = v4[8];
            if (v63)
            {
              unint64_t v64 = *(unsigned __int16 *)(v63 + 2 * (v61 & 0x7F));
              uint64_t v62 = v4[8];
              if (((uint64_t)v23 - v59) >> 3 > v64)
              {
                uint64_t v62 = v59 + 8 * v64;
                if (*(_DWORD *)(v62 + 4) != v61) {
                  uint64_t v62 = v4[8];
                }
              }
            }
          }
          ++v60;
          if ((uint64_t *)v62 != v23)
          {
            BOOL v23 = v60 - 1;
            break;
          }
        }
        uint64_t v7 = (unint64_t *)v23;
      }
      while (v6 != v23);
    }
  }
  else
  {
    unint64_t v16 = v8 >> 3;
    uint64_t v17 = (uint64_t *)(v7 + 1);
    while (v17 != v6)
    {
      unint64_t v18 = *((unsigned int *)v17 + 1);
      uint64_t v19 = (uint64_t *)v4[8];
      if (v18 >> 7 < v11)
      {
        uint64_t v20 = *(void *)(v10 + 8 * (v18 >> 7));
        uint64_t v19 = (uint64_t *)v4[8];
        if (v20)
        {
          unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (v18 & 0x7F));
          uint64_t v19 = (uint64_t *)v4[8];
          if (v16 > v21)
          {
            uint64_t v19 = (uint64_t *)&v7[v21];
            if (*((_DWORD *)v19 + 1) != v18) {
              uint64_t v19 = (uint64_t *)v4[8];
            }
          }
        }
      }
      ++v17;
      if (v19 != v6)
      {
        uint64_t v7 = (unint64_t *)(v17 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v65, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v63, v9, v4, v6, *(void *)(v9 + 32));
  if (v64 == v68)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v11 = (uint64_t *)result;
  }
  else
  {
    unint64_t v11 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v12 = &v71;
    unint64_t v13 = &v75;
    do
    {
      *unint64_t v11 = *v10;
      unint64_t v14 = *v10;
      uint64_t v15 = v6[4];
      if (v14 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * (v14 >> 39))) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((unint64_t v20 = HIDWORD(v14), v21 = v19 + 8 * v17, v21 != v18)
          ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v20)
          : (BOOL v22 = 0),
            v22))
      {
        BOOL v23 = (unint64_t *)(v6[10] + 8 * v17);
      }
      else
      {
        BOOL v23 = (unint64_t *)v6[11];
      }
      uint64_t v24 = **(void **)(a1 + 8);
      unint64_t v25 = *(void **)v24;
      unint64_t v26 = *(void **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0x41D4E9297E100630)
        {
          v25 += 5;
          if (v25 == v26) {
            goto LABEL_27;
          }
        }
      }
      if (v25 == v26)
      {
LABEL_27:
        uint64_t v29 = 0;
      }
      else
      {
        uint64_t v27 = v13;
        uint64_t v28 = v12;
        uint64_t v29 = v25[3];
        uint64_t v30 = (std::__shared_weak_count *)v25[4];
        if (v30)
        {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        uint64_t v12 = v28;
        unint64_t v13 = v27;
      }
      uint64_t result = md::VKMRenderResourcesStore::getColorRampData(v29, *v23);
      uint64_t v32 = result;
      if (result && *(unsigned char *)(result + 32))
      {
        uint64_t v33 = *(void *)result;
        uint64_t v34 = *(void **)(a1 + 8);
        uint64_t v35 = *v11;
        if (*(void *)v32)
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF5249E0;
          uint64_t v71 = v33;
          uint64_t v72 = v35;
          unint64_t v73 = (void **)&v70;
          unint64_t v76 = &v74;
          int v74 = &unk_1EF5249E0;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
          int v77 = 0;
        }
        else
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF526A38;
          uint64_t v71 = v35;
          unint64_t v76 = &v74;
          unint64_t v73 = (void **)&v70;
          int v74 = &unk_1EF526A38;
          uint64_t v75 = v35;
          int v77 = 1;
        }
        ecs2::Runtime::queueCommand(v34, (uint64_t)&v74);
        if (v77 != -1) {
          ((void (*)(char *, void **))off_1EF590C90[v77])(&v69, &v74);
        }
        int v77 = -1;
        if (v73 == (void **)&v70)
        {
          v70[4]((void **)&v70);
          if (!*(unsigned char *)(v32 + 32)) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v73) {
            (*((void (**)(void))*v73 + 5))();
          }
          if (!*(unsigned char *)(v32 + 32))
          {
LABEL_95:
            std::__throw_bad_optional_access[abi:nn180100]();
            __break(1u);
          }
        }
        uint64_t v36 = *(void *)(v32 + 8);
        uint64_t v37 = *(void **)(a1 + 8);
        uint64_t v38 = *v11;
        if (v36)
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF524A28;
          uint64_t v71 = v36;
          uint64_t v72 = v38;
          unint64_t v73 = (void **)&v70;
          unint64_t v76 = &v74;
          int v74 = &unk_1EF524A28;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
          int v77 = 0;
        }
        else
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF526A80;
          uint64_t v71 = v38;
          unint64_t v76 = &v74;
          unint64_t v73 = (void **)&v70;
          int v74 = &unk_1EF526A80;
          uint64_t v75 = v38;
          int v77 = 1;
        }
        ecs2::Runtime::queueCommand(v37, (uint64_t)&v74);
        if (v77 != -1) {
          ((void (*)(char *, void **))off_1EF590C90[v77])(&v69, &v74);
        }
        int v77 = -1;
        if (v73 == (void **)&v70)
        {
          v70[4]((void **)&v70);
          if (!*(unsigned char *)(v32 + 32)) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v73) {
            (*((void (**)(void))*v73 + 5))();
          }
          if (!*(unsigned char *)(v32 + 32)) {
            goto LABEL_95;
          }
        }
        uint64_t v39 = *(void *)(v32 + 16);
        uint64_t v40 = *(void **)(a1 + 8);
        uint64_t v41 = *v11;
        if (v39)
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF523510;
          uint64_t v71 = v39;
          uint64_t v72 = v41;
          unint64_t v73 = (void **)&v70;
          unint64_t v76 = &v74;
          int v74 = &unk_1EF523510;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
          int v77 = 0;
        }
        else
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF526918;
          uint64_t v71 = v41;
          unint64_t v76 = &v74;
          unint64_t v73 = (void **)&v70;
          int v74 = &unk_1EF526918;
          uint64_t v75 = v41;
          int v77 = 1;
        }
        ecs2::Runtime::queueCommand(v40, (uint64_t)&v74);
        if (v77 != -1) {
          ((void (*)(char *, void **))off_1EF590C90[v77])(&v69, &v74);
        }
        int v77 = -1;
        if (v73 == (void **)&v70)
        {
          v70[4]((void **)&v70);
          if (!*(unsigned char *)(v32 + 32)) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v73) {
            (*((void (**)(void))*v73 + 5))();
          }
          if (!*(unsigned char *)(v32 + 32)) {
            goto LABEL_95;
          }
        }
        uint64_t v42 = *(void *)(v32 + 24);
        BOOL v43 = *(void **)(a1 + 8);
        uint64_t v44 = *v11;
        if (v42)
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF523558;
          uint64_t v71 = v42;
          uint64_t v72 = v44;
          unint64_t v73 = (void **)&v70;
          unint64_t v76 = &v74;
          int v74 = &unk_1EF523558;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
          int v77 = 0;
        }
        else
        {
          uint64_t v70 = (void (**)(void **))&unk_1EF526960;
          uint64_t v71 = v44;
          unint64_t v76 = &v74;
          unint64_t v73 = (void **)&v70;
          int v74 = &unk_1EF526960;
          uint64_t v75 = v44;
          int v77 = 1;
        }
        ecs2::Runtime::queueCommand(v43, (uint64_t)&v74);
        if (v77 != -1) {
          ((void (*)(char *, void **))off_1EF590C90[v77])(&v69, &v74);
        }
        int v77 = -1;
        uint64_t result = (uint64_t)v73;
        if (v73 == (void **)&v70)
        {
          uint64_t result = ((uint64_t (*)(void **))v70[4])((void **)&v70);
        }
        else if (v73)
        {
          uint64_t result = (*((uint64_t (**)(void))*v73 + 5))();
        }
      }
      uint64_t v45 = v68;
      uint64_t v10 = *(unint64_t **)(v65 + 32);
      if (++v68 != v10)
      {
        uint64_t v46 = v66[4];
        unint64_t v47 = (v66[5] - v46) >> 3;
        uint64_t v48 = v45 + 2;
        while (1)
        {
          unint64_t v49 = *((unsigned int *)v48 - 1);
          unint64_t v50 = v49 >> 7;
          if (v49 >> 7 < v47)
          {
            uint64_t v51 = *(void *)(v46 + 8 * v50);
            if (v51)
            {
              unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (v49 & 0x7F));
              uint64_t v53 = v66[7];
              uint64_t result = v66[8];
              if (v52 < (result - v53) >> 3)
              {
                uint64_t v54 = v53 + 8 * v52;
                if (v54 != result && *(_DWORD *)(v54 + 4) == v49)
                {
                  uint64_t v56 = v67[4];
                  uint64_t result = v67[5] - v56;
                  if (v50 < result >> 3)
                  {
                    uint64_t v57 = *(void *)(v56 + 8 * v50);
                    if (v57)
                    {
                      unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * (v49 & 0x7F));
                      uint64_t v60 = v67[7];
                      uint64_t v59 = v67[8];
                      uint64_t result = v59 - v60;
                      if (v58 < (v59 - v60) >> 3)
                      {
                        uint64_t v61 = v60 + 8 * v58;
                        if (v61 != v59 && *(_DWORD *)(v61 + 4) == v49) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v68 = v48;
          BOOL v22 = v48++ == v10;
          if (v22) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v48 - 1;
      }
LABEL_9:
      ;
    }
    while (v64 != v10);
  }
  *unint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(void *)(a1 + 8) = a2;
  uint64_t v4 = *(int8x8_t **)(a2 + 8);
  unint64_t v5 = 0xCBF29CE484222325;
  do
    unint64_t v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_672[v3++ + 38]);
  while (v3 != 103);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(v4, v5);
  uint64_t v7 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v4);
  uint64_t v8 = v7;
  uint64_t v9 = v7 + 4;
  if (v7[8] - v7[7] >= v6[8] - v6[7]) {
    uint64_t v10 = (uint64_t)(v6 + 4);
  }
  else {
    uint64_t v10 = (uint64_t)(v7 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v105, v10, v6, v7, *(void *)(v10 + 24));
  if (v8[8] - v8[7] >= v6[8] - v6[7]) {
    uint64_t v11 = (uint64_t)(v6 + 4);
  }
  else {
    uint64_t v11 = (uint64_t)v9;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v103, v11, v6, v8, *(void *)(v11 + 32));
  if (v104 != v108)
  {
    unint64_t v13 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      unint64_t *v13 = *v12;
      unint64_t v14 = *v12;
      uint64_t v15 = v8[4];
      if (v14 >> 39 < (v8[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * (v14 >> 39))) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v19 = v8[7],
            uint64_t v18 = v8[8],
            v17 < (v18 - v19) >> 3)
        && ((unint64_t v20 = HIDWORD(v14), v21 = v19 + 8 * v17, v21 != v18)
          ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v20)
          : (BOOL v22 = 0),
            v22))
      {
        uint64_t v23 = v8[11];
        uint64_t v24 = v8[10] + 8 * v17;
      }
      else
      {
        uint64_t v23 = v8[11];
        uint64_t v24 = v23;
      }
      if (v24 == v23) {
        unint64_t v25 = 0;
      }
      else {
        unint64_t v25 = (unint64_t *)v24;
      }
      uint64_t v26 = **(void **)(a1 + 8);
      uint64_t v27 = *(void **)v26;
      uint64_t v28 = *(void **)(v26 + 8);
      if (v27 != v28)
      {
        while (*v27 != 0x41D4E9297E100630)
        {
          v27 += 5;
          if (v27 == v28) {
            goto LABEL_31;
          }
        }
      }
      if (v27 == v28)
      {
LABEL_31:
        uint64_t v29 = 0;
      }
      else
      {
        uint64_t v29 = (void *)v27[3];
        uint64_t v30 = (std::__shared_weak_count *)v27[4];
        if (v30)
        {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      uint64_t v31 = ***(uint64_t ****)(a1 + 8);
      if (v31 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v31 != 0x22D45F5AAD4BF408)
      {
        uint64_t v32 = v31 + 5;
        do
        {
          uint64_t v33 = *v32;
          v32 += 5;
        }
        while (v33 != 0x22D45F5AAD4BF408);
        uint64_t v31 = v32 - 5;
      }
      uint64_t v34 = (uint64_t (***)(void))v31[3];
      uint64_t v35 = (std::__shared_weak_count *)v31[4];
      if (v35)
      {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      uint64_t v36 = *(void **)((**v34)(v34) + 8);
      int8x8_t v37 = (int8x8_t)v36[1];
      if (!*(void *)&v37) {
        goto LABEL_130;
      }
      uint8x8_t v38 = (uint8x8_t)vcnt_s8(v37);
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.u32[0] > 1uLL)
      {
        uint64_t v39 = 0x41E8D6E445F4145;
        if (*(void *)&v37 <= 0x41E8D6E445F4145uLL) {
          uint64_t v39 = 0x41E8D6E445F4145uLL % *(void *)&v37;
        }
      }
      else
      {
        uint64_t v39 = (*(void *)&v37 - 1) & 0x41E8D6E445F4145;
      }
      uint64_t v40 = *(void **)(*v36 + 8 * v39);
      if (!v40) {
        goto LABEL_130;
      }
      uint64_t v41 = (void *)*v40;
      if (!v41) {
        goto LABEL_130;
      }
      if (v38.u32[0] < 2uLL)
      {
        uint64_t v42 = *(void *)&v37 - 1;
        while (1)
        {
          uint64_t v44 = v41[1];
          if (v44 == 0x41E8D6E445F4145)
          {
            if (v41[2] == 0x41E8D6E445F4145) {
              goto LABEL_62;
            }
          }
          else if ((v44 & v42) != v39)
          {
            goto LABEL_130;
          }
          uint64_t v41 = (void *)*v41;
          if (!v41) {
            goto LABEL_130;
          }
        }
      }
      while (1)
      {
        unint64_t v43 = v41[1];
        if (v43 == 0x41E8D6E445F4145) {
          break;
        }
        if (v43 >= *(void *)&v37) {
          v43 %= *(void *)&v37;
        }
        if (v43 != v39) {
          goto LABEL_130;
        }
LABEL_50:
        uint64_t v41 = (void *)*v41;
        if (!v41) {
          goto LABEL_130;
        }
      }
      if (v41[2] != 0x41E8D6E445F4145) {
        goto LABEL_50;
      }
LABEL_62:
      uint64_t v45 = v41[5];
      if (*(void *)(v45 + 8) != 0x41E8D6E445F4145) {
        goto LABEL_130;
      }
      uint64_t v46 = *(void *)(v45 + 32);
      if (!v46) {
        goto LABEL_130;
      }
      uint64_t v102 = *(void *)(v46 + 32);
      uint64_t v47 = (uint64_t)(v29 + 37);
      unint64_t v48 = *v25;
      unint64_t v49 = *v25;
      uint64_t v50 = v29[50];
      unint64_t v51 = (v29[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v29[53], v53 + 16 * v52 != v29[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v101 = *(void *)(v50 + 8 * v49);
        uint64_t v63 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v29 + 37), v48, v25);
        ++v63[3];
        BOOL v55 = *(void **)(v53 + 16 * v101 + 8);
        unint64_t v48 = *v25;
        uint64_t v50 = v29[50];
        unint64_t v49 = *v25;
        if (v49 >= (v29[51] - v50) >> 3) {
          goto LABEL_82;
        }
LABEL_73:
        uint64_t v56 = *(void *)(v50 + 8 * v49);
        if (!v56 || HIDWORD(v48) != HIDWORD(v56)) {
          goto LABEL_82;
        }
        uint64_t v57 = v29[53];
        unint64_t v58 = (void **)v29[54];
        uint64_t v59 = (void **)(v57 + 16 * v56);
        if (v59 == v58 || v57 == 0) {
          goto LABEL_82;
        }
        uint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v25);
        ++v61[3];
        uint64_t v62 = *v59;
        if (!v102) {
          goto LABEL_130;
        }
      }
      else
      {
        BOOL v55 = 0;
        if (v49 < v51) {
          goto LABEL_73;
        }
LABEL_82:
        uint64_t v62 = 0;
        if (!v102) {
          goto LABEL_130;
        }
      }
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v64 = v55[1];
      if (v64)
      {
        unint64_t v65 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index;
        uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          uint64_t v67 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index >= v64) {
            uint64_t v67 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index % v64;
          }
        }
        else
        {
          uint64_t v67 = (v64 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index;
        }
        uint64_t v68 = *(void **)(*v55 + 8 * v67);
        if (v68)
        {
          char v69 = (void *)*v68;
          if (v69)
          {
            if (v66.u32[0] < 2uLL)
            {
              unint64_t v70 = v64 - 1;
              while (1)
              {
                uint64_t v72 = v69[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index == v72)
                {
                  if (v69[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index) {
                    goto LABEL_105;
                  }
                }
                else if ((v72 & v70) != v67)
                {
                  goto LABEL_130;
                }
                char v69 = (void *)*v69;
                if (!v69) {
                  goto LABEL_130;
                }
              }
            }
            do
            {
              unint64_t v71 = v69[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index == v71)
              {
                if (v69[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index)
                {
LABEL_105:
                  {
                    if (v100)
                    {
                      md::typeToIntMap(v100);
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_156;
                  }
                  uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v73.i16[0] = vaddlv_u8(v73);
                  if (v73.u32[0] > 1uLL)
                  {
                    unint64_t v74 = v65;
                    if (v65 >= qword_1E957F030) {
                      unint64_t v74 = v65 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v74 = (qword_1E957F030 - 1) & v65;
                  }
                  uint64_t v75 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v74);
                  if (!v75 || (unint64_t v76 = *v75) == 0) {
LABEL_156:
                  }
                    abort();
                  if (v73.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v78 = v76[1];
                      if ((uint64_t *)v65 == v78)
                      {
                        if (v76[2] == (uint64_t *)v65) {
                          goto LABEL_126;
                        }
                      }
                      else if (((unint64_t)v78 & (qword_1E957F030 - 1)) != v74)
                      {
                        goto LABEL_156;
                      }
                      unint64_t v76 = (uint64_t **)*v76;
                      if (!v76) {
                        goto LABEL_156;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v77 = (unint64_t)v76[1];
                    if (v65 == v77)
                    {
                      if (v76[2] == (uint64_t *)v65)
                      {
LABEL_126:
                        uint64_t v79 = *((int *)v76 + 6);
                        uint64_t v80 = *((int *)v76 + 7);
                        if (v79 != -1) {
                          ggl::PipelineSetup::setConstantData(v62, v79, v102, 1);
                        }
                        if (v80 != -1) {
                          ggl::PipelineSetup::setConstantData(v62, v80, v102, 2);
                        }
                        goto LABEL_130;
                      }
                    }
                    else
                    {
                      if (v77 >= qword_1E957F030) {
                        v77 %= (unint64_t)qword_1E957F030;
                      }
                      if (v77 != v74) {
                        goto LABEL_156;
                      }
                    }
                    unint64_t v76 = (uint64_t **)*v76;
                    if (!v76) {
                      goto LABEL_156;
                    }
                  }
                }
              }
              else
              {
                if (v71 >= v64) {
                  v71 %= v64;
                }
                if (v71 != v67) {
                  break;
                }
              }
              char v69 = (void *)*v69;
            }
            while (v69);
          }
        }
      }
LABEL_130:
      uint64_t v81 = v108;
      uint64_t v12 = *(unint64_t **)(v105 + 32);
      if (++v108 != v12)
      {
        uint64_t v82 = v106[4];
        unint64_t v83 = (v106[5] - v82) >> 3;
        uint64_t v84 = v81 + 2;
        while (1)
        {
          unint64_t v85 = *((unsigned int *)v84 - 1);
          unint64_t v86 = v85 >> 7;
          if (v85 >> 7 < v83)
          {
            uint64_t v87 = *(void *)(v82 + 8 * v86);
            if (v87)
            {
              unint64_t v88 = *(unsigned __int16 *)(v87 + 2 * (v85 & 0x7F));
              uint64_t v90 = v106[7];
              uint64_t v89 = v106[8];
              if (v88 < (v89 - v90) >> 3)
              {
                uint64_t v91 = v90 + 8 * v88;
                if (v91 != v89 && *(_DWORD *)(v91 + 4) == v85)
                {
                  uint64_t v93 = v107[4];
                  if (v86 < (v107[5] - v93) >> 3)
                  {
                    uint64_t v94 = *(void *)(v93 + 8 * v86);
                    if (v94)
                    {
                      unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * (v85 & 0x7F));
                      uint64_t v97 = v107[7];
                      uint64_t v96 = v107[8];
                      if (v95 < (v96 - v97) >> 3)
                      {
                        uint64_t v98 = v97 + 8 * v95;
                        if (v98 != v96 && *(_DWORD *)(v98 + 4) == v85) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v108 = v84;
          BOOL v22 = v84++ == v12;
          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v12 = v84 - 1;
      }
LABEL_11:
      if (v104 == v12) {
        goto LABEL_155;
      }
    }
  }
  unint64_t v13 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_155:
  unint64_t *v13 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A195795C(_Unwind_Exception *a1)
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(v3);
  unint64_t v5 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  uint64_t v7 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = (void *)(v4 + 32);
  if (v5[8] - v5[7] < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v9 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v9[4] - v9[3]) {
    uint64_t v9 = (void *)(v6 + 32);
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < v9[4] - v9[3]) {
    uint64_t v9 = (void *)(v7 + 32);
  }
  uint8x8_t v156 = v9;
  uint64_t v157 = (void *)v4;
  uint64_t v158 = v5;
  unint64_t v159 = (void *)v6;
  uint64_t v11 = (void *)v9[3];
  uint64_t v10 = (void *)v9[4];
  unint64_t v160 = (void *)v7;
  uint8x8_t v161 = v11;
  size_t v155 = v10;
  if (v10 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v156))
  {
    uint64_t v12 = v11 + 1;
    do
    {
      uint64_t v11 = v12;
      uint8x8_t v161 = v12;
      if (v12 == v155) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v156);
      uint64_t v12 = v11 + 1;
    }
    while (!isValid);
  }
  uint64_t v154 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v155 != v11)
  {
    uint64_t v152 = v2;
    unint64_t v153 = v5;
    do
    {
      void *v154 = *v11;
      unint64_t v14 = *v11;
      uint64_t v15 = HIDWORD(*v11);
      unint64_t v16 = *v11 >> 39;
      uint64_t v17 = v5[4];
      if (v16 < (v5[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v5[7],
            uint64_t v20 = v5[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v5[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v5[11];
      }
      uint64_t v25 = v8[4];
      if (v16 < (v8[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v8[7],
            uint64_t v28 = v8[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v8[11];
        uint64_t v33 = v8[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v8[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v2 + 8);
      uint64_t v36 = *(void **)v35;
      int8x8_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_43;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_43:
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = (void *)v36[3];
        uint8x8_t v38 = (std::__shared_weak_count *)v36[4];
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      uint64_t v40 = **(void **)(v2 + 8);
      uint64_t v41 = *(void **)v40;
      uint64_t v42 = *(void **)(v40 + 8);
      if (v41 != v42)
      {
        while (*v41 != 0x348A0B0E758C07C2)
        {
          v41 += 5;
          if (v41 == v42) {
            goto LABEL_52;
          }
        }
      }
      if (v41 == v42)
      {
LABEL_52:
        uint64_t v43 = 0;
      }
      else
      {
        uint64_t v43 = v41[3];
        uint64_t v44 = (std::__shared_weak_count *)v41[4];
        if (v44)
        {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      uint64_t v45 = (uint64_t)(v39 + 37);
      unint64_t v46 = *v34;
      unint64_t v47 = *v34;
      uint64_t v48 = v39[50];
      unint64_t v49 = (v39[51] - v48) >> 3;
      if (v47 < v49
        && (uint64_t v50 = *(void *)(v48 + 8 * v47)) != 0
        && HIDWORD(v46) == HIDWORD(v50)
        && ((uint64_t v51 = v39[53], v51 + 16 * v50 != v39[54]) ? (v52 = v51 == 0) : (v52 = 1), !v52))
      {
        uint64_t v61 = *(void *)(v48 + 8 * v47);
        uint64_t v62 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v46, v34);
        ++v62[3];
        uint64_t v63 = v51 + 16 * v61;
        uint64_t v2 = v152;
        uint64_t v53 = *(void **)(v63 + 8);
        unint64_t v46 = *v34;
        uint64_t v48 = v39[50];
        unint64_t v47 = *v34;
        if (v47 >= (v39[51] - v48) >> 3) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v53 = 0;
        if (v47 >= v49) {
          goto LABEL_72;
        }
      }
      uint64_t v54 = *(void *)(v48 + 8 * v47);
      if (!v54
        || HIDWORD(v46) != HIDWORD(v54)
        || ((uint64_t v55 = v39[53], v56 = (uint64_t *)v39[54], v57 = (uint64_t *)(v55 + 16 * v54), v57 != v56)
          ? (BOOL v58 = v55 == 0)
          : (BOOL v58 = 1),
            v58))
      {
LABEL_72:
        uint64_t v60 = 0;
        goto LABEL_73;
      }
      uint64_t v59 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v45, v46, v34);
      ++v59[3];
      uint64_t v60 = *v57;
LABEL_73:
      unint64_t v64 = *v24;
      unint64_t v162 = v64;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v43 + 104));
      uint64_t v65 = *(void *)(v43 + 504);
      if (v64 < (unint64_t)((*(void *)(v43 + 512) - v65) >> 3)
        && ((uint64_t v66 = *(void *)(v65 + 8 * v64)) != 0 ? (v67 = HIDWORD(v64) == HIDWORD(v66)) : (v67 = 0),
            v67))
      {
        char v69 = (uint64_t *)(*(void *)(v43 + 528) + 40 * v66);
        uint64_t v68 = *(uint64_t **)(v43 + 536);
      }
      else
      {
        uint64_t v68 = *(uint64_t **)(v43 + 536);
        char v69 = v68;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v43 + 104));
      unint64_t v70 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v43 + 440), v162, &v162);
      uint64_t v71 = 0;
      ++v70[3];
      if (v69 != v68 && v69) {
        uint64_t v71 = *v69;
      }
      {
        gdc::typeIndex<Flyover::DiffuseTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v72 = v53[1];
      if (!v72) {
        goto LABEL_154;
      }
      unint64_t v73 = gdc::typeIndex<Flyover::DiffuseTexture>(void)::index;
      uint8x8_t v74 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
      v74.i16[0] = vaddlv_u8(v74);
      if (v74.u32[0] > 1uLL)
      {
        uint64_t v75 = gdc::typeIndex<Flyover::DiffuseTexture>(void)::index;
        if (gdc::typeIndex<Flyover::DiffuseTexture>(void)::index >= v72) {
          uint64_t v75 = gdc::typeIndex<Flyover::DiffuseTexture>(void)::index % v72;
        }
      }
      else
      {
        uint64_t v75 = (v72 - 1) & gdc::typeIndex<Flyover::DiffuseTexture>(void)::index;
      }
      unint64_t v76 = *(void **)(*v53 + 8 * v75);
      if (!v76) {
        goto LABEL_154;
      }
      unint64_t v77 = (void *)*v76;
      if (!v77) {
        goto LABEL_154;
      }
      if (v74.u32[0] < 2uLL)
      {
        unint64_t v78 = v72 - 1;
        while (1)
        {
          uint64_t v80 = v77[1];
          if (gdc::typeIndex<Flyover::DiffuseTexture>(void)::index == v80)
          {
            if (v77[2] == gdc::typeIndex<Flyover::DiffuseTexture>(void)::index) {
              goto LABEL_105;
            }
          }
          else if ((v80 & v78) != v75)
          {
            goto LABEL_154;
          }
          unint64_t v77 = (void *)*v77;
          if (!v77) {
            goto LABEL_154;
          }
        }
      }
      while (1)
      {
        unint64_t v79 = v77[1];
        if (gdc::typeIndex<Flyover::DiffuseTexture>(void)::index == v79) {
          break;
        }
        if (v79 >= v72) {
          v79 %= v72;
        }
        if (v79 != v75) {
          goto LABEL_154;
        }
LABEL_93:
        unint64_t v77 = (void *)*v77;
        if (!v77) {
          goto LABEL_154;
        }
      }
      if (v77[2] != gdc::typeIndex<Flyover::DiffuseTexture>(void)::index) {
        goto LABEL_93;
      }
LABEL_105:
      {
        if (v151)
        {
          md::typeToIntMap(v151);
          uint64_t v2 = v152;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_196;
      }
      uint8x8_t v81 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v81.i16[0] = vaddlv_u8(v81);
      if (v81.u32[0] > 1uLL)
      {
        unint64_t v82 = v73;
        if (v73 >= qword_1E957F030) {
          unint64_t v82 = v73 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v82 = (qword_1E957F030 - 1) & v73;
      }
      unint64_t v83 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v82);
      if (!v83 || (uint64_t v84 = *v83) == 0) {
LABEL_196:
      }
        abort();
      if (v81.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v86 = v84[1];
          if ((uint64_t *)v73 == v86)
          {
            if (v84[2] == (uint64_t *)v73) {
              goto LABEL_126;
            }
          }
          else if (((unint64_t)v86 & (qword_1E957F030 - 1)) != v82)
          {
            goto LABEL_196;
          }
          uint64_t v84 = (uint64_t **)*v84;
          if (!v84) {
            goto LABEL_196;
          }
        }
      }
      while (2)
      {
        unint64_t v85 = (unint64_t)v84[1];
        if (v73 != v85)
        {
          if (v85 >= qword_1E957F030) {
            v85 %= (unint64_t)qword_1E957F030;
          }
          if (v85 != v82) {
            goto LABEL_196;
          }
LABEL_116:
          uint64_t v84 = (uint64_t **)*v84;
          if (!v84) {
            goto LABEL_196;
          }
          continue;
        }
        break;
      }
      if (v84[2] != (uint64_t *)v73) {
        goto LABEL_116;
      }
LABEL_126:
      uint64_t v88 = *((int *)v84 + 6);
      uint64_t v87 = *((int *)v84 + 7);
      if (v88 != -1)
      {
        uint64_t v89 = *(void *)(v60 + 16);
        if (v89)
        {
          uint64_t v90 = *(void *)(*(void *)(v89 + 48) + 72);
          uint64_t v91 = *(void *)(v90 + 8);
          uint64_t v92 = *(void *)(v91 + 72);
          if (v92)
          {
            uint64_t v93 = 0;
            uint64_t v94 = *(void *)(v91 + 64);
            unint64_t v95 = (unsigned __int8 *)(v94 + 1);
            while (1)
            {
              int v96 = *v95;
              v95 += 2;
              if (v96 == v88) {
                break;
              }
              if (v92 == ++v93) {
                goto LABEL_132;
              }
            }
            unint64_t v103 = (unsigned __int8 *)(v94 + 2 * v93);
LABEL_139:
            *(void *)(*(void *)(v60 + 96) + 8 * *v103) = v71;
          }
          else
          {
LABEL_132:
            uint64_t v97 = *(void *)(v90 + 24);
            uint64_t v98 = *(void *)(v97 + 72);
            if (v98)
            {
              uint64_t v99 = 0;
              uint64_t v100 = *(void *)(v97 + 64);
              uint64_t v101 = (unsigned __int8 *)(v100 + 1);
              while (1)
              {
                int v102 = *v101;
                v101 += 2;
                if (v102 == v88) {
                  break;
                }
                if (v98 == ++v99) {
                  goto LABEL_140;
                }
              }
              unint64_t v103 = (unsigned __int8 *)(v100 + 2 * v99);
              goto LABEL_139;
            }
          }
        }
      }
LABEL_140:
      if (v87 != -1)
      {
        uint64_t v104 = *(void *)(v60 + 16);
        if (v104)
        {
          uint64_t v105 = *(void *)(*(void *)(v104 + 48) + 72);
          uint64_t v106 = *(void *)(v105 + 8);
          uint64_t v107 = *(void *)(v106 + 72);
          if (v107)
          {
            uint64_t v108 = 0;
            uint64_t v109 = *(void *)(v106 + 64);
            uint8x8_t v110 = (unsigned __int8 *)(v109 + 1);
            while (1)
            {
              int v111 = *v110;
              v110 += 2;
              if (v111 == v87) {
                break;
              }
              if (v107 == ++v108) {
                goto LABEL_146;
              }
            }
            unint64_t v118 = (unsigned __int8 *)(v109 + 2 * v108);
LABEL_153:
            *(void *)(*(void *)(v60 + 96) + 8 * *v118) = v71;
          }
          else
          {
LABEL_146:
            uint64_t v112 = *(void *)(v105 + 24);
            uint64_t v113 = *(void *)(v112 + 72);
            if (v113)
            {
              uint64_t v114 = 0;
              uint64_t v115 = *(void *)(v112 + 64);
              unint64_t v116 = (unsigned __int8 *)(v115 + 1);
              while (1)
              {
                int v117 = *v116;
                v116 += 2;
                if (v117 == v87) {
                  break;
                }
                if (v113 == ++v114) {
                  goto LABEL_154;
                }
              }
              unint64_t v118 = (unsigned __int8 *)(v115 + 2 * v114);
              goto LABEL_153;
            }
          }
        }
      }
LABEL_154:
      uint64_t v11 = (void *)v156[4];
      uint64_t v119 = v161 + 1;
      uint8x8_t v161 = v119;
      if (v119 == v11)
      {
        unint64_t v5 = v153;
      }
      else
      {
        uint64_t v120 = v157[4];
        unint64_t v5 = v153;
        do
        {
          unint64_t v121 = *((unsigned int *)v119 + 1);
          unint64_t v122 = v121 >> 7;
          if (v121 >> 7 < (v157[5] - v120) >> 3)
          {
            uint64_t v123 = *(void *)(v120 + 8 * v122);
            if (v123)
            {
              uint64_t v124 = v121 & 0x7F;
              unint64_t v125 = *(unsigned __int16 *)(v123 + 2 * v124);
              uint64_t v127 = v157[7];
              uint64_t v126 = v157[8];
              if (v125 < (v126 - v127) >> 3)
              {
                uint64_t v128 = v127 + 8 * v125;
                if (v128 != v126 && *(_DWORD *)(v128 + 4) == v121)
                {
                  uint64_t v130 = v158[4];
                  if (v122 < (v158[5] - v130) >> 3)
                  {
                    uint64_t v131 = *(void *)(v130 + 8 * v122);
                    if (v131)
                    {
                      unint64_t v132 = *(unsigned __int16 *)(v131 + 2 * v124);
                      uint64_t v134 = v158[7];
                      uint64_t v133 = v158[8];
                      if (v132 < (v133 - v134) >> 3)
                      {
                        uint64_t v135 = v134 + 8 * v132;
                        if (v135 != v133 && *(_DWORD *)(v135 + 4) == v121)
                        {
                          uint64_t v137 = v159[4];
                          if (v122 < (v159[5] - v137) >> 3)
                          {
                            uint64_t v138 = *(void *)(v137 + 8 * v122);
                            if (v138)
                            {
                              unint64_t v139 = *(unsigned __int16 *)(v138 + 2 * v124);
                              uint64_t v141 = v159[7];
                              uint64_t v140 = v159[8];
                              if (v139 < (v140 - v141) >> 3)
                              {
                                uint64_t v142 = v141 + 8 * v139;
                                if (v142 != v140 && *(_DWORD *)(v142 + 4) == v121)
                                {
                                  uint64_t v144 = v160[4];
                                  if (v122 < (v160[5] - v144) >> 3)
                                  {
                                    uint64_t v145 = *(void *)(v144 + 8 * v122);
                                    if (v145)
                                    {
                                      unint64_t v146 = *(unsigned __int16 *)(v145 + 2 * v124);
                                      uint64_t v147 = v160[7];
                                      uint64_t v148 = v160[8];
                                      if (v146 < (v148 - v147) >> 3)
                                      {
                                        uint64_t v149 = v147 + 8 * v146;
                                        if (*(_DWORD *)(v149 + 4) == v121 && v149 != v148)
                                        {
                                          uint64_t v11 = v119;
                                          goto LABEL_190;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v119;
        }
        while (v119 != v11);
        uint64_t v119 = v11;
LABEL_190:
        uint8x8_t v161 = v119;
      }
    }
    while (v155 != v11);
  }
  void *v154 = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
}

void sub_1A1958334(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  int v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  uint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      int8x8_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint8x8_t v38 = 0;
      }
      else
      {
        uint8x8_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        unint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        unint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[417];
      if (v55 < (unint64_t)((v38[418] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[420];
          unint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[421] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)(v38 + 409), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index;
                }
                unint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  int v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        int v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          int v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (unint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              unint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            unint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      int v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1958AF8(_Unwind_Exception *a1)
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v94, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v92, v9, v4, v6, *(void *)(v9 + 32));
  if (v93 != v97)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v91 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = (unint64_t *)v22;
      }
      uint64_t v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v25 = v24 + 5;
        do
        {
          uint64_t v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        uint64_t v24 = v25 - 5;
      }
      uint64_t v27 = v24[3];
      uint64_t v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      uint64_t v29 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27) + 1264);
      uint64_t v30 = **(void **)(a1 + 8);
      BOOL v31 = *(void **)v30;
      uint64_t v32 = *(void **)(v30 + 8);
      if (v31 != v32)
      {
        while (*v31 != 0x41D4E9297E100630)
        {
          v31 += 5;
          if (v31 == v32) {
            goto LABEL_37;
          }
        }
      }
      if (v31 == v32)
      {
LABEL_37:
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = (void *)v31[3];
        uint64_t v33 = (std::__shared_weak_count *)v31[4];
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      uint64_t v35 = (uint64_t)(v34 + 37);
      unint64_t v36 = *v23;
      unint64_t v37 = *v23;
      uint64_t v38 = v34[50];
      unint64_t v39 = (v34[51] - v38) >> 3;
      if (v37 < v39
        && (uint64_t v40 = *(void *)(v38 + 8 * v37)) != 0
        && HIDWORD(v36) == HIDWORD(v40)
        && ((uint64_t v41 = v34[53], v41 + 16 * v40 != v34[54]) ? (v42 = v41 == 0) : (v42 = 1), !v42))
      {
        uint64_t v51 = *(void *)(v38 + 8 * v37);
        uint64_t v52 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v34 + 37), v36, v23);
        ++v52[3];
        uint64_t v53 = v41 + 16 * v51;
        uint64_t v11 = v91;
        unint64_t v43 = *(void **)(v53 + 8);
        unint64_t v36 = *v23;
        uint64_t v38 = v34[50];
        unint64_t v37 = *v23;
        if (v37 >= (v34[51] - v38) >> 3) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v43 = 0;
        if (v37 >= v39) {
          goto LABEL_57;
        }
      }
      uint64_t v44 = *(void *)(v38 + 8 * v37);
      if (v44 && HIDWORD(v36) == HIDWORD(v44))
      {
        uint64_t v45 = v34[53];
        BOOL v46 = (void **)v34[54];
        unint64_t v47 = (void **)(v45 + 16 * v44);
        if (v47 != v46 && v45 != 0)
        {
          uint64_t v49 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v35, v36, v23);
          ++v49[3];
          uint64_t v50 = *v47;
          if (!v29) {
            goto LABEL_105;
          }
          goto LABEL_58;
        }
      }
LABEL_57:
      uint64_t v50 = 0;
      if (!v29) {
        goto LABEL_105;
      }
LABEL_58:
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v54 = v43[1];
      if (v54)
      {
        unint64_t v55 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index;
        uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index >= v54) {
            uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index % v54;
          }
        }
        else
        {
          uint64_t v57 = (v54 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index;
        }
        BOOL v58 = *(void **)(*v43 + 8 * v57);
        if (v58)
        {
          uint64_t v59 = (void *)*v58;
          if (v59)
          {
            if (v56.u32[0] < 2uLL)
            {
              unint64_t v60 = v54 - 1;
              while (1)
              {
                uint64_t v62 = v59[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index == v62)
                {
                  if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index) {
                    goto LABEL_80;
                  }
                }
                else if ((v62 & v60) != v57)
                {
                  goto LABEL_105;
                }
                uint64_t v59 = (void *)*v59;
                if (!v59) {
                  goto LABEL_105;
                }
              }
            }
            do
            {
              unint64_t v61 = v59[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index == v61)
              {
                if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index)
                {
LABEL_80:
                  {
                    if (v90)
                    {
                      md::typeToIntMap(v90);
                      uint64_t v11 = v91;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_131;
                  }
                  uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v63.i16[0] = vaddlv_u8(v63);
                  if (v63.u32[0] > 1uLL)
                  {
                    unint64_t v64 = v55;
                    if (v55 >= qword_1E957F030) {
                      unint64_t v64 = v55 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v64 = (qword_1E957F030 - 1) & v55;
                  }
                  unint64_t v65 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v64);
                  if (!v65 || (uint64_t v66 = *v65) == 0) {
LABEL_131:
                  }
                    abort();
                  if (v63.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v68 = v66[1];
                      if ((uint64_t *)v55 == v68)
                      {
                        if (v66[2] == (uint64_t *)v55) {
                          goto LABEL_101;
                        }
                      }
                      else if (((unint64_t)v68 & (qword_1E957F030 - 1)) != v64)
                      {
                        goto LABEL_131;
                      }
                      uint64_t v66 = (uint64_t **)*v66;
                      if (!v66) {
                        goto LABEL_131;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v67 = (unint64_t)v66[1];
                    if (v55 == v67)
                    {
                      if (v66[2] == (uint64_t *)v55)
                      {
LABEL_101:
                        uint64_t v69 = *((int *)v66 + 6);
                        uint64_t v70 = *((int *)v66 + 7);
                        if (v69 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v69, v29, 1);
                        }
                        if (v70 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v70, v29, 2);
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      if (v67 >= qword_1E957F030) {
                        v67 %= (unint64_t)qword_1E957F030;
                      }
                      if (v67 != v64) {
                        goto LABEL_131;
                      }
                    }
                    uint64_t v66 = (uint64_t **)*v66;
                    if (!v66) {
                      goto LABEL_131;
                    }
                  }
                }
              }
              else
              {
                if (v61 >= v54) {
                  v61 %= v54;
                }
                if (v61 != v57) {
                  break;
                }
              }
              uint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
        }
      }
LABEL_105:
      uint64_t v71 = v97;
      uint64_t v10 = *(unint64_t **)(v94 + 32);
      if (++v97 != v10)
      {
        uint64_t v72 = v95[4];
        unint64_t v73 = (v95[5] - v72) >> 3;
        uint64_t v74 = v71 + 2;
        while (1)
        {
          unint64_t v75 = *((unsigned int *)v74 - 1);
          unint64_t v76 = v75 >> 7;
          if (v75 >> 7 < v73)
          {
            uint64_t v77 = *(void *)(v72 + 8 * v76);
            if (v77)
            {
              unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (v75 & 0x7F));
              uint64_t v80 = v95[7];
              uint64_t v79 = v95[8];
              if (v78 < (v79 - v80) >> 3)
              {
                uint64_t v81 = v80 + 8 * v78;
                if (v81 != v79 && *(_DWORD *)(v81 + 4) == v75)
                {
                  uint64_t v83 = v96[4];
                  if (v76 < (v96[5] - v83) >> 3)
                  {
                    uint64_t v84 = *(void *)(v83 + 8 * v76);
                    if (v84)
                    {
                      unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * (v75 & 0x7F));
                      uint64_t v87 = v96[7];
                      uint64_t v86 = v96[8];
                      if (v85 < (v86 - v87) >> 3)
                      {
                        uint64_t v88 = v87 + 8 * v85;
                        if (v88 != v86 && *(_DWORD *)(v88 + 4) == v75) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v97 = v74;
          BOOL v20 = v74++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v74 - 1;
      }
LABEL_9:
      if (v93 == v10) {
        goto LABEL_130;
      }
    }
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_130:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A1959238(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MaterialStyleConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  int v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  uint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      unint64_t v36 = *(void **)v35;
      unint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        unint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        unint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        unint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[967];
      if (v55 < (unint64_t)((v38[968] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[970];
          unint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[971] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>> const&>,std::tuple<>>((uint64_t)(v38 + 954), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index;
                }
                unint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  int v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        int v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          int v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (unint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              unint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            unint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      int v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1959A00(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  HasStyleAttributeRaster = (void *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = HasStyleAttributeRaster + 4;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < HasStyleAttributeRaster[8] - HasStyleAttributeRaster[7]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  uint64_t v158 = v8;
  unint64_t v159 = HasStyleAttributeRaster;
  unint64_t v160 = (void *)v5;
  uint8x8_t v161 = (void *)v6;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  unint64_t v162 = v10;
  uint64_t v157 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v158))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      unint64_t v162 = v11;
      if (v11 == v157) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v158);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v157 != v10)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    size_t v155 = result;
    uint64_t v156 = v2;
    uint64_t v154 = HasStyleAttributeRaster;
    while (1)
    {
      void *result = *v10;
      unint64_t v14 = *v10;
      uint64_t v15 = HIDWORD(*v10);
      unint64_t v16 = *v10 >> 39;
      uint64_t v17 = HasStyleAttributeRaster[4];
      if (v16 < (HasStyleAttributeRaster[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = HasStyleAttributeRaster[7],
            uint64_t v20 = HasStyleAttributeRaster[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = HasStyleAttributeRaster[10] + 8 * v19;
      }
      else
      {
        uint64_t v24 = HasStyleAttributeRaster[11];
      }
      uint64_t v25 = v7[4];
      if (v16 < (v7[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v7[7],
            uint64_t v28 = v7[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v7[11];
        uint64_t v33 = v7[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v7[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = ***(uint64_t ****)(v2 + 8);
      if (v35 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v35 != 0xC94DD89A7B09BE9CLL)
      {
        unint64_t v36 = v35 + 5;
        do
        {
          uint64_t v37 = *v36;
          v36 += 5;
        }
        while (v37 != 0xC94DD89A7B09BE9CLL);
        uint64_t v35 = v36 - 5;
      }
      uint64_t v38 = v35[3];
      unint64_t v39 = (std::__shared_weak_count *)v35[4];
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
      uint64_t v41 = *(void *)(v40 + 2680);
      if (!v41) {
        goto LABEL_52;
      }
      uint64_t v42 = v40 + 2680;
      do
      {
        unsigned int v43 = *(_DWORD *)(v41 + 32);
        BOOL v44 = v43 >= 0x99;
        if (v43 >= 0x99) {
          uint64_t v45 = (uint64_t *)v41;
        }
        else {
          uint64_t v45 = (uint64_t *)(v41 + 8);
        }
        if (v44) {
          uint64_t v42 = v41;
        }
        uint64_t v41 = *v45;
      }
      while (*v45);
      if (v42 != v40 + 2680 && *(_DWORD *)(v42 + 32) <= 0x99u) {
        int8x8_t v46 = *(int8x8_t *)(v42 + 40);
      }
      else {
LABEL_52:
      }
        int8x8_t v46 = 0;
      unint64_t v47 = +[VKDebugSettings sharedSettings];
      md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)v163, v47);

      uint64_t v48 = **(void **)(v2 + 8);
      uint64_t v49 = *(void **)v48;
      uint64_t v50 = *(void **)(v48 + 8);
      if (v49 != v50)
      {
        while (*v49 != 0x41D4E9297E100630)
        {
          v49 += 5;
          if (v49 == v50) {
            goto LABEL_61;
          }
        }
      }
      if (v49 == v50)
      {
LABEL_61:
        uint64_t v51 = 0;
      }
      else
      {
        uint64_t v51 = (void *)v49[3];
        uint64_t v52 = (std::__shared_weak_count *)v49[4];
        if (v52)
        {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      uint64_t v53 = (uint64_t)(v51 + 37);
      unint64_t v54 = *v34;
      unint64_t v55 = *v34;
      uint64_t v56 = v51[50];
      unint64_t v57 = (v51[51] - v56) >> 3;
      if (v55 < v57
        && (uint64_t v58 = *(void *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((uint64_t v59 = v51[53], v59 + 16 * v58 != v51[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        int8x8_t v69 = v46;
        uint64_t v70 = *(void *)(v56 + 8 * v55);
        uint64_t v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v51 + 37), v54, v34);
        ++v71[3];
        uint64_t v72 = v59 + 16 * v70;
        int8x8_t v46 = v69;
        HasStyleAttributeRaster = v154;
        unint64_t v61 = *(void **)(v72 + 8);
        unint64_t v54 = *v34;
        uint64_t v56 = v51[50];
        unint64_t v55 = *v34;
        if (v55 >= (v51[51] - v56) >> 3) {
          goto LABEL_83;
        }
      }
      else
      {
        unint64_t v61 = 0;
        if (v55 >= v57) {
          goto LABEL_83;
        }
      }
      uint64_t v62 = *(void *)(v56 + 8 * v55);
      if (v62 && HIDWORD(v54) == HIDWORD(v62))
      {
        uint64_t v63 = v51[53];
        uint64_t v64 = (uint64_t *)v51[54];
        unint64_t v65 = (uint64_t *)(v63 + 16 * v62);
        if (v65 != v64 && v63 != 0)
        {
          uint64_t v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v34);
          ++v67[3];
          uint64_t v68 = *v65;
          if (v164) {
            goto LABEL_84;
          }
          goto LABEL_108;
        }
      }
LABEL_83:
      uint64_t v68 = 0;
      if (v164)
      {
LABEL_84:
        int8x8_t v73 = *(int8x8_t *)(*(void *)v24 + 8);
        if (v73)
        {
          uint8x8_t v74 = (uint8x8_t)vcnt_s8(v73);
          v74.i16[0] = vaddlv_u8(v74);
          if (v74.u32[0] > 1uLL)
          {
            if (*(void *)&v73 <= 0x99uLL) {
              uint64_t v75 = 0x99uLL % *(void *)&v73;
            }
            else {
              uint64_t v75 = 153;
            }
          }
          else
          {
            uint64_t v75 = (v73.i32[0] - 1) & 0x99;
          }
          unint64_t v76 = *(int8x8_t ***)(**(void **)v24 + 8 * v75);
          if (v76)
          {
            uint64_t v77 = *v76;
            if (v77)
            {
              if (v74.u32[0] < 2uLL)
              {
                uint64_t v78 = *(void *)&v73 - 1;
                while (1)
                {
                  int8x8_t v80 = v77[1];
                  if (*(void *)&v80 == 153)
                  {
                    if (v77[2].i32[0] == 153) {
                      goto LABEL_134;
                    }
                  }
                  else if ((*(void *)&v80 & v78) != v75)
                  {
                    goto LABEL_105;
                  }
                  uint64_t v77 = (int8x8_t *)*v77;
                  if (!v77) {
                    goto LABEL_105;
                  }
                }
              }
              do
              {
                int8x8_t v79 = v77[1];
                if (*(void *)&v79 == 153)
                {
                  if (v77[2].i32[0] == 153)
                  {
LABEL_134:
                    int8x8_t v73 = v77[3];
                    goto LABEL_106;
                  }
                }
                else
                {
                  if (*(void *)&v79 >= *(void *)&v73) {
                    *(void *)&v79 %= *(void *)&v73;
                  }
                  if (*(void *)&v79 != v75) {
                    break;
                  }
                }
                uint64_t v77 = (int8x8_t *)*v77;
              }
              while (v77);
            }
          }
LABEL_105:
          int8x8_t v73 = 0;
        }
LABEL_106:
        if (v73) {
          int8x8_t v46 = v73;
        }
      }
LABEL_108:
      {
        gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v81 = v61[1];
      if (!v81) {
        goto LABEL_180;
      }
      unint64_t v82 = gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index;
      uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
      v83.i16[0] = vaddlv_u8(v83);
      if (v83.u32[0] > 1uLL)
      {
        uint64_t v84 = gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index >= v81) {
          uint64_t v84 = gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index % v81;
        }
      }
      else
      {
        uint64_t v84 = (v81 - 1) & gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index;
      }
      unint64_t v85 = *(void **)(*v61 + 8 * v84);
      if (!v85) {
        goto LABEL_180;
      }
      uint64_t v86 = (void *)*v85;
      if (!v86) {
        goto LABEL_180;
      }
      if (v83.u32[0] < 2uLL)
      {
        unint64_t v87 = v81 - 1;
        while (1)
        {
          uint64_t v89 = v86[1];
          if (gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index == v89)
          {
            if (v86[2] == gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index) {
              goto LABEL_130;
            }
          }
          else if ((v89 & v87) != v84)
          {
            goto LABEL_180;
          }
          uint64_t v86 = (void *)*v86;
          if (!v86) {
            goto LABEL_180;
          }
        }
      }
      while (1)
      {
        unint64_t v88 = v86[1];
        if (gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index == v88) {
          break;
        }
        if (v88 >= v81) {
          v88 %= v81;
        }
        if (v88 != v84) {
          goto LABEL_180;
        }
LABEL_119:
        uint64_t v86 = (void *)*v86;
        if (!v86) {
          goto LABEL_180;
        }
      }
      if (v86[2] != gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index) {
        goto LABEL_119;
      }
LABEL_130:
      {
        if (v153)
        {
          md::typeToIntMap(v153);
          HasStyleAttributeRaster = v154;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_215;
      }
      uint8x8_t v90 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v90.i16[0] = vaddlv_u8(v90);
      if (v90.u32[0] > 1uLL)
      {
        unint64_t v91 = v82;
        if (v82 >= qword_1E957F030) {
          unint64_t v91 = v82 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v91 = (qword_1E957F030 - 1) & v82;
      }
      uint64_t v92 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v91);
      if (!v92 || (uint64_t v93 = *v92) == 0) {
LABEL_215:
      }
        abort();
      if (v90.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v95 = v93[1];
          if ((uint64_t *)v82 == v95)
          {
            if (v93[2] == (uint64_t *)v82) {
              goto LABEL_152;
            }
          }
          else if (((unint64_t)v95 & (qword_1E957F030 - 1)) != v91)
          {
            goto LABEL_215;
          }
          uint64_t v93 = (uint64_t **)*v93;
          if (!v93) {
            goto LABEL_215;
          }
        }
      }
      while (2)
      {
        unint64_t v94 = (unint64_t)v93[1];
        if (v82 != v94)
        {
          if (v94 >= qword_1E957F030) {
            v94 %= (unint64_t)qword_1E957F030;
          }
          if (v94 != v91) {
            goto LABEL_215;
          }
LABEL_142:
          uint64_t v93 = (uint64_t **)*v93;
          if (!v93) {
            goto LABEL_215;
          }
          continue;
        }
        break;
      }
      if (v93[2] != (uint64_t *)v82) {
        goto LABEL_142;
      }
LABEL_152:
      uint64_t v97 = *((int *)v93 + 6);
      uint64_t v96 = *((int *)v93 + 7);
      if (v97 != -1)
      {
        uint64_t v98 = *(void *)(v68 + 16);
        if (v98)
        {
          uint64_t v99 = *(void *)(*(void *)(v98 + 48) + 72);
          uint64_t v100 = *(void *)(v99 + 8);
          uint64_t v101 = *(void *)(v100 + 72);
          if (v101)
          {
            uint64_t v102 = 0;
            uint64_t v103 = *(void *)(v100 + 64);
            unint64_t v104 = (unsigned __int8 *)(v103 + 1);
            while (1)
            {
              int v105 = *v104;
              v104 += 2;
              if (v105 == v97) {
                break;
              }
              if (v101 == ++v102) {
                goto LABEL_158;
              }
            }
            uint64_t v112 = (unsigned __int8 *)(v103 + 2 * v102);
LABEL_165:
            *(int8x8_t *)(*(void *)(v68 + 96) + 8 * *v112) = v46;
          }
          else
          {
LABEL_158:
            uint64_t v106 = *(void *)(v99 + 24);
            uint64_t v107 = *(void *)(v106 + 72);
            if (v107)
            {
              uint64_t v108 = 0;
              uint64_t v109 = *(void *)(v106 + 64);
              uint8x8_t v110 = (unsigned __int8 *)(v109 + 1);
              while (1)
              {
                int v111 = *v110;
                v110 += 2;
                if (v111 == v97) {
                  break;
                }
                if (v107 == ++v108) {
                  goto LABEL_166;
                }
              }
              uint64_t v112 = (unsigned __int8 *)(v109 + 2 * v108);
              goto LABEL_165;
            }
          }
        }
      }
LABEL_166:
      if (v96 != -1)
      {
        uint64_t v113 = *(void *)(v68 + 16);
        if (v113)
        {
          uint64_t v114 = *(void *)(*(void *)(v113 + 48) + 72);
          uint64_t v115 = *(void *)(v114 + 8);
          uint64_t v116 = *(void *)(v115 + 72);
          if (v116)
          {
            uint64_t v117 = 0;
            uint64_t v118 = *(void *)(v115 + 64);
            uint64_t v119 = (unsigned __int8 *)(v118 + 1);
            while (1)
            {
              int v120 = *v119;
              v119 += 2;
              if (v120 == v96) {
                break;
              }
              if (v116 == ++v117) {
                goto LABEL_172;
              }
            }
            uint64_t v127 = (unsigned __int8 *)(v118 + 2 * v117);
LABEL_179:
            *(int8x8_t *)(*(void *)(v68 + 96) + 8 * *v127) = v46;
          }
          else
          {
LABEL_172:
            uint64_t v121 = *(void *)(v114 + 24);
            uint64_t v122 = *(void *)(v121 + 72);
            if (v122)
            {
              uint64_t v123 = 0;
              uint64_t v124 = *(void *)(v121 + 64);
              unint64_t v125 = (unsigned __int8 *)(v124 + 1);
              while (1)
              {
                int v126 = *v125;
                v125 += 2;
                if (v126 == v96) {
                  break;
                }
                if (v122 == ++v123) {
                  goto LABEL_180;
                }
              }
              uint64_t v127 = (unsigned __int8 *)(v124 + 2 * v123);
              goto LABEL_179;
            }
          }
        }
      }
LABEL_180:
      uint64_t v10 = (void *)v158[4];
      uint64_t v128 = v162 + 1;
      unint64_t v162 = v128;
      if (v128 == v10)
      {
        uint64_t result = v155;
        uint64_t v2 = v156;
      }
      else
      {
        uint64_t v129 = v159[4];
        uint64_t result = v155;
        uint64_t v2 = v156;
        do
        {
          unint64_t v130 = *((unsigned int *)v128 + 1);
          unint64_t v131 = v130 >> 7;
          if (v130 >> 7 < (v159[5] - v129) >> 3)
          {
            uint64_t v132 = *(void *)(v129 + 8 * v131);
            if (v132)
            {
              uint64_t v133 = v130 & 0x7F;
              unint64_t v134 = *(unsigned __int16 *)(v132 + 2 * v133);
              uint64_t v135 = v159[7];
              uint64_t v136 = v159[8];
              if (v134 < (v136 - v135) >> 3)
              {
                uint64_t v137 = v135 + 8 * v134;
                if (v137 != v136 && *(_DWORD *)(v137 + 4) == v130)
                {
                  uint64_t v139 = v160[4];
                  if (v131 < (v160[5] - v139) >> 3)
                  {
                    uint64_t v140 = *(void *)(v139 + 8 * v131);
                    if (v140)
                    {
                      unint64_t v141 = *(unsigned __int16 *)(v140 + 2 * v133);
                      uint64_t v142 = v160[7];
                      uint64_t v143 = v160[8];
                      if (v141 < (v143 - v142) >> 3)
                      {
                        uint64_t v144 = v142 + 8 * v141;
                        if (v144 != v143 && *(_DWORD *)(v144 + 4) == v130)
                        {
                          uint64_t v146 = v161[4];
                          if (v131 < (v161[5] - v146) >> 3)
                          {
                            uint64_t v147 = *(void *)(v146 + 8 * v131);
                            if (v147)
                            {
                              unint64_t v148 = *(unsigned __int16 *)(v147 + 2 * v133);
                              uint64_t v150 = v161[7];
                              uint64_t v149 = v161[8];
                              if (v148 < (v149 - v150) >> 3)
                              {
                                uint64_t v151 = v150 + 8 * v148;
                                if (*(_DWORD *)(v151 + 4) == v130 && v151 != v149)
                                {
                                  uint64_t v10 = v128;
                                  goto LABEL_208;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v128;
        }
        while (v128 != v10);
        uint64_t v128 = v10;
LABEL_208:
        unint64_t v162 = v128;
      }
      if (v157 == v10) {
        goto LABEL_214;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_214:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A195A470(_Unwind_Exception *a1)
{
}

void sub_1A195A488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v93, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v91, v9, v4, v6, *(void *)(v9 + 32));
  if (v92 != v96)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v89 = result;
    uint64_t v90 = v2;
    while (1)
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = (unint64_t *)v22;
      }
      uint64_t v24 = **(void **)(v2 + 8);
      uint64_t v25 = *(void **)v24;
      uint64_t v26 = *(void **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0xC94DD89A7B09BE9CLL)
        {
          v25 += 5;
          if (v25 == v26) {
            goto LABEL_30;
          }
        }
      }
      if (v25 == v26)
      {
LABEL_30:
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = v25[3];
        uint64_t v28 = (std::__shared_weak_count *)v25[4];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      uint64_t v29 = **(void **)(v2 + 8);
      uint64_t v30 = *(void **)v29;
      BOOL v31 = *(void **)(v29 + 8);
      if (v30 != v31)
      {
        while (*v30 != 0x41D4E9297E100630)
        {
          v30 += 5;
          if (v30 == v31) {
            goto LABEL_39;
          }
        }
      }
      if (v30 == v31)
      {
LABEL_39:
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v32 = (void *)v30[3];
        uint64_t v33 = (std::__shared_weak_count *)v30[4];
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
      uint64_t v35 = *(void *)(v34 + 1328);
      unint64_t v36 = *(std::__shared_weak_count **)(v34 + 1336);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v37 = *v23;
      unint64_t v38 = *v23;
      uint64_t v39 = v32[50];
      unint64_t v40 = (v32[51] - v39) >> 3;
      if (v38 >= v40)
      {
LABEL_50:
        uint64_t v41 = 0;
        if (v38 >= v40) {
          goto LABEL_64;
        }
        goto LABEL_54;
      }
      uint64_t v41 = *(void **)(v39 + 8 * v38);
      if (!v41) {
        goto LABEL_53;
      }
      if (HIDWORD(v37) != HIDWORD(v41)) {
        break;
      }
      uint64_t v42 = v32[53];
      if (v42 + 16 * v41 == v32[54] || v42 == 0) {
        goto LABEL_50;
      }
      uint64_t v50 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v32 + 37), v37, v23);
      ++v50[3];
      uint64_t v41 = *(void **)(v42 + 16 * v41 + 8);
      unint64_t v37 = *v23;
      uint64_t v39 = v32[50];
      unint64_t v38 = *v23;
      if (v38 >= (v32[51] - v39) >> 3) {
        goto LABEL_64;
      }
LABEL_54:
      uint64_t v44 = *(void *)(v39 + 8 * v38);
      if (v44 && HIDWORD(v37) == HIDWORD(v44))
      {
        uint64_t v45 = v32[53];
        int8x8_t v46 = (void **)(v45 + 16 * v44);
        if (v46 != (void **)v32[54] && v45 != 0)
        {
          uint64_t v48 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v32 + 37), v37, v23);
          ++v48[3];
          uint64_t v49 = *v46;
          if (!v36) {
            goto LABEL_66;
          }
LABEL_65:
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_66;
        }
      }
LABEL_64:
      uint64_t v49 = 0;
      if (v36) {
        goto LABEL_65;
      }
LABEL_66:
      if (v35)
      {
        {
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
        }
        unint64_t v51 = v41[1];
        if (v51)
        {
          unint64_t v52 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index;
          uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
          v53.i16[0] = vaddlv_u8(v53);
          if (v53.u32[0] > 1uLL)
          {
            uint64_t v54 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index >= v51) {
              uint64_t v54 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index % v51;
            }
          }
          else
          {
            uint64_t v54 = (v51 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index;
          }
          unint64_t v55 = *(void **)(*v41 + 8 * v54);
          if (v55)
          {
            uint64_t v56 = (void *)*v55;
            if (v56)
            {
              if (v53.u32[0] < 2uLL)
              {
                unint64_t v57 = v51 - 1;
                while (1)
                {
                  uint64_t v59 = v56[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index == v59)
                  {
                    if (v56[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index) {
                      goto LABEL_89;
                    }
                  }
                  else if ((v59 & v57) != v54)
                  {
                    goto LABEL_114;
                  }
                  uint64_t v56 = (void *)*v56;
                  if (!v56) {
                    goto LABEL_114;
                  }
                }
              }
              do
              {
                unint64_t v58 = v56[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index == v58)
                {
                  if (v56[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index)
                  {
LABEL_89:
                    {
                      if (v88)
                      {
                        md::typeToIntMap(v88);
                      }
                    }
                    if (!qword_1E957F030) {
                      goto LABEL_145;
                    }
                    uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                    v60.i16[0] = vaddlv_u8(v60);
                    if (v60.u32[0] > 1uLL)
                    {
                      unint64_t v61 = v52;
                      if (v52 >= qword_1E957F030) {
                        unint64_t v61 = v52 % qword_1E957F030;
                      }
                    }
                    else
                    {
                      unint64_t v61 = (qword_1E957F030 - 1) & v52;
                    }
                    uint64_t v62 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v61);
                    if (!v62 || (uint64_t v63 = *v62) == 0) {
LABEL_145:
                    }
                      abort();
                    if (v60.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        unint64_t v65 = v63[1];
                        if ((uint64_t *)v52 == v65)
                        {
                          if (v63[2] == (uint64_t *)v52) {
                            goto LABEL_110;
                          }
                        }
                        else if (((unint64_t)v65 & (qword_1E957F030 - 1)) != v61)
                        {
                          goto LABEL_145;
                        }
                        uint64_t v63 = (uint64_t **)*v63;
                        if (!v63) {
                          goto LABEL_145;
                        }
                      }
                    }
                    while (1)
                    {
                      unint64_t v64 = (unint64_t)v63[1];
                      if (v52 == v64)
                      {
                        if (v63[2] == (uint64_t *)v52)
                        {
LABEL_110:
                          uint64_t v66 = *((int *)v63 + 6);
                          uint64_t v67 = *((int *)v63 + 7);
                          if (v66 != -1) {
                            ggl::PipelineSetup::setConstantData(v49, v66, v35, 1);
                          }
                          if (v67 != -1) {
                            ggl::PipelineSetup::setConstantData(v49, v67, v35, 2);
                          }
                          goto LABEL_114;
                        }
                      }
                      else
                      {
                        if (v64 >= qword_1E957F030) {
                          v64 %= (unint64_t)qword_1E957F030;
                        }
                        if (v64 != v61) {
                          goto LABEL_145;
                        }
                      }
                      uint64_t v63 = (uint64_t **)*v63;
                      if (!v63) {
                        goto LABEL_145;
                      }
                    }
                  }
                }
                else
                {
                  if (v58 >= v51) {
                    v58 %= v51;
                  }
                  if (v58 != v54) {
                    break;
                  }
                }
                uint64_t v56 = (void *)*v56;
              }
              while (v56);
            }
          }
        }
      }
LABEL_114:
      uint64_t v2 = v90;
      if (!v36) {
        goto LABEL_117;
      }
      p_uint64_t shared_owners = &v36->__shared_owners_;
      if (atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_138;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_138:
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
LABEL_117:
      int8x8_t v69 = v96;
      uint64_t v11 = *(unint64_t **)(v93 + 32);
      if (++v96 == v11)
      {
        uint64_t result = v89;
      }
      else
      {
        uint64_t v70 = v94[4];
        unint64_t v71 = (v94[5] - v70) >> 3;
        uint64_t v72 = v69 + 2;
        uint64_t result = v89;
        while (1)
        {
          unint64_t v73 = *((unsigned int *)v72 - 1);
          unint64_t v74 = v73 >> 7;
          if (v73 >> 7 < v71)
          {
            uint64_t v75 = *(void *)(v70 + 8 * v74);
            if (v75)
            {
              unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * (v73 & 0x7F));
              uint64_t v77 = v94[7];
              uint64_t v78 = v94[8];
              if (v76 < (v78 - v77) >> 3)
              {
                uint64_t v79 = v77 + 8 * v76;
                if (v79 != v78 && *(_DWORD *)(v79 + 4) == v73)
                {
                  uint64_t v81 = v95[4];
                  if (v74 < (v95[5] - v81) >> 3)
                  {
                    uint64_t v82 = *(void *)(v81 + 8 * v74);
                    if (v82)
                    {
                      unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (v73 & 0x7F));
                      uint64_t v85 = v95[7];
                      uint64_t v84 = v95[8];
                      if (v83 < (v84 - v85) >> 3)
                      {
                        uint64_t v86 = v85 + 8 * v83;
                        if (v86 != v84 && *(_DWORD *)(v86 + 4) == v73) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v96 = v72;
          BOOL v20 = v72++ == v11;
          if (v20) {
            goto LABEL_10;
          }
        }
        uint64_t v11 = v72 - 1;
      }
LABEL_10:
      if (v92 == v11) {
        goto LABEL_144;
      }
    }
    uint64_t v41 = 0;
LABEL_53:
    if (v38 >= v40) {
      goto LABEL_64;
    }
    goto LABEL_54;
  }
  uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_144:
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A195AC7C(_Unwind_Exception *a1)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v8 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  uint64_t v118 = v8;
  uint64_t v119 = v3;
  int v120 = (void *)v4;
  uint64_t v121 = (void *)v5;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  uint64_t v122 = (void *)v6;
  uint64_t v123 = v9;
  if (v10 == v9)
  {
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118))
    {
      unint64_t v12 = v9 + 1;
      do
      {
        uint64_t v9 = v12;
        uint64_t v123 = v12;
        if (v12 == v10) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v118);
        unint64_t v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  uint64_t v117 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *uint64_t v117 = *v9;
    unint64_t v15 = *v9;
    uint64_t v16 = HIDWORD(*v9);
    unint64_t v17 = *v9 >> 39;
    uint64_t v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
      && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
    {
      uint64_t v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      uint64_t v25 = (unint64_t *)v3[11];
    }
    uint64_t v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
      && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v7[10] + 8 * v28;
    }
    else
    {
      uint64_t v33 = v7[11];
      uint64_t v34 = v33;
    }
    if (v34 == v33) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = (unint64_t *)v34;
    }
    uint64_t v36 = **(void **)(v11 + 8);
    unint64_t v37 = *(void **)v36;
    unint64_t v38 = *(void **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38) {
          goto LABEL_46;
        }
      }
    }
    if (v37 == v38)
    {
LABEL_46:
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = (void *)v37[3];
      unint64_t v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    unint64_t v41 = *v35;
    unint64_t v42 = *v35;
    uint64_t v43 = v39[50];
    unint64_t v44 = (v39[51] - v43) >> 3;
    if (v42 < v44
      && (uint64_t v45 = *(void *)(v43 + 8 * v42)) != 0
      && HIDWORD(v41) == HIDWORD(v45)
      && ((uint64_t v46 = v39[53], v46 + 16 * v45 != v39[54]) ? (v47 = v46 == 0) : (v47 = 1), !v47))
    {
      uint64_t v53 = *(void *)(v43 + 8 * v42);
      uint64_t v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v41, v35);
      ++v54[3];
      uint64_t v55 = v46 + 16 * v53;
      uint64_t v11 = a1;
      uint64_t v48 = *(void **)(v55 + 8);
      unint64_t v41 = *v35;
      uint64_t v43 = v39[50];
      unint64_t v42 = *v35;
      if (v42 >= (v39[51] - v43) >> 3)
      {
LABEL_67:
        uint64_t v101 = 0;
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v48 = 0;
      if (v42 >= v44) {
        goto LABEL_67;
      }
    }
    uint64_t v49 = *(void *)(v43 + 8 * v42);
    if (!v49 || HIDWORD(v41) != HIDWORD(v49)) {
      goto LABEL_67;
    }
    uint64_t v50 = v39[53];
    unint64_t v51 = (void **)(v50 + 16 * v49);
    if (v51 == (void **)v39[54] || v50 == 0)
    {
      uint64_t v101 = 0;
    }
    else
    {
      uint64_t v100 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v41, v35);
      ++v100[3];
      uint64_t v101 = *v51;
    }
    uint64_t v11 = a1;
LABEL_68:
    unint64_t v56 = *v25;
    unint64_t v124 = v56;
    uint64_t v57 = v39[554];
    if (v56 < (unint64_t)((v39[555] - v57) >> 3))
    {
      uint64_t v58 = *(void *)(v57 + 8 * v56);
      if (v58 && HIDWORD(v56) == HIDWORD(v58))
      {
        uint64_t v91 = v39[557];
        uint64_t v92 = (uint64_t *)(v91 + 24 * v58);
        if (v92 != (uint64_t *)v39[558] && v91 != 0)
        {
          unint64_t v94 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>> const&>,std::tuple<>>((uint64_t)(v39 + 541), v56, &v124);
          ++v94[3];
          uint64_t v95 = *v92;
          if (*v92)
          {
            {
              gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
            }
            unint64_t v96 = v48[1];
            if (v96)
            {
              unint64_t v97 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index;
              uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
              v98.i16[0] = vaddlv_u8(v98);
              if (v98.u32[0] > 1uLL)
              {
                uint64_t v99 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index;
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index >= v96) {
                  uint64_t v99 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index % v96;
                }
              }
              else
              {
                uint64_t v99 = (v96 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index;
              }
              uint64_t v102 = *(void **)(*v48 + 8 * v99);
              if (v102)
              {
                uint64_t v103 = (void *)*v102;
                if (v103)
                {
                  if (v98.u32[0] < 2uLL)
                  {
                    unint64_t v104 = v96 - 1;
                    while (1)
                    {
                      uint64_t v106 = v103[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index == v106)
                      {
                        if (v103[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index) {
                          goto LABEL_136;
                        }
                      }
                      else if ((v106 & v104) != v99)
                      {
                        goto LABEL_73;
                      }
                      uint64_t v103 = (void *)*v103;
                      if (!v103) {
                        goto LABEL_73;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v105 = v103[1];
                    if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index == v105)
                    {
                      if (v103[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index)
                      {
LABEL_136:
                        {
                          if (v115)
                          {
                            md::typeToIntMap(v115);
                            uint64_t v11 = a1;
                          }
                        }
                        if (!qword_1E957F030) {
                          goto LABEL_166;
                        }
                        uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                        v107.i16[0] = vaddlv_u8(v107);
                        if (v107.u32[0] > 1uLL)
                        {
                          unint64_t v108 = v97;
                          if (v97 >= qword_1E957F030) {
                            unint64_t v108 = v97 % qword_1E957F030;
                          }
                        }
                        else
                        {
                          unint64_t v108 = (qword_1E957F030 - 1) & v97;
                        }
                        uint64_t v109 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v108);
                        if (!v109 || (uint8x8_t v110 = *v109) == 0) {
LABEL_166:
                        }
                          abort();
                        if (v107.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            uint64_t v112 = v110[1];
                            if ((uint64_t *)v97 == v112)
                            {
                              if (v110[2] == (uint64_t *)v97) {
                                goto LABEL_157;
                              }
                            }
                            else if (((unint64_t)v112 & (qword_1E957F030 - 1)) != v108)
                            {
                              goto LABEL_166;
                            }
                            uint8x8_t v110 = (uint64_t **)*v110;
                            if (!v110) {
                              goto LABEL_166;
                            }
                          }
                        }
                        while (1)
                        {
                          unint64_t v111 = (unint64_t)v110[1];
                          if (v97 == v111)
                          {
                            if (v110[2] == (uint64_t *)v97)
                            {
LABEL_157:
                              uint64_t v113 = *((int *)v110 + 6);
                              uint64_t v114 = *((int *)v110 + 7);
                              if (v113 != -1) {
                                ggl::PipelineSetup::setConstantData(v101, v113, v95, 1);
                              }
                              if (v114 != -1) {
                                ggl::PipelineSetup::setConstantData(v101, v114, v95, 2);
                              }
                              goto LABEL_73;
                            }
                          }
                          else
                          {
                            if (v111 >= qword_1E957F030) {
                              v111 %= (unint64_t)qword_1E957F030;
                            }
                            if (v111 != v108) {
                              goto LABEL_166;
                            }
                          }
                          uint8x8_t v110 = (uint64_t **)*v110;
                          if (!v110) {
                            goto LABEL_166;
                          }
                        }
                      }
                    }
                    else
                    {
                      if (v105 >= v96) {
                        v105 %= v96;
                      }
                      if (v105 != v99) {
                        break;
                      }
                    }
                    uint64_t v103 = (void *)*v103;
                  }
                  while (v103);
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    uint64_t v9 = (void *)v118[4];
    uint64_t v14 = v123 + 1;
    uint64_t v123 = v14;
    if (v14 != v9)
    {
      uint64_t v60 = v119[4];
      while (1)
      {
        unint64_t v61 = *((unsigned int *)v14 + 1);
        unint64_t v62 = v61 >> 7;
        if (v61 >> 7 < (v119[5] - v60) >> 3)
        {
          uint64_t v63 = *(void *)(v60 + 8 * v62);
          if (v63)
          {
            uint64_t v64 = v61 & 0x7F;
            unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
            uint64_t v67 = v119[7];
            uint64_t v66 = v119[8];
            if (v65 < (v66 - v67) >> 3)
            {
              uint64_t v68 = v67 + 8 * v65;
              if (v68 != v66 && *(_DWORD *)(v68 + 4) == v61)
              {
                uint64_t v70 = v120[4];
                if (v62 < (v120[5] - v70) >> 3)
                {
                  uint64_t v71 = *(void *)(v70 + 8 * v62);
                  if (v71)
                  {
                    unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                    uint64_t v74 = v120[7];
                    uint64_t v73 = v120[8];
                    if (v72 < (v73 - v74) >> 3)
                    {
                      uint64_t v75 = v74 + 8 * v72;
                      if (v75 != v73 && *(_DWORD *)(v75 + 4) == v61)
                      {
                        uint64_t v77 = v121[4];
                        if (v62 < (v121[5] - v77) >> 3)
                        {
                          uint64_t v78 = *(void *)(v77 + 8 * v62);
                          if (v78)
                          {
                            unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                            uint64_t v81 = v121[7];
                            uint64_t v80 = v121[8];
                            if (v79 < (v80 - v81) >> 3)
                            {
                              uint64_t v82 = v81 + 8 * v79;
                              if (v82 != v80 && *(_DWORD *)(v82 + 4) == v61)
                              {
                                uint64_t v84 = v122[4];
                                if (v62 < (v122[5] - v84) >> 3)
                                {
                                  uint64_t v85 = *(void *)(v84 + 8 * v62);
                                  if (v85)
                                  {
                                    unint64_t v86 = *(unsigned __int16 *)(v85 + 2 * v64);
                                    uint64_t v87 = v122[7];
                                    uint64_t v88 = v122[8];
                                    if (v86 < (v88 - v87) >> 3)
                                    {
                                      uint64_t v89 = v87 + 8 * v86;
                                      if (*(_DWORD *)(v89 + 4) == v61 && v89 != v88) {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          uint64_t v14 = v9;
          goto LABEL_17;
        }
      }
      uint64_t v9 = v14;
LABEL_17:
      uint64_t v123 = v14;
    }
  }
  *uint64_t v117 = 0xFFFFFFFF00000000;
  *(void *)(v11 + 8) = 0;
}

void sub_1A195B544(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ElevatedStrokeConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  unint64_t v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  uint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        BOOL v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        BOOL v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      unint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        unint64_t v38 = 0;
      }
      else
      {
        unint64_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        BOOL v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          unint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        BOOL v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        unint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        unint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[834];
      if (v55 < (unint64_t)((v38[835] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[837];
          uint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[838] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>> const&>,std::tuple<>>((uint64_t)(v38 + 821), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index;
                }
                uint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  unint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        unint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint64_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (uint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              unint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              uint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            uint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      unint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A195BD0C(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  HasMaterialRasterRender = (void *)gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = HasMaterialRasterRender + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < HasMaterialRasterRender[8] - HasMaterialRasterRender[7]) {
    uint64_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint64_t v7 = (void *)(v5 + 32);
  }
  uint64_t v137 = v7;
  uint64_t v138 = HasMaterialRasterRender;
  uint64_t v139 = (void *)v4;
  uint64_t v140 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  unint64_t v141 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v137))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        unint64_t v141 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v137);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v136 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v15 = *v8;
      uint64_t v16 = HIDWORD(*v8);
      unint64_t v17 = *v8 >> 39;
      uint64_t v18 = HasMaterialRasterRender[4];
      if (v17 < (HasMaterialRasterRender[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = HasMaterialRasterRender[7],
            uint64_t v21 = HasMaterialRasterRender[8],
            v20 < (v21 - v22) >> 3)
        && ((uint64_t v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == v16) : (v24 = 0), v24))
      {
        uint64_t v25 = (uint64_t **)(HasMaterialRasterRender[10] + 8 * v20);
      }
      else
      {
        uint64_t v25 = (uint64_t **)HasMaterialRasterRender[11];
      }
      uint64_t v26 = v6[4];
      if (v17 < (v6[5] - v26) >> 3
        && (uint64_t v27 = *(void *)(v26 + 8 * v17)) != 0
        && (unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v30 = v6[7],
            uint64_t v29 = v6[8],
            v28 < (v29 - v30) >> 3)
        && ((uint64_t v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == v16) : (v32 = 0), v32))
      {
        uint64_t v33 = v6[11];
        uint64_t v34 = v6[10] + 8 * v28;
      }
      else
      {
        uint64_t v33 = v6[11];
        uint64_t v34 = v33;
      }
      if (v34 == v33) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = (unint64_t *)v34;
      }
      uint64_t v36 = **(void **)(v10 + 8);
      unint64_t v37 = *(void **)v36;
      unint64_t v38 = *(void **)(v36 + 8);
      if (v37 != v38)
      {
        while (*v37 != 0x41D4E9297E100630)
        {
          v37 += 5;
          if (v37 == v38) {
            goto LABEL_44;
          }
        }
      }
      if (v37 == v38)
      {
LABEL_44:
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = (void *)v37[3];
        unint64_t v40 = (std::__shared_weak_count *)v37[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v41 = (uint64_t)(v39 + 37);
      unint64_t v42 = *v35;
      unint64_t v43 = *v35;
      uint64_t v44 = v39[50];
      unint64_t v45 = (v39[51] - v44) >> 3;
      if (v43 < v45
        && (uint64_t v46 = *(void *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((uint64_t v47 = v39[53], v47 + 16 * v46 != v39[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        uint64_t v57 = *(void *)(v44 + 8 * v43);
        uint64_t v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v42, v35);
        ++v58[3];
        uint64_t v59 = v47 + 16 * v57;
        uint64_t v10 = a1;
        uint64_t v49 = *(void **)(v59 + 8);
        unint64_t v42 = *v35;
        uint64_t v44 = v39[50];
        unint64_t v43 = *v35;
        if (v43 >= (v39[51] - v44) >> 3) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v49 = 0;
        if (v43 >= v45) {
          goto LABEL_64;
        }
      }
      uint64_t v50 = *(void *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        uint64_t v51 = v39[53];
        uint64_t v52 = (uint64_t *)v39[54];
        uint64_t v53 = (uint64_t *)(v51 + 16 * v50);
        if (v53 != v52 && v51 != 0)
        {
          unint64_t v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v41, v42, v35);
          ++v55[3];
          uint64_t v56 = *v53;
          goto LABEL_65;
        }
      }
LABEL_64:
      uint64_t v56 = 0;
LABEL_65:
      uint64_t v60 = *v25;
      uint64_t v61 = **v25;
      unint64_t v62 = (std::__shared_weak_count *)v60[1];
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      {
        gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v63 = v49[1];
      if (!v63) {
        goto LABEL_138;
      }
      unint64_t v64 = gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index;
      uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
      v65.i16[0] = vaddlv_u8(v65);
      if (v65.u32[0] > 1uLL)
      {
        uint64_t v66 = gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index >= v63) {
          uint64_t v66 = gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index % v63;
        }
      }
      else
      {
        uint64_t v66 = (v63 - 1) & gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index;
      }
      uint64_t v67 = *(void **)(*v49 + 8 * v66);
      if (!v67) {
        goto LABEL_138;
      }
      uint64_t v68 = (void *)*v67;
      if (!v68) {
        goto LABEL_138;
      }
      if (v65.u32[0] < 2uLL)
      {
        unint64_t v69 = v63 - 1;
        while (1)
        {
          uint64_t v71 = v68[1];
          if (gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index == v71)
          {
            if (v68[2] == gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index) {
              goto LABEL_89;
            }
          }
          else if ((v71 & v69) != v66)
          {
            goto LABEL_138;
          }
          uint64_t v68 = (void *)*v68;
          if (!v68) {
            goto LABEL_138;
          }
        }
      }
      while (1)
      {
        unint64_t v70 = v68[1];
        if (gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index == v70) {
          break;
        }
        if (v70 >= v63) {
          v70 %= v63;
        }
        if (v70 != v66) {
          goto LABEL_138;
        }
LABEL_78:
        uint64_t v68 = (void *)*v68;
        if (!v68) {
          goto LABEL_138;
        }
      }
      if (v68[2] != gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index) {
        goto LABEL_78;
      }
LABEL_89:
      {
        if (v134)
        {
          md::typeToIntMap(v134);
          uint64_t v10 = a1;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_174;
      }
      uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v72.i16[0] = vaddlv_u8(v72);
      if (v72.u32[0] > 1uLL)
      {
        unint64_t v73 = v64;
        if (v64 >= qword_1E957F030) {
          unint64_t v73 = v64 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v73 = (qword_1E957F030 - 1) & v64;
      }
      uint64_t v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
      if (!v74 || (uint64_t v75 = *v74) == 0) {
LABEL_174:
      }
        abort();
      if (v72.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v77 = v75[1];
          if ((uint64_t *)v64 == v77)
          {
            if (v75[2] == (uint64_t *)v64) {
              goto LABEL_110;
            }
          }
          else if (((unint64_t)v77 & (qword_1E957F030 - 1)) != v73)
          {
            goto LABEL_174;
          }
          uint64_t v75 = (uint64_t **)*v75;
          if (!v75) {
            goto LABEL_174;
          }
        }
      }
      while (2)
      {
        unint64_t v76 = (unint64_t)v75[1];
        if (v64 != v76)
        {
          if (v76 >= qword_1E957F030) {
            v76 %= (unint64_t)qword_1E957F030;
          }
          if (v76 != v73) {
            goto LABEL_174;
          }
LABEL_100:
          uint64_t v75 = (uint64_t **)*v75;
          if (!v75) {
            goto LABEL_174;
          }
          continue;
        }
        break;
      }
      if (v75[2] != (uint64_t *)v64) {
        goto LABEL_100;
      }
LABEL_110:
      uint64_t v79 = *((int *)v75 + 6);
      uint64_t v78 = *((int *)v75 + 7);
      if (v79 != -1)
      {
        uint64_t v80 = *(void *)(v56 + 16);
        if (v80)
        {
          uint64_t v81 = *(void *)(*(void *)(v80 + 48) + 72);
          uint64_t v82 = *(void *)(v81 + 8);
          uint64_t v83 = *(void *)(v82 + 72);
          if (v83)
          {
            uint64_t v84 = 0;
            uint64_t v85 = *(void *)(v82 + 64);
            unint64_t v86 = (unsigned __int8 *)(v85 + 1);
            while (1)
            {
              int v87 = *v86;
              v86 += 2;
              if (v87 == v79) {
                break;
              }
              if (v83 == ++v84) {
                goto LABEL_116;
              }
            }
            unint64_t v94 = (unsigned __int8 *)(v85 + 2 * v84);
LABEL_123:
            *(void *)(*(void *)(v56 + 96) + 8 * *v94) = v61;
          }
          else
          {
LABEL_116:
            uint64_t v88 = *(void *)(v81 + 24);
            uint64_t v89 = *(void *)(v88 + 72);
            if (v89)
            {
              uint64_t v90 = 0;
              uint64_t v91 = *(void *)(v88 + 64);
              uint64_t v92 = (unsigned __int8 *)(v91 + 1);
              while (1)
              {
                int v93 = *v92;
                v92 += 2;
                if (v93 == v79) {
                  break;
                }
                if (v89 == ++v90) {
                  goto LABEL_124;
                }
              }
              unint64_t v94 = (unsigned __int8 *)(v91 + 2 * v90);
              goto LABEL_123;
            }
          }
        }
      }
LABEL_124:
      if (v78 != -1)
      {
        uint64_t v95 = *(void *)(v56 + 16);
        if (v95)
        {
          uint64_t v96 = *(void *)(*(void *)(v95 + 48) + 72);
          uint64_t v97 = *(void *)(v96 + 8);
          uint64_t v98 = *(void *)(v97 + 72);
          if (v98)
          {
            uint64_t v99 = 0;
            uint64_t v100 = *(void *)(v97 + 64);
            unint64_t v101 = (unsigned __int8 *)(v100 + 1);
            while (1)
            {
              int v102 = *v101;
              v101 += 2;
              if (v102 == v78) {
                break;
              }
              if (v98 == ++v99) {
                goto LABEL_130;
              }
            }
            uint64_t v109 = (unsigned __int8 *)(v100 + 2 * v99);
LABEL_137:
            *(void *)(*(void *)(v56 + 96) + 8 * *v109) = v61;
          }
          else
          {
LABEL_130:
            uint64_t v103 = *(void *)(v96 + 24);
            uint64_t v104 = *(void *)(v103 + 72);
            if (v104)
            {
              uint64_t v105 = 0;
              uint64_t v106 = *(void *)(v103 + 64);
              uint64_t v107 = (unsigned __int8 *)(v106 + 1);
              while (1)
              {
                int v108 = *v107;
                v107 += 2;
                if (v108 == v78) {
                  break;
                }
                if (v104 == ++v105) {
                  goto LABEL_138;
                }
              }
              uint64_t v109 = (unsigned __int8 *)(v106 + 2 * v105);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      uint64_t result = v136;
      uint64_t v8 = (void *)v137[4];
      unint64_t v14 = v141 + 1;
      unint64_t v141 = v14;
      if (v14 != v8)
      {
        uint64_t v110 = v138[4];
        while (1)
        {
          unint64_t v111 = *((unsigned int *)v14 + 1);
          unint64_t v112 = v111 >> 7;
          if (v111 >> 7 < (v138[5] - v110) >> 3)
          {
            uint64_t v113 = *(void *)(v110 + 8 * v112);
            if (v113)
            {
              uint64_t v114 = v111 & 0x7F;
              unint64_t v115 = *(unsigned __int16 *)(v113 + 2 * v114);
              uint64_t v116 = v138[7];
              uint64_t v117 = v138[8];
              if (v115 < (v117 - v116) >> 3)
              {
                uint64_t v118 = v116 + 8 * v115;
                if (v118 != v117 && *(_DWORD *)(v118 + 4) == v111)
                {
                  uint64_t v120 = v139[4];
                  if (v112 < (v139[5] - v120) >> 3)
                  {
                    uint64_t v121 = *(void *)(v120 + 8 * v112);
                    if (v121)
                    {
                      unint64_t v122 = *(unsigned __int16 *)(v121 + 2 * v114);
                      uint64_t v123 = v139[7];
                      uint64_t v124 = v139[8];
                      if (v122 < (v124 - v123) >> 3)
                      {
                        uint64_t v125 = v123 + 8 * v122;
                        if (v125 != v124 && *(_DWORD *)(v125 + 4) == v111)
                        {
                          uint64_t v127 = v140[4];
                          if (v112 < (v140[5] - v127) >> 3)
                          {
                            uint64_t v128 = *(void *)(v127 + 8 * v112);
                            if (v128)
                            {
                              unint64_t v129 = *(unsigned __int16 *)(v128 + 2 * v114);
                              uint64_t v131 = v140[7];
                              uint64_t v130 = v140[8];
                              if (v129 < (v130 - v131) >> 3)
                              {
                                uint64_t v132 = v131 + 8 * v129;
                                if (*(_DWORD *)(v132 + 4) == v111 && v132 != v130) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v8)
          {
            unint64_t v14 = v8;
            goto LABEL_15;
          }
        }
        uint64_t v8 = v14;
LABEL_15:
        unint64_t v141 = v14;
      }
      if (v9 == v8) {
        goto LABEL_173;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_173:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A195C588(_Unwind_Exception *a1)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v94, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v92, v9, v4, v6, *(void *)(v9 + 32));
  if (v93 != v97)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v91 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (unint64_t *)v22;
      }
      BOOL v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v25 = v24 + 5;
        do
        {
          uint64_t v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        BOOL v24 = v25 - 5;
      }
      uint64_t v27 = v24[3];
      unint64_t v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      uint64_t v29 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27) + 1464);
      uint64_t v30 = **(void **)(a1 + 8);
      uint64_t v31 = *(void **)v30;
      BOOL v32 = *(void **)(v30 + 8);
      if (v31 != v32)
      {
        while (*v31 != 0x41D4E9297E100630)
        {
          v31 += 5;
          if (v31 == v32) {
            goto LABEL_37;
          }
        }
      }
      if (v31 == v32)
      {
LABEL_37:
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = (void *)v31[3];
        uint64_t v33 = (std::__shared_weak_count *)v31[4];
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      uint64_t v35 = (uint64_t)(v34 + 37);
      unint64_t v36 = *v23;
      unint64_t v37 = *v23;
      uint64_t v38 = v34[50];
      unint64_t v39 = (v34[51] - v38) >> 3;
      if (v37 < v39
        && (uint64_t v40 = *(void *)(v38 + 8 * v37)) != 0
        && HIDWORD(v36) == HIDWORD(v40)
        && ((uint64_t v41 = v34[53], v41 + 16 * v40 != v34[54]) ? (v42 = v41 == 0) : (v42 = 1), !v42))
      {
        uint64_t v51 = *(void *)(v38 + 8 * v37);
        uint64_t v52 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v34 + 37), v36, v23);
        ++v52[3];
        uint64_t v53 = v41 + 16 * v51;
        uint64_t v11 = v91;
        unint64_t v43 = *(void **)(v53 + 8);
        unint64_t v36 = *v23;
        uint64_t v38 = v34[50];
        unint64_t v37 = *v23;
        if (v37 >= (v34[51] - v38) >> 3) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v43 = 0;
        if (v37 >= v39) {
          goto LABEL_57;
        }
      }
      uint64_t v44 = *(void *)(v38 + 8 * v37);
      if (v44 && HIDWORD(v36) == HIDWORD(v44))
      {
        uint64_t v45 = v34[53];
        uint64_t v46 = (void **)v34[54];
        uint64_t v47 = (void **)(v45 + 16 * v44);
        if (v47 != v46 && v45 != 0)
        {
          uint64_t v49 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v35, v36, v23);
          ++v49[3];
          uint64_t v50 = *v47;
          if (!v29) {
            goto LABEL_105;
          }
          goto LABEL_58;
        }
      }
LABEL_57:
      uint64_t v50 = 0;
      if (!v29) {
        goto LABEL_105;
      }
LABEL_58:
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v54 = v43[1];
      if (v54)
      {
        unint64_t v55 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index;
        uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index >= v54) {
            uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index % v54;
          }
        }
        else
        {
          uint64_t v57 = (v54 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index;
        }
        uint64_t v58 = *(void **)(*v43 + 8 * v57);
        if (v58)
        {
          uint64_t v59 = (void *)*v58;
          if (v59)
          {
            if (v56.u32[0] < 2uLL)
            {
              unint64_t v60 = v54 - 1;
              while (1)
              {
                uint64_t v62 = v59[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index == v62)
                {
                  if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index) {
                    goto LABEL_80;
                  }
                }
                else if ((v62 & v60) != v57)
                {
                  goto LABEL_105;
                }
                uint64_t v59 = (void *)*v59;
                if (!v59) {
                  goto LABEL_105;
                }
              }
            }
            do
            {
              unint64_t v61 = v59[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index == v61)
              {
                if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index)
                {
LABEL_80:
                  {
                    if (v90)
                    {
                      md::typeToIntMap(v90);
                      uint64_t v11 = v91;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_131;
                  }
                  uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v63.i16[0] = vaddlv_u8(v63);
                  if (v63.u32[0] > 1uLL)
                  {
                    unint64_t v64 = v55;
                    if (v55 >= qword_1E957F030) {
                      unint64_t v64 = v55 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v64 = (qword_1E957F030 - 1) & v55;
                  }
                  uint8x8_t v65 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v64);
                  if (!v65 || (uint64_t v66 = *v65) == 0) {
LABEL_131:
                  }
                    abort();
                  if (v63.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v68 = v66[1];
                      if ((uint64_t *)v55 == v68)
                      {
                        if (v66[2] == (uint64_t *)v55) {
                          goto LABEL_101;
                        }
                      }
                      else if (((unint64_t)v68 & (qword_1E957F030 - 1)) != v64)
                      {
                        goto LABEL_131;
                      }
                      uint64_t v66 = (uint64_t **)*v66;
                      if (!v66) {
                        goto LABEL_131;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v67 = (unint64_t)v66[1];
                    if (v55 == v67)
                    {
                      if (v66[2] == (uint64_t *)v55)
                      {
LABEL_101:
                        uint64_t v69 = *((int *)v66 + 6);
                        uint64_t v70 = *((int *)v66 + 7);
                        if (v69 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v69, v29, 1);
                        }
                        if (v70 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v70, v29, 2);
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      if (v67 >= qword_1E957F030) {
                        v67 %= (unint64_t)qword_1E957F030;
                      }
                      if (v67 != v64) {
                        goto LABEL_131;
                      }
                    }
                    uint64_t v66 = (uint64_t **)*v66;
                    if (!v66) {
                      goto LABEL_131;
                    }
                  }
                }
              }
              else
              {
                if (v61 >= v54) {
                  v61 %= v54;
                }
                if (v61 != v57) {
                  break;
                }
              }
              uint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
        }
      }
LABEL_105:
      uint64_t v71 = v97;
      uint64_t v10 = *(unint64_t **)(v94 + 32);
      if (++v97 != v10)
      {
        uint64_t v72 = v95[4];
        unint64_t v73 = (v95[5] - v72) >> 3;
        uint64_t v74 = v71 + 2;
        while (1)
        {
          unint64_t v75 = *((unsigned int *)v74 - 1);
          unint64_t v76 = v75 >> 7;
          if (v75 >> 7 < v73)
          {
            uint64_t v77 = *(void *)(v72 + 8 * v76);
            if (v77)
            {
              unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (v75 & 0x7F));
              uint64_t v80 = v95[7];
              uint64_t v79 = v95[8];
              if (v78 < (v79 - v80) >> 3)
              {
                uint64_t v81 = v80 + 8 * v78;
                if (v81 != v79 && *(_DWORD *)(v81 + 4) == v75)
                {
                  uint64_t v83 = v96[4];
                  if (v76 < (v96[5] - v83) >> 3)
                  {
                    uint64_t v84 = *(void *)(v83 + 8 * v76);
                    if (v84)
                    {
                      unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * (v75 & 0x7F));
                      uint64_t v87 = v96[7];
                      uint64_t v86 = v96[8];
                      if (v85 < (v86 - v87) >> 3)
                      {
                        uint64_t v88 = v87 + 8 * v85;
                        if (v88 != v86 && *(_DWORD *)(v88 + 4) == v75) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v97 = v74;
          BOOL v20 = v74++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v74 - 1;
      }
LABEL_9:
      if (v93 == v10) {
        goto LABEL_130;
      }
    }
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_130:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A195CD18(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::GlobeMatrix>(v3);
  v117[0] = -1.33557637e-247;
  int8x8_t v6 = v3[16];
  uint64_t v109 = v2;
  if (!*(void *)&v6) {
    goto LABEL_21;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0x8CADE1E37F052ADDLL;
    if (*(void *)&v6 <= 0x8CADE1E37F052ADDLL) {
      unint64_t v8 = 0x8CADE1E37F052ADDLL % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & 0x8CADE1E37F052ADDLL;
  }
  uint64_t v9 = *(void **)(*(void *)&v3[15] + 8 * v8);
  if (!v9 || (uint64_t v10 = (void *)*v9) == 0) {
LABEL_21:
  }
    operator new();
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v6 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == 0x8CADE1E37F052ADDLL)
      {
        if (v10[2] == 0x8CADE1E37F052ADDLL) {
          goto LABEL_130;
        }
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_21;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == 0x8CADE1E37F052ADDLL) {
      break;
    }
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
    if (v12 != v8) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_21;
    }
  }
  if (v10[2] != 0x8CADE1E37F052ADDLL) {
    goto LABEL_11;
  }
LABEL_130:
  uint64_t v107 = (void *)v10[3];
  uint64_t v14 = (void *)(v4 + 32);
  if (v5[8] - v5[7] < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v14 = v5 + 4;
  }
  if (v107[8] - v107[7] < v14[4] - v14[3]) {
    uint64_t v14 = v107 + 4;
  }
  unint64_t v15 = (void *)v14[3];
  unint64_t v111 = v14;
  unint64_t v112 = (void *)v4;
  uint64_t v113 = v5;
  uint64_t v114 = v107;
  unint64_t v115 = v15;
  uint64_t v110 = (void *)v14[4];
  if (v110 != v15
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
  {
    uint64_t v16 = v15 + 1;
    do
    {
      unint64_t v15 = v16;
      unint64_t v115 = v16;
      if (v16 == v110) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
      uint64_t v16 = v15 + 1;
    }
    while (!isValid);
  }
  if (v110 == v15)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    int v108 = result;
    do
    {
      void *result = *v15;
      unint64_t v20 = *v15;
      uint64_t v21 = HIDWORD(*v15);
      unint64_t v22 = *v15 >> 39;
      uint64_t v23 = v5[4];
      if (v22 < (v5[5] - v23) >> 3
        && (uint64_t v24 = *(void *)(v23 + 8 * v22)) != 0
        && (unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v27 = v5[7],
            uint64_t v26 = v5[8],
            v25 < (v26 - v27) >> 3)
        && ((uint64_t v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == v21) : (v29 = 0), v29))
      {
        uint64_t v30 = (unint64_t *)(v5[10] + 8 * v25);
      }
      else
      {
        uint64_t v30 = (unint64_t *)v5[11];
      }
      uint64_t v31 = v107[4];
      if (v22 < (v107[5] - v31) >> 3
        && (uint64_t v32 = *(void *)(v31 + 8 * v22)) != 0
        && (unint64_t v33 = *(unsigned __int16 *)(v32 + 2 * (HIDWORD(v20) & 0x7F)),
            uint64_t v35 = v107[7],
            uint64_t v34 = v107[8],
            v33 < (v34 - v35) >> 3)
        && ((uint64_t v36 = v35 + 8 * v33, v36 != v34) ? (v37 = *(_DWORD *)(v36 + 4) == v21) : (v37 = 0), v37))
      {
        uint64_t v38 = (unint64_t *)(v107[10] + 8 * v33);
      }
      else
      {
        uint64_t v38 = (unint64_t *)v107[11];
      }
      uint64_t v39 = **(void **)(v2 + 8);
      uint64_t v40 = *(void **)v39;
      uint64_t v41 = *(void **)(v39 + 8);
      if (v40 != v41)
      {
        while (*v40 != 0x41D4E9297E100630)
        {
          v40 += 5;
          if (v40 == v41) {
            goto LABEL_60;
          }
        }
      }
      if (v40 == v41)
      {
LABEL_60:
        BOOL v42 = 0;
      }
      else
      {
        BOOL v42 = (void *)v40[3];
        unint64_t v43 = (std::__shared_weak_count *)v40[4];
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      uint64_t v44 = ***(uint64_t ****)(v2 + 8);
      if (v44 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v44 != 0x22D45F5AAD4BF408)
      {
        uint64_t v45 = v44 + 5;
        do
        {
          uint64_t v46 = *v45;
          v45 += 5;
        }
        while (v46 != 0x22D45F5AAD4BF408);
        uint64_t v44 = v45 - 5;
      }
      uint64_t v47 = (uint64_t (***)(void))v44[3];
      BOOL v48 = (std::__shared_weak_count *)v44[4];
      if (v48)
      {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      uint64_t v49 = (md::LayoutContext *)(**v47)(v47);
      uint64_t v50 = md::LayoutContext::frameState(v49);
      uint64_t v51 = (void *)*((void *)v49 + 1);
      int8x8_t v52 = (int8x8_t)v51[1];
      uint64_t v2 = v109;
      if (v52)
      {
        uint8x8_t v53 = (uint8x8_t)vcnt_s8(v52);
        v53.i16[0] = vaddlv_u8(v53);
        if (v53.u32[0] > 1uLL)
        {
          uint64_t v54 = 0x1AF456233693CD46;
          if (*(void *)&v52 <= 0x1AF456233693CD46uLL) {
            uint64_t v54 = 0x1AF456233693CD46uLL % *(void *)&v52;
          }
        }
        else
        {
          uint64_t v54 = (*(void *)&v52 - 1) & 0x1AF456233693CD46;
        }
        unint64_t v55 = *(void **)(*v51 + 8 * v54);
        if (v55)
        {
          uint8x8_t v56 = (void *)*v55;
          if (v56)
          {
            if (v53.u32[0] < 2uLL)
            {
              uint64_t v57 = *(void *)&v52 - 1;
              while (1)
              {
                uint64_t v59 = v56[1];
                if (v59 == 0x1AF456233693CD46)
                {
                  if (v56[2] == 0x1AF456233693CD46) {
                    goto LABEL_89;
                  }
                }
                else if ((v59 & v57) != v54)
                {
                  goto LABEL_89;
                }
                uint8x8_t v56 = (void *)*v56;
                if (!v56) {
                  goto LABEL_89;
                }
              }
            }
            do
            {
              unint64_t v58 = v56[1];
              if (v58 == 0x1AF456233693CD46)
              {
                if (v56[2] == 0x1AF456233693CD46) {
                  break;
                }
              }
              else
              {
                if (v58 >= *(void *)&v52) {
                  v58 %= *(void *)&v52;
                }
                if (v58 != v54) {
                  break;
                }
              }
              uint8x8_t v56 = (void *)*v56;
            }
            while (v56);
          }
        }
      }
LABEL_89:
      gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v118, (const Camera *)(v50 + 128));
      double v60 = -(v121 * v123 - v120 * v124) - (v121 * v123 - v120 * v124);
      double v61 = -(v119 * v124 - v121 * v122) - (v119 * v124 - v121 * v122);
      double v62 = -(v120 * v122 - v119 * v123) - (v120 * v122 - v119 * v123);
      double v63 = -(v62 * v122 - (-(v120 - v60 * v124) - v61 * v125));
      double v64 = -(v119 + v60 * v125 + v61 * v124 - v62 * v123);
      double v65 = v121 + v60 * v123 + v62 * v125;
      double v66 = -(v123 * (v123 * -2.0));
      double v67 = v124 * -2.0 * v125;
      double v68 = v125 * (v123 * -2.0);
      double v69 = v122 * -2.0 * v122 + 1.0;
      double v70 = v125 * (v122 * -2.0);
      v117[0] = 1.0 - (v66 - v124 * (v124 * -2.0));
      v117[1] = v67 - v123 * (v122 * -2.0);
      v117[4] = -(v123 * (v122 * -2.0)) - v67;
      v117[5] = v69 - -(v124 * (v124 * -2.0));
      v117[8] = v68 - v124 * (v122 * -2.0);
      v117[9] = -(v124 * (v123 * -2.0)) - v70;
      v117[2] = -(v124 * (v122 * -2.0)) - v68;
      v117[6] = v70 - v124 * (v123 * -2.0);
      v117[10] = v69 - v66;
      v117[3] = 0.0;
      v117[7] = 0.0;
      v117[11] = 0.0;
      v117[12] = v64;
      v117[13] = v63;
      v117[14] = -(v65 - v61 * v122);
      v117[15] = 1.0;
      unint64_t v71 = *v38;
      *(void *)&v116[0] = v71;
      uint64_t v72 = v42[1166];
      if (v71 < (unint64_t)((v42[1167] - v72) >> 3)
        && (uint64_t v73 = *(void *)(v72 + 8 * v71)) != 0
        && HIDWORD(v71) == HIDWORD(v73))
      {
        unint64_t v74 = v42[1169] + ((unint64_t)*(void *)(v72 + 8 * v71) << 8);
        unint64_t v75 = v42[1170];
      }
      else
      {
        unint64_t v75 = v42[1170];
        unint64_t v74 = v75;
      }
      if (v74 == v75) {
        unint64_t v76 = 0;
      }
      else {
        unint64_t v76 = (_OWORD *)v74;
      }
      if (v76)
      {
        uint64_t v77 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v42 + 1158), v71, v116);
        ++v77[3];
      }
      GlobeMatrix = (double *)md::VKMRenderResourcesStore::getGlobeMatrix((uint64_t)v42, *v30);
      gm::operator*<double,4,4,4>((double *)v116, v117, GlobeMatrix);
      long long v79 = v116[1];
      _OWORD *v76 = v116[0];
      v76[1] = v79;
      long long v80 = v116[3];
      v76[2] = v116[2];
      v76[3] = v80;
      long long v81 = v116[5];
      v76[4] = v116[4];
      v76[5] = v81;
      long long v82 = v116[7];
      v76[6] = v116[6];
      v76[7] = v82;
      unint64_t v15 = (void *)v111[4];
      uint64_t v19 = v115 + 1;
      unint64_t v115 = v19;
      if (v19 != v15)
      {
        uint64_t v83 = v112[4];
        while (1)
        {
          unint64_t v84 = *((unsigned int *)v19 + 1);
          unint64_t v85 = v84 >> 7;
          if (v84 >> 7 < (v112[5] - v83) >> 3)
          {
            uint64_t v86 = *(void *)(v83 + 8 * v85);
            if (v86)
            {
              uint64_t v87 = v84 & 0x7F;
              unint64_t v88 = *(unsigned __int16 *)(v86 + 2 * v87);
              uint64_t v90 = v112[7];
              uint64_t v89 = v112[8];
              if (v88 < (v89 - v90) >> 3)
              {
                uint64_t v91 = v90 + 8 * v88;
                if (v91 != v89 && *(_DWORD *)(v91 + 4) == v84)
                {
                  uint64_t v93 = v113[4];
                  if (v85 < (v113[5] - v93) >> 3)
                  {
                    uint64_t v94 = *(void *)(v93 + 8 * v85);
                    if (v94)
                    {
                      unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * v87);
                      uint64_t v97 = v113[7];
                      uint64_t v96 = v113[8];
                      if (v95 < (v96 - v97) >> 3)
                      {
                        uint64_t v98 = v97 + 8 * v95;
                        if (v98 != v96 && *(_DWORD *)(v98 + 4) == v84)
                        {
                          uint64_t v100 = v114[4];
                          if (v85 < (v114[5] - v100) >> 3)
                          {
                            uint64_t v101 = *(void *)(v100 + 8 * v85);
                            if (v101)
                            {
                              unint64_t v102 = *(unsigned __int16 *)(v101 + 2 * v87);
                              uint64_t v104 = v114[7];
                              uint64_t v103 = v114[8];
                              if (v102 < (v103 - v104) >> 3)
                              {
                                uint64_t v105 = v104 + 8 * v102;
                                if (*(_DWORD *)(v105 + 4) == v84 && v105 != v103) {
                                  break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v19 == v15)
          {
            uint64_t v19 = v15;
            goto LABEL_34;
          }
        }
        unint64_t v15 = v19;
LABEL_34:
        unint64_t v115 = v19;
      }
      uint64_t result = v108;
    }
    while (v110 != v15);
  }
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A195D670(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A195D9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(v3);
  int8x8_t v6 = v3;
  uint8x8_t v7 = (void *)v4;
  uint64_t v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v4 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v5 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  uint64_t v152 = v10;
  unint64_t v153 = (void *)v4;
  uint64_t v154 = (void *)v5;
  size_t v155 = (void *)v8;
  unint64_t v12 = *(void **)(v10 + 24);
  uint64_t v11 = *(void **)(v10 + 32);
  uint64_t v156 = v12;
  uint64_t v151 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152))
  {
    uint64_t v13 = v12 + 1;
    do
    {
      unint64_t v12 = v13;
      uint64_t v156 = v13;
      if (v13 == v151) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152);
      uint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v151 != v12)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v148 = v7;
    uint64_t v149 = result;
    uint64_t v150 = v9;
    while (1)
    {
      void *result = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v26 = (uint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        uint64_t v26 = (uint64_t *)v7[11];
      }
      uint64_t v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v9[7],
            uint64_t v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v9[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v2 + 8);
      uint64_t v38 = *(void **)v37;
      uint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_41;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_41:
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = (void *)v38[3];
        uint64_t v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v42 = **(void **)(v2 + 8);
      unint64_t v43 = *(void **)v42;
      uint64_t v44 = *(void **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x348A0B0E758C07C2)
        {
          v43 += 5;
          if (v43 == v44) {
            goto LABEL_50;
          }
        }
      }
      if (v43 == v44)
      {
LABEL_50:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = v43[3];
        uint64_t v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      uint64_t v47 = (uint64_t)(v41 + 37);
      unint64_t v48 = *v36;
      unint64_t v49 = *v36;
      uint64_t v50 = v41[50];
      unint64_t v51 = (v41[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v41[53], v53 + 16 * v52 != v41[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v63 = v2;
        uint64_t v64 = *(void *)(v50 + 8 * v49);
        double v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v48, v36);
        ++v65[3];
        uint64_t v66 = v53 + 16 * v64;
        uint64_t v2 = v63;
        uint8x8_t v7 = v148;
        unint64_t v55 = *(void **)(v66 + 8);
        unint64_t v48 = *v36;
        uint64_t v50 = v41[50];
        unint64_t v49 = *v36;
        if (v49 >= (v41[51] - v50) >> 3) {
          goto LABEL_70;
        }
      }
      else
      {
        unint64_t v55 = 0;
        if (v49 >= v51) {
          goto LABEL_70;
        }
      }
      uint64_t v56 = *(void *)(v50 + 8 * v49);
      if (!v56
        || HIDWORD(v48) != HIDWORD(v56)
        || ((uint64_t v57 = v41[53], v58 = (uint64_t *)v41[54], v59 = (uint64_t *)(v57 + 16 * v56), v59 != v58)
          ? (BOOL v60 = v57 == 0)
          : (BOOL v60 = 1),
            v60))
      {
LABEL_70:
        uint64_t v62 = 0;
        goto LABEL_71;
      }
      double v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v36);
      ++v61[3];
      uint64_t v62 = *v59;
LABEL_71:
      uint64_t v67 = *v26;
      double v68 = (std::__shared_mutex_base *)(v45 + 104);
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v69 = *(void *)(v45 + 600);
      if (v67 < (unint64_t)((*(void *)(v45 + 608) - v69) >> 3)
        && ((uint64_t v70 = *(void *)(v69 + 8 * v67)) != 0 ? (v71 = HIDWORD(v67) == HIDWORD(v70)) : (v71 = 0),
            v71))
      {
        uint64_t v73 = (uint64_t *)(*(void *)(v45 + 624) + 40 * v70);
        uint64_t v72 = *(uint64_t **)(v45 + 632);
      }
      else
      {
        uint64_t v72 = *(uint64_t **)(v45 + 632);
        uint64_t v73 = v72;
      }
      std::__shared_mutex_base::unlock_shared(v68);
      uint64_t v74 = 0;
      if (v73 != v72 && v73) {
        uint64_t v74 = *v73;
      }
      {
        gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v75 = v55[1];
      if (!v75) {
        goto LABEL_152;
      }
      unint64_t v76 = gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index;
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        uint64_t v78 = gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index;
        if (gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index >= v75) {
          uint64_t v78 = gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index % v75;
        }
      }
      else
      {
        uint64_t v78 = (v75 - 1) & gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index;
      }
      long long v79 = *(void **)(*v55 + 8 * v78);
      if (!v79) {
        goto LABEL_152;
      }
      long long v80 = (void *)*v79;
      if (!v80) {
        goto LABEL_152;
      }
      if (v77.u32[0] < 2uLL)
      {
        unint64_t v81 = v75 - 1;
        while (1)
        {
          uint64_t v83 = v80[1];
          if (gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index == v83)
          {
            if (v80[2] == gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index) {
              goto LABEL_103;
            }
          }
          else if ((v83 & v81) != v78)
          {
            goto LABEL_152;
          }
          long long v80 = (void *)*v80;
          if (!v80) {
            goto LABEL_152;
          }
        }
      }
      while (1)
      {
        unint64_t v82 = v80[1];
        if (gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index == v82) {
          break;
        }
        if (v82 >= v75) {
          v82 %= v75;
        }
        if (v82 != v78) {
          goto LABEL_152;
        }
LABEL_91:
        long long v80 = (void *)*v80;
        if (!v80) {
          goto LABEL_152;
        }
      }
      if (v80[2] != gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index) {
        goto LABEL_91;
      }
LABEL_103:
      {
        if (v147)
        {
          md::typeToIntMap(v147);
          uint8x8_t v7 = v148;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_187;
      }
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        unint64_t v85 = v76;
        if (v76 >= qword_1E957F030) {
          unint64_t v85 = v76 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v85 = (qword_1E957F030 - 1) & v76;
      }
      uint64_t v86 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v85);
      if (!v86 || (uint64_t v87 = *v86) == 0) {
LABEL_187:
      }
        abort();
      if (v84.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v89 = v87[1];
          if ((uint64_t *)v76 == v89)
          {
            if (v87[2] == (uint64_t *)v76) {
              goto LABEL_124;
            }
          }
          else if (((unint64_t)v89 & (qword_1E957F030 - 1)) != v85)
          {
            goto LABEL_187;
          }
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v87[1];
        if (v76 != v88)
        {
          if (v88 >= qword_1E957F030) {
            v88 %= (unint64_t)qword_1E957F030;
          }
          if (v88 != v85) {
            goto LABEL_187;
          }
LABEL_114:
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
          continue;
        }
        break;
      }
      if (v87[2] != (uint64_t *)v76) {
        goto LABEL_114;
      }
LABEL_124:
      uint64_t v91 = *((int *)v87 + 6);
      uint64_t v90 = *((int *)v87 + 7);
      if (v91 != -1)
      {
        uint64_t v92 = *(void *)(v62 + 16);
        if (v92)
        {
          uint64_t v93 = *(void *)(*(void *)(v92 + 48) + 72);
          uint64_t v94 = *(void *)(v93 + 8);
          uint64_t v95 = *(void *)(v94 + 72);
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = *(void *)(v94 + 64);
            uint64_t v98 = (unsigned __int8 *)(v97 + 1);
            while (1)
            {
              int v99 = *v98;
              v98 += 2;
              if (v99 == v91) {
                break;
              }
              if (v95 == ++v96) {
                goto LABEL_130;
              }
            }
            uint64_t v106 = (unsigned __int8 *)(v97 + 2 * v96);
LABEL_137:
            *(void *)(*(void *)(v62 + 96) + 8 * *v106) = v74;
          }
          else
          {
LABEL_130:
            uint64_t v100 = *(void *)(v93 + 24);
            uint64_t v101 = *(void *)(v100 + 72);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = *(void *)(v100 + 64);
              uint64_t v104 = (unsigned __int8 *)(v103 + 1);
              while (1)
              {
                int v105 = *v104;
                v104 += 2;
                if (v105 == v91) {
                  break;
                }
                if (v101 == ++v102) {
                  goto LABEL_138;
                }
              }
              uint64_t v106 = (unsigned __int8 *)(v103 + 2 * v102);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v90 != -1)
      {
        uint64_t v107 = *(void *)(v62 + 16);
        if (v107)
        {
          uint64_t v108 = *(void *)(*(void *)(v107 + 48) + 72);
          uint64_t v109 = *(void *)(v108 + 8);
          uint64_t v110 = *(void *)(v109 + 72);
          if (v110)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *(void *)(v109 + 64);
            uint64_t v113 = (unsigned __int8 *)(v112 + 1);
            while (1)
            {
              int v114 = *v113;
              v113 += 2;
              if (v114 == v90) {
                break;
              }
              if (v110 == ++v111) {
                goto LABEL_144;
              }
            }
            double v121 = (unsigned __int8 *)(v112 + 2 * v111);
LABEL_151:
            *(void *)(*(void *)(v62 + 96) + 8 * *v121) = v74;
          }
          else
          {
LABEL_144:
            uint64_t v115 = *(void *)(v108 + 24);
            uint64_t v116 = *(void *)(v115 + 72);
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v118 = *(void *)(v115 + 64);
              double v119 = (unsigned __int8 *)(v118 + 1);
              while (1)
              {
                int v120 = *v119;
                v119 += 2;
                if (v120 == v90) {
                  break;
                }
                if (v116 == ++v117) {
                  goto LABEL_152;
                }
              }
              double v121 = (unsigned __int8 *)(v118 + 2 * v117);
              goto LABEL_151;
            }
          }
        }
      }
LABEL_152:
      unint64_t v12 = *(void **)(v152 + 32);
      double v122 = v156 + 1;
      uint64_t v156 = v122;
      if (v122 == v12)
      {
        uint64_t v9 = v150;
      }
      else
      {
        uint64_t v123 = v153[4];
        uint64_t v9 = v150;
        do
        {
          unint64_t v124 = *((unsigned int *)v122 + 1);
          unint64_t v125 = v124 >> 7;
          if (v124 >> 7 < (v153[5] - v123) >> 3)
          {
            uint64_t v126 = *(void *)(v123 + 8 * v125);
            if (v126)
            {
              uint64_t v127 = v124 & 0x7F;
              unint64_t v128 = *(unsigned __int16 *)(v126 + 2 * v127);
              uint64_t v130 = v153[7];
              uint64_t v129 = v153[8];
              if (v128 < (v129 - v130) >> 3)
              {
                uint64_t v131 = v130 + 8 * v128;
                if (v131 != v129 && *(_DWORD *)(v131 + 4) == v124)
                {
                  uint64_t v133 = v154[4];
                  if (v125 < (v154[5] - v133) >> 3)
                  {
                    uint64_t v134 = *(void *)(v133 + 8 * v125);
                    if (v134)
                    {
                      unint64_t v135 = *(unsigned __int16 *)(v134 + 2 * v127);
                      uint64_t v137 = v154[7];
                      uint64_t v136 = v154[8];
                      if (v135 < (v136 - v137) >> 3)
                      {
                        uint64_t v138 = v137 + 8 * v135;
                        if (v138 != v136 && *(_DWORD *)(v138 + 4) == v124)
                        {
                          uint64_t v140 = v155[4];
                          if (v125 < (v155[5] - v140) >> 3)
                          {
                            uint64_t v141 = *(void *)(v140 + 8 * v125);
                            if (v141)
                            {
                              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * v127);
                              uint64_t v144 = v155[7];
                              uint64_t v143 = v155[8];
                              if (v142 < (v143 - v144) >> 3)
                              {
                                uint64_t v145 = v144 + 8 * v142;
                                if (*(_DWORD *)(v145 + 4) == v124 && v145 != v143)
                                {
                                  unint64_t v12 = v122;
                                  goto LABEL_180;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v122;
        }
        while (v122 != v12);
        double v122 = v12;
LABEL_180:
        uint64_t v156 = v122;
      }
      uint64_t result = v149;
      if (v151 == v12) {
        goto LABEL_186;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_186:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A195E358(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ColorCorrectionFactorConstantHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  int8x8_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  int v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        uint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[1004];
      if (v55 < (unint64_t)((v38[1005] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[1007];
          unint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[1008] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>> const&>,std::tuple<>>((uint64_t)(v38 + 991), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index;
                }
                uint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  uint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        uint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint64_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (uint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              int v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              uint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            uint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      uint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A195EB20(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(v3);
  int8x8_t v6 = v3;
  uint8x8_t v7 = (void *)v4;
  uint64_t v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v4 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v5 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  uint64_t v152 = v10;
  unint64_t v153 = (void *)v4;
  uint64_t v154 = (void *)v5;
  size_t v155 = (void *)v8;
  unint64_t v12 = *(void **)(v10 + 24);
  uint64_t v11 = *(void **)(v10 + 32);
  uint64_t v156 = v12;
  uint64_t v151 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152))
  {
    uint64_t v13 = v12 + 1;
    do
    {
      unint64_t v12 = v13;
      uint64_t v156 = v13;
      if (v13 == v151) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152);
      uint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v151 != v12)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v148 = v7;
    uint64_t v149 = result;
    uint64_t v150 = v9;
    while (1)
    {
      void *result = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v26 = (unint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        uint64_t v26 = (unint64_t *)v7[11];
      }
      uint64_t v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v9[7],
            uint64_t v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v9[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v2 + 8);
      uint64_t v38 = *(void **)v37;
      uint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_41;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_41:
        unint64_t v41 = 0;
      }
      else
      {
        unint64_t v41 = (void *)v38[3];
        unint64_t v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v42 = **(void **)(v2 + 8);
      unint64_t v43 = *(void **)v42;
      uint64_t v44 = *(void **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x348A0B0E758C07C2)
        {
          v43 += 5;
          if (v43 == v44) {
            goto LABEL_50;
          }
        }
      }
      if (v43 == v44)
      {
LABEL_50:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = v43[3];
        BOOL v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      uint64_t v47 = (uint64_t)(v41 + 37);
      unint64_t v48 = *v36;
      unint64_t v49 = *v36;
      uint64_t v50 = v41[50];
      unint64_t v51 = (v41[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v41[53], v53 + 16 * v52 != v41[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v63 = v2;
        uint64_t v64 = *(void *)(v50 + 8 * v49);
        unint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v48, v36);
        ++v65[3];
        uint64_t v66 = v53 + 16 * v64;
        uint64_t v2 = v63;
        uint8x8_t v7 = v148;
        unint64_t v55 = *(void **)(v66 + 8);
        unint64_t v48 = *v36;
        uint64_t v50 = v41[50];
        unint64_t v49 = *v36;
        if (v49 >= (v41[51] - v50) >> 3) {
          goto LABEL_70;
        }
      }
      else
      {
        unint64_t v55 = 0;
        if (v49 >= v51) {
          goto LABEL_70;
        }
      }
      uint64_t v56 = *(void *)(v50 + 8 * v49);
      if (!v56
        || HIDWORD(v48) != HIDWORD(v56)
        || ((uint64_t v57 = v41[53], v58 = (uint64_t *)v41[54], v59 = (uint64_t *)(v57 + 16 * v56), v59 != v58)
          ? (BOOL v60 = v57 == 0)
          : (BOOL v60 = 1),
            v60))
      {
LABEL_70:
        uint64_t v62 = 0;
        goto LABEL_71;
      }
      unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v36);
      ++v61[3];
      uint64_t v62 = *v59;
LABEL_71:
      unint64_t v67 = *v26;
      unint64_t v157 = v67;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v68 = *(void *)(v45 + 504);
      if (v67 < (unint64_t)((*(void *)(v45 + 512) - v68) >> 3)
        && ((uint64_t v69 = *(void *)(v68 + 8 * v67)) != 0 ? (v70 = HIDWORD(v67) == HIDWORD(v69)) : (v70 = 0),
            v70))
      {
        unint64_t v72 = (uint64_t *)(*(void *)(v45 + 528) + 40 * v69);
        uint64_t v71 = *(uint64_t **)(v45 + 536);
      }
      else
      {
        uint64_t v71 = *(uint64_t **)(v45 + 536);
        unint64_t v72 = v71;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v73 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v45 + 440), v157, &v157);
      uint64_t v74 = 0;
      ++v73[3];
      if (v72 != v71 && v72) {
        uint64_t v74 = *v72;
      }
      {
        gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v75 = v55[1];
      if (!v75) {
        goto LABEL_152;
      }
      unint64_t v76 = gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index;
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        uint64_t v78 = gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index >= v75) {
          uint64_t v78 = gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index % v75;
        }
      }
      else
      {
        uint64_t v78 = (v75 - 1) & gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index;
      }
      unint64_t v79 = *(void **)(*v55 + 8 * v78);
      if (!v79) {
        goto LABEL_152;
      }
      uint64_t v80 = (void *)*v79;
      if (!v80) {
        goto LABEL_152;
      }
      if (v77.u32[0] < 2uLL)
      {
        unint64_t v81 = v75 - 1;
        while (1)
        {
          uint64_t v83 = v80[1];
          if (gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index == v83)
          {
            if (v80[2] == gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index) {
              goto LABEL_103;
            }
          }
          else if ((v83 & v81) != v78)
          {
            goto LABEL_152;
          }
          uint64_t v80 = (void *)*v80;
          if (!v80) {
            goto LABEL_152;
          }
        }
      }
      while (1)
      {
        unint64_t v82 = v80[1];
        if (gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index == v82) {
          break;
        }
        if (v82 >= v75) {
          v82 %= v75;
        }
        if (v82 != v78) {
          goto LABEL_152;
        }
LABEL_91:
        uint64_t v80 = (void *)*v80;
        if (!v80) {
          goto LABEL_152;
        }
      }
      if (v80[2] != gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index) {
        goto LABEL_91;
      }
LABEL_103:
      {
        if (v147)
        {
          md::typeToIntMap(v147);
          uint8x8_t v7 = v148;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_187;
      }
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        unint64_t v85 = v76;
        if (v76 >= qword_1E957F030) {
          unint64_t v85 = v76 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v85 = (qword_1E957F030 - 1) & v76;
      }
      uint64_t v86 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v85);
      if (!v86 || (uint64_t v87 = *v86) == 0) {
LABEL_187:
      }
        abort();
      if (v84.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v89 = v87[1];
          if ((uint64_t *)v76 == v89)
          {
            if (v87[2] == (uint64_t *)v76) {
              goto LABEL_124;
            }
          }
          else if (((unint64_t)v89 & (qword_1E957F030 - 1)) != v85)
          {
            goto LABEL_187;
          }
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v87[1];
        if (v76 != v88)
        {
          if (v88 >= qword_1E957F030) {
            v88 %= (unint64_t)qword_1E957F030;
          }
          if (v88 != v85) {
            goto LABEL_187;
          }
LABEL_114:
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
          continue;
        }
        break;
      }
      if (v87[2] != (uint64_t *)v76) {
        goto LABEL_114;
      }
LABEL_124:
      uint64_t v91 = *((int *)v87 + 6);
      uint64_t v90 = *((int *)v87 + 7);
      if (v91 != -1)
      {
        uint64_t v92 = *(void *)(v62 + 16);
        if (v92)
        {
          uint64_t v93 = *(void *)(*(void *)(v92 + 48) + 72);
          uint64_t v94 = *(void *)(v93 + 8);
          uint64_t v95 = *(void *)(v94 + 72);
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = *(void *)(v94 + 64);
            unint64_t v98 = (unsigned __int8 *)(v97 + 1);
            while (1)
            {
              int v99 = *v98;
              v98 += 2;
              if (v99 == v91) {
                break;
              }
              if (v95 == ++v96) {
                goto LABEL_130;
              }
            }
            uint64_t v106 = (unsigned __int8 *)(v97 + 2 * v96);
LABEL_137:
            *(void *)(*(void *)(v62 + 96) + 8 * *v106) = v74;
          }
          else
          {
LABEL_130:
            uint64_t v100 = *(void *)(v93 + 24);
            uint64_t v101 = *(void *)(v100 + 72);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = *(void *)(v100 + 64);
              unint64_t v104 = (unsigned __int8 *)(v103 + 1);
              while (1)
              {
                int v105 = *v104;
                v104 += 2;
                if (v105 == v91) {
                  break;
                }
                if (v101 == ++v102) {
                  goto LABEL_138;
                }
              }
              uint64_t v106 = (unsigned __int8 *)(v103 + 2 * v102);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v90 != -1)
      {
        uint64_t v107 = *(void *)(v62 + 16);
        if (v107)
        {
          uint64_t v108 = *(void *)(*(void *)(v107 + 48) + 72);
          uint64_t v109 = *(void *)(v108 + 8);
          uint64_t v110 = *(void *)(v109 + 72);
          if (v110)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *(void *)(v109 + 64);
            uint64_t v113 = (unsigned __int8 *)(v112 + 1);
            while (1)
            {
              int v114 = *v113;
              v113 += 2;
              if (v114 == v90) {
                break;
              }
              if (v110 == ++v111) {
                goto LABEL_144;
              }
            }
            double v121 = (unsigned __int8 *)(v112 + 2 * v111);
LABEL_151:
            *(void *)(*(void *)(v62 + 96) + 8 * *v121) = v74;
          }
          else
          {
LABEL_144:
            uint64_t v115 = *(void *)(v108 + 24);
            uint64_t v116 = *(void *)(v115 + 72);
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v118 = *(void *)(v115 + 64);
              double v119 = (unsigned __int8 *)(v118 + 1);
              while (1)
              {
                int v120 = *v119;
                v119 += 2;
                if (v120 == v90) {
                  break;
                }
                if (v116 == ++v117) {
                  goto LABEL_152;
                }
              }
              double v121 = (unsigned __int8 *)(v118 + 2 * v117);
              goto LABEL_151;
            }
          }
        }
      }
LABEL_152:
      unint64_t v12 = *(void **)(v152 + 32);
      double v122 = v156 + 1;
      uint64_t v156 = v122;
      if (v122 == v12)
      {
        uint64_t result = v149;
        uint64_t v9 = v150;
      }
      else
      {
        uint64_t v123 = v153[4];
        uint64_t result = v149;
        uint64_t v9 = v150;
        do
        {
          unint64_t v124 = *((unsigned int *)v122 + 1);
          unint64_t v125 = v124 >> 7;
          if (v124 >> 7 < (v153[5] - v123) >> 3)
          {
            uint64_t v126 = *(void *)(v123 + 8 * v125);
            if (v126)
            {
              uint64_t v127 = v124 & 0x7F;
              unint64_t v128 = *(unsigned __int16 *)(v126 + 2 * v127);
              uint64_t v129 = v153[7];
              uint64_t v130 = v153[8];
              if (v128 < (v130 - v129) >> 3)
              {
                uint64_t v131 = v129 + 8 * v128;
                if (v131 != v130 && *(_DWORD *)(v131 + 4) == v124)
                {
                  uint64_t v133 = v154[4];
                  if (v125 < (v154[5] - v133) >> 3)
                  {
                    uint64_t v134 = *(void *)(v133 + 8 * v125);
                    if (v134)
                    {
                      unint64_t v135 = *(unsigned __int16 *)(v134 + 2 * v127);
                      uint64_t v136 = v154[7];
                      uint64_t v137 = v154[8];
                      if (v135 < (v137 - v136) >> 3)
                      {
                        uint64_t v138 = v136 + 8 * v135;
                        if (v138 != v137 && *(_DWORD *)(v138 + 4) == v124)
                        {
                          uint64_t v140 = v155[4];
                          if (v125 < (v155[5] - v140) >> 3)
                          {
                            uint64_t v141 = *(void *)(v140 + 8 * v125);
                            if (v141)
                            {
                              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * v127);
                              uint64_t v144 = v155[7];
                              uint64_t v143 = v155[8];
                              if (v142 < (v143 - v144) >> 3)
                              {
                                uint64_t v145 = v144 + 8 * v142;
                                if (*(_DWORD *)(v145 + 4) == v124 && v145 != v143)
                                {
                                  unint64_t v12 = v122;
                                  goto LABEL_180;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v122;
        }
        while (v122 != v12);
        double v122 = v12;
LABEL_180:
        uint64_t v156 = v122;
      }
      if (v151 == v12) {
        goto LABEL_186;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_186:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A195F498(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  int8x8_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v132 = v7;
  uint64_t v133 = v3;
  uint64_t v134 = (void *)v4;
  unint64_t v135 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v136 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132))
  {
    uint64_t v10 = v8 + 1;
    do
    {
      uint64_t v8 = v10;
      uint64_t v136 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132);
      uint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_171;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v130 = result;
  do
  {
LABEL_13:
    void *result = *v8;
    unint64_t v13 = *v8;
    uint64_t v14 = HIDWORD(*v8);
    unint64_t v15 = *v8 >> 39;
    uint64_t v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
      && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v14) : (BOOL v22 = 0), v22))
    {
      uint64_t v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      uint64_t v23 = (unint64_t *)v3[11];
    }
    uint64_t v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (uint64_t v25 = *(void *)(v24 + 8 * v15)) != 0
      && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (BOOL v30 = *(_DWORD *)(v29 + 4) == v14) : (BOOL v30 = 0), v30))
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v6[10] + 8 * v26;
    }
    else
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v31;
    }
    if (v32 == v31) {
      BOOL v33 = 0;
    }
    else {
      BOOL v33 = (unint64_t *)v32;
    }
    uint64_t v34 = **(void **)(a1 + 8);
    uint64_t v35 = *(void **)v34;
    uint64_t v36 = *(void **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36) {
          goto LABEL_40;
        }
      }
    }
    if (v35 == v36)
    {
LABEL_40:
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = (void *)v35[3];
      uint64_t v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    unint64_t v39 = *v33;
    unint64_t v40 = *v33;
    uint64_t v41 = v37[50];
    unint64_t v42 = (v37[51] - v41) >> 3;
    if (v40 < v42
      && (uint64_t v43 = *(void *)(v41 + 8 * v40)) != 0
      && HIDWORD(v39) == HIDWORD(v43)
      && ((uint64_t v44 = v37[53], v44 + 16 * v43 != v37[54]) ? (v45 = v44 == 0) : (v45 = 1), !v45))
    {
      uint64_t v53 = *(void *)(v41 + 8 * v40);
      BOOL v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
      ++v54[3];
      BOOL v46 = *(void **)(v44 + 16 * v53 + 8);
      unint64_t v39 = *v33;
      uint64_t v41 = v37[50];
      unint64_t v40 = *v33;
      if (v40 >= (v37[51] - v41) >> 3) {
        goto LABEL_60;
      }
    }
    else
    {
      BOOL v46 = 0;
      if (v40 >= v42) {
        goto LABEL_60;
      }
    }
    uint64_t v47 = *(void *)(v41 + 8 * v40);
    if (!v47
      || HIDWORD(v39) != HIDWORD(v47)
      || ((uint64_t v48 = v37[53], v49 = (void *)(v48 + 16 * v47), v49 != (void *)v37[54])
        ? (BOOL v50 = v48 == 0)
        : (BOOL v50 = 1),
          v50))
    {
LABEL_60:
      uint64_t v52 = 0;
      goto LABEL_61;
    }
    unint64_t v51 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
    ++v51[3];
    uint64_t v52 = (void *)*v49;
LABEL_61:
    unint64_t v55 = *v23;
    unint64_t v137 = v55;
    uint64_t v56 = v37[1298];
    if (v55 < (unint64_t)((v37[1299] - v56) >> 3)
      && ((uint64_t v57 = *(void *)(v56 + 8 * v55)) != 0 ? (v58 = HIDWORD(v55) == HIDWORD(v57)) : (v58 = 0), v58))
    {
      BOOL v60 = (uint64_t *)(v37[1301] + 8 * v57);
      uint64_t v59 = (uint64_t *)v37[1302];
    }
    else
    {
      uint64_t v59 = (uint64_t *)v37[1302];
      BOOL v60 = v59;
    }
    unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v55, &v137);
    uint64_t v62 = 0;
    ++v61[3];
    if (v60 != v59 && v60) {
      uint64_t v62 = *v60;
    }
    {
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v63 = v46[1];
    if (!v63) {
      goto LABEL_134;
    }
    unint64_t v64 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index;
    uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index >= v63) {
        uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index % v63;
      }
    }
    else
    {
      uint64_t v66 = (v63 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index;
    }
    unint64_t v67 = *(void **)(*v46 + 8 * v66);
    if (!v67) {
      goto LABEL_134;
    }
    uint64_t v68 = (void *)*v67;
    if (!v68) {
      goto LABEL_134;
    }
    if (v65.u32[0] < 2uLL)
    {
      unint64_t v69 = v63 - 1;
      while (1)
      {
        uint64_t v71 = v68[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index == v71)
        {
          if (v68[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index) {
            goto LABEL_93;
          }
        }
        else if ((v71 & v69) != v66)
        {
          goto LABEL_134;
        }
        uint64_t v68 = (void *)*v68;
        if (!v68) {
          goto LABEL_134;
        }
      }
    }
    while (1)
    {
      unint64_t v70 = v68[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index == v70) {
        break;
      }
      if (v70 >= v63) {
        v70 %= v63;
      }
      if (v70 != v66) {
        goto LABEL_134;
      }
LABEL_81:
      uint64_t v68 = (void *)*v68;
      if (!v68) {
        goto LABEL_134;
      }
    }
    if (v68[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index) {
      goto LABEL_81;
    }
LABEL_93:
    {
      if (v129)
      {
        md::typeToIntMap(v129);
      }
    }
    if (!qword_1E957F030) {
      goto LABEL_172;
    }
    uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
    v72.i16[0] = vaddlv_u8(v72);
    if (v72.u32[0] > 1uLL)
    {
      unint64_t v73 = v64;
      if (v64 >= qword_1E957F030) {
        unint64_t v73 = v64 % qword_1E957F030;
      }
    }
    else
    {
      unint64_t v73 = (qword_1E957F030 - 1) & v64;
    }
    uint64_t v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
    if (!v74 || (unint64_t v75 = *v74) == 0) {
LABEL_172:
    }
      abort();
    if (v72.u32[0] < 2uLL)
    {
      while (1)
      {
        uint8x8_t v77 = v75[1];
        if ((uint64_t *)v64 == v77)
        {
          if (v75[2] == (uint64_t *)v64) {
            goto LABEL_114;
          }
        }
        else if (((unint64_t)v77 & (qword_1E957F030 - 1)) != v73)
        {
          goto LABEL_172;
        }
        unint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
      }
    }
    while (2)
    {
      unint64_t v76 = (unint64_t)v75[1];
      if (v64 != v76)
      {
        if (v76 >= qword_1E957F030) {
          v76 %= (unint64_t)qword_1E957F030;
        }
        if (v76 != v73) {
          goto LABEL_172;
        }
LABEL_104:
        unint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
        continue;
      }
      break;
    }
    if (v75[2] != (uint64_t *)v64) {
      goto LABEL_104;
    }
LABEL_114:
    uint64_t v78 = *((int *)v75 + 6);
    uint64_t v79 = *((int *)v75 + 7);
    if (v78 != -1)
    {
      uint64_t v80 = v52[2];
      if (v80
        && (uint64_t v81 = *(void *)(*(void *)(*(void *)(v80 + 48) + 72) + 8), (v82 = *(void *)(v81 + 56)) != 0))
      {
        uint64_t v83 = 0;
        uint64_t v84 = *(void *)(v81 + 48);
        unint64_t v85 = (unsigned __int8 *)(v84 + 1);
        while (1)
        {
          int v86 = *v85;
          v85 += 2;
          if (v86 == v78) {
            break;
          }
          if (v82 == ++v83) {
            goto LABEL_120;
          }
        }
        uint64_t v87 = *(unsigned __int8 *)(v84 + 2 * v83);
      }
      else
      {
LABEL_120:
        uint64_t v87 = -1;
      }
      uint64_t v88 = 16 * v87;
      unint64_t v89 = (void *)(v52[4] + v88);
      *unint64_t v89 = v62;
      v89[1] = 0;
      uint64_t v90 = (void *)(v52[16] + v88);
      uint64_t v91 = (std::__shared_weak_count *)v90[1];
      void *v90 = 0;
      v90[1] = 0;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v79 != -1)
    {
      uint64_t v92 = v52[2];
      if (v92
        && (uint64_t v93 = *(void *)(*(void *)(*(void *)(v92 + 48) + 72) + 24), (v94 = *(void *)(v93 + 56)) != 0))
      {
        uint64_t v95 = 0;
        uint64_t v96 = *(void *)(v93 + 48);
        uint64_t v97 = (unsigned __int8 *)(v96 + 1);
        while (1)
        {
          int v98 = *v97;
          v97 += 2;
          if (v98 == v79) {
            break;
          }
          if (v94 == ++v95) {
            goto LABEL_130;
          }
        }
        uint64_t v99 = *(unsigned __int8 *)(v96 + 2 * v95);
      }
      else
      {
LABEL_130:
        uint64_t v99 = -1;
      }
      uint64_t v100 = 16 * v99;
      uint64_t v101 = (void *)(v52[4] + v100);
      *uint64_t v101 = v62;
      v101[1] = 0;
      uint64_t v102 = (void *)(v52[16] + v100);
      uint64_t v103 = (std::__shared_weak_count *)v102[1];
      void *v102 = 0;
      v102[1] = 0;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
LABEL_134:
    uint64_t v8 = (void *)v132[4];
    unint64_t v104 = v136 + 1;
    uint64_t v136 = v104;
    if (v104 == v8)
    {
      uint64_t result = v130;
      if (v9 == v8) {
        break;
      }
      goto LABEL_13;
    }
    uint64_t v105 = v133[4];
    uint64_t result = v130;
    do
    {
      unint64_t v106 = *((unsigned int *)v104 + 1);
      unint64_t v107 = v106 >> 7;
      if (v106 >> 7 < (v133[5] - v105) >> 3)
      {
        uint64_t v108 = *(void *)(v105 + 8 * v107);
        if (v108)
        {
          uint64_t v109 = v106 & 0x7F;
          unint64_t v110 = *(unsigned __int16 *)(v108 + 2 * v109);
          uint64_t v111 = v133[7];
          uint64_t v112 = v133[8];
          if (v110 < (v112 - v111) >> 3)
          {
            uint64_t v113 = v111 + 8 * v110;
            if (v113 != v112 && *(_DWORD *)(v113 + 4) == v106)
            {
              uint64_t v115 = v134[4];
              if (v107 < (v134[5] - v115) >> 3)
              {
                uint64_t v116 = *(void *)(v115 + 8 * v107);
                if (v116)
                {
                  unint64_t v117 = *(unsigned __int16 *)(v116 + 2 * v109);
                  uint64_t v118 = v134[7];
                  uint64_t v119 = v134[8];
                  if (v117 < (v119 - v118) >> 3)
                  {
                    uint64_t v120 = v118 + 8 * v117;
                    if (v120 != v119 && *(_DWORD *)(v120 + 4) == v106)
                    {
                      uint64_t v122 = v135[4];
                      if (v107 < (v135[5] - v122) >> 3)
                      {
                        uint64_t v123 = *(void *)(v122 + 8 * v107);
                        if (v123)
                        {
                          unint64_t v124 = *(unsigned __int16 *)(v123 + 2 * v109);
                          uint64_t v126 = v135[7];
                          uint64_t v125 = v135[8];
                          if (v124 < (v125 - v126) >> 3)
                          {
                            uint64_t v127 = v126 + 8 * v124;
                            if (*(_DWORD *)(v127 + 4) == v106 && v127 != v125)
                            {
                              uint64_t v8 = v104;
                              goto LABEL_162;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v104;
    }
    while (v104 != v8);
    unint64_t v104 = v8;
LABEL_162:
    uint64_t v136 = v104;
  }
  while (v9 != v8);
LABEL_171:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A195FD8C(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  int8x8_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  int v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      uint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        unint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      BOOL v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[483];
      if (v55 < (unint64_t)((v38[484] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[486];
          unint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[487] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Clipping>> const&>,std::tuple<>>((uint64_t)(v38 + 475), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index;
                }
                uint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  uint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        uint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint64_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (uint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              uint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            uint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      uint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1960550(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(v3);
  int8x8_t v6 = v3;
  uint8x8_t v7 = (void *)v4;
  uint64_t v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v4 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v5 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  uint64_t v152 = v10;
  unint64_t v153 = (void *)v4;
  uint64_t v154 = (void *)v5;
  size_t v155 = (void *)v8;
  unint64_t v12 = *(void **)(v10 + 24);
  uint64_t v11 = *(void **)(v10 + 32);
  uint64_t v156 = v12;
  uint64_t v151 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152))
  {
    unint64_t v13 = v12 + 1;
    do
    {
      unint64_t v12 = v13;
      uint64_t v156 = v13;
      if (v13 == v151) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152);
      unint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v151 != v12)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v148 = v7;
    uint64_t v149 = result;
    uint64_t v150 = v9;
    while (1)
    {
      void *result = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        uint64_t v26 = (uint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        uint64_t v26 = (uint64_t *)v7[11];
      }
      uint64_t v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v9[7],
            uint64_t v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v9[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v2 + 8);
      uint64_t v38 = *(void **)v37;
      unint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_41;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_41:
        unint64_t v41 = 0;
      }
      else
      {
        unint64_t v41 = (void *)v38[3];
        unint64_t v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v42 = **(void **)(v2 + 8);
      unint64_t v43 = *(void **)v42;
      uint64_t v44 = *(void **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x348A0B0E758C07C2)
        {
          v43 += 5;
          if (v43 == v44) {
            goto LABEL_50;
          }
        }
      }
      if (v43 == v44)
      {
LABEL_50:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = v43[3];
        BOOL v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      uint64_t v47 = (uint64_t)(v41 + 37);
      unint64_t v48 = *v36;
      unint64_t v49 = *v36;
      uint64_t v50 = v41[50];
      unint64_t v51 = (v41[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v41[53], v53 + 16 * v52 != v41[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v63 = v2;
        uint64_t v64 = *(void *)(v50 + 8 * v49);
        unint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v48, v36);
        ++v65[3];
        uint64_t v66 = v53 + 16 * v64;
        uint64_t v2 = v63;
        uint8x8_t v7 = v148;
        unint64_t v55 = *(void **)(v66 + 8);
        unint64_t v48 = *v36;
        uint64_t v50 = v41[50];
        unint64_t v49 = *v36;
        if (v49 >= (v41[51] - v50) >> 3) {
          goto LABEL_70;
        }
      }
      else
      {
        unint64_t v55 = 0;
        if (v49 >= v51) {
          goto LABEL_70;
        }
      }
      uint64_t v56 = *(void *)(v50 + 8 * v49);
      if (!v56
        || HIDWORD(v48) != HIDWORD(v56)
        || ((uint64_t v57 = v41[53], v58 = (uint64_t *)v41[54], v59 = (uint64_t *)(v57 + 16 * v56), v59 != v58)
          ? (BOOL v60 = v57 == 0)
          : (BOOL v60 = 1),
            v60))
      {
LABEL_70:
        uint64_t v62 = 0;
        goto LABEL_71;
      }
      unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v36);
      ++v61[3];
      uint64_t v62 = *v59;
LABEL_71:
      uint64_t v67 = *v26;
      uint64_t v68 = (std::__shared_mutex_base *)(v45 + 104);
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v69 = *(void *)(v45 + 600);
      if (v67 < (unint64_t)((*(void *)(v45 + 608) - v69) >> 3)
        && ((uint64_t v70 = *(void *)(v69 + 8 * v67)) != 0 ? (v71 = HIDWORD(v67) == HIDWORD(v70)) : (v71 = 0),
            v71))
      {
        uint64_t v73 = (uint64_t *)(*(void *)(v45 + 624) + 40 * v70);
        unint64_t v72 = *(uint64_t **)(v45 + 632);
      }
      else
      {
        unint64_t v72 = *(uint64_t **)(v45 + 632);
        uint64_t v73 = v72;
      }
      std::__shared_mutex_base::unlock_shared(v68);
      uint64_t v74 = 0;
      if (v73 != v72 && v73) {
        uint64_t v74 = *v73;
      }
      {
        gdc::typeIndex<DaVinci::OverlayTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v75 = v55[1];
      if (!v75) {
        goto LABEL_152;
      }
      unint64_t v76 = gdc::typeIndex<DaVinci::OverlayTexture>(void)::index;
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        uint64_t v78 = gdc::typeIndex<DaVinci::OverlayTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::OverlayTexture>(void)::index >= v75) {
          uint64_t v78 = gdc::typeIndex<DaVinci::OverlayTexture>(void)::index % v75;
        }
      }
      else
      {
        uint64_t v78 = (v75 - 1) & gdc::typeIndex<DaVinci::OverlayTexture>(void)::index;
      }
      unint64_t v79 = *(void **)(*v55 + 8 * v78);
      if (!v79) {
        goto LABEL_152;
      }
      uint64_t v80 = (void *)*v79;
      if (!v80) {
        goto LABEL_152;
      }
      if (v77.u32[0] < 2uLL)
      {
        unint64_t v81 = v75 - 1;
        while (1)
        {
          uint64_t v83 = v80[1];
          if (gdc::typeIndex<DaVinci::OverlayTexture>(void)::index == v83)
          {
            if (v80[2] == gdc::typeIndex<DaVinci::OverlayTexture>(void)::index) {
              goto LABEL_103;
            }
          }
          else if ((v83 & v81) != v78)
          {
            goto LABEL_152;
          }
          uint64_t v80 = (void *)*v80;
          if (!v80) {
            goto LABEL_152;
          }
        }
      }
      while (1)
      {
        unint64_t v82 = v80[1];
        if (gdc::typeIndex<DaVinci::OverlayTexture>(void)::index == v82) {
          break;
        }
        if (v82 >= v75) {
          v82 %= v75;
        }
        if (v82 != v78) {
          goto LABEL_152;
        }
LABEL_91:
        uint64_t v80 = (void *)*v80;
        if (!v80) {
          goto LABEL_152;
        }
      }
      if (v80[2] != gdc::typeIndex<DaVinci::OverlayTexture>(void)::index) {
        goto LABEL_91;
      }
LABEL_103:
      {
        if (v147)
        {
          md::typeToIntMap(v147);
          uint8x8_t v7 = v148;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_187;
      }
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        unint64_t v85 = v76;
        if (v76 >= qword_1E957F030) {
          unint64_t v85 = v76 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v85 = (qword_1E957F030 - 1) & v76;
      }
      int v86 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v85);
      if (!v86 || (uint64_t v87 = *v86) == 0) {
LABEL_187:
      }
        abort();
      if (v84.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v89 = v87[1];
          if ((uint64_t *)v76 == v89)
          {
            if (v87[2] == (uint64_t *)v76) {
              goto LABEL_124;
            }
          }
          else if (((unint64_t)v89 & (qword_1E957F030 - 1)) != v85)
          {
            goto LABEL_187;
          }
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v87[1];
        if (v76 != v88)
        {
          if (v88 >= qword_1E957F030) {
            v88 %= (unint64_t)qword_1E957F030;
          }
          if (v88 != v85) {
            goto LABEL_187;
          }
LABEL_114:
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
          continue;
        }
        break;
      }
      if (v87[2] != (uint64_t *)v76) {
        goto LABEL_114;
      }
LABEL_124:
      uint64_t v91 = *((int *)v87 + 6);
      uint64_t v90 = *((int *)v87 + 7);
      if (v91 != -1)
      {
        uint64_t v92 = *(void *)(v62 + 16);
        if (v92)
        {
          uint64_t v93 = *(void *)(*(void *)(v92 + 48) + 72);
          uint64_t v94 = *(void *)(v93 + 8);
          uint64_t v95 = *(void *)(v94 + 72);
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = *(void *)(v94 + 64);
            unint64_t v98 = (unsigned __int8 *)(v97 + 1);
            while (1)
            {
              int v99 = *v98;
              v98 += 2;
              if (v99 == v91) {
                break;
              }
              if (v95 == ++v96) {
                goto LABEL_130;
              }
            }
            uint64_t v106 = (unsigned __int8 *)(v97 + 2 * v96);
LABEL_137:
            *(void *)(*(void *)(v62 + 96) + 8 * *v106) = v74;
          }
          else
          {
LABEL_130:
            uint64_t v100 = *(void *)(v93 + 24);
            uint64_t v101 = *(void *)(v100 + 72);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = *(void *)(v100 + 64);
              unint64_t v104 = (unsigned __int8 *)(v103 + 1);
              while (1)
              {
                int v105 = *v104;
                v104 += 2;
                if (v105 == v91) {
                  break;
                }
                if (v101 == ++v102) {
                  goto LABEL_138;
                }
              }
              uint64_t v106 = (unsigned __int8 *)(v103 + 2 * v102);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v90 != -1)
      {
        uint64_t v107 = *(void *)(v62 + 16);
        if (v107)
        {
          uint64_t v108 = *(void *)(*(void *)(v107 + 48) + 72);
          uint64_t v109 = *(void *)(v108 + 8);
          uint64_t v110 = *(void *)(v109 + 72);
          if (v110)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *(void *)(v109 + 64);
            uint64_t v113 = (unsigned __int8 *)(v112 + 1);
            while (1)
            {
              int v114 = *v113;
              v113 += 2;
              if (v114 == v90) {
                break;
              }
              if (v110 == ++v111) {
                goto LABEL_144;
              }
            }
            double v121 = (unsigned __int8 *)(v112 + 2 * v111);
LABEL_151:
            *(void *)(*(void *)(v62 + 96) + 8 * *v121) = v74;
          }
          else
          {
LABEL_144:
            uint64_t v115 = *(void *)(v108 + 24);
            uint64_t v116 = *(void *)(v115 + 72);
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v118 = *(void *)(v115 + 64);
              uint64_t v119 = (unsigned __int8 *)(v118 + 1);
              while (1)
              {
                int v120 = *v119;
                v119 += 2;
                if (v120 == v90) {
                  break;
                }
                if (v116 == ++v117) {
                  goto LABEL_152;
                }
              }
              double v121 = (unsigned __int8 *)(v118 + 2 * v117);
              goto LABEL_151;
            }
          }
        }
      }
LABEL_152:
      unint64_t v12 = *(void **)(v152 + 32);
      uint64_t v122 = v156 + 1;
      uint64_t v156 = v122;
      if (v122 == v12)
      {
        uint64_t v9 = v150;
      }
      else
      {
        uint64_t v123 = v153[4];
        uint64_t v9 = v150;
        do
        {
          unint64_t v124 = *((unsigned int *)v122 + 1);
          unint64_t v125 = v124 >> 7;
          if (v124 >> 7 < (v153[5] - v123) >> 3)
          {
            uint64_t v126 = *(void *)(v123 + 8 * v125);
            if (v126)
            {
              uint64_t v127 = v124 & 0x7F;
              unint64_t v128 = *(unsigned __int16 *)(v126 + 2 * v127);
              uint64_t v130 = v153[7];
              uint64_t v129 = v153[8];
              if (v128 < (v129 - v130) >> 3)
              {
                uint64_t v131 = v130 + 8 * v128;
                if (v131 != v129 && *(_DWORD *)(v131 + 4) == v124)
                {
                  uint64_t v133 = v154[4];
                  if (v125 < (v154[5] - v133) >> 3)
                  {
                    uint64_t v134 = *(void *)(v133 + 8 * v125);
                    if (v134)
                    {
                      unint64_t v135 = *(unsigned __int16 *)(v134 + 2 * v127);
                      uint64_t v137 = v154[7];
                      uint64_t v136 = v154[8];
                      if (v135 < (v136 - v137) >> 3)
                      {
                        uint64_t v138 = v137 + 8 * v135;
                        if (v138 != v136 && *(_DWORD *)(v138 + 4) == v124)
                        {
                          uint64_t v140 = v155[4];
                          if (v125 < (v155[5] - v140) >> 3)
                          {
                            uint64_t v141 = *(void *)(v140 + 8 * v125);
                            if (v141)
                            {
                              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * v127);
                              uint64_t v144 = v155[7];
                              uint64_t v143 = v155[8];
                              if (v142 < (v143 - v144) >> 3)
                              {
                                uint64_t v145 = v144 + 8 * v142;
                                if (*(_DWORD *)(v145 + 4) == v124 && v145 != v143)
                                {
                                  unint64_t v12 = v122;
                                  goto LABEL_180;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v122;
        }
        while (v122 != v12);
        uint64_t v122 = v12;
LABEL_180:
        uint64_t v156 = v122;
      }
      uint64_t result = v149;
      if (v151 == v12) {
        goto LABEL_186;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_186:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1960EB0(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  HasStyleAttributeRaster = (void *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint8x8_t v7 = (void *)v6;
  uint64_t v8 = HasStyleAttributeRaster + 4;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < HasStyleAttributeRaster[8] - HasStyleAttributeRaster[7]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  uint64_t v158 = v8;
  unint64_t v159 = HasStyleAttributeRaster;
  unint64_t v160 = (void *)v5;
  uint8x8_t v161 = (void *)v6;
  uint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  unint64_t v162 = v10;
  unint64_t v157 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v158))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      uint64_t v10 = v11;
      unint64_t v162 = v11;
      if (v11 == v157) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v158);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v157 != v10)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    size_t v155 = result;
    uint64_t v156 = v2;
    uint64_t v154 = HasStyleAttributeRaster;
    while (1)
    {
      void *result = *v10;
      unint64_t v14 = *v10;
      uint64_t v15 = HIDWORD(*v10);
      unint64_t v16 = *v10 >> 39;
      uint64_t v17 = HasStyleAttributeRaster[4];
      if (v16 < (HasStyleAttributeRaster[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = HasStyleAttributeRaster[7],
            uint64_t v20 = HasStyleAttributeRaster[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = HasStyleAttributeRaster[10] + 8 * v19;
      }
      else
      {
        uint64_t v24 = HasStyleAttributeRaster[11];
      }
      uint64_t v25 = v7[4];
      if (v16 < (v7[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v7[7],
            uint64_t v28 = v7[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v7[11];
        uint64_t v33 = v7[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v7[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = ***(uint64_t ****)(v2 + 8);
      if (v35 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v35 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v36 = v35 + 5;
        do
        {
          uint64_t v37 = *v36;
          v36 += 5;
        }
        while (v37 != 0xC94DD89A7B09BE9CLL);
        uint64_t v35 = v36 - 5;
      }
      uint64_t v38 = v35[3];
      unint64_t v39 = (std::__shared_weak_count *)v35[4];
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
      uint64_t v41 = *(void *)(v40 + 2680);
      if (!v41) {
        goto LABEL_52;
      }
      uint64_t v42 = v40 + 2680;
      do
      {
        unsigned int v43 = *(_DWORD *)(v41 + 32);
        BOOL v44 = v43 >= 0x9A;
        if (v43 >= 0x9A) {
          uint64_t v45 = (uint64_t *)v41;
        }
        else {
          uint64_t v45 = (uint64_t *)(v41 + 8);
        }
        if (v44) {
          uint64_t v42 = v41;
        }
        uint64_t v41 = *v45;
      }
      while (*v45);
      if (v42 != v40 + 2680 && *(_DWORD *)(v42 + 32) <= 0x9Au) {
        int8x8_t v46 = *(int8x8_t *)(v42 + 40);
      }
      else {
LABEL_52:
      }
        int8x8_t v46 = 0;
      uint64_t v47 = +[VKDebugSettings sharedSettings];
      md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)v163, v47);

      uint64_t v48 = **(void **)(v2 + 8);
      unint64_t v49 = *(void **)v48;
      uint64_t v50 = *(void **)(v48 + 8);
      if (v49 != v50)
      {
        while (*v49 != 0x41D4E9297E100630)
        {
          v49 += 5;
          if (v49 == v50) {
            goto LABEL_61;
          }
        }
      }
      if (v49 == v50)
      {
LABEL_61:
        unint64_t v51 = 0;
      }
      else
      {
        unint64_t v51 = (void *)v49[3];
        uint64_t v52 = (std::__shared_weak_count *)v49[4];
        if (v52)
        {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      uint64_t v53 = (uint64_t)(v51 + 37);
      unint64_t v54 = *v34;
      unint64_t v55 = *v34;
      uint64_t v56 = v51[50];
      unint64_t v57 = (v51[51] - v56) >> 3;
      if (v55 < v57
        && (uint64_t v58 = *(void *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((uint64_t v59 = v51[53], v59 + 16 * v58 != v51[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        int8x8_t v69 = v46;
        uint64_t v70 = *(void *)(v56 + 8 * v55);
        BOOL v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v51 + 37), v54, v34);
        ++v71[3];
        uint64_t v72 = v59 + 16 * v70;
        int8x8_t v46 = v69;
        HasStyleAttributeRaster = v154;
        unint64_t v61 = *(void **)(v72 + 8);
        unint64_t v54 = *v34;
        uint64_t v56 = v51[50];
        unint64_t v55 = *v34;
        if (v55 >= (v51[51] - v56) >> 3) {
          goto LABEL_83;
        }
      }
      else
      {
        unint64_t v61 = 0;
        if (v55 >= v57) {
          goto LABEL_83;
        }
      }
      uint64_t v62 = *(void *)(v56 + 8 * v55);
      if (v62 && HIDWORD(v54) == HIDWORD(v62))
      {
        uint64_t v63 = v51[53];
        uint64_t v64 = (uint64_t *)v51[54];
        unint64_t v65 = (uint64_t *)(v63 + 16 * v62);
        if (v65 != v64 && v63 != 0)
        {
          uint64_t v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v34);
          ++v67[3];
          uint64_t v68 = *v65;
          if (v164) {
            goto LABEL_84;
          }
          goto LABEL_108;
        }
      }
LABEL_83:
      uint64_t v68 = 0;
      if (v164)
      {
LABEL_84:
        int8x8_t v73 = *(int8x8_t *)(*(void *)v24 + 8);
        if (v73)
        {
          uint8x8_t v74 = (uint8x8_t)vcnt_s8(v73);
          v74.i16[0] = vaddlv_u8(v74);
          if (v74.u32[0] > 1uLL)
          {
            if (*(void *)&v73 <= 0x9AuLL) {
              uint64_t v75 = 0x9AuLL % *(void *)&v73;
            }
            else {
              uint64_t v75 = 154;
            }
          }
          else
          {
            uint64_t v75 = (v73.i32[0] - 1) & 0x9ALL;
          }
          unint64_t v76 = *(int8x8_t ***)(**(void **)v24 + 8 * v75);
          if (v76)
          {
            uint8x8_t v77 = *v76;
            if (v77)
            {
              if (v74.u32[0] < 2uLL)
              {
                uint64_t v78 = *(void *)&v73 - 1;
                while (1)
                {
                  int8x8_t v80 = v77[1];
                  if (*(void *)&v80 == 154)
                  {
                    if (v77[2].i32[0] == 154) {
                      goto LABEL_134;
                    }
                  }
                  else if ((*(void *)&v80 & v78) != v75)
                  {
                    goto LABEL_105;
                  }
                  uint8x8_t v77 = (int8x8_t *)*v77;
                  if (!v77) {
                    goto LABEL_105;
                  }
                }
              }
              do
              {
                int8x8_t v79 = v77[1];
                if (*(void *)&v79 == 154)
                {
                  if (v77[2].i32[0] == 154)
                  {
LABEL_134:
                    int8x8_t v73 = v77[3];
                    goto LABEL_106;
                  }
                }
                else
                {
                  if (*(void *)&v79 >= *(void *)&v73) {
                    *(void *)&v79 %= *(void *)&v73;
                  }
                  if (*(void *)&v79 != v75) {
                    break;
                  }
                }
                uint8x8_t v77 = (int8x8_t *)*v77;
              }
              while (v77);
            }
          }
LABEL_105:
          int8x8_t v73 = 0;
        }
LABEL_106:
        if (v73) {
          int8x8_t v46 = v73;
        }
      }
LABEL_108:
      {
        gdc::typeIndex<DaVinci::AridityTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v81 = v61[1];
      if (!v81) {
        goto LABEL_180;
      }
      unint64_t v82 = gdc::typeIndex<DaVinci::AridityTexture>(void)::index;
      uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
      v83.i16[0] = vaddlv_u8(v83);
      if (v83.u32[0] > 1uLL)
      {
        uint64_t v84 = gdc::typeIndex<DaVinci::AridityTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::AridityTexture>(void)::index >= v81) {
          uint64_t v84 = gdc::typeIndex<DaVinci::AridityTexture>(void)::index % v81;
        }
      }
      else
      {
        uint64_t v84 = (v81 - 1) & gdc::typeIndex<DaVinci::AridityTexture>(void)::index;
      }
      unint64_t v85 = *(void **)(*v61 + 8 * v84);
      if (!v85) {
        goto LABEL_180;
      }
      int v86 = (void *)*v85;
      if (!v86) {
        goto LABEL_180;
      }
      if (v83.u32[0] < 2uLL)
      {
        unint64_t v87 = v81 - 1;
        while (1)
        {
          uint64_t v89 = v86[1];
          if (gdc::typeIndex<DaVinci::AridityTexture>(void)::index == v89)
          {
            if (v86[2] == gdc::typeIndex<DaVinci::AridityTexture>(void)::index) {
              goto LABEL_130;
            }
          }
          else if ((v89 & v87) != v84)
          {
            goto LABEL_180;
          }
          int v86 = (void *)*v86;
          if (!v86) {
            goto LABEL_180;
          }
        }
      }
      while (1)
      {
        unint64_t v88 = v86[1];
        if (gdc::typeIndex<DaVinci::AridityTexture>(void)::index == v88) {
          break;
        }
        if (v88 >= v81) {
          v88 %= v81;
        }
        if (v88 != v84) {
          goto LABEL_180;
        }
LABEL_119:
        int v86 = (void *)*v86;
        if (!v86) {
          goto LABEL_180;
        }
      }
      if (v86[2] != gdc::typeIndex<DaVinci::AridityTexture>(void)::index) {
        goto LABEL_119;
      }
LABEL_130:
      {
        if (v153)
        {
          md::typeToIntMap(v153);
          HasStyleAttributeRaster = v154;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_215;
      }
      uint8x8_t v90 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v90.i16[0] = vaddlv_u8(v90);
      if (v90.u32[0] > 1uLL)
      {
        unint64_t v91 = v82;
        if (v82 >= qword_1E957F030) {
          unint64_t v91 = v82 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v91 = (qword_1E957F030 - 1) & v82;
      }
      uint64_t v92 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v91);
      if (!v92 || (uint64_t v93 = *v92) == 0) {
LABEL_215:
      }
        abort();
      if (v90.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v95 = v93[1];
          if ((uint64_t *)v82 == v95)
          {
            if (v93[2] == (uint64_t *)v82) {
              goto LABEL_152;
            }
          }
          else if (((unint64_t)v95 & (qword_1E957F030 - 1)) != v91)
          {
            goto LABEL_215;
          }
          uint64_t v93 = (uint64_t **)*v93;
          if (!v93) {
            goto LABEL_215;
          }
        }
      }
      while (2)
      {
        unint64_t v94 = (unint64_t)v93[1];
        if (v82 != v94)
        {
          if (v94 >= qword_1E957F030) {
            v94 %= (unint64_t)qword_1E957F030;
          }
          if (v94 != v91) {
            goto LABEL_215;
          }
LABEL_142:
          uint64_t v93 = (uint64_t **)*v93;
          if (!v93) {
            goto LABEL_215;
          }
          continue;
        }
        break;
      }
      if (v93[2] != (uint64_t *)v82) {
        goto LABEL_142;
      }
LABEL_152:
      uint64_t v97 = *((int *)v93 + 6);
      uint64_t v96 = *((int *)v93 + 7);
      if (v97 != -1)
      {
        uint64_t v98 = *(void *)(v68 + 16);
        if (v98)
        {
          uint64_t v99 = *(void *)(*(void *)(v98 + 48) + 72);
          uint64_t v100 = *(void *)(v99 + 8);
          uint64_t v101 = *(void *)(v100 + 72);
          if (v101)
          {
            uint64_t v102 = 0;
            uint64_t v103 = *(void *)(v100 + 64);
            unint64_t v104 = (unsigned __int8 *)(v103 + 1);
            while (1)
            {
              int v105 = *v104;
              v104 += 2;
              if (v105 == v97) {
                break;
              }
              if (v101 == ++v102) {
                goto LABEL_158;
              }
            }
            uint64_t v112 = (unsigned __int8 *)(v103 + 2 * v102);
LABEL_165:
            *(int8x8_t *)(*(void *)(v68 + 96) + 8 * *v112) = v46;
          }
          else
          {
LABEL_158:
            uint64_t v106 = *(void *)(v99 + 24);
            uint64_t v107 = *(void *)(v106 + 72);
            if (v107)
            {
              uint64_t v108 = 0;
              uint64_t v109 = *(void *)(v106 + 64);
              uint64_t v110 = (unsigned __int8 *)(v109 + 1);
              while (1)
              {
                int v111 = *v110;
                v110 += 2;
                if (v111 == v97) {
                  break;
                }
                if (v107 == ++v108) {
                  goto LABEL_166;
                }
              }
              uint64_t v112 = (unsigned __int8 *)(v109 + 2 * v108);
              goto LABEL_165;
            }
          }
        }
      }
LABEL_166:
      if (v96 != -1)
      {
        uint64_t v113 = *(void *)(v68 + 16);
        if (v113)
        {
          uint64_t v114 = *(void *)(*(void *)(v113 + 48) + 72);
          uint64_t v115 = *(void *)(v114 + 8);
          uint64_t v116 = *(void *)(v115 + 72);
          if (v116)
          {
            uint64_t v117 = 0;
            uint64_t v118 = *(void *)(v115 + 64);
            uint64_t v119 = (unsigned __int8 *)(v118 + 1);
            while (1)
            {
              int v120 = *v119;
              v119 += 2;
              if (v120 == v96) {
                break;
              }
              if (v116 == ++v117) {
                goto LABEL_172;
              }
            }
            uint64_t v127 = (unsigned __int8 *)(v118 + 2 * v117);
LABEL_179:
            *(int8x8_t *)(*(void *)(v68 + 96) + 8 * *v127) = v46;
          }
          else
          {
LABEL_172:
            uint64_t v121 = *(void *)(v114 + 24);
            uint64_t v122 = *(void *)(v121 + 72);
            if (v122)
            {
              uint64_t v123 = 0;
              uint64_t v124 = *(void *)(v121 + 64);
              unint64_t v125 = (unsigned __int8 *)(v124 + 1);
              while (1)
              {
                int v126 = *v125;
                v125 += 2;
                if (v126 == v96) {
                  break;
                }
                if (v122 == ++v123) {
                  goto LABEL_180;
                }
              }
              uint64_t v127 = (unsigned __int8 *)(v124 + 2 * v123);
              goto LABEL_179;
            }
          }
        }
      }
LABEL_180:
      uint64_t v10 = (void *)v158[4];
      unint64_t v128 = v162 + 1;
      unint64_t v162 = v128;
      if (v128 == v10)
      {
        uint64_t result = v155;
        uint64_t v2 = v156;
      }
      else
      {
        uint64_t v129 = v159[4];
        uint64_t result = v155;
        uint64_t v2 = v156;
        do
        {
          unint64_t v130 = *((unsigned int *)v128 + 1);
          unint64_t v131 = v130 >> 7;
          if (v130 >> 7 < (v159[5] - v129) >> 3)
          {
            uint64_t v132 = *(void *)(v129 + 8 * v131);
            if (v132)
            {
              uint64_t v133 = v130 & 0x7F;
              unint64_t v134 = *(unsigned __int16 *)(v132 + 2 * v133);
              uint64_t v135 = v159[7];
              uint64_t v136 = v159[8];
              if (v134 < (v136 - v135) >> 3)
              {
                uint64_t v137 = v135 + 8 * v134;
                if (v137 != v136 && *(_DWORD *)(v137 + 4) == v130)
                {
                  uint64_t v139 = v160[4];
                  if (v131 < (v160[5] - v139) >> 3)
                  {
                    uint64_t v140 = *(void *)(v139 + 8 * v131);
                    if (v140)
                    {
                      unint64_t v141 = *(unsigned __int16 *)(v140 + 2 * v133);
                      uint64_t v142 = v160[7];
                      uint64_t v143 = v160[8];
                      if (v141 < (v143 - v142) >> 3)
                      {
                        uint64_t v144 = v142 + 8 * v141;
                        if (v144 != v143 && *(_DWORD *)(v144 + 4) == v130)
                        {
                          uint64_t v146 = v161[4];
                          if (v131 < (v161[5] - v146) >> 3)
                          {
                            uint64_t v147 = *(void *)(v146 + 8 * v131);
                            if (v147)
                            {
                              unint64_t v148 = *(unsigned __int16 *)(v147 + 2 * v133);
                              uint64_t v150 = v161[7];
                              uint64_t v149 = v161[8];
                              if (v148 < (v149 - v150) >> 3)
                              {
                                uint64_t v151 = v150 + 8 * v148;
                                if (*(_DWORD *)(v151 + 4) == v130 && v151 != v149)
                                {
                                  uint64_t v10 = v128;
                                  goto LABEL_208;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v128;
        }
        while (v128 != v10);
        unint64_t v128 = v10;
LABEL_208:
        unint64_t v162 = v128;
      }
      if (v157 == v10) {
        goto LABEL_214;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_214:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1961920(_Unwind_Exception *a1)
{
}

void sub_1A1961938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint8x8_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v159, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v157, v9, v4, v6, *(void *)(v9 + 32));
  if (v158 == v162)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_206;
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  unint64_t v12 = &off_1E5A8B000;
  while (2)
  {
    *uint64_t v11 = *v10;
    unint64_t v13 = *v10;
    uint64_t v14 = v6[4];
    if (v13 >> 39 < (v6[5] - v14) >> 3
      && (uint64_t v15 = *(void *)(v14 + 8 * (v13 >> 39))) != 0
      && (v16 = *(unsigned __int16 *)(v15 + 2 * (HIDWORD(v13) & 0x7F)), v18 = v6[7], uint64_t v17 = v6[8], v16 < (v17 - v18) >> 3)
      && ((v19 = HIDWORD(v13), uint64_t v20 = v18 + 8 * v16, v20 != v17)
        ? (BOOL v21 = *(_DWORD *)(v20 + 4) == v19)
        : (BOOL v21 = 0),
          v21))
    {
      uint64_t v22 = v6[11];
      uint64_t v23 = v6[10] + 8 * v16;
    }
    else
    {
      uint64_t v22 = v6[11];
      uint64_t v23 = v22;
    }
    if (v23 == v22) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (unint64_t *)v23;
    }
    uint64_t v25 = ***(uint64_t ****)(a1 + 8);
    if (v25 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v25 != 0x22D45F5AAD4BF408)
    {
      uint64_t v26 = v25 + 5;
      do
      {
        uint64_t v27 = *v26;
        v26 += 5;
      }
      while (v27 != 0x22D45F5AAD4BF408);
      uint64_t v25 = v26 - 5;
    }
    uint64_t v28 = (uint64_t (***)(void))v25[3];
    uint64_t v29 = (std::__shared_weak_count *)v25[4];
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    uint64_t v30 = (**v28)(v28);
    BOOL v31 = *(void **)(v30 + 8);
    int8x8_t v32 = (int8x8_t)v31[1];
    if (!*(void *)&v32) {
      goto LABEL_181;
    }
    uint64_t v33 = (md::LayoutContext *)v30;
    uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32);
    v34.i16[0] = vaddlv_u8(v34);
    if (v34.u32[0] > 1uLL)
    {
      uint64_t v35 = 0x41E8D6E445F4145;
      if (*(void *)&v32 <= 0x41E8D6E445F4145uLL) {
        uint64_t v35 = 0x41E8D6E445F4145uLL % *(void *)&v32;
      }
    }
    else
    {
      uint64_t v35 = (*(void *)&v32 - 1) & 0x41E8D6E445F4145;
    }
    uint64_t v36 = *(void **)(*v31 + 8 * v35);
    if (!v36) {
      goto LABEL_181;
    }
    uint64_t v37 = (void *)*v36;
    if (!v37) {
      goto LABEL_181;
    }
    if (v34.u32[0] < 2uLL)
    {
      uint64_t v38 = *(void *)&v32 - 1;
      while (1)
      {
        uint64_t v40 = v37[1];
        if (v40 == 0x41E8D6E445F4145)
        {
          if (v37[2] == 0x41E8D6E445F4145) {
            goto LABEL_51;
          }
        }
        else if ((v40 & v38) != v35)
        {
          goto LABEL_181;
        }
        uint64_t v37 = (void *)*v37;
        if (!v37) {
          goto LABEL_181;
        }
      }
    }
    while (1)
    {
      unint64_t v39 = v37[1];
      if (v39 == 0x41E8D6E445F4145) {
        break;
      }
      if (v39 >= *(void *)&v32) {
        v39 %= *(void *)&v32;
      }
      if (v39 != v35) {
        goto LABEL_181;
      }
LABEL_39:
      uint64_t v37 = (void *)*v37;
      if (!v37) {
        goto LABEL_181;
      }
    }
    if (v37[2] != 0x41E8D6E445F4145) {
      goto LABEL_39;
    }
LABEL_51:
    uint64_t v41 = v37[5];
    if (*(void *)(v41 + 8) != 0x41E8D6E445F4145) {
      goto LABEL_181;
    }
    uint64_t v42 = *(void *)(v41 + 32);
    if (!v42) {
      goto LABEL_181;
    }
    unsigned int v43 = ***(uint64_t ****)(a1 + 8);
    uint64_t v155 = v42;
    if (v43 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v43 != 0xD369A4D92C8FFE6CLL)
    {
      BOOL v44 = v43 + 5;
      do
      {
        uint64_t v45 = *v44;
        v44 += 5;
      }
      while (v45 != 0xD369A4D92C8FFE6CLL);
      unsigned int v43 = v44 - 5;
    }
    uint64_t v46 = v43[3];
    uint64_t v47 = (std::__shared_weak_count *)v43[4];
    if (v47)
    {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    [*(id *)((*(uint64_t (**)(uint64_t))(*(void *)v46 + 16))(v46) + 104) contentScale];
    double v49 = v48;
    uint64_t v50 = ***(uint64_t ****)(a1 + 8);
    if (v50 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v50 != 0xC94DD89A7B09BE9CLL)
    {
      unint64_t v51 = v50 + 5;
      do
      {
        uint64_t v52 = *v51;
        v51 += 5;
      }
      while (v52 != 0xC94DD89A7B09BE9CLL);
      uint64_t v50 = v51 - 5;
    }
    uint64_t v53 = v50[3];
    unint64_t v54 = (std::__shared_weak_count *)v50[4];
    if (v54)
    {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    uint64_t v156 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53) + 2560) + 32);
    unint64_t v55 = [v12[32] sharedSettings];
    int v56 = [v55 lightingEnableAmbient];

    if (v56 && *(unsigned char *)(v155 + 96))
    {
      uint64_t v57 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53) + 2560);
      uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
      uint64_t v59 = *(std::__shared_weak_count **)(v58 + 1488);
      v163[0] = *(void *)(v58 + 1480);
      v163[1] = v59;
      unint64_t v12 = &off_1E5A8B000;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v60 = v49;
      md::TextureManager::cubeTexture(&v164, v57, v155 + 104, v163, v60);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      unint64_t v61 = v164;
      if (v164)
      {
        uint64_t v62 = md::LayoutContext::frameState(v33);
        md::SharedResource::addFrameRef(v61, *(void *)(v62 + 624));
        uint64_t v156 = *((void *)v61 + 4);
      }
      uint64_t v63 = v165;
      if (v165 && !atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    else
    {
      unint64_t v12 = &off_1E5A8B000;
    }
    uint64_t v64 = **(void **)(a1 + 8);
    unint64_t v65 = *(void **)v64;
    uint64_t v66 = *(void **)(v64 + 8);
    if (v65 != v66)
    {
      while (*v65 != 0x41D4E9297E100630)
      {
        v65 += 5;
        if (v65 == v66) {
          goto LABEL_90;
        }
      }
    }
    if (v65 == v66)
    {
LABEL_90:
      uint64_t v68 = 0;
    }
    else
    {
      uint64_t v68 = (void *)v65[3];
      uint64_t v67 = (std::__shared_weak_count *)v65[4];
      if (v67)
      {
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
    if (!v156) {
      goto LABEL_181;
    }
    uint64_t v69 = (uint64_t)(v68 + 37);
    unint64_t v70 = *v24;
    unint64_t v71 = *v24;
    uint64_t v72 = v68[50];
    unint64_t v73 = (v68[51] - v72) >> 3;
    if (v71 < v73
      && (uint64_t v74 = *(void *)(v72 + 8 * v71)) != 0
      && HIDWORD(v70) == HIDWORD(v74)
      && ((uint64_t v75 = v68[53], v75 + 16 * v74 != v68[54]) ? (v76 = v75 == 0) : (v76 = 1), !v76))
    {
      uint64_t v85 = *(void *)(v72 + 8 * v71);
      int v86 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v68 + 37), v70, v24);
      ++v86[3];
      uint64_t v87 = v75 + 16 * v85;
      unint64_t v12 = &off_1E5A8B000;
      uint8x8_t v77 = *(void **)(v87 + 8);
      unint64_t v70 = *v24;
      uint64_t v72 = v68[50];
      unint64_t v71 = *v24;
      if (v71 >= (v68[51] - v72) >> 3) {
        goto LABEL_109;
      }
    }
    else
    {
      uint8x8_t v77 = 0;
      if (v71 >= v73) {
        goto LABEL_109;
      }
    }
    uint64_t v78 = *(void *)(v72 + 8 * v71);
    if (v78
      && HIDWORD(v70) == HIDWORD(v78)
      && ((uint64_t v79 = v68[53], v80 = (uint64_t *)v68[54], v81 = (uint64_t *)(v79 + 16 * v78), v81 != v80)
        ? (BOOL v82 = v79 == 0)
        : (BOOL v82 = 1),
          !v82))
    {
      uint8x8_t v83 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v69, v70, v24);
      ++v83[3];
      uint64_t v84 = *v81;
    }
    else
    {
LABEL_109:
      uint64_t v84 = 0;
    }
    {
      gdc::typeIndex<DaVinci::AmbientTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v88 = v77[1];
    if (!v88) {
      goto LABEL_181;
    }
    unint64_t v89 = gdc::typeIndex<DaVinci::AmbientTexture>(void)::index;
    uint8x8_t v90 = (uint8x8_t)vcnt_s8((int8x8_t)v88);
    v90.i16[0] = vaddlv_u8(v90);
    if (v90.u32[0] > 1uLL)
    {
      uint64_t v91 = gdc::typeIndex<DaVinci::AmbientTexture>(void)::index;
      if (gdc::typeIndex<DaVinci::AmbientTexture>(void)::index >= v88) {
        uint64_t v91 = gdc::typeIndex<DaVinci::AmbientTexture>(void)::index % v88;
      }
    }
    else
    {
      uint64_t v91 = (v88 - 1) & gdc::typeIndex<DaVinci::AmbientTexture>(void)::index;
    }
    uint64_t v92 = *(void **)(*v77 + 8 * v91);
    if (!v92) {
      goto LABEL_181;
    }
    uint64_t v93 = (void *)*v92;
    if (!v93) {
      goto LABEL_181;
    }
    if (v90.u32[0] < 2uLL)
    {
      unint64_t v94 = v88 - 1;
      while (1)
      {
        uint64_t v96 = v93[1];
        if (gdc::typeIndex<DaVinci::AmbientTexture>(void)::index == v96)
        {
          if (v93[2] == gdc::typeIndex<DaVinci::AmbientTexture>(void)::index) {
            goto LABEL_132;
          }
        }
        else if ((v96 & v94) != v91)
        {
          goto LABEL_181;
        }
        uint64_t v93 = (void *)*v93;
        if (!v93) {
          goto LABEL_181;
        }
      }
    }
    while (2)
    {
      unint64_t v95 = v93[1];
      if (gdc::typeIndex<DaVinci::AmbientTexture>(void)::index != v95)
      {
        if (v95 >= v88) {
          v95 %= v88;
        }
        if (v95 != v91) {
          goto LABEL_181;
        }
        goto LABEL_121;
      }
      if (v93[2] != gdc::typeIndex<DaVinci::AmbientTexture>(void)::index)
      {
LABEL_121:
        uint64_t v93 = (void *)*v93;
        if (!v93) {
          goto LABEL_181;
        }
        continue;
      }
      break;
    }
LABEL_132:
    {
      if (v154)
      {
        md::typeToIntMap(v154);
        unint64_t v12 = &off_1E5A8B000;
      }
    }
    if (!qword_1E957F030) {
      goto LABEL_207;
    }
    uint8x8_t v97 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
    v97.i16[0] = vaddlv_u8(v97);
    if (v97.u32[0] > 1uLL)
    {
      unint64_t v98 = v89;
      if (v89 >= qword_1E957F030) {
        unint64_t v98 = v89 % qword_1E957F030;
      }
    }
    else
    {
      unint64_t v98 = (qword_1E957F030 - 1) & v89;
    }
    uint64_t v99 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v98);
    if (!v99 || (uint64_t v100 = *v99) == 0) {
LABEL_207:
    }
      abort();
    if (v97.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v102 = v100[1];
        if ((uint64_t *)v89 == v102)
        {
          if (v100[2] == (uint64_t *)v89) {
            goto LABEL_153;
          }
        }
        else if (((unint64_t)v102 & (qword_1E957F030 - 1)) != v98)
        {
          goto LABEL_207;
        }
        uint64_t v100 = (uint64_t **)*v100;
        if (!v100) {
          goto LABEL_207;
        }
      }
    }
    while (2)
    {
      unint64_t v101 = (unint64_t)v100[1];
      if (v89 != v101)
      {
        if (v101 >= qword_1E957F030) {
          v101 %= (unint64_t)qword_1E957F030;
        }
        if (v101 != v98) {
          goto LABEL_207;
        }
        goto LABEL_143;
      }
      if (v100[2] != (uint64_t *)v89)
      {
LABEL_143:
        uint64_t v100 = (uint64_t **)*v100;
        if (!v100) {
          goto LABEL_207;
        }
        continue;
      }
      break;
    }
LABEL_153:
    uint64_t v104 = *((int *)v100 + 6);
    uint64_t v103 = *((int *)v100 + 7);
    if (v104 != -1)
    {
      uint64_t v105 = *(void *)(v84 + 16);
      if (v105)
      {
        uint64_t v106 = *(void *)(*(void *)(v105 + 48) + 72);
        uint64_t v107 = *(void *)(v106 + 8);
        uint64_t v108 = *(void *)(v107 + 72);
        if (v108)
        {
          uint64_t v109 = 0;
          uint64_t v110 = *(void *)(v107 + 64);
          int v111 = (unsigned __int8 *)(v110 + 1);
          while (1)
          {
            int v112 = *v111;
            v111 += 2;
            if (v112 == v104) {
              break;
            }
            if (v108 == ++v109) {
              goto LABEL_159;
            }
          }
          uint64_t v119 = (unsigned __int8 *)(v110 + 2 * v109);
LABEL_166:
          *(void *)(*(void *)(v84 + 96) + 8 * *v119) = v156;
        }
        else
        {
LABEL_159:
          uint64_t v113 = *(void *)(v106 + 24);
          uint64_t v114 = *(void *)(v113 + 72);
          if (v114)
          {
            uint64_t v115 = 0;
            uint64_t v116 = *(void *)(v113 + 64);
            uint64_t v117 = (unsigned __int8 *)(v116 + 1);
            while (1)
            {
              int v118 = *v117;
              v117 += 2;
              if (v118 == v104) {
                break;
              }
              if (v114 == ++v115) {
                goto LABEL_167;
              }
            }
            uint64_t v119 = (unsigned __int8 *)(v116 + 2 * v115);
            goto LABEL_166;
          }
        }
      }
    }
LABEL_167:
    if (v103 != -1)
    {
      uint64_t v120 = *(void *)(v84 + 16);
      if (v120)
      {
        uint64_t v121 = *(void *)(*(void *)(v120 + 48) + 72);
        uint64_t v122 = *(void *)(v121 + 8);
        uint64_t v123 = *(void *)(v122 + 72);
        if (v123)
        {
          uint64_t v124 = 0;
          uint64_t v125 = *(void *)(v122 + 64);
          int v126 = (unsigned __int8 *)(v125 + 1);
          while (1)
          {
            int v127 = *v126;
            v126 += 2;
            if (v127 == v103) {
              break;
            }
            if (v123 == ++v124) {
              goto LABEL_173;
            }
          }
          unint64_t v134 = (unsigned __int8 *)(v125 + 2 * v124);
LABEL_180:
          *(void *)(*(void *)(v84 + 96) + 8 * *v134) = v156;
        }
        else
        {
LABEL_173:
          uint64_t v128 = *(void *)(v121 + 24);
          uint64_t v129 = *(void *)(v128 + 72);
          if (v129)
          {
            uint64_t v130 = 0;
            uint64_t v131 = *(void *)(v128 + 64);
            uint64_t v132 = (unsigned __int8 *)(v131 + 1);
            while (1)
            {
              int v133 = *v132;
              v132 += 2;
              if (v133 == v103) {
                break;
              }
              if (v129 == ++v130) {
                goto LABEL_181;
              }
            }
            unint64_t v134 = (unsigned __int8 *)(v131 + 2 * v130);
            goto LABEL_180;
          }
        }
      }
    }
LABEL_181:
    uint64_t v135 = v162;
    uint64_t v10 = *(unint64_t **)(v159 + 32);
    if (++v162 != v10)
    {
      uint64_t v136 = v160[4];
      unint64_t v137 = (v160[5] - v136) >> 3;
      uint64_t v138 = v135 + 2;
      while (1)
      {
        unint64_t v139 = *((unsigned int *)v138 - 1);
        unint64_t v140 = v139 >> 7;
        if (v139 >> 7 < v137)
        {
          uint64_t v141 = *(void *)(v136 + 8 * v140);
          if (v141)
          {
            unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * (v139 & 0x7F));
            uint64_t v144 = v160[7];
            uint64_t v143 = v160[8];
            if (v142 < (v143 - v144) >> 3)
            {
              uint64_t v145 = v144 + 8 * v142;
              if (v145 != v143 && *(_DWORD *)(v145 + 4) == v139)
              {
                uint64_t v147 = v161[4];
                if (v140 < (v161[5] - v147) >> 3)
                {
                  uint64_t v148 = *(void *)(v147 + 8 * v140);
                  if (v148)
                  {
                    unint64_t v149 = *(unsigned __int16 *)(v148 + 2 * (v139 & 0x7F));
                    uint64_t v151 = v161[7];
                    uint64_t v150 = v161[8];
                    if (v149 < (v150 - v151) >> 3)
                    {
                      uint64_t v152 = v151 + 8 * v149;
                      if (v152 != v150 && *(_DWORD *)(v152 + 4) == v139) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unint64_t v162 = v138;
        BOOL v21 = v138++ == v10;
        if (v21) {
          goto LABEL_9;
        }
      }
      uint64_t v10 = v138 - 1;
    }
LABEL_9:
    if (v158 != v10) {
      continue;
    }
    break;
  }
LABEL_206:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A1962594(_Unwind_Exception *a1)
{
}

void sub_1A19625AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  uint8x8_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v94, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v92, v9, v4, v6, *(void *)(v9 + 32));
  if (v93 != v97)
  {
    uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v91 = v11;
    while (1)
    {
      *uint64_t v11 = *v10;
      unint64_t v12 = *v10;
      uint64_t v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (uint64_t v14 = *(void *)(v13 + 8 * (v12 >> 39))) != 0
        && (unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v17 = v6[7],
            uint64_t v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((unint64_t v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (BOOL v20 = *(_DWORD *)(v19 + 4) == v18)
          : (BOOL v20 = 0),
            v20))
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v6[10] + 8 * v15;
      }
      else
      {
        uint64_t v21 = v6[11];
        uint64_t v22 = v21;
      }
      if (v22 == v21) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (unint64_t *)v22;
      }
      uint64_t v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        uint64_t v25 = v24 + 5;
        do
        {
          uint64_t v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        uint64_t v24 = v25 - 5;
      }
      uint64_t v27 = v24[3];
      uint64_t v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      uint64_t v29 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27) + 1248);
      uint64_t v30 = **(void **)(a1 + 8);
      BOOL v31 = *(void **)v30;
      int8x8_t v32 = *(void **)(v30 + 8);
      if (v31 != v32)
      {
        while (*v31 != 0x41D4E9297E100630)
        {
          v31 += 5;
          if (v31 == v32) {
            goto LABEL_37;
          }
        }
      }
      if (v31 == v32)
      {
LABEL_37:
        uint8x8_t v34 = 0;
      }
      else
      {
        uint8x8_t v34 = (void *)v31[3];
        uint64_t v33 = (std::__shared_weak_count *)v31[4];
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      uint64_t v35 = (uint64_t)(v34 + 37);
      unint64_t v36 = *v23;
      unint64_t v37 = *v23;
      uint64_t v38 = v34[50];
      unint64_t v39 = (v34[51] - v38) >> 3;
      if (v37 < v39
        && (uint64_t v40 = *(void *)(v38 + 8 * v37)) != 0
        && HIDWORD(v36) == HIDWORD(v40)
        && ((uint64_t v41 = v34[53], v41 + 16 * v40 != v34[54]) ? (v42 = v41 == 0) : (v42 = 1), !v42))
      {
        uint64_t v51 = *(void *)(v38 + 8 * v37);
        uint64_t v52 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v34 + 37), v36, v23);
        ++v52[3];
        uint64_t v53 = v41 + 16 * v51;
        uint64_t v11 = v91;
        unsigned int v43 = *(void **)(v53 + 8);
        unint64_t v36 = *v23;
        uint64_t v38 = v34[50];
        unint64_t v37 = *v23;
        if (v37 >= (v34[51] - v38) >> 3) {
          goto LABEL_57;
        }
      }
      else
      {
        unsigned int v43 = 0;
        if (v37 >= v39) {
          goto LABEL_57;
        }
      }
      uint64_t v44 = *(void *)(v38 + 8 * v37);
      if (v44 && HIDWORD(v36) == HIDWORD(v44))
      {
        uint64_t v45 = v34[53];
        uint64_t v46 = (void **)v34[54];
        uint64_t v47 = (void **)(v45 + 16 * v44);
        if (v47 != v46 && v45 != 0)
        {
          double v49 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v35, v36, v23);
          ++v49[3];
          uint64_t v50 = *v47;
          if (!v29) {
            goto LABEL_105;
          }
          goto LABEL_58;
        }
      }
LABEL_57:
      uint64_t v50 = 0;
      if (!v29) {
        goto LABEL_105;
      }
LABEL_58:
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v54 = v43[1];
      if (v54)
      {
        unint64_t v55 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index;
        uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index >= v54) {
            uint64_t v57 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index % v54;
          }
        }
        else
        {
          uint64_t v57 = (v54 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index;
        }
        uint64_t v58 = *(void **)(*v43 + 8 * v57);
        if (v58)
        {
          uint64_t v59 = (void *)*v58;
          if (v59)
          {
            if (v56.u32[0] < 2uLL)
            {
              unint64_t v60 = v54 - 1;
              while (1)
              {
                uint64_t v62 = v59[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index == v62)
                {
                  if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index) {
                    goto LABEL_80;
                  }
                }
                else if ((v62 & v60) != v57)
                {
                  goto LABEL_105;
                }
                uint64_t v59 = (void *)*v59;
                if (!v59) {
                  goto LABEL_105;
                }
              }
            }
            do
            {
              unint64_t v61 = v59[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index == v61)
              {
                if (v59[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index)
                {
LABEL_80:
                  {
                    if (v90)
                    {
                      md::typeToIntMap(v90);
                      uint64_t v11 = v91;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_131;
                  }
                  uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v63.i16[0] = vaddlv_u8(v63);
                  if (v63.u32[0] > 1uLL)
                  {
                    unint64_t v64 = v55;
                    if (v55 >= qword_1E957F030) {
                      unint64_t v64 = v55 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v64 = (qword_1E957F030 - 1) & v55;
                  }
                  unint64_t v65 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v64);
                  if (!v65 || (uint64_t v66 = *v65) == 0) {
LABEL_131:
                  }
                    abort();
                  if (v63.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v68 = v66[1];
                      if ((uint64_t *)v55 == v68)
                      {
                        if (v66[2] == (uint64_t *)v55) {
                          goto LABEL_101;
                        }
                      }
                      else if (((unint64_t)v68 & (qword_1E957F030 - 1)) != v64)
                      {
                        goto LABEL_131;
                      }
                      uint64_t v66 = (uint64_t **)*v66;
                      if (!v66) {
                        goto LABEL_131;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v67 = (unint64_t)v66[1];
                    if (v55 == v67)
                    {
                      if (v66[2] == (uint64_t *)v55)
                      {
LABEL_101:
                        uint64_t v69 = *((int *)v66 + 6);
                        uint64_t v70 = *((int *)v66 + 7);
                        if (v69 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v69, v29, 1);
                        }
                        if (v70 != -1) {
                          ggl::PipelineSetup::setConstantData(v50, v70, v29, 2);
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      if (v67 >= qword_1E957F030) {
                        v67 %= (unint64_t)qword_1E957F030;
                      }
                      if (v67 != v64) {
                        goto LABEL_131;
                      }
                    }
                    uint64_t v66 = (uint64_t **)*v66;
                    if (!v66) {
                      goto LABEL_131;
                    }
                  }
                }
              }
              else
              {
                if (v61 >= v54) {
                  v61 %= v54;
                }
                if (v61 != v57) {
                  break;
                }
              }
              uint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
        }
      }
LABEL_105:
      unint64_t v71 = v97;
      uint64_t v10 = *(unint64_t **)(v94 + 32);
      if (++v97 != v10)
      {
        uint64_t v72 = v95[4];
        unint64_t v73 = (v95[5] - v72) >> 3;
        uint64_t v74 = v71 + 2;
        while (1)
        {
          unint64_t v75 = *((unsigned int *)v74 - 1);
          unint64_t v76 = v75 >> 7;
          if (v75 >> 7 < v73)
          {
            uint64_t v77 = *(void *)(v72 + 8 * v76);
            if (v77)
            {
              unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (v75 & 0x7F));
              uint64_t v80 = v95[7];
              uint64_t v79 = v95[8];
              if (v78 < (v79 - v80) >> 3)
              {
                uint64_t v81 = v80 + 8 * v78;
                if (v81 != v79 && *(_DWORD *)(v81 + 4) == v75)
                {
                  uint64_t v83 = v96[4];
                  if (v76 < (v96[5] - v83) >> 3)
                  {
                    uint64_t v84 = *(void *)(v83 + 8 * v76);
                    if (v84)
                    {
                      unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * (v75 & 0x7F));
                      uint64_t v87 = v96[7];
                      uint64_t v86 = v96[8];
                      if (v85 < (v86 - v87) >> 3)
                      {
                        uint64_t v88 = v87 + 8 * v85;
                        if (v88 != v86 && *(_DWORD *)(v88 + 4) == v75) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint8x8_t v97 = v74;
          BOOL v20 = v74++ == v10;
          if (v20) {
            goto LABEL_9;
          }
        }
        uint64_t v10 = v74 - 1;
      }
LABEL_9:
      if (v93 == v10) {
        goto LABEL_130;
      }
    }
  }
  uint64_t v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_130:
  *uint64_t v11 = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
}

void sub_1A1962D44(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  unint64_t v85 = v7;
  uint64_t v86 = v3;
  uint64_t v87 = (void *)v4;
  uint64_t v88 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  unint64_t v89 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v85))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        unint64_t v89 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v85);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v84 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint8x8_t v34 = 0;
      }
      else {
        uint8x8_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      unint64_t v36 = *(void **)v35;
      unint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        unint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (v48 && HIDWORD(v40) == HIDWORD(v48))
      {
        uint64_t v49 = v38[53];
        uint64_t v50 = (void **)(v49 + 16 * v48);
        if (v50 == (void **)v38[54] || v49 == 0)
        {
          BOOL v82 = 0;
        }
        else
        {
          uint64_t v81 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
          ++v81[3];
          BOOL v82 = *v50;
        }
        uint64_t v10 = a1;
        goto LABEL_64;
      }
LABEL_63:
      BOOL v82 = 0;
LABEL_64:
      uint64_t v55 = md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>((uint64_t)v38, *v24);
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(v47, v82, v55);
      uint64_t v8 = (void *)v85[4];
      uint8x8_t v56 = v89 + 1;
      unint64_t v89 = v56;
      if (v56 == v8)
      {
        uint64_t result = v84;
        if (v9 == v8) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v57 = v86[4];
        do
        {
          unint64_t v58 = *((unsigned int *)v56 + 1);
          unint64_t v59 = v58 >> 7;
          if (v58 >> 7 < (v86[5] - v57) >> 3)
          {
            uint64_t v60 = *(void *)(v57 + 8 * v59);
            if (v60)
            {
              uint64_t v61 = v58 & 0x7F;
              unint64_t v62 = *(unsigned __int16 *)(v60 + 2 * v61);
              uint64_t v64 = v86[7];
              uint64_t v63 = v86[8];
              if (v62 < (v63 - v64) >> 3)
              {
                uint64_t v65 = v64 + 8 * v62;
                if (v65 != v63 && *(_DWORD *)(v65 + 4) == v58)
                {
                  uint64_t v67 = v87[4];
                  if (v59 < (v87[5] - v67) >> 3)
                  {
                    uint64_t v68 = *(void *)(v67 + 8 * v59);
                    if (v68)
                    {
                      unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * v61);
                      uint64_t v71 = v87[7];
                      uint64_t v70 = v87[8];
                      if (v69 < (v70 - v71) >> 3)
                      {
                        uint64_t v72 = v71 + 8 * v69;
                        if (v72 != v70 && *(_DWORD *)(v72 + 4) == v58)
                        {
                          uint64_t v74 = v88[4];
                          if (v59 < (v88[5] - v74) >> 3)
                          {
                            uint64_t v75 = *(void *)(v74 + 8 * v59);
                            if (v75)
                            {
                              unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * v61);
                              uint64_t v78 = v88[7];
                              uint64_t v77 = v88[8];
                              if (v76 < (v77 - v78) >> 3)
                              {
                                uint64_t v79 = v78 + 8 * v76;
                                if (*(_DWORD *)(v79 + 4) == v58 && v79 != v77)
                                {
                                  uint64_t v8 = v56;
                                  goto LABEL_92;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v56;
        }
        while (v56 != v8);
        uint8x8_t v56 = v8;
LABEL_92:
        uint64_t result = v84;
        unint64_t v89 = v56;
        if (v9 == v8) {
          goto LABEL_96;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_96:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::operator()(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint8x8_t v7 = (void *)v6;
  uint64_t v8 = v4 + 4;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v4[8] - v4[7]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  uint64_t v131 = v8;
  uint64_t v132 = v4;
  int v133 = (void *)v5;
  unint64_t v134 = (void *)v6;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  uint64_t v135 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v131))
  {
    uint64_t v11 = v9 + 1;
    do
    {
      uint64_t v9 = v11;
      uint64_t v135 = v11;
      if (v11 == v10) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v131);
      uint64_t v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_214;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v129 = v10;
  uint64_t v130 = result;
  unint64_t v126 = v2;
  do
  {
LABEL_13:
    void *result = *v9;
    unint64_t v14 = *v9;
    uint64_t v15 = HIDWORD(*v9);
    unint64_t v16 = *v9 >> 39;
    uint64_t v17 = v4[4];
    if (v16 < (v4[5] - v17) >> 3
      && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
      && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)), v21 = v4[7], uint64_t v20 = v4[8], v19 < (v20 - v21) >> 3)
      && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
    {
      uint64_t v24 = (unint64_t *)(v4[10] + 8 * v19);
    }
    else
    {
      uint64_t v24 = (unint64_t *)v4[11];
    }
    uint64_t v25 = v7[4];
    if (v16 < (v7[5] - v25) >> 3
      && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
      && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)), v29 = v7[7], v28 = v7[8], v27 < (v28 - v29) >> 3)
      && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
    {
      uint64_t v32 = v7[11];
      uint64_t v33 = v7[10] + 8 * v27;
    }
    else
    {
      uint64_t v32 = v7[11];
      uint64_t v33 = v32;
    }
    if (v33 == v32) {
      uint8x8_t v34 = 0;
    }
    else {
      uint8x8_t v34 = (unint64_t *)v33;
    }
    uint64_t v35 = **(void **)(v2 + 8);
    unint64_t v36 = *(void **)v35;
    unint64_t v37 = *(void **)(v35 + 8);
    if (v36 != v37)
    {
      while (*v36 != 0x41D4E9297E100630)
      {
        v36 += 5;
        if (v36 == v37) {
          goto LABEL_40;
        }
      }
    }
    if (v36 == v37)
    {
LABEL_40:
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = v36[3];
      unint64_t v39 = (std::__shared_weak_count *)v36[4];
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    unint64_t v40 = *v34;
    unint64_t v41 = *v34;
    uint64_t v42 = *(void *)(v38 + 400);
    unint64_t v43 = (*(void *)(v38 + 408) - v42) >> 3;
    if (v41 < v43
      && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
      && HIDWORD(v40) == HIDWORD(v44)
      && ((uint64_t v45 = *(void *)(v38 + 424), v45 + 16 * v44 != *(void *)(v38 + 432))
        ? (BOOL v46 = v45 == 0)
        : (BOOL v46 = 1),
          !v46))
    {
      uint64_t v52 = *(void *)(v42 + 8 * v41);
      uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v40, v34);
      ++v53[3];
      uint64_t v54 = v45 + 16 * v52;
      uint64_t v10 = v129;
      uint64_t v47 = *(void **)(v54 + 8);
      unint64_t v40 = *v34;
      uint64_t v42 = *(void *)(v38 + 400);
      unint64_t v41 = *v34;
      if (v41 >= (*(void *)(v38 + 408) - v42) >> 3) {
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v47 = 0;
      if (v41 >= v43) {
        goto LABEL_61;
      }
    }
    uint64_t v48 = *(void *)(v42 + 8 * v41);
    if (v48 && HIDWORD(v40) == HIDWORD(v48))
    {
      uint64_t v49 = *(void *)(v38 + 424);
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == *(void ***)(v38 + 432) || v49 == 0)
      {
        uint8x8_t v90 = 0;
      }
      else
      {
        unint64_t v89 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v40, v34);
        ++v89[3];
        uint8x8_t v90 = *v50;
      }
      uint64_t v10 = v129;
      goto LABEL_62;
    }
LABEL_61:
    uint8x8_t v90 = 0;
LABEL_62:
    unint64_t v55 = *v24;
    unint64_t v56 = *v24;
    uint64_t v57 = *(void *)(v38 + 5904);
    if (v56 >= (*(void *)(v38 + 5912) - v57) >> 3) {
      goto LABEL_67;
    }
    uint64_t v58 = *(void *)(v57 + 8 * v56);
    if (!v58 || HIDWORD(v55) != HIDWORD(v58)) {
      goto LABEL_67;
    }
    uint64_t v85 = *(void *)(v38 + 5928);
    if (v85 + 24 * v58 == *(void *)(v38 + 5936) || v85 == 0) {
      goto LABEL_67;
    }
    int v127 = (uint64_t *)(v85 + 24 * v58);
    uint64_t v128 = (uint64_t *)(v38 + 5800);
    unint64_t v87 = *(void *)(v38 + 5808);
    if (!v87) {
      goto LABEL_123;
    }
    uint8x8_t v88 = (uint8x8_t)vcnt_s8((int8x8_t)v87);
    v88.i16[0] = vaddlv_u8(v88);
    if (v88.u32[0] > 1uLL)
    {
      unint64_t v2 = *v24;
      if (v55 >= v87) {
        unint64_t v2 = v55 % v87;
      }
    }
    else
    {
      unint64_t v2 = (v87 - 1) & v55;
    }
    uint64_t v91 = *(void ***)(*v128 + 8 * v2);
    if (!v91 || (uint64_t v92 = *v91) == 0)
    {
LABEL_123:
      uint64_t v92 = operator new(0x30uLL);
      *uint64_t v92 = 0;
      v92[1] = v55;
      v92[2] = v55;
      v92[3] = 0;
      uint64_t v92[4] = 0;
      v92[5] = 0;
      float v95 = (float)(unint64_t)(*(void *)(v38 + 5824) + 1);
      float v96 = *(float *)(v38 + 5832);
      if (!v87 || (float)(v96 * (float)v87) < v95)
      {
        BOOL v97 = (v87 & (v87 - 1)) != 0;
        if (v87 < 3) {
          BOOL v97 = 1;
        }
        unint64_t v98 = v97 | (2 * v87);
        unint64_t v99 = vcvtps_u32_f32(v95 / v96);
        if (v98 <= v99) {
          size_t prime = v99;
        }
        else {
          size_t prime = v98;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v87 = *(void *)(v38 + 5808);
        }
        if (prime > v87) {
          goto LABEL_135;
        }
        if (prime < v87)
        {
          unint64_t v101 = vcvtps_u32_f32((float)*(unint64_t *)(v38 + 5824) / *(float *)(v38 + 5832));
          if (v87 < 3 || (uint8x8_t v102 = (uint8x8_t)vcnt_s8((int8x8_t)v87), v102.i16[0] = vaddlv_u8(v102), v102.u32[0] > 1uLL))
          {
            unint64_t v101 = std::__next_prime(v101);
          }
          else
          {
            uint64_t v103 = 1 << -(char)__clz(v101 - 1);
            if (v101 >= 2) {
              unint64_t v101 = v103;
            }
          }
          if (prime <= v101) {
            size_t prime = v101;
          }
          if (prime < v87) {
LABEL_135:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v128, prime);
        }
        unint64_t v87 = *(void *)(v38 + 5808);
        if ((v87 & (v87 - 1)) != 0)
        {
          if (v55 >= v87) {
            unint64_t v2 = v55 % v87;
          }
          else {
            unint64_t v2 = v55;
          }
        }
        else
        {
          unint64_t v2 = (v87 - 1) & v55;
        }
      }
      uint64_t v104 = *v128;
      uint64_t v105 = *(void **)(*v128 + 8 * v2);
      if (v105)
      {
        *uint64_t v92 = *v105;
        unint64_t v2 = v126;
        goto LABEL_159;
      }
      *uint64_t v92 = *(void *)(v38 + 5816);
      *(void *)(v38 + 5816) = v92;
      *(void *)(v104 + 8 * v2) = v38 + 5816;
      unint64_t v2 = v126;
      if (*v92)
      {
        unint64_t v106 = *(void *)(*v92 + 8);
        if ((v87 & (v87 - 1)) != 0)
        {
          if (v106 >= v87) {
            v106 %= v87;
          }
        }
        else
        {
          v106 &= v87 - 1;
        }
        uint64_t v105 = (void *)(*v128 + 8 * v106);
LABEL_159:
        *uint64_t v105 = v92;
      }
      ++*(void *)(v38 + 5824);
      goto LABEL_161;
    }
    if (v88.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v94 = v92[1];
        if (v94 == v55)
        {
          if (v92[2] == v55) {
            goto LABEL_122;
          }
        }
        else if ((v94 & (v87 - 1)) != v2)
        {
          goto LABEL_123;
        }
        uint64_t v92 = (void *)*v92;
        if (!v92) {
          goto LABEL_123;
        }
      }
    }
    while (1)
    {
      unint64_t v93 = v92[1];
      if (v93 == v55) {
        break;
      }
      if (v93 >= v87) {
        v93 %= v87;
      }
      if (v93 != v2) {
        goto LABEL_123;
      }
LABEL_112:
      uint64_t v92 = (void *)*v92;
      if (!v92) {
        goto LABEL_123;
      }
    }
    if (v92[2] != v55) {
      goto LABEL_112;
    }
LABEL_122:
    unint64_t v2 = v126;
LABEL_161:
    ++v92[3];
    uint64_t v107 = *v127;
    uint64_t v10 = v129;
    if (*v127)
    {
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v108 = v47[1];
      if (v108)
      {
        unint64_t v109 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index;
        uint8x8_t v110 = (uint8x8_t)vcnt_s8((int8x8_t)v108);
        v110.i16[0] = vaddlv_u8(v110);
        if (v110.u32[0] > 1uLL)
        {
          uint64_t v111 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index >= v108) {
            uint64_t v111 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index % v108;
          }
        }
        else
        {
          uint64_t v111 = (v108 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index;
        }
        int v112 = *(void **)(*v47 + 8 * v111);
        if (v112)
        {
          uint64_t v113 = (void *)*v112;
          if (v113)
          {
            if (v110.u32[0] < 2uLL)
            {
              unint64_t v114 = v108 - 1;
              while (1)
              {
                uint64_t v116 = v113[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index == v116)
                {
                  if (v113[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index) {
                    goto LABEL_184;
                  }
                }
                else if ((v116 & v114) != v111)
                {
                  goto LABEL_67;
                }
                uint64_t v113 = (void *)*v113;
                if (!v113) {
                  goto LABEL_67;
                }
              }
            }
            do
            {
              unint64_t v115 = v113[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index == v115)
              {
                if (v113[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index)
                {
LABEL_184:
                  {
                    if (v125)
                    {
                      md::typeToIntMap(v125);
                      unint64_t v2 = v126;
                      uint64_t v10 = v129;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_215;
                  }
                  uint8x8_t v117 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v117.i16[0] = vaddlv_u8(v117);
                  if (v117.u32[0] > 1uLL)
                  {
                    unint64_t v118 = v109;
                    if (v109 >= qword_1E957F030) {
                      unint64_t v118 = v109 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v118 = (qword_1E957F030 - 1) & v109;
                  }
                  uint64_t v119 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v118);
                  if (!v119 || (uint64_t v120 = *v119) == 0) {
LABEL_215:
                  }
                    abort();
                  if (v117.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v122 = v120[1];
                      if ((uint64_t *)v109 == v122)
                      {
                        if (v120[2] == (uint64_t *)v109) {
                          goto LABEL_205;
                        }
                      }
                      else if (((unint64_t)v122 & (qword_1E957F030 - 1)) != v118)
                      {
                        goto LABEL_215;
                      }
                      uint64_t v120 = (uint64_t **)*v120;
                      if (!v120) {
                        goto LABEL_215;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v121 = (unint64_t)v120[1];
                    if (v109 == v121)
                    {
                      if (v120[2] == (uint64_t *)v109)
                      {
LABEL_205:
                        uint64_t v123 = *((int *)v120 + 6);
                        uint64_t v124 = *((int *)v120 + 7);
                        if (v123 != -1) {
                          ggl::PipelineSetup::setConstantData(v90, v123, v107, 1);
                        }
                        if (v124 != -1) {
                          ggl::PipelineSetup::setConstantData(v90, v124, v107, 2);
                        }
                        goto LABEL_67;
                      }
                    }
                    else
                    {
                      if (v121 >= qword_1E957F030) {
                        v121 %= (unint64_t)qword_1E957F030;
                      }
                      if (v121 != v118) {
                        goto LABEL_215;
                      }
                    }
                    uint64_t v120 = (uint64_t **)*v120;
                    if (!v120) {
                      goto LABEL_215;
                    }
                  }
                }
              }
              else
              {
                if (v115 >= v108) {
                  v115 %= v108;
                }
                if (v115 != v111) {
                  break;
                }
              }
              uint64_t v113 = (void *)*v113;
            }
            while (v113);
          }
        }
      }
    }
LABEL_67:
    uint64_t v9 = (void *)v131[4];
    uint64_t v60 = v135 + 1;
    uint64_t v135 = v60;
    if (v60 == v9)
    {
      uint64_t result = v130;
      if (v10 == v9) {
        break;
      }
      goto LABEL_13;
    }
    uint64_t v61 = v132[4];
    uint64_t result = v130;
    do
    {
      unint64_t v62 = *((unsigned int *)v60 + 1);
      unint64_t v63 = v62 >> 7;
      if (v62 >> 7 < (v132[5] - v61) >> 3)
      {
        uint64_t v64 = *(void *)(v61 + 8 * v63);
        if (v64)
        {
          uint64_t v65 = v62 & 0x7F;
          unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
          uint64_t v67 = v132[7];
          uint64_t v68 = v132[8];
          if (v66 < (v68 - v67) >> 3)
          {
            uint64_t v69 = v67 + 8 * v66;
            if (v69 != v68 && *(_DWORD *)(v69 + 4) == v62)
            {
              uint64_t v71 = v133[4];
              if (v63 < (v133[5] - v71) >> 3)
              {
                uint64_t v72 = *(void *)(v71 + 8 * v63);
                if (v72)
                {
                  unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                  uint64_t v74 = v133[7];
                  uint64_t v75 = v133[8];
                  if (v73 < (v75 - v74) >> 3)
                  {
                    uint64_t v76 = v74 + 8 * v73;
                    if (v76 != v75 && *(_DWORD *)(v76 + 4) == v62)
                    {
                      uint64_t v78 = v134[4];
                      if (v63 < (v134[5] - v78) >> 3)
                      {
                        uint64_t v79 = *(void *)(v78 + 8 * v63);
                        if (v79)
                        {
                          unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                          uint64_t v82 = v134[7];
                          uint64_t v81 = v134[8];
                          if (v80 < (v81 - v82) >> 3)
                          {
                            uint64_t v83 = v82 + 8 * v80;
                            if (*(_DWORD *)(v83 + 4) == v62 && v83 != v81)
                            {
                              uint64_t v9 = v60;
                              goto LABEL_95;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v60;
    }
    while (v60 != v9);
    uint64_t v60 = v9;
LABEL_95:
    uint64_t v135 = v60;
  }
  while (v10 != v9);
LABEL_214:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1963C90(_Unwind_Exception *a1)
{
}

void sub_1A1963CA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = (void *)(v3 + 32);
  if (v4[8] - v4[7] < *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint8x8_t v7 = v4 + 4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  unint64_t v121 = v7;
  uint64_t v122 = (void *)v3;
  uint64_t v123 = v4;
  uint64_t v124 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v125 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v121))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v125 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v121);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v120 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v4[4];
      if (v16 < (v4[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v4[7],
            uint64_t v20 = v4[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = v4[11];
        uint64_t v25 = v4[10] + 8 * v19;
      }
      else
      {
        uint64_t v24 = v4[11];
        uint64_t v25 = v24;
      }
      if (v25 == v24) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = (unint64_t *)v25;
      }
      uint64_t v27 = v6[4];
      if (v16 < (v6[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v16)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v31 = v6[7],
            uint64_t v30 = v6[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v15) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v6[11];
        uint64_t v35 = v6[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v6[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v10 + 8);
      uint64_t v38 = *(void **)v37;
      unint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_45;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_45:
        unint64_t v40 = 0;
      }
      else
      {
        unint64_t v40 = (void *)v38[3];
        unint64_t v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      unint64_t v42 = *v36;
      unint64_t v43 = *v36;
      uint64_t v44 = v40[50];
      unint64_t v45 = (v40[51] - v44) >> 3;
      if (v43 < v45
        && (uint64_t v46 = *(void *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((uint64_t v47 = v40[53], v47 + 16 * v46 != v40[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        uint64_t v54 = *(void *)(v44 + 8 * v43);
        unint64_t v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v42, v36);
        ++v55[3];
        uint64_t v56 = v47 + 16 * v54;
        uint64_t v10 = a1;
        uint64_t v49 = *(void **)(v56 + 8);
        unint64_t v42 = *v36;
        uint64_t v44 = v40[50];
        unint64_t v43 = *v36;
        if (v43 >= (v40[51] - v44) >> 3) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v49 = 0;
        if (v43 >= v45) {
          goto LABEL_66;
        }
      }
      uint64_t v50 = *(void *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        uint64_t v51 = v40[53];
        uint64_t v52 = (void **)(v51 + 16 * v50);
        if (v52 == (void **)v40[54] || v51 == 0)
        {
          uint64_t v79 = 0;
        }
        else
        {
          uint64_t v78 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v42, v36);
          ++v78[3];
          uint64_t v79 = *v52;
        }
        uint64_t v10 = a1;
        goto LABEL_67;
      }
LABEL_66:
      uint64_t v79 = 0;
LABEL_67:
      unint64_t v57 = *v26;
      unint64_t v58 = *v26;
      uint64_t v59 = v40[195];
      if (v58 < (v40[196] - v59) >> 3
        && ((uint64_t v60 = *(void *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v57) == HIDWORD(v60)) : (v61 = 0), v61))
      {
        uint64_t v63 = v40[198] + 20 * v60;
        uint64_t v62 = v40[199];
      }
      else
      {
        uint64_t v62 = v40[199];
        uint64_t v63 = v62;
      }
      if (v63 == v62) {
        uint64_t v64 = 0;
      }
      else {
        uint64_t v64 = (float *)v63;
      }
      if (v64)
      {
        uint64_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v40 + 182), v57, v26);
        ++v65[3];
      }
      unint64_t v66 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>(v40 + 172, v64);
      if (v66) {
        unint64_t v67 = *((void *)v66 + 5);
      }
      else {
        unint64_t v67 = 0;
      }
      unint64_t v126 = v67;
      uint64_t v68 = v40[158];
      if (v67 < (unint64_t)((v40[159] - v68) >> 3))
      {
        uint64_t v69 = *(void *)(v68 + 8 * v67);
        if (v69)
        {
          if (HIDWORD(v67) == HIDWORD(v69))
          {
            uint64_t v70 = v40[161];
            if (v70)
            {
              uint64_t v71 = (uint64_t *)(v70 + 24 * v69);
              if (v71 != (uint64_t *)v40[162])
              {
                uint64_t v72 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>> const&>,std::tuple<>>((uint64_t)(v40 + 145), v67, &v126);
                ++v72[3];
                uint64_t v73 = *v71;
                if (v73)
                {
                  {
                    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
                  }
                  unint64_t v74 = v49[1];
                  if (v74)
                  {
                    unint64_t v75 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index;
                    uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
                    v76.i16[0] = vaddlv_u8(v76);
                    if (v76.u32[0] > 1uLL)
                    {
                      uint64_t v77 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index;
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index >= v74) {
                        uint64_t v77 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index % v74;
                      }
                    }
                    else
                    {
                      uint64_t v77 = (v74 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index;
                    }
                    unint64_t v80 = *(void **)(*v49 + 8 * v77);
                    if (v80)
                    {
                      uint64_t v81 = (void *)*v80;
                      if (v81)
                      {
                        if (v76.u32[0] < 2uLL)
                        {
                          unint64_t v82 = v74 - 1;
                          while (1)
                          {
                            uint64_t v84 = v81[1];
                            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index == v84)
                            {
                              if (v81[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index) {
                                goto LABEL_111;
                              }
                            }
                            else if ((v84 & v82) != v77)
                            {
                              goto LABEL_136;
                            }
                            uint64_t v81 = (void *)*v81;
                            if (!v81) {
                              goto LABEL_136;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v83 = v81[1];
                          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index == v83)
                          {
                            if (v81[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index)
                            {
LABEL_111:
                              {
                                if (v118)
                                {
                                  md::typeToIntMap(v118);
                                  uint64_t v10 = a1;
                                }
                              }
                              if (!qword_1E957F030) {
                                goto LABEL_172;
                              }
                              uint8x8_t v85 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                              v85.i16[0] = vaddlv_u8(v85);
                              if (v85.u32[0] > 1uLL)
                              {
                                unint64_t v86 = v75;
                                if (v75 >= qword_1E957F030) {
                                  unint64_t v86 = v75 % qword_1E957F030;
                                }
                              }
                              else
                              {
                                unint64_t v86 = (qword_1E957F030 - 1) & v75;
                              }
                              unint64_t v87 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v86);
                              if (!v87 || (uint8x8_t v88 = *v87) == 0) {
LABEL_172:
                              }
                                abort();
                              if (v85.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  uint8x8_t v90 = v88[1];
                                  if ((uint64_t *)v75 == v90)
                                  {
                                    if (v88[2] == (uint64_t *)v75) {
                                      goto LABEL_132;
                                    }
                                  }
                                  else if (((unint64_t)v90 & (qword_1E957F030 - 1)) != v86)
                                  {
                                    goto LABEL_172;
                                  }
                                  uint8x8_t v88 = (uint64_t **)*v88;
                                  if (!v88) {
                                    goto LABEL_172;
                                  }
                                }
                              }
                              while (1)
                              {
                                unint64_t v89 = (unint64_t)v88[1];
                                if (v75 == v89)
                                {
                                  if (v88[2] == (uint64_t *)v75)
                                  {
LABEL_132:
                                    uint64_t v91 = *((int *)v88 + 6);
                                    uint64_t v92 = *((int *)v88 + 7);
                                    if (v91 != -1) {
                                      ggl::PipelineSetup::setConstantData(v79, v91, v73, 1);
                                    }
                                    if (v92 != -1) {
                                      ggl::PipelineSetup::setConstantData(v79, v92, v73, 2);
                                    }
                                    goto LABEL_136;
                                  }
                                }
                                else
                                {
                                  if (v89 >= qword_1E957F030) {
                                    v89 %= (unint64_t)qword_1E957F030;
                                  }
                                  if (v89 != v86) {
                                    goto LABEL_172;
                                  }
                                }
                                uint8x8_t v88 = (uint64_t **)*v88;
                                if (!v88) {
                                  goto LABEL_172;
                                }
                              }
                            }
                          }
                          else
                          {
                            if (v83 >= v74) {
                              v83 %= v74;
                            }
                            if (v83 != v77) {
                              break;
                            }
                          }
                          uint64_t v81 = (void *)*v81;
                        }
                        while (v81);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_136:
      uint64_t v8 = (void *)v121[4];
      unint64_t v93 = v125 + 1;
      uint64_t v125 = v93;
      if (v93 == v8)
      {
        uint64_t result = v120;
        if (v9 == v8) {
          goto LABEL_171;
        }
      }
      else
      {
        uint64_t v94 = v122[4];
        uint64_t result = v120;
        do
        {
          unint64_t v95 = *((unsigned int *)v93 + 1);
          unint64_t v96 = v95 >> 7;
          if (v95 >> 7 < (v122[5] - v94) >> 3)
          {
            uint64_t v97 = *(void *)(v94 + 8 * v96);
            if (v97)
            {
              uint64_t v98 = v95 & 0x7F;
              unint64_t v99 = *(unsigned __int16 *)(v97 + 2 * v98);
              uint64_t v100 = v122[7];
              uint64_t v101 = v122[8];
              if (v99 < (v101 - v100) >> 3)
              {
                uint64_t v102 = v100 + 8 * v99;
                if (v102 != v101 && *(_DWORD *)(v102 + 4) == v95)
                {
                  uint64_t v104 = v123[4];
                  if (v96 < (v123[5] - v104) >> 3)
                  {
                    uint64_t v105 = *(void *)(v104 + 8 * v96);
                    if (v105)
                    {
                      unint64_t v106 = *(unsigned __int16 *)(v105 + 2 * v98);
                      uint64_t v107 = v123[7];
                      uint64_t v108 = v123[8];
                      if (v106 < (v108 - v107) >> 3)
                      {
                        uint64_t v109 = v107 + 8 * v106;
                        if (v109 != v108 && *(_DWORD *)(v109 + 4) == v95)
                        {
                          uint64_t v111 = v124[4];
                          if (v96 < (v124[5] - v111) >> 3)
                          {
                            uint64_t v112 = *(void *)(v111 + 8 * v96);
                            if (v112)
                            {
                              unint64_t v113 = *(unsigned __int16 *)(v112 + 2 * v98);
                              uint64_t v115 = v124[7];
                              uint64_t v114 = v124[8];
                              if (v113 < (v114 - v115) >> 3)
                              {
                                uint64_t v116 = v115 + 8 * v113;
                                if (*(_DWORD *)(v116 + 4) == v95 && v116 != v114)
                                {
                                  uint64_t v8 = v93;
                                  goto LABEL_164;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v93;
        }
        while (v93 != v8);
        unint64_t v93 = v8;
LABEL_164:
        uint64_t v125 = v93;
        if (v9 == v8) {
          goto LABEL_171;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_171:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1964500(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::operator()(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint8x8_t v7 = (void *)v6;
  uint64_t v8 = v4 + 4;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v4[8] - v4[7]) {
    uint64_t v8 = (void *)(v5 + 32);
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < v8[4] - v8[3]) {
    uint64_t v8 = (void *)(v6 + 32);
  }
  uint64_t v131 = v8;
  uint64_t v132 = v4;
  int v133 = (void *)v5;
  unint64_t v134 = (void *)v6;
  uint64_t v9 = (void *)v8[3];
  uint64_t v10 = (void *)v8[4];
  uint64_t v135 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v131))
  {
    uint64_t v11 = v9 + 1;
    do
    {
      uint64_t v9 = v11;
      uint64_t v135 = v11;
      if (v11 == v10) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v131);
      uint64_t v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_214;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v129 = v10;
  uint64_t v130 = result;
  unint64_t v126 = v2;
  do
  {
LABEL_13:
    void *result = *v9;
    unint64_t v14 = *v9;
    uint64_t v15 = HIDWORD(*v9);
    unint64_t v16 = *v9 >> 39;
    uint64_t v17 = v4[4];
    if (v16 < (v4[5] - v17) >> 3
      && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
      && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)), v21 = v4[7], uint64_t v20 = v4[8], v19 < (v20 - v21) >> 3)
      && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
    {
      uint64_t v24 = (unint64_t *)(v4[10] + 32 * v19);
    }
    else
    {
      uint64_t v24 = (unint64_t *)v4[11];
    }
    uint64_t v25 = v7[4];
    if (v16 < (v7[5] - v25) >> 3
      && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
      && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)), v29 = v7[7], v28 = v7[8], v27 < (v28 - v29) >> 3)
      && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
    {
      uint64_t v32 = v7[11];
      uint64_t v33 = v7[10] + 8 * v27;
    }
    else
    {
      uint64_t v32 = v7[11];
      uint64_t v33 = v32;
    }
    if (v33 == v32) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = (unint64_t *)v33;
    }
    uint64_t v35 = **(void **)(v2 + 8);
    unint64_t v36 = *(void **)v35;
    uint64_t v37 = *(void **)(v35 + 8);
    if (v36 != v37)
    {
      while (*v36 != 0x41D4E9297E100630)
      {
        v36 += 5;
        if (v36 == v37) {
          goto LABEL_40;
        }
      }
    }
    if (v36 == v37)
    {
LABEL_40:
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = v36[3];
      unint64_t v39 = (std::__shared_weak_count *)v36[4];
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    unint64_t v40 = *v34;
    unint64_t v41 = *v34;
    uint64_t v42 = *(void *)(v38 + 400);
    unint64_t v43 = (*(void *)(v38 + 408) - v42) >> 3;
    if (v41 < v43
      && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
      && HIDWORD(v40) == HIDWORD(v44)
      && ((uint64_t v45 = *(void *)(v38 + 424), v45 + 16 * v44 != *(void *)(v38 + 432))
        ? (BOOL v46 = v45 == 0)
        : (BOOL v46 = 1),
          !v46))
    {
      uint64_t v52 = *(void *)(v42 + 8 * v41);
      uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v40, v34);
      ++v53[3];
      uint64_t v54 = v45 + 16 * v52;
      uint64_t v10 = v129;
      uint64_t v47 = *(void **)(v54 + 8);
      unint64_t v40 = *v34;
      uint64_t v42 = *(void *)(v38 + 400);
      unint64_t v41 = *v34;
      if (v41 >= (*(void *)(v38 + 408) - v42) >> 3) {
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v47 = 0;
      if (v41 >= v43) {
        goto LABEL_61;
      }
    }
    uint64_t v48 = *(void *)(v42 + 8 * v41);
    if (v48 && HIDWORD(v40) == HIDWORD(v48))
    {
      uint64_t v49 = *(void *)(v38 + 424);
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == *(void ***)(v38 + 432) || v49 == 0)
      {
        uint8x8_t v90 = 0;
      }
      else
      {
        unint64_t v89 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v38 + 296, v40, v34);
        ++v89[3];
        uint8x8_t v90 = *v50;
      }
      uint64_t v10 = v129;
      goto LABEL_62;
    }
LABEL_61:
    uint8x8_t v90 = 0;
LABEL_62:
    unint64_t v55 = *v24;
    unint64_t v56 = *v24;
    uint64_t v57 = *(void *)(v38 + 6968);
    if (v56 >= (*(void *)(v38 + 6976) - v57) >> 3) {
      goto LABEL_67;
    }
    uint64_t v58 = *(void *)(v57 + 8 * v56);
    if (!v58 || HIDWORD(v55) != HIDWORD(v58)) {
      goto LABEL_67;
    }
    uint64_t v85 = *(void *)(v38 + 6992);
    if (v85 + 24 * v58 == *(void *)(v38 + 7000) || v85 == 0) {
      goto LABEL_67;
    }
    int v127 = (uint64_t *)(v85 + 24 * v58);
    uint64_t v128 = (uint64_t *)(v38 + 6864);
    unint64_t v87 = *(void *)(v38 + 6872);
    if (!v87) {
      goto LABEL_123;
    }
    uint8x8_t v88 = (uint8x8_t)vcnt_s8((int8x8_t)v87);
    v88.i16[0] = vaddlv_u8(v88);
    if (v88.u32[0] > 1uLL)
    {
      unint64_t v2 = *v24;
      if (v55 >= v87) {
        unint64_t v2 = v55 % v87;
      }
    }
    else
    {
      unint64_t v2 = (v87 - 1) & v55;
    }
    uint64_t v91 = *(void ***)(*v128 + 8 * v2);
    if (!v91 || (uint64_t v92 = *v91) == 0)
    {
LABEL_123:
      uint64_t v92 = operator new(0x30uLL);
      *uint64_t v92 = 0;
      v92[1] = v55;
      v92[2] = v55;
      v92[3] = 0;
      uint64_t v92[4] = 0;
      v92[5] = 0;
      float v95 = (float)(unint64_t)(*(void *)(v38 + 6888) + 1);
      float v96 = *(float *)(v38 + 6896);
      if (!v87 || (float)(v96 * (float)v87) < v95)
      {
        BOOL v97 = (v87 & (v87 - 1)) != 0;
        if (v87 < 3) {
          BOOL v97 = 1;
        }
        unint64_t v98 = v97 | (2 * v87);
        unint64_t v99 = vcvtps_u32_f32(v95 / v96);
        if (v98 <= v99) {
          size_t prime = v99;
        }
        else {
          size_t prime = v98;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v87 = *(void *)(v38 + 6872);
        }
        if (prime > v87) {
          goto LABEL_135;
        }
        if (prime < v87)
        {
          unint64_t v101 = vcvtps_u32_f32((float)*(unint64_t *)(v38 + 6888) / *(float *)(v38 + 6896));
          if (v87 < 3 || (uint8x8_t v102 = (uint8x8_t)vcnt_s8((int8x8_t)v87), v102.i16[0] = vaddlv_u8(v102), v102.u32[0] > 1uLL))
          {
            unint64_t v101 = std::__next_prime(v101);
          }
          else
          {
            uint64_t v103 = 1 << -(char)__clz(v101 - 1);
            if (v101 >= 2) {
              unint64_t v101 = v103;
            }
          }
          if (prime <= v101) {
            size_t prime = v101;
          }
          if (prime < v87) {
LABEL_135:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v128, prime);
        }
        unint64_t v87 = *(void *)(v38 + 6872);
        if ((v87 & (v87 - 1)) != 0)
        {
          if (v55 >= v87) {
            unint64_t v2 = v55 % v87;
          }
          else {
            unint64_t v2 = v55;
          }
        }
        else
        {
          unint64_t v2 = (v87 - 1) & v55;
        }
      }
      uint64_t v104 = *v128;
      uint64_t v105 = *(void **)(*v128 + 8 * v2);
      if (v105)
      {
        *uint64_t v92 = *v105;
        unint64_t v2 = v126;
        goto LABEL_159;
      }
      *uint64_t v92 = *(void *)(v38 + 6880);
      *(void *)(v38 + 6880) = v92;
      *(void *)(v104 + 8 * v2) = v38 + 6880;
      unint64_t v2 = v126;
      if (*v92)
      {
        unint64_t v106 = *(void *)(*v92 + 8);
        if ((v87 & (v87 - 1)) != 0)
        {
          if (v106 >= v87) {
            v106 %= v87;
          }
        }
        else
        {
          v106 &= v87 - 1;
        }
        uint64_t v105 = (void *)(*v128 + 8 * v106);
LABEL_159:
        *uint64_t v105 = v92;
      }
      ++*(void *)(v38 + 6888);
      goto LABEL_161;
    }
    if (v88.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v94 = v92[1];
        if (v94 == v55)
        {
          if (v92[2] == v55) {
            goto LABEL_122;
          }
        }
        else if ((v94 & (v87 - 1)) != v2)
        {
          goto LABEL_123;
        }
        uint64_t v92 = (void *)*v92;
        if (!v92) {
          goto LABEL_123;
        }
      }
    }
    while (1)
    {
      unint64_t v93 = v92[1];
      if (v93 == v55) {
        break;
      }
      if (v93 >= v87) {
        v93 %= v87;
      }
      if (v93 != v2) {
        goto LABEL_123;
      }
LABEL_112:
      uint64_t v92 = (void *)*v92;
      if (!v92) {
        goto LABEL_123;
      }
    }
    if (v92[2] != v55) {
      goto LABEL_112;
    }
LABEL_122:
    unint64_t v2 = v126;
LABEL_161:
    ++v92[3];
    uint64_t v107 = *v127;
    uint64_t v10 = v129;
    if (*v127)
    {
      {
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v108 = v47[1];
      if (v108)
      {
        unint64_t v109 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index;
        uint8x8_t v110 = (uint8x8_t)vcnt_s8((int8x8_t)v108);
        v110.i16[0] = vaddlv_u8(v110);
        if (v110.u32[0] > 1uLL)
        {
          uint64_t v111 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index >= v108) {
            uint64_t v111 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index % v108;
          }
        }
        else
        {
          uint64_t v111 = (v108 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index;
        }
        uint64_t v112 = *(void **)(*v47 + 8 * v111);
        if (v112)
        {
          unint64_t v113 = (void *)*v112;
          if (v113)
          {
            if (v110.u32[0] < 2uLL)
            {
              unint64_t v114 = v108 - 1;
              while (1)
              {
                uint64_t v116 = v113[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index == v116)
                {
                  if (v113[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index) {
                    goto LABEL_184;
                  }
                }
                else if ((v116 & v114) != v111)
                {
                  goto LABEL_67;
                }
                unint64_t v113 = (void *)*v113;
                if (!v113) {
                  goto LABEL_67;
                }
              }
            }
            do
            {
              unint64_t v115 = v113[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index == v115)
              {
                if (v113[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index)
                {
LABEL_184:
                  {
                    if (v125)
                    {
                      md::typeToIntMap(v125);
                      unint64_t v2 = v126;
                      uint64_t v10 = v129;
                    }
                  }
                  if (!qword_1E957F030) {
                    goto LABEL_215;
                  }
                  uint8x8_t v117 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                  v117.i16[0] = vaddlv_u8(v117);
                  if (v117.u32[0] > 1uLL)
                  {
                    unint64_t v118 = v109;
                    if (v109 >= qword_1E957F030) {
                      unint64_t v118 = v109 % qword_1E957F030;
                    }
                  }
                  else
                  {
                    unint64_t v118 = (qword_1E957F030 - 1) & v109;
                  }
                  uint64_t v119 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v118);
                  if (!v119 || (uint64_t v120 = *v119) == 0) {
LABEL_215:
                  }
                    abort();
                  if (v117.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v122 = v120[1];
                      if ((uint64_t *)v109 == v122)
                      {
                        if (v120[2] == (uint64_t *)v109) {
                          goto LABEL_205;
                        }
                      }
                      else if (((unint64_t)v122 & (qword_1E957F030 - 1)) != v118)
                      {
                        goto LABEL_215;
                      }
                      uint64_t v120 = (uint64_t **)*v120;
                      if (!v120) {
                        goto LABEL_215;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v121 = (unint64_t)v120[1];
                    if (v109 == v121)
                    {
                      if (v120[2] == (uint64_t *)v109)
                      {
LABEL_205:
                        uint64_t v123 = *((int *)v120 + 6);
                        uint64_t v124 = *((int *)v120 + 7);
                        if (v123 != -1) {
                          ggl::PipelineSetup::setConstantData(v90, v123, v107, 1);
                        }
                        if (v124 != -1) {
                          ggl::PipelineSetup::setConstantData(v90, v124, v107, 2);
                        }
                        goto LABEL_67;
                      }
                    }
                    else
                    {
                      if (v121 >= qword_1E957F030) {
                        v121 %= (unint64_t)qword_1E957F030;
                      }
                      if (v121 != v118) {
                        goto LABEL_215;
                      }
                    }
                    uint64_t v120 = (uint64_t **)*v120;
                    if (!v120) {
                      goto LABEL_215;
                    }
                  }
                }
              }
              else
              {
                if (v115 >= v108) {
                  v115 %= v108;
                }
                if (v115 != v111) {
                  break;
                }
              }
              unint64_t v113 = (void *)*v113;
            }
            while (v113);
          }
        }
      }
    }
LABEL_67:
    uint64_t v9 = (void *)v131[4];
    uint64_t v60 = v135 + 1;
    uint64_t v135 = v60;
    if (v60 == v9)
    {
      uint64_t result = v130;
      if (v10 == v9) {
        break;
      }
      goto LABEL_13;
    }
    uint64_t v61 = v132[4];
    uint64_t result = v130;
    do
    {
      unint64_t v62 = *((unsigned int *)v60 + 1);
      unint64_t v63 = v62 >> 7;
      if (v62 >> 7 < (v132[5] - v61) >> 3)
      {
        uint64_t v64 = *(void *)(v61 + 8 * v63);
        if (v64)
        {
          uint64_t v65 = v62 & 0x7F;
          unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
          uint64_t v67 = v132[7];
          uint64_t v68 = v132[8];
          if (v66 < (v68 - v67) >> 3)
          {
            uint64_t v69 = v67 + 8 * v66;
            if (v69 != v68 && *(_DWORD *)(v69 + 4) == v62)
            {
              uint64_t v71 = v133[4];
              if (v63 < (v133[5] - v71) >> 3)
              {
                uint64_t v72 = *(void *)(v71 + 8 * v63);
                if (v72)
                {
                  unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                  uint64_t v74 = v133[7];
                  uint64_t v75 = v133[8];
                  if (v73 < (v75 - v74) >> 3)
                  {
                    uint64_t v76 = v74 + 8 * v73;
                    if (v76 != v75 && *(_DWORD *)(v76 + 4) == v62)
                    {
                      uint64_t v78 = v134[4];
                      if (v63 < (v134[5] - v78) >> 3)
                      {
                        uint64_t v79 = *(void *)(v78 + 8 * v63);
                        if (v79)
                        {
                          unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                          uint64_t v82 = v134[7];
                          uint64_t v81 = v134[8];
                          if (v80 < (v81 - v82) >> 3)
                          {
                            uint64_t v83 = v82 + 8 * v80;
                            if (*(_DWORD *)(v83 + 4) == v62 && v83 != v81)
                            {
                              uint64_t v9 = v60;
                              goto LABEL_95;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v60;
    }
    while (v60 != v9);
    uint64_t v60 = v9;
LABEL_95:
    uint64_t v135 = v60;
  }
  while (v10 != v9);
LABEL_214:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A1964F6C(_Unwind_Exception *a1)
{
}

void sub_1A1964F84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  unint64_t v113 = (void *)v4;
  unint64_t v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  unint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        unint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint8x8_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 16 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      unint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        unint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        unint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[711];
      if (v55 < (unint64_t)((v38[712] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[714];
          uint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[715] && v84 != 0)
          {
            unint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::PositionScaleInfo>> const&>,std::tuple<>>((uint64_t)(v38 + 703), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index;
                }
                float v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  float v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        float v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint8x8_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (uint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              uint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            uint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      float v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      unint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        unint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A1965748(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v132 = v7;
  int v133 = v3;
  unint64_t v134 = (void *)v4;
  uint64_t v135 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v136 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132))
  {
    uint64_t v10 = v8 + 1;
    do
    {
      uint64_t v8 = v10;
      uint64_t v136 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132);
      uint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_171;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v130 = result;
  do
  {
LABEL_13:
    void *result = *v8;
    unint64_t v13 = *v8;
    uint64_t v14 = HIDWORD(*v8);
    unint64_t v15 = *v8 >> 39;
    uint64_t v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
      && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v14) : (BOOL v22 = 0), v22))
    {
      BOOL v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      BOOL v23 = (unint64_t *)v3[11];
    }
    uint64_t v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (uint64_t v25 = *(void *)(v24 + 8 * v15)) != 0
      && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (BOOL v30 = *(_DWORD *)(v29 + 4) == v14) : (BOOL v30 = 0), v30))
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v6[10] + 8 * v26;
    }
    else
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v31;
    }
    if (v32 == v31) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = (unint64_t *)v32;
    }
    uint64_t v34 = **(void **)(a1 + 8);
    uint64_t v35 = *(void **)v34;
    unint64_t v36 = *(void **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36) {
          goto LABEL_40;
        }
      }
    }
    if (v35 == v36)
    {
LABEL_40:
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = (void *)v35[3];
      uint64_t v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    unint64_t v39 = *v33;
    unint64_t v40 = *v33;
    uint64_t v41 = v37[50];
    unint64_t v42 = (v37[51] - v41) >> 3;
    if (v40 < v42
      && (uint64_t v43 = *(void *)(v41 + 8 * v40)) != 0
      && HIDWORD(v39) == HIDWORD(v43)
      && ((uint64_t v44 = v37[53], v44 + 16 * v43 != v37[54]) ? (v45 = v44 == 0) : (v45 = 1), !v45))
    {
      uint64_t v53 = *(void *)(v41 + 8 * v40);
      uint64_t v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
      ++v54[3];
      BOOL v46 = *(void **)(v44 + 16 * v53 + 8);
      unint64_t v39 = *v33;
      uint64_t v41 = v37[50];
      unint64_t v40 = *v33;
      if (v40 >= (v37[51] - v41) >> 3) {
        goto LABEL_60;
      }
    }
    else
    {
      BOOL v46 = 0;
      if (v40 >= v42) {
        goto LABEL_60;
      }
    }
    uint64_t v47 = *(void *)(v41 + 8 * v40);
    if (!v47
      || HIDWORD(v39) != HIDWORD(v47)
      || ((uint64_t v48 = v37[53], v49 = (void *)(v48 + 16 * v47), v49 != (void *)v37[54])
        ? (BOOL v50 = v48 == 0)
        : (BOOL v50 = 1),
          v50))
    {
LABEL_60:
      uint64_t v52 = 0;
      goto LABEL_61;
    }
    uint64_t v51 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
    ++v51[3];
    uint64_t v52 = (void *)*v49;
LABEL_61:
    unint64_t v55 = *v23;
    unint64_t v137 = v55;
    uint64_t v56 = v37[1298];
    if (v55 < (unint64_t)((v37[1299] - v56) >> 3)
      && ((uint64_t v57 = *(void *)(v56 + 8 * v55)) != 0 ? (v58 = HIDWORD(v55) == HIDWORD(v57)) : (v58 = 0), v58))
    {
      uint64_t v60 = (uint64_t *)(v37[1301] + 8 * v57);
      uint64_t v59 = (uint64_t *)v37[1302];
    }
    else
    {
      uint64_t v59 = (uint64_t *)v37[1302];
      uint64_t v60 = v59;
    }
    unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v55, &v137);
    uint64_t v62 = 0;
    ++v61[3];
    if (v60 != v59 && v60) {
      uint64_t v62 = *v60;
    }
    {
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v63 = v46[1];
    if (!v63) {
      goto LABEL_134;
    }
    unint64_t v64 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index;
    uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index >= v63) {
        uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index % v63;
      }
    }
    else
    {
      uint64_t v66 = (v63 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index;
    }
    uint64_t v67 = *(void **)(*v46 + 8 * v66);
    if (!v67) {
      goto LABEL_134;
    }
    uint64_t v68 = (void *)*v67;
    if (!v68) {
      goto LABEL_134;
    }
    if (v65.u32[0] < 2uLL)
    {
      unint64_t v69 = v63 - 1;
      while (1)
      {
        uint64_t v71 = v68[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index == v71)
        {
          if (v68[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index) {
            goto LABEL_93;
          }
        }
        else if ((v71 & v69) != v66)
        {
          goto LABEL_134;
        }
        uint64_t v68 = (void *)*v68;
        if (!v68) {
          goto LABEL_134;
        }
      }
    }
    while (1)
    {
      unint64_t v70 = v68[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index == v70) {
        break;
      }
      if (v70 >= v63) {
        v70 %= v63;
      }
      if (v70 != v66) {
        goto LABEL_134;
      }
LABEL_81:
      uint64_t v68 = (void *)*v68;
      if (!v68) {
        goto LABEL_134;
      }
    }
    if (v68[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index) {
      goto LABEL_81;
    }
LABEL_93:
    {
      if (v129)
      {
        md::typeToIntMap(v129);
      }
    }
    if (!qword_1E957F030) {
      goto LABEL_172;
    }
    uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
    v72.i16[0] = vaddlv_u8(v72);
    if (v72.u32[0] > 1uLL)
    {
      unint64_t v73 = v64;
      if (v64 >= qword_1E957F030) {
        unint64_t v73 = v64 % qword_1E957F030;
      }
    }
    else
    {
      unint64_t v73 = (qword_1E957F030 - 1) & v64;
    }
    uint64_t v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
    if (!v74 || (uint64_t v75 = *v74) == 0) {
LABEL_172:
    }
      abort();
    if (v72.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v77 = v75[1];
        if ((uint64_t *)v64 == v77)
        {
          if (v75[2] == (uint64_t *)v64) {
            goto LABEL_114;
          }
        }
        else if (((unint64_t)v77 & (qword_1E957F030 - 1)) != v73)
        {
          goto LABEL_172;
        }
        uint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
      }
    }
    while (2)
    {
      unint64_t v76 = (unint64_t)v75[1];
      if (v64 != v76)
      {
        if (v76 >= qword_1E957F030) {
          v76 %= (unint64_t)qword_1E957F030;
        }
        if (v76 != v73) {
          goto LABEL_172;
        }
LABEL_104:
        uint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
        continue;
      }
      break;
    }
    if (v75[2] != (uint64_t *)v64) {
      goto LABEL_104;
    }
LABEL_114:
    uint64_t v78 = *((int *)v75 + 6);
    uint64_t v79 = *((int *)v75 + 7);
    if (v78 != -1)
    {
      uint64_t v80 = v52[2];
      if (v80
        && (uint64_t v81 = *(void *)(*(void *)(*(void *)(v80 + 48) + 72) + 8), (v82 = *(void *)(v81 + 56)) != 0))
      {
        uint64_t v83 = 0;
        uint64_t v84 = *(void *)(v81 + 48);
        uint64_t v85 = (unsigned __int8 *)(v84 + 1);
        while (1)
        {
          int v86 = *v85;
          v85 += 2;
          if (v86 == v78) {
            break;
          }
          if (v82 == ++v83) {
            goto LABEL_120;
          }
        }
        uint64_t v87 = *(unsigned __int8 *)(v84 + 2 * v83);
      }
      else
      {
LABEL_120:
        uint64_t v87 = -1;
      }
      uint64_t v88 = 16 * v87;
      unint64_t v89 = (void *)(v52[4] + v88);
      *unint64_t v89 = v62;
      v89[1] = 0;
      unint64_t v90 = (void *)(v52[16] + v88);
      uint8x8_t v91 = (std::__shared_weak_count *)v90[1];
      void *v90 = 0;
      v90[1] = 0;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v79 != -1)
    {
      uint64_t v92 = v52[2];
      if (v92
        && (uint64_t v93 = *(void *)(*(void *)(*(void *)(v92 + 48) + 72) + 24), (v94 = *(void *)(v93 + 56)) != 0))
      {
        uint64_t v95 = 0;
        uint64_t v96 = *(void *)(v93 + 48);
        unint64_t v97 = (unsigned __int8 *)(v96 + 1);
        while (1)
        {
          int v98 = *v97;
          v97 += 2;
          if (v98 == v79) {
            break;
          }
          if (v94 == ++v95) {
            goto LABEL_130;
          }
        }
        uint64_t v99 = *(unsigned __int8 *)(v96 + 2 * v95);
      }
      else
      {
LABEL_130:
        uint64_t v99 = -1;
      }
      uint64_t v100 = 16 * v99;
      unint64_t v101 = (void *)(v52[4] + v100);
      *unint64_t v101 = v62;
      v101[1] = 0;
      uint8x8_t v102 = (void *)(v52[16] + v100);
      uint64_t v103 = (std::__shared_weak_count *)v102[1];
      void *v102 = 0;
      v102[1] = 0;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
LABEL_134:
    uint64_t v8 = (void *)v132[4];
    unint64_t v104 = v136 + 1;
    uint64_t v136 = v104;
    if (v104 == v8)
    {
      uint64_t result = v130;
      if (v9 == v8) {
        break;
      }
      goto LABEL_13;
    }
    uint64_t v105 = v133[4];
    uint64_t result = v130;
    do
    {
      unint64_t v106 = *((unsigned int *)v104 + 1);
      unint64_t v107 = v106 >> 7;
      if (v106 >> 7 < (v133[5] - v105) >> 3)
      {
        uint64_t v108 = *(void *)(v105 + 8 * v107);
        if (v108)
        {
          uint64_t v109 = v106 & 0x7F;
          unint64_t v110 = *(unsigned __int16 *)(v108 + 2 * v109);
          uint64_t v111 = v133[7];
          uint64_t v112 = v133[8];
          if (v110 < (v112 - v111) >> 3)
          {
            uint64_t v113 = v111 + 8 * v110;
            if (v113 != v112 && *(_DWORD *)(v113 + 4) == v106)
            {
              uint64_t v115 = v134[4];
              if (v107 < (v134[5] - v115) >> 3)
              {
                uint64_t v116 = *(void *)(v115 + 8 * v107);
                if (v116)
                {
                  unint64_t v117 = *(unsigned __int16 *)(v116 + 2 * v109);
                  uint64_t v118 = v134[7];
                  uint64_t v119 = v134[8];
                  if (v117 < (v119 - v118) >> 3)
                  {
                    uint64_t v120 = v118 + 8 * v117;
                    if (v120 != v119 && *(_DWORD *)(v120 + 4) == v106)
                    {
                      uint64_t v122 = v135[4];
                      if (v107 < (v135[5] - v122) >> 3)
                      {
                        uint64_t v123 = *(void *)(v122 + 8 * v107);
                        if (v123)
                        {
                          unint64_t v124 = *(unsigned __int16 *)(v123 + 2 * v109);
                          uint64_t v126 = v135[7];
                          uint64_t v125 = v135[8];
                          if (v124 < (v125 - v126) >> 3)
                          {
                            uint64_t v127 = v126 + 8 * v124;
                            if (*(_DWORD *)(v127 + 4) == v106 && v127 != v125)
                            {
                              uint64_t v8 = v104;
                              goto LABEL_162;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v104;
    }
    while (v104 != v8);
    unint64_t v104 = v8;
LABEL_162:
    uint64_t v136 = v104;
  }
  while (v9 != v8);
LABEL_171:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A196603C(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v3);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(v3);
  uint64_t v6 = v3;
  uint8x8_t v7 = (void *)v4;
  uint64_t v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v4 + 32;
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v10 = v5 + 32;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 32) - *(void *)(v10 + 24)) {
    uint64_t v10 = v8 + 32;
  }
  uint64_t v152 = v10;
  unint64_t v153 = (void *)v4;
  uint64_t v154 = (void *)v5;
  uint64_t v155 = (void *)v8;
  unint64_t v12 = *(void **)(v10 + 24);
  uint64_t v11 = *(void **)(v10 + 32);
  uint64_t v156 = v12;
  uint64_t v151 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152))
  {
    unint64_t v13 = v12 + 1;
    do
    {
      unint64_t v12 = v13;
      uint64_t v156 = v13;
      if (v13 == v151) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v152);
      unint64_t v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v151 != v12)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v148 = v7;
    unint64_t v149 = result;
    uint64_t v150 = v9;
    while (1)
    {
      void *result = *v12;
      unint64_t v16 = *v12;
      uint64_t v17 = HIDWORD(*v12);
      unint64_t v18 = *v12 >> 39;
      uint64_t v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (uint64_t v20 = *(void *)(v19 + 8 * v18)) != 0
        && (unint64_t v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v23 = v7[7],
            uint64_t v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((uint64_t v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == v17) : (v25 = 0), v25))
      {
        unint64_t v26 = (unint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        unint64_t v26 = (unint64_t *)v7[11];
      }
      uint64_t v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (uint64_t v28 = *(void *)(v27 + 8 * v18)) != 0
        && (unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            uint64_t v31 = v9[7],
            uint64_t v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (BOOL v33 = *(_DWORD *)(v32 + 4) == v17) : (BOOL v33 = 0), v33))
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v9[10] + 8 * v29;
      }
      else
      {
        uint64_t v34 = v9[11];
        uint64_t v35 = v34;
      }
      if (v35 == v34) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = (unint64_t *)v35;
      }
      uint64_t v37 = **(void **)(v2 + 8);
      uint64_t v38 = *(void **)v37;
      unint64_t v39 = *(void **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39) {
            goto LABEL_41;
          }
        }
      }
      if (v38 == v39)
      {
LABEL_41:
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = (void *)v38[3];
        unint64_t v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      uint64_t v42 = **(void **)(v2 + 8);
      uint64_t v43 = *(void **)v42;
      uint64_t v44 = *(void **)(v42 + 8);
      if (v43 != v44)
      {
        while (*v43 != 0x348A0B0E758C07C2)
        {
          v43 += 5;
          if (v43 == v44) {
            goto LABEL_50;
          }
        }
      }
      if (v43 == v44)
      {
LABEL_50:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = v43[3];
        BOOL v46 = (std::__shared_weak_count *)v43[4];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      uint64_t v47 = (uint64_t)(v41 + 37);
      unint64_t v48 = *v36;
      unint64_t v49 = *v36;
      uint64_t v50 = v41[50];
      unint64_t v51 = (v41[51] - v50) >> 3;
      if (v49 < v51
        && (uint64_t v52 = *(void *)(v50 + 8 * v49)) != 0
        && HIDWORD(v48) == HIDWORD(v52)
        && ((uint64_t v53 = v41[53], v53 + 16 * v52 != v41[54]) ? (v54 = v53 == 0) : (v54 = 1), !v54))
      {
        uint64_t v63 = v2;
        uint64_t v64 = *(void *)(v50 + 8 * v49);
        uint8x8_t v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v48, v36);
        ++v65[3];
        uint64_t v66 = v53 + 16 * v64;
        uint64_t v2 = v63;
        uint8x8_t v7 = v148;
        unint64_t v55 = *(void **)(v66 + 8);
        unint64_t v48 = *v36;
        uint64_t v50 = v41[50];
        unint64_t v49 = *v36;
        if (v49 >= (v41[51] - v50) >> 3) {
          goto LABEL_70;
        }
      }
      else
      {
        unint64_t v55 = 0;
        if (v49 >= v51) {
          goto LABEL_70;
        }
      }
      uint64_t v56 = *(void *)(v50 + 8 * v49);
      if (!v56
        || HIDWORD(v48) != HIDWORD(v56)
        || ((uint64_t v57 = v41[53], v58 = (uint64_t *)v41[54], v59 = (uint64_t *)(v57 + 16 * v56), v59 != v58)
          ? (BOOL v60 = v57 == 0)
          : (BOOL v60 = 1),
            v60))
      {
LABEL_70:
        uint64_t v62 = 0;
        goto LABEL_71;
      }
      unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v47, v48, v36);
      ++v61[3];
      uint64_t v62 = *v59;
LABEL_71:
      unint64_t v67 = *v26;
      unint64_t v157 = v67;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 104));
      uint64_t v68 = *(void *)(v45 + 504);
      if (v67 < (unint64_t)((*(void *)(v45 + 512) - v68) >> 3)
        && ((uint64_t v69 = *(void *)(v68 + 8 * v67)) != 0 ? (v70 = HIDWORD(v67) == HIDWORD(v69)) : (v70 = 0),
            v70))
      {
        uint8x8_t v72 = (uint64_t *)(*(void *)(v45 + 528) + 40 * v69);
        uint64_t v71 = *(uint64_t **)(v45 + 536);
      }
      else
      {
        uint64_t v71 = *(uint64_t **)(v45 + 536);
        uint8x8_t v72 = v71;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v45 + 104));
      unint64_t v73 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v45 + 440), v157, &v157);
      uint64_t v74 = 0;
      ++v73[3];
      if (v72 != v71 && v72) {
        uint64_t v74 = *v72;
      }
      {
        gdc::typeIndex<DaVinci::TexTexture>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
      }
      unint64_t v75 = v55[1];
      if (!v75) {
        goto LABEL_152;
      }
      unint64_t v76 = gdc::typeIndex<DaVinci::TexTexture>(void)::index;
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        uint64_t v78 = gdc::typeIndex<DaVinci::TexTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::TexTexture>(void)::index >= v75) {
          uint64_t v78 = gdc::typeIndex<DaVinci::TexTexture>(void)::index % v75;
        }
      }
      else
      {
        uint64_t v78 = (v75 - 1) & gdc::typeIndex<DaVinci::TexTexture>(void)::index;
      }
      uint64_t v79 = *(void **)(*v55 + 8 * v78);
      if (!v79) {
        goto LABEL_152;
      }
      uint64_t v80 = (void *)*v79;
      if (!v80) {
        goto LABEL_152;
      }
      if (v77.u32[0] < 2uLL)
      {
        unint64_t v81 = v75 - 1;
        while (1)
        {
          uint64_t v83 = v80[1];
          if (gdc::typeIndex<DaVinci::TexTexture>(void)::index == v83)
          {
            if (v80[2] == gdc::typeIndex<DaVinci::TexTexture>(void)::index) {
              goto LABEL_103;
            }
          }
          else if ((v83 & v81) != v78)
          {
            goto LABEL_152;
          }
          uint64_t v80 = (void *)*v80;
          if (!v80) {
            goto LABEL_152;
          }
        }
      }
      while (1)
      {
        unint64_t v82 = v80[1];
        if (gdc::typeIndex<DaVinci::TexTexture>(void)::index == v82) {
          break;
        }
        if (v82 >= v75) {
          v82 %= v75;
        }
        if (v82 != v78) {
          goto LABEL_152;
        }
LABEL_91:
        uint64_t v80 = (void *)*v80;
        if (!v80) {
          goto LABEL_152;
        }
      }
      if (v80[2] != gdc::typeIndex<DaVinci::TexTexture>(void)::index) {
        goto LABEL_91;
      }
LABEL_103:
      {
        if (v147)
        {
          md::typeToIntMap(v147);
          uint8x8_t v7 = v148;
        }
      }
      if (!qword_1E957F030) {
        goto LABEL_187;
      }
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        unint64_t v85 = v76;
        if (v76 >= qword_1E957F030) {
          unint64_t v85 = v76 % qword_1E957F030;
        }
      }
      else
      {
        unint64_t v85 = (qword_1E957F030 - 1) & v76;
      }
      int v86 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v85);
      if (!v86 || (uint64_t v87 = *v86) == 0) {
LABEL_187:
      }
        abort();
      if (v84.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v89 = v87[1];
          if ((uint64_t *)v76 == v89)
          {
            if (v87[2] == (uint64_t *)v76) {
              goto LABEL_124;
            }
          }
          else if (((unint64_t)v89 & (qword_1E957F030 - 1)) != v85)
          {
            goto LABEL_187;
          }
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
        }
      }
      while (2)
      {
        unint64_t v88 = (unint64_t)v87[1];
        if (v76 != v88)
        {
          if (v88 >= qword_1E957F030) {
            v88 %= (unint64_t)qword_1E957F030;
          }
          if (v88 != v85) {
            goto LABEL_187;
          }
LABEL_114:
          uint64_t v87 = (uint64_t **)*v87;
          if (!v87) {
            goto LABEL_187;
          }
          continue;
        }
        break;
      }
      if (v87[2] != (uint64_t *)v76) {
        goto LABEL_114;
      }
LABEL_124:
      uint64_t v91 = *((int *)v87 + 6);
      uint64_t v90 = *((int *)v87 + 7);
      if (v91 != -1)
      {
        uint64_t v92 = *(void *)(v62 + 16);
        if (v92)
        {
          uint64_t v93 = *(void *)(*(void *)(v92 + 48) + 72);
          uint64_t v94 = *(void *)(v93 + 8);
          uint64_t v95 = *(void *)(v94 + 72);
          if (v95)
          {
            uint64_t v96 = 0;
            uint64_t v97 = *(void *)(v94 + 64);
            int v98 = (unsigned __int8 *)(v97 + 1);
            while (1)
            {
              int v99 = *v98;
              v98 += 2;
              if (v99 == v91) {
                break;
              }
              if (v95 == ++v96) {
                goto LABEL_130;
              }
            }
            unint64_t v106 = (unsigned __int8 *)(v97 + 2 * v96);
LABEL_137:
            *(void *)(*(void *)(v62 + 96) + 8 * *v106) = v74;
          }
          else
          {
LABEL_130:
            uint64_t v100 = *(void *)(v93 + 24);
            uint64_t v101 = *(void *)(v100 + 72);
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = *(void *)(v100 + 64);
              unint64_t v104 = (unsigned __int8 *)(v103 + 1);
              while (1)
              {
                int v105 = *v104;
                v104 += 2;
                if (v105 == v91) {
                  break;
                }
                if (v101 == ++v102) {
                  goto LABEL_138;
                }
              }
              unint64_t v106 = (unsigned __int8 *)(v103 + 2 * v102);
              goto LABEL_137;
            }
          }
        }
      }
LABEL_138:
      if (v90 != -1)
      {
        uint64_t v107 = *(void *)(v62 + 16);
        if (v107)
        {
          uint64_t v108 = *(void *)(*(void *)(v107 + 48) + 72);
          uint64_t v109 = *(void *)(v108 + 8);
          uint64_t v110 = *(void *)(v109 + 72);
          if (v110)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *(void *)(v109 + 64);
            uint64_t v113 = (unsigned __int8 *)(v112 + 1);
            while (1)
            {
              int v114 = *v113;
              v113 += 2;
              if (v114 == v90) {
                break;
              }
              if (v110 == ++v111) {
                goto LABEL_144;
              }
            }
            unint64_t v121 = (unsigned __int8 *)(v112 + 2 * v111);
LABEL_151:
            *(void *)(*(void *)(v62 + 96) + 8 * *v121) = v74;
          }
          else
          {
LABEL_144:
            uint64_t v115 = *(void *)(v108 + 24);
            uint64_t v116 = *(void *)(v115 + 72);
            if (v116)
            {
              uint64_t v117 = 0;
              uint64_t v118 = *(void *)(v115 + 64);
              uint64_t v119 = (unsigned __int8 *)(v118 + 1);
              while (1)
              {
                int v120 = *v119;
                v119 += 2;
                if (v120 == v90) {
                  break;
                }
                if (v116 == ++v117) {
                  goto LABEL_152;
                }
              }
              unint64_t v121 = (unsigned __int8 *)(v118 + 2 * v117);
              goto LABEL_151;
            }
          }
        }
      }
LABEL_152:
      unint64_t v12 = *(void **)(v152 + 32);
      uint64_t v122 = v156 + 1;
      uint64_t v156 = v122;
      if (v122 == v12)
      {
        uint64_t result = v149;
        uint64_t v9 = v150;
      }
      else
      {
        uint64_t v123 = v153[4];
        uint64_t result = v149;
        uint64_t v9 = v150;
        do
        {
          unint64_t v124 = *((unsigned int *)v122 + 1);
          unint64_t v125 = v124 >> 7;
          if (v124 >> 7 < (v153[5] - v123) >> 3)
          {
            uint64_t v126 = *(void *)(v123 + 8 * v125);
            if (v126)
            {
              uint64_t v127 = v124 & 0x7F;
              unint64_t v128 = *(unsigned __int16 *)(v126 + 2 * v127);
              uint64_t v129 = v153[7];
              uint64_t v130 = v153[8];
              if (v128 < (v130 - v129) >> 3)
              {
                uint64_t v131 = v129 + 8 * v128;
                if (v131 != v130 && *(_DWORD *)(v131 + 4) == v124)
                {
                  uint64_t v133 = v154[4];
                  if (v125 < (v154[5] - v133) >> 3)
                  {
                    uint64_t v134 = *(void *)(v133 + 8 * v125);
                    if (v134)
                    {
                      unint64_t v135 = *(unsigned __int16 *)(v134 + 2 * v127);
                      uint64_t v136 = v154[7];
                      uint64_t v137 = v154[8];
                      if (v135 < (v137 - v136) >> 3)
                      {
                        uint64_t v138 = v136 + 8 * v135;
                        if (v138 != v137 && *(_DWORD *)(v138 + 4) == v124)
                        {
                          uint64_t v140 = v155[4];
                          if (v125 < (v155[5] - v140) >> 3)
                          {
                            uint64_t v141 = *(void *)(v140 + 8 * v125);
                            if (v141)
                            {
                              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * v127);
                              uint64_t v144 = v155[7];
                              uint64_t v143 = v155[8];
                              if (v142 < (v143 - v144) >> 3)
                              {
                                uint64_t v145 = v144 + 8 * v142;
                                if (*(_DWORD *)(v145 + 4) == v124 && v145 != v143)
                                {
                                  unint64_t v12 = v122;
                                  goto LABEL_180;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v122;
        }
        while (v122 != v12);
        uint64_t v122 = v12;
LABEL_180:
        uint64_t v156 = v122;
      }
      if (v151 == v12) {
        goto LABEL_186;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_186:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

void sub_1A19669B4(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::StyleColorConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v111 = v7;
  uint64_t v112 = v3;
  uint64_t v113 = (void *)v4;
  int v114 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v115 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v115 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v111);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v110 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      unint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        unint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v94 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      uint64_t v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v93 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v93[3];
        uint64_t v94 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      unint64_t v55 = *v24;
      unint64_t v116 = v55;
      uint64_t v56 = v38[797];
      if (v55 < (unint64_t)((v38[798] - v56) >> 3))
      {
        uint64_t v57 = *(void *)(v56 + 8 * v55);
        if (v57 && HIDWORD(v55) == HIDWORD(v57))
        {
          uint64_t v84 = v38[800];
          unint64_t v85 = (uint64_t *)(v84 + 24 * v57);
          if (v85 != (uint64_t *)v38[801] && v84 != 0)
          {
            uint64_t v87 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>> const&>,std::tuple<>>((uint64_t)(v38 + 784), v55, &v116);
            ++v87[3];
            uint64_t v88 = *v85;
            if (*v85)
            {
              {
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
              }
              unint64_t v89 = v47[1];
              if (v89)
              {
                unint64_t v90 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index;
                uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v91.i16[0] = vaddlv_u8(v91);
                if (v91.u32[0] > 1uLL)
                {
                  uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index >= v89) {
                    uint64_t v92 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index % v89;
                  }
                }
                else
                {
                  uint64_t v92 = (v89 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index;
                }
                uint64_t v95 = *(void **)(*v47 + 8 * v92);
                if (v95)
                {
                  uint64_t v96 = (void *)*v95;
                  if (v96)
                  {
                    if (v91.u32[0] < 2uLL)
                    {
                      unint64_t v97 = v89 - 1;
                      while (1)
                      {
                        uint64_t v99 = v96[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index == v99)
                        {
                          if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index) {
                            goto LABEL_127;
                          }
                        }
                        else if ((v99 & v97) != v92)
                        {
                          goto LABEL_69;
                        }
                        uint64_t v96 = (void *)*v96;
                        if (!v96) {
                          goto LABEL_69;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v98 = v96[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index == v98)
                      {
                        if (v96[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index)
                        {
LABEL_127:
                          {
                            if (v108)
                            {
                              md::typeToIntMap(v108);
                              uint64_t v10 = a1;
                            }
                          }
                          if (!qword_1E957F030) {
                            goto LABEL_158;
                          }
                          uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                          v100.i16[0] = vaddlv_u8(v100);
                          if (v100.u32[0] > 1uLL)
                          {
                            unint64_t v101 = v90;
                            if (v90 >= qword_1E957F030) {
                              unint64_t v101 = v90 % qword_1E957F030;
                            }
                          }
                          else
                          {
                            unint64_t v101 = (qword_1E957F030 - 1) & v90;
                          }
                          uint64_t v102 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v101);
                          if (!v102 || (uint64_t v103 = *v102) == 0) {
LABEL_158:
                          }
                            abort();
                          if (v100.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              int v105 = v103[1];
                              if ((uint64_t *)v90 == v105)
                              {
                                if (v103[2] == (uint64_t *)v90) {
                                  goto LABEL_148;
                                }
                              }
                              else if (((unint64_t)v105 & (qword_1E957F030 - 1)) != v101)
                              {
                                goto LABEL_158;
                              }
                              uint64_t v103 = (uint64_t **)*v103;
                              if (!v103) {
                                goto LABEL_158;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v104 = (unint64_t)v103[1];
                            if (v90 == v104)
                            {
                              if (v103[2] == (uint64_t *)v90)
                              {
LABEL_148:
                                uint64_t v106 = *((int *)v103 + 6);
                                uint64_t v107 = *((int *)v103 + 7);
                                if (v106 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v106, v88, 1);
                                }
                                if (v107 != -1) {
                                  ggl::PipelineSetup::setConstantData(v94, v107, v88, 2);
                                }
                                goto LABEL_69;
                              }
                            }
                            else
                            {
                              if (v104 >= qword_1E957F030) {
                                v104 %= (unint64_t)qword_1E957F030;
                              }
                              if (v104 != v101) {
                                goto LABEL_158;
                              }
                            }
                            uint64_t v103 = (uint64_t **)*v103;
                            if (!v103) {
                              goto LABEL_158;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v98 >= v89) {
                          v98 %= v89;
                        }
                        if (v98 != v92) {
                          break;
                        }
                      }
                      uint64_t v96 = (void *)*v96;
                    }
                    while (v96);
                  }
                }
              }
            }
          }
        }
      }
LABEL_69:
      uint64_t v8 = (void *)v111[4];
      uint64_t v59 = v115 + 1;
      uint64_t v115 = v59;
      if (v59 == v8)
      {
        uint64_t result = v110;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v60 = v112[4];
        uint64_t result = v110;
        do
        {
          unint64_t v61 = *((unsigned int *)v59 + 1);
          unint64_t v62 = v61 >> 7;
          if (v61 >> 7 < (v112[5] - v60) >> 3)
          {
            uint64_t v63 = *(void *)(v60 + 8 * v62);
            if (v63)
            {
              uint64_t v64 = v61 & 0x7F;
              unint64_t v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              uint64_t v66 = v112[7];
              uint64_t v67 = v112[8];
              if (v65 < (v67 - v66) >> 3)
              {
                uint64_t v68 = v66 + 8 * v65;
                if (v68 != v67 && *(_DWORD *)(v68 + 4) == v61)
                {
                  uint64_t v70 = v113[4];
                  if (v62 < (v113[5] - v70) >> 3)
                  {
                    uint64_t v71 = *(void *)(v70 + 8 * v62);
                    if (v71)
                    {
                      unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      uint64_t v73 = v113[7];
                      uint64_t v74 = v113[8];
                      if (v72 < (v74 - v73) >> 3)
                      {
                        uint64_t v75 = v73 + 8 * v72;
                        if (v75 != v74 && *(_DWORD *)(v75 + 4) == v61)
                        {
                          uint64_t v77 = v114[4];
                          if (v62 < (v114[5] - v77) >> 3)
                          {
                            uint64_t v78 = *(void *)(v77 + 8 * v62);
                            if (v78)
                            {
                              unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              uint64_t v81 = v114[7];
                              uint64_t v80 = v114[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                uint64_t v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == v61 && v82 != v80)
                                {
                                  uint64_t v8 = v59;
                                  goto LABEL_97;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        uint64_t v59 = v8;
LABEL_97:
        uint64_t v115 = v59;
        if (v9 == v8) {
          goto LABEL_157;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_157:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A196717C(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UVsHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  uint64_t v132 = v7;
  uint64_t v133 = v3;
  uint64_t v134 = (void *)v4;
  unint64_t v135 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v136 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132))
  {
    uint64_t v10 = v8 + 1;
    do
    {
      uint64_t v8 = v10;
      uint64_t v136 = v10;
      if (v10 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v132);
      uint64_t v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_171;
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v130 = result;
  do
  {
LABEL_13:
    void *result = *v8;
    unint64_t v13 = *v8;
    uint64_t v14 = HIDWORD(*v8);
    unint64_t v15 = *v8 >> 39;
    uint64_t v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0
      && (unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (BOOL v22 = *(_DWORD *)(v21 + 4) == v14) : (BOOL v22 = 0), v22))
    {
      BOOL v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      BOOL v23 = (unint64_t *)v3[11];
    }
    uint64_t v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (uint64_t v25 = *(void *)(v24 + 8 * v15)) != 0
      && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (BOOL v30 = *(_DWORD *)(v29 + 4) == v14) : (BOOL v30 = 0), v30))
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v6[10] + 8 * v26;
    }
    else
    {
      uint64_t v31 = v6[11];
      uint64_t v32 = v31;
    }
    if (v32 == v31) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = (unint64_t *)v32;
    }
    uint64_t v34 = **(void **)(a1 + 8);
    uint64_t v35 = *(void **)v34;
    unint64_t v36 = *(void **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36) {
          goto LABEL_40;
        }
      }
    }
    if (v35 == v36)
    {
LABEL_40:
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = (void *)v35[3];
      uint64_t v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    unint64_t v39 = *v33;
    unint64_t v40 = *v33;
    uint64_t v41 = v37[50];
    unint64_t v42 = (v37[51] - v41) >> 3;
    if (v40 < v42
      && (uint64_t v43 = *(void *)(v41 + 8 * v40)) != 0
      && HIDWORD(v39) == HIDWORD(v43)
      && ((uint64_t v44 = v37[53], v44 + 16 * v43 != v37[54]) ? (v45 = v44 == 0) : (v45 = 1), !v45))
    {
      uint64_t v53 = *(void *)(v41 + 8 * v40);
      uint64_t v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
      ++v54[3];
      BOOL v46 = *(void **)(v44 + 16 * v53 + 8);
      unint64_t v39 = *v33;
      uint64_t v41 = v37[50];
      unint64_t v40 = *v33;
      if (v40 >= (v37[51] - v41) >> 3) {
        goto LABEL_60;
      }
    }
    else
    {
      BOOL v46 = 0;
      if (v40 >= v42) {
        goto LABEL_60;
      }
    }
    uint64_t v47 = *(void *)(v41 + 8 * v40);
    if (!v47
      || HIDWORD(v39) != HIDWORD(v47)
      || ((uint64_t v48 = v37[53], v49 = (void *)(v48 + 16 * v47), v49 != (void *)v37[54])
        ? (BOOL v50 = v48 == 0)
        : (BOOL v50 = 1),
          v50))
    {
LABEL_60:
      uint64_t v52 = 0;
      goto LABEL_61;
    }
    unint64_t v51 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v39, v33);
    ++v51[3];
    uint64_t v52 = (void *)*v49;
LABEL_61:
    unint64_t v55 = *v23;
    unint64_t v137 = v55;
    uint64_t v56 = v37[1298];
    if (v55 < (unint64_t)((v37[1299] - v56) >> 3)
      && ((uint64_t v57 = *(void *)(v56 + 8 * v55)) != 0 ? (v58 = HIDWORD(v55) == HIDWORD(v57)) : (v58 = 0), v58))
    {
      uint64_t v60 = (uint64_t *)(v37[1301] + 8 * v57);
      uint64_t v59 = (uint64_t *)v37[1302];
    }
    else
    {
      uint64_t v59 = (uint64_t *)v37[1302];
      uint64_t v60 = v59;
    }
    unint64_t v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v55, &v137);
    uint64_t v62 = 0;
    ++v61[3];
    if (v60 != v59 && v60) {
      uint64_t v62 = *v60;
    }
    {
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
    }
    unint64_t v63 = v46[1];
    if (!v63) {
      goto LABEL_134;
    }
    unint64_t v64 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index;
    uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index >= v63) {
        uint64_t v66 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index % v63;
      }
    }
    else
    {
      uint64_t v66 = (v63 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index;
    }
    uint64_t v67 = *(void **)(*v46 + 8 * v66);
    if (!v67) {
      goto LABEL_134;
    }
    uint64_t v68 = (void *)*v67;
    if (!v68) {
      goto LABEL_134;
    }
    if (v65.u32[0] < 2uLL)
    {
      unint64_t v69 = v63 - 1;
      while (1)
      {
        uint64_t v71 = v68[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index == v71)
        {
          if (v68[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index) {
            goto LABEL_93;
          }
        }
        else if ((v71 & v69) != v66)
        {
          goto LABEL_134;
        }
        uint64_t v68 = (void *)*v68;
        if (!v68) {
          goto LABEL_134;
        }
      }
    }
    while (1)
    {
      unint64_t v70 = v68[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index == v70) {
        break;
      }
      if (v70 >= v63) {
        v70 %= v63;
      }
      if (v70 != v66) {
        goto LABEL_134;
      }
LABEL_81:
      uint64_t v68 = (void *)*v68;
      if (!v68) {
        goto LABEL_134;
      }
    }
    if (v68[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index) {
      goto LABEL_81;
    }
LABEL_93:
    {
      if (v129)
      {
        md::typeToIntMap(v129);
      }
    }
    if (!qword_1E957F030) {
      goto LABEL_172;
    }
    uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
    v72.i16[0] = vaddlv_u8(v72);
    if (v72.u32[0] > 1uLL)
    {
      unint64_t v73 = v64;
      if (v64 >= qword_1E957F030) {
        unint64_t v73 = v64 % qword_1E957F030;
      }
    }
    else
    {
      unint64_t v73 = (qword_1E957F030 - 1) & v64;
    }
    uint64_t v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
    if (!v74 || (uint64_t v75 = *v74) == 0) {
LABEL_172:
    }
      abort();
    if (v72.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v77 = v75[1];
        if ((uint64_t *)v64 == v77)
        {
          if (v75[2] == (uint64_t *)v64) {
            goto LABEL_114;
          }
        }
        else if (((unint64_t)v77 & (qword_1E957F030 - 1)) != v73)
        {
          goto LABEL_172;
        }
        uint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
      }
    }
    while (2)
    {
      unint64_t v76 = (unint64_t)v75[1];
      if (v64 != v76)
      {
        if (v76 >= qword_1E957F030) {
          v76 %= (unint64_t)qword_1E957F030;
        }
        if (v76 != v73) {
          goto LABEL_172;
        }
LABEL_104:
        uint64_t v75 = (uint64_t **)*v75;
        if (!v75) {
          goto LABEL_172;
        }
        continue;
      }
      break;
    }
    if (v75[2] != (uint64_t *)v64) {
      goto LABEL_104;
    }
LABEL_114:
    uint64_t v78 = *((int *)v75 + 6);
    uint64_t v79 = *((int *)v75 + 7);
    if (v78 != -1)
    {
      uint64_t v80 = v52[2];
      if (v80
        && (uint64_t v81 = *(void *)(*(void *)(*(void *)(v80 + 48) + 72) + 8), (v82 = *(void *)(v81 + 56)) != 0))
      {
        uint64_t v83 = 0;
        uint64_t v84 = *(void *)(v81 + 48);
        unint64_t v85 = (unsigned __int8 *)(v84 + 1);
        while (1)
        {
          int v86 = *v85;
          v85 += 2;
          if (v86 == v78) {
            break;
          }
          if (v82 == ++v83) {
            goto LABEL_120;
          }
        }
        uint64_t v87 = *(unsigned __int8 *)(v84 + 2 * v83);
      }
      else
      {
LABEL_120:
        uint64_t v87 = -1;
      }
      uint64_t v88 = 16 * v87;
      unint64_t v89 = (void *)(v52[4] + v88);
      *unint64_t v89 = v62;
      v89[1] = 0;
      unint64_t v90 = (void *)(v52[16] + v88);
      uint8x8_t v91 = (std::__shared_weak_count *)v90[1];
      void *v90 = 0;
      v90[1] = 0;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v79 != -1)
    {
      uint64_t v92 = v52[2];
      if (v92
        && (uint64_t v93 = *(void *)(*(void *)(*(void *)(v92 + 48) + 72) + 24), (v94 = *(void *)(v93 + 56)) != 0))
      {
        uint64_t v95 = 0;
        uint64_t v96 = *(void *)(v93 + 48);
        unint64_t v97 = (unsigned __int8 *)(v96 + 1);
        while (1)
        {
          int v98 = *v97;
          v97 += 2;
          if (v98 == v79) {
            break;
          }
          if (v94 == ++v95) {
            goto LABEL_130;
          }
        }
        uint64_t v99 = *(unsigned __int8 *)(v96 + 2 * v95);
      }
      else
      {
LABEL_130:
        uint64_t v99 = -1;
      }
      uint64_t v100 = 16 * v99;
      unint64_t v101 = (void *)(v52[4] + v100);
      *unint64_t v101 = v62;
      v101[1] = 0;
      uint64_t v102 = (void *)(v52[16] + v100);
      uint64_t v103 = (std::__shared_weak_count *)v102[1];
      void *v102 = 0;
      v102[1] = 0;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
LABEL_134:
    uint64_t v8 = (void *)v132[4];
    unint64_t v104 = v136 + 1;
    uint64_t v136 = v104;
    if (v104 == v8)
    {
      uint64_t result = v130;
      if (v9 == v8) {
        break;
      }
      goto LABEL_13;
    }
    uint64_t v105 = v133[4];
    uint64_t result = v130;
    do
    {
      unint64_t v106 = *((unsigned int *)v104 + 1);
      unint64_t v107 = v106 >> 7;
      if (v106 >> 7 < (v133[5] - v105) >> 3)
      {
        uint64_t v108 = *(void *)(v105 + 8 * v107);
        if (v108)
        {
          uint64_t v109 = v106 & 0x7F;
          unint64_t v110 = *(unsigned __int16 *)(v108 + 2 * v109);
          uint64_t v111 = v133[7];
          uint64_t v112 = v133[8];
          if (v110 < (v112 - v111) >> 3)
          {
            uint64_t v113 = v111 + 8 * v110;
            if (v113 != v112 && *(_DWORD *)(v113 + 4) == v106)
            {
              uint64_t v115 = v134[4];
              if (v107 < (v134[5] - v115) >> 3)
              {
                uint64_t v116 = *(void *)(v115 + 8 * v107);
                if (v116)
                {
                  unint64_t v117 = *(unsigned __int16 *)(v116 + 2 * v109);
                  uint64_t v118 = v134[7];
                  uint64_t v119 = v134[8];
                  if (v117 < (v119 - v118) >> 3)
                  {
                    uint64_t v120 = v118 + 8 * v117;
                    if (v120 != v119 && *(_DWORD *)(v120 + 4) == v106)
                    {
                      uint64_t v122 = v135[4];
                      if (v107 < (v135[5] - v122) >> 3)
                      {
                        uint64_t v123 = *(void *)(v122 + 8 * v107);
                        if (v123)
                        {
                          unint64_t v124 = *(unsigned __int16 *)(v123 + 2 * v109);
                          uint64_t v126 = v135[7];
                          uint64_t v125 = v135[8];
                          if (v124 < (v125 - v126) >> 3)
                          {
                            uint64_t v127 = v126 + 8 * v124;
                            if (*(_DWORD *)(v127 + 4) == v106 && v127 != v125)
                            {
                              uint64_t v8 = v104;
                              goto LABEL_162;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v104;
    }
    while (v104 != v8);
    unint64_t v104 = v8;
LABEL_162:
    uint64_t v136 = v104;
  }
  while (v9 != v8);
LABEL_171:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1A1967A70(_Unwind_Exception *a1)
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v2 = *(int8x8_t **)(a2 + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  uint64_t v6 = (void *)v5;
  uint8x8_t v7 = v3 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < v3[8] - v3[7]) {
    uint8x8_t v7 = (void *)(v4 + 32);
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < v7[4] - v7[3]) {
    uint8x8_t v7 = (void *)(v5 + 32);
  }
  unint64_t v104 = v7;
  uint64_t v105 = v3;
  unint64_t v106 = (void *)v4;
  unint64_t v107 = (void *)v5;
  uint64_t v8 = (void *)v7[3];
  uint64_t v9 = (void *)v7[4];
  uint64_t v108 = v8;
  if (v9 == v8)
  {
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104))
    {
      uint64_t v11 = v8 + 1;
      do
      {
        uint64_t v8 = v11;
        uint64_t v108 = v11;
        if (v11 == v9) {
          break;
        }
        BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v104);
        uint64_t v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v103 = result;
    while (1)
    {
      void *result = *v8;
      unint64_t v14 = *v8;
      uint64_t v15 = HIDWORD(*v8);
      unint64_t v16 = *v8 >> 39;
      uint64_t v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (uint64_t v18 = *(void *)(v17 + 8 * v16)) != 0
        && (unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v21 = v3[7],
            uint64_t v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((uint64_t v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == v15) : (v23 = 0), v23))
      {
        uint64_t v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        uint64_t v24 = (unint64_t *)v3[11];
      }
      uint64_t v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v16)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            uint64_t v29 = v6[7],
            uint64_t v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v15) : (v31 = 0), v31))
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v6[10] + 8 * v27;
      }
      else
      {
        uint64_t v32 = v6[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unint64_t *)v33;
      }
      uint64_t v35 = **(void **)(v10 + 8);
      unint64_t v36 = *(void **)v35;
      uint64_t v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = (void *)v36[3];
        unint64_t v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      unint64_t v40 = *v34;
      unint64_t v41 = *v34;
      uint64_t v42 = v38[50];
      unint64_t v43 = (v38[51] - v42) >> 3;
      if (v41 < v43
        && (uint64_t v44 = *(void *)(v42 + 8 * v41)) != 0
        && HIDWORD(v40) == HIDWORD(v44)
        && ((uint64_t v45 = v38[53], v45 + 16 * v44 != v38[54]) ? (v46 = v45 == 0) : (v46 = 1), !v46))
      {
        uint64_t v52 = *(void *)(v42 + 8 * v41);
        uint64_t v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v53[3];
        uint64_t v54 = v45 + 16 * v52;
        uint64_t v10 = a1;
        uint64_t v47 = *(void **)(v54 + 8);
        unint64_t v40 = *v34;
        uint64_t v42 = v38[50];
        unint64_t v41 = *v34;
        if (v41 >= (v38[51] - v42) >> 3)
        {
LABEL_63:
          uint64_t v67 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v47 = 0;
        if (v41 >= v43) {
          goto LABEL_63;
        }
      }
      uint64_t v48 = *(void *)(v42 + 8 * v41);
      if (!v48 || HIDWORD(v40) != HIDWORD(v48)) {
        goto LABEL_63;
      }
      uint64_t v49 = v38[53];
      BOOL v50 = (void **)(v49 + 16 * v48);
      if (v50 == (void **)v38[54] || v49 == 0)
      {
        uint64_t v67 = 0;
      }
      else
      {
        uint64_t v66 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v40, v34);
        ++v66[3];
        uint64_t v67 = *v50;
      }
      uint64_t v10 = a1;
LABEL_64:
      uint64_t v55 = md::VKMRenderResourcesStore::getConstantData<ggl::Tile::View>((uint64_t)v38, *v24);
      if (v55)
      {
        uint64_t v56 = v55;
        {
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index = atomic_fetch_add(gdc::internal::nextIndex(void)::index, 1uLL);
        }
        unint64_t v57 = v47[1];
        if (v57)
        {
          unint64_t v58 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index;
          uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            uint64_t v60 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index >= v57) {
              uint64_t v60 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index % v57;
            }
          }
          else
          {
            uint64_t v60 = (v57 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index;
          }
          unint64_t v61 = *(void **)(*v47 + 8 * v60);
          if (v61)
          {
            uint64_t v62 = (void *)*v61;
            if (v62)
            {
              if (v59.u32[0] < 2uLL)
              {
                unint64_t v63 = v57 - 1;
                while (1)
                {
                  uint64_t v65 = v62[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index == v65)
                  {
                    if (v62[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index) {
                      goto LABEL_88;
                    }
                  }
                  else if ((v65 & v63) != v60)
                  {
                    goto LABEL_113;
                  }
                  uint64_t v62 = (void *)*v62;
                  if (!v62) {
                    goto LABEL_113;
                  }
                }
              }
              do
              {
                unint64_t v64 = v62[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index == v64)
                {
                  if (v62[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index)
                  {
LABEL_88:
                    {
                      if (v101)
                      {
                        md::typeToIntMap(v101);
                        uint64_t v10 = a1;
                      }
                    }
                    if (!qword_1E957F030) {
                      goto LABEL_149;
                    }
                    uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E957F030);
                    v68.i16[0] = vaddlv_u8(v68);
                    if (v68.u32[0] > 1uLL)
                    {
                      unint64_t v69 = v58;
                      if (v58 >= qword_1E957F030) {
                        unint64_t v69 = v58 % qword_1E957F030;
                      }
                    }
                    else
                    {
                      unint64_t v69 = (qword_1E957F030 - 1) & v58;
                    }
                    unint64_t v70 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v69);
                    if (!v70 || (uint64_t v71 = *v70) == 0) {
LABEL_149:
                    }
                      abort();
                    if (v68.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        unint64_t v73 = v71[1];
                        if ((uint64_t *)v58 == v73)
                        {
                          if (v71[2] == (uint64_t *)v58) {
                            goto LABEL_109;
                          }
                        }
                        else if (((unint64_t)v73 & (qword_1E957F030 - 1)) != v69)
                        {
                          goto LABEL_149;
                        }
                        uint64_t v71 = (uint64_t **)*v71;
                        if (!v71) {
                          goto LABEL_149;
                        }
                      }
                    }
                    while (1)
                    {
                      unint64_t v72 = (unint64_t)v71[1];
                      if (v58 == v72)
                      {
                        if (v71[2] == (uint64_t *)v58)
                        {
LABEL_109:
                          uint64_t v74 = *((int *)v71 + 6);
                          uint64_t v75 = *((int *)v71 + 7);
                          if (v74 != -1) {
                            ggl::PipelineSetup::setConstantData(v67, v74, v56, 1);
                          }
                          if (v75 != -1) {
                            ggl::PipelineSetup::setConstantData(v67, v75, v56, 2);
                          }
                          goto LABEL_113;
                        }
                      }
                      else
                      {
                        if (v72 >= qword_1E957F030) {
                          v72 %= (unint64_t)qword_1E957F030;
                        }
                        if (v72 != v69) {
                          goto LABEL_149;
                        }
                      }
                      uint64_t v71 = (uint64_t **)*v71;
                      if (!v71) {
                        goto LABEL_149;
                      }
                    }
                  }
                }
                else
                {
                  if (v64 >= v57) {
                    v64 %= v57;
                  }
                  if (v64 != v60) {
                    break;
                  }
                }
                uint64_t v62 = (void *)*v62;
              }
              while (v62);
            }
          }
        }
      }
LABEL_113:
      uint64_t v8 = (void *)v104[4];
      unint64_t v76 = v108 + 1;
      uint64_t v108 = v76;
      if (v76 == v8)
      {
        uint64_t result = v103;
        if (v9 == v8) {
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v77 = v105[4];
        uint64_t result = v103;
        do
        {
          unint64_t v78 = *((unsigned int *)v76 + 1);
          unint64_t v79 = v78 >> 7;
          if (v78 >> 7 < (v105[5] - v77) >> 3)
          {
            uint64_t v80 = *(void *)(v77 + 8 * v79);
            if (v80)
            {
              uint64_t v81 = v78 & 0x7F;
              unint64_t v82 = *(unsigned __int16 *)(v80 + 2 * v81);
              uint64_t v83 = v105[7];
              uint64_t v84 = v105[8];
              if (v82 < (v84 - v83) >> 3)
              {
                uint64_t v85 = v83 + 8 * v82;
                if (v85 != v84 && *(_DWORD *)(v85 + 4) == v78)
                {
                  uint64_t v87 = v106[4];
                  if (v79 < (v106[5] - v87) >> 3)
                  {
                    uint64_t v88 = *(void *)(v87 + 8 * v79);
                    if (v88)
                    {
                      unint64_t v89 = *(unsigned __int16 *)(v88 + 2 * v81);
                      uint64_t v90 = v106[7];
                      uint64_t v91 = v106[8];
                      if (v89 < (v91 - v90) >> 3)
                      {
                        uint64_t v92 = v90 + 8 * v89;
                        if (v92 != v91 && *(_DWORD *)(v92 + 4) == v78)
                        {
                          uint64_t v94 = v107[4];
                          if (v79 < (v107[5] - v94) >> 3)
                          {
                            uint64_t v95 = *(void *)(v94 + 8 * v79);
                            if (v95)
                            {
                              unint64_t v96 = *(unsigned __int16 *)(v95 + 2 * v81);
                              uint64_t v98 = v107[7];
                              uint64_t v97 = v107[8];
                              if (v96 < (v97 - v98) >> 3)
                              {
                                uint64_t v99 = v98 + 8 * v96;
                                if (*(_DWORD *)(v99 + 4) == v78 && v99 != v97)
                                {
                                  uint64_t v8 = v76;
                                  goto LABEL_141;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v76;
        }
        while (v76 != v8);
        unint64_t v76 = v8;
LABEL_141:
        uint64_t v108 = v76;
        if (v9 == v8) {
          goto LABEL_148;
        }
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_148:
  void *result = 0xFFFFFFFF00000000;
  *(void *)(v10 + 8) = 0;
  return result;
}

void sub_1A19681CC(_Unwind_Exception *a1)
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    uint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    uint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint8x8_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v9 = ***(uint64_t ****)(a1 + 8);
  if (v9 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v9 != 0x22D45F5AAD4BF408)
  {
    uint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    uint64_t v9 = v10 - 5;
  }
  unint64_t v12 = (uint64_t (***)(void))v9[3];
  unint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v14 = (**v12)(v12);
  uint64_t v15 = (void *)MEMORY[0x1A6239C40]();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 64))(v8, v14);
  *(void *)(a1 + 8) = 0;
}

void ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>>::~Model()
{
}

uint64_t gdc::Registry::storage<md::ls::ElevatedStrokeConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0xB3E1F50BFD41E071;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB3E1F50BFD41E071;
    if (*(void *)&v1 <= 0xB3E1F50BFD41E071) {
      unint64_t v3 = 0xB3E1F50BFD41E071 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB3E1F50BFD41E071;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB3E1F50BFD41E071)
      {
        if (v5[2] == 0xB3E1F50BFD41E071) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB3E1F50BFD41E071) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB3E1F50BFD41E071) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196862C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::MaterialStyleConstantDataHandle>(int8x8_t *a1)
{
  unint64_t v10 = 0x8DB28088BB3C2FE3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8DB28088BB3C2FE3;
    if (*(void *)&v1 <= 0x8DB28088BB3C2FE3) {
      unint64_t v3 = 0x8DB28088BB3C2FE3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8DB28088BB3C2FE3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8DB28088BB3C2FE3)
      {
        if (v5[2] == 0x8DB28088BB3C2FE3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8DB28088BB3C2FE3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8DB28088BB3C2FE3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196889C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleColorConstantDataHandle>(int8x8_t *a1)
{
  uint64_t v10 = 0x7E6F38B7040F8E0FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7E6F38B7040F8E0FLL;
    if (*(void *)&v1 <= 0x7E6F38B7040F8E0FuLL) {
      uint64_t v3 = 0x7E6F38B7040F8E0FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7E6F38B7040F8E0FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7E6F38B7040F8E0FLL)
      {
        if (v5[2] == 0x7E6F38B7040F8E0FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7E6F38B7040F8E0FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7E6F38B7040F8E0FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1968B0C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A1968DBC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4A991B37E344929BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4A991B37E344929BLL;
    if (*(void *)&v1 <= 0x4A991B37E344929BuLL) {
      uint64_t v3 = 0x4A991B37E344929BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4A991B37E344929BLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4A991B37E344929BLL)
      {
        if (v5[2] == 0x4A991B37E344929BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4A991B37E344929BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4A991B37E344929BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196902C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF94A4E2652CF266ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF94A4E2652CF266ELL;
    if (*(void *)&v1 <= 0xF94A4E2652CF266ELL) {
      unint64_t v3 = 0xF94A4E2652CF266ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF94A4E2652CF266ELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF94A4E2652CF266ELL)
      {
        if (v5[2] == 0xF94A4E2652CF266ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF94A4E2652CF266ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF94A4E2652CF266ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196929C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4ED66455113F81E3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4ED66455113F81E3;
    if (*(void *)&v1 <= 0x4ED66455113F81E3uLL) {
      uint64_t v3 = 0x4ED66455113F81E3uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4ED66455113F81E3;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4ED66455113F81E3)
      {
        if (v5[2] == 0x4ED66455113F81E3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4ED66455113F81E3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4ED66455113F81E3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196950C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x31572B1B4D58BE2BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x31572B1B4D58BE2BLL;
    if (*(void *)&v1 <= 0x31572B1B4D58BE2BuLL) {
      uint64_t v3 = 0x31572B1B4D58BE2BuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x31572B1B4D58BE2BLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x31572B1B4D58BE2BLL)
      {
        if (v5[2] == 0x31572B1B4D58BE2BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x31572B1B4D58BE2BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x31572B1B4D58BE2BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196977C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCD7B3DB2C2D258CALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCD7B3DB2C2D258CALL;
    if (*(void *)&v1 <= 0xCD7B3DB2C2D258CALL) {
      unint64_t v3 = 0xCD7B3DB2C2D258CALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCD7B3DB2C2D258CALL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCD7B3DB2C2D258CALL)
      {
        if (v5[2] == 0xCD7B3DB2C2D258CALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCD7B3DB2C2D258CALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCD7B3DB2C2D258CALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A19699EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x8AED3586A1D729D9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8AED3586A1D729D9;
    if (*(void *)&v1 <= 0x8AED3586A1D729D9) {
      unint64_t v3 = 0x8AED3586A1D729D9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8AED3586A1D729D9;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8AED3586A1D729D9)
      {
        if (v5[2] == 0x8AED3586A1D729D9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8AED3586A1D729D9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8AED3586A1D729D9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1969C5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xB22A7749D4CDB850;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB22A7749D4CDB850;
    if (*(void *)&v1 <= 0xB22A7749D4CDB850) {
      unint64_t v3 = 0xB22A7749D4CDB850 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB22A7749D4CDB850;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB22A7749D4CDB850)
      {
        if (v5[2] == 0xB22A7749D4CDB850) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB22A7749D4CDB850) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB22A7749D4CDB850) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1969ECC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x7B8C320EC5754EB9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7B8C320EC5754EB9;
    if (*(void *)&v1 <= 0x7B8C320EC5754EB9uLL) {
      uint64_t v3 = 0x7B8C320EC5754EB9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7B8C320EC5754EB9;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7B8C320EC5754EB9)
      {
        if (v5[2] == 0x7B8C320EC5754EB9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7B8C320EC5754EB9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7B8C320EC5754EB9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196A13C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xA20E903AC8423AE1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA20E903AC8423AE1;
    if (*(void *)&v1 <= 0xA20E903AC8423AE1) {
      unint64_t v3 = 0xA20E903AC8423AE1 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA20E903AC8423AE1;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA20E903AC8423AE1)
      {
        if (v5[2] == 0xA20E903AC8423AE1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA20E903AC8423AE1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA20E903AC8423AE1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196A3AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xA14CF6DCDEA3F5F5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA14CF6DCDEA3F5F5;
    if (*(void *)&v1 <= 0xA14CF6DCDEA3F5F5) {
      unint64_t v3 = 0xA14CF6DCDEA3F5F5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA14CF6DCDEA3F5F5;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA14CF6DCDEA3F5F5)
      {
        if (v5[2] == 0xA14CF6DCDEA3F5F5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA14CF6DCDEA3F5F5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA14CF6DCDEA3F5F5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196A61C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x2E4DB0E7E1795086;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2E4DB0E7E1795086;
    if (*(void *)&v1 <= 0x2E4DB0E7E1795086uLL) {
      uint64_t v3 = 0x2E4DB0E7E1795086uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2E4DB0E7E1795086;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2E4DB0E7E1795086)
      {
        if (v5[2] == 0x2E4DB0E7E1795086) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2E4DB0E7E1795086) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2E4DB0E7E1795086) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196A88C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x7EE4E2CB5D22239;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7EE4E2CB5D22239;
    if (*(void *)&v1 <= 0x7EE4E2CB5D22239uLL) {
      uint64_t v3 = 0x7EE4E2CB5D22239uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7EE4E2CB5D22239;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7EE4E2CB5D22239)
      {
        if (v5[2] == 0x7EE4E2CB5D22239) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7EE4E2CB5D22239) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7EE4E2CB5D22239) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196AAFC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xDC9FD09A63403ED3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDC9FD09A63403ED3;
    if (*(void *)&v1 <= 0xDC9FD09A63403ED3) {
      unint64_t v3 = 0xDC9FD09A63403ED3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDC9FD09A63403ED3;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDC9FD09A63403ED3)
      {
        if (v5[2] == 0xDC9FD09A63403ED3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDC9FD09A63403ED3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDC9FD09A63403ED3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196AD6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xDC269C102C25EFECLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDC269C102C25EFECLL;
    if (*(void *)&v1 <= 0xDC269C102C25EFECLL) {
      unint64_t v3 = 0xDC269C102C25EFECLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDC269C102C25EFECLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDC269C102C25EFECLL)
      {
        if (v5[2] == 0xDC269C102C25EFECLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDC269C102C25EFECLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDC269C102C25EFECLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196AFDC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4B8054294B8B9B55;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4B8054294B8B9B55;
    if (*(void *)&v1 <= 0x4B8054294B8B9B55uLL) {
      uint64_t v3 = 0x4B8054294B8B9B55uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4B8054294B8B9B55;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4B8054294B8B9B55)
      {
        if (v5[2] == 0x4B8054294B8B9B55) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4B8054294B8B9B55) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4B8054294B8B9B55) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196B24C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF10E3A2DC308C279;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF10E3A2DC308C279;
    if (*(void *)&v1 <= 0xF10E3A2DC308C279) {
      unint64_t v3 = 0xF10E3A2DC308C279 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF10E3A2DC308C279;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF10E3A2DC308C279)
      {
        if (v5[2] == 0xF10E3A2DC308C279) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF10E3A2DC308C279) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF10E3A2DC308C279) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196B4BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x24EEF26FD15B5B85;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x24EEF26FD15B5B85;
    if (*(void *)&v1 <= 0x24EEF26FD15B5B85uLL) {
      uint64_t v3 = 0x24EEF26FD15B5B85uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x24EEF26FD15B5B85;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x24EEF26FD15B5B85)
      {
        if (v5[2] == 0x24EEF26FD15B5B85) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x24EEF26FD15B5B85) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x24EEF26FD15B5B85) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196B72C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCDFBB34DE0FFB731;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCDFBB34DE0FFB731;
    if (*(void *)&v1 <= 0xCDFBB34DE0FFB731) {
      unint64_t v3 = 0xCDFBB34DE0FFB731 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCDFBB34DE0FFB731;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCDFBB34DE0FFB731)
      {
        if (v5[2] == 0xCDFBB34DE0FFB731) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCDFBB34DE0FFB731) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCDFBB34DE0FFB731) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196B99C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x365426C0E4B6F01DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x365426C0E4B6F01DLL;
    if (*(void *)&v1 <= 0x365426C0E4B6F01DuLL) {
      uint64_t v3 = 0x365426C0E4B6F01DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x365426C0E4B6F01DLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x365426C0E4B6F01DLL)
      {
        if (v5[2] == 0x365426C0E4B6F01DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x365426C0E4B6F01DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x365426C0E4B6F01DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196BC0C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x90CDA7E17AF1623ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x90CDA7E17AF1623ELL;
    if (*(void *)&v1 <= 0x90CDA7E17AF1623ELL) {
      unint64_t v3 = 0x90CDA7E17AF1623ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x90CDA7E17AF1623ELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x90CDA7E17AF1623ELL)
      {
        if (v5[2] == 0x90CDA7E17AF1623ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x90CDA7E17AF1623ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x90CDA7E17AF1623ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196BE7C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x9E3F3811EAB07CCALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9E3F3811EAB07CCALL;
    if (*(void *)&v1 <= 0x9E3F3811EAB07CCALL) {
      unint64_t v3 = 0x9E3F3811EAB07CCALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9E3F3811EAB07CCALL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9E3F3811EAB07CCALL)
      {
        if (v5[2] == 0x9E3F3811EAB07CCALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9E3F3811EAB07CCALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9E3F3811EAB07CCALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196C0EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x3CCD86F46BBA1B2DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3CCD86F46BBA1B2DLL;
    if (*(void *)&v1 <= 0x3CCD86F46BBA1B2DuLL) {
      uint64_t v3 = 0x3CCD86F46BBA1B2DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3CCD86F46BBA1B2DLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3CCD86F46BBA1B2DLL)
      {
        if (v5[2] == 0x3CCD86F46BBA1B2DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3CCD86F46BBA1B2DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3CCD86F46BBA1B2DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196C35C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x68B9076D41547F1ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x68B9076D41547F1ALL;
    if (*(void *)&v1 <= 0x68B9076D41547F1AuLL) {
      uint64_t v3 = 0x68B9076D41547F1AuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x68B9076D41547F1ALL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x68B9076D41547F1ALL)
      {
        if (v5[2] == 0x68B9076D41547F1ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x68B9076D41547F1ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x68B9076D41547F1ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196C5CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::GradientConstantDataHandle2>(int8x8_t *a1)
{
  unint64_t v10 = 0x8963527098E963C3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8963527098E963C3;
    if (*(void *)&v1 <= 0x8963527098E963C3) {
      unint64_t v3 = 0x8963527098E963C3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8963527098E963C3;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8963527098E963C3)
      {
        if (v5[2] == 0x8963527098E963C3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8963527098E963C3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8963527098E963C3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196C83C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xE913BA7B7D110BFBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE913BA7B7D110BFBLL;
    if (*(void *)&v1 <= 0xE913BA7B7D110BFBLL) {
      unint64_t v3 = 0xE913BA7B7D110BFBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE913BA7B7D110BFBLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE913BA7B7D110BFBLL)
      {
        if (v5[2] == 0xE913BA7B7D110BFBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE913BA7B7D110BFBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE913BA7B7D110BFBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196CAAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD68EAE6708C7203BLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD68EAE6708C7203BLL;
    if (*(void *)&v1 <= 0xD68EAE6708C7203BLL) {
      unint64_t v3 = 0xD68EAE6708C7203BLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD68EAE6708C7203BLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD68EAE6708C7203BLL)
      {
        if (v5[2] == 0xD68EAE6708C7203BLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD68EAE6708C7203BLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD68EAE6708C7203BLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196CD1C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x5FEC906E580C2ACDLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5FEC906E580C2ACDLL;
    if (*(void *)&v1 <= 0x5FEC906E580C2ACDuLL) {
      uint64_t v3 = 0x5FEC906E580C2ACDuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5FEC906E580C2ACDLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5FEC906E580C2ACDLL)
      {
        if (v5[2] == 0x5FEC906E580C2ACDLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5FEC906E580C2ACDLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5FEC906E580C2ACDLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196CF8C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD2597E061104B596;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD2597E061104B596;
    if (*(void *)&v1 <= 0xD2597E061104B596) {
      unint64_t v3 = 0xD2597E061104B596 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD2597E061104B596;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD2597E061104B596)
      {
        if (v5[2] == 0xD2597E061104B596) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD2597E061104B596) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD2597E061104B596) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196D1FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xEC8E73EF48115BAELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xEC8E73EF48115BAELL;
    if (*(void *)&v1 <= 0xEC8E73EF48115BAELL) {
      unint64_t v3 = 0xEC8E73EF48115BAELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xEC8E73EF48115BAELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xEC8E73EF48115BAELL)
      {
        if (v5[2] == 0xEC8E73EF48115BAELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xEC8E73EF48115BAELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xEC8E73EF48115BAELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196D46C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0x9FD60998017D8C7FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9FD60998017D8C7FLL;
    if (*(void *)&v1 <= 0x9FD60998017D8C7FLL) {
      unint64_t v3 = 0x9FD60998017D8C7FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9FD60998017D8C7FLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9FD60998017D8C7FLL)
      {
        if (v5[2] == 0x9FD60998017D8C7FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9FD60998017D8C7FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9FD60998017D8C7FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196D6DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC69E45AA7591636ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC69E45AA7591636ELL;
    if (*(void *)&v1 <= 0xC69E45AA7591636ELL) {
      unint64_t v3 = 0xC69E45AA7591636ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC69E45AA7591636ELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC69E45AA7591636ELL)
      {
        if (v5[2] == 0xC69E45AA7591636ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC69E45AA7591636ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC69E45AA7591636ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196D94C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF8B8367F26B933A6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF8B8367F26B933A6;
    if (*(void *)&v1 <= 0xF8B8367F26B933A6) {
      unint64_t v3 = 0xF8B8367F26B933A6 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF8B8367F26B933A6;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF8B8367F26B933A6)
      {
        if (v5[2] == 0xF8B8367F26B933A6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF8B8367F26B933A6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF8B8367F26B933A6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196DBBC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x19CB8E83B6F501F6;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x19CB8E83B6F501F6;
    if (*(void *)&v1 <= 0x19CB8E83B6F501F6uLL) {
      uint64_t v3 = 0x19CB8E83B6F501F6uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x19CB8E83B6F501F6;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x19CB8E83B6F501F6)
      {
        if (v5[2] == 0x19CB8E83B6F501F6) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x19CB8E83B6F501F6) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x19CB8E83B6F501F6) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196DE2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0x954EA3109050D2A9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x954EA3109050D2A9;
    if (*(void *)&v1 <= 0x954EA3109050D2A9) {
      unint64_t v3 = 0x954EA3109050D2A9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x954EA3109050D2A9;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x954EA3109050D2A9)
      {
        if (v5[2] == 0x954EA3109050D2A9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x954EA3109050D2A9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x954EA3109050D2A9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196E09C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x563FF6883E9740F7;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x563FF6883E9740F7;
    if (*(void *)&v1 <= 0x563FF6883E9740F7uLL) {
      uint64_t v3 = 0x563FF6883E9740F7uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x563FF6883E9740F7;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x563FF6883E9740F7)
      {
        if (v5[2] == 0x563FF6883E9740F7) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x563FF6883E9740F7) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x563FF6883E9740F7) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196E30C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xAEACE637C9751345;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xAEACE637C9751345;
    if (*(void *)&v1 <= 0xAEACE637C9751345) {
      unint64_t v3 = 0xAEACE637C9751345 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xAEACE637C9751345;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xAEACE637C9751345)
      {
        if (v5[2] == 0xAEACE637C9751345) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xAEACE637C9751345) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xAEACE637C9751345) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196E57C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC5F6E84B67A27720;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC5F6E84B67A27720;
    if (*(void *)&v1 <= 0xC5F6E84B67A27720) {
      unint64_t v3 = 0xC5F6E84B67A27720 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC5F6E84B67A27720;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC5F6E84B67A27720)
      {
        if (v5[2] == 0xC5F6E84B67A27720) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC5F6E84B67A27720) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC5F6E84B67A27720) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196E7EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UseGlobeLighting>(int8x8_t *a1)
{
  unint64_t v10 = 0x97E77A2C4FA4C0B5;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x97E77A2C4FA4C0B5;
    if (*(void *)&v1 <= 0x97E77A2C4FA4C0B5) {
      unint64_t v3 = 0x97E77A2C4FA4C0B5 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x97E77A2C4FA4C0B5;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x97E77A2C4FA4C0B5)
      {
        if (v5[2] == 0x97E77A2C4FA4C0B5) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x97E77A2C4FA4C0B5) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x97E77A2C4FA4C0B5) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196EA5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IsElevated>(int8x8_t *a1)
{
  unint64_t v10 = 0x8261D2F258A435BBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8261D2F258A435BBLL;
    if (*(void *)&v1 <= 0x8261D2F258A435BBLL) {
      unint64_t v3 = 0x8261D2F258A435BBLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8261D2F258A435BBLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8261D2F258A435BBLL)
      {
        if (v5[2] == 0x8261D2F258A435BBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8261D2F258A435BBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8261D2F258A435BBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196ECCC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRouteLineMaskPass>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  unint64_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    unint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    unint64_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  unint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(int8x8_t *a1)
{
  unint64_t v10 = 0x9C1597C84433D2CALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9C1597C84433D2CALL;
    if (*(void *)&v1 <= 0x9C1597C84433D2CALL) {
      unint64_t v3 = 0x9C1597C84433D2CALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9C1597C84433D2CALL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9C1597C84433D2CALL)
      {
        if (v5[2] == 0x9C1597C84433D2CALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9C1597C84433D2CALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9C1597C84433D2CALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A196F02C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v1 + 88);
  if (v2 >= (*(void *)(v1 + 96) - v3) >> 3) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  BOOL v5 = v4 && HIDWORD(*(void *)(a1 + 8)) == HIDWORD(v4);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v1 + 112) + 8 * v4;
  if (v6 == *(void *)(v1 + 120)) {
    return;
  }
  uint64_t v7 = *(void *)v6;
  *(void *)(v7 + 120) = *(void *)(*(void *)v6 + 120) + 1;
  if (!*(unsigned char *)(v7 + 49) || *(unsigned char *)(v7 + 48)) {
    return;
  }
  uint64_t v8 = **(uint64_t ***)(v1 + 8);
  if (v8 != *(uint64_t **)(*(void *)(v1 + 8) + 8) && *v8 != 0xC5B557B9C9754C35)
  {
    uint64_t v9 = v8 + 5;
    do
    {
      uint64_t v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0xC5B557B9C9754C35);
    uint64_t v8 = v9 - 5;
  }
  uint64_t v11 = v8[3];
  unint64_t v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  uint64_t v190 = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 8))(v11, *(void *)(v7 + 40));
  if (!v190) {
    return;
  }
  uint64_t v189 = 0;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v14 = *(void **)v13;
  uint64_t v15 = *(void **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0xCFC5133F599B8248)
    {
      v14 += 5;
      if (v14 == v15) {
        goto LABEL_27;
      }
    }
  }
  if (v14 == v15)
  {
LABEL_27:
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = v14[3];
    uint64_t v17 = (std::__shared_weak_count *)v14[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  uint64_t v189 = v16;
  if (*(unsigned char *)(v7 + 36))
  {
    uint64_t v18 = *(unsigned __int8 **)(v1 + 160);
    if (v18)
    {
      unint64_t v19 = operator new(0x20uLL);
      void *v19 = &unk_1EF51E5C0;
      v19[1] = &v190;
      v19[2] = &v189;
      v19[3] = v7;
      uint8x8_t v197 = v19;
      unsigned __int8 v193 = 0;
      dispatch_semaphore_t dsema = dispatch_semaphore_create(0);
      uint64_t v209 = 0;
      uint64_t v210 = &v209;
      uint64_t v211 = 0x6012000000;
      uint64_t v212 = __Block_byref_object_copy__18234;
      uint64_t v213 = __Block_byref_object_dispose__18235;
      uint64_t v214 = "";
      unint64_t v215 = &v193;
      p_dispatch_semaphore_t dsema = &dsema;
      if (v197)
      {
        if (v197 == v196)
        {
          uint64_t v218 = v217;
          (*(void (**)(void *, void *))(v196[0] + 24))(v196, v217);
        }
        else
        {
          uint64_t v218 = v197;
          uint8x8_t v197 = 0;
        }
      }
      else
      {
        uint64_t v218 = 0;
      }
      v205[0] = &unk_1EF5739C8;
      v205[1] = v18;
      uint64_t v206 = v205;
      v203[0] = &unk_1EF573A10;
      v203[1] = v18;
      uint64_t v204 = v203;
      int v208 = v207;
      v207[0] = &unk_1EF573A10;
      v207[1] = v18;
      if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
      }
      BOOL v23 = (id)GEOGetVectorKitPerformanceLog_log;
      uint64_t v24 = v23;
      os_signpost_id_t v25 = *((void *)v18 + 37);
      if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A1780000, v24, OS_SIGNPOST_INTERVAL_BEGIN, v25, "SyncWait", "", buf, 2u);
      }

      if (v204 == v203)
      {
        (*(void (**)(void *))(v203[0] + 32))(v203);
      }
      else if (v204)
      {
        (*(void (**)(void))(*v204 + 40))();
      }
      if (v206 == v205)
      {
        (*(void (**)(void *))(v205[0] + 32))(v205);
      }
      else if (v206)
      {
        (*(void (**)(void))(*v206 + 40))();
      }
      if (atomic_load(&v193))
      {
        dispatch_block_t v27 = 0;
LABEL_57:
        int v28 = atomic_load(&v193);
        if (v28 != 1)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v29 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)size_t v224 = 67109890;
            *(_DWORD *)&v224[4] = v28;
            *(_WORD *)size_t v225 = 2080;
            *(void *)&v225[2] = "false";
            __int16 v226 = 2080;
            unsigned __int8 v227 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/HomeQueueScheduler.mm";
            __int16 v228 = 1024;
            *(_DWORD *)uint64_t v229 = 160;
            _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_FAULT, "Failed to correctly run task (counter:%d): Assertion with expression - %s : Failed in file - %s line - %i", v224, 0x22u);
          }

          uint64_t v30 = *((void *)v18 + 38);
          BOOL v31 = *(void **)v30;
          uint64_t v32 = *(void **)(v30 + 8);
          if (v31 != v32)
          {
            while (*v31 != 0x4BCD00F88A8100BELL)
            {
              v31 += 5;
              if (v31 == v32) {
                goto LABEL_289;
              }
            }
          }
          if (v31 != v32)
          {
            uint64_t v186 = (void (***)(void, void, const char *))v31[3];
            uint64_t v187 = (std::__shared_weak_count *)v31[4];
            if (v187)
            {
              atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
              }
            }
            if (v186) {
              (**v186)(v186, 0, "");
            }
          }
        }
LABEL_289:
        if (v208)
        {
          (*(void (**)(void *))(*v208 + 48))(v208);
          if (v208 == v207)
          {
            (*(void (**)(void *))(v207[0] + 32))(v207);
          }
          else if (v208)
          {
            (*(void (**)(void))(*v208 + 40))();
          }
          _Block_object_dispose(&v209, 8);
          if (v218 == v217)
          {
            (*(void (**)(void *))(v217[0] + 32))(v217);
          }
          else if (v218)
          {
            (*(void (**)(void))(*v218 + 40))();
          }

          if (v197 == v196)
          {
            (*(void (**)(void *))(v196[0] + 32))(v196);
          }
          else if (v197)
          {
            (*(void (**)(void))(*v197 + 40))();
          }
        }
        else
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        return;
      }
      dispatch_block_t v27 = 0;
      while (1)
      {
        std::mutex::lock((std::mutex *)(v18 + 8));
        int v34 = *v18;
        std::mutex::unlock((std::mutex *)(v18 + 8));
        if (v34)
        {
          if (!v27)
          {
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = ___ZN2md18HomeQueueScheduler8syncWaitEjNSt3__18functionIFvvEEE_block_invoke;
            block[3] = &unk_1E5A93118;
            block[4] = &v209;
            dispatch_block_t v27 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, block);
            dispatch_async(*((dispatch_queue_t *)v18 + 21), v27);
          }
          while (1)
          {
            dispatch_time_t v35 = dispatch_time(0, 10000);
            if (!dispatch_block_wait(v27, v35)) {
              break;
            }
            std::mutex::lock((std::mutex *)(v18 + 8));
            int v36 = *v18;
            std::mutex::unlock((std::mutex *)(v18 + 8));
            if (!v36)
            {
              if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
              }
              uint64_t v37 = (id)GEOGetVectorKitPerformanceLog_log;
              if (os_signpost_enabled(v37))
              {
                *(_WORD *)size_t v224 = 0;
                _os_signpost_emit_with_name_impl(&dword_1A1780000, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "RunLoopRedirect", "", v224, 2u);
              }

              dispatch_block_cancel(v27);
              break;
            }
          }
          if (!dispatch_block_testcancel(v27)) {
            dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
          }
          goto LABEL_68;
        }
        *(_OWORD *)uint64_t buf = *((_OWORD *)v210 + 3);
        uint64_t v38 = v210[11];
        if (!v38) {
          goto LABEL_84;
        }
        if ((uint64_t *)v38 != v210 + 8) {
          break;
        }
        unint64_t v200 = v199;
        (*(void (**)(uint64_t, void *))(*(void *)v38 + 24))(v38, v199);
LABEL_86:
        unint64_t v202 = 0;
        unint64_t v39 = (char *)operator new(0x38uLL);
        unint64_t v40 = v39;
        *(void *)unint64_t v39 = &unk_1EF573980;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)buf;
        if (v200)
        {
          if (v200 == v199)
          {
            *((void *)v39 + 6) = v39 + 24;
            (*(void (**)(void *))(v199[0] + 24))(v199);
          }
          else
          {
            *((void *)v39 + 6) = v200;
            unint64_t v200 = 0;
          }
        }
        else
        {
          *((void *)v39 + 6) = 0;
        }
        unint64_t v202 = v40;
        std::mutex::lock((std::mutex *)(v18 + 8));
        std::mutex::unlock((std::mutex *)(v18 + 8));
        std::promise<void>::promise(&v195);
        std::promise<void>::get_future(&v195);
        *(void *)size_t v224 = &v195;
        unint64_t v41 = v202;
        if (!v202)
        {
          *(void *)&v229[2] = 0;
          long long v219 = &v195;
LABEL_99:
          uint64_t v221 = v41;
          goto LABEL_100;
        }
        if (v202 == v201)
        {
          *(void *)&v229[2] = v225;
          (*(void (**)(void *, unsigned char *))(v201[0] + 24))(v201, v225);
          unint64_t v41 = *(unsigned char **)&v229[2];
        }
        else
        {
          unint64_t v41 = (unsigned char *)(*(uint64_t (**)(void))(*v202 + 16))();
          *(void *)&v229[2] = v41;
        }
        long long v219 = *(std::promise<void> **)v224;
        if (!v41) {
          goto LABEL_99;
        }
        if (v41 != v225)
        {
          unint64_t v41 = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)v41 + 16))(v41);
          goto LABEL_99;
        }
        uint64_t v221 = v220;
        (*(void (**)(unsigned char *, void *))(*(void *)v225 + 24))(v225, v220);
LABEL_100:
        size_t v223 = 0;
        uint64_t v42 = operator new(0x30uLL);
        unint64_t v43 = v42;
        uint64_t v44 = v219;
        uint64_t v45 = v221;
        *uint64_t v42 = &unk_1EF570848;
        v42[1] = v44;
        if (v45)
        {
          if (v45 == v220)
          {
            v42[5] = v42 + 2;
            (*(void (**)(void *))(v220[0] + 24))(v220);
          }
          else
          {
            v42[5] = v45;
            uint64_t v221 = 0;
          }
        }
        else
        {
          v42[5] = 0;
        }
        size_t v223 = v43;
        std::mutex::lock((std::mutex *)(v18 + 8));
        int v188 = *v18;
        if (!*v18)
        {
          BOOL v46 = (char *)*((void *)v18 + 16);
          uint64_t v47 = (char *)*((void *)v18 + 17);
          uint64_t v48 = v47 - v46;
          if (v47 == v46) {
            uint64_t v49 = 0;
          }
          else {
            uint64_t v49 = 16 * (v47 - v46) - 1;
          }
          unint64_t v50 = *((void *)v18 + 19);
          if (v49 != *((void *)v18 + 20) + v50) {
            goto LABEL_232;
          }
          BOOL v51 = v50 >= 0x80;
          unint64_t v52 = v50 - 128;
          if (v51)
          {
            *((void *)v18 + 19) = v52;
            uint64_t v54 = v46 + 8;
            uint64_t v53 = *(void *)v46;
            *((void *)v18 + 16) = v46 + 8;
            if (v47 != *((char **)v18 + 18)) {
              goto LABEL_229;
            }
            uint64_t v55 = (char *)*((void *)v18 + 15);
            if (v54 > v55)
            {
              uint64_t v56 = (v54 - v55) >> 3;
              if (v56 >= -1) {
                uint64_t v57 = v56 + 1;
              }
              else {
                uint64_t v57 = v56 + 2;
              }
              uint64_t v58 = v57 >> 1;
              uint8x8_t v59 = &v54[-8 * (v57 >> 1)];
              int64_t v60 = v47 - v54;
              if (v47 != v54)
              {
                memmove(&v54[-8 * (v57 >> 1)], v54, v47 - v54);
                uint64_t v47 = (char *)*((void *)v18 + 16);
              }
              unint64_t v61 = &v47[-8 * v58];
              uint64_t v47 = &v59[v60];
              goto LABEL_121;
            }
            if (v47 == v55) {
              unint64_t v73 = 1;
            }
            else {
              unint64_t v73 = (v47 - v55) >> 2;
            }
            if (v73 >> 61) {
              goto LABEL_302;
            }
            uint64_t v74 = operator new(8 * v73);
            unint64_t v75 = v73 >> 2;
            unint64_t v76 = &v74[8 * (v73 >> 2)];
            int64_t v77 = v47 - v54;
            BOOL v5 = v47 == v54;
            uint64_t v47 = v76;
            if (!v5)
            {
              uint64_t v47 = &v76[v77 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v78 = v77 - 8;
              if (v78 >= 0x38)
              {
                uint64_t v127 = 8 * v75;
                unint64_t v128 = &v74[8 * v75] - v54;
                unint64_t v79 = &v74[8 * (v73 >> 2)];
                if (v128 >= 0x20)
                {
                  uint64_t v129 = (v78 >> 3) + 1;
                  uint64_t v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v79 = &v76[v130];
                  uint64_t v131 = (long long *)(v46 + 24);
                  uint64_t v132 = &v74[v127 + 16];
                  uint64_t v133 = v129 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v134 = *v131;
                    *(v132 - 1) = *(v131 - 1);
                    _OWORD *v132 = v134;
                    v131 += 2;
                    v132 += 2;
                    v133 -= 4;
                  }
                  while (v133);
                  if (v129 == (v129 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_203;
                  }
                  v54 += v130;
                }
              }
              else
              {
                unint64_t v79 = &v74[8 * (v73 >> 2)];
              }
              do
              {
                uint64_t v135 = *(void *)v54;
                v54 += 8;
                *(void *)unint64_t v79 = v135;
                v79 += 8;
              }
              while (v79 != v47);
            }
LABEL_203:
            *((void *)v18 + 15) = v74;
            *((void *)v18 + 16) = v76;
            *((void *)v18 + 17) = v47;
            *((void *)v18 + 18) = &v74[8 * v73];
            if (v55)
            {
              operator delete(v55);
              uint64_t v47 = (char *)*((void *)v18 + 17);
            }
            goto LABEL_229;
          }
          uint64_t v62 = (char *)*((void *)v18 + 18);
          unint64_t v63 = (char *)*((void *)v18 + 15);
          if (v48 >> 3 < (unint64_t)((v62 - v63) >> 3))
          {
            if (v62 != v47)
            {
              unint64_t v64 = operator new(0x1000uLL);
              uint64_t v65 = (char *)*((void *)v18 + 17);
              if (v65 != *((char **)v18 + 18)) {
                goto LABEL_126;
              }
              uint64_t v83 = (char *)*((void *)v18 + 15);
              uint64_t v84 = (char *)*((void *)v18 + 16);
              if (v84 > v83)
              {
                uint64_t v85 = (v84 - v83) >> 3;
                if (v85 >= -1) {
                  uint64_t v86 = v85 + 1;
                }
                else {
                  uint64_t v86 = v85 + 2;
                }
                uint64_t v87 = v86 >> 1;
                uint64_t v88 = &v84[-8 * (v86 >> 1)];
                int64_t v89 = v65 - v84;
                if (v65 != v84)
                {
                  memmove(&v84[-8 * (v86 >> 1)], *((const void **)v18 + 16), v65 - v84);
                  uint64_t v65 = (char *)*((void *)v18 + 16);
                }
                *((void *)v18 + 16) = &v65[-8 * v87];
                *((void *)v18 + 17) = &v88[v89];
                *(void *)&v88[v89] = v64;
                goto LABEL_230;
              }
              if (v65 == v83) {
                unint64_t v120 = 1;
              }
              else {
                unint64_t v120 = (v65 - v83) >> 2;
              }
              if (!(v120 >> 61))
              {
                unint64_t v121 = operator new(8 * v120);
                unint64_t v122 = v120 >> 2;
                uint64_t v123 = &v121[8 * (v120 >> 2)];
                int64_t v124 = v65 - v84;
                BOOL v5 = v65 == v84;
                uint64_t v65 = v123;
                if (!v5)
                {
                  uint64_t v65 = &v123[v124 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v125 = v124 - 8;
                  if (v125 >= 0x38)
                  {
                    uint64_t v154 = 8 * v122;
                    unint64_t v155 = &v121[8 * v122] - v84;
                    uint64_t v126 = &v121[8 * (v120 >> 2)];
                    if (v155 < 0x20) {
                      goto LABEL_221;
                    }
                    uint64_t v156 = (v125 >> 3) + 1;
                    uint64_t v157 = 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v126 = &v123[v157];
                    uint64_t v158 = (long long *)(v84 + 16);
                    uint64_t v159 = &v121[v154 + 16];
                    uint64_t v160 = v156 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v161 = *v158;
                      *(v159 - 1) = *(v158 - 1);
                      _OWORD *v159 = v161;
                      v158 += 2;
                      v159 += 2;
                      v160 -= 4;
                    }
                    while (v160);
                    if (v156 != (v156 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      v84 += v157;
                      goto LABEL_221;
                    }
                  }
                  else
                  {
                    uint64_t v126 = &v121[8 * (v120 >> 2)];
                    do
                    {
LABEL_221:
                      uint64_t v162 = *(void *)v84;
                      v84 += 8;
                      *(void *)uint64_t v126 = v162;
                      v126 += 8;
                    }
                    while (v126 != v65);
                  }
                }
                *((void *)v18 + 15) = v121;
                *((void *)v18 + 16) = v123;
                *((void *)v18 + 17) = v65;
                *((void *)v18 + 18) = &v121[8 * v120];
                if (v83)
                {
                  operator delete(v83);
                  uint64_t v65 = (char *)*((void *)v18 + 17);
                }
LABEL_126:
                *(void *)uint64_t v65 = v64;
LABEL_230:
                uint64_t v47 = (char *)(*((void *)v18 + 17) + 8);
                *((void *)v18 + 17) = v47;
LABEL_231:
                BOOL v46 = (char *)*((void *)v18 + 16);
LABEL_232:
                if (v47 == v46)
                {
                  uint64_t v166 = 0;
                }
                else
                {
                  unint64_t v165 = *((void *)v18 + 20) + *((void *)v18 + 19);
                  uint64_t v166 = *(void *)&v46[(v165 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v165 & 0x7F);
                }
                uint64_t v167 = (uint64_t)v223;
                if (v223)
                {
                  if (v223 != v222)
                  {
                    uint64_t v167 = (*(uint64_t (**)(void))(*v223 + 16))();
                    goto LABEL_238;
                  }
                  *(void *)(v166 + 24) = v166;
                  (*(void (**)(void *, uint64_t))(*v223 + 24))(v223, v166);
                }
                else
                {
LABEL_238:
                  *(void *)(v166 + 24) = v167;
                }
                ++*((void *)v18 + 20);
                std::mutex::unlock((std::mutex *)(v18 + 8));
                std::condition_variable::notify_one((std::condition_variable *)(v18 + 72));
                goto LABEL_241;
              }
LABEL_302:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v80 = operator new(0x1000uLL);
            uint64_t v81 = (char *)*((void *)v18 + 16);
            if (v81 != *((char **)v18 + 15))
            {
              unint64_t v82 = (char *)*((void *)v18 + 16);
              goto LABEL_228;
            }
            uint64_t v115 = (unsigned char *)*((void *)v18 + 17);
            unint64_t v114 = *((void *)v18 + 18);
            if ((unint64_t)v115 < v114)
            {
              uint64_t v116 = (uint64_t)(v114 - (void)v115) >> 3;
              if (v116 >= -1) {
                uint64_t v117 = v116 + 1;
              }
              else {
                uint64_t v117 = v116 + 2;
              }
              uint64_t v118 = v117 >> 1;
              uint64_t v119 = &v115[8 * (v117 >> 1)];
              unint64_t v82 = &v119[-(v115 - v81)];
              if (v115 != v81)
              {
                memmove(&v119[-(v115 - v81)], *((const void **)v18 + 16), v115 - v81);
                uint64_t v81 = (char *)*((void *)v18 + 17);
              }
              *((void *)v18 + 16) = v82;
              *((void *)v18 + 17) = &v81[8 * v118];
LABEL_228:
              *((void *)v82 - 1) = v80;
              char v164 = (char *)*((void *)v18 + 16);
              uint64_t v47 = (char *)*((void *)v18 + 17);
              *((void *)v18 + 16) = v164 - 8;
              uint64_t v53 = *((void *)v164 - 1);
              *((void *)v18 + 16) = v164;
              if (v47 != *((char **)v18 + 18))
              {
LABEL_229:
                *(void *)uint64_t v47 = v53;
                goto LABEL_230;
              }
              uint64_t v55 = (char *)*((void *)v18 + 15);
              if (v164 > v55)
              {
                uint64_t v168 = (v164 - v55) >> 3;
                if (v168 >= -1) {
                  uint64_t v169 = v168 + 1;
                }
                else {
                  uint64_t v169 = v168 + 2;
                }
                uint64_t v170 = v169 >> 1;
                size_t v171 = &v164[-8 * (v169 >> 1)];
                int64_t v172 = v47 - v164;
                if (v47 != v164)
                {
                  memmove(&v164[-8 * (v169 >> 1)], v164, v47 - v164);
                  char v164 = (char *)*((void *)v18 + 16);
                }
                uint64_t v47 = &v171[v172];
                unint64_t v61 = &v164[-8 * v170];
LABEL_121:
                *((void *)v18 + 16) = v61;
                *((void *)v18 + 17) = v47;
                goto LABEL_229;
              }
              if (v47 == v55) {
                unint64_t v73 = 1;
              }
              else {
                unint64_t v73 = (v47 - v55) >> 2;
              }
              if (v73 >> 61) {
                goto LABEL_302;
              }
              uint64_t v74 = operator new(8 * v73);
              unint64_t v173 = v73 >> 2;
              unint64_t v76 = &v74[8 * (v73 >> 2)];
              int64_t v174 = v47 - v164;
              BOOL v5 = v47 == v164;
              uint64_t v47 = v76;
              if (!v5)
              {
                uint64_t v47 = &v76[v174 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v175 = v174 - 8;
                if (v175 >= 0x38)
                {
                  uint64_t v177 = 8 * v173;
                  unint64_t v178 = &v74[8 * v173] - v164;
                  uint64_t v176 = &v74[8 * (v73 >> 2)];
                  if (v178 < 0x20) {
                    goto LABEL_281;
                  }
                  uint64_t v179 = (v175 >> 3) + 1;
                  uint64_t v180 = 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v176 = &v76[v180];
                  size_t v181 = (long long *)(v164 + 16);
                  uint64_t v182 = &v74[v177 + 16];
                  uint64_t v183 = v179 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v184 = *v181;
                    *(v182 - 1) = *(v181 - 1);
                    _OWORD *v182 = v184;
                    v181 += 2;
                    v182 += 2;
                    v183 -= 4;
                  }
                  while (v183);
                  if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v164 += v180;
                    goto LABEL_281;
                  }
                }
                else
                {
                  uint64_t v176 = &v74[8 * (v73 >> 2)];
                  do
                  {
LABEL_281:
                    uint64_t v185 = *(void *)v164;
                    v164 += 8;
                    *(void *)uint64_t v176 = v185;
                    v176 += 8;
                  }
                  while (v176 != v47);
                }
              }
              goto LABEL_203;
            }
            uint64_t v136 = v114 - (void)v81;
            BOOL v5 = v136 == 0;
            uint64_t v137 = v136 >> 2;
            if (v5) {
              unint64_t v138 = 1;
            }
            else {
              unint64_t v138 = v137;
            }
            if (v138 >> 61) {
              goto LABEL_302;
            }
            unint64_t v139 = (char *)operator new(8 * v138);
            unint64_t v140 = (v138 + 3) >> 2;
            unint64_t v82 = &v139[8 * v140];
            uint64_t v141 = &v139[8 * v138];
            unint64_t v142 = v82;
            uint64_t v143 = v115 - v81;
            if (v115 != v81)
            {
              unint64_t v142 = &v82[v143 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v144 = v143 - 8;
              uint64_t v145 = &v139[8 * v140];
              uint64_t v146 = v81;
              if (v144 > 0x37)
              {
                uint64_t v147 = 8 * v140;
                uint64_t v145 = &v139[8 * v140];
                uint64_t v146 = v81;
                if ((unint64_t)(v145 - v81) >= 0x20)
                {
                  uint64_t v148 = (v144 >> 3) + 1;
                  uint64_t v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v145 = &v82[v149];
                  uint64_t v150 = (long long *)(v81 + 16);
                  uint64_t v151 = &v139[v147 + 16];
                  uint64_t v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v153 = *v150;
                    *((_OWORD *)v151 - 1) = *(v150 - 1);
                    *(_OWORD *)uint64_t v151 = v153;
                    v150 += 2;
                    v151 += 32;
                    v152 -= 4;
                  }
                  while (v152);
                  if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    *((void *)v18 + 15) = v139;
                    *((void *)v18 + 16) = v82;
                    *((void *)v18 + 17) = v142;
                    *((void *)v18 + 18) = v141;
LABEL_227:
                    operator delete(v81);
                    unint64_t v82 = (char *)*((void *)v18 + 16);
                    goto LABEL_228;
                  }
                  uint64_t v146 = &v81[v149];
                }
              }
              do
              {
                uint64_t v163 = *(void *)v146;
                v146 += 8;
                *(void *)uint64_t v145 = v163;
                v145 += 8;
              }
              while (v145 != v142);
            }
            *((void *)v18 + 15) = v139;
            *((void *)v18 + 16) = v82;
            *((void *)v18 + 17) = v142;
            *((void *)v18 + 18) = v141;
            if (!v81) {
              goto LABEL_228;
            }
            goto LABEL_227;
          }
          if (v62 == v63) {
            unint64_t v66 = 1;
          }
          else {
            unint64_t v66 = (v62 - v63) >> 2;
          }
          if (v66 >> 61) {
            goto LABEL_302;
          }
          uint64_t v67 = (char *)operator new(8 * v66);
          uint8x8_t v68 = operator new(0x1000uLL);
          unint64_t v69 = &v67[8 * (v48 >> 3)];
          uint64_t v70 = v48 >> 3;
          uint64_t v71 = &v67[8 * v66];
          if (v48 >> 3 == v66)
          {
            if (v48 < 1)
            {
              if (v47 == v46) {
                unint64_t v90 = 1;
              }
              else {
                unint64_t v90 = v48 >> 2;
              }
              if (v90 >> 61) {
                goto LABEL_302;
              }
              uint64_t v91 = v68;
              unint64_t v69 = (char *)operator new(8 * v90);
              uint64_t v71 = &v69[8 * v90];
              operator delete(v67);
              BOOL v46 = (char *)*((void *)v18 + 16);
              uint64_t v47 = (char *)*((void *)v18 + 17);
              uint64_t v67 = v69;
              uint8x8_t v68 = v91;
            }
            else
            {
              unint64_t v72 = v70 + 2;
              if (v70 >= -1) {
                unint64_t v72 = v70 + 1;
              }
              v69 -= 8 * (v72 >> 1);
            }
          }
          *(void *)unint64_t v69 = v68;
          uint64_t v92 = v69 + 8;
          if (v47 == v46)
          {
LABEL_158:
            uint64_t v93 = (void *)*((void *)v18 + 15);
            *((void *)v18 + 15) = v67;
            *((void *)v18 + 16) = v69;
            uint64_t v47 = v92;
            *((void *)v18 + 17) = v92;
            *((void *)v18 + 18) = v71;
            if (v93)
            {
              operator delete(v93);
              uint64_t v47 = (char *)*((void *)v18 + 17);
            }
            goto LABEL_231;
          }
          while (2)
          {
            if (v69 != v67)
            {
              uint64_t v94 = v69;
              uint64_t v95 = v92;
              goto LABEL_161;
            }
            if (v92 < v71)
            {
              uint64_t v97 = (v71 - v92) >> 3;
              if (v97 >= -1) {
                unint64_t v98 = v97 + 1;
              }
              else {
                unint64_t v98 = v97 + 2;
              }
              uint64_t v95 = &v92[8 * (v98 >> 1)];
              uint64_t v94 = &v69[8 * (v98 >> 1)];
              if (v92 == v69)
              {
                uint64_t v67 = v92;
              }
              else
              {
                memmove(&v69[8 * (v98 >> 1)], v69, v92 - v69);
                uint64_t v67 = v69;
              }
LABEL_161:
              uint64_t v96 = *((void *)v47 - 1);
              v47 -= 8;
              *((void *)v94 - 1) = v96;
              unint64_t v69 = v94 - 8;
              uint64_t v92 = v95;
              if (v47 == *((char **)v18 + 16)) {
                goto LABEL_158;
              }
              continue;
            }
            break;
          }
          if (v71 == v69) {
            unint64_t v99 = 1;
          }
          else {
            unint64_t v99 = (v71 - v69) >> 2;
          }
          if (v99 >> 61) {
            goto LABEL_302;
          }
          uint64_t v100 = (char *)operator new(8 * v99);
          uint64_t v67 = v100;
          unint64_t v101 = (v99 + 3) >> 2;
          uint64_t v94 = &v100[8 * v101];
          uint64_t v95 = v94;
          int64_t v102 = v92 - v69;
          if (v92 != v69)
          {
            uint64_t v95 = &v94[v102 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v103 = v102 - 8;
            unint64_t v104 = &v100[8 * v101];
            uint64_t v105 = v69;
            if (v103 < 0x38
              || (v106 = 8 * v101, unint64_t v104 = &v100[8 * v101], v105 = v69, (unint64_t)(v104 - v69) < 0x20))
            {
              do
              {
LABEL_180:
                uint64_t v113 = *(void *)v105;
                v105 += 8;
                *(void *)unint64_t v104 = v113;
                v104 += 8;
              }
              while (v104 != v95);
            }
            else
            {
              uint64_t v107 = (v103 >> 3) + 1;
              uint64_t v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v104 = &v94[v108];
              uint64_t v109 = (long long *)(v69 + 16);
              unint64_t v110 = &v100[v106 + 16];
              uint64_t v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v112 = *v109;
                *((_OWORD *)v110 - 1) = *(v109 - 1);
                *(_OWORD *)unint64_t v110 = v112;
                v109 += 2;
                v110 += 32;
                v111 -= 4;
              }
              while (v111);
              if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
              {
                uint64_t v105 = &v69[v108];
                goto LABEL_180;
              }
            }
          }
          uint64_t v71 = &v100[8 * v99];
          operator delete(v69);
          goto LABEL_161;
        }
        std::mutex::unlock((std::mutex *)(v18 + 8));
LABEL_241:
        if (v223 == v222)
        {
          (*(void (**)(void *))(v222[0] + 32))(v222);
        }
        else if (v223)
        {
          (*(void (**)(void))(*v223 + 40))();
        }
        if (v221 == v220)
        {
          (*(void (**)(void *))(v220[0] + 32))(v220);
        }
        else if (v221)
        {
          (*(void (**)(void))(*v221 + 40))();
        }
        if (!v188) {
          std::__assoc_sub_state::wait(v194.__state_);
        }
        if (*(unsigned char **)&v229[2] == v225)
        {
          (*(void (**)(unsigned char *))(*(void *)v225 + 32))(v225);
        }
        else if (*(void *)&v229[2])
        {
          (*(void (**)(void))(**(void **)&v229[2] + 40))();
        }
        std::future<void>::~future(&v194);
        MEMORY[0x1A62390B0](&v195);
        if (v202 == v201)
        {
          (*(void (**)(void *))(v201[0] + 32))(v201);
        }
        else if (v202)
        {
          (*(void (**)(void))(*v202 + 40))();
        }
        if (v200 == v199)
        {
          (*(void (**)(void *))(v199[0] + 32))(v199);
        }
        else if (v200)
        {
          (*(void (**)(void))(*v200 + 40))();
        }
LABEL_68:
        if (atomic_load(&v193)) {
          goto LABEL_57;
        }
      }
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 16))(v38);
LABEL_84:
      unint64_t v200 = (void *)v38;
      goto LABEL_86;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v190 + 32))(v190);
  uint64_t v20 = *(char **)(v7 + 96);
  uint64_t v21 = *(char **)(v7 + 104);
  uint64_t v22 = v7 + 96;
  if (v20 != v21)
  {
    while (*v20 != 2)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_38;
      }
    }
  }
  if (v20 == v21)
  {
LABEL_38:
    LOBYTE(v209) = 2;
    uint64_t v210 = 0;
    uint64_t v20 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v22, (unsigned __int8 *)&v209);
  }
  (*(void (**)(uint64_t, void))(*(void *)v16 + 56))(v16, *((void *)v20 + 1));
}

void sub_1A1970824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,std::future<void> a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(v67);
  operator delete(v68);
  std::mutex::unlock(v66);
  uint64_t v71 = *(void *)(v69 - 168);
  if (v71 == v69 - 192)
  {
    (*(void (**)(uint64_t))(*(void *)(v69 - 192) + 32))(v69 - 192);
  }
  else if (v71)
  {
    (*(void (**)(uint64_t))(*(void *)v71 + 40))(v71);
  }
  uint64_t v72 = *(void *)(v69 - 200);
  if (v72 == a11)
  {
    (*(void (**)(void))(*(void *)(v69 - 224) + 32))();
  }
  else if (v72)
  {
    (*(void (**)(uint64_t))(*(void *)v72 + 40))(v72);
  }
  uint64_t v73 = *(void *)(v69 - 128);
  if (v73 == a12)
  {
    (*(void (**)(void))(*(void *)(v69 - 152) + 32))();
  }
  else if (v73)
  {
    (*(void (**)(uint64_t))(*(void *)v73 + 40))(v73);
  }
  std::future<void>::~future(&a25);
  MEMORY[0x1A62390B0](&a26);
  if ((uint64_t *)a41 == &a38)
  {
    (*(void (**)(uint64_t *))(a38 + 32))(&a38);
  }
  else if (a41)
  {
    (*(void (**)(void))(*(void *)a41 + 40))();
  }
  if (a36 == a13)
  {
    (*(void (**)(void))(a33 + 32))();
  }
  else if (a36)
  {
    (*(void (**)(void))(*(void *)a36 + 40))();
  }
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a50);
  _Block_object_dispose(&a54, 8);
  if (a65 == a9)
  {
    (*(void (**)(void))(a62 + 32))();
  }
  else if (a65)
  {
    (*(void (**)(void))(*(void *)a65 + 40))();
  }

  if ((uint64_t *)a30 == &a27)
  {
    (*(void (**)(uint64_t *))(a27 + 32))(&a27);
    _Unwind_Resume(a1);
  }
  if (a30)
  {
    (*(void (**)(void))(*(void *)a30 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = *(int8x8_t **)(a2 + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v3);
  BOOL v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v57, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v55, v9, v6, v4, *(void *)(v9 + 32));
  if (v56 == v60)
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      unint64_t *result = *v11;
      unint64_t v12 = *v11;
      unint64_t v13 = HIDWORD(*v11);
      unint64_t v14 = v12 >> 39;
      uint64_t v15 = v6[4];
      if (v12 >> 39 < (v6[5] - v15) >> 3
        && (uint64_t v16 = *(void *)(v15 + 8 * v14)) != 0
        && (unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v19 = v6[7],
            uint64_t v18 = v6[8],
            v17 < (v18 - v19) >> 3)
        && ((uint64_t v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == v13) : (v21 = 0), v21))
      {
        uint64_t v54 = 33 * v17;
        uint64_t v22 = v6[11];
        uint64_t v23 = v6[10] + v54;
      }
      else
      {
        uint64_t v22 = v6[11];
        uint64_t v23 = v22;
      }
      if (v23 == v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      uint64_t v25 = v4[4];
      if (v14 < (v4[5] - v25) >> 3
        && (uint64_t v26 = *(void *)(v25 + 8 * v14)) != 0
        && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v12) & 0x7F)),
            uint64_t v29 = v4[7],
            uint64_t v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == v13) : (v31 = 0), v31))
      {
        uint64_t v32 = v4[11];
        uint64_t v33 = v4[10] + 16 * v27;
      }
      else
      {
        uint64_t v32 = v4[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v33;
      }
      *(unsigned char *)(v24 + 2) = 1;
      *(unsigned char *)(v24 + 3) = *(unsigned char *)(v34 + 8);
      dispatch_time_t v35 = v60;
      uint64_t v11 = *(unint64_t **)(v57 + 32);
      if (++v60 != v11)
      {
        uint64_t v36 = v58[4];
        unint64_t v37 = (v58[5] - v36) >> 3;
        uint64_t v38 = v35 + 2;
        while (1)
        {
          unint64_t v39 = *((unsigned int *)v38 - 1);
          unint64_t v40 = v39 >> 7;
          if (v39 >> 7 < v37)
          {
            uint64_t v41 = *(void *)(v36 + 8 * v40);
            if (v41)
            {
              unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (v39 & 0x7F));
              uint64_t v44 = v58[7];
              uint64_t v43 = v58[8];
              if (v42 < (v43 - v44) >> 3)
              {
                uint64_t v45 = v44 + 8 * v42;
                if (v45 != v43 && *(_DWORD *)(v45 + 4) == v39)
                {
                  uint64_t v47 = v59[4];
                  if (v40 < (v59[5] - v47) >> 3)
                  {
                    uint64_t v48 = *(void *)(v47 + 8 * v40);
                    if (v48)
                    {
                      unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * (v39 & 0x7F));
                      uint64_t v50 = v59[7];
                      uint64_t v51 = v59[8];
                      if (v49 < (v51 - v50) >> 3)
                      {
                        uint64_t v52 = v50 + 8 * v49;
                        if (v52 != v51 && *(_DWORD *)(v52 + 4) == v39) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          int64_t v60 = v38;
          BOOL v21 = v38++ == v11;
          if (v21) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = v38 - 1;
      }
LABEL_9:
      ;
    }
    while (v56 != v11);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::ita::FrameHandle>(*(int8x8_t **)(a2 + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  BOOL v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((unint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      BOOL v21 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        uint64_t *v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = (void *)(v4[10] + 8 * v27);
        }
        else
        {
          uint64_t v33 = (void *)v4[11];
        }
        uint64_t v34 = ***(uint64_t ****)(a1 + 8);
        if (v34 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v34 != 0x8C3843AC816FCBCLL)
        {
          dispatch_time_t v35 = v34 + 5;
          do
          {
            uint64_t v36 = *v35;
            v35 += 5;
          }
          while (v36 != 0x8C3843AC816FCBCLL);
          uint64_t v34 = v35 - 5;
        }
        uint64_t v37 = v34[3];
        uint64_t v38 = (std::__shared_weak_count *)v34[4];
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        (*(void (**)(uint64_t, void))(*(void *)v37 + 48))(v37, *v33);
        if (v39)
        {
          unint64_t v40 = *(void **)(a1 + 8);
          uint64_t v41 = *v21;
          uint64_t v51 = (void (**)(void **))&unk_1EF523828;
          *(void *)&long long v52 = 0;
          *((void *)&v52 + 1) = v41;
          uint64_t v53 = (void **)&v51;
          uint64_t v56 = &v54;
          uint64_t v54 = &unk_1EF523828;
          long long v55 = v52;
          int v57 = 0;
          ecs2::Runtime::queueCommand(v40, (uint64_t)&v54);
          if (v57 != -1) {
            ((void (*)(char *, void **))off_1EF5904C0[v57])(&v50, &v54);
          }
          int v57 = -1;
          if (v53 == (void **)&v51)
          {
            v51[4]((void **)&v51);
          }
          else if (v53)
          {
            (*((void (**)(void))*v53 + 5))();
          }
        }
        uint64_t v42 = v4[4];
        uint64_t v43 = v4[7];
        uint64_t v22 = (uint64_t *)v4[8];
        uint64_t v44 = (uint64_t *)(v6 + 1);
        while (v44 != v22)
        {
          unint64_t v45 = *((unsigned int *)v44 + 1);
          uint64_t v46 = v4[8];
          if (v45 >> 7 < (v4[5] - v42) >> 3)
          {
            uint64_t v47 = *(void *)(v42 + 8 * (v45 >> 7));
            uint64_t v46 = v4[8];
            if (v47)
            {
              unint64_t v48 = *(unsigned __int16 *)(v47 + 2 * (v45 & 0x7F));
              uint64_t v46 = v4[8];
              if (((uint64_t)v22 - v43) >> 3 > v48)
              {
                uint64_t v46 = v43 + 8 * v48;
                if (*(_DWORD *)(v46 + 4) != v45) {
                  uint64_t v46 = v4[8];
                }
              }
            }
          }
          ++v44;
          if ((uint64_t *)v46 != v22)
          {
            uint64_t v22 = v44 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    uint64_t v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      uint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            uint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              uint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  void *result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCAA3A5E853432887;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCAA3A5E853432887;
    if (*(void *)&v1 <= 0xCAA3A5E853432887) {
      unint64_t v3 = 0xCAA3A5E853432887 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCAA3A5E853432887;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (BOOL v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCAA3A5E853432887)
      {
        if (v5[2] == 0xCAA3A5E853432887) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      BOOL v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCAA3A5E853432887) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    BOOL v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCAA3A5E853432887) {
    goto LABEL_11;
  }
  return v5[3];
}